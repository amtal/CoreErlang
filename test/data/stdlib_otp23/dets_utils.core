module 'dets_utils' ['all_allocated'/1,
		     'all_allocated_as_list'/1,
		     'all_free'/1,
		     'alloc'/2,
		     'alloc_many'/4,
		     'bad_object'/2,
		     'cache_lookup'/4,
		     'cache_size'/1,
		     'cmp'/2,
		     'code_to_type'/1,
		     'corrupt'/2,
		     'corrupt_file'/2,
		     'corrupt_reason'/2,
		     'debug_mode'/0,
		     'disk_map_segment'/2,
		     'disk_map_segment_p'/2,
		     'empty_free_lists'/0,
		     'family'/1,
		     'file_error'/2,
		     'find_allocated'/4,
		     'find_next_allocated'/3,
		     'free'/3,
		     'fwrite'/3,
		     'get_freelists'/1,
		     'init_alloc'/1,
		     'init_disk_map'/1,
		     'ipread'/3,
		     'is_empty_cache'/1,
		     'list_to_tree'/1,
		     'log2'/1,
		     'make_zeros'/1,
		     'mkeysearch'/3,
		     'mkeysort'/2,
		     'module_info'/0,
		     'module_info'/1,
		     'msort'/1,
		     'new_cache'/1,
		     'open'/2,
		     'position'/2,
		     'position'/3,
		     'position_close'/3,
		     'pread'/2,
		     'pread'/4,
		     'pread_close'/4,
		     'pread_n'/3,
		     'pwrite'/2,
		     'pwrite'/3,
		     'read_4'/2,
		     'read_n'/2,
		     'rename'/2,
		     'reset_cache'/1,
		     'stop_disk_map'/0,
		     'sync'/1,
		     'tree_to_bin'/5,
		     'truncate'/2,
		     'truncate'/3,
		     'type_to_code'/1,
		     'vformat'/2,
		     'write'/2,
		     'write_file'/2]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[100|[101|[116|[115|[95|[117|[116|[105|[108|[115|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],1}],
		%% Line 49
		'compile' =
		    %% Line 49
		    [{'inline',[{'sz2pos',1}|[{'adjust_addr',3}]]}],
		%% Line 50
		'compile' =
		    %% Line 50
		    [{'inline',[{'bplus_mk_leaf',1}|[{'bplus_get_size',1}|[{'bplus_get_tree',2}|[{'bplus_get_lkey',2}|[{'bplus_get_rkey',2}]]]]]}],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[100|[101|[116|[115|[46|[104|[114|[108]]]]]]]]]]]],1}],
		%% Line 49
		'type' =
		    %% Line 49
		    [{'access',{'type',49,'union',[{'atom',49,'read'}|[{'atom',49,'read_write'}]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{'auto_save',{'type',50,'union',[{'atom',50,'infinity'}|[{'type',50,'non_neg_integer',[]}]]},[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{'hash_bif',{'type',51,'union',[{'atom',51,'phash'}|[{'atom',51,'phash2'}]]},[]}],
		%% Line 52
		'type' =
		    %% Line 52
		    [{'keypos',{'type',52,'pos_integer',[]},[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'no_colls',{'type',53,'list',[{'type',53,'tuple',[{'ann_type',53,[{'var',53,'LogSize'}|[{'type',53,'non_neg_integer',[]}]]}|[{'ann_type',54,[{'var',54,'NoCollections'}|[{'type',54,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{'no_slots',{'type',55,'union',[{'atom',55,'default'}|[{'type',55,'non_neg_integer',[]}]]},[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{'tab_name',{'type',56,'term',[]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{'type',{'type',57,'union',[{'atom',57,'bag'}|[{'atom',57,'duplicate_bag'}|[{'atom',57,'set'}]]]},[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'update_mode',{'type',58,'union',[{'atom',58,'dirty'}|[{'atom',59,'new_dirty'}|[{'atom',60,'saved'}|[{'type',61,'tuple',[{'atom',61,'error'}|[{'ann_type',61,[{'var',61,'Reason'}|[{'type',61,'term',[]}]]}]]}]]]]},[]}],
		%% Line 64
		'record' =
		    %% Line 64
		    [{'head',[{'typed_record_field',{'record_field',65,{'atom',65,'m'}},{'type',65,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',66,{'atom',66,'m2'}},{'type',66,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',67,{'atom',67,'next'}},{'type',67,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',69,{'atom',69,'fptr'}},{'remote_type',69,[{'atom',69,'file'}|[{'atom',69,'fd'}|[[]]]]}}|[{'typed_record_field',{'record_field',70,{'atom',70,'no_objects'}},{'type',70,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',71,{'atom',71,'no_keys'}},{'type',71,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',72,{'atom',72,'maxobjsize'}},{'type',72,'union',[{'atom',72,'undefined'}|[{'type',72,'non_neg_integer',[]}]]}}|[{'record_field',74,{'atom',74,'n'}}|[{'typed_record_field',{'record_field',75,{'atom',75,'type'}},{'user_type',75,'type',[]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'keypos'}},{'user_type',76,'keypos',[]}}|[{'typed_record_field',{'record_field',77,{'atom',77,'freelists'}},{'type',77,'union',[{'atom',77,'undefined'}|[{'type',78,'tuple','any'}]]}}|[{'typed_record_field',{'record_field',80,{'atom',80,'freelists_p'}},{'type',80,'union',[{'atom',80,'undefined'}|[{'type',81,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',82,{'atom',82,'no_collections'}},{'type',82,'union',[{'atom',82,'undefined'}|[{'user_type',83,'no_colls',[]}]]}}|[{'typed_record_field',{'record_field',85,{'atom',85,'auto_save'}},{'user_type',85,'auto_save',[]}}|[{'typed_record_field',{'record_field',86,{'atom',86,'update_mode'}},{'user_type',86,'update_mode',[]}}|[{'typed_record_field',{'record_field',87,{'atom',87,'fixed'},{'atom',87,'false'}},{'type',87,'union',[{'atom',87,'false'}|[{'type',88,'tuple',[{'type',88,'tuple',[{'type',88,'integer',[]}|[{'type',88,'integer',[]}]]}|[{'type',89,'list',[{'type',89,'tuple',[{'type',89,'pid',[]}|[{'type',90,'non_neg_integer',[]}]]}]}]]}]]}}|[{'typed_record_field',{'record_field',91,{'atom',91,'hash_bif'}},{'user_type',91,'hash_bif',[]}}|[{'typed_record_field',{'record_field',92,{'atom',92,'has_md5'}},{'type',92,'boolean',[]}}|[{'typed_record_field',{'record_field',94,{'atom',94,'min_no_slots'}},{'user_type',94,'no_slots',[]}}|[{'typed_record_field',{'record_field',95,{'atom',95,'max_no_slots'}},{'user_type',95,'no_slots',[]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'cache'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'user_type',96,'cache',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'filename'}},{'remote_type',98,[{'atom',98,'file'}|[{'atom',98,'name'}|[[]]]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'access'},{'atom',99,'read_write'}},{'user_type',99,'access',[]}}|[{'typed_record_field',{'record_field',100,{'atom',100,'ram_file'},{'atom',100,'false'}},{'type',100,'boolean',[]}}|[{'typed_record_field',{'record_field',101,{'atom',101,'name'}},{'user_type',101,'tab_name',[]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'parent'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'pid',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'server'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'pid',[]}]]}}|[{'typed_record_field',{'record_field',106,{'atom',106,'bump'}},{'type',106,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'base'}},{'type',107,'non_neg_integer',[]}}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}],
		%% Line 112
		'record' =
		    %% Line 112
		    [{'fileheader',[{'typed_record_field',{'record_field',113,{'atom',113,'freelist'}},{'type',113,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'fl_base'}},{'type',114,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'cookie'}},{'type',115,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'closed_properly'}},{'type',116,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'type'}},{'type',117,'union',[{'atom',117,'badtype'}|[{'user_type',117,'type',[]}]]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'version'}},{'type',118,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'m'}},{'type',119,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'next'}},{'type',120,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'keypos'}},{'user_type',121,'keypos',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'no_objects'}},{'type',122,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'no_keys'}},{'type',123,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'min_no_slots'}},{'type',124,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'max_no_slots'}},{'type',125,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',126,{'atom',126,'no_colls'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'user_type',126,'no_colls',[]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'hash_method'}},{'type',127,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'read_md5'}},{'type',128,'binary',[]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'has_md5'}},{'type',129,'boolean',[]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'md5'}},{'type',130,'binary',[]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'trailer'}},{'type',131,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'eof'}},{'type',132,'non_neg_integer',[]}}|[{'record_field',133,{'atom',133,'n'}}]]]]]]]]]]]]]]]]]]]]]}],
		%% Line 136
		'type' =
		    %% Line 136
		    [{'delay',{'type',136,'non_neg_integer',[]},[]}],
		%% Line 137
		'type' =
		    %% Line 137
		    [{'threshold',{'type',137,'non_neg_integer',[]},[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{'cache_parms',{'type',139,'tuple',[{'ann_type',139,[{'var',139,'Delay'}|[{'user_type',139,'delay',[]}]]}|[{'ann_type',141,[{'var',141,'Size'}|[{'user_type',141,'threshold',[]}]]}]]},[]}],
		%% Line 144
		'record' =
		    %% Line 144
		    [{'cache',[{'typed_record_field',{'record_field',145,{'atom',145,'cache'}},{'type',146,'list',[{'type',146,'tuple',[{'ann_type',146,[{'var',146,'Key'}|[{'type',146,'term',[]}]]}|[{'type',147,'tuple',[{'ann_type',147,[{'var',147,'Seq'}|[{'type',147,'non_neg_integer',[]}]]}|[{'ann_type',147,[{'var',147,'Item'}|[{'type',147,'term',[]}]]}]]}]]}]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'csize'}},{'type',148,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'inserts'}},{'type',150,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',151,{'atom',151,'wrtime'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'integer',[]}]]}}|[{'typed_record_field',{'record_field',152,{'atom',152,'tsize'}},{'user_type',152,'threshold',[]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'delay'}},{'user_type',153,'delay',[]}}]]]]]]}],
		%% Line 156
		'type' =
		    %% Line 156
		    [{'cache',{'type',156,'record',[{'atom',156,'cache'}]},[]}],
		%% Line 59
		'file' =
		    %% Line 59
		    [{[115|[114|[99|[47|[100|[101|[116|[115|[95|[117|[116|[105|[108|[115|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],59}],
		%% Line 729
		'dialyzer' =
		    %% Line 729
		    [{'no_improper_lists',{'all_allocated_as_list',4}}]]
'cmp'/2 =
    %% Line 64
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <T,_12>
		  when call 'erlang':'=:='
			(_12,
			 T) ->
		  %% Line 65
		  0
	      %% Line 66
	      <[E1|T1],[E2|T2]> when 'true' ->
		  %% Line 67
		  case apply 'cmp'/2
			   (E1, E2) of
		    %% Line 68
		    <0> when 'true' ->
			apply 'cmp'/2
			    (T1, T2)
		    %% Line 69
		    <R> when 'true' ->
			R
		  end
	      %% Line 71
	      <T1,T2>
		  when try
			let <_4> =
			    call 'erlang':'tuple_size'
				(T1)
			in  let <_3> =
				call 'erlang':'tuple_size'
				    (T2)
			    in  call 'erlang':'=:='
				    (_4, _3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  let <_5> =
		      call %% Line 72
			   'erlang':%% Line 72
				    'tuple_size'
			  (%% Line 72
			   T1)
		  in  %% Line 72
		      apply 'tcmp'/4
			  (T1, T2, 1, _5)
	      %% Line 73
	      <I,F>
		  when let <_6> =
			call 'erlang':'is_integer'
			    (I)
		    in  let <_7> =
			    call 'erlang':'is_float'
				(F)
			in  call 'erlang':'and'
				(_6, _7) ->
		  %% Line 74
		  -1
	      %% Line 75
	      <F,I>
		  when let <_8> =
			call 'erlang':'is_float'
			    (F)
		    in  let <_9> =
			    call 'erlang':'is_integer'
				(I)
			in  call 'erlang':'and'
				(_8, _9) ->
		  %% Line 76
		  1
	      %% Line 77
	      <T1,T2>
		  when call 'erlang':'<'
			(T1,
			 T2) ->
		  %% Line 78
		  -1
	      %% Line 79
	      <_X_T1,_X_T2> when 'true' ->
		  %% Line 80
		  1
	    end
	    -| [{'function',{'cmp',2}}] )
      -| [{'function',{'cmp',2}}] )
'tcmp'/4 =
    %% Line 82
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <T1,T2,I,_14>
		  when call 'erlang':'=:='
			(_14,
			 I) ->
		  let <_5> =
		      call %% Line 83
			   'erlang':%% Line 83
				    'element'
			  (%% Line 83
			   I, %% Line 83
			      T1)
		  in  let <_4> =
			  call %% Line 83
			       'erlang':%% Line 83
					'element'
			      (%% Line 83
			       I, %% Line 83
				  T2)
		      in  %% Line 83
			  apply 'cmp'/2
			      (_5, _4)
	      %% Line 84
	      <T1,T2,I,N> when 'true' ->
		  let <_7> =
		      call %% Line 85
			   'erlang':%% Line 85
				    'element'
			  (%% Line 85
			   I, %% Line 85
			      T1)
		  in  let <_6> =
			  call %% Line 85
			       'erlang':%% Line 85
					'element'
			      (%% Line 85
			       I, %% Line 85
				  T2)
		      in  %% Line 85
			  case apply 'cmp'/2
				   (_7, _6) of
			    %% Line 86
			    <0> when 'true' ->
				let <_8> =
				    call 'erlang':'+'
					(I, 1)
				in  apply 'tcmp'/4
					(T1, T2, _8, N)
			    %% Line 87
			    <R> when 'true' ->
				R
			  end
	    end
	    -| [{'function',{'tcmp',4}}] )
      -| [{'function',{'tcmp',4}}] )
'msort'/1 =
    %% Line 90
    ( fun (_0) ->
	  let <F> =
	      fun (_3,_2) ->
		  let <_1> =
		      apply %% Line 92
			    'cmp'/2
			  (_3, _2)
		  in  %% Line 92
		      call 'erlang':'=<'
			  (_1, 0)
	  in  let <_7> =
		  call %% Line 93
		       'lists':%% Line 93
			       'sort'
		      (( _0
			 -| [{'function',{'msort',1}}] ))
	      in  %% Line 93
		  call 'lists':'sort'
		      (F, _7)
      -| [{'function',{'msort',1}}] )
'mkeysort'/2 =
    %% Line 95
    ( fun (_0,_1) ->
	  let <F> =
	      fun (_6,_5) ->
		  let <_3> =
		      call %% Line 96
			   'erlang':%% Line 96
				    'element'
			  (_0, _6)
		  in  let <_2> =
			  call %% Line 96
			       'erlang':%% Line 96
					'element'
			      (_0, _5)
		      in  let <_4> =
			      apply %% Line 96
				    'cmp'/2
				  (_3, _2)
			  in  %% Line 96
			      call 'erlang':'=<'
				  (_4, 0)
	  in  let <_10> =
		  call %% Line 98
		       'lists':%% Line 98
			       'keysort'
		      (_0, _1)
	      in  %% Line 98
		  call 'lists':'sort'
		      (F, _10)
      -| [{'function',{'mkeysort',2}}] )
'mkeysearch'/3 =
    %% Line 100
    ( fun (_0,_1,_2) ->
	  %% Line 101
	  case call 'lists':'keysearch'
		   (_0, _1, _2) of
	    %% Line 102
	    <Reply = {'value',Value}>
		when try
		      let <_3> =
			  call 'erlang':'element'
			      (_1, Value)
		      in  call 'erlang':'=:='
			      (_3, _0)
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false' ->
		%% Line 103
		Reply
	    %% Line 104
	    <'false'> when 'true' ->
		%% Line 105
		'false'
	    %% Line 106
	    <_8> when 'true' ->
		%% Line 107
		apply 'mkeysearch2'/3
		    (_0, _1, _2)
	  end
      -| [{'function',{'mkeysearch',3}}] )
'mkeysearch2'/3 =
    %% Line 110
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <_X_Key,_X_I,[]> when 'true' ->
		  %% Line 111
		  'false'
	      %% Line 112
	      <Key,I,[E|_X_L]>
		  when try
			let <_3> =
			    call 'erlang':'element'
				(I, E)
			in  call 'erlang':'=:='
				(_3, Key)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  %% Line 113
		  {'value',E}
	      %% Line 114
	      <Key,I,[_7|L]> when 'true' ->
		  %% Line 115
		  apply 'mkeysearch2'/3
		      (Key, I, L)
	      ( <_6,_5,_4> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_6,_5,_4})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'mkeysearch2',3}}] )
      -| [{'function',{'mkeysearch2',3}}] )
'family'/1 =
    %% Line 120
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'family',1}}] ) of
	      <[]> when 'true' ->
		  %% Line 121
		  []
	      %% Line 122
	      <L> when 'true' ->
		  %% Line 123
		  case apply 'mkeysort'/2
			   (1, L) of
		    <[{K,V}|KVL]> when 'true' ->
			%% Line 124
			apply 'per_key'/4
			    (KVL, K, [V|[]], [])
		    ( <_1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_1})
		      -| ['compiler_generated'] )
		  end
	    end
	    -| [{'function',{'family',1}}] )
      -| [{'function',{'family',1}}] )
'per_key'/4 =
    %% Line 126
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <[],K,Vs,KVs> when 'true' ->
		  let <_4> =
		      apply %% Line 127
			    'msort'/1
			  (%% Line 127
			   Vs)
		  in  %% Line 127
		      call 'lists':'reverse'
			  (KVs, [{K,_4}|[]])
	      %% Line 128
	      <[{K,V}|L],_10,Vs,KVs>
		  when call 'erlang':'=:='
			(_10,
			 K) ->
		  %% Line 129
		  apply 'per_key'/4
		      (L, K, [V|Vs], KVs)
	      %% Line 130
	      <[{K1,V}|L],K,Vs,KVs> when 'true' ->
		  let <_5> =
		      apply %% Line 131
			    'msort'/1
			  (%% Line 131
			   Vs)
		  in  %% Line 131
		      apply 'per_key'/4
			  (L, K1, [V|[]], [{K,_5}|KVs])
	      ( <_9,_8,_7,_6> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_9,_8,_7,_6})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'per_key',4}}] )
      -| [{'function',{'per_key',4}}] )
'rename'/2 =
    %% Line 133
    ( fun (_0,_1) ->
	  %% Line 134
	  case call 'file':'rename'
		   (_0, _1) of
	    %% Line 135
	    <'ok'> when 'true' ->
		%% Line 136
		'ok'
	    %% Line 137
	    <{'error',Reason}> when 'true' ->
		%% Line 138
		{'error',{'file_error',{_0,_1},Reason}}
	    ( <_2> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_2})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'rename',2}}] )
'pread'/2 =
    %% Line 142
    ( fun (_0,_1) ->
	  %% Line 143
	  ( case _1 of
	      ( <( {'head',_20,_21,_22,_rec0,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47}
		   -| ['compiler_generated'] )> when 'true' ->
		    let <_14> =
			case call 'file':'pread'
				 (_rec0, _0) of
			  %% Line 144
			  <_@r0 = {'ok',Bins}> when 'true' ->
			      %% Line 146
			      case call 'lists':'member'
				       ('eof', Bins) of
				%% Line 147
				<'true'> when 'true' ->
				    %% Line 148
				    ( case _1 of
					( <( {'head',_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_rec1,_70,_71,_72,_73,_74,_75,_76}
					     -| ['compiler_generated'] )> when 'true' ->
					      {'error',{'premature_eof',_rec1}}
					  -| ['compiler_generated'] )
					( <_77> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','head'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				%% Line 149
				<'false'> when 'true' ->
				    %% Line 150
				    _@r0
				( <_6> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_6})
				  -| ['compiler_generated'] )
			      end
			  %% Line 152
			  <{'error',Reason}>
			      when let <_7> =
				    call 'erlang':'=:='
					('enomem', Reason)
				in  let <_8> =
					call 'erlang':'=:='
					    ('einval', Reason)
				    in  call 'erlang':'or'
					    (_7, _8) ->
			      %% Line 153
			      ( case _1 of
				  ( <( {'head',_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_rec2,_99,_100,_101,_102,_103,_104,_105}
				       -| ['compiler_generated'] )> when 'true' ->
					{'error',{'bad_object_header',_rec2}}
				    -| ['compiler_generated'] )
				  ( <_106> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','head'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 154
			  <{'error',Reason}> when 'true' ->
			      %% Line 155
			      ( case _1 of
				  ( <( {'head',_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_rec3,_128,_129,_130,_131,_132,_133,_134}
				       -| ['compiler_generated'] )> when 'true' ->
					{'file_error',_rec3,Reason}
				    -| ['compiler_generated'] )
				  ( <_135> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','head'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  ( <_13> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_13})
			    -| ['compiler_generated'] )
			end
		    in  %% Line 157
			case _14 of
			  %% Line 158
			  <{'ok',_X_Bins}> when 'true' ->
			      _14
			  %% Line 160
			  <Error> when 'true' ->
			      let <_16> =
				  apply %% Line 161
					'corrupt'/2
				      (_1, %% Line 161
					   Error)
			      in  %% Line 161
				  call 'erlang':'throw'
				      (_16)
			end
		-| ['compiler_generated'] )
	      ( <_48> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'pread',2}}] )
'pread'/4 =
    %% Line 165
    ( fun (_0,_1,_2,_3) ->
	  %% Line 166
	  ( case _0 of
	      ( <( {'head',_25,_26,_27,_rec4,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52}
		   -| ['compiler_generated'] )> when 'true' ->
		    let <_4> =
			call 'erlang':'+'
			    (_2, _3)
		    in  let <_17> =
			    case call 'file':'pread'
				     (_rec4, _1, _4) of
			      %% Line 167
			      <{'error',Reason}>
				  when let <_7> =
					call 'erlang':'=:='
					    ('enomem', Reason)
				    in  let <_8> =
					    call 'erlang':'=:='
						('einval', Reason)
					in  call 'erlang':'or'
						(_7, _8) ->
				  %% Line 168
				  ( case _0 of
				      ( <( {'head',_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_rec5,_75,_76,_77,_78,_79,_80,_81}
					   -| ['compiler_generated'] )> when 'true' ->
					    {'error',{'bad_object_header',_rec5}}
					-| ['compiler_generated'] )
				      ( <_82> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','head'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 169
			      <{'error',Reason}> when 'true' ->
				  %% Line 170
				  ( case _0 of
				      ( <( {'head',_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_rec6,_104,_105,_106,_107,_108,_109,_110}
					   -| ['compiler_generated'] )> when 'true' ->
					    {'file_error',_rec6,Reason}
					-| ['compiler_generated'] )
				      ( <_111> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','head'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 171
			      <{'ok',Bin}>
				  when try
					let <_13> =
					    call 'erlang':'byte_size'
						(Bin)
					in  call 'erlang':'<'
						(_13, _2)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  %% Line 172
				  ( case _0 of
				      ( <( {'head',_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_rec7,_133,_134,_135,_136,_137,_138,_139}
					   -| ['compiler_generated'] )> when 'true' ->
					    {'error',{'premature_eof',_rec7}}
					-| ['compiler_generated'] )
				      ( <_140> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','head'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 173
			      <OK> when 'true' ->
				  OK
			    end
			in  %% Line 175
			    case _17 of
			      %% Line 176
			      <{'ok',_X_Bin}> when 'true' ->
				  _17
			      %% Line 178
			      <Error> when 'true' ->
				  let <_19> =
				      apply %% Line 179
					    'corrupt'/2
					  (_0, %% Line 179
					       Error)
				  in  %% Line 179
				      call 'erlang':'throw'
					  (_19)
			    end
		-| ['compiler_generated'] )
	      ( <_53> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'pread',4}}] )
'ipread'/3 =
    %% Line 183
    ( fun (_0,_1,_2) ->
	  do  %% Line 184
	      try
		  %% Line 185
		  apply 'disk_map_pread'/1
		      (_1)
	      of <_3> ->
		  _3
	      catch <_6,_5,_4> ->
		  %% Line 186
		  case <_6,_5,_4> of
		    <( 'throw'
		       -| ['compiler_generated'] ),Bad,_14> when 'true' ->
			let <_7> =
			    apply %% Line 187
				  'corrupt_reason'/2
				(_0, %% Line 187
				     {'disk_map',Bad})
			in  %% Line 187
			    call 'erlang':'throw'
				(_7)
		    ( <_44,_45,_46> when 'true' ->
			  primop 'raise'
			      (_46, _45)
		      -| ['compiler_generated'] )
		  end
	      %% Line 189
	      ( case _0 of
		  ( <( {'head',_15,_16,_17,_rec8,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'file':'ipread_s32bu_p32bu'
				 (_rec8, _1, _2) of
			  %% Line 190
			  <{'ok',{0,0,'eof'}}> when 'true' ->
			      %% Line 191
			      []
			  %% Line 192
			  <_@r0 = {'ok',Reply}> when 'true' ->
			      %% Line 193
			      _@r0
			  %% Line 194
			  <_X_Else> when 'true' ->
			      %% Line 195
			      'eof'
			end
		    -| ['compiler_generated'] )
		  ( <_43> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','head'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
      -| [{'function',{'ipread',3}}] )
'pwrite'/2 =
    %% Line 199
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Head,[]> when 'true' ->
		  %% Line 200
		  {Head,'ok'}
	      %% Line 201
	      <Head,Bins> when 'true' ->
		  do  %% Line 202
		      try
			  %% Line 203
			  apply 'disk_map'/1
			      (Bins)
		      of <_2> ->
			  _2
		      catch <_5,_4,_3> ->
			  %% Line 204
			  case <_5,_4,_3> of
			    <( 'throw'
			       -| ['compiler_generated'] ),Bad,_12> when 'true' ->
				let <_6> =
				    apply %% Line 205
					  'corrupt_reason'/2
					(%% Line 205
					 Head, %% Line 205
					       {'disk_map',Bad,Bins})
				in  %% Line 205
				    call 'erlang':'throw'
					(_6)
			    ( <_42,_43,_44> when 'true' ->
				  primop 'raise'
				      (_44, _43)
			      -| ['compiler_generated'] )
			  end
		      %% Line 207
		      ( case Head of
			  ( <( {'head',_13,_14,_15,_rec9,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40}
			       -| ['compiler_generated'] )> when 'true' ->
				case call 'file':'pwrite'
					 (_rec9, Bins) of
				  %% Line 208
				  <'ok'> when 'true' ->
				      %% Line 209
				      {Head,'ok'}
				  %% Line 210
				  <Error> when 'true' ->
				      %% Line 211
				      apply 'corrupt_file'/2
					  (Head, Error)
				end
			    -| ['compiler_generated'] )
			  ( <_41> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','head'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	    end
	    -| [{'function',{'pwrite',2}}] )
      -| [{'function',{'pwrite',2}}] )
'write'/2 =
    %% Line 215
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <_X_Head,[]> when 'true' ->
		  %% Line 216
		  'ok'
	      %% Line 217
	      <Head,Bins> when 'true' ->
		  %% Line 218
		  ( case Head of
		      ( <( {'head',_7,_8,_9,_rec10,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34}
			   -| ['compiler_generated'] )> when 'true' ->
			    case call 'file':'write'
				     (_rec10, Bins) of
			      %% Line 219
			      <'ok'> when 'true' ->
				  %% Line 220
				  'ok'
			      %% Line 221
			      <Error> when 'true' ->
				  %% Line 222
				  apply 'corrupt_file'/2
				      (Head, Error)
			    end
			-| ['compiler_generated'] )
		      ( <_35> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	    end
	    -| [{'function',{'write',2}}] )
      -| [{'function',{'write',2}}] )
'write_file'/2 =
    %% Line 227
    ( fun (_0,_1) ->
	  %% Line 228
	  ( case _0 of
	      ( <( {'head',_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_rec11,_35,_36,_37,_38,_39,_40,_41}
		   -| ['compiler_generated'] )> when 'true' ->
		    let <_9> =
			case call 'file':'open'
				 (_rec11, ['binary'|['raw'|['write']]]) of
			  %% Line 229
			  <{'ok',Fd}> when 'true' ->
			      let <R1> =
				  call %% Line 230
				       'file':%% Line 230
					      'write'
				      (%% Line 230
				       Fd, _1)
			      in  let <R2> =
				      call %% Line 231
					   'file':%% Line 231
						  'sync'
					  (%% Line 231
					   Fd)
				  in  let <R3> =
					  call %% Line 232
					       'file':%% Line 232
						      'close'
					      (%% Line 232
					       Fd)
				      in  %% Line 233
					  case <R1,R2,R3> of
					    %% Line 234
					    <( 'ok'
					       -| ['compiler_generated'] ),( 'ok'
									     -| ['compiler_generated'] ),_43>
						when call 'erlang':'=:='
						      (_43,
						       R3) ->
						R3
					    %% Line 235
					    <( 'ok'
					       -| ['compiler_generated'] ),_44,_45>
						when call 'erlang':'=:='
						      (_44,
						       R2) ->
						R2
					    %% Line 236
					    <_46,_47,_48>
						when call 'erlang':'=:='
						      (_46,
						       R1) ->
						R1
					    ( <( _49
						 -| ['compiler_generated'] ),( _50
									       -| ['compiler_generated'] ),( _51
													     -| ['compiler_generated'] )> when 'true' ->
						  let <_7> = {( _49
							 -| ['compiler_generated'] ),( _50
										       -| ['compiler_generated'] ),( _51
														     -| ['compiler_generated'] )}
						  in  primop 'match_fail'
							  ({'case_clause',_7})
					      -| ['compiler_generated'] )
					  end
			  %% Line 238
			  <Else> when 'true' ->
			      %% Line 239
			      Else
			end
		    in  %% Line 241
			case _9 of
			  %% Line 242
			  <'ok'> when 'true' ->
			      %% Line 243
			      'ok'
			  %% Line 244
			  <Error> when 'true' ->
			      %% Line 245
			      apply 'corrupt_file'/2
				  (_0, Error)
			end
		-| ['compiler_generated'] )
	      ( <_42> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'write_file',2}}] )
'truncate'/2 =
    %% Line 249
    ( fun (_0,_1) ->
	  let <_6> =
	      catch
		  %% Line 250
		  ( case _0 of
		      ( <( {'head',_11,_12,_13,_rec12,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}
			   -| ['compiler_generated'] )> when 'true' ->
			    ( case _0 of
				( <( {'head',_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_rec13,_61,_62,_63,_64,_65,_66,_67}
				     -| ['compiler_generated'] )> when 'true' ->
				      apply 'truncate'/3
					  (_rec12, _rec13, _1)
				  -| ['compiler_generated'] )
				( <_68> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','head'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_39> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  in  %% Line 250
	      case _6 of
		%% Line 251
		<'ok'> when 'true' ->
		    %% Line 252
		    'ok'
		%% Line 253
		<Error> when 'true' ->
		    let <_7> =
			apply %% Line 254
			      'corrupt'/2
			    (_0, %% Line 254
				 Error)
		    in  %% Line 254
			call 'erlang':'throw'
			    (_7)
	      end
      -| [{'function',{'truncate',2}}] )
'position'/2 =
    %% Line 258
    ( fun (_0,_1) ->
	  %% Line 259
	  ( case _0 of
	      ( <( {'head',_7,_8,_9,_rec14,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34}
		   -| ['compiler_generated'] )> when 'true' ->
		    case call 'file':'position'
			     (_rec14, _1) of
		      %% Line 260
		      <Error = {'error',_X_Reason}> when 'true' ->
			  %% Line 261
			  apply 'corrupt_file'/2
			      (_0, Error)
		      %% Line 262
		      <OK> when 'true' ->
			  OK
		    end
		-| ['compiler_generated'] )
	      ( <_35> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'position',2}}] )
'sync'/1 =
    %% Line 266
    ( fun (_0) ->
	  %% Line 267
	  ( case ( _0
		   -| [{'function',{'sync',1}}] ) of
	      ( <( {'head',_5,_6,_7,_rec15,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32}
		   -| ['compiler_generated'] )> when 'true' ->
		    case call 'file':'sync'
			     (_rec15) of
		      %% Line 268
		      <'ok'> when 'true' ->
			  %% Line 269
			  'ok'
		      %% Line 270
		      <Error> when 'true' ->
			  %% Line 271
			  apply 'corrupt_file'/2
			      (( _0
				 -| [{'function',{'sync',1}}] ), Error)
		    end
		-| ['compiler_generated'] )
	      ( <_33> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'sync',1}}] )
'open'/2 =
    %% Line 274
    ( fun (_0,_1) ->
	  %% Line 275
	  case call 'file':'open'
		   (_0, _1) of
	    %% Line 276
	    <_@r0 = {'ok',Fd}> when 'true' ->
		%% Line 277
		_@r0
	    %% Line 278
	    <Error> when 'true' ->
		%% Line 279
		apply 'file_error'/2
		    (_0, Error)
	  end
      -| [{'function',{'open',2}}] )
'truncate'/3 =
    %% Line 282
    ( fun (_0,_1,_2) ->
	  do  %% Line 283
	      ( case <> of
		  <>
		      when ( call ( 'erlang'
				 -| ['result_not_wanted'] ):( '=/='
							      -| ['result_not_wanted'] )
			      (_2,
			       ( 'cur'
				 -| ['result_not_wanted'] ))
			  -| ['result_not_wanted'] ) ->
		      apply 'position'/3
			  (_0, _1, _2)
		  ( <> when 'true' ->
			[]
		    -| ['compiler_generated'] )
		end
		-| ['list_comprehension'] )
	      %% Line 284
	      case call 'file':'truncate'
		       (_0) of
		%% Line 285
		<'ok'> when 'true' ->
		    %% Line 286
		    'ok'
		%% Line 287
		<Error> when 'true' ->
		    %% Line 288
		    apply 'file_error'/2
			(_1, {'error',Error})
	      end
      -| [{'function',{'truncate',3}}] )
'fwrite'/3 =
    %% Line 291
    ( fun (_0,_1,_2) ->
	  %% Line 292
	  case call 'file':'write'
		   (_0, _2) of
	    %% Line 293
	    <'ok'> when 'true' ->
		'ok'
	    %% Line 294
	    <Error> when 'true' ->
		apply 'file_error_close'/3
		    (_0, _1, Error)
	  end
      -| [{'function',{'fwrite',3}}] )
'position'/3 =
    %% Line 297
    ( fun (_0,_1,_2) ->
	  %% Line 298
	  case call 'file':'position'
		   (_0, _2) of
	    %% Line 299
	    <_@r0 = {'error',Error}> when 'true' ->
		apply 'file_error'/2
		    (_1, _@r0)
	    %% Line 300
	    <OK> when 'true' ->
		OK
	  end
      -| [{'function',{'position',3}}] )
'position_close'/3 =
    %% Line 303
    ( fun (_0,_1,_2) ->
	  %% Line 304
	  case call 'file':'position'
		   (_0, _2) of
	    %% Line 305
	    <_@r0 = {'error',Error}> when 'true' ->
		apply 'file_error_close'/3
		    (_0, _1, _@r0)
	    %% Line 306
	    <OK> when 'true' ->
		OK
	  end
      -| [{'function',{'position_close',3}}] )
'pwrite'/3 =
    %% Line 309
    ( fun (_0,_1,_2) ->
	  %% Line 310
	  case call 'file':'pwrite'
		   (_0, _2) of
	    %% Line 311
	    <'ok'> when 'true' ->
		%% Line 312
		'ok'
	    %% Line 313
	    <{'error',{_X_NoWrites,Reason}}> when 'true' ->
		%% Line 314
		apply 'file_error'/2
		    (_1, {'error',Reason})
	    ( <_3> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_3})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'pwrite',3}}] )
'pread_close'/4 =
    %% Line 317
    ( fun (_0,_1,_2,_3) ->
	  %% Line 318
	  case call 'file':'pread'
		   (_0, _2, _3) of
	    %% Line 319
	    <_@r0 = {'error',Error}> when 'true' ->
		%% Line 320
		apply 'file_error_close'/3
		    (_0, _1, _@r0)
	    %% Line 321
	    <{'ok',Bin}>
		when try
		      let <_4> =
			  call 'erlang':'byte_size'
			      (Bin)
		      in  call 'erlang':'<'
			      (_4, _3)
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false' ->
		do  %% Line 322
		    ( call ( 'file'
			     -| ['result_not_wanted'] ):( 'close'
							  -| ['result_not_wanted'] )
			  (_0)
		      -| ['result_not_wanted'] )
		    %% Line 323
		    call 'erlang':'throw'
			({'error',{'tooshort',_1}})
	    %% Line 324
	    <'eof'> when 'true' ->
		do  %% Line 325
		    ( call ( 'file'
			     -| ['result_not_wanted'] ):( 'close'
							  -| ['result_not_wanted'] )
			  (_0)
		      -| ['result_not_wanted'] )
		    %% Line 326
		    call 'erlang':'throw'
			({'error',{'tooshort',_1}})
	    %% Line 327
	    <OK> when 'true' ->
		OK
	  end
      -| [{'function',{'pread_close',4}}] )
'file_error'/2 =
    %% Line 330
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <FileName,{'error',Reason}> when 'true' ->
		  %% Line 331
		  call 'erlang':'throw'
		      ({'error',{'file_error',FileName,Reason}})
	      ( <_3,_2> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_3,_2})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'file_error',2}}] )
      -| [{'function',{'file_error',2}}] )
'file_error_close'/3 =
    %% Line 333
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <Fd,FileName,{'error',Reason}> when 'true' ->
		  do  %% Line 334
		      ( call ( 'file'
			       -| ['result_not_wanted'] ):( 'close'
							    -| ['result_not_wanted'] )
			    (Fd)
			-| ['result_not_wanted'] )
		      %% Line 335
		      call 'erlang':'throw'
			  ({'error',{'file_error',FileName,Reason}})
	      ( <_6,_5,_4> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_6,_5,_4})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'file_error_close',3}}] )
      -| [{'function',{'file_error_close',3}}] )
'debug_mode'/0 =
    %% Line 337
    ( fun () ->
	  let <_0> =
	      call %% Line 338
		   'os':%% Line 338
			'getenv'
		  (%% Line 338
		   [68|[69|[84|[83|[95|[68|[69|[66|[85|[71]]]]]]]]]])
	  in  %% Line 338
	      call 'erlang':'=:='
		  (_0, [116|[114|[117|[101]]]])
      -| [{'function',{'debug_mode',0}}] )
'bad_object'/2 =
    %% Line 340
    ( fun (_0,_1) ->
	  %% Line 341
	  case apply 'debug_mode'/0
		   () of
	    %% Line 342
	    <'true'> when 'true' ->
		%% Line 343
		{'bad_object',_0,_1}
	    %% Line 344
	    <'false'> when 'true' ->
		%% Line 346
		{'bad_object',_0}
	    ( <_2> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_2})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'bad_object',2}}] )
'read_n'/2 =
    %% Line 349
    ( fun (_0,_1) ->
	  %% Line 350
	  case call 'file':'read'
		   (_0, _1) of
	    %% Line 351
	    <{'ok',Bin}> when 'true' ->
		%% Line 352
		Bin
	    %% Line 353
	    <_X_Else> when 'true' ->
		%% Line 354
		'eof'
	  end
      -| [{'function',{'read_n',2}}] )
'pread_n'/3 =
    %% Line 357
    ( fun (_0,_1,_2) ->
	  %% Line 358
	  case call 'file':'pread'
		   (_0, _1, _2) of
	    %% Line 359
	    <{'ok',Bin}> when 'true' ->
		%% Line 360
		Bin
	    %% Line 361
	    <_7> when 'true' ->
		%% Line 362
		'eof'
	  end
      -| [{'function',{'pread_n',3}}] )
'read_4'/2 =
    %% Line 365
    ( fun (_0,_1) ->
	  %% Line 366
	  case call 'file':'position'
		   (_0, _1) of
	    <{'ok',_6}> when 'true' ->
		%% Line 367
		case call 'dets_utils':'read_n'
			 (_0, 4) of
		  <#{#<Four>(32,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		      %% Line 368
		      Four
		  ( <_3> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_3})
		    -| ['compiler_generated'] )
		end
	    ( <_2> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_2})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'read_4',2}}] )
'corrupt_file'/2 =
    %% Line 370
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Head,{'error',Reason}> when 'true' ->
		  %% Line 371
		  ( case Head of
		      ( <( {'head',_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_rec16,_29,_30,_31,_32,_33,_34,_35}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <Error> = {'error',{'file_error',_rec16,Reason}}
			    in  let <_5> =
				    apply %% Line 372
					  'corrupt'/2
					(%% Line 372
					 Head, %% Line 372
					       Error)
				in  %% Line 372
				    call 'erlang':'throw'
					(_5)
			-| ['compiler_generated'] )
		      ( <_36> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      ( <_7,_6> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_7,_6})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'corrupt_file',2}}] )
      -| [{'function',{'corrupt_file',2}}] )
'corrupt_reason'/2 =
    %% Line 375
    ( fun (_0,_1) ->
	  let <_6> =
	      case %% Line 376
		   apply 'get_disk_map'/0
		       () of
		%% Line 377
		<'no_disk_map'> when 'true' ->
		    _1
		%% Line 379
		<DM> when 'true' ->
		    let <_2> =
			call %% Line 381
			     'erlang':%% Line 381
				      'self'
			    ()
		    in  %% Line 380
			case %% Line 381
			     call 'erlang':'process_info'
				 (_2, 'current_stacktrace') of
			  <{'current_stacktrace',ST}> when 'true' ->
			      let <PD> =
				  call %% Line 382
				       'erlang':%% Line 382
						'get'
				      ()
			      in  %% Line 383
				  {_1,ST,PD,DM}
			  ( <_3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_3})
			    -| ['compiler_generated'] )
			end
	      end
	  in  %% Line 385
	      ( case _0 of
		  ( <( {'head',_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_rec17,_34,_35,_36,_37,_38,_39,_40}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Error> = {'error',{_6,_rec17}}
			in  %% Line 386
			    apply 'corrupt'/2
				(_0, Error)
		    -| ['compiler_generated'] )
		  ( <_41> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','head'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
      -| [{'function',{'corrupt_reason',2}}] )
'corrupt'/2 =
    %% Line 388
    ( fun (_0,_1) ->
	  do  %% Line 389
	      case call 'erlang':'get'
		       ('verbose') of
		%% Line 390
		<'yes'> when 'true' ->
		    %% Line 392
		    ( case _0 of
			( <( {'head',_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_rec18,_37,_38,_39,_40}
			     -| ['compiler_generated'] )> when 'true' ->
			      call 'error_logger':'format'
				  ([42|[42|[32|[100|[101|[116|[115|[58|[32|[67|[111|[114|[114|[117|[112|[116|[32|[116|[97|[98|[108|[101|[32|[126|[116|[112|[58|[32|[126|[116|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_rec18|[_1|[]]])
			  -| ['compiler_generated'] )
			( <_41> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','head'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 393
		<_42> when 'true' ->
		    'ok'
	      end
	      %% Line 395
	      ( case _0 of
		  ( <( {'head',_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_rec19,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec19 of
			  %% Line 396
			  <{'error',_72}> when 'true' ->
			      %% Line 397
			      {_0,_1}
			  %% Line 398
			  <_73> when 'true' ->
			      %% Line 399
			      case _0 of
				<{'head',_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102}> when 'true' ->
				    let <_9> =
					call 'erlang':'setelement'
					    (16, _0, _1)
				    in  {_9,_1}
				( <_103> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','head'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			end
		    -| ['compiler_generated'] )
		  ( <_71> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','head'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
      -| [{'function',{'corrupt',2}}] )
'vformat'/2 =
    %% Line 402
    ( fun (_0,_1) ->
	  %% Line 403
	  case call 'erlang':'get'
		   ('verbose') of
	    %% Line 404
	    <'yes'> when 'true' ->
		call 'error_logger':'format'
		    (_0, _1)
	    %% Line 405
	    <_5> when 'true' ->
		'ok'
	  end
      -| [{'function',{'vformat',2}}] )
'code_to_type'/1 =
    %% Line 408
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'code_to_type',1}}] ) of
	      <1> when 'true' ->
		  'set'
	      %% Line 409
	      <2> when 'true' ->
		  'bag'
	      %% Line 410
	      <3> when 'true' ->
		  'duplicate_bag'
	      %% Line 411
	      <_X_Type> when 'true' ->
		  'badtype'
	    end
	    -| [{'function',{'code_to_type',1}}] )
      -| [{'function',{'code_to_type',1}}] )
'type_to_code'/1 =
    %% Line 413
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'type_to_code',1}}] ) of
	      <'set'> when 'true' ->
		  1
	      %% Line 414
	      <'bag'> when 'true' ->
		  2
	      %% Line 415
	      <'duplicate_bag'> when 'true' ->
		  3
	      ( <_1> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_1})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'type_to_code',1}}] )
      -| [{'function',{'type_to_code',1}}] )
'cache_size'/1 =
    %% Line 421
    ( fun (_0) ->
	  %% Line 422
	  ( case ( _0
		   -| [{'function',{'cache_size',1}}] ) of
	      ( <( {'cache',_6,_7,_8,_9,_10,_rec21}
		   -| ['compiler_generated'] )> when 'true' ->
		    ( case ( _0
			     -| [{'function',{'cache_size',1}}] ) of
			( <( {'cache',_12,_13,_14,_15,_rec22,_16}
			     -| ['compiler_generated'] )> when 'true' ->
			      {_rec21,_rec22}
			  -| ['compiler_generated'] )
			( <_17> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','cache'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	      ( <_11> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','cache'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'cache_size',1}}] )
'cache_lookup'/4 =
    %% Line 425
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <Type,[Key|Keys],CL,LU> when 'true' ->
		  %% Line 427
		  case apply 'mkeysearch'/3
			   (Key, 1, CL) of
		    %% Line 428
		    <{'value',{_9,{_X_Seq,{'insert',Object}}}}>
			when let <_10> =
			      call 'erlang':'=:='
				  (_9, Key)
			  in  let <_11> =
				  call 'erlang':'=:='
				      (Type, 'set')
			      in  call 'erlang':'and'
				      (_10, _11) ->
			%% Line 429
			apply 'cache_lookup'/4
			    (Type, Keys, CL, [Object|LU])
		    %% Line 430
		    <{'value',{_12,{_X_Seq,'delete_key'}}}>
			when call 'erlang':'=:='
			      (_12,
			       Key) ->
			%% Line 431
			apply 'cache_lookup'/4
			    (Type, Keys, CL, LU)
		    %% Line 432
		    <_13> when 'true' ->
			%% Line 433
			'false'
		  end
	      %% Line 435
	      <_X_Type,[],_X_CL,LU> when 'true' ->
		  %% Line 436
		  LU
	      ( <_8,_7,_6,_5> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_8,_7,_6,_5})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'cache_lookup',4}}] )
      -| [{'function',{'cache_lookup',4}}] )
'reset_cache'/1 =
    %% Line 438
    ( fun (_0) ->
	  %% Line 439
	  ( case ( _0
		   -| [{'function',{'reset_cache',1}}] ) of
	      ( <( {'cache',_16,_17,_18,_rec23,_19,_20}
		   -| ['compiler_generated'] )> when 'true' ->
		    let <_4> =
			case <> of
			  %% Line 441
			  <>
			      when call 'erlang':'=:='
				    (_rec23,
				     'undefined') ->
			      _rec23
			  %% Line 443
			  <> when 'true' ->
			      %% Line 444
			      call 'erlang':'monotonic_time'
				  (1000000)
			end
		    in  %% Line 446
			( case ( _0
				 -| [{'function',{'reset_cache',1}}] ) of
			    ( <( {'cache',_rec24,_22,_23,_24,_25,_26}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <PK> =
				      apply 'family'/1
					  (_rec24)
				  in  %% Line 447
				      case ( _0
					     -| [{'function',{'reset_cache',1}}] ) of
					<{'cache',_rec26,_rec27,_rec28,_rec29,_rec30,_rec31}> when 'true' ->
					    let <_11> =
						{'cache',[],0,0,_4,_rec30,_rec31}
					    in  %% Line 448
						( case ( _0
							 -| [{'function',{'reset_cache',1}}] ) of
						    ( <( {'cache',_29,_30,_rec32,_31,_32,_33}
							 -| ['compiler_generated'] )> when 'true' ->
							  {_11,_rec32,PK}
						      -| ['compiler_generated'] )
						    ( <_34> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','cache'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					( <_28> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','cache'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
			      -| ['compiler_generated'] )
			    ( <_27> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','cache'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	      ( <_21> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','cache'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'reset_cache',1}}] )
'is_empty_cache'/1 =
    %% Line 450
    ( fun (_0) ->
	  %% Line 451
	  ( case ( _0
		   -| [{'function',{'is_empty_cache',1}}] ) of
	      ( <( {'cache',_rec33,_4,_5,_6,_7,_8}
		   -| ['compiler_generated'] )> when 'true' ->
		    call 'erlang':'=:='
			(_rec33, [])
		-| ['compiler_generated'] )
	      ( <_9> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','cache'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'is_empty_cache',1}}] )
'new_cache'/1 =
    %% Line 453
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'new_cache',1}}] ) of
	      <{Delay,Size}> when 'true' ->
		  %% Line 454
		  {'cache',[],0,0,%% Line 455
				  'undefined',%% Line 455
					      Size,%% Line 455
						   Delay}
	      ( <_1> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_1})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'new_cache',1}}] )
      -| [{'function',{'new_cache',1}}] )
'init_alloc'/1 =
    %% Line 497
    ( fun (_0) ->
	  let <Ftab> =
	      apply %% Line 498
		    'empty_free_lists'/0
		  ()
	  in  let <Empty> =
		  apply %% Line 499
			'bplus_empty_tree'/0
		      ()
	      in  let <_3> =
		      apply %% Line 500
			    'bplus_insert'/2
			  (%% Line 500
			   Empty, ( _0
				    -| [{'function',{'init_alloc',1}}] ))
		  in  %% Line 500
		      call 'erlang':'setelement'
			  (32, Ftab, _3)
      -| [{'function',{'init_alloc',1}}] )
'empty_free_lists'/0 =
    %% Line 502
    ( fun () ->
	  let <Empty> =
	      apply %% Line 503
		    'bplus_empty_tree'/0
		  ()
	  in  %% Line 505
	      call 'erlang':'make_tuple'
		  (32, Empty)
      -| [{'function',{'empty_free_lists',0}}] )
'alloc_many'/4 =
    %% Line 508
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <Head,_X_Sz,0,_X_A0> when 'true' ->
		  %% Line 509
		  Head
	      %% Line 510
	      <Head,Sz,N,A0> when 'true' ->
		  %% Line 511
		  ( case Head of
		      ( <( {'head',_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_rec34,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_7> =
				call %% Line 512
				     'erlang':%% Line 512
					      '*'
				    (%% Line 512
				     Sz, %% Line 512
					 N)
			    in  let <_rec35> =
				    apply %% Line 512
					  'alloc_many1'/5
					(_rec34, %% Line 512
						 1, _7, %% Line 512
							A0, %% Line 512
							    Head)
				in  %% Line 512
				    case Head of
				      <{'head',_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72}> when 'true' ->
					  call 'erlang':'setelement'
					      (12, Head, _rec35)
				      ( <_73> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','head'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
			-| ['compiler_generated'] )
		      ( <_43> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	    end
	    -| [{'function',{'alloc_many',4}}] )
      -| [{'function',{'alloc_many',4}}] )
'alloc_many1'/5 =
    %% Line 515
    ( fun (_0,_1,_2,_3,_4) ->
	  %% Line 516
	  case apply 'find_first_free'/4
		   (_0, _1, _1, _4) of
	    <{FPos,Addr}> when 'true' ->
		%% Line 517
		case call 'erlang':'>='
			 (Addr, _3) of
		  <'true'> when 'true' ->
		      %% Line 518
		      case <> of
			%% Line 519
			<>
			    when try
				  let <_7> =
				      call 'erlang':'-'
					  (FPos, 1)
				  in  let <_8> =
					  call 'erlang':'bsl'
					      (1, _7)
				      in  call 'erlang':'>='
					      (_8, _2)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    %% Line 642
			    ( case _2 of
				( <N>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( '>'
									       -| ['compiler_generated'] )
					      (_2,
					       ( 0
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] ) ->
				      ( let <_20> =
					    call %% Line 643
						 ( 'erlang'
						   -| ['compiler_generated'] ):%% Line 643
									       ( '+'
										 -| ['compiler_generated'] )
						(%% Line 643
						 N, %% Line 643
						    ( 1
						      -| ['compiler_generated'] ))
					in  ( let <_21> =
						  apply %% Line 643
							'log2'/1
						      (_20)
					      in  let <_9> =
						      call %% Line 643
							   ( 'erlang'
							     -| ['compiler_generated'] ):%% Line 643
											 ( '+'
											   -| ['compiler_generated'] )
							  (%% Line 643
							   ( 1
							     -| ['compiler_generated'] ), _21)
						  in  apply 'alloc_many2'/5
							  (_0, _9, _2, _3, _4)
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_22> when ( 'true'
					       -| ['compiler_generated'] ) ->
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'function_clause'
						  -| ['compiler_generated'] ),_22}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated',{'function',{'sz2pos',1}}] )
			%% Line 521
			<> when 'true' ->
			    let <NewFtab> =
				apply %% Line 522
				      'reserve_buddy'/4
				    (_0, %% Line 522
					 FPos, %% Line 522
					       FPos, %% Line 522
						     Addr)
			    in  let <_11> =
				    call %% Line 523
					 'erlang':%% Line 523
						  '-'
					(%% Line 523
					 FPos, %% Line 523
					       1)
				in  let <_12> =
					call %% Line 523
					     'erlang':%% Line 523
						      'bsl'
					    (%% Line 523
					     1, _11)
				    in  let <NSize> =
					    call %% Line 523
						 'erlang':%% Line 523
							  '-'
						(_2, _12)
					in  %% Line 524
					    apply 'alloc_many1'/5
						(NewFtab, FPos, NSize, Addr, _4)
		      end
		  ( <_6> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_6})
		    -| ['compiler_generated'] )
		end
	    ( <_5> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_5})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'alloc_many1',5}}] )
'alloc_many2'/5 =
    %% Line 527
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <Ftab,_X_Pos,0,_X_A0,_X_H> when 'true' ->
		  %% Line 528
		  Ftab
	      %% Line 529
	      <Ftab,Pos,Size,A0,H>
		  when try
			let <_5> =
			    call 'erlang':'-'
				(Pos, 1)
			in  let <_6> =
				call 'erlang':'bsl'
				    (1, _5)
			    in  let <_7> =
				    call 'erlang':'band'
					(Size, _6)
				in  call 'erlang':'>'
					(_7, 0)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  %% Line 530
		  case apply 'find_first_free'/4
			   (Ftab, Pos, Pos, H) of
		    <{FPos,Addr}> when 'true' ->
			%% Line 531
			case call 'erlang':'>='
				 (Addr, A0) of
			  <'true'> when 'true' ->
			      let <NewFtab> =
				  apply %% Line 532
					'reserve_buddy'/4
				      (%% Line 532
				       Ftab, %% Line 532
					     FPos, %% Line 532
						   Pos, %% Line 532
							Addr)
			      in  let <_11> =
				      call %% Line 533
					   'erlang':%% Line 533
						    '-'
					  (%% Line 533
					   Pos, %% Line 533
						1)
				  in  let <_12> =
					  call %% Line 533
					       'erlang':%% Line 533
							'bsl'
					      (%% Line 533
					       1, _11)
				      in  let <NSize> =
					      call %% Line 533
						   'erlang':%% Line 533
							    '-'
						  (%% Line 533
						   Size, _12)
					  in  let <_14> =
						  call %% Line 534
						       'erlang':%% Line 534
								'-'
						      (%% Line 534
						       Pos, %% Line 534
							    1)
					      in  %% Line 534
						  apply 'alloc_many2'/5
						      (NewFtab, _14, NSize, Addr, H)
			  ( <_9> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_9})
			    -| ['compiler_generated'] )
			end
		    ( <_8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_8})
		      -| ['compiler_generated'] )
		  end
	      %% Line 535
	      <Ftab,Pos,Size,A0,H> when 'true' ->
		  let <_15> =
		      call %% Line 536
			   'erlang':%% Line 536
				    '-'
			  (%% Line 536
			   Pos, %% Line 536
				1)
		  in  %% Line 536
		      apply 'alloc_many2'/5
			  (Ftab, _15, Size, A0, H)
	    end
	    -| [{'function',{'alloc_many2',5}}] )
      -| [{'function',{'alloc_many2',5}}] )
'alloc'/2 =
    %% Line 539
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Head = {'head',_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67},Sz>
		  when ( try
			  let <_6> =
			      call 'erlang':'element'
				  (17, Head)
			  in  let <_7> =
				  call 'erlang':'=/='
				      (_6, 'false')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _7)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 642
		  ( case Sz of
		      ( <N>
			    when ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '>'
								     -| ['compiler_generated'] )
				    (Sz,
				     ( 0
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] ) ->
			    ( let <_245> =
				  call %% Line 643
				       ( 'erlang'
					 -| ['compiler_generated'] ):%% Line 643
								     ( '+'
								       -| ['compiler_generated'] )
				      (%% Line 643
				       N, %% Line 643
					  ( 1
					    -| ['compiler_generated'] ))
			      in  ( let <_2> =
					apply %% Line 643
					      'log2'/1
					    (_245)
				    in  let <Pos> =
					    call %% Line 643
						 ( 'erlang'
						   -| ['compiler_generated'] ):%% Line 643
									       ( '+'
										 -| ['compiler_generated'] )
						(%% Line 643
						 ( 1
						   -| ['compiler_generated'] ), _2)
					in  ( case Head of
						( <( {'head',_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_rec37,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95}
						     -| ['compiler_generated'] )> when 'true' ->
						      case _rec37 of
							<{Frozen,Ftab}> when 'true' ->
							    case apply 'find_first_free'/4
								     (Frozen, Pos, Pos, Head) of
							      <{FPos,Addr}> when 'true' ->
								  let <NewFrozen> =
								      apply 'reserve_buddy'/4
									  (Frozen, FPos, Pos, Addr)
								  in  ( case Head of
									  ( <( {'head',_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_rec38}
									       -| ['compiler_generated'] )> when 'true' ->
										let <Ftab1> =
										    apply 'undo_free'/4
											(Ftab, FPos, Addr, _rec38)
										in  let <NewFtab> =
											apply 'move_down'/4
											    (Ftab1, FPos, Pos, Addr)
										    in  let <NewFreelists> = {NewFrozen,NewFtab}
											in  case Head of
											      <{'head',_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154}> when 'true' ->
												  let <_21> =
												      call 'erlang':'setelement'
													  (12, Head, NewFreelists)
												  in  {_21,Addr,Pos}
											      ( <_155> when 'true' ->
												    ( call ( 'erlang'
													     -| ['compiler_generated'] ):( 'error'
																	   -| ['compiler_generated'] )
													  (( {'badrecord','head'}
													     -| ['compiler_generated'] ))
												      -| ['compiler_generated'] )
												-| ['compiler_generated'] )
											    end
									    -| ['compiler_generated'] )
									  ( <_125> when 'true' ->
										( call ( 'erlang'
											 -| ['compiler_generated'] ):( 'error'
														       -| ['compiler_generated'] )
										      (( {'badrecord','head'}
											 -| ['compiler_generated'] ))
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									end
									-| ['compiler_generated'] )
							      ( <_12> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_12})
								-| ['compiler_generated'] )
							    end
							( <_11> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_11})
							  -| ['compiler_generated'] )
						      end
						  -| ['compiler_generated'] )
						( <_96> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','head'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_3> when ( 'true'
				    -| ['compiler_generated'] ) ->
			    ( primop ( 'match_fail'
				       -| ['compiler_generated'] )
				  (( {( 'function_clause'
					-| ['compiler_generated'] ),_3}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated',{'function',{'sz2pos',1}}] )
	      %% Line 549
	      <Head = {'head',_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183,_184},Sz>
		  when ( try
			  let <_26> =
			      call 'erlang':'element'
				  (17, Head)
			  in  let <_27> =
				  call 'erlang':'=:='
				      (_26, 'false')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _27)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 642
		  ( case Sz of
		      ( <N>
			    when ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '>'
								     -| ['compiler_generated'] )
				    (Sz,
				     ( 0
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] ) ->
			    ( let <_247> =
				  call %% Line 643
				       ( 'erlang'
					 -| ['compiler_generated'] ):%% Line 643
								     ( '+'
								       -| ['compiler_generated'] )
				      (%% Line 643
				       N, %% Line 643
					  ( 1
					    -| ['compiler_generated'] ))
			      in  ( let <_2> =
					apply %% Line 643
					      'log2'/1
					    (_247)
				    in  let <Pos> =
					    call %% Line 643
						 ( 'erlang'
						   -| ['compiler_generated'] ):%% Line 643
									       ( '+'
										 -| ['compiler_generated'] )
						(%% Line 643
						 ( 1
						   -| ['compiler_generated'] ), _2)
					in  ( case Head of
						( <( {'head',_185,_186,_187,_188,_189,_190,_191,_192,_193,_194,_rec40,_195,_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208,_209,_210,_211,_212}
						     -| ['compiler_generated'] )> when 'true' ->
						      case apply 'find_first_free'/4
							       (_rec40, Pos, Pos, Head) of
							<{FPos,Addr}> when 'true' ->
							    let <NewFtab> =
								apply 'reserve_buddy'/4
								    (_rec40, FPos, Pos, Addr)
							    in  case Head of
								  <{'head',_214,_215,_216,_217,_218,_219,_220,_221,_222,_223,_224,_225,_226,_227,_228,_229,_230,_231,_232,_233,_234,_235,_236,_237,_238,_239,_240,_241,_242}> when 'true' ->
								      let <_36> =
									  call 'erlang':'setelement'
									      (12, Head, NewFtab)
								      in  {_36,Addr,Pos}
								  ( <_243> when 'true' ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','head'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
							( <_32> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_32})
							  -| ['compiler_generated'] )
						      end
						  -| ['compiler_generated'] )
						( <_213> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','head'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_3> when ( 'true'
				    -| ['compiler_generated'] ) ->
			    ( primop ( 'match_fail'
				       -| ['compiler_generated'] )
				  (( {( 'function_clause'
					-| ['compiler_generated'] ),_3}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated',{'function',{'sz2pos',1}}] )
	      ( <_38,_37> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_38,_37})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'alloc',2}}] )
      -| [{'function',{'alloc',2}}] )
'find_first_free'/4 =
    %% Line 557
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <_X_Ftab,Pos,_X_Pos0,Head>
		  when call 'erlang':'>'
			(Pos,
			 32) ->
		  %% Line 558
		  ( case Head of
		      ( <( {'head',_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_rec42,_42,_43,_44,_45,_46,_47,_48}
			   -| ['compiler_generated'] )> when 'true' ->
			    call 'erlang':'throw'
				({'error',{'no_more_space_on_file',_rec42}})
			-| ['compiler_generated'] )
		      ( <_49> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 559
	      <Ftab,Pos,Pos0,Head> when 'true' ->
		  let <PosTab> =
		      call %% Line 560
			   'erlang':%% Line 560
				    'element'
			  (%% Line 560
			   Pos, %% Line 560
				Ftab)
		  in  %% Line 561
		      case apply 'bplus_lookup_first'/1
			       (PosTab) of
			%% Line 562
			<'undefined'> when 'true' ->
			    let <_7> =
				call %% Line 563
				     'erlang':%% Line 563
					      '+'
				    (%% Line 563
				     Pos, %% Line 563
					  1)
			    in  %% Line 563
				apply 'find_first_free'/4
				    (Ftab, _7, Pos0, Head)
			%% Line 564
			<{'ok',Addr}>
			    when try
				  let <_11> =
				      call 'erlang':'-'
					  (Pos0, 1)
				  in  let <_12> =
					  call 'erlang':'bsl'
					      (1, _11)
				      in  let <_13> =
					      call 'erlang':'+'
						  (Addr, _12)
					  in  call 'erlang':'>'
						  (_13, 2097483648)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    %% Line 566
			    ( case Head of
				( <( {'head',_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_rec43,_71,_72,_73,_74,_75,_76,_77}
				     -| ['compiler_generated'] )> when 'true' ->
				      call 'erlang':'throw'
					  ({'error',{'no_more_space_on_file',_rec43}})
				  -| ['compiler_generated'] )
				( <_78> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','head'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			%% Line 567
			<{'ok',Addr}> when 'true' ->
			    %% Line 568
			    {Pos,Addr}
			( <_16> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_16})
			  -| ['compiler_generated'] )
		      end
	    end
	    -| [{'function',{'find_first_free',4}}] )
      -| [{'function',{'find_first_free',4}}] )
'undo_free'/4 =
    %% Line 574
    ( fun (_0,_1,_2,_3) ->
	  let <PosTab> =
	      call %% Line 575
		   'erlang':%% Line 575
			    'element'
		  (_1, _0)
	  in  %% Line 576
	      case apply 'bplus_lookup'/2
		       (PosTab, _2) of
		%% Line 577
		<'undefined'> when 'true' ->
		    let <_5> =
			call %% Line 578
			     'erlang':%% Line 578
				      '-'
			    (_1, %% Line 578
				 1)
		    in  let <_6> =
			    call %% Line 578
				 'erlang':%% Line 578
					  'bsl'
				(%% Line 578
				 1, _5)
			in  %% Line 578
			    case apply 'my_buddy'/3
				     (_2, _6, _3) of
			      <{BuddyAddr,MoveUpAddr}> when 'true' ->
				  let <_8> =
				      apply %% Line 579
					    'bplus_insert'/2
					  (%% Line 579
					   PosTab, %% Line 579
						   BuddyAddr)
				  in  let <NewFtab> =
					  call %% Line 579
					       'erlang':%% Line 579
							'setelement'
					      (_1, _0, _8)
				      in  let <_10> =
					      call %% Line 580
						   'erlang':%% Line 580
							    '+'
						  (_1, %% Line 580
						       1)
					  in  %% Line 580
					      apply 'undo_free'/4
						  (NewFtab, _10, MoveUpAddr, _3)
			      ( <_7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_7})
				-| ['compiler_generated'] )
			    end
		%% Line 581
		<{'ok',_17}>
		    when call 'erlang':'=:='
			  (_17,
			   _2) ->
		    let <NewPosTab> =
			apply %% Line 582
			      'bplus_delete'/2
			    (%% Line 582
			     PosTab, _2)
		    in  %% Line 583
			call 'erlang':'setelement'
			    (_1, _0, NewPosTab)
		( <_12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_12})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'undo_free',4}}] )
'reserve_buddy'/4 =
    %% Line 586
    ( fun (_0,_1,_2,_3) ->
	  let <PosTab> =
	      call %% Line 587
		   'erlang':%% Line 587
			    'element'
		  (_1, _0)
	  in  let <NewPosTab> =
		  apply %% Line 588
			'bplus_delete'/2
		      (%% Line 588
		       PosTab, _3)
	      in  let <NewFtab> =
		      call %% Line 589
			   'erlang':%% Line 589
				    'setelement'
			  (_1, _0, %% Line 589
				   NewPosTab)
		  in  %% Line 590
		      apply 'move_down'/4
			  (NewFtab, _1, _2, _3)
      -| [{'function',{'reserve_buddy',4}}] )
'move_down'/4 =
    %% Line 592
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <Ftab,Pos,_15,_X_Addr>
		  when call 'erlang':'=:='
			(_15,
			 Pos) ->
		  %% Line 595
		  Ftab
	      %% Line 596
	      <Ftab,Pos,Pos0,Addr> when 'true' ->
		  let <Pos_1> =
		      call %% Line 597
			   'erlang':%% Line 597
				    '-'
			  (%% Line 597
			   Pos, %% Line 597
				1)
		  in  let <Size> =
			  call %% Line 598
			       'erlang':%% Line 598
					'bsl'
			      (%% Line 598
			       1, %% Line 598
				  Pos_1)
		      in  let <_6> =
			      call %% Line 599
				   'erlang':%% Line 599
					    'bsr'
				  (%% Line 599
				   Size, %% Line 599
					 1)
			  in  let <HighBuddy> =
				  call %% Line 599
				       'erlang':%% Line 599
						'+'
				      (%% Line 599
				       Addr, _6)
			      in  let <_8> =
				      call %% Line 600
					   'erlang':%% Line 600
						    'element'
					  (%% Line 600
					   Pos_1, %% Line 600
						  Ftab)
				  in  let <NewPosTab_1> =
					  apply %% Line 600
						'bplus_insert'/2
					      (_8, %% Line 600
						   HighBuddy)
				      in  let <NewFtab> =
					      call %% Line 601
						   'erlang':%% Line 601
							    'setelement'
						  (%% Line 601
						   Pos_1, %% Line 601
							  Ftab, %% Line 601
								NewPosTab_1)
					  in  %% Line 602
					      apply 'move_down'/4
						  (NewFtab, Pos_1, Pos0, Addr)
	    end
	    -| [{'function',{'move_down',4}}] )
      -| [{'function',{'move_down',4}}] )
'free'/3 =
    %% Line 605
    ( fun (_0,_1,_2) ->
	  let <Ftab> =
	      apply %% Line 607
		    'get_freelists'/1
		  (_0)
	  in  %% Line 642
	      ( case _2 of
		  ( <N>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '>'
								 -| ['compiler_generated'] )
				(_2,
				 ( 0
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] ) ->
			( let <_42> =
			      call %% Line 643
				   ( 'erlang'
				     -| ['compiler_generated'] ):%% Line 643
								 ( '+'
								   -| ['compiler_generated'] )
				  (%% Line 643
				   N, %% Line 643
				      ( 1
					-| ['compiler_generated'] ))
			  in  ( let <_43> =
				    apply %% Line 643
					  'log2'/1
					(_42)
				in  let <Pos> =
					call %% Line 643
					     ( 'erlang'
					       -| ['compiler_generated'] ):%% Line 643
									   ( '+'
									     -| ['compiler_generated'] )
					    (%% Line 643
					     ( 1
					       -| ['compiler_generated'] ), _43)
				    in  ( case _0 of
					    ( <( {'head',_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_rec44}
						 -| ['compiler_generated'] )> when 'true' ->
						  let <_7> =
						      apply 'free_in_pos'/4
							  (Ftab, _1, Pos, _rec44)
						  in  let <_8> =
							  apply 'set_freelists'/2
							      (_0, _7)
						      in  {_8,Pos}
					      -| ['compiler_generated'] )
					    ( <_40> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','head'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_3> when ( 'true'
				-| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'function_clause'
				    -| ['compiler_generated'] ),_3}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated',{'function',{'sz2pos',1}}] )
      -| [{'function',{'free',3}}] )
'free_in_pos'/4 =
    %% Line 611
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <Ftab,_X_Addr,Pos,_X_Base>
		  when call 'erlang':'>'
			(Pos,
			 32) ->
		  %% Line 612
		  Ftab
	      %% Line 613
	      <Ftab,Addr,Pos,Base> when 'true' ->
		  let <PosTab> =
		      call %% Line 614
			   'erlang':%% Line 614
				    'element'
			  (%% Line 614
			   Pos, %% Line 614
				Ftab)
		  in  let <_5> =
			  call %% Line 615
			       'erlang':%% Line 615
					'-'
			      (%% Line 615
			       Pos, %% Line 615
				    1)
		      in  let <_6> =
			      call %% Line 615
				   'erlang':%% Line 615
					    'bsl'
				  (%% Line 615
				   1, _5)
			  in  %% Line 615
			      case apply 'my_buddy'/3
				       (Addr, _6, Base) of
				<{BuddyAddr,MoveUpAddr}> when 'true' ->
				    %% Line 616
				    case apply 'bplus_lookup'/2
					     (PosTab, BuddyAddr) of
				      %% Line 617
				      <'undefined'> when 'true' ->
					  let <_8> =
					      apply %% Line 619
						    'bplus_insert'/2
						  (%% Line 619
						   PosTab, %% Line 619
							   Addr)
					  in  %% Line 619
					      call 'erlang':'setelement'
						  (Pos, Ftab, _8)
				      %% Line 620
				      <{'ok',_18}>
					  when call 'erlang':'=:='
						(_18,
						 BuddyAddr) ->
					  let <PosTab1> =
					      apply %% Line 621
						    'bplus_delete'/2
						  (%% Line 621
						   PosTab, %% Line 621
							   Addr)
					  in  let <PosTab2> =
						  apply %% Line 622
							'bplus_delete'/2
						      (%% Line 622
						       PosTab1, %% Line 622
								BuddyAddr)
					      in  let <NewFtab> =
						      call %% Line 624
							   'erlang':%% Line 624
								    'setelement'
							  (%% Line 624
							   Pos, %% Line 624
								Ftab, %% Line 624
								      PosTab2)
						  in  let <_12> =
							  call %% Line 625
							       'erlang':%% Line 625
									'+'
							      (%% Line 625
							       Pos, %% Line 625
								    1)
						      in  %% Line 625
							  apply 'free_in_pos'/4
							      (NewFtab, MoveUpAddr, _12, Base)
				      ( <_13> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_13})
					-| ['compiler_generated'] )
				    end
				( <_7> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_7})
				  -| ['compiler_generated'] )
			      end
	    end
	    -| [{'function',{'free_in_pos',4}}] )
      -| [{'function',{'free_in_pos',4}}] )
'get_freelists'/1 =
    %% Line 628
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'get_freelists',1}}] ) of
	      <Head = {'head',_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46}>
		  when ( try
			  let <_5> =
			      call 'erlang':'element'
				  (17, Head)
			  in  let <_6> =
				  call 'erlang':'=:='
				      (_5, 'false')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _6)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 629
		  ( case Head of
		      ( <( {'head',_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_rec45,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74}
			   -| ['compiler_generated'] )> when 'true' ->
			    _rec45
			-| ['compiler_generated'] )
		      ( <_75> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 630
	      <Head = {'head',_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104}>
		  when ( try
			  let <_12> =
			      call 'erlang':'element'
				  (17, Head)
			  in  let <_13> =
				  call 'erlang':'=/='
				      (_12, 'false')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _13)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 631
		  ( case Head of
		      ( <( {'head',_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_rec46,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132}
			   -| ['compiler_generated'] )> when 'true' ->
			    case _rec46 of
			      <{_X_Frozen,Current}> when 'true' ->
				  %% Line 632
				  Current
			      ( <_16> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_16})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_133> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      ( <_17> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_17})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'get_freelists',1}}] )
      -| [{'function',{'get_freelists',1}}] )
'set_freelists'/2 =
    %% Line 634
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Head = {'head',_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52},Ftab>
		  when ( try
			  let <_6> =
			      call 'erlang':'element'
				  (17, Head)
			  in  let <_7> =
				  call 'erlang':'=:='
				      (_6, 'false')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _7)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 635
		  case Head of
		    <{'head',_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81}> when 'true' ->
			call 'erlang':'setelement'
			    (12, Head, Ftab)
		    ( <_82> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','head'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      %% Line 636
	      <Head = {'head',_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111},Ftab>
		  when ( try
			  let <_14> =
			      call 'erlang':'element'
				  (17, Head)
			  in  let <_15> =
				  call 'erlang':'=/='
				      (_14, 'false')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _15)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 637
		  ( case Head of
		      ( <( {'head',_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_rec48,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139}
			   -| ['compiler_generated'] )> when 'true' ->
			    case _rec48 of
			      <{Frozen,_141}> when 'true' ->
				  let <_rec49> = {%% Line 638
				       Frozen,%% Line 638
					      Ftab}
				  in  %% Line 638
				      case Head of
					<{'head',_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170}> when 'true' ->
					    call 'erlang':'setelement'
						(12, Head, _rec49)
					( <_171> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','head'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
			      ( <_18> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_18})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_140> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      ( <_23,_22> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_23,_22})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'set_freelists',2}}] )
      -| [{'function',{'set_freelists',2}}] )
'sz2pos'/1 =
    %% Line 642
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'sz2pos',1}}] ) of
	      <N>
		  when call 'erlang':'>'
			(( _0
			   -| [{'function',{'sz2pos',1}}] ),
			 0) ->
		  let <_1> =
		      call %% Line 643
			   'erlang':%% Line 643
				    '+'
			  (%% Line 643
			   N, %% Line 643
			      1)
		  in  let <_2> =
			  apply %% Line 643
				'log2'/1
			      (_1)
		      in  %% Line 643
			  call 'erlang':'+'
			      (1, _2)
	      ( <_3> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_3})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'sz2pos',1}}] )
      -| [{'function',{'sz2pos',1}}] )
'log2'/1 =
    %% Line 646
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'log2',1}}] ) of
	      <N>
		  when let <_1> =
			call 'erlang':'is_integer'
			    (( _0
			       -| [{'function',{'log2',1}}] ))
		    in  let <_2> =
			    call 'erlang':'>='
				(( _0
				   -| [{'function',{'log2',1}}] ), 0)
			in  call 'erlang':'and'
				(_1, _2) ->
		  %% Line 647
		  case <> of
		    <>
			when call 'erlang':'>'
			      (N,
			       256) ->
			%% Line 648
			case <> of
			  <>
			      when call 'erlang':'>'
				    (N,
				     1024) ->
			      %% Line 649
			      case <> of
				<>
				    when call 'erlang':'>'
					  (N,
					   2048) ->
				    %% Line 650
				    case <> of
				      <>
					  when call 'erlang':'>'
						(N,
						 4096) ->
					  let <_13> =
					      case <> of
						%% Line 651
						<>
						    when try
							  let <_9> =
							      call 'erlang':'band'
								  (N, 4095)
							  in  call 'erlang':'=:='
								  (_9, 0)
						      of <Try> ->
							  Try
						      catch <T,R> ->
							  'false' ->
						    let <_10> =
							call %% Line 652
							     'erlang':%% Line 652
								      'bsr'
							    (%% Line 652
							     N, %% Line 652
								12)
						    in  %% Line 652
							apply 'log2'/1
							    (_10)
						%% Line 653
						<> when 'true' ->
						    let <_11> =
							call 'erlang':'bsr'
							    (N, 12)
						    in  let <_12> =
							    call 'erlang':'+'
								(1, _11)
							in  apply 'log2'/1
								(_12)
					      end
					  in  %% Line 651
					      call 'erlang':'+'
						  (12, _13)
				      %% Line 655
				      <> when 'true' ->
					  12
				    end
				%% Line 657
				<> when 'true' ->
				    11
			      end
			  %% Line 659
			  <>
			      when call 'erlang':'>'
				    (N,
				     512) ->
			      10
			  %% Line 660
			  <> when 'true' ->
			      9
			end
		    %% Line 662
		    <>
			when call 'erlang':'>'
			      (N,
			       16) ->
			%% Line 663
			case <> of
			  <>
			      when call 'erlang':'>'
				    (N,
				     64) ->
			      %% Line 664
			      case <> of
				<>
				    when call 'erlang':'>'
					  (N,
					   128) ->
				    8
				%% Line 665
				<> when 'true' ->
				    7
			      end
			  %% Line 667
			  <>
			      when call 'erlang':'>'
				    (N,
				     32) ->
			      6
			  %% Line 668
			  <> when 'true' ->
			      5
			end
		    %% Line 670
		    <>
			when call 'erlang':'>'
			      (N,
			       4) ->
			%% Line 671
			case <> of
			  %% Line 672
			  <>
			      when call 'erlang':'>'
				    (N,
				     8) ->
			      4
			  %% Line 673
			  <> when 'true' ->
			      3
			end
		    %% Line 675
		    <>
			when call 'erlang':'>'
			      (N,
			       2) ->
			2
		    %% Line 676
		    <>
			when call 'erlang':'>='
			      (N,
			       1) ->
			1
		    %% Line 677
		    <> when 'true' ->
			0
		  end
	      ( <_23> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_23})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'log2',1}}] )
      -| [{'function',{'log2',1}}] )
'make_zeros'/1 =
    %% Line 680
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'make_zeros',1}}] ) of
	      <0> when 'true' ->
		  []
	      %% Line 681
	      <N>
		  when try
			let <_1> =
			    call 'erlang':'rem'
				(( _0
				   -| [{'function',{'make_zeros',1}}] ), 2)
			in  call 'erlang':'=:='
				(_1, 0)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  let <_2> =
		      call %% Line 682
			   'erlang':%% Line 682
				    'div'
			  (%% Line 682
			   N, %% Line 682
			      2)
		  in  let <P> =
			  apply %% Line 682
				'make_zeros'/1
			      (_2)
		      in  %% Line 683
			  [P|P]
	      %% Line 684
	      <N> when 'true' ->
		  let <_4> =
		      call %% Line 685
			   'erlang':%% Line 685
				    'div'
			  (%% Line 685
			   N, %% Line 685
			      2)
		  in  let <P> =
			  apply %% Line 685
				'make_zeros'/1
			      (_4)
		      in  %% Line 686
			  [0|[P|P]]
	    end
	    -| [{'function',{'make_zeros',1}}] )
      -| [{'function',{'make_zeros',1}}] )
'my_buddy'/3 =
    %% Line 689
    ( fun (_0,_1,_2) ->
	  let <_3> =
	      call %% Line 690
		   'erlang':%% Line 690
			    '-'
		  (_0, _2)
	  in  %% Line 690
	      case call 'erlang':'band'
		       (_3, _1) of
		%% Line 691
		<0> when 'true' ->
		    let <_4> =
			call %% Line 692
			     'erlang':%% Line 692
				      '+'
			    (_0, _1)
		    in  %% Line 692
			{_4,_0}
		%% Line 693
		<_10> when 'true' ->
		    let <T> =
			call %% Line 694
			     'erlang':%% Line 694
				      '-'
			    (_0, _1)
		    in  %% Line 695
			{T,T}
	      end
      -| [{'function',{'my_buddy',3}}] )
'all_free'/1 =
    %% Line 698
    ( fun (_0) ->
	  let <Tab> =
	      apply %% Line 699
		    'get_freelists'/1
		  (( _0
		     -| [{'function',{'all_free',1}}] ))
	  in  %% Line 700
	      ( case ( _0
		       -| [{'function',{'all_free',1}}] ) of
		  ( <( {'head',_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_rec51}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_5> =
			    apply %% Line 701
				  'all'/1
				(%% Line 701
				 Tab)
			in  %% Line 701
			    case apply 'all_free'/4
				     (_5, _rec51, _rec51, []) of
			      %% Line 702
			      <[{_37,_38}|L]>
				  when let <_39> =
					call 'erlang':'=:='
					    (_37, _rec51)
				    in  let <_40> =
					    call 'erlang':'=:='
						(_38, _rec51)
					in  call 'erlang':'and'
						(_39, _40) ->
				  L
			      %% Line 703
			      <L> when 'true' ->
				  L
			    end
		    -| ['compiler_generated'] )
		  ( <_36> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','head'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
      -| [{'function',{'all_free',1}}] )
'all_free'/4 =
    %% Line 706
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <[],X0,Y0,F> when 'true' ->
		  %% Line 707
		  call 'lists':'reverse'
		      ([{X0,Y0}|F])
	      %% Line 708
	      <[{X,Y}|L],X0,Y0,F>
		  when call 'erlang':'=:='
			(Y0,
			 X) ->
		  %% Line 709
		  apply 'all_free'/4
		      (L, X0, Y, F)
	      %% Line 710
	      <[{X,Y}|L],X0,Y0,F>
		  when call 'erlang':'<'
			(Y0,
			 X) ->
		  %% Line 711
		  apply 'all_free'/4
		      (L, X, Y, [{X0,Y0}|F])
	      ( <_7,_6,_5,_4> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_7,_6,_5,_4})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'all_free',4}}] )
      -| [{'function',{'all_free',4}}] )
'all_allocated'/1 =
    %% Line 713
    ( fun (_0) ->
	  let <_3> =
	      apply %% Line 714
		    'get_freelists'/1
		  (( _0
		     -| [{'function',{'all_allocated',1}}] ))
	  in  let <_4> =
		  apply %% Line 714
			'all'/1
		      (_3)
	      in  %% Line 714
		  ( case ( _0
			   -| [{'function',{'all_allocated',1}}] ) of
		      ( <( {'head',_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_rec52}
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'all_allocated'/4
				(_4, 0, _rec52, [])
			-| ['compiler_generated'] )
		      ( <_34> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
      -| [{'function',{'all_allocated',1}}] )
'all_allocated'/4 =
    %% Line 716
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <[],_X_X0,_X_Y0,[]> when 'true' ->
		  %% Line 717
		  #{}#
	      %% Line 718
	      <[],_X_X0,_X_Y0,A0> when 'true' ->
		  %% Line 719
		  case call 'lists':'reverse'
			   (A0) of
		    <[#{#<From>(32,1,'integer',['unsigned'|['big']]),
			#<To>(32,1,'integer',['unsigned'|['big']])}#|A]> when 'true' ->
			let <_5> =
			    call %% Line 720
				 'erlang':%% Line 720
					  'list_to_binary'
				(%% Line 720
				 A)
			in  %% Line 720
			    {From,To,_5}
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4})
		      -| ['compiler_generated'] )
		  end
	      %% Line 721
	      <[{X,Y}|L],X0,Y0,A>
		  when call 'erlang':'=:='
			(Y0,
			 X) ->
		  %% Line 722
		  apply 'all_allocated'/4
		      (L, X0, Y, A)
	      %% Line 723
	      <[{X,Y}|L],_X_X0,Y0,A>
		  when call 'erlang':'<'
			(Y0,
			 X) ->
		  let <_6> =
		      #{#<%% Line 724
			  Y0>(%% Line 724
			      32,1,'integer',['unsigned'|['big']]),
			#<%% Line 724
			  X>(%% Line 724
			     32,1,'integer',['unsigned'|['big']])}#
		  in  %% Line 724
		      apply 'all_allocated'/4
			  (L, X, Y, [_6|A])
	      ( <_10,_9,_8,_7> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_10,_9,_8,_7})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'all_allocated',4}}] )
      -| [{'function',{'all_allocated',4}}] )
'all_allocated_as_list'/1 =
    %% Line 726
    ( fun (_0) ->
	  let <_3> =
	      apply %% Line 727
		    'get_freelists'/1
		  (( _0
		     -| [{'function',{'all_allocated_as_list',1}}] ))
	  in  let <_4> =
		  apply %% Line 727
			'all'/1
		      (_3)
	      in  %% Line 727
		  ( case ( _0
			   -| [{'function',{'all_allocated_as_list',1}}] ) of
		      ( <( {'head',_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_rec53}
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'all_allocated_as_list'/4
				(_4, 0, _rec53, [])
			-| ['compiler_generated'] )
		      ( <_34> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
      -| [{'function',{'all_allocated_as_list',1}}] )
'all_allocated_as_list'/4 =
    %% Line 731
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <[],_X_X0,_X_Y0,[]> when 'true' ->
		  %% Line 732
		  []
	      %% Line 733
	      <[],_X_X0,_X_Y0,A> when 'true' ->
		  %% Line 734
		  call 'lists':'reverse'
		      (A)
	      %% Line 735
	      <[{X,Y}|L],X0,Y0,A>
		  when call 'erlang':'=:='
			(Y0,
			 X) ->
		  %% Line 736
		  apply 'all_allocated_as_list'/4
		      (L, X0, Y, A)
	      %% Line 737
	      <[{X,Y}|L],_X_X0,Y0,A>
		  when call 'erlang':'<'
			(Y0,
			 X) ->
		  %% Line 738
		  apply 'all_allocated_as_list'/4
		      (L, X, Y, [[Y0|X]|A])
	      ( <_7,_6,_5,_4> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_7,_6,_5,_4})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'all_allocated_as_list',4}}] )
      -| [{'function',{'all_allocated_as_list',4}}] )
'all'/1 =
    %% Line 740
    ( fun (_0) ->
	  let <_1> =
	      call %% Line 741
		   'erlang':%% Line 741
			    'tuple_size'
		  (( _0
		     -| [{'function',{'all',1}}] ))
	  in  %% Line 741
	      apply 'all'/3
		  (( _0
		     -| [{'function',{'all',1}}] ), _1, [])
      -| [{'function',{'all',1}}] )
'all'/3 =
    %% Line 743
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <_X_Tab,0,L> when 'true' ->
		  %% Line 746
		  call 'lists':'sort'
		      (L)
	      %% Line 747
	      <Tab,I,L> when 'true' ->
		  let <_3> =
		      call %% Line 748
			   'erlang':%% Line 748
				    'element'
			  (%% Line 748
			   I, %% Line 748
			      Tab)
		  in  let <LL> =
			  apply %% Line 748
				'collect_tree'/3
			      (_3, %% Line 748
				   I, %% Line 748
				      L)
		      in  let <_5> =
			      call %% Line 749
				   'erlang':%% Line 749
					    '-'
				  (%% Line 749
				   I, %% Line 749
				      1)
			  in  %% Line 749
			      apply 'all'/3
				  (Tab, _5, LL)
	    end
	    -| [{'function',{'all',3}}] )
      -| [{'function',{'all',3}}] )
'find_allocated'/4 =
    %% Line 752
    ( fun (_0,_1,_2,_3) ->
	  let <MaxAddr> =
	      call %% Line 753
		   'erlang':%% Line 753
			    '+'
		  (_1, _2)
	  in  let <Ints> =
		  apply %% Line 754
			'collect_all_interval'/4
		      (_0, _1, %% Line 754
			       MaxAddr, _3)
	      in  %% Line 755
		  apply 'allocated'/5
		      (Ints, _1, MaxAddr, _0, _3)
      -| [{'function',{'find_allocated',4}}] )
'allocated'/5 =
    %% Line 757
    ( fun (_0,_1,_2,_3,_4) ->
	  %% Line 758
	  case apply 'allocated1'/4
		   (_0, _1, _2, []) of
	    %% Line 759
	    <[]> when 'true' ->
		%% Line 760
		case apply 'find_next_allocated'/3
			 (_3, _1, _4) of
		  %% Line 761
		  <{From,_13}> when 'true' ->
		      %% Line 762
		      apply 'find_allocated'/4
			  (_3, From, 8192, _4)
		  %% Line 763
		  <'none'> when 'true' ->
		      %% Line 764
		      #{}#
		  ( <_5> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_5})
		    -| ['compiler_generated'] )
		end
	    %% Line 766
	    <L> when 'true' ->
		let <_6> =
		    call %% Line 767
			 'lists':%% Line 767
				 'reverse'
			(%% Line 767
			 L)
		in  %% Line 767
		    call 'erlang':'list_to_binary'
			(_6)
	  end
      -| [{'function',{'allocated',5}}] )
'allocated1'/4 =
    %% Line 770
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <[],Y0,Max,A>
		  when call 'erlang':'<'
			(Y0,
			 Max) ->
		  let <_4> =
		      #{#<%% Line 771
			  Y0>(%% Line 771
			      32,1,'integer',['unsigned'|['big']]),
			#<%% Line 771
			  Max>(%% Line 771
			       32,1,'integer',['unsigned'|['big']])}#
		  in  %% Line 771
		      [_4|A]
	      %% Line 772
	      <[],_X_Y0,_X_Max,A> when 'true' ->
		  %% Line 773
		  A
	      %% Line 774
	      <[{X,Y}|L],Y0,Max,A>
		  when call 'erlang':'>='
			(Y0,
			 X) ->
		  %% Line 775
		  apply 'allocated1'/4
		      (L, Y, Max, A)
	      %% Line 776
	      <[{X,Y}|L],Y0,Max,A> when 'true' ->
		  let <_5> =
		      #{#<%% Line 777
			  Y0>(%% Line 777
			      32,1,'integer',['unsigned'|['big']]),
			#<%% Line 777
			  X>(%% Line 777
			     32,1,'integer',['unsigned'|['big']])}#
		  in  %% Line 777
		      apply 'allocated1'/4
			  (L, Y, Max, [_5|A])
	      ( <_9,_8,_7,_6> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_9,_8,_7,_6})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'allocated1',4}}] )
      -| [{'function',{'allocated1',4}}] )
'find_next_allocated'/3 =
    %% Line 780
    ( fun (_0,_1,_2) ->
	  %% Line 781
	  case apply 'find_next_free'/3
		   (_0, _1, _2) of
	    %% Line 782
	    <'none'> when 'true' ->
		%% Line 783
		'none'
	    %% Line 784
	    <{Addr1,Pos}>
		when call 'erlang':'=<'
		      (Addr1,
		       _1) ->
		let <_3> =
		    call %% Line 785
			 'erlang':%% Line 785
				  '-'
			(%% Line 785
			 Pos, %% Line 785
			      1)
		in  let <_4> =
			call %% Line 785
			     'erlang':%% Line 785
				      'bsl'
			    (%% Line 785
			     1, _3)
		    in  let <_5> =
			    call %% Line 785
				 'erlang':%% Line 785
					  '+'
				(%% Line 785
				 Addr1, _4)
			in  %% Line 785
			    apply 'find_next_allocated'/3
				(_0, _5, _2)
	    %% Line 786
	    <{Next,_X_Pos}> when 'true' ->
		%% Line 787
		{_1,Next}
	    ( <_6> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_6})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'find_next_allocated',3}}] )
'find_next_free'/3 =
    %% Line 792
    ( fun (_0,_1,_2) ->
	  let <MaxBud> =
	      call %% Line 793
		   'erlang':%% Line 793
			    'tuple_size'
		  (_0)
	  in  %% Line 794
	      apply 'find_next_free'/7
		  (_0, _1, 1, MaxBud, -1, -1, _2)
      -| [{'function',{'find_next_free',3}}] )
'find_next_free'/7 =
    %% Line 796
    ( fun (_0,_1,_2,_3,_4,_5,_6) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6> of
	      <Ftab,Addr0,Pos,MaxBud,Next,PosN,Base>
		  when %% Line 797
		    call 'erlang':'=<'
			(Pos,
			 MaxBud) ->
		  ( let <_30> =
			call %% Line 828
			     ( 'erlang'
			       -| ['compiler_generated'] ):%% Line 828
							   ( '-'
							     -| ['compiler_generated'] )
			    (%% Line 798
			     Pos, %% Line 828
				  ( 1
				    -| ['compiler_generated'] ))
		    in  ( let <Pow> =
			      call %% Line 828
				   ( 'erlang'
				     -| ['compiler_generated'] ):%% Line 828
								 ( 'bsl'
								   -| ['compiler_generated'] )
				  (%% Line 828
				   ( 1
				     -| ['compiler_generated'] ), _30)
			  in  ( let <_31> =
				    call %% Line 829
					 ( 'erlang'
					   -| ['compiler_generated'] ):%% Line 829
								       ( '-'
									 -| ['compiler_generated'] )
					(%% Line 798
					 Addr0, %% Line 798
						Base)
				in  ( let <Rem> =
					  call %% Line 829
					       ( 'erlang'
						 -| ['compiler_generated'] ):%% Line 829
									     ( 'rem'
									       -| ['compiler_generated'] )
					      (_31, %% Line 829
						    Pow)
				      in  let <Addr> =
					      case <> of
						%% Line 831
						( <>
						      when ( call ( 'erlang'
								 -| ['compiler_generated'] ):( '=:='
											       -| ['compiler_generated'] )
							      (Rem,
							       ( 0
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] ) ->
						      Addr0
						  -| ['compiler_generated'] )
						%% Line 833
						( <>
						      when ( call ( 'erlang'
								 -| ['compiler_generated'] ):( '<'
											       -| ['compiler_generated'] )
							      (Addr0,
							       Pow)
							  -| ['compiler_generated'] ) ->
						      Addr0
						  -| ['compiler_generated'] )
						%% Line 835
						( <> when ( 'true'
							    -| ['compiler_generated'] ) ->
						      %% Line 836
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( '-'
											     -| ['compiler_generated'] )
							    (Addr0, Rem)
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					  in  let <PosTab> =
						  call %% Line 799
						       'erlang':%% Line 799
								'element'
						      (%% Line 799
						       Pos, %% Line 799
							    Ftab)
					      in  let <_9> =
						      call %% Line 800
							   'erlang':%% Line 800
								    '-'
							  (%% Line 800
							   Addr, %% Line 800
								 1)
						  in  %% Line 800
						      case apply 'bplus_lookup_next'/2
							       (PosTab, _9) of
							%% Line 801
							<'undefined'> when 'true' ->
							    let <_10> =
								call %% Line 802
								     'erlang':%% Line 802
									      '+'
								    (%% Line 802
								     Pos, %% Line 802
									  1)
							    in  %% Line 802
								apply 'find_next_free'/7
								    (Ftab, Addr0, _10, MaxBud, Next, PosN, Base)
							%% Line 803
							<{'ok',Next1}>
							    when let <_12> =
								  call 'erlang':'=:='
								      (PosN, -1)
							      in  let <_13> =
								      call 'erlang':'<'
									  (Next1, Next)
								  in  call 'erlang':'or'
									  (_12, _13) ->
							    let <_14> =
								call %% Line 804
								     'erlang':%% Line 804
									      '+'
								    (%% Line 804
								     Pos, %% Line 804
									  1)
							    in  %% Line 804
								apply 'find_next_free'/7
								    (Ftab, Addr0, _14, MaxBud, Next1, Pos, Base)
							%% Line 805
							<{'ok',_24}> when 'true' ->
							    let <_15> =
								call %% Line 806
								     'erlang':%% Line 806
									      '+'
								    (%% Line 806
								     Pos, %% Line 806
									  1)
							    in  %% Line 806
								apply 'find_next_free'/7
								    (Ftab, Addr0, _15, MaxBud, Next, PosN, Base)
							( <_16> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_16})
							  -| ['compiler_generated'] )
						      end
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
	      %% Line 808
	      <_X_Ftab,_X_Addr,_X_Pos,_X_MaxBud,-1,_X_PosN,_X_Base> when 'true' ->
		  %% Line 809
		  'none'
	      %% Line 810
	      <_X_Ftab,_X_Addr,_X_Pos,_X_MaxBud,Next,PosN,_X_Base> when 'true' ->
		  %% Line 811
		  {Next,PosN}
	    end
	    -| [{'function',{'find_next_free',7}}] )
      -| [{'function',{'find_next_free',7}}] )
'collect_all_interval'/4 =
    %% Line 813
    ( fun (_0,_1,_2,_3) ->
	  let <MaxBud> =
	      call %% Line 814
		   'erlang':%% Line 814
			    'tuple_size'
		  (_0)
	  in  %% Line 815
	      apply 'collect_all_interval'/7
		  (_0, _1, _2, 1, MaxBud, _3, [])
      -| [{'function',{'collect_all_interval',4}}] )
'collect_all_interval'/7 =
    %% Line 817
    ( fun (_0,_1,_2,_3,_4,_5,_6) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6> of
	      <Ftab,L0,U,Pos,MaxBud,Base,Acc0>
		  when call 'erlang':'=<'
			(Pos,
			 MaxBud) ->
		  let <PosTab> =
		      call %% Line 818
			   'erlang':%% Line 818
				    'element'
			  (%% Line 818
			   Pos, %% Line 818
				Ftab)
		  in  ( let <_23> =
			    call %% Line 828
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 828
							       ( '-'
								 -| ['compiler_generated'] )
				(%% Line 819
				 Pos, %% Line 828
				      ( 1
					-| ['compiler_generated'] ))
			in  ( let <Pow> =
				  call %% Line 828
				       ( 'erlang'
					 -| ['compiler_generated'] ):%% Line 828
								     ( 'bsl'
								       -| ['compiler_generated'] )
				      (%% Line 828
				       ( 1
					 -| ['compiler_generated'] ), _23)
			      in  ( let <_24> =
					call %% Line 829
					     ( 'erlang'
					       -| ['compiler_generated'] ):%% Line 829
									   ( '-'
									     -| ['compiler_generated'] )
					    (%% Line 819
					     L0, %% Line 819
						 Base)
				    in  ( let <Rem> =
					      call %% Line 829
						   ( 'erlang'
						     -| ['compiler_generated'] ):%% Line 829
										 ( 'rem'
										   -| ['compiler_generated'] )
						  (_24, %% Line 829
							Pow)
					  in  let <L> =
						  case <> of
						    %% Line 831
						    ( <>
							  when ( call ( 'erlang'
								     -| ['compiler_generated'] ):( '=:='
												   -| ['compiler_generated'] )
								  (Rem,
								   ( 0
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] ) ->
							  L0
						      -| ['compiler_generated'] )
						    %% Line 833
						    ( <>
							  when ( call ( 'erlang'
								     -| ['compiler_generated'] ):( '<'
												   -| ['compiler_generated'] )
								  (L0,
								   Pow)
							      -| ['compiler_generated'] ) ->
							  L0
						      -| ['compiler_generated'] )
						    %% Line 835
						    ( <> when ( 'true'
								-| ['compiler_generated'] ) ->
							  %% Line 836
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( '-'
												 -| ['compiler_generated'] )
								(L0, Rem)
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
					      in  let <Acc> =
						      apply %% Line 820
							    'collect_interval'/5
							  (%% Line 820
							   PosTab, %% Line 820
								   Pos, %% Line 820
									L, %% Line 820
									   U, %% Line 820
									      Acc0)
						  in  let <_10> =
							  call %% Line 821
							       'erlang':%% Line 821
									'+'
							      (%% Line 821
							       Pos, %% Line 821
								    1)
						      in  %% Line 821
							  apply 'collect_all_interval'/7
							      (Ftab, L0, U, _10, MaxBud, Base, Acc)
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
	      %% Line 822
	      <_X_Ftab,_X_L,_X_U,_X_Pos,_X_MaxBud,_X_Base,Acc> when 'true' ->
		  %% Line 823
		  call 'lists':'sort'
		      (Acc)
	    end
	    -| [{'function',{'collect_all_interval',7}}] )
      -| [{'function',{'collect_all_interval',7}}] )
'adjust_addr'/3 =
    %% Line 827
    ( fun (_0,_1,_2) ->
	  let <_3> =
	      call %% Line 828
		   'erlang':%% Line 828
			    '-'
		  (_1, %% Line 828
		       1)
	  in  let <Pow> =
		  call %% Line 828
		       'erlang':%% Line 828
				'bsl'
		      (%% Line 828
		       1, _3)
	      in  let <_5> =
		      call %% Line 829
			   'erlang':%% Line 829
				    '-'
			  (_0, _2)
		  in  let <Rem> =
			  call %% Line 829
			       'erlang':%% Line 829
					'rem'
			      (_5, %% Line 829
				   Pow)
		      in  %% Line 830
			  case <> of
			    %% Line 831
			    <>
				when call 'erlang':'=:='
				      (Rem,
				       0) ->
				_0
			    %% Line 833
			    <>
				when call 'erlang':'<'
				      (_0,
				       Pow) ->
				_0
			    %% Line 835
			    <> when 'true' ->
				%% Line 836
				call 'erlang':'-'
				    (_0, Rem)
			  end
      -| [{'function',{'adjust_addr',3}}] )
'get_disk_map'/0 =
    %% Line 846
    ( fun () ->
	  %% Line 847
	  case call 'erlang':'get'
		   ('disk_map') of
	    %% Line 848
	    <'undefined'> when 'true' ->
		'no_disk_map'
	    %% Line 849
	    <T> when 'true' ->
		let <_0> =
		    call 'ets':'tab2list'
			(T)
		in  {'disk_map',_0}
	  end
      -| [{'function',{'get_disk_map',0}}] )
'init_disk_map'/1 =
    %% Line 852
    ( fun (_0) ->
	  do  %% Line 853
	      call 'error_logger':'info_msg'
		  ([42|[42|[32|[100|[101|[116|[115|[58|[32|[40|[100|[101|[98|[117|[103|[41|[32|[117|[115|[105|[110|[103|[32|[100|[105|[115|[107|[32|[109|[97|[112|[32|[102|[111|[114|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [( _0
																															 -| [{'function',{'init_disk_map',1}}] )|[]])
	      let <_1> =
		  call %% Line 854
		       'ets':%% Line 854
			     'new'
		      (%% Line 854
		       'any', %% Line 854
			      ['ordered_set'])
	      in  %% Line 854
		  call 'erlang':'put'
		      ('disk_map', _1)
      -| [{'function',{'init_disk_map',1}}] )
'stop_disk_map'/0 =
    %% Line 856
    ( fun () ->
	  catch
	      let <_0> =
		  call %% Line 857
		       'erlang':%% Line 857
				'erase'
		      (%% Line 857
		       'disk_map')
	      in  %% Line 857
		  call 'ets':'delete'
		      (_0)
      -| [{'function',{'stop_disk_map',0}}] )
'disk_map_segment_p'/2 =
    %% Line 859
    ( fun (_0,_1) ->
	  %% Line 860
	  case call 'erlang':'get'
		   ('disk_map') of
	    %% Line 861
	    <'undefined'> when 'true' ->
		%% Line 862
		'ok'
	    %% Line 863
	    <_X_T> when 'true' ->
		let <_3> =
		    apply %% Line 864
			  'pread_n'/3
			(_0, _1, %% Line 864
				 2048)
		in  %% Line 864
		    apply 'disk_map_segment'/2
			(_1, _3)
	  end
      -| [{'function',{'disk_map_segment_p',2}}] )
'disk_map_segment'/2 =
    %% Line 867
    ( fun (_0,_1) ->
	  %% Line 868
	  case call 'erlang':'get'
		   ('disk_map') of
	    %% Line 869
	    <'undefined'> when 'true' ->
		%% Line 870
		'ok'
	    %% Line 871
	    <T> when 'true' ->
		let <_2> =
		    call %% Line 872
			 'erlang':%% Line 872
				  'iolist_to_binary'
			(_1)
		in  let <Ps> =
			apply %% Line 872
			      'segment_fragment_to_pointers'/2
			    (_0, _2)
		    in  let <_10> =
			    letrec
				'lc$^0'/1 =
				    %% Line 874
				    fun (_6) ->
					case _6 of
					  <[{_X_P1,#{#<Sz>(32,1,'integer',['unsigned'|['big']]),
						     #<X>(32,1,'integer',['unsigned'|['big']])}#}|_5]>
					      when %% Line 875
						call 'erlang':'>'
						    (X,
						     0) ->
					      let <_8> =
						  #{#<Sz>(32,1,'integer',['unsigned'|['big']]),
						    #<305419896>(32,1,'integer',['unsigned'|['big']])}#
					      in  let <_9> =
						      apply 'lc$^0'/1
							  (_5)
						  in  ( [{X,_8}|_9]
							-| ['compiler_generated'] )
					  ( <[_4|_5]> when 'true' ->
						apply 'lc$^0'/1
						    (_5)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_7> when 'true' ->
						primop 'match_fail'
						    ({'function_clause',_7})
					    -| ['compiler_generated'] )
					end
			    in  %% Line 874
				apply 'lc$^0'/1
				    (Ps)
			in  let <_12> =
				call %% Line 876
				     'erlang':%% Line 876
					      '++'
				    (%% Line 876
				     Ps, _10)
			    in  %% Line 876
				apply 'dm'/2
				    (_12, T)
	  end
      -| [{'function',{'disk_map_segment',2}}] )
'disk_map_pread'/1 =
    %% Line 879
    ( fun (_0) ->
	  %% Line 880
	  case call 'erlang':'get'
		   ('disk_map') of
	    %% Line 881
	    <'undefined'> when 'true' ->
		%% Line 882
		'ok'
	    %% Line 883
	    <T> when 'true' ->
		%% Line 884
		case call 'ets':'lookup'
			 (T, ( _0
			       -| [{'function',{'disk_map_pread',1}}] )) of
		  %% Line 885
		  <[]> when 'true' ->
		      %% Line 886
		      call 'erlang':'throw'
			  ({'pread',( _0
				      -| [{'function',{'disk_map_pread',1}}] ),8})
		  %% Line 887
		  <[{_5,{'pointer',0,0}}|[]]>
		      when call 'erlang':'=:='
			    (_5,
			     ( _0
			       -| [{'function',{'disk_map_pread',1}}] )) ->
		      %% Line 888
		      'ok'
		  %% Line 889
		  <[{_6,{'pointer',Pointer,Sz}}|[]]>
		      when call 'erlang':'=:='
			    (_6,
			     ( _0
			       -| [{'function',{'disk_map_pread',1}}] )) ->
		      %% Line 890
		      case call 'ets':'lookup'
			       (T, Pointer) of
			%% Line 892
			<[{_7,{'slot',_X_P,_8}}|[]]>
			    when let <_9> =
				  call 'erlang':'=:='
				      (_7, Pointer)
			      in  let <_10> =
				      call 'erlang':'=:='
					  (_8, Sz)
				  in  call 'erlang':'and'
					  (_9, _10) ->
			    %% Line 893
			    'ok'
			%% Line 894
			<Got> when 'true' ->
			    %% Line 895
			    call 'erlang':'throw'
				({'pread',( _0
					    -| [{'function',{'disk_map_pread',1}}] ),Pointer,Got})
		      end
		  %% Line 897
		  <Got> when 'true' ->
		      %% Line 898
		      call 'erlang':'throw'
			  ({'pread',( _0
				      -| [{'function',{'disk_map_pread',1}}] ),Got})
		end
	  end
      -| [{'function',{'disk_map_pread',1}}] )
'disk_map'/1 =
    %% Line 904
    ( fun (_0) ->
	  %% Line 905
	  case call 'erlang':'get'
		   ('disk_map') of
	    %% Line 906
	    <'undefined'> when 'true' ->
		%% Line 907
		'ok'
	    %% Line 908
	    <T> when 'true' ->
		let <_7> =
		    letrec
			'lc$^0'/1 =
			    %% Line 909
			    fun (_3) ->
				case _3 of
				  <[{P,Io}|_2]> when 'true' ->
				      let <_5> =
					  call 'erlang':'iolist_to_binary'
					      (Io)
				      in  let <_6> =
					      apply 'lc$^0'/1
						  (_2)
					  in  ( [{P,_5}|_6]
						-| ['compiler_generated'] )
				  ( <[_1|_2]> when 'true' ->
					apply 'lc$^0'/1
					    (_2)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_4> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',_4})
				    -| ['compiler_generated'] )
				end
		    in  %% Line 909
			apply 'lc$^0'/1
			    (( _0
			       -| [{'function',{'disk_map',1}}] ))
		in  %% Line 910
		    apply 'dm'/2
			(_7, T)
	  end
      -| [{'function',{'disk_map',1}}] )
'dm'/2 =
    %% Line 913
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <[{P,_X_Header}|Bs],T>
		  when call 'erlang':'<'
			(P,
			 1336) ->
		  %% Line 914
		  apply 'dm'/2
		      (Bs, T)
	      %% Line 915
	      <[{P0,#{#<61591023>(32,1,'integer',['unsigned'|['big']])}#}|Bs],T> when 'true' ->
		  let <P> =
		      call %% Line 916
			   'erlang':%% Line 916
				    '-'
			  (%% Line 916
			   P0, %% Line 916
			       4)
		  in  do  %% Line 917
			  case call 'ets':'lookup'
				   (T, P) of
			    %% Line 918
			    <[]> when 'true' ->
				%% Line 919
				call 'erlang':'throw'
				    ({'free',P0})
			    %% Line 920
			    <[{_34,_X_OldSz}|[]]>
				when call 'erlang':'=:='
				      (_34,
				       P) ->
				%% Line 921
				case call 'ets':'delete'
					 (T, P) of
				  <'true'> when 'true' ->
				      'ok'
				  ( <_3> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_3})
				    -| ['compiler_generated'] )
				end
			    ( <_4> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_4})
			      -| ['compiler_generated'] )
			  end
			  %% Line 923
			  apply 'dm'/2
			      (Bs, T)
	      %% Line 924
	      <[{SlotP,#{#<Sz>(32,1,'integer',['unsigned'|['big']]),
			 #<305419896>(32,1,'integer',['unsigned'|['big']]),
			 #<_36>(( 'all'
				  -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#}|Bs],T> when 'true' ->
		  %% Line 925
		  case call 'ets':'lookup'
			   (T, {'pointer',SlotP}) of
		    %% Line 926
		    <[{{'pointer',_37},Pointer}|[]]>
			when call 'erlang':'=:='
			      (_37,
			       SlotP) ->
			%% Line 927
			case call 'ets':'lookup'
				 (T, Pointer) of
			  %% Line 928
			  <[{_38,{'pointer',_39,Sz2}}|[]]>
			      when let <_40> =
				    call 'erlang':'=:='
					(_38, Pointer)
				in  let <_41> =
					call 'erlang':'=:='
					    (_39, SlotP)
				    in  call 'erlang':'and'
					    (_40, _41) ->
			      let <_6> =
				  apply %% Line 929
					'log2'/1
				      (%% Line 929
				       Sz)
			      in  let <_5> =
				      apply %% Line 929
					    'log2'/1
					  (%% Line 929
					   Sz2)
				  in  %% Line 929
				      case call 'erlang':'=:='
					       (_6, _5) of
					%% Line 930
					<'true'> when 'true' ->
					    %% Line 941
					    case call 'ets':'insert'
						     (T, {SlotP,{'slot',Pointer,Sz}}) of
					      <'true'> when 'true' ->
						  %% Line 942
						  apply 'dm'/2
						      (Bs, T)
					      ( <_12> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_12})
						-| ['compiler_generated'] )
					    end
					%% Line 932
					<'false'> when 'true' ->
					    %% Line 933
					    call 'erlang':'throw'
						({'active',SlotP,Sz,Pointer,Sz2})
				      end
			  %% Line 935
			  <Got> when 'true' ->
			      %% Line 936
			      call 'erlang':'throw'
				  ({'active',SlotP,Sz,Got})
			end
		    %% Line 938
		    <[]> when 'true' ->
			%% Line 939
			call 'erlang':'throw'
			    ({'active',SlotP,Sz})
		    ( <_9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_9})
		      -| ['compiler_generated'] )
		  end
	      %% Line 943
	      <[{P,#{#<Sz>(32,1,'integer',['unsigned'|['big']]),
		     #<X>(32,1,'integer',['unsigned'|['big']])}#}|Bs],T> when 'true' ->
		  do  %% Line 945
		      case apply 'prev'/2
			       (P, T) of
			%% Line 946
			<{Prev,PrevSz}> when 'true' ->
			    %% Line 947
			    call 'erlang':'throw'
				({'prev',P,Sz,X,Prev,PrevSz})
			%% Line 948
			<'ok'> when 'true' ->
			    'ok'
			( <_13> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_13})
			  -| ['compiler_generated'] )
		      end
		      do  %% Line 951
			  case apply 'next'/3
				   (P, 8, T) of
			    %% Line 952
			    <{'next',Next}> when 'true' ->
				%% Line 954
				call 'erlang':'throw'
				    ({'next',P,Sz,X,Next})
			    %% Line 955
			    <'ok'> when 'true' ->
				'ok'
			    ( <_14> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_14})
			      -| ['compiler_generated'] )
			  end
			  %% Line 958
			  case call 'ets':'insert'
				   (T, {P,{'pointer',X,Sz}}) of
			    <'true'> when 'true' ->
				do  %% Line 959
				    case <> of
				      %% Line 960
				      <>
					  when call 'erlang':'=:='
						(Sz,
						 0) ->
					  %% Line 961
					  case <> of
					    <>
						when call 'erlang':'=:='
						      (( 0
							 -| ['compiler_generated'] ),
						       X) ->
						'ok'
					    ( <> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',0})
					      -| ['compiler_generated'] )
					  end
				      %% Line 963
				      <> when 'true' ->
					  %% Line 964
					  case call 'ets':'insert'
						   (T, {{'pointer',X},P}) of
					    <'true'> when 'true' ->
						'ok'
					    ( <_17> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_17})
					      -| ['compiler_generated'] )
					  end
				    end
				    %% Line 966
				    apply 'dm'/2
					(Bs, T)
			    ( <_15> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_15})
			      -| ['compiler_generated'] )
			  end
	      %% Line 967
	      <[{P,#{#<X>(32,1,'integer',['unsigned'|['big']])}#}|Bs],T> when 'true' ->
		  do  %% Line 968
		      case call 'ets':'lookup'
			       (T, X) of
			%% Line 969
			<[]> when 'true' ->
			    call 'erlang':'throw'
				({'segment',P,X})
			%% Line 970
			<[{_44,{'pointer',0,0}}|[]]>
			    when call 'erlang':'=:='
				  (_44,
				   X) ->
			    'ok'
			%% Line 971
			<[{_45,{'pointer',_46,_47}}|[]]>
			    when let <_50> =
				  call 'erlang':'=:='
				      (_45, X)
			      in  let <_48> =
				      call 'erlang':'=:='
					  (_46, P)
				  in  let <_49> =
					  call 'erlang':'=:='
					      (_47, X)
				      in  let <_51> =
					      call 'erlang':'and'
						  (_48, _49)
					  in  call 'erlang':'and'
						  (_50, _51) ->
			    'ok'
			( <_18> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_18})
			  -| ['compiler_generated'] )
		      end
		      %% Line 973
		      apply 'dm'/2
			  (Bs, T)
	      %% Line 974
	      <[{P,B = #{#<_X_Sz>(32,1,'integer',['unsigned'|['big']]),
			 #<B0>(( 'all'
				 -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#}|Bs],T> when 'true' ->
		  let <_19> =
		      catch
			  %% Line 976
			  call 'erlang':'binary_to_term'
			      (B0)
		  in  let <_24> =
			  case _19 of
			    %% Line 977
			    <{'EXIT',_52}> when 'true' ->
				%% Line 978
				case B0 of
				  <#{#<_X_Sz1>(32,1,'integer',['unsigned'|['big']]),
				     #<B1>(( 'all'
					     -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
				      let <_21> =
					  catch
					      %% Line 979
					      call 'erlang':'binary_to_term'
						  (B1)
				      in  %% Line 979
					  case _21 of
					    %% Line 980
					    <{'EXIT',_53}> when 'true' ->
						%% Line 981
						'false'
					    %% Line 982
					    <_54> when 'true' ->
						%% Line 983
						'true'
					  end
				  ( <_20> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_20})
				    -| ['compiler_generated'] )
				end
			    %% Line 985
			    <_55> when 'true' ->
				%% Line 986
				'true'
			  end
		      in  %% Line 988
			  case <> of
			    %% Line 989
			    <>
				when ( call 'erlang':'=:='
					(_24,
					 'true')
				    -| ['compiler_generated'] ) ->
				let <_29> =
				    call %% Line 991
					 'erlang':%% Line 991
						  '-'
					(%% Line 991
					 P, %% Line 991
					    8)
				in  let <_26> =
					call %% Line 991
					     'erlang':%% Line 991
						      'byte_size'
					    (%% Line 991
					     B)
				    in  let <_27> =
					    call %% Line 991
						 'erlang':%% Line 991
							  '+'
						(_26, %% Line 991
						      8)
					in  let <_28> =
						#{#<_27>(%% Line 991
							 32,1,'integer',['unsigned'|['big']]),
						  #<%% Line 991
						    305419896>(%% Line 991
							       32,1,'integer',['unsigned'|['big']]),
						  #<%% Line 991
						    B>(%% Line 991
						       ( 'all'
							 -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#
					    in  %% Line 991
						apply 'dm'/2
						    ([{_29,_28}|Bs], T)
			    %% Line 992
			    <> when 'true' ->
				let <_30> =
				    apply %% Line 993
					  'segment_fragment_to_pointers'/2
					(%% Line 993
					 P, %% Line 993
					    B)
				in  let <_31> =
					call %% Line 993
					     'erlang':%% Line 993
						      '++'
					    (_30, %% Line 993
						  Bs)
				    in  %% Line 993
					apply 'dm'/2
					    (_31, T)
			  end
	      %% Line 995
	      <[],_X_T> when 'true' ->
		  %% Line 996
		  'ok'
	      ( <_33,_32> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_33,_32})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'dm',2}}] )
      -| [{'function',{'dm',2}}] )
'segment_fragment_to_pointers'/2 =
    %% Line 998
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <_X_P,#{}#> when 'true' ->
		  %% Line 999
		  []
	      %% Line 1000
	      <P,#{#<SzP>(8,8,'binary',['unsigned'|['big']]),
		   #<B>(( 'all'
			  -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
		  let <_2> =
		      call %% Line 1001
			   'erlang':%% Line 1001
				    '+'
			  (%% Line 1001
			   P, %% Line 1001
			      8)
		  in  let <_3> =
			  apply %% Line 1001
				'segment_fragment_to_pointers'/2
			      (_2, %% Line 1001
				   B)
		      in  %% Line 1001
			  [{P,SzP}|_3]
	      ( <_5,_4> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_5,_4})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'segment_fragment_to_pointers',2}}] )
      -| [{'function',{'segment_fragment_to_pointers',2}}] )
'prev'/2 =
    %% Line 1003
    ( fun (_0,_1) ->
	  %% Line 1004
	  case call 'ets':'prev'
		   (_1, _0) of
	    %% Line 1005
	    <'$end_of_table'> when 'true' ->
		'ok'
	    %% Line 1006
	    <Prev> when 'true' ->
		%% Line 1007
		case call 'ets':'lookup'
			 (_1, Prev) of
		  %% Line 1008
		  <[{_8,{'pointer',_X_Ptr,_9}}|[]]>
		      when let <_10> =
			    call 'erlang':'=:='
				(_8, Prev)
			in  let <_11> =
				try
				    let <_2> =
					call 'erlang':'+'
					    (Prev, 8)
				    in  call 'erlang':'>'
					    (_2, _0)
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false'
			    in  call 'erlang':'and'
				    (_10, _11) ->
		      %% Line 1009
		      {Prev,8}
		  %% Line 1010
		  <[{_12,{'slot',_13,Sz}}|[]]>
		      when let <_14> =
			    call 'erlang':'=:='
				(_12, Prev)
			in  let <_15> =
				try
				    let <_3> =
					call 'erlang':'+'
					    (Prev, Sz)
				    in  call 'erlang':'>'
					    (_3, _0)
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false'
			    in  call 'erlang':'and'
				    (_14, _15) ->
		      %% Line 1011
		      {Prev,Sz}
		  %% Line 1012
		  <_16> when 'true' ->
		      %% Line 1013
		      'ok'
		end
	  end
      -| [{'function',{'prev',2}}] )
'next'/3 =
    %% Line 1017
    ( fun (_0,_1,_2) ->
	  %% Line 1018
	  case call 'ets':'next'
		   (_2, _0) of
	    %% Line 1019
	    <'$end_of_table'> when 'true' ->
		'ok'
	    %% Line 1020
	    <Next>
		when try
		      let <_3> =
			  call 'erlang':'+'
			      (_0, _1)
		      in  call 'erlang':'>'
			      (_3, Next)
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false' ->
		%% Line 1021
		{'next',Next}
	    %% Line 1022
	    <_8> when 'true' ->
		%% Line 1023
		'ok'
	  end
      -| [{'function',{'next',3}}] )
'collect_tree'/3 =
    %% Line 1048
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <'v',_X_TI,Acc> when 'true' ->
		  Acc
	      %% Line 1049
	      <T,TI,Acc> when 'true' ->
		  let <_3> =
		      call %% Line 1050
			   'erlang':%% Line 1050
				    '-'
			  (%% Line 1050
			   TI, %% Line 1050
			       1)
		  in  let <Pow> =
			  call %% Line 1050
			       'erlang':%% Line 1050
					'bsl'
			      (%% Line 1050
			       1, _3)
		      in  %% Line 1051
			  apply 'collect_tree2'/3
			      (T, Pow, Acc)
	    end
	    -| [{'function',{'collect_tree',3}}] )
      -| [{'function',{'collect_tree',3}}] )
'collect_tree2'/3 =
    %% Line 1053
    ( fun (_0,_1,_2) ->
	  let <S> =
	      case %% Line 1766
		   ( call ( 'erlang'
			    -| ['compiler_generated'] ):( 'element'
							  -| ['compiler_generated'] )
			 (( 1
			    -| ['compiler_generated'] ), _0)
		     -| ['compiler_generated'] ) of
		%% Line 1767
		( <( 'l'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_10> =
			    call %% Line 1768
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1768
							       ( 'tuple_size'
								 -| ['compiler_generated'] )
				(_0)
			in  %% Line 1768
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '-'
								   -| ['compiler_generated'] )
				  (_10, ( 1
					  -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		%% Line 1769
		( <( 'n'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_11> =
			    call %% Line 1770
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1770
							       ( 'tuple_size'
								 -| ['compiler_generated'] )
				(_0)
			in  %% Line 1770
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'div'
								   -| ['compiler_generated'] )
				  (_11, ( 2
					  -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <_3> when ( 'true'
			      -| ['compiler_generated'] ) ->
		      %% Line 1766
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'case_clause'
				  -| ['compiler_generated'] ),_3}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  in  %% Line 1055
	      case call 'erlang':'element'
		       (1, _0) of
		%% Line 1056
		<'l'> when 'true' ->
		    %% Line 1057
		    apply 'collect_leaf'/4
			(_0, S, _1, _2)
		%% Line 1058
		<'n'> when 'true' ->
		    %% Line 1059
		    apply 'collect_node'/4
			(_0, S, _1, _2)
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'collect_tree2',3}}] )
'collect_leaf'/4 =
    %% Line 1062
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <_X_Leaf,0,_X_Pow,Acc> when 'true' ->
		  %% Line 1063
		  Acc
	      %% Line 1064
	      <Leaf,I,Pow,Acc> when 'true' ->
		  let <_4> =
		      call %% Line 1065
			   'erlang':%% Line 1065
				    '+'
			  (%% Line 1065
			   I, %% Line 1065
			      1)
		  in  let <Key> =
			  call %% Line 1065
			       'erlang':%% Line 1065
					'element'
			      (_4, %% Line 1065
				   Leaf)
		      in  let <_6> =
			      call %% Line 1066
				   'erlang':%% Line 1066
					    '+'
				  (%% Line 1066
				   Key, %% Line 1066
					Pow)
			  in  let <V> = {%% Line 1066
				   Key,_6}
			      in  let <_8> =
				      call %% Line 1067
					   'erlang':%% Line 1067
						    '-'
					  (%% Line 1067
					   I, %% Line 1067
					      1)
				  in  %% Line 1067
				      apply 'collect_leaf'/4
					  (Leaf, _8, Pow, [V|Acc])
	    end
	    -| [{'function',{'collect_leaf',4}}] )
      -| [{'function',{'collect_leaf',4}}] )
'collect_node'/4 =
    %% Line 1069
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <_X_Node,0,_X_Pow,Acc> when 'true' ->
		  %% Line 1070
		  Acc
	      %% Line 1071
	      <Node,I,Pow,Acc> when 'true' ->
		  ( let <_13> =
			call %% Line 1776
			     ( 'erlang'
			       -| ['compiler_generated'] ):%% Line 1776
							   ( '*'
							     -| ['compiler_generated'] )
			    (%% Line 1072
			     I, %% Line 1776
				( 2
				  -| ['compiler_generated'] ))
		    in  let <_4> =
			    call %% Line 1776
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1776
							       ( 'element'
								 -| ['compiler_generated'] )
				(_13, %% Line 1072
				      Node)
			in  let <Acc1> =
				apply %% Line 1072
				      'collect_tree2'/3
				    (_4, %% Line 1072
					 Pow, %% Line 1072
					      Acc)
			    in  let <_6> =
				    call %% Line 1073
					 'erlang':%% Line 1073
						  '-'
					(%% Line 1073
					 I, %% Line 1073
					    1)
				in  %% Line 1073
				    apply 'collect_node'/4
					(Node, _6, Pow, Acc1)
		    -| ['compiler_generated'] )
	    end
	    -| [{'function',{'collect_node',4}}] )
      -| [{'function',{'collect_node',4}}] )
'tree_to_bin'/5 =
    %% Line 1076
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <'v',_X_F,_X_Max,Ws,WsSz> when 'true' ->
		  {Ws,WsSz}
	      %% Line 1077
	      <T,F,Max,Ws,WsSz> when 'true' ->
		  %% Line 1078
		  case apply 'tree_to_bin2'/7
			   (T, F, Max, 0, [], Ws, WsSz) of
		    <{N,L1,Ws1,WsSz1}> when 'true' ->
			let <_6> =
			    call %% Line 1079
				 'lists':%% Line 1079
					 'reverse'
				(%% Line 1079
				 L1)
			in  %% Line 1079
			    case apply F
				     (N, _6, Ws1, WsSz1) of
			      <{N1,L2,Ws2,WsSz2}> when 'true' ->
				  %% Line 1080
				  case apply F
					   (N1, L2, Ws2, WsSz2) of
				    <{0,[],NWs,NWsSz}> when 'true' ->
					%% Line 1081
					{NWs,NWsSz}
				    ( <_8> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_8})
				      -| ['compiler_generated'] )
				  end
			      ( <_7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_7})
				-| ['compiler_generated'] )
			    end
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5})
		      -| ['compiler_generated'] )
		  end
	    end
	    -| [{'function',{'tree_to_bin',5}}] )
      -| [{'function',{'tree_to_bin',5}}] )
'tree_to_bin2'/7 =
    %% Line 1083
    ( fun (_0,_1,_2,_3,_4,_5,_6) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6> of
	      <Tree,F,Max,N,Acc,Ws,WsSz>
		  when call 'erlang':'>='
			(N,
			 Max) ->
		  let <_7> =
		      call %% Line 1084
			   'lists':%% Line 1084
				   'reverse'
			  (%% Line 1084
			   Acc)
		  in  %% Line 1084
		      case apply F
			       (N, _7, Ws, WsSz) of
			<{NN,NAcc,NWs,NWsSz}> when 'true' ->
			    let <_9> =
				call %% Line 1085
				     'lists':%% Line 1085
					     'reverse'
				    (%% Line 1085
				     NAcc)
			    in  %% Line 1085
				apply 'tree_to_bin2'/7
				    (Tree, F, Max, NN, _9, NWs, NWsSz)
			( <_8> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_8})
			  -| ['compiler_generated'] )
		      end
	      %% Line 1086
	      <Tree,F,Max,N,Acc,Ws,WsSz> when 'true' ->
		  let <S> =
		      case %% Line 1766
			   ( call ( 'erlang'
				    -| ['compiler_generated'] ):( 'element'
								  -| ['compiler_generated'] )
				 (( 1
				    -| ['compiler_generated'] ), Tree)
			     -| ['compiler_generated'] ) of
			%% Line 1767
			( <( 'l'
			     -| ['compiler_generated'] )> when ( 'true'
								 -| ['compiler_generated'] ) ->
			      ( let <_24> =
				    call %% Line 1768
					 ( 'erlang'
					   -| ['compiler_generated'] ):%% Line 1768
								       ( 'tuple_size'
									 -| ['compiler_generated'] )
					(Tree)
				in  %% Line 1768
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( '-'
									   -| ['compiler_generated'] )
					  (_24, ( 1
						  -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 1769
			( <( 'n'
			     -| ['compiler_generated'] )> when ( 'true'
								 -| ['compiler_generated'] ) ->
			      ( let <_25> =
				    call %% Line 1770
					 ( 'erlang'
					   -| ['compiler_generated'] ):%% Line 1770
								       ( 'tuple_size'
									 -| ['compiler_generated'] )
					(Tree)
				in  %% Line 1770
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'div'
									   -| ['compiler_generated'] )
					  (_25, ( 2
						  -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			( <_26> when ( 'true'
				       -| ['compiler_generated'] ) ->
			      %% Line 1766
			      ( primop ( 'match_fail'
					 -| ['compiler_generated'] )
				    (( {( 'case_clause'
					  -| ['compiler_generated'] ),_26}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 1088
		      case call 'erlang':'element'
			       (1, Tree) of
			%% Line 1089
			<'l'> when 'true' ->
			    let <_13> =
				call %% Line 1090
				     'erlang':%% Line 1090
					      '+'
				    (%% Line 1090
				     N, %% Line 1090
					S)
			    in  let <_11> =
				    apply %% Line 1090
					  'bplus_leaf_to_list'/1
					(%% Line 1090
					 Tree)
				in  let <_12> =
					apply %% Line 1090
					      'leaf_to_bin'/2
					    (_11, %% Line 1090
						  Acc)
				    in  %% Line 1090
					{_13,_12,Ws,WsSz}
			%% Line 1091
			<'n'> when 'true' ->
			    %% Line 1092
			    apply 'node_to_bin'/9
				(Tree, F, Max, N, Acc, 1, S, Ws, WsSz)
			( <_14> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_14})
			  -| ['compiler_generated'] )
		      end
	    end
	    -| [{'function',{'tree_to_bin2',7}}] )
      -| [{'function',{'tree_to_bin2',7}}] )
'node_to_bin'/9 =
    %% Line 1095
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	      <_X_Node,_X_F,_X_Max,N,Acc,I,S,Ws,WsSz>
		  when call 'erlang':'>'
			(I,
			 S) ->
		  %% Line 1096
		  {N,Acc,Ws,WsSz}
	      %% Line 1097
	      <Node,F,Max,N,Acc,I,S,Ws,WsSz> when 'true' ->
		  ( let <_23> =
			call %% Line 1776
			     ( 'erlang'
			       -| ['compiler_generated'] ):%% Line 1776
							   ( '*'
							     -| ['compiler_generated'] )
			    (%% Line 1099
			     I, %% Line 1776
				( 2
				  -| ['compiler_generated'] ))
		    in  let <_9> =
			    call %% Line 1776
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1776
							       ( 'element'
								 -| ['compiler_generated'] )
				(_23, %% Line 1099
				      Node)
			in  %% Line 1098
			    case %% Line 1099
				 apply 'tree_to_bin2'/7
				     (_9, F, Max, N, Acc, Ws, WsSz) of
			      <{N1,Acc1,Ws1,WsSz1}> when 'true' ->
				  let <_11> =
				      call %% Line 1100
					   'erlang':%% Line 1100
						    '+'
					  (%% Line 1100
					   I, %% Line 1100
					      1)
				  in  %% Line 1100
				      apply 'node_to_bin'/9
					  (Node, F, Max, N1, Acc1, _11, S, Ws1, WsSz1)
			      ( <_10> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_10})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
	    end
	    -| [{'function',{'node_to_bin',9}}] )
      -| [{'function',{'node_to_bin',9}}] )
'leaf_to_bin'/2 =
    %% Line 1102
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <[N|L],Acc> when 'true' ->
		  let <_2> =
		      #{#<%% Line 1103
			  N>(%% Line 1103
			     32,1,'integer',['unsigned'|['big']])}#
		  in  %% Line 1103
		      apply 'leaf_to_bin'/2
			  (L, [_2|Acc])
	      %% Line 1104
	      <[],Acc> when 'true' ->
		  %% Line 1105
		  Acc
	      ( <_4,_3> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_4,_3})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'leaf_to_bin',2}}] )
      -| [{'function',{'leaf_to_bin',2}}] )
'list_to_tree'/1 =
    %% Line 1108
    ( fun (_0) ->
	  let <_2> =
	      call %% Line 1109
		   'erlang':%% Line 1109
			    'length'
		  (( _0
		     -| [{'function',{'list_to_tree',1}}] ))
	  in  let <_1> = 'bplus_mk_leaf'/1
	      in  %% Line 1109
		  apply 'leafs_to_nodes'/4
		      (( _0
			 -| [{'function',{'list_to_tree',1}}] ), _2, _1, [])
      -| [{'function',{'list_to_tree',1}}] )
'leafs_to_nodes'/4 =
    %% Line 1111
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <[],0,_X_F,[T|[]]> when 'true' ->
		  %% Line 1112
		  T
	      %% Line 1113
	      <[],0,_X_F,L> when 'true' ->
		  let <_6> =
		      call %% Line 1114
			   'lists':%% Line 1114
				   'reverse'
			  (%% Line 1114
			   L)
		  in  let <_5> =
			  call %% Line 1114
			       'erlang':%% Line 1114
					'length'
			      (%% Line 1114
			       L)
		      in  let <_4> = 'mk_node'/1
			  in  %% Line 1114
			      apply 'leafs_to_nodes'/4
				  (_6, _5, _4, [])
	      %% Line 1115
	      <Ls,Sz,F,L> when 'true' ->
		  let <_7> =
		      case <> of
			%% Line 1117
			<>
			    when call 'erlang':'=<'
				  (Sz,
				   16) ->
			    Sz
			%% Line 1118
			<>
			    when call 'erlang':'=<'
				  (Sz,
				   32) ->
			    call 'erlang':'div'
				(Sz, 2)
			%% Line 1119
			<> when 'true' ->
			    12
		      end
		  in  %% Line 1121
		      case apply 'split_list'/3
			       (Ls, _7, []) of
			<{L1,R}> when 'true' ->
			    let <N> =
				apply %% Line 1122
				      F
				    (%% Line 1122
				     L1)
			    in  let <Sz1> =
				    call %% Line 1123
					 'erlang':%% Line 1123
						  '-'
					(%% Line 1123
					 Sz, _7)
				in  %% Line 1124
				    apply 'leafs_to_nodes'/4
					(R, Sz1, F, [N|L])
			( <_9> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_9})
			  -| ['compiler_generated'] )
		      end
	    end
	    -| [{'function',{'leafs_to_nodes',4}}] )
      -| [{'function',{'leafs_to_nodes',4}}] )
'mk_node'/1 =
    %% Line 1126
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'mk_node',1}}] ) of
	      <[E|Es]> when 'true' ->
		  let <_6> =
		      fun (_3,_2) ->
			  let <_1> =
			      apply %% Line 1127
				    'get_first_key'/1
				  (_3)
			  in  %% Line 1127
			      [_1|[_3|_2]]
		  in  let <_7> =
			  call %% Line 1127
			       'lists':%% Line 1127
				       'foldr'
			      (_6, %% Line 1127
				   [], %% Line 1127
				       Es)
		      in  let <NL> =
			      [%% Line 1127
			       E|_7]
			  in  %% Line 1128
			      apply 'bplus_mk_node'/1
				  (NL)
	      ( <_9> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_9})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'mk_node',1}}] )
      -| [{'function',{'mk_node',1}}] )
'split_list'/3 =
    %% Line 1130
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <L,0,SL> when 'true' ->
		  %% Line 1131
		  {SL,L}
	      %% Line 1132
	      <[E|Es],I,SL> when 'true' ->
		  let <_3> =
		      call %% Line 1133
			   'erlang':%% Line 1133
				    '-'
			  (%% Line 1133
			   I, %% Line 1133
			      1)
		  in  %% Line 1133
		      apply 'split_list'/3
			  (Es, _3, [E|SL])
	      ( <_6,_5,_4> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_6,_5,_4})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'split_list',3}}] )
      -| [{'function',{'split_list',3}}] )
'get_first_key'/1 =
    %% Line 1135
    ( fun (_0) ->
	  %% Line 1136
	  case call 'erlang':'element'
		   (1, ( _0
			 -| [{'function',{'get_first_key',1}}] )) of
	    %% Line 1137
	    <'l'> when 'true' ->
		%% Line 1138
		call 'erlang':'element'
		    (2, ( _0
			  -| [{'function',{'get_first_key',1}}] ))
	    %% Line 1139
	    <'n'> when 'true' ->
		let <_9> =
		    call %% Line 1776
			 ( 'erlang'
			   -| ['compiler_generated'] ):%% Line 1776
						       ( 'element'
							 -| ['compiler_generated'] )
			(%% Line 1776
			 ( 2
			   -| ['compiler_generated'] ), ( _0
							  -| [{'function',{'get_first_key',1}}] ))
		in  %% Line 1140
		    apply 'get_first_key'/1
			(_9)
	    ( <_3> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_3})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'get_first_key',1}}] )
'collect_interval'/5 =
    %% Line 1144
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <'v',_X_TI,_X_L,_X_U,Acc> when 'true' ->
		  Acc
	      %% Line 1145
	      <T,TI,L,U,Acc> when 'true' ->
		  let <_5> =
		      call %% Line 1146
			   'erlang':%% Line 1146
				    '-'
			  (%% Line 1146
			   TI, %% Line 1146
			       1)
		  in  let <Pow> =
			  call %% Line 1146
			       'erlang':%% Line 1146
					'bsl'
			      (%% Line 1146
			       1, _5)
		      in  %% Line 1147
			  apply 'collect_interval2'/5
			      (T, Pow, L, U, Acc)
	    end
	    -| [{'function',{'collect_interval',5}}] )
      -| [{'function',{'collect_interval',5}}] )
'collect_interval2'/5 =
    %% Line 1149
    ( fun (_0,_1,_2,_3,_4) ->
	  let <S> =
	      case %% Line 1766
		   ( call ( 'erlang'
			    -| ['compiler_generated'] ):( 'element'
							  -| ['compiler_generated'] )
			 (( 1
			    -| ['compiler_generated'] ), _0)
		     -| ['compiler_generated'] ) of
		%% Line 1767
		( <( 'l'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_18> =
			    call %% Line 1768
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1768
							       ( 'tuple_size'
								 -| ['compiler_generated'] )
				(_0)
			in  %% Line 1768
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '-'
								   -| ['compiler_generated'] )
				  (_18, ( 1
					  -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		%% Line 1769
		( <( 'n'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_19> =
			    call %% Line 1770
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1770
							       ( 'tuple_size'
								 -| ['compiler_generated'] )
				(_0)
			in  %% Line 1770
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'div'
								   -| ['compiler_generated'] )
				  (_19, ( 2
					  -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <_20> when ( 'true'
			       -| ['compiler_generated'] ) ->
		      %% Line 1766
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'case_clause'
				  -| ['compiler_generated'] ),_20}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  in  %% Line 1151
	      case call 'erlang':'element'
		       (1, _0) of
		%% Line 1152
		<'l'> when 'true' ->
		    %% Line 1153
		    apply 'collect_leaf_interval'/6
			(_0, S, _1, _2, _3, _4)
		%% Line 1154
		<'n'> when 'true' ->
		    %% Line 1155
		    case apply 'bplus_select_sub_tree'/2
			     (_0, _3) of
		      <{Max,_14}> when 'true' ->
			  %% Line 1156
			  case apply 'bplus_select_sub_tree_2'/3
				   (_0, _2, Max) of
			    <{Min,_15}> when 'true' ->
				%% Line 1157
				apply 'collect_node_interval'/7
				    (_0, Min, Max, _1, _2, _3, _4)
			    ( <_7> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_7})
			      -| ['compiler_generated'] )
			  end
		      ( <_6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_6})
			-| ['compiler_generated'] )
		    end
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_8})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'collect_interval2',5}}] )
'collect_leaf_interval'/6 =
    %% Line 1160
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  ( case <_0,_1,_2,_3,_4,_5> of
	      <_X_Leaf,0,_X_Pow,_X_L,_X_U,Acc> when 'true' ->
		  %% Line 1161
		  Acc
	      %% Line 1162
	      <Leaf,I,Pow,L,U,Acc> when 'true' ->
		  let <_6> =
		      call %% Line 1163
			   'erlang':%% Line 1163
				    '+'
			  (%% Line 1163
			   I, %% Line 1163
			      1)
		  in  let <Key> =
			  call %% Line 1163
			       'erlang':%% Line 1163
					'element'
			      (_6, %% Line 1163
				   Leaf)
		      in  %% Line 1164
			  case <> of
			    %% Line 1165
			    <>
				when call 'erlang':'<'
				      (Key,
				       L) ->
				%% Line 1166
				Acc
			    %% Line 1167
			    <>
				when call 'erlang':'>'
				      (Key,
				       U) ->
				let <_8> =
				    call %% Line 1168
					 'erlang':%% Line 1168
						  '-'
					(%% Line 1168
					 I, %% Line 1168
					    1)
				in  %% Line 1168
				    apply 'collect_leaf_interval'/6
					(Leaf, _8, Pow, L, U, Acc)
			    %% Line 1169
			    <> when 'true' ->
				let <_10> =
				    call %% Line 1170
					 'erlang':%% Line 1170
						  '-'
					(%% Line 1170
					 I, %% Line 1170
					    1)
				in  let <_9> =
					call %% Line 1170
					     'erlang':%% Line 1170
						      '+'
					    (%% Line 1170
					     Key, %% Line 1170
						  Pow)
				    in  %% Line 1170
					apply 'collect_leaf_interval'/6
					    (Leaf, _10, Pow, L, U, [{Key,_9}|Acc])
			  end
	    end
	    -| [{'function',{'collect_leaf_interval',6}}] )
      -| [{'function',{'collect_leaf_interval',6}}] )
'collect_node_interval'/7 =
    %% Line 1173
    ( fun (_0,_1,_2,_3,_4,_5,_6) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6> of
	      <_X_Node,I,UP,_X_Pow,_X_L,_X_U,Acc>
		  when call 'erlang':'>'
			(I,
			 UP) ->
		  %% Line 1174
		  Acc
	      %% Line 1175
	      <Node,I,UP,Pow,L,U,Acc> when 'true' ->
		  ( let <_19> =
			call %% Line 1776
			     ( 'erlang'
			       -| ['compiler_generated'] ):%% Line 1776
							   ( '*'
							     -| ['compiler_generated'] )
			    (%% Line 1176
			     I, %% Line 1776
				( 2
				  -| ['compiler_generated'] ))
		    in  let <_7> =
			    call %% Line 1776
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1776
							       ( 'element'
								 -| ['compiler_generated'] )
				(_19, %% Line 1176
				      Node)
			in  let <Acc1> =
				apply %% Line 1176
				      'collect_interval2'/5
				    (_7, %% Line 1176
					 Pow, %% Line 1176
					      L, %% Line 1176
						 U, %% Line 1176
						    Acc)
			    in  let <_9> =
				    call %% Line 1177
					 'erlang':%% Line 1177
						  '+'
					(%% Line 1177
					 I, %% Line 1177
					    1)
				in  %% Line 1177
				    apply 'collect_node_interval'/7
					(Node, _9, UP, Pow, L, U, Acc1)
		    -| ['compiler_generated'] )
	    end
	    -| [{'function',{'collect_node_interval',7}}] )
      -| [{'function',{'collect_node_interval',7}}] )
'bplus_empty_tree'/0 =
    %% Line 1184
    ( fun () ->
	  'v'
      -| [{'function',{'bplus_empty_tree',0}}] )
'bplus_lookup'/2 =
    %% Line 1191
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <'v',_X_Key> when 'true' ->
		  'undefined'
	      %% Line 1192
	      <Tree,Key> when 'true' ->
		  %% Line 1193
		  case call 'erlang':'element'
			   (1, Tree) of
		    %% Line 1194
		    <'l'> when 'true' ->
			%% Line 1195
			apply 'bplus_lookup_leaf'/2
			    (Key, Tree)
		    %% Line 1196
		    <'n'> when 'true' ->
			%% Line 1197
			case apply 'bplus_select_sub_tree'/2
				 (Tree, Key) of
			  <{_6,SubTree}> when 'true' ->
			      %% Line 1198
			      apply 'bplus_lookup'/2
				  (SubTree, Key)
			  ( <_2> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_2})
			    -| ['compiler_generated'] )
			end
		    ( <_3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_3})
		      -| ['compiler_generated'] )
		  end
	    end
	    -| [{'function',{'bplus_lookup',2}}] )
      -| [{'function',{'bplus_lookup',2}}] )
'bplus_lookup_leaf'/2 =
    %% Line 1205
    ( fun (_0,_1) ->
	  let <_2> =
	      case %% Line 1766
		   ( call ( 'erlang'
			    -| ['compiler_generated'] ):( 'element'
							  -| ['compiler_generated'] )
			 (( 1
			    -| ['compiler_generated'] ), _1)
		     -| ['compiler_generated'] ) of
		%% Line 1767
		( <( 'l'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_6> =
			    call %% Line 1768
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1768
							       ( 'tuple_size'
								 -| ['compiler_generated'] )
				(_1)
			in  %% Line 1768
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '-'
								   -| ['compiler_generated'] )
				  (_6, ( 1
					 -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		%% Line 1769
		( <( 'n'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_2> =
			    call %% Line 1770
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1770
							       ( 'tuple_size'
								 -| ['compiler_generated'] )
				(_1)
			in  %% Line 1770
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'div'
								   -| ['compiler_generated'] )
				  (_2, ( 2
					 -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <_3> when ( 'true'
			      -| ['compiler_generated'] ) ->
		      %% Line 1766
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'case_clause'
				  -| ['compiler_generated'] ),_3}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  in  %% Line 1206
	      apply 'bplus_lookup_leaf_2'/3
		  (_0, _1, _2)
      -| [{'function',{'bplus_lookup_leaf',2}}] )
'bplus_lookup_leaf_2'/3 =
    %% Line 1208
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <_9,_10,0> when 'true' ->
		  'undefined'
	      %% Line 1209
	      <Key,Leaf,N> when 'true' ->
		  let <_3> =
		      call %% Line 1210
			   'erlang':%% Line 1210
				    '+'
			  (%% Line 1210
			   N, %% Line 1210
			      1)
		  in  %% Line 1210
		      case call 'erlang':'element'
			       (_3, Leaf) of
			%% Line 1211
			<_11>
			    when call 'erlang':'=:='
				  (_11,
				   Key) ->
			    {'ok',Key}
			%% Line 1212
			<_12> when 'true' ->
			    let <_4> =
				call %% Line 1213
				     'erlang':%% Line 1213
					      '-'
				    (%% Line 1213
				     N, %% Line 1213
					1)
			    in  %% Line 1213
				apply 'bplus_lookup_leaf_2'/3
				    (Key, Leaf, _4)
		      end
	    end
	    -| [{'function',{'bplus_lookup_leaf_2',3}}] )
      -| [{'function',{'bplus_lookup_leaf_2',3}}] )
'bplus_lookup_first'/1 =
    %% Line 1221
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'bplus_lookup_first',1}}] ) of
	      <'v'> when 'true' ->
		  'undefined'
	      %% Line 1222
	      <Tree> when 'true' ->
		  %% Line 1223
		  case call 'erlang':'element'
			   (1, Tree) of
		    %% Line 1224
		    <'l'> when 'true' ->
			let <_2> =
			    call %% Line 1226
				 'erlang':%% Line 1226
					  'element'
				(%% Line 1226
				 2, %% Line 1226
				    Tree)
			in  %% Line 1226
			    {'ok',_2}
		    %% Line 1227
		    <'n'> when 'true' ->
			let <_3> =
			    call %% Line 1776
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1776
							       ( 'element'
								 -| ['compiler_generated'] )
				(%% Line 1776
				 ( 2
				   -| ['compiler_generated'] ), %% Line 1229
								Tree)
			in  %% Line 1229
			    apply 'bplus_lookup_first'/1
				(_3)
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_4})
		      -| ['compiler_generated'] )
		  end
	    end
	    -| [{'function',{'bplus_lookup_first',1}}] )
      -| [{'function',{'bplus_lookup_first',1}}] )
'bplus_lookup_next'/2 =
    %% Line 1238
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <'v',_10> when 'true' ->
		  'undefined'
	      %% Line 1239
	      <Tree,Key> when 'true' ->
		  %% Line 1240
		  case call 'erlang':'element'
			   (1, Tree) of
		    %% Line 1241
		    <'l'> when 'true' ->
			%% Line 1242
			apply 'lookup_next_leaf'/2
			    (Key, Tree)
		    %% Line 1243
		    <'n'> when 'true' ->
			%% Line 1244
			case apply 'bplus_select_sub_tree'/2
				 (Tree, Key) of
			  <{Pos,SubTree}> when 'true' ->
			      %% Line 1245
			      case apply 'bplus_lookup_next'/2
				       (SubTree, Key) of
				%% Line 1246
				<'undefined'> when 'true' ->
				    let <S> =
					case %% Line 1766
					     ( call ( 'erlang'
						      -| ['compiler_generated'] ):( 'element'
										    -| ['compiler_generated'] )
						   (( 1
						      -| ['compiler_generated'] ), Tree)
					       -| ['compiler_generated'] ) of
					  %% Line 1767
					  ( <( 'l'
					       -| ['compiler_generated'] )> when ( 'true'
										   -| ['compiler_generated'] ) ->
						( let <_13> =
						      call %% Line 1768
							   ( 'erlang'
							     -| ['compiler_generated'] ):%% Line 1768
											 ( 'tuple_size'
											   -| ['compiler_generated'] )
							  (Tree)
						  in  %% Line 1768
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( '-'
											     -| ['compiler_generated'] )
							    (_13, ( 1
								    -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  %% Line 1769
					  ( <( 'n'
					       -| ['compiler_generated'] )> when ( 'true'
										   -| ['compiler_generated'] ) ->
						( let <_2> =
						      call %% Line 1770
							   ( 'erlang'
							     -| ['compiler_generated'] ):%% Line 1770
											 ( 'tuple_size'
											   -| ['compiler_generated'] )
							  (Tree)
						  in  %% Line 1770
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'div'
											     -| ['compiler_generated'] )
							    (_2, ( 2
								   -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_3> when ( 'true'
							-| ['compiler_generated'] ) ->
						%% Line 1766
						( primop ( 'match_fail'
							   -| ['compiler_generated'] )
						      (( {( 'case_clause'
							    -| ['compiler_generated'] ),_3}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
				    in  %% Line 1248
					case <> of
					  %% Line 1250
					  <>
					      when call 'erlang':'>'
						    (S,
						     Pos) ->
					      let <_4> =
						  call %% Line 1251
						       'erlang':%% Line 1251
								'+'
						      (%% Line 1251
						       Pos, %% Line 1251
							    1)
					      in  ( let <_2> =
							call %% Line 1776
							     ( 'erlang'
							       -| ['compiler_generated'] ):%% Line 1776
											   ( '*'
											     -| ['compiler_generated'] )
							    (_4, %% Line 1776
								 ( 2
								   -| ['compiler_generated'] ))
						    in  let <_5> =
							    call %% Line 1776
								 ( 'erlang'
								   -| ['compiler_generated'] ):%% Line 1776
											       ( 'element'
												 -| ['compiler_generated'] )
								(_2, %% Line 1251
								     Tree)
							in  %% Line 1251
							    apply 'bplus_lookup_first'/1
								(_5)
						    -| ['compiler_generated'] )
					  %% Line 1253
					  <> when 'true' ->
					      %% Line 1254
					      'undefined'
					end
				%% Line 1257
				<Result> when 'true' ->
				    %% Line 1258
				    Result
			      end
			  ( <_2> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_2})
			    -| ['compiler_generated'] )
			end
		    ( <_7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_7})
		      -| ['compiler_generated'] )
		  end
	    end
	    -| [{'function',{'bplus_lookup_next',2}}] )
      -| [{'function',{'bplus_lookup_next',2}}] )
'lookup_next_leaf'/2 =
    %% Line 1267
    ( fun (_0,_1) ->
	  let <_2> =
	      case %% Line 1766
		   ( call ( 'erlang'
			    -| ['compiler_generated'] ):( 'element'
							  -| ['compiler_generated'] )
			 (( 1
			    -| ['compiler_generated'] ), _1)
		     -| ['compiler_generated'] ) of
		%% Line 1767
		( <( 'l'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_6> =
			    call %% Line 1768
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1768
							       ( 'tuple_size'
								 -| ['compiler_generated'] )
				(_1)
			in  %% Line 1768
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '-'
								   -| ['compiler_generated'] )
				  (_6, ( 1
					 -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		%% Line 1769
		( <( 'n'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_2> =
			    call %% Line 1770
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1770
							       ( 'tuple_size'
								 -| ['compiler_generated'] )
				(_1)
			in  %% Line 1770
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'div'
								   -| ['compiler_generated'] )
				  (_2, ( 2
					 -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <_3> when ( 'true'
			      -| ['compiler_generated'] ) ->
		      %% Line 1766
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'case_clause'
				  -| ['compiler_generated'] ),_3}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  in  %% Line 1268
	      apply 'lookup_next_leaf_2'/4
		  (_0, _1, _2, 1)
      -| [{'function',{'lookup_next_leaf',2}}] )
'lookup_next_leaf_2'/4 =
    %% Line 1270
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <Key,Leaf,Size,_20>
		  when call 'erlang':'=:='
			(_20,
			 Size) ->
		  let <_4> =
		      call %% Line 1272
			   'erlang':%% Line 1272
				    '+'
			  (%% Line 1272
			   Size, %% Line 1272
				 1)
		  in  let <K> =
			  call %% Line 1272
			       'erlang':%% Line 1272
					'element'
			      (_4, %% Line 1272
				   Leaf)
		      in  %% Line 1273
			  case <> of
			    %% Line 1274
			    <>
				when call 'erlang':'>'
				      (K,
				       Key) ->
				let <_6> =
				    call %% Line 1275
					 'erlang':%% Line 1275
						  '+'
					(%% Line 1275
					 Size, %% Line 1275
					       1)
				in  let <_7> =
					call %% Line 1275
					     'erlang':%% Line 1275
						      'element'
					    (_6, %% Line 1275
						 Leaf)
				    in  %% Line 1275
					{'ok',_7}
			    %% Line 1276
			    <> when 'true' ->
				%% Line 1277
				'undefined'
			  end
	      %% Line 1279
	      <Key,Leaf,Size,N> when 'true' ->
		  let <_8> =
		      call %% Line 1280
			   'erlang':%% Line 1280
				    '+'
			  (%% Line 1280
			   N, %% Line 1280
			      1)
		  in  let <K> =
			  call %% Line 1280
			       'erlang':%% Line 1280
					'element'
			      (_8, %% Line 1280
				   Leaf)
		      in  %% Line 1281
			  case <> of
			    %% Line 1282
			    <>
				when call 'erlang':'<'
				      (K,
				       Key) ->
				let <_10> =
				    call %% Line 1284
					 'erlang':%% Line 1284
						  '+'
					(%% Line 1284
					 N, %% Line 1284
					    1)
				in  %% Line 1284
				    apply 'lookup_next_leaf_2'/4
					(Key, Leaf, Size, _10)
			    %% Line 1285
			    <>
				when call 'erlang':'=='
				      (Key,
				       K) ->
				let <_11> =
				    call %% Line 1287
					 'erlang':%% Line 1287
						  '+'
					(%% Line 1287
					 N, %% Line 1287
					    1)
				in  let <_12> =
					call %% Line 1287
					     'erlang':%% Line 1287
						      '+'
					    (_11, %% Line 1287
						  1)
				    in  let <_13> =
					    call %% Line 1287
						 'erlang':%% Line 1287
							  'element'
						(_12, %% Line 1287
						      Leaf)
					in  %% Line 1287
					    {'ok',_13}
			    %% Line 1288
			    <> when 'true' ->
				let <_14> =
				    call %% Line 1291
					 'erlang':%% Line 1291
						  '+'
					(%% Line 1291
					 N, %% Line 1291
					    1)
				in  let <_15> =
					call %% Line 1291
					     'erlang':%% Line 1291
						      'element'
					    (_14, %% Line 1291
						  Leaf)
				    in  %% Line 1291
					{'ok',_15}
			  end
	    end
	    -| [{'function',{'lookup_next_leaf_2',4}}] )
      -| [{'function',{'lookup_next_leaf_2',4}}] )
'bplus_insert'/2 =
    %% Line 1299
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <'v',Key> when 'true' ->
		  let <_10> =
		      [Key|( []
			     -| ['compiler_generated'] )]
		  in  %% Line 1722
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'list_to_tuple'
							     -| ['compiler_generated'] )
			    (( [( 'l'
				  -| ['compiler_generated'] )|_10]
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
	      %% Line 1300
	      <Tree,Key> when 'true' ->
		  let <NewTree> =
		      apply %% Line 1301
			    'bplus_insert_in'/2
			  (%% Line 1301
			   Tree, %% Line 1301
				 Key)
		  in  let <_3> =
			  case %% Line 1766
			       ( call ( 'erlang'
					-| ['compiler_generated'] ):( 'element'
								      -| ['compiler_generated'] )
				     (( 1
					-| ['compiler_generated'] ), NewTree)
				 -| ['compiler_generated'] ) of
			    %% Line 1767
			    ( <( 'l'
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  ( let <_14> =
					call %% Line 1768
					     ( 'erlang'
					       -| ['compiler_generated'] ):%% Line 1768
									   ( 'tuple_size'
									     -| ['compiler_generated'] )
					    (NewTree)
				    in  %% Line 1768
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( '-'
									       -| ['compiler_generated'] )
					      (_14, ( 1
						      -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 1769
			    ( <( 'n'
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  ( let <_2> =
					call %% Line 1770
					     ( 'erlang'
					       -| ['compiler_generated'] ):%% Line 1770
									   ( 'tuple_size'
									     -| ['compiler_generated'] )
					    (NewTree)
				    in  %% Line 1770
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'div'
									       -| ['compiler_generated'] )
					      (_2, ( 2
						     -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_3> when ( 'true'
					  -| ['compiler_generated'] ) ->
				  %% Line 1766
				  ( primop ( 'match_fail'
					     -| ['compiler_generated'] )
					(( {( 'case_clause'
					      -| ['compiler_generated'] ),_3}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      in  %% Line 1302
			  case call 'erlang':'>'
				   (_3, 16) of
			    %% Line 1303
			    <'false'> when 'true' ->
				%% Line 1304
				NewTree
			    %% Line 1306
			    <'true'> when 'true' ->
				let <_5> =
				    case %% Line 1308
					 call 'erlang':'element'
					     (1, NewTree) of
				      %% Line 1309
				      <'l'> when 'true' ->
					  %% Line 1310
					  apply 'bplus_split_leaf'/1
					      (NewTree)
				      %% Line 1311
				      <'n'> when 'true' ->
					  %% Line 1312
					  apply 'bplus_split_node'/1
					      (NewTree)
				      ( <_4> when 'true' ->
					    %% Line 1308
					    primop 'match_fail'
						({'case_clause',_4})
					-| ['compiler_generated'] )
				    end
				in  %% Line 1307
				    case _5 of
				      <{LTree,DKey,RTree}> when 'true' ->
					  %% Line 1314
					  apply 'bplus_mk_node'/1
					      ([LTree|[DKey|[RTree|[]]]])
				      ( <_6> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_6})
					-| ['compiler_generated'] )
				    end
			  end
	    end
	    -| [{'function',{'bplus_insert',2}}] )
      -| [{'function',{'bplus_insert',2}}] )
'bplus_delete'/2 =
    %% Line 1322
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <'v',_X_Key> when 'true' ->
		  'v'
	      %% Line 1323
	      <Tree,Key> when 'true' ->
		  let <NewTree> =
		      apply %% Line 1324
			    'bplus_delete_in'/2
			  (%% Line 1324
			   Tree, %% Line 1324
				 Key)
		  in  let <S> =
			  case %% Line 1766
			       ( call ( 'erlang'
					-| ['compiler_generated'] ):( 'element'
								      -| ['compiler_generated'] )
				     (( 1
					-| ['compiler_generated'] ), NewTree)
				 -| ['compiler_generated'] ) of
			    %% Line 1767
			    ( <( 'l'
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  ( let <_9> =
					call %% Line 1768
					     ( 'erlang'
					       -| ['compiler_generated'] ):%% Line 1768
									   ( 'tuple_size'
									     -| ['compiler_generated'] )
					    (NewTree)
				    in  %% Line 1768
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( '-'
									       -| ['compiler_generated'] )
					      (_9, ( 1
						     -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 1769
			    ( <( 'n'
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  ( let <_2> =
					call %% Line 1770
					     ( 'erlang'
					       -| ['compiler_generated'] ):%% Line 1770
									   ( 'tuple_size'
									     -| ['compiler_generated'] )
					    (NewTree)
				    in  %% Line 1770
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'div'
									       -| ['compiler_generated'] )
					      (_2, ( 2
						     -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_3> when ( 'true'
					  -| ['compiler_generated'] ) ->
				  %% Line 1766
				  ( primop ( 'match_fail'
					     -| ['compiler_generated'] )
					(( {( 'case_clause'
					      -| ['compiler_generated'] ),_3}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      in  %% Line 1326
			  case call 'erlang':'element'
				   (1, NewTree) of
			    %% Line 1327
			    <'l'> when 'true' ->
				%% Line 1328
				case <> of
				  %% Line 1329
				  <>
				      when call 'erlang':'=:='
					    (S,
					     0) ->
				      %% Line 1330
				      'v'
				  %% Line 1331
				  <> when 'true' ->
				      %% Line 1332
				      NewTree
				end
			    %% Line 1334
			    <'n'> when 'true' ->
				%% Line 1335
				case <> of
				  %% Line 1336
				  <>
				      when call 'erlang':'=:='
					    (S,
					     1) ->
				      %% Line 1776
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'element'
									     -| ['compiler_generated'] )
					    (( 2
					       -| ['compiler_generated'] ), NewTree)
					-| ['compiler_generated'] )
				  %% Line 1338
				  <> when 'true' ->
				      %% Line 1339
				      NewTree
				end
			    ( <_4> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_4})
			      -| ['compiler_generated'] )
			  end
	    end
	    -| [{'function',{'bplus_delete',2}}] )
      -| [{'function',{'bplus_delete',2}}] )
'bplus_insert_in'/2 =
    %% Line 1348
    ( fun (_0,_1) ->
	  %% Line 1349
	  case call 'erlang':'element'
		   (1, _0) of
	    %% Line 1350
	    <'l'> when 'true' ->
		%% Line 1351
		apply 'bplus_insert_in_leaf'/2
		    (_0, _1)
	    %% Line 1352
	    <'n'> when 'true' ->
		%% Line 1353
		case apply 'bplus_select_sub_tree'/2
			 (_0, _1) of
		  <{Pos,SubTree}> when 'true' ->
		      let <NewSubTree> =
			  apply %% Line 1355
				'bplus_insert_in'/2
			      (%% Line 1355
			       SubTree, _1)
		      in  let <_4> =
			      case %% Line 1766
				   ( call ( 'erlang'
					    -| ['compiler_generated'] ):( 'element'
									  -| ['compiler_generated'] )
					 (( 1
					    -| ['compiler_generated'] ), NewSubTree)
				     -| ['compiler_generated'] ) of
				%% Line 1767
				( <( 'l'
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( let <_16> =
					    call %% Line 1768
						 ( 'erlang'
						   -| ['compiler_generated'] ):%% Line 1768
									       ( 'tuple_size'
										 -| ['compiler_generated'] )
						(NewSubTree)
					in  %% Line 1768
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( '-'
										   -| ['compiler_generated'] )
						  (_16, ( 1
							  -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1769
				( <( 'n'
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( let <_2> =
					    call %% Line 1770
						 ( 'erlang'
						   -| ['compiler_generated'] ):%% Line 1770
									       ( 'tuple_size'
										 -| ['compiler_generated'] )
						(NewSubTree)
					in  %% Line 1770
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'div'
										   -| ['compiler_generated'] )
						  (_2, ( 2
							 -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_3> when ( 'true'
					      -| ['compiler_generated'] ) ->
				      %% Line 1766
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'case_clause'
						  -| ['compiler_generated'] ),_3}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 1356
			      case call 'erlang':'>'
				       (_4, 16) of
				%% Line 1357
				<'false'> when 'true' ->
				    %% Line 1358
				    apply 'bplus_put_subtree'/2
					(_0, [NewSubTree|[Pos|[]]])
				%% Line 1359
				<'true'> when 'true' ->
				    %% Line 1360
				    case apply 'bplus_reorganize_tree_ins'/3
					     (_0, NewSubTree, Pos) of
				      %% Line 1361
				      <{'left',{LeftT,DKey,MiddleT}}> when 'true' ->
					  let <_6> =
					      apply %% Line 1362
						    'bplus_put_lkey'/3
						  (_0, %% Line 1362
						       DKey, %% Line 1362
							     Pos)
					  in  let <_5> =
						  call %% Line 1363
						       'erlang':%% Line 1363
								'-'
						      (%% Line 1363
						       Pos, %% Line 1363
							    1)
					      in  %% Line 1362
						  apply 'bplus_put_subtree'/2
						      (_6, %% Line 1363
							   [LeftT|[_5|[MiddleT|[Pos|[]]]]])
				      %% Line 1364
				      <{'right',{MiddleT,DKey,RightT}}> when 'true' ->
					  let <_8> =
					      apply %% Line 1365
						    'bplus_put_rkey'/3
						  (_0, %% Line 1365
						       DKey, %% Line 1365
							     Pos)
					  in  let <_7> =
						  call %% Line 1366
						       'erlang':%% Line 1366
								'+'
						      (%% Line 1366
						       Pos, %% Line 1366
							    1)
					      in  %% Line 1365
						  apply 'bplus_put_subtree'/2
						      (_8, %% Line 1366
							   [MiddleT|[Pos|[RightT|[_7|[]]]]])
				      %% Line 1367
				      <{'split',_@r0 = {LeftT,DKey,RightT}}> when 'true' ->
					  %% Line 1368
					  apply 'bplus_extend_tree'/3
					      (_0, _@r0, Pos)
				      ( <_9> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_9})
					-| ['compiler_generated'] )
				    end
			      end
		  ( <_2> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_2})
		    -| ['compiler_generated'] )
		end
	    ( <_11> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_11})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'bplus_insert_in',2}}] )
'bplus_insert_in_leaf'/2 =
    %% Line 1376
    ( fun (_0,_1) ->
	  let <_2> =
	      case %% Line 1766
		   ( call ( 'erlang'
			    -| ['compiler_generated'] ):( 'element'
							  -| ['compiler_generated'] )
			 (( 1
			    -| ['compiler_generated'] ), _0)
		     -| ['compiler_generated'] ) of
		%% Line 1767
		( <( 'l'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_6> =
			    call %% Line 1768
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1768
							       ( 'tuple_size'
								 -| ['compiler_generated'] )
				(_0)
			in  %% Line 1768
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '-'
								   -| ['compiler_generated'] )
				  (_6, ( 1
					 -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		%% Line 1769
		( <( 'n'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_2> =
			    call %% Line 1770
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1770
							       ( 'tuple_size'
								 -| ['compiler_generated'] )
				(_0)
			in  %% Line 1770
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'div'
								   -| ['compiler_generated'] )
				  (_2, ( 2
					 -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <_3> when ( 'true'
			      -| ['compiler_generated'] ) ->
		      %% Line 1766
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'case_clause'
				  -| ['compiler_generated'] ),_3}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  in  %% Line 1377
	      apply 'bplus_insert_in_leaf_2'/4
		  (_0, _1, _2, [])
      -| [{'function',{'bplus_insert_in_leaf',2}}] )
'bplus_insert_in_leaf_2'/4 =
    %% Line 1379
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <Leaf,Key,0,Accum> when 'true' ->
		  %% Line 1380
		  apply 'bplus_insert_in_leaf_3'/3
		      (Leaf, 0, [Key|Accum])
	      %% Line 1381
	      <Leaf,Key,N,Accum> when 'true' ->
		  let <_4> =
		      call %% Line 1382
			   'erlang':%% Line 1382
				    '+'
			  (%% Line 1382
			   N, %% Line 1382
			      1)
		  in  let <K> =
			  call %% Line 1382
			       'erlang':%% Line 1382
					'element'
			      (_4, %% Line 1382
				   Leaf)
		      in  %% Line 1383
			  case <> of
			    %% Line 1384
			    <>
				when call 'erlang':'<'
				      (Key,
				       K) ->
				let <_6> =
				    call %% Line 1386
					 'erlang':%% Line 1386
						  '-'
					(%% Line 1386
					 N, %% Line 1386
					    1)
				in  %% Line 1386
				    apply 'bplus_insert_in_leaf_2'/4
					(Leaf, Key, _6, [K|Accum])
			    %% Line 1387
			    <>
				when call 'erlang':'<'
				      (K,
				       Key) ->
				let <_7> =
				    call %% Line 1389
					 'erlang':%% Line 1389
						  '-'
					(%% Line 1389
					 N, %% Line 1389
					    1)
				in  %% Line 1389
				    apply 'bplus_insert_in_leaf_3'/3
					(Leaf, _7, [K|[Key|Accum]])
			    %% Line 1390
			    <>
				when call 'erlang':'=='
				      (K,
				       Key) ->
				let <_8> =
				    call %% Line 1392
					 'erlang':%% Line 1392
						  '-'
					(%% Line 1392
					 N, %% Line 1392
					    1)
				in  %% Line 1392
				    apply 'bplus_insert_in_leaf_3'/3
					(Leaf, _8, [Key|Accum])
			    ( <> when 'true' ->
				  primop 'match_fail'
				      ('if_clause')
			      -| ['compiler_generated'] )
			  end
	    end
	    -| [{'function',{'bplus_insert_in_leaf_2',4}}] )
      -| [{'function',{'bplus_insert_in_leaf_2',4}}] )
'bplus_insert_in_leaf_3'/3 =
    %% Line 1395
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <_X_Leaf,0,LeafList> when 'true' ->
		  %% Line 1722
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'list_to_tuple'
							 -| ['compiler_generated'] )
			(( [( 'l'
			      -| ['compiler_generated'] )|LeafList]
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      %% Line 1397
	      <Leaf,N,LeafList> when 'true' ->
		  let <_5> =
		      call %% Line 1398
			   'erlang':%% Line 1398
				    '-'
			  (%% Line 1398
			   N, %% Line 1398
			      1)
		  in  let <_3> =
			  call %% Line 1398
			       'erlang':%% Line 1398
					'+'
			      (%% Line 1398
			       N, %% Line 1398
				  1)
		      in  let <_4> =
			      call %% Line 1398
				   'erlang':%% Line 1398
					    'element'
				  (_3, %% Line 1398
				       Leaf)
			  in  %% Line 1398
			      apply 'bplus_insert_in_leaf_3'/3
				  (Leaf, _5, [_4|LeafList])
	    end
	    -| [{'function',{'bplus_insert_in_leaf_3',3}}] )
      -| [{'function',{'bplus_insert_in_leaf_3',3}}] )
'bplus_delete_in'/2 =
    %% Line 1405
    ( fun (_0,_1) ->
	  %% Line 1406
	  case call 'erlang':'element'
		   (1, _0) of
	    %% Line 1407
	    <'l'> when 'true' ->
		%% Line 1408
		apply 'bplus_delete_in_leaf'/2
		    (_0, _1)
	    %% Line 1409
	    <'n'> when 'true' ->
		%% Line 1410
		case apply 'bplus_select_sub_tree'/2
			 (_0, _1) of
		  <{Pos,SubTree}> when 'true' ->
		      let <NewSubTree> =
			  apply %% Line 1412
				'bplus_delete_in'/2
			      (%% Line 1412
			       SubTree, _1)
		      in  let <_4> =
			      case %% Line 1766
				   ( call ( 'erlang'
					    -| ['compiler_generated'] ):( 'element'
									  -| ['compiler_generated'] )
					 (( 1
					    -| ['compiler_generated'] ), NewSubTree)
				     -| ['compiler_generated'] ) of
				%% Line 1767
				( <( 'l'
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( let <_16> =
					    call %% Line 1768
						 ( 'erlang'
						   -| ['compiler_generated'] ):%% Line 1768
									       ( 'tuple_size'
										 -| ['compiler_generated'] )
						(NewSubTree)
					in  %% Line 1768
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( '-'
										   -| ['compiler_generated'] )
						  (_16, ( 1
							  -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1769
				( <( 'n'
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( let <_2> =
					    call %% Line 1770
						 ( 'erlang'
						   -| ['compiler_generated'] ):%% Line 1770
									       ( 'tuple_size'
										 -| ['compiler_generated'] )
						(NewSubTree)
					in  %% Line 1770
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'div'
										   -| ['compiler_generated'] )
						  (_2, ( 2
							 -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_3> when ( 'true'
					      -| ['compiler_generated'] ) ->
				      %% Line 1766
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'case_clause'
						  -| ['compiler_generated'] ),_3}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 1414
			      case call 'erlang':'<'
				       (_4, 8) of
				%% Line 1415
				<'false'> when 'true' ->
				    %% Line 1416
				    apply 'bplus_put_subtree'/2
					(_0, [NewSubTree|[Pos|[]]])
				%% Line 1417
				<'true'> when 'true' ->
				    %% Line 1418
				    case apply 'bplus_reorganize_tree_del'/3
					     (_0, NewSubTree, Pos) of
				      %% Line 1419
				      <{'left',{LeftT,DKey,MiddleT}}> when 'true' ->
					  let <_6> =
					      apply %% Line 1420
						    'bplus_put_lkey'/3
						  (_0, %% Line 1420
						       DKey, %% Line 1420
							     Pos)
					  in  let <_5> =
						  call %% Line 1421
						       'erlang':%% Line 1421
								'-'
						      (%% Line 1421
						       Pos, %% Line 1421
							    1)
					      in  %% Line 1420
						  apply 'bplus_put_subtree'/2
						      (_6, %% Line 1421
							   [LeftT|[_5|[MiddleT|[Pos|[]]]]])
				      %% Line 1422
				      <{'right',{MiddleT,DKey,RightT}}> when 'true' ->
					  let <_8> =
					      apply %% Line 1423
						    'bplus_put_rkey'/3
						  (_0, %% Line 1423
						       DKey, %% Line 1423
							     Pos)
					  in  let <_7> =
						  call %% Line 1424
						       'erlang':%% Line 1424
								'+'
						      (%% Line 1424
						       Pos, %% Line 1424
							    1)
					      in  %% Line 1423
						  apply 'bplus_put_subtree'/2
						      (_8, %% Line 1424
							   [MiddleT|[Pos|[RightT|[_7|[]]]]])
				      %% Line 1425
				      <{'join_left',JoinedTree}> when 'true' ->
					  %% Line 1426
					  apply 'bplus_joinleft_tree'/3
					      (_0, JoinedTree, Pos)
				      %% Line 1427
				      <{'join_right',JoinedTree}> when 'true' ->
					  %% Line 1428
					  apply 'bplus_joinright_tree'/3
					      (_0, JoinedTree, Pos)
				      ( <_9> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_9})
					-| ['compiler_generated'] )
				    end
			      end
		  ( <_2> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_2})
		    -| ['compiler_generated'] )
		end
	    ( <_11> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_11})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'bplus_delete_in',2}}] )
'bplus_delete_in_leaf'/2 =
    %% Line 1436
    ( fun (_0,_1) ->
	  let <_2> =
	      case %% Line 1766
		   ( call ( 'erlang'
			    -| ['compiler_generated'] ):( 'element'
							  -| ['compiler_generated'] )
			 (( 1
			    -| ['compiler_generated'] ), _0)
		     -| ['compiler_generated'] ) of
		%% Line 1767
		( <( 'l'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_6> =
			    call %% Line 1768
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1768
							       ( 'tuple_size'
								 -| ['compiler_generated'] )
				(_0)
			in  %% Line 1768
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '-'
								   -| ['compiler_generated'] )
				  (_6, ( 1
					 -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		%% Line 1769
		( <( 'n'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_2> =
			    call %% Line 1770
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1770
							       ( 'tuple_size'
								 -| ['compiler_generated'] )
				(_0)
			in  %% Line 1770
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'div'
								   -| ['compiler_generated'] )
				  (_2, ( 2
					 -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <_3> when ( 'true'
			      -| ['compiler_generated'] ) ->
		      %% Line 1766
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'case_clause'
				  -| ['compiler_generated'] ),_3}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  in  %% Line 1437
	      apply 'bplus_delete_in_leaf_2'/4
		  (_0, _1, _2, [])
      -| [{'function',{'bplus_delete_in_leaf',2}}] )
'bplus_delete_in_leaf_2'/4 =
    %% Line 1439
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <Leaf,_12,0,_13> when 'true' ->
		  Leaf
	      %% Line 1440
	      <Leaf,Key,N,Accum> when 'true' ->
		  let <_4> =
		      call %% Line 1441
			   'erlang':%% Line 1441
				    '+'
			  (%% Line 1441
			   N, %% Line 1441
			      1)
		  in  let <K> =
			  call %% Line 1441
			       'erlang':%% Line 1441
					'element'
			      (_4, %% Line 1441
				   Leaf)
		      in  %% Line 1442
			  case <> of
			    %% Line 1443
			    <>
				when call 'erlang':'=='
				      (Key,
				       K) ->
				let <_6> =
				    call %% Line 1445
					 'erlang':%% Line 1445
						  '-'
					(%% Line 1445
					 N, %% Line 1445
					    1)
				in  %% Line 1445
				    apply 'bplus_delete_in_leaf_3'/3
					(Leaf, _6, Accum)
			    %% Line 1446
			    <> when 'true' ->
				let <_7> =
				    call %% Line 1447
					 'erlang':%% Line 1447
						  '-'
					(%% Line 1447
					 N, %% Line 1447
					    1)
				in  %% Line 1447
				    apply 'bplus_delete_in_leaf_2'/4
					(Leaf, Key, _7, [K|Accum])
			  end
	    end
	    -| [{'function',{'bplus_delete_in_leaf_2',4}}] )
      -| [{'function',{'bplus_delete_in_leaf_2',4}}] )
'bplus_delete_in_leaf_3'/3 =
    %% Line 1450
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <_X_Leaf,0,LeafList> when 'true' ->
		  %% Line 1722
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'list_to_tuple'
							 -| ['compiler_generated'] )
			(( [( 'l'
			      -| ['compiler_generated'] )|LeafList]
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      %% Line 1452
	      <Leaf,N,LeafList> when 'true' ->
		  let <_5> =
		      call %% Line 1453
			   'erlang':%% Line 1453
				    '-'
			  (%% Line 1453
			   N, %% Line 1453
			      1)
		  in  let <_3> =
			  call %% Line 1453
			       'erlang':%% Line 1453
					'+'
			      (%% Line 1453
			       N, %% Line 1453
				  1)
		      in  let <_4> =
			      call %% Line 1453
				   'erlang':%% Line 1453
					    'element'
				  (_3, %% Line 1453
				       Leaf)
			  in  %% Line 1453
			      apply 'bplus_delete_in_leaf_3'/3
				  (Leaf, _5, [_4|LeafList])
	    end
	    -| [{'function',{'bplus_delete_in_leaf_3',3}}] )
      -| [{'function',{'bplus_delete_in_leaf_3',3}}] )
'bplus_select_sub_tree'/2 =
    %% Line 1460
    ( fun (_0,_1) ->
	  let <_2> =
	      case %% Line 1766
		   ( call ( 'erlang'
			    -| ['compiler_generated'] ):( 'element'
							  -| ['compiler_generated'] )
			 (( 1
			    -| ['compiler_generated'] ), _0)
		     -| ['compiler_generated'] ) of
		%% Line 1767
		( <( 'l'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_7> =
			    call %% Line 1768
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1768
							       ( 'tuple_size'
								 -| ['compiler_generated'] )
				(_0)
			in  %% Line 1768
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '-'
								   -| ['compiler_generated'] )
				  (_7, ( 1
					 -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		%% Line 1769
		( <( 'n'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_2> =
			    call %% Line 1770
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1770
							       ( 'tuple_size'
								 -| ['compiler_generated'] )
				(_0)
			in  %% Line 1770
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'div'
								   -| ['compiler_generated'] )
				  (_2, ( 2
					 -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <_3> when ( 'true'
			      -| ['compiler_generated'] ) ->
		      %% Line 1766
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'case_clause'
				  -| ['compiler_generated'] ),_3}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  in  %% Line 1461
	      apply 'bplus_select_sub_tree_2'/3
		  (_0, _1, _2)
      -| [{'function',{'bplus_select_sub_tree',2}}] )
'bplus_select_sub_tree_2'/3 =
    %% Line 1463
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <Tree,_X_Key,1> when 'true' ->
		  let <_3> =
		      call %% Line 1776
			   ( 'erlang'
			     -| ['compiler_generated'] ):%% Line 1776
							 ( 'element'
							   -| ['compiler_generated'] )
			  (%% Line 1776
			   ( 2
			     -| ['compiler_generated'] ), Tree)
		  in  {1,_3}
	      %% Line 1464
	      <Tree,Key,N> when 'true' ->
		  ( let <_19> =
			call %% Line 1781
			     ( 'erlang'
			       -| ['compiler_generated'] ):%% Line 1781
							   ( '*'
							     -| ['compiler_generated'] )
			    (%% Line 1465
			     N, %% Line 1781
				( 2
				  -| ['compiler_generated'] ))
		    in  ( let <_3> =
			      call %% Line 1781
				   ( 'erlang'
				     -| ['compiler_generated'] ):%% Line 1781
								 ( '-'
								   -| ['compiler_generated'] )
				  (_19, %% Line 1781
					( 1
					  -| ['compiler_generated'] ))
			  in  let <K> =
				  call %% Line 1781
				       ( 'erlang'
					 -| ['compiler_generated'] ):%% Line 1781
								     ( 'element'
								       -| ['compiler_generated'] )
				      (_3, %% Line 1465
					   Tree)
			      in  %% Line 1466
				  case <> of
				    %% Line 1467
				    <>
					when call 'erlang':'>'
					      (K,
					       Key) ->
					let <_5> =
					    call %% Line 1468
						 'erlang':%% Line 1468
							  '-'
						(%% Line 1468
						 N, %% Line 1468
						    1)
					in  %% Line 1468
					    apply 'bplus_select_sub_tree_2'/3
						(Tree, Key, _5)
				    %% Line 1469
				    <>
					when call 'erlang':'=<'
					      (K,
					       Key) ->
					( let <_25> =
					      call %% Line 1776
						   ( 'erlang'
						     -| ['compiler_generated'] ):%% Line 1776
										 ( '*'
										   -| ['compiler_generated'] )
						  (%% Line 1471
						   N, %% Line 1776
						      ( 2
							-| ['compiler_generated'] ))
					  in  let <_6> =
						  call %% Line 1776
						       ( 'erlang'
							 -| ['compiler_generated'] ):%% Line 1776
										     ( 'element'
										       -| ['compiler_generated'] )
						      (_25, %% Line 1471
							    Tree)
					      in  %% Line 1471
						  {N,_6}
					  -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  primop 'match_fail'
					      ('if_clause')
				      -| ['compiler_generated'] )
				  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
	    end
	    -| [{'function',{'bplus_select_sub_tree_2',3}}] )
      -| [{'function',{'bplus_select_sub_tree_2',3}}] )
'bplus_reorganize_tree_ins'/3 =
    %% Line 1478
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <Tree,NewSubTree,1> when 'true' ->
		  let <RTree> =
		      call %% Line 1776
			   ( 'erlang'
			     -| ['compiler_generated'] ):%% Line 1776
							 ( 'element'
							   -| ['compiler_generated'] )
			  (%% Line 1776
			   ( 4
			     -| ['compiler_generated'] ), %% Line 1479
							  Tree)
		  in  let <_4> =
			  case %% Line 1766
			       ( call ( 'erlang'
					-| ['compiler_generated'] ):( 'element'
								      -| ['compiler_generated'] )
				     (( 1
					-| ['compiler_generated'] ), RTree)
				 -| ['compiler_generated'] ) of
			    %% Line 1767
			    ( <( 'l'
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  ( let <_30> =
					call %% Line 1768
					     ( 'erlang'
					       -| ['compiler_generated'] ):%% Line 1768
									   ( 'tuple_size'
									     -| ['compiler_generated'] )
					    (RTree)
				    in  %% Line 1768
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( '-'
									       -| ['compiler_generated'] )
					      (_30, ( 1
						      -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 1769
			    ( <( 'n'
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  ( let <_31> =
					call %% Line 1770
					     ( 'erlang'
					       -| ['compiler_generated'] ):%% Line 1770
									   ( 'tuple_size'
									     -| ['compiler_generated'] )
					    (RTree)
				    in  %% Line 1770
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'div'
									       -| ['compiler_generated'] )
					      (_31, ( 2
						      -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_3> when ( 'true'
					  -| ['compiler_generated'] ) ->
				  %% Line 1766
				  ( primop ( 'match_fail'
					     -| ['compiler_generated'] )
					(( {( 'case_clause'
					      -| ['compiler_generated'] ),_3}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      in  %% Line 1480
			  case call 'erlang':'>='
				   (_4, 16) of
			    %% Line 1481
			    <'false'> when 'true' ->
				%% Line 1482
				apply 'bplus_reorganize_tree_r'/4
				    (Tree, NewSubTree, 1, RTree)
			    %% Line 1483
			    <'true'> when 'true' ->
				%% Line 1485
				apply 'bplus_reorganize_tree_s'/1
				    (NewSubTree)
			  end
	      %% Line 1487
	      <Tree,NewSubTree,Pos> when 'true' ->
		  let <Size> =
		      case %% Line 1766
			   ( call ( 'erlang'
				    -| ['compiler_generated'] ):( 'element'
								  -| ['compiler_generated'] )
				 (( 1
				    -| ['compiler_generated'] ), Tree)
			     -| ['compiler_generated'] ) of
			%% Line 1767
			( <( 'l'
			     -| ['compiler_generated'] )> when ( 'true'
								 -| ['compiler_generated'] ) ->
			      ( let <_35> =
				    call %% Line 1768
					 ( 'erlang'
					   -| ['compiler_generated'] ):%% Line 1768
								       ( 'tuple_size'
									 -| ['compiler_generated'] )
					(Tree)
				in  %% Line 1768
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( '-'
									   -| ['compiler_generated'] )
					  (_35, ( 1
						  -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 1769
			( <( 'n'
			     -| ['compiler_generated'] )> when ( 'true'
								 -| ['compiler_generated'] ) ->
			      ( let <_36> =
				    call %% Line 1770
					 ( 'erlang'
					   -| ['compiler_generated'] ):%% Line 1770
								       ( 'tuple_size'
									 -| ['compiler_generated'] )
					(Tree)
				in  %% Line 1770
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'div'
									   -| ['compiler_generated'] )
					  (_36, ( 2
						  -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			( <_3> when ( 'true'
				      -| ['compiler_generated'] ) ->
			      %% Line 1766
			      ( primop ( 'match_fail'
					 -| ['compiler_generated'] )
				    (( {( 'case_clause'
					  -| ['compiler_generated'] ),_3}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 1489
		      case <> of
			%% Line 1490
			<>
			    when call 'erlang':'=='
				  (Pos,
				   Size) ->
			    let <_7> =
				call %% Line 1493
				     'erlang':%% Line 1493
					      '-'
				    (%% Line 1493
				     Pos, %% Line 1493
					  1)
			    in  ( let <_42> =
				      call %% Line 1776
					   ( 'erlang'
					     -| ['compiler_generated'] ):%% Line 1776
									 ( '*'
									   -| ['compiler_generated'] )
					  (_7, %% Line 1776
					       ( 2
						 -| ['compiler_generated'] ))
				  in  let <LTree> =
					  call %% Line 1776
					       ( 'erlang'
						 -| ['compiler_generated'] ):%% Line 1776
									     ( 'element'
									       -| ['compiler_generated'] )
					      (_42, %% Line 1493
						    Tree)
				      in  let <_9> =
					      case %% Line 1766
						   ( call ( 'erlang'
							    -| ['compiler_generated'] ):( 'element'
											  -| ['compiler_generated'] )
							 (( 1
							    -| ['compiler_generated'] ), LTree)
						     -| ['compiler_generated'] ) of
						%% Line 1767
						( <( 'l'
						     -| ['compiler_generated'] )> when ( 'true'
											 -| ['compiler_generated'] ) ->
						      ( let <_47> =
							    call %% Line 1768
								 ( 'erlang'
								   -| ['compiler_generated'] ):%% Line 1768
											       ( 'tuple_size'
												 -| ['compiler_generated'] )
								(LTree)
							in  %% Line 1768
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( '-'
												   -| ['compiler_generated'] )
								  (_47, ( 1
									  -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						%% Line 1769
						( <( 'n'
						     -| ['compiler_generated'] )> when ( 'true'
											 -| ['compiler_generated'] ) ->
						      ( let <_48> =
							    call %% Line 1770
								 ( 'erlang'
								   -| ['compiler_generated'] ):%% Line 1770
											       ( 'tuple_size'
												 -| ['compiler_generated'] )
								(LTree)
							in  %% Line 1770
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'div'
												   -| ['compiler_generated'] )
								  (_48, ( 2
									  -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <_3> when ( 'true'
							      -| ['compiler_generated'] ) ->
						      %% Line 1766
						      ( primop ( 'match_fail'
								 -| ['compiler_generated'] )
							    (( {( 'case_clause'
								  -| ['compiler_generated'] ),_3}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					  in  %% Line 1494
					      case call 'erlang':'>='
						       (_9, 16) of
						%% Line 1495
						<'false'> when 'true' ->
						    %% Line 1496
						    apply 'bplus_reorganize_tree_l'/4
							(Tree, NewSubTree, Pos, LTree)
						%% Line 1497
						<'true'> when 'true' ->
						    %% Line 1499
						    apply 'bplus_reorganize_tree_s'/1
							(NewSubTree)
					      end
				  -| ['compiler_generated'] )
			%% Line 1501
			<> when 'true' ->
			    let <_11> =
				call %% Line 1503
				     'erlang':%% Line 1503
					      '-'
				    (%% Line 1503
				     Pos, %% Line 1503
					  1)
			    in  ( let <_54> =
				      call %% Line 1776
					   ( 'erlang'
					     -| ['compiler_generated'] ):%% Line 1776
									 ( '*'
									   -| ['compiler_generated'] )
					  (_11, %% Line 1776
						( 2
						  -| ['compiler_generated'] ))
				  in  let <LTree> =
					  call %% Line 1776
					       ( 'erlang'
						 -| ['compiler_generated'] ):%% Line 1776
									     ( 'element'
									       -| ['compiler_generated'] )
					      (_54, %% Line 1503
						    Tree)
				      in  let <_13> =
					      call %% Line 1504
						   'erlang':%% Line 1504
							    '+'
						  (%% Line 1504
						   Pos, %% Line 1504
							1)
					  in  ( let <_61> =
						    call %% Line 1776
							 ( 'erlang'
							   -| ['compiler_generated'] ):%% Line 1776
										       ( '*'
											 -| ['compiler_generated'] )
							(_13, %% Line 1776
							      ( 2
								-| ['compiler_generated'] ))
						in  let <RTree> =
							call %% Line 1776
							     ( 'erlang'
							       -| ['compiler_generated'] ):%% Line 1776
											   ( 'element'
											     -| ['compiler_generated'] )
							    (_61, %% Line 1504
								  Tree)
						    in  let <SL> =
							    case %% Line 1766
								 ( call ( 'erlang'
									  -| ['compiler_generated'] ):( 'element'
													-| ['compiler_generated'] )
								       (( 1
									  -| ['compiler_generated'] ), LTree)
								   -| ['compiler_generated'] ) of
							      %% Line 1767
							      ( <( 'l'
								   -| ['compiler_generated'] )> when ( 'true'
												       -| ['compiler_generated'] ) ->
								    ( let <_66> =
									  call %% Line 1768
									       ( 'erlang'
										 -| ['compiler_generated'] ):%% Line 1768
													     ( 'tuple_size'
													       -| ['compiler_generated'] )
									      (LTree)
								      in  %% Line 1768
									  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( '-'
														 -| ['compiler_generated'] )
										(_66, ( 1
											-| ['compiler_generated'] ))
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      %% Line 1769
							      ( <( 'n'
								   -| ['compiler_generated'] )> when ( 'true'
												       -| ['compiler_generated'] ) ->
								    ( let <_67> =
									  call %% Line 1770
									       ( 'erlang'
										 -| ['compiler_generated'] ):%% Line 1770
													     ( 'tuple_size'
													       -| ['compiler_generated'] )
									      (LTree)
								      in  %% Line 1770
									  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'div'
														 -| ['compiler_generated'] )
										(_67, ( 2
											-| ['compiler_generated'] ))
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      ( <_3> when ( 'true'
									    -| ['compiler_generated'] ) ->
								    %% Line 1766
								    ( primop ( 'match_fail'
									       -| ['compiler_generated'] )
									  (( {( 'case_clause'
										-| ['compiler_generated'] ),_3}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							in  let <SR> =
								case %% Line 1766
								     ( call ( 'erlang'
									      -| ['compiler_generated'] ):( 'element'
													    -| ['compiler_generated'] )
									   (( 1
									      -| ['compiler_generated'] ), RTree)
								       -| ['compiler_generated'] ) of
								  %% Line 1767
								  ( <( 'l'
								       -| ['compiler_generated'] )> when ( 'true'
													   -| ['compiler_generated'] ) ->
									( let <_71> =
									      call %% Line 1768
										   ( 'erlang'
										     -| ['compiler_generated'] ):%% Line 1768
														 ( 'tuple_size'
														   -| ['compiler_generated'] )
										  (RTree)
									  in  %% Line 1768
									      ( call ( 'erlang'
										       -| ['compiler_generated'] ):( '-'
														     -| ['compiler_generated'] )
										    (_71, ( 1
											    -| ['compiler_generated'] ))
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								  %% Line 1769
								  ( <( 'n'
								       -| ['compiler_generated'] )> when ( 'true'
													   -| ['compiler_generated'] ) ->
									( let <_72> =
									      call %% Line 1770
										   ( 'erlang'
										     -| ['compiler_generated'] ):%% Line 1770
														 ( 'tuple_size'
														   -| ['compiler_generated'] )
										  (RTree)
									  in  %% Line 1770
									      ( call ( 'erlang'
										       -| ['compiler_generated'] ):( 'div'
														     -| ['compiler_generated'] )
										    (_72, ( 2
											    -| ['compiler_generated'] ))
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								  ( <_3> when ( 'true'
										-| ['compiler_generated'] ) ->
									%% Line 1766
									( primop ( 'match_fail'
										   -| ['compiler_generated'] )
									      (( {( 'case_clause'
										    -| ['compiler_generated'] ),_3}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
							    in  %% Line 1507
								case <> of
								  %% Line 1508
								  <>
								      when call 'erlang':'>'
									    (SL,
									     SR) ->
								      %% Line 1509
								      apply 'bplus_reorganize_tree_r'/4
									  (Tree, NewSubTree, Pos, RTree)
								  %% Line 1510
								  <>
								      when call 'erlang':'<'
									    (SL,
									     SR) ->
								      %% Line 1511
								      apply 'bplus_reorganize_tree_l'/4
									  (Tree, NewSubTree, Pos, LTree)
								  %% Line 1512
								  <> when 'true' ->
								      let <_17> =
									  case %% Line 1766
									       ( call ( 'erlang'
											-| ['compiler_generated'] ):( 'element'
														      -| ['compiler_generated'] )
										     (( 1
											-| ['compiler_generated'] ), LTree)
										 -| ['compiler_generated'] ) of
									    %% Line 1767
									    ( <( 'l'
										 -| ['compiler_generated'] )> when ( 'true'
														     -| ['compiler_generated'] ) ->
										  ( let <_76> =
											call %% Line 1768
											     ( 'erlang'
											       -| ['compiler_generated'] ):%% Line 1768
															   ( 'tuple_size'
															     -| ['compiler_generated'] )
											    (LTree)
										    in  %% Line 1768
											( call ( 'erlang'
												 -| ['compiler_generated'] ):( '-'
															       -| ['compiler_generated'] )
											      (_76, ( 1
												      -| ['compiler_generated'] ))
											  -| ['compiler_generated'] )
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									    %% Line 1769
									    ( <( 'n'
										 -| ['compiler_generated'] )> when ( 'true'
														     -| ['compiler_generated'] ) ->
										  ( let <_77> =
											call %% Line 1770
											     ( 'erlang'
											       -| ['compiler_generated'] ):%% Line 1770
															   ( 'tuple_size'
															     -| ['compiler_generated'] )
											    (LTree)
										    in  %% Line 1770
											( call ( 'erlang'
												 -| ['compiler_generated'] ):( 'div'
															       -| ['compiler_generated'] )
											      (_77, ( 2
												      -| ['compiler_generated'] ))
											  -| ['compiler_generated'] )
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									    ( <_3> when ( 'true'
											  -| ['compiler_generated'] ) ->
										  %% Line 1766
										  ( primop ( 'match_fail'
											     -| ['compiler_generated'] )
											(( {( 'case_clause'
											      -| ['compiler_generated'] ),_3}
											   -| ['compiler_generated'] ))
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									  end
								      in  %% Line 1513
									  case call 'erlang':'>='
										   (_17, 16) of
									    %% Line 1514
									    <'false'> when 'true' ->
										%% Line 1515
										apply 'bplus_reorganize_tree_l'/4
										    (Tree, NewSubTree, Pos, LTree)
									    %% Line 1516
									    <'true'> when 'true' ->
										%% Line 1517
										apply 'bplus_reorganize_tree_s'/1
										    (NewSubTree)
									  end
								end
						-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
		      end
	    end
	    -| [{'function',{'bplus_reorganize_tree_ins',3}}] )
      -| [{'function',{'bplus_reorganize_tree_ins',3}}] )
'bplus_reorganize_tree_del'/3 =
    %% Line 1526
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <Tree,NewSubTree,1> when 'true' ->
		  let <RTree> =
		      call %% Line 1776
			   ( 'erlang'
			     -| ['compiler_generated'] ):%% Line 1776
							 ( 'element'
							   -| ['compiler_generated'] )
			  (%% Line 1776
			   ( 4
			     -| ['compiler_generated'] ), %% Line 1528
							  Tree)
		  in  let <_4> =
			  case %% Line 1766
			       ( call ( 'erlang'
					-| ['compiler_generated'] ):( 'element'
								      -| ['compiler_generated'] )
				     (( 1
					-| ['compiler_generated'] ), RTree)
				 -| ['compiler_generated'] ) of
			    %% Line 1767
			    ( <( 'l'
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  ( let <_30> =
					call %% Line 1768
					     ( 'erlang'
					       -| ['compiler_generated'] ):%% Line 1768
									   ( 'tuple_size'
									     -| ['compiler_generated'] )
					    (RTree)
				    in  %% Line 1768
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( '-'
									       -| ['compiler_generated'] )
					      (_30, ( 1
						      -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 1769
			    ( <( 'n'
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  ( let <_31> =
					call %% Line 1770
					     ( 'erlang'
					       -| ['compiler_generated'] ):%% Line 1770
									   ( 'tuple_size'
									     -| ['compiler_generated'] )
					    (RTree)
				    in  %% Line 1770
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'div'
									       -| ['compiler_generated'] )
					      (_31, ( 2
						      -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_3> when ( 'true'
					  -| ['compiler_generated'] ) ->
				  %% Line 1766
				  ( primop ( 'match_fail'
					     -| ['compiler_generated'] )
					(( {( 'case_clause'
					      -| ['compiler_generated'] ),_3}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      in  %% Line 1529
			  case call 'erlang':'=<'
				   (_4, 8) of
			    %% Line 1530
			    <'false'> when 'true' ->
				%% Line 1531
				apply 'bplus_reorganize_tree_r'/4
				    (Tree, NewSubTree, 1, RTree)
			    %% Line 1532
			    <'true'> when 'true' ->
				%% Line 1534
				apply 'bplus_reorganize_tree_jr'/4
				    (Tree, NewSubTree, 1, RTree)
			  end
	      %% Line 1536
	      <Tree,NewSubTree,Pos> when 'true' ->
		  let <Size> =
		      case %% Line 1766
			   ( call ( 'erlang'
				    -| ['compiler_generated'] ):( 'element'
								  -| ['compiler_generated'] )
				 (( 1
				    -| ['compiler_generated'] ), Tree)
			     -| ['compiler_generated'] ) of
			%% Line 1767
			( <( 'l'
			     -| ['compiler_generated'] )> when ( 'true'
								 -| ['compiler_generated'] ) ->
			      ( let <_35> =
				    call %% Line 1768
					 ( 'erlang'
					   -| ['compiler_generated'] ):%% Line 1768
								       ( 'tuple_size'
									 -| ['compiler_generated'] )
					(Tree)
				in  %% Line 1768
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( '-'
									   -| ['compiler_generated'] )
					  (_35, ( 1
						  -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 1769
			( <( 'n'
			     -| ['compiler_generated'] )> when ( 'true'
								 -| ['compiler_generated'] ) ->
			      ( let <_36> =
				    call %% Line 1770
					 ( 'erlang'
					   -| ['compiler_generated'] ):%% Line 1770
								       ( 'tuple_size'
									 -| ['compiler_generated'] )
					(Tree)
				in  %% Line 1770
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'div'
									   -| ['compiler_generated'] )
					  (_36, ( 2
						  -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			( <_3> when ( 'true'
				      -| ['compiler_generated'] ) ->
			      %% Line 1766
			      ( primop ( 'match_fail'
					 -| ['compiler_generated'] )
				    (( {( 'case_clause'
					  -| ['compiler_generated'] ),_3}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 1538
		      case <> of
			%% Line 1539
			<>
			    when call 'erlang':'=='
				  (Pos,
				   Size) ->
			    let <_7> =
				call %% Line 1542
				     'erlang':%% Line 1542
					      '-'
				    (%% Line 1542
				     Pos, %% Line 1542
					  1)
			    in  ( let <_42> =
				      call %% Line 1776
					   ( 'erlang'
					     -| ['compiler_generated'] ):%% Line 1776
									 ( '*'
									   -| ['compiler_generated'] )
					  (_7, %% Line 1776
					       ( 2
						 -| ['compiler_generated'] ))
				  in  let <LTree> =
					  call %% Line 1776
					       ( 'erlang'
						 -| ['compiler_generated'] ):%% Line 1776
									     ( 'element'
									       -| ['compiler_generated'] )
					      (_42, %% Line 1542
						    Tree)
				      in  let <_9> =
					      case %% Line 1766
						   ( call ( 'erlang'
							    -| ['compiler_generated'] ):( 'element'
											  -| ['compiler_generated'] )
							 (( 1
							    -| ['compiler_generated'] ), LTree)
						     -| ['compiler_generated'] ) of
						%% Line 1767
						( <( 'l'
						     -| ['compiler_generated'] )> when ( 'true'
											 -| ['compiler_generated'] ) ->
						      ( let <_47> =
							    call %% Line 1768
								 ( 'erlang'
								   -| ['compiler_generated'] ):%% Line 1768
											       ( 'tuple_size'
												 -| ['compiler_generated'] )
								(LTree)
							in  %% Line 1768
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( '-'
												   -| ['compiler_generated'] )
								  (_47, ( 1
									  -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						%% Line 1769
						( <( 'n'
						     -| ['compiler_generated'] )> when ( 'true'
											 -| ['compiler_generated'] ) ->
						      ( let <_48> =
							    call %% Line 1770
								 ( 'erlang'
								   -| ['compiler_generated'] ):%% Line 1770
											       ( 'tuple_size'
												 -| ['compiler_generated'] )
								(LTree)
							in  %% Line 1770
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'div'
												   -| ['compiler_generated'] )
								  (_48, ( 2
									  -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <_3> when ( 'true'
							      -| ['compiler_generated'] ) ->
						      %% Line 1766
						      ( primop ( 'match_fail'
								 -| ['compiler_generated'] )
							    (( {( 'case_clause'
								  -| ['compiler_generated'] ),_3}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					  in  %% Line 1543
					      case call 'erlang':'=<'
						       (_9, 8) of
						%% Line 1544
						<'false'> when 'true' ->
						    %% Line 1545
						    apply 'bplus_reorganize_tree_l'/4
							(Tree, NewSubTree, Pos, LTree)
						%% Line 1546
						<'true'> when 'true' ->
						    %% Line 1548
						    apply 'bplus_reorganize_tree_jl'/4
							(Tree, NewSubTree, Pos, LTree)
					      end
				  -| ['compiler_generated'] )
			%% Line 1550
			<> when 'true' ->
			    let <_11> =
				call %% Line 1552
				     'erlang':%% Line 1552
					      '-'
				    (%% Line 1552
				     Pos, %% Line 1552
					  1)
			    in  ( let <_54> =
				      call %% Line 1776
					   ( 'erlang'
					     -| ['compiler_generated'] ):%% Line 1776
									 ( '*'
									   -| ['compiler_generated'] )
					  (_11, %% Line 1776
						( 2
						  -| ['compiler_generated'] ))
				  in  let <LTree> =
					  call %% Line 1776
					       ( 'erlang'
						 -| ['compiler_generated'] ):%% Line 1776
									     ( 'element'
									       -| ['compiler_generated'] )
					      (_54, %% Line 1552
						    Tree)
				      in  let <_13> =
					      call %% Line 1553
						   'erlang':%% Line 1553
							    '+'
						  (%% Line 1553
						   Pos, %% Line 1553
							1)
					  in  ( let <_61> =
						    call %% Line 1776
							 ( 'erlang'
							   -| ['compiler_generated'] ):%% Line 1776
										       ( '*'
											 -| ['compiler_generated'] )
							(_13, %% Line 1776
							      ( 2
								-| ['compiler_generated'] ))
						in  let <RTree> =
							call %% Line 1776
							     ( 'erlang'
							       -| ['compiler_generated'] ):%% Line 1776
											   ( 'element'
											     -| ['compiler_generated'] )
							    (_61, %% Line 1553
								  Tree)
						    in  let <SL> =
							    case %% Line 1766
								 ( call ( 'erlang'
									  -| ['compiler_generated'] ):( 'element'
													-| ['compiler_generated'] )
								       (( 1
									  -| ['compiler_generated'] ), LTree)
								   -| ['compiler_generated'] ) of
							      %% Line 1767
							      ( <( 'l'
								   -| ['compiler_generated'] )> when ( 'true'
												       -| ['compiler_generated'] ) ->
								    ( let <_66> =
									  call %% Line 1768
									       ( 'erlang'
										 -| ['compiler_generated'] ):%% Line 1768
													     ( 'tuple_size'
													       -| ['compiler_generated'] )
									      (LTree)
								      in  %% Line 1768
									  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( '-'
														 -| ['compiler_generated'] )
										(_66, ( 1
											-| ['compiler_generated'] ))
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      %% Line 1769
							      ( <( 'n'
								   -| ['compiler_generated'] )> when ( 'true'
												       -| ['compiler_generated'] ) ->
								    ( let <_67> =
									  call %% Line 1770
									       ( 'erlang'
										 -| ['compiler_generated'] ):%% Line 1770
													     ( 'tuple_size'
													       -| ['compiler_generated'] )
									      (LTree)
								      in  %% Line 1770
									  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'div'
														 -| ['compiler_generated'] )
										(_67, ( 2
											-| ['compiler_generated'] ))
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      ( <_3> when ( 'true'
									    -| ['compiler_generated'] ) ->
								    %% Line 1766
								    ( primop ( 'match_fail'
									       -| ['compiler_generated'] )
									  (( {( 'case_clause'
										-| ['compiler_generated'] ),_3}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							in  let <SR> =
								case %% Line 1766
								     ( call ( 'erlang'
									      -| ['compiler_generated'] ):( 'element'
													    -| ['compiler_generated'] )
									   (( 1
									      -| ['compiler_generated'] ), RTree)
								       -| ['compiler_generated'] ) of
								  %% Line 1767
								  ( <( 'l'
								       -| ['compiler_generated'] )> when ( 'true'
													   -| ['compiler_generated'] ) ->
									( let <_71> =
									      call %% Line 1768
										   ( 'erlang'
										     -| ['compiler_generated'] ):%% Line 1768
														 ( 'tuple_size'
														   -| ['compiler_generated'] )
										  (RTree)
									  in  %% Line 1768
									      ( call ( 'erlang'
										       -| ['compiler_generated'] ):( '-'
														     -| ['compiler_generated'] )
										    (_71, ( 1
											    -| ['compiler_generated'] ))
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								  %% Line 1769
								  ( <( 'n'
								       -| ['compiler_generated'] )> when ( 'true'
													   -| ['compiler_generated'] ) ->
									( let <_72> =
									      call %% Line 1770
										   ( 'erlang'
										     -| ['compiler_generated'] ):%% Line 1770
														 ( 'tuple_size'
														   -| ['compiler_generated'] )
										  (RTree)
									  in  %% Line 1770
									      ( call ( 'erlang'
										       -| ['compiler_generated'] ):( 'div'
														     -| ['compiler_generated'] )
										    (_72, ( 2
											    -| ['compiler_generated'] ))
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								  ( <_3> when ( 'true'
										-| ['compiler_generated'] ) ->
									%% Line 1766
									( primop ( 'match_fail'
										   -| ['compiler_generated'] )
									      (( {( 'case_clause'
										    -| ['compiler_generated'] ),_3}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
							    in  %% Line 1556
								case <> of
								  %% Line 1557
								  <>
								      when call 'erlang':'>'
									    (SL,
									     SR) ->
								      %% Line 1558
								      apply 'bplus_reorganize_tree_l'/4
									  (Tree, NewSubTree, Pos, LTree)
								  %% Line 1559
								  <>
								      when call 'erlang':'<'
									    (SL,
									     SR) ->
								      %% Line 1560
								      apply 'bplus_reorganize_tree_r'/4
									  (Tree, NewSubTree, Pos, RTree)
								  %% Line 1561
								  <> when 'true' ->
								      let <_17> =
									  case %% Line 1766
									       ( call ( 'erlang'
											-| ['compiler_generated'] ):( 'element'
														      -| ['compiler_generated'] )
										     (( 1
											-| ['compiler_generated'] ), LTree)
										 -| ['compiler_generated'] ) of
									    %% Line 1767
									    ( <( 'l'
										 -| ['compiler_generated'] )> when ( 'true'
														     -| ['compiler_generated'] ) ->
										  ( let <_76> =
											call %% Line 1768
											     ( 'erlang'
											       -| ['compiler_generated'] ):%% Line 1768
															   ( 'tuple_size'
															     -| ['compiler_generated'] )
											    (LTree)
										    in  %% Line 1768
											( call ( 'erlang'
												 -| ['compiler_generated'] ):( '-'
															       -| ['compiler_generated'] )
											      (_76, ( 1
												      -| ['compiler_generated'] ))
											  -| ['compiler_generated'] )
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									    %% Line 1769
									    ( <( 'n'
										 -| ['compiler_generated'] )> when ( 'true'
														     -| ['compiler_generated'] ) ->
										  ( let <_77> =
											call %% Line 1770
											     ( 'erlang'
											       -| ['compiler_generated'] ):%% Line 1770
															   ( 'tuple_size'
															     -| ['compiler_generated'] )
											    (LTree)
										    in  %% Line 1770
											( call ( 'erlang'
												 -| ['compiler_generated'] ):( 'div'
															       -| ['compiler_generated'] )
											      (_77, ( 2
												      -| ['compiler_generated'] ))
											  -| ['compiler_generated'] )
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									    ( <_3> when ( 'true'
											  -| ['compiler_generated'] ) ->
										  %% Line 1766
										  ( primop ( 'match_fail'
											     -| ['compiler_generated'] )
											(( {( 'case_clause'
											      -| ['compiler_generated'] ),_3}
											   -| ['compiler_generated'] ))
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									  end
								      in  %% Line 1562
									  case call 'erlang':'=<'
										   (_17, 8) of
									    %% Line 1563
									    <'false'> when 'true' ->
										%% Line 1564
										apply 'bplus_reorganize_tree_l'/4
										    (Tree, NewSubTree, Pos, LTree)
									    %% Line 1565
									    <'true'> when 'true' ->
										%% Line 1566
										apply 'bplus_reorganize_tree_jl'/4
										    (Tree, NewSubTree, Pos, LTree)
									  end
								end
						-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
		      end
	    end
	    -| [{'function',{'bplus_reorganize_tree_del',3}}] )
      -| [{'function',{'bplus_reorganize_tree_del',3}}] )
'bplus_reorganize_tree_l'/4 =
    %% Line 1572
    ( fun (_0,_1,_2,_3) ->
	  %% Line 1573
	  case call 'erlang':'element'
		   (1, _1) of
	    %% Line 1574
	    <'l'> when 'true' ->
		let <_5> =
		    apply %% Line 1577
			  'bplus_leaf_to_list'/1
			(_3)
		in  let <_4> =
			apply %% Line 1578
			      'bplus_leaf_to_list'/1
			    (_1)
		    in  let <_6> =
			    call %% Line 1577
				 'lists':%% Line 1577
					 'append'
				(_5, _4)
			in  let <_7> =
				call %% Line 1722
				     ( 'erlang'
				       -| ['compiler_generated'] ):%% Line 1722
								   ( 'list_to_tuple'
								     -| ['compiler_generated'] )
				    (%% Line 1722
				     ( [( 'l'
					  -| ['compiler_generated'] )|_6]
				       -| ['compiler_generated'] ))
			    in  let <_8> =
				    apply %% Line 1575
					  'bplus_split_leaf'/1
					(_7)
				in  %% Line 1575
				    {'left',_8}
	    %% Line 1579
	    <'n'> when 'true' ->
		let <_9> =
		    apply %% Line 1582
			  'bplus_node_to_list'/1
			(_3)
		in  ( let <_26> =
			  call %% Line 1781
			       ( 'erlang'
				 -| ['compiler_generated'] ):%% Line 1781
							     ( '*'
							       -| ['compiler_generated'] )
			      (_2, %% Line 1781
				   ( 2
				     -| ['compiler_generated'] ))
		      in  ( let <_27> =
				call %% Line 1781
				     ( 'erlang'
				       -| ['compiler_generated'] ):%% Line 1781
								   ( '-'
								     -| ['compiler_generated'] )
				    (_26, %% Line 1781
					  ( 1
					    -| ['compiler_generated'] ))
			    in  let <_10> =
				    call %% Line 1781
					 ( 'erlang'
					   -| ['compiler_generated'] ):%% Line 1781
								       ( 'element'
									 -| ['compiler_generated'] )
					(_27, _0)
				in  let <_11> =
					apply %% Line 1584
					      'bplus_node_to_list'/1
					    (_1)
				    in  let <_12> =
					    call %% Line 1582
						 'lists':%% Line 1582
							 'append'
						(%% Line 1582
						 [_9|%% Line 1583
						     [[_10|[]]|%% Line 1584
							       [_11|[]]]])
					in  let <_13> =
						apply %% Line 1581
						      'bplus_mk_node'/1
						    (_12)
					    in  let <_14> =
						    apply %% Line 1580
							  'bplus_split_node'/1
							(_13)
						in  %% Line 1580
						    {'left',_14}
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
	    ( <_15> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_15})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'bplus_reorganize_tree_l',4}}] )
'bplus_reorganize_tree_r'/4 =
    %% Line 1587
    ( fun (_0,_1,_2,_3) ->
	  %% Line 1588
	  case call 'erlang':'element'
		   (1, _1) of
	    %% Line 1589
	    <'l'> when 'true' ->
		let <_4> =
		    apply %% Line 1593
			  'bplus_leaf_to_list'/1
			(_1)
		in  let <_5> =
			apply %% Line 1594
			      'bplus_leaf_to_list'/1
			    (_3)
		    in  let <_6> =
			    call %% Line 1593
				 'lists':%% Line 1593
					 'append'
				(%% Line 1593
				 [_4|%% Line 1594
				     [_5|[]]])
			in  let <_7> =
				call %% Line 1722
				     ( 'erlang'
				       -| ['compiler_generated'] ):%% Line 1722
								   ( 'list_to_tuple'
								     -| ['compiler_generated'] )
				    (%% Line 1722
				     ( [( 'l'
					  -| ['compiler_generated'] )|_6]
				       -| ['compiler_generated'] ))
			    in  let <_8> =
				    apply %% Line 1591
					  'bplus_split_leaf'/1
					(_7)
				in  %% Line 1590
				    {'right',_8}
	    %% Line 1595
	    <'n'> when 'true' ->
		let <_9> =
		    apply %% Line 1599
			  'bplus_node_to_list'/1
			(_1)
		in  ( let <_26> =
			  call %% Line 1782
			       ( 'erlang'
				 -| ['compiler_generated'] ):%% Line 1782
							     ( '*'
							       -| ['compiler_generated'] )
			      (_2, %% Line 1782
				   ( 2
				     -| ['compiler_generated'] ))
		      in  ( let <_27> =
				call %% Line 1782
				     ( 'erlang'
				       -| ['compiler_generated'] ):%% Line 1782
								   ( '+'
								     -| ['compiler_generated'] )
				    (_26, %% Line 1782
					  ( 1
					    -| ['compiler_generated'] ))
			    in  let <_10> =
				    call %% Line 1782
					 ( 'erlang'
					   -| ['compiler_generated'] ):%% Line 1782
								       ( 'element'
									 -| ['compiler_generated'] )
					(_27, _0)
				in  let <_11> =
					apply %% Line 1601
					      'bplus_node_to_list'/1
					    (_3)
				    in  let <_12> =
					    call %% Line 1599
						 'lists':%% Line 1599
							 'append'
						(%% Line 1599
						 [_9|%% Line 1600
						     [[_10|[]]|%% Line 1601
							       [_11|[]]]])
					in  let <_13> =
						apply %% Line 1598
						      'bplus_mk_node'/1
						    (_12)
					    in  let <_14> =
						    apply %% Line 1597
							  'bplus_split_node'/1
							(_13)
						in  %% Line 1596
						    {'right',_14}
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
	    ( <_15> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_15})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'bplus_reorganize_tree_r',4}}] )
'bplus_reorganize_tree_s'/1 =
    %% Line 1604
    ( fun (_0) ->
	  %% Line 1605
	  case call 'erlang':'element'
		   (1, ( _0
			 -| [{'function',{'bplus_reorganize_tree_s',1}}] )) of
	    %% Line 1606
	    <'l'> when 'true' ->
		let <_1> =
		    apply %% Line 1607
			  'bplus_split_leaf'/1
			(( _0
			   -| [{'function',{'bplus_reorganize_tree_s',1}}] ))
		in  %% Line 1607
		    {'split',_1}
	    %% Line 1608
	    <'n'> when 'true' ->
		let <_2> =
		    apply %% Line 1609
			  'bplus_split_node'/1
			(( _0
			   -| [{'function',{'bplus_reorganize_tree_s',1}}] ))
		in  %% Line 1609
		    {'split',_2}
	    ( <_3> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_3})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'bplus_reorganize_tree_s',1}}] )
'bplus_reorganize_tree_jl'/4 =
    %% Line 1612
    ( fun (_0,_1,_2,_3) ->
	  %% Line 1613
	  case call 'erlang':'element'
		   (1, _1) of
	    %% Line 1614
	    <'l'> when 'true' ->
		let <_4> =
		    apply %% Line 1616
			  'bplus_leaf_to_list'/1
			(_3)
		in  let <_5> =
			apply %% Line 1617
			      'bplus_leaf_to_list'/1
			    (_1)
		    in  let <_6> =
			    call %% Line 1616
				 'lists':%% Line 1616
					 'append'
				(%% Line 1616
				 [_4|%% Line 1617
				     [_5|[]]])
			in  let <_7> =
				call %% Line 1722
				     ( 'erlang'
				       -| ['compiler_generated'] ):%% Line 1722
								   ( 'list_to_tuple'
								     -| ['compiler_generated'] )
				    (%% Line 1722
				     ( [( 'l'
					  -| ['compiler_generated'] )|_6]
				       -| ['compiler_generated'] ))
			    in  %% Line 1615
				{'join_left',_7}
	    %% Line 1618
	    <'n'> when 'true' ->
		let <_8> =
		    apply %% Line 1620
			  'bplus_node_to_list'/1
			(_3)
		in  ( let <_24> =
			  call %% Line 1781
			       ( 'erlang'
				 -| ['compiler_generated'] ):%% Line 1781
							     ( '*'
							       -| ['compiler_generated'] )
			      (_2, %% Line 1781
				   ( 2
				     -| ['compiler_generated'] ))
		      in  ( let <_25> =
				call %% Line 1781
				     ( 'erlang'
				       -| ['compiler_generated'] ):%% Line 1781
								   ( '-'
								     -| ['compiler_generated'] )
				    (_24, %% Line 1781
					  ( 1
					    -| ['compiler_generated'] ))
			    in  let <_9> =
				    call %% Line 1781
					 ( 'erlang'
					   -| ['compiler_generated'] ):%% Line 1781
								       ( 'element'
									 -| ['compiler_generated'] )
					(_25, _0)
				in  let <_10> =
					apply %% Line 1622
					      'bplus_node_to_list'/1
					    (_1)
				    in  let <_11> =
					    call %% Line 1620
						 'lists':%% Line 1620
							 'append'
						(%% Line 1620
						 [_8|%% Line 1621
						     [[_9|[]]|%% Line 1622
							      [_10|[]]]])
					in  let <_12> =
						apply %% Line 1620
						      'bplus_mk_node'/1
						    (_11)
					    in  %% Line 1619
						{'join_left',_12}
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
	    ( <_13> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_13})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'bplus_reorganize_tree_jl',4}}] )
'bplus_reorganize_tree_jr'/4 =
    %% Line 1625
    ( fun (_0,_1,_2,_3) ->
	  %% Line 1626
	  case call 'erlang':'element'
		   (1, _1) of
	    %% Line 1627
	    <'l'> when 'true' ->
		let <_4> =
		    apply %% Line 1629
			  'bplus_leaf_to_list'/1
			(_1)
		in  let <_5> =
			apply %% Line 1630
			      'bplus_leaf_to_list'/1
			    (_3)
		    in  let <_6> =
			    call %% Line 1629
				 'lists':%% Line 1629
					 'append'
				(%% Line 1629
				 [_4|%% Line 1630
				     [_5|[]]])
			in  let <_7> =
				call %% Line 1722
				     ( 'erlang'
				       -| ['compiler_generated'] ):%% Line 1722
								   ( 'list_to_tuple'
								     -| ['compiler_generated'] )
				    (%% Line 1722
				     ( [( 'l'
					  -| ['compiler_generated'] )|_6]
				       -| ['compiler_generated'] ))
			    in  %% Line 1628
				{'join_right',_7}
	    %% Line 1631
	    <'n'> when 'true' ->
		let <_8> =
		    apply %% Line 1633
			  'bplus_node_to_list'/1
			(_1)
		in  ( let <_24> =
			  call %% Line 1782
			       ( 'erlang'
				 -| ['compiler_generated'] ):%% Line 1782
							     ( '*'
							       -| ['compiler_generated'] )
			      (_2, %% Line 1782
				   ( 2
				     -| ['compiler_generated'] ))
		      in  ( let <_25> =
				call %% Line 1782
				     ( 'erlang'
				       -| ['compiler_generated'] ):%% Line 1782
								   ( '+'
								     -| ['compiler_generated'] )
				    (_24, %% Line 1782
					  ( 1
					    -| ['compiler_generated'] ))
			    in  let <_9> =
				    call %% Line 1782
					 ( 'erlang'
					   -| ['compiler_generated'] ):%% Line 1782
								       ( 'element'
									 -| ['compiler_generated'] )
					(_25, _0)
				in  let <_10> =
					apply %% Line 1635
					      'bplus_node_to_list'/1
					    (_3)
				    in  let <_11> =
					    call %% Line 1633
						 'lists':%% Line 1633
							 'append'
						(%% Line 1633
						 [_8|%% Line 1634
						     [[_9|[]]|%% Line 1635
							      [_10|[]]]])
					in  let <_12> =
						apply %% Line 1633
						      'bplus_mk_node'/1
						    (_11)
					    in  %% Line 1632
						{'join_right',_12}
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
	    ( <_13> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_13})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'bplus_reorganize_tree_jr',4}}] )
'bplus_split_leaf'/1 =
    %% Line 1643
    ( fun (_0) ->
	  let <S> =
	      case %% Line 1766
		   ( call ( 'erlang'
			    -| ['compiler_generated'] ):( 'element'
							  -| ['compiler_generated'] )
			 (( 1
			    -| ['compiler_generated'] ), ( _0
							   -| [{'function',{'bplus_split_leaf',1}}] ))
		     -| ['compiler_generated'] ) of
		%% Line 1767
		( <( 'l'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_1> =
			    call %% Line 1768
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1768
							       ( 'tuple_size'
								 -| ['compiler_generated'] )
				(( _0
				   -| [{'function',{'bplus_split_leaf',1}}] ))
			in  %% Line 1768
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '-'
								   -| ['compiler_generated'] )
				  (_1, ( 1
					 -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		%% Line 1769
		( <( 'n'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_2> =
			    call %% Line 1770
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1770
							       ( 'tuple_size'
								 -| ['compiler_generated'] )
				(( _0
				   -| [{'function',{'bplus_split_leaf',1}}] ))
			in  %% Line 1770
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'div'
								   -| ['compiler_generated'] )
				  (_2, ( 2
					 -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <_3> when ( 'true'
			      -| ['compiler_generated'] ) ->
		      %% Line 1766
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'case_clause'
				  -| ['compiler_generated'] ),_3}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  in  let <_2> =
		  call %% Line 1645
		       'erlang':%% Line 1645
				'div'
		      (%% Line 1645
		       S, %% Line 1645
			  2)
	      in  %% Line 1645
		  apply 'bplus_split_leaf_2'/4
		      (( _0
			 -| [{'function',{'bplus_split_leaf',1}}] ), S, _2, [])
      -| [{'function',{'bplus_split_leaf',1}}] )
'bplus_split_leaf_2'/4 =
    %% Line 1647
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <Leaf,Pos,1,Accum> when 'true' ->
		  let <_4> =
		      call %% Line 1648
			   'erlang':%% Line 1648
				    '+'
			  (%% Line 1648
			   Pos, %% Line 1648
				1)
		  in  let <K> =
			  call %% Line 1648
			       'erlang':%% Line 1648
					'element'
			      (_4, %% Line 1648
				   Leaf)
		      in  let <_6> =
			      call %% Line 1649
				   'erlang':%% Line 1649
					    '-'
				  (%% Line 1649
				   Pos, %% Line 1649
					1)
			  in  %% Line 1649
			      apply 'bplus_split_leaf_3'/5
				  (Leaf, _6, [], K, [K|Accum])
	      %% Line 1650
	      <Leaf,Pos,N,Accum> when 'true' ->
		  let <_10> =
		      call %% Line 1651
			   'erlang':%% Line 1651
				    '-'
			  (%% Line 1651
			   Pos, %% Line 1651
				1)
		  in  let <_9> =
			  call %% Line 1651
			       'erlang':%% Line 1651
					'-'
			      (%% Line 1651
			       N, %% Line 1651
				  1)
		      in  let <_7> =
			      call %% Line 1651
				   'erlang':%% Line 1651
					    '+'
				  (%% Line 1651
				   Pos, %% Line 1651
					1)
			  in  let <_8> =
				  call %% Line 1651
				       'erlang':%% Line 1651
						'element'
				      (_7, %% Line 1651
					   Leaf)
			      in  %% Line 1651
				  apply 'bplus_split_leaf_2'/4
				      (Leaf, _10, _9, [_8|Accum])
	    end
	    -| [{'function',{'bplus_split_leaf_2',4}}] )
      -| [{'function',{'bplus_split_leaf_2',4}}] )
'bplus_split_leaf_3'/5 =
    %% Line 1653
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <_15,0,LeftAcc,DKey,RightAcc> when 'true' ->
		  let <_6> =
		      call %% Line 1722
			   ( 'erlang'
			     -| ['compiler_generated'] ):%% Line 1722
							 ( 'list_to_tuple'
							   -| ['compiler_generated'] )
			  (%% Line 1722
			   ( [( 'l'
				-| ['compiler_generated'] )|LeftAcc]
			     -| ['compiler_generated'] ))
		  in  let <_5> =
			  call %% Line 1722
			       ( 'erlang'
				 -| ['compiler_generated'] ):%% Line 1722
							     ( 'list_to_tuple'
							       -| ['compiler_generated'] )
			      (%% Line 1722
			       ( [( 'l'
				    -| ['compiler_generated'] )|RightAcc]
				 -| ['compiler_generated'] ))
		      in  %% Line 1654
			  {_6,DKey,_5}
	      %% Line 1655
	      <Leaf,Pos,LeftAcc,DKey,RightAcc> when 'true' ->
		  let <_9> =
		      call %% Line 1656
			   'erlang':%% Line 1656
				    '-'
			  (%% Line 1656
			   Pos, %% Line 1656
				1)
		  in  let <_7> =
			  call %% Line 1656
			       'erlang':%% Line 1656
					'+'
			      (%% Line 1656
			       Pos, %% Line 1656
				    1)
		      in  let <_8> =
			      call %% Line 1656
				   'erlang':%% Line 1656
					    'element'
				  (_7, %% Line 1656
				       Leaf)
			  in  %% Line 1656
			      apply 'bplus_split_leaf_3'/5
				  (Leaf, _9, [_8|LeftAcc], %% Line 1657
							   DKey, %% Line 1657
								 RightAcc)
	    end
	    -| [{'function',{'bplus_split_leaf_3',5}}] )
      -| [{'function',{'bplus_split_leaf_3',5}}] )
'bplus_split_node'/1 =
    %% Line 1663
    ( fun (_0) ->
	  let <S> =
	      case %% Line 1766
		   ( call ( 'erlang'
			    -| ['compiler_generated'] ):( 'element'
							  -| ['compiler_generated'] )
			 (( 1
			    -| ['compiler_generated'] ), ( _0
							   -| [{'function',{'bplus_split_node',1}}] ))
		     -| ['compiler_generated'] ) of
		%% Line 1767
		( <( 'l'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_1> =
			    call %% Line 1768
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1768
							       ( 'tuple_size'
								 -| ['compiler_generated'] )
				(( _0
				   -| [{'function',{'bplus_split_node',1}}] ))
			in  %% Line 1768
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '-'
								   -| ['compiler_generated'] )
				  (_1, ( 1
					 -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		%% Line 1769
		( <( 'n'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_2> =
			    call %% Line 1770
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1770
							       ( 'tuple_size'
								 -| ['compiler_generated'] )
				(( _0
				   -| [{'function',{'bplus_split_node',1}}] ))
			in  %% Line 1770
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'div'
								   -| ['compiler_generated'] )
				  (_2, ( 2
					 -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <_3> when ( 'true'
			      -| ['compiler_generated'] ) ->
		      %% Line 1766
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'case_clause'
				  -| ['compiler_generated'] ),_3}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  in  let <_2> =
		  call %% Line 1665
		       'erlang':%% Line 1665
				'div'
		      (%% Line 1665
		       S, %% Line 1665
			  2)
	      in  %% Line 1665
		  apply 'bplus_split_node_2'/4
		      (( _0
			 -| [{'function',{'bplus_split_node',1}}] ), S, _2, [])
      -| [{'function',{'bplus_split_node',1}}] )
'bplus_split_node_2'/4 =
    %% Line 1667
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <Node,Pos,1,Accum> when 'true' ->
		  let <_6> =
		      call %% Line 1668
			   'erlang':%% Line 1668
				    '-'
			  (%% Line 1668
			   Pos, %% Line 1668
				1)
		  in  ( let <_18> =
			    call %% Line 1781
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1781
							       ( '*'
								 -| ['compiler_generated'] )
				(%% Line 1668
				 Pos, %% Line 1781
				      ( 2
					-| ['compiler_generated'] ))
			in  ( let <_19> =
				  call %% Line 1781
				       ( 'erlang'
					 -| ['compiler_generated'] ):%% Line 1781
								     ( '-'
								       -| ['compiler_generated'] )
				      (_18, %% Line 1781
					    ( 1
					      -| ['compiler_generated'] ))
			      in  let <_5> =
				      call %% Line 1781
					   ( 'erlang'
					     -| ['compiler_generated'] ):%% Line 1781
									 ( 'element'
									   -| ['compiler_generated'] )
					  (_19, %% Line 1668
						Node)
				  in  ( let <_25> =
					    call %% Line 1776
						 ( 'erlang'
						   -| ['compiler_generated'] ):%% Line 1776
									       ( '*'
										 -| ['compiler_generated'] )
						(%% Line 1669
						 Pos, %% Line 1776
						      ( 2
							-| ['compiler_generated'] ))
					in  let <_4> =
						call %% Line 1776
						     ( 'erlang'
						       -| ['compiler_generated'] ):%% Line 1776
										   ( 'element'
										     -| ['compiler_generated'] )
						    (_25, %% Line 1669
							  Node)
					    in  %% Line 1668
						apply 'bplus_split_node_3'/5
						    (Node, _6, [], _5, %% Line 1669
								       [_4|Accum])
					-| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
	      %% Line 1670
	      <Node,Pos,N,Accum> when 'true' ->
		  let <_10> =
		      call %% Line 1671
			   'erlang':%% Line 1671
				    '-'
			  (%% Line 1671
			   Pos, %% Line 1671
				1)
		  in  let <_9> =
			  call %% Line 1671
			       'erlang':%% Line 1671
					'-'
			      (%% Line 1671
			       N, %% Line 1671
				  1)
		      in  ( let <_31> =
				call %% Line 1781
				     ( 'erlang'
				       -| ['compiler_generated'] ):%% Line 1781
								   ( '*'
								     -| ['compiler_generated'] )
				    (%% Line 1671
				     Pos, %% Line 1781
					  ( 2
					    -| ['compiler_generated'] ))
			    in  ( let <_32> =
				      call %% Line 1781
					   ( 'erlang'
					     -| ['compiler_generated'] ):%% Line 1781
									 ( '-'
									   -| ['compiler_generated'] )
					  (_31, %% Line 1781
						( 1
						  -| ['compiler_generated'] ))
				  in  let <_7> =
					  call %% Line 1781
					       ( 'erlang'
						 -| ['compiler_generated'] ):%% Line 1781
									     ( 'element'
									       -| ['compiler_generated'] )
					      (_32, %% Line 1671
						    Node)
				      in  ( let <_38> =
						call %% Line 1776
						     ( 'erlang'
						       -| ['compiler_generated'] ):%% Line 1776
										   ( '*'
										     -| ['compiler_generated'] )
						    (%% Line 1672
						     Pos, %% Line 1776
							  ( 2
							    -| ['compiler_generated'] ))
					    in  let <_8> =
						    call %% Line 1776
							 ( 'erlang'
							   -| ['compiler_generated'] ):%% Line 1776
										       ( 'element'
											 -| ['compiler_generated'] )
							(_38, %% Line 1672
							      Node)
						in  %% Line 1671
						    apply 'bplus_split_node_2'/4
							(Node, _10, _9, [_7|%% Line 1672
									    [_8|Accum]])
					    -| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
	    end
	    -| [{'function',{'bplus_split_node_2',4}}] )
      -| [{'function',{'bplus_split_node_2',4}}] )
'bplus_split_node_3'/5 =
    %% Line 1674
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <Node,1,LeftAcc,DKey,RightAcc> when 'true' ->
		  let <_6> =
		      call %% Line 1776
			   ( 'erlang'
			     -| ['compiler_generated'] ):%% Line 1776
							 ( 'element'
							   -| ['compiler_generated'] )
			  (%% Line 1776
			   ( 2
			     -| ['compiler_generated'] ), %% Line 1675
							  Node)
		  in  let <_7> =
			  apply %% Line 1675
				'bplus_mk_node'/1
			      (%% Line 1675
			       [_6|LeftAcc])
		      in  let <_5> =
			      apply %% Line 1676
				    'bplus_mk_node'/1
				  (%% Line 1676
				   RightAcc)
			  in  %% Line 1675
			      {_7,DKey,_5}
	      %% Line 1677
	      <Node,Pos,LeftAcc,DKey,RightAcc> when 'true' ->
		  let <_10> =
		      call %% Line 1678
			   'erlang':%% Line 1678
				    '-'
			  (%% Line 1678
			   Pos, %% Line 1678
				1)
		  in  ( let <_24> =
			    call %% Line 1781
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1781
							       ( '*'
								 -| ['compiler_generated'] )
				(%% Line 1679
				 Pos, %% Line 1781
				      ( 2
					-| ['compiler_generated'] ))
			in  ( let <_25> =
				  call %% Line 1781
				       ( 'erlang'
					 -| ['compiler_generated'] ):%% Line 1781
								     ( '-'
								       -| ['compiler_generated'] )
				      (_24, %% Line 1781
					    ( 1
					      -| ['compiler_generated'] ))
			      in  let <_8> =
				      call %% Line 1781
					   ( 'erlang'
					     -| ['compiler_generated'] ):%% Line 1781
									 ( 'element'
									   -| ['compiler_generated'] )
					  (_25, %% Line 1679
						Node)
				  in  ( let <_31> =
					    call %% Line 1776
						 ( 'erlang'
						   -| ['compiler_generated'] ):%% Line 1776
									       ( '*'
										 -| ['compiler_generated'] )
						(%% Line 1680
						 Pos, %% Line 1776
						      ( 2
							-| ['compiler_generated'] ))
					in  let <_9> =
						call %% Line 1776
						     ( 'erlang'
						       -| ['compiler_generated'] ):%% Line 1776
										   ( 'element'
										     -| ['compiler_generated'] )
						    (_31, %% Line 1680
							  Node)
					    in  %% Line 1678
						apply 'bplus_split_node_3'/5
						    (Node, _10, %% Line 1679
								[_8|%% Line 1680
								    [_9|LeftAcc]], %% Line 1681
										   DKey, %% Line 1681
											 RightAcc)
					-| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
	    end
	    -| [{'function',{'bplus_split_node_3',5}}] )
      -| [{'function',{'bplus_split_node_3',5}}] )
'bplus_joinleft_tree'/3 =
    %% Line 1687
    ( fun (_0,_1,_2) ->
	  let <_3> =
	      case %% Line 1766
		   ( call ( 'erlang'
			    -| ['compiler_generated'] ):( 'element'
							  -| ['compiler_generated'] )
			 (( 1
			    -| ['compiler_generated'] ), _0)
		     -| ['compiler_generated'] ) of
		%% Line 1767
		( <( 'l'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_9> =
			    call %% Line 1768
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1768
							       ( 'tuple_size'
								 -| ['compiler_generated'] )
				(_0)
			in  %% Line 1768
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '-'
								   -| ['compiler_generated'] )
				  (_9, ( 1
					 -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		%% Line 1769
		( <( 'n'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_10> =
			    call %% Line 1770
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1770
							       ( 'tuple_size'
								 -| ['compiler_generated'] )
				(_0)
			in  %% Line 1770
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'div'
								   -| ['compiler_generated'] )
				  (_10, ( 2
					  -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <_3> when ( 'true'
			      -| ['compiler_generated'] ) ->
		      %% Line 1766
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'case_clause'
				  -| ['compiler_generated'] ),_3}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  in  %% Line 1688
	      apply 'bplus_join_tree_2'/5
		  (_0, _1, _2, _3, [])
      -| [{'function',{'bplus_joinleft_tree',3}}] )
'bplus_joinright_tree'/3 =
    %% Line 1689
    ( fun (_0,_1,_2) ->
	  let <_4> =
	      call %% Line 1690
		   'erlang':%% Line 1690
			    '+'
		  (_2, %% Line 1690
		       1)
	  in  let <_3> =
		  case %% Line 1766
		       ( call ( 'erlang'
				-| ['compiler_generated'] ):( 'element'
							      -| ['compiler_generated'] )
			     (( 1
				-| ['compiler_generated'] ), _0)
			 -| ['compiler_generated'] ) of
		    %% Line 1767
		    ( <( 'l'
			 -| ['compiler_generated'] )> when ( 'true'
							     -| ['compiler_generated'] ) ->
			  ( let <_10> =
				call %% Line 1768
				     ( 'erlang'
				       -| ['compiler_generated'] ):%% Line 1768
								   ( 'tuple_size'
								     -| ['compiler_generated'] )
				    (_0)
			    in  %% Line 1768
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '-'
								       -| ['compiler_generated'] )
				      (_10, ( 1
					      -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		    %% Line 1769
		    ( <( 'n'
			 -| ['compiler_generated'] )> when ( 'true'
							     -| ['compiler_generated'] ) ->
			  ( let <_11> =
				call %% Line 1770
				     ( 'erlang'
				       -| ['compiler_generated'] ):%% Line 1770
								   ( 'tuple_size'
								     -| ['compiler_generated'] )
				    (_0)
			    in  %% Line 1770
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'div'
								       -| ['compiler_generated'] )
				      (_11, ( 2
					      -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		    ( <_3> when ( 'true'
				  -| ['compiler_generated'] ) ->
			  %% Line 1766
			  ( primop ( 'match_fail'
				     -| ['compiler_generated'] )
				(( {( 'case_clause'
				      -| ['compiler_generated'] ),_3}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 1690
		  apply 'bplus_join_tree_2'/5
		      (_0, _1, _4, _3, [])
      -| [{'function',{'bplus_joinright_tree',3}}] )
'bplus_join_tree_2'/5 =
    %% Line 1692
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <Tree,JoinedTree,Pos,_14,Accum>
		  when call 'erlang':'=:='
			(_14,
			 Pos) ->
		  let <_5> =
		      call %% Line 1693
			   'erlang':%% Line 1693
				    '-'
			  (%% Line 1693
			   Pos, %% Line 1693
				2)
		  in  %% Line 1693
		      apply 'bplus_join_tree_3'/3
			  (Tree, _5, [JoinedTree|Accum])
	      %% Line 1694
	      <Tree,JoinedTree,Pos,N,Accum> when 'true' ->
		  let <_8> =
		      call %% Line 1695
			   'erlang':%% Line 1695
				    '-'
			  (%% Line 1695
			   N, %% Line 1695
			      1)
		  in  ( let <_19> =
			    call %% Line 1781
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1781
							       ( '*'
								 -| ['compiler_generated'] )
				(%% Line 1696
				 N, %% Line 1781
				    ( 2
				      -| ['compiler_generated'] ))
			in  ( let <_20> =
				  call %% Line 1781
				       ( 'erlang'
					 -| ['compiler_generated'] ):%% Line 1781
								     ( '-'
								       -| ['compiler_generated'] )
				      (_19, %% Line 1781
					    ( 1
					      -| ['compiler_generated'] ))
			      in  let <_6> =
				      call %% Line 1781
					   ( 'erlang'
					     -| ['compiler_generated'] ):%% Line 1781
									 ( 'element'
									   -| ['compiler_generated'] )
					  (_20, %% Line 1696
						Tree)
				  in  ( let <_27> =
					    call %% Line 1776
						 ( 'erlang'
						   -| ['compiler_generated'] ):%% Line 1776
									       ( '*'
										 -| ['compiler_generated'] )
						(%% Line 1696
						 N, %% Line 1776
						    ( 2
						      -| ['compiler_generated'] ))
					in  let <_7> =
						call %% Line 1776
						     ( 'erlang'
						       -| ['compiler_generated'] ):%% Line 1776
										   ( 'element'
										     -| ['compiler_generated'] )
						    (_27, %% Line 1696
							  Tree)
					    in  %% Line 1695
						apply 'bplus_join_tree_2'/5
						    (Tree, JoinedTree, Pos, _8, %% Line 1696
										[_6|[_7|Accum]])
					-| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
	    end
	    -| [{'function',{'bplus_join_tree_2',5}}] )
      -| [{'function',{'bplus_join_tree_2',5}}] )
'bplus_join_tree_3'/3 =
    %% Line 1698
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <_X_Tree,0,Accum> when 'true' ->
		  apply 'bplus_mk_node'/1
		      (Accum)
	      %% Line 1699
	      <Tree,Pos,Accum> when 'true' ->
		  let <_5> =
		      call %% Line 1700
			   'erlang':%% Line 1700
				    '-'
			  (%% Line 1700
			   Pos, %% Line 1700
				1)
		  in  ( let <_13> =
			    call %% Line 1776
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1776
							       ( '*'
								 -| ['compiler_generated'] )
				(%% Line 1700
				 Pos, %% Line 1776
				      ( 2
					-| ['compiler_generated'] ))
			in  let <_3> =
				call %% Line 1776
				     ( 'erlang'
				       -| ['compiler_generated'] ):%% Line 1776
								   ( 'element'
								     -| ['compiler_generated'] )
				    (_13, %% Line 1700
					  Tree)
			    in  ( let <_20> =
				      call %% Line 1782
					   ( 'erlang'
					     -| ['compiler_generated'] ):%% Line 1782
									 ( '*'
									   -| ['compiler_generated'] )
					  (%% Line 1701
					   Pos, %% Line 1782
						( 2
						  -| ['compiler_generated'] ))
				  in  ( let <_21> =
					    call %% Line 1782
						 ( 'erlang'
						   -| ['compiler_generated'] ):%% Line 1782
									       ( '+'
										 -| ['compiler_generated'] )
						(_20, %% Line 1782
						      ( 1
							-| ['compiler_generated'] ))
					in  let <_4> =
						call %% Line 1782
						     ( 'erlang'
						       -| ['compiler_generated'] ):%% Line 1782
										   ( 'element'
										     -| ['compiler_generated'] )
						    (_21, %% Line 1701
							  Tree)
					    in  %% Line 1700
						apply 'bplus_join_tree_3'/3
						    (Tree, _5, [_3|%% Line 1701
								   [_4|Accum]])
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			-| ['compiler_generated'] )
	    end
	    -| [{'function',{'bplus_join_tree_3',3}}] )
      -| [{'function',{'bplus_join_tree_3',3}}] )
'bplus_mk_node'/1 =
    %% Line 1710
    ( fun (_0) ->
	  call 'erlang':'list_to_tuple'
	      (['n'|( _0
		      -| [{'function',{'bplus_mk_node',1}}] )])
      -| [{'function',{'bplus_mk_node',1}}] )
'bplus_node_to_list'/1 =
    %% Line 1715
    ( fun (_0) ->
	  %% Line 1716
	  case call 'erlang':'tuple_to_list'
		   (( _0
		      -| [{'function',{'bplus_node_to_list',1}}] )) of
	    <[_3|NodeList]> when 'true' ->
		%% Line 1717
		NodeList
	    ( <_1> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_1})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'bplus_node_to_list',1}}] )
'bplus_mk_leaf'/1 =
    %% Line 1722
    ( fun (_0) ->
	  call 'erlang':'list_to_tuple'
	      (['l'|( _0
		      -| [{'function',{'bplus_mk_leaf',1}}] )])
      -| [{'function',{'bplus_mk_leaf',1}}] )
'bplus_leaf_to_list'/1 =
    %% Line 1727
    ( fun (_0) ->
	  %% Line 1728
	  case call 'erlang':'tuple_to_list'
		   (( _0
		      -| [{'function',{'bplus_leaf_to_list',1}}] )) of
	    <[_3|LeafList]> when 'true' ->
		%% Line 1729
		LeafList
	    ( <_1> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_1})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'bplus_leaf_to_list',1}}] )
'bplus_put_subtree'/2 =
    %% Line 1734
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Tree,[]> when 'true' ->
		  Tree
	      %% Line 1735
	      <Tree,[NewSubTree|[Pos|Rest]]> when 'true' ->
		  let <_2> =
		      call %% Line 1736
			   'erlang':%% Line 1736
				    '*'
			  (%% Line 1736
			   Pos, %% Line 1736
				2)
		  in  let <_3> =
			  call %% Line 1736
			       'erlang':%% Line 1736
					'setelement'
			      (_2, %% Line 1736
				   Tree, %% Line 1736
					 NewSubTree)
		      in  %% Line 1736
			  apply 'bplus_put_subtree'/2
			      (_3, Rest)
	      ( <_5,_4> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_5,_4})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'bplus_put_subtree',2}}] )
      -| [{'function',{'bplus_put_subtree',2}}] )
'bplus_extend_tree'/3 =
    %% Line 1741
    ( fun (_0,_1,_2) ->
	  let <_3> =
	      case %% Line 1766
		   ( call ( 'erlang'
			    -| ['compiler_generated'] ):( 'element'
							  -| ['compiler_generated'] )
			 (( 1
			    -| ['compiler_generated'] ), _0)
		     -| ['compiler_generated'] ) of
		%% Line 1767
		( <( 'l'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_9> =
			    call %% Line 1768
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1768
							       ( 'tuple_size'
								 -| ['compiler_generated'] )
				(_0)
			in  %% Line 1768
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '-'
								   -| ['compiler_generated'] )
				  (_9, ( 1
					 -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		%% Line 1769
		( <( 'n'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_10> =
			    call %% Line 1770
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1770
							       ( 'tuple_size'
								 -| ['compiler_generated'] )
				(_0)
			in  %% Line 1770
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'div'
								   -| ['compiler_generated'] )
				  (_10, ( 2
					  -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <_3> when ( 'true'
			      -| ['compiler_generated'] ) ->
		      %% Line 1766
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'case_clause'
				  -| ['compiler_generated'] ),_3}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  in  %% Line 1742
	      apply 'bplus_extend_tree_2'/5
		  (_0, _1, _2, _3, [])
      -| [{'function',{'bplus_extend_tree',3}}] )
'bplus_extend_tree_2'/5 =
    %% Line 1744
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <Tree,{T1,DKey,T2},Pos,_14,Accum>
		  when call 'erlang':'=:='
			(_14,
			 Pos) ->
		  let <_5> =
		      call %% Line 1745
			   'erlang':%% Line 1745
				    '-'
			  (%% Line 1745
			   Pos, %% Line 1745
				1)
		  in  %% Line 1745
		      apply 'bplus_extend_tree_3'/3
			  (Tree, _5, [T1|[DKey|[T2|Accum]]])
	      %% Line 1746
	      <Tree,Inserts,Pos,N,Accum> when 'true' ->
		  let <_8> =
		      call %% Line 1747
			   'erlang':%% Line 1747
				    '-'
			  (%% Line 1747
			   N, %% Line 1747
			      1)
		  in  ( let <_19> =
			    call %% Line 1781
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1781
							       ( '*'
								 -| ['compiler_generated'] )
				(%% Line 1748
				 N, %% Line 1781
				    ( 2
				      -| ['compiler_generated'] ))
			in  ( let <_20> =
				  call %% Line 1781
				       ( 'erlang'
					 -| ['compiler_generated'] ):%% Line 1781
								     ( '-'
								       -| ['compiler_generated'] )
				      (_19, %% Line 1781
					    ( 1
					      -| ['compiler_generated'] ))
			      in  let <_6> =
				      call %% Line 1781
					   ( 'erlang'
					     -| ['compiler_generated'] ):%% Line 1781
									 ( 'element'
									   -| ['compiler_generated'] )
					  (_20, %% Line 1748
						Tree)
				  in  ( let <_27> =
					    call %% Line 1776
						 ( 'erlang'
						   -| ['compiler_generated'] ):%% Line 1776
									       ( '*'
										 -| ['compiler_generated'] )
						(%% Line 1748
						 N, %% Line 1776
						    ( 2
						      -| ['compiler_generated'] ))
					in  let <_7> =
						call %% Line 1776
						     ( 'erlang'
						       -| ['compiler_generated'] ):%% Line 1776
										   ( 'element'
										     -| ['compiler_generated'] )
						    (_27, %% Line 1748
							  Tree)
					    in  %% Line 1747
						apply 'bplus_extend_tree_2'/5
						    (Tree, Inserts, Pos, _8, %% Line 1748
									     [_6|[_7|Accum]])
					-| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
	    end
	    -| [{'function',{'bplus_extend_tree_2',5}}] )
      -| [{'function',{'bplus_extend_tree_2',5}}] )
'bplus_extend_tree_3'/3 =
    %% Line 1750
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <_9,0,Accum> when 'true' ->
		  apply 'bplus_mk_node'/1
		      (Accum)
	      %% Line 1751
	      <Tree,N,Accum> when 'true' ->
		  let <_5> =
		      call %% Line 1752
			   'erlang':%% Line 1752
				    '-'
			  (%% Line 1752
			   N, %% Line 1752
			      1)
		  in  ( let <_13> =
			    call %% Line 1776
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1776
							       ( '*'
								 -| ['compiler_generated'] )
				(%% Line 1752
				 N, %% Line 1776
				    ( 2
				      -| ['compiler_generated'] ))
			in  let <_3> =
				call %% Line 1776
				     ( 'erlang'
				       -| ['compiler_generated'] ):%% Line 1776
								   ( 'element'
								     -| ['compiler_generated'] )
				    (_13, %% Line 1752
					  Tree)
			    in  ( let <_19> =
				      call %% Line 1782
					   ( 'erlang'
					     -| ['compiler_generated'] ):%% Line 1782
									 ( '*'
									   -| ['compiler_generated'] )
					  (%% Line 1753
					   N, %% Line 1782
					      ( 2
						-| ['compiler_generated'] ))
				  in  ( let <_20> =
					    call %% Line 1782
						 ( 'erlang'
						   -| ['compiler_generated'] ):%% Line 1782
									       ( '+'
										 -| ['compiler_generated'] )
						(_19, %% Line 1782
						      ( 1
							-| ['compiler_generated'] ))
					in  let <_4> =
						call %% Line 1782
						     ( 'erlang'
						       -| ['compiler_generated'] ):%% Line 1782
										   ( 'element'
										     -| ['compiler_generated'] )
						    (_20, %% Line 1753
							  Tree)
					    in  %% Line 1752
						apply 'bplus_extend_tree_3'/3
						    (Tree, _5, [_3|%% Line 1753
								   [_4|Accum]])
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			-| ['compiler_generated'] )
	    end
	    -| [{'function',{'bplus_extend_tree_3',3}}] )
      -| [{'function',{'bplus_extend_tree_3',3}}] )
'bplus_put_lkey'/3 =
    %% Line 1758
    ( fun (_0,_1,_2) ->
	  let <_3> =
	      call 'erlang':'*'
		  (_2, 2)
	  in  let <_4> =
		  call 'erlang':'-'
		      (_3, 1)
	      in  call 'erlang':'setelement'
		      (_4, _0, _1)
      -| [{'function',{'bplus_put_lkey',3}}] )
'bplus_put_rkey'/3 =
    %% Line 1759
    ( fun (_0,_1,_2) ->
	  let <_3> =
	      call 'erlang':'*'
		  (_2, 2)
	  in  let <_4> =
		  call 'erlang':'+'
		      (_3, 1)
	      in  call 'erlang':'setelement'
		      (_4, _0, _1)
      -| [{'function',{'bplus_put_rkey',3}}] )
'bplus_get_size'/1 =
    %% Line 1765
    ( fun (_0) ->
	  %% Line 1766
	  case call 'erlang':'element'
		   (1, ( _0
			 -| [{'function',{'bplus_get_size',1}}] )) of
	    %% Line 1767
	    <'l'> when 'true' ->
		let <_1> =
		    call %% Line 1768
			 'erlang':%% Line 1768
				  'tuple_size'
			(( _0
			   -| [{'function',{'bplus_get_size',1}}] ))
		in  %% Line 1768
		    call 'erlang':'-'
			(_1, 1)
	    %% Line 1769
	    <'n'> when 'true' ->
		let <_2> =
		    call %% Line 1770
			 'erlang':%% Line 1770
				  'tuple_size'
			(( _0
			   -| [{'function',{'bplus_get_size',1}}] ))
		in  %% Line 1770
		    call 'erlang':'div'
			(_2, 2)
	    ( <_3> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_3})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'bplus_get_size',1}}] )
'bplus_get_tree'/2 =
    %% Line 1776
    ( fun (_0,_1) ->
	  let <_2> =
	      call 'erlang':'*'
		  (_1, 2)
	  in  call 'erlang':'element'
		  (_2, _0)
      -| [{'function',{'bplus_get_tree',2}}] )
'bplus_get_lkey'/2 =
    %% Line 1781
    ( fun (_0,_1) ->
	  let <_2> =
	      call 'erlang':'*'
		  (_1, 2)
	  in  let <_3> =
		  call 'erlang':'-'
		      (_2, 1)
	      in  call 'erlang':'element'
		      (_3, _0)
      -| [{'function',{'bplus_get_lkey',2}}] )
'bplus_get_rkey'/2 =
    %% Line 1782
    ( fun (_0,_1) ->
	  let <_2> =
	      call 'erlang':'*'
		  (_1, 2)
	  in  let <_3> =
		  call 'erlang':'+'
		      (_2, 1)
	      in  call 'erlang':'element'
		      (_3, _0)
      -| [{'function',{'bplus_get_rkey',2}}] )
'module_info'/0 =
    ( fun () ->
	  call 'erlang':'get_module_info'
	      ('dets_utils')
      -| [{'function',{'module_info',0}}] )
'module_info'/1 =
    ( fun (_0) ->
	  call 'erlang':'get_module_info'
	      ('dets_utils', ( _0
			       -| [{'function',{'module_info',1}}] ))
      -| [{'function',{'module_info',1}}] )
end