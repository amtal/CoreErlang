module 'dets_v9' ['bchunk_init'/2,
		  'bulk_input'/3,
		  'cache_segps'/3,
		  'check_file_header'/2,
		  'compact_init'/3,
		  'db_hash'/2,
		  'do_perform_save'/1,
		  'file_info'/1,
		  'find_object'/2,
		  'fsck_input'/4,
		  'init_freelist'/1,
		  'initiate_file'/11,
		  'mark_dirty'/1,
		  'may_grow'/3,
		  'module_info'/0,
		  'module_info'/1,
		  'no_slots'/1,
		  'output_objs'/3,
		  'prep_table_copy'/9,
		  'read_bchunks'/2,
		  'read_file_header'/2,
		  'scan_objs'/8,
		  'slot_objs'/2,
		  'table_parameters'/1,
		  'try_bchunk_header'/2,
		  'v_segments'/1,
		  'write_cache'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[100|[101|[116|[115|[95|[118|[57|[46|[101|[114|[108]]]]]]]]]]]]]]],1}],
		%% Line 37
		'dialyzer' =
		    %% Line 37
		    ['no_improper_lists'],
		%% Line 39
		'compile' =
		    %% Line 39
		    [{'inline',[{'max_objsize',1}|[{'maxobjsize',1}]]}],
		%% Line 40
		'compile' =
		    %% Line 40
		    [{'inline',[{'write_segment_file',6}]}],
		%% Line 41
		'compile' =
		    %% Line 41
		    [{'inline',[{'sz2pos',1}|[{'adjsz',1}]]}],
		%% Line 42
		'compile' =
		    %% Line 42
		    [{'inline',[{'skip_bytes',6}|[{'make_object',4}]]}],
		%% Line 43
		'compile' =
		    %% Line 43
		    [{'inline',[{'segp_cache',2}|[{'get_segp',1}|[{'get_arrpart',1}]]]}],
		%% Line 44
		'compile' =
		    %% Line 44
		    [{'inline',[{'h',2}]}],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[100|[101|[116|[115|[46|[104|[114|[108]]]]]]]]]]]],1}],
		%% Line 49
		'type' =
		    %% Line 49
		    [{'access',{'type',49,'union',[{'atom',49,'read'}|[{'atom',49,'read_write'}]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{'auto_save',{'type',50,'union',[{'atom',50,'infinity'}|[{'type',50,'non_neg_integer',[]}]]},[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{'hash_bif',{'type',51,'union',[{'atom',51,'phash'}|[{'atom',51,'phash2'}]]},[]}],
		%% Line 52
		'type' =
		    %% Line 52
		    [{'keypos',{'type',52,'pos_integer',[]},[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'no_colls',{'type',53,'list',[{'type',53,'tuple',[{'ann_type',53,[{'var',53,'LogSize'}|[{'type',53,'non_neg_integer',[]}]]}|[{'ann_type',54,[{'var',54,'NoCollections'}|[{'type',54,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{'no_slots',{'type',55,'union',[{'atom',55,'default'}|[{'type',55,'non_neg_integer',[]}]]},[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{'tab_name',{'type',56,'term',[]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{'type',{'type',57,'union',[{'atom',57,'bag'}|[{'atom',57,'duplicate_bag'}|[{'atom',57,'set'}]]]},[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'update_mode',{'type',58,'union',[{'atom',58,'dirty'}|[{'atom',59,'new_dirty'}|[{'atom',60,'saved'}|[{'type',61,'tuple',[{'atom',61,'error'}|[{'ann_type',61,[{'var',61,'Reason'}|[{'type',61,'term',[]}]]}]]}]]]]},[]}],
		%% Line 64
		'record' =
		    %% Line 64
		    [{'head',[{'typed_record_field',{'record_field',65,{'atom',65,'m'}},{'type',65,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',66,{'atom',66,'m2'}},{'type',66,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',67,{'atom',67,'next'}},{'type',67,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',69,{'atom',69,'fptr'}},{'remote_type',69,[{'atom',69,'file'}|[{'atom',69,'fd'}|[[]]]]}}|[{'typed_record_field',{'record_field',70,{'atom',70,'no_objects'}},{'type',70,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',71,{'atom',71,'no_keys'}},{'type',71,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',72,{'atom',72,'maxobjsize'}},{'type',72,'union',[{'atom',72,'undefined'}|[{'type',72,'non_neg_integer',[]}]]}}|[{'record_field',74,{'atom',74,'n'}}|[{'typed_record_field',{'record_field',75,{'atom',75,'type'}},{'user_type',75,'type',[]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'keypos'}},{'user_type',76,'keypos',[]}}|[{'typed_record_field',{'record_field',77,{'atom',77,'freelists'}},{'type',77,'union',[{'atom',77,'undefined'}|[{'type',78,'tuple','any'}]]}}|[{'typed_record_field',{'record_field',80,{'atom',80,'freelists_p'}},{'type',80,'union',[{'atom',80,'undefined'}|[{'type',81,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',82,{'atom',82,'no_collections'}},{'type',82,'union',[{'atom',82,'undefined'}|[{'user_type',83,'no_colls',[]}]]}}|[{'typed_record_field',{'record_field',85,{'atom',85,'auto_save'}},{'user_type',85,'auto_save',[]}}|[{'typed_record_field',{'record_field',86,{'atom',86,'update_mode'}},{'user_type',86,'update_mode',[]}}|[{'typed_record_field',{'record_field',87,{'atom',87,'fixed'},{'atom',87,'false'}},{'type',87,'union',[{'atom',87,'false'}|[{'type',88,'tuple',[{'type',88,'tuple',[{'type',88,'integer',[]}|[{'type',88,'integer',[]}]]}|[{'type',89,'list',[{'type',89,'tuple',[{'type',89,'pid',[]}|[{'type',90,'non_neg_integer',[]}]]}]}]]}]]}}|[{'typed_record_field',{'record_field',91,{'atom',91,'hash_bif'}},{'user_type',91,'hash_bif',[]}}|[{'typed_record_field',{'record_field',92,{'atom',92,'has_md5'}},{'type',92,'boolean',[]}}|[{'typed_record_field',{'record_field',94,{'atom',94,'min_no_slots'}},{'user_type',94,'no_slots',[]}}|[{'typed_record_field',{'record_field',95,{'atom',95,'max_no_slots'}},{'user_type',95,'no_slots',[]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'cache'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'user_type',96,'cache',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'filename'}},{'remote_type',98,[{'atom',98,'file'}|[{'atom',98,'name'}|[[]]]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'access'},{'atom',99,'read_write'}},{'user_type',99,'access',[]}}|[{'typed_record_field',{'record_field',100,{'atom',100,'ram_file'},{'atom',100,'false'}},{'type',100,'boolean',[]}}|[{'typed_record_field',{'record_field',101,{'atom',101,'name'}},{'user_type',101,'tab_name',[]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'parent'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'pid',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'server'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'pid',[]}]]}}|[{'typed_record_field',{'record_field',106,{'atom',106,'bump'}},{'type',106,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'base'}},{'type',107,'non_neg_integer',[]}}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}],
		%% Line 112
		'record' =
		    %% Line 112
		    [{'fileheader',[{'typed_record_field',{'record_field',113,{'atom',113,'freelist'}},{'type',113,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'fl_base'}},{'type',114,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'cookie'}},{'type',115,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'closed_properly'}},{'type',116,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'type'}},{'type',117,'union',[{'atom',117,'badtype'}|[{'user_type',117,'type',[]}]]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'version'}},{'type',118,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'m'}},{'type',119,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'next'}},{'type',120,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'keypos'}},{'user_type',121,'keypos',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'no_objects'}},{'type',122,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'no_keys'}},{'type',123,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'min_no_slots'}},{'type',124,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'max_no_slots'}},{'type',125,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',126,{'atom',126,'no_colls'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'user_type',126,'no_colls',[]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'hash_method'}},{'type',127,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'read_md5'}},{'type',128,'binary',[]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'has_md5'}},{'type',129,'boolean',[]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'md5'}},{'type',130,'binary',[]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'trailer'}},{'type',131,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'eof'}},{'type',132,'non_neg_integer',[]}}|[{'record_field',133,{'atom',133,'n'}}]]]]]]]]]]]]]]]]]]]]]}],
		%% Line 136
		'type' =
		    %% Line 136
		    [{'delay',{'type',136,'non_neg_integer',[]},[]}],
		%% Line 137
		'type' =
		    %% Line 137
		    [{'threshold',{'type',137,'non_neg_integer',[]},[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{'cache_parms',{'type',139,'tuple',[{'ann_type',139,[{'var',139,'Delay'}|[{'user_type',139,'delay',[]}]]}|[{'ann_type',141,[{'var',141,'Size'}|[{'user_type',141,'threshold',[]}]]}]]},[]}],
		%% Line 144
		'record' =
		    %% Line 144
		    [{'cache',[{'typed_record_field',{'record_field',145,{'atom',145,'cache'}},{'type',146,'list',[{'type',146,'tuple',[{'ann_type',146,[{'var',146,'Key'}|[{'type',146,'term',[]}]]}|[{'type',147,'tuple',[{'ann_type',147,[{'var',147,'Seq'}|[{'type',147,'non_neg_integer',[]}]]}|[{'ann_type',147,[{'var',147,'Item'}|[{'type',147,'term',[]}]]}]]}]]}]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'csize'}},{'type',148,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'inserts'}},{'type',150,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',151,{'atom',151,'wrtime'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'integer',[]}]]}}|[{'typed_record_field',{'record_field',152,{'atom',152,'tsize'}},{'user_type',152,'threshold',[]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'delay'}},{'user_type',153,'delay',[]}}]]]]]]}],
		%% Line 156
		'type' =
		    %% Line 156
		    [{'cache',{'type',156,'record',[{'atom',156,'cache'}]},[]}],
		%% Line 47
		'file' =
		    %% Line 47
		    [{[115|[114|[99|[47|[100|[101|[116|[115|[95|[118|[57|[46|[101|[114|[108]]]]]]]]]]]]]]],47}],
		%% Line 270
		'record' =
		    %% Line 270
		    [{'$hash2',[{'record_field',271,{'atom',271,'file_format_version'}}|[{'record_field',272,{'atom',272,'bchunk_format_version'}}|[{'record_field',273,{'atom',273,'file'}}|[{'record_field',273,{'atom',273,'type'}}|[{'record_field',273,{'atom',273,'keypos'}}|[{'record_field',273,{'atom',273,'hash_method'}}|[{'record_field',274,{'atom',274,'n'}}|[{'record_field',274,{'atom',274,'m'}}|[{'record_field',274,{'atom',274,'next'}}|[{'record_field',275,{'atom',275,'min'}}|[{'record_field',275,{'atom',275,'max'}}|[{'record_field',276,{'atom',276,'no_objects'}}|[{'record_field',276,{'atom',276,'no_keys'}}|[{'typed_record_field',{'record_field',277,{'atom',277,'no_colls'}},{'user_type',277,'no_colls',[]}}]]]]]]]]]]]]]]}]]
'mark_dirty'/1 =
    %% Line 288
    ( fun (_0) ->
	  %% Line 290
	  case call 'dets_utils':'pwrite'
		   (( _0
		      -| [{'function',{'mark_dirty',1}}] ), [{8,#{#<0>(8,1,'integer',['unsigned'|['big']]),
								  #<0>(8,1,'integer',['unsigned'|['big']]),
								  #<0>(8,1,'integer',['unsigned'|['big']]),
								  #<0>(8,1,'integer',['unsigned'|['big']])}#}]) of
	    <{_X_H,'ok'}> when 'true' ->
		%% Line 291
		case call 'dets_utils':'sync'
			 (( _0
			    -| [{'function',{'mark_dirty',1}}] )) of
		  <'ok'> when 'true' ->
		      %% Line 292
		      ( case ( _0
			       -| [{'function',{'mark_dirty',1}}] ) of
			  ( <( {'head',_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_rec0,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35}
			       -| ['compiler_generated'] )> when 'true' ->
				case call 'dets_utils':'position'
					 (( _0
					    -| [{'function',{'mark_dirty',1}}] ), _rec0) of
				  <{'ok',_X_Pos}> when 'true' ->
				      %% Line 293
				      call 'dets_utils':'truncate'
					  (( _0
					     -| [{'function',{'mark_dirty',1}}] ), 'cur')
				  ( <_6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_6})
				    -| ['compiler_generated'] )
				end
			    -| ['compiler_generated'] )
			  ( <_36> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','head'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  ( <_3> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_3})
		    -| ['compiler_generated'] )
		end
	    ( <_2> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_2})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'mark_dirty',1}}] )
'prep_table_copy'/9 =
    %% Line 296
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	  %% Line 297
	  case _8 of
	    %% Line 298
	    <{'$hash2',9,%% Line 299
			 1,_35,_36,_37,%% Line 302
				       HashMethodCode,%% Line 300
						      N,%% Line 300
							M,%% Line 300
							  Next,%% Line 301
							       Min,%% Line 301
								   Max,%% Line 303
								       NoObjects,%% Line 303
										 NoKeys,%% Line 304
											_X_NoColls}>
		when %% Line 305
		  try
		      let <_9> =
			  call 'erlang':'is_integer'
			      (N)
		      in  let <_10> =
			      call 'erlang':'is_integer'
				  (M)
			  in  let <_11> =
				  call 'erlang':'is_integer'
				      (Next)
			      in  let <_12> =
				      call %% Line 306
					   'erlang':%% Line 306
						    'is_integer'
					  (%% Line 306
					   Min)
				  in  let <_13> =
					  call %% Line 306
					       'erlang':%% Line 306
							'is_integer'
					      (%% Line 306
					       Max)
				      in  let <_14> =
					      call %% Line 307
						   'erlang':%% Line 307
							    'is_integer'
						  (%% Line 307
						   NoObjects)
					  in  let <_15> =
						  call %% Line 307
						       'erlang':%% Line 307
								'is_integer'
						      (%% Line 307
						       NoKeys)
					      in  let <_16> =
						      call %% Line 308
							   'erlang':%% Line 308
								    '>='
							  (%% Line 308
							   NoObjects, %% Line 308
								      NoKeys)
						  in  let <_17> =
							  call 'erlang':'and'
							      (_15, _16)
						      in  let <_18> =
							      call 'erlang':'and'
								  (_14, _17)
							  in  let <_19> =
								  call 'erlang':'and'
								      (_13, _18)
							      in  let <_20> =
								      call 'erlang':'and'
									  (_12, _19)
								  in  let <_21> =
									  call 'erlang':'and'
									      (_11, _20)
								      in  let <_22> =
									      call 'erlang':'and'
										  (_10, _21)
									  in  call 'erlang':'and'
										  (_9, _22)
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false' ->
		let <HashMethod> =
		    apply %% Line 309
			  'code_to_hash_method'/1
			(%% Line 309
			 HashMethodCode)
		in  %% Line 310
		    case apply 'hash_invars'/5
			     (N, M, Next, Min, Max) of
		      %% Line 311
		      <'false'> when 'true' ->
			  %% Line 312
			  call 'erlang':'throw'
			      ('badarg')
		      %% Line 313
		      <'true'> when 'true' ->
			  %% Line 314
			  apply 'init_file'/17
			      (_0, _1, _2, _3, _4, Min, Max, _5, _6, _7, %% Line 315
									 'false', %% Line 315
										  M, %% Line 315
										     N, %% Line 315
											Next, %% Line 315
											      HashMethod, %% Line 316
													  NoObjects, %% Line 316
														     NoKeys)
		      ( <_24> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_24})
			-| ['compiler_generated'] )
		    end
	    %% Line 318
	    <_38> when 'true' ->
		%% Line 319
		call 'erlang':'throw'
		    ('badarg')
	  end
      -| [{'function',{'prep_table_copy',9}}] )
'initiate_file'/11 =
    %% Line 328
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) ->
	  let <MaxSlots1> =
	      call %% Line 330
		   'erlang':%% Line 330
			    'min'
		  (_6, %% Line 330
		       33554432)
	  in  let <MinSlots1> =
		  call %% Line 331
		       'erlang':%% Line 331
				'min'
		      (_5, %% Line 331
			   MaxSlots1)
	      in  let <MinSlots> =
		      apply %% Line 332
			    'slots2'/1
			  (%% Line 332
			   MinSlots1)
		  in  let <MaxSlots> =
			  apply %% Line 333
				'slots2'/1
			      (%% Line 333
			       MaxSlots1)
		      in  %% Line 336
			  apply 'init_file'/17
			      (_0, _1, _2, _3, _4, MinSlots, MaxSlots, _7, _8, _9, _10, MinSlots, 0, MinSlots, %% Line 337
													       'phash2', %% Line 337
															 0, %% Line 337
															    0)
      -| [{'function',{'initiate_file',11}}] )
'init_file'/17 =
    %% Line 339
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16) ->
	  let <Ftab> =
	      call %% Line 341
		   'dets_utils':%% Line 341
				'init_alloc'
		  (%% Line 341
		   1336)
	  in  let <_34> =
		  call %% Line 345
		       'erlang':%% Line 345
				'*'
		      (_11, %% Line 345
			    2)
	      in  let <_33> =
		      call %% Line 355
			   'orddict':%% Line 355
				     'new'
			  ()
		  in  let <_32> =
			  call %% Line 366
			       'dets_utils':%% Line 366
					    'new_cache'
			      (_8)
		      in  let <Head0> =
			      {%% Line 343
			       'head',_11,_34,_13,_0,_15,_16,%% Line 350
							     0,_12,_3,_4,%% Line 354
									 Ftab,'undefined',_33,_9,%% Line 353
												 'dirty','false',_14,%% Line 358
														     'true',_5,_6,_32,_2,'read_write',_7,_1,'undefined','undefined',%% Line 367
																						    16,%% Line 368
																						       1336}
			  in  let <NoColls> =
				  #{#<%% Line 372
				      0>(%% Line 372
					 112,8,'integer',['unsigned'|['big']])}#
			      in  let <FileHeader> =
				      apply %% Line 373
					    'file_header'/4
					  (%% Line 373
					   Head0, %% Line 371
						  0, %% Line 374
						     0, %% Line 374
							NoColls)
				  in  let <_41> =
					  #{#<%% Line 376
					      0>(%% Line 376
						 1024,8,'integer',['unsigned'|['big']])}#
				      in  let <W0> =
					      {%% Line 375
					       0,%% Line 375
						 [FileHeader|_41]}
					  in  let <_48> =
						  fun (_46) ->
						      %% Line 379
						      case _46 of
							<{I1,I2}>
							    when let <_44> =
								  call 'erlang':'is_integer'
								      (I1)
							      in  let <_45> =
								      call 'erlang':'is_integer'
									  (I2)
								  in  call 'erlang':'and'
									  (_44, _45) ->
							    'ok'
							%% Line 380
							<{K,V}> when 'true' ->
							    call 'erlang':'put'
								(K, V)
							( <_47> when 'true' ->
							      primop 'match_fail'
								  ({'function_clause',_47})
							  -| ['compiler_generated'] )
						      end
					      in  let <_43> =
						      call %% Line 381
							   'erlang':%% Line 381
								    'erase'
							  ()
						  in  do  %% Line 379
							  call 'lists':'foreach'
							      (_48, _43)
							  let <Zero> =
							      apply %% Line 385
								    'seg_zero'/0
								  ()
							  in  let <_50> =
								  apply %% Line 386
									'no_parts'/1
								      (_13)
							      in  %% Line 386
								  case apply 'init_parts'/5
									   (Head0, 0, _50, Zero, []) of
								    <{Head1,Ws1}> when 'true' ->
									let <NoSegs> =
									    apply %% Line 387
										  'no_segs'/1
										(_13)
									in  %% Line 389
									    case apply 'init_segments'/6
										     (Head1, 0, NoSegs, Zero, [], []) of
									      <{Head2,WsI,WsP}> when 'true' ->
										  let <_54> =
										      case <> of
											%% Line 391
											<>
											    when ( call 'erlang':'=:='
												    (_10,
												     'true')
												-| ['compiler_generated'] ) ->
											    call 'erlang':'++'
												(WsP, WsI)
											%% Line 392
											<> when 'true' ->
											    WsP
										      end
										  in  let <_56> =
											  call %% Line 394
											       'lists':%% Line 394
												       'append'
											      (%% Line 394
											       Ws1)
										      in  let <_57> =
											      call %% Line 394
												   'erlang':%% Line 394
													    '++'
												  (_56, _54)
											  in  do  %% Line 394
												  call 'dets_utils':'pwrite'
												      (_0, _2, [W0|_57])
												  %% Line 395
												  case apply 'hash_invars'/1
													   (Head2) of
												    <'true'> when 'true' ->
													%% Line 400
													case call 'dets_utils':'alloc'
														 (Head2, 16) of
													  <{_83,Where,_84}> when 'true' ->
													      let <NewFtab> =
														  call %% Line 401
														       'dets_utils':%% Line 401
																    'init_alloc'
														      (%% Line 401
														       Where)
													      in  %% Line 402
														  case Head2 of
														    <{'head',_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113}> when 'true' ->
															let <_62> =
															    call 'erlang':'setelement'
																(30, Head2, Where)
															in  let <_64> =
																call 'erlang':'setelement'
																    (12, _62, NewFtab)
															    in  %% Line 403
																{'ok',_64}
														    ( <_114> when 'true' ->
															  ( call ( 'erlang'
																   -| ['compiler_generated'] ):( 'error'
																				 -| ['compiler_generated'] )
																(( {'badrecord','head'}
																   -| ['compiler_generated'] ))
															    -| ['compiler_generated'] )
														      -| ['compiler_generated'] )
														  end
													  ( <_59> when 'true' ->
														primop 'match_fail'
														    ({'badmatch',_59})
													    -| ['compiler_generated'] )
													end
												    ( <_58> when 'true' ->
													  primop 'match_fail'
													      ({'badmatch',_58})
												      -| ['compiler_generated'] )
												  end
									      ( <_53> when 'true' ->
										    primop 'match_fail'
											({'badmatch',_53})
										-| ['compiler_generated'] )
									    end
								    ( <_51> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_51})
								      -| ['compiler_generated'] )
								  end
      -| [{'function',{'init_file',17}}] )
'slots2'/1 =
    %% Line 406
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'slots2',1}}] ) of
	      <NoSlots>
		  when call 'erlang':'>='
			(( _0
			   -| [{'function',{'slots2',1}}] ),
			 256) ->
		  let <_1> =
		      call %% Line 407
			   'dets_utils':%% Line 407
					'log2'
			  (%% Line 407
			   NoSlots)
		  in  %% Line 407
		      call 'erlang':'bsl'
			  (1, _1)
	      ( <_2> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_2})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'slots2',1}}] )
      -| [{'function',{'slots2',1}}] )
'init_parts'/5 =
    %% Line 409
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <Head,PartNo,NoParts,Zero,Ws>
		  when call 'erlang':'<'
			(PartNo,
			 NoParts) ->
		  let <_5> =
		      call %% Line 410
			   'erlang':%% Line 410
				    '*'
			  (%% Line 410
			   4, %% Line 410
			      PartNo)
		  in  let <PartPos> =
			  call %% Line 410
			       'erlang':%% Line 410
					'+'
			      (%% Line 410
			       312, _5)
		      in  %% Line 411
			  case apply 'alloc_part'/3
				   (Head, Zero, PartPos) of
			    <{NewHead,W,_X_Part}> when 'true' ->
				let <_13> =
				    call %% Line 412
					 'erlang':%% Line 412
						  '+'
					(%% Line 412
					 PartNo, %% Line 412
						 1)
				in  %% Line 412
				    apply 'init_parts'/5
					(NewHead, _13, NoParts, Zero, [W|Ws])
			    ( <_12> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_12})
			      -| ['compiler_generated'] )
			  end
	      %% Line 413
	      <Head,_X_PartNo,_X_NoParts,_X_Zero,Ws> when 'true' ->
		  %% Line 414
		  {Head,Ws}
	    end
	    -| [{'function',{'init_parts',5}}] )
      -| [{'function',{'init_parts',5}}] )
'init_segments'/6 =
    %% Line 418
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  ( case <_0,_1,_2,_3,_4,_5> of
	      <Head,SegNo,NoSegs,SegZero,WsP,WsI>
		  when call 'erlang':'<'
			(SegNo,
			 NoSegs) ->
		  %% Line 419
		  case apply 'allocate_segment'/3
			   (Head, SegZero, SegNo) of
		    <{NewHead,WI,Ws}> when 'true' ->
			let <_8> =
			    call %% Line 420
				 'erlang':%% Line 420
					  '+'
				(%% Line 420
				 SegNo, %% Line 420
					1)
			in  let <_7> =
				call %% Line 420
				     'erlang':%% Line 420
					      '++'
				    (%% Line 420
				     Ws, %% Line 420
					 WsP)
			    in  %% Line 420
				apply 'init_segments'/6
				    (NewHead, _8, NoSegs, SegZero, _7, [WI|WsI])
		    ( <_6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_6})
		      -| ['compiler_generated'] )
		  end
	      %% Line 421
	      <Head,_X_SegNo,_X_NoSegs,_X_SegZero,WsP,WsI> when 'true' ->
		  %% Line 422
		  {Head,WsI,WsP}
	    end
	    -| [{'function',{'init_segments',6}}] )
      -| [{'function',{'init_segments',6}}] )
'allocate_segment'/3 =
    %% Line 425
    ( fun (_0,_1,_2) ->
	  let <_3> =
	      call %% Line 426
		   'erlang':%% Line 426
			    'div'
		  (_2, %% Line 426
		       512)
	  in  let <_4> =
		  call %% Line 426
		       'erlang':%% Line 426
				'*'
		      (%% Line 426
		       4, _3)
	      in  let <PartPos> =
		      call %% Line 426
			   'erlang':%% Line 426
				    '+'
			  (%% Line 426
			   312, _4)
		  in  %% Line 427
		      case %% Line 2468
			   ( call ( 'erlang'
				    -| ['compiler_generated'] ):( 'get'
								  -| ['compiler_generated'] )
				 (PartPos)
			     -| ['compiler_generated'] ) of
			%% Line 428
			<'undefined'> when 'true' ->
			    %% Line 430
			    case %% Line 431
				 apply 'alloc_part'/3
				     (_0, _1, PartPos) of
			      <{Head1,[InitArrPart|_@r0 = [ArrPartPointer|[]]],Part}> when 'true' ->
				  %% Line 432
				  case %% Line 433
				       apply 'alloc_seg'/4
					   (Head1, _1, _2, Part) of
				    <{NewHead,InitSegment,[SegPointer|[]]}> when 'true' ->
					%% Line 434
					{NewHead,InitSegment,[InitArrPart|[SegPointer|_@r0]]}
				    ( <_12> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_12})
				      -| ['compiler_generated'] )
				  end
			      ( <_11> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_11})
				-| ['compiler_generated'] )
			    end
			%% Line 435
			<Part> when 'true' ->
			    %% Line 436
			    apply 'alloc_seg'/4
				(_0, _1, _2, Part)
		      end
      -| [{'function',{'allocate_segment',3}}] )
'alloc_part'/3 =
    %% Line 439
    ( fun (_0,_1,_2) ->
	  %% Line 441
	  case call 'dets_utils':'alloc'
		   (_0, %% Line 2475
			( 2047
			  -| ['compiler_generated'] )) of
	    <{NewHead,Part,_12}> when 'true' ->
		do  %% Line 442
		    apply 'arrpart_cache'/2
			(_2, Part)
		    let <InitArrPart> = {%% Line 443
			 Part,_1}
		    in  let <_7> =
			    #{#<%% Line 444
				Part>(%% Line 444
				      32,1,'integer',['unsigned'|['big']])}#
			in  let <ArrPartPointer> = {_2,_7}
			    in  %% Line 445
				{NewHead,[InitArrPart|[ArrPartPointer|[]]],Part}
	    ( <_5> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_5})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'alloc_part',3}}] )
'alloc_seg'/4 =
    %% Line 447
    ( fun (_0,_1,_2,_3) ->
	  %% Line 449
	  case call 'dets_utils':'alloc'
		   (_0, %% Line 2475
			( 2047
			  -| ['compiler_generated'] )) of
	    <{NewHead,Segment,_18}> when 'true' ->
		let <InitSegment> = {%% Line 450
		     Segment,_1}
		in  let <_9> =
			call %% Line 451
			     'erlang':%% Line 451
				      'band'
			    (_2, %% Line 451
				 511)
		    in  let <_10> =
			    call %% Line 451
				 'erlang':%% Line 451
					  '*'
				(%% Line 451
				 4, _9)
			in  let <Pos> =
				call %% Line 451
				     'erlang':%% Line 451
					      '+'
				    (_3, _10)
			    in  do  %% Line 2457
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'put'
									   -| ['compiler_generated'] )
					  (Pos, Segment)
				      -| ['compiler_generated'] )
				    do  %% Line 453
					call 'dets_utils':'disk_map_segment'
					    (Segment, _1)
					let <_12> =
					    #{#<%% Line 454
						Segment>(%% Line 454
							 32,1,'integer',['unsigned'|['big']])}#
					in  let <SegPointer> = {%% Line 454
						 Pos,_12}
					    in  %% Line 455
						{NewHead,InitSegment,[SegPointer|[]]}
	    ( <_6> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_6})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'alloc_seg',4}}] )
'init_freelist'/1 =
    %% Line 458
    ( fun (_0) ->
	  %% Line 459
	  ( case ( _0
		   -| [{'function',{'init_freelist',1}}] ) of
	      ( <( {'head',_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_rec2,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32}
		   -| ['compiler_generated'] )> when 'true' ->
		    %% Line 460
		    apply 'free_lists_from_file'/2
			(( _0
			   -| [{'function',{'init_freelist',1}}] ), _rec2)
		-| ['compiler_generated'] )
	      ( <_33> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'init_freelist',1}}] )
'read_file_header'/2 =
    %% Line 463
    ( fun (_0,_1) ->
	  %% Line 464
	  case call 'dets_utils':'pread_close'
		   (_0, _1, 0, 188) of
	    <{'ok',Bin}> when 'true' ->
		%% Line 469
		case Bin of
		  <#{#<FreeList>(32,1,'integer',['unsigned'|['big']]),
		     #<Cookie>(32,1,'integer',['unsigned'|['big']]),
		     #<CP>(32,1,'integer',['unsigned'|['big']]),
		     #<Type2>(32,1,'integer',['unsigned'|['big']]),
		     #<Version>(32,1,'integer',['unsigned'|['big']]),
		     #<M>(32,1,'integer',['unsigned'|['big']]),
		     #<Next>(32,1,'integer',['unsigned'|['big']]),
		     #<Kp>(32,1,'integer',['unsigned'|['big']]),
		     #<NoObjects>(32,1,'integer',['unsigned'|['big']]),
		     #<NoKeys>(32,1,'integer',['unsigned'|['big']]),
		     #<MinNoSlots>(32,1,'integer',['unsigned'|['big']]),
		     #<MaxNoSlots>(32,1,'integer',['unsigned'|['big']]),
		     #<HashMethod>(32,1,'integer',['unsigned'|['big']]),
		     #<N>(32,1,'integer',['unsigned'|['big']]),
		     #<NoCollsB>(112,8,'binary',['unsigned'|['big']]),
		     #<MD5>(16,8,'binary',['unsigned'|['big']]),
		     #<FlBase>(32,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		      %% Line 471
		      case Bin of
			<#{#<_40>(12,8,'binary',['unsigned'|['big']]),
			   #<MD5DigestedPart>(156,8,'binary',['unsigned'|['big']]),
			   #<_41>(( 'all'
				    -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
			    %% Line 472
			    case call 'dets_utils':'position_close'
				     (_0, _1, 'eof') of
			      <{'ok',EOF}> when 'true' ->
				  let <_10> =
				      call %% Line 473
					   'erlang':%% Line 473
						    '-'
					  (%% Line 473
					   EOF, %% Line 473
						4)
				  in  %% Line 473
				      case call 'dets_utils':'pread_close'
					       (_0, _1, _10, 4) of
					<{'ok',#{#<FileSize>(32,1,'integer',['unsigned'|['big']])}#}> when 'true' ->
					    let <_18> =
						fun (_15,_14) ->
						    %% Line 474
						    case <_15,_14> of
						      <LSz,{Acc,#{#<NN>(32,1,'integer',['unsigned'|['big']]),
								  #<R>(( 'all'
									 -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#}> when 'true' ->
							  %% Line 475
							  case <> of
							    %% Line 476
							    <>
								when call 'erlang':'=:='
								      (NN,
								       0) ->
								{Acc,R}
							    %% Line 477
							    <> when 'true' ->
								{[{LSz,NN}|Acc],R}
							  end
						      ( <_17,_16> when 'true' ->
							    primop 'match_fail'
								({'function_clause',_17,_16})
							-| ['compiler_generated'] )
						    end
					    in  let <_13> =
						    call %% Line 479
							 'lists':%% Line 479
								 'seq'
							(%% Line 479
							 4, %% Line 479
							    31)
						in  %% Line 474
						    case call 'lists':'foldl'
							     (_18, %% Line 479
								   {[],NoCollsB}, _13) of
						      <{CL,#{}#}> when 'true' ->
							  let <_22> =
							      case <> of
								%% Line 482
								<>
								    when let <_20> =
									  call 'erlang':'=:='
									      (CL, [])
								      in  let <_21> =
									      call 'erlang':'>'
										  (NoObjects, 0)
									  in  call 'erlang':'and'
										  (_20, _21) ->
								    %% Line 483
								    'undefined'
								%% Line 484
								<> when 'true' ->
								    %% Line 485
								    call 'lists':'reverse'
									(CL)
							      end
							  in  let <_31> =
								  case %% Line 487
								       FlBase of
								    %% Line 488
								    <0> when 'true' ->
									1336
								    %% Line 489
								    <_42> when 'true' ->
									FlBase
								  end
							      in  let <_36> =
								      call %% Line 495
									   'dets_utils':%% Line 495
											'code_to_type'
									  (%% Line 495
									   Type2)
								  in  let <_35> =
									  call %% Line 507
									       'erlang':%% Line 507
											'=/='
									      (%% Line 507
									       #{#<0>(8,1,'integer',['unsigned'|['big']]),
										 #<0>(8,1,'integer',['unsigned'|['big']]),
										 #<0>(8,1,'integer',['unsigned'|['big']]),
										 #<0>(8,1,'integer',['unsigned'|['big']]),
										 #<0>(8,1,'integer',['unsigned'|['big']]),
										 #<0>(8,1,'integer',['unsigned'|['big']]),
										 #<0>(8,1,'integer',['unsigned'|['big']]),
										 #<0>(8,1,'integer',['unsigned'|['big']]),
										 #<0>(8,1,'integer',['unsigned'|['big']]),
										 #<0>(8,1,'integer',['unsigned'|['big']]),
										 #<0>(8,1,'integer',['unsigned'|['big']]),
										 #<0>(8,1,'integer',['unsigned'|['big']]),
										 #<0>(8,1,'integer',['unsigned'|['big']]),
										 #<0>(8,1,'integer',['unsigned'|['big']]),
										 #<0>(8,1,'integer',['unsigned'|['big']]),
										 #<0>(8,1,'integer',['unsigned'|['big']])}#, %% Line 507
															     MD5)
								      in  let <_34> =
									      call %% Line 508
										   'erlang':%% Line 508
											    'md5'
										  (%% Line 508
										   MD5DigestedPart)
									  in  let <_33> =
										  call %% Line 509
										       'erlang':%% Line 509
												'+'
										      (%% Line 509
										       FileSize, %% Line 509
												 FlBase)
									      in  let <FH> =
										      {%% Line 491
										       'fileheader',%% Line 491
												    FreeList,_31,%% Line 493
														 Cookie,%% Line 494
															CP,_36,%% Line 496
															       Version,%% Line 497
																       M,%% Line 498
																	 Next,%% Line 499
																	      Kp,%% Line 500
																		 NoObjects,%% Line 501
																			   NoKeys,%% Line 502
																				  MinNoSlots,%% Line 503
																					     MaxNoSlots,_22,%% Line 505
																							    HashMethod,%% Line 506
																								       MD5,_35,_34,_33,%% Line 510
																										       EOF,%% Line 511
																											   N}
										  in  %% Line 512
										      {'ok',_0,FH}
						      ( <_19> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_19})
							-| ['compiler_generated'] )
						    end
					( <_11> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_11})
					  -| ['compiler_generated'] )
				      end
			      ( <_9> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_9})
				-| ['compiler_generated'] )
			    end
			( <_8> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_8})
			  -| ['compiler_generated'] )
		      end
		  ( <_7> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_7})
		    -| ['compiler_generated'] )
		end
	    ( <_6> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_6})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'read_file_header',2}}] )
'check_file_header'/2 =
    %% Line 515
    ( fun (_0,_1) ->
	  %% Line 516
	  ( case _0 of
	      ( <( {'fileheader',_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_rec3,_104,_105,_106,_107,_108,_109}
		   -| ['compiler_generated'] )> when 'true' ->
		    let <HashBif> =
			apply 'code_to_hash_method'/1
			    (_rec3)
		    in  let <_52> =
			    case <> of
			      %% Line 519
			      <>
				  when ( try
					  ( let <_7> =
						case ( call ( 'erlang'
							      -| ['compiler_generated'] ):( 'is_record'
											    -| ['compiler_generated'] )
							   (_0, ( 'fileheader'
								  -| ['compiler_generated'] ), ( 22
												 -| ['compiler_generated'] ))
						       -| ['compiler_generated'] ) of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							( 'true'
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							( 'fail'
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( _5
						       -| ['compiler_generated'] )> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {( 'badarg'
								    -| ['compiler_generated'] ),( _5
												  -| ['compiler_generated'] )}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					    in  let <_8> =
						    call 'erlang':'=:='
							(( _7
							   -| ['compiler_generated'] ), 'true')
						in  let <_9> =
							call 'erlang':'element'
							    (4, _0)
						    in  let <_10> =
							    call 'erlang':'=/='
								(_9, 11259375)
							in  ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'and'
												   -| ['compiler_generated'] )
								  (_8, _10)
							      -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false'
				      -| ['compiler_generated'] ) ->
				  %% Line 520
				  {'error','not_a_dets_file'}
			      %% Line 521
			      <>
				  when ( try
					  ( let <_13> =
						case ( call ( 'erlang'
							      -| ['compiler_generated'] ):( 'is_record'
											    -| ['compiler_generated'] )
							   (_0, ( 'fileheader'
								  -| ['compiler_generated'] ), ( 22
												 -| ['compiler_generated'] ))
						       -| ['compiler_generated'] ) of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							( 'true'
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							( 'fail'
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( _11
						       -| ['compiler_generated'] )> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {( 'badarg'
								    -| ['compiler_generated'] ),( _11
												  -| ['compiler_generated'] )}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					    in  let <_14> =
						    call 'erlang':'=:='
							(( _13
							   -| ['compiler_generated'] ), 'true')
						in  let <_15> =
							call 'erlang':'element'
							    (6, _0)
						    in  let <_16> =
							    call 'erlang':'=:='
								(_15, 'badtype')
							in  ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'and'
												   -| ['compiler_generated'] )
								  (_14, _16)
							      -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false'
				      -| ['compiler_generated'] ) ->
				  %% Line 522
				  {'error','invalid_type_code'}
			      %% Line 523
			      <>
				  when ( try
					  ( let <_19> =
						case ( call ( 'erlang'
							      -| ['compiler_generated'] ):( 'is_record'
											    -| ['compiler_generated'] )
							   (_0, ( 'fileheader'
								  -| ['compiler_generated'] ), ( 22
												 -| ['compiler_generated'] ))
						       -| ['compiler_generated'] ) of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							( 'true'
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							( 'fail'
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( _17
						       -| ['compiler_generated'] )> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {( 'badarg'
								    -| ['compiler_generated'] ),( _17
												  -| ['compiler_generated'] )}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					    in  let <_20> =
						    call 'erlang':'=:='
							(( _19
							   -| ['compiler_generated'] ), 'true')
						in  let <_21> =
							call 'erlang':'element'
							    (7, _0)
						    in  let <_22> =
							    call 'erlang':'=/='
								(_21, 9)
							in  ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'and'
												   -| ['compiler_generated'] )
								  (_20, _22)
							      -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false'
				      -| ['compiler_generated'] ) ->
				  %% Line 524
				  {'error','bad_version'}
			      %% Line 525
			      <>
				  when ( try
					  ( let <_25> =
						case ( call ( 'erlang'
							      -| ['compiler_generated'] ):( 'is_record'
											    -| ['compiler_generated'] )
							   (_0, ( 'fileheader'
								  -| ['compiler_generated'] ), ( 22
												 -| ['compiler_generated'] ))
						       -| ['compiler_generated'] ) of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							( 'true'
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							( 'fail'
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( _23
						       -| ['compiler_generated'] )> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {( 'badarg'
								    -| ['compiler_generated'] ),( _23
												  -| ['compiler_generated'] )}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					    in  let <_26> =
						    call 'erlang':'=:='
							(( _25
							   -| ['compiler_generated'] ), 'true')
						in  let <_27> =
							call 'erlang':'element'
							    (18, _0)
						    in  let <_28> =
							    call 'erlang':'=:='
								(_27, 'true')
							in  let <_29> =
								call ( 'erlang'
								       -| ['compiler_generated'] ):( 'and'
												     -| ['compiler_generated'] )
								    (_26, _28)
							    in  let <_31> =
								    call %% Line 526
									 'erlang':%% Line 526
										  'element'
									(%% Line 526
									 17, _0)
								in  let <_30> =
									call %% Line 526
									     'erlang':%% Line 526
										      'element'
									    (%% Line 526
									     19, _0)
								    in  let <_32> =
									    call %% Line 526
										 'erlang':%% Line 526
											  '=/='
										(_31, _30)
									in  ( call ( 'erlang'
										     -| ['compiler_generated'] ):( 'and'
														   -| ['compiler_generated'] )
										  (_29, _32)
									      -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false'
				      -| ['compiler_generated'] ) ->
				  %% Line 527
				  {'error','not_a_dets_file'}
			      %% Line 528
			      <>
				  when ( try
					  ( let <_35> =
						case ( call ( 'erlang'
							      -| ['compiler_generated'] ):( 'is_record'
											    -| ['compiler_generated'] )
							   (_0, ( 'fileheader'
								  -| ['compiler_generated'] ), ( 22
												 -| ['compiler_generated'] ))
						       -| ['compiler_generated'] ) of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							( 'true'
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							( 'fail'
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( _33
						       -| ['compiler_generated'] )> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {( 'badarg'
								    -| ['compiler_generated'] ),( _33
												  -| ['compiler_generated'] )}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					    in  let <_36> =
						    call 'erlang':'=:='
							(( _35
							   -| ['compiler_generated'] ), 'true')
						in  let <_38> =
							call 'erlang':'element'
							    (20, _0)
						    in  let <_37> =
							    call 'erlang':'element'
								(21, _0)
							in  let <_39> =
								call 'erlang':'=/='
								    (_38, _37)
							    in  ( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'and'
												       -| ['compiler_generated'] )
								      (_36, _39)
								  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false'
				      -| ['compiler_generated'] ) ->
				  %% Line 529
				  {'error','not_closed'}
			      %% Line 530
			      <>
				  when call 'erlang':'=:='
					(HashBif,
					 'undefined') ->
				  %% Line 531
				  {'error','bad_hash_bif'}
			      %% Line 532
			      <>
				  when ( try
					  ( let <_42> =
						case ( call ( 'erlang'
							      -| ['compiler_generated'] ):( 'is_record'
											    -| ['compiler_generated'] )
							   (_0, ( 'fileheader'
								  -| ['compiler_generated'] ), ( 22
												 -| ['compiler_generated'] ))
						       -| ['compiler_generated'] ) of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							( 'true'
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							( 'fail'
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( _40
						       -| ['compiler_generated'] )> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {( 'badarg'
								    -| ['compiler_generated'] ),( _40
												  -| ['compiler_generated'] )}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					    in  let <_43> =
						    call 'erlang':'=:='
							(( _42
							   -| ['compiler_generated'] ), 'true')
						in  let <_44> =
							call 'erlang':'element'
							    (5, _0)
						    in  let <_45> =
							    call 'erlang':'=:='
								(_44, 1)
							in  ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'and'
												   -| ['compiler_generated'] )
								  (_43, _45)
							      -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false'
				      -| ['compiler_generated'] ) ->
				  %% Line 533
				  'ok'
			      %% Line 534
			      <>
				  when ( try
					  ( let <_48> =
						case ( call ( 'erlang'
							      -| ['compiler_generated'] ):( 'is_record'
											    -| ['compiler_generated'] )
							   (_0, ( 'fileheader'
								  -| ['compiler_generated'] ), ( 22
												 -| ['compiler_generated'] ))
						       -| ['compiler_generated'] ) of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							( 'true'
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							( 'fail'
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( _46
						       -| ['compiler_generated'] )> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {( 'badarg'
								    -| ['compiler_generated'] ),( _46
												  -| ['compiler_generated'] )}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					    in  let <_49> =
						    call 'erlang':'=:='
							(( _48
							   -| ['compiler_generated'] ), 'true')
						in  let <_50> =
							call 'erlang':'element'
							    (5, _0)
						    in  let <_51> =
							    call 'erlang':'=:='
								(_50, 0)
							in  ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'and'
												   -| ['compiler_generated'] )
								  (_49, _51)
							      -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false'
				      -| ['compiler_generated'] ) ->
				  %% Line 535
				  {'error','not_closed'}
			      %% Line 536
			      <> when 'true' ->
				  %% Line 537
				  {'error','not_a_dets_file'}
			    end
			in  %% Line 539
			    case _52 of
			      %% Line 540
			      <'ok'> when 'true' ->
				  %% Line 541
				  ( case _0 of
				      ( <( {'fileheader',_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_rec4,_124,_125,_126,_127,_128,_129,_130}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <MaxObjSize> =
						case _rec4 of
						  %% Line 570
						  ( <( NoColls = ( 'undefined'
								   -| ['compiler_generated'] )
						       -| ['compiler_generated'] )> when ( 'true'
											   -| ['compiler_generated'] ) ->
							%% Line 571
							NoColls
						    -| ['compiler_generated'] )
						  %% Line 572
						  ( <NoColls> when ( 'true'
								     -| ['compiler_generated'] ) ->
							%% Line 573
							( apply 'max_objsize'/2
							      (NoColls, ( 0
									  -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					    in  %% Line 543
						( case _0 of
						    ( <( {'fileheader',_132,_133,_134,_135,_136,_137,_rec5,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151}
							 -| ['compiler_generated'] )> when 'true' ->
							  %% Line 544
							  ( case _0 of
							      ( <( {'fileheader',_153,_154,_155,_156,_157,_158,_rec6,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_171,_172}
								   -| ['compiler_generated'] )> when 'true' ->
								    let <_83> =
									call 'erlang':'*'
									    (_rec6, 2)
								    in  %% Line 545
									( case _0 of
									    ( <( {'fileheader',_174,_175,_176,_177,_178,_179,_180,_rec7,_181,_182,_183,_184,_185,_186,_187,_188,_189,_190,_191,_192,_193}
										 -| ['compiler_generated'] )> when 'true' ->
										  %% Line 547
										  ( case _0 of
										      ( <( {'fileheader',_195,_196,_197,_198,_199,_200,_201,_202,_203,_rec8,_204,_205,_206,_207,_208,_209,_210,_211,_212,_213,_214}
											   -| ['compiler_generated'] )> when 'true' ->
											    %% Line 548
											    ( case _0 of
												( <( {'fileheader',_216,_217,_218,_219,_220,_221,_222,_223,_224,_225,_rec9,_226,_227,_228,_229,_230,_231,_232,_233,_234,_235}
												     -| ['compiler_generated'] )> when 'true' ->
												      %% Line 550
												      ( case _0 of
													  ( <( {'fileheader',_237,_238,_239,_240,_241,_242,_243,_244,_245,_246,_247,_248,_249,_250,_251,_252,_253,_254,_255,_256,_rec10}
													       -| ['compiler_generated'] )> when 'true' ->
														%% Line 551
														( case _0 of
														    ( <( {'fileheader',_258,_259,_260,_261,_rec11,_262,_263,_264,_265,_266,_267,_268,_269,_270,_271,_272,_273,_274,_275,_276,_277}
															 -| ['compiler_generated'] )> when 'true' ->
															  %% Line 558
															  ( case _0 of
															      ( <( {'fileheader',_279,_280,_281,_282,_283,_284,_285,_286,_rec12,_287,_288,_289,_290,_291,_292,_293,_294,_295,_296,_297,_298}
																   -| ['compiler_generated'] )> when 'true' ->
																    ( case _0 of
																	( <( {'fileheader',_rec13,_300,_301,_302,_303,_304,_305,_306,_307,_308,_309,_310,_311,_312,_313,_314,_315,_316,_317,_318,_319}
																	     -| ['compiler_generated'] )> when 'true' ->
																	      %% Line 561
																	      ( case _0 of
																		  ( <( {'fileheader',_321,_322,_323,_324,_325,_326,_327,_328,_329,_330,_331,_332,_333,_rec14,_334,_335,_336,_337,_338,_339,_340}
																		       -| ['compiler_generated'] )> when 'true' ->
																			( case _0 of
																			    ( <( {'fileheader',_342,_343,_344,_345,_346,_347,_348,_349,_350,_351,_352,_353,_354,_355,_356,_357,_rec15,_358,_359,_360,_361}
																				 -| ['compiler_generated'] )> when 'true' ->
																				  ( case _0 of
																				      ( <( {'fileheader',_363,_364,_365,_366,_367,_368,_369,_370,_371,_372,_373,_rec16,_374,_375,_376,_377,_378,_379,_380,_381,_382}
																					   -| ['compiler_generated'] )> when 'true' ->
																					    ( case _0 of
																						( <( {'fileheader',_384,_385,_386,_387,_388,_389,_390,_391,_392,_393,_394,_395,_rec17,_396,_397,_398,_399,_400,_401,_402,_403}
																						     -| ['compiler_generated'] )> when 'true' ->
																						      %% Line 563
																						      ( case _0 of
																							  ( <( {'fileheader',_405,_rec18,_406,_407,_408,_409,_410,_411,_412,_413,_414,_415,_416,_417,_418,_419,_420,_421,_422,_423,_424}
																							       -| ['compiler_generated'] )> when 'true' ->
																								let <H> =
																								    {'head',_rec5,_83,_rec7,_1,_rec8,_rec9,MaxObjSize,_rec10,_rec11,_rec12,'undefined',_rec13,_rec14,'infinity','saved','false',HashBif,_rec15,_rec16,_rec17,'undefined','undefined','read_write','false','undefined','undefined','undefined',16,_rec18}
																								in  %% Line 564
																								    {'ok',H}
																							    -| ['compiler_generated'] )
																							  ( <_425> when 'true' ->
																								( call ( 'erlang'
																									 -| ['compiler_generated'] ):( 'error'
																												       -| ['compiler_generated'] )
																								      (( {'badrecord','fileheader'}
																									 -| ['compiler_generated'] ))
																								  -| ['compiler_generated'] )
																							    -| ['compiler_generated'] )
																							end
																							-| ['compiler_generated'] )
																						  -| ['compiler_generated'] )
																						( <_404> when 'true' ->
																						      ( call ( 'erlang'
																							       -| ['compiler_generated'] ):( 'error'
																											     -| ['compiler_generated'] )
																							    (( {'badrecord','fileheader'}
																							       -| ['compiler_generated'] ))
																							-| ['compiler_generated'] )
																						  -| ['compiler_generated'] )
																					      end
																					      -| ['compiler_generated'] )
																					-| ['compiler_generated'] )
																				      ( <_383> when 'true' ->
																					    ( call ( 'erlang'
																						     -| ['compiler_generated'] ):( 'error'
																										   -| ['compiler_generated'] )
																						  (( {'badrecord','fileheader'}
																						     -| ['compiler_generated'] ))
																					      -| ['compiler_generated'] )
																					-| ['compiler_generated'] )
																				    end
																				    -| ['compiler_generated'] )
																			      -| ['compiler_generated'] )
																			    ( <_362> when 'true' ->
																				  ( call ( 'erlang'
																					   -| ['compiler_generated'] ):( 'error'
																									 -| ['compiler_generated'] )
																					(( {'badrecord','fileheader'}
																					   -| ['compiler_generated'] ))
																				    -| ['compiler_generated'] )
																			      -| ['compiler_generated'] )
																			  end
																			  -| ['compiler_generated'] )
																		    -| ['compiler_generated'] )
																		  ( <_341> when 'true' ->
																			( call ( 'erlang'
																				 -| ['compiler_generated'] ):( 'error'
																							       -| ['compiler_generated'] )
																			      (( {'badrecord','fileheader'}
																				 -| ['compiler_generated'] ))
																			  -| ['compiler_generated'] )
																		    -| ['compiler_generated'] )
																		end
																		-| ['compiler_generated'] )
																	  -| ['compiler_generated'] )
																	( <_320> when 'true' ->
																	      ( call ( 'erlang'
																		       -| ['compiler_generated'] ):( 'error'
																						     -| ['compiler_generated'] )
																		    (( {'badrecord','fileheader'}
																		       -| ['compiler_generated'] ))
																		-| ['compiler_generated'] )
																	  -| ['compiler_generated'] )
																      end
																      -| ['compiler_generated'] )
																-| ['compiler_generated'] )
															      ( <_299> when 'true' ->
																    ( call ( 'erlang'
																	     -| ['compiler_generated'] ):( 'error'
																					   -| ['compiler_generated'] )
																	  (( {'badrecord','fileheader'}
																	     -| ['compiler_generated'] ))
																      -| ['compiler_generated'] )
																-| ['compiler_generated'] )
															    end
															    -| ['compiler_generated'] )
														      -| ['compiler_generated'] )
														    ( <_278> when 'true' ->
															  ( call ( 'erlang'
																   -| ['compiler_generated'] ):( 'error'
																				 -| ['compiler_generated'] )
																(( {'badrecord','fileheader'}
																   -| ['compiler_generated'] ))
															    -| ['compiler_generated'] )
														      -| ['compiler_generated'] )
														  end
														  -| ['compiler_generated'] )
													    -| ['compiler_generated'] )
													  ( <_257> when 'true' ->
														( call ( 'erlang'
															 -| ['compiler_generated'] ):( 'error'
																		       -| ['compiler_generated'] )
														      (( {'badrecord','fileheader'}
															 -| ['compiler_generated'] ))
														  -| ['compiler_generated'] )
													    -| ['compiler_generated'] )
													end
													-| ['compiler_generated'] )
												  -| ['compiler_generated'] )
												( <_236> when 'true' ->
												      ( call ( 'erlang'
													       -| ['compiler_generated'] ):( 'error'
																	     -| ['compiler_generated'] )
													    (( {'badrecord','fileheader'}
													       -| ['compiler_generated'] ))
													-| ['compiler_generated'] )
												  -| ['compiler_generated'] )
											      end
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										      ( <_215> when 'true' ->
											    ( call ( 'erlang'
												     -| ['compiler_generated'] ):( 'error'
																   -| ['compiler_generated'] )
												  (( {'badrecord','fileheader'}
												     -| ['compiler_generated'] ))
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										    end
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									    ( <_194> when 'true' ->
										  ( call ( 'erlang'
											   -| ['compiler_generated'] ):( 'error'
															 -| ['compiler_generated'] )
											(( {'badrecord','fileheader'}
											   -| ['compiler_generated'] ))
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									  end
									  -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      ( <_173> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','fileheader'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <_152> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','fileheader'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <_131> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','fileheader'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 565
			      <Error> when 'true' ->
				  %% Line 566
				  Error
			    end
		-| ['compiler_generated'] )
	      ( <_110> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','fileheader'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'check_file_header',2}}] )
'max_objsize'/1 =
    %% Line 570
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'max_objsize',1}}] ) of
	      <NoColls = 'undefined'> when 'true' ->
		  %% Line 571
		  NoColls
	      %% Line 572
	      <NoColls> when 'true' ->
		  %% Line 573
		  apply 'max_objsize'/2
		      (NoColls, 0)
	    end
	    -| [{'function',{'max_objsize',1}}] )
      -| [{'function',{'max_objsize',1}}] )
'max_objsize'/2 =
    %% Line 575
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <[],Max> when 'true' ->
		  %% Line 576
		  Max
	      %% Line 577
	      <[{_4,0}|L],Max> when 'true' ->
		  %% Line 578
		  apply 'max_objsize'/2
		      (L, Max)
	      %% Line 579
	      <[{I,_5}|L],_X_Max> when 'true' ->
		  %% Line 580
		  apply 'max_objsize'/2
		      (L, I)
	      ( <_3,_2> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_3,_2})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'max_objsize',2}}] )
      -| [{'function',{'max_objsize',2}}] )
'cache_segps'/3 =
    %% Line 582
    ( fun (_0,_1,_2) ->
	  let <NoParts> =
	      apply %% Line 583
		    'no_parts'/1
		  (_2)
	  in  let <_11> =
		  call %% Line 585
		       'erlang':%% Line 585
				'*'
		      (%% Line 585
		       4, %% Line 585
			  NoParts)
	      in  %% Line 585
		  case call 'dets_utils':'pread_close'
			   (_0, _1, 312, _11) of
		    <{'ok',Bin}> when 'true' ->
			%% Line 586
			apply 'cache_arrparts'/4
			    (Bin, 312, _0, _1)
		    ( <_12> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_12})
		      -| ['compiler_generated'] )
		  end
      -| [{'function',{'cache_segps',3}}] )
'cache_arrparts'/4 =
    %% Line 588
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <#{#<ArrPartPos>(32,1,'integer',['unsigned'|['big']]),
		 #<B>(( 'all'
			-| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Pos,Fd,FileName> when 'true' ->
		  do  %% Line 589
		      apply 'arrpart_cache'/2
			  (Pos, ArrPartPos)
		      %% Line 590
		      case call 'dets_utils':'pread_close'
			       (Fd, FileName, %% Line 591
					      ArrPartPos, %% Line 592
							  2048) of
			<{'ok',ArrPartBin}> when 'true' ->
			    do  %% Line 593
				apply 'cache_segps1'/3
				    (Fd, ArrPartBin, ArrPartPos)
				let <_6> =
				    call %% Line 594
					 'erlang':%% Line 594
						  '+'
					(%% Line 594
					 Pos, %% Line 594
					      4)
				in  %% Line 594
				    apply 'cache_arrparts'/4
					(B, _6, Fd, FileName)
			( <_5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_5})
			  -| ['compiler_generated'] )
		      end
	      %% Line 595
	      <#{}#,_X_Pos,_X_Fd,_X_FileName> when 'true' ->
		  %% Line 596
		  'ok'
	      ( <_10,_9,_8,_7> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_10,_9,_8,_7})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'cache_arrparts',4}}] )
      -| [{'function',{'cache_arrparts',4}}] )
'cache_segps1'/3 =
    %% Line 598
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <_X_Fd,#{#<0>(32,1,'integer',['unsigned'|['big']]),
		       #<_7>(( 'all'
			       -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,_X_P> when 'true' ->
		  %% Line 599
		  'ok'
	      %% Line 600
	      <Fd,#{#<S>(32,1,'integer',['unsigned'|['big']]),
		    #<B>(( 'all'
			   -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,P> when 'true' ->
		  do  %% Line 601
		      call 'dets_utils':'disk_map_segment_p'
			  (Fd, S)
		      do  %% Line 2457
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'put'
								 -| ['compiler_generated'] )
				(P, S)
			    -| ['compiler_generated'] )
			  let <_3> =
			      call %% Line 603
				   'erlang':%% Line 603
					    '+'
				  (%% Line 603
				   P, %% Line 603
				      4)
			  in  %% Line 603
			      apply 'cache_segps1'/3
				  (Fd, B, _3)
	      %% Line 604
	      <_X_Fd,#{}#,_X_P> when 'true' ->
		  %% Line 605
		  'ok'
	      ( <_6,_5,_4> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_6,_5,_4})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'cache_segps1',3}}] )
      -| [{'function',{'cache_segps1',3}}] )
'no_parts'/1 =
    %% Line 607
    ( fun (_0) ->
	  let <_2> =
	      call %% Line 608
		   'erlang':%% Line 608
			    '-'
		  (( _0
		     -| [{'function',{'no_parts',1}}] ), %% Line 608
							 1)
	  in  let <_3> =
		  call %% Line 608
		       'erlang':%% Line 608
				'div'
		      (_2, %% Line 608
			   131072)
	      in  %% Line 608
		  call 'erlang':'+'
		      (_3, 1)
      -| [{'function',{'no_parts',1}}] )
'no_segs'/1 =
    %% Line 610
    ( fun (_0) ->
	  let <_1> =
	      call %% Line 611
		   'erlang':%% Line 611
			    '-'
		  (( _0
		     -| [{'function',{'no_segs',1}}] ), %% Line 611
							1)
	  in  let <_2> =
		  call %% Line 611
		       'erlang':%% Line 611
				'div'
		      (_1, %% Line 611
			   256)
	      in  %% Line 611
		  call 'erlang':'+'
		      (_2, 1)
      -| [{'function',{'no_segs',1}}] )
'bulk_input'/3 =
    %% Line 621
    ( fun (_0,_1,_2) ->
	  let <_3> =
	      call %% Line 622
		   'erlang':%% Line 622
			    'make_ref'
		  ()
	  in  %% Line 622
	      apply 'bulk_input'/4
		  (_0, _1, _3, 0)
      -| [{'function',{'bulk_input',3}}] )
'bulk_input'/4 =
    %% Line 624
    ( fun (_0,_1,_2,_3) ->
	  %% Line 625
	  ( fun (_19) ->
		case _19 of
		  <'close'> when 'true' ->
		      catch
			  %% Line 626
			  apply _1
			      (( 'close'
				 -| ['result_not_wanted'] ))
		  %% Line 627
		  <'read'> when 'true' ->
		      let <_7> =
			  catch
			      let <_6> =
				  apply _1
				      (%% Line 628
				       'read')
			      in  %% Line 628
				  {_2,_6}
		      in  %% Line 628
			  case _7 of
			    %% Line 629
			    <{_25,'end_of_input'}>
				when call 'erlang':'=:='
				      (_25,
				       _2) ->
				%% Line 630
				'end_of_input'
			    %% Line 631
			    <{_26,{L0,NewInitFun}}>
				when let <_27> =
				      call 'erlang':'=:='
					  (_26, _2)
				  in  let <_28> =
					  try
					      let <_8> =
						  call 'erlang':'is_list'
						      (L0)
					      in  let <_9> =
						      call %% Line 632
							   'erlang':%% Line 632
								    'is_function'
							  (%% Line 632
							   NewInitFun)
						  in  call 'erlang':'and'
							  (_8, _9)
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      'false'
				      in  call 'erlang':'and'
					      (_27, _28) ->
				%% Line 633
				( case _0 of
				    ( <( {'head',_29,_30,_31,_32,_33,_34,_35,_36,_37,_rec19,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_13> =
					      catch
						  %% Line 634
						  apply 'bulk_objects'/5
						      (L0, _0, _rec19, _3, [])
					  in  %% Line 634
					      case _13 of
						%% Line 635
						<{'EXIT',_X_Error}> when 'true' ->
						    do  try
							    %% Line 636
							    apply NewInitFun
								(( 'close'
								   -| ['result_not_wanted'] ))
							of <_catch_value> ->
							    _catch_value
							catch <Class,Reason,Stk> ->
							    'ok'
							%% Line 637
							{'error','invalid_objects_list'}
						%% Line 638
						<{L,NSeq}> when 'true' ->
						    let <_16> =
							apply %% Line 639
							      'bulk_input'/4
							    (_0, %% Line 639
								 NewInitFun, _2, %% Line 639
										 NSeq)
						    in  %% Line 639
							{L,_16}
						( <_17> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_17})
						  -| ['compiler_generated'] )
					      end
				      -| ['compiler_generated'] )
				    ( <_57> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','head'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 641
			    <{_58,Value}>
				when call 'erlang':'=:='
				      (_58,
				       _2) ->
				%% Line 642
				{'error',{'init_fun',Value}}
			    %% Line 643
			    <Error> when 'true' ->
				%% Line 644
				call 'erlang':'throw'
				    ({'thrown',Error})
			  end
		  ( <_20> when 'true' ->
			primop 'match_fail'
			    ({'function_clause',_20})
		    -| ['compiler_generated'] )
		end
	    -| [{'id',{0,0,'-bulk_input/4-fun-0-'}}] )
      -| [{'function',{'bulk_input',4}}] )
'bulk_objects'/5 =
    %% Line 648
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <[T|Ts],Head,Kp,Seq,L> when 'true' ->
		  let <BT> =
		      call %% Line 649
			   'erlang':%% Line 649
				    'term_to_binary'
			  (%% Line 649
			   T)
		  in  let <Key> =
			  call %% Line 650
			       'erlang':%% Line 650
					'element'
			      (%% Line 650
			       Kp, %% Line 650
				   T)
		      in  let <_8> =
			      call %% Line 651
				   'erlang':%% Line 651
					    '+'
				  (%% Line 651
				   Seq, %% Line 651
					1)
			  in  ( let <Slot> =
				    apply %% Line 1548
					  'db_hash'/2
					(%% Line 651
					 Key, %% Line 651
					      Head)
				in  let <_7> =
					#{( #<%% Line 1549
					      Slot>(%% Line 1549
						    ( 32
						      -| ['compiler_generated'] ),( 1
										    -| ['compiler_generated'] ),( 'integer'
														  -| ['compiler_generated'] ),( ['unsigned'|['big']]
																		-| ['compiler_generated'] ))
					    -| ['compiler_generated'] ),
					  ( #<%% Line 651
					      Seq>(%% Line 1549
						   ( 32
						     -| ['compiler_generated'] ),( 1
										   -| ['compiler_generated'] ),( 'integer'
														 -| ['compiler_generated'] ),( ['unsigned'|['big']]
																	       -| ['compiler_generated'] ))
					    -| ['compiler_generated'] ),
					  ( #<%% Line 651
					      BT>(%% Line 1549
						  ( 'all'
						    -| ['compiler_generated'] ),( 8
										  -| ['compiler_generated'] ),( 'binary'
														-| ['compiler_generated'] ),( ['unsigned'|['big']]
																	      -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )}#
				    in  %% Line 651
					apply 'bulk_objects'/5
					    (Ts, Head, Kp, _8, [_7|L])
				-| ['compiler_generated'] )
	      %% Line 652
	      <[],_X_Head,Kp,Seq,L>
		  when let <_9> =
			call 'erlang':'is_integer'
			    (Kp)
		    in  let <_10> =
			    call 'erlang':'is_integer'
				(Seq)
			in  call 'erlang':'and'
				(_9, _10) ->
		  %% Line 653
		  {L,Seq}
	      ( <_15,_14,_13,_12,_11> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_15,_14,_13,_12,_11})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'bulk_objects',5}}] )
      -| [{'function',{'bulk_objects',5}}] )
'output_objs'/3 =
    %% Line 675
    ( fun (_0,_1,_2) ->
	  %% Line 676
	  ( fun (_15) ->
		case _15 of
		  <'close'> when 'true' ->
		      %% Line 681
		      case call 'ets':'insert'
			       (_2, {1,0,[],0}) of
			<'true'> when 'true' ->
			    %% Line 682
			    case call 'ets':'insert'
				     (_2, {'no',0,0}) of
			      <'true'> when 'true' ->
				  let <Fun> =
				      apply %% Line 683
					    'output_objs2'/7
					  (%% Line 683
					   'foo', [], _0, {}, _2, _1, %% Line 684
								      'bar')
				  in  %% Line 685
				      apply Fun
					  ('close')
			      ( <_6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_6})
				-| ['compiler_generated'] )
			    end
			( <_5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_5})
			  -| ['compiler_generated'] )
		      end
		  %% Line 686
		  <[]> when 'true' ->
		      %% Line 687
		      apply 'output_objs'/3
			  (_0, _1, _2)
		  %% Line 688
		  <L> when 'true' ->
		      %% Line 692
		      case call 'ets':'delete_all_objects'
			       (_2) of
			<'true'> when 'true' ->
			    %% Line 693
			    case call 'ets':'insert'
				     (_2, {'no',0,0}) of
			      <'true'> when 'true' ->
				  %% Line 694
				  ( case _0 of
				      ( <( {'head',_20,_21,_22,_23,_24,_25,_26,_27,_28,_rec20,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <Es> =
						apply 'bin2term'/2
						    (L, _rec20)
					    in  %% Line 698
						case apply 'output_slots'/6
							 (Es, _0, {}, _2, 0, 0) of
						  <{NE,NAcc,NCache}> when 'true' ->
						      %% Line 699
						      apply 'output_objs2'/7
							  (NE, NAcc, _0, NCache, _2, _1, 1)
						  ( <_14> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_14})
						    -| ['compiler_generated'] )
						end
					-| ['compiler_generated'] )
				      ( <_48> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','head'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      ( <_9> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_9})
				-| ['compiler_generated'] )
			    end
			( <_8> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_8})
			  -| ['compiler_generated'] )
		      end
		end
	    -| [{'id',{0,0,'-output_objs/3-fun-0-'}}] )
      -| [{'function',{'output_objs',3}}] )
'output_objs2'/7 =
    %% Line 702
    ( fun (_0,_1,_2,_3,_4,_5,_6) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6> of
	      <E,Acc,Head,Cache,SizeT,SlotNums,0> when 'true' ->
		  let <NCache> =
		      apply %% Line 703
			    'write_all_sizes'/4
			  (%% Line 703
			   Cache, %% Line 703
				  SizeT, %% Line 703
					 Head, %% Line 703
					       'more')
		  in  let <_8> =
			  call %% Line 705
			       'erlang':%% Line 705
					'tuple_size'
			      (%% Line 705
			       NCache)
		      in  let <_9> =
			      call %% Line 705
				   'erlang':%% Line 705
					    'min'
				  (_8, %% Line 705
				       10)
			  in  let <Max> =
				  call %% Line 705
				       'erlang':%% Line 705
						'max'
				      (%% Line 705
				       1, _9)
			      in  %% Line 706
				  apply 'output_objs2'/7
				      (E, Acc, Head, NCache, SizeT, SlotNums, Max)
	      %% Line 707
	      <E,Acc,Head,Cache,SizeT,SlotNums,ChunkI> when 'true' ->
		  %% Line 708
		  ( fun (_41) ->
			case _41 of
			  <'close'> when 'true' ->
			      let <_11> =
				  case <> of
				    %% Line 711
				    <>
					when call 'erlang':'=:='
					      (Acc,
					       []) ->
					{'foo',[],Cache}
				    %% Line 712
				    <> when 'true' ->
					apply 'output_slot'/7
					    (Acc, Head, Cache, [], SizeT, 0, 0)
				  end
			      in  %% Line 709
				  case _11 of
				    <{_50,[],Cache1}> when 'true' ->
					do  %% Line 714
					    apply 'write_all_sizes'/4
						(Cache1, SizeT, Head, 'no_more')
					    %% Line 716
					    case call 'dets_utils':'alloc'
						     (Head, %% Line 2475
							    ( 2047
							      -| ['compiler_generated'] )) of
					      <{_51,SegEnd,_52}> when 'true' ->
						  %% Line 717
						  case call 'ets':'lookup'
							   (SizeT, 'no') of
						    <[{'no',NoObjects,NoKeys}|[]]> when 'true' ->
							%% Line 718
							case Head of
							  <{'head',_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81}> when 'true' ->
							      let <_19> =
								  call 'erlang':'setelement'
								      (7, Head, NoKeys)
							      in  let <_21> =
								      call 'erlang':'setelement'
									  (6, _19, NoObjects)
								  in  %% Line 719
								      case call 'ets':'delete'
									       (SizeT, 'no') of
									<'true'> when 'true' ->
									    %% Line 720
									    case apply 'allocate_all_objects'/2
										     (_21, SizeT) of
									      <{NewHead,NL,_X_MaxSz,_X_End}> when 'true' ->
										  do  %% Line 725
										      apply 'segment_file'/4
											  (SizeT, NewHead, NL, SegEnd)
										      %% Line 726
										      case SlotNums of
											<{MinSlots,EstNoSlots,MaxSlots}> when 'true' ->
											    %% Line 727
											    case <> of
											      %% Line 728
											      <>
												  when call 'erlang':'=:='
													(EstNoSlots,
													 'bulk_init') ->
												  %% Line 729
												  {'ok',0,NewHead}
											      %% Line 730
											      <> when 'true' ->
												  let <EstNoSegs> =
												      apply %% Line 731
													    'no_segs'/1
													  (%% Line 731
													   EstNoSlots)
												  in  let <MinNoSegs> =
													  apply %% Line 732
														'no_segs'/1
													      (%% Line 732
													       MinSlots)
												      in  let <MaxNoSegs> =
													      apply %% Line 733
														    'no_segs'/1
														  (%% Line 733
														   MaxSlots)
													  in  let <NoSegs> =
														  apply %% Line 734
															'no_segs'/1
														      (%% Line 734
														       NoKeys)
													      in  let <_30> =
														      call %% Line 735
															   'erlang':%% Line 735
																    '-'
															  (%% Line 735
															   NoSegs, %% Line 735
																   EstNoSegs)
														  in  let <Diff> =
															  call %% Line 735
															       'erlang':%% Line 735
																	'abs'
															      (_30)
														      in  %% Line 736
															  case <> of
															    %% Line 737
															    <>
																when try
																      let <_32> =
																	  call 'erlang':'>'
																	      (Diff, 5)
																      in  let <_33> =
																	      call 'erlang':'=<'
																		  (NoSegs, MaxNoSegs)
																	  in  let <_34> =
																		  call 'erlang':'>='
																		      (NoSegs, MinNoSegs)
																	      in  let <_35> =
																		      call 'erlang':'and'
																			  (_33, _34)
																		  in  call 'erlang':'and'
																			  (_32, _35)
																  of <Try> ->
																      Try
																  catch <T,R> ->
																      'false' ->
																%% Line 738
																{'try_again',NoKeys}
															    %% Line 739
															    <> when 'true' ->
																%% Line 740
																{'ok',0,NewHead}
															  end
											    end
											( <_25> when 'true' ->
											      primop 'match_fail'
												  ({'badmatch',_25})
											  -| ['compiler_generated'] )
										      end
									      ( <_24> when 'true' ->
										    primop 'match_fail'
											({'badmatch',_24})
										-| ['compiler_generated'] )
									    end
									( <_23> when 'true' ->
									      primop 'match_fail'
										  ({'badmatch',_23})
									  -| ['compiler_generated'] )
								      end
							  ( <_82> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','head'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
						    ( <_17> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_17})
						      -| ['compiler_generated'] )
						  end
					      ( <_16> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_16})
						-| ['compiler_generated'] )
					    end
				    ( <_12> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_12})
				      -| ['compiler_generated'] )
				  end
			  %% Line 743
			  <L> when 'true' ->
			      %% Line 744
			      ( case Head of
				  ( <( {'head',_83,_84,_85,_86,_87,_88,_89,_90,_91,_rec22,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110}
				       -| ['compiler_generated'] )> when 'true' ->
					let <Es> =
					    apply 'bin2term'/2
						(L, _rec22)
					in  %% Line 745
					    case %% Line 746
						 apply 'output_slots'/8
						     (E, Es, Acc, Head, Cache, SizeT, 0, 0) of
					      <{NE,NAcc,NCache}> when 'true' ->
						  let <_40> =
						      call %% Line 747
							   'erlang':%% Line 747
								    '-'
							  (%% Line 747
							   ChunkI, %% Line 747
								   1)
						  in  %% Line 747
						      apply 'output_objs2'/7
							  (NE, NAcc, Head, NCache, SizeT, SlotNums, _40)
					      ( <_39> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_39})
						-| ['compiler_generated'] )
					    end
				    -| ['compiler_generated'] )
				  ( <_111> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','head'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-output_objs2/7-fun-0-'}}] )
	    end
	    -| [{'function',{'output_objs2',7}}] )
      -| [{'function',{'output_objs2',7}}] )
'compact_init'/3 =
    %% Line 752
    ( fun (_0,_1,_2) ->
	  let <SizeT> =
	      call %% Line 753
		   'ets':%% Line 753
			 'new'
		  (%% Line 753
		   'dets_compact', %% Line 753
				   [])
	  in  %% Line 754
	      case _0 of
		<{'head',_20,_21,_22,_23,NoObjects,NoKeys,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46}> when 'true' ->
		    %% Line 756
		    ( case _2 of
			( <( {'$hash2',_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_rec23}
			     -| ['compiler_generated'] )> when 'true' ->
			      %% Line 757
			      case %% Line 758
				   apply 'prepare_file_init'/5
				       (NoObjects, NoKeys, _rec23, SizeT, _1) of
				<{NewWriteHead,Bases,SegAddr,SegEnd}> when 'true' ->
				    let <_9> =
					call %% Line 760
					     'erlang':%% Line 760
						      'tuple_size'
					    (%% Line 760
					     Bases)
				    in  let <Input> =
					    apply %% Line 760
						  'compact_input'/4
						(_0, %% Line 760
						     NewWriteHead, %% Line 760
								   SizeT, _9)
					in  let <Output> =
						apply %% Line 761
						      'fast_output'/5
						    (%% Line 761
						     NewWriteHead, %% Line 761
								   SizeT, %% Line 761
									  Bases, %% Line 761
										 SegAddr, %% Line 761
											  SegEnd)
					    in  %% Line 762
						( case NewWriteHead of
						    ( <( {'head',_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_rec24,_82,_83,_84,_85,_86,_87,_88}
							 -| ['compiler_generated'] )> when 'true' ->
							  let <TmpDir> =
							      call 'filename':'dirname'
								  (_rec24)
							  in  let <_15> =
								  catch
								      %% Line 763
								      call 'file_sorter':'sort'
									  (Input, Output, %% Line 764
											  [{'format','binary'}|[{'tmpdir',TmpDir}|%% Line 765
																  [{'header',1}]]])
							      in  do  %% Line 766
								      call 'ets':'delete'
									  (SizeT)
								      _15
						      -| ['compiler_generated'] )
						    ( <_89> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','head'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
				( <_8> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_8})
				  -| ['compiler_generated'] )
			      end
			  -| ['compiler_generated'] )
			( <_60> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','$hash2'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'compact_init',3}}] )
'compact_input'/4 =
    %% Line 769
    ( fun (_0,_1,_2,_3) ->
	  let <L> =
	      call %% Line 770
		   'dets_utils':%% Line 770
				'all_allocated_as_list'
		  (_0)
	  in  let <_6> =
		  call %% Line 771
		       'erlang':%% Line 771
				'-'
		      (_3, %% Line 771
			   0)
	      in  let <_7> =
		      call %% Line 771
			   'lists':%% Line 771
				   'duplicate'
			  (_6, %% Line 771
			       [0])
		  in  let <Cache> =
			  call %% Line 771
			       'erlang':%% Line 771
					'list_to_tuple'
			      (_7)
		      in  %% Line 772
			  apply 'compact_input'/5
			      (_0, _1, _2, Cache, L)
      -| [{'function',{'compact_input',4}}] )
'compact_input'/5 =
    %% Line 774
    ( fun (_0,_1,_2,_3,_4) ->
	  %% Line 775
	  ( fun (_5) ->
		case _5 of
		  <'close'> when 'true' ->
		      %% Line 776
		      'ok'
		  %% Line 777
		  <'read'> when 'true' ->
		      %% Line 778
		      apply 'compact_read'/8
			  (_0, _1, _2, _3, _4, 0, [], 0)
		  ( <_6> when 'true' ->
			primop 'match_fail'
			    ({'function_clause',_6})
		    -| ['compiler_generated'] )
		end
	    -| [{'id',{0,0,'-compact_input/5-fun-0-'}}] )
      -| [{'function',{'compact_input',5}}] )
'compact_read'/8 =
    %% Line 781
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6,_7> of
	      <_X_Head,WHead,SizeT,Cache,[],_X_Min,[],_X_ASz> when 'true' ->
		  do  %% Line 782
		      apply 'fast_write_all_sizes'/3
			  (Cache, SizeT, WHead)
		      %% Line 783
		      'end_of_input'
	      %% Line 784
	      <Head,WHead,SizeT,Cache,L,Min,SegBs,ASz>
		  when %% Line 785
		    try
			let <_10> =
			    call 'erlang':'+'
				(ASz, Min)
			in  let <_11> =
				call 'erlang':'>='
				    (_10, 491520)
			    in  let <_12> =
				    call 'erlang':'>'
					(ASz, 0)
				in  call 'erlang':'and'
					(_11, _12)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  let <NCache> =
		      apply %% Line 786
			    'fast_write_all_sizes'/3
			  (%% Line 786
			   Cache, %% Line 786
				  SizeT, %% Line 786
					 WHead)
		  in  let <_14> =
			  apply %% Line 787
				'compact_input'/5
			      (%% Line 787
			       Head, %% Line 787
				     WHead, %% Line 787
					    SizeT, %% Line 787
						   NCache, %% Line 787
							   L)
		      in  %% Line 787
			  {SegBs,_14}
	      %% Line 788
	      <Head,WHead,SizeT,Cache,[[From|To]|L],Min,SegBs,ASz> when 'true' ->
		  let <Max> =
		      call %% Line 789
			   'erlang':%% Line 789
				    'max'
			  (%% Line 789
			   24576, %% Line 789
				  Min)
		  in  %% Line 790
		      case apply 'check_pread_arg'/2
			       (Max, Head) of
			%% Line 791
			<'true'> when 'true' ->
			    %% Line 792
			    ( case Head of
				( <( {'head',_33,_34,_35,_rec25,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60}
				     -| ['compiler_generated'] )> when 'true' ->
				      case call 'dets_utils':'pread_n'
					       (_rec25, From, Max) of
					%% Line 793
					<'eof'> when 'true' ->
					    %% Line 796
					    'not_ok'
					%% Line 797
					<Bin1>
					    when try
						  let <_19> =
						      call 'erlang':'byte_size'
							  (Bin1)
						  in  call 'erlang':'<'
							  (_19, Min)
					      of <Try> ->
						  Try
					      catch <T,R> ->
						  'false' ->
					    let <_20> =
						call %% Line 799
						     'erlang':%% Line 799
							      'byte_size'
						    (%% Line 799
						     Bin1)
					    in  let <Pad> =
						    call %% Line 799
							 'erlang':%% Line 799
								  '-'
							(%% Line 799
							 Min, _20)
						in  let <NewBin> =
							#{#<%% Line 800
							    Bin1>(%% Line 800
								  ( 'all'
								    -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']]),
							  #<%% Line 800
							    0>(%% Line 800
							       Pad,8,'integer',['unsigned'|['big']])}#
						    in  %% Line 801
							apply 'compact_objs'/10
							    (Head, WHead, SizeT, NewBin, L, %% Line 802
											    From, %% Line 802
												  To, %% Line 802
												      SegBs, %% Line 802
													     Cache, %% Line 802
														    ASz)
					%% Line 803
					<NewBin> when 'true' ->
					    %% Line 804
					    apply 'compact_objs'/10
						(Head, WHead, SizeT, NewBin, L, %% Line 805
										From, %% Line 805
										      To, %% Line 805
											  SegBs, %% Line 805
												 Cache, %% Line 805
													ASz)
				      end
				  -| ['compiler_generated'] )
				( <_61> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','head'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			%% Line 807
			<'false'> when 'true' ->
			    %% Line 808
			    'not_ok'
			( <_24> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_24})
			  -| ['compiler_generated'] )
		      end
	      ( <_32,_31,_30,_29,_28,_27,_26,_25> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_32,_31,_30,_29,_28,_27,_26,_25})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'compact_read',8}}] )
      -| [{'function',{'compact_read',8}}] )
'compact_objs'/10 =
    %% Line 811
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9> of
	      <Head,WHead,SizeT,Bin,L,From,To,SegBs,Cache,ASz>
		  when %% Line 812
		    call 'erlang':'=:='
			(From,
			 To) ->
		  %% Line 813
		  case L of
		    %% Line 814
		    <[]> when 'true' ->
			let <_10> =
			    apply %% Line 815
				  'compact_input'/5
				(%% Line 815
				 Head, %% Line 815
				       WHead, %% Line 815
					      SizeT, %% Line 815
						     Cache, %% Line 815
							    L)
			in  %% Line 815
			    {SegBs,_10}
		    %% Line 816
		    <[[From1|To1]|L1]> when 'true' ->
			let <Skip1> =
			    call %% Line 817
				 'erlang':%% Line 817
					  '-'
				(%% Line 817
				 From1, %% Line 817
					From)
			in  %% Line 818
			    case Bin of
			      %% Line 819
			      <#{#<_58>(Skip1,8,'binary',['unsigned'|['big']]),
				 #<NewBin>(( 'all'
					     -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
				  %% Line 820
				  apply 'compact_objs'/10
				      (Head, WHead, SizeT, NewBin, L1, From1, To1, %% Line 821
										   SegBs, %% Line 821
											  Cache, %% Line 821
												 ASz)
			      %% Line 822
			      <_59>
				  when try
					let <_12> =
					    call 'erlang':'byte_size'
						(Bin)
					in  call 'erlang':'<'
						(_12, Skip1)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  %% Line 823
				  apply 'compact_read'/8
				      (Head, WHead, SizeT, Cache, L, 0, SegBs, ASz)
			      ( <_13> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_13})
				-| ['compiler_generated'] )
			    end
		    ( <_14> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_14})
		      -| ['compiler_generated'] )
		  end
	      %% Line 826
	      <Head,WHead,SizeT,Bin = #{#<Size>(32,1,'integer',['unsigned'|['big']]),
					#<St>(32,1,'integer',['unsigned'|['big']]),
					#<_X_Sz>(32,1,'integer',['unsigned'|['big']]),
					#<KO>(( 'all'
						-| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,%% Line 827
													       L,%% Line 827
														 From,%% Line 827
														      To,%% Line 827
															 SegBs,%% Line 827
															       Cache,%% Line 827
																     ASz>
		  when %% Line 827
		    call 'erlang':'=:='
			(St,
			 305419896) ->
		  ( let <_97> =
			call %% Line 2471
			     ( 'dets_utils'
			       -| ['compiler_generated'] ):%% Line 2471
							   ( 'log2'
							     -| ['compiler_generated'] )
			    (%% Line 828
			     Size)
		    in  let <LSize> =
			    call %% Line 2471
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 2471
							       ( '+'
								 -| ['compiler_generated'] )
				(%% Line 2471
				 ( 1
				   -| ['compiler_generated'] ), _97)
			in  let <_16> =
				call %% Line 829
				     'erlang':%% Line 829
					      '-'
				    (%% Line 829
				     LSize, %% Line 829
					    1)
			    in  let <Size2> =
				    call %% Line 829
					 'erlang':%% Line 829
						  'bsl'
					(%% Line 829
					 1, _16)
				in  %% Line 830
				    case <> of
				      %% Line 831
				      <>
					  when try
						let <_18> =
						    call 'erlang':'byte_size'
							(Bin)
						in  call 'erlang':'>='
							(_18, Size2)
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  let <NASz> =
					      call %% Line 832
						   'erlang':%% Line 832
							    '+'
						  (%% Line 832
						   ASz, %% Line 832
							Size2)
					  in  %% Line 833
					      case Bin of
						<#{#<SlotObjs>(Size2,8,'binary',['unsigned'|['big']]),
						   #<NewBin>(( 'all'
							       -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
						    let <_28> =
							case <> of
							  %% Line 835
							  <>
							      when ( try
								      ( let <_23> =
									    case ( call ( 'erlang'
											  -| ['compiler_generated'] ):( 'is_record'
															-| ['compiler_generated'] )
										       (Head, ( 'head'
												-| ['compiler_generated'] ), ( 30
															       -| ['compiler_generated'] ))
										   -| ['compiler_generated'] ) of
									      ( <( 'true'
										   -| ['compiler_generated'] )> when 'true' ->
										    ( 'true'
										      -| ['compiler_generated'] )
										-| ['compiler_generated'] )
									      ( <( 'false'
										   -| ['compiler_generated'] )> when 'true' ->
										    ( 'fail'
										      -| ['compiler_generated'] )
										-| ['compiler_generated'] )
									      ( <( _21
										   -| ['compiler_generated'] )> when 'true' ->
										    ( call ( 'erlang'
											     -| ['compiler_generated'] ):( 'error'
															   -| ['compiler_generated'] )
											  (( {( 'badarg'
												-| ['compiler_generated'] ),( _21
															      -| ['compiler_generated'] )}
											     -| ['compiler_generated'] ))
										      -| ['compiler_generated'] )
										-| ['compiler_generated'] )
									    end
									in  let <_24> =
										call 'erlang':'=:='
										    (( _23
										       -| ['compiler_generated'] ), 'true')
									    in  let <_25> =
										    call 'erlang':'element'
											(10, Head)
										in  let <_26> =
											call 'erlang':'=:='
											    (_25, 'set')
										    in  ( call ( 'erlang'
												 -| ['compiler_generated'] ):( 'and'
															       -| ['compiler_generated'] )
											      (_24, _26)
											  -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								  of <Try> ->
								      Try
								  catch <T,R> ->
								      'false'
								  -| ['compiler_generated'] ) ->
							      %% Line 836
							      call 'erlang':'binary_to_term'
								  (KO)
							  %% Line 837
							  <> when 'true' ->
							      %% Line 838
							      case KO of
								<#{#<_X_KSz>(32,1,'integer',['unsigned'|['big']]),
								   #<B2>(( 'all'
									   -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
								    %% Line 839
								    call 'erlang':'binary_to_term'
									(B2)
								( <_27> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_27})
								  -| ['compiler_generated'] )
							      end
							end
						    in  %% Line 841
							( case Head of
							    ( <( {'head',_60,_61,_62,_63,_64,_65,_66,_67,_68,_rec26,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87}
								 -| ['compiler_generated'] )> when 'true' ->
								  let <Key> =
								      call 'erlang':'element'
									  (_rec26, _28)
								  in  let <Slot> =
									  apply %% Line 842
										'db_hash'/2
									      (%% Line 842
									       Key, %% Line 842
										    Head)
								      in  let <From1> =
									      call %% Line 843
										   'erlang':%% Line 843
											    '+'
										  (%% Line 843
										   From, %% Line 843
											 Size2)
									  in  %% Line 844
									      case call 'erlang':'element'
										       (LSize, Cache) of
										<[Addr|AL]> when 'true' ->
										    let <_36> =
											call %% Line 845
											     'erlang':%% Line 845
												      '+'
											    (%% Line 845
											     Addr, %% Line 845
												   Size2)
										    in  let <NCache> =
											    call %% Line 845
												 'erlang':%% Line 845
													  'setelement'
												(%% Line 845
												 LSize, %% Line 845
													Cache, %% Line 845
													       [_36|[SlotObjs|AL]])
											in  let <_38> =
												#{#<%% Line 846
												    Slot>(%% Line 846
													  32,1,'integer',['unsigned'|['big']]),
												  #<%% Line 846
												    Size>(%% Line 846
													  32,1,'integer',['unsigned'|['big']]),
												  #<%% Line 846
												    Addr>(%% Line 846
													  32,1,'integer',['unsigned'|['big']]),
												  #<%% Line 846
												    LSize>(%% Line 846
													   8,1,'integer',['unsigned'|['big']])}#
											    in  let <NSegBs> =
												    [_38|%% Line 846
													 SegBs]
												in  %% Line 847
												    apply 'compact_objs'/10
													(Head, WHead, SizeT, NewBin, L, From1, %% Line 848
																	       To, %% Line 848
																		   NSegBs, %% Line 848
																			   NCache, %% Line 848
																				   NASz)
										( <_35> when 'true' ->
										      primop 'match_fail'
											  ({'badmatch',_35})
										  -| ['compiler_generated'] )
									      end
							      -| ['compiler_generated'] )
							    ( <_88> when 'true' ->
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'error'
													 -| ['compiler_generated'] )
									(( {'badrecord','head'}
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
						( <_20> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_20})
						  -| ['compiler_generated'] )
					      end
				      %% Line 849
				      <> when 'true' ->
					  %% Line 850
					  apply 'compact_read'/8
					      (Head, WHead, SizeT, Cache, [[From|To]|L], %% Line 851
											 Size2, %% Line 851
												SegBs, %% Line 851
												       ASz)
				    end
		    -| ['compiler_generated'] )
	      %% Line 853
	      <Head,WHead,SizeT,Bin = #{#<_89>(32,1,'integer',['unsigned'|['big']]),
					#<_X_St>(32,1,'integer',['unsigned'|['big']]),
					#<_90>(32,1,'integer',['unsigned'|['big']]),
					#<_91>(( 'all'
						 -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,%% Line 854
														L,%% Line 854
														  From,%% Line 854
														       To,%% Line 854
															  SegBs,%% Line 854
																Cache,%% Line 854
																      ASz>
		  when %% Line 855
		    try
			let <_41> =
			    call 'erlang':'byte_size'
				(Bin)
			in  call 'erlang':'>='
				(_41, 2048)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  %% Line 856
		  case Bin of
		    <#{#<_92>(2048,8,'binary',['unsigned'|['big']]),
		       #<NewBin>(( 'all'
				   -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <_44> =
			    call %% Line 857
				 'erlang':%% Line 857
					  '+'
				(%% Line 857
				 From, %% Line 857
				       2048)
			in  %% Line 857
			    apply 'compact_objs'/10
				(Head, WHead, SizeT, NewBin, L, _44, %% Line 858
								     To, %% Line 858
									 SegBs, %% Line 858
										Cache, %% Line 858
										       ASz)
		    ( <_42> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_42})
		      -| ['compiler_generated'] )
		  end
	      %% Line 859
	      <Head,WHead,SizeT,Bin = #{#<_93>(32,1,'integer',['unsigned'|['big']]),
					#<_X_St>(32,1,'integer',['unsigned'|['big']]),
					#<_94>(32,1,'integer',['unsigned'|['big']]),
					#<_95>(( 'all'
						 -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,%% Line 860
														L,%% Line 860
														  From,%% Line 860
														       To,%% Line 860
															  SegBs,%% Line 860
																Cache,%% Line 860
																      ASz>
		  when %% Line 861
		    try
			let <_46> =
			    call 'erlang':'byte_size'
				(Bin)
			in  call 'erlang':'<'
				(_46, 2048)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  %% Line 862
		  apply 'compact_read'/8
		      (Head, WHead, SizeT, Cache, [[From|To]|L], %% Line 863
								 2048, %% Line 863
								       SegBs, %% Line 863
									      ASz)
	      %% Line 864
	      <Head,WHead,SizeT,_X_Bin,L,From,To,SegBs,Cache,ASz> when 'true' ->
		  %% Line 865
		  apply 'compact_read'/8
		      (Head, WHead, SizeT, Cache, [[From|To]|L], 0, SegBs, ASz)
	    end
	    -| [{'function',{'compact_objs',10}}] )
      -| [{'function',{'compact_objs',10}}] )
'read_bchunks'/2 =
    %% Line 871
    ( fun (_0,_1) ->
	  %% Line 872
	  apply 'read_bchunks'/5
	      (_0, _1, 0, [], 0)
      -| [{'function',{'read_bchunks',2}}] )
'read_bchunks'/5 =
    %% Line 874
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <_X_Head,L,Min,Bs,ASz>
		  when try
			let <_6> =
			    call 'erlang':'+'
				(ASz, Min)
			in  let <_7> =
				call 'erlang':'>='
				    (_6, 32768)
			    in  let <_8> =
				    call %% Line 875
					 'erlang':%% Line 875
						  '=/='
					(%% Line 875
					 Bs, %% Line 875
					     [])
				in  call 'erlang':'and'
					(_7, _8)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  let <_9> =
		      call %% Line 876
			   'lists':%% Line 876
				   'reverse'
			  (%% Line 876
			   Bs)
		  in  %% Line 876
		      {_9,L}
	      %% Line 877
	      <Head,{From,To,L},Min,Bs,ASz> when 'true' ->
		  let <Max> =
		      call %% Line 878
			   'erlang':%% Line 878
				    'max'
			  (%% Line 878
			   16384, %% Line 878
				  Min)
		  in  %% Line 879
		      case apply 'check_pread_arg'/2
			       (Max, Head) of
			%% Line 880
			<'true'> when 'true' ->
			    %% Line 881
			    ( case Head of
				( <( {'head',_29,_30,_31,_rec27,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56}
				     -| ['compiler_generated'] )> when 'true' ->
				      case call 'dets_utils':'pread_n'
					       (_rec27, From, Max) of
					%% Line 882
					<'eof'> when 'true' ->
					    %% Line 884
					    {'error','premature_eof'}
					%% Line 885
					<NewBin>
					    when try
						  let <_14> =
						      call 'erlang':'byte_size'
							  (NewBin)
						  in  call 'erlang':'>='
							  (_14, Min)
					      of <Try> ->
						  Try
					      catch <T,R> ->
						  'false' ->
					    %% Line 886
					    apply 'bchunks'/7
						(Head, L, NewBin, Bs, ASz, From, To)
					%% Line 887
					<Bin1>
					    when try
						  let <_15> =
						      call 'erlang':'-'
							  (To, From)
						  in  let <_16> =
							  call 'erlang':'=:='
							      (_15, Min)
						      in  let <_17> =
							      call 'erlang':'=:='
								  (L, #{}#)
							  in  call 'erlang':'and'
								  (_16, _17)
					      of <Try> ->
						  Try
					      catch <T,R> ->
						  'false' ->
					    let <_18> =
						call %% Line 890
						     'erlang':%% Line 890
							      'byte_size'
						    (%% Line 890
						     Bin1)
					    in  let <Pad> =
						    call %% Line 890
							 'erlang':%% Line 890
								  '-'
							(%% Line 890
							 Min, _18)
						in  let <NewBin> =
							#{#<%% Line 891
							    Bin1>(%% Line 891
								  ( 'all'
								    -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']]),
							  #<%% Line 891
							    0>(%% Line 891
							       Pad,8,'integer',['unsigned'|['big']])}#
						    in  %% Line 892
							apply 'bchunks'/7
							    (Head, L, NewBin, Bs, ASz, From, To)
					%% Line 893
					<_58> when 'true' ->
					    %% Line 894
					    {'error','premature_eof'}
				      end
				  -| ['compiler_generated'] )
				( <_57> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','head'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			%% Line 896
			<'false'> when 'true' ->
			    let <_22> =
				call %% Line 897
				     'dets_utils':%% Line 897
						  'bad_object'
				    (%% Line 897
				     'bad_object', %% Line 897
						   {'read_bchunks',Max})
			    in  %% Line 897
				{'error',_22}
			( <_23> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_23})
			  -| ['compiler_generated'] )
		      end
	      ( <_28,_27,_26,_25,_24> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_28,_27,_26,_25,_24})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'read_bchunks',5}}] )
      -| [{'function',{'read_bchunks',5}}] )
'bchunks'/7 =
    %% Line 900
    ( fun (_0,_1,_2,_3,_4,_5,_6) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6> of
	      <Head,L,Bin,Bs,ASz,From,To>
		  when call 'erlang':'=:='
			(From,
			 To) ->
		  %% Line 901
		  case <> of
		    %% Line 902
		    <>
			when call 'erlang':'=:='
			      (L,
			       #{}#) ->
			let <_7> =
			    call %% Line 903
				 'lists':%% Line 903
					 'reverse'
				(%% Line 903
				 Bs)
			in  %% Line 903
			    {'finished',_7}
		    %% Line 904
		    <> when 'true' ->
			%% Line 905
			case L of
			  <#{#<From1>(32,1,'integer',['unsigned'|['big']]),
			     #<To1>(32,1,'integer',['unsigned'|['big']]),
			     #<L1>(( 'all'
				     -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
			      let <Skip1> =
				  call %% Line 906
				       'erlang':%% Line 906
						'-'
				      (%% Line 906
				       From1, %% Line 906
					      From)
			      in  %% Line 907
				  case Bin of
				    %% Line 908
				    <#{#<_50>(Skip1,8,'binary',['unsigned'|['big']]),
				       #<NewBin>(( 'all'
						   -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
					%% Line 909
					apply 'bchunks'/7
					    (Head, L1, NewBin, Bs, ASz, From1, To1)
				    %% Line 910
				    <_51>
					when try
					      let <_10> =
						  call 'erlang':'byte_size'
						      (Bin)
					      in  call 'erlang':'<'
						      (_10, Skip1)
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      'false' ->
					%% Line 911
					apply 'read_bchunks'/5
					    (Head, {From1,To1,L1}, 0, Bs, ASz)
				    ( <_11> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_11})
				      -| ['compiler_generated'] )
				  end
			  ( <_8> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_8})
			    -| ['compiler_generated'] )
			end
		  end
	      %% Line 914
	      <Head,L,Bin = #{#<Size>(32,1,'integer',['unsigned'|['big']]),
			      #<St>(32,1,'integer',['unsigned'|['big']]),
			      #<_X_Sz>(32,1,'integer',['unsigned'|['big']]),
			      #<KO>(( 'all'
				      -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Bs,ASz,%% Line 915
													    From,%% Line 915
														 To>
		  when let <_12> =
			call %% Line 915
			     'erlang':%% Line 915
				      '=:='
			    (%% Line 915
			     St, %% Line 915
				 305419896)
		    in  let <_13> =
			    call %% Line 915
				 'erlang':%% Line 915
					  '=:='
				(%% Line 915
				 St, %% Line 915
				     61591023)
			in  %% Line 915
			    call 'erlang':'or'
				(_12, _13) ->
		  ( let <_89> =
			call %% Line 2471
			     ( 'dets_utils'
			       -| ['compiler_generated'] ):%% Line 2471
							   ( 'log2'
							     -| ['compiler_generated'] )
			    (%% Line 916
			     Size)
		    in  let <LSize> =
			    call %% Line 2471
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 2471
							       ( '+'
								 -| ['compiler_generated'] )
				(%% Line 2471
				 ( 1
				   -| ['compiler_generated'] ), _89)
			in  let <_15> =
				call %% Line 917
				     'erlang':%% Line 917
					      '-'
				    (%% Line 917
				     LSize, %% Line 917
					    1)
			    in  let <Size2> =
				    call %% Line 917
					 'erlang':%% Line 917
						  'bsl'
					(%% Line 917
					 1, _15)
				in  %% Line 918
				    case <> of
				      %% Line 919
				      <>
					  when try
						let <_17> =
						    call 'erlang':'byte_size'
							(Bin)
						in  call 'erlang':'>='
							(_17, Size2)
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  %% Line 920
					  case Bin of
					    <#{#<B0>(Size2,8,'binary',['unsigned'|['big']]),
					       #<NewBin>(( 'all'
							   -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
						let <_26> =
						    case <> of
						      %% Line 925
						      <>
							  when ( try
								  ( let <_21> =
									case ( call ( 'erlang'
										      -| ['compiler_generated'] ):( 'is_record'
														    -| ['compiler_generated'] )
										   (Head, ( 'head'
											    -| ['compiler_generated'] ), ( 30
															   -| ['compiler_generated'] ))
									       -| ['compiler_generated'] ) of
									  ( <( 'true'
									       -| ['compiler_generated'] )> when 'true' ->
										( 'true'
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									  ( <( 'false'
									       -| ['compiler_generated'] )> when 'true' ->
										( 'fail'
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									  ( <( _19
									       -| ['compiler_generated'] )> when 'true' ->
										( call ( 'erlang'
											 -| ['compiler_generated'] ):( 'error'
														       -| ['compiler_generated'] )
										      (( {( 'badarg'
											    -| ['compiler_generated'] ),( _19
															  -| ['compiler_generated'] )}
											 -| ['compiler_generated'] ))
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									end
								    in  let <_22> =
									    call 'erlang':'=:='
										(( _21
										   -| ['compiler_generated'] ), 'true')
									in  let <_23> =
										call 'erlang':'element'
										    (10, Head)
									    in  let <_24> =
										    call 'erlang':'=:='
											(_23, 'set')
										in  ( call ( 'erlang'
											     -| ['compiler_generated'] ):( 'and'
															   -| ['compiler_generated'] )
											  (_22, _24)
										      -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
							      of <Try> ->
								  Try
							      catch <T,R> ->
								  'false'
							      -| ['compiler_generated'] ) ->
							  %% Line 926
							  call 'erlang':'binary_to_term'
							      (KO)
						      %% Line 927
						      <> when 'true' ->
							  %% Line 928
							  case KO of
							    <#{#<_X_KSz>(32,1,'integer',['unsigned'|['big']]),
							       #<B2>(( 'all'
								       -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
								%% Line 929
								call 'erlang':'binary_to_term'
								    (B2)
							    ( <_25> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_25})
							      -| ['compiler_generated'] )
							  end
						    end
						in  %% Line 931
						    ( case Head of
							( <( {'head',_52,_53,_54,_55,_56,_57,_58,_59,_60,_rec28,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79}
							     -| ['compiler_generated'] )> when 'true' ->
							      let <Key> =
								  call 'erlang':'element'
								      (_rec28, _26)
							      in  let <Slot> =
								      apply %% Line 932
									    'db_hash'/2
									  (%% Line 932
									   Key, %% Line 932
										Head)
								  in  let <B> = {%% Line 933
									   LSize,%% Line 933
										 Slot,%% Line 933
										      B0}
								      in  let <_34> =
									      call %% Line 934
										   'erlang':%% Line 934
											    '+'
										  (%% Line 934
										   ASz, %% Line 934
											Size2)
									  in  let <_33> =
										  call %% Line 934
										       'erlang':%% Line 934
												'+'
										      (%% Line 934
										       From, %% Line 934
											     Size2)
									      in  %% Line 934
										  apply 'bchunks'/7
										      (Head, L, NewBin, [B|Bs], _34, _33, To)
							  -| ['compiler_generated'] )
							( <_80> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','head'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
					    ( <_18> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_18})
					      -| ['compiler_generated'] )
					  end
				      %% Line 935
				      <> when 'true' ->
					  %% Line 936
					  apply 'read_bchunks'/5
					      (Head, {From,To,L}, Size2, Bs, ASz)
				    end
		    -| ['compiler_generated'] )
	      %% Line 938
	      <Head,L,Bin = #{#<_81>(32,1,'integer',['unsigned'|['big']]),
			      #<_X_St>(32,1,'integer',['unsigned'|['big']]),
			      #<_82>(32,1,'integer',['unsigned'|['big']]),
			      #<_83>(( 'all'
				       -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Bs,ASz,From,To>
		  when %% Line 939
		    try
			let <_36> =
			    call 'erlang':'byte_size'
				(Bin)
			in  call 'erlang':'>='
				(_36, 2048)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  %% Line 940
		  case Bin of
		    <#{#<_84>(2048,8,'binary',['unsigned'|['big']]),
		       #<NewBin>(( 'all'
				   -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <_39> =
			    call %% Line 941
				 'erlang':%% Line 941
					  '+'
				(%% Line 941
				 From, %% Line 941
				       2048)
			in  %% Line 941
			    apply 'bchunks'/7
				(Head, L, NewBin, Bs, ASz, _39, To)
		    ( <_37> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_37})
		      -| ['compiler_generated'] )
		  end
	      %% Line 942
	      <Head,L,Bin = #{#<_85>(32,1,'integer',['unsigned'|['big']]),
			      #<_X_St>(32,1,'integer',['unsigned'|['big']]),
			      #<_86>(32,1,'integer',['unsigned'|['big']]),
			      #<_87>(( 'all'
				       -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Bs,ASz,From,To>
		  when %% Line 943
		    try
			let <_41> =
			    call 'erlang':'byte_size'
				(Bin)
			in  call 'erlang':'<'
				(_41, 2048)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  %% Line 944
		  apply 'read_bchunks'/5
		      (Head, {From,To,L}, 2048, Bs, ASz)
	      %% Line 945
	      <Head,L,_X_Bin,Bs,ASz,From,To> when 'true' ->
		  %% Line 946
		  apply 'read_bchunks'/5
		      (Head, {From,To,L}, 0, Bs, ASz)
	    end
	    -| [{'function',{'bchunks',7}}] )
      -| [{'function',{'bchunks',7}}] )
'bchunk_init'/2 =
    %% Line 951
    ( fun (_0,_1) ->
	  let <Ref> =
	      call %% Line 952
		   'erlang':%% Line 952
			    'make_ref'
		  ()
	  in  let <_4> =
		  catch
		      let <_3> =
			  apply _1
			      (%% Line 954
			       'read')
		      in  %% Line 954
			  {Ref,_3}
	      in  %% Line 954
		  case _4 of
		    %% Line 955
		    <{_35,'end_of_input'}>
			when call 'erlang':'=:='
			      (_35,
			       Ref) ->
			%% Line 956
			{'error',{'init_fun','end_of_input'}}
		    %% Line 957
		    <{_36,{[],NInitFun}}>
			when let <_37> =
			      call 'erlang':'=:='
				  (_36, Ref)
			  in  let <_38> =
				  call 'erlang':'is_function'
				      (NInitFun)
			      in  call 'erlang':'and'
				      (_37, _38) ->
			%% Line 958
			apply 'bchunk_init'/2
			    (_0, NInitFun)
		    %% Line 959
		    <{_39,{[ParmsBin|L],NInitFun}}>
			when let <_40> =
			      call 'erlang':'=:='
				  (_39, Ref)
			  in  let <_41> =
				  try
				      let <_5> =
					  call %% Line 960
					       'erlang':%% Line 960
							'is_list'
					      (%% Line 960
					       L)
				      in  let <_6> =
					      call %% Line 960
						   'erlang':%% Line 960
							    'is_function'
						  (%% Line 960
						   NInitFun)
					  in  %% Line 960
					      call 'erlang':'and'
						  (_5, _6)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
			      in  call 'erlang':'and'
				      (_40, _41) ->
			%% Line 964
			case _0 of
			  <{'head',_42,_43,_44,Fd,_45,_46,_47,_48,Type,Kp,_49,_50,_51,Auto,_52,_53,_54,_55,_56,_57,Cache,Fname,_58,Ram,Tab,_59,_60,_61,_62}> when 'true' ->
			      %% Line 965
			      case apply 'try_bchunk_header'/2
				       (ParmsBin, _0) of
				%% Line 966
				<{'ok',Parms}> when 'true' ->
				    %% Line 969
				    case Parms of
				      <{'$hash2',_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,NoObjects,NoKeys,NoObjsPerSize}> when 'true' ->
					  let <CacheSz> =
					      call %% Line 970
						   'dets_utils':%% Line 970
								'cache_size'
						  (%% Line 970
						   Cache)
					  in  %% Line 971
					      case %% Line 972
						   apply 'prep_table_copy'/9
						       (Fd, Tab, Fname, Type, %% Line 973
									      Kp, %% Line 973
										  Ram, %% Line 973
										       CacheSz, %% Line 974
												Auto, %% Line 974
												      Parms) of
						<{'ok',Head1}> when 'true' ->
						    let <SizeT> =
							call %% Line 975
							     'ets':%% Line 975
								   'new'
							    (%% Line 975
							     'dets_init', %% Line 975
									  [])
						    in  %% Line 976
							case %% Line 977
							     apply 'prepare_file_init'/5
								 (NoObjects, NoKeys, %% Line 978
										     NoObjsPerSize, %% Line 978
												    SizeT, %% Line 978
													   Head1) of
							  <{NewHead,Bases,SegAddr,SegEnd}> when 'true' ->
							      let <_14> =
								  call %% Line 979
								       'erlang':%% Line 979
										'tuple_size'
								      (%% Line 979
								       Bases)
							      in  let <_15> =
								      call %% Line 979
									   'erlang':%% Line 979
										    '-'
									  (_14, %% Line 979
										0)
								  in  let <_16> =
									  call %% Line 979
									       'lists':%% Line 979
										       'duplicate'
									      (_15, %% Line 979
										    [0])
								      in  let <ECache> =
									      call %% Line 979
										   'erlang':%% Line 979
											    'list_to_tuple'
										  (_16)
									  in  let <Input> =
										  fun (_22) ->
										      %% Line 981
										      case _22 of
											<'close'> when 'true' ->
											    catch
												%% Line 982
												apply NInitFun
												    (( 'close'
												       -| ['result_not_wanted'] ))
											%% Line 983
											<'read'> when 'true' ->
											    %% Line 984
											    apply 'do_make_slots'/7
												(L, ECache, SizeT, NewHead, Ref, %% Line 985
																 0, %% Line 985
																    NInitFun)
											( <_23> when 'true' ->
											      primop 'match_fail'
												  ({'function_clause',_23})
											  -| ['compiler_generated'] )
										      end
									      in  let <Output> =
										      apply %% Line 987
											    'fast_output'/5
											  (%% Line 987
											   NewHead, %% Line 987
												    SizeT, %% Line 987
													   Bases, %% Line 987
														  SegAddr, %% Line 987
															   SegEnd)
										  in  %% Line 988
										      ( case _0 of
											  ( <( {'head',_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_rec29,_95,_96,_97,_98,_99,_100,_101}
											       -| ['compiler_generated'] )> when 'true' ->
												let <TmpDir> =
												    call 'filename':'dirname'
													(_rec29)
												in  let <_29> =
													catch
													    %% Line 989
													    call 'file_sorter':'sort'
														(Input, Output, %% Line 990
																[{'format','binary'}|%% Line 991
																		     [{'tmpdir',TmpDir}|%% Line 992
																					[{'header',1}]]])
												    in  do  %% Line 993
													    call 'ets':'delete'
														(SizeT)
													    _29
											    -| ['compiler_generated'] )
											  ( <_102> when 'true' ->
												( call ( 'erlang'
													 -| ['compiler_generated'] ):( 'error'
																       -| ['compiler_generated'] )
												      (( {'badrecord','head'}
													 -| ['compiler_generated'] ))
												  -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
											end
											-| ['compiler_generated'] )
							  ( <_12> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_12})
							    -| ['compiler_generated'] )
							end
						( <_10> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_10})
						  -| ['compiler_generated'] )
					      end
				      ( <_8> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_8})
					-| ['compiler_generated'] )
				    end
				%% Line 995
				<'not_ok'> when 'true' ->
				    %% Line 996
				    {'error',{'init_fun',ParmsBin}}
				( <_31> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_31})
				  -| ['compiler_generated'] )
			      end
			  ( <_7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_7})
			    -| ['compiler_generated'] )
			end
		    %% Line 998
		    <{_103,Value}>
			when call 'erlang':'=:='
			      (_103,
			       Ref) ->
			%% Line 999
			{'error',{'init_fun',Value}}
		    %% Line 1000
		    <Error> when 'true' ->
			%% Line 1001
			{'thrown',Error}
		  end
      -| [{'function',{'bchunk_init',2}}] )
'try_bchunk_header'/2 =
    %% Line 1004
    ( fun (_0,_1) ->
	  %% Line 1005
	  case _1 of
	    <{'head',_24,_25,_26,_27,_28,_29,_30,_31,Type,Kp,_32,_33,_34,_35,_36,_37,HashBif,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49}> when 'true' ->
		let <HashMethod> =
		    apply %% Line 1006
			  'hash_method_to_code'/1
			(%% Line 1006
			 HashBif)
		in  let <_4> =
			catch
			    %% Line 1007
			    call 'erlang':'binary_to_term'
				(_0)
		    in  %% Line 1007
			case _4 of
			  %% Line 1008
			  <Parms = {'$hash2',_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63}>
			      when ( try
				      let <_9> =
					  call %% Line 1009
					       'erlang':%% Line 1009
							'element'
					      (%% Line 1009
					       5, %% Line 1009
						  Parms)
				      in  let <_10> =
					      call %% Line 1009
						   'erlang':%% Line 1009
							    '=:='
						  (_9, %% Line 1009
						       Type)
					  in  let <_11> =
						  call %% Line 1009
						       ( 'erlang'
							 -| ['compiler_generated'] ):%% Line 1009
										     ( 'and'
										       -| ['compiler_generated'] )
						      (( 'true'
							 -| ['compiler_generated'] ), _10)
					      in  let <_12> =
						      call %% Line 1010
							   'erlang':%% Line 1010
								    'element'
							  (%% Line 1010
							   6, %% Line 1010
							      Parms)
						  in  let <_13> =
							  call %% Line 1010
							       'erlang':%% Line 1010
									'=:='
							      (_12, %% Line 1010
								    Kp)
						      in  let <_14> =
							      call %% Line 1011
								   'erlang':%% Line 1011
									    'element'
								  (%% Line 1011
								   7, %% Line 1011
								      Parms)
							  in  let <_15> =
								  call %% Line 1011
								       'erlang':%% Line 1011
										'=:='
								      (_14, %% Line 1011
									    HashMethod)
							      in  let <_16> =
								      call %% Line 1012
									   'erlang':%% Line 1012
										    'element'
									  (%% Line 1012
									   3, %% Line 1012
									      Parms)
								  in  let <_17> =
									  call %% Line 1012
									       'erlang':%% Line 1012
											'=:='
									      (_16, %% Line 1013
										    1)
								      in  let <_18> =
									      call ( 'erlang'
										     -| ['compiler_generated'] ):( 'and'
														   -| ['compiler_generated'] )
										  (_15, _17)
									  in  let <_19> =
										  call ( 'erlang'
											 -| ['compiler_generated'] ):( 'and'
														       -| ['compiler_generated'] )
										      (_13, _18)
									      in  let <_20> =
										      call ( 'erlang'
											     -| ['compiler_generated'] ):( 'and'
															   -| ['compiler_generated'] )
											  (_11, _19)
										  in  ( call ( 'erlang'
											       -| ['compiler_generated'] ):( 'and'
															     -| ['compiler_generated'] )
											    (( 'true'
											       -| ['compiler_generated'] ), _20)
											-| ['compiler_generated'] )
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
				  -| ['compiler_generated'] ) ->
			      %% Line 1014
			      {'ok',Parms}
			  %% Line 1015
			  <_64> when 'true' ->
			      %% Line 1016
			      'not_ok'
			end
	    ( <_2> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_2})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'try_bchunk_header',2}}] )
'bchunk_input'/6 =
    %% Line 1019
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  %% Line 1020
	  ( fun (_14) ->
		case _14 of
		  <'close'> when 'true' ->
		      catch
			  %% Line 1021
			  apply _0
			      (( 'close'
				 -| ['result_not_wanted'] ))
		  %% Line 1022
		  <'read'> when 'true' ->
		      let <_9> =
			  catch
			      let <_8> =
				  apply _0
				      (%% Line 1023
				       'read')
			      in  %% Line 1023
				  {_3,_8}
		      in  %% Line 1023
			  case _9 of
			    %% Line 1024
			    <{_22,'end_of_input'}>
				when call 'erlang':'=:='
				      (_22,
				       _3) ->
				do  %% Line 1025
				    apply 'fast_write_all_sizes'/3
					(_4, _1, _2)
				    %% Line 1026
				    'end_of_input'
			    %% Line 1027
			    <{_23,{L,NInitFun}}>
				when let <_24> =
				      call 'erlang':'=:='
					  (_23, _3)
				  in  let <_25> =
					  try
					      let <_11> =
						  call 'erlang':'is_list'
						      (L)
					      in  let <_12> =
						      call 'erlang':'is_function'
							  (NInitFun)
						  in  call 'erlang':'and'
							  (_11, _12)
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      'false'
				      in  call 'erlang':'and'
					      (_24, _25) ->
				%% Line 1028
				apply 'do_make_slots'/7
				    (L, _4, _1, _2, _3, _5, %% Line 1029
							    NInitFun)
			    %% Line 1030
			    <{_26,Value}>
				when call 'erlang':'=:='
				      (_26,
				       _3) ->
				%% Line 1031
				{'error',{'init_fun',Value}}
			    %% Line 1032
			    <Error> when 'true' ->
				%% Line 1033
				call 'erlang':'throw'
				    ({'thrown',Error})
			  end
		  ( <_15> when 'true' ->
			primop 'match_fail'
			    ({'function_clause',_15})
		    -| ['compiler_generated'] )
		end
	    -| [{'id',{0,0,'-bchunk_input/6-fun-0-'}}] )
      -| [{'function',{'bchunk_input',6}}] )
'do_make_slots'/7 =
    %% Line 1037
    ( fun (_0,_1,_2,_3,_4,_5,_6) ->
	  let <_7> =
	      catch
		  %% Line 1038
		  apply 'make_slots'/4
		      (_0, _1, [], _5)
	  in  %% Line 1038
	      case _7 of
		%% Line 1039
		<{'EXIT',_22}> when 'true' ->
		    do  try
			    %% Line 1040
			    apply _6
				(( 'close'
				   -| ['result_not_wanted'] ))
			of <_catch_value> ->
			    _catch_value
			catch <Class,Reason,Stk> ->
			    'ok'
			%% Line 1041
			{'error','invalid_objects_list'}
		%% Line 1042
		<{Cache1,SegBs,NASz}>
		    when call 'erlang':'>'
			  (NASz,
			   491520) ->
		    let <NCache> =
			apply %% Line 1043
			      'fast_write_all_sizes'/3
			    (%% Line 1043
			     Cache1, _2, _3)
		    in  let <F> =
			    apply %% Line 1044
				  'bchunk_input'/6
				(_6, _2, _3, _4, %% Line 1044
						 NCache, %% Line 1044
							 0)
			in  %% Line 1045
			    {SegBs,F}
		%% Line 1046
		<{NCache,SegBs,NASz}> when 'true' ->
		    let <F> =
			apply %% Line 1047
			      'bchunk_input'/6
			    (_6, _2, _3, _4, %% Line 1047
					     NCache, %% Line 1047
						     NASz)
		    in  %% Line 1048
			{SegBs,F}
		( <_14> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_14})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'do_make_slots',7}}] )
'make_slots'/4 =
    %% Line 1051
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <[{LSize,Slot,Bin0 = #{#<Size>(32,1,'integer',['unsigned'|['big']]),
				     #<St>(32,1,'integer',['unsigned'|['big']]),
				     #<Sz>(32,1,'integer',['unsigned'|['big']]),
				     #<KO>(( 'all'
					     -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#}|Bins],%% Line 1052
														   Cache,%% Line 1052
															 SegBs,%% Line 1052
															       ASz> when 'true' ->
		  let <_4> =
		      case <> of
			%% Line 1054
			<>
			    when call 'erlang':'=:='
				  (St,
				   305419896) ->
			    %% Line 1055
			    Bin0
			%% Line 1056
			<>
			    when call 'erlang':'=:='
				  (St,
				   61591023) ->
			    %% Line 1057
			    #{#<Size>(32,1,'integer',['unsigned'|['big']]),
			      #<305419896>(32,1,'integer',['unsigned'|['big']]),
			      #<Sz>(32,1,'integer',['unsigned'|['big']]),
			      #<KO>(( 'all'
				      -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#
			( <> when 'true' ->
			      %% Line 1053
			      primop 'match_fail'
				  ('if_clause')
			  -| ['compiler_generated'] )
		      end
		  in  let <BSz> =
			  call %% Line 1059
			       'erlang':%% Line 1059
					'byte_size'
			      (%% Line 1059
			       Bin0)
		      in  let <_7> =
			      call %% Line 1060
				   'erlang':%% Line 1060
					    '-'
				  (%% Line 1060
				   LSize, %% Line 1060
					  1)
			  in  let <_8> =
				  call %% Line 1060
				       'erlang':%% Line 1060
						'bsl'
				      (%% Line 1060
				       1, _7)
			      in  %% Line 1060
				  case call 'erlang':'=:='
					   (BSz, _8) of
				    <'true'> when 'true' ->
					let <NASz> =
					    call %% Line 1061
						 'erlang':%% Line 1061
							  '+'
						(%% Line 1061
						 ASz, %% Line 1061
						      BSz)
					in  %% Line 1062
					    case call 'erlang':'element'
						     (LSize, Cache) of
					      <[Addr|L]> when 'true' ->
						  let <_12> =
						      #{#<%% Line 1063
							  Slot>(%% Line 1063
								32,1,'integer',['unsigned'|['big']]),
							#<%% Line 1063
							  Size>(%% Line 1063
								32,1,'integer',['unsigned'|['big']]),
							#<%% Line 1063
							  Addr>(%% Line 1063
								32,1,'integer',['unsigned'|['big']]),
							#<%% Line 1063
							  LSize>(%% Line 1063
								 8,1,'integer',['unsigned'|['big']])}#
						  in  let <NSegBs> =
							  [_12|%% Line 1063
							       SegBs]
						      in  let <_14> =
							      call %% Line 1064
								   'erlang':%% Line 1064
									    '+'
								  (%% Line 1064
								   Addr, %% Line 1064
									 BSz)
							  in  let <NCache> =
								  call %% Line 1064
								       'erlang':%% Line 1064
										'setelement'
								      (%% Line 1064
								       LSize, %% Line 1064
									      Cache, %% Line 1064
										     [_14|[_4|L]])
							      in  %% Line 1065
								  apply 'make_slots'/4
								      (Bins, NCache, NSegBs, NASz)
					      ( <_11> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_11})
						-| ['compiler_generated'] )
					    end
				    ( <_9> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_9})
				      -| ['compiler_generated'] )
				  end
	      %% Line 1066
	      <[],Cache,SegBs,ASz> when 'true' ->
		  %% Line 1067
		  {Cache,SegBs,ASz}
	      ( <_19,_18,_17,_16> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_19,_18,_17,_16})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'make_slots',4}}] )
      -| [{'function',{'make_slots',4}}] )
'fast_output'/5 =
    %% Line 1069
    ( fun (_0,_1,_2,_3,_4) ->
	  %% Line 1070
	  ( fun (_11) ->
		case _11 of
		  <'close'> when 'true' ->
		      %% Line 1071
		      apply 'fast_output_end'/2
			  (_0, _1)
		  %% Line 1072
		  <L> when 'true' ->
		      %% Line 1073
		      ( case _0 of
			  ( <( {'head',_18,_19,_20,_rec30,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45}
			       -| ['compiler_generated'] )> when 'true' ->
				case call 'file':'position'
					 (_rec30, _3) of
				  %% Line 1074
				  <{'ok',_47}>
				      when call 'erlang':'=:='
					    (_47,
					     _3) ->
				      let <NewSegAddr> =
					  case %% Line 1075
					       <L,_2,_0,_3,_3> of
					    %% Line 1102
					    ( <( [( #{( #<Slot>(( 32
								  -| ['compiler_generated'] ),( 1
												-| ['compiler_generated'] ),( 'integer'
															      -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			    -| ['compiler_generated'] ))
							-| ['compiler_generated'] ),
						      ( #<BSize>(( 32
								   -| ['compiler_generated'] ),( 1
												 -| ['compiler_generated'] ),( 'integer'
															       -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			     -| ['compiler_generated'] ))
							-| ['compiler_generated'] ),
						      ( #<AddrToBe>(( 32
								      -| ['compiler_generated'] ),( 1
												    -| ['compiler_generated'] ),( 'integer'
																  -| ['compiler_generated'] ),( ['unsigned'|['big']]
																				-| ['compiler_generated'] ))
							-| ['compiler_generated'] ),
						      ( #<LSize>(( 8
								   -| ['compiler_generated'] ),( 1
												 -| ['compiler_generated'] ),( 'integer'
															       -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			     -| ['compiler_generated'] ))
							-| ['compiler_generated'] )}#
						    -| ['compiler_generated'] )|Bins]
						 -| ['compiler_generated'] ),_82,_83,_84,%% Line 1103
											 SS> when ( 'true'
												    -| ['compiler_generated'] ) ->
						  ( let <_7> =
							call %% Line 1107
							     ( 'erlang'
							       -| ['compiler_generated'] ):%% Line 1107
											   ( '*'
											     -| ['compiler_generated'] )
							    (%% Line 1107
							     ( 8
							       -| ['compiler_generated'] ), %% Line 1107
											    Slot)
						    in  ( let <Pos> =
							      call %% Line 1107
								   ( 'erlang'
								     -| ['compiler_generated'] ):%% Line 1107
												 ( '+'
												   -| ['compiler_generated'] )
								  (%% Line 1107
								   SS, _7)
							  in  %% Line 1108
							      ( apply 'write_segment_file'/10
								    (Bins, _82, _83, ( []
										       -| ['compiler_generated'] ), _84, SS, Pos, %% Line 1109
																  BSize, %% Line 1109
																	 AddrToBe, %% Line 1109
																		   LSize)
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1110
					    ( <( []
						 -| ['compiler_generated'] ),_X_Bases,_86,_87,_X_SS> when ( 'true'
													    -| ['compiler_generated'] ) ->
						  ( do  %% Line 1111
							( call ( 'dets_utils'
								 -| ['compiler_generated'] ):( 'write'
											       -| ['compiler_generated'] )
							      (_86, ( []
								      -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
							_87
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_14,_13,_12,_10,_9> when ( 'true'
									  -| ['compiler_generated'] ) ->
						  %% Line 1102
						  ( primop ( 'match_fail'
							     -| ['compiler_generated'] )
							(( {( 'function_clause'
							      -| ['compiler_generated'] ),_14,_13,_12,( []
													-| ['compiler_generated'] ),_10,_9}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				      in  %% Line 1077
					  apply 'fast_output2'/6
					      (_0, _1, _2, NewSegAddr, _3, _4)
				  %% Line 1079
				  <Error> when 'true' ->
				      catch
					  %% Line 1080
					  ( case _0 of
					      ( <( {'head',_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_rec31,_69,_70,_71,_72,_73,_74,_75}
						   -| ['compiler_generated'] )> when 'true' ->
						    call 'dets_utils':'file_error'
							(Error, _rec31)
						-| ['compiler_generated'] )
					      ( <_76> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','head'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				end
			    -| ['compiler_generated'] )
			  ( <_46> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','head'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		end
	    -| [{'id',{0,0,'-fast_output/5-fun-0-'}}] )
      -| [{'function',{'fast_output',5}}] )
'fast_output2'/6 =
    %% Line 1084
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  %% Line 1085
	  ( fun (_9) ->
		case _9 of
		  <'close'> when 'true' ->
		      let <FinalZ> =
			  call %% Line 1086
			       'erlang':%% Line 1086
					'-'
			      (_5, _3)
		      in  let <_7> =
			      call %% Line 1087
				   'dets_utils':%% Line 1087
						'make_zeros'
				  (%% Line 1087
				   FinalZ)
			  in  do  %% Line 1087
				  call 'dets_utils':'write'
				      (_0, _7)
				  %% Line 1088
				  apply 'fast_output_end'/2
				      (_0, _1)
		  %% Line 1089
		  <L> when 'true' ->
		      let <NewSegAddr> =
			  case %% Line 1090
			       <L,_2,_0,_3,_4> of
			    %% Line 1102
			    ( <( [( #{( #<Slot>(( 32
						  -| ['compiler_generated'] ),( 1
										-| ['compiler_generated'] ),( 'integer'
													      -| ['compiler_generated'] ),( ['unsigned'|['big']]
																	    -| ['compiler_generated'] ))
					-| ['compiler_generated'] ),
				      ( #<BSize>(( 32
						   -| ['compiler_generated'] ),( 1
										 -| ['compiler_generated'] ),( 'integer'
													       -| ['compiler_generated'] ),( ['unsigned'|['big']]
																	     -| ['compiler_generated'] ))
					-| ['compiler_generated'] ),
				      ( #<AddrToBe>(( 32
						      -| ['compiler_generated'] ),( 1
										    -| ['compiler_generated'] ),( 'integer'
														  -| ['compiler_generated'] ),( ['unsigned'|['big']]
																		-| ['compiler_generated'] ))
					-| ['compiler_generated'] ),
				      ( #<LSize>(( 8
						   -| ['compiler_generated'] ),( 1
										 -| ['compiler_generated'] ),( 'integer'
													       -| ['compiler_generated'] ),( ['unsigned'|['big']]
																	     -| ['compiler_generated'] ))
					-| ['compiler_generated'] )}#
				    -| ['compiler_generated'] )|Bins]
				 -| ['compiler_generated'] ),_23,_24,_25,_26> when ( 'true'
										     -| ['compiler_generated'] ) ->
				  ( let <_7> =
					call %% Line 1107
					     ( 'erlang'
					       -| ['compiler_generated'] ):%% Line 1107
									   ( '*'
									     -| ['compiler_generated'] )
					    (%% Line 1107
					     ( 8
					       -| ['compiler_generated'] ), %% Line 1107
									    Slot)
				    in  ( let <Pos> =
					      call %% Line 1107
						   ( 'erlang'
						     -| ['compiler_generated'] ):%% Line 1107
										 ( '+'
										   -| ['compiler_generated'] )
						  (_26, _7)
					  in  %% Line 1108
					      ( apply 'write_segment_file'/10
						    (Bins, _23, _24, ( []
								       -| ['compiler_generated'] ), _25, _26, Pos, %% Line 1109
														   BSize, %% Line 1109
															  AddrToBe, %% Line 1109
																    LSize)
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 1110
			    ( <( []
				 -| ['compiler_generated'] ),_X_Bases,_27,_28,_X_SS> when ( 'true'
											    -| ['compiler_generated'] ) ->
				  ( do  %% Line 1111
					( call ( 'dets_utils'
						 -| ['compiler_generated'] ):( 'write'
									       -| ['compiler_generated'] )
					      (_27, ( []
						      -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
					_28
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_14,_13,_12,_10,_29> when ( 'true'
							   -| ['compiler_generated'] ) ->
				  %% Line 1102
				  ( primop ( 'match_fail'
					     -| ['compiler_generated'] )
					(( {( 'function_clause'
					      -| ['compiler_generated'] ),_14,_13,_12,( []
											-| ['compiler_generated'] ),_10,_29}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      in  %% Line 1091
			  apply 'fast_output2'/6
			      (_0, _1, _2, NewSegAddr, _4, _5)
		end
	    -| [{'id',{0,0,'-fast_output2/6-fun-0-'}}] )
      -| [{'function',{'fast_output2',6}}] )
'fast_output_end'/2 =
    %% Line 1094
    ( fun (_0,_1) ->
	  let <_7> =
	      fun (_4,_3) ->
		  %% Line 1095
		  case <_4,_3> of
		    <{_X_Sz,_X_Pos,Cnt,NoC},Acc> when 'true' ->
			let <_2> =
			    call 'erlang':'=:='
				(Cnt, NoC)
			in  call 'erlang':'and'
				(_2, Acc)
		    ( <_6,_5> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',_6,_5})
		      -| ['compiler_generated'] )
		  end
	  in  %% Line 1095
	      case call 'ets':'foldl'
		       (_7, %% Line 1096
			    'true', _1) of
		%% Line 1097
		<'true'> when 'true' ->
		    {'ok',_0}
		%% Line 1098
		<'false'> when 'true' ->
		    {'error','invalid_objects_list'}
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_8})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'fast_output_end',2}}] )
'write_segment_file'/6 =
    %% Line 1102
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  ( case <_0,_1,_2,_3,_4,_5> of
	      <[#{#<Slot>(32,1,'integer',['unsigned'|['big']]),
		  #<BSize>(32,1,'integer',['unsigned'|['big']]),
		  #<AddrToBe>(32,1,'integer',['unsigned'|['big']]),
		  #<LSize>(8,1,'integer',['unsigned'|['big']])}#|Bins],%% Line 1103
								       Bases,%% Line 1103
									     Head,%% Line 1103
										  Ws,%% Line 1103
										     SegAddr,%% Line 1103
											     SS> when 'true' ->
		  let <_7> =
		      call %% Line 1107
			   'erlang':%% Line 1107
				    '*'
			  (%% Line 1107
			   8, %% Line 1107
			      Slot)
		  in  let <Pos> =
			  call %% Line 1107
			       'erlang':%% Line 1107
					'+'
			      (%% Line 1107
			       SS, _7)
		      in  %% Line 1108
			  apply 'write_segment_file'/10
			      (Bins, Bases, Head, Ws, SegAddr, SS, Pos, %% Line 1109
									BSize, %% Line 1109
									       AddrToBe, %% Line 1109
											 LSize)
	      %% Line 1110
	      <[],_X_Bases,Head,Ws,SegAddr,_X_SS> when 'true' ->
		  do  %% Line 1111
		      call 'dets_utils':'write'
			  (Head, Ws)
		      %% Line 1112
		      SegAddr
	      ( <_14,_13,_12,_11,_10,_9> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_14,_13,_12,_11,_10,_9})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'write_segment_file',6}}] )
      -| [{'function',{'write_segment_file',6}}] )
'write_segment_file'/10 =
    %% Line 1114
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9> of
	      <Bins,Bases,Head,Ws,SegAddr,SS,Pos,BSize,%% Line 1115
						       AddrToBe,%% Line 1115
								LSize>
		  when %% Line 1115
		    call 'erlang':'=:='
			(Pos,
			 SegAddr) ->
		  let <_10> =
		      call %% Line 1116
			   'erlang':%% Line 1116
				    'element'
			  (%% Line 1116
			   LSize, %% Line 1116
				  Bases)
		  in  let <Addr> =
			  call %% Line 1116
			       'erlang':%% Line 1116
					'+'
			      (%% Line 1116
			       AddrToBe, _10)
		      in  let <_12> =
			      #{#<%% Line 1117
				  BSize>(%% Line 1117
					 32,1,'integer',['unsigned'|['big']]),
				#<%% Line 1117
				  Addr>(%% Line 1117
					32,1,'integer',['unsigned'|['big']])}#
			  in  let <NWs> =
				  [%% Line 1117
				   Ws|_12]
			      in  let <_15> =
				      call %% Line 1118
					   'erlang':%% Line 1118
						    '+'
					  (%% Line 1118
					   SegAddr, %% Line 1118
						    8)
				  in  ( case %% Line 1118
					     <Bins,Bases,Head,NWs,_15,SS> of
					  ( <( [( #{( #<Slot>(( 32
								-| ['compiler_generated'] ),( 1
											      -| ['compiler_generated'] ),( 'integer'
															    -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			  -| ['compiler_generated'] ))
						      -| ['compiler_generated'] ),
						    ( #<_50>(( 32
							       -| ['compiler_generated'] ),( 1
											     -| ['compiler_generated'] ),( 'integer'
															   -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			 -| ['compiler_generated'] ))
						      -| ['compiler_generated'] ),
						    ( #<_51>(( 32
							       -| ['compiler_generated'] ),( 1
											     -| ['compiler_generated'] ),( 'integer'
															   -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			 -| ['compiler_generated'] ))
						      -| ['compiler_generated'] ),
						    ( #<_52>(( 8
							       -| ['compiler_generated'] ),( 1
											     -| ['compiler_generated'] ),( 'integer'
															   -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			 -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )}#
						  -| ['compiler_generated'] )|_53]
					       -| ['compiler_generated'] ),_54,_55,_56,_57,_58> when ( 'true'
												       -| ['compiler_generated'] ) ->
						( let <_60> =
						      call ( 'erlang'
							     -| ['compiler_generated'] ):( '*'
											   -| ['compiler_generated'] )
							  (( 8
							     -| ['compiler_generated'] ), Slot)
						  in  ( let <_61> =
							    call ( 'erlang'
								   -| ['compiler_generated'] ):( '+'
												 -| ['compiler_generated'] )
								(_58, _60)
							in  ( apply 'write_segment_file'/10
								  (_53, _54, _55, _56, _57, _58, _61, _50, _51, _52)
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <( []
					       -| ['compiler_generated'] ),_X_Bases,_62,_63,_64,_X_SS> when ( 'true'
													      -| ['compiler_generated'] ) ->
						( do  ( call ( 'dets_utils'
							       -| ['compiler_generated'] ):( 'write'
											     -| ['compiler_generated'] )
							    (_62, _63)
							-| ['compiler_generated'] )
						      _64
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_65,_13,_66,_11,_67,_68> when ( 'true'
									     -| ['compiler_generated'] ) ->
						( primop ( 'match_fail'
							   -| ['compiler_generated'] )
						      (( {( 'function_clause'
							    -| ['compiler_generated'] ),_65,_13,_66,_11,_67,_68}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated',{'function',{'write_segment_file',6}}] )
	      %% Line 1119
	      <Bins,Bases,Head,Ws,SegAddr,SS,Pos,BSize,%% Line 1120
						       AddrToBe,%% Line 1120
								LSize>
		  when %% Line 1120
		    try
			let <_16> =
			    call 'erlang':'-'
				(Pos, SegAddr)
			in  call 'erlang':'<'
				(_16, 100)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  let <_17> =
		      call %% Line 1121
			   'erlang':%% Line 1121
				    'element'
			  (%% Line 1121
			   LSize, %% Line 1121
				  Bases)
		  in  let <Addr> =
			  call %% Line 1121
			       'erlang':%% Line 1121
					'+'
			      (%% Line 1121
			       AddrToBe, _17)
		      in  let <NoZeros> =
			      call %% Line 1122
				   'erlang':%% Line 1122
					    '-'
				  (%% Line 1122
				   Pos, %% Line 1122
					SegAddr)
			  in  let <_20> =
				  #{#<%% Line 1123
				      0>(%% Line 1123
					 NoZeros,8,'integer',['unsigned'|['big']]),
				    #<%% Line 1123
				      BSize>(%% Line 1123
					     32,1,'integer',['unsigned'|['big']]),
				    #<%% Line 1123
				      Addr>(%% Line 1123
					    32,1,'integer',['unsigned'|['big']])}#
			      in  let <NWs> =
				      [%% Line 1123
				       Ws|_20]
				  in  let <_23> =
					  call %% Line 1124
					       'erlang':%% Line 1124
							'+'
					      (%% Line 1124
					       SegAddr, %% Line 1124
							NoZeros)
				      in  let <NSegAddr> =
					      call %% Line 1124
						   'erlang':%% Line 1124
							    '+'
						  (_23, %% Line 1124
							8)
					  in  ( case %% Line 1125
						     <Bins,Bases,Head,NWs,NSegAddr,SS> of
						  ( <( [( #{( #<Slot>(( 32
									-| ['compiler_generated'] ),( 1
												      -| ['compiler_generated'] ),( 'integer'
																    -| ['compiler_generated'] ),( ['unsigned'|['big']]
																				  -| ['compiler_generated'] ))
							      -| ['compiler_generated'] ),
							    ( #<_75>(( 32
								       -| ['compiler_generated'] ),( 1
												     -| ['compiler_generated'] ),( 'integer'
																   -| ['compiler_generated'] ),( ['unsigned'|['big']]
																				 -| ['compiler_generated'] ))
							      -| ['compiler_generated'] ),
							    ( #<_76>(( 32
								       -| ['compiler_generated'] ),( 1
												     -| ['compiler_generated'] ),( 'integer'
																   -| ['compiler_generated'] ),( ['unsigned'|['big']]
																				 -| ['compiler_generated'] ))
							      -| ['compiler_generated'] ),
							    ( #<_77>(( 8
								       -| ['compiler_generated'] ),( 1
												     -| ['compiler_generated'] ),( 'integer'
																   -| ['compiler_generated'] ),( ['unsigned'|['big']]
																				 -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )}#
							  -| ['compiler_generated'] )|_78]
						       -| ['compiler_generated'] ),_79,_80,_81,_82,_83> when ( 'true'
													       -| ['compiler_generated'] ) ->
							( let <_85> =
							      call ( 'erlang'
								     -| ['compiler_generated'] ):( '*'
												   -| ['compiler_generated'] )
								  (( 8
								     -| ['compiler_generated'] ), Slot)
							  in  ( let <_86> =
								    call ( 'erlang'
									   -| ['compiler_generated'] ):( '+'
													 -| ['compiler_generated'] )
									(_83, _85)
								in  ( apply 'write_segment_file'/10
									  (_78, _79, _80, _81, _82, _83, _86, _75, _76, _77)
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( []
						       -| ['compiler_generated'] ),_X_Bases,_87,_88,_89,_X_SS> when ( 'true'
														      -| ['compiler_generated'] ) ->
							( do  ( call ( 'dets_utils'
								       -| ['compiler_generated'] ):( 'write'
												     -| ['compiler_generated'] )
								    (_87, _88)
								-| ['compiler_generated'] )
							      _89
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <_14,_13,_12,_11,_10,_90> when ( 'true'
										     -| ['compiler_generated'] ) ->
							( primop ( 'match_fail'
								   -| ['compiler_generated'] )
							      (( {( 'function_clause'
								    -| ['compiler_generated'] ),_14,_13,_12,_11,_10,_90}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated',{'function',{'write_segment_file',6}}] )
	      %% Line 1126
	      <Bins,Bases,Head,Ws,SegAddr,SS,Pos,BSize,%% Line 1127
						       AddrToBe,%% Line 1127
								LSize> when 'true' ->
		  let <_25> =
		      call %% Line 1128
			   'erlang':%% Line 1128
				    'element'
			  (%% Line 1128
			   LSize, %% Line 1128
				  Bases)
		  in  let <Addr> =
			  call %% Line 1128
			       'erlang':%% Line 1128
					'+'
			      (%% Line 1128
			       AddrToBe, _25)
		      in  let <NoZeros> =
			      call %% Line 1129
				   'erlang':%% Line 1129
					    '-'
				  (%% Line 1129
				   Pos, %% Line 1129
					SegAddr)
			  in  let <_28> =
				  call %% Line 1130
				       'dets_utils':%% Line 1130
						    'make_zeros'
				      (%% Line 1130
				       NoZeros)
			      in  let <_29> =
				      #{#<%% Line 1130
					  BSize>(%% Line 1130
						 32,1,'integer',['unsigned'|['big']]),
					#<%% Line 1130
					  Addr>(%% Line 1130
						32,1,'integer',['unsigned'|['big']])}#
				  in  let <NWs> =
					  [%% Line 1130
					   Ws|%% Line 1130
					      [_28|_29]]
				      in  let <_32> =
					      call %% Line 1131
						   'erlang':%% Line 1131
							    '+'
						  (%% Line 1131
						   SegAddr, %% Line 1131
							    NoZeros)
					  in  let <NSegAddr> =
						  call %% Line 1131
						       'erlang':%% Line 1131
								'+'
						      (_32, %% Line 1131
							    8)
					      in  ( case %% Line 1132
							 <Bins,Bases,Head,NWs,NSegAddr,SS> of
						      ( <( [( #{( #<Slot>(( 32
									    -| ['compiler_generated'] ),( 1
													  -| ['compiler_generated'] ),( 'integer'
																	-| ['compiler_generated'] ),( ['unsigned'|['big']]
																				      -| ['compiler_generated'] ))
								  -| ['compiler_generated'] ),
								( #<_97>(( 32
									   -| ['compiler_generated'] ),( 1
													 -| ['compiler_generated'] ),( 'integer'
																       -| ['compiler_generated'] ),( ['unsigned'|['big']]
																				     -| ['compiler_generated'] ))
								  -| ['compiler_generated'] ),
								( #<_98>(( 32
									   -| ['compiler_generated'] ),( 1
													 -| ['compiler_generated'] ),( 'integer'
																       -| ['compiler_generated'] ),( ['unsigned'|['big']]
																				     -| ['compiler_generated'] ))
								  -| ['compiler_generated'] ),
								( #<_99>(( 8
									   -| ['compiler_generated'] ),( 1
													 -| ['compiler_generated'] ),( 'integer'
																       -| ['compiler_generated'] ),( ['unsigned'|['big']]
																				     -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )}#
							      -| ['compiler_generated'] )|_100]
							   -| ['compiler_generated'] ),_101,_102,_103,_104,_105> when ( 'true'
															-| ['compiler_generated'] ) ->
							    ( let <_107> =
								  call ( 'erlang'
									 -| ['compiler_generated'] ):( '*'
												       -| ['compiler_generated'] )
								      (( 8
									 -| ['compiler_generated'] ), Slot)
							      in  ( let <_108> =
									call ( 'erlang'
									       -| ['compiler_generated'] ):( '+'
													     -| ['compiler_generated'] )
									    (_105, _107)
								    in  ( apply 'write_segment_file'/10
									      (_100, _101, _102, _103, _104, _105, _108, _97, _98, _99)
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						      ( <( []
							   -| ['compiler_generated'] ),_X_Bases,_109,_110,_111,_X_SS> when ( 'true'
															     -| ['compiler_generated'] ) ->
							    ( do  ( call ( 'dets_utils'
									   -| ['compiler_generated'] ):( 'write'
													 -| ['compiler_generated'] )
									(_109, _110)
								    -| ['compiler_generated'] )
								  _111
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						      ( <_14,_13,_12,_11,_10,_112> when ( 'true'
											  -| ['compiler_generated'] ) ->
							    ( primop ( 'match_fail'
								       -| ['compiler_generated'] )
								  (( {( 'function_clause'
									-| ['compiler_generated'] ),_14,_13,_12,_11,_10,_112}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated',{'function',{'write_segment_file',6}}] )
	    end
	    -| [{'function',{'write_segment_file',10}}] )
      -| [{'function',{'write_segment_file',10}}] )
'fast_write_all_sizes'/3 =
    %% Line 1134
    ( fun (_0,_1,_2) ->
	  let <_3> =
	      call %% Line 1135
		   'erlang':%% Line 1135
			    'tuple_to_list'
		  (_0)
	  in  let <CacheL> =
		  call %% Line 1135
		       'lists':%% Line 1135
			       'reverse'
		      (_3)
	      in  let <_5> =
		      call %% Line 1136
			   'erlang':%% Line 1136
				    'tuple_size'
			  (_0)
		  in  %% Line 1136
		      apply 'fast_write_sizes'/6
			  (CacheL, _5, _1, _2, [], [])
      -| [{'function',{'fast_write_all_sizes',3}}] )
'fast_write_sizes'/6 =
    %% Line 1138
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  ( case <_0,_1,_2,_3,_4,_5> of
	      <[],_X_Sz,_X_SizeT,Head,NCL,PwriteList> when 'true' ->
		  %% Line 1139
		  case Head of
		    <{'head',_25,_26,_27,Fd,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,FileName,_45,_46,_47,_48,_49,_50,_51}> when 'true' ->
			%% Line 1140
			case call 'dets_utils':'pwrite'
				 (Fd, FileName, PwriteList) of
			  <'ok'> when 'true' ->
			      %% Line 1141
			      call 'erlang':'list_to_tuple'
				  (NCL)
			  ( <_7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_7})
			    -| ['compiler_generated'] )
			end
		    ( <_6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_6})
		      -| ['compiler_generated'] )
		  end
	      %% Line 1142
	      <[C = [_X_Addr|[]]|CL],Sz,SizeT,Head,NCL,PwriteList> when 'true' ->
		  let <_8> =
		      call %% Line 1143
			   'erlang':%% Line 1143
				    '-'
			  (%% Line 1143
			   Sz, %% Line 1143
			       1)
		  in  %% Line 1143
		      apply 'fast_write_sizes'/6
			  (CL, _8, SizeT, Head, [C|NCL], PwriteList)
	      %% Line 1144
	      <[[Addr|C]|CL],Sz,SizeT,Head,NCL,PwriteList> when 'true' ->
		  %% Line 1145
		  case call 'ets':'lookup'
			   (SizeT, Sz) of
		    %% Line 1146
		    <[]> when 'true' ->
			%% Line 1147
			call 'erlang':'throw'
			    ({'error','invalid_objects_list'})
		    %% Line 1148
		    <[{_52,Position,_X_ObjCounter,_X_NoCollections}|[]]>
			when call 'erlang':'=:='
			      (_52,
			       Sz) ->
			let <NoColls> =
			    call %% Line 1150
				 'erlang':%% Line 1150
					  'length'
				(%% Line 1150
				 C)
			in  do  %% Line 1151
				( call ( 'ets'
					 -| ['result_not_wanted'] ):( 'update_counter'
								      -| ['result_not_wanted'] )
				      (SizeT, Sz, ( {( 3
						       -| ['result_not_wanted'] ),NoColls}
						    -| ['result_not_wanted'] ))
				  -| ['result_not_wanted'] )
				let <_14> =
				    call %% Line 1152
					 'erlang':%% Line 1152
						  '+'
					(%% Line 1152
					 Position, %% Line 1152
						   Addr)
				in  let <_11> =
					call %% Line 1152
					     'erlang':%% Line 1152
						      '-'
					    (%% Line 1152
					     Sz, %% Line 1152
						 1)
				    in  let <_12> =
					    call %% Line 1152
						 'erlang':%% Line 1152
							  'bsl'
						(%% Line 1152
						 1, _11)
					in  let <_13> =
						call %% Line 1152
						     'erlang':%% Line 1152
							      '*'
						    (%% Line 1152
						     NoColls, _12)
					    in  let <Pos> =
						    call %% Line 1152
							 'erlang':%% Line 1152
								  '-'
							(_14, _13)
						in  let <_17> =
							call %% Line 1153
							     'erlang':%% Line 1153
								      '-'
							    (%% Line 1153
							     Sz, %% Line 1153
								 1)
						    in  let <_16> =
							    call %% Line 1154
								 'lists':%% Line 1154
									 'reverse'
								(%% Line 1154
								 C)
							in  %% Line 1153
							    apply 'fast_write_sizes'/6
								(CL, _17, SizeT, Head, [[Addr|[]]|NCL], %% Line 1154
													[{Pos,_16}|PwriteList])
		    ( <_18> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_18})
		      -| ['compiler_generated'] )
		  end
	      ( <_24,_23,_22,_21,_20,_19> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_24,_23,_22,_21,_20,_19})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'fast_write_sizes',6}}] )
      -| [{'function',{'fast_write_sizes',6}}] )
'prepare_file_init'/5 =
    %% Line 1157
    ( fun (_0,_1,_2,_3,_4) ->
	  %% Line 1159
	  case call 'dets_utils':'alloc'
		   (_4, %% Line 2475
			( 2047
			  -| ['compiler_generated'] )) of
	    <{_48,SegEnd,_49}> when 'true' ->
		%% Line 1160
		case _4 of
		  <{'head',_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78}> when 'true' ->
		      let <_9> =
			  call 'erlang':'setelement'
			      (7, _4, _1)
		      in  let <_11> =
			      call 'erlang':'setelement'
				  (6, _9, _0)
			  in  %% Line 1161
			      case call 'ets':'insert'
				       (_3, {1,0,[],0}) of
				<'true'> when 'true' ->
				    let <_18> =
					fun (_16) ->
					    %% Line 1162
					    case _16 of
					      <{LogSz,NoColls}> when 'true' ->
						  let <_14> =
						      call %% Line 1163
							   'erlang':%% Line 1163
								    '+'
							  (%% Line 1163
							   LogSz, %% Line 1163
								  1)
						  in  let <_80> =
							  call %% Line 1163
							       'ets':%% Line 1163
								     'insert'
							      (_3, %% Line 1163
								   {_14,0,0,NoColls})
						      in  %% Line 1163
							  case _80 of
							    <'true'> when 'true' ->
								( _80
								  -| ['compiler_generated'] )
							    ( <_15> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_15})
							      -| ['compiler_generated'] )
							  end
					      ( <_17> when 'true' ->
						    primop 'match_fail'
							({'function_clause',_17})
						-| ['compiler_generated'] )
					    end
				    in  do  %% Line 1162
					    call 'lists':'foreach'
						(_18, _2)
					    %% Line 1165
					    case apply 'allocate_all_objects'/2
						     (_11, _3) of
					      <{NewHead,NL0,MaxSz,EndOfFile}> when 'true' ->
						  %% Line 1166
						  case NL0 of
						    <[{1,SegAddr,[],0}|NL]> when 'true' ->
							%% Line 1167
							case call 'ets':'delete_all_objects'
								 (_3) of
							  <'true'> when 'true' ->
							      let <_25> =
								  fun (_23) ->
								      let <_81> =
									  call %% Line 1168
									       'ets':%% Line 1168
										     'insert'
									      (_3, %% Line 1168
										   _23)
								      in  %% Line 1168
									  case _81 of
									    <'true'> when 'true' ->
										( _81
										  -| ['compiler_generated'] )
									    ( <_22> when 'true' ->
										  primop 'match_fail'
										      ({'badmatch',_22})
									      -| ['compiler_generated'] )
									  end
							      in  do  %% Line 1168
								      call 'lists':'foreach'
									  (_25, NL)
								      let <_31> =
									  fun (_28,_27) ->
									      %% Line 1169
									      case <_28,_27> of
										<{LSz,P,_X_D,_X_N},A> when 'true' ->
										    call 'erlang':'setelement'
											(LSz, A, P)
										( <_30,_29> when 'true' ->
										      primop 'match_fail'
											  ({'function_clause',_30,_29})
										  -| ['compiler_generated'] )
									      end
								      in  let <_26> =
									      call %% Line 1170
										   'erlang':%% Line 1170
											    'make_tuple'
										  (%% Line 1170
										   MaxSz, %% Line 1170
											  0)
									  in  let <Bases> =
										  call %% Line 1169
										       'lists':%% Line 1169
											       'foldl'
										      (_31, _26, %% Line 1170
												 NL)
									      in  let <_40> =
										      fun (_37,_36) ->
											  %% Line 1171
											  case <_37,_36> of
											    <{LSz,_82,_83,N},A> when 'true' ->
												let <_33> =
												    call 'erlang':'-'
													(LSz, 1)
												in  let <_34> =
													call 'erlang':'bsl'
													    (1, _33)
												    in  let <_35> =
													    call 'erlang':'*'
														(_34, N)
													in  call 'erlang':'+'
														(A, _35)
											    ( <_39,_38> when 'true' ->
												  primop 'match_fail'
												      ({'function_clause',_39,_38})
											      -| ['compiler_generated'] )
											  end
										  in  let <Est> =
											  call %% Line 1171
											       'lists':%% Line 1171
												       'foldl'
											      (_40, %% Line 1171
												    0, %% Line 1171
												       NL)
										      in  %% Line 1172
											  case apply 'write_bytes'/3
												   (NewHead, EndOfFile, Est) of
											    <'ok'> when 'true' ->
												%% Line 1173
												{NewHead,Bases,SegAddr,SegEnd}
											    ( <_42> when 'true' ->
												  primop 'match_fail'
												      ({'badmatch',_42})
											      -| ['compiler_generated'] )
											  end
							  ( <_21> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_21})
							    -| ['compiler_generated'] )
							end
						    ( <_20> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_20})
						      -| ['compiler_generated'] )
						  end
					      ( <_19> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_19})
						-| ['compiler_generated'] )
					    end
				( <_13> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_13})
				  -| ['compiler_generated'] )
			      end
		  ( <_79> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','head'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
	    ( <_7> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_7})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'prepare_file_init',5}}] )
'write_bytes'/3 =
    %% Line 1181
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <_X_Head,_X_EndOfFile,Est>
		  when call 'erlang':'<'
			(Est,
			 491520) ->
		  %% Line 1182
		  'ok'
	      %% Line 1183
	      <Head,EndOfFile,_X_Est> when 'true' ->
		  %% Line 1184
		  ( case Head of
		      ( <( {'head',_17,_18,_19,_rec33,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44}
			   -| ['compiler_generated'] )> when 'true' ->
			    %% Line 1185
			    case call 'file':'position'
				     (_rec33, 'eof') of
			      <{'ok',Start}> when 'true' ->
				  let <BytesToWrite> =
				      call %% Line 1186
					   'erlang':%% Line 1186
						    '-'
					  (%% Line 1186
					   EndOfFile, %% Line 1186
						      Start)
				  in  let <_10> =
					  call %% Line 1188
					       'lists':%% Line 1188
						       'seq'
					      (%% Line 1188
					       0, %% Line 1188
						  255)
				      in  let <_12> =
					      call %% Line 1188
						   'lists':%% Line 1188
							   'duplicate'
						  (%% Line 1188
						   256, _10)
					  in  let <Bin> =
						  call %% Line 1188
						       'erlang':%% Line 1188
								'list_to_binary'
						      (_12)
					      in  %% Line 1189
						  apply 'write_loop'/3
						      (Head, BytesToWrite, Bin)
			      ( <_7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_7})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_45> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	    end
	    -| [{'function',{'write_bytes',3}}] )
      -| [{'function',{'write_bytes',3}}] )
'write_loop'/3 =
    %% Line 1191
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <Head,BytesToWrite,Bin>
		  when try
			let <_3> =
			    call 'erlang':'byte_size'
				(Bin)
			in  call 'erlang':'>='
				(BytesToWrite, _3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  %% Line 1192
		  ( case Head of
		      ( <( {'head',_15,_16,_17,_rec34,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42}
			   -| ['compiler_generated'] )> when 'true' ->
			    case call 'file':'write'
				     (_rec34, Bin) of
			      %% Line 1193
			      <'ok'> when 'true' ->
				  let <_6> =
				      call 'erlang':'byte_size'
					  (Bin)
				  in  let <_7> =
					  call 'erlang':'-'
					      (BytesToWrite, _6)
				      in  apply 'write_loop'/3
					      (Head, _7, Bin)
			      %% Line 1194
			      <Error> when 'true' ->
				  ( case Head of
				      ( <( {'head',_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_rec35,_65,_66,_67,_68,_69,_70,_71}
					   -| ['compiler_generated'] )> when 'true' ->
					    call 'dets_utils':'file_error'
						(Error, _rec35)
					-| ['compiler_generated'] )
				      ( <_72> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','head'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_43> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 1196
	      <_X_Head,0,_X_Bin> when 'true' ->
		  %% Line 1197
		  'ok'
	      %% Line 1198
	      <Head,BytesToWrite,Bin> when 'true' ->
		  %% Line 1199
		  case Bin of
		    <#{#<SmallBin>(BytesToWrite,8,'binary',['unsigned'|['big']]),
		       #<_73>(( 'all'
				-| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
			%% Line 1200
			apply 'write_loop'/3
			    (Head, BytesToWrite, SmallBin)
		    ( <_11> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_11})
		      -| ['compiler_generated'] )
		  end
	    end
	    -| [{'function',{'write_loop',3}}] )
      -| [{'function',{'write_loop',3}}] )
'allocate_all_objects'/2 =
    %% Line 1204
    ( fun (_0,_1) ->
	  let <_2> =
	      call %% Line 1205
		   'ets':%% Line 1205
			 'tab2list'
		  (_1)
	  in  let <_3> =
		  call %% Line 1205
		       'lists':%% Line 1205
			       'keysort'
		      (%% Line 1205
		       1, _2)
	      in  let <DTL> =
		      call %% Line 1205
			   'lists':%% Line 1205
				   'reverse'
			  (_3)
		  in  let <_5> =
			  call %% Line 1206
			       'erlang':%% Line 1206
					'hd'
			      (%% Line 1206
			       DTL)
		      in  let <MaxSz> =
			      call %% Line 1206
				   'erlang':%% Line 1206
					    'element'
				  (%% Line 1206
				   1, _5)
			  in  %% Line 1207
			      case apply 'allocate_all'/3
				       (_0, DTL, []) of
				<{Head1,NL}> when 'true' ->
				    %% Line 1210
				    case call 'dets_utils':'alloc'
					     (Head1, 16) of
				      <{_X_Head,EndOfFile,_18}> when 'true' ->
					  %% Line 1211
					  ( case Head1 of
					      ( <( {'head',_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_rec38,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46}
						   -| ['compiler_generated'] )> when 'true' ->
						    let <_rec36> =
							case _rec38 of
							  ( <( NoColls = ( 'undefined'
									   -| ['compiler_generated'] )
							       -| ['compiler_generated'] )> when ( 'true'
												   -| ['compiler_generated'] ) ->
								NoColls
							    -| ['compiler_generated'] )
							  ( <NoColls> when ( 'true'
									     -| ['compiler_generated'] ) ->
								( apply 'max_objsize'/2
								      (NoColls, ( 0
										  -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
						    in  case Head1 of
							  <{'head',_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76}> when 'true' ->
							      let <_14> =
								  call 'erlang':'setelement'
								      (8, Head1, _rec36)
							      in  %% Line 1212
								  {_14,NL,MaxSz,EndOfFile}
							  ( <_77> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','head'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
						-| ['compiler_generated'] )
					      ( <_47> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','head'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      ( <_8> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_8})
					-| ['compiler_generated'] )
				    end
				( <_7> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_7})
				  -| ['compiler_generated'] )
			      end
      -| [{'function',{'allocate_all_objects',2}}] )
'allocate_all'/3 =
    %% Line 1222
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <Head,[{1,_34,Data,_35}|[]],L> when 'true' ->
		  %% Line 1227
		  ( case Head of
		      ( <( {'head',_36,_37,_rec39,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <NoParts> =
				apply 'no_parts'/1
				    (_rec39)
			    in  let <_6> =
				    call %% Line 1229
					 'erlang':%% Line 1229
						  '*'
					(%% Line 1229
					 NoParts, %% Line 1229
						  4)
				in  let <_7> =
					call %% Line 1229
					     'erlang':%% Line 1229
						      '*'
					    (_6, %% Line 1229
						 512)
				    in  let <Addr> =
					    call %% Line 1229
						 'erlang':%% Line 1229
							  '+'
						(%% Line 1229
						 1336, _7)
					in  %% Line 1230
					    {Head,[{1,Addr,Data,0}|L]}
			-| ['compiler_generated'] )
		      ( <_64> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 1231
	      <Head,[{LSize,_65,Data,NoCollections}|DTL],L> when 'true' ->
		  let <_16> =
		      call %% Line 1232
			   'erlang':%% Line 1232
				    '-'
			  (%% Line 1232
			   LSize, %% Line 1232
				  1)
		  in  let <Size> =
			  call %% Line 1232
			       'erlang':%% Line 1232
					'bsl'
			      (%% Line 1232
			       1, _16)
		      in  let <_18> =
			      call %% Line 2475
				   ( 'erlang'
				     -| ['compiler_generated'] ):%% Line 2475
								 ( '-'
								   -| ['compiler_generated'] )
				  (%% Line 1233
				   Size, %% Line 2475
					 ( 1
					   -| ['compiler_generated'] ))
			  in  %% Line 1233
			      case call 'dets_utils':'alloc'
				       (Head, _18) of
				<{_X_Head,Addr,_66}> when 'true' ->
				    let <Head1> =
					call %% Line 1234
					     'dets_utils':%% Line 1234
							  'alloc_many'
					    (%% Line 1234
					     Head, %% Line 1234
						   Size, %% Line 1234
							 NoCollections, %% Line 1234
									Addr)
				    in  %% Line 1235
					( case Head1 of
					    ( <( {'head',_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_rec40,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94}
						 -| ['compiler_generated'] )> when 'true' ->
						  let <_24> =
						      call %% Line 1236
							   'erlang':%% Line 1236
								    '-'
							  (%% Line 1236
							   LSize, %% Line 1236
								  1)
						  in  let <NewNoColls> =
							  call %% Line 1236
							       'orddict':%% Line 1236
									 'update_counter'
							      (_24, %% Line 1236
								    NoCollections, _rec40)
						      in  %% Line 1237
							  case Head1 of
							    <{'head',_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124}> when 'true' ->
								let <_28> =
								    call 'erlang':'setelement'
									(14, Head1, NewNoColls)
								in  let <E> =
									{%% Line 1238
									 LSize,%% Line 1238
									       Addr,%% Line 1238
										    Data,%% Line 1238
											 NoCollections}
								    in  %% Line 1239
									apply 'allocate_all'/3
									    (_28, DTL, [E|L])
							    ( <_125> when 'true' ->
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'error'
													 -| ['compiler_generated'] )
									(( {'badrecord','head'}
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
					      -| ['compiler_generated'] )
					    ( <_95> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','head'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				( <_19> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_19})
				  -| ['compiler_generated'] )
			      end
	      ( <_33,_32,_31> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_33,_32,_31})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'allocate_all',3}}] )
      -| [{'function',{'allocate_all',3}}] )
'bin2term'/2 =
    %% Line 1241
    ( fun (_0,_1) ->
	  %% Line 1242
	  apply 'bin2term1'/3
	      (_0, _1, [])
      -| [{'function',{'bin2term',2}}] )
'bin2term1'/3 =
    %% Line 1244
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <[#{#<Slot>(32,1,'integer',['unsigned'|['big']]),
		  #<Seq>(32,1,'integer',['unsigned'|['big']]),
		  #<BinTerm>(( 'all'
			       -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#|BTs],Kp,L> when 'true' ->
		  let <Term> =
		      call %% Line 1245
			   'erlang':%% Line 1245
				    'binary_to_term'
			  (%% Line 1245
			   BinTerm)
		  in  let <Key> =
			  call %% Line 1246
			       'erlang':%% Line 1246
					'element'
			      (%% Line 1246
			       Kp, %% Line 1246
				   Term)
		      in  %% Line 1247
			  apply 'bin2term1'/3
			      (BTs, Kp, [{Slot,Key,Seq,Term,BinTerm}|L])
	      %% Line 1248
	      <[],_X_Kp,L> when 'true' ->
		  %% Line 1249
		  call 'lists':'reverse'
		      (L)
	      ( <_7,_6,_5> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_7,_6,_5})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'bin2term1',3}}] )
      -| [{'function',{'bin2term1',3}}] )
'write_all_sizes'/4 =
    %% Line 1251
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <Cache = {},_X_SizeT,_X_Head,_X_More> when 'true' ->
		  %% Line 1252
		  Cache
	      %% Line 1253
	      <Cache,SizeT,Head,More> when 'true' ->
		  let <_4> =
		      call %% Line 1254
			   'erlang':%% Line 1254
				    'tuple_to_list'
			  (%% Line 1254
			   Cache)
		  in  let <CacheL> =
			  call %% Line 1254
			       'lists':%% Line 1254
				       'reverse'
			      (_4)
		      in  let <Sz> =
			      call %% Line 1255
				   'erlang':%% Line 1255
					    'length'
				  (%% Line 1255
				   CacheL)
			  in  let <_8> =
				  case %% Line 1256
				       call 'ets':'info'
					   (SizeT, 'size') of
				    %% Line 1257
				    <1>
					when call 'erlang':'=:='
					      (More,
					       'no_more') ->
					%% Line 1258
					apply 'all_sizes'/3
					    (CacheL, Sz, SizeT)
				    %% Line 1259
				    <_14> when 'true' ->
					%% Line 1260
					apply 'write_sizes'/4
					    (CacheL, Sz, SizeT, Head)
				  end
			      in  %% Line 1262
				  call 'erlang':'list_to_tuple'
				      (_8)
	    end
	    -| [{'function',{'write_all_sizes',4}}] )
      -| [{'function',{'write_all_sizes',4}}] )
'all_sizes'/3 =
    %% Line 1264
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <CL = [],_X_Sz,_X_SizeT> when 'true' ->
		  %% Line 1265
		  CL
	      %% Line 1266
	      <[C = []|CL],Sz,SizeT> when 'true' ->
		  let <_3> =
		      call %% Line 1267
			   'erlang':%% Line 1267
				    '-'
			  (%% Line 1267
			   Sz, %% Line 1267
			       1)
		  in  let <_4> =
			  apply %% Line 1267
				'all_sizes'/3
			      (%% Line 1267
			       CL, _3, %% Line 1267
				       SizeT)
		      in  %% Line 1267
			  [C|_4]
	      %% Line 1268
	      <[C0|CL],Sz,SizeT> when 'true' ->
		  let <C> =
		      call %% Line 1269
			   'lists':%% Line 1269
				   'reverse'
			  (%% Line 1269
			   C0)
		  in  let <NoCollections> =
			  call %% Line 1270
			       'erlang':%% Line 1270
					'length'
			      (%% Line 1270
			       C)
		      in  %% Line 1271
			  case call 'ets':'insert'
				   (SizeT, {Sz,0,C,NoCollections}) of
			    <'true'> when 'true' ->
				let <_8> =
				    call %% Line 1272
					 'erlang':%% Line 1272
						  '-'
					(%% Line 1272
					 Sz, %% Line 1272
					     1)
				in  let <_9> =
					apply %% Line 1272
					      'all_sizes'/3
					    (%% Line 1272
					     CL, _8, %% Line 1272
						     SizeT)
				    in  %% Line 1272
					[[]|_9]
			    ( <_7> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_7})
			      -| ['compiler_generated'] )
			  end
	      ( <_12,_11,_10> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_12,_11,_10})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'all_sizes',3}}] )
      -| [{'function',{'all_sizes',3}}] )
'write_sizes'/4 =
    %% Line 1274
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <CL = [],_X_Sz,_X_SizeT,_X_Head> when 'true' ->
		  %% Line 1275
		  CL
	      %% Line 1276
	      <[C = []|CL],Sz,SizeT,Head> when 'true' ->
		  let <_4> =
		      call %% Line 1277
			   'erlang':%% Line 1277
				    '-'
			  (%% Line 1277
			   Sz, %% Line 1277
			       1)
		  in  let <_5> =
			  apply %% Line 1277
				'write_sizes'/4
			      (%% Line 1277
			       CL, _4, %% Line 1277
				       SizeT, %% Line 1277
					      Head)
		      in  %% Line 1277
			  [C|_5]
	      %% Line 1278
	      <[C|CL],Sz,SizeT,Head> when 'true' ->
		  let <_7> =
		      case %% Line 1280
			   call 'ets':'lookup'
			       (SizeT, Sz) of
			%% Line 1281
			<[]> when 'true' ->
			    %% Line 1282
			    apply 'temp_file'/3
				(Head, SizeT, Sz)
			%% Line 1283
			<[{_19,_20,_@r0 = {FN,F},_21}|[]]> when 'true' ->
			    %% Line 1284
			    _@r0
			( <_6> when 'true' ->
			      %% Line 1280
			      primop 'match_fail'
				  ({'case_clause',_6})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 1279
		      case _7 of
			<{FileName,Fd}> when 'true' ->
			    let <NoCollections> =
				call %% Line 1286
				     'erlang':%% Line 1286
					      'length'
				    (%% Line 1286
				     C)
			    in  do  %% Line 1287
				    ( call ( 'ets'
					     -| ['result_not_wanted'] ):( 'update_counter'
									  -| ['result_not_wanted'] )
					  (SizeT, Sz, ( {( 4
							   -| ['result_not_wanted'] ),NoCollections}
							-| ['result_not_wanted'] ))
				      -| ['result_not_wanted'] )
				    let <_11> =
					call %% Line 1288
					     'lists':%% Line 1288
						     'reverse'
					    (%% Line 1288
					     C)
				    in  %% Line 1288
					case call 'file':'write'
						 (Fd, _11) of
					  %% Line 1289
					  <'ok'> when 'true' ->
					      let <_12> =
						  call %% Line 1290
						       'erlang':%% Line 1290
								'-'
						      (%% Line 1290
						       Sz, %% Line 1290
							   1)
					      in  let <_13> =
						      apply %% Line 1290
							    'write_sizes'/4
							  (%% Line 1290
							   CL, _12, %% Line 1290
								    SizeT, %% Line 1290
									   Head)
						  in  %% Line 1290
						      [[]|_13]
					  %% Line 1291
					  <Error> when 'true' ->
					      %% Line 1292
					      call 'dets_utils':'file_error'
						  (FileName, Error)
					end
			( <_8> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_8})
			  -| ['compiler_generated'] )
		      end
	      ( <_18,_17,_16,_15> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_18,_17,_16,_15})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'write_sizes',4}}] )
      -| [{'function',{'write_sizes',4}}] )
'output_slots'/6 =
    %% Line 1295
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  ( case <_0,_1,_2,_3,_4,_5> of
	      <[E|Es],Head,Cache,SizeT,NoKeys,NoObjs> when 'true' ->
		  %% Line 1296
		  apply 'output_slots'/8
		      (E, Es, [E|[]], Head, Cache, SizeT, NoKeys, NoObjs)
	      %% Line 1297
	      <[],_X_Head,Cache,SizeT,NoKeys,NoObjs> when 'true' ->
		  do  %% Line 1298
		      ( call ( 'ets'
			       -| ['result_not_wanted'] ):( 'update_counter'
							    -| ['result_not_wanted'] )
			    (SizeT, ( 'no'
				      -| ['result_not_wanted'] ), ( {( 2
								       -| ['result_not_wanted'] ),NoObjs}
								    -| ['result_not_wanted'] ))
			-| ['result_not_wanted'] )
		      do  %% Line 1299
			  ( call ( 'ets'
				   -| ['result_not_wanted'] ):( 'update_counter'
								-| ['result_not_wanted'] )
				(SizeT, ( 'no'
					  -| ['result_not_wanted'] ), ( {( 3
									   -| ['result_not_wanted'] ),NoKeys}
									-| ['result_not_wanted'] ))
			    -| ['result_not_wanted'] )
			  %% Line 1300
			  {'not_a_tuple',[],Cache}
	      ( <_13,_12,_11,_10,_9,_8> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_13,_12,_11,_10,_9,_8})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'output_slots',6}}] )
      -| [{'function',{'output_slots',6}}] )
'output_slots'/8 =
    %% Line 1302
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6,_7> of
	      <E,[E1|Es],Acc,Head,Cache,SizeT,NoKeys,NoObjs>
		  when %% Line 1303
		    try
			let <_9> =
			    call 'erlang':'element'
				(1, E)
			in  let <_8> =
				call 'erlang':'element'
				    (1, E1)
			    in  call 'erlang':'=:='
				    (_9, _8)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  %% Line 1304
		  apply 'output_slots'/8
		      (E1, Es, [E1|Acc], Head, Cache, SizeT, NoKeys, NoObjs)
	      %% Line 1305
	      <E,[],Acc,_X_Head,Cache,SizeT,NoKeys,NoObjs> when 'true' ->
		  do  %% Line 1306
		      ( call ( 'ets'
			       -| ['result_not_wanted'] ):( 'update_counter'
							    -| ['result_not_wanted'] )
			    (SizeT, ( 'no'
				      -| ['result_not_wanted'] ), ( {( 2
								       -| ['result_not_wanted'] ),NoObjs}
								    -| ['result_not_wanted'] ))
			-| ['result_not_wanted'] )
		      do  %% Line 1307
			  ( call ( 'ets'
				   -| ['result_not_wanted'] ):( 'update_counter'
								-| ['result_not_wanted'] )
				(SizeT, ( 'no'
					  -| ['result_not_wanted'] ), ( {( 3
									   -| ['result_not_wanted'] ),NoKeys}
									-| ['result_not_wanted'] ))
			    -| ['result_not_wanted'] )
			  %% Line 1308
			  {E,Acc,Cache}
	      %% Line 1309
	      <_X_E,L,Acc,Head,Cache,SizeT,NoKeys,NoObjs> when 'true' ->
		  %% Line 1310
		  apply 'output_slot'/7
		      (Acc, Head, Cache, L, SizeT, NoKeys, NoObjs)
	    end
	    -| [{'function',{'output_slots',8}}] )
      -| [{'function',{'output_slots',8}}] )
'output_slot'/7 =
    %% Line 1312
    ( fun (_0,_1,_2,_3,_4,_5,_6) ->
	  let <_7> =
	      call %% Line 1313
		   'erlang':%% Line 1313
			    'hd'
		  (_0)
	  in  let <Slot> =
		  call %% Line 1313
		       'erlang':%% Line 1313
				'element'
		      (%% Line 1313
		       1, _7)
	      in  let <_9> =
		      call %% Line 1315
			   'lists':%% Line 1315
				   'sort'
			  (_0)
		  in  %% Line 1315
		      case apply 'prep_slot'/2
			       (_9, _1) of
			<{Bins,Size,No,KNo}> when 'true' ->
			    let <NNoKeys> =
				call %% Line 1316
				     'erlang':%% Line 1316
					      '+'
				    (_5, %% Line 1316
					 KNo)
			    in  let <NNoObjs> =
				    call %% Line 1317
					 'erlang':%% Line 1317
						  '+'
					(_6, %% Line 1317
					     No)
				in  let <BSize> =
					call %% Line 1320
					     'erlang':%% Line 1320
						      '+'
					    (%% Line 1320
					     Size, %% Line 1320
						   8)
				    in  ( let <_42> =
					      call %% Line 2471
						   ( 'dets_utils'
						     -| ['compiler_generated'] ):%% Line 2471
										 ( 'log2'
										   -| ['compiler_generated'] )
						  (%% Line 1321
						   BSize)
					  in  let <LSize> =
						  call %% Line 2471
						       ( 'erlang'
							 -| ['compiler_generated'] ):%% Line 2471
										     ( '+'
										       -| ['compiler_generated'] )
						      (%% Line 2471
						       ( 1
							 -| ['compiler_generated'] ), _42)
					      in  let <_15> =
						      call %% Line 1322
							   'erlang':%% Line 1322
								    '-'
							  (%% Line 1322
							   LSize, %% Line 1322
								  1)
						  in  let <Size2> =
							  call %% Line 1322
							       'erlang':%% Line 1322
									'bsl'
							      (%% Line 1322
							       1, _15)
						      in  let <_17> =
							      call %% Line 1323
								   'erlang':%% Line 1323
									    '-'
								  (%% Line 1323
								   Size2, %% Line 1323
									  BSize)
							  in  let <Pad> =
								  #{#<%% Line 1323
								      0>(_17,8,'integer',['unsigned'|['big']])}#
							      in  let <_19> =
								      #{#<%% Line 1324
									  BSize>(%% Line 1324
										 32,1,'integer',['unsigned'|['big']]),
									#<%% Line 1324
									  305419896>(%% Line 1324
										     32,1,'integer',['unsigned'|['big']])}#
								  in  let <BinObject> =
									  [_19|%% Line 1324
									       [Bins|Pad]]
								      in  let <_29> =
									      case <> of
										%% Line 1327
										<>
										    when try
											  let <_21> =
											      call 'erlang':'tuple_size'
												  (_2)
											  in  call 'erlang':'>'
												  (LSize, _21)
										      of <Try> ->
											  Try
										      catch <T,R> ->
											  'false' ->
										    let <_25> =
											call %% Line 1328
											     'erlang':%% Line 1328
												      'tuple_to_list'
											    (_2)
										    in  let <_22> =
											    call %% Line 1328
												 'erlang':%% Line 1328
													  'tuple_size'
												(_2)
											in  let <_23> =
												call %% Line 1328
												     'erlang':%% Line 1328
													      '-'
												    (%% Line 1328
												     LSize, _22)
											    in  let <_24> =
												    call %% Line 1328
													 'lists':%% Line 1328
														 'duplicate'
													(_23, %% Line 1328
													      [])
												in  let <_26> =
													call %% Line 1328
													     'erlang':%% Line 1328
														      '++'
													    (_25, _24)
												    in  let <C1> =
													    call %% Line 1328
														 'erlang':%% Line 1328
															  'list_to_tuple'
														(_26)
													in  %% Line 1329
													    call 'erlang':'setelement'
														(LSize, C1, [BinObject|[]])
										%% Line 1330
										<> when 'true' ->
										    let <CL> =
											call %% Line 1331
											     'erlang':%% Line 1331
												      'element'
											    (%% Line 1331
											     LSize, _2)
										    in  %% Line 1332
											call 'erlang':'setelement'
											    (LSize, _2, [BinObject|CL])
									      end
									  in  let <PBin> =
										  #{#<%% Line 1337
										      Slot>(%% Line 1337
											    32,1,'integer',['unsigned'|['big']]),
										    #<%% Line 1337
										      BSize>(%% Line 1337
											     32,1,'integer',['unsigned'|['big']]),
										    #<%% Line 1337
										      LSize>(%% Line 1337
											     8,1,'integer',['unsigned'|['big']])}#
									      in  let <PL> =
										      call %% Line 1338
											   'erlang':%% Line 1338
												    'element'
											  (%% Line 1338
											   1, _29)
										  in  let <NCache> =
											  call %% Line 1339
											       'erlang':%% Line 1339
													'setelement'
											      (%% Line 1339
											       1, _29, %% Line 1339
												       [PBin|PL])
										      in  %% Line 1340
											  apply 'output_slots'/6
											      (_3, _1, NCache, _4, NNoKeys, NNoObjs)
					  -| ['compiler_generated'] )
			( <_10> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_10})
			  -| ['compiler_generated'] )
		      end
      -| [{'function',{'output_slot',7}}] )
'prep_slot'/2 =
    %% Line 1342
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <L,Head = {'head',_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}>
		  when ( try
			  let <_6> =
			      call 'erlang':'element'
				  (10, Head)
			  in  let <_7> =
				  call 'erlang':'=/='
				      (_6, 'set')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _7)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 1343
		  apply 'prep_slot'/3
		      (L, Head, [])
	      %% Line 1344
	      <[{_X_Slot,Key,_X_Seq,_X_T,BT}|L],_X_Head> when 'true' ->
		  %% Line 1345
		  apply 'prep_set_slot'/7
		      (L, Key, BT, 0, 0, 0, [])
	      ( <_9,_8> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_9,_8})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'prep_slot',2}}] )
      -| [{'function',{'prep_slot',2}}] )
'prep_slot'/3 =
    %% Line 1347
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <[{_X_Slot,Key,Seq,T,_X_BT}|L],Head,W> when 'true' ->
		  %% Line 1348
		  apply 'prep_slot'/3
		      (L, Head, [{Key,{Seq,{'insert',T}}}|W])
	      %% Line 1349
	      <[],Head,W> when 'true' ->
		  let <WLs> =
		      call %% Line 1350
			   'dets_utils':%% Line 1350
					'family'
			  (%% Line 1350
			   W)
		  in  %% Line 1352
		      ( case Head of
			  ( <( {'head',_10,_11,_12,_13,_14,_15,_16,_17,_rec42,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37}
			       -| ['compiler_generated'] )> when 'true' ->
				case apply 'eval_slot'/9
					 (WLs, [], _rec42, [], [], 0, 0, 0, 'false') of
				  <{[],Bins,Size,No,KNo,_39}> when 'true' ->
				      %% Line 1353
				      {Bins,Size,No,KNo}
				  ( <_6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_6})
				    -| ['compiler_generated'] )
				end
			    -| ['compiler_generated'] )
			  ( <_38> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','head'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      ( <_9,_8,_7> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_9,_8,_7})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'prep_slot',3}}] )
      -| [{'function',{'prep_slot',3}}] )
'prep_set_slot'/7 =
    %% Line 1356
    ( fun (_0,_1,_2,_3,_4,_5,_6) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6> of
	      <[{_27,K,_X_Seq,_X_T1,BT1}|L],_28,_X_BT,Sz,NoKeys,NoObjs,Ws>
		  when call 'erlang':'=:='
			(_28,
			 K) ->
		  %% Line 1357
		  apply 'prep_set_slot'/7
		      (L, K, BT1, Sz, NoKeys, NoObjs, Ws)
	      %% Line 1358
	      <[{_29,K1,_X_Seq,_X_T1,BT1}|L],_X_K,BT,Sz,NoKeys,NoObjs,Ws> when 'true' ->
		  let <_7> =
		      call %% Line 1359
			   'erlang':%% Line 1359
				    'byte_size'
			  (%% Line 1359
			   BT)
		  in  let <BSize> =
			  call %% Line 1359
			       'erlang':%% Line 1359
					'+'
			      (_7, %% Line 1359
				   4)
		      in  let <_9> =
			      #{#<%% Line 1360
				  BSize>(%% Line 1360
					 32,1,'integer',['unsigned'|['big']])}#
			  in  let <NWs> =
				  [%% Line 1360
				   Ws|%% Line 1360
				      [_9|BT]]
			      in  let <_13> =
				      call %% Line 1361
					   'erlang':%% Line 1361
						    '+'
					  (%% Line 1361
					   Sz, %% Line 1361
					       BSize)
				  in  let <_12> =
					  call %% Line 1361
					       'erlang':%% Line 1361
							'+'
					      (%% Line 1361
					       NoKeys, %% Line 1361
						       1)
				      in  let <_11> =
					      call %% Line 1361
						   'erlang':%% Line 1361
							    '+'
						  (%% Line 1361
						   NoObjs, %% Line 1361
							   1)
					  in  %% Line 1361
					      apply 'prep_set_slot'/7
						  (L, K1, BT1, _13, _12, _11, NWs)
	      %% Line 1362
	      <[],_X_K,BT,Sz,NoKeys,NoObjs,Ws> when 'true' ->
		  let <_14> =
		      call %% Line 1363
			   'erlang':%% Line 1363
				    'byte_size'
			  (%% Line 1363
			   BT)
		  in  let <BSize> =
			  call %% Line 1363
			       'erlang':%% Line 1363
					'+'
			      (_14, %% Line 1363
				    4)
		      in  let <_19> =
			      #{#<%% Line 1364
				  BSize>(%% Line 1364
					 32,1,'integer',['unsigned'|['big']])}#
			  in  let <_18> =
				  call %% Line 1364
				       'erlang':%% Line 1364
						'+'
				      (%% Line 1364
				       Sz, %% Line 1364
					   BSize)
			      in  let <_17> =
				      call %% Line 1364
					   'erlang':%% Line 1364
						    '+'
					  (%% Line 1364
					   NoKeys, %% Line 1364
						   1)
				  in  let <_16> =
					  call %% Line 1364
					       'erlang':%% Line 1364
							'+'
					      (%% Line 1364
					       NoObjs, %% Line 1364
						       1)
				      in  %% Line 1364
					  {[Ws|[_19|BT]],_18,_17,_16}
	      ( <_26,_25,_24,_23,_22,_21,_20> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_26,_25,_24,_23,_22,_21,_20})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'prep_set_slot',7}}] )
      -| [{'function',{'prep_set_slot',7}}] )
'segment_file'/4 =
    %% Line 1366
    ( fun (_0,_1,_2,_3) ->
	  %% Line 1368
	  case call 'ets':'delete_all_objects'
		   (_0) of
	    <'true'> when 'true' ->
		let <_9> =
		    fun (_7) ->
			let <_32> =
			    call %% Line 1369
				 'ets':%% Line 1369
				       'insert'
				(_0, %% Line 1369
				     _7)
			in  %% Line 1369
			    case _32 of
			      <'true'> when 'true' ->
				  ( _32
				    -| ['compiler_generated'] )
			      ( <_6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_6})
				-| ['compiler_generated'] )
			    end
		in  do  %% Line 1369
			call 'lists':'foreach'
			    (_9, _2)
			%% Line 1370
			case _2 of
			  <[{1,SegAddr,Data,0}|FileData1]> when 'true' ->
			      let <_21> =
				  case %% Line 1372
				       Data of
				    %% Line 1373
				    <{InFile,In0}> when 'true' ->
					%% Line 1374
					case apply 'temp_file'/3
						 (_1, _0, 2) of
					  <_@r0 = {OutFile,Out}> when 'true' ->
					      do  %% Line 1375
						  ( call ( 'file'
							   -| ['result_not_wanted'] ):( 'close'
											-| ['result_not_wanted'] )
							(In0)
						    -| ['result_not_wanted'] )
						  %% Line 1376
						  case call 'dets_utils':'open'
							   (InFile, ['raw'|['binary'|['read']]]) of
						    <{'ok',In}> when 'true' ->
							%% Line 1377
							case call 'dets_utils':'position'
								 (In, InFile, 'bof') of
							  <{'ok',0}> when 'true' ->
							      do  %% Line 1378
								  apply 'seg_file'/8
								      (SegAddr, SegAddr, In, InFile, Out, OutFile, _0, _3)
								  do  %% Line 1380
								      ( call ( 'file'
									       -| ['result_not_wanted'] ):( 'close'
													    -| ['result_not_wanted'] )
									    (In)
									-| ['result_not_wanted'] )
								      do  %% Line 1381
									  ( call ( 'file'
										   -| ['result_not_wanted'] ):( 'delete'
														-| ['result_not_wanted'] )
										(InFile)
									    -| ['result_not_wanted'] )
									  %% Line 1382
									  _@r0
							  ( <_14> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_14})
							    -| ['compiler_generated'] )
							end
						    ( <_13> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_13})
						      -| ['compiler_generated'] )
						  end
					  ( <_11> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_11})
					    -| ['compiler_generated'] )
					end
				    %% Line 1383
				    <Objects> when 'true' ->
					%% Line 1384
					case apply 'seg_file'/5
						 (Objects, SegAddr, SegAddr, _0, []) of
					  <{LastAddr,B}> when 'true' ->
					      do  %% Line 1385
						  call 'dets_utils':'disk_map_segment'
						      (SegAddr, B)
						  let <FinalZ> =
						      call %% Line 1386
							   'erlang':%% Line 1386
								    '-'
							  (_3, %% Line 1386
							       LastAddr)
						  in  let <_19> =
							  call %% Line 1387
							       'dets_utils':%% Line 1387
									    'make_zeros'
							      (%% Line 1387
							       FinalZ)
						      in  %% Line 1387
							  [B|_19]
					  ( <_17> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_17})
					    -| ['compiler_generated'] )
					end
				  end
			      in  %% Line 1390
				  case call 'ets':'delete_all_objects'
					   (_0) of
				    <'true'> when 'true' ->
					let <_27> =
					    fun (_25) ->
						let <_35> =
						    call %% Line 1393
							 'ets':%% Line 1393
							       'insert'
							(_0, %% Line 1393
							     _25)
						in  %% Line 1393
						    case _35 of
						      <'true'> when 'true' ->
							  ( _35
							    -| ['compiler_generated'] )
						      ( <_24> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_24})
							-| ['compiler_generated'] )
						    end
					in  do  %% Line 1393
						call 'lists':'foreach'
						    (_27, %% Line 1394
							  [{10000,SegAddr,_21,0}|FileData1])
						%% Line 1395
						'ok'
				    ( <_23> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_23})
				      -| ['compiler_generated'] )
				  end
			  ( <_10> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_10})
			    -| ['compiler_generated'] )
			end
	    ( <_5> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_5})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'segment_file',4}}] )
'seg_file'/8 =
    %% Line 1397
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	  %% Line 1398
	  case call 'dets_utils':'read_n'
		   (_2, 4500) of
	    %% Line 1399
	    <'eof'> when 'true' ->
		let <FinalZ> =
		    call %% Line 1400
			 'erlang':%% Line 1400
				  '-'
			(_7, _0)
		in  let <_9> =
			call %% Line 1401
			     'dets_utils':%% Line 1401
					  'make_zeros'
			    (%% Line 1401
			     FinalZ)
		    in  %% Line 1401
			call 'dets_utils':'fwrite'
			    (_4, _5, _9)
	    %% Line 1402
	    <Bin> when 'true' ->
		%% Line 1403
		case apply 'seg_file'/5
			 (Bin, _0, _1, _6, []) of
		  <{NewAddr,L}> when 'true' ->
		      do  %% Line 1404
			  call 'dets_utils':'disk_map_segment'
			      (_0, L)
			  %% Line 1405
			  case call 'dets_utils':'fwrite'
				   (_4, _5, L) of
			    <'ok'> when 'true' ->
				%% Line 1406
				apply 'seg_file'/8
				    (NewAddr, _1, _2, _3, _4, _5, _6, _7)
			    ( <_11> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_11})
			      -| ['compiler_generated'] )
			  end
		  ( <_10> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_10})
		    -| ['compiler_generated'] )
		end
	  end
      -| [{'function',{'seg_file',8}}] )
'seg_file'/5 =
    %% Line 1409
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <#{#<Slot>(32,1,'integer',['unsigned'|['big']]),
		 #<BSize>(32,1,'integer',['unsigned'|['big']]),
		 #<LSize>(8,1,'integer',['unsigned'|['big']]),
		 #<T>(( 'all'
			-| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Addr,SS,SizeT,L> when 'true' ->
		  %% Line 1410
		  apply 'seg_file_item'/8
		      (T, Addr, SS, SizeT, L, Slot, BSize, LSize)
	      %% Line 1411
	      <[#{#<Slot>(32,1,'integer',['unsigned'|['big']]),
		  #<BSize>(32,1,'integer',['unsigned'|['big']]),
		  #<LSize>(8,1,'integer',['unsigned'|['big']])}#|T],Addr,SS,SizeT,L> when 'true' ->
		  %% Line 1412
		  apply 'seg_file_item'/8
		      (T, Addr, SS, SizeT, L, Slot, BSize, LSize)
	      %% Line 1413
	      <[],Addr,_X_SS,_X_SizeT,L> when 'true' ->
		  let <_5> =
		      call %% Line 1414
			   'lists':%% Line 1414
				   'reverse'
			  (%% Line 1414
			   L)
		  in  %% Line 1414
		      {Addr,_5}
	      %% Line 1415
	      <#{}#,Addr,_X_SS,_X_SizeT,L> when 'true' ->
		  let <_6> =
		      call %% Line 1416
			   'lists':%% Line 1416
				   'reverse'
			  (%% Line 1416
			   L)
		  in  %% Line 1416
		      {Addr,_6}
	      ( <_11,_10,_9,_8,_7> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_11,_10,_9,_8,_7})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'seg_file',5}}] )
      -| [{'function',{'seg_file',5}}] )
'seg_file_item'/8 =
    %% Line 1418
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	  let <_9> =
	      call %% Line 1422
		   'erlang':%% Line 1422
			    '*'
		  (%% Line 1422
		   8, _5)
	  in  let <SlotPos> =
		  call %% Line 1422
		       'erlang':%% Line 1422
				'+'
		      (_2, _9)
	      in  let <NoZeros> =
		      call %% Line 1423
			   'erlang':%% Line 1423
				    '-'
			  (%% Line 1423
			   SlotPos, _1)
		  in  let <PSize> =
			  call %% Line 1424
			       'erlang':%% Line 1424
					'+'
			      (%% Line 1424
			       NoZeros, %% Line 1424
					8)
		      in  let <_14> =
			      call %% Line 1425
				   'erlang':%% Line 1425
					    '-'
				  (_7, %% Line 1425
				       1)
			  in  let <Inc> =
				  call %% Line 1425
				       'erlang':%% Line 1425
						'bsl'
				      (%% Line 1425
				       1, _14)
			      in  let <_16> =
				      call %% Line 1426
					   'ets':%% Line 1426
						 'update_counter'
					  (_3, _7, %% Line 1426
						   Inc)
				  in  let <CollP> =
					  call %% Line 1426
					       'erlang':%% Line 1426
							'-'
					      (_16, %% Line 1426
						    Inc)
				      in  let <_20> =
					      case <> of
						%% Line 1428
						<>
						    when call 'erlang':'=:='
							  (NoZeros,
							   0) ->
						    %% Line 1429
						    #{#<_6>(32,1,'integer',['unsigned'|['big']]),
						      #<CollP>(32,1,'integer',['unsigned'|['big']])}#
						%% Line 1430
						<>
						    when call 'erlang':'>'
							  (NoZeros,
							   100) ->
						    let <_18> =
							call %% Line 1431
							     'dets_utils':%% Line 1431
									  'make_zeros'
							    (%% Line 1431
							     NoZeros)
						    in  let <_19> =
							    #{#<_6>(%% Line 1432
								    32,1,'integer',['unsigned'|['big']]),
							      #<%% Line 1432
								CollP>(%% Line 1432
								       32,1,'integer',['unsigned'|['big']])}#
							in  %% Line 1431
							    [_18|_19]
						%% Line 1433
						<> when 'true' ->
						    %% Line 1434
						    #{#<0>(NoZeros,8,'integer',['unsigned'|['big']]),
						      #<_6>(32,1,'integer',['unsigned'|['big']]),
						      #<CollP>(32,1,'integer',['unsigned'|['big']])}#
					      end
					  in  let <_22> =
						  call %% Line 1436
						       'erlang':%% Line 1436
								'+'
						      (_1, %% Line 1436
							   PSize)
					      in  %% Line 1436
						  apply 'seg_file'/5
						      (_0, _22, _2, _3, [_20|_4])
      -| [{'function',{'seg_file_item',8}}] )
'temp_file'/3 =
    %% Line 1438
    ( fun (_0,_1,_2) ->
	  %% Line 1439
	  ( case _0 of
	      ( <( {'head',_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_rec43,_32,_33,_34,_35,_36,_37,_38}
		   -| ['compiler_generated'] )> when 'true' ->
		    let <TmpName> =
			call 'lists':'concat'
			    ([_rec43|['.'|[_2|[]]]])
		    in  %% Line 1440
			case call 'dets_utils':'open'
				 (TmpName, ['raw'|['binary'|['write']]]) of
			  <{'ok',Fd}> when 'true' ->
			      %% Line 1442
			      case call 'ets':'insert'
				       (_1, {_2,0,{TmpName,Fd},0}) of
				<'true'> when 'true' ->
				    %% Line 1443
				    {TmpName,Fd}
				( <_7> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_7})
				  -| ['compiler_generated'] )
			      end
			  ( <_6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_6})
			    -| ['compiler_generated'] )
			end
		-| ['compiler_generated'] )
	      ( <_39> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'temp_file',3}}] )
'fsck_input'/4 =
    %% Line 1446
    ( fun (_0,_1,_2,_3) ->
	  %% Line 1447
	  ( case _3 of
	      ( <( {'fileheader',_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_rec44,_48,_49,_50,_51}
		   -| ['compiler_generated'] )> when 'true' ->
		    let <_17> =
			case _rec44 of
			  %% Line 1448
			  <'true'>
			      when ( try
				      ( let <_8> =
					    case ( call ( 'erlang'
							  -| ['compiler_generated'] ):( 'is_record'
											-| ['compiler_generated'] )
						       (_3, ( 'fileheader'
							      -| ['compiler_generated'] ), ( 22
											     -| ['compiler_generated'] ))
						   -| ['compiler_generated'] ) of
					      ( <( 'true'
						   -| ['compiler_generated'] )> when 'true' ->
						    ( 'true'
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <( 'false'
						   -| ['compiler_generated'] )> when 'true' ->
						    ( 'fail'
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <( _6
						   -| ['compiler_generated'] )> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {( 'badarg'
								-| ['compiler_generated'] ),( _6
											      -| ['compiler_generated'] )}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					in  let <_9> =
						call 'erlang':'=:='
						    (( _8
						       -| ['compiler_generated'] ), 'true')
					    in  let <_10> =
						    call 'erlang':'element'
							(15, _3)
						in  let <_11> =
							call 'erlang':'is_list'
							    (_10)
						    in  ( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'and'
											       -| ['compiler_generated'] )
							      (_9, _11)
							  -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
				  -| ['compiler_generated'] ) ->
			      %% Line 1449
			      ( case _3 of
				  ( <( {'fileheader',_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_rec45,_66,_67,_68,_69,_70,_71,_72}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_14> =
					    case _rec45 of
					      ( <( NoColls = ( 'undefined'
							       -| ['compiler_generated'] )
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    NoColls
						-| ['compiler_generated'] )
					      ( <NoColls> when ( 'true'
								 -| ['compiler_generated'] ) ->
						    ( apply 'max_objsize'/2
							  (NoColls, ( 0
								      -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					in  call 'erlang':'bsl'
						(1, _14)
				    -| ['compiler_generated'] )
				  ( <_73> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','fileheader'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 1450
			  <_74> when 'true' ->
			      %% Line 1453
			      case call 'file':'position'
				       (_1, 'eof') of
				%% Line 1454
				<{'ok',Pos}> when 'true' ->
				    %% Line 1455
				    Pos
				%% Line 1456
				<_75> when 'true' ->
				    %% Line 1457
				    4294967296
			      end
			end
		    in  let <MaxSz> =
			    call %% Line 1460
				 'erlang':%% Line 1460
					  'max'
				(_17, %% Line 1460
				      8192)
			in  let <State0> =
				apply %% Line 1461
				      'fsck_read'/4
				    (%% Line 1461
				     1336, _1, %% Line 1461
					       [], %% Line 1461
						   0)
			    in  %% Line 1462
				apply 'fsck_input'/5
				    (_0, State0, _1, MaxSz, _2)
		-| ['compiler_generated'] )
	      ( <_52> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','fileheader'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'fsck_input',4}}] )
'fsck_input'/5 =
    %% Line 1464
    ( fun (_0,_1,_2,_3,_4) ->
	  %% Line 1465
	  ( fun (_14) ->
		case _14 of
		  <'close'> when 'true' ->
		      %% Line 1466
		      'ok'
		  %% Line 1467
		  <'read'> when 'true' ->
		      %% Line 1468
		      case _1 of
			%% Line 1469
			<'done'> when 'true' ->
			    %% Line 1470
			    'end_of_input'
			%% Line 1471
			<{'done',L,_X_Seq}> when 'true' ->
			    let <R> =
				apply %% Line 1472
				      'count_input'/1
				    (%% Line 1472
				     L)
			    in  let <_6> =
				    apply %% Line 1473
					  'fsck_input'/5
					(_0, %% Line 1473
					     'done', _2, _3, _4)
				in  %% Line 1473
				    {R,_6}
			%% Line 1474
			<{'cont',L,Bin,Pos,Seq}> when 'true' ->
			    let <R> =
				apply %% Line 1475
				      'count_input'/1
				    (%% Line 1475
				     L)
			    in  %% Line 1476
				( case _0 of
				    ( <( {'head',_21,_22,_23,_24,_25,_26,_27,_28,_29,_rec46,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <FR> =
					      apply 'fsck_objs'/5
						  (Bin, _rec46, _0, [], Seq)
					  in  let <NewState> =
						  apply %% Line 1477
							'fsck_read'/5
						      (%% Line 1477
						       FR, %% Line 1477
							   Pos, _2, _3, _0)
					      in  let <_12> =
						      apply %% Line 1478
							    'fsck_input'/5
							  (_0, %% Line 1478
							       NewState, _2, _3, _4)
						  in  %% Line 1478
						      {R,_12}
				      -| ['compiler_generated'] )
				    ( <_49> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','head'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			( <_13> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_13})
			  -| ['compiler_generated'] )
		      end
		  ( <_15> when 'true' ->
			primop 'match_fail'
			    ({'function_clause',_15})
		    -| ['compiler_generated'] )
		end
	    -| [{'id',{0,0,'-fsck_input/5-fun-0-'}}] )
      -| [{'function',{'fsck_input',5}}] )
'count_input'/1 =
    %% Line 1483
    ( fun (_0) ->
	  %% Line 1484
	  call 'lists':'reverse'
	      (( _0
		 -| [{'function',{'count_input',1}}] ))
      -| [{'function',{'count_input',1}}] )
'fsck_read'/4 =
    %% Line 1486
    ( fun (_0,_1,_2,_3) ->
	  %% Line 1487
	  case call 'file':'position'
		   (_1, _0) of
	    %% Line 1488
	    <{'ok',_9}> when 'true' ->
		%% Line 1489
		apply 'read_more_bytes'/6
		    ([], 0, _0, _1, _2, _3)
	    %% Line 1490
	    <_X_Error> when 'true' ->
		%% Line 1491
		{'done',_2,_3}
	  end
      -| [{'function',{'fsck_read',4}}] )
'fsck_read'/5 =
    %% Line 1494
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <{'more',Bin,Sz,L,Seq},Pos,F,MaxSz,Head>
		  when call 'erlang':'>'
			(Sz,
			 MaxSz) ->
		  %% Line 1495
		  ( case Head of
		      ( <( {'head',_14,_15,_16,_17,_18,_19,_20,_21,_22,_rec47,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <FR> =
				case Bin of
				  %% Line 1554
				  ( <( #{( #<_52>(( 16
						    -| ['compiler_generated'] ),( 8
										  -| ['compiler_generated'] ),( 'binary'
														-| ['compiler_generated'] ),( ['unsigned'|['big']]
																	      -| ['compiler_generated'] ))
					   -| ['compiler_generated'] ),
					 ( #<Tail>(( 'all'
						     -| ['compiler_generated'] ),( 8
										   -| ['compiler_generated'] ),( 'binary'
														 -| ['compiler_generated'] ),( ['unsigned'|['big']]
																	       -| ['compiler_generated'] ))
					   -| ['compiler_generated'] )}#
				       -| ['compiler_generated'] )> when ( 'true'
									   -| ['compiler_generated'] ) ->
					%% Line 1555
					( apply 'fsck_objs'/5
					      (Tail, _rec47, Head, L, Seq)
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  %% Line 1556
				  ( <_53>
					when ( try
						( let <_54> =
						      call ( 'erlang'
							     -| ['compiler_generated'] ):( 'byte_size'
											   -| ['compiler_generated'] )
							  (Bin)
						  in  ( call ( 'erlang'
							       -| ['compiler_generated'] ):( '<'
											     -| ['compiler_generated'] )
							    (_54, ( 16
								    -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    of <Try> ->
						Try
					    catch <T,R> ->
						( 'false'
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] ) ->
					( let <_7> =
					      call %% Line 1557
						   ( 'erlang'
						     -| ['compiler_generated'] ):%% Line 1557
										 ( 'byte_size'
										   -| ['compiler_generated'] )
						  (Bin)
					  in  ( let <_8> =
						    call %% Line 1557
							 ( 'erlang'
							   -| ['compiler_generated'] ):%% Line 1557
										       ( '-'
											 -| ['compiler_generated'] )
							(( 16
							   -| ['compiler_generated'] ), _7)
						in  %% Line 1557
						    ( {( 'new'
							 -| ['compiler_generated'] ),_8,L,Seq}
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <_9> when ( 'true'
						-| ['compiler_generated'] ) ->
					%% Line 1553
					( primop ( 'match_fail'
						   -| ['compiler_generated'] )
					      (( {( 'case_clause'
						    -| ['compiler_generated'] ),_9}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			    in  %% Line 1496
				apply 'fsck_read'/5
				    (FR, Pos, F, MaxSz, Head)
			-| ['compiler_generated'] )
		      ( <_42> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 1497
	      <{'more',Bin,Sz,L,Seq},Pos,F,_X_MaxSz,_X_Head> when 'true' ->
		  %% Line 1498
		  apply 'read_more_bytes'/6
		      (Bin, Sz, Pos, F, L, Seq)
	      %% Line 1499
	      <{'new',Skip,L,Seq},Pos,F,_X_MaxSz,_X_Head> when 'true' ->
		  let <NewPos> =
		      call %% Line 1500
			   'erlang':%% Line 1500
				    '+'
			  (%% Line 1500
			   Pos, %% Line 1500
				Skip)
		  in  %% Line 1501
		      apply 'fsck_read'/4
			  (NewPos, F, L, Seq)
	      ( <_13,_12,_11,_10,_9> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_13,_12,_11,_10,_9})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'fsck_read',5}}] )
      -| [{'function',{'fsck_read',5}}] )
'read_more_bytes'/6 =
    %% Line 1503
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  let <_6> =
	      case <> of
		%% Line 1505
		<>
		    when call 'erlang':'<'
			  (_1,
			   8192) ->
		    8192
		%% Line 1506
		<> when 'true' ->
		    _1
	      end
	  in  %% Line 1508
	      case call 'dets_utils':'read_n'
		       (_3, _6) of
		%% Line 1509
		<'eof'> when 'true' ->
		    %% Line 1510
		    {'done',_4,_5}
		%% Line 1511
		<Bin> when 'true' ->
		    let <_8> =
			call %% Line 1512
			     'erlang':%% Line 1512
				      'byte_size'
			    (%% Line 1512
			     Bin)
		    in  let <NewPos> =
			    call %% Line 1512
				 'erlang':%% Line 1512
					  '+'
				(_2, _8)
			in  let <_10> =
				call %% Line 1513
				     'erlang':%% Line 1513
					      'list_to_binary'
				    (%% Line 1513
				     [_0|[Bin|[]]])
			    in  %% Line 1513
				{'cont',_4,_10,NewPos,_5}
	      end
      -| [{'function',{'read_more_bytes',6}}] )
'fsck_objs'/5 =
    %% Line 1516
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <Bin = #{#<Sz>(32,1,'integer',['unsigned'|['big']]),
		       #<Status>(32,1,'integer',['unsigned'|['big']]),
		       #<Tail>(( 'all'
				 -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Kp,Head,L,Seq> when 'true' ->
		  %% Line 1517
		  case <> of
		    %% Line 1518
		    <>
			when call 'erlang':'=:='
			      (Status,
			       305419896) ->
			let <Sz1> =
			    call %% Line 1519
				 'erlang':%% Line 1519
					  '-'
				(%% Line 1519
				 Sz, %% Line 1519
				     8)
			in  %% Line 1520
			    case Tail of
			      %% Line 1521
			      <#{#<BinTerm>(Sz1,8,'binary',['unsigned'|['big']]),
				 #<Tail2>(( 'all'
					    -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
				  let <_6> =
				      catch
					  %% Line 1522
					  apply 'bin2keybins'/2
					      (BinTerm, Head)
				  in  %% Line 1522
				      case _6 of
					%% Line 1523
					<{'EXIT',_X_Reason}> when 'true' ->
					    %% Line 1553
					    ( case Bin of
						%% Line 1554
						( <( #{( #<_16>(( 16
								  -| ['compiler_generated'] ),( 8
												-| ['compiler_generated'] ),( 'binary'
															      -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			    -| ['compiler_generated'] ))
							 -| ['compiler_generated'] ),
						       ( #<_31>(( 'all'
								  -| ['compiler_generated'] ),( 8
												-| ['compiler_generated'] ),( 'binary'
															      -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			    -| ['compiler_generated'] ))
							 -| ['compiler_generated'] )}#
						     -| ['compiler_generated'] )> when ( 'true'
											 -| ['compiler_generated'] ) ->
						      %% Line 1555
						      ( apply 'fsck_objs'/5
							    (_31, Kp, Head, L, Seq)
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						%% Line 1556
						( <_17>
						      when ( try
							      ( let <_32> =
								    call ( 'erlang'
									   -| ['compiler_generated'] ):( 'byte_size'
													 -| ['compiler_generated'] )
									(Bin)
								in  ( call ( 'erlang'
									     -| ['compiler_generated'] ):( '<'
													   -| ['compiler_generated'] )
									  (_32, ( 16
										  -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							  of <Try> ->
							      Try
							  catch <T,R> ->
							      ( 'false'
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] ) ->
						      ( let <_7> =
							    call %% Line 1557
								 ( 'erlang'
								   -| ['compiler_generated'] ):%% Line 1557
											       ( 'byte_size'
												 -| ['compiler_generated'] )
								(Bin)
							in  ( let <_8> =
								  call %% Line 1557
								       ( 'erlang'
									 -| ['compiler_generated'] ):%% Line 1557
												     ( '-'
												       -| ['compiler_generated'] )
								      (( 16
									 -| ['compiler_generated'] ), _7)
							      in  %% Line 1557
								  ( {( 'new'
								       -| ['compiler_generated'] ),_8,L,Seq}
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <_9> when ( 'true'
							      -| ['compiler_generated'] ) ->
						      ( primop ( 'match_fail'
								 -| ['compiler_generated'] )
							    (( {( 'case_clause'
								  -| ['compiler_generated'] ),_9}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					%% Line 1526
					<BOs> when 'true' ->
					    %% Line 1527
					    case apply 'make_objects'/5
						     (BOs, Seq, Kp, Head, L) of
					      <{NL,NSeq}> when 'true' ->
						  ( let <_39> =
							call %% Line 2471
							     ( 'dets_utils'
							       -| ['compiler_generated'] ):%% Line 2471
											   ( 'log2'
											     -| ['compiler_generated'] )
							    (%% Line 1528
							     Sz)
						    in  let <_8> =
							    call %% Line 2471
								 ( 'erlang'
								   -| ['compiler_generated'] ):%% Line 2471
											       ( '+'
												 -| ['compiler_generated'] )
								(%% Line 2471
								 ( 1
								   -| ['compiler_generated'] ), _39)
							in  let <_9> =
								call %% Line 1528
								     'erlang':%% Line 1528
									      '-'
								    (_8, %% Line 1528
									 1)
							    in  let <_10> =
								    call %% Line 1528
									 'erlang':%% Line 1528
										  'bsl'
									(%% Line 1528
									 1, _9)
								in  let <Skip> =
									call %% Line 1528
									     'erlang':%% Line 1528
										      '-'
									    (_10, %% Line 1528
										  Sz)
								    in  %% Line 1553
									( case Tail2 of
									    %% Line 1554
									    ( <( #{( #<_16>(Skip,( 8
												   -| ['compiler_generated'] ),( 'binary'
																 -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			       -| ['compiler_generated'] ))
										     -| ['compiler_generated'] ),
										   ( #<_52>(( 'all'
											      -| ['compiler_generated'] ),( 8
															    -| ['compiler_generated'] ),( 'binary'
																			  -| ['compiler_generated'] ),( ['unsigned'|['big']]
																							-| ['compiler_generated'] ))
										     -| ['compiler_generated'] )}#
										 -| ['compiler_generated'] )> when ( 'true'
														     -| ['compiler_generated'] ) ->
										  %% Line 1555
										  ( apply 'fsck_objs'/5
											(_52, Kp, Head, NL, NSeq)
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									    %% Line 1556
									    ( <_17>
										  when ( try
											  ( let <_53> =
												call ( 'erlang'
												       -| ['compiler_generated'] ):( 'byte_size'
																     -| ['compiler_generated'] )
												    (Tail2)
											    in  ( call ( 'erlang'
													 -| ['compiler_generated'] ):( '<'
																       -| ['compiler_generated'] )
												      (_53, Skip)
												  -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
										      of <Try> ->
											  Try
										      catch <T,R> ->
											  ( 'false'
											    -| ['compiler_generated'] )
										      -| ['compiler_generated'] ) ->
										  ( let <_7> =
											call %% Line 1557
											     ( 'erlang'
											       -| ['compiler_generated'] ):%% Line 1557
															   ( 'byte_size'
															     -| ['compiler_generated'] )
											    (Tail2)
										    in  ( let <_54> =
											      call %% Line 1557
												   ( 'erlang'
												     -| ['compiler_generated'] ):%% Line 1557
																 ( '-'
																   -| ['compiler_generated'] )
												  (Skip, _7)
											  in  %% Line 1557
											      ( {( 'new'
												   -| ['compiler_generated'] ),_54,NL,NSeq}
												-| ['compiler_generated'] )
											  -| ['compiler_generated'] )
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									    ( <_55> when ( 'true'
											   -| ['compiler_generated'] ) ->
										  ( primop ( 'match_fail'
											     -| ['compiler_generated'] )
											(( {( 'case_clause'
											      -| ['compiler_generated'] ),_55}
											   -| ['compiler_generated'] ))
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									  end
									  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      ( <_7> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_7})
						-| ['compiler_generated'] )
					    end
				      end
			      %% Line 1531
			      <_20>
				  when try
					let <_13> =
					    call 'erlang':'byte_size'
						(Tail)
					in  call 'erlang':'<'
						(_13, Sz1)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  %% Line 1532
				  {'more',Bin,Sz,L,Seq}
			      ( <_14> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_14})
				-| ['compiler_generated'] )
			    end
		    %% Line 1534
		    <> when 'true' ->
			%% Line 1553
			( case Bin of
			    %% Line 1554
			    ( <( #{( #<_16>(( 16
					      -| ['compiler_generated'] ),( 8
									    -| ['compiler_generated'] ),( 'binary'
													  -| ['compiler_generated'] ),( ['unsigned'|['big']]
																	-| ['compiler_generated'] ))
				     -| ['compiler_generated'] ),
				   ( #<_72>(( 'all'
					      -| ['compiler_generated'] ),( 8
									    -| ['compiler_generated'] ),( 'binary'
													  -| ['compiler_generated'] ),( ['unsigned'|['big']]
																	-| ['compiler_generated'] ))
				     -| ['compiler_generated'] )}#
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  %% Line 1555
				  ( apply 'fsck_objs'/5
					(_72, Kp, Head, L, Seq)
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 1556
			    ( <_17>
				  when ( try
					  ( let <_6> =
						call ( 'erlang'
						       -| ['compiler_generated'] ):( 'byte_size'
										     -| ['compiler_generated'] )
						    (Bin)
					    in  ( call ( 'erlang'
							 -| ['compiler_generated'] ):( '<'
										       -| ['compiler_generated'] )
						      (_6, ( 16
							     -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  ( 'false'
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] ) ->
				  ( let <_7> =
					call %% Line 1557
					     ( 'erlang'
					       -| ['compiler_generated'] ):%% Line 1557
									   ( 'byte_size'
									     -| ['compiler_generated'] )
					    (Bin)
				    in  ( let <_8> =
					      call %% Line 1557
						   ( 'erlang'
						     -| ['compiler_generated'] ):%% Line 1557
										 ( '-'
										   -| ['compiler_generated'] )
						  (( 16
						     -| ['compiler_generated'] ), _7)
					  in  %% Line 1557
					      ( {( 'new'
						   -| ['compiler_generated'] ),_8,L,Seq}
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_9> when ( 'true'
					  -| ['compiler_generated'] ) ->
				  ( primop ( 'match_fail'
					     -| ['compiler_generated'] )
					(( {( 'case_clause'
					      -| ['compiler_generated'] ),_9}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		  end
	      %% Line 1537
	      <Bin,_X_Kp,_X_Head,L,Seq> when 'true' ->
		  %% Line 1538
		  {'more',Bin,0,L,Seq}
	    end
	    -| [{'function',{'fsck_objs',5}}] )
      -| [{'function',{'fsck_objs',5}}] )
'make_objects'/5 =
    %% Line 1540
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <[{K,BT}|Os],Seq,Kp,Head,L> when 'true' ->
		  ( let <Slot> =
			apply %% Line 1548
			      'db_hash'/2
			    (%% Line 1541
			     K, %% Line 1541
				Head)
		    in  let <Obj> =
			    #{( #<%% Line 1549
				  Slot>(%% Line 1549
					( 32
					  -| ['compiler_generated'] ),( 1
									-| ['compiler_generated'] ),( 'integer'
												      -| ['compiler_generated'] ),( ['unsigned'|['big']]
																    -| ['compiler_generated'] ))
				-| ['compiler_generated'] ),
			      ( #<%% Line 1541
				  Seq>(%% Line 1549
				       ( 32
					 -| ['compiler_generated'] ),( 1
								       -| ['compiler_generated'] ),( 'integer'
												     -| ['compiler_generated'] ),( ['unsigned'|['big']]
																   -| ['compiler_generated'] ))
				-| ['compiler_generated'] ),
			      ( #<%% Line 1541
				  BT>(%% Line 1549
				      ( 'all'
					-| ['compiler_generated'] ),( 8
								      -| ['compiler_generated'] ),( 'binary'
												    -| ['compiler_generated'] ),( ['unsigned'|['big']]
																  -| ['compiler_generated'] ))
				-| ['compiler_generated'] )}#
			in  let <_6> =
				call %% Line 1542
				     'erlang':%% Line 1542
					      '+'
				    (%% Line 1542
				     Seq, %% Line 1542
					  1)
			    in  %% Line 1542
				apply 'make_objects'/5
				    (Os, _6, Kp, Head, [Obj|L])
		    -| ['compiler_generated'] )
	      %% Line 1543
	      <[],Seq,_X_Kp,_X_Head,L> when 'true' ->
		  %% Line 1544
		  {L,Seq}
	      ( <_11,_10,_9,_8,_7> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_11,_10,_9,_8,_7})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'make_objects',5}}] )
      -| [{'function',{'make_objects',5}}] )
'make_object'/4 =
    %% Line 1547
    ( fun (_0,_1,_2,_3) ->
	  let <Slot> =
	      apply %% Line 1548
		    'db_hash'/2
		  (_1, _0)
	  in  %% Line 1549
	      #{#<Slot>(32,1,'integer',['unsigned'|['big']]),
		#<_2>(32,1,'integer',['unsigned'|['big']]),
		#<_3>(( 'all'
			-| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#
      -| [{'function',{'make_object',4}}] )
'skip_bytes'/6 =
    %% Line 1552
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  %% Line 1553
	  case _0 of
	    %% Line 1554
	    <#{#<_16>(_1,8,'binary',['unsigned'|['big']]),
	       #<Tail>(( 'all'
			 -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
		%% Line 1555
		apply 'fsck_objs'/5
		    (Tail, _2, _3, _4, _5)
	    %% Line 1556
	    <_17>
		when try
		      let <_6> =
			  call 'erlang':'byte_size'
			      (_0)
		      in  call 'erlang':'<'
			      (_6, _1)
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false' ->
		let <_7> =
		    call %% Line 1557
			 'erlang':%% Line 1557
				  'byte_size'
			(_0)
		in  let <_8> =
			call %% Line 1557
			     'erlang':%% Line 1557
				      '-'
			    (_1, _7)
		    in  %% Line 1557
			{'new',_8,_4,_5}
	    ( <_9> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_9})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'skip_bytes',6}}] )
'do_perform_save'/1 =
    %% Line 1565
    ( fun (_0) ->
	  %% Line 1566
	  case call 'dets_utils':'position'
		   (( _0
		      -| [{'function',{'do_perform_save',1}}] ), 'eof') of
	    <{'ok',FreeListsPointer}> when 'true' ->
		%% Line 1567
		case ( _0
		       -| [{'function',{'do_perform_save',1}}] ) of
		  <{'head',_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67}> when 'true' ->
		      let <_4> =
			  call 'erlang':'setelement'
			      (13, ( _0
				     -| [{'function',{'do_perform_save',1}}] ), FreeListsPointer)
		      in  %% Line 1568
			  case apply 'free_lists_to_file'/1
				   (_4) of
			    <{FLW,FLSize}> when 'true' ->
				let <_7> =
				    call %% Line 1569
					 'erlang':%% Line 1569
						  '+'
					(%% Line 1569
					 FreeListsPointer, %% Line 1569
							   FLSize)
				in  let <FileSize> =
					call %% Line 1569
					     'erlang':%% Line 1569
						      '+'
					    (_7, %% Line 1569
						 4)
				    in  %% Line 1570
					( case ( _0
						 -| [{'function',{'do_perform_save',1}}] ) of
					    ( <( {'head',_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_rec49}
						 -| ['compiler_generated'] )> when 'true' ->
						  let <_12> =
						      case _rec49 of
							%% Line 1571
							<1336> when 'true' ->
							    FileSize
							%% Line 1572
							<Base> when 'true' ->
							    call 'erlang':'-'
								(FileSize, Base)
						      end
						  in  let <_14> =
							  #{#<_12>(%% Line 1574
								   32,1,'integer',['unsigned'|['big']])}#
						      in  %% Line 1574
							  case call 'dets_utils':'write'
								   (_4, [FLW|_14]) of
							    <'ok'> when 'true' ->
								let <FileHeader> =
								    apply %% Line 1575
									  'file_header'/3
									(_4, %% Line 1575
									     FreeListsPointer, %% Line 1575
											       1)
								in  %% Line 1576
								    case call 'dets_utils':'debug_mode'
									     () of
								      %% Line 1577
								      <'true'> when 'true' ->
									  %% Line 1578
									  case _4 of
									    <{'head',_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126}> when 'true' ->
										let <_19> =
										    call 'erlang':'setelement'
											(17, _4, 'false')
										in  let <TmpHead0> =
											apply 'init_freelist'/1
											    (_19)
										    in  %% Line 1579
											( case _4 of
											    ( <( {'head',_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_rec53}
												 -| ['compiler_generated'] )> when 'true' ->
												  case TmpHead0 of
												    <{'head',_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183,_184,_185}> when 'true' ->
													let <_26> =
													    call 'erlang':'setelement'
														(30, TmpHead0, _rec53)
													in  let <_30> =
														catch
														    let <_29> =
															call %% Line 1581
															     'dets_utils':%% Line 1581
																	  'all_allocated_as_list'
															    (_26)
														    in  let <_28> =
															    call %% Line 1582
																 'dets_utils':%% Line 1582
																	      'all_allocated_as_list'
																(_4)
															in  %% Line 1582
															    call 'erlang':'=:='
																(_29, _28)
													    in  %% Line 1580
														case _30 of
														  %% Line 1584
														  <'true'> when 'true' ->
														      %% Line 1585
														      call 'dets_utils':'pwrite'
															  (_4, [{0,FileHeader}|[]])
														  %% Line 1586
														  <_187> when 'true' ->
														      %% Line 1590
														      ( case _26 of
															  ( <( {'head',_188,_189,_190,_191,_192,_193,_194,_195,_196,_197,_rec54,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208,_209,_210,_211,_212,_213,_214,_215}
															       -| ['compiler_generated'] )> when 'true' ->
																%% Line 1591
																( case _4 of
																    ( <( {'head',_217,_218,_219,_220,_221,_222,_223,_224,_225,_226,_rec55,_227,_228,_229,_230,_231,_232,_233,_234,_235,_236,_237,_238,_239,_240,_241,_242,_243,_244}
																	 -| ['compiler_generated'] )> when 'true' ->
																	  let <_35> =
																	      call 'dets_utils':'corrupt_reason'
																		  (_4, {'failed_to_save_free_lists',FreeListsPointer,_rec54,_rec55})
																	  in  call 'erlang':'throw'
																		  (_35)
																      -| ['compiler_generated'] )
																    ( <_245> when 'true' ->
																	  ( call ( 'erlang'
																		   -| ['compiler_generated'] ):( 'error'
																						 -| ['compiler_generated'] )
																		(( {'badrecord','head'}
																		   -| ['compiler_generated'] ))
																	    -| ['compiler_generated'] )
																      -| ['compiler_generated'] )
																  end
																  -| ['compiler_generated'] )
															    -| ['compiler_generated'] )
															  ( <_216> when 'true' ->
																( call ( 'erlang'
																	 -| ['compiler_generated'] ):( 'error'
																				       -| ['compiler_generated'] )
																      (( {'badrecord','head'}
																	 -| ['compiler_generated'] ))
																  -| ['compiler_generated'] )
															    -| ['compiler_generated'] )
															end
															-| ['compiler_generated'] )
														end
												    ( <_186> when 'true' ->
													  ( call ( 'erlang'
														   -| ['compiler_generated'] ):( 'error'
																		 -| ['compiler_generated'] )
														(( {'badrecord','head'}
														   -| ['compiler_generated'] ))
													    -| ['compiler_generated'] )
												      -| ['compiler_generated'] )
												  end
											      -| ['compiler_generated'] )
											    ( <_156> when 'true' ->
												  ( call ( 'erlang'
													   -| ['compiler_generated'] ):( 'error'
																	 -| ['compiler_generated'] )
													(( {'badrecord','head'}
													   -| ['compiler_generated'] ))
												    -| ['compiler_generated'] )
											      -| ['compiler_generated'] )
											  end
											  -| ['compiler_generated'] )
									    ( <_127> when 'true' ->
										  ( call ( 'erlang'
											   -| ['compiler_generated'] ):( 'error'
															 -| ['compiler_generated'] )
											(( {'badrecord','head'}
											   -| ['compiler_generated'] ))
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									  end
								      %% Line 1593
								      <'false'> when 'true' ->
									  %% Line 1594
									  call 'dets_utils':'pwrite'
									      (_4, [{0,FileHeader}|[]])
								      ( <_37> when 'true' ->
									    primop 'match_fail'
										({'case_clause',_37})
									-| ['compiler_generated'] )
								    end
							    ( <_15> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_15})
							      -| ['compiler_generated'] )
							  end
					      -| ['compiler_generated'] )
					    ( <_97> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','head'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
			    ( <_6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_6})
			      -| ['compiler_generated'] )
			  end
		  ( <_68> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','head'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
	    ( <_1> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_1})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'do_perform_save',1}}] )
'file_header'/3 =
    %% Line 1597
    ( fun (_0,_1,_2) ->
	  %% Line 1598
	  ( case _0 of
	      ( <( {'head',_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_rec56,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56}
		   -| ['compiler_generated'] )> when 'true' ->
		    let <_6> =
			case _rec56 of
			  %% Line 1599
			  <'undefined'> when 'true' ->
			      []
			  %% Line 1600
			  <NC> when 'true' ->
			      NC
			end
		    in  let <_20> =
			    fun (_16,_15,_14) ->
				%% Line 1602
				call 'erlang':'+'
				    (_15, _14)
			in  let <_12> =
				fun (_10) ->
				    %% Line 1604
				    {_10,0}
			    in  let <_9> =
				    call %% Line 1604
					 'lists':%% Line 1604
						 'seq'
					(%% Line 1604
					 4, %% Line 1604
					    31)
				in  let <_13> =
					call %% Line 1604
					     'lists':%% Line 1604
						     'map'
					    (_12, _9)
				    in  let <L> =
					    call %% Line 1602
						 'orddict':%% Line 1602
							   'merge'
						(_20, _6, _13)
					in  let <_24> =
						fun (_22) ->
						    %% Line 1605
						    case _22 of
						      <{_X_LSz,N}> when 'true' ->
							  #{#<N>(32,1,'integer',['unsigned'|['big']])}#
						      ( <_23> when 'true' ->
							    primop 'match_fail'
								({'function_clause',_23})
							-| ['compiler_generated'] )
						    end
					    in  let <CW> =
						    call %% Line 1605
							 'lists':%% Line 1605
								 'map'
							(_24, %% Line 1605
							      L)
						in  %% Line 1606
						    apply 'file_header'/4
							(_0, _1, _2, CW)
		-| ['compiler_generated'] )
	      ( <_57> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'file_header',3}}] )
'file_header'/4 =
    %% Line 1608
    ( fun (_0,_1,_2,_3) ->
	  %% Line 1610
	  ( case _0 of
	      ( <( {'head',_46,_47,_48,_49,_50,_51,_52,_53,_rec57,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73}
		   -| ['compiler_generated'] )> when 'true' ->
		    let <TypeCode> =
			call 'dets_utils':'type_to_code'
			    (_rec57)
		    in  %% Line 1612
			( case _0 of
			    ( <( {'head',_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_rec58,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <HashMethod> =
				      apply 'hash_method_to_code'/1
					  (_rec58)
				  in  let <H1> =
					  #{#<_1>(%% Line 1613
						  32,1,'integer',['unsigned'|['big']]),
					    #<11259375>(%% Line 1613
							32,1,'integer',['unsigned'|['big']]),
					    #<_2>(%% Line 1613
						  32,1,'integer',['unsigned'|['big']])}#
				      in  %% Line 1616
					  ( case _0 of
					      ( <( {'head',_rec66,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131}
						   -| ['compiler_generated'] )> when 'true' ->
						    %% Line 1617
						    ( case _0 of
							( <( {'head',_133,_134,_rec65,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160}
							     -| ['compiler_generated'] )> when 'true' ->
							      %% Line 1618
							      ( case _0 of
								  ( <( {'head',_162,_163,_164,_165,_166,_167,_168,_169,_170,_rec64,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183,_184,_185,_186,_187,_188,_189}
								       -| ['compiler_generated'] )> when 'true' ->
									%% Line 1619
									( case _0 of
									    ( <( {'head',_191,_192,_193,_194,_rec63,_195,_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208,_209,_210,_211,_212,_213,_214,_215,_216,_217,_218}
										 -| ['compiler_generated'] )> when 'true' ->
										  %% Line 1620
										  ( case _0 of
										      ( <( {'head',_220,_221,_222,_223,_224,_rec62,_225,_226,_227,_228,_229,_230,_231,_232,_233,_234,_235,_236,_237,_238,_239,_240,_241,_242,_243,_244,_245,_246,_247}
											   -| ['compiler_generated'] )> when 'true' ->
											    %% Line 1621
											    ( case _0 of
												( <( {'head',_249,_250,_251,_252,_253,_254,_255,_256,_257,_258,_259,_260,_261,_262,_263,_264,_265,_266,_rec61,_267,_268,_269,_270,_271,_272,_273,_274,_275,_276}
												     -| ['compiler_generated'] )> when 'true' ->
												      %% Line 1622
												      ( case _0 of
													  ( <( {'head',_278,_279,_280,_281,_282,_283,_284,_285,_286,_287,_288,_289,_290,_291,_292,_293,_294,_295,_296,_rec60,_297,_298,_299,_300,_301,_302,_303,_304,_305}
													       -| ['compiler_generated'] )> when 'true' ->
														%% Line 1624
														( case _0 of
														    ( <( {'head',_307,_308,_309,_310,_311,_312,_313,_rec59,_314,_315,_316,_317,_318,_319,_320,_321,_322,_323,_324,_325,_326,_327,_328,_329,_330,_331,_332,_333,_334}
															 -| ['compiler_generated'] )> when 'true' ->
															  let <H2> =
															      #{#<TypeCode>(32,1,'integer',['unsigned'|['big']]),
																#<9>(32,1,'integer',['unsigned'|['big']]),
																#<_rec66>(32,1,'integer',['unsigned'|['big']]),
																#<_rec65>(32,1,'integer',['unsigned'|['big']]),
																#<_rec64>(32,1,'integer',['unsigned'|['big']]),
																#<_rec63>(32,1,'integer',['unsigned'|['big']]),
																#<_rec62>(32,1,'integer',['unsigned'|['big']]),
																#<_rec61>(32,1,'integer',['unsigned'|['big']]),
																#<_rec60>(32,1,'integer',['unsigned'|['big']]),
																#<HashMethod>(32,1,'integer',['unsigned'|['big']]),
																#<_rec59>(32,1,'integer',['unsigned'|['big']])}#
															  in  let <DigH> =
																  [%% Line 1625
																   H2|_3]
															      in  %% Line 1626
																  ( case _0 of
																      ( <( {'head',_336,_337,_338,_339,_340,_341,_342,_343,_344,_345,_346,_347,_348,_349,_350,_351,_352,_rec67,_353,_354,_355,_356,_357,_358,_359,_360,_361,_362,_363}
																	   -| ['compiler_generated'] )> when 'true' ->
																	    let <_34> =
																		case _rec67 of
																		  %% Line 1627
																		  <'true'> when 'true' ->
																		      call 'erlang':'md5'
																			  (DigH)
																		  %% Line 1628
																		  <'false'> when 'true' ->
																		      #{#<0>(8,1,'integer',['unsigned'|['big']]),
																			#<0>(8,1,'integer',['unsigned'|['big']]),
																			#<0>(8,1,'integer',['unsigned'|['big']]),
																			#<0>(8,1,'integer',['unsigned'|['big']]),
																			#<0>(8,1,'integer',['unsigned'|['big']]),
																			#<0>(8,1,'integer',['unsigned'|['big']]),
																			#<0>(8,1,'integer',['unsigned'|['big']]),
																			#<0>(8,1,'integer',['unsigned'|['big']]),
																			#<0>(8,1,'integer',['unsigned'|['big']]),
																			#<0>(8,1,'integer',['unsigned'|['big']]),
																			#<0>(8,1,'integer',['unsigned'|['big']]),
																			#<0>(8,1,'integer',['unsigned'|['big']]),
																			#<0>(8,1,'integer',['unsigned'|['big']]),
																			#<0>(8,1,'integer',['unsigned'|['big']]),
																			#<0>(8,1,'integer',['unsigned'|['big']]),
																			#<0>(8,1,'integer',['unsigned'|['big']])}#
																		  ( <_33> when 'true' ->
																			primop 'match_fail'
																			    ({'case_clause',_33})
																		    -| ['compiler_generated'] )
																		end
																	    in  %% Line 1630
																		( case _0 of
																		    ( <( {'head',_365,_366,_367,_368,_369,_370,_371,_372,_373,_374,_375,_376,_377,_378,_379,_380,_381,_382,_383,_384,_385,_386,_387,_388,_389,_390,_391,_392,_rec68}
																			 -| ['compiler_generated'] )> when 'true' ->
																			  let <_39> =
																			      case _rec68 of
																				%% Line 1631
																				<1336> when 'true' ->
																				    #{#<0>(8,1,'integer',['unsigned'|['big']]),
																				      #<0>(8,1,'integer',['unsigned'|['big']]),
																				      #<0>(8,1,'integer',['unsigned'|['big']]),
																				      #<0>(8,1,'integer',['unsigned'|['big']])}#
																				%% Line 1632
																				<FlBase> when 'true' ->
																				    #{#<FlBase>(32,1,'integer',['unsigned'|['big']])}#
																			      end
																			  in  let <_41> =
																				  #{#<%% Line 1634
																				      0>(%% Line 1634
																					 124,8,'integer',['unsigned'|['big']])}#
																			      in  %% Line 1634
																				  [H1|[DigH|[_34|[_39|_41]]]]
																		      -| ['compiler_generated'] )
																		    ( <_393> when 'true' ->
																			  ( call ( 'erlang'
																				   -| ['compiler_generated'] ):( 'error'
																								 -| ['compiler_generated'] )
																				(( {'badrecord','head'}
																				   -| ['compiler_generated'] ))
																			    -| ['compiler_generated'] )
																		      -| ['compiler_generated'] )
																		  end
																		  -| ['compiler_generated'] )
																	-| ['compiler_generated'] )
																      ( <_364> when 'true' ->
																	    ( call ( 'erlang'
																		     -| ['compiler_generated'] ):( 'error'
																						   -| ['compiler_generated'] )
																		  (( {'badrecord','head'}
																		     -| ['compiler_generated'] ))
																	      -| ['compiler_generated'] )
																	-| ['compiler_generated'] )
																    end
																    -| ['compiler_generated'] )
														      -| ['compiler_generated'] )
														    ( <_335> when 'true' ->
															  ( call ( 'erlang'
																   -| ['compiler_generated'] ):( 'error'
																				 -| ['compiler_generated'] )
																(( {'badrecord','head'}
																   -| ['compiler_generated'] ))
															    -| ['compiler_generated'] )
														      -| ['compiler_generated'] )
														  end
														  -| ['compiler_generated'] )
													    -| ['compiler_generated'] )
													  ( <_306> when 'true' ->
														( call ( 'erlang'
															 -| ['compiler_generated'] ):( 'error'
																		       -| ['compiler_generated'] )
														      (( {'badrecord','head'}
															 -| ['compiler_generated'] ))
														  -| ['compiler_generated'] )
													    -| ['compiler_generated'] )
													end
													-| ['compiler_generated'] )
												  -| ['compiler_generated'] )
												( <_277> when 'true' ->
												      ( call ( 'erlang'
													       -| ['compiler_generated'] ):( 'error'
																	     -| ['compiler_generated'] )
													    (( {'badrecord','head'}
													       -| ['compiler_generated'] ))
													-| ['compiler_generated'] )
												  -| ['compiler_generated'] )
											      end
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										      ( <_248> when 'true' ->
											    ( call ( 'erlang'
												     -| ['compiler_generated'] ):( 'error'
																   -| ['compiler_generated'] )
												  (( {'badrecord','head'}
												     -| ['compiler_generated'] ))
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										    end
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									    ( <_219> when 'true' ->
										  ( call ( 'erlang'
											   -| ['compiler_generated'] ):( 'error'
															 -| ['compiler_generated'] )
											(( {'badrecord','head'}
											   -| ['compiler_generated'] ))
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									  end
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								  ( <_190> when 'true' ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','head'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
							( <_161> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','head'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <_132> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','head'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_103> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','head'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	      ( <_74> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'file_header',4}}] )
'free_lists_to_file'/1 =
    %% Line 1643
    ( fun (_0) ->
	  let <FL> =
	      call %% Line 1644
		   'dets_utils':%% Line 1644
				'get_freelists'
		  (( _0
		     -| [{'function',{'free_lists_to_file',1}}] ))
	  in  let <_2> =
		  call %% Line 1645
		       'erlang':%% Line 1645
				'tuple_size'
		      (%% Line 1645
		       FL)
	      in  %% Line 1645
		  apply 'free_list_to_file'/6
		      (FL, ( _0
			     -| [{'function',{'free_lists_to_file',1}}] ), 1, _2, [], 0)
      -| [{'function',{'free_lists_to_file',1}}] )
'free_list_to_file'/6 =
    %% Line 1647
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  ( case <_0,_1,_2,_3,_4,_5> of
	      <_X_Ftab,_X_H,Pos,Sz,Ws,WsSz>
		  when call 'erlang':'>'
			(Pos,
			 Sz) ->
		  let <_6> =
		      call %% Line 1648
			   'erlang':%% Line 1648
				    '+'
			  (%% Line 1648
			   WsSz, %% Line 1648
				 4)
		  in  let <_7> =
			  call %% Line 1648
			       'erlang':%% Line 1648
					'+'
			      (_6, %% Line 1648
				   8)
		      in  %% Line 1648
			  {[Ws|#{#<0>(8,1,'integer',['unsigned'|['big']]),
				 #<0>(8,1,'integer',['unsigned'|['big']]),
				 #<0>(8,1,'integer',['unsigned'|['big']]),
				 #<12>(8,1,'integer',['unsigned'|['big']]),
				 #<3>(8,1,'integer',['unsigned'|['big']]),
				 #<171>(8,1,'integer',['unsigned'|['big']]),
				 #<205>(8,1,'integer',['unsigned'|['big']]),
				 #<239>(8,1,'integer',['unsigned'|['big']]),
				 #<0>(8,1,'integer',['unsigned'|['big']]),
				 #<0>(8,1,'integer',['unsigned'|['big']]),
				 #<48>(8,1,'integer',['unsigned'|['big']]),
				 #<57>(8,1,'integer',['unsigned'|['big']])}#],_7}
	      %% Line 1649
	      <Ftab,H,Pos,Sz,Ws,WsSz> when 'true' ->
		  let <F> =
		      fun (_30,_29,_28,_27) ->
			  %% Line 1651
			  case <_30,_29,_28,_27> of
			    <N,L,W,S>
				when call 'erlang':'=:='
				      (N,
				       0) ->
				{N,L,W,S}
			    %% Line 1652
			    <N,L,W,S> when 'true' ->
				let <_45,_46,_47> =
				    case <> of
				      %% Line 1655
				      <>
					  when call 'erlang':'>'
						(N,
						 1021) ->
					  let <_15> =
					      call %% Line 1656
						   'lists':%% Line 1656
							   'sublist'
						  (%% Line 1656
						   L, 1021)
					  in  let <_14> =
						  call %% Line 1657
						       'erlang':%% Line 1657
								'-'
						      (%% Line 1657
						       N, 1021)
					      in  let <_13> =
						      call %% Line 1657
							   'lists':%% Line 1657
								   'nthtail'
							  (1021, %% Line 1657
								 L)
						  in  <_15,1021,%% Line 1657
								{_14,_13}>
				      %% Line 1658
				      <> when 'true' ->
					  %% Line 1659
					  <L,N,'no_more'>
				    end
				in  let <_18> =
					call %% Line 1661
					     'erlang':%% Line 1661
						      '*'
					    (( _46
					       -| ['compiler_generated'] ), %% Line 1661
									    4)
				    in  let <_19> =
					    call %% Line 1661
						 'erlang':%% Line 1661
							  '+'
						(_18, %% Line 1661
						      4)
					in  let <Size> =
						call %% Line 1661
						     'erlang':%% Line 1661
							      '+'
						    (_19, %% Line 1661
							  8)
					    in  let <Header> =
						    #{#<%% Line 1662
							Size>(%% Line 1662
							      32,1,'integer',['unsigned'|['big']]),
						      #<%% Line 1662
							61591023>(%% Line 1662
								  32,1,'integer',['unsigned'|['big']]),
						      #<%% Line 1662
							Pos>(%% Line 1662
							     32,1,'integer',['unsigned'|['big']])}#
						in  let <NW> =
							[%% Line 1663
							 W|%% Line 1663
							   [Header|( _45
								     -| ['compiler_generated'] )]]
						    in  %% Line 1664
							case ( _47
							       -| ['compiler_generated'] ) of
							  %% Line 1665
							  <'no_more'> when 'true' ->
							      let <_23> =
								  call %% Line 1666
								       'erlang':%% Line 1666
										'+'
								      (%% Line 1666
								       S, %% Line 1666
									  Size)
							      in  %% Line 1666
								  {0,[],NW,_23}
							  %% Line 1667
							  <{NN,NL}> when 'true' ->
							      %% Line 1668
							      case call 'dets_utils':'write'
								       (H, NW) of
								<'ok'> when 'true' ->
								    let <_25> =
									call %% Line 1669
									     'erlang':%% Line 1669
										      '+'
									    (%% Line 1669
									     S, %% Line 1669
										Size)
								    in  %% Line 1669
									{NN,NL,[],_25}
								( <_24> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_24})
								  -| ['compiler_generated'] )
							      end
							  ( <_26> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_26})
							    -| ['compiler_generated'] )
							end
			  end
		  in  let <_36> =
			  call %% Line 1672
			       'erlang':%% Line 1672
					'element'
			      (%% Line 1672
			       Pos, %% Line 1672
				    Ftab)
		      in  %% Line 1672
			  case call 'dets_utils':'tree_to_bin'
				   (_36, F, 1021, Ws, WsSz) of
			    <{NWs,NWsSz}> when 'true' ->
				let <_38> =
				    call %% Line 1673
					 'erlang':%% Line 1673
						  '+'
					(%% Line 1673
					 Pos, %% Line 1673
					      1)
				in  %% Line 1673
				    apply 'free_list_to_file'/6
					(Ftab, H, _38, Sz, NWs, NWsSz)
			    ( <_37> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_37})
			      -| ['compiler_generated'] )
			  end
	    end
	    -| [{'function',{'free_list_to_file',6}}] )
      -| [{'function',{'free_list_to_file',6}}] )
'free_lists_from_file'/2 =
    %% Line 1675
    ( fun (_0,_1) ->
	  %% Line 1676
	  ( case _0 of
	      ( <( {'head',_25,_26,_27,_rec69,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52}
		   -| ['compiler_generated'] )> when 'true' ->
		    ( case _0 of
			( <( {'head',_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_rec70,_75,_76,_77,_78,_79,_80,_81}
			     -| ['compiler_generated'] )> when 'true' ->
			      case call 'dets_utils':'position'
				       (_rec69, _rec70, _1) of
				<{'ok',_83}>
				    when call 'erlang':'=:='
					  (_83,
					   _1) ->
				    let <FL> =
					call %% Line 1677
					     'dets_utils':%% Line 1677
							  'empty_free_lists'
					    ()
				    in  let <_9> =
					    catch
						%% Line 1678
						apply 'bin_to_tree'/6
						    ([], _0, 'start', FL, -1, [])
					in  %% Line 1678
					    case _9 of
					      %% Line 1679
					      <{'EXIT',_84}> when 'true' ->
						  %% Line 1680
						  ( case _0 of
						      ( <( {'head',_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_rec71,_106,_107,_108,_109,_110,_111,_112}
							   -| ['compiler_generated'] )> when 'true' ->
							    call 'erlang':'throw'
								({'error',{'bad_freelists',_rec71}})
							-| ['compiler_generated'] )
						      ( <_113> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','head'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      %% Line 1681
					      <Ftab> when 'true' ->
						  %% Line 1682
						  case _0 of
						    <{'head',_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142}> when 'true' ->
							let <_20> =
							    call 'erlang':'setelement'
								(30, _0, 1336)
							in  call 'erlang':'setelement'
								(12, _20, Ftab)
						    ( <_143> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','head'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
					    end
				( <_6> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_6})
				  -| ['compiler_generated'] )
			      end
			  -| ['compiler_generated'] )
			( <_82> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','head'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	      ( <_53> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'free_lists_from_file',2}}] )
'bin_to_tree'/6 =
    %% Line 1685
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  %% Line 1686
	  case _0 of
	    %% Line 1687
	    <#{#<_X_Size>(32,1,'integer',['unsigned'|['big']]),
	       #<61591023>(32,1,'integer',['unsigned'|['big']]),
	       #<12345>(32,1,'integer',['unsigned'|['big']]),
	       #<_31>(( 'all'
			-| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#>
		when call 'erlang':'=:='
		      (_5,
		       []) ->
		_3
	    %% Line 1689
	    <#{#<_X_Size>(32,1,'integer',['unsigned'|['big']]),
	       #<61591023>(32,1,'integer',['unsigned'|['big']]),
	       #<12345>(32,1,'integer',['unsigned'|['big']]),
	       #<_32>(( 'all'
			-| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
		let <_6> =
		    call %% Line 1690
			 'dets_utils':%% Line 1690
				      'list_to_tree'
			(_5)
		in  %% Line 1690
		    call 'erlang':'setelement'
			(_2, _3, _6)
	    %% Line 1691
	    <#{#<Size>(32,1,'integer',['unsigned'|['big']]),
	       #<61591023>(32,1,'integer',['unsigned'|['big']]),
	       #<Pos>(32,1,'integer',['unsigned'|['big']]),
	       #<T>(( 'all'
		      -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#>
		when %% Line 1692
		  try
		      let <_9> =
			  call 'erlang':'byte_size'
			      (T)
		      in  let <_7> =
			      call 'erlang':'-'
				  (Size, 4)
			  in  let <_8> =
				  call 'erlang':'-'
				      (_7, 8)
			      in  call 'erlang':'>='
				      (_9, _8)
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false' ->
		let <_63,_64,_65> =
		    case <> of
		      %% Line 1695
		      <>
			  when let <_10> =
				call 'erlang':'=/='
				    (Pos, _2)
			    in  let <_11> =
				    call 'erlang':'=/='
					(_2, 'start')
				in  call 'erlang':'and'
					(_10, _11) ->
			  let <Tree> =
			      call %% Line 1696
				   'dets_utils':%% Line 1696
						'list_to_tree'
				  (_5)
			  in  let <_14> =
				  call %% Line 1697
				       'erlang':%% Line 1697
						'setelement'
				      (_2, _3, %% Line 1697
					       Tree)
			      in  <_14,%% Line 1697
				       [],%% Line 1697
					  -1>
		      %% Line 1698
		      <> when 'true' ->
			  %% Line 1699
			  <_3,_5,_4>
		    end
		in  let <_17> =
			call %% Line 1701
			     'erlang':%% Line 1701
				      '-'
			    (%% Line 1701
			     Size, %% Line 1701
				   8)
		    in  let <_18> =
			    call %% Line 1701
				 'erlang':%% Line 1701
					  '-'
				(_17, %% Line 1701
				      4)
			in  %% Line 1701
			    case apply 'bin_to_tree1'/4
				     (T, _18, ( _65
						-| ['compiler_generated'] ), ( _64
									       -| ['compiler_generated'] )) of
			      <{NL,B2,A2}> when 'true' ->
				  %% Line 1702
				  apply 'bin_to_tree'/6
				      (B2, _1, Pos, ( _63
						      -| ['compiler_generated'] ), A2, NL)
			      ( <_19> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_19})
				-| ['compiler_generated'] )
			    end
	    %% Line 1703
	    <_33> when 'true' ->
		%% Line 1704
		( case _1 of
		    ( <( {'head',_34,_35,_36,_rec74,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61}
			 -| ['compiler_generated'] )> when 'true' ->
			  let <Bin2> =
			      call 'dets_utils':'read_n'
				  (_rec74, 4096)
			  in  let <_23> =
				  call %% Line 1705
				       'erlang':%% Line 1705
						'list_to_binary'
				      (%% Line 1705
				       [_0|Bin2])
			      in  %% Line 1705
				  apply 'bin_to_tree'/6
				      (_23, _1, _2, _3, _4, _5)
		      -| ['compiler_generated'] )
		    ( <_62> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','head'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
	  end
      -| [{'function',{'bin_to_tree',6}}] )
'bin_to_tree1'/4 =
    %% Line 1708
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <#{#<A1>(32,1,'integer',['unsigned'|['big']]),
		 #<A2>(32,1,'integer',['unsigned'|['big']]),
		 #<A3>(32,1,'integer',['unsigned'|['big']]),
		 #<A4>(32,1,'integer',['unsigned'|['big']]),
		 #<T>(( 'all'
			-| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Size,A,L>
		  when %% Line 1709
		    try
			let <_4> =
			    call 'erlang':'>='
				(Size, 16)
			in  let <_5> =
				call 'erlang':'<'
				    (A, A1)
			    in  let <_6> =
				    call 'erlang':'<'
					(A1, A2)
				in  let <_7> =
					call 'erlang':'<'
					    (A2, A3)
				    in  let <_8> =
					    call 'erlang':'<'
						(A3, A4)
					in  let <_9> =
						call 'erlang':'and'
						    (_7, _8)
					    in  let <_10> =
						    call 'erlang':'and'
							(_6, _9)
						in  let <_11> =
							call 'erlang':'and'
							    (_5, _10)
						    in  call 'erlang':'and'
							    (_4, _11)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  let <_12> =
		      call %% Line 1710
			   'erlang':%% Line 1710
				    '-'
			  (%% Line 1710
			   Size, %% Line 1710
				 16)
		  in  %% Line 1710
		      apply 'bin_to_tree1'/4
			  (T, _12, A4, [A4|[A3|[A2|[A1|L]]]])
	      %% Line 1711
	      <#{#<A1>(32,1,'integer',['unsigned'|['big']]),
		 #<T>(( 'all'
			-| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Size,A,L>
		  when let <_13> =
			call 'erlang':'>='
			    (Size, 4)
		    in  let <_14> =
			    call 'erlang':'<'
				(A, A1)
			in  call 'erlang':'and'
				(_13, _14) ->
		  let <_15> =
		      call %% Line 1712
			   'erlang':%% Line 1712
				    '-'
			  (%% Line 1712
			   Size, %% Line 1712
				 4)
		  in  %% Line 1712
		      apply 'bin_to_tree1'/4
			  (T, _15, A1, [A1|L])
	      %% Line 1713
	      <B,0,A,L> when 'true' ->
		  %% Line 1714
		  {L,B,A}
	      ( <_19,_18,_17,_16> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_19,_18,_17,_16})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'bin_to_tree1',4}}] )
      -| [{'function',{'bin_to_tree1',4}}] )
'slot_objs'/2 =
    %% Line 1717
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <H = {'head',_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39},Slot>
		  when ( try
			  let <_6> =
			      call 'erlang':'element'
				  (4, H)
			  in  let <_7> =
				  call 'erlang':'>='
				      (Slot, _6)
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _7)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 1718
		  '$end_of_table'
	      %% Line 1719
	      <H,Slot> when 'true' ->
		  %% Line 1720
		  case apply 'slot_objects'/2
			   (H, Slot) of
		    <{'ok',_X_Pointer,Objects}> when 'true' ->
			%% Line 1721
			Objects
		    ( <_8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_8})
		      -| ['compiler_generated'] )
		  end
	    end
	    -| [{'function',{'slot_objs',2}}] )
      -| [{'function',{'slot_objs',2}}] )
'h'/2 =
    %% Line 1724
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <I,'phash2'> when 'true' ->
		  call 'erlang':'phash2'
		      (I)
	      %% Line 1725
	      <I,'phash'> when 'true' ->
		  let <_2> =
		      call 'erlang':'phash'
			  (I, 67108863)
		  in  call 'erlang':'-'
			  (_2, 1)
	      ( <_4,_3> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_4,_3})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'h',2}}] )
      -| [{'function',{'h',2}}] )
'db_hash'/2 =
    %% Line 1727
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Key,Head = {'head',_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66}>
		  when ( try
			  let <_6> =
			      call 'erlang':'element'
				  (18, Head)
			  in  let <_7> =
				  call 'erlang':'=:='
				      (_6, 'phash2')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _7)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  let <H> =
		      call %% Line 1728
			   'erlang':%% Line 1728
				    'phash2'
			  (%% Line 1728
			   Key)
		  in  %% Line 1729
		      ( case Head of
			  ( <( {'head',_rec75,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_11> =
				    call 'erlang':'-'
					(_rec75, 1)
				in  let <Hash> =
					call 'erlang':'band'
					    (H, _11)
				    in  %% Line 1730
					case <> of
					  %% Line 1731
					  <>
					      when ( try
						      ( let <_15> =
							    case ( call ( 'erlang'
									  -| ['compiler_generated'] ):( 'is_record'
													-| ['compiler_generated'] )
								       (Head, ( 'head'
										-| ['compiler_generated'] ), ( 30
													       -| ['compiler_generated'] ))
								   -| ['compiler_generated'] ) of
							      ( <( 'true'
								   -| ['compiler_generated'] )> when 'true' ->
								    ( 'true'
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      ( <( 'false'
								   -| ['compiler_generated'] )> when 'true' ->
								    ( 'fail'
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      ( <( _13
								   -| ['compiler_generated'] )> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {( 'badarg'
										-| ['compiler_generated'] ),( _13
													      -| ['compiler_generated'] )}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							in  let <_16> =
								call 'erlang':'=:='
								    (( _15
								       -| ['compiler_generated'] ), 'true')
							    in  let <_17> =
								    call 'erlang':'element'
									(9, Head)
								in  let <_18> =
									call 'erlang':'<'
									    (Hash, _17)
								    in  ( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'and'
													       -| ['compiler_generated'] )
									      (_16, _18)
									  -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						  of <Try> ->
						      Try
						  catch <T,R> ->
						      'false'
						  -| ['compiler_generated'] ) ->
					      %% Line 1732
					      ( case Head of
						  ( <( {'head',_96,_rec76,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123}
						       -| ['compiler_generated'] )> when 'true' ->
							let <_21> =
							    call 'erlang':'-'
								(_rec76, 1)
							in  call 'erlang':'band'
								(H, _21)
						    -| ['compiler_generated'] )
						  ( <_124> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','head'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  %% Line 1733
					  <> when 'true' ->
					      %% Line 1734
					      Hash
					end
			    -| ['compiler_generated'] )
			  ( <_95> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','head'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      %% Line 1736
	      <Key,Head> when 'true' ->
		  %% Line 1737
		  ( case Head of
		      ( <( {'head',_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_rec77,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <H> =
				case <Key,_rec77> of
				  ( <I,( 'phash2'
					 -| ['compiler_generated'] )> when ( 'true'
									     -| ['compiler_generated'] ) ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'phash2'
									       -| ['compiler_generated'] )
					      (I)
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <I,( 'phash'
					 -| ['compiler_generated'] )> when ( 'true'
									     -| ['compiler_generated'] ) ->
					( let <_2> =
					      call ( 'erlang'
						     -| ['compiler_generated'] ):( 'phash'
										   -| ['compiler_generated'] )
						  (I, ( 67108863
							-| ['compiler_generated'] ))
					  in  ( call ( 'erlang'
						       -| ['compiler_generated'] ):( '-'
										     -| ['compiler_generated'] )
						    (_2, ( 1
							   -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <_4,_3> when ( 'true'
						   -| ['compiler_generated'] ) ->
					( primop ( 'match_fail'
						   -| ['compiler_generated'] )
					      (( {( 'function_clause'
						    -| ['compiler_generated'] ),_4,_3}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			    in  %% Line 1738
				( case Head of
				    ( <( {'head',_rec78,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <Hash> =
					      call 'erlang':'rem'
						  (H, _rec78)
					  in  %% Line 1739
					      case <> of
						%% Line 1740
						<>
						    when ( try
							    ( let <_30> =
								  case ( call ( 'erlang'
										-| ['compiler_generated'] ):( 'is_record'
													      -| ['compiler_generated'] )
									     (Head, ( 'head'
										      -| ['compiler_generated'] ), ( 30
														     -| ['compiler_generated'] ))
									 -| ['compiler_generated'] ) of
								    ( <( 'true'
									 -| ['compiler_generated'] )> when 'true' ->
									  ( 'true'
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								    ( <( 'false'
									 -| ['compiler_generated'] )> when 'true' ->
									  ( 'fail'
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								    ( <( _28
									 -| ['compiler_generated'] )> when 'true' ->
									  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'error'
														 -| ['compiler_generated'] )
										(( {( 'badarg'
										      -| ['compiler_generated'] ),( _28
														    -| ['compiler_generated'] )}
										   -| ['compiler_generated'] ))
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								  end
							      in  let <_31> =
								      call 'erlang':'=:='
									  (( _30
									     -| ['compiler_generated'] ), 'true')
								  in  let <_32> =
									  call 'erlang':'element'
									      (9, Head)
								      in  let <_33> =
									      call 'erlang':'<'
										  (Hash, _32)
									  in  ( call ( 'erlang'
										       -| ['compiler_generated'] ):( 'and'
														     -| ['compiler_generated'] )
										    (_31, _33)
										-| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							of <Try> ->
							    Try
							catch <T,R> ->
							    'false'
							-| ['compiler_generated'] ) ->
						    %% Line 1741
						    ( case Head of
							( <( {'head',_183,_rec79,_184,_185,_186,_187,_188,_189,_190,_191,_192,_193,_194,_195,_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208,_209,_210}
							     -| ['compiler_generated'] )> when 'true' ->
							      call 'erlang':'rem'
								  (H, _rec79)
							  -| ['compiler_generated'] )
							( <_211> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','head'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
						%% Line 1742
						<> when 'true' ->
						    %% Line 1743
						    Hash
					      end
				      -| ['compiler_generated'] )
				    ( <_182> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','head'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_153> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	    end
	    -| [{'function',{'db_hash',2}}] )
      -| [{'function',{'db_hash',2}}] )
'hash_method_to_code'/1 =
    %% Line 1746
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'hash_method_to_code',1}}] ) of
	      <'phash2'> when 'true' ->
		  1
	      %% Line 1747
	      <'phash'> when 'true' ->
		  0
	      ( <_1> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_1})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'hash_method_to_code',1}}] )
      -| [{'function',{'hash_method_to_code',1}}] )
'code_to_hash_method'/1 =
    %% Line 1749
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'code_to_hash_method',1}}] ) of
	      <1> when 'true' ->
		  'phash2'
	      %% Line 1750
	      <0> when 'true' ->
		  'phash'
	      %% Line 1751
	      <_2> when 'true' ->
		  'undefined'
	    end
	    -| [{'function',{'code_to_hash_method',1}}] )
      -| [{'function',{'code_to_hash_method',1}}] )
'no_slots'/1 =
    %% Line 1753
    ( fun (_0) ->
	  %% Line 1754
	  ( case ( _0
		   -| [{'function',{'no_slots',1}}] ) of
	      ( <( {'head',_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_rec80,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35}
		   -| ['compiler_generated'] )> when 'true' ->
		    ( case ( _0
			     -| [{'function',{'no_slots',1}}] ) of
			( <( {'head',_37,_38,_rec81,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64}
			     -| ['compiler_generated'] )> when 'true' ->
			      ( case ( _0
				       -| [{'function',{'no_slots',1}}] ) of
				  ( <( {'head',_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_rec82,_85,_86,_87,_88,_89,_90,_91,_92,_93}
				       -| ['compiler_generated'] )> when 'true' ->
					{_rec80,_rec81,_rec82}
				    -| ['compiler_generated'] )
				  ( <_94> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','head'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			( <_65> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','head'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	      ( <_36> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'no_slots',1}}] )
'table_parameters'/1 =
    %% Line 1756
    ( fun (_0) ->
	  %% Line 1757
	  ( case ( _0
		   -| [{'function',{'table_parameters',1}}] ) of
	      ( <( {'head',_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_rec83,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63}
		   -| ['compiler_generated'] )> when 'true' ->
		    case _rec83 of
		      %% Line 1758
		      <'undefined'> when 'true' ->
			  %% Line 1759
			  'undefined'
		      %% Line 1760
		      <CL> when 'true' ->
			  let <_7> =
			      fun (_4,_3) ->
				  %% Line 1761
				  case <_4,_3> of
				    <{_65,0},A> when 'true' ->
					A
				    %% Line 1762
				    <E,A> when 'true' ->
					[E|A]
				  end
			  in  let <NoColls0> =
				  call %% Line 1761
				       'lists':%% Line 1761
					       'foldl'
				      (_7, %% Line 1763
					   [], %% Line 1763
					       CL)
			      in  let <NoColls> =
				      call %% Line 1764
					   'lists':%% Line 1764
						   'reverse'
					  (%% Line 1764
					   NoColls0)
				  in  %% Line 1767
				      ( case ( _0
					       -| [{'function',{'table_parameters',1}}] ) of
					  ( <( {'head',_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_rec84,_87,_88,_89,_90,_91,_92,_93}
					       -| ['compiler_generated'] )> when 'true' ->
						let <_33> =
						    call 'filename':'basename'
							(_rec84)
						in  %% Line 1768
						    ( case ( _0
							     -| [{'function',{'table_parameters',1}}] ) of
							( <( {'head',_95,_96,_97,_98,_99,_100,_101,_102,_rec85,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122}
							     -| ['compiler_generated'] )> when 'true' ->
							      %% Line 1769
							      ( case ( _0
								       -| [{'function',{'table_parameters',1}}] ) of
								  ( <( {'head',_124,_125,_126,_127,_128,_129,_130,_131,_132,_rec86,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151}
								       -| ['compiler_generated'] )> when 'true' ->
									%% Line 1770
									( case ( _0
										 -| [{'function',{'table_parameters',1}}] ) of
									    ( <( {'head',_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_rec87,_169,_170,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180}
										 -| ['compiler_generated'] )> when 'true' ->
										  let <_26> =
										      apply 'hash_method_to_code'/1
											  (_rec87)
										  in  %% Line 1771
										      ( case ( _0
											       -| [{'function',{'table_parameters',1}}] ) of
											  ( <( {'head',_182,_183,_184,_185,_186,_187,_188,_rec88,_189,_190,_191,_192,_193,_194,_195,_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208,_209}
											       -| ['compiler_generated'] )> when 'true' ->
												( case ( _0
													 -| [{'function',{'table_parameters',1}}] ) of
												    ( <( {'head',_rec89,_211,_212,_213,_214,_215,_216,_217,_218,_219,_220,_221,_222,_223,_224,_225,_226,_227,_228,_229,_230,_231,_232,_233,_234,_235,_236,_237,_238}
													 -| ['compiler_generated'] )> when 'true' ->
													  %% Line 1772
													  ( case ( _0
														   -| [{'function',{'table_parameters',1}}] ) of
													      ( <( {'head',_240,_241,_rec90,_242,_243,_244,_245,_246,_247,_248,_249,_250,_251,_252,_253,_254,_255,_256,_257,_258,_259,_260,_261,_262,_263,_264,_265,_266,_267}
														   -| ['compiler_generated'] )> when 'true' ->
														    %% Line 1773
														    ( case ( _0
															     -| [{'function',{'table_parameters',1}}] ) of
															( <( {'head',_269,_270,_271,_272,_273,_274,_275,_276,_277,_278,_279,_280,_281,_282,_283,_284,_285,_286,_rec91,_287,_288,_289,_290,_291,_292,_293,_294,_295,_296}
															     -| ['compiler_generated'] )> when 'true' ->
															      %% Line 1774
															      ( case ( _0
																       -| [{'function',{'table_parameters',1}}] ) of
																  ( <( {'head',_298,_299,_300,_301,_302,_303,_304,_305,_306,_307,_308,_309,_310,_311,_312,_313,_314,_315,_316,_rec92,_317,_318,_319,_320,_321,_322,_323,_324,_325}
																       -| ['compiler_generated'] )> when 'true' ->
																	%% Line 1775
																	( case ( _0
																		 -| [{'function',{'table_parameters',1}}] ) of
																	    ( <( {'head',_327,_328,_329,_330,_rec93,_331,_332,_333,_334,_335,_336,_337,_338,_339,_340,_341,_342,_343,_344,_345,_346,_347,_348,_349,_350,_351,_352,_353,_354}
																		 -| ['compiler_generated'] )> when 'true' ->
																		  %% Line 1776
																		  ( case ( _0
																			   -| [{'function',{'table_parameters',1}}] ) of
																		      ( <( {'head',_356,_357,_358,_359,_360,_rec94,_361,_362,_363,_364,_365,_366,_367,_368,_369,_370,_371,_372,_373,_374,_375,_376,_377,_378,_379,_380,_381,_382,_383}
																			   -| ['compiler_generated'] )> when 'true' ->
																			    {'$hash2',9,1,_33,_rec85,_rec86,_26,_rec88,_rec89,_rec90,_rec91,_rec92,_rec93,_rec94,NoColls}
																			-| ['compiler_generated'] )
																		      ( <_384> when 'true' ->
																			    ( call ( 'erlang'
																				     -| ['compiler_generated'] ):( 'error'
																								   -| ['compiler_generated'] )
																				  (( {'badrecord','head'}
																				     -| ['compiler_generated'] ))
																			      -| ['compiler_generated'] )
																			-| ['compiler_generated'] )
																		    end
																		    -| ['compiler_generated'] )
																	      -| ['compiler_generated'] )
																	    ( <_355> when 'true' ->
																		  ( call ( 'erlang'
																			   -| ['compiler_generated'] ):( 'error'
																							 -| ['compiler_generated'] )
																			(( {'badrecord','head'}
																			   -| ['compiler_generated'] ))
																		    -| ['compiler_generated'] )
																	      -| ['compiler_generated'] )
																	  end
																	  -| ['compiler_generated'] )
																    -| ['compiler_generated'] )
																  ( <_326> when 'true' ->
																	( call ( 'erlang'
																		 -| ['compiler_generated'] ):( 'error'
																					       -| ['compiler_generated'] )
																	      (( {'badrecord','head'}
																		 -| ['compiler_generated'] ))
																	  -| ['compiler_generated'] )
																    -| ['compiler_generated'] )
																end
																-| ['compiler_generated'] )
															  -| ['compiler_generated'] )
															( <_297> when 'true' ->
															      ( call ( 'erlang'
																       -| ['compiler_generated'] ):( 'error'
																				     -| ['compiler_generated'] )
																    (( {'badrecord','head'}
																       -| ['compiler_generated'] ))
																-| ['compiler_generated'] )
															  -| ['compiler_generated'] )
														      end
														      -| ['compiler_generated'] )
														-| ['compiler_generated'] )
													      ( <_268> when 'true' ->
														    ( call ( 'erlang'
															     -| ['compiler_generated'] ):( 'error'
																			   -| ['compiler_generated'] )
															  (( {'badrecord','head'}
															     -| ['compiler_generated'] ))
														      -| ['compiler_generated'] )
														-| ['compiler_generated'] )
													    end
													    -| ['compiler_generated'] )
												      -| ['compiler_generated'] )
												    ( <_239> when 'true' ->
													  ( call ( 'erlang'
														   -| ['compiler_generated'] ):( 'error'
																		 -| ['compiler_generated'] )
														(( {'badrecord','head'}
														   -| ['compiler_generated'] ))
													    -| ['compiler_generated'] )
												      -| ['compiler_generated'] )
												  end
												  -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
											  ( <_210> when 'true' ->
												( call ( 'erlang'
													 -| ['compiler_generated'] ):( 'error'
																       -| ['compiler_generated'] )
												      (( {'badrecord','head'}
													 -| ['compiler_generated'] ))
												  -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
											end
											-| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									    ( <_181> when 'true' ->
										  ( call ( 'erlang'
											   -| ['compiler_generated'] ):( 'error'
															 -| ['compiler_generated'] )
											(( {'badrecord','head'}
											   -| ['compiler_generated'] ))
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									  end
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								  ( <_152> when 'true' ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','head'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
							( <_123> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','head'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_94> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','head'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
		    end
		-| ['compiler_generated'] )
	      ( <_64> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'table_parameters',1}}] )
're_hash'/2 =
    %% Line 1789
    ( fun (_0,_1) ->
	  let <FromSlotPos> =
	      apply %% Line 1790
		    'slot_position'/1
		  (_1)
	  in  %% Line 1791
	      ( case _0 of
		  ( <( {'head',_rec95,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_5> =
			    call 'erlang':'+'
				(_1, _rec95)
			in  let <ToSlotPos> =
				apply 'slot_position'/1
				    (_5)
			    in  let <RSpec> =
				    [%% Line 1792
				     {FromSlotPos,2048}|%% Line 1792
							[]]
				in  %% Line 1793
				    case call 'dets_utils':'pread'
					     (RSpec, _0) of
				      <{'ok',[FromBin|[]]}> when 'true' ->
					  %% Line 1794
					  apply 'split_bins'/7
					      (FromBin, _0, FromSlotPos, ToSlotPos, [], [], 0)
				      ( <_9> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_9})
					-| ['compiler_generated'] )
				    end
		    -| ['compiler_generated'] )
		  ( <_40> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','head'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
      -| [{'function',{'re_hash',2}}] )
'split_bins'/7 =
    %% Line 1796
    ( fun (_0,_1,_2,_3,_4,_5,_6) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6> of
	      <#{}#,Head,_X_Pos1,_X_Pos2,_X_ToRead,_X_L,0> when 'true' ->
		  %% Line 1797
		  {Head,'ok'}
	      %% Line 1798
	      <#{}#,Head,Pos1,Pos2,ToRead,L,_X_SoFar> when 'true' ->
		  %% Line 1799
		  apply 're_hash_write'/5
		      (Head, ToRead, L, Pos1, Pos2)
	      %% Line 1800
	      <FB,Head,Pos1,Pos2,ToRead,L,SoFar> when 'true' ->
		  %% Line 1801
		  case FB of
		    <#{#<Sz1>(32,1,'integer',['unsigned'|['big']]),
		       #<P1>(32,1,'integer',['unsigned'|['big']]),
		       #<FT>(( 'all'
			       -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
			%% Line 1802
			case FB of
			  <#{#<B1>(8,8,'binary',['unsigned'|['big']]),
			     #<_28>(( 'all'
				      -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
			      let <NSoFar> =
				  call %% Line 1803
				       'erlang':%% Line 1803
						'+'
				      (%% Line 1803
				       SoFar, %% Line 1803
					      Sz1)
			      in  let <NPos1> =
				      call %% Line 1804
					   'erlang':%% Line 1804
						    '+'
					  (%% Line 1804
					   Pos1, %% Line 1804
						 8)
				  in  let <NPos2> =
					  call %% Line 1805
					       'erlang':%% Line 1805
							'+'
					      (%% Line 1805
					       Pos2, %% Line 1805
						     8)
				      in  %% Line 1806
					  case <> of
					    %% Line 1807
					    <>
						when let <_15> =
						      call 'erlang':'>'
							  (NSoFar, 81920)
						  in  let <_16> =
							  call 'erlang':'=/='
							      (ToRead, [])
						      in  call 'erlang':'and'
							      (_15, _16) ->
						%% Line 1808
						case apply 're_hash_write'/5
							 (Head, ToRead, L, Pos1, Pos2) of
						  <{NewHead,'ok'}> when 'true' ->
						      %% Line 1809
						      apply 'split_bins'/7
							  (FB, NewHead, Pos1, Pos2, [], [], 0)
						  ( <_17> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_17})
						    -| ['compiler_generated'] )
						end
					    %% Line 1810
					    <>
						when call 'erlang':'=:='
						      (Sz1,
						       0) ->
						let <E> = {%% Line 1811
						     'skip',%% Line 1811
							    B1}
						in  %% Line 1812
						    apply 'split_bins'/7
							(FT, Head, NPos1, NPos2, ToRead, [E|L], NSoFar)
					    %% Line 1813
					    <> when 'true' ->
						let <E> =
						    {%% Line 1814
						     Sz1,%% Line 1814
							 P1,%% Line 1814
							    B1,%% Line 1814
							       Pos1,%% Line 1814
								    Pos2}
						in  let <NewToRead> =
							[%% Line 1815
							 {P1,Sz1}|%% Line 1815
								  ToRead]
						    in  %% Line 1816
							apply 'split_bins'/7
							    (FT, Head, NPos1, NPos2, NewToRead, [E|L], NSoFar)
					  end
			  ( <_8> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_8})
			    -| ['compiler_generated'] )
			end
		    ( <_7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_7})
		      -| ['compiler_generated'] )
		  end
	    end
	    -| [{'function',{'split_bins',7}}] )
      -| [{'function',{'split_bins',7}}] )
're_hash_write'/5 =
    %% Line 1819
    ( fun (_0,_1,_2,_3,_4) ->
	  do  %% Line 1820
	      apply 'check_pread2_arg'/2
		  (_1, _0)
	      %% Line 1821
	      case call 'dets_utils':'pread'
		       (_1, _0) of
		<{'ok',Bins}> when 'true' ->
		    %% Line 1823
		    case apply 're_hash_slots'/7
			     (Bins, _2, _0, #{#<0>(8,1,'integer',['unsigned'|['big']]),
					      #<0>(8,1,'integer',['unsigned'|['big']]),
					      #<0>(8,1,'integer',['unsigned'|['big']]),
					      #<0>(8,1,'integer',['unsigned'|['big']]),
					      #<0>(8,1,'integer',['unsigned'|['big']]),
					      #<0>(8,1,'integer',['unsigned'|['big']]),
					      #<0>(8,1,'integer',['unsigned'|['big']]),
					      #<0>(8,1,'integer',['unsigned'|['big']])}#, [], [], []) of
		      <{Head1,BinFS,BinTS,WsB}> when 'true' ->
			  let <_8> =
			      call %% Line 1824
				   'erlang':%% Line 1824
					    'length'
				  (_2)
			  in  let <_10> =
				  call %% Line 1824
				       'erlang':%% Line 1824
						'*'
				      (%% Line 1824
				       8, _8)
			      in  let <WPos1> =
				      call %% Line 1824
					   'erlang':%% Line 1824
						    '-'
					  (_3, _10)
				  in  let <_12> =
					  call %% Line 1825
					       'erlang':%% Line 1825
							'length'
					      (_2)
				      in  let <_14> =
					      call %% Line 1825
						   'erlang':%% Line 1825
							    '*'
						  (%% Line 1825
						   8, _12)
					  in  let <WPos2> =
						  call %% Line 1825
						       'erlang':%% Line 1825
								'-'
						      (_4, _14)
					      in  let <ToWrite> =
						      [%% Line 1826
						       {WPos1,BinFS}|%% Line 1826
								     [{WPos2,BinTS}|WsB]]
						  in  %% Line 1827
						      call 'dets_utils':'pwrite'
							  (Head1, ToWrite)
		      ( <_7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_7})
			-| ['compiler_generated'] )
		    end
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_5})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'re_hash_write',5}}] )
're_hash_slots'/7 =
    %% Line 1829
    ( fun (_0,_1,_2,_3,_4,_5,_6) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6> of
	      <Bins,[{'skip',B1}|L],Head,Z,BinFS,BinTS,WsB> when 'true' ->
		  %% Line 1830
		  apply 're_hash_slots'/7
		      (Bins, L, Head, Z, [B1|BinFS], [Z|BinTS], WsB)
	      %% Line 1831
	      <[FB|Bins],[E|L],Head,Z,BinFS,BinTS,WsB> when 'true' ->
		  %% Line 1832
		  case E of
		    <{Sz1,P1,B1,Pos1,Pos2}> when 'true' ->
			let <_8> =
			    catch
				%% Line 1833
				apply 'per_key'/2
				    (Head, FB)
			in  let <_12> =
				case _8 of
				  %% Line 1834
				  <{'EXIT',_X_Error}> when 'true' ->
				      let <Bad> =
					  call %% Line 1835
					       'dets_utils':%% Line 1835
							    'bad_object'
					      (%% Line 1835
					       're_hash_slots', %% Line 1835
								{FB,E})
				      in  let <_10> =
					      call %% Line 1836
						   'dets_utils':%% Line 1836
								'corrupt_reason'
						  (%% Line 1836
						   Head, %% Line 1836
							 Bad)
					  in  %% Line 1836
					      call 'erlang':'throw'
						  (_10)
				  %% Line 1837
				  <Else> when 'true' ->
				      %% Line 1838
				      Else
				end
			    in  %% Line 1840
				case apply 're_hash_split'/6
					 (_12, Head, [], 0, [], 0) of
				  %% Line 1841
				  <{_X_KL,_X_KSz,[],0}> when 'true' ->
				      %% Line 1842
				      case call 'erlang':'+'
					       (_X_KSz, 8) of
					<_39>
					    when call 'erlang':'=:='
						  (_39,
						   Sz1) ->
					    %% Line 1843
					    apply 're_hash_slots'/7
						(Bins, L, Head, Z, [B1|BinFS], [Z|BinTS], WsB)
					( <_14> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_14})
					  -| ['compiler_generated'] )
				      end
				  %% Line 1844
				  <{[],0,_X_ML,_X_MSz}> when 'true' ->
				      %% Line 1845
				      case call 'erlang':'+'
					       (_X_MSz, 8) of
					<_40>
					    when call 'erlang':'=:='
						  (_40,
						   Sz1) ->
					    %% Line 1846
					    apply 're_hash_slots'/7
						(Bins, L, Head, Z, [Z|BinFS], [B1|BinTS], WsB)
					( <_15> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_15})
					  -| ['compiler_generated'] )
				      end
				  %% Line 1847
				  <{KL,KSz,ML,MSz}>
				      when try
					    let <_16> =
						call 'erlang':'=/='
						    (KL, [])
					    in  let <_17> =
						    call 'erlang':'>'
							(KSz, 0)
						in  let <_18> =
							call 'erlang':'=/='
							    (ML, [])
						    in  let <_19> =
							    call 'erlang':'>'
								(MSz, 0)
							in  let <_20> =
								call 'erlang':'and'
								    (_18, _19)
							    in  let <_21> =
								    call 'erlang':'and'
									(_17, _20)
								in  call 'erlang':'and'
									(_16, _21)
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false' ->
				      %% Line 1848
				      case %% Line 1849
					   apply 'updated'/9
					       (Head, P1, Sz1, KSz, Pos1, KL, 'true', 'foo', 'bar') of
					<{Head1,FS1,Ws1}> when 'true' ->
					    %% Line 1850
					    case %% Line 1851
						 apply 'updated'/9
						     (Head1, 0, 0, MSz, Pos2, ML, 'true', 'foo', 'bar') of
					      <{NewHead,[{_41,Bin2}|[]],Ws2}>
						  when call 'erlang':'=:='
							(_41,
							 Pos2) ->
						  let <_25> =
						      case %% Line 1852
							   FS1 of
							%% Line 1853
							<[{_42,Bin1}|[]]>
							    when call 'erlang':'=:='
								  (_42,
								   Pos1) ->
							    [Bin1|BinFS]
							%% Line 1854
							<[]> when 'true' ->
							    [B1|BinFS]
							( <_24> when 'true' ->
							      %% Line 1852
							      primop 'match_fail'
								  ({'case_clause',_24})
							  -| ['compiler_generated'] )
						      end
						  in  let <NewBinTS> =
							  [%% Line 1856
							   Bin2|%% Line 1856
								BinTS]
						      in  let <_28> =
							      call %% Line 1857
								   'erlang':%% Line 1857
									    '++'
								  (%% Line 1857
								   Ws1, %% Line 1857
									WsB)
							  in  let <NewWsB> =
								  call %% Line 1857
								       'erlang':%% Line 1857
										'++'
								      (%% Line 1857
								       Ws2, _28)
							      in  %% Line 1858
								  apply 're_hash_slots'/7
								      (Bins, L, NewHead, Z, _25, NewBinTS, NewWsB)
					      ( <_23> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_23})
						-| ['compiler_generated'] )
					    end
					( <_22> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_22})
					  -| ['compiler_generated'] )
				      end
				  ( <_30> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_30})
				    -| ['compiler_generated'] )
				end
		    ( <_7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_7})
		      -| ['compiler_generated'] )
		  end
	      %% Line 1860
	      <[],[],Head,_X_Z,BinFS,BinTS,WsB> when 'true' ->
		  let <_31> =
		      call %% Line 1861
			   'lists':%% Line 1861
				   'reverse'
			  (%% Line 1861
			   WsB)
		  in  %% Line 1861
		      {Head,BinFS,BinTS,_31}
	      ( <_38,_37,_36,_35,_34,_33,_32> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_38,_37,_36,_35,_34,_33,_32})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'re_hash_slots',7}}] )
      -| [{'function',{'re_hash_slots',7}}] )
're_hash_split'/6 =
    %% Line 1863
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  ( case <_0,_1,_2,_3,_4,_5> of
	      <[E|KeyObjs],Head,KL,KSz,ML,MSz> when 'true' ->
		  %% Line 1864
		  case E of
		    <{Key,Sz,Bin,_X_Item,_X_Objs}> when 'true' ->
			%% Line 1865
			( case Head of
			    ( <( {'head',_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_rec96,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_11> =
				      case <Key,_rec96> of
					( <I,( 'phash2'
					       -| ['compiler_generated'] )> when ( 'true'
										   -| ['compiler_generated'] ) ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'phash2'
										     -| ['compiler_generated'] )
						    (I)
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					( <I,( 'phash'
					       -| ['compiler_generated'] )> when ( 'true'
										   -| ['compiler_generated'] ) ->
					      ( let <_89> =
						    call ( 'erlang'
							   -| ['compiler_generated'] ):( 'phash'
											 -| ['compiler_generated'] )
							(I, ( 67108863
							      -| ['compiler_generated'] ))
						in  ( call ( 'erlang'
							     -| ['compiler_generated'] ):( '-'
											   -| ['compiler_generated'] )
							  (_89, ( 1
								  -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					( <_90,_91> when ( 'true'
							   -| ['compiler_generated'] ) ->
					      ( primop ( 'match_fail'
							 -| ['compiler_generated'] )
						    (( {( 'function_clause'
							  -| ['compiler_generated'] ),_90,_91}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				  in  ( case Head of
					  ( <( {'head',_58,_rec97,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85}
					       -| ['compiler_generated'] )> when 'true' ->
						let <New> =
						    call 'erlang':'rem'
							(_11, _rec97)
						in  %% Line 1866
						    case <> of
						      %% Line 1867
						      <>
							  when ( try
								  ( let <_15> =
									case ( call ( 'erlang'
										      -| ['compiler_generated'] ):( 'is_record'
														    -| ['compiler_generated'] )
										   (Head, ( 'head'
											    -| ['compiler_generated'] ), ( 30
															   -| ['compiler_generated'] ))
									       -| ['compiler_generated'] ) of
									  ( <( 'true'
									       -| ['compiler_generated'] )> when 'true' ->
										( 'true'
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									  ( <( 'false'
									       -| ['compiler_generated'] )> when 'true' ->
										( 'fail'
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									  ( <( _13
									       -| ['compiler_generated'] )> when 'true' ->
										( call ( 'erlang'
											 -| ['compiler_generated'] ):( 'error'
														       -| ['compiler_generated'] )
										      (( {( 'badarg'
											    -| ['compiler_generated'] ),( _13
															  -| ['compiler_generated'] )}
											 -| ['compiler_generated'] ))
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									end
								    in  let <_16> =
									    call 'erlang':'=:='
										(( _15
										   -| ['compiler_generated'] ), 'true')
									in  let <_17> =
										call 'erlang':'element'
										    (2, Head)
									    in  let <_18> =
										    call 'erlang':'>='
											(New, _17)
										in  ( call ( 'erlang'
											     -| ['compiler_generated'] ):( 'and'
															   -| ['compiler_generated'] )
											  (_16, _18)
										      -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
							      of <Try> ->
								  Try
							      catch <T,R> ->
								  'false'
							      -| ['compiler_generated'] ) ->
							  let <_19> =
							      call %% Line 1868
								   'erlang':%% Line 1868
									    '+'
								  (%% Line 1868
								   MSz, %% Line 1868
									Sz)
							  in  %% Line 1868
							      apply 're_hash_split'/6
								  (KeyObjs, Head, KL, KSz, [Bin|ML], _19)
						      %% Line 1869
						      <> when 'true' ->
							  let <_20> =
							      call %% Line 1870
								   'erlang':%% Line 1870
									    '+'
								  (%% Line 1870
								   KSz, %% Line 1870
									Sz)
							  in  %% Line 1870
							      apply 're_hash_split'/6
								  (KeyObjs, Head, [Bin|KL], _20, ML, MSz)
						    end
					    -| ['compiler_generated'] )
					  ( <_86> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','head'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_57> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','head'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_6})
		      -| ['compiler_generated'] )
		  end
	      %% Line 1872
	      <[],_X_Head,KL,KSz,ML,MSz> when 'true' ->
		  let <_22> =
		      call %% Line 1873
			   'lists':%% Line 1873
				   'reverse'
			  (%% Line 1873
			   KL)
		  in  let <_21> =
			  call %% Line 1873
			       'lists':%% Line 1873
				       'reverse'
			      (%% Line 1873
			       ML)
		      in  %% Line 1873
			  {_22,KSz,_21,MSz}
	      ( <_28,_27,_26,_25,_24,_23> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_28,_27,_26,_25,_24,_23})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'re_hash_split',6}}] )
      -| [{'function',{'re_hash_split',6}}] )
'write_cache'/1 =
    %% Line 1876
    ( fun (_0) ->
	  %% Line 1877
	  ( case ( _0
		   -| [{'function',{'write_cache',1}}] ) of
	      ( <( {'head',_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_rec98,_34,_35,_36,_37,_38,_39,_40,_41}
		   -| ['compiler_generated'] )> when 'true' ->
		    %% Line 1878
		    case call 'dets_utils':'is_empty_cache'
			     (_rec98) of
		      %% Line 1879
		      <'true'> when 'true' ->
			  {( _0
			     -| [{'function',{'write_cache',1}}] ),[],[]}
		      %% Line 1880
		      <'false'> when 'true' ->
			  %% Line 1881
			  case call 'dets_utils':'reset_cache'
				   (_rec98) of
			    <{NewC,MaxInserts,PerKey}> when 'true' ->
				let <_5> =
				    call %% Line 1883
					 'erlang':%% Line 1883
						  'length'
					(%% Line 1883
					 PerKey)
				in  let <MaxNoInsertedKeys> =
					call %% Line 1883
					     'erlang':%% Line 1883
						      'min'
					    (%% Line 1883
					     MaxInserts, _5)
				    in  %% Line 1884
					case ( _0
					       -| [{'function',{'write_cache',1}}] ) of
					  <{'head',_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71}> when 'true' ->
					      let <_9> =
						  call 'erlang':'setelement'
						      (22, ( _0
							     -| [{'function',{'write_cache',1}}] ), NewC)
					      in  %% Line 1885
						  case apply 'may_grow'/3
							   (_9, MaxNoInsertedKeys, 'once') of
						    %% Line 1886
						    <{Head2,'ok'}> when 'true' ->
							%% Line 1887
							apply 'eval_work_list'/2
							    (Head2, PerKey)
						    %% Line 1888
						    <HeadError> when 'true' ->
							%% Line 1889
							call 'erlang':'throw'
							    (HeadError)
						  end
					  ( <_72> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','head'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
			    ( <_4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_4})
			      -| ['compiler_generated'] )
			  end
		      ( <_12> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_12})
			-| ['compiler_generated'] )
		    end
		-| ['compiler_generated'] )
	      ( <_42> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'write_cache',1}}] )
'may_grow'/3 =
    %% Line 1894
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <Head,0,'once'> when 'true' ->
		  %% Line 1896
		  {Head,'ok'}
	      %% Line 1897
	      <Head = {'head',_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57},_X_N,_X_How>
		  when ( try
			  let <_7> =
			      call 'erlang':'element'
				  (17, Head)
			  in  let <_8> =
				  call 'erlang':'=/='
				      (_7, 'false')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _8)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 1898
		  {Head,'ok'}
	      %% Line 1899
	      <Head = {'head',_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,'read',_80,_81,_82,_83,_84,_85},_X_N,_X_How> when 'true' ->
		  %% Line 1900
		  {Head,'ok'}
	      %% Line 1901
	      <Head = {'head',_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114},_X_N,_X_How>
		  when ( try
			  let <_14> =
			      call 'erlang':'element'
				  (4, Head)
			  in  let <_13> =
				  call 'erlang':'element'
				      (21, Head)
			      in  let <_15> =
				      call 'erlang':'>='
					  (_14, _13)
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (( 'true'
					       -| ['compiler_generated'] ), _15)
					-| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 1902
		  {Head,'ok'}
	      %% Line 1903
	      <Head,N,How> when 'true' ->
		  %% Line 1904
		  ( case Head of
		      ( <( {'head',_115,_116,_117,_118,_119,_rec100,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_20> =
				call 'erlang':'+'
				    (_rec100, N)
			    in  ( case Head of
				    ( <( {'head',_144,_145,_rec101,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_171}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_21> =
					      call 'erlang':'-'
						  (_20, _rec101)
					  in  let <Extra> =
						  call 'erlang':'min'
						      (512, _21)
					      in  let <_24> =
						      catch
							  %% Line 1905
							  apply 'may_grow1'/3
							      (Head, Extra, How)
						  in  %% Line 1905
						      case _24 of
							%% Line 1906
							<Error = {'error',_X_Reason}> when 'true' ->
							    %% Line 1907
							    call 'dets_utils':'corrupt'
								(Head, Error)
							%% Line 1908
							<_@r0 = {NewHead,Reply}>
							    when ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'is_record'
												     -| ['compiler_generated'] )
								    (Head,
								     'head',
								     30)
								-| ['compiler_generated'] ) ->
							    %% Line 1909
							    _@r0
							( <_25> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_25})
							  -| ['compiler_generated'] )
						      end
				      -| ['compiler_generated'] )
				    ( <_172> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','head'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_143> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	    end
	    -| [{'function',{'may_grow',3}}] )
      -| [{'function',{'may_grow',3}}] )
'may_grow1'/3 =
    %% Line 1912
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <Head,Extra,'many_times'>
		  when call 'erlang':'>'
			(Extra,
			 256) ->
		  let <Reply> =
		      apply %% Line 1913
			    'grow'/3
			  (%% Line 1913
			   Head, %% Line 1913
				 1, %% Line 1913
				    'undefined')
		  in  let <_5> =
			  call %% Line 1914
			       'erlang':%% Line 1914
					'self'
			      ()
		      in  let <_4> =
			      call %% Line 1914
				   'erlang':%% Line 1914
					    'self'
				  ()
			  in  do  %% Line 1914
				  call 'erlang':'!'
				      (_5, {'$dets_call',_4,'may_grow'})
				  %% Line 1915
				  Reply
	      %% Line 1916
	      <Head,Extra,_X_How> when 'true' ->
		  %% Line 1917
		  apply 'grow'/3
		      (Head, Extra, 'undefined')
	    end
	    -| [{'function',{'may_grow1',3}}] )
      -| [{'function',{'may_grow1',3}}] )
'grow'/3 =
    %% Line 1920
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <Head,Extra,_X_SegZero>
		  when call 'erlang':'=<'
			(Extra,
			 0) ->
		  %% Line 1921
		  {Head,'ok'}
	      %% Line 1922
	      <Head,Extra,'undefined'> when 'true' ->
		  let <_3> =
		      apply %% Line 1923
			    'seg_zero'/0
			  ()
		  in  %% Line 1923
		      apply 'grow'/3
			  (Head, Extra, _3)
	      %% Line 1924
	      <Head = {'head',_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65},_X_Extra,_X_SegZero>
		  when ( try
			  let <_9> =
			      call 'erlang':'element'
				  (4, Head)
			  in  let <_8> =
				  call 'erlang':'element'
				      (21, Head)
			      in  let <_10> =
				      call 'erlang':'>='
					  (_9, _8)
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (( 'true'
					       -| ['compiler_generated'] ), _10)
					-| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 1925
		  {Head,'ok'}
	      %% Line 1926
	      <Head,Extra,SegZero> when 'true' ->
		  %% Line 1927
		  case Head of
		    <{'head',M,_66,Next,_67,_68,_69,_70,N,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91}> when 'true' ->
			let <SegNum> =
			    call %% Line 1928
				 'erlang':%% Line 1928
					  'div'
				(%% Line 1928
				 Next, %% Line 1928
				       256)
			in  %% Line 1929
			    case apply 'allocate_segment'/3
				     (Head, SegZero, SegNum) of
			      <{Head0,W,Ws1}> when 'true' ->
				  %% Line 1931
				  case call 'dets_utils':'pwrite'
					   (Head0, [W|Ws1]) of
				    <{Head1,'ok'}> when 'true' ->
					%% Line 1933
					case apply 're_hash'/2
						 (Head1, N) of
					  <{Head2,'ok'}> when 'true' ->
					      let <_30> =
						  case <> of
						    %% Line 1936
						    <>
							when try
							      let <_16> =
								  call 'erlang':'+'
								      (N, 256)
							      in  call 'erlang':'=:='
								      (_16, M)
							  of <Try> ->
							      Try
							  catch <T,R> ->
							      'false' ->
							let <_rec102> =
							    call %% Line 1937
								 'erlang':%% Line 1937
									  '+'
								(%% Line 1937
								 Next, %% Line 1937
								       256)
							in  let <_rec103> =
								call %% Line 1937
								     'erlang':%% Line 1937
									      '*'
								    (%% Line 1937
								     2, %% Line 1937
									M)
							    in  let <_rec104> =
								    call %% Line 1937
									 'erlang':%% Line 1937
										  '*'
									(%% Line 1937
									 4, %% Line 1937
									    M)
								in  %% Line 1937
								    case Head2 of
								      <{'head',_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120}> when 'true' ->
									  let <_21> =
									      call 'erlang':'setelement'
										  (9, Head2, 0)
									  in  let <_22> =
										  call 'erlang':'setelement'
										      (4, _21, _rec102)
									      in  let <_23> =
										      call 'erlang':'setelement'
											  (3, _22, _rec104)
										  in  call 'erlang':'setelement'
											  (2, _23, _rec103)
								      ( <_121> when 'true' ->
									    ( call ( 'erlang'
										     -| ['compiler_generated'] ):( 'error'
														   -| ['compiler_generated'] )
										  (( {'badrecord','head'}
										     -| ['compiler_generated'] ))
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								    end
						    %% Line 1938
						    <> when 'true' ->
							let <_rec106> =
							    call %% Line 1939
								 'erlang':%% Line 1939
									  '+'
								(%% Line 1939
								 N, %% Line 1939
								    256)
							in  let <_rec107> =
								call %% Line 1939
								     'erlang':%% Line 1939
									      '+'
								    (%% Line 1939
								     Next, %% Line 1939
									   256)
							    in  %% Line 1939
								case Head2 of
								  <{'head',_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150}> when 'true' ->
								      let <_28> =
									  call 'erlang':'setelement'
									      (9, Head2, _rec106)
								      in  call 'erlang':'setelement'
									      (4, _28, _rec107)
								  ( <_151> when 'true' ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','head'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
						  end
					      in  %% Line 1941
						  case apply 'hash_invars'/1
							   (_30) of
						    <'true'> when 'true' ->
							let <_33> =
							    call %% Line 1942
								 'erlang':%% Line 1942
									  '-'
								(%% Line 1942
								 Extra, %% Line 1942
									256)
							in  %% Line 1942
							    apply 'grow'/3
								(_30, _33, SegZero)
						    ( <_32> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_32})
						      -| ['compiler_generated'] )
						  end
					  ( <_15> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_15})
					    -| ['compiler_generated'] )
					end
				    ( <_14> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_14})
				      -| ['compiler_generated'] )
				  end
			      ( <_13> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_13})
				-| ['compiler_generated'] )
			    end
		    ( <_11> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_11})
		      -| ['compiler_generated'] )
		  end
	    end
	    -| [{'function',{'grow',3}}] )
      -| [{'function',{'grow',3}}] )
'hash_invars'/1 =
    %% Line 1944
    ( fun (_0) ->
	  %% Line 1945
	  ( case ( _0
		   -| [{'function',{'hash_invars',1}}] ) of
	      ( <( {'head',_12,_13,_14,_15,_16,_17,_18,_rec109,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39}
		   -| ['compiler_generated'] )> when 'true' ->
		    ( case ( _0
			     -| [{'function',{'hash_invars',1}}] ) of
			( <( {'head',_rec110,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68}
			     -| ['compiler_generated'] )> when 'true' ->
			      ( case ( _0
				       -| [{'function',{'hash_invars',1}}] ) of
				  ( <( {'head',_70,_71,_rec111,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97}
				       -| ['compiler_generated'] )> when 'true' ->
					( case ( _0
						 -| [{'function',{'hash_invars',1}}] ) of
					    ( <( {'head',_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_rec112,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126}
						 -| ['compiler_generated'] )> when 'true' ->
						  %% Line 1946
						  ( case ( _0
							   -| [{'function',{'hash_invars',1}}] ) of
						      ( <( {'head',_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_rec113,_147,_148,_149,_150,_151,_152,_153,_154,_155}
							   -| ['compiler_generated'] )> when 'true' ->
							    apply 'hash_invars'/5
								(_rec109, _rec110, _rec111, _rec112, _rec113)
							-| ['compiler_generated'] )
						      ( <_156> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','head'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_127> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','head'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <_98> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','head'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			( <_69> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','head'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	      ( <_40> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'hash_invars',1}}] )
'hash_invars'/5 =
    %% Line 1949
    ( fun (_0,_1,_2,_3,_4) ->
	  let <_29> =
	      call %% Line 1950
		   'erlang':%% Line 1950
			    'band'
		  (_0, %% Line 1950
		       255)
	  in  let <_30> =
		  call %% Line 1950
		       'erlang':%% Line 1950
				'=:='
		      (_29, %% Line 1950
			    0)
	      in  let <_26> =
		      call %% Line 1950
			   'erlang':%% Line 1950
				    'band'
			  (_1, %% Line 1950
			       255)
		  in  let <_27> =
			  call %% Line 1950
			       'erlang':%% Line 1950
					'=:='
			      (_26, %% Line 1950
				    0)
		      in  let <_31> =
			      call %% Line 1950
				   'erlang':%% Line 1950
					    'and'
				  (_30, _27)
			  in  let <_23> =
				  call %% Line 1950
				       'erlang':%% Line 1950
						'band'
				      (_2, %% Line 1950
					   255)
			      in  let <_24> =
				      call %% Line 1950
					   'erlang':%% Line 1950
						    '=:='
					  (_23, %% Line 1950
						0)
				  in  let <_32> =
					  call %% Line 1950
					       'erlang':%% Line 1950
							'and'
					      (_31, _24)
				      in  let <_20> =
					      call %% Line 1950
						   'erlang':%% Line 1950
							    'band'
						  (_3, %% Line 1950
						       255)
					  in  let <_21> =
						  call %% Line 1950
						       'erlang':%% Line 1950
								'=:='
						      (_20, %% Line 1950
							    0)
					      in  let <_33> =
						      call %% Line 1950
							   'erlang':%% Line 1950
								    'and'
							  (_32, _21)
						  in  let <_17> =
							  call %% Line 1950
							       'erlang':%% Line 1950
									'band'
							      (_4, %% Line 1950
								   255)
						      in  let <_18> =
							      call %% Line 1950
								   'erlang':%% Line 1950
									    '=:='
								  (_17, %% Line 1950
									0)
							  in  let <_34> =
								  call %% Line 1950
								       'erlang':%% Line 1950
										'and'
								      (_33, _18)
							      in  let <_15> =
								      call %% Line 1951
									   'erlang':%% Line 1951
										    '=<'
									  (%% Line 1951
									   0, _0)
								  in  let <_35> =
									  call %% Line 1951
									       'erlang':%% Line 1951
											'and'
									      (_34, _15)
								      in  let <_14> =
									      call %% Line 1951
										   'erlang':%% Line 1951
											    '=<'
										  (_0, _1)
									  in  let <_36> =
										  call %% Line 1951
										       'erlang':%% Line 1951
												'and'
										      (_35, _14)
									      in  let <_12> =
										      call %% Line 1951
											   'erlang':%% Line 1951
												    '*'
											  (%% Line 1951
											   2, _2)
										  in  let <_13> =
											  call %% Line 1951
											       'erlang':%% Line 1951
													'=<'
											      (_0, _12)
										      in  let <_37> =
											      call %% Line 1951
												   'erlang':%% Line 1951
													    'and'
												  (_36, _13)
											  in  let <_11> =
												  call %% Line 1951
												       'erlang':%% Line 1951
														'=<'
												      (_1, _2)
											      in  let <_38> =
												      call %% Line 1951
													   'erlang':%% Line 1951
														    'and'
													  (_37, _11)
												  in  let <_9> =
													  call %% Line 1952
													       'erlang':%% Line 1952
															'*'
													      (%% Line 1952
													       2, _1)
												      in  let <_10> =
													      call %% Line 1952
														   'erlang':%% Line 1952
															    '=<'
														  (_2, _9)
													  in  let <_39> =
														  call %% Line 1952
														       'erlang':%% Line 1952
																'and'
														      (_38, _10)
													      in  let <_8> =
														      call %% Line 1952
															   'erlang':%% Line 1952
																    '=<'
															  (%% Line 1952
															   0, _3)
														  in  let <_40> =
															  call %% Line 1952
															       'erlang':%% Line 1952
																	'and'
															      (_39, _8)
														      in  let <_7> =
															      call %% Line 1952
																   'erlang':%% Line 1952
																	    '=<'
																  (_3, _2)
															  in  let <_41> =
																  call %% Line 1952
																       'erlang':%% Line 1952
																		'and'
																      (_40, _7)
															      in  let <_6> =
																      call %% Line 1952
																	   'erlang':%% Line 1952
																		    '=<'
																	  (_2, _4)
																  in  let <_42> =
																	  call %% Line 1952
																	       'erlang':%% Line 1952
																			'and'
																	      (_41, _6)
																      in  let <_5> =
																	      call %% Line 1953
																		   'erlang':%% Line 1953
																			    '=<'
																		  (_3, _1)
																	  in  %% Line 1953
																	      call 'erlang':'and'
																		  (_42, _5)
      -| [{'function',{'hash_invars',5}}] )
'seg_zero'/0 =
    %% Line 1955
    ( fun () ->
	  %% Line 1956
	  #{#<0>(2048,8,'integer',['unsigned'|['big']])}#
      -| [{'function',{'seg_zero',0}}] )
'find_object'/2 =
    %% Line 1958
    ( fun (_0,_1) ->
	  %% Line 1959
	  ( case _0 of
	      ( <( {'head',_8,_9,_10,_11,_12,_13,_14,_15,_16,_rec114,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35}
		   -| ['compiler_generated'] )> when 'true' ->
		    let <Key> =
			call 'erlang':'element'
			    (_rec114, _1)
		    in  let <Slot> =
			    apply %% Line 1960
				  'db_hash'/2
				(%% Line 1960
				 Key, _0)
			in  %% Line 1961
			    apply 'find_object'/3
				(_0, _1, Slot)
		-| ['compiler_generated'] )
	      ( <_36> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'find_object',2}}] )
'find_object'/3 =
    %% Line 1963
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <H = {'head',_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43},_X_Obj,Slot>
		  when ( try
			  let <_7> =
			      call 'erlang':'element'
				  (4, H)
			  in  let <_8> =
				  call 'erlang':'>='
				      (Slot, _7)
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _8)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 1964
		  'false'
	      %% Line 1965
	      <H,Obj,Slot> when 'true' ->
		  let <_9> =
		      catch
			  %% Line 1966
			  apply 'slot_objects'/2
			      (H, Slot)
		  in  %% Line 1966
		      case _9 of
			%% Line 1967
			<{'ok',Pointer,Objects}> when 'true' ->
			    %% Line 1968
			    case call 'lists':'member'
				     (Obj, Objects) of
			      %% Line 1969
			      <'true'> when 'true' ->
				  {'ok',Pointer}
			      %% Line 1970
			      <'false'> when 'true' ->
				  'false'
			      ( <_10> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_10})
				-| ['compiler_generated'] )
			    end
			%% Line 1972
			<_44> when 'true' ->
			    'false'
		      end
	    end
	    -| [{'function',{'find_object',3}}] )
      -| [{'function',{'find_object',3}}] )
'slot_objects'/2 =
    %% Line 1976
    ( fun (_0,_1) ->
	  let <SlotPos> =
	      apply %% Line 1977
		    'slot_position'/1
		  (_1)
	  in  let <MaxSize> =
		  case _0 of
		    %% Line 2478
		    ( <( _69 = ( {( 'head'
				    -| ['compiler_generated'] ),_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}
				 -| ['compiler_generated'] )
			 -| ['compiler_generated'] )>
			  when ( try
				  ( let <_5> =
					call ( 'erlang'
					       -| ['compiler_generated'] ):( 'element'
									     -| ['compiler_generated'] )
					    (( 8
					       -| ['compiler_generated'] ), _69)
				    in  ( let <_6> =
					      call ( 'erlang'
						     -| ['compiler_generated'] ):( '=:='
										   -| ['compiler_generated'] )
						  (_5, ( 'undefined'
							 -| ['compiler_generated'] ))
					  in  ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (( 'true'
						       -| ['compiler_generated'] ), _6)
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  ( 'false'
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] ) ->
			  %% Line 2479
			  ( 4294967296
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		    %% Line 2480
		    ( <_70> when ( 'true'
				   -| ['compiler_generated'] ) ->
			  %% Line 2481
			  ( case _70 of
			      ( <( {( 'head'
				      -| ['compiler_generated'] ),_39,_40,_41,_42,_43,_44,_rec128,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66}
				   -| ['compiler_generated'] )> when ( 'true'
								       -| ['compiler_generated'] ) ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'bsl'
									   -| ['compiler_generated'] )
					  (( 1
					     -| ['compiler_generated'] ), _rec128)
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <_67> when ( 'true'
					     -| ['compiler_generated'] ) ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','head'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 1979
		  case call 'dets_utils':'ipread'
			   (_0, SlotPos, MaxSize) of
		    %% Line 1980
		    <{'ok',{BucketSz,Pointer,#{#<_16>(32,1,'integer',['unsigned'|['big']]),
					       #<_X_St>(32,1,'integer',['unsigned'|['big']]),
					       #<KeysObjs>(( 'all'
							     -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#}}>
			when call 'erlang':'=:='
			      (_16,
			       BucketSz) ->
			let <_6> =
			    catch
				%% Line 1981
				( case _0 of
				    ( <( {'head',_17,_18,_19,_20,_21,_22,_23,_24,_rec115,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44}
					 -| ['compiler_generated'] )> when 'true' ->
					  apply 'bin2objs'/3
					      (KeysObjs, _rec115, [])
				      -| ['compiler_generated'] )
				    ( <_45> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','head'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			in  %% Line 1981
			    case _6 of
			      %% Line 1982
			      <{'EXIT',_X_Error}> when 'true' ->
				  let <Bad> =
				      call %% Line 1983
					   'dets_utils':%% Line 1983
							'bad_object'
					  (%% Line 1983
					   'slot_objects', %% Line 1984
							   {SlotPos,KeysObjs})
				  in  let <_8> =
					  call %% Line 1985
					       'dets_utils':%% Line 1985
							    'corrupt_reason'
					      (_0, %% Line 1985
						   Bad)
				      in  %% Line 1985
					  call 'erlang':'throw'
					      (_8)
			      %% Line 1986
			      <Objs>
				  when call 'erlang':'is_list'
					(_6) ->
				  let <_9> =
				      call %% Line 1987
					   'lists':%% Line 1987
						   'reverse'
					  (%% Line 1987
					   Objs)
				  in  %% Line 1987
				      {'ok',Pointer,_9}
			      ( <_10> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_10})
				-| ['compiler_generated'] )
			    end
		    %% Line 1989
		    <[]> when 'true' ->
			%% Line 1990
			{'ok',0,[]}
		    %% Line 1991
		    <BadRead> when 'true' ->
			let <Bad> =
			    call %% Line 1992
				 'dets_utils':%% Line 1992
					      'bad_object'
				(%% Line 1992
				 'slot_objects', %% Line 1992
						 {SlotPos,BadRead})
			in  let <_12> =
				call %% Line 1993
				     'dets_utils':%% Line 1993
						  'corrupt_reason'
				    (_0, %% Line 1993
					 Bad)
			    in  %% Line 1993
				call 'erlang':'throw'
				    (_12)
		  end
      -| [{'function',{'slot_objects',2}}] )
'eval_work_list'/2 =
    %% Line 2001
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Head,[{Key,[{_X_Seq,{'lookup',Pid}}|[]]}|[]]> when 'true' ->
		  let <_2> =
		      apply %% Line 2002
			    'db_hash'/2
			  (%% Line 2002
			   Key, %% Line 2002
				Head)
		  in  let <SlotPos> =
			  apply %% Line 2002
				'slot_position'/1
			      (_2)
		      in  let <MaxSize> =
			      case %% Line 2003
				   Head of
				%% Line 2478
				( <( _69 = ( {( 'head'
						-| ['compiler_generated'] ),_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}
					     -| ['compiler_generated'] )
				     -| ['compiler_generated'] )>
				      when ( try
					      ( let <_5> =
						    call ( 'erlang'
							   -| ['compiler_generated'] ):( 'element'
											 -| ['compiler_generated'] )
							(( 8
							   -| ['compiler_generated'] ), _69)
						in  ( let <_6> =
							  call ( 'erlang'
								 -| ['compiler_generated'] ):( '=:='
											       -| ['compiler_generated'] )
							      (_5, ( 'undefined'
								     -| ['compiler_generated'] ))
						      in  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'and'
												 -| ['compiler_generated'] )
								(( 'true'
								   -| ['compiler_generated'] ), _6)
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      ( 'false'
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] ) ->
				      %% Line 2479
				      ( 4294967296
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 2480
				( <_70> when ( 'true'
					       -| ['compiler_generated'] ) ->
				      %% Line 2481
				      ( case _70 of
					  ( <( {( 'head'
						  -| ['compiler_generated'] ),_39,_40,_41,_42,_43,_44,_rec128,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66}
					       -| ['compiler_generated'] )> when ( 'true'
										   -| ['compiler_generated'] ) ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'bsl'
										       -| ['compiler_generated'] )
						      (( 1
							 -| ['compiler_generated'] ), _rec128)
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_67> when ( 'true'
							 -| ['compiler_generated'] ) ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','head'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  let <_17> =
				  case %% Line 2004
				       call 'dets_utils':'ipread'
					   (Head, SlotPos, MaxSize) of
				    %% Line 2005
				    <{'ok',{_X_BucketSz,_X_Pointer,Bin}}> when 'true' ->
					let <_5> =
					    catch
						%% Line 2006
						apply 'per_key'/2
						    (Head, Bin)
					in  %% Line 2006
					    case _5 of
					      %% Line 2007
					      <{'EXIT',_X_Error}> when 'true' ->
						  let <Bad> =
						      call %% Line 2008
							   'dets_utils':%% Line 2008
									'bad_object'
							  (%% Line 2008
							   'eval_work_list', %% Line 2009
									     {SlotPos,Bin})
						  in  let <_7> =
							  call %% Line 2010
							       'dets_utils':%% Line 2010
									    'corrupt_reason'
							      (%% Line 2010
							       Head, %% Line 2010
								     Bad)
						      in  %% Line 2010
							  call 'erlang':'throw'
							      (_7)
					      %% Line 2011
					      <KeyObjs>
						  when call 'erlang':'is_list'
							(_5) ->
						  %% Line 2012
						  case call 'dets_utils':'mkeysearch'
							   (Key, 1, KeyObjs) of
						    %% Line 2013
						    <'false'> when 'true' ->
							%% Line 2014
							[]
						    %% Line 2015
						    <{'value',{_25,_X_KS,_X_KB,O,Os}}>
							when call 'erlang':'=:='
							      (_25,
							       Key) ->
							let <_8> =
							    catch
								%% Line 2016
								apply 'binobjs2terms'/1
								    (Os)
							in  %% Line 2016
							    case _8 of
							      %% Line 2017
							      <{'EXIT',_X_Error}> when 'true' ->
								  let <Bad> =
								      call %% Line 2018
									   'dets_utils':%% Line 2018
											'bad_object'
									  (%% Line 2019
									   'eval_work_list', %% Line 2020
											     {SlotPos,Bin,KeyObjs})
								  in  let <_10> =
									  call %% Line 2021
									       'dets_utils':%% Line 2021
											    'corrupt_reason'
									      (%% Line 2022
									       Head, %% Line 2022
										     Bad)
								      in  %% Line 2021
									  call 'erlang':'throw'
									      (_10)
							      %% Line 2023
							      <Terms>
								  when call 'erlang':'is_list'
									(_8) ->
								  %% Line 2024
								  apply 'get_objects'/1
								      ([O|Terms])
							      ( <_11> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_11})
								-| ['compiler_generated'] )
							    end
						    ( <_12> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_12})
						      -| ['compiler_generated'] )
						  end
					      ( <_13> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_13})
						-| ['compiler_generated'] )
					    end
				    %% Line 2028
				    <[]> when 'true' ->
					%% Line 2029
					[]
				    %% Line 2030
				    <BadRead> when 'true' ->
					let <Bad> =
					    call %% Line 2031
						 'dets_utils':%% Line 2031
							      'bad_object'
						(%% Line 2031
						 'eval_work_list', %% Line 2032
								   {SlotPos,BadRead})
					in  let <_15> =
						call %% Line 2033
						     'dets_utils':%% Line 2033
								  'corrupt_reason'
						    (%% Line 2033
						     Head, %% Line 2033
							   Bad)
					    in  %% Line 2033
						call 'erlang':'throw'
						    (_15)
				  end
			      in  %% Line 2035
				  {Head,[{Pid,_17}|[]],[]}
	      %% Line 2036
	      <Head,PerKey> when 'true' ->
		  let <SWLs> =
		      apply %% Line 2037
			    'tag_with_slot'/3
			  (%% Line 2037
			   PerKey, %% Line 2037
				   Head, %% Line 2037
					 [])
		  in  let <P1> =
			  call %% Line 2038
			       'dets_utils':%% Line 2038
					    'family'
			      (%% Line 2038
			       SWLs)
		      in  %% Line 2039
			  case apply 'remove_slot_tag'/3
				   (P1, [], []) of
			    <{PerSlot,SlotPositions}> when 'true' ->
				%% Line 2040
				case call 'dets_utils':'pread'
					 (SlotPositions, Head) of
				  <{'ok',Bins}> when 'true' ->
				      %% Line 2041
				      apply 'read_buckets'/11
					  (PerSlot, SlotPositions, Bins, Head, [], [], [], [], 0, 0, 0)
				  ( <_22> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_22})
				    -| ['compiler_generated'] )
				end
			    ( <_21> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_21})
			      -| ['compiler_generated'] )
			  end
	    end
	    -| [{'function',{'eval_work_list',2}}] )
      -| [{'function',{'eval_work_list',2}}] )
'tag_with_slot'/3 =
    %% Line 2043
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <[WL = {K,_7}|WLs],Head,L> when 'true' ->
		  let <_3> =
		      apply %% Line 2044
			    'db_hash'/2
			  (%% Line 2044
			   K, %% Line 2044
			      Head)
		  in  %% Line 2044
		      apply 'tag_with_slot'/3
			  (WLs, Head, [{_3,WL}|L])
	      %% Line 2045
	      <[],_X_Head,L> when 'true' ->
		  %% Line 2046
		  L
	      ( <_6,_5,_4> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_6,_5,_4})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'tag_with_slot',3}}] )
      -| [{'function',{'tag_with_slot',3}}] )
'remove_slot_tag'/3 =
    %% Line 2048
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <[{S,SWLs}|SSWLs],Ls,SPs> when 'true' ->
		  let <_4> =
		      apply %% Line 2049
			    'slot_position'/1
			  (%% Line 2049
			   S)
		  in  %% Line 2049
		      apply 'remove_slot_tag'/3
			  (SSWLs, [SWLs|Ls], [{_4,8}|SPs])
	      %% Line 2050
	      <[],Ls,SPs> when 'true' ->
		  %% Line 2051
		  {Ls,SPs}
	      ( <_7,_6,_5> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_7,_6,_5})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'remove_slot_tag',3}}] )
      -| [{'function',{'remove_slot_tag',3}}] )
'read_buckets'/11 =
    %% Line 2053
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10> of
	      <[WLs|SPs],[{P1,_X_8}|Ss],[#{#<_X_Zero>(32,1,'integer',['unsigned'|['big']]),
					   #<P2>(32,1,'integer',['unsigned'|['big']])}#|Bs],Head,%% Line 2054
												 PWLs,%% Line 2054
												      ToRead,%% Line 2054
													     LU,%% Line 2054
														Ws,%% Line 2054
														   NoObjs,%% Line 2054
															  NoKeys,%% Line 2054
																 SoFar>
		  when %% Line 2054
		    call 'erlang':'=:='
			(P2,
			 0) ->
		  %% Line 2055
		  case %% Line 2056
		       apply 'eval_bucket_keys'/8
			   (WLs, P1, 0, 0, [], Head, Ws, LU) of
		    <{NewHead,NLU,NWs,No,KNo}> when 'true' ->
			let <NewNoObjs> =
			    call %% Line 2057
				 'erlang':%% Line 2057
					  '+'
				(%% Line 2057
				 No, %% Line 2057
				     NoObjs)
			in  let <NewNoKeys> =
				call %% Line 2058
				     'erlang':%% Line 2058
					      '+'
				    (%% Line 2058
				     KNo, %% Line 2058
					  NoKeys)
			    in  %% Line 2059
				apply 'read_buckets'/11
				    (SPs, Ss, Bs, NewHead, PWLs, ToRead, NLU, NWs, %% Line 2060
										   NewNoObjs, %% Line 2060
											      NewNoKeys, %% Line 2060
													 SoFar)
		    ( <_11> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_11})
		      -| ['compiler_generated'] )
		  end
	      %% Line 2061
	      <[WorkLists|SPs],[{P1,_X_8}|Ss],[#{#<Size>(32,1,'integer',['unsigned'|['big']]),
						 #<P2>(32,1,'integer',['unsigned'|['big']])}#|Bs],Head,%% Line 2062
												       PWLs,%% Line 2062
													    ToRead,%% Line 2062
														   LU,%% Line 2062
														      Ws,%% Line 2062
															 NoObjs,%% Line 2062
																NoKeys,%% Line 2062
																       SoFar>
		  when let <_16> =
			try
			    let <_15> =
				call %% Line 2063
				     'erlang':%% Line 2063
					      '+'
				    (%% Line 2063
				     SoFar, %% Line 2063
					    Size)
			    in  %% Line 2063
				call 'erlang':'<'
				    (_15, 81920)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  let <_17> =
			    call %% Line 2063
				 'erlang':%% Line 2063
					  '=:='
				(%% Line 2063
				 ToRead, %% Line 2063
					 [])
			in  %% Line 2063
			    call 'erlang':'or'
				(_16, _17) ->
		  let <NewToRead> =
		      [%% Line 2064
		       {P2,Size}|%% Line 2064
				 ToRead]
		  in  let <NewPWLs> =
			  [%% Line 2065
			   {P2,P1,WorkLists}|%% Line 2065
					     PWLs]
		      in  let <NewSoFar> =
			      call %% Line 2066
				   'erlang':%% Line 2066
					    '+'
				  (%% Line 2066
				   SoFar, %% Line 2066
					  Size)
			  in  %% Line 2067
			      apply 'read_buckets'/11
				  (SPs, Ss, Bs, Head, NewPWLs, NewToRead, LU, Ws, %% Line 2068
										  NoObjs, %% Line 2068
											  NoKeys, %% Line 2068
												  NewSoFar)
	      %% Line 2069
	      <SPs,Ss,Bs,Head,PWLs0,ToRead0,LU,Ws,NoObjs,NoKeys,SoFar>
		  when %% Line 2070
		    call 'erlang':'>'
			(SoFar,
			 0) ->
		  let <PWLs> =
		      call %% Line 2074
			   'lists':%% Line 2074
				   'keysort'
			  (%% Line 2074
			   1, %% Line 2074
			      PWLs0)
		  in  let <ToRead> =
			  call %% Line 2075
			       'lists':%% Line 2075
				       'keysort'
			      (%% Line 2075
			       1, %% Line 2075
				  ToRead0)
		      in  do  %% Line 2076
			      apply 'check_pread2_arg'/2
				  (ToRead, Head)
			      %% Line 2077
			      case call 'dets_utils':'pread'
				       (ToRead, Head) of
				<{'ok',Bins}> when 'true' ->
				    let <_24> =
					catch
					    %% Line 2078
					    apply 'eval_buckets'/7
						(Bins, PWLs, Head, LU, Ws, 0, 0)
				    in  %% Line 2078
					case _24 of
					  %% Line 2079
					  <{'ok',NewHead,NLU,[],0,0}> when 'true' ->
					      %% Line 2080
					      apply 'read_buckets'/11
						  (SPs, Ss, Bs, NewHead, [], [], NLU, [], %% Line 2081
											  NoObjs, %% Line 2081
												  NoKeys, %% Line 2081
													  0)
					  %% Line 2082
					  <{'ok',Head1,NLU,NWs,No,KNo}> when 'true' ->
					      let <NewNoObjs> =
						  call %% Line 2083
						       'erlang':%% Line 2083
								'+'
						      (%% Line 2083
						       NoObjs, %% Line 2083
							       No)
					      in  let <NewNoKeys> =
						      call %% Line 2084
							   'erlang':%% Line 2084
								    '+'
							  (%% Line 2084
							   NoKeys, %% Line 2084
								   KNo)
						  in  let <_27> =
							  call %% Line 2088
							       'lists':%% Line 2088
								       'reverse'
							      (%% Line 2088
							       NWs)
						      in  %% Line 2088
							  case call 'dets_utils':'pwrite'
								   (Head1, _27) of
							    <{NewHead,'ok'}> when 'true' ->
								%% Line 2089
								apply 'read_buckets'/11
								    (SPs, Ss, Bs, NewHead, [], [], NLU, [], %% Line 2090
													    NewNoObjs, %% Line 2090
														       NewNoKeys, %% Line 2090
																  0)
							    ( <_28> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_28})
							      -| ['compiler_generated'] )
							  end
					  %% Line 2091
					  <Error> when 'true' ->
					      let <Bad> =
						  call %% Line 2092
						       'dets_utils':%% Line 2092
								    'bad_object'
						      (%% Line 2092
						       'read_buckets', %% Line 2092
								       {Bins,Error})
					      in  let <_30> =
						      call %% Line 2093
							   'dets_utils':%% Line 2093
									'corrupt_reason'
							  (%% Line 2093
							   Head, %% Line 2093
								 Bad)
						  in  %% Line 2093
						      call 'erlang':'throw'
							  (_30)
					end
				( <_23> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_23})
				  -| ['compiler_generated'] )
			      end
	      %% Line 2095
	      <[],[],[],Head,[],[],LU,Ws,NoObjs,NoKeys,0> when 'true' ->
		  %% Line 2096
		  case apply 'update_no_keys'/4
			   (Head, Ws, NoObjs, NoKeys) of
		    <{NewHead,NWs}> when 'true' ->
			let <_33> =
			    call %% Line 2097
				 'lists':%% Line 2097
					 'reverse'
				(%% Line 2097
				 NWs)
			in  %% Line 2097
			    {NewHead,LU,_33}
		    ( <_32> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_32})
		      -| ['compiler_generated'] )
		  end
	      ( <_44,_43,_42,_41,_40,_39,_38,_37,_36,_35,_34> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_44,_43,_42,_41,_40,_39,_38,_37,_36,_35,_34})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'read_buckets',11}}] )
      -| [{'function',{'read_buckets',11}}] )
'eval_buckets'/7 =
    %% Line 2099
    ( fun (_0,_1,_2,_3,_4,_5,_6) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6> of
	      <[Bin|Bins],[SP|SPs],Head,LU,Ws,NoObjs,NoKeys> when 'true' ->
		  %% Line 2100
		  case SP of
		    <{Pos,P1,WLs}> when 'true' ->
			let <KeyObjs> =
			    apply %% Line 2101
				  'per_key'/2
				(%% Line 2101
				 Head, %% Line 2101
				       Bin)
			in  let <_9> =
				call %% Line 2103
				     'erlang':%% Line 2103
					      'byte_size'
				    (%% Line 2103
				     Bin)
			    in  %% Line 2102
				case %% Line 2103
				     apply 'eval_bucket_keys'/8
					 (WLs, P1, Pos, _9, KeyObjs, Head, Ws, LU) of
				  <{NewHead,NLU,NWs,No,KNo}> when 'true' ->
				      let <_12> =
					  call %% Line 2104
					       'erlang':%% Line 2104
							'+'
					      (%% Line 2104
					       NoObjs, %% Line 2104
						       No)
				      in  let <_11> =
					      call %% Line 2104
						   'erlang':%% Line 2104
							    '+'
						  (%% Line 2104
						   NoKeys, %% Line 2104
							   KNo)
					  in  %% Line 2104
					      apply 'eval_buckets'/7
						  (Bins, SPs, NewHead, NLU, NWs, _12, _11)
				  ( <_10> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_10})
				    -| ['compiler_generated'] )
				end
		    ( <_7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_7})
		      -| ['compiler_generated'] )
		  end
	      %% Line 2105
	      <[],[],Head,LU,Ws,NoObjs,NoKeys> when 'true' ->
		  %% Line 2106
		  {'ok',Head,LU,Ws,NoObjs,NoKeys}
	      ( <_19,_18,_17,_16,_15,_14,_13> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_19,_18,_17,_16,_15,_14,_13})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'eval_buckets',7}}] )
      -| [{'function',{'eval_buckets',7}}] )
'eval_bucket_keys'/8 =
    %% Line 2108
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	  %% Line 2110
	  ( case _5 of
	      ( <( {'head',_22,_23,_24,_25,_26,_27,_28,_29,_rec116,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49}
		   -| ['compiler_generated'] )> when 'true' ->
		    case apply 'eval_slot'/9
			     (_0, _4, _rec116, _7, [], 0, 0, 0, 'false') of
		      <{NLU,Bins,BSize,No,KNo,Ch}> when 'true' ->
			  %% Line 2111
			  case %% Line 2112
			       apply 'updated'/9
				   (_5, _2, _3, BSize, _1, Bins, Ch, No, KNo) of
			    <{NewHead,W1,W2}> when 'true' ->
				let <_12> =
				    call %% Line 2113
					 'erlang':%% Line 2113
						  '++'
					(%% Line 2113
					 W1, _6)
				in  let <_13> =
					call %% Line 2113
					     'erlang':%% Line 2113
						      '++'
					    (%% Line 2113
					     W2, _12)
				    in  %% Line 2113
					{NewHead,NLU,_13,No,KNo}
			    ( <_11> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_11})
			      -| ['compiler_generated'] )
			  end
		      ( <_10> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_10})
			-| ['compiler_generated'] )
		    end
		-| ['compiler_generated'] )
	      ( <_50> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'eval_bucket_keys',8}}] )
'updated'/9 =
    %% Line 2115
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	  let <BinsSize> =
	      call %% Line 2116
		   'erlang':%% Line 2116
			    '+'
		  (_3, %% Line 2116
		       8)
	  in  %% Line 2117
	      case <> of
		%% Line 2118
		<>
		    when let <_10> =
			  call 'erlang':'=:='
			      (_1, 0)
		      in  let <_11> =
			      call 'erlang':'=:='
				  (_3, 0)
			  in  call 'erlang':'and'
				  (_10, _11) ->
		    %% Line 2119
		    {_0,[],[]}
		%% Line 2120
		<>
		    when let <_12> =
			  call 'erlang':'=:='
			      (_1, 0)
		      in  let <_13> =
			      call 'erlang':'>'
				  (_3, 0)
			  in  call 'erlang':'and'
				  (_12, _13) ->
		    let <_14> =
			call %% Line 2475
			     ( 'erlang'
			       -| ['compiler_generated'] ):%% Line 2475
							   ( '-'
							     -| ['compiler_generated'] )
			    (%% Line 2121
			     BinsSize, %% Line 2475
				       ( 1
					 -| ['compiler_generated'] ))
		    in  %% Line 2121
			case call 'dets_utils':'alloc'
				 (_0, _14) of
			  <{Head1,NewPos,FPos}> when 'true' ->
			      let <_16> =
				  call %% Line 2122
				       'erlang':%% Line 2122
						'-'
				      (%% Line 2122
				       FPos, %% Line 2122
					     1)
			      in  let <NewHead> =
				      apply %% Line 2122
					    'one_bucket_added'/2
					  (%% Line 2122
					   Head1, _16)
				  in  let <_18> =
					  #{#<%% Line 2123
					      BinsSize>(%% Line 2123
							32,1,'integer',['unsigned'|['big']]),
					    #<%% Line 2123
					      305419896>(%% Line 2123
							 32,1,'integer',['unsigned'|['big']])}#
				      in  let <W1> =
					      {%% Line 2123
					       NewPos,%% Line 2123
						      [_18|_5]}
					  in  let <_20> =
						  #{#<%% Line 2124
						      BinsSize>(%% Line 2124
								32,1,'integer',['unsigned'|['big']]),
						    #<%% Line 2124
						      NewPos>(%% Line 2124
							      32,1,'integer',['unsigned'|['big']])}#
					      in  let <W2> = {_4,_20}
						  in  %% Line 2125
						      {NewHead,[W2|[]],[W1|[]]}
			  ( <_15> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_15})
			    -| ['compiler_generated'] )
			end
		%% Line 2126
		<>
		    when let <_22> =
			  call 'erlang':'=/='
			      (_1, 0)
		      in  let <_23> =
			      call 'erlang':'=:='
				  (_3, 0)
			  in  call 'erlang':'and'
				  (_22, _23) ->
		    let <_24> =
			call %% Line 2475
			     ( 'erlang'
			       -| ['compiler_generated'] ):%% Line 2475
							   ( '-'
							     -| ['compiler_generated'] )
			    (_2, %% Line 2475
				 ( 1
				   -| ['compiler_generated'] ))
		    in  %% Line 2127
			case call 'dets_utils':'free'
				 (_0, _1, _24) of
			  <{Head1,FPos}> when 'true' ->
			      let <_26> =
				  call %% Line 2128
				       'erlang':%% Line 2128
						'-'
				      (%% Line 2128
				       FPos, %% Line 2128
					     1)
			      in  let <NewHead> =
				      apply %% Line 2128
					    'one_bucket_removed'/2
					  (%% Line 2128
					   Head1, _26)
				  in  let <_28> =
					  call %% Line 2129
					       'erlang':%% Line 2129
							'+'
					      (_1, %% Line 2129
						   4)
				      in  let <W1> = {_28,%% Line 2129
						   #{#<3>(8,1,'integer',['unsigned'|['big']]),
						     #<171>(8,1,'integer',['unsigned'|['big']]),
						     #<205>(8,1,'integer',['unsigned'|['big']]),
						     #<239>(8,1,'integer',['unsigned'|['big']])}#}
					  in  let <W2> = {_4,%% Line 2130
						      #{#<0>(8,1,'integer',['unsigned'|['big']]),
							#<0>(8,1,'integer',['unsigned'|['big']]),
							#<0>(8,1,'integer',['unsigned'|['big']]),
							#<0>(8,1,'integer',['unsigned'|['big']]),
							#<0>(8,1,'integer',['unsigned'|['big']]),
							#<0>(8,1,'integer',['unsigned'|['big']]),
							#<0>(8,1,'integer',['unsigned'|['big']]),
							#<0>(8,1,'integer',['unsigned'|['big']])}#}
					      in  %% Line 2131
						  {NewHead,[W2|[]],[W1|[]]}
			  ( <_25> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_25})
			    -| ['compiler_generated'] )
			end
		%% Line 2132
		<>
		    when try
			  let <_31> =
			      call 'erlang':'=/='
				  (_1, 0)
			  in  let <_32> =
				  call 'erlang':'>'
				      (_3, 0)
			      in  let <_33> =
				      call 'erlang':'=:='
					  (_6, 'false')
				  in  let <_34> =
					  call 'erlang':'and'
					      (_32, _33)
				      in  call 'erlang':'and'
					      (_31, _34)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 2133
		    {_0,[],[]}
		%% Line 2134
		<>
		    when let <_35> =
			  call 'erlang':'=/='
			      (_1, 0)
		      in  let <_36> =
			      call 'erlang':'>'
				  (_3, 0)
			  in  call 'erlang':'and'
				  (_35, _36) ->
		    let <_39> =
			case <> of
			  %% Line 2138
			  <>
			      when call 'erlang':'=:='
				    (_2,
				     BinsSize) ->
			      'same'
			  %% Line 2139
			  <> when 'true' ->
			      ( let <_88> =
				    call %% Line 2471
					 ( 'dets_utils'
					   -| ['compiler_generated'] ):%% Line 2471
								       ( 'log2'
									 -| ['compiler_generated'] )
					(_2)
				in  let <_38> =
					call %% Line 2471
					     ( 'erlang'
					       -| ['compiler_generated'] ):%% Line 2471
									   ( '+'
									     -| ['compiler_generated'] )
					    (%% Line 2471
					     ( 1
					       -| ['compiler_generated'] ), _88)
				    in  ( let <_91> =
					      call %% Line 2471
						   ( 'dets_utils'
						     -| ['compiler_generated'] ):%% Line 2471
										 ( 'log2'
										   -| ['compiler_generated'] )
						  (BinsSize)
					  in  let <_37> =
						  call %% Line 2471
						       ( 'erlang'
							 -| ['compiler_generated'] ):%% Line 2471
										     ( '+'
										       -| ['compiler_generated'] )
						      (%% Line 2471
						       ( 1
							 -| ['compiler_generated'] ), _91)
					      in  call 'erlang':'=:='
						      (_38, _37)
					  -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			end
		    in  let <_51> =
			    case <> of
			      %% Line 2142
			      <>
				  when ( try
					  ( let <_43> =
						case ( call ( 'erlang'
							      -| ['compiler_generated'] ):( 'is_record'
											    -| ['compiler_generated'] )
							   (_0, ( 'head'
								  -| ['compiler_generated'] ), ( 30
												 -| ['compiler_generated'] ))
						       -| ['compiler_generated'] ) of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							( 'true'
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							( 'fail'
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( _41
						       -| ['compiler_generated'] )> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {( 'badarg'
								    -| ['compiler_generated'] ),( _41
												  -| ['compiler_generated'] )}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					    in  let <_44> =
						    call 'erlang':'=:='
							(( _43
							   -| ['compiler_generated'] ), 'true')
						in  let <_45> =
							call 'erlang':'element'
							    (17, _0)
						    in  let <_46> =
							    call 'erlang':'=/='
								(_45, 'false')
							in  ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'and'
												   -| ['compiler_generated'] )
								  (_44, _46)
							      -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false'
				      -| ['compiler_generated'] ) ->
				  let <_49> =
				      call %% Line 2153
					   'erlang':%% Line 2153
						    '=/='
					  (_39, %% Line 2153
						'false')
				  in  let <_48> =
					  call %% Line 2154
					       'erlang':%% Line 2154
							'=:='
					      (_7, %% Line 2154
						   0)
				      in  let <_50> =
					      call %% Line 2153
						   'erlang':%% Line 2153
							    'and'
						  (_49, _48)
					  in  let <_47> =
						  call %% Line 2154
						       'erlang':%% Line 2154
								'=:='
						      (_8, %% Line 2154
							   0)
					      in  %% Line 2154
						  call 'erlang':'and'
						      (_50, _47)
			      %% Line 2155
			      <> when 'true' ->
				  _39
			    end
			in  %% Line 2158
			    case <> of
			      %% Line 2159
			      <>
				  when call 'erlang':'=:='
					(_51,
					 'same') ->
				  let <_53> =
				      call %% Line 2160
					   'erlang':%% Line 2160
						    '+'
					  (_1, %% Line 2160
					       8)
				  in  let <W1> = {_53,_5}
				      in  %% Line 2161
					  {_0,[],[W1|[]]}
			      %% Line 2162
			      <>
				  when ( call 'erlang':'=:='
					  (_51,
					   'true')
				      -| ['compiler_generated'] ) ->
				  let <_55> =
				      #{#<%% Line 2163
					  BinsSize>(%% Line 2163
						    32,1,'integer',['unsigned'|['big']]),
					#<%% Line 2163
					  305419896>(%% Line 2163
						     32,1,'integer',['unsigned'|['big']])}#
				  in  let <W1> =
					  {_1,%% Line 2163
					      [_55|_5]}
				      in  let <_57> =
					      #{#<%% Line 2165
						  BinsSize>(%% Line 2165
							    32,1,'integer',['unsigned'|['big']]),
						#<_1>(%% Line 2165
						      32,1,'integer',['unsigned'|['big']])}#
					  in  let <W2> = {_4,_57}
					      in  %% Line 2166
						  {_0,[W2|[]],[W1|[]]}
			      %% Line 2167
			      <> when 'true' ->
				  let <_59> =
				      call %% Line 2475
					   ( 'erlang'
					     -| ['compiler_generated'] ):%% Line 2475
									 ( '-'
									   -| ['compiler_generated'] )
					  (_2, %% Line 2475
					       ( 1
						 -| ['compiler_generated'] ))
				  in  %% Line 2168
				      case call 'dets_utils':'free'
					       (_0, _1, _59) of
					<{Head1,FPosF}> when 'true' ->
					    let <_61> =
						call %% Line 2475
						     ( 'erlang'
						       -| ['compiler_generated'] ):%% Line 2475
										   ( '-'
										     -| ['compiler_generated'] )
						    (%% Line 2170
						     BinsSize, %% Line 2475
							       ( 1
								 -| ['compiler_generated'] ))
					    in  %% Line 2169
						case %% Line 2170
						     call 'dets_utils':'alloc'
							 (Head1, _61) of
						  <{Head2,NewPos,FPosA}> when 'true' ->
						      let <_63> =
							  call %% Line 2171
							       'erlang':%% Line 2171
									'-'
							      (%% Line 2171
							       FPosA, %% Line 2171
								      1)
						      in  let <Head3> =
							      apply %% Line 2171
								    'one_bucket_added'/2
								  (%% Line 2171
								   Head2, _63)
							  in  let <_65> =
								  call %% Line 2172
								       'erlang':%% Line 2172
										'-'
								      (%% Line 2172
								       FPosF, %% Line 2172
									      1)
							      in  let <NewHead> =
								      apply %% Line 2172
									    'one_bucket_removed'/2
									  (%% Line 2172
									   Head3, _65)
								  in  let <_67> =
									  #{#<%% Line 2173
									      BinsSize>(%% Line 2173
											32,1,'integer',['unsigned'|['big']]),
									    #<%% Line 2173
									      305419896>(%% Line 2173
											 32,1,'integer',['unsigned'|['big']])}#
								      in  let <W0> =
									      {%% Line 2173
									       NewPos,%% Line 2173
										      [_67|_5]}
									  in  let <_69> =
										  #{#<%% Line 2174
										      BinsSize>(%% Line 2174
												32,1,'integer',['unsigned'|['big']]),
										    #<%% Line 2174
										      NewPos>(%% Line 2174
											      32,1,'integer',['unsigned'|['big']])}#
									      in  let <W2> = {_4,_69}
										  in  let <_72> =
											  case <> of
											    %% Line 2176
											    <>
												when call 'erlang':'=/='
												      (_1,
												       NewPos) ->
												let <_71> =
												    call %% Line 2178
													 'erlang':%% Line 2178
														  '+'
													(_1, %% Line 2178
													     4)
												in  %% Line 2178
												    [W0|[{_71,#{#<3>(8,1,'integer',['unsigned'|['big']]),
														#<171>(8,1,'integer',['unsigned'|['big']]),
														#<205>(8,1,'integer',['unsigned'|['big']]),
														#<239>(8,1,'integer',['unsigned'|['big']])}#}|[]]]
											    %% Line 2179
											    <> when 'true' ->
												%% Line 2180
												[W0|[]]
											  end
										      in  %% Line 2182
											  {NewHead,[W2|[]],_72}
						  ( <_62> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_62})
						    -| ['compiler_generated'] )
						end
					( <_60> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_60})
					  -| ['compiler_generated'] )
				      end
			    end
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'updated',9}}] )
'one_bucket_added'/2 =
    %% Line 2186
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <H = {'head',_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55},_X_Log2>
		  when ( try
			  let <_6> =
			      call 'erlang':'element'
				  (14, H)
			  in  let <_7> =
				  call 'erlang':'=:='
				      (_6, 'undefined')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _7)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 2187
		  H
	      %% Line 2188
	      <H = {'head',_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84},Log2>
		  when ( try
			  let <_12> =
			      call 'erlang':'element'
				  (8, H)
			  in  let <_13> =
				  call 'erlang':'>='
				      (_12, Log2)
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _13)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 2189
		  ( case H of
		      ( <( {'head',_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_rec117,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <NewNoColls> =
				call 'orddict':'update_counter'
				    (Log2, 1, _rec117)
			    in  %% Line 2190
				case H of
				  <{'head',_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142}> when 'true' ->
				      call 'erlang':'setelement'
					  (14, H, NewNoColls)
				  ( <_143> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','head'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			-| ['compiler_generated'] )
		      ( <_113> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 2191
	      <H,Log2> when 'true' ->
		  %% Line 2192
		  ( case H of
		      ( <( {'head',_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_rec119,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_171}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <NewNoColls> =
				call 'orddict':'update_counter'
				    (Log2, 1, _rec119)
			    in  %% Line 2193
				case H of
				  <{'head',_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183,_184,_185,_186,_187,_188,_189,_190,_191,_192,_193,_194,_195,_196,_197,_198,_199,_200,_201}> when 'true' ->
				      let <_23> =
					  call 'erlang':'setelement'
					      (14, H, NewNoColls)
				      in  call 'erlang':'setelement'
					      (8, _23, Log2)
				  ( <_202> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','head'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			-| ['compiler_generated'] )
		      ( <_172> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	    end
	    -| [{'function',{'one_bucket_added',2}}] )
      -| [{'function',{'one_bucket_added',2}}] )
'one_bucket_removed'/2 =
    %% Line 2195
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <H = {'head',_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64},_X_FPos>
		  when ( try
			  let <_6> =
			      call 'erlang':'element'
				  (14, H)
			  in  let <_7> =
				  call 'erlang':'=:='
				      (_6, 'undefined')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _7)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 2196
		  H
	      %% Line 2197
	      <H = {'head',_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93},Log2>
		  when ( try
			  let <_12> =
			      call 'erlang':'element'
				  (8, H)
			  in  let <_13> =
				  call 'erlang':'>'
				      (_12, Log2)
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _13)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 2198
		  ( case H of
		      ( <( {'head',_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_rec121,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <NewNoColls> =
				call 'orddict':'update_counter'
				    (Log2, -1, _rec121)
			    in  %% Line 2199
				case H of
				  <{'head',_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151}> when 'true' ->
				      call 'erlang':'setelement'
					  (14, H, NewNoColls)
				  ( <_152> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','head'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			-| ['compiler_generated'] )
		      ( <_122> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 2200
	      <H = {'head',_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181},Log2>
		  when ( try
			  let <_24> =
			      call 'erlang':'element'
				  (8, H)
			  in  let <_25> =
				  call 'erlang':'=:='
				      (_24, Log2)
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _25)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 2201
		  ( case H of
		      ( <( {'head',_182,_183,_184,_185,_186,_187,_188,_189,_190,_191,_192,_193,_rec123,_194,_195,_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208,_209}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <NewNoColls> =
				call 'orddict':'update_counter'
				    (Log2, -1, _rec123)
			    in  let <MaxObjSize> =
				    case %% Line 2202
					 NewNoColls of
				      ( <( NoColls = ( 'undefined'
						       -| ['compiler_generated'] )
					   -| ['compiler_generated'] )> when ( 'true'
									       -| ['compiler_generated'] ) ->
					    NoColls
					-| ['compiler_generated'] )
				      ( <NoColls> when ( 'true'
							 -| ['compiler_generated'] ) ->
					    ( apply 'max_objsize'/2
						  (NoColls, ( 0
							      -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				in  %% Line 2203
				    case H of
				      <{'head',_211,_212,_213,_214,_215,_216,_217,_218,_219,_220,_221,_222,_223,_224,_225,_226,_227,_228,_229,_230,_231,_232,_233,_234,_235,_236,_237,_238,_239}> when 'true' ->
					  let <_32> =
					      call 'erlang':'setelement'
						  (14, H, NewNoColls)
					  in  call 'erlang':'setelement'
						  (8, _32, MaxObjSize)
				      ( <_240> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','head'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
			-| ['compiler_generated'] )
		      ( <_210> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      ( <_35,_34> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_35,_34})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'one_bucket_removed',2}}] )
      -| [{'function',{'one_bucket_removed',2}}] )
'eval_slot'/9 =
    %% Line 2205
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	      <WLs0 = [{Key,Commands}|WLs],KOs = [{K,KS,KB,O,Os}|KOs1],%% Line 2206
								       Type,%% Line 2206
									    LU,%% Line 2206
									       Ws,%% Line 2206
										  No,%% Line 2206
										     KNo,%% Line 2206
											 BSz,%% Line 2206
											     Ch> when 'true' ->
		  %% Line 2207
		  case call 'dets_utils':'cmp'
			   (K, Key) of
		    %% Line 2208
		    <0> when 'true' ->
			let <_9> =
			    apply %% Line 2209
				  'binobjs2terms'/1
				(%% Line 2209
				 Os)
			in  let <Old> =
				[%% Line 2209
				 O|_9]
			    in  %% Line 2210
				case %% Line 2211
				     apply 'eval_key'/9
					 (Key, Commands, Old, Type, KB, KS, LU, Ws, Ch) of
				  <{NLU,NWs,Sz,No1,KNo1,NCh}> when 'true' ->
				      let <_14> =
					  call %% Line 2212
					       'erlang':%% Line 2212
							'+'
					      (%% Line 2212
					       No1, %% Line 2212
						    No)
				      in  let <_13> =
					      call %% Line 2213
						   'erlang':%% Line 2213
							    '+'
						  (%% Line 2213
						   KNo1, %% Line 2213
							 KNo)
					  in  let <_12> =
						  call %% Line 2213
						       'erlang':%% Line 2213
								'+'
						      (%% Line 2213
						       Sz, %% Line 2213
							   BSz)
					      in  %% Line 2212
						  apply 'eval_slot'/9
						      (WLs, KOs1, Type, NLU, NWs, _14, _13, _12, %% Line 2213
												 NCh)
				  ( <_11> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_11})
				    -| ['compiler_generated'] )
				end
		    %% Line 2214
		    <-1> when 'true' ->
			let <_15> =
			    call %% Line 2216
				 'erlang':%% Line 2216
					  '+'
				(%% Line 2216
				 KS, %% Line 2216
				     BSz)
			in  %% Line 2215
			    apply 'eval_slot'/9
				(WLs0, KOs1, Type, LU, [Ws|KB], No, %% Line 2216
								    KNo, _15, %% Line 2216
									      Ch)
		    %% Line 2217
		    <1> when 'true' ->
			%% Line 2218
			case %% Line 2219
			     apply 'eval_key'/9
				 (Key, Commands, [], Type, [], 0, LU, Ws, Ch) of
			  <{NLU,NWs,Sz,No1,KNo1,NCh}> when 'true' ->
			      let <_19> =
				  call %% Line 2220
				       'erlang':%% Line 2220
						'+'
				      (%% Line 2220
				       No1, %% Line 2220
					    No)
			      in  let <_18> =
				      call %% Line 2221
					   'erlang':%% Line 2221
						    '+'
					  (%% Line 2221
					   KNo1, %% Line 2221
						 KNo)
				  in  let <_17> =
					  call %% Line 2221
					       'erlang':%% Line 2221
							'+'
					      (%% Line 2221
					       Sz, %% Line 2221
						   BSz)
				      in  %% Line 2220
					  apply 'eval_slot'/9
					      (WLs, KOs, Type, NLU, NWs, _19, _18, _17, %% Line 2221
											NCh)
			  ( <_16> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_16})
			    -| ['compiler_generated'] )
			end
		    ( <_20> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_20})
		      -| ['compiler_generated'] )
		  end
	      %% Line 2223
	      <[{Key,Commands}|WLs],[],Type,LU,Ws,No,KNo,BSz,Ch> when 'true' ->
		  %% Line 2224
		  case %% Line 2225
		       apply 'eval_key'/9
			   (Key, Commands, [], Type, [], 0, LU, Ws, Ch) of
		    <{NLU,NWs,Sz,No1,KNo1,NCh}> when 'true' ->
			let <_24> =
			    call %% Line 2226
				 'erlang':%% Line 2226
					  '+'
				(%% Line 2226
				 No1, %% Line 2226
				      No)
			in  let <_23> =
				call %% Line 2226
				     'erlang':%% Line 2226
					      '+'
				    (%% Line 2226
				     KNo1, %% Line 2226
					   KNo)
			    in  let <_22> =
				    call %% Line 2226
					 'erlang':%% Line 2226
						  '+'
					(%% Line 2226
					 Sz, %% Line 2226
					     BSz)
				in  %% Line 2226
				    apply 'eval_slot'/9
					(WLs, [], Type, NLU, NWs, _24, _23, _22, NCh)
		    ( <_21> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_21})
		      -| ['compiler_generated'] )
		  end
	      %% Line 2227
	      <[],[{_X_Key,Size,KeyBin,_35,_36}|KOs],Type,LU,Ws,No,KNo,BSz,Ch> when 'true' ->
		  let <_25> =
		      call %% Line 2228
			   'erlang':%% Line 2228
				    '+'
			  (%% Line 2228
			   Size, %% Line 2228
				 BSz)
		  in  %% Line 2228
		      apply 'eval_slot'/9
			  ([], KOs, Type, LU, [Ws|KeyBin], No, KNo, _25, Ch)
	      %% Line 2229
	      <[],[],_X_Type,LU,Ws,No,KNo,BSz,Ch> when 'true' ->
		  %% Line 2230
		  {LU,Ws,BSz,No,KNo,Ch}
	      ( <_34,_33,_32,_31,_30,_29,_28,_27,_26> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_34,_33,_32,_31,_30,_29,_28,_27,_26})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'eval_slot',9}}] )
      -| [{'function',{'eval_slot',9}}] )
'eval_key'/9 =
    %% Line 2232
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	      <_X_K,[{_X_Seq,{'lookup',Pid}}|[]],[],_X_Type,_X_KeyBin,_X_KeySz,LU,Ws,Ch> when 'true' ->
		  let <NLU> =
		      [%% Line 2233
		       {Pid,[]}|%% Line 2233
				LU]
		  in  %% Line 2234
		      {NLU,Ws,0,0,0,Ch}
	      %% Line 2235
	      <_X_K,[{_X_Seq,{'lookup',Pid}}|[]],Old0,_X_Type,KeyBin,KeySz,LU,Ws,Ch> when 'true' ->
		  let <Old> =
		      call %% Line 2236
			   'lists':%% Line 2236
				   'keysort'
			  (%% Line 2236
			   2, %% Line 2236
			      Old0)
		  in  let <Objs> =
			  apply %% Line 2237
				'get_objects'/1
			      (%% Line 2237
			       Old)
		      in  let <NLU> =
			      [%% Line 2238
			       {Pid,Objs}|%% Line 2238
					  LU]
			  in  %% Line 2239
			      {NLU,[Ws|KeyBin],KeySz,0,0,Ch}
	      %% Line 2240
	      <K,Comms,Orig,Type,KeyBin,KeySz,LU,Ws,Ch> when 'true' ->
		  let <Old> =
		      call %% Line 2241
			   'dets_utils':%% Line 2241
					'msort'
			  (%% Line 2241
			   Orig)
		  in  %% Line 2242
		      case apply 'eval_key1'/9
			       (Comms, [], Old, Type, K, LU, Ws, 0, Orig) of
			%% Line 2243
			<{'ok',NLU}>
			    when call 'erlang':'=:='
				  (Old,
				   []) ->
			    %% Line 2244
			    {NLU,Ws,0,0,0,Ch}
			%% Line 2245
			<{'ok',NLU}> when 'true' ->
			    %% Line 2246
			    {NLU,[Ws|KeyBin],KeySz,0,0,Ch}
			%% Line 2247
			<{NLU,NWs,NSz,No}>
			    when let <_14> =
				  call 'erlang':'=:='
				      (Old, [])
			      in  let <_15> =
				      call 'erlang':'>'
					  (NSz, 0)
				  in  call 'erlang':'and'
					  (_14, _15) ->
			    %% Line 2248
			    {NLU,NWs,NSz,No,1,'true'}
			%% Line 2249
			<{NLU,NWs,NSz,No}>
			    when let <_16> =
				  call 'erlang':'=/='
				      (Old, [])
			      in  let <_17> =
				      call 'erlang':'=:='
					  (NSz, 0)
				  in  call 'erlang':'and'
					  (_16, _17) ->
			    %% Line 2250
			    {NLU,NWs,NSz,No,-1,'true'}
			%% Line 2251
			<{NLU,NWs,NSz,No}> when 'true' ->
			    %% Line 2252
			    {NLU,NWs,NSz,No,0,'true'}
			( <_19> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_19})
			  -| ['compiler_generated'] )
		      end
	    end
	    -| [{'function',{'eval_key',9}}] )
      -| [{'function',{'eval_key',9}}] )
'eval_key1'/9 =
    %% Line 2256
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	      <[{_X_Seq,{'insert',Term}}|L],Cs,Old = [{_31,_32,_33}|[]],Type = 'set',K,%% Line 2257
										       LU,%% Line 2257
											  Ws,%% Line 2257
											     No,%% Line 2257
												Orig>
		  when call 'erlang':'=:='
			(_31,
			 Term) ->
		  %% Line 2258
		  apply 'eval_key1'/9
		      (L, Cs, Old, Type, K, LU, Ws, No, Orig)
	      %% Line 2259
	      <[{Seq,{'insert',Term}}|L],Cs,Old,Type = 'set',K,LU,Ws,No,Orig> when 'true' ->
		  let <_10> =
		      call %% Line 2261
			   'erlang':%% Line 2261
				    '+'
			  (%% Line 2261
			   No, %% Line 2261
			       1)
		  in  let <_9> =
			  call %% Line 2261
			       'erlang':%% Line 2261
					'length'
			      (%% Line 2261
			       Old)
		      in  let <NNo> =
			      call %% Line 2261
				   'erlang':%% Line 2261
					    '-'
				  (_10, _9)
			  in  %% Line 2262
			      apply 'eval_key1'/9
				  (L, Cs, [{Term,Seq,'insert'}|[]], Type, K, LU, Ws, NNo, Orig)
	      %% Line 2263
	      <[{_X_Seq,{'lookup',Pid}}|L],Cs,Old,Type,Key,LU,Ws,No,Orig> when 'true' ->
		  %% Line 2264
		  case apply 'eval_comms'/4
			   (Cs, Old, Type, No) of
		    <{'ok',New0,NewNo}> when 'true' ->
			let <New> =
			    call %% Line 2265
				 'lists':%% Line 2265
					 'keysort'
				(%% Line 2265
				 2, %% Line 2265
				    New0)
			in  let <Objs> =
				apply %% Line 2266
				      'get_objects'/1
				    (%% Line 2266
				     New)
			    in  let <NLU> =
				    [%% Line 2267
				     {Pid,Objs}|%% Line 2267
						LU]
				in  %% Line 2268
				    case <> of
				      %% Line 2269
				      <>
					  when call 'erlang':'=:='
						(L,
						 []) ->
					  %% Line 2270
					  apply 'eval_end'/6
					      (New, NLU, Type, Ws, NewNo, Orig)
				      %% Line 2271
				      <> when 'true' ->
					  let <NewOld> =
					      call %% Line 2272
						   'dets_utils':%% Line 2272
								'msort'
						  (%% Line 2272
						   New)
					  in  %% Line 2273
					      apply 'eval_key1'/9
						  (L, [], NewOld, Type, Key, NLU, Ws, NewNo, Orig)
				    end
		    ( <_12> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_12})
		      -| ['compiler_generated'] )
		  end
	      %% Line 2275
	      <[{_X_Seq,'delete_key'}|L],_X_Cs,Old,Type,K,LU,Ws,No,Orig> when 'true' ->
		  let <_17> =
		      call %% Line 2276
			   'erlang':%% Line 2276
				    'length'
			  (%% Line 2276
			   Old)
		  in  let <NewNo> =
			  call %% Line 2276
			       'erlang':%% Line 2276
					'-'
			      (%% Line 2276
			       No, _17)
		      in  %% Line 2277
			  apply 'eval_key1'/9
			      (L, [], [], Type, K, LU, Ws, NewNo, Orig)
	      %% Line 2278
	      <[{_X_Seq,{'delete_object',Term}}|L],Cs,[{_34,_35,_36}|[]],Type = 'set',K,%% Line 2279
											LU,%% Line 2279
											   Ws,%% Line 2279
											      No,%% Line 2279
												 Orig>
		  when call 'erlang':'=:='
			(_34,
			 Term) ->
		  let <_19> =
		      call %% Line 2280
			   'erlang':%% Line 2280
				    '-'
			  (%% Line 2280
			   No, %% Line 2280
			       1)
		  in  %% Line 2280
		      apply 'eval_key1'/9
			  (L, Cs, [], Type, K, LU, Ws, _19, Orig)
	      %% Line 2281
	      <[{_X_Seq,{'delete_object',_X_T}}|L],Cs,Old1,Type = 'set',K,LU,%% Line 2282
									     Ws,%% Line 2282
										No,%% Line 2282
										   Orig> when 'true' ->
		  %% Line 2283
		  apply 'eval_key1'/9
		      (L, Cs, Old1, Type, K, LU, Ws, No, Orig)
	      %% Line 2284
	      <[{Seq,{Comm,Term}}|L],Cs,Old,Type,K,LU,Ws,No,Orig>
		  when %% Line 2285
		    call 'erlang':'=/='
			(Type,
			 'set') ->
		  %% Line 2286
		  apply 'eval_key1'/9
		      (L, [{Term,Seq,Comm}|Cs], Old, Type, K, LU, Ws, No, Orig)
	      %% Line 2287
	      <[],Cs,Old,Type = 'set',_X_Key,LU,Ws,No,Orig> when 'true' ->
		  %% Line 2288
		  case Cs of
		    <[]> when 'true' ->
			%% Line 2289
			apply 'eval_end'/6
			    (Old, LU, Type, Ws, No, Orig)
		    ( <_20> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_20})
		      -| ['compiler_generated'] )
		  end
	      %% Line 2290
	      <[],Cs,Old,Type,_X_Key,LU,Ws,No,Orig> when 'true' ->
		  %% Line 2291
		  case apply 'eval_comms'/4
			   (Cs, Old, Type, No) of
		    <{'ok',New,NewNo}> when 'true' ->
			%% Line 2292
			apply 'eval_end'/6
			    (New, LU, Type, Ws, NewNo, Orig)
		    ( <_21> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_21})
		      -| ['compiler_generated'] )
		  end
	      ( <_30,_29,_28,_27,_26,_25,_24,_23,_22> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_30,_29,_28,_27,_26,_25,_24,_23,_22})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'eval_key1',9}}] )
      -| [{'function',{'eval_key1',9}}] )
'eval_comms'/4 =
    %% Line 2294
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <[],L,_X_Type = 'set',No> when 'true' ->
		  %% Line 2295
		  {'ok',L,No}
	      %% Line 2296
	      <Cs,Old,Type,No> when 'true' ->
		  let <Commands> =
		      call %% Line 2297
			   'dets_utils':%% Line 2297
					'msort'
			  (%% Line 2297
			   Cs)
		  in  %% Line 2298
		      case Type of
			%% Line 2299
			<'bag'> when 'true' ->
			    apply 'eval_bag'/4
				(Commands, Old, [], No)
			%% Line 2300
			<'duplicate_bag'> when 'true' ->
			    apply 'eval_dupbag'/4
				(Commands, Old, [], No)
			( <_5> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_5})
			  -| ['compiler_generated'] )
		      end
	    end
	    -| [{'function',{'eval_comms',4}}] )
      -| [{'function',{'eval_comms',4}}] )
'eval_end'/6 =
    %% Line 2303
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  let <New> =
	      call %% Line 2304
		   'lists':%% Line 2304
			   'keysort'
		  (%% Line 2304
		   2, _0)
	  in  let <_9> =
		  case <> of
		    %% Line 2306
		    <>
			when try
			      let <_8> =
				  call 'erlang':'length'
				      (New)
			      in  let <_7> =
				      call 'erlang':'length'
					  (_5)
				  in  call 'erlang':'=/='
					  (_8, _7)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			'false'
		    %% Line 2307
		    <> when 'true' ->
			%% Line 2308
			apply 'same_terms'/2
			    (_5, New)
		  end
	      in  %% Line 2310
		  case <> of
		    %% Line 2311
		    <>
			when ( call 'erlang':'=:='
				(_9,
				 'true')
			    -| ['compiler_generated'] ) ->
			%% Line 2313
			{'ok',_1}
		    %% Line 2314
		    <>
			when call 'erlang':'=:='
			      (New,
			       []) ->
			%% Line 2315
			{_1,_3,0,_4}
		    %% Line 2316
		    <> when 'true' ->
			%% Line 2317
			case apply 'make_bins'/3
				 (New, [], 0) of
			  <{Ws1,Sz}> when 'true' ->
			      %% Line 2318
			      case <> of
				%% Line 2319
				<>
				    when call 'erlang':'=:='
					  (_2,
					   'set') ->
				    %% Line 2320
				    {_1,[_3|Ws1],Sz,_4}
				%% Line 2321
				<> when 'true' ->
				    let <NSz> =
					call %% Line 2322
					     'erlang':%% Line 2322
						      '+'
					    (%% Line 2322
					     Sz, %% Line 2322
						 4)
				    in  let <_13> =
					    #{#<%% Line 2323
						NSz>(%% Line 2323
						     32,1,'integer',['unsigned'|['big']])}#
					in  %% Line 2323
					    {_1,[_3|[_13|Ws1]],NSz,_4}
			      end
			  ( <_11> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_11})
			    -| ['compiler_generated'] )
			end
		  end
      -| [{'function',{'eval_end',6}}] )
'same_terms'/2 =
    %% Line 2327
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <[E1|L1],[E2|L2]>
		  when try
			let <_3> =
			    call 'erlang':'element'
				(1, E1)
			in  let <_2> =
				call 'erlang':'element'
				    (1, E2)
			    in  call 'erlang':'=:='
				    (_3, _2)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  %% Line 2328
		  apply 'same_terms'/2
		      (L1, L2)
	      %% Line 2329
	      <[],[]> when 'true' ->
		  %% Line 2330
		  'true'
	      %% Line 2331
	      <_X_L1,_X_L2> when 'true' ->
		  %% Line 2332
		  'false'
	    end
	    -| [{'function',{'same_terms',2}}] )
      -| [{'function',{'same_terms',2}}] )
'make_bins'/3 =
    %% Line 2334
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <[{_X_Term,_X_Seq,B}|L],W,Sz>
		  when call 'erlang':'is_binary'
			(B) ->
		  let <_3> =
		      call %% Line 2335
			   'erlang':%% Line 2335
				    'byte_size'
			  (%% Line 2335
			   B)
		  in  let <_4> =
			  call %% Line 2335
			       'erlang':%% Line 2335
					'+'
			      (%% Line 2335
			       Sz, _3)
		      in  %% Line 2335
			  apply 'make_bins'/3
			      (L, [W|B], _4)
	      %% Line 2336
	      <[{Term,_X_Seq,'insert'}|L],W,Sz> when 'true' ->
		  let <B> =
		      call %% Line 2337
			   'erlang':%% Line 2337
				    'term_to_binary'
			  (%% Line 2337
			   Term)
		  in  let <_6> =
			  call %% Line 2338
			       'erlang':%% Line 2338
					'byte_size'
			      (%% Line 2338
			       B)
		      in  let <BSize> =
			      call %% Line 2338
				   'erlang':%% Line 2338
					    '+'
				  (_6, %% Line 2338
				       4)
			  in  let <_9> =
				  #{#<%% Line 2339
				      BSize>(%% Line 2339
					     32,1,'integer',['unsigned'|['big']])}#
			      in  let <_8> =
				      call %% Line 2339
					   'erlang':%% Line 2339
						    '+'
					  (%% Line 2339
					   Sz, %% Line 2339
					       BSize)
				  in  %% Line 2339
				      apply 'make_bins'/3
					  (L, [W|[[_9|B]|[]]], _8)
	      %% Line 2340
	      <[],W,Sz> when 'true' ->
		  %% Line 2341
		  {W,Sz}
	      ( <_12,_11,_10> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_12,_11,_10})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'make_bins',3}}] )
      -| [{'function',{'make_bins',3}}] )
'get_objects'/1 =
    %% Line 2343
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'get_objects',1}}] ) of
	      <[{T,_X_S,_X_BT}|L]> when 'true' ->
		  let <_1> =
		      apply %% Line 2344
			    'get_objects'/1
			  (%% Line 2344
			   L)
		  in  %% Line 2344
		      [T|_1]
	      %% Line 2345
	      <[]> when 'true' ->
		  %% Line 2346
		  []
	      ( <_2> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_2})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'get_objects',1}}] )
      -| [{'function',{'get_objects',1}}] )
'eval_bag'/4 =
    %% Line 2348
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <L0 = [N = {Term1,_X_S1,Op}|L],Old0 = [O = {Term2,_12,_13}|Old],New,No> when 'true' ->
		  let <_4> =
		      call %% Line 2349
			   'dets_utils':%% Line 2349
					'cmp'
			  (%% Line 2349
			   Term1, %% Line 2349
				  Term2)
		  in  %% Line 2349
		      case <Op,_4> of
			%% Line 2350
			<'delete_object',-1> when 'true' ->
			    %% Line 2351
			    apply 'eval_bag'/4
				(L, Old0, New, No)
			%% Line 2352
			<'insert',-1> when 'true' ->
			    %% Line 2353
			    apply 'bag_object'/6
				(L, Old0, New, No, [N|[]], Term1)
			%% Line 2354
			<'delete_object',0> when 'true' ->
			    let <_5> =
				call %% Line 2355
				     'erlang':%% Line 2355
					      '-'
				    (%% Line 2355
				     No, %% Line 2355
					 1)
			    in  %% Line 2355
				apply 'bag_object'/6
				    (L, Old, New, _5, [], Term1)
			%% Line 2356
			<'insert',0> when 'true' ->
			    let <_6> =
				call %% Line 2357
				     'erlang':%% Line 2357
					      '-'
				    (%% Line 2357
				     No, %% Line 2357
					 1)
			    in  %% Line 2357
				apply 'bag_object'/6
				    (L, Old, New, _6, [N|[]], Term1)
			%% Line 2358
			<_14,( 1
			       -| ['compiler_generated'] )> when 'true' ->
			    %% Line 2359
			    apply 'eval_bag'/4
				(L0, Old, [O|New], No)
			( <( _15
			     -| ['compiler_generated'] ),( _16
							   -| ['compiler_generated'] )> when 'true' ->
			      let <_7> = {( _15
				     -| ['compiler_generated'] ),( _16
								   -| ['compiler_generated'] )}
			      in  primop 'match_fail'
				      ({'case_clause',_7})
			  -| ['compiler_generated'] )
		      end
	      %% Line 2361
	      <[{_X_Term1,_X_Seq1,'delete_object'}|L],Old = [],New,No> when 'true' ->
		  %% Line 2362
		  apply 'eval_bag'/4
		      (L, Old, New, No)
	      %% Line 2363
	      <[N = {Term,_X_Seq1,'insert'}|L],Old = [],New,No> when 'true' ->
		  %% Line 2364
		  apply 'bag_object'/6
		      (L, Old, New, No, [N|[]], Term)
	      %% Line 2365
	      <L = [],[O|Old],New,No> when 'true' ->
		  %% Line 2366
		  apply 'eval_bag'/4
		      (L, Old, [O|New], No)
	      %% Line 2367
	      <[],[],New,No> when 'true' ->
		  %% Line 2368
		  {'ok',New,No}
	      ( <_11,_10,_9,_8> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_11,_10,_9,_8})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'eval_bag',4}}] )
      -| [{'function',{'eval_bag',4}}] )
'bag_object'/6 =
    %% Line 2370
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  ( case <_0,_1,_2,_3,_4,_5> of
	      <[N = {Term,_13,'insert'}|L],Old,New,No,_X_N,_14>
		  when call 'erlang':'=:='
			(_14,
			 Term) ->
		  %% Line 2371
		  apply 'bag_object'/6
		      (L, Old, New, No, [N|[]], Term)
	      %% Line 2372
	      <[{Term,_15,'delete_object'}|L],Old,New,No,_X_N,_16>
		  when call 'erlang':'=:='
			(_16,
			 Term) ->
		  %% Line 2373
		  apply 'bag_object'/6
		      (L, Old, New, No, [], Term)
	      %% Line 2374
	      <L,Old,New,No,[],_X_Term> when 'true' ->
		  %% Line 2375
		  apply 'eval_bag'/4
		      (L, Old, New, No)
	      %% Line 2376
	      <L,Old,New,No,[N|[]],_X_Term> when 'true' ->
		  let <_6> =
		      call %% Line 2377
			   'erlang':%% Line 2377
				    '+'
			  (%% Line 2377
			   No, %% Line 2377
			       1)
		  in  %% Line 2377
		      apply 'eval_bag'/4
			  (L, Old, [N|New], _6)
	      ( <_12,_11,_10,_9,_8,_7> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_12,_11,_10,_9,_8,_7})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'bag_object',6}}] )
      -| [{'function',{'bag_object',6}}] )
'eval_dupbag'/4 =
    %% Line 2379
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <L0 = [N = {Term1,_X_S1,Op}|L],Old0 = [O = {Term2,_12,_13}|Old],New,No> when 'true' ->
		  let <_4> =
		      call %% Line 2380
			   'dets_utils':%% Line 2380
					'cmp'
			  (%% Line 2380
			   Term1, %% Line 2380
				  Term2)
		  in  %% Line 2380
		      case <Op,_4> of
			%% Line 2381
			<'delete_object',-1> when 'true' ->
			    %% Line 2382
			    apply 'eval_dupbag'/4
				(L, Old0, New, No)
			%% Line 2383
			<'insert',-1> when 'true' ->
			    let <_5> =
				call %% Line 2384
				     'erlang':%% Line 2384
					      '+'
				    (%% Line 2384
				     No, %% Line 2384
					 1)
			    in  %% Line 2384
				apply 'dup_object'/6
				    (L, Old0, New, _5, Term1, [N|[]])
			%% Line 2385
			<_14,( 0
			       -| ['compiler_generated'] )> when 'true' ->
			    %% Line 2386
			    apply 'old_dup_object'/6
				(L0, Old, New, No, Term1, [O|[]])
			%% Line 2387
			<_15,( 1
			       -| ['compiler_generated'] )> when 'true' ->
			    %% Line 2388
			    apply 'eval_dupbag'/4
				(L0, Old, [O|New], No)
			( <( _16
			     -| ['compiler_generated'] ),( _17
							   -| ['compiler_generated'] )> when 'true' ->
			      let <_6> = {( _16
				     -| ['compiler_generated'] ),( _17
								   -| ['compiler_generated'] )}
			      in  primop 'match_fail'
				      ({'case_clause',_6})
			  -| ['compiler_generated'] )
		      end
	      %% Line 2390
	      <[{_X_Term1,_X_Seq1,'delete_object'}|L],Old = [],New,No> when 'true' ->
		  %% Line 2391
		  apply 'eval_dupbag'/4
		      (L, Old, New, No)
	      %% Line 2392
	      <[N = {Term,_X_Seq1,'insert'}|L],Old = [],New,No> when 'true' ->
		  let <_7> =
		      call %% Line 2393
			   'erlang':%% Line 2393
				    '+'
			  (%% Line 2393
			   No, %% Line 2393
			       1)
		  in  %% Line 2393
		      apply 'dup_object'/6
			  (L, Old, New, _7, Term, [N|[]])
	      %% Line 2394
	      <L = [],[O|Old],New,No> when 'true' ->
		  %% Line 2395
		  apply 'eval_dupbag'/4
		      (L, Old, [O|New], No)
	      %% Line 2396
	      <[],[],New,No> when 'true' ->
		  %% Line 2397
		  {'ok',New,No}
	      ( <_11,_10,_9,_8> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_11,_10,_9,_8})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'eval_dupbag',4}}] )
      -| [{'function',{'eval_dupbag',4}}] )
'old_dup_object'/6 =
    %% Line 2399
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  ( case <_0,_1,_2,_3,_4,_5> of
	      <L,[Obj = {Term,_12,_13}|Old],New,No,_14,N>
		  when call 'erlang':'=:='
			(_14,
			 Term) ->
		  %% Line 2400
		  apply 'old_dup_object'/6
		      (L, Old, New, No, Term, [Obj|N])
	      %% Line 2401
	      <L,Old,New,No,Term,N> when 'true' ->
		  %% Line 2402
		  apply 'dup_object'/6
		      (L, Old, New, No, Term, N)
	    end
	    -| [{'function',{'old_dup_object',6}}] )
      -| [{'function',{'old_dup_object',6}}] )
'dup_object'/6 =
    %% Line 2404
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  ( case <_0,_1,_2,_3,_4,_5> of
	      <[Obj = {Term,_16,'insert'}|L],Old,New,No,_17,Q>
		  when call 'erlang':'=:='
			(_17,
			 Term) ->
		  let <_6> =
		      call %% Line 2405
			   'erlang':%% Line 2405
				    '+'
			  (%% Line 2405
			   No, %% Line 2405
			       1)
		  in  %% Line 2405
		      apply 'dup_object'/6
			  (L, Old, New, _6, Term, [Obj|Q])
	      %% Line 2406
	      <[{Term,_X_Seq,'delete_object'}|L],Old,New,No,_18,Q>
		  when call 'erlang':'=:='
			(_18,
			 Term) ->
		  let <_7> =
		      call %% Line 2408
			   'erlang':%% Line 2408
				    'length'
			  (%% Line 2408
			   Q)
		  in  let <NewNo> =
			  call %% Line 2408
			       'erlang':%% Line 2408
					'-'
			      (%% Line 2408
			       No, _7)
		      in  %% Line 2409
			  apply 'dup_object'/6
			      (L, Old, New, NewNo, Term, [])
	      %% Line 2410
	      <L,Old,New,No,_X_Term,Q> when 'true' ->
		  let <_9> =
		      call %% Line 2411
			   'erlang':%% Line 2411
				    '++'
			  (%% Line 2411
			   Q, %% Line 2411
			      New)
		  in  %% Line 2411
		      apply 'eval_dupbag'/4
			  (L, Old, _9, No)
	    end
	    -| [{'function',{'dup_object',6}}] )
      -| [{'function',{'dup_object',6}}] )
'update_no_keys'/4 =
    %% Line 2415
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <Head,Ws,0,0> when 'true' ->
		  {Head,Ws}
	      %% Line 2416
	      <Head,Ws,DeltaObjects,DeltaKeys> when 'true' ->
		  %% Line 2417
		  ( case Head of
		      ( <( {'head',_31,_32,_33,_34,_35,_rec125,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <NewNoKeys> =
				call %% Line 2418
				     'erlang':%% Line 2418
					      '+'
				    (_rec125, %% Line 2418
					      DeltaKeys)
			    in  %% Line 2419
				( case Head of
				    ( <( {'head',_60,_61,_62,_63,_rec126,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <NewNoObject> =
					      call 'erlang':'+'
						  (_rec126, DeltaObjects)
					  in  %% Line 2420
					      case Head of
						<{'head',_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117}> when 'true' ->
						    let <_12> =
							call 'erlang':'setelement'
							    (7, Head, NewNoKeys)
						    in  let <_14> =
							    call 'erlang':'setelement'
								(6, _12, NewNoObject)
							in  let <_25> =
								case <> of
								  %% Line 2423
								  <>
								      when ( try
									      ( let <_18> =
										    case ( call ( 'erlang'
												  -| ['compiler_generated'] ):( 'is_record'
																-| ['compiler_generated'] )
											       (_14, ( 'head'
												       -| ['compiler_generated'] ), ( 30
																      -| ['compiler_generated'] ))
											   -| ['compiler_generated'] ) of
										      ( <( 'true'
											   -| ['compiler_generated'] )> when 'true' ->
											    ( 'true'
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										      ( <( 'false'
											   -| ['compiler_generated'] )> when 'true' ->
											    ( 'fail'
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										      ( <( _16
											   -| ['compiler_generated'] )> when 'true' ->
											    ( call ( 'erlang'
												     -| ['compiler_generated'] ):( 'error'
																   -| ['compiler_generated'] )
												  (( {( 'badarg'
													-| ['compiler_generated'] ),( _16
																      -| ['compiler_generated'] )}
												     -| ['compiler_generated'] ))
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										    end
										in  let <_19> =
											call 'erlang':'=:='
											    (( _18
											       -| ['compiler_generated'] ), 'true')
										    in  let <_20> =
											    call 'erlang':'element'
												(21, _14)
											in  let <_21> =
												call 'erlang':'>'
												    (NewNoKeys, _20)
											    in  ( call ( 'erlang'
													 -| ['compiler_generated'] ):( 'and'
																       -| ['compiler_generated'] )
												      (_19, _21)
												  -| ['compiler_generated'] )
										-| ['compiler_generated'] )
									  of <Try> ->
									      Try
									  catch <T,R> ->
									      'false'
									  -| ['compiler_generated'] ) ->
								      %% Line 2424
								      Ws
								  %% Line 2425
								  <>
								      when try
									    let <_23> =
										call 'erlang':'div'
										    (_rec125, 256)
									    in  let <_22> =
										    call 'erlang':'div'
											(NewNoKeys, 256)
										in  call 'erlang':'=:='
											(_23, _22)
									of <Try> ->
									    Try
									catch <T,R> ->
									    'false' ->
								      %% Line 2426
								      Ws
								  %% Line 2427
								  <> when 'true' ->
								      let <_24> =
									  apply %% Line 2428
										'file_header'/3
									      (_14, %% Line 2428
										    0, %% Line 2428
										       0)
								      in  %% Line 2428
									  [{0,_24}|Ws]
								end
							    in  %% Line 2430
								{_14,_25}
						( <_118> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','head'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
				      -| ['compiler_generated'] )
				    ( <_88> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','head'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_59> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	    end
	    -| [{'function',{'update_no_keys',4}}] )
      -| [{'function',{'update_no_keys',4}}] )
'slot_position'/1 =
    %% Line 2432
    ( fun (_0) ->
	  let <SegNo> =
	      call %% Line 2433
		   'erlang':%% Line 2433
			    'bsr'
		  (( _0
		     -| [{'function',{'slot_position',1}}] ), %% Line 2433
							      8)
	  in  let <_2> =
		  call %% Line 2434
		       'erlang':%% Line 2434
				'bsr'
		      (%% Line 2434
		       SegNo, %% Line 2434
			      9)
	      in  let <_3> =
		      call %% Line 2434
			   'erlang':%% Line 2434
				    '*'
			  (%% Line 2434
			   4, _2)
		  in  let <PartPos> =
			  call %% Line 2434
			       'erlang':%% Line 2434
					'+'
			      (%% Line 2434
			       312, _3)
		      in  let <Part> =
			      call %% Line 2468
				   ( 'erlang'
				     -| ['compiler_generated'] ):%% Line 2468
								 ( 'get'
								   -| ['compiler_generated'] )
				  (%% Line 2435
				   PartPos)
			  in  let <_12> =
				  call %% Line 2436
				       'erlang':%% Line 2436
						'band'
				      (%% Line 2436
				       SegNo, %% Line 2436
					      511)
			      in  let <_13> =
				      call %% Line 2436
					   'erlang':%% Line 2436
						    '*'
					  (%% Line 2436
					   4, _12)
				  in  let <Pos> =
					  call %% Line 2436
					       'erlang':%% Line 2436
							'+'
					      (%% Line 2436
					       Part, _13)
				      in  let <_19> =
					      call %% Line 2461
						   ( 'erlang'
						     -| ['compiler_generated'] ):%% Line 2461
										 ( 'get'
										   -| ['compiler_generated'] )
						  (%% Line 2437
						   Pos)
					  in  let <_16> =
						  call %% Line 2437
						       'erlang':%% Line 2437
								'band'
						      (( _0
							 -| [{'function',{'slot_position',1}}] ), %% Line 2437
												  255)
					      in  let <_18> =
						      call %% Line 2437
							   'erlang':%% Line 2437
								    '*'
							  (%% Line 2437
							   8, _16)
						  in  %% Line 2437
						      call 'erlang':'+'
							  (_19, _18)
      -| [{'function',{'slot_position',1}}] )
'check_pread2_arg'/2 =
    %% Line 2439
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <[{_X_Pos,Sz}|[]],Head>
		  when call 'erlang':'>'
			(Sz,
			 81920) ->
		  %% Line 2440
		  case apply 'check_pread_arg'/2
			   (Sz, Head) of
		    %% Line 2441
		    <'true'> when 'true' ->
			%% Line 2442
			'ok'
		    %% Line 2443
		    <'false'> when 'true' ->
			let <Bad> =
			    call %% Line 2444
				 'dets_utils':%% Line 2444
					      'bad_object'
				(%% Line 2444
				 'check_pread2_arg', %% Line 2444
						     Sz)
			in  let <_4> =
				call %% Line 2445
				     'dets_utils':%% Line 2445
						  'corrupt_reason'
				    (%% Line 2445
				     Head, %% Line 2445
					   Bad)
			    in  %% Line 2445
				call 'erlang':'throw'
				    (_4)
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_5})
		      -| ['compiler_generated'] )
		  end
	      %% Line 2447
	      <_X_ToRead,_X_Head> when 'true' ->
		  %% Line 2448
		  'ok'
	    end
	    -| [{'function',{'check_pread2_arg',2}}] )
      -| [{'function',{'check_pread2_arg',2}}] )
'check_pread_arg'/2 =
    %% Line 2450
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Sz,Head>
		  when call 'erlang':'>'
			(Sz,
			 81920) ->
		  let <_3> =
		      case %% Line 2451
			   Head of
			%% Line 2478
			( <( _69 = ( {( 'head'
					-| ['compiler_generated'] ),_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}
				     -| ['compiler_generated'] )
			     -| ['compiler_generated'] )>
			      when ( try
				      ( let <_5> =
					    call ( 'erlang'
						   -| ['compiler_generated'] ):( 'element'
										 -| ['compiler_generated'] )
						(( 8
						   -| ['compiler_generated'] ), _69)
					in  ( let <_6> =
						  call ( 'erlang'
							 -| ['compiler_generated'] ):( '=:='
										       -| ['compiler_generated'] )
						      (_5, ( 'undefined'
							     -| ['compiler_generated'] ))
					      in  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'and'
											 -| ['compiler_generated'] )
							(( 'true'
							   -| ['compiler_generated'] ), _6)
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      ( 'false'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] ) ->
			      %% Line 2479
			      ( 4294967296
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2480
			( <_70> when ( 'true'
				       -| ['compiler_generated'] ) ->
			      %% Line 2481
			      ( case _70 of
				  ( <( {( 'head'
					  -| ['compiler_generated'] ),_39,_40,_41,_42,_43,_44,_rec128,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66}
				       -| ['compiler_generated'] )> when ( 'true'
									   -| ['compiler_generated'] ) ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'bsl'
									       -| ['compiler_generated'] )
					      (( 1
						 -| ['compiler_generated'] ), _rec128)
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <_67> when ( 'true'
						 -| ['compiler_generated'] ) ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','head'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 2451
		      call 'erlang':'>='
			  (_3, Sz)
	      %% Line 2452
	      <_X_Sz,_X_Head> when 'true' ->
		  %% Line 2453
		  'true'
	    end
	    -| [{'function',{'check_pread_arg',2}}] )
      -| [{'function',{'check_pread_arg',2}}] )
'segp_cache'/2 =
    %% Line 2456
    ( fun (_0,_1) ->
	  %% Line 2457
	  call 'erlang':'put'
	      (_0, _1)
      -| [{'function',{'segp_cache',2}}] )
'get_segp'/1 =
    %% Line 2460
    ( fun (_0) ->
	  %% Line 2461
	  call 'erlang':'get'
	      (( _0
		 -| [{'function',{'get_segp',1}}] ))
      -| [{'function',{'get_segp',1}}] )
'arrpart_cache'/2 =
    %% Line 2463
    ( fun (_0,_1) ->
	  %% Line 2464
	  call 'erlang':'put'
	      (_0, _1)
      -| [{'function',{'arrpart_cache',2}}] )
'get_arrpart'/1 =
    %% Line 2467
    ( fun (_0) ->
	  %% Line 2468
	  call 'erlang':'get'
	      (( _0
		 -| [{'function',{'get_arrpart',1}}] ))
      -| [{'function',{'get_arrpart',1}}] )
'sz2pos'/1 =
    %% Line 2470
    ( fun (_0) ->
	  let <_1> =
	      call %% Line 2471
		   'dets_utils':%% Line 2471
				'log2'
		  (( _0
		     -| [{'function',{'sz2pos',1}}] ))
	  in  %% Line 2471
	      call 'erlang':'+'
		  (1, _1)
      -| [{'function',{'sz2pos',1}}] )
'adjsz'/1 =
    %% Line 2474
    ( fun (_0) ->
	  %% Line 2475
	  call 'erlang':'-'
	      (( _0
		 -| [{'function',{'adjsz',1}}] ), 1)
      -| [{'function',{'adjsz',1}}] )
'maxobjsize'/1 =
    %% Line 2478
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'maxobjsize',1}}] ) of
	      <Head = {'head',_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}>
		  when ( try
			  let <_5> =
			      call 'erlang':'element'
				  (8, Head)
			  in  let <_6> =
				  call 'erlang':'=:='
				      (_5, 'undefined')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _6)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 2479
		  4294967296
	      %% Line 2480
	      <Head> when 'true' ->
		  %% Line 2481
		  ( case Head of
		      ( <( {'head',_39,_40,_41,_42,_43,_44,_rec128,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66}
			   -| ['compiler_generated'] )> when 'true' ->
			    call 'erlang':'bsl'
				(1, _rec128)
			-| ['compiler_generated'] )
		      ( <_67> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	    end
	    -| [{'function',{'maxobjsize',1}}] )
      -| [{'function',{'maxobjsize',1}}] )
'scan_objs'/8 =
    %% Line 2483
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	  let <_8> =
	      catch
		  %% Line 2484
		  apply 'scan_skip'/8
		      (_1, _2, _3, _4, _5, _6, _7, 0)
	  in  %% Line 2484
	      case _8 of
		%% Line 2485
		<{'EXIT',_X_Reason}> when 'true' ->
		    %% Line 2486
		    'bad_object'
		%% Line 2487
		<Reply = {'more',_X_From1,_X_To,_X_L,_X_Ts,_X_R,Size}>
		    when call 'erlang':'>'
			  (Size,
			   81920) ->
		    %% Line 2488
		    case apply 'check_pread_arg'/2
			     (Size, _0) of
		      %% Line 2489
		      <'true'> when 'true' ->
			  Reply
		      %% Line 2490
		      <'false'> when 'true' ->
			  'bad_object'
		      ( <_10> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_10})
			-| ['compiler_generated'] )
		    end
		%% Line 2492
		<Reply> when 'true' ->
		    %% Line 2493
		    Reply
	      end
      -| [{'function',{'scan_objs',8}}] )
'scan_skip'/8 =
    %% Line 2496
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	  let <From1> =
	      call %% Line 2497
		   'erlang':%% Line 2497
			    '+'
		  (_1, _7)
	  in  %% Line 2498
	      case _0 of
		%% Line 2499
		<_30>
		    when call 'erlang':'>='
			  (From1,
			   _2) ->
		    %% Line 2500
		    case <> of
		      %% Line 2501
		      <>
			  when let <_9> =
				call 'erlang':'>'
				    (From1, _2)
			    in  let <_10> =
				    call 'erlang':'=:='
					(_3, #{}#)
				in  call 'erlang':'or'
					(_9, _10) ->
			  %% Line 2502
			  {'more',From1,_2,_3,_4,_5,0}
		      %% Line 2503
		      <> when 'true' ->
			  %% Line 2504
			  case _3 of
			    <#{#<From2>(32,1,'integer',['unsigned'|['big']]),
			       #<To1>(32,1,'integer',['unsigned'|['big']]),
			       #<L1>(( 'all'
				       -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
				let <Skip1> =
				    call %% Line 2505
					 'erlang':%% Line 2505
						  '-'
					(%% Line 2505
					 From2, _1)
				in  %% Line 2506
				    apply 'scan_skip'/8
					(_0, _1, To1, L1, _4, _5, _6, Skip1)
			    ( <_11> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_11})
			      -| ['compiler_generated'] )
			  end
		    end
		%% Line 2508
		<#{#<_31>(_7,8,'binary',['unsigned'|['big']]),
		   #<_X_Size>(32,1,'integer',['unsigned'|['big']]),
		   #<St>(32,1,'integer',['unsigned'|['big']]),
		   #<_X_Sz>(32,1,'integer',['unsigned'|['big']]),
		   #<KO>(( 'all'
			   -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#>
		    when let <_13> =
			  call %% Line 2509
			       'erlang':%% Line 2509
					'=/='
			      (%% Line 2509
			       St, %% Line 2509
				   305419896)
		      in  let <_14> =
			      call %% Line 2509
				   'erlang':%% Line 2509
					    '=/='
				  (%% Line 2509
				   St, %% Line 2509
				       61591023)
			  in  %% Line 2509
			      call 'erlang':'and'
				  (_13, _14) ->
		    let <_17> =
			call %% Line 2513
			     'erlang':%% Line 2513
				      '+'
			    (%% Line 2513
			     From1, %% Line 2513
				    12)
		    in  %% Line 2513
			apply 'scan_skip'/8
			    (KO, _17, _2, _3, _4, _5, _6, 2036)
		%% Line 2514
		<#{#<_32>(_7,8,'binary',['unsigned'|['big']]),
		   #<Size>(32,1,'integer',['unsigned'|['big']]),
		   #<_X_St>(32,1,'integer',['unsigned'|['big']]),
		   #<Sz>(32,1,'integer',['unsigned'|['big']]),
		   #<KO>(( 'all'
			   -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#>
		    when %% Line 2515
		      try
			  let <_19> =
			      call 'erlang':'-'
				  (Size, 12)
			  in  let <_18> =
				  call 'erlang':'byte_size'
				      (KO)
			      in  call 'erlang':'=<'
				      (_19, _18)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_20> =
			call %% Line 2518
			     'erlang':%% Line 2518
				      '+'
			    (%% Line 2518
			     From1, %% Line 2518
				    12)
		    in  %% Line 2518
			apply 'bin2bins'/9
			    (KO, _20, _2, _3, _4, _5, _6, Size, Sz)
		%% Line 2519
		<#{#<_33>(_7,8,'binary',['unsigned'|['big']]),
		   #<Size>(32,1,'integer',['unsigned'|['big']]),
		   #<_X_St>(32,1,'integer',['unsigned'|['big']]),
		   #<_X_Sz>(32,1,'integer',['unsigned'|['big']]),
		   #<_X_KO>(( 'all'
			      -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 2520
		    {'more',From1,_2,_3,_4,_5,Size}
		%% Line 2521
		<_34>
		    when call 'erlang':'>='
			  (_7,
			   0) ->
		    %% Line 2522
		    {'more',From1,_2,_3,_4,_5,0}
		( <_21> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_21})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'scan_skip',8}}] )
'bin2bins'/9 =
    %% Line 2527
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	      <Bin,From,To,L,Ts,R,Type = 'set',Size,ObjSz0> when 'true' ->
		  let <ObjsSz1> =
		      call %% Line 2528
			   'erlang':%% Line 2528
				    '-'
			  (%% Line 2528
			   Size, %% Line 2528
				 ObjSz0)
		  in  %% Line 2529
		      case <> of
			%% Line 2530
			<>
			    when call 'erlang':'=:='
				  (ObjsSz1,
				   8) ->
			    %% Line 2531
			    apply 'slot_end'/9
				(Bin, From, To, L, [Bin|Ts], R, Type, Size, 1)
			%% Line 2532
			<> when 'true' ->
			    let <ObjSz> =
				call %% Line 2533
				     'erlang':%% Line 2533
					      '-'
				    (%% Line 2533
				     ObjSz0, %% Line 2533
					     4)
			    in  %% Line 2534
				case Bin of
				  <#{#<_26>(ObjSz,8,'binary',['unsigned'|['big']]),
				     #<NObjSz>(32,1,'integer',['unsigned'|['big']]),
				     #<T>(( 'all'
					    -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
				      let <_12> =
					  call %% Line 2536
					       'erlang':%% Line 2536
							'-'
					      (%% Line 2536
					       ObjsSz1, %% Line 2536
							NObjSz)
				      in  %% Line 2535
					  apply 'bins_set'/12
					      (T, From, To, L, [Bin|Ts], R, Type, Size, 2, %% Line 2536
											   NObjSz, _12, %% Line 2536
													Bin)
				  ( <_11> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_11})
				    -| ['compiler_generated'] )
				end
		      end
	      %% Line 2538
	      <KO = #{#<ObjSz>(32,1,'integer',['unsigned'|['big']]),
		      #<Bin>(( 'all'
			       -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,From,To,L,Ts,R,Type,Size,Sz> when 'true' ->
		  let <_15> =
		      call %% Line 2540
			   'erlang':%% Line 2540
				    '-'
			  (%% Line 2540
			   Sz, %% Line 2540
			       ObjSz)
		  in  let <_16> =
			  call %% Line 2540
			       'erlang':%% Line 2540
					'-'
			      (_15, %% Line 2540
				    4)
		      in  let <_14> =
			      call %% Line 2540
				   'erlang':%% Line 2540
					    '-'
				  (%% Line 2540
				   ObjSz, %% Line 2540
					  4)
			  in  let <_13> =
				  call %% Line 2540
				       'erlang':%% Line 2540
						'-'
				      (%% Line 2540
				       Size, %% Line 2540
					     Sz)
			      in  %% Line 2539
				  apply 'bins_bag'/13
				      (Bin, From, To, L, Ts, R, Type, Size, 1, _16, _14, _13, %% Line 2540
											      KO)
	      ( <_25,_24,_23,_22,_21,_20,_19,_18,_17> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_25,_24,_23,_22,_21,_20,_19,_18,_17})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'bin2bins',9}}] )
      -| [{'function',{'bin2bins',9}}] )
'bins_set'/12 =
    %% Line 2542
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11> of
	      <Bin,From,To,L,Ts,R,Type,Size,NoObjs,_X_ObjSz0,8,KO> when 'true' ->
		  %% Line 2543
		  apply 'slot_end'/9
		      (KO, From, To, L, [Bin|Ts], R, Type, Size, NoObjs)
	      %% Line 2544
	      <Bin,From,To,L,Ts,R,Type,Size,NoObjs,ObjSz0,ObjsSz,KO> when 'true' ->
		  let <ObjSz> =
		      call %% Line 2545
			   'erlang':%% Line 2545
				    '-'
			  (%% Line 2545
			   ObjSz0, %% Line 2545
				   4)
		  in  %% Line 2546
		      case Bin of
			<#{#<_28>(ObjSz,8,'binary',['unsigned'|['big']]),
			   #<NObjSz>(32,1,'integer',['unsigned'|['big']]),
			   #<T>(( 'all'
				  -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
			    let <_15> =
				call %% Line 2547
				     'erlang':%% Line 2547
					      '+'
				    (%% Line 2547
				     NoObjs, %% Line 2547
					     1)
			    in  let <_14> =
				    call %% Line 2548
					 'erlang':%% Line 2548
						  '-'
					(%% Line 2548
					 ObjsSz, %% Line 2548
						 NObjSz)
				in  %% Line 2547
				    apply 'bins_set'/12
					(T, From, To, L, [Bin|Ts], R, Type, Size, _15, %% Line 2548
										       NObjSz, _14, %% Line 2548
												    KO)
			( <_13> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_13})
			  -| ['compiler_generated'] )
		      end
	    end
	    -| [{'function',{'bins_set',12}}] )
      -| [{'function',{'bins_set',12}}] )
'bins_bag'/13 =
    %% Line 2550
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12> of
	      <Bin,From,To,L,Ts,R,Type,Size,NoObjs,Sz,ObjSz,ObjsSz,KO>
		  when %% Line 2551
		    call 'erlang':'>'
			(Sz,
			 0) ->
		  %% Line 2552
		  case Bin of
		    <#{#<_36>(ObjSz,8,'binary',['unsigned'|['big']]),
		       #<NObjSz>(32,1,'integer',['unsigned'|['big']]),
		       #<T>(( 'all'
			      -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <_16> =
			    call %% Line 2553
				 'erlang':%% Line 2553
					  '+'
				(%% Line 2553
				 NoObjs, %% Line 2553
					 1)
			in  let <_15> =
				call %% Line 2554
				     'erlang':%% Line 2554
					      '-'
				    (%% Line 2554
				     Sz, %% Line 2554
					 NObjSz)
			    in  let <_14> =
				    call %% Line 2554
					 'erlang':%% Line 2554
						  '-'
					(%% Line 2554
					 NObjSz, %% Line 2554
						 4)
				in  %% Line 2553
				    apply 'bins_bag'/13
					(T, From, To, L, [Bin|Ts], R, Type, Size, _16, _15, _14, %% Line 2554
												 ObjsSz, %% Line 2554
													 KO)
		    ( <_13> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_13})
		      -| ['compiler_generated'] )
		  end
	      %% Line 2555
	      <Bin,From,To,L,Ts,R,Type,Size,NoObjs,_X_Z,_X_ObjSz,8,KO> when 'true' ->
		  %% Line 2556
		  apply 'slot_end'/9
		      (KO, From, To, L, [Bin|Ts], R, Type, Size, NoObjs)
	      %% Line 2557
	      <Bin,From,To,L,Ts,R,Type,Size,NoObjs,_X_Z,ObjSz,ObjsSz,KO> when 'true' ->
		  %% Line 2558
		  case Bin of
		    <#{#<_37>(ObjSz,8,'binary',['unsigned'|['big']]),
		       #<Sz>(32,1,'integer',['unsigned'|['big']]),
		       #<NObjSz>(32,1,'integer',['unsigned'|['big']]),
		       #<T>(( 'all'
			      -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <_22> =
			    call %% Line 2559
				 'erlang':%% Line 2559
					  '+'
				(%% Line 2559
				 NoObjs, %% Line 2559
					 1)
			in  let <_20> =
				call %% Line 2560
				     'erlang':%% Line 2560
					      '-'
				    (%% Line 2560
				     Sz, %% Line 2560
					 NObjSz)
			    in  let <_21> =
				    call %% Line 2560
					 'erlang':%% Line 2560
						  '-'
					(_20, %% Line 2560
					      4)
				in  let <_19> =
					call %% Line 2560
					     'erlang':%% Line 2560
						      '-'
					    (%% Line 2560
					     NObjSz, %% Line 2560
						     4)
				    in  let <_18> =
					    call %% Line 2560
						 'erlang':%% Line 2560
							  '-'
						(%% Line 2560
						 ObjsSz, %% Line 2560
							 Sz)
					in  %% Line 2559
					    apply 'bins_bag'/13
						(T, From, To, L, [Bin|Ts], R, Type, Size, _22, _21, _19, _18, %% Line 2560
													      KO)
		    ( <_17> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_17})
		      -| ['compiler_generated'] )
		  end
	    end
	    -| [{'function',{'bins_bag',13}}] )
      -| [{'function',{'bins_bag',13}}] )
'slot_end'/9 =
    %% Line 2562
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	  let <_9> =
	      call %% Line 2563
		   'dets_utils':%% Line 2563
				'log2'
		  (_7)
	  in  let <_10> =
		  call %% Line 2563
		       'erlang':%% Line 2563
				'bsl'
		      (%% Line 2563
		       1, _9)
	      in  let <Skip> =
		      call %% Line 2563
			   'erlang':%% Line 2563
				    '-'
			  (_10, %% Line 2563
				12)
		  in  %% Line 2564
		      case <> of
			%% Line 2565
			<>
			    when call 'erlang':'>='
				  (_5,
				   0) ->
			    let <_12> =
				call %% Line 2566
				     'erlang':%% Line 2566
					      '+'
				    (_5, _7)
			    in  %% Line 2566
				apply 'scan_skip'/8
				    (_0, _1, _2, _3, _4, _12, _6, Skip)
			%% Line 2567
			<> when 'true' ->
			    %% Line 2569
			    case call 'erlang':'+'
				     (_5, _8) of
			      %% Line 2570
			      <R1>
				  when call 'erlang':'>='
					(R1,
					 -1) ->
				  let <From1> =
				      call %% Line 2571
					   'erlang':%% Line 2571
						    '+'
					  (_1, %% Line 2571
					       Skip)
				  in  let <_16> =
					  case _0 of
					    %% Line 2573
					    <#{#<_28>(Skip,8,'binary',['unsigned'|['big']]),
					       #<B>(( 'all'
						      -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
						B
					    %% Line 2574
					    <_29> when 'true' ->
						#{}#
					  end
				      in  %% Line 2576
					  {'stop',_16,From1,_2,_3,_4}
			      %% Line 2577
			      <R1> when 'true' ->
				  %% Line 2578
				  apply 'scan_skip'/8
				      (_0, _1, _2, _3, _4, R1, _6, Skip)
			    end
		      end
      -| [{'function',{'slot_end',9}}] )
'file_info'/1 =
    %% Line 2584
    ( fun (_0) ->
	  %% Line 2588
	  case ( _0
		 -| [{'function',{'file_info',1}}] ) of
	    <{'fileheader',_15,_16,_17,CP,Type,Version,M,Next,Kp,NoObjects,NoKeys,_18,_19,_20,_21,_22,_23,_24,_25,_26,N}> when 'true' ->
		%% Line 2589
		case <> of
		  %% Line 2590
		  <>
		      when call 'erlang':'=:='
			    (CP,
			     0) ->
		      %% Line 2591
		      {'error','not_closed'}
		  %% Line 2592
		  <>
		      when ( try
			      ( let <_4> =
				    case ( call ( 'erlang'
						  -| ['compiler_generated'] ):( 'is_record'
										-| ['compiler_generated'] )
					       (( _0
						  -| [{'function',{'file_info',1}}] ), ( 'fileheader'
											 -| ['compiler_generated'] ), ( 22
															-| ['compiler_generated'] ))
					   -| ['compiler_generated'] ) of
				      ( <( 'true'
					   -| ['compiler_generated'] )> when 'true' ->
					    ( 'true'
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <( 'false'
					   -| ['compiler_generated'] )> when 'true' ->
					    ( 'fail'
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <( _2
					   -| ['compiler_generated'] )> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {( 'badarg'
							-| ['compiler_generated'] ),( _2
										      -| ['compiler_generated'] )}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				in  let <_5> =
					call 'erlang':'=:='
					    (( _4
					       -| ['compiler_generated'] ), 'true')
				    in  let <_6> =
					    call 'erlang':'element'
						(4, ( _0
						      -| [{'function',{'file_info',1}}] ))
					in  let <_7> =
						call 'erlang':'=/='
						    (_6, 11259375)
					    in  ( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'and'
										       -| ['compiler_generated'] )
						      (_5, _7)
						  -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false'
			  -| ['compiler_generated'] ) ->
		      %% Line 2593
		      {'error','not_a_dets_file'}
		  %% Line 2594
		  <>
		      when ( try
			      ( let <_10> =
				    case ( call ( 'erlang'
						  -| ['compiler_generated'] ):( 'is_record'
										-| ['compiler_generated'] )
					       (( _0
						  -| [{'function',{'file_info',1}}] ), ( 'fileheader'
											 -| ['compiler_generated'] ), ( 22
															-| ['compiler_generated'] ))
					   -| ['compiler_generated'] ) of
				      ( <( 'true'
					   -| ['compiler_generated'] )> when 'true' ->
					    ( 'true'
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <( 'false'
					   -| ['compiler_generated'] )> when 'true' ->
					    ( 'fail'
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <( _8
					   -| ['compiler_generated'] )> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {( 'badarg'
							-| ['compiler_generated'] ),( _8
										      -| ['compiler_generated'] )}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				in  let <_11> =
					call 'erlang':'=:='
					    (( _10
					       -| ['compiler_generated'] ), 'true')
				    in  let <_12> =
					    call 'erlang':'element'
						(7, ( _0
						      -| [{'function',{'file_info',1}}] ))
					in  let <_13> =
						call 'erlang':'=/='
						    (_12, 9)
					    in  ( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'and'
										       -| ['compiler_generated'] )
						      (_11, _13)
						  -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false'
			  -| ['compiler_generated'] ) ->
		      %% Line 2595
		      {'error','bad_version'}
		  %% Line 2596
		  <> when 'true' ->
		      %% Line 2597
		      {'ok',[{'closed_properly',CP}|[{'keypos',Kp}|[{'m',M}|[{'n',N}|%% Line 2598
										     [{'next',Next}|[{'no_objects',NoObjects}|[{'no_keys',NoKeys}|%% Line 2599
																		  [{'type',Type}|[{'version',Version}|[]]]]]]]]]]}
		end
	    ( <_1> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_1})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'file_info',1}}] )
'v_segments'/1 =
    %% Line 2602
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'v_segments',1}}] ) of
	      <H = {'head',_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30}> when 'true' ->
		  %% Line 2603
		  apply 'v_parts'/3
		      (H, 0, 0)
	      ( <_1> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_1})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'v_segments',1}}] )
      -| [{'function',{'v_segments',1}}] )
'v_parts'/3 =
    %% Line 2605
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <_X_H,256,_X_SegNo> when 'true' ->
		  %% Line 2606
		  'done'
	      %% Line 2607
	      <H,PartNo,SegNo> when 'true' ->
		  %% Line 2608
		  ( case H of
		      ( <( {'head',_20,_21,_22,_rec129,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_6> =
				call %% Line 2609
				     'erlang':%% Line 2609
					      '*'
				    (%% Line 2609
				     4, %% Line 2609
					PartNo)
			    in  let <_12> =
				    call %% Line 2609
					 'erlang':%% Line 2609
						  '+'
					(%% Line 2609
					 312, _6)
				in  let <PartPos> =
					call %% Line 2609
					     'dets_utils':%% Line 2609
							  'read_4'
					    (_rec129, _12)
				    in  %% Line 2610
					case <> of
					  %% Line 2611
					  <>
					      when call 'erlang':'=:='
						    (PartPos,
						     0) ->
					      %% Line 2612
					      'done'
					  %% Line 2613
					  <> when 'true' ->
					      let <PartBin> =
						  call %% Line 2614
						       'dets_utils':%% Line 2614
								    'pread_n'
						      (_rec129, %% Line 2614
								PartPos, %% Line 2614
									 2048)
					      in  let <_16> =
						      call %% Line 2615
							   'erlang':%% Line 2615
								    '+'
							  (%% Line 2615
							   PartNo, %% Line 2615
								   1)
						  in  %% Line 2615
						      apply 'v_segments'/4
							  (H, PartBin, _16, SegNo)
					end
			-| ['compiler_generated'] )
		      ( <_48> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	    end
	    -| [{'function',{'v_parts',3}}] )
      -| [{'function',{'v_parts',3}}] )
'v_segments'/4 =
    %% Line 2618
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <H,#{}#,PartNo,SegNo> when 'true' ->
		  %% Line 2619
		  apply 'v_parts'/3
		      (H, PartNo, SegNo)
	      %% Line 2620
	      <_X_H,#{#<0>(32,1,'integer',['unsigned'|['big']]),
		      #<_9>(( 'all'
			      -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,_X_PartNo,_X_SegNo> when 'true' ->
		  %% Line 2621
		  'done'
	      %% Line 2622
	      <H,#{#<Seg>(32,1,'integer',['unsigned'|['big']]),
		   #<T>(( 'all'
			  -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,PartNo,SegNo> when 'true' ->
		  do  %% Line 2623
		      call 'io':'format'
			  ([60|[126|[119|[62|[83|[69|[71|[77|[69|[78|[84|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]], [Seg|[SegNo|[]]])
		      do  %% Line 2624
			  apply 'v_segment'/4
			      (H, SegNo, Seg, 0)
			  let <_4> =
			      call %% Line 2625
				   'erlang':%% Line 2625
					    '+'
				  (%% Line 2625
				   SegNo, %% Line 2625
					  1)
			  in  %% Line 2625
			      apply 'v_segments'/4
				  (H, T, PartNo, _4)
	      ( <_8,_7,_6,_5> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_8,_7,_6,_5})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'v_segments',4}}] )
      -| [{'function',{'v_segments',4}}] )
'v_segment'/4 =
    %% Line 2627
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <_X_H,_18,_X_SegPos,256> when 'true' ->
		  %% Line 2628
		  'done'
	      %% Line 2629
	      <H,SegNo,SegPos,SegSlot> when 'true' ->
		  let <_4> =
		      call %% Line 2630
			   'erlang':%% Line 2630
				    '*'
			  (%% Line 2630
			   SegNo, %% Line 2630
				  256)
		  in  let <Slot> =
			  call %% Line 2630
			       'erlang':%% Line 2630
					'+'
			      (%% Line 2630
			       SegSlot, _4)
		      in  let <_7> =
			      call %% Line 2631
				   'erlang':%% Line 2631
					    '*'
				  (%% Line 2631
				   8, %% Line 2631
				      SegSlot)
			  in  let <BucketP> =
				  call %% Line 2631
				       'erlang':%% Line 2631
						'+'
				      (%% Line 2631
				       SegPos, _7)
			      in  let <_11> =
				      catch
					  %% Line 2632
					  ( case H of
					      ( <( {'head',_19,_20,_21,_22,_23,_24,_25,_26,_rec130,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46}
						   -| ['compiler_generated'] )> when 'true' ->
						    apply 'read_bucket'/3
							(H, BucketP, _rec130)
						-| ['compiler_generated'] )
					      ( <_47> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','head'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				  in  do  %% Line 2632
					  case _11 of
					    %% Line 2633
					    <{'EXIT',Reason}> when 'true' ->
						do  %% Line 2634
						    call 'dets_utils':'vformat'
							([42|[42|[32|[100|[101|[116|[115|[58|[32|[67|[111|[114|[114|[117|[112|[116|[32|[111|[114|[32|[116|[114|[117|[110|[99|[97|[116|[101|[100|[32|[100|[101|[116|[115|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2635
																																				    [])
						    %% Line 2636
						    call 'io':'format'
							([126|[110|[69|[82|[82|[79|[82|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]], [Reason|[]])
					    %% Line 2637
					    <[]> when 'true' ->
						'ok'
					    %% Line 2639
					    <{Size,CollP,Objects}> when 'true' ->
						%% Line 2640
						call 'io':'format'
						    ([32|[32|[32|[60|[126|[119|[62|[126|[119|[58|[32|[60|[126|[119|[58|[126|[112|[62|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]], %% Line 2641
																						[BucketP|[Slot|[CollP|[Size|[Objects|[]]]]]])
					    ( <_12> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_12})
					      -| ['compiler_generated'] )
					  end
					  let <_13> =
					      call %% Line 2643
						   'erlang':%% Line 2643
							    '+'
						  (%% Line 2643
						   SegSlot, %% Line 2643
							    1)
					  in  %% Line 2643
					      apply 'v_segment'/4
						  (H, SegNo, SegPos, _13)
	    end
	    -| [{'function',{'v_segment',4}}] )
      -| [{'function',{'v_segment',4}}] )
'read_bucket'/3 =
    %% Line 2646
    ( fun (_0,_1,_2) ->
	  let <MaxSize> =
	      case _0 of
		( <( _69 = ( {( 'head'
				-| ['compiler_generated'] ),_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}
			     -| ['compiler_generated'] )
		     -| ['compiler_generated'] )>
		      when ( try
			      ( let <_5> =
				    call ( 'erlang'
					   -| ['compiler_generated'] ):( 'element'
									 -| ['compiler_generated'] )
					(( 8
					   -| ['compiler_generated'] ), _69)
				in  ( let <_6> =
					  call ( 'erlang'
						 -| ['compiler_generated'] ):( '=:='
									       -| ['compiler_generated'] )
					      (_5, ( 'undefined'
						     -| ['compiler_generated'] ))
				      in  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(( 'true'
						   -| ['compiler_generated'] ), _6)
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      ( 'false'
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] ) ->
		      ( 4294967296
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <_70> when ( 'true'
			       -| ['compiler_generated'] ) ->
		      ( case _70 of
			  ( <( {( 'head'
				  -| ['compiler_generated'] ),_39,_40,_41,_42,_43,_44,_rec128,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66}
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'bsl'
								       -| ['compiler_generated'] )
				      (( 1
					 -| ['compiler_generated'] ), _rec128)
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <_67> when ( 'true'
					 -| ['compiler_generated'] ) ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','head'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  in  %% Line 2648
	      case call 'dets_utils':'ipread'
		       (_0, _1, MaxSize) of
		%% Line 2649
		<{'ok',{Size,Pointer,#{#<_10>(32,1,'integer',['unsigned'|['big']]),
				       #<_X_Status>(32,1,'integer',['unsigned'|['big']]),
				       #<KeysObjs>(( 'all'
						     -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#}}>
		    when call 'erlang':'=:='
			  (_10,
			   Size) ->
		    let <Objs> =
			apply %% Line 2650
			      'bin2objs'/3
			    (%% Line 2650
			     KeysObjs, _2, %% Line 2650
					   [])
		    in  let <_5> =
			    call %% Line 2651
				 'lists':%% Line 2651
					 'reverse'
				(%% Line 2651
				 Objs)
			in  %% Line 2651
			    {Size,Pointer,_5}
		%% Line 2652
		<[]> when 'true' ->
		    %% Line 2653
		    []
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_6})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'read_bucket',3}}] )
'per_key'/2 =
    %% Line 2661
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Head,B = #{#<BinSize>(32,1,'integer',['unsigned'|['big']]),
			  #<305419896>(32,1,'integer',['unsigned'|['big']]),
			  #<Bin>(( 'all'
				   -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
		  let <_2> =
		      call %% Line 2662
			   'erlang':%% Line 2662
				    'byte_size'
			  (%% Line 2662
			   B)
		  in  %% Line 2662
		      case call 'erlang':'=:='
			       (_2, BinSize) of
			<'true'> when 'true' ->
			    %% Line 2663
			    case <> of
			      %% Line 2664
			      <>
				  when ( try
					  ( let <_6> =
						case ( call ( 'erlang'
							      -| ['compiler_generated'] ):( 'is_record'
											    -| ['compiler_generated'] )
							   (Head, ( 'head'
								    -| ['compiler_generated'] ), ( 30
												   -| ['compiler_generated'] ))
						       -| ['compiler_generated'] ) of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							( 'true'
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							( 'fail'
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( _4
						       -| ['compiler_generated'] )> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {( 'badarg'
								    -| ['compiler_generated'] ),( _4
												  -| ['compiler_generated'] )}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					    in  let <_7> =
						    call 'erlang':'=:='
							(( _6
							   -| ['compiler_generated'] ), 'true')
						in  let <_8> =
							call 'erlang':'element'
							    (10, Head)
						    in  let <_9> =
							    call 'erlang':'=:='
								(_8, 'set')
							in  ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'and'
												   -| ['compiler_generated'] )
								  (_7, _9)
							      -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false'
				      -| ['compiler_generated'] ) ->
				  %% Line 2665
				  ( case Head of
				      ( <( {'head',_16,_17,_18,_19,_20,_21,_22,_23,_24,_rec131,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43}
					   -| ['compiler_generated'] )> when 'true' ->
					    apply 'per_set_key'/3
						(Bin, _rec131, [])
					-| ['compiler_generated'] )
				      ( <_44> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','head'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 2666
			      <> when 'true' ->
				  %% Line 2667
				  ( case Head of
				      ( <( {'head',_45,_46,_47,_48,_49,_50,_51,_52,_53,_rec132,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72}
					   -| ['compiler_generated'] )> when 'true' ->
					    apply 'per_bag_key'/3
						(Bin, _rec132, [])
					-| ['compiler_generated'] )
				      ( <_73> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','head'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			    end
			( <_3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_3})
			  -| ['compiler_generated'] )
		      end
	      ( <_15,_14> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_15,_14})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'per_key',2}}] )
      -| [{'function',{'per_key',2}}] )
'per_set_key'/3 =
    %% Line 2670
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <B = #{#<Size>(32,1,'integer',['unsigned'|['big']]),
		     #<T>(( 'all'
			    -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,KeyPos,L> when 'true' ->
		  %% Line 2671
		  case B of
		    <#{#<KeyBin>(Size,8,'binary',['unsigned'|['big']]),
		       #<R>(( 'all'
			      -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <Term> =
			    call %% Line 2672
				 'erlang':%% Line 2672
					  'binary_to_term'
				(%% Line 2672
				 T)
			in  let <Key> =
				call %% Line 2673
				     'erlang':%% Line 2673
					      'element'
				    (%% Line 2673
				     KeyPos, %% Line 2673
					     Term)
			    in  let <Item> = {%% Line 2674
				     Term,%% Line 2674
					  -67108864,%% Line 2674
						    KeyBin}
				in  %% Line 2675
				    apply 'per_set_key'/3
					(R, KeyPos, [{Key,Size,KeyBin,Item,[]}|L])
		    ( <_3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_3})
		      -| ['compiler_generated'] )
		  end
	      %% Line 2676
	      <#{}#,KeyPos,L>
		  when call 'erlang':'is_integer'
			(KeyPos) ->
		  %% Line 2677
		  call 'lists':'reverse'
		      (L)
	      ( <_11,_10,_9> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_11,_10,_9})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'per_set_key',3}}] )
      -| [{'function',{'per_set_key',3}}] )
'per_bag_key'/3 =
    %% Line 2679
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <B = #{#<Size>(32,1,'integer',['unsigned'|['big']]),
		     #<ObjSz>(32,1,'integer',['unsigned'|['big']]),
		     #<T>(( 'all'
			    -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,KeyPos,L> when 'true' ->
		  %% Line 2680
		  case B of
		    <#{#<KeyBin>(Size,8,'binary',['unsigned'|['big']]),
		       #<R>(( 'all'
			      -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <ObjSz1> =
			    call %% Line 2681
				 'erlang':%% Line 2681
					  '-'
				(%% Line 2681
				 ObjSz, %% Line 2681
					4)
			in  let <_5> =
				call %% Line 2682
				     'erlang':%% Line 2682
					      '-'
				    (%% Line 2682
				     Size, %% Line 2682
					   ObjSz)
			    in  let <Size1> =
				    call %% Line 2682
					 'erlang':%% Line 2682
						  '-'
					(_5, %% Line 2682
					     4)
				in  %% Line 2683
				    case T of
				      <#{#<_17>(ObjSz1,8,'binary',['unsigned'|['big']]),
					 #<KeyObjs>(Size1,8,'binary',['unsigned'|['big']]),
					 #<_18>(( 'all'
						  -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
					  %% Line 2684
					  case B of
					    <#{#<_X_Size>(32,1,'integer',['unsigned'|['big']]),
					       #<Bin>(ObjSz,8,'binary',['unsigned'|['big']]),
					       #<_19>(( 'all'
							-| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
						let <Term> =
						    call %% Line 2685
							 'erlang':%% Line 2685
								  'binary_to_term'
							(%% Line 2685
							 T)
						in  let <Key> =
							call %% Line 2686
							     'erlang':%% Line 2686
								      'element'
							    (%% Line 2686
							     KeyPos, %% Line 2686
								     Term)
						    in  let <Item> = {%% Line 2687
							     Term,%% Line 2687
								  -67108864,%% Line 2687
									    Bin}
							in  %% Line 2688
							    apply 'per_bag_key'/3
								(R, KeyPos, [{Key,Size,KeyBin,Item,KeyObjs}|L])
					    ( <_8> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_8})
					      -| ['compiler_generated'] )
					  end
				      ( <_7> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_7})
					-| ['compiler_generated'] )
				    end
		    ( <_3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_3})
		      -| ['compiler_generated'] )
		  end
	      %% Line 2689
	      <#{}#,KeyPos,L>
		  when call 'erlang':'is_integer'
			(KeyPos) ->
		  %% Line 2690
		  call 'lists':'reverse'
		      (L)
	      ( <_16,_15,_14> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_16,_15,_14})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'per_bag_key',3}}] )
      -| [{'function',{'per_bag_key',3}}] )
'binobjs2terms'/1 =
    %% Line 2693
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'binobjs2terms',1}}] ) of
	      <B = #{#<ObjSz>(32,1,'integer',['unsigned'|['big']]),
		     #<T>(( 'all'
			    -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
		  let <_4> =
		      call %% Line 2694
			   'erlang':%% Line 2694
				    'byte_size'
			  (%% Line 2694
			   B)
		  in  let <_5> =
			  call %% Line 2694
			       'erlang':%% Line 2694
					'-'
			      (_4, %% Line 2694
				   ObjSz)
		      in  %% Line 2694
			  apply 'binobjs2terms'/6
			      (B, T, ObjSz, _5, -67108863, [])
	      %% Line 2695
	      <B = []> when 'true' ->
		  %% Line 2696
		  B
	      %% Line 2697
	      <#{}#> when 'true' ->
		  %% Line 2698
		  []
	      ( <_6> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_6})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'binobjs2terms',1}}] )
      -| [{'function',{'binobjs2terms',1}}] )
'binobjs2terms'/6 =
    %% Line 2700
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  ( case <_0,_1,_2,_3,_4,_5> of
	      <Bin,Obj,_X_ObjSz,_X_Size = 0,N,L> when 'true' ->
		  let <_6> =
		      call %% Line 2701
			   'erlang':%% Line 2701
				    'binary_to_term'
			  (%% Line 2701
			   Obj)
		  in  %% Line 2701
		      call 'lists':'reverse'
			  (L, [{_6,N,Bin}|[]])
	      %% Line 2702
	      <Bin,Bin1,ObjSz,Size,N,L> when 'true' ->
		  %% Line 2703
		  case Bin of
		    <#{#<B>(ObjSz,8,'binary',['unsigned'|['big']]),
		       #<T>(( 'all'
			      -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
			%% Line 2704
			case T of
			  <#{#<NObjSz>(32,1,'integer',['unsigned'|['big']]),
			     #<T1>(( 'all'
				     -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
			      let <_9> =
				  call %% Line 2705
				       'erlang':%% Line 2705
						'binary_to_term'
				      (%% Line 2705
				       Bin1)
			      in  let <Item> = {_9,%% Line 2705
					  N,%% Line 2705
					    B}
				  in  let <_12> =
					  call %% Line 2706
					       'erlang':%% Line 2706
							'-'
					      (%% Line 2706
					       Size, %% Line 2706
						     NObjSz)
				      in  let <_11> =
					      call %% Line 2706
						   'erlang':%% Line 2706
							    '+'
						  (%% Line 2706
						   N, %% Line 2706
						      1)
					  in  %% Line 2706
					      apply 'binobjs2terms'/6
						  (T, T1, NObjSz, _12, _11, [Item|L])
			  ( <_8> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_8})
			    -| ['compiler_generated'] )
			end
		    ( <_7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_7})
		      -| ['compiler_generated'] )
		  end
	    end
	    -| [{'function',{'binobjs2terms',6}}] )
      -| [{'function',{'binobjs2terms',6}}] )
'bin2objs'/3 =
    %% Line 2710
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <KeysObjs,'set',Ts> when 'true' ->
		  %% Line 2711
		  case KeysObjs of
		    <#{#<ObjSz>(32,1,'integer',['unsigned'|['big']]),
		       #<T>(( 'all'
			      -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <_6> =
			    call %% Line 2712
				 'erlang':%% Line 2712
					  '-'
				(%% Line 2712
				 ObjSz, %% Line 2712
					4)
			in  let <_4> =
				call %% Line 2712
				     'erlang':%% Line 2712
					      'byte_size'
				    (%% Line 2712
				     KeysObjs)
			    in  let <_5> =
				    call %% Line 2712
					 'erlang':%% Line 2712
						  '-'
					(_4, %% Line 2712
					     ObjSz)
				in  %% Line 2712
				    apply 'bin2objs'/4
					(T, _6, _5, Ts)
		    ( <_3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_3})
		      -| ['compiler_generated'] )
		  end
	      %% Line 2713
	      <KeysObjs,_X_Type,Ts> when 'true' ->
		  %% Line 2714
		  apply 'bin2objs2'/2
		      (KeysObjs, Ts)
	    end
	    -| [{'function',{'bin2objs',3}}] )
      -| [{'function',{'bin2objs',3}}] )
'bin2objs2'/2 =
    %% Line 2716
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <#{#<Size>(32,1,'integer',['unsigned'|['big']]),
		 #<ObjSz>(32,1,'integer',['unsigned'|['big']]),
		 #<T>(( 'all'
			-| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Ts> when 'true' ->
		  let <_4> =
		      call %% Line 2717
			   'erlang':%% Line 2717
				    '-'
			  (%% Line 2717
			   ObjSz, %% Line 2717
				  4)
		  in  let <_2> =
			  call %% Line 2717
			       'erlang':%% Line 2717
					'-'
			      (%% Line 2717
			       Size, %% Line 2717
				     ObjSz)
		      in  let <_3> =
			      call %% Line 2717
				   'erlang':%% Line 2717
					    '-'
				  (_2, %% Line 2717
				       4)
			  in  %% Line 2717
			      apply 'bin2objs'/4
				  (T, _4, _3, Ts)
	      %% Line 2718
	      <#{}#,Ts> when 'true' ->
		  %% Line 2719
		  Ts
	      ( <_6,_5> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_6,_5})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'bin2objs2',2}}] )
      -| [{'function',{'bin2objs2',2}}] )
'bin2objs'/4 =
    %% Line 2721
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <Bin,ObjSz,_X_Size = 0,Ts> when 'true' ->
		  %% Line 2722
		  case Bin of
		    <#{#<_14>(ObjSz,8,'binary',['unsigned'|['big']]),
		       #<T>(( 'all'
			      -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <_5> =
			    call %% Line 2723
				 'erlang':%% Line 2723
					  'binary_to_term'
				(%% Line 2723
				 Bin)
			in  %% Line 2723
			    apply 'bin2objs2'/2
				(T, [_5|Ts])
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4})
		      -| ['compiler_generated'] )
		  end
	      %% Line 2724
	      <Bin,ObjSz,Size,Ts> when 'true' ->
		  %% Line 2725
		  case Bin of
		    <#{#<_15>(ObjSz,8,'binary',['unsigned'|['big']]),
		       #<NObjSz>(32,1,'integer',['unsigned'|['big']]),
		       #<T>(( 'all'
			      -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <_9> =
			    call %% Line 2726
				 'erlang':%% Line 2726
					  '-'
				(%% Line 2726
				 NObjSz, %% Line 2726
					 4)
			in  let <_8> =
				call %% Line 2726
				     'erlang':%% Line 2726
					      '-'
				    (%% Line 2726
				     Size, %% Line 2726
					   NObjSz)
			    in  let <_7> =
				    call %% Line 2726
					 'erlang':%% Line 2726
						  'binary_to_term'
					(%% Line 2726
					 Bin)
				in  %% Line 2726
				    apply 'bin2objs'/4
					(T, _9, _8, [_7|Ts])
		    ( <_6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_6})
		      -| ['compiler_generated'] )
		  end
	    end
	    -| [{'function',{'bin2objs',4}}] )
      -| [{'function',{'bin2objs',4}}] )
'bin2keybins'/2 =
    %% Line 2729
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <KeysObjs,Head = {'head',_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46}>
		  when ( try
			  let <_6> =
			      call 'erlang':'element'
				  (10, Head)
			  in  let <_7> =
				  call 'erlang':'=:='
				      (_6, 'set')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _7)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 2730
		  case KeysObjs of
		    <#{#<ObjSz>(32,1,'integer',['unsigned'|['big']]),
		       #<T>(( 'all'
			      -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
			%% Line 2731
			( case Head of
			    ( <( {'head',_47,_48,_49,_50,_51,_52,_53,_54,_55,_rec133,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_11> =
				      call 'erlang':'-'
					  (ObjSz, 4)
				  in  let <_9> =
					  call 'erlang':'byte_size'
					      (KeysObjs)
				      in  let <_10> =
					      call 'erlang':'-'
						  (_9, ObjSz)
					  in  apply 'bin2keybins'/5
						  (T, _rec133, _11, _10, [])
			      -| ['compiler_generated'] )
			    ( <_75> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','head'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_8})
		      -| ['compiler_generated'] )
		  end
	      %% Line 2732
	      <KeysObjs,Head> when 'true' ->
		  %% Line 2733
		  ( case Head of
		      ( <( {'head',_76,_77,_78,_79,_80,_81,_82,_83,_84,_rec134,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103}
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'bin2keybins2'/3
				(KeysObjs, _rec134, [])
			-| ['compiler_generated'] )
		      ( <_104> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	    end
	    -| [{'function',{'bin2keybins',2}}] )
      -| [{'function',{'bin2keybins',2}}] )
'bin2keybins2'/3 =
    %% Line 2735
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <#{#<Size>(32,1,'integer',['unsigned'|['big']]),
		 #<ObjSz>(32,1,'integer',['unsigned'|['big']]),
		 #<T>(( 'all'
			-| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Kp,L> when 'true' ->
		  let <_5> =
		      call %% Line 2736
			   'erlang':%% Line 2736
				    '-'
			  (%% Line 2736
			   ObjSz, %% Line 2736
				  4)
		  in  let <_3> =
			  call %% Line 2736
			       'erlang':%% Line 2736
					'-'
			      (%% Line 2736
			       Size, %% Line 2736
				     ObjSz)
		      in  let <_4> =
			      call %% Line 2736
				   'erlang':%% Line 2736
					    '-'
				  (_3, %% Line 2736
				       4)
			  in  %% Line 2736
			      apply 'bin2keybins'/5
				  (T, Kp, _5, _4, L)
	      %% Line 2737
	      <#{}#,Kp,L>
		  when call 'erlang':'is_integer'
			(Kp) ->
		  %% Line 2738
		  call 'lists':'reverse'
		      (L)
	      ( <_8,_7,_6> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_8,_7,_6})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'bin2keybins2',3}}] )
      -| [{'function',{'bin2keybins2',3}}] )
'bin2keybins'/5 =
    %% Line 2740
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <Bin,Kp,ObjSz,_X_Size = 0,L> when 'true' ->
		  %% Line 2741
		  case Bin of
		    <#{#<Obj>(ObjSz,8,'binary',['unsigned'|['big']]),
		       #<T>(( 'all'
			      -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <Term> =
			    call %% Line 2742
				 'erlang':%% Line 2742
					  'binary_to_term'
				(%% Line 2742
				 Obj)
			in  let <_7> =
				call %% Line 2743
				     'erlang':%% Line 2743
					      'element'
				    (%% Line 2743
				     Kp, %% Line 2743
					 Term)
			    in  %% Line 2743
				apply 'bin2keybins2'/3
				    (T, Kp, [{_7,Obj}|L])
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5})
		      -| ['compiler_generated'] )
		  end
	      %% Line 2744
	      <Bin,Kp,ObjSz,Size,L> when 'true' ->
		  %% Line 2745
		  case Bin of
		    <#{#<Obj>(ObjSz,8,'binary',['unsigned'|['big']]),
		       #<NObjSz>(32,1,'integer',['unsigned'|['big']]),
		       #<T>(( 'all'
			      -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <Term> =
			    call %% Line 2746
				 'erlang':%% Line 2746
					  'binary_to_term'
				(%% Line 2746
				 Obj)
			in  let <_12> =
				call %% Line 2747
				     'erlang':%% Line 2747
					      '-'
				    (%% Line 2747
				     NObjSz, %% Line 2747
					     4)
			    in  let <_11> =
				    call %% Line 2747
					 'erlang':%% Line 2747
						  '-'
					(%% Line 2747
					 Size, %% Line 2747
					       NObjSz)
				in  let <_10> =
					call %% Line 2747
					     'erlang':%% Line 2747
						      'element'
					    (%% Line 2747
					     Kp, %% Line 2747
						 Term)
				    in  %% Line 2747
					apply 'bin2keybins'/5
					    (T, Kp, _12, _11, [{_10,Obj}|L])
		    ( <_8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_8})
		      -| ['compiler_generated'] )
		  end
	    end
	    -| [{'function',{'bin2keybins',5}}] )
      -| [{'function',{'bin2keybins',5}}] )
'module_info'/0 =
    ( fun () ->
	  call 'erlang':'get_module_info'
	      ('dets_v9')
      -| [{'function',{'module_info',0}}] )
'module_info'/1 =
    ( fun (_0) ->
	  call 'erlang':'get_module_info'
	      ('dets_v9', ( _0
			    -| [{'function',{'module_info',1}}] ))
      -| [{'function',{'module_info',1}}] )
end