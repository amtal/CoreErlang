module 'epp' ['close'/1,
	      'default_encoding'/0,
	      'encoding_to_string'/1,
	      'format_error'/1,
	      'interpret_file_attribute'/1,
	      'macro_defs'/1,
	      'module_info'/0,
	      'module_info'/1,
	      'normalize_typed_record_fields'/1,
	      'open'/1,
	      'open'/2,
	      'open'/3,
	      'open'/5,
	      'parse_erl_form'/1,
	      'parse_file'/1,
	      'parse_file'/2,
	      'parse_file'/3,
	      'read_encoding'/1,
	      'read_encoding'/2,
	      'read_encoding_from_binary'/1,
	      'read_encoding_from_binary'/2,
	      'restore_typed_record_fields'/1,
	      'scan_erl_form'/1,
	      'set_encoding'/1,
	      'set_encoding'/2]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[101|[112|[112|[46|[101|[114|[108]]]]]]]]]]],1}],
		%% Line 35
		'export_type' =
		    %% Line 35
		    [{'source_encoding',0}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{'macros',{'type',37,'list',[{'type',37,'union',[{'type',37,'atom',[]}|[{'type',37,'tuple',[{'type',37,'atom',[]}|[{'type',37,'term',[]}]]}]]}]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'epp_handle',{'type',38,'pid',[]},[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{'source_encoding',{'type',39,'union',[{'atom',39,'latin1'}|[{'atom',39,'utf8'}]]},[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{'ifdef',{'type',41,'union',[{'atom',41,'ifdef'}|[{'atom',41,'ifndef'}|[{'atom',41,'if'}|[{'atom',41,'else'}]]]]},[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{'name',{'type',43,'atom',[]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{'argspec',{'type',44,'union',[{'atom',44,'none'}|[{'type',45,'non_neg_integer',[]}]]},[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{'argnames',{'type',46,'list',[{'type',46,'atom',[]}]},[]}],
		%% Line 47
		'type' =
		    %% Line 47
		    [{'tokens',{'type',47,'list',[{'remote_type',47,[{'atom',47,'erl_scan'}|[{'atom',47,'token'}|[[]]]]}]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'predef',{'type',48,'union',[{'atom',48,'undefined'}|[{'type',48,'tuple',[{'atom',48,'none'}|[{'user_type',48,'tokens',[]}]]}]]},[]}],
		%% Line 49
		'type' =
		    %% Line 49
		    [{'userdef',{'type',49,'tuple',[{'user_type',49,'argspec',[]}|[{'type',49,'tuple',[{'user_type',49,'argnames',[]}|[{'user_type',49,'tokens',[]}]]}]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{'used',{'type',50,'tuple',[{'user_type',50,'name',[]}|[{'user_type',50,'argspec',[]}]]},[]}],
		%% Line 52
		'type' =
		    %% Line 52
		    [{'function_name_type',{'type',52,'union',[{'atom',52,'undefined'}|[{'type',53,'tuple',[{'type',53,'atom',[]}|[{'type',53,'non_neg_integer',[]}]]}|[{'user_type',54,'tokens',[]}]]]},[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{'warning_info',{'type',56,'tuple',[{'remote_type',56,[{'atom',56,'erl_anno'}|[{'atom',56,'location'}|[[]]]]}|[{'type',56,'module',[]}|[{'type',56,'term',[]}]]]},[]}],
		%% Line 61
		'record' =
		    %% Line 61
		    [{'epp',[{'typed_record_field',{'record_field',61,{'atom',61,'file'}},{'type',61,'union',[{'remote_type',61,[{'atom',61,'file'}|[{'atom',61,'io_device'}|[[]]]]}|[{'atom',62,'undefined'}]]}}|[{'record_field',63,{'atom',63,'location'},{'integer',63,1}}|[{'typed_record_field',{'record_field',64,{'atom',64,'delta'},{'integer',64,0}},{'type',64,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',65,{'atom',65,'name'},{'string',65,[]}},{'remote_type',65,[{'atom',65,'file'}|[{'atom',65,'name'}|[[]]]]}}|[{'typed_record_field',{'record_field',66,{'atom',66,'name2'},{'string',66,[]}},{'remote_type',66,[{'atom',66,'file'}|[{'atom',66,'name'}|[[]]]]}}|[{'typed_record_field',{'record_field',67,{'atom',67,'istk'},{'nil',67}},{'type',67,'list',[{'user_type',67,'ifdef',[]}]}}|[{'typed_record_field',{'record_field',68,{'atom',68,'sstk'},{'nil',68}},{'type',68,'list',[{'type',68,'record',[{'atom',68,'epp'}]}]}}|[{'typed_record_field',{'record_field',69,{'atom',69,'path'},{'nil',69}},{'type',69,'list',[{'remote_type',69,[{'atom',69,'file'}|[{'atom',69,'name'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',70,{'atom',70,'macs'},{'map',70,[]}},{'type',71,'map',[{'type',71,'map_field_assoc',[{'user_type',71,'name',[]}|[{'type',71,'union',[{'user_type',71,'predef',[]}|[{'type',71,'list',[{'user_type',71,'userdef',[]}]}]]}]]}]}}|[{'typed_record_field',{'record_field',72,{'atom',72,'uses'},{'map',72,[]}},{'type',73,'map',[{'type',73,'map_field_assoc',[{'user_type',73,'name',[]}|[{'type',73,'list',[{'type',73,'tuple',[{'user_type',73,'argspec',[]}|[{'type',73,'list',[{'user_type',73,'used',[]}]}]]}]}]]}]}}|[{'typed_record_field',{'record_field',74,{'atom',74,'default_encoding'},{'atom',74,'utf8'}},{'user_type',74,'source_encoding',[]}}|[{'typed_record_field',{'record_field',75,{'atom',75,'pre_opened'},{'atom',75,'false'}},{'type',75,'boolean',[]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'fname'},{'nil',76}},{'user_type',76,'function_name_type',[]}}]]]]]]]]]]]]]}],
		%% Line 91
		'spec' =
		    %% Line 91
		    [{{'open',2},[{'type',91,'bounded_fun',[{'type',91,'fun',[{'type',91,'product',[{'var',91,'FileName'}|[{'var',91,'IncludePath'}]]}|[{'type',92,'union',[{'type',92,'tuple',[{'atom',92,'ok'}|[{'var',92,'Epp'}]]}|[{'type',92,'tuple',[{'atom',92,'error'}|[{'var',92,'ErrorDescriptor'}]]}]]}]]}|[[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'FileName'}|[{'remote_type',93,[{'atom',93,'file'}|[{'atom',93,'name'}|[[]]]]}]]]]}|[{'type',94,'constraint',[{'atom',94,'is_subtype'}|[[{'var',94,'IncludePath'}|[{'type',94,'list',[{'ann_type',94,[{'var',94,'DirectoryName'}|[{'remote_type',94,[{'atom',94,'file'}|[{'atom',94,'name'}|[[]]]]}]]}]}]]]]}|[{'type',95,'constraint',[{'atom',95,'is_subtype'}|[[{'var',95,'Epp'}|[{'user_type',95,'epp_handle',[]}]]]]}|[{'type',96,'constraint',[{'atom',96,'is_subtype'}|[[{'var',96,'ErrorDescriptor'}|[{'type',96,'term',[]}]]]]}]]]]]]}]}],
		%% Line 101
		'spec' =
		    %% Line 101
		    [{{'open',3},[{'type',101,'bounded_fun',[{'type',101,'fun',[{'type',101,'product',[{'var',101,'FileName'}|[{'var',101,'IncludePath'}|[{'var',101,'PredefMacros'}]]]}|[{'type',102,'union',[{'type',102,'tuple',[{'atom',102,'ok'}|[{'var',102,'Epp'}]]}|[{'type',102,'tuple',[{'atom',102,'error'}|[{'var',102,'ErrorDescriptor'}]]}]]}]]}|[[{'type',103,'constraint',[{'atom',103,'is_subtype'}|[[{'var',103,'FileName'}|[{'remote_type',103,[{'atom',103,'file'}|[{'atom',103,'name'}|[[]]]]}]]]]}|[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'IncludePath'}|[{'type',104,'list',[{'ann_type',104,[{'var',104,'DirectoryName'}|[{'remote_type',104,[{'atom',104,'file'}|[{'atom',104,'name'}|[[]]]]}]]}]}]]]]}|[{'type',105,'constraint',[{'atom',105,'is_subtype'}|[[{'var',105,'PredefMacros'}|[{'user_type',105,'macros',[]}]]]]}|[{'type',106,'constraint',[{'atom',106,'is_subtype'}|[[{'var',106,'Epp'}|[{'user_type',106,'epp_handle',[]}]]]]}|[{'type',107,'constraint',[{'atom',107,'is_subtype'}|[[{'var',107,'ErrorDescriptor'}|[{'type',107,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 116
		'spec' =
		    %% Line 116
		    [{{'open',1},[{'type',116,'bounded_fun',[{'type',116,'fun',[{'type',116,'product',[{'var',116,'Options'}]}|[{'type',117,'union',[{'type',117,'tuple',[{'atom',117,'ok'}|[{'var',117,'Epp'}]]}|[{'type',117,'tuple',[{'atom',117,'ok'}|[{'var',117,'Epp'}|[{'var',117,'Extra'}]]]}|[{'type',117,'tuple',[{'atom',117,'error'}|[{'var',117,'ErrorDescriptor'}]]}]]]}]]}|[[{'type',118,'constraint',[{'atom',118,'is_subtype'}|[[{'var',118,'Options'}|[{'type',118,'list',[{'type',118,'union',[{'type',118,'tuple',[{'atom',118,'default_encoding'}|[{'ann_type',118,[{'var',118,'DefEncoding'}|[{'user_type',118,'source_encoding',[]}]]}]]}|[{'type',119,'tuple',[{'atom',119,'includes'}|[{'ann_type',119,[{'var',119,'IncludePath'}|[{'type',119,'list',[{'ann_type',119,[{'var',119,'DirectoryName'}|[{'remote_type',119,[{'atom',119,'file'}|[{'atom',119,'name'}|[[]]]]}]]}]}]]}]]}|[{'type',120,'tuple',[{'atom',120,'source_name'}|[{'ann_type',120,[{'var',120,'SourceName'}|[{'remote_type',120,[{'atom',120,'file'}|[{'atom',120,'name'}|[[]]]]}]]}]]}|[{'type',121,'tuple',[{'atom',121,'macros'}|[{'ann_type',121,[{'var',121,'PredefMacros'}|[{'user_type',121,'macros',[]}]]}]]}|[{'type',122,'tuple',[{'atom',122,'name'}|[{'ann_type',122,[{'var',122,'FileName'}|[{'remote_type',122,[{'atom',122,'file'}|[{'atom',122,'name'}|[[]]]]}]]}]]}|[{'atom',123,'extra'}]]]]]]}]}]]]]}|[{'type',124,'constraint',[{'atom',124,'is_subtype'}|[[{'var',124,'Epp'}|[{'user_type',124,'epp_handle',[]}]]]]}|[{'type',125,'constraint',[{'atom',125,'is_subtype'}|[[{'var',125,'Extra'}|[{'type',125,'list',[{'type',125,'tuple',[{'atom',125,'encoding'}|[{'type',125,'union',[{'user_type',125,'source_encoding',[]}|[{'atom',125,'none'}]]}]]}]}]]]]}|[{'type',126,'constraint',[{'atom',126,'is_subtype'}|[[{'var',126,'ErrorDescriptor'}|[{'type',126,'term',[]}]]]]}]]]]]]}]}],
		%% Line 149
		'spec' =
		    %% Line 149
		    [{{'close',1},[{'type',149,'bounded_fun',[{'type',149,'fun',[{'type',149,'product',[{'var',149,'Epp'}]}|[{'atom',149,'ok'}]]}|[[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'Epp'}|[{'user_type',150,'epp_handle',[]}]]]]}]]]}]}],
		%% Line 163
		'spec' =
		    %% Line 163
		    [{{'parse_erl_form',1},[{'type',163,'bounded_fun',[{'type',163,'fun',[{'type',163,'product',[{'var',163,'Epp'}]}|[{'type',164,'union',[{'type',164,'tuple',[{'atom',164,'ok'}|[{'var',164,'AbsForm'}]]}|[{'type',164,'tuple',[{'atom',164,'error'}|[{'var',164,'ErrorInfo'}]]}|[{'type',165,'tuple',[{'atom',165,'warning'}|[{'var',165,'WarningInfo'}]]}|[{'type',165,'tuple',[{'atom',165,'eof'}|[{'var',165,'Line'}]]}]]]]}]]}|[[{'type',166,'constraint',[{'atom',166,'is_subtype'}|[[{'var',166,'Epp'}|[{'user_type',166,'epp_handle',[]}]]]]}|[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'AbsForm'}|[{'remote_type',167,[{'atom',167,'erl_parse'}|[{'atom',167,'abstract_form'}|[[]]]]}]]]]}|[{'type',168,'constraint',[{'atom',168,'is_subtype'}|[[{'var',168,'Line'}|[{'remote_type',168,[{'atom',168,'erl_anno'}|[{'atom',168,'line'}|[[]]]]}]]]]}|[{'type',169,'constraint',[{'atom',169,'is_subtype'}|[[{'var',169,'ErrorInfo'}|[{'type',169,'union',[{'remote_type',169,[{'atom',169,'erl_scan'}|[{'atom',169,'error_info'}|[[]]]]}|[{'remote_type',169,[{'atom',169,'erl_parse'}|[{'atom',169,'error_info'}|[[]]]]}]]}]]]]}|[{'type',170,'constraint',[{'atom',170,'is_subtype'}|[[{'var',170,'WarningInfo'}|[{'user_type',170,'warning_info',[]}]]]]}]]]]]]]}]}],
		%% Line 186
		'spec' =
		    %% Line 186
		    [{{'format_error',1},[{'type',186,'bounded_fun',[{'type',186,'fun',[{'type',186,'product',[{'var',186,'ErrorDescriptor'}]}|[{'remote_type',186,[{'atom',186,'io_lib'}|[{'atom',186,'chars'}|[[]]]]}]]}|[[{'type',187,'constraint',[{'atom',187,'is_subtype'}|[[{'var',187,'ErrorDescriptor'}|[{'type',187,'term',[]}]]]]}]]]}]}],
		%% Line 235
		'spec' =
		    %% Line 235
		    [{{'parse_file',3},[{'type',235,'bounded_fun',[{'type',235,'fun',[{'type',235,'product',[{'var',235,'FileName'}|[{'var',235,'IncludePath'}|[{'var',235,'PredefMacros'}]]]}|[{'type',236,'union',[{'type',236,'tuple',[{'atom',236,'ok'}|[{'type',236,'list',[{'var',236,'Form'}]}]]}|[{'type',236,'tuple',[{'atom',236,'error'}|[{'var',236,'OpenError'}]]}]]}]]}|[[{'type',237,'constraint',[{'atom',237,'is_subtype'}|[[{'var',237,'FileName'}|[{'remote_type',237,[{'atom',237,'file'}|[{'atom',237,'name'}|[[]]]]}]]]]}|[{'type',238,'constraint',[{'atom',238,'is_subtype'}|[[{'var',238,'IncludePath'}|[{'type',238,'list',[{'ann_type',238,[{'var',238,'DirectoryName'}|[{'remote_type',238,[{'atom',238,'file'}|[{'atom',238,'name'}|[[]]]]}]]}]}]]]]}|[{'type',239,'constraint',[{'atom',239,'is_subtype'}|[[{'var',239,'Form'}|[{'type',239,'union',[{'remote_type',239,[{'atom',239,'erl_parse'}|[{'atom',239,'abstract_form'}|[[]]]]}|[{'type',239,'tuple',[{'atom',239,'error'}|[{'var',239,'ErrorInfo'}]]}|[{'type',239,'tuple',[{'atom',239,'eof'}|[{'var',239,'Line'}]]}]]]}]]]]}|[{'type',240,'constraint',[{'atom',240,'is_subtype'}|[[{'var',240,'PredefMacros'}|[{'user_type',240,'macros',[]}]]]]}|[{'type',241,'constraint',[{'atom',241,'is_subtype'}|[[{'var',241,'Line'}|[{'remote_type',241,[{'atom',241,'erl_anno'}|[{'atom',241,'line'}|[[]]]]}]]]]}|[{'type',242,'constraint',[{'atom',242,'is_subtype'}|[[{'var',242,'ErrorInfo'}|[{'type',242,'union',[{'remote_type',242,[{'atom',242,'erl_scan'}|[{'atom',242,'error_info'}|[[]]]]}|[{'remote_type',242,[{'atom',242,'erl_parse'}|[{'atom',242,'error_info'}|[[]]]]}]]}]]]]}|[{'type',243,'constraint',[{'atom',243,'is_subtype'}|[[{'var',243,'OpenError'}|[{'type',243,'union',[{'remote_type',243,[{'atom',243,'file'}|[{'atom',243,'posix'}|[[]]]]}|[{'atom',243,'badarg'}|[{'atom',243,'system_limit'}]]]}]]]]}]]]]]]]]]}]}],
		%% Line 248
		'spec' =
		    %% Line 248
		    [{{'parse_file',2},[{'type',248,'bounded_fun',[{'type',248,'fun',[{'type',248,'product',[{'var',248,'FileName'}|[{'var',248,'Options'}]]}|[{'type',249,'union',[{'type',249,'tuple',[{'atom',249,'ok'}|[{'type',249,'list',[{'var',249,'Form'}]}]]}|[{'type',249,'tuple',[{'atom',249,'ok'}|[{'type',249,'list',[{'var',249,'Form'}]}|[{'var',249,'Extra'}]]]}|[{'type',249,'tuple',[{'atom',249,'error'}|[{'var',249,'OpenError'}]]}]]]}]]}|[[{'type',250,'constraint',[{'atom',250,'is_subtype'}|[[{'var',250,'FileName'}|[{'remote_type',250,[{'atom',250,'file'}|[{'atom',250,'name'}|[[]]]]}]]]]}|[{'type',251,'constraint',[{'atom',251,'is_subtype'}|[[{'var',251,'Options'}|[{'type',251,'list',[{'type',251,'union',[{'type',251,'tuple',[{'atom',251,'includes'}|[{'ann_type',251,[{'var',251,'IncludePath'}|[{'type',251,'list',[{'ann_type',251,[{'var',251,'DirectoryName'}|[{'remote_type',251,[{'atom',251,'file'}|[{'atom',251,'name'}|[[]]]]}]]}]}]]}]]}|[{'type',252,'tuple',[{'atom',252,'source_name'}|[{'ann_type',252,[{'var',252,'SourceName'}|[{'remote_type',252,[{'atom',252,'file'}|[{'atom',252,'name'}|[[]]]]}]]}]]}|[{'type',253,'tuple',[{'atom',253,'macros'}|[{'ann_type',253,[{'var',253,'PredefMacros'}|[{'user_type',253,'macros',[]}]]}]]}|[{'type',254,'tuple',[{'atom',254,'default_encoding'}|[{'ann_type',254,[{'var',254,'DefEncoding'}|[{'user_type',254,'source_encoding',[]}]]}]]}|[{'atom',255,'extra'}]]]]]}]}]]]]}|[{'type',256,'constraint',[{'atom',256,'is_subtype'}|[[{'var',256,'Form'}|[{'type',256,'union',[{'remote_type',256,[{'atom',256,'erl_parse'}|[{'atom',256,'abstract_form'}|[[]]]]}|[{'type',256,'tuple',[{'atom',256,'error'}|[{'var',256,'ErrorInfo'}]]}|[{'type',256,'tuple',[{'atom',256,'eof'}|[{'var',256,'Line'}]]}]]]}]]]]}|[{'type',257,'constraint',[{'atom',257,'is_subtype'}|[[{'var',257,'Line'}|[{'remote_type',257,[{'atom',257,'erl_anno'}|[{'atom',257,'line'}|[[]]]]}]]]]}|[{'type',258,'constraint',[{'atom',258,'is_subtype'}|[[{'var',258,'ErrorInfo'}|[{'type',258,'union',[{'remote_type',258,[{'atom',258,'erl_scan'}|[{'atom',258,'error_info'}|[[]]]]}|[{'remote_type',258,[{'atom',258,'erl_parse'}|[{'atom',258,'error_info'}|[[]]]]}]]}]]]]}|[{'type',259,'constraint',[{'atom',259,'is_subtype'}|[[{'var',259,'Extra'}|[{'type',259,'list',[{'type',259,'tuple',[{'atom',259,'encoding'}|[{'type',259,'union',[{'user_type',259,'source_encoding',[]}|[{'atom',259,'none'}]]}]]}]}]]]]}|[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'OpenError'}|[{'type',260,'union',[{'remote_type',260,[{'atom',260,'file'}|[{'atom',260,'posix'}|[[]]]]}|[{'atom',260,'badarg'}|[{'atom',260,'system_limit'}]]]}]]]]}]]]]]]]]]}]}],
		%% Line 276
		'spec' =
		    %% Line 276
		    [{{'parse_file',1},[{'type',276,'bounded_fun',[{'type',276,'fun',[{'type',276,'product',[{'var',276,'Epp'}]}|[{'type',276,'list',[{'var',276,'Form'}]}]]}|[[{'type',277,'constraint',[{'atom',277,'is_subtype'}|[[{'var',277,'Epp'}|[{'user_type',277,'epp_handle',[]}]]]]}|[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'Form'}|[{'type',278,'union',[{'remote_type',278,[{'atom',278,'erl_parse'}|[{'atom',278,'abstract_form'}|[[]]]]}|[{'type',278,'tuple',[{'atom',278,'error'}|[{'var',278,'ErrorInfo'}]]}|[{'type',279,'tuple',[{'atom',279,'warning'}|[{'var',279,'WarningInfo'}]]}|[{'type',279,'tuple',[{'atom',279,'eof'}|[{'var',279,'Line'}]]}]]]]}]]]]}|[{'type',280,'constraint',[{'atom',280,'is_subtype'}|[[{'var',280,'Line'}|[{'remote_type',280,[{'atom',280,'erl_anno'}|[{'atom',280,'line'}|[[]]]]}]]]]}|[{'type',281,'constraint',[{'atom',281,'is_subtype'}|[[{'var',281,'ErrorInfo'}|[{'type',281,'union',[{'remote_type',281,[{'atom',281,'erl_scan'}|[{'atom',281,'error_info'}|[[]]]]}|[{'remote_type',281,[{'atom',281,'erl_parse'}|[{'atom',281,'error_info'}|[[]]]]}]]}]]]]}|[{'type',282,'constraint',[{'atom',282,'is_subtype'}|[[{'var',282,'WarningInfo'}|[{'user_type',282,'warning_info',[]}]]]]}]]]]]]]}]}],
		%% Line 296
		'spec' =
		    %% Line 296
		    [{{'default_encoding',0},[{'type',296,'fun',[{'type',296,'product',[]}|[{'user_type',296,'source_encoding',[]}]]}]}],
		%% Line 301
		'spec' =
		    %% Line 301
		    [{{'encoding_to_string',1},[{'type',301,'bounded_fun',[{'type',301,'fun',[{'type',301,'product',[{'var',301,'Encoding'}]}|[{'type',301,'string',[]}]]}|[[{'type',302,'constraint',[{'atom',302,'is_subtype'}|[[{'var',302,'Encoding'}|[{'user_type',302,'source_encoding',[]}]]]]}]]]}]}],
		%% Line 307
		'spec' =
		    %% Line 307
		    [{{'read_encoding',1},[{'type',307,'bounded_fun',[{'type',307,'fun',[{'type',307,'product',[{'var',307,'FileName'}]}|[{'type',307,'union',[{'user_type',307,'source_encoding',[]}|[{'atom',307,'none'}]]}]]}|[[{'type',308,'constraint',[{'atom',308,'is_subtype'}|[[{'var',308,'FileName'}|[{'remote_type',308,[{'atom',308,'file'}|[{'atom',308,'name'}|[[]]]]}]]]]}]]]}]}],
		%% Line 313
		'spec' =
		    %% Line 313
		    [{{'read_encoding',2},[{'type',313,'bounded_fun',[{'type',313,'fun',[{'type',313,'product',[{'var',313,'FileName'}|[{'var',313,'Options'}]]}|[{'type',313,'union',[{'user_type',313,'source_encoding',[]}|[{'atom',313,'none'}]]}]]}|[[{'type',314,'constraint',[{'atom',314,'is_subtype'}|[[{'var',314,'FileName'}|[{'remote_type',314,[{'atom',314,'file'}|[{'atom',314,'name'}|[[]]]]}]]]]}|[{'type',315,'constraint',[{'atom',315,'is_subtype'}|[[{'var',315,'Options'}|[{'type',315,'list',[{'var',315,'Option'}]}]]]]}|[{'type',316,'constraint',[{'atom',316,'is_subtype'}|[[{'var',316,'Option'}|[{'type',316,'tuple',[{'atom',316,'in_comment_only'}|[{'type',316,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 329
		'spec' =
		    %% Line 329
		    [{{'set_encoding',1},[{'type',329,'bounded_fun',[{'type',329,'fun',[{'type',329,'product',[{'var',329,'File'}]}|[{'type',329,'union',[{'user_type',329,'source_encoding',[]}|[{'atom',329,'none'}]]}]]}|[[{'type',330,'constraint',[{'atom',330,'is_subtype'}|[[{'var',330,'File'}|[{'remote_type',330,[{'atom',330,'io'}|[{'atom',330,'device'}|[[]]]]}]]]]}]]]}]}],
		%% Line 335
		'spec' =
		    %% Line 335
		    [{{'set_encoding',2},[{'type',335,'bounded_fun',[{'type',335,'fun',[{'type',335,'product',[{'var',335,'File'}|[{'var',335,'Default'}]]}|[{'type',335,'union',[{'user_type',335,'source_encoding',[]}|[{'atom',335,'none'}]]}]]}|[[{'type',336,'constraint',[{'atom',336,'is_subtype'}|[[{'var',336,'Default'}|[{'user_type',336,'source_encoding',[]}]]]]}|[{'type',337,'constraint',[{'atom',337,'is_subtype'}|[[{'var',337,'File'}|[{'remote_type',337,[{'atom',337,'io'}|[{'atom',337,'device'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 348
		'spec' =
		    %% Line 348
		    [{{'read_encoding_from_binary',1},[{'type',348,'bounded_fun',[{'type',348,'fun',[{'type',348,'product',[{'var',348,'Binary'}]}|[{'type',348,'union',[{'user_type',348,'source_encoding',[]}|[{'atom',348,'none'}]]}]]}|[[{'type',349,'constraint',[{'atom',349,'is_subtype'}|[[{'var',349,'Binary'}|[{'type',349,'binary',[]}]]]]}]]]}]}],
		%% Line 357
		'spec' =
		    %% Line 357
		    [{{'read_encoding_from_binary',2},[{'type',357,'bounded_fun',[{'type',357,'fun',[{'type',357,'product',[{'var',357,'Binary'}|[{'var',357,'Options'}]]}|[{'type',358,'union',[{'user_type',358,'source_encoding',[]}|[{'atom',358,'none'}]]}]]}|[[{'type',359,'constraint',[{'atom',359,'is_subtype'}|[[{'var',359,'Binary'}|[{'type',359,'binary',[]}]]]]}|[{'type',360,'constraint',[{'atom',360,'is_subtype'}|[[{'var',360,'Options'}|[{'type',360,'list',[{'var',360,'Option'}]}]]]]}|[{'type',361,'constraint',[{'atom',361,'is_subtype'}|[[{'var',361,'Option'}|[{'type',361,'tuple',[{'atom',361,'in_comment_only'}|[{'type',361,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 379
		'spec' =
		    %% Line 379
		    [{{'read_encoding_from_file',2},[{'type',379,'bounded_fun',[{'type',379,'fun',[{'type',379,'product',[{'var',379,'File'}|[{'var',379,'InComment'}]]}|[{'type',379,'union',[{'user_type',379,'source_encoding',[]}|[{'atom',379,'none'}]]}]]}|[[{'type',380,'constraint',[{'atom',380,'is_subtype'}|[[{'var',380,'File'}|[{'remote_type',380,[{'atom',380,'io'}|[{'atom',380,'device'}|[[]]]]}]]]]}|[{'type',381,'constraint',[{'atom',381,'is_subtype'}|[[{'var',381,'InComment'}|[{'type',381,'boolean',[]}]]]]}]]]]}]}]]
'open'/2 =
    %% Line 98
    ( fun (_0,_1) ->
	  %% Line 99
	  apply 'open'/3
	      (_0, _1, [])
      -| [{'function',{'open',2}}] )
'open'/3 =
    %% Line 109
    ( fun (_0,_1,_2) ->
	  %% Line 110
	  apply 'internal_open'/2
	      ([{'name',_0}|[{'includes',_1}|[{'macros',_2}|[]]]], {'epp','undefined',1,0,[],[],[],[],[],~{}~,~{}~,'utf8','false',[]})
      -| [{'function',{'open',3}}] )
'open'/5 =
    %% Line 112
    ( fun (_0,_1,_2,_3,_4) ->
	  %% Line 113
	  apply 'internal_open'/2
	      ([{'name',_0}|[{'includes',_3}|[{'macros',_4}|[]]]], %% Line 114
								   {'epp',_1,_2,0,[],[],[],[],[],~{}~,~{}~,'utf8','true',[]})
      -| [{'function',{'open',5}}] )
'open'/1 =
    %% Line 128
    ( fun (_0) ->
	  %% Line 129
	  apply 'internal_open'/2
	      (( _0
		 -| [{'function',{'open',1}}] ), {'epp','undefined',1,0,[],[],[],[],[],~{}~,~{}~,'utf8','false',[]})
      -| [{'function',{'open',1}}] )
'internal_open'/2 =
    %% Line 131
    ( fun (_0,_1) ->
	  %% Line 132
	  case call 'proplists':'get_value'
		   ('name', _0) of
	    %% Line 133
	    <'undefined'> when 'true' ->
		%% Line 134
		call 'erlang':'error'
		    ('badarg')
	    %% Line 135
	    <Name> when 'true' ->
		let <Self> =
		    call %% Line 136
			 'erlang':%% Line 136
				  'self'
			()
		in  let <_3> =
			fun () ->
			    %% Line 137
			    apply 'server'/4
				(Self, Name, _0, _1)
		    in  let <Epp> =
			    call %% Line 137
				 'erlang':%% Line 137
					  'spawn'
				(_3)
			in  %% Line 138
			    case apply 'epp_request'/1
				     (Epp) of
			      %% Line 139
			      <{'ok',Pid,Encoding}> when 'true' ->
				  %% Line 140
				  case call 'proplists':'get_bool'
					   ('extra', _0) of
				    %% Line 141
				    <'true'> when 'true' ->
					{'ok',Pid,[{'encoding',Encoding}|[]]}
				    %% Line 142
				    <'false'> when 'true' ->
					{'ok',Pid}
				    ( <_5> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_5})
				      -| ['compiler_generated'] )
				  end
			      %% Line 144
			      <Other> when 'true' ->
				  %% Line 145
				  Other
			    end
	  end
      -| [{'function',{'internal_open',2}}] )
'close'/1 =
    %% Line 152
    ( fun (_0) ->
	  let <Ref> =
	      call %% Line 155
		   'erlang':%% Line 155
			    'monitor'
		  (%% Line 155
		   'process', ( _0
				-| [{'function',{'close',1}}] ))
	  in  let <R> =
		  apply %% Line 156
			'epp_request'/2
		      (( _0
			 -| [{'function',{'close',1}}] ), %% Line 156
							  'close')
	      in  do  ( letrec
			    'recv$^0'/0 =
				fun () ->
				    let <_10,_8> =
					primop 'recv_peek_message'
					    ()
				    in  case _10 of
					  <'true'> when 'true' ->
					      %% Line 157
					      case _8 of
						<{'DOWN',_4,_5,_6,_7}>
						    when call 'erlang':'=:='
							  (_4,
							   Ref) ->
						    primop 'remove_message'
							()
						( <Other> when 'true' ->
						      do  primop 'recv_next'
							      ()
							  ( apply 'recv$^0'/0
								()
							    -| ['dialyzer_ignore'] )
						  -| ['compiler_generated','dialyzer_ignore'] )
					      end
					  ( <'false'> when 'true' ->
						let <_9> =
						    primop 'recv_wait_timeout'
							('infinity')
						in  case _9 of
						      <'true'> when 'true' ->
							  primop 'timeout'
							      ()
						      ( <'false'> when 'true' ->
							    ( apply 'recv$^0'/0
								  ()
							      -| ['dialyzer_ignore'] )
							-| ['dialyzer_ignore'] )
						    end
					    -| ['dialyzer_ignore'] )
					end
			in  ( apply 'recv$^0'/0
				  ()
			      -| ['dialyzer_ignore'] )
			-| ['letrec_goto'] )
		      %% Line 158
		      R
      -| [{'function',{'close',1}}] )
'scan_erl_form'/1 =
    %% Line 160
    ( fun (_0) ->
	  %% Line 161
	  apply 'epp_request'/2
	      (( _0
		 -| [{'function',{'scan_erl_form',1}}] ), 'scan_erl_form')
      -| [{'function',{'scan_erl_form',1}}] )
'parse_erl_form'/1 =
    %% Line 172
    ( fun (_0) ->
	  %% Line 173
	  case apply 'epp_request'/2
		   (( _0
		      -| [{'function',{'parse_erl_form',1}}] ), 'scan_erl_form') of
	    %% Line 174
	    <{'ok',Toks}> when 'true' ->
		%% Line 175
		call 'erl_parse':'parse_form'
		    (Toks)
	    %% Line 176
	    <Other> when 'true' ->
		%% Line 177
		Other
	  end
      -| [{'function',{'parse_erl_form',1}}] )
'macro_defs'/1 =
    %% Line 180
    ( fun (_0) ->
	  %% Line 181
	  apply 'epp_request'/2
	      (( _0
		 -| [{'function',{'macro_defs',1}}] ), 'macro_defs')
      -| [{'function',{'macro_defs',1}}] )
'format_error'/1 =
    %% Line 189
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'format_error',1}}] ) of
	      <'cannot_parse'> when 'true' ->
		  %% Line 190
		  call 'io_lib':'format'
		      ([99|[97|[110|[110|[111|[116|[32|[112|[97|[114|[115|[101|[32|[102|[105|[108|[101|[44|[32|[103|[105|[118|[105|[110|[103|[32|[117|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	      %% Line 191
	      <{'bad',W}> when 'true' ->
		  %% Line 192
		  call 'io_lib':'format'
		      ([98|[97|[100|[108|[121|[32|[102|[111|[114|[109|[101|[100|[32|[39|[126|[115|[39]]]]]]]]]]]]]]]]], [W|[]])
	      %% Line 193
	      <'missing_parenthesis'> when 'true' ->
		  %% Line 194
		  call 'io_lib':'format'
		      ([98|[97|[100|[108|[121|[32|[102|[111|[114|[109|[101|[100|[32|[100|[101|[102|[105|[110|[101|[58|[32|[109|[105|[115|[115|[105|[110|[103|[32|[99|[108|[111|[115|[105|[110|[103|[32|[114|[105|[103|[104|[116|[32|[112|[97|[114|[101|[110|[116|[104|[101|[115|[105|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	      %% Line 195
	      <'premature_end'> when 'true' ->
		  %% Line 196
		  [112|[114|[101|[109|[97|[116|[117|[114|[101|[32|[101|[110|[100]]]]]]]]]]]]]
	      %% Line 197
	      <{'call',What}> when 'true' ->
		  %% Line 198
		  call 'io_lib':'format'
		      ([105|[108|[108|[101|[103|[97|[108|[32|[109|[97|[99|[114|[111|[32|[99|[97|[108|[108|[32|[39|[126|[116|[115|[39]]]]]]]]]]]]]]]]]]]]]]]], [What|[]])
	      %% Line 199
	      <{'undefined',M,'none'}> when 'true' ->
		  %% Line 200
		  call 'io_lib':'format'
		      ([117|[110|[100|[101|[102|[105|[110|[101|[100|[32|[109|[97|[99|[114|[111|[32|[39|[126|[116|[115|[39]]]]]]]]]]]]]]]]]]]]], [M|[]])
	      %% Line 201
	      <{'undefined',M,A}> when 'true' ->
		  %% Line 202
		  call 'io_lib':'format'
		      ([117|[110|[100|[101|[102|[105|[110|[101|[100|[32|[109|[97|[99|[114|[111|[32|[39|[126|[116|[115|[47|[126|[112|[39]]]]]]]]]]]]]]]]]]]]]]]], [M|[A|[]]])
	      %% Line 203
	      <{'depth',What}> when 'true' ->
		  %% Line 204
		  call 'io_lib':'format'
		      ([126|[115|[32|[116|[111|[111|[32|[100|[101|[101|[112]]]]]]]]]]], [What|[]])
	      %% Line 205
	      <{'mismatch',M}> when 'true' ->
		  %% Line 206
		  call 'io_lib':'format'
		      ([97|[114|[103|[117|[109|[101|[110|[116|[32|[109|[105|[115|[109|[97|[116|[99|[104|[32|[102|[111|[114|[32|[109|[97|[99|[114|[111|[32|[39|[126|[116|[115|[39]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [M|[]])
	      %% Line 207
	      <{'arg_error',M}> when 'true' ->
		  %% Line 208
		  call 'io_lib':'format'
		      ([98|[97|[100|[108|[121|[32|[102|[111|[114|[109|[101|[100|[32|[97|[114|[103|[117|[109|[101|[110|[116|[32|[102|[111|[114|[32|[109|[97|[99|[114|[111|[32|[39|[126|[116|[115|[39]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [M|[]])
	      %% Line 209
	      <{'redefine',M}> when 'true' ->
		  %% Line 210
		  call 'io_lib':'format'
		      ([114|[101|[100|[101|[102|[105|[110|[105|[110|[103|[32|[109|[97|[99|[114|[111|[32|[39|[126|[116|[115|[39]]]]]]]]]]]]]]]]]]]]]], [M|[]])
	      %% Line 211
	      <{'redefine_predef',M}> when 'true' ->
		  %% Line 212
		  call 'io_lib':'format'
		      ([114|[101|[100|[101|[102|[105|[110|[105|[110|[103|[32|[112|[114|[101|[100|[101|[102|[105|[110|[101|[100|[32|[109|[97|[99|[114|[111|[32|[39|[126|[115|[39]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [M|[]])
	      %% Line 213
	      <{'circular',M,'none'}> when 'true' ->
		  %% Line 214
		  call 'io_lib':'format'
		      ([99|[105|[114|[99|[117|[108|[97|[114|[32|[109|[97|[99|[114|[111|[32|[39|[126|[116|[115|[39]]]]]]]]]]]]]]]]]]]], [M|[]])
	      %% Line 215
	      <{'circular',M,A}> when 'true' ->
		  %% Line 216
		  call 'io_lib':'format'
		      ([99|[105|[114|[99|[117|[108|[97|[114|[32|[109|[97|[99|[114|[111|[32|[39|[126|[116|[115|[47|[126|[112|[39]]]]]]]]]]]]]]]]]]]]]]], [M|[A|[]]])
	      %% Line 217
	      <{'include',W,F}> when 'true' ->
		  %% Line 218
		  call 'io_lib':'format'
		      ([99|[97|[110|[39|[116|[32|[102|[105|[110|[100|[32|[105|[110|[99|[108|[117|[100|[101|[32|[126|[115|[32|[34|[126|[116|[115|[34]]]]]]]]]]]]]]]]]]]]]]]]]]], [W|[F|[]]])
	      %% Line 219
	      <{'illegal',How,What}> when 'true' ->
		  %% Line 220
		  call 'io_lib':'format'
		      ([126|[115|[32|[39|[45|[126|[115|[39]]]]]]]], [How|[What|[]]])
	      %% Line 221
	      <{'illegal_function',Macro}> when 'true' ->
		  %% Line 222
		  call 'io_lib':'format'
		      ([63|[126|[115|[32|[99|[97|[110|[32|[111|[110|[108|[121|[32|[98|[101|[32|[117|[115|[101|[100|[32|[119|[105|[116|[104|[105|[110|[32|[97|[32|[102|[117|[110|[99|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Macro|[]])
	      %% Line 223
	      <{'illegal_function_usage',Macro}> when 'true' ->
		  %% Line 224
		  call 'io_lib':'format'
		      ([63|[126|[115|[32|[109|[117|[115|[116|[32|[110|[111|[116|[32|[98|[101|[103|[105|[110|[32|[97|[32|[102|[111|[114|[109]]]]]]]]]]]]]]]]]]]]]]]]], [Macro|[]])
	      %% Line 225
	      <'elif_after_else'> when 'true' ->
		  %% Line 226
		  [39|[101|[108|[105|[102|[39|[32|[102|[111|[108|[108|[111|[119|[105|[110|[103|[32|[39|[101|[108|[115|[101|[39]]]]]]]]]]]]]]]]]]]]]]]
	      %% Line 227
	      <{'NYI',What}> when 'true' ->
		  %% Line 228
		  call 'io_lib':'format'
		      ([110|[111|[116|[32|[121|[101|[116|[32|[105|[109|[112|[108|[101|[109|[101|[110|[116|[101|[100|[32|[39|[126|[115|[39]]]]]]]]]]]]]]]]]]]]]]]], [What|[]])
	      %% Line 229
	      <{'error',Term}> when 'true' ->
		  %% Line 230
		  call 'io_lib':'format'
		      ([45|[101|[114|[114|[111|[114|[40|[126|[116|[112|[41|[46]]]]]]]]]]]], [Term|[]])
	      %% Line 231
	      <{'warning',Term}> when 'true' ->
		  %% Line 232
		  call 'io_lib':'format'
		      ([45|[119|[97|[114|[110|[105|[110|[103|[40|[126|[116|[112|[41|[46]]]]]]]]]]]]]], [Term|[]])
	      %% Line 233
	      <E> when 'true' ->
		  call 'file':'format_error'
		      (E)
	    end
	    -| [{'function',{'format_error',1}}] )
      -| [{'function',{'format_error',1}}] )
'parse_file'/3 =
    %% Line 245
    ( fun (_0,_1,_2) ->
	  %% Line 246
	  apply 'parse_file'/2
	      (_0, [{'includes',_1}|[{'macros',_2}|[]]])
      -| [{'function',{'parse_file',3}}] )
'parse_file'/2 =
    %% Line 262
    ( fun (_0,_1) ->
	  %% Line 263
	  case apply 'internal_open'/2
		   ([{'name',_0}|_1], {'epp','undefined',1,0,[],[],[],[],[],~{}~,~{}~,'utf8','false',[]}) of
	    %% Line 264
	    <{'ok',Epp}> when 'true' ->
		let <Forms> =
		    apply %% Line 265
			  'parse_file'/1
			(%% Line 265
			 Epp)
		in  do  %% Line 266
			apply 'close'/1
			    (Epp)
			%% Line 267
			{'ok',Forms}
	    %% Line 268
	    <{'ok',Epp,Extra}> when 'true' ->
		let <Forms> =
		    apply %% Line 269
			  'parse_file'/1
			(%% Line 269
			 Epp)
		in  do  %% Line 270
			apply 'close'/1
			    (Epp)
			%% Line 271
			{'ok',Forms,Extra}
	    %% Line 272
	    <_@r0 = {'error',E}> when 'true' ->
		%% Line 273
		_@r0
	    ( <_4> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_4})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'parse_file',2}}] )
'parse_file'/1 =
    %% Line 284
    ( fun (_0) ->
	  %% Line 285
	  case apply 'parse_erl_form'/1
		   (( _0
		      -| [{'function',{'parse_file',1}}] )) of
	    %% Line 286
	    <{'ok',Form}> when 'true' ->
		let <_1> =
		    apply %% Line 287
			  'parse_file'/1
			(( _0
			   -| [{'function',{'parse_file',1}}] ))
		in  %% Line 287
		    [Form|_1]
	    %% Line 288
	    <_@r0 = {'error',E}> when 'true' ->
		let <_2> =
		    apply %% Line 289
			  'parse_file'/1
			(( _0
			   -| [{'function',{'parse_file',1}}] ))
		in  %% Line 289
		    [_@r0|_2]
	    %% Line 290
	    <_@r1 = {'warning',W}> when 'true' ->
		let <_3> =
		    apply %% Line 291
			  'parse_file'/1
			(( _0
			   -| [{'function',{'parse_file',1}}] ))
		in  %% Line 291
		    [_@r1|_3]
	    %% Line 292
	    <_@r2 = {'eof',Location}> when 'true' ->
		%% Line 293
		[_@r2|[]]
	    ( <_4> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_4})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'parse_file',1}}] )
'default_encoding'/0 =
    %% Line 298
    ( fun () ->
	  %% Line 299
	  'utf8'
      -| [{'function',{'default_encoding',0}}] )
'encoding_to_string'/1 =
    %% Line 304
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'encoding_to_string',1}}] ) of
	      <'latin1'> when 'true' ->
		  [99|[111|[100|[105|[110|[103|[58|[32|[108|[97|[116|[105|[110|[45|[49]]]]]]]]]]]]]]]
	      %% Line 305
	      <'utf8'> when 'true' ->
		  [99|[111|[100|[105|[110|[103|[58|[32|[117|[116|[102|[45|[56]]]]]]]]]]]]]
	      ( <_1> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_1})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'encoding_to_string',1}}] )
      -| [{'function',{'encoding_to_string',1}}] )
'read_encoding'/1 =
    %% Line 310
    ( fun (_0) ->
	  %% Line 311
	  apply 'read_encoding'/2
	      (( _0
		 -| [{'function',{'read_encoding',1}}] ), [])
      -| [{'function',{'read_encoding',1}}] )
'read_encoding'/2 =
    %% Line 318
    ( fun (_0,_1) ->
	  let <InComment> =
	      call %% Line 319
		   'proplists':%% Line 319
			       'get_value'
		  (%% Line 319
		   'in_comment_only', _1, %% Line 319
					  'true')
	  in  %% Line 320
	      case call 'file':'open'
		       (_0, ['read']) of
		%% Line 321
		<{'ok',File}> when 'true' ->
		    %% Line 322
		    letrec
			'after$^0'/0 =
			    fun () ->
				let <_11> =
				    call %% Line 323
					 'file':%% Line 323
						'close'
					(%% Line 323
					 File)
				in  %% Line 323
				    case _11 of
				      <'ok'> when 'true' ->
					  ( _11
					    -| ['compiler_generated'] )
				      ( <_3> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_3})
					-| ['compiler_generated'] )
				    end
		    in  try
			    apply 'read_encoding_from_file'/2
				(File, InComment)
			of <_4> ->
			    do  ( apply 'after$^0'/0
				      ()
				  -| ['compiler_generated'] )
				_4
			catch <_7,_6,_5> ->
			    do  ( apply 'after$^0'/0
				      ()
				  -| ['compiler_generated'] )
				primop 'raise'
				    (_5, _6)
		%% Line 325
		<_X_Error> when 'true' ->
		    %% Line 326
		    'none'
	      end
      -| [{'function',{'read_encoding',2}}] )
'set_encoding'/1 =
    %% Line 332
    ( fun (_0) ->
	  %% Line 333
	  apply 'set_encoding'/2
	      (( _0
		 -| [{'function',{'set_encoding',1}}] ), 'utf8')
      -| [{'function',{'set_encoding',1}}] )
'set_encoding'/2 =
    %% Line 339
    ( fun (_0,_1) ->
	  let <Encoding> =
	      apply %% Line 340
		    'read_encoding_from_file'/2
		  (_0, %% Line 340
		       'true')
	  in  let <_4> =
		  case %% Line 341
		       Encoding of
		    %% Line 342
		    <'none'> when 'true' ->
			_1
		    %% Line 343
		    <_9>
			when call 'erlang':'=:='
			      (Encoding,
			       Encoding) ->
			Encoding
		    ( <_3> when 'true' ->
			  %% Line 341
			  primop 'match_fail'
			      ({'case_clause',_3})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 345
		  case call 'io':'setopts'
			   (_0, [{'encoding',_4}|[]]) of
		    <'ok'> when 'true' ->
			%% Line 346
			Encoding
		    ( <_6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_6})
		      -| ['compiler_generated'] )
		  end
      -| [{'function',{'set_encoding',2}}] )
'read_encoding_from_binary'/1 =
    %% Line 354
    ( fun (_0) ->
	  %% Line 355
	  apply 'read_encoding_from_binary'/2
	      (( _0
		 -| [{'function',{'read_encoding_from_binary',1}}] ), [])
      -| [{'function',{'read_encoding_from_binary',1}}] )
'read_encoding_from_binary'/2 =
    %% Line 363
    ( fun (_0,_1) ->
	  let <InComment> =
	      call %% Line 364
		   'proplists':%% Line 364
			       'get_value'
		  (%% Line 364
		   'in_comment_only', _1, %% Line 364
					  'true')
	  in  %% Line 365
	      try
		  let <_3> =
		      apply %% Line 366
			    'fake_reader'/1
			  (%% Line 366
			   0)
		  in  %% Line 366
		      apply 'com_nl'/4
			  (_0, _3, 0, InComment)
	      of <_4> ->
		  _4
	      catch <_7,_6,_5> ->
		  %% Line 368
		  case <_7,_6,_5> of
		    <( 'throw'
		       -| ['compiler_generated'] ),( 'no'
						     -| ['compiler_generated'] ),_10> when 'true' ->
			%% Line 369
			'none'
		    ( <_11,_12,_13> when 'true' ->
			  primop 'raise'
			      (_13, _12)
		      -| ['compiler_generated'] )
		  end
      -| [{'function',{'read_encoding_from_binary',2}}] )
'fake_reader'/1 =
    %% Line 372
    ( fun (_0) ->
	  %% Line 373
	  ( fun () ->
		case <> of
		  <>
		      when call 'erlang':'=:='
			    (( _0
			       -| [{'function',{'fake_reader',1}}] ),
			     16) ->
		      %% Line 374
		      call 'erlang':'throw'
			  ('no')
		  %% Line 375
		  <> when 'true' ->
		      let <_1> =
			  call %% Line 376
			       'erlang':%% Line 376
					'+'
			      (( _0
				 -| [{'function',{'fake_reader',1}}] ), %% Line 376
									1)
		      in  let <_2> =
			      apply %% Line 376
				    'fake_reader'/1
				  (_1)
			  in  %% Line 376
			      {#{}#,_2}
		end
	    -| [{'id',{0,0,'-fake_reader/1-fun-0-'}}] )
      -| [{'function',{'fake_reader',1}}] )
'read_encoding_from_file'/2 =
    %% Line 383
    ( fun (_0,_1) ->
	  %% Line 384
	  case call 'file':'position'
		   (_0, 'cur') of
	    <{'ok',Pos0}> when 'true' ->
		let <Opts> =
		    call %% Line 385
			 'io':%% Line 385
			      'getopts'
			(_0)
		in  let <Encoding0> =
			call %% Line 386
			     'lists':%% Line 386
				     'keyfind'
			    (%% Line 386
			     'encoding', %% Line 386
					 1, %% Line 386
					    Opts)
		    in  let <Binary0> =
			    call %% Line 387
				 'lists':%% Line 387
					 'keyfind'
				(%% Line 387
				 'binary', %% Line 387
					   1, %% Line 387
					      Opts)
			in  %% Line 388
			    case call 'io':'setopts'
				     (_0, ['binary'|[{'encoding','latin1'}]]) of
			      <'ok'> when 'true' ->
				  %% Line 389
				  letrec
				      'after$^0'/0 =
					  fun () ->
					      %% Line 396
					      case call 'file':'position'
						       (_0, Pos0) of
						<{'ok',_21}>
						    when call 'erlang':'=:='
							  (_21,
							   Pos0) ->
						    let <_22> =
							call %% Line 397
							     'io':%% Line 397
								  'setopts'
							    (_0, %% Line 397
								 [Binary0|[Encoding0|[]]])
						    in  %% Line 397
							case _22 of
							  <'ok'> when 'true' ->
							      ( _22
								-| ['compiler_generated'] )
							  ( <_14> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_14})
							    -| ['compiler_generated'] )
							end
						( <_13> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_13})
						  -| ['compiler_generated'] )
					      end
				  in  try
					  try
					      let <_7> =
						  apply %% Line 390
							'reader'/2
						      (_0, %% Line 390
							   0)
					      in  %% Line 390
						  case apply _7
							   () of
						    <{B,Fun}> when 'true' ->
							%% Line 391
							apply 'com_nl'/4
							    (B, Fun, 0, _1)
						    ( <_8> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_8})
						      -| ['compiler_generated'] )
						  end
					  of <_9> ->
					      _9
					  catch <_12,_11,_10> ->
					      %% Line 393
					      case <_12,_11,_10> of
						<( 'throw'
						   -| ['compiler_generated'] ),( 'no'
										 -| ['compiler_generated'] ),_23> when 'true' ->
						    %% Line 394
						    'none'
						( <_24,_25,_26> when 'true' ->
						      primop 'raise'
							  (_26, _25)
						  -| ['compiler_generated'] )
					      end
				      of <_15> ->
					  do  ( apply 'after$^0'/0
						    ()
						-| ['compiler_generated'] )
					      _15
				      catch <_18,_17,_16> ->
					  do  ( apply 'after$^0'/0
						    ()
						-| ['compiler_generated'] )
					      primop 'raise'
						  (_16, _17)
			      ( <_6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_6})
				-| ['compiler_generated'] )
			    end
	    ( <_2> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_2})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'read_encoding_from_file',2}}] )
'reader'/2 =
    %% Line 400
    ( fun (_0,_1) ->
	  %% Line 401
	  ( fun () ->
		case <> of
		  <>
		      when call 'erlang':'=:='
			    (_1,
			     16) ->
		      %% Line 402
		      call 'erlang':'throw'
			  ('no')
		  %% Line 403
		  <> when 'true' ->
		      %% Line 404
		      case call 'file':'read'
			       (_0, 32) of
			%% Line 405
			<'eof'> when 'true' ->
			    let <_2> =
				call %% Line 406
				     'erlang':%% Line 406
					      '+'
				    (_1, %% Line 406
					 1)
			    in  let <_3> =
				    apply %% Line 406
					  'reader'/2
					(_0, _2)
				in  %% Line 406
				    {#{}#,_3}
			%% Line 407
			<{'ok',Bin}> when 'true' ->
			    let <_4> =
				call %% Line 408
				     'erlang':%% Line 408
					      '+'
				    (_1, %% Line 408
					 1)
			    in  let <_5> =
				    apply %% Line 408
					  'reader'/2
					(_0, _4)
				in  %% Line 408
				    {Bin,_5}
			%% Line 409
			<{'error',_9}> when 'true' ->
			    %% Line 410
			    call 'erlang':'throw'
				('no')
			( <_6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_6})
			  -| ['compiler_generated'] )
		      end
		end
	    -| [{'id',{0,0,'-reader/2-fun-0-'}}] )
      -| [{'function',{'reader',2}}] )
'com_nl'/4 =
    %% Line 414
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <_8,_9,2,_10> when 'true' ->
		  %% Line 415
		  call 'erlang':'throw'
		      ('no')
	      %% Line 416
	      <B,Fun,N,Com = 'false'> when 'true' ->
		  %% Line 417
		  apply 'com_c'/4
		      (B, Fun, N, Com)
	      %% Line 418
	      <B,Fun,N,Com = 'true'> when 'true' ->
		  %% Line 419
		  apply 'com'/4
		      (B, Fun, N, Com)
	      ( <_7,_6,_5,_4> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_7,_6,_5,_4})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'com_nl',4}}] )
      -| [{'function',{'com_nl',4}}] )
'com'/4 =
    %% Line 421
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <#{#<10>(8,1,'integer',['unsigned'|['big']]),
		 #<B>(( 'all'
			-| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' ->
		  let <_4> =
		      call %% Line 422
			   'erlang':%% Line 422
				    '+'
			  (%% Line 422
			   N, %% Line 422
			      1)
		  in  %% Line 422
		      apply 'com_nl'/4
			  (B, Fun, _4, Com)
	      %% Line 423
	      <#{#<37>(8,1,'integer',['unsigned'|['big']]),
		 #<B>(( 'all'
			-| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' ->
		  %% Line 424
		  apply 'com_c'/4
		      (B, Fun, N, Com)
	      %% Line 425
	      <#{#<_10>(1,8,'integer',['unsigned'|['big']]),
		 #<B>(( 'all'
			-| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' ->
		  %% Line 426
		  apply 'com'/4
		      (B, Fun, N, Com)
	      %% Line 427
	      <#{}#,Fun,N,Com> when 'true' ->
		  %% Line 428
		  case apply Fun
			   () of
		    <{B,Fun1}> when 'true' ->
			%% Line 429
			apply 'com'/4
			    (B, Fun1, N, Com)
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5})
		      -| ['compiler_generated'] )
		  end
	      ( <_9,_8,_7,_6> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_9,_8,_7,_6})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'com',4}}] )
      -| [{'function',{'com',4}}] )
'com_c'/4 =
    %% Line 431
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <#{#<99>(8,1,'integer',['unsigned'|['big']]),
		 #<B>(( 'all'
			-| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' ->
		  %% Line 432
		  apply 'com_oding'/4
		      (B, Fun, N, Com)
	      %% Line 433
	      <#{#<10>(8,1,'integer',['unsigned'|['big']]),
		 #<B>(( 'all'
			-| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' ->
		  let <_4> =
		      call %% Line 434
			   'erlang':%% Line 434
				    '+'
			  (%% Line 434
			   N, %% Line 434
			      1)
		  in  %% Line 434
		      apply 'com_nl'/4
			  (B, Fun, _4, Com)
	      %% Line 435
	      <#{#<_10>(1,8,'integer',['unsigned'|['big']]),
		 #<B>(( 'all'
			-| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' ->
		  %% Line 436
		  apply 'com_c'/4
		      (B, Fun, N, Com)
	      %% Line 437
	      <#{}#,Fun,N,Com> when 'true' ->
		  %% Line 438
		  case apply Fun
			   () of
		    <{B,Fun1}> when 'true' ->
			%% Line 439
			apply 'com_c'/4
			    (B, Fun1, N, Com)
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5})
		      -| ['compiler_generated'] )
		  end
	      ( <_9,_8,_7,_6> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_9,_8,_7,_6})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'com_c',4}}] )
      -| [{'function',{'com_c',4}}] )
'com_oding'/4 =
    %% Line 441
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <#{#<111>(8,1,'integer',['unsigned'|['big']]),
		 #<100>(8,1,'integer',['unsigned'|['big']]),
		 #<105>(8,1,'integer',['unsigned'|['big']]),
		 #<110>(8,1,'integer',['unsigned'|['big']]),
		 #<103>(8,1,'integer',['unsigned'|['big']]),
		 #<B>(( 'all'
			-| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' ->
		  %% Line 442
		  apply 'com_sep'/4
		      (B, Fun, N, Com)
	      %% Line 443
	      <B,Fun,N,Com>
		  when try
			let <_5> =
			    call 'erlang':'byte_size'
				(B)
			in  call 'erlang':'>='
				(_5, 5)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  %% Line 444
		  apply 'com_c'/4
		      (B, Fun, N, Com)
	      %% Line 445
	      <B,Fun,N,Com> when 'true' ->
		  %% Line 446
		  case apply Fun
			   () of
		    <{B1,Fun1}> when 'true' ->
			let <_7> =
			    call %% Line 447
				 'erlang':%% Line 447
					  'list_to_binary'
				(%% Line 447
				 [B|[B1|[]]])
			in  %% Line 447
			    apply 'com_oding'/4
				(_7, Fun1, N, Com)
		    ( <_6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_6})
		      -| ['compiler_generated'] )
		  end
	    end
	    -| [{'function',{'com_oding',4}}] )
      -| [{'function',{'com_oding',4}}] )
'com_sep'/4 =
    %% Line 449
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <#{#<58>(8,1,'integer',['unsigned'|['big']]),
		 #<B>(( 'all'
			-| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' ->
		  %% Line 450
		  apply 'com_space'/4
		      (B, Fun, N, Com)
	      %% Line 451
	      <#{#<61>(8,1,'integer',['unsigned'|['big']]),
		 #<B>(( 'all'
			-| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' ->
		  %% Line 452
		  apply 'com_space'/4
		      (B, Fun, N, Com)
	      %% Line 453
	      <#{#<32>(8,1,'integer',['unsigned'|['big']]),
		 #<B>(( 'all'
			-| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' ->
		  %% Line 454
		  apply 'com_sep'/4
		      (B, Fun, N, Com)
	      %% Line 455
	      <#{}#,Fun,N,Com> when 'true' ->
		  %% Line 456
		  case apply Fun
			   () of
		    <{B,Fun1}> when 'true' ->
			%% Line 457
			apply 'com_sep'/4
			    (B, Fun1, N, Com)
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4})
		      -| ['compiler_generated'] )
		  end
	      %% Line 458
	      <B,Fun,N,Com> when 'true' ->
		  %% Line 459
		  apply 'com_c'/4
		      (B, Fun, N, Com)
	    end
	    -| [{'function',{'com_sep',4}}] )
      -| [{'function',{'com_sep',4}}] )
'com_space'/4 =
    %% Line 461
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <#{#<32>(8,1,'integer',['unsigned'|['big']]),
		 #<B>(( 'all'
			-| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' ->
		  %% Line 462
		  apply 'com_space'/4
		      (B, Fun, N, Com)
	      %% Line 463
	      <#{}#,Fun,N,Com> when 'true' ->
		  %% Line 464
		  case apply Fun
			   () of
		    <{B,Fun1}> when 'true' ->
			%% Line 465
			apply 'com_space'/4
			    (B, Fun1, N, Com)
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4})
		      -| ['compiler_generated'] )
		  end
	      %% Line 466
	      <B,Fun,N,_X_Com> when 'true' ->
		  %% Line 467
		  apply 'com_enc'/5
		      (B, Fun, N, [], [])
	    end
	    -| [{'function',{'com_space',4}}] )
      -| [{'function',{'com_space',4}}] )
'com_enc'/5 =
    %% Line 469
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <#{#<C>(1,8,'integer',['unsigned'|['big']]),
		 #<B>(( 'all'
			-| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,L,Ps>
		  when let <_5> =
			call 'erlang':'>='
			    (C, 97)
		    in  let <_6> =
			    call 'erlang':'=<'
				(C, 122)
			in  let <_7> =
				call 'erlang':'and'
				    (_5, _6)
			    in  let <_8> =
				    call %% Line 470
					 'erlang':%% Line 470
						  '>='
					(%% Line 470
					 C, %% Line 470
					    65)
				in  let <_9> =
					call %% Line 470
					     'erlang':%% Line 470
						      '=<'
					    (%% Line 470
					     C, %% Line 470
						90)
				    in  let <_10> =
					    call %% Line 470
						 'erlang':%% Line 470
							  'and'
						(_8, _9)
					in  let <_11> =
						call %% Line 471
						     'erlang':%% Line 471
							      '>='
						    (%% Line 471
						     C, %% Line 471
							48)
					    in  let <_12> =
						    call %% Line 471
							 'erlang':%% Line 471
								  '=<'
							(%% Line 471
							 C, %% Line 471
							    57)
						in  let <_13> =
							call %% Line 471
							     'erlang':%% Line 471
								      'and'
							    (_11, _12)
						    in  let <_14> =
							    call %% Line 470
								 'erlang':%% Line 470
									  'or'
								(_10, _13)
							in  call 'erlang':'or'
								(_7, _14) ->
		  %% Line 472
		  apply 'com_enc'/5
		      (B, Fun, N, [C|L], Ps)
	      %% Line 473
	      <#{}#,Fun,N,L,Ps> when 'true' ->
		  %% Line 474
		  case apply Fun
			   () of
		    %% Line 475
		    <{#{}#,_21}> when 'true' ->
			%% Line 476
			apply 'com_enc_end'/1
			    ([L|Ps])
		    %% Line 477
		    <{B,Fun1}> when 'true' ->
			%% Line 478
			apply 'com_enc'/5
			    (B, Fun1, N, L, Ps)
		    ( <_15> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_15})
		      -| ['compiler_generated'] )
		  end
	      %% Line 480
	      <#{#<45>(8,1,'integer',['unsigned'|['big']]),
		 #<B>(( 'all'
			-| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,L,Ps> when 'true' ->
		  %% Line 481
		  apply 'com_enc'/5
		      (B, Fun, N, [], [L|Ps])
	      %% Line 482
	      <_X_B,_X_Fun,_X_N,L,Ps> when 'true' ->
		  %% Line 483
		  apply 'com_enc_end'/1
		      ([L|Ps])
	    end
	    -| [{'function',{'com_enc',5}}] )
      -| [{'function',{'com_enc',5}}] )
'com_enc_end'/1 =
    %% Line 485
    ( fun (_0) ->
	  let <_8> =
	      letrec
		  'lc$^0'/1 =
		      %% Line 486
		      fun (_3) ->
			  case _3 of
			    <[P|_2]> when 'true' ->
				let <_5> =
				    apply 'lowercase'/1
					(P)
				in  let <_6> =
					call 'lists':'reverse'
					    (_5)
				    in  let <_7> =
					    apply 'lc$^0'/1
						(_2)
					in  ( [_6|_7]
					      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_4> when 'true' ->
				  primop 'match_fail'
				      ({'function_clause',_4})
			      -| ['compiler_generated'] )
			  end
	      in  %% Line 486
		  apply 'lc$^0'/1
		      (( _0
			 -| [{'function',{'com_enc_end',1}}] ))
	  in  let <Ps> =
		  call %% Line 486
		       'lists':%% Line 486
			       'reverse'
		      (_8)
	      in  %% Line 487
		  apply 'com_encoding'/1
		      (Ps)
      -| [{'function',{'com_enc_end',1}}] )
'com_encoding'/1 =
    %% Line 489
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'com_encoding',1}}] ) of
	      <[[108|[97|[116|[105|[110]]]]]|[[49]|_2]]> when 'true' ->
		  %% Line 490
		  'latin1'
	      %% Line 491
	      <[[117|[116|[102]]]|[[56]|_3]]> when 'true' ->
		  %% Line 492
		  'utf8'
	      %% Line 493
	      <_4> when 'true' ->
		  %% Line 494
		  call 'erlang':'throw'
		      ('no')
	    end
	    -| [{'function',{'com_encoding',1}}] )
      -| [{'function',{'com_encoding',1}}] )
'lowercase'/1 =
    %% Line 496
    ( fun (_0) ->
	  let <_1> =
	      call %% Line 497
		   'string':%% Line 497
			    'lowercase'
		  (( _0
		     -| [{'function',{'lowercase',1}}] ))
	  in  %% Line 497
	      call 'unicode':'characters_to_list'
		  (_1)
      -| [{'function',{'lowercase',1}}] )
'normalize_typed_record_fields'/1 =
    %% Line 499
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'normalize_typed_record_fields',1}}] ) of
	      <[]> when 'true' ->
		  %% Line 500
		  {'typed',[]}
	      %% Line 501
	      <Fields> when 'true' ->
		  %% Line 502
		  apply 'normalize_typed_record_fields'/3
		      (Fields, [], 'false')
	    end
	    -| [{'function',{'normalize_typed_record_fields',1}}] )
      -| [{'function',{'normalize_typed_record_fields',1}}] )
'normalize_typed_record_fields'/3 =
    %% Line 504
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <[],NewFields,Typed> when 'true' ->
		  %% Line 505
		  case Typed of
		    %% Line 506
		    <'true'> when 'true' ->
			let <_3> =
			    call 'lists':'reverse'
				(NewFields)
			in  {'typed',_3}
		    %% Line 507
		    <'false'> when 'true' ->
			'not_typed'
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_4})
		      -| ['compiler_generated'] )
		  end
	      %% Line 509
	      <[{'typed_record_field',Field,_8}|Rest],%% Line 510
						      NewFields,%% Line 510
								_X_Typed> when 'true' ->
		  %% Line 511
		  apply 'normalize_typed_record_fields'/3
		      (Rest, [Field|NewFields], 'true')
	      %% Line 512
	      <[Field|Rest],NewFields,Typed> when 'true' ->
		  %% Line 513
		  apply 'normalize_typed_record_fields'/3
		      (Rest, [Field|NewFields], Typed)
	      ( <_7,_6,_5> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_7,_6,_5})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'normalize_typed_record_fields',3}}] )
      -| [{'function',{'normalize_typed_record_fields',3}}] )
'restore_typed_record_fields'/1 =
    %% Line 515
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'restore_typed_record_fields',1}}] ) of
	      <[]> when 'true' ->
		  %% Line 516
		  []
	      %% Line 517
	      <[{'attribute',La,'record',{Record,_X_NewFields}}|%% Line 518
								[{'attribute',_5,'type',{{'record',_6},Fields,[]}}|%% Line 519
														   Forms]]>
		  when let <_7> =
			call 'erlang':'=:='
			    (_5, %% Line 518
				 La)
		    in  let <_8> =
			    call 'erlang':'=:='
				(_6, %% Line 518
				     Record)
			in  call 'erlang':'and'
				(_7, _8) ->
		  let <_1> =
		      apply %% Line 521
			    'restore_typed_record_fields'/1
			  (%% Line 521
			   Forms)
		  in  %% Line 520
		      [{'attribute',La,'record',{Record,Fields}}|_1]
	      %% Line 522
	      <[{'attribute',La,'type',{{'record',Record},Fields,[]}}|%% Line 523
								      Forms]> when 'true' ->
		  let <_2> =
		      apply %% Line 527
			    'restore_typed_record_fields'/1
			  (%% Line 527
			   Forms)
		  in  %% Line 526
		      [{'attribute',La,'record',{Record,Fields}}|_2]
	      %% Line 528
	      <[Form|Forms]> when 'true' ->
		  let <_3> =
		      apply %% Line 529
			    'restore_typed_record_fields'/1
			  (%% Line 529
			   Forms)
		  in  %% Line 529
		      [Form|_3]
	      ( <_4> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_4})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'restore_typed_record_fields',1}}] )
      -| [{'function',{'restore_typed_record_fields',1}}] )
'server'/4 =
    %% Line 531
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <Pid,Name,Options,St = {'epp',_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,PreOpened,_24}> when 'true' ->
		  do  %% Line 532
		      call 'erlang':'process_flag'
			  ('trap_exit', 'true')
		      %% Line 533
		      case PreOpened of
			%% Line 534
			<'false'> when 'true' ->
			    %% Line 535
			    case call 'file':'open'
				     (Name, ['read']) of
			      %% Line 536
			      <{'ok',File}> when 'true' ->
				  %% Line 537
				  case St of
				    <{'epp',_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37}> when 'true' ->
					let <_6> =
					    call 'erlang':'setelement'
						(2, St, File)
					in  apply 'init_server'/4
						(Pid, Name, Options, _6)
				    ( <_38> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','epp'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      %% Line 538
			      <_@r0 = {'error',E}> when 'true' ->
				  %% Line 539
				  apply 'epp_reply'/2
				      (Pid, _@r0)
			      ( <_7> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_7})
				-| ['compiler_generated'] )
			    end
			%% Line 541
			<'true'> when 'true' ->
			    %% Line 542
			    apply 'init_server'/4
				(Pid, Name, Options, St)
			( <_8> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_8})
			  -| ['compiler_generated'] )
		      end
	      ( <_12,_11,_10,_9> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_12,_11,_10,_9})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'server',4}}] )
      -| [{'function',{'server',4}}] )
'init_server'/4 =
    %% Line 545
    ( fun (_0,_1,_2,_3) ->
	  let <SourceName> =
	      call %% Line 546
		   'proplists':%% Line 546
			       'get_value'
		  (%% Line 546
		   'source_name', _2, _1)
	  in  let <Pdm> =
		  call %% Line 547
		       'proplists':%% Line 547
				   'get_value'
		      (%% Line 547
		       'macros', _2, %% Line 547
				     [])
	      in  let <Ms0> =
		      apply %% Line 548
			    'predef_macros'/1
			  (_1)
		  in  %% Line 549
		      case apply 'user_predef'/2
			       (Pdm, Ms0) of
			%% Line 550
			<{'ok',Ms1}> when 'true' ->
			    %% Line 551
			    case _3 of
			      <{'epp',File,AtLocation,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41}> when 'true' ->
				  let <DefEncoding> =
				      call %% Line 552
					   'proplists':%% Line 552
						       'get_value'
					  (%% Line 552
					   'default_encoding', _2, %% Line 553
								   'utf8')
				  in  let <Encoding> =
					  apply %% Line 554
						'set_encoding'/2
					      (%% Line 554
					       File, %% Line 554
						     DefEncoding)
				      in  let <_10> =
					      call %% Line 555
						   'erlang':%% Line 555
							    'self'
						  ()
					  in  do  %% Line 555
						  apply 'epp_reply'/2
						      (_0, {'ok',_10,Encoding})
						  let <_11> =
						      call %% Line 558
							   'filename':%% Line 558
								      'dirname'
							  (_1)
						  in  let <_12> =
							  call %% Line 559
							       'proplists':%% Line 559
									   'get_value'
							      (%% Line 559
							       'includes', _2, %% Line 559
									       [])
						      in  let <Path> =
							      [_11|_12]
							  in  %% Line 560
							      case _3 of
								<{'epp',_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54}> when 'true' ->
								    let <_15> =
									call %% Line 562
									     'erlang':%% Line 562
										      'setelement'
									    (%% Line 562
									     12, _3, %% Line 562
										     DefEncoding)
								    in  let <_16> =
									    call %% Line 561
										 'erlang':%% Line 561
											  'setelement'
										(%% Line 561
										 10, _15, %% Line 561
											  Ms1)
									in  let <_17> =
										call %% Line 561
										     'erlang':%% Line 561
											      'setelement'
										    (%% Line 561
										     9, _16, %% Line 561
											     Path)
									    in  let <_18> =
										    call 'erlang':'setelement'
											(6, _17, SourceName)
										in  let <_19> =
											call 'erlang':'setelement'
											    (5, _18, SourceName)
										    in  let <_21> =
											    call 'erlang':'setelement'
												(4, _19, 0)
											in  let <From> =
												apply %% Line 563
												      'wait_request'/1
												    (_21)
											    in  let <Anno> =
												    call %% Line 564
													 'erl_anno':%% Line 564
														    'new'
													(%% Line 564
													 AtLocation)
												in  let <_25> =
													apply %% Line 565
													      'file_name'/1
													    (%% Line 565
													     SourceName)
												    in  do  %% Line 565
													    apply 'enter_file_reply'/5
														(From, _25, Anno, %% Line 566
																  AtLocation, %% Line 566
																	      'code')
													    %% Line 567
													    apply 'wait_req_scan'/1
														(_21)
								( <_55> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','epp'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
			      ( <_7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_7})
				-| ['compiler_generated'] )
			    end
			%% Line 568
			<_@r0 = {'error',E}> when 'true' ->
			    %% Line 569
			    apply 'epp_reply'/2
				(_0, _@r0)
			( <_26> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_26})
			  -| ['compiler_generated'] )
		      end
      -| [{'function',{'init_server',4}}] )
'predef_macros'/1 =
    %% Line 576
    ( fun (_0) ->
	  let <_1> =
	      call %% Line 577
		   'erlang':%% Line 577
			    'system_info'
		  (%% Line 577
		   'machine')
	  in  let <Machine> =
		  call %% Line 577
		       'erlang':%% Line 577
				'list_to_atom'
		      (_1)
	      in  let <Anno> =
		      apply %% Line 578
			    'line1'/0
			  ()
		  in  let <_4> =
			  call %% Line 579
			       'erlang':%% Line 579
					'system_info'
			      (%% Line 579
			       'otp_release')
		      in  let <OtpVersion> =
			      call %% Line 579
				   'erlang':%% Line 579
					    'list_to_integer'
				  (_4)
			  in  let <Defs> =
				  [%% Line 580
				   {'FILE',{'none',[{'string',Anno,( _0
								     -| [{'function',{'predef_macros',1}}] )}|[]]}}|%% Line 581
														    [{'FUNCTION_NAME','undefined'}|%% Line 582
																		   [{'FUNCTION_ARITY','undefined'}|%% Line 583
																						   [{'LINE',{'none',[{'integer',Anno,1}|[]]}}|%% Line 584
																											      [{'MODULE','undefined'}|%% Line 585
																														      [{'MODULE_STRING','undefined'}|%% Line 586
																																		     [{'BASE_MODULE','undefined'}|%% Line 587
																																						  [{'BASE_MODULE_STRING','undefined'}|%% Line 588
																																										      [{'MACHINE',{'none',[{'atom',Anno,Machine}|[]]}}|%% Line 589
																																																       [{Machine,{'none',[{'atom',Anno,'true'}|[]]}}|%% Line 590
																																																						     [{'OTP_RELEASE',{'none',[{'integer',Anno,OtpVersion}|[]]}}|%% Line 591
																																																														[]]]]]]]]]]]]
			      in  %% Line 592
				  call 'maps':'from_list'
				      (Defs)
      -| [{'function',{'predef_macros',1}}] )
'user_predef'/2 =
    %% Line 599
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <[{M,Val,'redefine'}|Pdm],Ms>
		  when call 'erlang':'is_atom'
			(M) ->
		  let <_2> =
		      call %% Line 600
			   'erl_parse':%% Line 600
				       'abstract'
			  (%% Line 600
			   Val)
		  in  let <Exp> =
			  call %% Line 600
			       'erl_parse':%% Line 600
					   'tokens'
			      (_2)
		      in  %% Line 601
			  case <> of
			    ( <>
				  when call 'erlang':'is_map'
					(Ms) ->
				  let <_4> =
				      ~{M=>{'none',Exp}|Ms}~
				  in  apply 'user_predef'/2
					  (Pdm, _4)
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  ( primop 'match_fail'
					({'badmap',Ms})
				    -| [{'eval_failure','badmap'}] )
			      -| ['compiler_generated'] )
			  end
	      %% Line 602
	      <[{M,Val}|Pdm],Ms>
		  when call 'erlang':'is_atom'
			(M) ->
		  %% Line 603
		  case Ms of
		    %% Line 604
		    <~{M:=Defs}~>
			when call 'erlang':'is_list'
			      (Defs) ->
			%% Line 606
			{'error',{'redefine',M}}
		    %% Line 607
		    <~{M:=_X_Defs}~> when 'true' ->
			%% Line 609
			{'error',{'redefine_predef',M}}
		    %% Line 610
		    <_11> when 'true' ->
			let <_5> =
			    call %% Line 611
				 'erl_parse':%% Line 611
					     'abstract'
				(%% Line 611
				 Val)
			in  let <Exp> =
				call %% Line 611
				     'erl_parse':%% Line 611
						 'tokens'
				    (_5)
			    in  %% Line 612
				case <> of
				  ( <>
					when call 'erlang':'is_map'
					      (Ms) ->
					let <_7> =
					    ~{M=>[{'none',{'none',Exp}}|[]]|Ms}~
					in  apply 'user_predef'/2
						(Pdm, _7)
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					( primop 'match_fail'
					      ({'badmap',Ms})
					  -| [{'eval_failure','badmap'}] )
				    -| ['compiler_generated'] )
				end
		  end
	      %% Line 614
	      <[M|Pdm],Ms>
		  when call 'erlang':'is_atom'
			(M) ->
		  %% Line 615
		  apply 'user_predef'/2
		      ([{M,'true'}|Pdm], Ms)
	      %% Line 616
	      <[Md|_X_Pdm],_X_Ms> when 'true' ->
		  {'error',{'bad',Md}}
	      %% Line 617
	      <[],Ms> when 'true' ->
		  {'ok',Ms}
	      ( <_10,_9> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_10,_9})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'user_predef',2}}] )
      -| [{'function',{'user_predef',2}}] )
'wait_request'/1 =
    %% Line 625
    ( fun (_0) ->
	  ( letrec
		'recv$^1'/0 =
		    fun () ->
			let <_28,_26> =
			    primop 'recv_peek_message'
				()
			in  case _28 of
			      <'true'> when 'true' ->
				  %% Line 626
				  case _26 of
				    %% Line 627
				    <{'epp_request',From,'scan_erl_form'}> when 'true' ->
					do  primop 'remove_message'
						()
					    From
				    %% Line 628
				    <{'epp_request',From,'macro_defs'}> when 'true' ->
					do  primop 'remove_message'
						()
					    let <_9> =
						letrec
						    'lc$^0'/1 =
							%% Line 630
							fun (_6) ->
							    case _6 of
							      <[{K,V}|_2]> when 'true' ->
								  let <_8> =
								      apply 'lc$^0'/1
									  (_2)
								  in  ( [{{'atom',K},V}|_8]
									-| ['compiler_generated'] )
							      ( <[_1|_2]> when 'true' ->
								    apply 'lc$^0'/1
									(_2)
								-| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_7> when 'true' ->
								    primop 'match_fail'
									({'function_clause',_7})
								-| ['compiler_generated'] )
							    end
						in  %% Line 630
						    ( case ( _0
							     -| [{'function',{'wait_request',1}}] ) of
							( <( {'epp',_12,_13,_14,_15,_16,_17,_18,_19,_rec2,_20,_21,_22,_23}
							     -| ['compiler_generated'] )> when 'true' ->
							      let <_5> =
								  call 'maps':'to_list'
								      (_rec2)
							      in  apply 'lc$^0'/1
								      (_5)
							  -| ['compiler_generated'] )
							( <_24> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','epp'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
					    in  do  %% Line 631
						    apply 'epp_reply'/2
							(From, _9)
						    %% Line 632
						    apply 'wait_request'/1
							(( _0
							   -| [{'function',{'wait_request',1}}] ))
				    %% Line 633
				    <{'epp_request',From,'close'}> when 'true' ->
					do  primop 'remove_message'
						()
					    do  %% Line 634
						apply 'close_file'/1
						    (( _0
						       -| [{'function',{'wait_request',1}}] ))
						do  %% Line 635
						    apply 'epp_reply'/2
							(From, 'ok')
						    %% Line 636
						    call 'erlang':'exit'
							('normal')
				    %% Line 637
				    <{'EXIT',_25,R}> when 'true' ->
					do  primop 'remove_message'
						()
					    %% Line 638
					    call 'erlang':'exit'
						(R)
				    %% Line 639
				    <Other> when 'true' ->
					do  primop 'remove_message'
						()
					    do  %% Line 640
						call 'io':'fwrite'
						    ([69|[112|[112|[58|[32|[117|[110|[107|[110|[111|[119|[110|[32|[39|[126|[119|[39|[10]]]]]]]]]]]]]]]]]], [Other|[]])
						%% Line 641
						apply 'wait_request'/1
						    (( _0
						       -| [{'function',{'wait_request',1}}] ))
				  end
			      ( <'false'> when 'true' ->
				    let <_27> =
					primop 'recv_wait_timeout'
					    ('infinity')
				    in  case _27 of
					  <'true'> when 'true' ->
					      do  primop 'timeout'
						      ()
						  'true'
					  ( <'false'> when 'true' ->
						( apply 'recv$^1'/0
						      ()
						  -| ['dialyzer_ignore'] )
					    -| ['dialyzer_ignore'] )
					end
				-| ['dialyzer_ignore'] )
			    end
	    in  ( apply 'recv$^1'/0
		      ()
		  -| ['dialyzer_ignore'] )
	    -| ['letrec_goto'] )
      -| [{'function',{'wait_request',1}}] )
'close_file'/1 =
    %% Line 644
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'close_file',1}}] ) of
	      <{'epp',_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,'true',_14}> when 'true' ->
		  %% Line 645
		  'ok'
	      %% Line 646
	      <{'epp',File,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,'false',_25}> when 'true' ->
		  let <_26> =
		      call %% Line 647
			   'file':%% Line 647
				  'close'
			  (%% Line 647
			   File)
		  in  %% Line 647
		      case _26 of
			<'ok'> when 'true' ->
			    ( _26
			      -| ['compiler_generated'] )
			( <_1> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_1})
			  -| ['compiler_generated'] )
		      end
	      ( <_2> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_2})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'close_file',1}}] )
      -| [{'function',{'close_file',1}}] )
'wait_req_scan'/1 =
    %% Line 649
    ( fun (_0) ->
	  let <From> =
	      apply %% Line 650
		    'wait_request'/1
		  (( _0
		     -| [{'function',{'wait_req_scan',1}}] ))
	  in  %% Line 651
	      apply 'scan_toks'/2
		  (From, ( _0
			   -| [{'function',{'wait_req_scan',1}}] ))
      -| [{'function',{'wait_req_scan',1}}] )
'wait_req_skip'/2 =
    %% Line 653
    ( fun (_0,_1) ->
	  let <From> =
	      apply %% Line 654
		    'wait_request'/1
		  (_0)
	  in  %% Line 655
	      apply 'skip_toks'/3
		  (From, _0, _1)
      -| [{'function',{'wait_req_skip',2}}] )
'enter_file'/4 =
    %% Line 663
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <_X_NewName,Inc,From,St = {'epp',_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36}>
		  when %% Line 664
		    ( try
			  let <_8> =
			      call 'erlang':'element'
				  (8, St)
			  in  let <_9> =
				  call 'erlang':'length'
				      (_8)
			      in  let <_10> =
				      call 'erlang':'>='
					  (_9, 8)
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (( 'true'
					       -| ['compiler_generated'] ), _10)
					-| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  let <_11> =
		      apply %% Line 665
			    'loc'/1
			  (%% Line 665
			   Inc)
		  in  do  %% Line 665
			  apply 'epp_reply'/2
			      (From, {'error',{_11,'epp',{'depth',[105|[110|[99|[108|[117|[100|[101]]]]]]]}}})
			  %% Line 666
			  apply 'wait_req_scan'/1
			      (St)
	      %% Line 667
	      <NewName,Inc,From,St> when 'true' ->
		  %% Line 668
		  ( case St of
		      ( <( {'epp',_37,_38,_39,_40,_41,_42,_43,_rec3,_44,_45,_46,_47,_48}
			   -| ['compiler_generated'] )> when 'true' ->
			    case call 'file':'path_open'
				     (_rec3, NewName, ['read']) of
			      %% Line 669
			      <{'ok',NewF,Pname}> when 'true' ->
				  %% Line 670
				  ( case St of
				      ( <( {'epp',_50,_rec4,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <Loc> =
						apply 'start_loc'/1
						    (_rec4)
					    in  let <_17> =
						    apply %% Line 671
							  'enter_file2'/5
							(%% Line 671
							 NewF, %% Line 671
							       Pname, %% Line 671
								      From, %% Line 671
									    St, %% Line 671
										Loc)
						in  %% Line 671
						    apply 'wait_req_scan'/1
							(_17)
					-| ['compiler_generated'] )
				      ( <_62> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','epp'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 672
			      <{'error',_X_E}> when 'true' ->
				  let <_18> =
				      apply %% Line 673
					    'loc'/1
					  (%% Line 673
					   Inc)
				  in  do  %% Line 673
					  apply 'epp_reply'/2
					      (From, {'error',{_18,'epp',{'include','file',NewName}}})
					  %% Line 674
					  apply 'wait_req_scan'/1
					      (St)
			      ( <_19> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_19})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_49> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','epp'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	    end
	    -| [{'function',{'enter_file',4}}] )
      -| [{'function',{'enter_file',4}}] )
'enter_file2'/5 =
    %% Line 680
    ( fun (_0,_1,_2,_3,_4) ->
	  let <Anno> =
	      call %% Line 681
		   'erl_anno':%% Line 681
			      'new'
		  (_4)
	  in  do  %% Line 682
		  apply 'enter_file_reply'/5
		      (_2, _1, Anno, _4, 'code')
		  %% Line 683
		  ( case _3 of
		      ( <( {'epp',_27,_28,_29,_30,_31,_32,_33,_34,_rec5,_35,_36,_37,_38}
			   -| ['compiler_generated'] )> when 'true' ->
			    %% Line 684
			    case <> of
			      ( <>
				    when call 'erlang':'is_map'
					  (_rec5) ->
				    let <_9> =
					~{'FILE':={'none',[{'string',Anno,_1}|[]]}|_rec5}~
				    in  let <_11> =
					    call %% Line 691
						 'filename':%% Line 691
							    'dirname'
						(_1)
					in  %% Line 691
					    ( case _3 of
						( <( {'epp',_40,_41,_42,_43,_44,_45,_46,_rec6,_47,_48,_49,_50,_51}
						     -| ['compiler_generated'] )> when 'true' ->
						      let <_14> =
							  call 'erlang':'tl'
							      (_rec6)
						      in  let <Path> =
							      [_11|_14]
							  in  %% Line 692
							      ( case _3 of
								  ( <( {'epp',_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_rec7,_63,_64}
								       -| ['compiler_generated'] )> when 'true' ->
									do  %% Line 693
									    apply 'set_encoding'/2
										(_0, _rec7)
									    %% Line 695
									    ( case _3 of
										( <( {'epp',_66,_67,_68,_69,_70,_71,_rec8,_72,_73,_74,_75,_76,_77}
										     -| ['compiler_generated'] )> when 'true' ->
										      {'epp',_0,_4,0,_1,_1,[],[_3|_rec8],Path,_9,~{}~,_rec7,'false',[]}
										  -| ['compiler_generated'] )
										( <_78> when 'true' ->
										      ( call ( 'erlang'
											       -| ['compiler_generated'] ):( 'error'
															     -| ['compiler_generated'] )
											    (( {'badrecord','epp'}
											       -| ['compiler_generated'] ))
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									      end
									      -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								  ( <_65> when 'true' ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','epp'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <_52> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','epp'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    ( primop 'match_fail'
					  ({'badmap',_rec5})
				      -| [{'eval_failure','badmap'}] )
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_39> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','epp'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
      -| [{'function',{'enter_file2',5}}] )
'enter_file_reply'/5 =
    %% Line 698
    ( fun (_0,_1,_2,_3,_4) ->
	  let <Anno0> =
	      apply %% Line 699
		    'loc_anno'/1
		  (_3)
	  in  let <_7> =
		  case _4 of
		    %% Line 701
		    <'code'> when 'true' ->
			Anno0
		    %% Line 702
		    <'generated'> when 'true' ->
			call 'erl_anno':'set_generated'
			    ('true', Anno0)
		    ( <_6> when 'true' ->
			  %% Line 700
			  primop 'match_fail'
			      ({'case_clause',_6})
		      -| ['compiler_generated'] )
		  end
	      in  let <_9> =
		      apply %% Line 706
			    'get_line'/1
			  (_2)
		  in  let <Rep> =
			  {%% Line 704
			   'ok',%% Line 704
				[{'-',_7}|[{'atom',_7,'file'}|[{'(',_7}|%% Line 705
									[{'string',_7,_1}|[{',',_7}|%% Line 706
												    [{'integer',_7,_9}|[{')',_2}|%% Line 707
																 [{'dot',_7}|[]]]]]]]]]}
		      in  %% Line 708
			  apply 'epp_reply'/2
			      (_0, Rep)
      -| [{'function',{'enter_file_reply',5}}] )
'file_name'/1 =
    %% Line 712
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'file_name',1}}] ) of
	      <[C|T]>
		  when let <_1> =
			call 'erlang':'is_integer'
			    (C)
		    in  let <_2> =
			    call 'erlang':'>'
				(C, 0)
			in  call 'erlang':'and'
				(_1, _2) ->
		  let <_3> =
		      apply %% Line 713
			    'file_name'/1
			  (%% Line 713
			   T)
		  in  %% Line 713
		      [C|_3]
	      %% Line 714
	      <[H|T]> when 'true' ->
		  let <_5> =
		      apply %% Line 715
			    'file_name'/1
			  (%% Line 715
			   H)
		  in  let <_4> =
			  apply %% Line 715
				'file_name'/1
			      (%% Line 715
			       T)
		      in  %% Line 715
			  call 'erlang':'++'
			      (_5, _4)
	      %% Line 716
	      <[]> when 'true' ->
		  %% Line 717
		  []
	      %% Line 718
	      <N>
		  when call 'erlang':'is_atom'
			(( _0
			   -| [{'function',{'file_name',1}}] )) ->
		  %% Line 719
		  call 'erlang':'atom_to_list'
		      (N)
	      ( <_6> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_6})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'file_name',1}}] )
      -| [{'function',{'file_name',1}}] )
'leave_file'/2 =
    %% Line 721
    ( fun (_0,_1) ->
	  %% Line 722
	  ( case _1 of
	      ( <( {'epp',_38,_39,_40,_41,_42,_rec9,_43,_44,_45,_46,_47,_48,_49}
		   -| ['compiler_generated'] )> when 'true' ->
		    case _rec9 of
		      %% Line 723
		      <[I|Cis]> when 'true' ->
			  %% Line 725
			  ( case _1 of
			      ( <( {'epp',_51,_rec10,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62}
				   -| ['compiler_generated'] )> when 'true' ->
				    do  apply 'epp_reply'/2
					    (_0, {'error',{_rec10,'epp',%% Line 726
									{'illegal',[117|[110|[116|[101|[114|[109|[105|[110|[97|[116|[101|[100]]]]]]]]]]]],I}}})
					let <_9> =
					    apply %% Line 727
						  'wait_request'/1
						(_1)
					in  %% Line 727
					    case _1 of
					      <{'epp',_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76}> when 'true' ->
						  let <_8> =
						      call 'erlang':'setelement'
							  (7, _1, Cis)
						  in  apply 'leave_file'/2
							  (_9, _8)
					      ( <_77> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','epp'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
				-| ['compiler_generated'] )
			      ( <_63> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','epp'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      %% Line 728
		      <[]> when 'true' ->
			  %% Line 729
			  ( case _1 of
			      ( <( {'epp',_78,_79,_80,_81,_82,_83,_rec12,_84,_85,_86,_87,_88,_89}
				   -| ['compiler_generated'] )> when 'true' ->
				    case _rec12 of
				      %% Line 730
				      <[OldSt|Sts]> when 'true' ->
					  do  %% Line 731
					      apply 'close_file'/1
						  (_1)
					      %% Line 733
					      case OldSt of
						<{'epp',_91,OldLoc,Delta,OldName,OldName2,_92,_93,_94,_95,_96,_97,_98,_99}> when 'true' ->
						    let <CurrLoc> =
							apply %% Line 734
							      'add_line'/2
							    (%% Line 734
							     OldLoc, %% Line 734
								     Delta)
						    in  let <Anno> =
							    call %% Line 735
								 'erl_anno':%% Line 735
									    'new'
								(%% Line 735
								 CurrLoc)
							in  %% Line 736
							    ( case _1 of
								( <( {'epp',_100,_101,_102,_103,_104,_105,_106,_107,_rec13,_108,_109,_110,_111}
								     -| ['compiler_generated'] )> when 'true' ->
								      %% Line 737
								      case <> of
									( <>
									      when call 'erlang':'is_map'
										    (_rec13) ->
									      let <_18> =
										  ~{'FILE':={'none',[{'string',Anno,OldName2}|[]]}|_rec13}~
									      in  %% Line 738
										  ( case _1 of
										      ( <( {'epp',_113,_114,_115,_116,_117,_118,_119,_120,_121,_rec16,_122,_123,_124}
											   -| ['compiler_generated'] )> when 'true' ->
											    case OldSt of
											      <{'epp',_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138}> when 'true' ->
												  let <_24> =
												      call 'erlang':'setelement'
													  (11, OldSt, _rec16)
												  in  let <_25> =
													  call 'erlang':'setelement'
													      (10, _24, _18)
												      in  let <_27> =
													      call 'erlang':'setelement'
														  (8, _25, Sts)
													  in  do  %% Line 739
														  apply 'enter_file_reply'/5
														      (_0, OldName, Anno, CurrLoc, 'code')
														  do  %% Line 740
														      case call 'erlang':'=:='
															       (OldName2, OldName) of
															%% Line 741
															<'true'> when 'true' ->
															    'ok'
															%% Line 743
															<'false'> when 'true' ->
															    let <NFrom> =
																apply %% Line 744
																      'wait_request'/1
																    (_27)
															    in  let <OldAnno> =
																    call %% Line 745
																	 'erl_anno':%% Line 745
																		    'new'
																	(%% Line 745
																	 OldLoc)
																in  %% Line 746
																    apply 'enter_file_reply'/5
																	(NFrom, OldName2, OldAnno, %% Line 747
																				   CurrLoc, %% Line 747
																					    'generated')
														      end
														      %% Line 749
														      apply 'wait_req_scan'/1
															  (_27)
											      ( <_139> when 'true' ->
												    ( call ( 'erlang'
													     -| ['compiler_generated'] ):( 'error'
																	   -| ['compiler_generated'] )
													  (( {'badrecord','epp'}
													     -| ['compiler_generated'] ))
												      -| ['compiler_generated'] )
												-| ['compiler_generated'] )
											    end
											-| ['compiler_generated'] )
										      ( <_125> when 'true' ->
											    ( call ( 'erlang'
												     -| ['compiler_generated'] ):( 'error'
																   -| ['compiler_generated'] )
												  (( {'badrecord','epp'}
												     -| ['compiler_generated'] ))
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										    end
										    -| ['compiler_generated'] )
									  -| ['compiler_generated'] )
									( <> when 'true' ->
									      ( primop 'match_fail'
										    ({'badmap',_rec13})
										-| [{'eval_failure','badmap'}] )
									  -| ['compiler_generated'] )
								      end
								  -| ['compiler_generated'] )
								( <_112> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','epp'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
						( <_12> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_12})
						  -| ['compiler_generated'] )
					      end
				      %% Line 750
				      <[]> when 'true' ->
					  %% Line 751
					  ( case _1 of
					      ( <( {'epp',_140,_rec17,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151}
						   -| ['compiler_generated'] )> when 'true' ->
						    do  apply 'epp_reply'/2
							    (_0, {'eof',_rec17})
							%% Line 752
							apply 'wait_req_scan'/1
							    (_1)
						-| ['compiler_generated'] )
					      ( <_152> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','epp'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      ( <_34> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_34})
					-| ['compiler_generated'] )
				    end
				-| ['compiler_generated'] )
			      ( <_90> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','epp'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      ( <_35> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_35})
			-| ['compiler_generated'] )
		    end
		-| ['compiler_generated'] )
	      ( <_50> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','epp'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'leave_file',2}}] )
'scan_toks'/2 =
    %% Line 759
    ( fun (_0,_1) ->
	  %% Line 760
	  ( case _1 of
	      ( <( {'epp',_rec18,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32}
		   -| ['compiler_generated'] )> when 'true' ->
		    ( case _1 of
			( <( {'epp',_34,_rec19,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45}
			     -| ['compiler_generated'] )> when 'true' ->
			      case call 'io':'scan_erl_form'
				       (_rec18, '', _rec19) of
				%% Line 761
				<{'ok',Toks,Cl}> when 'true' ->
				    %% Line 762
				    case _1 of
				      <{'epp',_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59}> when 'true' ->
					  let <_8> =
					      call 'erlang':'setelement'
						  (3, _1, Cl)
					  in  apply 'scan_toks'/3
						  (Toks, _0, _8)
				      ( <_60> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','epp'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				%% Line 763
				<{'error',E,Cl}> when 'true' ->
				    do  %% Line 764
					apply 'epp_reply'/2
					    (_0, {'error',E})
					%% Line 765
					case _1 of
					  <{'epp',_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73}> when 'true' ->
					      let <_11> =
						  call 'erlang':'setelement'
						      (3, _1, Cl)
					      in  apply 'wait_req_scan'/1
						      (_11)
					  ( <_74> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','epp'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
				%% Line 766
				<{'eof',Cl}> when 'true' ->
				    %% Line 767
				    case _1 of
				      <{'epp',_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87}> when 'true' ->
					  let <_14> =
					      call 'erlang':'setelement'
						  (3, _1, Cl)
					  in  apply 'leave_file'/2
						  (_0, _14)
				      ( <_88> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','epp'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				%% Line 768
				<{'error',_X_E}> when 'true' ->
				    %% Line 769
				    ( case _1 of
					( <( {'epp',_89,_rec23,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100}
					     -| ['compiler_generated'] )> when 'true' ->
					      do  apply 'epp_reply'/2
						      (_0, {'error',{_rec23,'epp','cannot_parse'}})
						  let <_17> =
						      apply %% Line 770
							    'wait_request'/1
							  (_1)
						  in  %% Line 770
						      apply 'leave_file'/2
							  (_17, _1)
					  -| ['compiler_generated'] )
					( <_101> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','epp'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				( <_18> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_18})
				  -| ['compiler_generated'] )
			      end
			  -| ['compiler_generated'] )
			( <_46> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','epp'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	      ( <_33> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','epp'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'scan_toks',2}}] )
'scan_toks'/3 =
    %% Line 773
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <[{'-',_X_Lh}|[Define = {'atom',_X_Ld,'define'}|Toks]],From,St> when 'true' ->
		  %% Line 774
		  apply 'scan_define'/4
		      (Toks, Define, From, St)
	      %% Line 775
	      <[{'-',_X_Lh}|[Undef = {'atom',_X_Ld,'undef'}|Toks]],From,St> when 'true' ->
		  %% Line 776
		  apply 'scan_undef'/4
		      (Toks, Undef, From, St)
	      %% Line 777
	      <[{'-',_X_Lh}|[Error = {'atom',_X_Ld,'error'}|Toks]],From,St> when 'true' ->
		  %% Line 778
		  apply 'scan_err_warn'/4
		      (Toks, Error, From, St)
	      %% Line 779
	      <[{'-',_X_Lh}|[Warn = {'atom',_X_Ld,'warning'}|Toks]],From,St> when 'true' ->
		  %% Line 780
		  apply 'scan_err_warn'/4
		      (Toks, Warn, From, St)
	      %% Line 781
	      <[{'-',_X_Lh}|[Inc = {'atom',_X_Li,'include'}|Toks]],From,St> when 'true' ->
		  %% Line 782
		  apply 'scan_include'/4
		      (Toks, Inc, From, St)
	      %% Line 783
	      <[{'-',_X_Lh}|[IncLib = {'atom',_X_Li,'include_lib'}|Toks]],From,St> when 'true' ->
		  %% Line 784
		  apply 'scan_include_lib'/4
		      (Toks, IncLib, From, St)
	      %% Line 785
	      <[{'-',_X_Lh}|[IfDef = {'atom',_X_Li,'ifdef'}|Toks]],From,St> when 'true' ->
		  %% Line 786
		  apply 'scan_ifdef'/4
		      (Toks, IfDef, From, St)
	      %% Line 787
	      <[{'-',_X_Lh}|[IfnDef = {'atom',_X_Li,'ifndef'}|Toks]],From,St> when 'true' ->
		  %% Line 788
		  apply 'scan_ifndef'/4
		      (Toks, IfnDef, From, St)
	      %% Line 789
	      <[{'-',_X_Lh}|[Else = {'atom',_X_Le,'else'}|Toks]],From,St> when 'true' ->
		  %% Line 790
		  apply 'scan_else'/4
		      (Toks, Else, From, St)
	      %% Line 791
	      <[{'-',_X_Lh}|[If = {'if',_X_Le}|Toks]],From,St> when 'true' ->
		  %% Line 792
		  apply 'scan_if'/4
		      (Toks, If, From, St)
	      %% Line 793
	      <[{'-',_X_Lh}|[Elif = {'atom',_X_Le,'elif'}|Toks]],From,St> when 'true' ->
		  %% Line 794
		  apply 'scan_elif'/4
		      (Toks, Elif, From, St)
	      %% Line 795
	      <[{'-',_X_Lh}|[Endif = {'atom',_X_Le,'endif'}|Toks]],From,St> when 'true' ->
		  %% Line 796
		  apply 'scan_endif'/4
		      (Toks, Endif, From, St)
	      %% Line 797
	      <[{'-',_X_Lh}|[FileToken = {'atom',_X_Lf,'file'}|Toks0]],From,St> when 'true' ->
		  let <_3> =
		      catch
			  %% Line 798
			  apply 'expand_macros'/2
			      (Toks0, St)
		  in  %% Line 798
		      case _3 of
			%% Line 799
			<Toks1>
			    when call 'erlang':'is_list'
				  (_3) ->
			    %% Line 800
			    apply 'scan_file'/4
				(Toks1, FileToken, From, St)
			%% Line 801
			<{'error',ErrL,What}> when 'true' ->
			    do  %% Line 802
				apply 'epp_reply'/2
				    (From, {'error',{ErrL,'epp',What}})
				%% Line 803
				apply 'wait_req_scan'/1
				    (St)
			( <_4> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_4})
			  -| ['compiler_generated'] )
		      end
	      %% Line 805
	      <Toks0,From,St> when 'true' ->
		  let <_8> =
		      catch
			  %% Line 806
			  case St of
			    <{'epp',_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31}> when 'true' ->
				let <_7> =
				    call 'erlang':'setelement'
					(14, St, Toks0)
				in  apply 'expand_macros'/2
					(Toks0, _7)
			    ( <_32> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','epp'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		  in  %% Line 806
		      case _8 of
			%% Line 807
			<Toks1>
			    when call 'erlang':'is_list'
				  (_8) ->
			    do  %% Line 808
				apply 'epp_reply'/2
				    (From, {'ok',Toks1})
				%% Line 809
				( case St of
				    ( <( {'epp',_33,_34,_35,_36,_37,_38,_39,_40,_rec27,_41,_42,_43,_44}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_rec25> =
					      apply 'scan_module'/2
						  (Toks1, _rec27)
					  in  case St of
						<{'epp',_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58}> when 'true' ->
						    let <_14> =
							call 'erlang':'setelement'
							    (10, St, _rec25)
						    in  apply 'wait_req_scan'/1
							    (_14)
						( <_59> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','epp'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
				      -| ['compiler_generated'] )
				    ( <_45> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','epp'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			%% Line 810
			<{'error',ErrL,What}> when 'true' ->
			    do  %% Line 811
				apply 'epp_reply'/2
				    (From, {'error',{ErrL,'epp',What}})
				%% Line 812
				apply 'wait_req_scan'/1
				    (St)
			( <_15> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_15})
			  -| ['compiler_generated'] )
		      end
	    end
	    -| [{'function',{'scan_toks',3}}] )
      -| [{'function',{'scan_toks',3}}] )
'scan_module'/2 =
    %% Line 815
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <[{'-',_X_Lh}|[{'atom',_X_Lm,'module'}|[{'(',_X_Ll}|Ts]]],Ms> when 'true' ->
		  %% Line 816
		  apply 'scan_module_1'/2
		      (Ts, Ms)
	      %% Line 817
	      <[{'-',_X_Lh}|[{'atom',_X_Lm,'extends'}|[{'(',_X_Ll}|Ts]]],Ms> when 'true' ->
		  %% Line 818
		  apply 'scan_extends'/2
		      (Ts, Ms)
	      %% Line 819
	      <_X_Ts,Ms> when 'true' ->
		  Ms
	    end
	    -| [{'function',{'scan_module',2}}] )
      -| [{'function',{'scan_module',2}}] )
'scan_module_1'/2 =
    %% Line 821
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <[A = {'atom',_7,_8}|[{',',L}|Ts]],Ms> when 'true' ->
		  %% Line 823
		  apply 'scan_module_1'/2
		      ([A|[{')',L}|Ts]], Ms)
	      %% Line 824
	      <[ModAtom = {'atom',Ln,A}|[{')',_X_Lr}|_X_Ts]],Ms0> when 'true' ->
		  let <ModString> =
		      call %% Line 825
			   'erlang':%% Line 825
				    'atom_to_list'
			  (%% Line 825
			   A)
		  in  %% Line 826
		      case <> of
			( <>
			      when call 'erlang':'is_map'
				    (Ms0) ->
			      let <_3> =
				  ~{'MODULE':={'none',[ModAtom|[]]}|Ms0}~
			      in  %% Line 827
				  case <> of
				    ( <>
					  when call 'erlang':'is_map'
						(_3) ->
					  ~{'MODULE_STRING':={'none',[{'string',Ln,ModString}|[]]}|_3}~
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  ( primop 'match_fail'
						({'badmap',_3})
					    -| [{'eval_failure','badmap'}] )
				      -| ['compiler_generated'] )
				  end
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      ( primop 'match_fail'
				    ({'badmap',Ms0})
				-| [{'eval_failure','badmap'}] )
			  -| ['compiler_generated'] )
		      end
	      %% Line 828
	      <_X_Ts,Ms> when 'true' ->
		  Ms
	    end
	    -| [{'function',{'scan_module_1',2}}] )
      -| [{'function',{'scan_module_1',2}}] )
'scan_extends'/2 =
    %% Line 830
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <[ModAtom = {'atom',Ln,A}|[{')',_X_Lr}|_X_Ts]],Ms0> when 'true' ->
		  let <ModString> =
		      call %% Line 831
			   'erlang':%% Line 831
				    'atom_to_list'
			  (%% Line 831
			   A)
		  in  %% Line 832
		      case <> of
			( <>
			      when call 'erlang':'is_map'
				    (Ms0) ->
			      let <_3> =
				  ~{'BASE_MODULE':={'none',[ModAtom|[]]}|Ms0}~
			      in  %% Line 833
				  case <> of
				    ( <>
					  when call 'erlang':'is_map'
						(_3) ->
					  ~{'BASE_MODULE_STRING':={'none',[{'string',Ln,ModString}|[]]}|_3}~
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  ( primop 'match_fail'
						({'badmap',_3})
					    -| [{'eval_failure','badmap'}] )
				      -| ['compiler_generated'] )
				  end
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      ( primop 'match_fail'
				    ({'badmap',Ms0})
				-| [{'eval_failure','badmap'}] )
			  -| ['compiler_generated'] )
		      end
	      %% Line 834
	      <_X_Ts,Ms> when 'true' ->
		  Ms
	    end
	    -| [{'function',{'scan_extends',2}}] )
      -| [{'function',{'scan_extends',2}}] )
'scan_err_warn'/4 =
    %% Line 836
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <Toks0 = [{'(',_18}|_19],Token = {'atom',_20,Tag},From,St> when 'true' ->
		  do  %% Line 837
		      try
			  apply 'expand_macros'/2
			      (Toks0, St)
		      of <_4> ->
			  case _4 of
			    %% Line 838
			    <Toks>
				when call 'erlang':'is_list'
				      (_4) ->
				%% Line 839
				case call 'erl_parse':'parse_term'
					 (Toks) of
				  %% Line 840
				  <{'ok',Term}> when 'true' ->
				      let <_5> =
					  apply %% Line 841
						'loc'/1
					      (%% Line 841
					       Token)
				      in  %% Line 841
					  apply 'epp_reply'/2
					      (From, {Tag,{_5,'epp',{Tag,Term}}})
				  %% Line 842
				  <{'error',_21}> when 'true' ->
				      let <_6> =
					  apply %% Line 843
						'loc'/1
					      (%% Line 843
					       Token)
				      in  %% Line 843
					  apply 'epp_reply'/2
					      (From, {'error',{_6,'epp',{'bad',Tag}}})
				  ( <_7> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_7})
				    -| ['compiler_generated'] )
				end
			    ( <_8> when 'true' ->
				  primop 'match_fail'
				      ({'try_clause',_8})
			      -| ['compiler_generated'] )
			  end
		      catch <_11,_10,_9> ->
			  let <_12> =
			      apply %% Line 847
				    'loc'/1
				  (%% Line 847
				   Token)
			  in  %% Line 847
			      apply 'epp_reply'/2
				  (From, {'error',{_12,'epp',{'bad',Tag}}})
		      %% Line 849
		      apply 'wait_req_scan'/1
			  (St)
	      %% Line 850
	      <_X_Toks,Token = {'atom',_25,Tag},From,St> when 'true' ->
		  let <_13> =
		      apply %% Line 851
			    'loc'/1
			  (%% Line 851
			   Token)
		  in  do  %% Line 851
			  apply 'epp_reply'/2
			      (From, {'error',{_13,'epp',{'bad',Tag}}})
			  %% Line 852
			  apply 'wait_req_scan'/1
			      (St)
	      ( <_17,_16,_15,_14> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_17,_16,_15,_14})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'scan_err_warn',4}}] )
      -| [{'function',{'scan_err_warn',4}}] )
'scan_define'/4 =
    %% Line 856
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <[{'(',_X_Lp}|[Mac = {Type,_X_Lm,_11}|Toks]],Def,From,St>
		  when let <_4> =
			call %% Line 857
			     'erlang':%% Line 857
				      '=:='
			    (%% Line 857
			     Type, %% Line 857
				   'atom')
		    in  let <_5> =
			    call %% Line 857
				 'erlang':%% Line 857
					  '=:='
				(%% Line 857
				 Type, %% Line 857
				       'var')
			in  %% Line 857
			    call 'erlang':'or'
				(_4, _5) ->
		  %% Line 858
		  apply 'scan_define_1'/5
		      (Toks, Mac, Def, From, St)
	      %% Line 859
	      <_X_Toks,Def,From,St> when 'true' ->
		  let <_6> =
		      apply %% Line 860
			    'loc'/1
			  (%% Line 860
			   Def)
		  in  do  %% Line 860
			  apply 'epp_reply'/2
			      (From, {'error',{_6,'epp',{'bad','define'}}})
			  %% Line 861
			  apply 'wait_req_scan'/1
			      (St)
	    end
	    -| [{'function',{'scan_define',4}}] )
      -| [{'function',{'scan_define',4}}] )
'scan_define_1'/5 =
    %% Line 863
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <[Comma = {',',_17}|Toks],Mac,_X_Def,From,St> when 'true' ->
		  let <_5> =
		      catch
			  %% Line 864
			  apply 'macro_expansion'/2
			      (Toks, Comma)
		  in  %% Line 864
		      case _5 of
			%% Line 865
			<Expansion>
			    when call 'erlang':'is_list'
				  (_5) ->
			    %% Line 866
			    apply 'scan_define_2'/5
				('none', {'none',Expansion}, Mac, From, St)
			%% Line 867
			<{'error',ErrL,What}> when 'true' ->
			    do  %% Line 868
				apply 'epp_reply'/2
				    (From, {'error',{ErrL,'epp',What}})
				%% Line 869
				apply 'wait_req_scan'/1
				    (St)
			( <_6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_6})
			  -| ['compiler_generated'] )
		      end
	      %% Line 871
	      <[{'(',_X_Lc}|Toks],Mac,Def,From,St> when 'true' ->
		  let <_7> =
		      catch
			  %% Line 872
			  apply 'macro_pars'/2
			      (Toks, [])
		  in  %% Line 872
		      case _7 of
			%% Line 873
			<{'ok',MacroDef = {As,_18}}> when 'true' ->
			    let <Len> =
				call %% Line 874
				     'erlang':%% Line 874
					      'length'
				    (%% Line 874
				     As)
			    in  %% Line 875
				apply 'scan_define_2'/5
				    (Len, MacroDef, Mac, From, St)
			%% Line 876
			<{'error',ErrL,What}> when 'true' ->
			    do  %% Line 877
				apply 'epp_reply'/2
				    (From, {'error',{ErrL,'epp',What}})
				%% Line 878
				apply 'wait_req_scan'/1
				    (St)
			%% Line 879
			<_19> when 'true' ->
			    let <_9> =
				apply %% Line 880
				      'loc'/1
				    (%% Line 880
				     Def)
			    in  do  %% Line 880
				    apply 'epp_reply'/2
					(From, {'error',{_9,'epp',{'bad','define'}}})
				    %% Line 881
				    apply 'wait_req_scan'/1
					(St)
		      end
	      %% Line 883
	      <_X_Toks,_X_Mac,Def,From,St> when 'true' ->
		  let <_11> =
		      apply %% Line 884
			    'loc'/1
			  (%% Line 884
			   Def)
		  in  do  %% Line 884
			  apply 'epp_reply'/2
			      (From, {'error',{_11,'epp',{'bad','define'}}})
			  %% Line 885
			  apply 'wait_req_scan'/1
			      (St)
	    end
	    -| [{'function',{'scan_define_1',5}}] )
      -| [{'function',{'scan_define_1',5}}] )
'scan_define_2'/5 =
    %% Line 887
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <Arity,Def,Mac = {_14,_15,Key},From,St = {'epp',_16,_17,_18,_19,_20,_21,_22,_23,Ms,_24,_25,_26,_27}> when 'true' ->
		  %% Line 888
		  case Ms of
		    %% Line 889
		    <~{Key:=Defs}~>
			when call 'erlang':'is_list'
			      (Defs) ->
			%% Line 891
			case call 'proplists':'is_defined'
				 (Arity, Defs) of
			  %% Line 892
			  <'true'> when 'true' ->
			      let <_5> =
				  apply %% Line 893
					'loc'/1
				      (%% Line 893
				       Mac)
			      in  do  %% Line 893
				      apply 'epp_reply'/2
					  (From, {'error',{_5,'epp',{'redefine',Key}}})
				      %% Line 894
				      apply 'wait_req_scan'/1
					  (St)
			  %% Line 895
			  <'false'> when 'true' ->
			      %% Line 896
			      apply 'scan_define_cont'/6
				  (From, St, Key, Defs, Arity, Def)
			  ( <_6> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_6})
			    -| ['compiler_generated'] )
			end
		    %% Line 898
		    <~{Key:=_28}~> when 'true' ->
			let <_7> =
			    apply %% Line 900
				  'loc'/1
				(%% Line 900
				 Mac)
			in  do  %% Line 900
				apply 'epp_reply'/2
				    (From, {'error',{_7,'epp',{'redefine_predef',Key}}})
				%% Line 901
				apply 'wait_req_scan'/1
				    (St)
		    %% Line 902
		    <_29> when 'true' ->
			%% Line 903
			apply 'scan_define_cont'/6
			    (From, St, Key, [], Arity, Def)
		  end
	      ( <_13,_12,_11,_10,_9> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_13,_12,_11,_10,_9})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'scan_define_2',5}}] )
      -| [{'function',{'scan_define_2',5}}] )
'scan_define_cont'/6 =
    %% Line 915
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  ( case <_0,_1,_2,_3,_4,_5> of
	      <F,St = {'epp',_31,_32,_33,_34,_35,_36,_37,_38,Ms0,_39,_40,_41,_42},M,Defs,Arity,Def> when 'true' ->
		  %% Line 916
		  case <> of
		    ( <>
			  when call 'erlang':'is_map'
				(Ms0) ->
			  let <_6> =
			      ~{M=>[{Arity,Def}|Defs]|Ms0}~
			  in  %% Line 917
			      try
				  apply 'macro_uses'/1
				      (Def)
			      of <_8> ->
				  %% Line 919
				  ( case St of
				      ( <( {'epp',_43,_44,_45,_46,_47,_48,_49,_50,_51,_rec28,_52,_53,_54}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_13> =
						case _rec28 of
						  %% Line 921
						  <~{M:=UseList}~> when 'true' ->
						      UseList
						  %% Line 922
						  <_56> when 'true' ->
						      []
						end
					    in  let <Val> =
						    [%% Line 920
						     {Arity,_8}|_13]
						in  %% Line 924
						    case <> of
						      ( <>
							    when call 'erlang':'is_map'
								  (_rec28) ->
							    let <_15> =
								~{M=>Val|_rec28}~
							    in  %% Line 925
								case St of
								  <{'epp',_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69}> when 'true' ->
								      let <_18> =
									  call 'erlang':'setelement'
									      (11, St, _15)
								      in  let <_20> =
									      call 'erlang':'setelement'
										  (10, _18, _6)
									  in  apply 'scan_toks'/2
										  (F, _20)
								  ( <_70> when 'true' ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','epp'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
							-| ['compiler_generated'] )
						      ( <> when 'true' ->
							    ( primop 'match_fail'
								  ({'badmap',_rec28})
							      -| [{'eval_failure','badmap'}] )
							-| ['compiler_generated'] )
						    end
					-| ['compiler_generated'] )
				      ( <_55> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','epp'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      catch <_24,_23,_22> ->
				  %% Line 927
				  case <_24,_23,_22> of
				    <( 'throw'
				       -| ['compiler_generated'] ),( {( 'error'
									-| ['compiler_generated'] ),Line,Reason}
								     -| ['compiler_generated'] ),_71> when 'true' ->
					do  %% Line 928
					    apply 'epp_reply'/2
						(F, {'error',{Line,'epp',Reason}})
					    %% Line 929
					    apply 'wait_req_scan'/1
						(St)
				    ( <_73,_74,_75> when 'true' ->
					  primop 'raise'
					      (_75, _74)
				      -| ['compiler_generated'] )
				  end
		      -| ['compiler_generated'] )
		    ( <> when 'true' ->
			  ( primop 'match_fail'
				({'badmap',Ms0})
			    -| [{'eval_failure','badmap'}] )
		      -| ['compiler_generated'] )
		  end
	      ( <_30,_29,_28,_27,_26,_25> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_30,_29,_28,_27,_26,_25})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'scan_define_cont',6}}] )
      -| [{'function',{'scan_define_cont',6}}] )
'macro_uses'/1 =
    %% Line 932
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'macro_uses',1}}] ) of
	      <{_X_Args,Tokens}> when 'true' ->
		  let <Uses0> =
		      apply %% Line 933
			    'macro_ref'/1
			  (%% Line 933
			   Tokens)
		  in  %% Line 934
		      call 'lists':'usort'
			  (Uses0)
	      ( <_2> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_2})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'macro_uses',1}}] )
      -| [{'function',{'macro_uses',1}}] )
'macro_ref'/1 =
    %% Line 936
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'macro_ref',1}}] ) of
	      <[]> when 'true' ->
		  %% Line 937
		  []
	      %% Line 938
	      <[{'?',_8}|[{'?',_9}|Rest]]> when 'true' ->
		  %% Line 939
		  apply 'macro_ref'/1
		      (Rest)
	      %% Line 940
	      <[{'?',_10}|[Atom = {'atom',_11,A}|Rest]]> when 'true' ->
		  let <Lm> =
		      apply %% Line 941
			    'loc'/1
			  (%% Line 941
			   Atom)
		  in  let <Arity> =
			  apply %% Line 942
				'count_args'/3
			      (%% Line 942
			       Rest, %% Line 942
				     Lm, %% Line 942
					 A)
		      in  let <_3> =
			      apply %% Line 943
				    'macro_ref'/1
				  (%% Line 943
				   Rest)
			  in  %% Line 943
			      [{A,Arity}|_3]
	      %% Line 944
	      <[{'?',_12}|[Var = {'var',_13,A}|Rest]]> when 'true' ->
		  let <Lm> =
		      apply %% Line 945
			    'loc'/1
			  (%% Line 945
			   Var)
		  in  let <Arity> =
			  apply %% Line 946
				'count_args'/3
			      (%% Line 946
			       Rest, %% Line 946
				     Lm, %% Line 946
					 A)
		      in  let <_6> =
			      apply %% Line 947
				    'macro_ref'/1
				  (%% Line 947
				   Rest)
			  in  %% Line 947
			      [{A,Arity}|_6]
	      %% Line 948
	      <[_X_Token|Rest]> when 'true' ->
		  %% Line 949
		  apply 'macro_ref'/1
		      (Rest)
	      ( <_7> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_7})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'macro_ref',1}}] )
      -| [{'function',{'macro_ref',1}}] )
'scan_undef'/4 =
    %% Line 953
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <[{'(',_X_Llp}|[{'atom',_X_Lm,M}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],_X_Undef,From,St> when 'true' ->
		  %% Line 954
		  ( case St of
		      ( <( {'epp',_29,_30,_31,_32,_33,_34,_35,_36,_rec30,_37,_38,_39,_40}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <Macs> =
				call 'maps':'remove'
				    (M, _rec30)
			    in  %% Line 955
				( case St of
				    ( <( {'epp',_42,_43,_44,_45,_46,_47,_48,_49,_50,_rec31,_51,_52,_53}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <Uses> =
					      call 'maps':'remove'
						  (M, _rec31)
					  in  %% Line 956
					      case St of
						<{'epp',_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67}> when 'true' ->
						    let <_11> =
							call 'erlang':'setelement'
							    (11, St, Uses)
						    in  let <_13> =
							    call 'erlang':'setelement'
								(10, _11, Macs)
							in  apply 'scan_toks'/2
								(From, _13)
						( <_68> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','epp'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
				      -| ['compiler_generated'] )
				    ( <_54> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','epp'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_41> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','epp'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 957
	      <[{'(',_X_Llp}|[{'var',_X_Lm,M}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],_X_Undef,From,St> when 'true' ->
		  %% Line 958
		  ( case St of
		      ( <( {'epp',_69,_70,_71,_72,_73,_74,_75,_76,_rec33,_77,_78,_79,_80}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <Macs> =
				call 'maps':'remove'
				    (M, _rec33)
			    in  %% Line 959
				( case St of
				    ( <( {'epp',_82,_83,_84,_85,_86,_87,_88,_89,_90,_rec34,_91,_92,_93}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <Uses> =
					      call 'maps':'remove'
						  (M, _rec34)
					  in  %% Line 960
					      case St of
						<{'epp',_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107}> when 'true' ->
						    let <_21> =
							call 'erlang':'setelement'
							    (11, St, Uses)
						    in  let <_23> =
							    call 'erlang':'setelement'
								(10, _21, Macs)
							in  apply 'scan_toks'/2
								(From, _23)
						( <_108> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','epp'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
				      -| ['compiler_generated'] )
				    ( <_94> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','epp'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_81> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','epp'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 961
	      <_X_Toks,Undef,From,St> when 'true' ->
		  let <_24> =
		      apply %% Line 962
			    'loc'/1
			  (%% Line 962
			   Undef)
		  in  do  %% Line 962
			  apply 'epp_reply'/2
			      (From, {'error',{_24,'epp',{'bad','undef'}}})
			  %% Line 963
			  apply 'wait_req_scan'/1
			      (St)
	    end
	    -| [{'function',{'scan_undef',4}}] )
      -| [{'function',{'scan_undef',4}}] )
'scan_include'/4 =
    %% Line 967
    ( fun (_0,_1,_2,_3) ->
	  let <Tokens> =
	      apply %% Line 968
		    'coalesce_strings'/1
		  (_0)
	  in  %% Line 969
	      apply 'scan_include1'/4
		  (Tokens, _1, _2, _3)
      -| [{'function',{'scan_include',4}}] )
'scan_include1'/4 =
    %% Line 971
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <[{'(',_X_Llp}|[{'string',_X_Lf,NewName0}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],Inc,%% Line 972
												From,%% Line 972
												     St> when 'true' ->
		  let <NewName> =
		      apply %% Line 973
			    'expand_var'/1
			  (%% Line 973
			   NewName0)
		  in  %% Line 974
		      apply 'enter_file'/4
			  (NewName, Inc, From, St)
	      %% Line 975
	      <_X_Toks,Inc,From,St> when 'true' ->
		  let <_5> =
		      apply %% Line 976
			    'loc'/1
			  (%% Line 976
			   Inc)
		  in  do  %% Line 976
			  apply 'epp_reply'/2
			      (From, {'error',{_5,'epp',{'bad','include'}}})
			  %% Line 977
			  apply 'wait_req_scan'/1
			      (St)
	    end
	    -| [{'function',{'scan_include1',4}}] )
      -| [{'function',{'scan_include1',4}}] )
'expand_lib_dir'/1 =
    %% Line 984
    ( fun (_0) ->
	  %% Line 985
	  try
	      %% Line 986
	      case call 'filename':'split'
		       (( _0
			  -| [{'function',{'expand_lib_dir',1}}] )) of
		<[App|Path]> when 'true' ->
		    let <_2> =
			call %% Line 987
			     'erlang':%% Line 987
				      'list_to_atom'
			    (%% Line 987
			     App)
		    in  let <LibDir> =
			    call %% Line 987
				 'code':%% Line 987
					'lib_dir'
				(_2)
			in  let <_4> =
				apply %% Line 988
				      'fname_join'/1
				    (%% Line 988
				     [LibDir|Path])
			    in  %% Line 988
				{'ok',_4}
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_1})
		  -| ['compiler_generated'] )
	      end
	  of <_5> ->
	      _5
	  catch <_8,_7,_6> ->
	      %% Line 991
	      'error'
      -| [{'function',{'expand_lib_dir',1}}] )
'scan_include_lib'/4 =
    %% Line 994
    ( fun (_0,_1,_2,_3) ->
	  let <Tokens> =
	      apply %% Line 995
		    'coalesce_strings'/1
		  (_0)
	  in  %% Line 996
	      apply 'scan_include_lib1'/4
		  (Tokens, _1, _2, _3)
      -| [{'function',{'scan_include_lib',4}}] )
'scan_include_lib1'/4 =
    %% Line 998
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <[{'(',_X_Llp}|[{'string',_X_Lf,_X_NewName0}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],%% Line 999
											       Inc,%% Line 999
												   From,%% Line 999
													St = %% Line 999
													     {'epp',_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42}>
		  when %% Line 1000
		    ( try
			  let <_8> =
			      call 'erlang':'element'
				  (8, St)
			  in  let <_9> =
				  call 'erlang':'length'
				      (_8)
			      in  let <_10> =
				      call 'erlang':'>='
					  (_9, 8)
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (( 'true'
					       -| ['compiler_generated'] ), _10)
					-| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  let <_11> =
		      apply %% Line 1001
			    'loc'/1
			  (%% Line 1001
			   Inc)
		  in  do  %% Line 1001
			  apply 'epp_reply'/2
			      (From, {'error',{_11,'epp',{'depth',[105|[110|[99|[108|[117|[100|[101|[95|[108|[105|[98]]]]]]]]]]]}}})
			  %% Line 1002
			  apply 'wait_req_scan'/1
			      (St)
	      %% Line 1003
	      <[{'(',_X_Llp}|[{'string',_X_Lf,NewName0}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],%% Line 1004
											    Inc,%% Line 1004
												From,%% Line 1004
												     St> when 'true' ->
		  let <NewName> =
		      apply %% Line 1005
			    'expand_var'/1
			  (%% Line 1005
			   NewName0)
		  in  %% Line 1006
		      ( case St of
			  ( <( {'epp',_43,_rec36,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54}
			       -| ['compiler_generated'] )> when 'true' ->
				let <Loc> =
				    apply 'start_loc'/1
					(_rec36)
				in  %% Line 1007
				    ( case St of
					( <( {'epp',_56,_57,_58,_59,_60,_61,_62,_rec37,_63,_64,_65,_66,_67}
					     -| ['compiler_generated'] )> when 'true' ->
					      case call 'file':'path_open'
						       (_rec37, NewName, ['read']) of
						%% Line 1008
						<{'ok',NewF,Pname}> when 'true' ->
						    let <_18> =
							apply %% Line 1009
							      'enter_file2'/5
							    (%% Line 1009
							     NewF, %% Line 1009
								   Pname, %% Line 1009
									  From, %% Line 1009
										St, %% Line 1009
										    Loc)
						    in  %% Line 1009
							apply 'wait_req_scan'/1
							    (_18)
						%% Line 1010
						<{'error',_X_E1}> when 'true' ->
						    %% Line 1011
						    case apply 'expand_lib_dir'/1
							     (NewName) of
						      %% Line 1012
						      <{'ok',Header}> when 'true' ->
							  %% Line 1013
							  case call 'file':'open'
								   (Header, ['read']) of
							    %% Line 1014
							    <{'ok',NewF}> when 'true' ->
								let <_19> =
								    apply %% Line 1015
									  'enter_file2'/5
									(%% Line 1015
									 NewF, %% Line 1015
									       Header, %% Line 1015
										       From, %% Line 1016
											     St, %% Line 1016
												 Loc)
								in  %% Line 1015
								    apply 'wait_req_scan'/1
									(_19)
							    %% Line 1017
							    <{'error',_X_E2}> when 'true' ->
								let <_20> =
								    apply %% Line 1019
									  'loc'/1
									(%% Line 1019
									 Inc)
								in  do  %% Line 1018
									apply 'epp_reply'/2
									    (From, %% Line 1019
										   {'error',{_20,'epp',%% Line 1020
												       {'include','lib',NewName}}})
									%% Line 1021
									apply 'wait_req_scan'/1
									    (St)
							    ( <_21> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_21})
							      -| ['compiler_generated'] )
							  end
						      %% Line 1023
						      <'error'> when 'true' ->
							  let <_22> =
							      apply %% Line 1024
								    'loc'/1
								  (%% Line 1024
								   Inc)
							  in  do  %% Line 1024
								  apply 'epp_reply'/2
								      (From, {'error',{_22,'epp',%% Line 1025
												 {'include','lib',NewName}}})
								  %% Line 1026
								  apply 'wait_req_scan'/1
								      (St)
						      ( <_23> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_23})
							-| ['compiler_generated'] )
						    end
						( <_24> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_24})
						  -| ['compiler_generated'] )
					      end
					  -| ['compiler_generated'] )
					( <_68> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','epp'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <_55> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','epp'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      %% Line 1029
	      <_X_Toks,Inc,From,St> when 'true' ->
		  let <_25> =
		      apply %% Line 1030
			    'loc'/1
			  (%% Line 1030
			   Inc)
		  in  do  %% Line 1030
			  apply 'epp_reply'/2
			      (From, {'error',{_25,'epp',{'bad','include_lib'}}})
			  %% Line 1031
			  apply 'wait_req_scan'/1
			      (St)
	    end
	    -| [{'function',{'scan_include_lib1',4}}] )
      -| [{'function',{'scan_include_lib1',4}}] )
'scan_ifdef'/4 =
    %% Line 1038
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <[{'(',_X_Llp}|[{'atom',_X_Lm,M}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],_X_IfD,From,St> when 'true' ->
		  %% Line 1039
		  ( case St of
		      ( <( {'epp',_27,_28,_29,_30,_31,_32,_33,_34,_rec38,_35,_36,_37,_38}
			   -| ['compiler_generated'] )> when 'true' ->
			    case _rec38 of
			      %% Line 1040
			      <~{M:=_X_Def}~> when 'true' ->
				  %% Line 1041
				  ( case St of
				      ( <( {'epp',_40,_41,_42,_43,_44,_rec41,_45,_46,_47,_48,_49,_50,_51}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_rec39> =
						['ifdef'|_rec41]
					    in  case St of
						  <{'epp',_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65}> when 'true' ->
						      let <_11> =
							  call 'erlang':'setelement'
							      (7, St, _rec39)
						      in  apply 'scan_toks'/2
							      (From, _11)
						  ( <_66> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','epp'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					-| ['compiler_generated'] )
				      ( <_52> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','epp'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 1042
			      <_67> when 'true' ->
				  %% Line 1043
				  apply 'skip_toks'/3
				      (From, St, ['ifdef'])
			    end
			-| ['compiler_generated'] )
		      ( <_39> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','epp'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 1045
	      <[{'(',_X_Llp}|[{'var',_X_Lm,M}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],_X_IfD,From,St> when 'true' ->
		  %% Line 1046
		  ( case St of
		      ( <( {'epp',_68,_69,_70,_71,_72,_73,_74,_75,_rec42,_76,_77,_78,_79}
			   -| ['compiler_generated'] )> when 'true' ->
			    case _rec42 of
			      %% Line 1047
			      <~{M:=_X_Def}~> when 'true' ->
				  %% Line 1048
				  ( case St of
				      ( <( {'epp',_81,_82,_83,_84,_85,_rec45,_86,_87,_88,_89,_90,_91,_92}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_rec43> =
						['ifdef'|_rec45]
					    in  case St of
						  <{'epp',_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106}> when 'true' ->
						      let <_20> =
							  call 'erlang':'setelement'
							      (7, St, _rec43)
						      in  apply 'scan_toks'/2
							      (From, _20)
						  ( <_107> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','epp'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					-| ['compiler_generated'] )
				      ( <_93> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','epp'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 1049
			      <_108> when 'true' ->
				  %% Line 1050
				  apply 'skip_toks'/3
				      (From, St, ['ifdef'])
			    end
			-| ['compiler_generated'] )
		      ( <_80> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','epp'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 1052
	      <_X_Toks,IfDef,From,St> when 'true' ->
		  let <_22> =
		      apply %% Line 1053
			    'loc'/1
			  (%% Line 1053
			   IfDef)
		  in  do  %% Line 1053
			  apply 'epp_reply'/2
			      (From, {'error',{_22,'epp',{'bad','ifdef'}}})
			  %% Line 1054
			  apply 'wait_req_skip'/2
			      (St, ['ifdef'])
	    end
	    -| [{'function',{'scan_ifdef',4}}] )
      -| [{'function',{'scan_ifdef',4}}] )
'scan_ifndef'/4 =
    %% Line 1056
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <[{'(',_X_Llp}|[{'atom',_X_Lm,M}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],_X_IfnD,From,St> when 'true' ->
		  %% Line 1057
		  ( case St of
		      ( <( {'epp',_27,_28,_29,_30,_31,_32,_33,_34,_rec46,_35,_36,_37,_38}
			   -| ['compiler_generated'] )> when 'true' ->
			    case _rec46 of
			      %% Line 1058
			      <~{M:=_X_Def}~> when 'true' ->
				  %% Line 1059
				  apply 'skip_toks'/3
				      (From, St, ['ifndef'])
			      %% Line 1060
			      <_40> when 'true' ->
				  %% Line 1061
				  ( case St of
				      ( <( {'epp',_41,_42,_43,_44,_45,_rec49,_46,_47,_48,_49,_50,_51,_52}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_rec47> =
						['ifndef'|_rec49]
					    in  case St of
						  <{'epp',_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66}> when 'true' ->
						      let <_11> =
							  call 'erlang':'setelement'
							      (7, St, _rec47)
						      in  apply 'scan_toks'/2
							      (From, _11)
						  ( <_67> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','epp'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					-| ['compiler_generated'] )
				      ( <_53> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','epp'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_39> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','epp'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 1063
	      <[{'(',_X_Llp}|[{'var',_X_Lm,M}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],_X_IfnD,From,St> when 'true' ->
		  %% Line 1064
		  ( case St of
		      ( <( {'epp',_68,_69,_70,_71,_72,_73,_74,_75,_rec50,_76,_77,_78,_79}
			   -| ['compiler_generated'] )> when 'true' ->
			    case _rec50 of
			      %% Line 1065
			      <~{M:=_X_Def}~> when 'true' ->
				  %% Line 1066
				  apply 'skip_toks'/3
				      (From, St, ['ifndef'])
			      %% Line 1067
			      <_81> when 'true' ->
				  %% Line 1068
				  ( case St of
				      ( <( {'epp',_82,_83,_84,_85,_86,_rec53,_87,_88,_89,_90,_91,_92,_93}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_rec51> =
						['ifndef'|_rec53]
					    in  case St of
						  <{'epp',_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107}> when 'true' ->
						      let <_20> =
							  call 'erlang':'setelement'
							      (7, St, _rec51)
						      in  apply 'scan_toks'/2
							      (From, _20)
						  ( <_108> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','epp'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					-| ['compiler_generated'] )
				      ( <_94> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','epp'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_80> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','epp'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 1070
	      <_X_Toks,IfnDef,From,St> when 'true' ->
		  let <_22> =
		      apply %% Line 1071
			    'loc'/1
			  (%% Line 1071
			   IfnDef)
		  in  do  %% Line 1071
			  apply 'epp_reply'/2
			      (From, {'error',{_22,'epp',{'bad','ifndef'}}})
			  %% Line 1072
			  apply 'wait_req_skip'/2
			      (St, ['ifndef'])
	    end
	    -| [{'function',{'scan_ifndef',4}}] )
      -| [{'function',{'scan_ifndef',4}}] )
'scan_else'/4 =
    %% Line 1078
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <[{'dot',_X_Ld}|[]],Else,From,St> when 'true' ->
		  %% Line 1079
		  ( case St of
		      ( <( {'epp',_20,_21,_22,_23,_24,_rec54,_25,_26,_27,_28,_29,_30,_31}
			   -| ['compiler_generated'] )> when 'true' ->
			    case _rec54 of
			      %% Line 1080
			      <['else'|Cis]> when 'true' ->
				  let <_6> =
				      apply %% Line 1081
					    'loc'/1
					  (%% Line 1081
					   Else)
				  in  do  %% Line 1081
					  apply 'epp_reply'/2
					      (From, {'error',{_6,%% Line 1082
								  'epp',%% Line 1082
									{'illegal',[114|[101|[112|[101|[97|[116|[101|[100]]]]]]]],'else'}}})
					  %% Line 1083
					  case St of
					    <{'epp',_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45}> when 'true' ->
						let <_9> =
						    call 'erlang':'setelement'
							(7, St, Cis)
						in  apply 'wait_req_skip'/2
							(_9, ['else'])
					    ( <_46> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','epp'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
			      %% Line 1084
			      <[_X_I|Cis]> when 'true' ->
				  %% Line 1085
				  case St of
				    <{'epp',_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59}> when 'true' ->
					let <_12> =
					    call 'erlang':'setelement'
						(7, St, Cis)
					in  apply 'skip_toks'/3
						(From, _12, ['else'])
				    ( <_60> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','epp'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      %% Line 1086
			      <[]> when 'true' ->
				  let <_13> =
				      apply %% Line 1087
					    'loc'/1
					  (%% Line 1087
					   Else)
				  in  do  %% Line 1087
					  apply 'epp_reply'/2
					      (From, {'error',{_13,'epp',%% Line 1088
									 {'illegal',[117|[110|[98|[97|[108|[97|[110|[99|[101|[100]]]]]]]]]],'else'}}})
					  %% Line 1089
					  apply 'wait_req_scan'/1
					      (St)
			      ( <_14> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_14})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_32> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','epp'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 1091
	      <_X_Toks,Else,From,St> when 'true' ->
		  let <_15> =
		      apply %% Line 1092
			    'loc'/1
			  (%% Line 1092
			   Else)
		  in  do  %% Line 1092
			  apply 'epp_reply'/2
			      (From, {'error',{_15,'epp',{'bad','else'}}})
			  %% Line 1093
			  apply 'wait_req_scan'/1
			      (St)
	    end
	    -| [{'function',{'scan_else',4}}] )
      -| [{'function',{'scan_else',4}}] )
'scan_if'/4 =
    %% Line 1098
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <Toks = [{'(',_24}|_25],If,From,St> when 'true' ->
		  %% Line 1099
		  try
		      apply 'eval_if'/2
			  (Toks, St)
		  of <_4> ->
		      case _4 of
			%% Line 1100
			<'true'> when 'true' ->
			    %% Line 1101
			    ( case St of
				( <( {'epp',_26,_27,_28,_29,_30,_rec59,_31,_32,_33,_34,_35,_36,_37}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_rec57> =
					  ['if'|_rec59]
				      in  case St of
					    <{'epp',_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51}> when 'true' ->
						let <_10> =
						    call 'erlang':'setelement'
							(7, St, _rec57)
						in  apply 'scan_toks'/2
							(From, _10)
					    ( <_52> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','epp'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				  -| ['compiler_generated'] )
				( <_38> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','epp'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			%% Line 1102
			<_53> when 'true' ->
			    %% Line 1103
			    apply 'skip_toks'/3
				(From, St, ['if'])
		      end
		  catch <_14,_13,_12> ->
		      %% Line 1105
		      case <_14,_13,_12> of
			<( 'throw'
			   -| ['compiler_generated'] ),Error0,_54> when 'true' ->
			    let <_17> =
				case %% Line 1106
				     Error0 of
				  %% Line 1107
				  <{_55,'erl_parse',_56}> when 'true' ->
				      %% Line 1108
				      {'error',Error0}
				  %% Line 1109
				  <_57> when 'true' ->
				      let <_15> =
					  apply %% Line 1110
						'loc'/1
					      (%% Line 1110
					       If)
				      in  %% Line 1110
					  {'error',{_15,'epp',Error0}}
				end
			    in  do  %% Line 1112
				    apply 'epp_reply'/2
					(From, _17)
				    %% Line 1113
				    apply 'wait_req_skip'/2
					(St, ['if'])
			( <_58,_59,_60> when 'true' ->
			      primop 'raise'
				  (_60, _59)
			  -| ['compiler_generated'] )
		      end
	      %% Line 1115
	      <_X_Toks,If,From,St> when 'true' ->
		  let <_19> =
		      apply %% Line 1116
			    'loc'/1
			  (%% Line 1116
			   If)
		  in  do  %% Line 1116
			  apply 'epp_reply'/2
			      (From, {'error',{_19,'epp',{'bad','if'}}})
			  %% Line 1117
			  apply 'wait_req_skip'/2
			      (St, ['if'])
	    end
	    -| [{'function',{'scan_if',4}}] )
      -| [{'function',{'scan_if',4}}] )
'eval_if'/2 =
    %% Line 1119
    ( fun (_0,_1) ->
	  let <Toks> =
	      apply %% Line 1120
		    'expand_macros'/2
		  (_0, _1)
	  in  %% Line 1121
	      case call 'erl_parse':'parse_exprs'
		       (Toks) of
		%% Line 1122
		<{'ok',Es0}> when 'true' ->
		    let <Es> =
			apply %% Line 1125
			      'rewrite_expr'/2
			    (Es0, _1)
		    in  do  %% Line 1126
			    apply 'assert_guard_expr'/1
				(Es)
			    let <Bs> =
				call %% Line 1127
				     'erl_eval':%% Line 1127
						'new_bindings'
				    ()
			    in  let <LocalFun> =
				    fun (_9,_8) ->
					%% Line 1129
					call 'erlang':'error'
					    ('badarg')
				in  %% Line 1131
				    try
					call 'erl_eval':'exprs'
					    (Es, Bs, {'value',LocalFun})
				    of <_13> ->
					case _13 of
					  %% Line 1132
					  <{'value',Res,_20}> when 'true' ->
					      %% Line 1133
					      Res
					  ( <_14> when 'true' ->
						primop 'match_fail'
						    ({'try_clause',_14})
					    -| ['compiler_generated'] )
					end
				    catch <_17,_16,_15> ->
					%% Line 1136
					'false'
		%% Line 1123
		<{'error',E}> when 'true' ->
		    call 'erlang':'throw'
			(E)
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_3})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'eval_if',2}}] )
'assert_guard_expr'/1 =
    %% Line 1139
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'assert_guard_expr',1}}] ) of
	      <[E0|[]]> when 'true' ->
		  let <E> =
		      apply %% Line 1140
			    'rewrite_expr'/2
			  (%% Line 1140
			   E0, %% Line 1140
			       'none')
		  in  %% Line 1141
		      case call 'erl_lint':'is_guard_expr'
			       (E) of
			%% Line 1142
			<'false'> when 'true' ->
			    %% Line 1143
			    call 'erlang':'throw'
				({'bad','if'})
			%% Line 1144
			<'true'> when 'true' ->
			    %% Line 1145
			    'ok'
			( <_2> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_2})
			  -| ['compiler_generated'] )
		      end
	      %% Line 1147
	      <_4> when 'true' ->
		  %% Line 1148
		  call 'erlang':'throw'
		      ({'bad','if'})
	    end
	    -| [{'function',{'assert_guard_expr',1}}] )
      -| [{'function',{'assert_guard_expr',1}}] )
'rewrite_expr'/2 =
    %% Line 1156
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <{'call',_19,{'atom',_20,'defined'},[N0|[]]},{'epp',_21,_22,_23,_24,_25,_26,_27,_28,Macs,_29,_30,_31,_32}> when 'true' ->
		  let <_3> =
		      case %% Line 1158
			   N0 of
			%% Line 1159
			<{'var',_33,N1}> when 'true' ->
			    N1
			%% Line 1160
			<{'atom',_34,N1}> when 'true' ->
			    N1
			%% Line 1161
			<_35> when 'true' ->
			    call 'erlang':'throw'
				({'bad','if'})
		      end
		  in  let <_5> =
			  call 'erlang':'is_map_key'
			      (_3, %% Line 1163
				   Macs)
		      in  %% Line 1163
			  {'atom',0,_5}
	      %% Line 1164
	      <{'call',_36,{'atom',_37,Name},As0},'none'> when 'true' ->
		  let <As> =
		      apply %% Line 1165
			    'rewrite_expr'/2
			  (%% Line 1165
			   As0, %% Line 1165
				'none')
		  in  let <Arity> =
			  call %% Line 1166
			       'erlang':%% Line 1166
					'length'
			      (%% Line 1166
			       As)
		      in  let <_11> =
			      case %% Line 1167
				   call 'erl_internal':'bif'
				       (Name, Arity) of
				%% Line 1167
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_9> =
					  call %% Line 1168
					       'erl_internal':%% Line 1168
							      'guard_bif'
					      (%% Line 1168
					       Name, %% Line 1168
						     Arity)
				      in  %% Line 1168
					  call 'erlang':'not'
					      (_9)
				  -| ['compiler_generated'] )
				%% Line 1167
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
				%% Line 1167
				( <_8> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),_8}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 1167
			      case _11 of
				%% Line 1169
				<'false'> when 'true' ->
				    %% Line 1173
				    apply 'to_conses'/1
					(As)
				%% Line 1174
				<'true'> when 'true' ->
				    %% Line 1176
				    call 'erlang':'throw'
					({'bad','if'})
				( <_12> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_12})
				  -| ['compiler_generated'] )
			      end
	      %% Line 1178
	      <[H|T],St> when 'true' ->
		  let <_13> =
		      apply %% Line 1179
			    'rewrite_expr'/2
			  (%% Line 1179
			   H, %% Line 1179
			      St)
		  in  let <_14> =
			  apply %% Line 1179
				'rewrite_expr'/2
			      (%% Line 1179
			       T, %% Line 1179
				  St)
		      in  %% Line 1179
			  [_13|_14]
	      %% Line 1180
	      <Tuple,St>
		  when call 'erlang':'is_tuple'
			(Tuple) ->
		  let <_15> =
		      call %% Line 1181
			   'erlang':%% Line 1181
				    'tuple_to_list'
			  (%% Line 1181
			   Tuple)
		  in  let <_16> =
			  apply %% Line 1181
				'rewrite_expr'/2
			      (_15, %% Line 1181
				    St)
		      in  %% Line 1181
			  call 'erlang':'list_to_tuple'
			      (_16)
	      %% Line 1182
	      <Other,_38> when 'true' ->
		  %% Line 1183
		  Other
	    end
	    -| [{'function',{'rewrite_expr',2}}] )
      -| [{'function',{'rewrite_expr',2}}] )
'to_conses'/1 =
    %% Line 1185
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'to_conses',1}}] ) of
	      <[H|T]> when 'true' ->
		  let <_1> =
		      apply %% Line 1186
			    'to_conses'/1
			  (%% Line 1186
			   T)
		  in  %% Line 1186
		      {'cons',0,H,_1}
	      %% Line 1187
	      <[]> when 'true' ->
		  %% Line 1188
		  {'nil',0}
	      ( <_2> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_2})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'to_conses',1}}] )
      -| [{'function',{'to_conses',1}}] )
'scan_elif'/4 =
    %% Line 1194
    ( fun (_0,_1,_2,_3) ->
	  %% Line 1195
	  ( case _3 of
	      ( <( {'epp',_19,_20,_21,_22,_23,_rec60,_24,_25,_26,_27,_28,_29,_30}
		   -| ['compiler_generated'] )> when 'true' ->
		    case _rec60 of
		      %% Line 1196
		      <['else'|Cis]> when 'true' ->
			  let <_6> =
			      apply %% Line 1197
				    'loc'/1
				  (_1)
			  in  do  %% Line 1197
				  apply 'epp_reply'/2
				      (_2, {'error',{_6,%% Line 1198
							'epp',%% Line 1198
							      {'illegal',[117|[110|[98|[97|[108|[97|[110|[99|[101|[100]]]]]]]]]],'elif'}}})
				  %% Line 1199
				  case _3 of
				    <{'epp',_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44}> when 'true' ->
					let <_9> =
					    call 'erlang':'setelement'
						(7, _3, Cis)
					in  apply 'wait_req_skip'/2
						(_9, ['else'])
				    ( <_45> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','epp'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
		      %% Line 1200
		      <[_X_I|Cis]> when 'true' ->
			  %% Line 1201
			  case _3 of
			    <{'epp',_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58}> when 'true' ->
				let <_12> =
				    call 'erlang':'setelement'
					(7, _3, Cis)
				in  apply 'skip_toks'/3
					(_2, _12, ['elif'])
			    ( <_59> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','epp'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      %% Line 1202
		      <[]> when 'true' ->
			  let <_13> =
			      apply %% Line 1203
				    'loc'/1
				  (_1)
			  in  do  %% Line 1203
				  apply 'epp_reply'/2
				      (_2, {'error',{_13,'epp',%% Line 1204
							       {'illegal',[117|[110|[98|[97|[108|[97|[110|[99|[101|[100]]]]]]]]]],'elif'}}})
				  %% Line 1205
				  apply 'wait_req_scan'/1
				      (_3)
		      ( <_14> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_14})
			-| ['compiler_generated'] )
		    end
		-| ['compiler_generated'] )
	      ( <_31> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','epp'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'scan_elif',4}}] )
'scan_endif'/4 =
    %% Line 1211
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <[{'dot',_X_Ld}|[]],Endif,From,St> when 'true' ->
		  %% Line 1212
		  ( case St of
		      ( <( {'epp',_16,_17,_18,_19,_20,_rec63,_21,_22,_23,_24,_25,_26,_27}
			   -| ['compiler_generated'] )> when 'true' ->
			    case _rec63 of
			      %% Line 1213
			      <[_X_I|Cis]> when 'true' ->
				  %% Line 1214
				  case St of
				    <{'epp',_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41}> when 'true' ->
					let <_8> =
					    call 'erlang':'setelement'
						(7, St, Cis)
					in  apply 'scan_toks'/2
						(From, _8)
				    ( <_42> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','epp'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      %% Line 1215
			      <[]> when 'true' ->
				  let <_9> =
				      apply %% Line 1216
					    'loc'/1
					  (%% Line 1216
					   Endif)
				  in  do  %% Line 1216
					  apply 'epp_reply'/2
					      (From, {'error',{_9,'epp',%% Line 1217
									{'illegal',[117|[110|[98|[97|[108|[97|[110|[99|[101|[100]]]]]]]]]],'endif'}}})
					  %% Line 1218
					  apply 'wait_req_scan'/1
					      (St)
			      ( <_10> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_10})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_28> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','epp'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 1220
	      <_X_Toks,Endif,From,St> when 'true' ->
		  let <_11> =
		      apply %% Line 1221
			    'loc'/1
			  (%% Line 1221
			   Endif)
		  in  do  %% Line 1221
			  apply 'epp_reply'/2
			      (From, {'error',{_11,'epp',{'bad','endif'}}})
			  %% Line 1222
			  apply 'wait_req_scan'/1
			      (St)
	    end
	    -| [{'function',{'scan_endif',4}}] )
      -| [{'function',{'scan_endif',4}}] )
'scan_file'/4 =
    %% Line 1228
    ( fun (_0,_1,_2,_3) ->
	  let <Tokens> =
	      apply %% Line 1229
		    'coalesce_strings'/1
		  (_0)
	  in  %% Line 1230
	      apply 'scan_file1'/4
		  (Tokens, _1, _2, _3)
      -| [{'function',{'scan_file',4}}] )
'scan_file1'/4 =
    %% Line 1232
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <[{'(',_X_Llp}|[{'string',_X_Ls,Name}|[{',',_X_Lc}|[{'integer',_X_Li,Ln}|[{')',_X_Lrp}|%% Line 1233
												     [{'dot',_X_Ld}|[]]]]]]],%% Line 1233
															     Tf,%% Line 1233
																From,%% Line 1233
																     St> when 'true' ->
		  let <Anno> =
		      call %% Line 1234
			   'erl_anno':%% Line 1234
				      'new'
			  (%% Line 1234
			   Ln)
		  in  let <_5> =
			  apply %% Line 1235
				'loc'/1
			      (%% Line 1235
			       Tf)
		      in  do  %% Line 1235
			      apply 'enter_file_reply'/5
				  (From, Name, Anno, _5, 'generated')
			      %% Line 1236
			      ( case St of
				  ( <( {'epp',_33,_34,_35,_36,_37,_38,_39,_40,_rec65,_41,_42,_43,_44}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_9> =
					    apply %% Line 1237
						  'line1'/0
						()
					in  %% Line 1237
					    case <> of
					      ( <>
						    when call 'erlang':'is_map'
							  (_rec65) ->
						    let <_10> =
							~{'FILE':={'none',[{'string',_9,Name}|[]]}|_rec65}~
						    in  let <Locf> =
							    apply %% Line 1238
								  'loc'/1
								(%% Line 1238
								 Tf)
							in  %% Line 1239
							    ( case St of
								( <( {'epp',_46,_rec66,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57}
								     -| ['compiler_generated'] )> when 'true' ->
								      let <NewLoc> =
									  apply 'new_location'/3
									      (Ln, _rec66, Locf)
								      in  let <_18> =
									      call %% Line 1240
										   'erlang':%% Line 1240
											    'element'
										  (%% Line 1240
										   2, %% Line 1240
										      Tf)
									  in  let <_19> =
										  apply %% Line 1240
											'get_line'/1
										      (_18)
									      in  let <_20> =
										      call %% Line 1240
											   'erlang':%% Line 1240
												    '-'
											  (_19, %% Line 1240
												Ln)
										  in  %% Line 1240
										      ( case St of
											  ( <( {'epp',_59,_60,_rec67,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70}
											       -| ['compiler_generated'] )> when 'true' ->
												let <Delta> =
												    call 'erlang':'+'
													(_20, _rec67)
												in  %% Line 1241
												    case St of
												      <{'epp',_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84}> when 'true' ->
													  let <_23> =
													      call 'erlang':'setelement'
														  (10, St, _10)
													  in  let <_24> =
														  call 'erlang':'setelement'
														      (6, _23, Name)
													      in  let <_25> =
														      call 'erlang':'setelement'
															  (4, _24, Delta)
														  in  let <_27> =
															  call 'erlang':'setelement'
															      (3, _25, NewLoc)
														      in  apply 'wait_req_scan'/1
															      (_27)
												      ( <_85> when 'true' ->
													    ( call ( 'erlang'
														     -| ['compiler_generated'] ):( 'error'
																		   -| ['compiler_generated'] )
														  (( {'badrecord','epp'}
														     -| ['compiler_generated'] ))
													      -| ['compiler_generated'] )
													-| ['compiler_generated'] )
												    end
											    -| ['compiler_generated'] )
											  ( <_71> when 'true' ->
												( call ( 'erlang'
													 -| ['compiler_generated'] ):( 'error'
																       -| ['compiler_generated'] )
												      (( {'badrecord','epp'}
													 -| ['compiler_generated'] ))
												  -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
											end
											-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
								( <_58> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','epp'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    ( primop 'match_fail'
							  ({'badmap',_rec65})
						      -| [{'eval_failure','badmap'}] )
						-| ['compiler_generated'] )
					    end
				    -| ['compiler_generated'] )
				  ( <_45> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','epp'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
	      %% Line 1242
	      <_X_Toks,Tf,From,St> when 'true' ->
		  let <_28> =
		      apply %% Line 1243
			    'loc'/1
			  (%% Line 1243
			   Tf)
		  in  do  %% Line 1243
			  apply 'epp_reply'/2
			      (From, {'error',{_28,'epp',{'bad','file'}}})
			  %% Line 1244
			  apply 'wait_req_scan'/1
			      (St)
	    end
	    -| [{'function',{'scan_file1',4}}] )
      -| [{'function',{'scan_file1',4}}] )
'new_location'/3 =
    %% Line 1246
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <Ln,Le,Lf>
		  when call 'erlang':'is_integer'
			(Lf) ->
		  let <_3> =
		      call %% Line 1247
			   'erlang':%% Line 1247
				    '-'
			  (%% Line 1247
			   Le, %% Line 1247
			       Lf)
		  in  %% Line 1247
		      call 'erlang':'+'
			  (Ln, _3)
	      %% Line 1248
	      <Ln,{Le,_9},{Lf,_10}> when 'true' ->
		  let <_4> =
		      call %% Line 1249
			   'erlang':%% Line 1249
				    '-'
			  (%% Line 1249
			   Le, %% Line 1249
			       Lf)
		  in  let <_5> =
			  call %% Line 1249
			       'erlang':%% Line 1249
					'+'
			      (%% Line 1249
			       Ln, _4)
		      in  %% Line 1249
			  {_5,1}
	      ( <_8,_7,_6> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_8,_7,_6})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'new_location',3}}] )
      -| [{'function',{'new_location',3}}] )
'skip_toks'/3 =
    %% Line 1255
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <From,St,_@r0 = [I|Sis]> when 'true' ->
		  %% Line 1256
		  ( case St of
		      ( <( {'epp',_rec69,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56}
			   -| ['compiler_generated'] )> when 'true' ->
			    ( case St of
				( <( {'epp',_58,_rec70,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69}
				     -| ['compiler_generated'] )> when 'true' ->
				      case call 'io':'scan_erl_form'
					       (_rec69, '', _rec70) of
					%% Line 1257
					<{'ok',[{'-',_X_Lh}|[{'atom',_X_Li,'ifdef'}|_X_Toks]],Cl}> when 'true' ->
					    %% Line 1258
					    case St of
					      <{'epp',_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83}> when 'true' ->
						  let <_9> =
						      call 'erlang':'setelement'
							  (3, St, Cl)
						  in  apply 'skip_toks'/3
							  (From, _9, ['ifdef'|_@r0])
					      ( <_84> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','epp'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					%% Line 1259
					<{'ok',[{'-',_X_Lh}|[{'atom',_X_Li,'ifndef'}|_X_Toks]],Cl}> when 'true' ->
					    %% Line 1260
					    case St of
					      <{'epp',_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97}> when 'true' ->
						  let <_12> =
						      call 'erlang':'setelement'
							  (3, St, Cl)
						  in  apply 'skip_toks'/3
							  (From, _12, ['ifndef'|_@r0])
					      ( <_98> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','epp'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					%% Line 1261
					<{'ok',[{'-',_X_Lh}|[{'if',_X_Li}|_X_Toks]],Cl}> when 'true' ->
					    %% Line 1262
					    case St of
					      <{'epp',_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111}> when 'true' ->
						  let <_15> =
						      call 'erlang':'setelement'
							  (3, St, Cl)
						  in  apply 'skip_toks'/3
							  (From, _15, ['if'|_@r0])
					      ( <_112> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','epp'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					%% Line 1263
					<{'ok',[{'-',_X_Lh}|[Else = {'atom',_X_Le,'else'}|_X_Toks]],Cl}> when 'true' ->
					    %% Line 1264
					    case St of
					      <{'epp',_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125}> when 'true' ->
						  let <_18> =
						      call 'erlang':'setelement'
							  (3, St, Cl)
						  in  apply 'skip_else'/4
							  (Else, From, _18, _@r0)
					      ( <_126> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','epp'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					%% Line 1265
					<{'ok',[{'-',_X_Lh}|[Elif = {'atom',_X_Le,'elif'}|Toks]],Cl}> when 'true' ->
					    %% Line 1266
					    case St of
					      <{'epp',_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139}> when 'true' ->
						  let <_21> =
						      call 'erlang':'setelement'
							  (3, St, Cl)
						  in  apply 'skip_elif'/5
							  (Toks, Elif, From, _21, _@r0)
					      ( <_140> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','epp'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					%% Line 1267
					<{'ok',[{'-',_X_Lh}|[{'atom',_X_Le,'endif'}|_X_Toks]],Cl}> when 'true' ->
					    %% Line 1268
					    case St of
					      <{'epp',_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153}> when 'true' ->
						  let <_24> =
						      call 'erlang':'setelement'
							  (3, St, Cl)
						  in  apply 'skip_toks'/3
							  (From, _24, Sis)
					      ( <_154> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','epp'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					%% Line 1269
					<{'ok',_X_Toks,Cl}> when 'true' ->
					    %% Line 1270
					    case St of
					      <{'epp',_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167}> when 'true' ->
						  let <_27> =
						      call 'erlang':'setelement'
							  (3, St, Cl)
						  in  apply 'skip_toks'/3
							  (From, _27, _@r0)
					      ( <_168> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','epp'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					%% Line 1271
					<{'error',E,Cl}> when 'true' ->
					    %% Line 1272
					    case E of
					      %% Line 1273
					      <{_169,'file_io_server','invalid_unicode'}> when 'true' ->
						  do  %% Line 1278
						      apply 'epp_reply'/2
							  (From, {'error',E})
						      let <_28> =
							  apply %% Line 1279
								'wait_request'/1
							      (%% Line 1279
							       St)
						      in  %% Line 1279
							  apply 'leave_file'/2
							      (_28, St)
					      %% Line 1280
					      <_170> when 'true' ->
						  %% Line 1283
						  case St of
						    <{'epp',_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183}> when 'true' ->
							let <_31> =
							    call 'erlang':'setelement'
								(3, St, Cl)
							in  apply 'skip_toks'/3
								(From, _31, _@r0)
						    ( <_184> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','epp'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
					    end
					%% Line 1285
					<{'eof',Cl}> when 'true' ->
					    let <_rec79> = _@r0
					    in  %% Line 1286
						case St of
						  <{'epp',_185,_186,_187,_188,_189,_190,_191,_192,_193,_194,_195,_196,_197}> when 'true' ->
						      let <_35> =
							  call 'erlang':'setelement'
							      (7, St, _rec79)
						      in  let <_37> =
							      call 'erlang':'setelement'
								  (3, _35, Cl)
							  in  apply 'leave_file'/2
								  (From, _37)
						  ( <_198> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','epp'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					%% Line 1287
					<{'error',_X_E}> when 'true' ->
					    %% Line 1288
					    ( case St of
						( <( {'epp',_199,_rec81,_200,_201,_202,_203,_204,_205,_206,_207,_208,_209,_210}
						     -| ['compiler_generated'] )> when 'true' ->
						      do  apply 'epp_reply'/2
							      (From, {'error',{_rec81,'epp','cannot_parse'}})
							  let <_40> =
							      apply %% Line 1289
								    'wait_request'/1
								  (%% Line 1289
								   St)
							  in  %% Line 1289
							      apply 'leave_file'/2
								  (_40, St)
						  -| ['compiler_generated'] )
						( <_211> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','epp'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					( <_41> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_41})
					  -| ['compiler_generated'] )
				      end
				  -| ['compiler_generated'] )
				( <_70> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','epp'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_57> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','epp'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 1291
	      <From,St,[]> when 'true' ->
		  %% Line 1292
		  apply 'scan_toks'/2
		      (From, St)
	      ( <_44,_43,_42> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_44,_43,_42})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'skip_toks',3}}] )
      -| [{'function',{'skip_toks',3}}] )
'skip_else'/4 =
    %% Line 1294
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <Else,From,St,_@r0 = ['else'|Sis]> when 'true' ->
		  let <_4> =
		      apply %% Line 1295
			    'loc'/1
			  (%% Line 1295
			   Else)
		  in  do  %% Line 1295
			  apply 'epp_reply'/2
			      (From, {'error',{_4,'epp',{'illegal',[114|[101|[112|[101|[97|[116|[101|[100]]]]]]]],'else'}}})
			  %% Line 1296
			  apply 'wait_req_skip'/2
			      (St, _@r0)
	      %% Line 1297
	      <_X_Else,From,St,['elif'|Sis]> when 'true' ->
		  %% Line 1298
		  apply 'skip_toks'/3
		      (From, St, ['else'|Sis])
	      %% Line 1299
	      <_X_Else,From,St,[_X_I|[]]> when 'true' ->
		  %% Line 1300
		  ( case St of
		      ( <( {'epp',_15,_16,_17,_18,_19,_rec84,_20,_21,_22,_23,_24,_25,_26}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_rec82> =
				['else'|_rec84]
			    in  case St of
				  <{'epp',_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40}> when 'true' ->
				      let <_10> =
					  call 'erlang':'setelement'
					      (7, St, _rec82)
				      in  apply 'scan_toks'/2
					      (From, _10)
				  ( <_41> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','epp'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			-| ['compiler_generated'] )
		      ( <_27> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','epp'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 1301
	      <_X_Else,From,St,Sis> when 'true' ->
		  %% Line 1302
		  apply 'skip_toks'/3
		      (From, St, Sis)
	    end
	    -| [{'function',{'skip_else',4}}] )
      -| [{'function',{'skip_else',4}}] )
'skip_elif'/5 =
    %% Line 1304
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <_X_Toks,Elif,From,St,Sis = ['else'|_11]> when 'true' ->
		  let <_5> =
		      apply %% Line 1305
			    'loc'/1
			  (%% Line 1305
			   Elif)
		  in  do  %% Line 1305
			  apply 'epp_reply'/2
			      (From, {'error',{_5,'epp','elif_after_else'}})
			  %% Line 1306
			  apply 'wait_req_skip'/2
			      (St, Sis)
	      %% Line 1307
	      <Toks,Elif,From,St,[_X_I|[]]> when 'true' ->
		  %% Line 1308
		  apply 'scan_if'/4
		      (Toks, Elif, From, St)
	      %% Line 1309
	      <_X_Toks,_X_Elif,From,St,Sis> when 'true' ->
		  %% Line 1310
		  apply 'skip_toks'/3
		      (From, St, Sis)
	    end
	    -| [{'function',{'skip_elif',5}}] )
      -| [{'function',{'skip_elif',5}}] )
'macro_pars'/2 =
    %% Line 1316
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <[{')',_X_Lp}|[Comma = {',',_X_Ld}|Ex]],Args> when 'true' ->
		  let <_3> =
		      call %% Line 1317
			   'lists':%% Line 1317
				   'reverse'
			  (%% Line 1317
			   Args)
		  in  let <_2> =
			  apply %% Line 1317
				'macro_expansion'/2
			      (%% Line 1317
			       Ex, %% Line 1317
				   Comma)
		      in  %% Line 1317
			  {'ok',{_3,_2}}
	      %% Line 1318
	      <[{'var',_10,Name}|[{')',_X_Lp}|[Comma = {',',_X_Ld}|Ex]]],Args> when 'true' ->
		  %% Line 1319
		  case call 'lists':'member'
			   (Name, Args) of
		    <'false'> when 'true' ->
			let <_6> =
			    call %% Line 1320
				 'lists':%% Line 1320
					 'reverse'
				(%% Line 1320
				 [Name|Args])
			in  let <_5> =
				apply %% Line 1320
				      'macro_expansion'/2
				    (%% Line 1320
				     Ex, %% Line 1320
					 Comma)
			    in  %% Line 1320
				{'ok',{_6,_5}}
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4})
		      -| ['compiler_generated'] )
		  end
	      %% Line 1321
	      <[{'var',_X_L,Name}|[{',',_11}|Ts]],Args> when 'true' ->
		  %% Line 1322
		  case call 'lists':'member'
			   (Name, Args) of
		    <'false'> when 'true' ->
			%% Line 1323
			apply 'macro_pars'/2
			    (Ts, [Name|Args])
		    ( <_7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_7})
		      -| ['compiler_generated'] )
		  end
	      ( <_9,_8> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_9,_8})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'macro_pars',2}}] )
      -| [{'function',{'macro_pars',2}}] )
'macro_expansion'/2 =
    %% Line 1325
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <[{')',_X_Lp}|[{'dot',_X_Ld}|[]]],_X_T0> when 'true' ->
		  []
	      %% Line 1326
	      <[Dot = {'dot',_7}|[]],_X_T0> when 'true' ->
		  let <_2> =
		      apply %% Line 1327
			    'loc'/1
			  (%% Line 1327
			   Dot)
		  in  %% Line 1327
		      call 'erlang':'throw'
			  ({'error',_2,'missing_parenthesis'})
	      %% Line 1328
	      <[T|Ts],_X_T0> when 'true' ->
		  let <_3> =
		      apply %% Line 1329
			    'macro_expansion'/2
			  (%% Line 1329
			   Ts, %% Line 1329
			       T)
		  in  %% Line 1329
		      [T|_3]
	      %% Line 1330
	      <[],T0> when 'true' ->
		  let <_4> =
		      apply 'loc'/1
			  (T0)
		  in  call 'erlang':'throw'
			  ({'error',_4,'premature_end'})
	      ( <_6,_5> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_6,_5})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'macro_expansion',2}}] )
      -| [{'function',{'macro_expansion',2}}] )
'expand_macros'/4 =
    %% Line 1337
    ( fun (_0,_1,_2,_3) ->
	  %% Line 1338
	  case _3 of
	    <{'epp',_18,_19,_20,_21,_22,_23,_24,_25,Ms,U,_26,_27,_28}> when 'true' ->
		let <Lm> =
		    apply %% Line 1339
			  'loc'/1
			(_0)
		in  let <Tinfo> =
			call %% Line 1340
			     'erlang':%% Line 1340
				      'element'
			    (%% Line 1340
			     2, _0)
		    in  %% Line 1341
			case apply 'expand_macro1'/4
				 (Lm, _1, _2, Ms) of
			  %% Line 1342
			  <{'ok',{'none',Exp}}> when 'true' ->
			      do  %% Line 1343
				  apply 'check_uses'/4
				      ([{_1,'none'}|[]], [], U, Lm)
				  let <_7> =
				      apply %% Line 1344
					    'expand_macro'/4
					  (%% Line 1344
					   Exp, %% Line 1344
						Tinfo, %% Line 1344
						       [], %% Line 1344
							   ~{}~)
				  in  let <Toks1> =
					  apply %% Line 1344
						'expand_macros'/2
					      (_7, _3)
				      in  let <_9> =
					      call %% Line 1345
						   'erlang':%% Line 1345
							    '++'
						  (%% Line 1345
						   Toks1, _2)
					  in  %% Line 1345
					      apply 'expand_macros'/2
						  (_9, _3)
			  %% Line 1346
			  <{'ok',{As,Exp}}> when 'true' ->
			      let <_10> =
				  call %% Line 1347
				       'erlang':%% Line 1347
						'length'
				      (%% Line 1347
				       As)
			      in  do  %% Line 1347
				      apply 'check_uses'/4
					  ([{_1,_10}|[]], [], U, Lm)
				      %% Line 1348
				      case apply 'bind_args'/5
					       (_2, Lm, _1, As, ~{}~) of
					<{Bs,Toks1}> when 'true' ->
					    let <_12> =
						apply %% Line 1349
						      'expand_macro'/4
						    (%% Line 1349
						     Exp, %% Line 1349
							  Tinfo, %% Line 1349
								 Toks1, %% Line 1349
									Bs)
					    in  %% Line 1349
						apply 'expand_macros'/2
						    (_12, _3)
					( <_11> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_11})
					  -| ['compiler_generated'] )
				      end
			  ( <_13> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_13})
			    -| ['compiler_generated'] )
			end
	    ( <_4> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_4})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'expand_macros',4}}] )
'expand_macro1'/4 =
    %% Line 1352
    ( fun (_0,_1,_2,_3) ->
	  let <Arity> =
	      apply %% Line 1353
		    'count_args'/3
		  (_2, _0, _1)
	  in  %% Line 1354
	      case _3 of
		%% Line 1355
		<~{_1:='undefined'}~> when 'true' ->
		    %% Line 1357
		    call 'erlang':'throw'
			({'error',_0,{'undefined',_1,Arity}})
		%% Line 1358
		<~{_1:=[{'none',Def}|[]]}~> when 'true' ->
		    %% Line 1359
		    {'ok',Def}
		%% Line 1360
		<~{_1:=Defs}~>
		    when call 'erlang':'is_list'
			  (Defs) ->
		    %% Line 1361
		    case call 'proplists':'get_value'
			     (Arity, Defs) of
		      %% Line 1362
		      <'undefined'> when 'true' ->
			  %% Line 1363
			  call 'erlang':'throw'
			      ({'error',_0,{'mismatch',_1}})
		      %% Line 1364
		      <Def> when 'true' ->
			  %% Line 1365
			  {'ok',Def}
		    end
		%% Line 1367
		<~{_1:=PreDef}~> when 'true' ->
		    %% Line 1369
		    {'ok',PreDef}
		%% Line 1370
		<_11> when 'true' ->
		    %% Line 1372
		    call 'erlang':'throw'
			({'error',_0,{'undefined',_1,Arity}})
	      end
      -| [{'function',{'expand_macro1',4}}] )
'check_uses'/4 =
    %% Line 1375
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <[],_X_Anc,_X_U,_X_Lm> when 'true' ->
		  %% Line 1376
		  'ok'
	      %% Line 1377
	      <[M|Rest],Anc,U,Lm> when 'true' ->
		  %% Line 1378
		  case call 'lists':'member'
			   (M, Anc) of
		    %% Line 1379
		    <'true'> when 'true' ->
			%% Line 1380
			case M of
			  <{Name,Arity}> when 'true' ->
			      %% Line 1381
			      call 'erlang':'throw'
				  ({'error',Lm,{'circular',Name,Arity}})
			  ( <_4> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_4})
			    -| ['compiler_generated'] )
			end
		    %% Line 1382
		    <'false'> when 'true' ->
			let <L> =
			    apply %% Line 1383
				  'get_macro_uses'/2
				(%% Line 1383
				 M, %% Line 1383
				    U)
			in  do  %% Line 1384
				apply 'check_uses'/4
				    (L, [M|Anc], U, Lm)
				%% Line 1385
				apply 'check_uses'/4
				    (Rest, Anc, U, Lm)
		    ( <_6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_6})
		      -| ['compiler_generated'] )
		  end
	      ( <_10,_9,_8,_7> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_10,_9,_8,_7})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'check_uses',4}}] )
      -| [{'function',{'check_uses',4}}] )
'get_macro_uses'/2 =
    %% Line 1388
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <{M,Arity},U> when 'true' ->
		  %% Line 1389
		  case U of
		    %% Line 1390
		    <~{M:=L}~> when 'true' ->
			let <_2> =
			    call %% Line 1391
				 'proplists':%% Line 1391
					     'get_value'
				(%% Line 1391
				 'none', %% Line 1391
					 L, %% Line 1391
					    [])
			in  %% Line 1391
			    call 'proplists':'get_value'
				(Arity, L, _2)
		    %% Line 1392
		    <_6> when 'true' ->
			%% Line 1393
			[]
		  end
	      ( <_5,_4> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_5,_4})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'get_macro_uses',2}}] )
      -| [{'function',{'get_macro_uses',2}}] )
'expand_macros'/2 =
    %% Line 1398
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <[{'?',_X_Lq}|[MacT = {'atom',_X_Lm,M}|Toks]],St> when 'true' ->
		  %% Line 1399
		  apply 'expand_macros'/4
		      (MacT, M, Toks, St)
	      %% Line 1401
	      <[_@r0 = {'?',_X_Lq}|[Token = {'var',Lm,'FUNCTION_NAME'}|Toks]],St0> when 'true' ->
		  let <St> =
		      apply %% Line 1402
			    'update_fun_name'/2
			  (%% Line 1402
			   Token, %% Line 1402
				  St0)
		  in  %% Line 1403
		      ( case St of
			  ( <( {'epp',_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_rec85}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_7> =
				    case _rec85 of
				      %% Line 1404
				      <'undefined'> when 'true' ->
					  %% Line 1405
					  [_@r0|[Token|[]]]
				      %% Line 1406
				      <{Name,_37}> when 'true' ->
					  %% Line 1407
					  [{'atom',Lm,Name}|[]]
				      ( <_6> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_6})
					-| ['compiler_generated'] )
				    end
				in  let <_3> =
					apply %% Line 1408
					      'expand_macros'/2
					    (%% Line 1408
					     Toks, %% Line 1408
						   St)
				    in  %% Line 1408
					call 'erlang':'++'
					    (_7, _3)
			    -| ['compiler_generated'] )
			  ( <_36> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','epp'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      %% Line 1409
	      <[_@r1 = {'?',_X_Lq}|[Token = {'var',Lm,'FUNCTION_ARITY'}|Toks]],St0> when 'true' ->
		  let <St> =
		      apply %% Line 1410
			    'update_fun_name'/2
			  (%% Line 1410
			   Token, %% Line 1410
				  St0)
		  in  %% Line 1411
		      ( case St of
			  ( <( {'epp',_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_rec86}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_13> =
				    case _rec86 of
				      %% Line 1412
				      <'undefined'> when 'true' ->
					  %% Line 1413
					  [_@r1|[Token|[]]]
				      %% Line 1414
				      <{_51,Arity}> when 'true' ->
					  %% Line 1415
					  [{'integer',Lm,Arity}|[]]
				      ( <_12> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_12})
					-| ['compiler_generated'] )
				    end
				in  let <_9> =
					apply %% Line 1416
					      'expand_macros'/2
					    (%% Line 1416
					     Toks, %% Line 1416
						   St)
				    in  %% Line 1416
					call 'erlang':'++'
					    (_13, _9)
			    -| ['compiler_generated'] )
			  ( <_50> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','epp'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      %% Line 1417
	      <[{'?',_X_Lq}|[Tok = {'var',Lm,'LINE'}|Toks]],St> when 'true' ->
		  let <Line> =
		      call %% Line 1418
			   'erl_scan':%% Line 1418
				      'line'
			  (%% Line 1418
			   Tok)
		  in  let <_15> =
			  apply %% Line 1419
				'expand_macros'/2
			      (%% Line 1419
			       Toks, %% Line 1419
				     St)
		      in  %% Line 1419
			  [{'integer',Lm,Line}|_15]
	      %% Line 1420
	      <[{'?',_X_Lq}|[MacT = {'var',_X_Lm,M}|Toks]],St> when 'true' ->
		  %% Line 1421
		  apply 'expand_macros'/4
		      (MacT, M, Toks, St)
	      %% Line 1423
	      <[{'?',_X_Lq}|[Token|_X_Toks]],_X_St> when 'true' ->
		  let <_18> =
		      case %% Line 1424
			   call 'erl_scan':'text'
			       (Token) of
			%% Line 1425
			<Text>
			    when call 'erlang':'is_list'
				  (Text) ->
			    %% Line 1426
			    Text
			%% Line 1427
			<'undefined'> when 'true' ->
			    let <Symbol> =
				call %% Line 1428
				     'erl_scan':%% Line 1428
						'symbol'
				    (%% Line 1428
				     Token)
			    in  %% Line 1429
				call 'io_lib':'fwrite'
				    (#{#<126>(8,1,'integer',['unsigned'|['big']]),
				       #<116>(8,1,'integer',['unsigned'|['big']]),
				       #<112>(8,1,'integer',['unsigned'|['big']])}#, [Symbol|[]])
			( <_17> when 'true' ->
			      %% Line 1424
			      primop 'match_fail'
				  ({'case_clause',_17})
			  -| ['compiler_generated'] )
		      end
		  in  let <_20> =
			  apply %% Line 1431
				'loc'/1
			      (%% Line 1431
			       Token)
		      in  %% Line 1431
			  call 'erlang':'throw'
			      ({'error',_20,{'call',[63|_18]}})
	      %% Line 1432
	      <[T|Ts],St> when 'true' ->
		  let <_21> =
		      apply %% Line 1433
			    'expand_macros'/2
			  (%% Line 1433
			   Ts, %% Line 1433
			       St)
		  in  %% Line 1433
		      [T|_21]
	      %% Line 1434
	      <[],_X_St> when 'true' ->
		  []
	      ( <_23,_22> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_23,_22})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'expand_macros',2}}] )
      -| [{'function',{'expand_macros',2}}] )
'bind_args'/5 =
    %% Line 1439
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <[{'(',_X_Llp}|[{')',_X_Lrp}|Toks]],_X_Lm,_X_M,[],Bs> when 'true' ->
		  %% Line 1440
		  {Bs,Toks}
	      %% Line 1441
	      <[{'(',_X_Llp}|Toks0],Lm,M,[A|As],Bs> when 'true' ->
		  %% Line 1442
		  case apply 'macro_arg'/3
			   (Toks0, [], []) of
		    <{Arg,Toks1}> when 'true' ->
			let <_6> =
			    apply %% Line 1443
				  'store_arg'/5
				(%% Line 1443
				 Lm, %% Line 1443
				     M, %% Line 1443
					A, %% Line 1443
					   Arg, %% Line 1443
						Bs)
			in  %% Line 1443
			    apply 'macro_args'/5
				(Toks1, Lm, M, As, _6)
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5})
		      -| ['compiler_generated'] )
		  end
	      %% Line 1444
	      <_X_Toks,Lm,M,_X_As,_X_Bs> when 'true' ->
		  %% Line 1445
		  call 'erlang':'throw'
		      ({'error',Lm,{'mismatch',M}})
	    end
	    -| [{'function',{'bind_args',5}}] )
      -| [{'function',{'bind_args',5}}] )
'macro_args'/5 =
    %% Line 1447
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <[{')',_X_Lrp}|Toks],_X_Lm,_X_M,[],Bs> when 'true' ->
		  %% Line 1448
		  {Bs,Toks}
	      %% Line 1449
	      <[{',',_X_Lc}|Toks0],Lm,M,[A|As],Bs> when 'true' ->
		  %% Line 1450
		  case apply 'macro_arg'/3
			   (Toks0, [], []) of
		    <{Arg,Toks1}> when 'true' ->
			let <_6> =
			    apply %% Line 1451
				  'store_arg'/5
				(%% Line 1451
				 Lm, %% Line 1451
				     M, %% Line 1451
					A, %% Line 1451
					   Arg, %% Line 1451
						Bs)
			in  %% Line 1451
			    apply 'macro_args'/5
				(Toks1, Lm, M, As, _6)
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5})
		      -| ['compiler_generated'] )
		  end
	      %% Line 1452
	      <[],Lm,M,_X_As,_X_Bs> when 'true' ->
		  %% Line 1453
		  call 'erlang':'throw'
		      ({'error',Lm,{'arg_error',M}})
	      %% Line 1454
	      <_X_Toks,Lm,M,_X_As,_X_Bs> when 'true' ->
		  %% Line 1455
		  call 'erlang':'throw'
		      ({'error',Lm,{'mismatch',M}})
	    end
	    -| [{'function',{'macro_args',5}}] )
      -| [{'function',{'macro_args',5}}] )
'store_arg'/5 =
    %% Line 1457
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <L,M,_X_A,[],_X_Bs> when 'true' ->
		  %% Line 1458
		  call 'erlang':'throw'
		      ({'error',L,{'mismatch',M}})
	      %% Line 1459
	      <_X_L,_X_M,A,Arg,Bs> when 'true' ->
		  %% Line 1460
		  case <> of
		    ( <>
			  when call 'erlang':'is_map'
				(Bs) ->
			  ~{A=>Arg|Bs}~
		      -| ['compiler_generated'] )
		    ( <> when 'true' ->
			  ( primop 'match_fail'
				({'badmap',Bs})
			    -| [{'eval_failure','badmap'}] )
		      -| ['compiler_generated'] )
		  end
	    end
	    -| [{'function',{'store_arg',5}}] )
      -| [{'function',{'store_arg',5}}] )
'count_args'/3 =
    %% Line 1464
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <[{'(',_X_Llp}|[{')',_X_Lrp}|_X_Toks]],_X_Lm,_X_M> when 'true' ->
		  %% Line 1465
		  0
	      %% Line 1466
	      <[{'(',_X_Llp}|[{',',_X_Lc}|_X_Toks]],Lm,M> when 'true' ->
		  %% Line 1467
		  call 'erlang':'throw'
		      ({'error',Lm,{'arg_error',M}})
	      %% Line 1468
	      <[{'(',_X_Llp}|Toks0],Lm,M> when 'true' ->
		  %% Line 1469
		  case apply 'macro_arg'/3
			   (Toks0, [], []) of
		    <{_X_Arg,Toks1}> when 'true' ->
			%% Line 1470
			apply 'count_args'/4
			    (Toks1, Lm, M, 1)
		    ( <_3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_3})
		      -| ['compiler_generated'] )
		  end
	      %% Line 1471
	      <_X_Toks,_X_Lm,_X_M> when 'true' ->
		  %% Line 1472
		  'none'
	    end
	    -| [{'function',{'count_args',3}}] )
      -| [{'function',{'count_args',3}}] )
'count_args'/4 =
    %% Line 1474
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <[{')',_X_Lrp}|_X_Toks],_X_Lm,_X_M,NbArgs> when 'true' ->
		  %% Line 1475
		  NbArgs
	      %% Line 1476
	      <[{',',_X_Lc}|[{')',_X_Lrp}|_X_Toks]],Lm,M,_X_NbArgs> when 'true' ->
		  %% Line 1477
		  call 'erlang':'throw'
		      ({'error',Lm,{'arg_error',M}})
	      %% Line 1478
	      <[{',',_X_Lc}|Toks0],Lm,M,NbArgs> when 'true' ->
		  %% Line 1479
		  case apply 'macro_arg'/3
			   (Toks0, [], []) of
		    <{_X_Arg,Toks1}> when 'true' ->
			let <_5> =
			    call %% Line 1480
				 'erlang':%% Line 1480
					  '+'
				(%% Line 1480
				 NbArgs, %% Line 1480
					 1)
			in  %% Line 1480
			    apply 'count_args'/4
				(Toks1, Lm, M, _5)
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4})
		      -| ['compiler_generated'] )
		  end
	      %% Line 1481
	      <[],Lm,M,_X_NbArgs> when 'true' ->
		  %% Line 1482
		  call 'erlang':'throw'
		      ({'error',Lm,{'arg_error',M}})
	      %% Line 1483
	      <_X_Toks,Lm,M,_X_NbArgs> when 'true' ->
		  %% Line 1484
		  call 'erlang':'throw'
		      ({'error',Lm,{'mismatch',M}})
	    end
	    -| [{'function',{'count_args',4}}] )
      -| [{'function',{'count_args',4}}] )
'macro_arg'/3 =
    %% Line 1491
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <_@r0 = [{',',Lc}|Toks],[],Arg> when 'true' ->
		  let <_3> =
		      call %% Line 1492
			   'lists':%% Line 1492
				   'reverse'
			  (%% Line 1492
			   Arg)
		  in  %% Line 1492
		      {_3,_@r0}
	      %% Line 1493
	      <_@r1 = [{')',Lrp}|Toks],[],Arg> when 'true' ->
		  let <_4> =
		      call %% Line 1494
			   'lists':%% Line 1494
				   'reverse'
			  (%% Line 1494
			   Arg)
		  in  %% Line 1494
		      {_4,_@r1}
	      %% Line 1495
	      <[_@r2 = {'(',Llp}|Toks],E,Arg> when 'true' ->
		  %% Line 1496
		  apply 'macro_arg'/3
		      (Toks, [')'|E], [_@r2|Arg])
	      %% Line 1497
	      <[_@r3 = {'<<',Lls}|Toks],E,Arg> when 'true' ->
		  %% Line 1498
		  apply 'macro_arg'/3
		      (Toks, ['>>'|E], [_@r3|Arg])
	      %% Line 1499
	      <[_@r4 = {'[',Lls}|Toks],E,Arg> when 'true' ->
		  %% Line 1500
		  apply 'macro_arg'/3
		      (Toks, [']'|E], [_@r4|Arg])
	      %% Line 1501
	      <[_@r5 = {'{',Llc}|Toks],E,Arg> when 'true' ->
		  %% Line 1502
		  apply 'macro_arg'/3
		      (Toks, ['}'|E], [_@r5|Arg])
	      %% Line 1503
	      <[_@r6 = {'begin',Lb}|Toks],E,Arg> when 'true' ->
		  %% Line 1504
		  apply 'macro_arg'/3
		      (Toks, ['end'|E], [_@r6|Arg])
	      %% Line 1505
	      <[_@r7 = {'if',Li}|Toks],E,Arg> when 'true' ->
		  %% Line 1506
		  apply 'macro_arg'/3
		      (Toks, ['end'|E], [_@r7|Arg])
	      %% Line 1507
	      <[_@r8 = {'case',Lc}|Toks],E,Arg> when 'true' ->
		  %% Line 1508
		  apply 'macro_arg'/3
		      (Toks, ['end'|E], [_@r8|Arg])
	      %% Line 1509
	      <[_@r9 = {'fun',Lc}|Toks = [{'(',_9}|_10]],E,Arg> when 'true' ->
		  %% Line 1510
		  apply 'macro_arg'/3
		      (Toks, ['end'|E], [_@r9|Arg])
	      %% Line 1511
	      <[Fun = {'fun',_11}|[Name = {'var',_12,_13}|Toks = [{'(',_14}|_15]]],E,Arg> when 'true' ->
		  %% Line 1512
		  apply 'macro_arg'/3
		      (Toks, ['end'|E], [Name|[Fun|Arg]])
	      %% Line 1513
	      <[_@r10 = {'receive',Lr}|Toks],E,Arg> when 'true' ->
		  %% Line 1514
		  apply 'macro_arg'/3
		      (Toks, ['end'|E], [_@r10|Arg])
	      %% Line 1515
	      <[_@r11 = {'try',Lr}|Toks],E,Arg> when 'true' ->
		  %% Line 1516
		  apply 'macro_arg'/3
		      (Toks, ['end'|E], [_@r11|Arg])
	      %% Line 1517
	      <[_@r12 = {'cond',Lr}|Toks],E,Arg> when 'true' ->
		  %% Line 1518
		  apply 'macro_arg'/3
		      (Toks, ['end'|E], [_@r12|Arg])
	      %% Line 1519
	      <[_@r13 = {Rb,Lrb}|Toks],[_16|E],Arg>
		  when call 'erlang':'=:='
			(_16,
			 Rb) ->
		  %% Line 1520
		  apply 'macro_arg'/3
		      (Toks, E, [_@r13|Arg])
	      %% Line 1521
	      <[T|Toks],E,Arg> when 'true' ->
		  %% Line 1522
		  apply 'macro_arg'/3
		      (Toks, E, [T|Arg])
	      %% Line 1523
	      <[],_X_E,Arg> when 'true' ->
		  let <_5> =
		      call %% Line 1524
			   'lists':%% Line 1524
				   'reverse'
			  (%% Line 1524
			   Arg)
		  in  %% Line 1524
		      {_5,[]}
	      ( <_8,_7,_6> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_8,_7,_6})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'macro_arg',3}}] )
      -| [{'function',{'macro_arg',3}}] )
'expand_macro'/4 =
    %% Line 1532
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <[{'var',_X_Lv,V}|Ts],L,Rest,Bs> when 'true' ->
		  %% Line 1533
		  case Bs of
		    %% Line 1534
		    <~{V:=Val}~> when 'true' ->
			%% Line 1535
			apply 'expand_arg'/5
			    (Val, Ts, L, Rest, Bs)
		    %% Line 1536
		    <_15> when 'true' ->
			let <_4> =
			    apply %% Line 1537
				  'expand_macro'/4
				(%% Line 1537
				 Ts, %% Line 1537
				     L, %% Line 1537
					Rest, %% Line 1537
					      Bs)
			in  %% Line 1537
			    [{'var',L,V}|_4]
		  end
	      %% Line 1539
	      <[{'?',_16}|[{'?',_17}|[{'var',_X_Lv,V}|Ts]]],L,Rest,Bs> when 'true' ->
		  %% Line 1540
		  case Bs of
		    %% Line 1541
		    <~{V:=Val}~> when 'true' ->
			let <_6> =
			    apply %% Line 1542
				  'stringify'/2
				(%% Line 1542
				 Val, %% Line 1542
				      L)
			in  %% Line 1542
			    apply 'expand_arg'/5
				(_6, Ts, L, Rest, Bs)
		    %% Line 1543
		    <_18> when 'true' ->
			let <_7> =
			    apply %% Line 1544
				  'expand_macro'/4
				(%% Line 1544
				 Ts, %% Line 1544
				     L, %% Line 1544
					Rest, %% Line 1544
					      Bs)
			in  %% Line 1544
			    [{'var',L,V}|_7]
		  end
	      %% Line 1546
	      <[T|Ts],L,Rest,Bs> when 'true' ->
		  let <_9> =
		      call %% Line 1547
			   'erlang':%% Line 1547
				    'setelement'
			  (%% Line 1547
			   2, %% Line 1547
			      T, %% Line 1547
				 L)
		  in  let <_10> =
			  apply %% Line 1547
				'expand_macro'/4
			      (%% Line 1547
			       Ts, %% Line 1547
				   L, %% Line 1547
				      Rest, %% Line 1547
					    Bs)
		      in  %% Line 1547
			  [_9|_10]
	      %% Line 1548
	      <[],_X_L,Rest,_X_Bs> when 'true' ->
		  Rest
	      ( <_14,_13,_12,_11> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_14,_13,_12,_11})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'expand_macro',4}}] )
      -| [{'function',{'expand_macro',4}}] )
'expand_arg'/5 =
    %% Line 1550
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <[A|As],Ts,_X_L,Rest,Bs> when 'true' ->
		  let <NextL> =
		      call %% Line 1552
			   'erlang':%% Line 1552
				    'element'
			  (%% Line 1552
			   2, %% Line 1552
			      A)
		  in  let <_6> =
			  apply %% Line 1553
				'expand_arg'/5
			      (%% Line 1553
			       As, %% Line 1553
				   Ts, %% Line 1553
				       NextL, %% Line 1553
					      Rest, %% Line 1553
						    Bs)
		      in  %% Line 1553
			  [A|_6]
	      %% Line 1554
	      <[],Ts,L,Rest,Bs> when 'true' ->
		  %% Line 1555
		  apply 'expand_macro'/4
		      (Ts, L, Rest, Bs)
	      ( <_11,_10,_9,_8,_7> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_11,_10,_9,_8,_7})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'expand_arg',5}}] )
      -| [{'function',{'expand_arg',5}}] )
'update_fun_name'/2 =
    %% Line 1565
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Token,St = {'epp',_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,Toks0}>
		  when call 'erlang':'is_list'
			(Toks0) ->
		  let <_5> =
		      catch
			  %% Line 1570
			  case St of
			    <{'epp',_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43}> when 'true' ->
				let <_4> =
				    call 'erlang':'setelement'
					(14, St, 'undefined')
				in  apply 'expand_macros'/2
					(Toks0, _4)
			    ( <_44> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','epp'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		  in  %% Line 1576
		      case _5 of
			%% Line 1577
			<[{'atom',_45,Name}|[{'(',_46}|Toks]]> when 'true' ->
			    let <FA> =
				apply %% Line 1581
				      'update_fun_name_1'/4
				    (%% Line 1581
				     Toks, %% Line 1581
					   1, %% Line 1581
					      {Name,0}, %% Line 1581
							St)
			    in  %% Line 1582
				case St of
				  <{'epp',_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59}> when 'true' ->
				      call 'erlang':'setelement'
					  (14, St, FA)
				  ( <_60> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','epp'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			%% Line 1583
			<[{'?',_61}|_62]> when 'true' ->
			    %% Line 1586
			    case Token of
			      <{'var',_63,Macro}> when 'true' ->
				  let <_11> =
				      apply %% Line 1587
					    'loc'/1
					  (%% Line 1587
					   Token)
				  in  %% Line 1587
				      call 'erlang':'throw'
					  ({'error',_11,{'illegal_function_usage',Macro}})
			      ( <_10> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_10})
				-| ['compiler_generated'] )
			    end
			%% Line 1588
			<_64>
			    when call 'erlang':'is_list'
				  (_5) ->
			    %% Line 1591
			    case Token of
			      <{'var',_65,Macro}> when 'true' ->
				  let <_13> =
				      apply %% Line 1592
					    'loc'/1
					  (%% Line 1592
					   Token)
				  in  %% Line 1592
				      call 'erlang':'throw'
					  ({'error',_13,{'illegal_function',Macro}})
			      ( <_12> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_12})
				-| ['compiler_generated'] )
			    end
			%% Line 1593
			<_66> when 'true' ->
			    %% Line 1596
			    case St of
			      <{'epp',_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79}> when 'true' ->
				  call 'erlang':'setelement'
				      (14, St, {'_',0})
			      ( <_80> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','epp'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
		      end
	      %% Line 1598
	      <_X_Token,St> when 'true' ->
		  %% Line 1599
		  St
	    end
	    -| [{'function',{'update_fun_name',2}}] )
      -| [{'function',{'update_fun_name',2}}] )
'update_fun_name_1'/4 =
    %% Line 1601
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <[Tok|Toks],L,FA,St> when 'true' ->
		  %% Line 1602
		  case apply 'classify_token'/1
			   (Tok) of
		    %% Line 1603
		    <'comma'> when 'true' ->
			%% Line 1604
			case <> of
			  %% Line 1605
			  <>
			      when call 'erlang':'=:='
				    (L,
				     1) ->
			      %% Line 1606
			      case FA of
				<{Name,Arity}> when 'true' ->
				    let <_5> =
					call %% Line 1607
					     'erlang':%% Line 1607
						      '+'
					    (%% Line 1607
					     Arity, %% Line 1607
						    1)
				    in  %% Line 1607
					apply 'update_fun_name_1'/4
					    (Toks, L, {Name,_5}, St)
				( <_4> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_4})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1608
			  <> when 'true' ->
			      %% Line 1609
			      apply 'update_fun_name_1'/4
				  (Toks, L, FA, St)
			end
		    %% Line 1611
		    <'left'> when 'true' ->
			let <_6> =
			    call %% Line 1612
				 'erlang':%% Line 1612
					  '+'
				(%% Line 1612
				 L, %% Line 1612
				    1)
			in  %% Line 1612
			    apply 'update_fun_name_1'/4
				(Toks, _6, FA, St)
		    %% Line 1613
		    <'right'>
			when call 'erlang':'=:='
			      (L,
			       1) ->
			%% Line 1614
			FA
		    %% Line 1615
		    <'right'> when 'true' ->
			let <_7> =
			    call %% Line 1616
				 'erlang':%% Line 1616
					  '-'
				(%% Line 1616
				 L, %% Line 1616
				    1)
			in  %% Line 1616
			    apply 'update_fun_name_1'/4
				(Toks, _7, FA, St)
		    %% Line 1617
		    <'other'> when 'true' ->
			%% Line 1618
			case FA of
			  %% Line 1619
			  <{Name,0}> when 'true' ->
			      %% Line 1620
			      apply 'update_fun_name_1'/4
				  (Toks, L, {Name,1}, St)
			  %% Line 1621
			  <{_14,_15}> when 'true' ->
			      %% Line 1622
			      apply 'update_fun_name_1'/4
				  (Toks, L, FA, St)
			  ( <_8> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_8})
			    -| ['compiler_generated'] )
			end
		    ( <_9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_9})
		      -| ['compiler_generated'] )
		  end
	      %% Line 1625
	      <[],_16,FA,_17> when 'true' ->
		  %% Line 1627
		  FA
	      ( <_13,_12,_11,_10> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_13,_12,_11,_10})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'update_fun_name_1',4}}] )
      -| [{'function',{'update_fun_name_1',4}}] )
'classify_token'/1 =
    %% Line 1629
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'classify_token',1}}] ) of
	      <{C,_2}> when 'true' ->
		  apply 'classify_token_1'/1
		      (C)
	      %% Line 1630
	      <_3> when 'true' ->
		  'other'
	    end
	    -| [{'function',{'classify_token',1}}] )
      -| [{'function',{'classify_token',1}}] )
'classify_token_1'/1 =
    %% Line 1632
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'classify_token_1',1}}] ) of
	      <','> when 'true' ->
		  'comma'
	      %% Line 1633
	      <'('> when 'true' ->
		  'left'
	      %% Line 1634
	      <'{'> when 'true' ->
		  'left'
	      %% Line 1635
	      <'['> when 'true' ->
		  'left'
	      %% Line 1636
	      <'<<'> when 'true' ->
		  'left'
	      %% Line 1637
	      <')'> when 'true' ->
		  'right'
	      %% Line 1638
	      <'}'> when 'true' ->
		  'right'
	      %% Line 1639
	      <']'> when 'true' ->
		  'right'
	      %% Line 1640
	      <'>>'> when 'true' ->
		  'right'
	      %% Line 1641
	      <_2> when 'true' ->
		  'other'
	    end
	    -| [{'function',{'classify_token_1',1}}] )
      -| [{'function',{'classify_token_1',1}}] )
'token_src'/1 =
    %% Line 1649
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'token_src',1}}] ) of
	      <{'dot',_2}> when 'true' ->
		  %% Line 1650
		  [46]
	      %% Line 1651
	      <{X,_3}>
		  when call 'erlang':'is_atom'
			(X) ->
		  %% Line 1652
		  call 'erlang':'atom_to_list'
		      (X)
	      %% Line 1653
	      <{'var',_4,X}> when 'true' ->
		  %% Line 1654
		  call 'erlang':'atom_to_list'
		      (X)
	      %% Line 1655
	      <{'char',_5,C}> when 'true' ->
		  %% Line 1656
		  call 'io_lib':'write_char'
		      (C)
	      %% Line 1657
	      <{'string',_6,X}> when 'true' ->
		  %% Line 1658
		  call 'io_lib':'write_string'
		      (X)
	      %% Line 1659
	      <{_7,_8,X}> when 'true' ->
		  %% Line 1660
		  call 'io_lib':'format'
		      ([126|[119]], [X|[]])
	      ( <_1> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_1})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'token_src',1}}] )
      -| [{'function',{'token_src',1}}] )
'stringify1'/1 =
    %% Line 1662
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'stringify1',1}}] ) of
	      <[]> when 'true' ->
		  %% Line 1663
		  []
	      %% Line 1664
	      <[T|Tokens]> when 'true' ->
		  let <_1> =
		      apply %% Line 1665
			    'token_src'/1
			  (%% Line 1665
			   T)
		  in  let <_2> =
			  call %% Line 1665
			       'io_lib':%% Line 1665
					'format'
			      (%% Line 1665
			       [32|[126|[116|[115]]]], %% Line 1665
						       [_1|[]])
		      in  let <_3> =
			      apply %% Line 1665
				    'stringify1'/1
				  (%% Line 1665
				   Tokens)
			  in  %% Line 1665
			      [_2|_3]
	      ( <_4> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_4})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'stringify1',1}}] )
      -| [{'function',{'stringify1',1}}] )
'stringify'/2 =
    %% Line 1667
    ( fun (_0,_1) ->
	  let <_2> =
	      apply %% Line 1668
		    'stringify1'/1
		  (_0)
	  in  %% Line 1668
	      case call 'lists':'flatten'
		       (_2) of
		<[32|S]> when 'true' ->
		    %% Line 1669
		    [{'string',_1,S}|[]]
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'stringify',2}}] )
'coalesce_strings'/1 =
    %% Line 1671
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'coalesce_strings',1}}] ) of
	      <[{'string',A,S}|Tokens]> when 'true' ->
		  %% Line 1672
		  apply 'coalesce_strings'/3
		      (Tokens, A, [S|[]])
	      %% Line 1673
	      <[T|Tokens]> when 'true' ->
		  let <_1> =
		      apply %% Line 1674
			    'coalesce_strings'/1
			  (%% Line 1674
			   Tokens)
		  in  %% Line 1674
		      [T|_1]
	      %% Line 1675
	      <[]> when 'true' ->
		  %% Line 1676
		  []
	      ( <_2> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_2})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'coalesce_strings',1}}] )
      -| [{'function',{'coalesce_strings',1}}] )
'coalesce_strings'/3 =
    %% Line 1678
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <[{'string',_9,S}|Tokens],A,S0> when 'true' ->
		  %% Line 1679
		  apply 'coalesce_strings'/3
		      (Tokens, A, [S|S0])
	      %% Line 1680
	      <Tokens,A,S> when 'true' ->
		  let <_3> =
		      call %% Line 1681
			   'lists':%% Line 1681
				   'reverse'
			  (%% Line 1681
			   S)
		  in  let <_4> =
			  call %% Line 1681
			       'lists':%% Line 1681
				       'append'
			      (_3)
		      in  let <_5> =
			      apply %% Line 1681
				    'coalesce_strings'/1
				  (%% Line 1681
				   Tokens)
			  in  %% Line 1681
			      [{'string',A,_4}|_5]
	    end
	    -| [{'function',{'coalesce_strings',3}}] )
      -| [{'function',{'coalesce_strings',3}}] )
'epp_request'/1 =
    %% Line 1688
    ( fun (_0) ->
	  let <_1> =
	      call %% Line 1689
		   'erlang':%% Line 1689
			    'monitor'
		  (%% Line 1689
		   'process', ( _0
				-| [{'function',{'epp_request',1}}] ))
	  in  %% Line 1689
	      apply 'wait_epp_reply'/2
		  (( _0
		     -| [{'function',{'epp_request',1}}] ), _1)
      -| [{'function',{'epp_request',1}}] )
'epp_request'/2 =
    %% Line 1691
    ( fun (_0,_1) ->
	  let <_2> =
	      call %% Line 1692
		   'erlang':%% Line 1692
			    'self'
		  ()
	  in  do  %% Line 1692
		  call 'erlang':'!'
		      (_0, {'epp_request',_2,_1})
		  let <_3> =
		      call %% Line 1693
			   'erlang':%% Line 1693
				    'monitor'
			  (%% Line 1693
			   'process', _0)
		  in  %% Line 1693
		      apply 'wait_epp_reply'/2
			  (_0, _3)
      -| [{'function',{'epp_request',2}}] )
'epp_reply'/2 =
    %% Line 1695
    ( fun (_0,_1) ->
	  let <_2> =
	      call %% Line 1696
		   'erlang':%% Line 1696
			    'self'
		  ()
	  in  do  %% Line 1696
		  call 'erlang':'!'
		      (_0, {'epp_reply',_2,_1})
		  %% Line 1697
		  'ok'
      -| [{'function',{'epp_reply',2}}] )
'wait_epp_reply'/2 =
    %% Line 1699
    ( fun (_0,_1) ->
	  ( letrec
		'recv$^1'/0 =
		    fun () ->
			let <_14,_12> =
			    primop 'recv_peek_message'
				()
			in  case _14 of
			      <'true'> when 'true' ->
				  %% Line 1700
				  case _12 of
				    %% Line 1701
				    <{'epp_reply',_4,Rep}>
					when call 'erlang':'=:='
					      (_4,
					       _0) ->
					do  primop 'remove_message'
						()
					    do  %% Line 1702
						call 'erlang':'demonitor'
						    (_1, ['flush'])
						%% Line 1703
						Rep
				    %% Line 1704
				    <{'DOWN',_5,_6,_7,E}>
					when call 'erlang':'=:='
					      (_5,
					       _1) ->
					do  primop 'remove_message'
						()
					    ( letrec
						  'recv$^0'/0 =
						      fun () ->
							  let <_11,_9> =
							      primop 'recv_peek_message'
								  ()
							  in  case _11 of
								<'true'> when 'true' ->
								    %% Line 1705
								    case _9 of
								      <{'epp_reply',_8,Rep}>
									  when call 'erlang':'=:='
										(_8,
										 _0) ->
									  do  primop 'remove_message'
										  ()
									      Rep
								      ( <Other> when 'true' ->
									    do  primop 'recv_next'
										    ()
										( apply 'recv$^0'/0
										      ()
										  -| ['dialyzer_ignore'] )
									-| ['compiler_generated','dialyzer_ignore'] )
								    end
								<'false'> when 'true' ->
								    let <_10> =
									primop 'recv_wait_timeout'
									    (%% Line 1706
									     0)
								    in  case _10 of
									  <'true'> when 'true' ->
									      do  primop 'timeout'
										      ()
										  %% Line 1706
										  call 'erlang':'exit'
										      (E)
									  ( <'false'> when 'true' ->
										( apply 'recv$^0'/0
										      ()
										  -| ['dialyzer_ignore'] )
									    -| ['dialyzer_ignore'] )
									end
							      end
					      in  ( apply 'recv$^0'/0
							()
						    -| ['dialyzer_ignore'] )
					      -| ['letrec_goto'] )
				    ( <Other> when 'true' ->
					  do  primop 'recv_next'
						  ()
					      ( apply 'recv$^1'/0
						    ()
						-| ['dialyzer_ignore'] )
				      -| ['compiler_generated','dialyzer_ignore'] )
				  end
			      ( <'false'> when 'true' ->
				    let <_13> =
					primop 'recv_wait_timeout'
					    ('infinity')
				    in  case _13 of
					  <'true'> when 'true' ->
					      do  primop 'timeout'
						      ()
						  'true'
					  ( <'false'> when 'true' ->
						( apply 'recv$^1'/0
						      ()
						  -| ['dialyzer_ignore'] )
					    -| ['dialyzer_ignore'] )
					end
				-| ['dialyzer_ignore'] )
			    end
	    in  ( apply 'recv$^1'/0
		      ()
		  -| ['dialyzer_ignore'] )
	    -| ['letrec_goto'] )
      -| [{'function',{'wait_epp_reply',2}}] )
'expand_var'/1 =
    %% Line 1710
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'expand_var',1}}] ) of
	      <NewName = [36|_4]> when 'true' ->
		  let <_1> =
		      catch
			  %% Line 1711
			  apply 'expand_var1'/1
			      (NewName)
		  in  %% Line 1711
		      case _1 of
			%% Line 1712
			<{'ok',ExpName}> when 'true' ->
			    %% Line 1713
			    ExpName
			%% Line 1714
			<_5> when 'true' ->
			    %% Line 1715
			    NewName
		      end
	      %% Line 1717
	      <NewName> when 'true' ->
		  %% Line 1718
		  NewName
	    end
	    -| [{'function',{'expand_var',1}}] )
      -| [{'function',{'expand_var',1}}] )
'expand_var1'/1 =
    %% Line 1720
    ( fun (_0) ->
	  %% Line 1721
	  case call 'filename':'split'
		   (( _0
		      -| [{'function',{'expand_var1',1}}] )) of
	    <[[36|Var]|Rest]> when 'true' ->
		let <Value> =
		    call %% Line 1722
			 'os':%% Line 1722
			      'getenv'
			(%% Line 1722
			 Var)
		in  %% Line 1723
		    case call 'erlang':'=/='
			     (Value, 'false') of
		      <'true'> when 'true' ->
			  let <_4> =
			      apply %% Line 1724
				    'fname_join'/1
				  (%% Line 1724
				   [Value|Rest])
			  in  %% Line 1724
			      {'ok',_4}
		      ( <_3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_3})
			-| ['compiler_generated'] )
		    end
	    ( <_1> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_1})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'expand_var1',1}}] )
'fname_join'/1 =
    %% Line 1726
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'fname_join',1}}] ) of
	      <[[46]|Rest = [_2|_3]]> when 'true' ->
		  %% Line 1727
		  apply 'fname_join'/1
		      (Rest)
	      %% Line 1728
	      <Components> when 'true' ->
		  %% Line 1729
		  call 'filename':'join'
		      (Components)
	    end
	    -| [{'function',{'fname_join',1}}] )
      -| [{'function',{'fname_join',1}}] )
'loc_anno'/1 =
    %% Line 1732
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'loc_anno',1}}] ) of
	      <Line>
		  when call 'erlang':'is_integer'
			(( _0
			   -| [{'function',{'loc_anno',1}}] )) ->
		  %% Line 1733
		  call 'erl_anno':'new'
		      (Line)
	      %% Line 1734
	      <{Line,_X_Column}> when 'true' ->
		  %% Line 1735
		  call 'erl_anno':'new'
		      (Line)
	      ( <_1> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_1})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'loc_anno',1}}] )
      -| [{'function',{'loc_anno',1}}] )
'loc'/1 =
    %% Line 1737
    ( fun (_0) ->
	  %% Line 1738
	  call 'erl_scan':'location'
	      (( _0
		 -| [{'function',{'loc',1}}] ))
      -| [{'function',{'loc',1}}] )
'add_line'/2 =
    %% Line 1740
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Line,Offset>
		  when call 'erlang':'is_integer'
			(Line) ->
		  %% Line 1741
		  call 'erlang':'+'
		      (Line, Offset)
	      %% Line 1742
	      <{Line,Column},Offset> when 'true' ->
		  let <_2> =
		      call %% Line 1743
			   'erlang':%% Line 1743
				    '+'
			  (%% Line 1743
			   Line, %% Line 1743
				 Offset)
		  in  %% Line 1743
		      {_2,Column}
	      ( <_4,_3> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_4,_3})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'add_line',2}}] )
      -| [{'function',{'add_line',2}}] )
'start_loc'/1 =
    %% Line 1745
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'start_loc',1}}] ) of
	      <Line>
		  when call 'erlang':'is_integer'
			(( _0
			   -| [{'function',{'start_loc',1}}] )) ->
		  %% Line 1746
		  1
	      %% Line 1747
	      <{_X_Line,_X_Column}> when 'true' ->
		  %% Line 1748
		  {1,1}
	      ( <_1> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_1})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'start_loc',1}}] )
      -| [{'function',{'start_loc',1}}] )
'line1'/0 =
    %% Line 1750
    ( fun () ->
	  %% Line 1751
	  call 'erl_anno':'new'
	      (1)
      -| [{'function',{'line1',0}}] )
'get_line'/1 =
    %% Line 1753
    ( fun (_0) ->
	  %% Line 1754
	  call 'erl_anno':'line'
	      (( _0
		 -| [{'function',{'get_line',1}}] ))
      -| [{'function',{'get_line',1}}] )
'interpret_file_attribute'/1 =
    %% Line 1791
    ( fun (_0) ->
	  %% Line 1792
	  apply 'interpret_file_attr'/3
	      (( _0
		 -| [{'function',{'interpret_file_attribute',1}}] ), 0, [])
      -| [{'function',{'interpret_file_attribute',1}}] )
'interpret_file_attr'/3 =
    %% Line 1794
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <[Form = {'attribute',Anno,'file',{File,Line}}|Forms],%% Line 1795
								    Delta,%% Line 1795
									  Fs> when 'true' ->
		  let <L> =
		      apply %% Line 1796
			    'get_line'/1
			  (%% Line 1796
			   Anno)
		  in  let <Generated> =
			  call %% Line 1797
			       'erl_anno':%% Line 1797
					  'generated'
			      (%% Line 1797
			       Anno)
		      in  %% Line 1798
			  case <> of
			    %% Line 1799
			    <>
				when ( call 'erlang':'=:='
					(Generated,
					 'true')
				    -| ['compiler_generated'] ) ->
				let <_5> =
				    call %% Line 1801
					 'erlang':%% Line 1801
						  '+'
					(%% Line 1801
					 L, %% Line 1801
					    Delta)
				in  let <_6> =
					call %% Line 1801
					     'erlang':%% Line 1801
						      '-'
					    (_5, %% Line 1801
						 Line)
				    in  %% Line 1801
					apply 'interpret_file_attr'/3
					    (Forms, _6, Fs)
			    %% Line 1802
			    <>
				when ( call 'erlang':'=:='
					(Generated,
					 'false')
				    -| ['compiler_generated'] ) ->
				%% Line 1805
				case Fs of
				  %% Line 1806
				  <[_21|[_22|Fs1]]>
				      when call 'erlang':'=:='
					    (_22,
					     File) ->
				      let <_8> =
					  apply %% Line 1807
						'interpret_file_attr'/3
					      (%% Line 1807
					       Forms, %% Line 1807
						      0, %% Line 1807
							 [File|Fs1])
				      in  %% Line 1807
					  [Form|_8]
				  %% Line 1808
				  <_23> when 'true' ->
				      let <_9> =
					  apply %% Line 1809
						'interpret_file_attr'/3
					      (%% Line 1809
					       Forms, %% Line 1809
						      0, %% Line 1809
							 [File|Fs])
				      in  %% Line 1809
					  [Form|_9]
				end
			    ( <> when 'true' ->
				  primop 'match_fail'
				      ('if_clause')
			      -| ['compiler_generated'] )
			  end
	      %% Line 1812
	      <[Form0|Forms],Delta,Fs> when 'true' ->
		  let <F> =
		      fun (_13) ->
			  let <Line> =
			      call %% Line 1814
				   'erl_anno':%% Line 1814
					      'line'
				  (%% Line 1813
				   _13)
			  in  let <_12> =
				  call %% Line 1815
				       'erlang':%% Line 1815
						'+'
				      (%% Line 1815
				       Line, %% Line 1815
					     Delta)
			      in  %% Line 1815
				  call 'erl_anno':'set_line'
				      (_12, _13)
		  in  let <Form> =
			  call %% Line 1817
			       'erl_parse':%% Line 1817
					   'map_anno'
			      (%% Line 1817
			       F, %% Line 1817
				  Form0)
		      in  let <_17> =
			      apply %% Line 1818
				    'interpret_file_attr'/3
				  (%% Line 1818
				   Forms, %% Line 1818
					  Delta, %% Line 1818
						 Fs)
			  in  %% Line 1818
			      [Form|_17]
	      %% Line 1819
	      <[],_X_Delta,_X_Fs> when 'true' ->
		  %% Line 1820
		  []
	      ( <_20,_19,_18> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_20,_19,_18})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'interpret_file_attr',3}}] )
      -| [{'function',{'interpret_file_attr',3}}] )
'module_info'/0 =
    ( fun () ->
	  call 'erlang':'get_module_info'
	      ('epp')
      -| [{'function',{'module_info',0}}] )
'module_info'/1 =
    ( fun (_0) ->
	  call 'erlang':'get_module_info'
	      ('epp', ( _0
			-| [{'function',{'module_info',1}}] ))
      -| [{'function',{'module_info',1}}] )
end