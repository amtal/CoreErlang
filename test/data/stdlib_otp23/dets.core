module 'dets' ['add_user'/3,
	       'all'/0,
	       'bchunk'/2,
	       'close'/1,
	       'delete'/2,
	       'delete_all_objects'/1,
	       'delete_object'/2,
	       'file_info'/1,
	       'first'/1,
	       'foldl'/3,
	       'foldr'/3,
	       'from_ets'/2,
	       'fsck'/1,
	       'fsck'/2,
	       'get_head_field'/2,
	       'info'/1,
	       'info'/2,
	       'init'/2,
	       'init_table'/2,
	       'init_table'/3,
	       'insert'/2,
	       'insert_new'/2,
	       'internal_close'/1,
	       'internal_open'/3,
	       'is_compatible_bchunk_format'/2,
	       'is_dets_file'/1,
	       'istart_link'/1,
	       'lookup'/2,
	       'lookup_keys'/2,
	       'match'/1,
	       'match'/2,
	       'match'/3,
	       'match_delete'/2,
	       'match_object'/1,
	       'match_object'/2,
	       'match_object'/3,
	       'member'/2,
	       'module_info'/0,
	       'module_info'/1,
	       'next'/2,
	       'open_file'/1,
	       'open_file'/2,
	       'pid2name'/1,
	       'remove_user'/2,
	       'repair_continuation'/2,
	       'safe_fixtable'/2,
	       'select'/1,
	       'select'/2,
	       'select'/3,
	       'select_delete'/2,
	       'slot'/2,
	       'start'/0,
	       'stop'/0,
	       'sync'/1,
	       'system_code_change'/4,
	       'system_continue'/3,
	       'system_terminate'/4,
	       'table'/1,
	       'table'/2,
	       'to_ets'/2,
	       'traverse'/2,
	       'update_counter'/3,
	       'verbose'/0,
	       'verbose'/1,
	       'view'/1,
	       'where'/2]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[100|[101|[116|[115|[46|[101|[114|[108]]]]]]]]]]]],1}],
		%% Line 92
		'export_type' =
		    %% Line 92
		    [{'bindings_cont',0}|[{'cont',0}|[{'object_cont',0}|[{'select_cont',0}|[{'tab_name',0}]]]]],
		%% Line 95
		'compile' =
		    %% Line 95
		    [{'inline',[{'einval',2}|[{'badarg',2}|[{'undefined',1}|[{'badarg_exit',2}|[{'lookup_reply',2}]]]]]}],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[47|[117|[115|[114|[47|[108|[111|[99|[97|[108|[47|[67|[101|[108|[108|[97|[114|[47|[101|[114|[108|[97|[110|[103|[47|[50|[51|[46|[48|[46|[50|[47|[108|[105|[98|[47|[101|[114|[108|[97|[110|[103|[47|[108|[105|[98|[47|[107|[101|[114|[110|[101|[108|[45|[55|[46|[48|[47|[105|[110|[99|[108|[117|[100|[101|[47|[102|[105|[108|[101|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 25
		'record' =
		    %% Line 25
		    [{'file_info',[{'typed_record_field',{'record_field',26,{'atom',26,'size'}},{'type',26,'union',[{'type',26,'non_neg_integer',[]}|[{'atom',26,'undefined'}]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'type'}},{'type',27,'union',[{'atom',27,'device'}|[{'atom',27,'directory'}|[{'atom',27,'other'}|[{'atom',27,'regular'}|[{'atom',27,'symlink'}|[{'atom',28,'undefined'}]]]]]]}}|[{'typed_record_field',{'record_field',29,{'atom',29,'access'}},{'type',29,'union',[{'atom',29,'read'}|[{'atom',29,'write'}|[{'atom',29,'read_write'}|[{'atom',29,'none'}|[{'atom',29,'undefined'}]]]]]}}|[{'typed_record_field',{'record_field',30,{'atom',30,'atime'}},{'type',30,'union',[{'remote_type',30,[{'atom',30,'file'}|[{'atom',30,'date_time'}|[[]]]]}|[{'type',30,'non_neg_integer',[]}|[{'atom',30,'undefined'}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'mtime'}},{'type',34,'union',[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}|[{'atom',34,'undefined'}]]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'ctime'}},{'type',36,'union',[{'remote_type',36,[{'atom',36,'file'}|[{'atom',36,'date_time'}|[[]]]]}|[{'type',36,'non_neg_integer',[]}|[{'atom',36,'undefined'}]]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'mode'}},{'type',42,'union',[{'type',42,'non_neg_integer',[]}|[{'atom',42,'undefined'}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'links'}},{'type',46,'union',[{'type',46,'non_neg_integer',[]}|[{'atom',46,'undefined'}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'major_device'}},{'type',49,'union',[{'type',49,'non_neg_integer',[]}|[{'atom',49,'undefined'}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'minor_device'}},{'type',55,'union',[{'type',55,'non_neg_integer',[]}|[{'atom',55,'undefined'}]]}}|[{'typed_record_field',{'record_field',57,{'atom',57,'inode'}},{'type',57,'union',[{'type',57,'non_neg_integer',[]}|[{'atom',57,'undefined'}]]}}|[{'typed_record_field',{'record_field',58,{'atom',58,'uid'}},{'type',58,'union',[{'type',58,'non_neg_integer',[]}|[{'atom',58,'undefined'}]]}}|[{'typed_record_field',{'record_field',59,{'atom',59,'gid'}},{'type',59,'union',[{'type',59,'non_neg_integer',[]}|[{'atom',59,'undefined'}]]}}]]]]]]]]]]]]]}],
		%% Line 62
		'record' =
		    %% Line 62
		    [{'file_descriptor',[{'typed_record_field',{'record_field',63,{'atom',63,'module'}},{'type',63,'module',[]}}|[{'typed_record_field',{'record_field',64,{'atom',64,'data'}},{'type',64,'term',[]}}]]}],
		%% Line 99
		'file' =
		    %% Line 99
		    [{[115|[114|[99|[47|[100|[101|[116|[115|[46|[101|[114|[108]]]]]]]]]]]],99}],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[100|[101|[116|[115|[46|[104|[114|[108]]]]]]]]]]]],1}],
		%% Line 49
		'type' =
		    %% Line 49
		    [{'access',{'type',49,'union',[{'atom',49,'read'}|[{'atom',49,'read_write'}]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{'auto_save',{'type',50,'union',[{'atom',50,'infinity'}|[{'type',50,'non_neg_integer',[]}]]},[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{'hash_bif',{'type',51,'union',[{'atom',51,'phash'}|[{'atom',51,'phash2'}]]},[]}],
		%% Line 52
		'type' =
		    %% Line 52
		    [{'keypos',{'type',52,'pos_integer',[]},[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'no_colls',{'type',53,'list',[{'type',53,'tuple',[{'ann_type',53,[{'var',53,'LogSize'}|[{'type',53,'non_neg_integer',[]}]]}|[{'ann_type',54,[{'var',54,'NoCollections'}|[{'type',54,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{'no_slots',{'type',55,'union',[{'atom',55,'default'}|[{'type',55,'non_neg_integer',[]}]]},[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{'tab_name',{'type',56,'term',[]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{'type',{'type',57,'union',[{'atom',57,'bag'}|[{'atom',57,'duplicate_bag'}|[{'atom',57,'set'}]]]},[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'update_mode',{'type',58,'union',[{'atom',58,'dirty'}|[{'atom',59,'new_dirty'}|[{'atom',60,'saved'}|[{'type',61,'tuple',[{'atom',61,'error'}|[{'ann_type',61,[{'var',61,'Reason'}|[{'type',61,'term',[]}]]}]]}]]]]},[]}],
		%% Line 64
		'record' =
		    %% Line 64
		    [{'head',[{'typed_record_field',{'record_field',65,{'atom',65,'m'}},{'type',65,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',66,{'atom',66,'m2'}},{'type',66,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',67,{'atom',67,'next'}},{'type',67,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',69,{'atom',69,'fptr'}},{'remote_type',69,[{'atom',69,'file'}|[{'atom',69,'fd'}|[[]]]]}}|[{'typed_record_field',{'record_field',70,{'atom',70,'no_objects'}},{'type',70,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',71,{'atom',71,'no_keys'}},{'type',71,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',72,{'atom',72,'maxobjsize'}},{'type',72,'union',[{'atom',72,'undefined'}|[{'type',72,'non_neg_integer',[]}]]}}|[{'record_field',74,{'atom',74,'n'}}|[{'typed_record_field',{'record_field',75,{'atom',75,'type'}},{'user_type',75,'type',[]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'keypos'}},{'user_type',76,'keypos',[]}}|[{'typed_record_field',{'record_field',77,{'atom',77,'freelists'}},{'type',77,'union',[{'atom',77,'undefined'}|[{'type',78,'tuple','any'}]]}}|[{'typed_record_field',{'record_field',80,{'atom',80,'freelists_p'}},{'type',80,'union',[{'atom',80,'undefined'}|[{'type',81,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',82,{'atom',82,'no_collections'}},{'type',82,'union',[{'atom',82,'undefined'}|[{'user_type',83,'no_colls',[]}]]}}|[{'typed_record_field',{'record_field',85,{'atom',85,'auto_save'}},{'user_type',85,'auto_save',[]}}|[{'typed_record_field',{'record_field',86,{'atom',86,'update_mode'}},{'user_type',86,'update_mode',[]}}|[{'typed_record_field',{'record_field',87,{'atom',87,'fixed'},{'atom',87,'false'}},{'type',87,'union',[{'atom',87,'false'}|[{'type',88,'tuple',[{'type',88,'tuple',[{'type',88,'integer',[]}|[{'type',88,'integer',[]}]]}|[{'type',89,'list',[{'type',89,'tuple',[{'type',89,'pid',[]}|[{'type',90,'non_neg_integer',[]}]]}]}]]}]]}}|[{'typed_record_field',{'record_field',91,{'atom',91,'hash_bif'}},{'user_type',91,'hash_bif',[]}}|[{'typed_record_field',{'record_field',92,{'atom',92,'has_md5'}},{'type',92,'boolean',[]}}|[{'typed_record_field',{'record_field',94,{'atom',94,'min_no_slots'}},{'user_type',94,'no_slots',[]}}|[{'typed_record_field',{'record_field',95,{'atom',95,'max_no_slots'}},{'user_type',95,'no_slots',[]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'cache'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'user_type',96,'cache',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'filename'}},{'remote_type',98,[{'atom',98,'file'}|[{'atom',98,'name'}|[[]]]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'access'},{'atom',99,'read_write'}},{'user_type',99,'access',[]}}|[{'typed_record_field',{'record_field',100,{'atom',100,'ram_file'},{'atom',100,'false'}},{'type',100,'boolean',[]}}|[{'typed_record_field',{'record_field',101,{'atom',101,'name'}},{'user_type',101,'tab_name',[]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'parent'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'pid',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'server'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'pid',[]}]]}}|[{'typed_record_field',{'record_field',106,{'atom',106,'bump'}},{'type',106,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'base'}},{'type',107,'non_neg_integer',[]}}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}],
		%% Line 112
		'record' =
		    %% Line 112
		    [{'fileheader',[{'typed_record_field',{'record_field',113,{'atom',113,'freelist'}},{'type',113,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'fl_base'}},{'type',114,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'cookie'}},{'type',115,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'closed_properly'}},{'type',116,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'type'}},{'type',117,'union',[{'atom',117,'badtype'}|[{'user_type',117,'type',[]}]]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'version'}},{'type',118,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'m'}},{'type',119,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'next'}},{'type',120,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'keypos'}},{'user_type',121,'keypos',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'no_objects'}},{'type',122,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'no_keys'}},{'type',123,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'min_no_slots'}},{'type',124,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'max_no_slots'}},{'type',125,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',126,{'atom',126,'no_colls'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'user_type',126,'no_colls',[]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'hash_method'}},{'type',127,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'read_md5'}},{'type',128,'binary',[]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'has_md5'}},{'type',129,'boolean',[]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'md5'}},{'type',130,'binary',[]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'trailer'}},{'type',131,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'eof'}},{'type',132,'non_neg_integer',[]}}|[{'record_field',133,{'atom',133,'n'}}]]]]]]]]]]]]]]]]]]]]]}],
		%% Line 136
		'type' =
		    %% Line 136
		    [{'delay',{'type',136,'non_neg_integer',[]},[]}],
		%% Line 137
		'type' =
		    %% Line 137
		    [{'threshold',{'type',137,'non_neg_integer',[]},[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{'cache_parms',{'type',139,'tuple',[{'ann_type',139,[{'var',139,'Delay'}|[{'user_type',139,'delay',[]}]]}|[{'ann_type',141,[{'var',141,'Size'}|[{'user_type',141,'threshold',[]}]]}]]},[]}],
		%% Line 144
		'record' =
		    %% Line 144
		    [{'cache',[{'typed_record_field',{'record_field',145,{'atom',145,'cache'}},{'type',146,'list',[{'type',146,'tuple',[{'ann_type',146,[{'var',146,'Key'}|[{'type',146,'term',[]}]]}|[{'type',147,'tuple',[{'ann_type',147,[{'var',147,'Seq'}|[{'type',147,'non_neg_integer',[]}]]}|[{'ann_type',147,[{'var',147,'Item'}|[{'type',147,'term',[]}]]}]]}]]}]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'csize'}},{'type',148,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'inserts'}},{'type',150,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',151,{'atom',151,'wrtime'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'integer',[]}]]}}|[{'typed_record_field',{'record_field',152,{'atom',152,'tsize'}},{'user_type',152,'threshold',[]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'delay'}},{'user_type',153,'delay',[]}}]]]]]]}],
		%% Line 156
		'type' =
		    %% Line 156
		    [{'cache',{'type',156,'record',[{'atom',156,'cache'}]},[]}],
		%% Line 101
		'file' =
		    %% Line 101
		    [{[115|[114|[99|[47|[100|[101|[116|[115|[46|[101|[114|[108]]]]]]]]]]]],101}],
		%% Line 139
		'record' =
		    %% Line 139
		    [{'dets_cont',[{'typed_record_field',{'record_field',140,{'atom',140,'what'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'atom',140,'bchunk'}|[{'atom',140,'bindings'}|[{'atom',140,'object'}|[{'atom',140,'select'}]]]]]}}|[{'typed_record_field',{'record_field',141,{'atom',141,'no_objs'}},{'type',141,'union',[{'atom',141,'default'}|[{'type',141,'pos_integer',[]}]]}}|[{'typed_record_field',{'record_field',142,{'atom',142,'bin'}},{'type',142,'union',[{'atom',142,'eof'}|[{'type',142,'binary',[]}]]}}|[{'typed_record_field',{'record_field',144,{'atom',144,'alloc'}},{'type',144,'union',[{'type',144,'binary',[]}|[{'type',145,'tuple',[{'ann_type',145,[{'var',145,'From'}|[{'type',145,'non_neg_integer',[]}]]}|[{'ann_type',146,[{'var',146,'To'}|[{'atom',146,'non_neg_integer'}]]}|[{'type',147,'binary',[]}]]]}]]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'tab'}},{'user_type',148,'tab_name',[]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'proc'}},{'type',149,'union',[{'atom',149,'undefined'}|[{'type',149,'pid',[]}]]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'match_program'}},{'type',150,'union',[{'atom',150,'true'}|[{'atom',151,'undefined'}|[{'type',152,'tuple',[{'atom',152,'match_spec'}|[{'remote_type',152,[{'atom',152,'ets'}|[{'atom',152,'comp_match_spec'}|[[]]]]}]]}]]]}}]]]]]]]}],
		%% Line 155
		'record' =
		    %% Line 155
		    [{'open_args',[{'typed_record_field',{'record_field',156,{'atom',156,'file'}},{'type',156,'list',[]}}|[{'typed_record_field',{'record_field',157,{'atom',157,'type'}},{'user_type',157,'type',[]}}|[{'typed_record_field',{'record_field',158,{'atom',158,'keypos'}},{'user_type',158,'keypos',[]}}|[{'typed_record_field',{'record_field',159,{'atom',159,'repair'}},{'type',159,'union',[{'atom',159,'force'}|[{'type',159,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',160,{'atom',160,'min_no_slots'}},{'user_type',160,'no_slots',[]}}|[{'typed_record_field',{'record_field',161,{'atom',161,'max_no_slots'}},{'user_type',161,'no_slots',[]}}|[{'typed_record_field',{'record_field',162,{'atom',162,'ram_file'}},{'type',162,'boolean',[]}}|[{'typed_record_field',{'record_field',163,{'atom',163,'delayed_write'}},{'user_type',163,'cache_parms',[]}}|[{'typed_record_field',{'record_field',164,{'atom',164,'auto_save'}},{'user_type',164,'auto_save',[]}}|[{'typed_record_field',{'record_field',165,{'atom',165,'access'}},{'user_type',165,'access',[]}}|[{'typed_record_field',{'record_field',166,{'atom',166,'debug'}},{'type',166,'boolean',[]}}]]]]]]]]]]]}],
		%% Line 182
		'opaque' =
		    %% Line 182
		    [{'bindings_cont',{'type',182,'record',[{'atom',182,'dets_cont'}]},[]}],
		%% Line 183
		'opaque' =
		    %% Line 183
		    [{'cont',{'type',183,'record',[{'atom',183,'dets_cont'}]},[]}],
		%% Line 184
		'type' =
		    %% Line 184
		    [{'match_spec',{'remote_type',184,[{'atom',184,'ets'}|[{'atom',184,'match_spec'}|[[]]]]},[]}],
		%% Line 185
		'type' =
		    %% Line 185
		    [{'object',{'type',185,'tuple','any'},[]}],
		%% Line 186
		'opaque' =
		    %% Line 186
		    [{'object_cont',{'type',186,'record',[{'atom',186,'dets_cont'}]},[]}],
		%% Line 187
		'type' =
		    %% Line 187
		    [{'pattern',{'type',187,'union',[{'type',187,'atom',[]}|[{'type',187,'tuple','any'}]]},[]}],
		%% Line 188
		'opaque' =
		    %% Line 188
		    [{'select_cont',{'type',188,'record',[{'atom',188,'dets_cont'}]},[]}],
		%% Line 209
		'spec' =
		    %% Line 209
		    [{{'all',0},[{'type',209,'fun',[{'type',209,'product',[]}|[{'type',209,'list',[{'user_type',209,'tab_name',[]}]}]]}]}],
		%% Line 214
		'spec' =
		    %% Line 214
		    [{{'bchunk',2},[{'type',214,'bounded_fun',[{'type',214,'fun',[{'type',214,'product',[{'var',214,'Name'}|[{'var',214,'Continuation'}]]}|[{'type',215,'union',[{'type',215,'tuple',[{'var',215,'Continuation2'}|[{'var',215,'Data'}]]}|[{'atom',215,'$end_of_table'}|[{'type',215,'tuple',[{'atom',215,'error'}|[{'var',215,'Reason'}]]}]]]}]]}|[[{'type',216,'constraint',[{'atom',216,'is_subtype'}|[[{'var',216,'Name'}|[{'user_type',216,'tab_name',[]}]]]]}|[{'type',217,'constraint',[{'atom',217,'is_subtype'}|[[{'var',217,'Continuation'}|[{'type',217,'union',[{'atom',217,'start'}|[{'user_type',217,'cont',[]}]]}]]]]}|[{'type',218,'constraint',[{'atom',218,'is_subtype'}|[[{'var',218,'Continuation2'}|[{'user_type',218,'cont',[]}]]]]}|[{'type',219,'constraint',[{'atom',219,'is_subtype'}|[[{'var',219,'Data'}|[{'type',219,'union',[{'type',219,'binary',[]}|[{'type',219,'tuple','any'}]]}]]]]}|[{'type',220,'constraint',[{'atom',220,'is_subtype'}|[[{'var',220,'Reason'}|[{'type',220,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 229
		'spec' =
		    %% Line 229
		    [{{'close',1},[{'type',229,'bounded_fun',[{'type',229,'fun',[{'type',229,'product',[{'var',229,'Name'}]}|[{'type',229,'union',[{'atom',229,'ok'}|[{'type',229,'tuple',[{'atom',229,'error'}|[{'var',229,'Reason'}]]}]]}]]}|[[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'Name'}|[{'user_type',230,'tab_name',[]}]]]]}|[{'type',231,'constraint',[{'atom',231,'is_subtype'}|[[{'var',231,'Reason'}|[{'type',231,'term',[]}]]]]}]]]]}]}],
		%% Line 241
		'spec' =
		    %% Line 241
		    [{{'delete',2},[{'type',241,'bounded_fun',[{'type',241,'fun',[{'type',241,'product',[{'var',241,'Name'}|[{'var',241,'Key'}]]}|[{'type',241,'union',[{'atom',241,'ok'}|[{'type',241,'tuple',[{'atom',241,'error'}|[{'var',241,'Reason'}]]}]]}]]}|[[{'type',242,'constraint',[{'atom',242,'is_subtype'}|[[{'var',242,'Name'}|[{'user_type',242,'tab_name',[]}]]]]}|[{'type',243,'constraint',[{'atom',243,'is_subtype'}|[[{'var',243,'Key'}|[{'type',243,'term',[]}]]]]}|[{'type',244,'constraint',[{'atom',244,'is_subtype'}|[[{'var',244,'Reason'}|[{'type',244,'term',[]}]]]]}]]]]]}]}],
		%% Line 249
		'spec' =
		    %% Line 249
		    [{{'delete_all_objects',1},[{'type',249,'bounded_fun',[{'type',249,'fun',[{'type',249,'product',[{'var',249,'Name'}]}|[{'type',249,'union',[{'atom',249,'ok'}|[{'type',249,'tuple',[{'atom',249,'error'}|[{'var',249,'Reason'}]]}]]}]]}|[[{'type',250,'constraint',[{'atom',250,'is_subtype'}|[[{'var',250,'Name'}|[{'user_type',250,'tab_name',[]}]]]]}|[{'type',251,'constraint',[{'atom',251,'is_subtype'}|[[{'var',251,'Reason'}|[{'type',251,'term',[]}]]]]}]]]]}]}],
		%% Line 263
		'spec' =
		    %% Line 263
		    [{{'delete_object',2},[{'type',263,'bounded_fun',[{'type',263,'fun',[{'type',263,'product',[{'var',263,'Name'}|[{'var',263,'Object'}]]}|[{'type',263,'union',[{'atom',263,'ok'}|[{'type',263,'tuple',[{'atom',263,'error'}|[{'var',263,'Reason'}]]}]]}]]}|[[{'type',264,'constraint',[{'atom',264,'is_subtype'}|[[{'var',264,'Name'}|[{'user_type',264,'tab_name',[]}]]]]}|[{'type',265,'constraint',[{'atom',265,'is_subtype'}|[[{'var',265,'Object'}|[{'user_type',265,'object',[]}]]]]}|[{'type',266,'constraint',[{'atom',266,'is_subtype'}|[[{'var',266,'Reason'}|[{'type',266,'term',[]}]]]]}]]]]]}]}],
		%% Line 290
		'spec' =
		    %% Line 290
		    [{{'first',1},[{'type',290,'bounded_fun',[{'type',290,'fun',[{'type',290,'product',[{'var',290,'Name'}]}|[{'type',290,'union',[{'var',290,'Key'}|[{'atom',290,'$end_of_table'}]]}]]}|[[{'type',291,'constraint',[{'atom',291,'is_subtype'}|[[{'var',291,'Name'}|[{'user_type',291,'tab_name',[]}]]]]}|[{'type',292,'constraint',[{'atom',292,'is_subtype'}|[[{'var',292,'Key'}|[{'type',292,'term',[]}]]]]}]]]]}]}],
		%% Line 297
		'spec' =
		    %% Line 297
		    [{{'foldr',3},[{'type',297,'bounded_fun',[{'type',297,'fun',[{'type',297,'product',[{'var',297,'Function'}|[{'var',297,'Acc0'}|[{'var',297,'Name'}]]]}|[{'type',297,'union',[{'var',297,'Acc'}|[{'type',297,'tuple',[{'atom',297,'error'}|[{'var',297,'Reason'}]]}]]}]]}|[[{'type',298,'constraint',[{'atom',298,'is_subtype'}|[[{'var',298,'Name'}|[{'user_type',298,'tab_name',[]}]]]]}|[{'type',299,'constraint',[{'atom',299,'is_subtype'}|[[{'var',299,'Function'}|[{'type',299,'fun',[{'type',299,'product',[{'ann_type',299,[{'var',299,'Object'}|[{'user_type',299,'object',[]}]]}|[{'var',299,'AccIn'}]]}|[{'var',299,'AccOut'}]]}]]]]}|[{'type',300,'constraint',[{'atom',300,'is_subtype'}|[[{'var',300,'Acc0'}|[{'type',300,'term',[]}]]]]}|[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'Acc'}|[{'type',301,'term',[]}]]]]}|[{'type',302,'constraint',[{'atom',302,'is_subtype'}|[[{'var',302,'AccIn'}|[{'type',302,'term',[]}]]]]}|[{'type',303,'constraint',[{'atom',303,'is_subtype'}|[[{'var',303,'AccOut'}|[{'type',303,'term',[]}]]]]}|[{'type',304,'constraint',[{'atom',304,'is_subtype'}|[[{'var',304,'Reason'}|[{'type',304,'term',[]}]]]]}]]]]]]]]]}]}],
		%% Line 309
		'spec' =
		    %% Line 309
		    [{{'foldl',3},[{'type',309,'bounded_fun',[{'type',309,'fun',[{'type',309,'product',[{'var',309,'Function'}|[{'var',309,'Acc0'}|[{'var',309,'Name'}]]]}|[{'type',309,'union',[{'var',309,'Acc'}|[{'type',309,'tuple',[{'atom',309,'error'}|[{'var',309,'Reason'}]]}]]}]]}|[[{'type',310,'constraint',[{'atom',310,'is_subtype'}|[[{'var',310,'Name'}|[{'user_type',310,'tab_name',[]}]]]]}|[{'type',311,'constraint',[{'atom',311,'is_subtype'}|[[{'var',311,'Function'}|[{'type',311,'fun',[{'type',311,'product',[{'ann_type',311,[{'var',311,'Object'}|[{'user_type',311,'object',[]}]]}|[{'var',311,'AccIn'}]]}|[{'var',311,'AccOut'}]]}]]]]}|[{'type',312,'constraint',[{'atom',312,'is_subtype'}|[[{'var',312,'Acc0'}|[{'type',312,'term',[]}]]]]}|[{'type',313,'constraint',[{'atom',313,'is_subtype'}|[[{'var',313,'Acc'}|[{'type',313,'term',[]}]]]]}|[{'type',314,'constraint',[{'atom',314,'is_subtype'}|[[{'var',314,'AccIn'}|[{'type',314,'term',[]}]]]]}|[{'type',315,'constraint',[{'atom',315,'is_subtype'}|[[{'var',315,'AccOut'}|[{'type',315,'term',[]}]]]]}|[{'type',316,'constraint',[{'atom',316,'is_subtype'}|[[{'var',316,'Reason'}|[{'type',316,'term',[]}]]]]}]]]]]]]]]}]}],
		%% Line 322
		'spec' =
		    %% Line 322
		    [{{'from_ets',2},[{'type',322,'bounded_fun',[{'type',322,'fun',[{'type',322,'product',[{'var',322,'Name'}|[{'var',322,'EtsTab'}]]}|[{'type',322,'union',[{'atom',322,'ok'}|[{'type',322,'tuple',[{'atom',322,'error'}|[{'var',322,'Reason'}]]}]]}]]}|[[{'type',323,'constraint',[{'atom',323,'is_subtype'}|[[{'var',323,'Name'}|[{'user_type',323,'tab_name',[]}]]]]}|[{'type',324,'constraint',[{'atom',324,'is_subtype'}|[[{'var',324,'EtsTab'}|[{'remote_type',324,[{'atom',324,'ets'}|[{'atom',324,'tab'}|[[]]]]}]]]]}|[{'type',325,'constraint',[{'atom',325,'is_subtype'}|[[{'var',325,'Reason'}|[{'type',325,'term',[]}]]]]}]]]]]}]}],
		%% Line 349
		'spec' =
		    %% Line 349
		    [{{'info',1},[{'type',349,'bounded_fun',[{'type',349,'fun',[{'type',349,'product',[{'var',349,'Name'}]}|[{'type',349,'union',[{'var',349,'InfoList'}|[{'atom',349,'undefined'}]]}]]}|[[{'type',350,'constraint',[{'atom',350,'is_subtype'}|[[{'var',350,'Name'}|[{'user_type',350,'tab_name',[]}]]]]}|[{'type',351,'constraint',[{'atom',351,'is_subtype'}|[[{'var',351,'InfoList'}|[{'type',351,'list',[{'var',351,'InfoTuple'}]}]]]]}|[{'type',352,'constraint',[{'atom',352,'is_subtype'}|[[{'var',352,'InfoTuple'}|[{'type',352,'union',[{'type',352,'tuple',[{'atom',352,'file_size'}|[{'type',352,'non_neg_integer',[]}]]}|[{'type',353,'tuple',[{'atom',353,'filename'}|[{'remote_type',353,[{'atom',353,'file'}|[{'atom',353,'name'}|[[]]]]}]]}|[{'type',354,'tuple',[{'atom',354,'keypos'}|[{'user_type',354,'keypos',[]}]]}|[{'type',355,'tuple',[{'atom',355,'size'}|[{'type',355,'non_neg_integer',[]}]]}|[{'type',356,'tuple',[{'atom',356,'type'}|[{'user_type',356,'type',[]}]]}]]]]]}]]]]}]]]]]}]}],
		%% Line 366
		'spec' =
		    %% Line 366
		    [{{'info',2},[{'type',366,'bounded_fun',[{'type',366,'fun',[{'type',366,'product',[{'var',366,'Name'}|[{'var',366,'Item'}]]}|[{'type',366,'union',[{'var',366,'Value'}|[{'atom',366,'undefined'}]]}]]}|[[{'type',367,'constraint',[{'atom',367,'is_subtype'}|[[{'var',367,'Name'}|[{'user_type',367,'tab_name',[]}]]]]}|[{'type',368,'constraint',[{'atom',368,'is_subtype'}|[[{'var',368,'Item'}|[{'type',368,'union',[{'atom',368,'access'}|[{'atom',368,'auto_save'}|[{'atom',368,'bchunk_format'}|[{'atom',369,'hash'}|[{'atom',369,'file_size'}|[{'atom',369,'filename'}|[{'atom',369,'keypos'}|[{'atom',369,'memory'}|[{'atom',370,'no_keys'}|[{'atom',370,'no_objects'}|[{'atom',370,'no_slots'}|[{'atom',370,'owner'}|[{'atom',370,'ram_file'}|[{'atom',371,'safe_fixed'}|[{'atom',371,'safe_fixed_monotonic_time'}|[{'atom',371,'size'}|[{'atom',371,'type'}]]]]]]]]]]]]]]]]]}]]]]}|[{'type',372,'constraint',[{'atom',372,'is_subtype'}|[[{'var',372,'Value'}|[{'type',372,'term',[]}]]]]}]]]]]}]}],
		%% Line 396
		'spec' =
		    %% Line 396
		    [{{'init_table',2},[{'type',396,'bounded_fun',[{'type',396,'fun',[{'type',396,'product',[{'var',396,'Name'}|[{'var',396,'InitFun'}]]}|[{'type',396,'union',[{'atom',396,'ok'}|[{'type',396,'tuple',[{'atom',396,'error'}|[{'var',396,'Reason'}]]}]]}]]}|[[{'type',397,'constraint',[{'atom',397,'is_subtype'}|[[{'var',397,'Name'}|[{'user_type',397,'tab_name',[]}]]]]}|[{'type',398,'constraint',[{'atom',398,'is_subtype'}|[[{'var',398,'InitFun'}|[{'type',398,'fun',[{'type',398,'product',[{'var',398,'Arg'}]}|[{'var',398,'Res'}]]}]]]]}|[{'type',399,'constraint',[{'atom',399,'is_subtype'}|[[{'var',399,'Arg'}|[{'type',399,'union',[{'atom',399,'read'}|[{'atom',399,'close'}]]}]]]]}|[{'type',400,'constraint',[{'atom',400,'is_subtype'}|[[{'var',400,'Res'}|[{'type',400,'union',[{'atom',400,'end_of_input'}|[{'type',400,'tuple',[{'type',400,'list',[{'user_type',400,'object',[]}]}|[{'var',400,'InitFun'}]]}|[{'type',400,'tuple',[{'var',400,'Data'}|[{'var',400,'InitFun'}]]}|[{'type',400,'term',[]}]]]]}]]]]}|[{'type',401,'constraint',[{'atom',401,'is_subtype'}|[[{'var',401,'Reason'}|[{'type',401,'term',[]}]]]]}|[{'type',402,'constraint',[{'atom',402,'is_subtype'}|[[{'var',402,'Data'}|[{'type',402,'union',[{'type',402,'binary',[]}|[{'type',402,'tuple','any'}]]}]]]]}]]]]]]]]}]}],
		%% Line 407
		'spec' =
		    %% Line 407
		    [{{'init_table',3},[{'type',407,'bounded_fun',[{'type',407,'fun',[{'type',407,'product',[{'var',407,'Name'}|[{'var',407,'InitFun'}|[{'var',407,'Options'}]]]}|[{'type',407,'union',[{'atom',407,'ok'}|[{'type',407,'tuple',[{'atom',407,'error'}|[{'var',407,'Reason'}]]}]]}]]}|[[{'type',408,'constraint',[{'atom',408,'is_subtype'}|[[{'var',408,'Name'}|[{'user_type',408,'tab_name',[]}]]]]}|[{'type',409,'constraint',[{'atom',409,'is_subtype'}|[[{'var',409,'InitFun'}|[{'type',409,'fun',[{'type',409,'product',[{'var',409,'Arg'}]}|[{'var',409,'Res'}]]}]]]]}|[{'type',410,'constraint',[{'atom',410,'is_subtype'}|[[{'var',410,'Arg'}|[{'type',410,'union',[{'atom',410,'read'}|[{'atom',410,'close'}]]}]]]]}|[{'type',411,'constraint',[{'atom',411,'is_subtype'}|[[{'var',411,'Res'}|[{'type',411,'union',[{'atom',411,'end_of_input'}|[{'type',411,'tuple',[{'type',411,'list',[{'user_type',411,'object',[]}]}|[{'var',411,'InitFun'}]]}|[{'type',411,'tuple',[{'var',411,'Data'}|[{'var',411,'InitFun'}]]}|[{'type',411,'term',[]}]]]]}]]]]}|[{'type',412,'constraint',[{'atom',412,'is_subtype'}|[[{'var',412,'Options'}|[{'type',412,'union',[{'var',412,'Option'}|[{'type',412,'list',[{'var',412,'Option'}]}]]}]]]]}|[{'type',413,'constraint',[{'atom',413,'is_subtype'}|[[{'var',413,'Option'}|[{'type',413,'union',[{'type',413,'tuple',[{'atom',413,'min_no_slots'}|[{'user_type',413,'no_slots',[]}]]}|[{'type',413,'tuple',[{'atom',413,'format'}|[{'type',413,'union',[{'atom',413,'term'}|[{'atom',413,'bchunk'}]]}]]}]]}]]]]}|[{'type',414,'constraint',[{'atom',414,'is_subtype'}|[[{'var',414,'Reason'}|[{'type',414,'term',[]}]]]]}|[{'type',415,'constraint',[{'atom',415,'is_subtype'}|[[{'var',415,'Data'}|[{'type',415,'union',[{'type',415,'binary',[]}|[{'type',415,'tuple','any'}]]}]]]]}]]]]]]]]]]}]}],
		%% Line 430
		'spec' =
		    %% Line 430
		    [{{'insert',2},[{'type',430,'bounded_fun',[{'type',430,'fun',[{'type',430,'product',[{'var',430,'Name'}|[{'var',430,'Objects'}]]}|[{'type',430,'union',[{'atom',430,'ok'}|[{'type',430,'tuple',[{'atom',430,'error'}|[{'var',430,'Reason'}]]}]]}]]}|[[{'type',431,'constraint',[{'atom',431,'is_subtype'}|[[{'var',431,'Name'}|[{'user_type',431,'tab_name',[]}]]]]}|[{'type',432,'constraint',[{'atom',432,'is_subtype'}|[[{'var',432,'Objects'}|[{'type',432,'union',[{'user_type',432,'object',[]}|[{'type',432,'list',[{'user_type',432,'object',[]}]}]]}]]]]}|[{'type',433,'constraint',[{'atom',433,'is_subtype'}|[[{'var',433,'Reason'}|[{'type',433,'term',[]}]]]]}]]]]]}]}],
		%% Line 440
		'spec' =
		    %% Line 440
		    [{{'insert_new',2},[{'type',440,'bounded_fun',[{'type',440,'fun',[{'type',440,'product',[{'var',440,'Name'}|[{'var',440,'Objects'}]]}|[{'type',440,'union',[{'type',440,'boolean',[]}|[{'type',440,'tuple',[{'atom',440,'error'}|[{'var',440,'Reason'}]]}]]}]]}|[[{'type',441,'constraint',[{'atom',441,'is_subtype'}|[[{'var',441,'Name'}|[{'user_type',441,'tab_name',[]}]]]]}|[{'type',442,'constraint',[{'atom',442,'is_subtype'}|[[{'var',442,'Objects'}|[{'type',442,'union',[{'user_type',442,'object',[]}|[{'type',442,'list',[{'user_type',442,'object',[]}]}]]}]]]]}|[{'type',443,'constraint',[{'atom',443,'is_subtype'}|[[{'var',443,'Reason'}|[{'type',443,'term',[]}]]]]}]]]]]}]}],
		%% Line 456
		'spec' =
		    %% Line 456
		    [{{'is_compatible_bchunk_format',2},[{'type',456,'bounded_fun',[{'type',456,'fun',[{'type',456,'product',[{'var',456,'Name'}|[{'var',456,'BchunkFormat'}]]}|[{'type',456,'boolean',[]}]]}|[[{'type',457,'constraint',[{'atom',457,'is_subtype'}|[[{'var',457,'Name'}|[{'user_type',457,'tab_name',[]}]]]]}|[{'type',458,'constraint',[{'atom',458,'is_subtype'}|[[{'var',458,'BchunkFormat'}|[{'type',458,'binary',[]}]]]]}]]]]}]}],
		%% Line 463
		'spec' =
		    %% Line 463
		    [{{'is_dets_file',1},[{'type',463,'bounded_fun',[{'type',463,'fun',[{'type',463,'product',[{'var',463,'Filename'}]}|[{'type',463,'union',[{'type',463,'boolean',[]}|[{'type',463,'tuple',[{'atom',463,'error'}|[{'var',463,'Reason'}]]}]]}]]}|[[{'type',464,'constraint',[{'atom',464,'is_subtype'}|[[{'var',464,'Filename'}|[{'remote_type',464,[{'atom',464,'file'}|[{'atom',464,'name'}|[[]]]]}]]]]}|[{'type',465,'constraint',[{'atom',465,'is_subtype'}|[[{'var',465,'Reason'}|[{'type',465,'term',[]}]]]]}]]]]}]}],
		%% Line 480
		'spec' =
		    %% Line 480
		    [{{'lookup',2},[{'type',480,'bounded_fun',[{'type',480,'fun',[{'type',480,'product',[{'var',480,'Name'}|[{'var',480,'Key'}]]}|[{'type',480,'union',[{'var',480,'Objects'}|[{'type',480,'tuple',[{'atom',480,'error'}|[{'var',480,'Reason'}]]}]]}]]}|[[{'type',481,'constraint',[{'atom',481,'is_subtype'}|[[{'var',481,'Name'}|[{'user_type',481,'tab_name',[]}]]]]}|[{'type',482,'constraint',[{'atom',482,'is_subtype'}|[[{'var',482,'Key'}|[{'type',482,'term',[]}]]]]}|[{'type',483,'constraint',[{'atom',483,'is_subtype'}|[[{'var',483,'Objects'}|[{'type',483,'list',[{'user_type',483,'object',[]}]}]]]]}|[{'type',484,'constraint',[{'atom',484,'is_subtype'}|[[{'var',484,'Reason'}|[{'type',484,'term',[]}]]]]}]]]]]]}]}],
		%% Line 498
		'spec' =
		    %% Line 498
		    [{{'match',2},[{'type',498,'bounded_fun',[{'type',498,'fun',[{'type',498,'product',[{'var',498,'Name'}|[{'var',498,'Pattern'}]]}|[{'type',498,'union',[{'type',498,'list',[{'var',498,'Match'}]}|[{'type',498,'tuple',[{'atom',498,'error'}|[{'var',498,'Reason'}]]}]]}]]}|[[{'type',499,'constraint',[{'atom',499,'is_subtype'}|[[{'var',499,'Name'}|[{'user_type',499,'tab_name',[]}]]]]}|[{'type',500,'constraint',[{'atom',500,'is_subtype'}|[[{'var',500,'Pattern'}|[{'user_type',500,'pattern',[]}]]]]}|[{'type',501,'constraint',[{'atom',501,'is_subtype'}|[[{'var',501,'Match'}|[{'type',501,'list',[{'type',501,'term',[]}]}]]]]}|[{'type',502,'constraint',[{'atom',502,'is_subtype'}|[[{'var',502,'Reason'}|[{'type',502,'term',[]}]]]]}]]]]]]}]}],
		%% Line 507
		'spec' =
		    %% Line 507
		    [{{'match',3},[{'type',507,'bounded_fun',[{'type',507,'fun',[{'type',507,'product',[{'var',507,'Name'}|[{'var',507,'Pattern'}|[{'var',507,'N'}]]]}|[{'type',508,'union',[{'type',508,'tuple',[{'type',508,'list',[{'var',508,'Match'}]}|[{'var',508,'Continuation'}]]}|[{'atom',508,'$end_of_table'}|[{'type',508,'tuple',[{'atom',508,'error'}|[{'var',508,'Reason'}]]}]]]}]]}|[[{'type',509,'constraint',[{'atom',509,'is_subtype'}|[[{'var',509,'Name'}|[{'user_type',509,'tab_name',[]}]]]]}|[{'type',510,'constraint',[{'atom',510,'is_subtype'}|[[{'var',510,'Pattern'}|[{'user_type',510,'pattern',[]}]]]]}|[{'type',511,'constraint',[{'atom',511,'is_subtype'}|[[{'var',511,'N'}|[{'type',511,'union',[{'atom',511,'default'}|[{'type',511,'non_neg_integer',[]}]]}]]]]}|[{'type',512,'constraint',[{'atom',512,'is_subtype'}|[[{'var',512,'Continuation'}|[{'user_type',512,'bindings_cont',[]}]]]]}|[{'type',513,'constraint',[{'atom',513,'is_subtype'}|[[{'var',513,'Match'}|[{'type',513,'list',[{'type',513,'term',[]}]}]]]]}|[{'type',514,'constraint',[{'atom',514,'is_subtype'}|[[{'var',514,'Reason'}|[{'type',514,'term',[]}]]]]}]]]]]]]]}]}],
		%% Line 519
		'spec' =
		    %% Line 519
		    [{{'match',1},[{'type',519,'bounded_fun',[{'type',519,'fun',[{'type',519,'product',[{'var',519,'Continuation'}]}|[{'type',520,'union',[{'type',520,'tuple',[{'type',520,'list',[{'var',520,'Match'}]}|[{'var',520,'Continuation2'}]]}|[{'atom',520,'$end_of_table'}|[{'type',520,'tuple',[{'atom',520,'error'}|[{'var',520,'Reason'}]]}]]]}]]}|[[{'type',521,'constraint',[{'atom',521,'is_subtype'}|[[{'var',521,'Continuation'}|[{'user_type',521,'bindings_cont',[]}]]]]}|[{'type',522,'constraint',[{'atom',522,'is_subtype'}|[[{'var',522,'Continuation2'}|[{'user_type',522,'bindings_cont',[]}]]]]}|[{'type',523,'constraint',[{'atom',523,'is_subtype'}|[[{'var',523,'Match'}|[{'type',523,'list',[{'type',523,'term',[]}]}]]]]}|[{'type',524,'constraint',[{'atom',524,'is_subtype'}|[[{'var',524,'Reason'}|[{'type',524,'term',[]}]]]]}]]]]]]}]}],
		%% Line 531
		'spec' =
		    %% Line 531
		    [{{'match_delete',2},[{'type',531,'bounded_fun',[{'type',531,'fun',[{'type',531,'product',[{'var',531,'Name'}|[{'var',531,'Pattern'}]]}|[{'type',531,'union',[{'atom',531,'ok'}|[{'type',531,'tuple',[{'atom',531,'error'}|[{'var',531,'Reason'}]]}]]}]]}|[[{'type',532,'constraint',[{'atom',532,'is_subtype'}|[[{'var',532,'Name'}|[{'user_type',532,'tab_name',[]}]]]]}|[{'type',533,'constraint',[{'atom',533,'is_subtype'}|[[{'var',533,'Pattern'}|[{'user_type',533,'pattern',[]}]]]]}|[{'type',534,'constraint',[{'atom',534,'is_subtype'}|[[{'var',534,'Reason'}|[{'type',534,'term',[]}]]]]}]]]]]}]}],
		%% Line 562
		'spec' =
		    %% Line 562
		    [{{'match_object',2},[{'type',562,'bounded_fun',[{'type',562,'fun',[{'type',562,'product',[{'var',562,'Name'}|[{'var',562,'Pattern'}]]}|[{'type',562,'union',[{'var',562,'Objects'}|[{'type',562,'tuple',[{'atom',562,'error'}|[{'var',562,'Reason'}]]}]]}]]}|[[{'type',563,'constraint',[{'atom',563,'is_subtype'}|[[{'var',563,'Name'}|[{'user_type',563,'tab_name',[]}]]]]}|[{'type',564,'constraint',[{'atom',564,'is_subtype'}|[[{'var',564,'Pattern'}|[{'user_type',564,'pattern',[]}]]]]}|[{'type',565,'constraint',[{'atom',565,'is_subtype'}|[[{'var',565,'Objects'}|[{'type',565,'list',[{'user_type',565,'object',[]}]}]]]]}|[{'type',566,'constraint',[{'atom',566,'is_subtype'}|[[{'var',566,'Reason'}|[{'type',566,'term',[]}]]]]}]]]]]]}]}],
		%% Line 571
		'spec' =
		    %% Line 571
		    [{{'match_object',3},[{'type',571,'bounded_fun',[{'type',571,'fun',[{'type',571,'product',[{'var',571,'Name'}|[{'var',571,'Pattern'}|[{'var',571,'N'}]]]}|[{'type',572,'union',[{'type',572,'tuple',[{'var',572,'Objects'}|[{'var',572,'Continuation'}]]}|[{'atom',572,'$end_of_table'}|[{'type',572,'tuple',[{'atom',572,'error'}|[{'var',572,'Reason'}]]}]]]}]]}|[[{'type',573,'constraint',[{'atom',573,'is_subtype'}|[[{'var',573,'Name'}|[{'user_type',573,'tab_name',[]}]]]]}|[{'type',574,'constraint',[{'atom',574,'is_subtype'}|[[{'var',574,'Pattern'}|[{'user_type',574,'pattern',[]}]]]]}|[{'type',575,'constraint',[{'atom',575,'is_subtype'}|[[{'var',575,'N'}|[{'type',575,'union',[{'atom',575,'default'}|[{'type',575,'non_neg_integer',[]}]]}]]]]}|[{'type',576,'constraint',[{'atom',576,'is_subtype'}|[[{'var',576,'Continuation'}|[{'user_type',576,'object_cont',[]}]]]]}|[{'type',577,'constraint',[{'atom',577,'is_subtype'}|[[{'var',577,'Objects'}|[{'type',577,'list',[{'user_type',577,'object',[]}]}]]]]}|[{'type',578,'constraint',[{'atom',578,'is_subtype'}|[[{'var',578,'Reason'}|[{'type',578,'term',[]}]]]]}]]]]]]]]}]}],
		%% Line 583
		'spec' =
		    %% Line 583
		    [{{'match_object',1},[{'type',583,'bounded_fun',[{'type',583,'fun',[{'type',583,'product',[{'var',583,'Continuation'}]}|[{'type',584,'union',[{'type',584,'tuple',[{'var',584,'Objects'}|[{'var',584,'Continuation2'}]]}|[{'atom',584,'$end_of_table'}|[{'type',584,'tuple',[{'atom',584,'error'}|[{'var',584,'Reason'}]]}]]]}]]}|[[{'type',585,'constraint',[{'atom',585,'is_subtype'}|[[{'var',585,'Continuation'}|[{'user_type',585,'object_cont',[]}]]]]}|[{'type',586,'constraint',[{'atom',586,'is_subtype'}|[[{'var',586,'Continuation2'}|[{'user_type',586,'object_cont',[]}]]]]}|[{'type',587,'constraint',[{'atom',587,'is_subtype'}|[[{'var',587,'Objects'}|[{'type',587,'list',[{'user_type',587,'object',[]}]}]]]]}|[{'type',588,'constraint',[{'atom',588,'is_subtype'}|[[{'var',588,'Reason'}|[{'type',588,'term',[]}]]]]}]]]]]]}]}],
		%% Line 595
		'spec' =
		    %% Line 595
		    [{{'member',2},[{'type',595,'bounded_fun',[{'type',595,'fun',[{'type',595,'product',[{'var',595,'Name'}|[{'var',595,'Key'}]]}|[{'type',595,'union',[{'type',595,'boolean',[]}|[{'type',595,'tuple',[{'atom',595,'error'}|[{'var',595,'Reason'}]]}]]}]]}|[[{'type',596,'constraint',[{'atom',596,'is_subtype'}|[[{'var',596,'Name'}|[{'user_type',596,'tab_name',[]}]]]]}|[{'type',597,'constraint',[{'atom',597,'is_subtype'}|[[{'var',597,'Key'}|[{'type',597,'term',[]}]]]]}|[{'type',598,'constraint',[{'atom',598,'is_subtype'}|[[{'var',598,'Reason'}|[{'type',598,'term',[]}]]]]}]]]]]}]}],
		%% Line 603
		'spec' =
		    %% Line 603
		    [{{'next',2},[{'type',603,'bounded_fun',[{'type',603,'fun',[{'type',603,'product',[{'var',603,'Name'}|[{'var',603,'Key1'}]]}|[{'type',603,'union',[{'var',603,'Key2'}|[{'atom',603,'$end_of_table'}]]}]]}|[[{'type',604,'constraint',[{'atom',604,'is_subtype'}|[[{'var',604,'Name'}|[{'user_type',604,'tab_name',[]}]]]]}|[{'type',605,'constraint',[{'atom',605,'is_subtype'}|[[{'var',605,'Key1'}|[{'type',605,'term',[]}]]]]}|[{'type',606,'constraint',[{'atom',606,'is_subtype'}|[[{'var',606,'Key2'}|[{'type',606,'term',[]}]]]]}]]]]]}]}],
		%% Line 611
		'spec' =
		    %% Line 611
		    [{{'open_file',1},[{'type',611,'bounded_fun',[{'type',611,'fun',[{'type',611,'product',[{'var',611,'Filename'}]}|[{'type',611,'union',[{'type',611,'tuple',[{'atom',611,'ok'}|[{'var',611,'Reference'}]]}|[{'type',611,'tuple',[{'atom',611,'error'}|[{'var',611,'Reason'}]]}]]}]]}|[[{'type',612,'constraint',[{'atom',612,'is_subtype'}|[[{'var',612,'Filename'}|[{'remote_type',612,[{'atom',612,'file'}|[{'atom',612,'name'}|[[]]]]}]]]]}|[{'type',613,'constraint',[{'atom',613,'is_subtype'}|[[{'var',613,'Reference'}|[{'type',613,'reference',[]}]]]]}|[{'type',614,'constraint',[{'atom',614,'is_subtype'}|[[{'var',614,'Reason'}|[{'type',614,'term',[]}]]]]}]]]]]}]}],
		%% Line 633
		'spec' =
		    %% Line 633
		    [{{'open_file',2},[{'type',633,'bounded_fun',[{'type',633,'fun',[{'type',633,'product',[{'var',633,'Name'}|[{'var',633,'Args'}]]}|[{'type',633,'union',[{'type',633,'tuple',[{'atom',633,'ok'}|[{'var',633,'Name'}]]}|[{'type',633,'tuple',[{'atom',633,'error'}|[{'var',633,'Reason'}]]}]]}]]}|[[{'type',634,'constraint',[{'atom',634,'is_subtype'}|[[{'var',634,'Name'}|[{'user_type',634,'tab_name',[]}]]]]}|[{'type',635,'constraint',[{'atom',635,'is_subtype'}|[[{'var',635,'Args'}|[{'type',635,'list',[{'var',635,'OpenArg'}]}]]]]}|[{'type',636,'constraint',[{'atom',636,'is_subtype'}|[[{'var',636,'OpenArg'}|[{'type',636,'union',[{'type',636,'tuple',[{'atom',636,'access'}|[{'user_type',636,'access',[]}]]}|[{'type',637,'tuple',[{'atom',637,'auto_save'}|[{'user_type',637,'auto_save',[]}]]}|[{'type',638,'tuple',[{'atom',638,'estimated_no_objects'}|[{'type',638,'non_neg_integer',[]}]]}|[{'type',639,'tuple',[{'atom',639,'file'}|[{'remote_type',639,[{'atom',639,'file'}|[{'atom',639,'name'}|[[]]]]}]]}|[{'type',640,'tuple',[{'atom',640,'max_no_slots'}|[{'user_type',640,'no_slots',[]}]]}|[{'type',641,'tuple',[{'atom',641,'min_no_slots'}|[{'user_type',641,'no_slots',[]}]]}|[{'type',642,'tuple',[{'atom',642,'keypos'}|[{'user_type',642,'keypos',[]}]]}|[{'type',643,'tuple',[{'atom',643,'ram_file'}|[{'type',643,'boolean',[]}]]}|[{'type',644,'tuple',[{'atom',644,'repair'}|[{'type',644,'union',[{'type',644,'boolean',[]}|[{'atom',644,'force'}]]}]]}|[{'type',645,'tuple',[{'atom',645,'type'}|[{'user_type',645,'type',[]}]]}]]]]]]]]]]}]]]]}|[{'type',646,'constraint',[{'atom',646,'is_subtype'}|[[{'var',646,'Reason'}|[{'type',646,'term',[]}]]]]}]]]]]]}]}],
		%% Line 663
		'spec' =
		    %% Line 663
		    [{{'pid2name',1},[{'type',663,'bounded_fun',[{'type',663,'fun',[{'type',663,'product',[{'var',663,'Pid'}]}|[{'type',663,'union',[{'type',663,'tuple',[{'atom',663,'ok'}|[{'var',663,'Name'}]]}|[{'atom',663,'undefined'}]]}]]}|[[{'type',664,'constraint',[{'atom',664,'is_subtype'}|[[{'var',664,'Pid'}|[{'type',664,'pid',[]}]]]]}|[{'type',665,'constraint',[{'atom',665,'is_subtype'}|[[{'var',665,'Name'}|[{'user_type',665,'tab_name',[]}]]]]}]]]]}]}],
		%% Line 673
		'spec' =
		    %% Line 673
		    [{{'repair_continuation',2},[{'type',673,'bounded_fun',[{'type',673,'fun',[{'type',673,'product',[{'var',673,'Continuation'}|[{'var',673,'MatchSpec'}]]}|[{'var',673,'Continuation2'}]]}|[[{'type',674,'constraint',[{'atom',674,'is_subtype'}|[[{'var',674,'Continuation'}|[{'user_type',674,'select_cont',[]}]]]]}|[{'type',675,'constraint',[{'atom',675,'is_subtype'}|[[{'var',675,'Continuation2'}|[{'user_type',675,'select_cont',[]}]]]]}|[{'type',676,'constraint',[{'atom',676,'is_subtype'}|[[{'var',676,'MatchSpec'}|[{'user_type',676,'match_spec',[]}]]]]}]]]]]}]}],
		%% Line 691
		'spec' =
		    %% Line 691
		    [{{'safe_fixtable',2},[{'type',691,'bounded_fun',[{'type',691,'fun',[{'type',691,'product',[{'var',691,'Name'}|[{'var',691,'Fix'}]]}|[{'atom',691,'ok'}]]}|[[{'type',692,'constraint',[{'atom',692,'is_subtype'}|[[{'var',692,'Name'}|[{'user_type',692,'tab_name',[]}]]]]}|[{'type',693,'constraint',[{'atom',693,'is_subtype'}|[[{'var',693,'Fix'}|[{'type',693,'boolean',[]}]]]]}]]]]}]}],
		%% Line 700
		'spec' =
		    %% Line 700
		    [{{'select',2},[{'type',700,'bounded_fun',[{'type',700,'fun',[{'type',700,'product',[{'var',700,'Name'}|[{'var',700,'MatchSpec'}]]}|[{'type',700,'union',[{'var',700,'Selection'}|[{'type',700,'tuple',[{'atom',700,'error'}|[{'var',700,'Reason'}]]}]]}]]}|[[{'type',701,'constraint',[{'atom',701,'is_subtype'}|[[{'var',701,'Name'}|[{'user_type',701,'tab_name',[]}]]]]}|[{'type',702,'constraint',[{'atom',702,'is_subtype'}|[[{'var',702,'MatchSpec'}|[{'user_type',702,'match_spec',[]}]]]]}|[{'type',703,'constraint',[{'atom',703,'is_subtype'}|[[{'var',703,'Selection'}|[{'type',703,'list',[{'type',703,'term',[]}]}]]]]}|[{'type',704,'constraint',[{'atom',704,'is_subtype'}|[[{'var',704,'Reason'}|[{'type',704,'term',[]}]]]]}]]]]]]}]}],
		%% Line 709
		'spec' =
		    %% Line 709
		    [{{'select',3},[{'type',709,'bounded_fun',[{'type',709,'fun',[{'type',709,'product',[{'var',709,'Name'}|[{'var',709,'MatchSpec'}|[{'var',709,'N'}]]]}|[{'type',710,'union',[{'type',710,'tuple',[{'var',710,'Selection'}|[{'var',710,'Continuation'}]]}|[{'atom',710,'$end_of_table'}|[{'type',710,'tuple',[{'atom',710,'error'}|[{'var',710,'Reason'}]]}]]]}]]}|[[{'type',711,'constraint',[{'atom',711,'is_subtype'}|[[{'var',711,'Name'}|[{'user_type',711,'tab_name',[]}]]]]}|[{'type',712,'constraint',[{'atom',712,'is_subtype'}|[[{'var',712,'MatchSpec'}|[{'user_type',712,'match_spec',[]}]]]]}|[{'type',713,'constraint',[{'atom',713,'is_subtype'}|[[{'var',713,'N'}|[{'type',713,'union',[{'atom',713,'default'}|[{'type',713,'non_neg_integer',[]}]]}]]]]}|[{'type',714,'constraint',[{'atom',714,'is_subtype'}|[[{'var',714,'Continuation'}|[{'user_type',714,'select_cont',[]}]]]]}|[{'type',715,'constraint',[{'atom',715,'is_subtype'}|[[{'var',715,'Selection'}|[{'type',715,'list',[{'type',715,'term',[]}]}]]]]}|[{'type',716,'constraint',[{'atom',716,'is_subtype'}|[[{'var',716,'Reason'}|[{'type',716,'term',[]}]]]]}]]]]]]]]}]}],
		%% Line 721
		'spec' =
		    %% Line 721
		    [{{'select',1},[{'type',721,'bounded_fun',[{'type',721,'fun',[{'type',721,'product',[{'var',721,'Continuation'}]}|[{'type',722,'union',[{'type',722,'tuple',[{'var',722,'Selection'}|[{'var',722,'Continuation2'}]]}|[{'atom',722,'$end_of_table'}|[{'type',722,'tuple',[{'atom',722,'error'}|[{'var',722,'Reason'}]]}]]]}]]}|[[{'type',723,'constraint',[{'atom',723,'is_subtype'}|[[{'var',723,'Continuation'}|[{'user_type',723,'select_cont',[]}]]]]}|[{'type',724,'constraint',[{'atom',724,'is_subtype'}|[[{'var',724,'Continuation2'}|[{'user_type',724,'select_cont',[]}]]]]}|[{'type',725,'constraint',[{'atom',725,'is_subtype'}|[[{'var',725,'Selection'}|[{'type',725,'list',[{'type',725,'term',[]}]}]]]]}|[{'type',726,'constraint',[{'atom',726,'is_subtype'}|[[{'var',726,'Reason'}|[{'type',726,'term',[]}]]]]}]]]]]]}]}],
		%% Line 733
		'spec' =
		    %% Line 733
		    [{{'select_delete',2},[{'type',733,'bounded_fun',[{'type',733,'fun',[{'type',733,'product',[{'var',733,'Name'}|[{'var',733,'MatchSpec'}]]}|[{'type',733,'union',[{'var',733,'N'}|[{'type',733,'tuple',[{'atom',733,'error'}|[{'var',733,'Reason'}]]}]]}]]}|[[{'type',734,'constraint',[{'atom',734,'is_subtype'}|[[{'var',734,'Name'}|[{'user_type',734,'tab_name',[]}]]]]}|[{'type',735,'constraint',[{'atom',735,'is_subtype'}|[[{'var',735,'MatchSpec'}|[{'user_type',735,'match_spec',[]}]]]]}|[{'type',736,'constraint',[{'atom',736,'is_subtype'}|[[{'var',736,'N'}|[{'type',736,'non_neg_integer',[]}]]]]}|[{'type',737,'constraint',[{'atom',737,'is_subtype'}|[[{'var',737,'Reason'}|[{'type',737,'term',[]}]]]]}]]]]]]}]}],
		%% Line 742
		'spec' =
		    %% Line 742
		    [{{'slot',2},[{'type',742,'bounded_fun',[{'type',742,'fun',[{'type',742,'product',[{'var',742,'Name'}|[{'var',742,'I'}]]}|[{'type',742,'union',[{'atom',742,'$end_of_table'}|[{'var',742,'Objects'}|[{'type',742,'tuple',[{'atom',742,'error'}|[{'var',742,'Reason'}]]}]]]}]]}|[[{'type',743,'constraint',[{'atom',743,'is_subtype'}|[[{'var',743,'Name'}|[{'user_type',743,'tab_name',[]}]]]]}|[{'type',744,'constraint',[{'atom',744,'is_subtype'}|[[{'var',744,'I'}|[{'type',744,'non_neg_integer',[]}]]]]}|[{'type',745,'constraint',[{'atom',745,'is_subtype'}|[[{'var',745,'Objects'}|[{'type',745,'list',[{'user_type',745,'object',[]}]}]]]]}|[{'type',746,'constraint',[{'atom',746,'is_subtype'}|[[{'var',746,'Reason'}|[{'type',746,'term',[]}]]]]}]]]]]]}]}],
		%% Line 762
		'spec' =
		    %% Line 762
		    [{{'sync',1},[{'type',762,'bounded_fun',[{'type',762,'fun',[{'type',762,'product',[{'var',762,'Name'}]}|[{'type',762,'union',[{'atom',762,'ok'}|[{'type',762,'tuple',[{'atom',762,'error'}|[{'var',762,'Reason'}]]}]]}]]}|[[{'type',763,'constraint',[{'atom',763,'is_subtype'}|[[{'var',763,'Name'}|[{'user_type',763,'tab_name',[]}]]]]}|[{'type',764,'constraint',[{'atom',764,'is_subtype'}|[[{'var',764,'Reason'}|[{'type',764,'term',[]}]]]]}]]]]}]}],
		%% Line 769
		'spec' =
		    %% Line 769
		    [{{'table',1},[{'type',769,'bounded_fun',[{'type',769,'fun',[{'type',769,'product',[{'var',769,'Name'}]}|[{'var',769,'QueryHandle'}]]}|[[{'type',770,'constraint',[{'atom',770,'is_subtype'}|[[{'var',770,'Name'}|[{'user_type',770,'tab_name',[]}]]]]}|[{'type',771,'constraint',[{'atom',771,'is_subtype'}|[[{'var',771,'QueryHandle'}|[{'remote_type',771,[{'atom',771,'qlc'}|[{'atom',771,'query_handle'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 776
		'spec' =
		    %% Line 776
		    [{{'table',2},[{'type',776,'bounded_fun',[{'type',776,'fun',[{'type',776,'product',[{'var',776,'Name'}|[{'var',776,'Options'}]]}|[{'var',776,'QueryHandle'}]]}|[[{'type',777,'constraint',[{'atom',777,'is_subtype'}|[[{'var',777,'Name'}|[{'user_type',777,'tab_name',[]}]]]]}|[{'type',778,'constraint',[{'atom',778,'is_subtype'}|[[{'var',778,'Options'}|[{'type',778,'union',[{'var',778,'Option'}|[{'type',778,'list',[{'var',778,'Option'}]}]]}]]]]}|[{'type',779,'constraint',[{'atom',779,'is_subtype'}|[[{'var',779,'Option'}|[{'type',779,'union',[{'type',779,'tuple',[{'atom',779,'n_objects'}|[{'var',779,'Limit'}]]}|[{'type',780,'tuple',[{'atom',780,'traverse'}|[{'var',780,'TraverseMethod'}]]}]]}]]]]}|[{'type',781,'constraint',[{'atom',781,'is_subtype'}|[[{'var',781,'Limit'}|[{'type',781,'union',[{'atom',781,'default'}|[{'type',781,'pos_integer',[]}]]}]]]]}|[{'type',782,'constraint',[{'atom',782,'is_subtype'}|[[{'var',782,'TraverseMethod'}|[{'type',782,'union',[{'atom',782,'first_next'}|[{'atom',782,'select'}|[{'type',782,'tuple',[{'atom',782,'select'}|[{'user_type',782,'match_spec',[]}]]}]]]}]]]]}|[{'type',783,'constraint',[{'atom',783,'is_subtype'}|[[{'var',783,'QueryHandle'}|[{'remote_type',783,[{'atom',783,'qlc'}|[{'atom',783,'query_handle'}|[[]]]]}]]]]}]]]]]]]]}]}],
		%% Line 862
		'spec' =
		    %% Line 862
		    [{{'to_ets',2},[{'type',862,'bounded_fun',[{'type',862,'fun',[{'type',862,'product',[{'var',862,'Name'}|[{'var',862,'EtsTab'}]]}|[{'type',862,'union',[{'var',862,'EtsTab'}|[{'type',862,'tuple',[{'atom',862,'error'}|[{'var',862,'Reason'}]]}]]}]]}|[[{'type',863,'constraint',[{'atom',863,'is_subtype'}|[[{'var',863,'Name'}|[{'user_type',863,'tab_name',[]}]]]]}|[{'type',864,'constraint',[{'atom',864,'is_subtype'}|[[{'var',864,'EtsTab'}|[{'remote_type',864,[{'atom',864,'ets'}|[{'atom',864,'tab'}|[[]]]]}]]]]}|[{'type',865,'constraint',[{'atom',865,'is_subtype'}|[[{'var',865,'Reason'}|[{'type',865,'term',[]}]]]]}]]]]]}]}],
		%% Line 876
		'spec' =
		    %% Line 876
		    [{{'traverse',2},[{'type',876,'bounded_fun',[{'type',876,'fun',[{'type',876,'product',[{'var',876,'Name'}|[{'var',876,'Fun'}]]}|[{'type',876,'union',[{'var',876,'Return'}|[{'type',876,'tuple',[{'atom',876,'error'}|[{'var',876,'Reason'}]]}]]}]]}|[[{'type',877,'constraint',[{'atom',877,'is_subtype'}|[[{'var',877,'Name'}|[{'user_type',877,'tab_name',[]}]]]]}|[{'type',878,'constraint',[{'atom',878,'is_subtype'}|[[{'var',878,'Fun'}|[{'type',878,'fun',[{'type',878,'product',[{'var',878,'Object'}]}|[{'var',878,'FunReturn'}]]}]]]]}|[{'type',879,'constraint',[{'atom',879,'is_subtype'}|[[{'var',879,'Object'}|[{'user_type',879,'object',[]}]]]]}|[{'type',880,'constraint',[{'atom',880,'is_subtype'}|[[{'var',880,'FunReturn'}|[{'type',880,'union',[{'atom',880,'continue'}|[{'type',881,'tuple',[{'atom',881,'continue'}|[{'var',881,'Val'}]]}|[{'type',882,'tuple',[{'atom',882,'done'}|[{'var',882,'Value'}]]}|[{'var',883,'OtherValue'}]]]]}]]]]}|[{'type',884,'constraint',[{'atom',884,'is_subtype'}|[[{'var',884,'Return'}|[{'type',884,'union',[{'type',884,'list',[{'type',884,'term',[]}]}|[{'var',884,'OtherValue'}]]}]]]]}|[{'type',885,'constraint',[{'atom',885,'is_subtype'}|[[{'var',885,'Val'}|[{'type',885,'term',[]}]]]]}|[{'type',886,'constraint',[{'atom',886,'is_subtype'}|[[{'var',886,'Value'}|[{'type',886,'term',[]}]]]]}|[{'type',887,'constraint',[{'atom',887,'is_subtype'}|[[{'var',887,'OtherValue'}|[{'type',887,'term',[]}]]]]}|[{'type',888,'constraint',[{'atom',888,'is_subtype'}|[[{'var',888,'Reason'}|[{'type',888,'term',[]}]]]]}]]]]]]]]]]]}]}],
		%% Line 907
		'spec' =
		    %% Line 907
		    [{{'update_counter',3},[{'type',907,'bounded_fun',[{'type',907,'fun',[{'type',907,'product',[{'var',907,'Name'}|[{'var',907,'Key'}|[{'var',907,'Increment'}]]]}|[{'var',907,'Result'}]]}|[[{'type',908,'constraint',[{'atom',908,'is_subtype'}|[[{'var',908,'Name'}|[{'user_type',908,'tab_name',[]}]]]]}|[{'type',909,'constraint',[{'atom',909,'is_subtype'}|[[{'var',909,'Key'}|[{'type',909,'term',[]}]]]]}|[{'type',910,'constraint',[{'atom',910,'is_subtype'}|[[{'var',910,'Increment'}|[{'type',910,'union',[{'type',910,'tuple',[{'var',910,'Pos'}|[{'var',910,'Incr'}]]}|[{'var',910,'Incr'}]]}]]]]}|[{'type',911,'constraint',[{'atom',911,'is_subtype'}|[[{'var',911,'Pos'}|[{'type',911,'integer',[]}]]]]}|[{'type',912,'constraint',[{'atom',912,'is_subtype'}|[[{'var',912,'Incr'}|[{'type',912,'integer',[]}]]]]}|[{'type',913,'constraint',[{'atom',913,'is_subtype'}|[[{'var',913,'Result'}|[{'type',913,'integer',[]}]]]]}]]]]]]]]}]}],
		%% Line 3203
		'compile' =
		    %% Line 3203
		    [{'inline',[{'time_now',0}]}]]
'add_user'/3 =
    %% Line 206
    ( fun (_0,_1,_2) ->
	  %% Line 207
	  apply 'req'/2
	      (_0, {'add_user',_1,_2})
      -| [{'function',{'add_user',3}}] )
'all'/0 =
    %% Line 211
    ( fun () ->
	  %% Line 212
	  call 'dets_server':'all'
	      ()
      -| [{'function',{'all',0}}] )
'bchunk'/2 =
    %% Line 222
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Tab,'start'> when 'true' ->
		  let <_2> =
		      apply %% Line 223
			    'treq'/2
			  (%% Line 223
			   Tab, %% Line 223
				{'bchunk_init',Tab})
		  in  let <_13> =
			  [%% Line 223
			   Tab|%% Line 223
			       ( ['start']
				 -| ['compiler_generated'] )]
		      in  %% Line 1258
			  ( case <_2,_13> of
			      ( <( 'badarg'
				   -| ['compiler_generated'] ),A> when ( 'true'
									 -| ['compiler_generated'] ) ->
				    %% Line 1259
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( 'badarg'
					     -| ['compiler_generated'] ), A)
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      %% Line 1260
			      ( <Reply,_X_A> when ( 'true'
						    -| ['compiler_generated'] ) ->
				    %% Line 1261
				    Reply
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated',{'function',{'badarg',2}}] )
	      %% Line 224
	      <Tab,State = {'dets_cont','bchunk',_6,_7,_8,_9,_10,_11}>
		  when call 'erlang':'=:='
			(_9,
			 Tab) ->
		  let <_3> =
		      apply %% Line 225
			    'treq'/2
			  (%% Line 225
			   Tab, %% Line 225
				{'bchunk',State})
		  in  let <_15> =
			  [%% Line 225
			   Tab|%% Line 225
			       ( [State|( []
					  -| ['compiler_generated'] )]
				 -| ['compiler_generated'] )]
		      in  %% Line 1258
			  ( case <_3,_15> of
			      ( <( 'badarg'
				   -| ['compiler_generated'] ),A> when ( 'true'
									 -| ['compiler_generated'] ) ->
				    %% Line 1259
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( 'badarg'
					     -| ['compiler_generated'] ), A)
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      %% Line 1260
			      ( <Reply,_X_A> when ( 'true'
						    -| ['compiler_generated'] ) ->
				    %% Line 1261
				    Reply
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated',{'function',{'badarg',2}}] )
	      %% Line 226
	      <Tab,Term> when 'true' ->
		  %% Line 227
		  call 'erlang':'error'
		      ('badarg', [Tab|[Term|[]]])
	    end
	    -| [{'function',{'bchunk',2}}] )
      -| [{'function',{'bchunk',2}}] )
'close'/1 =
    %% Line 233
    ( fun (_0) ->
	  %% Line 234
	  case call 'dets_server':'close'
		   (( _0
		      -| [{'function',{'close',1}}] )) of
	    %% Line 235
	    <'badarg'> when 'true' ->
		%% Line 236
		{'error','not_owner'}
	    %% Line 237
	    <Reply> when 'true' ->
		%% Line 238
		Reply
	  end
      -| [{'function',{'close',1}}] )
'delete'/2 =
    %% Line 246
    ( fun (_0,_1) ->
	  let <_2> =
	      apply %% Line 247
		    'treq'/2
		  (_0, %% Line 247
		       {'delete_key',[_1|[]]})
	  in  let <_6> =
		  [_0|%% Line 247
		      ( [_1|( []
			      -| ['compiler_generated'] )]
			-| ['compiler_generated'] )]
	      in  %% Line 1258
		  ( case <_2,_6> of
		      ( <( 'badarg'
			   -| ['compiler_generated'] ),A> when ( 'true'
								 -| ['compiler_generated'] ) ->
			    %% Line 1259
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( 'badarg'
				     -| ['compiler_generated'] ), A)
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1260
		      ( <Reply,_X_A> when ( 'true'
					    -| ['compiler_generated'] ) ->
			    %% Line 1261
			    Reply
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated',{'function',{'badarg',2}}] )
      -| [{'function',{'delete',2}}] )
'delete_all_objects'/1 =
    %% Line 253
    ( fun (_0) ->
	  %% Line 254
	  case apply 'treq'/2
		   (( _0
		      -| [{'function',{'delete_all_objects',1}}] ), 'delete_all_objects') of
	    %% Line 255
	    <'badarg'> when 'true' ->
		%% Line 256
		call 'erlang':'error'
		    ('badarg', [( _0
				  -| [{'function',{'delete_all_objects',1}}] )|[]])
	    %% Line 257
	    <'fixed'> when 'true' ->
		%% Line 258
		apply 'match_delete'/2
		    (( _0
		       -| [{'function',{'delete_all_objects',1}}] ), '_')
	    %% Line 259
	    <Reply> when 'true' ->
		%% Line 260
		Reply
	  end
      -| [{'function',{'delete_all_objects',1}}] )
'delete_object'/2 =
    %% Line 268
    ( fun (_0,_1) ->
	  let <_2> =
	      apply %% Line 269
		    'treq'/2
		  (_0, %% Line 269
		       {'delete_object',[_1|[]]})
	  in  let <_6> =
		  [_0|%% Line 269
		      ( [_1|( []
			      -| ['compiler_generated'] )]
			-| ['compiler_generated'] )]
	      in  %% Line 1258
		  ( case <_2,_6> of
		      ( <( 'badarg'
			   -| ['compiler_generated'] ),A> when ( 'true'
								 -| ['compiler_generated'] ) ->
			    %% Line 1259
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( 'badarg'
				     -| ['compiler_generated'] ), A)
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1260
		      ( <Reply,_X_A> when ( 'true'
					    -| ['compiler_generated'] ) ->
			    %% Line 1261
			    Reply
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated',{'function',{'badarg',2}}] )
      -| [{'function',{'delete_object',2}}] )
'fsck'/2 =
    %% Line 272
    ( fun (_0,_1) ->
	  %% Line 273
	  apply 'fsck'/1
	      (_0)
      -| [{'function',{'fsck',2}}] )
'fsck'/1 =
    %% Line 276
    ( fun (_0) ->
	  catch
	      %% Line 278
	      case apply 'read_file_header'/3
		       (( _0
			  -| [{'function',{'fsck',1}}] ), 'read', 'false') of
		<{'ok',Fd,FH}> when 'true' ->
		    %% Line 280
		    case call 'dets_v9':'check_file_header'
			     (FH, Fd) of
		      %% Line 281
		      <{'error','not_closed'}> when 'true' ->
			  let <_2> =
			      call %% Line 282
				   'erlang':%% Line 282
					    'make_ref'
				  ()
			  in  %% Line 282
			      apply 'fsck'/6
				  (Fd, _2, ( _0
					     -| [{'function',{'fsck',1}}] ), FH, 'default', 'default')
		      %% Line 283
		      <{'ok',_X_Head}> when 'true' ->
			  let <_3> =
			      call %% Line 284
				   'erlang':%% Line 284
					    'make_ref'
				  ()
			  in  %% Line 284
			      apply 'fsck'/6
				  (Fd, _3, ( _0
					     -| [{'function',{'fsck',1}}] ), FH, 'default', 'default')
		      %% Line 285
		      <Error> when 'true' ->
			  %% Line 286
			  Error
		    end
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_1})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'fsck',1}}] )
'first'/1 =
    %% Line 294
    ( fun (_0) ->
	  let <_1> =
	      apply %% Line 295
		    'treq'/2
		  (( _0
		     -| [{'function',{'first',1}}] ), %% Line 295
						      'first')
	  in  let <_5> =
		  [( _0
		     -| [{'function',{'first',1}}] )|%% Line 295
						     ( []
						       -| ['compiler_generated'] )]
	      in  %% Line 1270
		  ( case <_1,_5> of
		      ( <( 'badarg'
			   -| ['compiler_generated'] ),A> when ( 'true'
								 -| ['compiler_generated'] ) ->
			    %% Line 1271
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( 'badarg'
				     -| ['compiler_generated'] ), A)
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1272
		      ( <( {( 'ok'
			      -| ['compiler_generated'] ),Reply}
			   -| ['compiler_generated'] ),_X_A> when ( 'true'
								    -| ['compiler_generated'] ) ->
			    %% Line 1273
			    Reply
			-| ['compiler_generated'] )
		      %% Line 1274
		      ( <Reply,_X_A> when ( 'true'
					    -| ['compiler_generated'] ) ->
			    %% Line 1275
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'exit'
								   -| ['compiler_generated'] )
				  (Reply)
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated',{'function',{'badarg_exit',2}}] )
      -| [{'function',{'first',1}}] )
'foldr'/3 =
    %% Line 306
    ( fun (_0,_1,_2) ->
	  %% Line 307
	  apply 'foldl'/3
	      (_0, _1, _2)
      -| [{'function',{'foldr',3}}] )
'foldl'/3 =
    %% Line 318
    ( fun (_0,_1,_2) ->
	  let <Ref> =
	      call %% Line 319
		   'erlang':%% Line 319
			    'make_ref'
		  ()
	  in  let <_4> =
		  apply %% Line 320
			'do_traverse'/4
		      (_0, _1, _2, %% Line 320
				   Ref)
	      in  let <_9> =
		      [_0|%% Line 320
			  ( [_1|( [_2|( []
					-| ['compiler_generated'] )]
				  -| ['compiler_generated'] )]
			    -| ['compiler_generated'] )]
		  in  %% Line 1258
		      ( case <_4,_9> of
			  ( <( 'badarg'
			       -| ['compiler_generated'] ),A> when ( 'true'
								     -| ['compiler_generated'] ) ->
				%% Line 1259
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( 'badarg'
					 -| ['compiler_generated'] ), A)
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1260
			  ( <Reply,_X_A> when ( 'true'
						-| ['compiler_generated'] ) ->
				%% Line 1261
				Reply
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated',{'function',{'badarg',2}}] )
      -| [{'function',{'foldl',3}}] )
'from_ets'/2 =
    %% Line 327
    ( fun (_0,_1) ->
	  do  %% Line 328
	      call 'ets':'safe_fixtable'
		  (_1, 'true')
	      let <LC> =
		  call %% Line 330
		       'ets':%% Line 330
			     'select'
		      (_1, %% Line 329
			   [{'_',[],['$_']}], %% Line 330
					      100)
	      in  let <InitFun> =
		      apply %% Line 331
			    'from_ets_fun'/2
			  (%% Line 331
			   LC, _1)
		  in  let <Reply> =
			  apply %% Line 332
				'treq'/2
			      (_0, %% Line 332
				   {'initialize',InitFun,'term','default'})
		      in  do  %% Line 333
			      call 'ets':'safe_fixtable'
				  (_1, 'false')
			      %% Line 334
			      case Reply of
				%% Line 335
				<{'thrown',Thrown}> when 'true' ->
				    call 'erlang':'throw'
					(Thrown)
				%% Line 336
				<Else> when 'true' ->
				    let <_10> =
					[_0|( [_1|( []
						    -| ['compiler_generated'] )]
					      -| ['compiler_generated'] )]
				    in  %% Line 1258
					( case <Else,_10> of
					    ( <( 'badarg'
						 -| ['compiler_generated'] ),A> when ( 'true'
										       -| ['compiler_generated'] ) ->
						  %% Line 1259
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( 'badarg'
							   -| ['compiler_generated'] ), A)
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1260
					    ( <_11,_X_A> when ( 'true'
								-| ['compiler_generated'] ) ->
						  _11
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated',{'function',{'badarg',2}}] )
			      end
      -| [{'function',{'from_ets',2}}] )
'from_ets_fun'/2 =
    %% Line 339
    ( fun (_0,_1) ->
	  %% Line 340
	  ( fun (_5) ->
		case _5 of
		  <'close'> when 'true' ->
		      %% Line 341
		      'ok'
		  %% Line 342
		  <'read'>
		      when call 'erlang':'=:='
			    (_0,
			     '$end_of_table') ->
		      %% Line 343
		      'end_of_input'
		  %% Line 344
		  <'read'> when 'true' ->
		      %% Line 345
		      case _0 of
			<{L,C}> when 'true' ->
			    let <_3> =
				call %% Line 346
				     'ets':%% Line 346
					   'select'
				    (%% Line 346
				     C)
			    in  let <_4> =
				    apply %% Line 346
					  'from_ets_fun'/2
					(_3, _1)
				in  %% Line 346
				    {L,_4}
			( <_2> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_2})
			  -| ['compiler_generated'] )
		      end
		  ( <_6> when 'true' ->
			primop 'match_fail'
			    ({'function_clause',_6})
		    -| ['compiler_generated'] )
		end
	    -| [{'id',{0,0,'-from_ets_fun/2-fun-0-'}}] )
      -| [{'function',{'from_ets_fun',2}}] )
'info'/1 =
    %% Line 358
    ( fun (_0) ->
	  let <_1> =
	      catch
		  %% Line 359
		  call 'dets_server':'get_pid'
		      (( _0
			 -| [{'function',{'info',1}}] ))
	  in  %% Line 359
	      case _1 of
		%% Line 360
		<{'EXIT',_X_Reason}> when 'true' ->
		    %% Line 361
		    'undefined'
		%% Line 362
		<Pid> when 'true' ->
		    %% Line 1264
		    ( case apply 'req'/2
			       (Pid, 'info') of
			( <( 'badarg'
			     -| ['compiler_generated'] )> when ( 'true'
								 -| ['compiler_generated'] ) ->
			      %% Line 1265
			      ( 'undefined'
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 1266
			( <Reply> when ( 'true'
					 -| ['compiler_generated'] ) ->
			      %% Line 1267
			      Reply
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated',{'function',{'undefined',1}}] )
	      end
      -| [{'function',{'info',1}}] )
'info'/2 =
    %% Line 374
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Tab,'owner'> when 'true' ->
		  let <_2> =
		      catch
			  %% Line 375
			  call 'dets_server':'get_pid'
			      (Tab)
		  in  %% Line 375
		      case _2 of
			%% Line 376
			<Pid>
			    when call 'erlang':'is_pid'
				  (_2) ->
			    %% Line 377
			    Pid
			%% Line 378
			<_10> when 'true' ->
			    %% Line 379
			    'undefined'
		      end
	      %% Line 381
	      <Tab,'users'> when 'true' ->
		  %% Line 382
		  case call 'dets_server':'users'
			   (Tab) of
		    %% Line 383
		    <[]> when 'true' ->
			%% Line 384
			'undefined'
		    %% Line 385
		    <Users> when 'true' ->
			%% Line 386
			Users
		  end
	      %% Line 388
	      <Tab,Tag> when 'true' ->
		  let <_5> =
		      catch
			  %% Line 389
			  call 'dets_server':'get_pid'
			      (Tab)
		  in  %% Line 389
		      case _5 of
			%% Line 390
			<{'EXIT',_X_Reason}> when 'true' ->
			    %% Line 391
			    'undefined'
			%% Line 392
			<Pid> when 'true' ->
			    %% Line 1264
			    ( case apply 'req'/2
				       (Pid, {'info',Tag}) of
				( <( 'badarg'
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      %% Line 1265
				      ( 'undefined'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1266
				( <Reply> when ( 'true'
						 -| ['compiler_generated'] ) ->
				      %% Line 1267
				      Reply
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated',{'function',{'undefined',1}}] )
		      end
	    end
	    -| [{'function',{'info',2}}] )
      -| [{'function',{'info',2}}] )
'init_table'/2 =
    %% Line 404
    ( fun (_0,_1) ->
	  %% Line 405
	  apply 'init_table'/3
	      (_0, _1, [])
      -| [{'function',{'init_table',2}}] )
'init_table'/3 =
    %% Line 417
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <Tab,InitFun,Options>
		  when call 'erlang':'is_function'
			(InitFun) ->
		  %% Line 418
		  case apply 'options'/2
			   (Options, ['format'|['min_no_slots']]) of
		    %% Line 419
		    <{'badarg',_8}> when 'true' ->
			%% Line 420
			call 'erlang':'error'
			    ('badarg', [Tab|[InitFun|[Options|[]]]])
		    %% Line 421
		    <[Format|[MinNoSlots|[]]]> when 'true' ->
			%% Line 422
			case apply 'treq'/2
				 (Tab, {'initialize',InitFun,Format,MinNoSlots}) of
			  %% Line 423
			  <{'thrown',Thrown}> when 'true' ->
			      call 'erlang':'throw'
				  (Thrown)
			  %% Line 424
			  <Else> when 'true' ->
			      let <_10> =
				  [Tab|( [InitFun|( [Options|( []
							       -| ['compiler_generated'] )]
						    -| ['compiler_generated'] )]
					 -| ['compiler_generated'] )]
			      in  %% Line 1258
				  ( case <Else,_10> of
				      ( <( 'badarg'
					   -| ['compiler_generated'] ),A> when ( 'true'
										 -| ['compiler_generated'] ) ->
					    %% Line 1259
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( 'badarg'
						     -| ['compiler_generated'] ), A)
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      %% Line 1260
				      ( <Reply,_X_A> when ( 'true'
							    -| ['compiler_generated'] ) ->
					    %% Line 1261
					    Reply
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated',{'function',{'badarg',2}}] )
			end
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_4})
		      -| ['compiler_generated'] )
		  end
	      %% Line 427
	      <Tab,InitFun,Options> when 'true' ->
		  %% Line 428
		  call 'erlang':'error'
		      ('badarg', [Tab|[InitFun|[Options|[]]]])
	    end
	    -| [{'function',{'init_table',3}}] )
      -| [{'function',{'init_table',3}}] )
'insert'/2 =
    %% Line 435
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Tab,Objs>
		  when call 'erlang':'is_list'
			(Objs) ->
		  let <_2> =
		      apply %% Line 436
			    'treq'/2
			  (%% Line 436
			   Tab, %% Line 436
				{'insert',Objs})
		  in  let <_7> =
			  [%% Line 436
			   Tab|%% Line 436
			       ( [Objs|( []
					 -| ['compiler_generated'] )]
				 -| ['compiler_generated'] )]
		      in  %% Line 1258
			  ( case <_2,_7> of
			      ( <( 'badarg'
				   -| ['compiler_generated'] ),A> when ( 'true'
									 -| ['compiler_generated'] ) ->
				    %% Line 1259
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( 'badarg'
					     -| ['compiler_generated'] ), A)
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      %% Line 1260
			      ( <Reply,_X_A> when ( 'true'
						    -| ['compiler_generated'] ) ->
				    %% Line 1261
				    Reply
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated',{'function',{'badarg',2}}] )
	      %% Line 437
	      <Tab,Obj> when 'true' ->
		  let <_3> =
		      apply %% Line 438
			    'treq'/2
			  (%% Line 438
			   Tab, %% Line 438
				{'insert',[Obj|[]]})
		  in  let <_9> =
			  [%% Line 438
			   Tab|%% Line 438
			       ( [Obj|( []
					-| ['compiler_generated'] )]
				 -| ['compiler_generated'] )]
		      in  %% Line 1258
			  ( case <_3,_9> of
			      ( <( 'badarg'
				   -| ['compiler_generated'] ),A> when ( 'true'
									 -| ['compiler_generated'] ) ->
				    %% Line 1259
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( 'badarg'
					     -| ['compiler_generated'] ), A)
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      %% Line 1260
			      ( <Reply,_X_A> when ( 'true'
						    -| ['compiler_generated'] ) ->
				    %% Line 1261
				    Reply
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated',{'function',{'badarg',2}}] )
	    end
	    -| [{'function',{'insert',2}}] )
      -| [{'function',{'insert',2}}] )
'insert_new'/2 =
    %% Line 445
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Tab,Objs>
		  when call 'erlang':'is_list'
			(Objs) ->
		  let <_2> =
		      apply %% Line 446
			    'treq'/2
			  (%% Line 446
			   Tab, %% Line 446
				{'insert_new',Objs})
		  in  let <_7> =
			  [%% Line 446
			   Tab|%% Line 446
			       ( [Objs|( []
					 -| ['compiler_generated'] )]
				 -| ['compiler_generated'] )]
		      in  %% Line 1258
			  ( case <_2,_7> of
			      ( <( 'badarg'
				   -| ['compiler_generated'] ),A> when ( 'true'
									 -| ['compiler_generated'] ) ->
				    %% Line 1259
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( 'badarg'
					     -| ['compiler_generated'] ), A)
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      %% Line 1260
			      ( <Reply,_X_A> when ( 'true'
						    -| ['compiler_generated'] ) ->
				    %% Line 1261
				    Reply
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated',{'function',{'badarg',2}}] )
	      %% Line 447
	      <Tab,Obj> when 'true' ->
		  let <_3> =
		      apply %% Line 448
			    'treq'/2
			  (%% Line 448
			   Tab, %% Line 448
				{'insert_new',[Obj|[]]})
		  in  let <_9> =
			  [%% Line 448
			   Tab|%% Line 448
			       ( [Obj|( []
					-| ['compiler_generated'] )]
				 -| ['compiler_generated'] )]
		      in  %% Line 1258
			  ( case <_3,_9> of
			      ( <( 'badarg'
				   -| ['compiler_generated'] ),A> when ( 'true'
									 -| ['compiler_generated'] ) ->
				    %% Line 1259
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( 'badarg'
					     -| ['compiler_generated'] ), A)
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      %% Line 1260
			      ( <Reply,_X_A> when ( 'true'
						    -| ['compiler_generated'] ) ->
				    %% Line 1261
				    Reply
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated',{'function',{'badarg',2}}] )
	    end
	    -| [{'function',{'insert_new',2}}] )
      -| [{'function',{'insert_new',2}}] )
'internal_close'/1 =
    %% Line 450
    ( fun (_0) ->
	  %% Line 451
	  apply 'req'/2
	      (( _0
		 -| [{'function',{'internal_close',1}}] ), 'close')
      -| [{'function',{'internal_close',1}}] )
'internal_open'/3 =
    %% Line 453
    ( fun (_0,_1,_2) ->
	  %% Line 454
	  apply 'req'/2
	      (_0, {'internal_open',_1,_2})
      -| [{'function',{'internal_open',3}}] )
'is_compatible_bchunk_format'/2 =
    %% Line 460
    ( fun (_0,_1) ->
	  let <_2> =
	      apply %% Line 461
		    'treq'/2
		  (_0, %% Line 461
		       {'is_compatible_bchunk_format',_1})
	  in  let <_6> =
		  [_0|%% Line 461
		      ( [_1|( []
			      -| ['compiler_generated'] )]
			-| ['compiler_generated'] )]
	      in  %% Line 1258
		  ( case <_2,_6> of
		      ( <( 'badarg'
			   -| ['compiler_generated'] ),A> when ( 'true'
								 -| ['compiler_generated'] ) ->
			    %% Line 1259
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( 'badarg'
				     -| ['compiler_generated'] ), A)
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1260
		      ( <Reply,_X_A> when ( 'true'
					    -| ['compiler_generated'] ) ->
			    %% Line 1261
			    Reply
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated',{'function',{'badarg',2}}] )
      -| [{'function',{'is_compatible_bchunk_format',2}}] )
'is_dets_file'/1 =
    %% Line 467
    ( fun (_0) ->
	  let <_1> =
	      catch
		  %% Line 468
		  apply 'read_file_header'/3
		      (( _0
			 -| [{'function',{'is_dets_file',1}}] ), 'read', 'false')
	  in  %% Line 468
	      case _1 of
		%% Line 469
		<{'ok',Fd,FH}> when 'true' ->
		    do  %% Line 470
			( call ( 'file'
				 -| ['result_not_wanted'] ):( 'close'
							      -| ['result_not_wanted'] )
			      (Fd)
			  -| ['result_not_wanted'] )
			%% Line 471
			( case FH of
			    ( <( {'fileheader',_7,_8,_rec0,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26}
				 -| ['compiler_generated'] )> when 'true' ->
				  call 'erlang':'=:='
				      (_rec0, 11259375)
			      -| ['compiler_generated'] )
			    ( <_27> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','fileheader'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		%% Line 472
		<{'error',{'tooshort',_28}}> when 'true' ->
		    %% Line 473
		    'false'
		%% Line 474
		<{'error',{'not_a_dets_file',_29}}> when 'true' ->
		    %% Line 475
		    'false'
		%% Line 476
		<Other> when 'true' ->
		    %% Line 477
		    Other
	      end
      -| [{'function',{'is_dets_file',1}}] )
'lookup'/2 =
    %% Line 486
    ( fun (_0,_1) ->
	  let <_2> =
	      apply %% Line 487
		    'treq'/2
		  (_0, %% Line 487
		       {'lookup_keys',[_1|[]]})
	  in  let <_6> =
		  [_0|%% Line 487
		      ( [_1|( []
			      -| ['compiler_generated'] )]
			-| ['compiler_generated'] )]
	      in  %% Line 1258
		  ( case <_2,_6> of
		      ( <( 'badarg'
			   -| ['compiler_generated'] ),A> when ( 'true'
								 -| ['compiler_generated'] ) ->
			    %% Line 1259
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( 'badarg'
				     -| ['compiler_generated'] ), A)
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1260
		      ( <Reply,_X_A> when ( 'true'
					    -| ['compiler_generated'] ) ->
			    %% Line 1261
			    Reply
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated',{'function',{'badarg',2}}] )
      -| [{'function',{'lookup',2}}] )
'lookup_keys'/2 =
    %% Line 490
    ( fun (_0,_1) ->
	  let <_2> =
	      catch
		  %% Line 491
		  call 'lists':'usort'
		      (_1)
	  in  %% Line 491
	      case _2 of
		%% Line 492
		<UKeys>
		    when let <_3> =
			  call 'erlang':'is_list'
			      (_2)
		      in  let <_4> =
			      call 'erlang':'=/='
				  (_2, [])
			  in  call 'erlang':'and'
				  (_3, _4) ->
		    let <_5> =
			apply %% Line 493
			      'treq'/2
			    (_0, %% Line 493
				 {'lookup_keys',UKeys})
		    in  let <_10> =
			    [_0|%% Line 493
				( [_1|( []
					-| ['compiler_generated'] )]
				  -| ['compiler_generated'] )]
			in  %% Line 1258
			    ( case <_5,_10> of
				( <( 'badarg'
				     -| ['compiler_generated'] ),A> when ( 'true'
									   -| ['compiler_generated'] ) ->
				      %% Line 1259
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( 'badarg'
					       -| ['compiler_generated'] ), A)
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1260
				( <Reply,_X_A> when ( 'true'
						      -| ['compiler_generated'] ) ->
				      %% Line 1261
				      Reply
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated',{'function',{'badarg',2}}] )
		%% Line 494
		<_X_Else> when 'true' ->
		    %% Line 495
		    call 'erlang':'error'
			('badarg', [_0|[_1|[]]])
	      end
      -| [{'function',{'lookup_keys',2}}] )
'match'/2 =
    %% Line 504
    ( fun (_0,_1) ->
	  let <_2> =
	      apply %% Line 505
		    'safe_match'/3
		  (_0, _1, %% Line 505
			   'bindings')
	  in  let <_6> =
		  [_0|%% Line 505
		      ( [_1|( []
			      -| ['compiler_generated'] )]
			-| ['compiler_generated'] )]
	      in  %% Line 1258
		  ( case <_2,_6> of
		      ( <( 'badarg'
			   -| ['compiler_generated'] ),A> when ( 'true'
								 -| ['compiler_generated'] ) ->
			    %% Line 1259
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( 'badarg'
				     -| ['compiler_generated'] ), A)
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1260
		      ( <Reply,_X_A> when ( 'true'
					    -| ['compiler_generated'] ) ->
			    %% Line 1261
			    Reply
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated',{'function',{'badarg',2}}] )
      -| [{'function',{'match',2}}] )
'match'/3 =
    %% Line 516
    ( fun (_0,_1,_2) ->
	  let <_3> =
	      apply %% Line 517
		    'init_chunk_match'/5
		  (_0, _1, %% Line 517
			   'bindings', _2, %% Line 517
					   'no_safe')
	  in  let <_8> =
		  [_0|%% Line 517
		      ( [_1|( [_2|( []
				    -| ['compiler_generated'] )]
			      -| ['compiler_generated'] )]
			-| ['compiler_generated'] )]
	      in  %% Line 1258
		  ( case <_3,_8> of
		      ( <( 'badarg'
			   -| ['compiler_generated'] ),A> when ( 'true'
								 -| ['compiler_generated'] ) ->
			    %% Line 1259
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( 'badarg'
				     -| ['compiler_generated'] ), A)
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1260
		      ( <Reply,_X_A> when ( 'true'
					    -| ['compiler_generated'] ) ->
			    %% Line 1261
			    Reply
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated',{'function',{'badarg',2}}] )
      -| [{'function',{'match',3}}] )
'match'/1 =
    %% Line 526
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'match',1}}] ) of
	      <State = {'dets_cont',_9,_10,_11,_12,_13,_14,_15}>
		  when ( try
			  let <_5> =
			      call 'erlang':'element'
				  (2, State)
			  in  let <_6> =
				  call 'erlang':'=:='
				      (_5, 'bindings')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _6)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  let <_7> =
		      apply %% Line 527
			    'chunk_match'/2
			  (%% Line 527
			   State, %% Line 527
				  'no_safe')
		  in  let <_1> =
			  [%% Line 527
			   State|%% Line 527
				 ( []
				   -| ['compiler_generated'] )]
		      in  %% Line 1258
			  ( case <_7,_1> of
			      ( <( 'badarg'
				   -| ['compiler_generated'] ),A> when ( 'true'
									 -| ['compiler_generated'] ) ->
				    %% Line 1259
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( 'badarg'
					     -| ['compiler_generated'] ), A)
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      %% Line 1260
			      ( <Reply,_X_A> when ( 'true'
						    -| ['compiler_generated'] ) ->
				    %% Line 1261
				    Reply
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated',{'function',{'badarg',2}}] )
	      %% Line 528
	      <Term> when 'true' ->
		  %% Line 529
		  call 'erlang':'error'
		      ('badarg', [Term|[]])
	    end
	    -| [{'function',{'match',1}}] )
      -| [{'function',{'match',1}}] )
'match_delete'/2 =
    %% Line 536
    ( fun (_0,_1) ->
	  let <_2> =
	      apply %% Line 537
		    'match_delete'/3
		  (_0, _1, %% Line 537
			   'delete')
	  in  let <_6> =
		  [_0|%% Line 537
		      ( [_1|( []
			      -| ['compiler_generated'] )]
			-| ['compiler_generated'] )]
	      in  %% Line 1258
		  ( case <_2,_6> of
		      ( <( 'badarg'
			   -| ['compiler_generated'] ),A> when ( 'true'
								 -| ['compiler_generated'] ) ->
			    %% Line 1259
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( 'badarg'
				     -| ['compiler_generated'] ), A)
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1260
		      ( <Reply,_X_A> when ( 'true'
					    -| ['compiler_generated'] ) ->
			    %% Line 1261
			    Reply
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated',{'function',{'badarg',2}}] )
      -| [{'function',{'match_delete',2}}] )
'match_delete'/3 =
    %% Line 539
    ( fun (_0,_1,_2) ->
	  %% Line 540
	  case apply 'compile_match_spec'/2
		   (_2, _1) of
	    %% Line 541
	    <{Spec,MP}> when 'true' ->
		let <_3> =
		    catch
			%% Line 542
			call 'dets_server':'get_pid'
			    (_0)
		in  %% Line 542
		    case _3 of
		      %% Line 543
		      <{'EXIT',_X_Reason}> when 'true' ->
			  %% Line 544
			  'badarg'
		      %% Line 545
		      <Proc> when 'true' ->
			  let <R> =
			      apply %% Line 546
				    'req'/2
				  (%% Line 546
				   Proc, %% Line 546
					 {'match_delete_init',MP,Spec})
			  in  %% Line 547
			      apply 'do_match_delete'/4
				  (Proc, R, _2, 0)
		    end
	    %% Line 549
	    <'badarg'> when 'true' ->
		%% Line 550
		'badarg'
	    ( <_6> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_6})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'match_delete',3}}] )
'do_match_delete'/4 =
    %% Line 553
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <_X_Proc,{'done',N1},'select',N> when 'true' ->
		  %% Line 554
		  call 'erlang':'+'
		      (N, N1)
	      %% Line 555
	      <_X_Proc,{'done',_X_N1},_X_What,_X_N> when 'true' ->
		  %% Line 556
		  'ok'
	      %% Line 557
	      <Proc,{'cont',State,N1},What,N> when 'true' ->
		  let <_5> =
		      apply %% Line 558
			    'req'/2
			  (%% Line 558
			   Proc, %% Line 558
				 {'match_delete',State})
		  in  let <_4> =
			  call %% Line 558
			       'erlang':%% Line 558
					'+'
			      (%% Line 558
			       N, %% Line 558
				  N1)
		      in  %% Line 558
			  apply 'do_match_delete'/4
			      (Proc, _5, What, _4)
	      %% Line 559
	      <_X_Proc,Error,_X_What,_X_N> when 'true' ->
		  %% Line 560
		  Error
	    end
	    -| [{'function',{'do_match_delete',4}}] )
      -| [{'function',{'do_match_delete',4}}] )
'match_object'/2 =
    %% Line 568
    ( fun (_0,_1) ->
	  let <_2> =
	      apply %% Line 569
		    'safe_match'/3
		  (_0, _1, %% Line 569
			   'object')
	  in  let <_6> =
		  [_0|%% Line 569
		      ( [_1|( []
			      -| ['compiler_generated'] )]
			-| ['compiler_generated'] )]
	      in  %% Line 1258
		  ( case <_2,_6> of
		      ( <( 'badarg'
			   -| ['compiler_generated'] ),A> when ( 'true'
								 -| ['compiler_generated'] ) ->
			    %% Line 1259
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( 'badarg'
				     -| ['compiler_generated'] ), A)
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1260
		      ( <Reply,_X_A> when ( 'true'
					    -| ['compiler_generated'] ) ->
			    %% Line 1261
			    Reply
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated',{'function',{'badarg',2}}] )
      -| [{'function',{'match_object',2}}] )
'match_object'/3 =
    %% Line 580
    ( fun (_0,_1,_2) ->
	  let <_3> =
	      apply %% Line 581
		    'init_chunk_match'/5
		  (_0, _1, %% Line 581
			   'object', _2, %% Line 581
					 'no_safe')
	  in  let <_8> =
		  [_0|%% Line 581
		      ( [_1|( [_2|( []
				    -| ['compiler_generated'] )]
			      -| ['compiler_generated'] )]
			-| ['compiler_generated'] )]
	      in  %% Line 1258
		  ( case <_3,_8> of
		      ( <( 'badarg'
			   -| ['compiler_generated'] ),A> when ( 'true'
								 -| ['compiler_generated'] ) ->
			    %% Line 1259
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( 'badarg'
				     -| ['compiler_generated'] ), A)
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1260
		      ( <Reply,_X_A> when ( 'true'
					    -| ['compiler_generated'] ) ->
			    %% Line 1261
			    Reply
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated',{'function',{'badarg',2}}] )
      -| [{'function',{'match_object',3}}] )
'match_object'/1 =
    %% Line 590
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'match_object',1}}] ) of
	      <State = {'dets_cont',_9,_10,_11,_12,_13,_14,_15}>
		  when ( try
			  let <_5> =
			      call 'erlang':'element'
				  (2, State)
			  in  let <_6> =
				  call 'erlang':'=:='
				      (_5, 'object')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _6)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  let <_7> =
		      apply %% Line 591
			    'chunk_match'/2
			  (%% Line 591
			   State, %% Line 591
				  'no_safe')
		  in  let <_1> =
			  [%% Line 591
			   State|%% Line 591
				 ( []
				   -| ['compiler_generated'] )]
		      in  %% Line 1258
			  ( case <_7,_1> of
			      ( <( 'badarg'
				   -| ['compiler_generated'] ),A> when ( 'true'
									 -| ['compiler_generated'] ) ->
				    %% Line 1259
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( 'badarg'
					     -| ['compiler_generated'] ), A)
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      %% Line 1260
			      ( <Reply,_X_A> when ( 'true'
						    -| ['compiler_generated'] ) ->
				    %% Line 1261
				    Reply
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated',{'function',{'badarg',2}}] )
	      %% Line 592
	      <Term> when 'true' ->
		  %% Line 593
		  call 'erlang':'error'
		      ('badarg', [Term|[]])
	    end
	    -| [{'function',{'match_object',1}}] )
      -| [{'function',{'match_object',1}}] )
'member'/2 =
    %% Line 600
    ( fun (_0,_1) ->
	  let <_2> =
	      apply %% Line 601
		    'treq'/2
		  (_0, %% Line 601
		       {'member',_1})
	  in  let <_6> =
		  [_0|%% Line 601
		      ( [_1|( []
			      -| ['compiler_generated'] )]
			-| ['compiler_generated'] )]
	      in  %% Line 1258
		  ( case <_2,_6> of
		      ( <( 'badarg'
			   -| ['compiler_generated'] ),A> when ( 'true'
								 -| ['compiler_generated'] ) ->
			    %% Line 1259
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( 'badarg'
				     -| ['compiler_generated'] ), A)
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1260
		      ( <Reply,_X_A> when ( 'true'
					    -| ['compiler_generated'] ) ->
			    %% Line 1261
			    Reply
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated',{'function',{'badarg',2}}] )
      -| [{'function',{'member',2}}] )
'next'/2 =
    %% Line 608
    ( fun (_0,_1) ->
	  let <_2> =
	      apply %% Line 609
		    'treq'/2
		  (_0, %% Line 609
		       {'next',_1})
	  in  let <_6> =
		  [_0|%% Line 609
		      ( [_1|( []
			      -| ['compiler_generated'] )]
			-| ['compiler_generated'] )]
	      in  %% Line 1270
		  ( case <_2,_6> of
		      ( <( 'badarg'
			   -| ['compiler_generated'] ),A> when ( 'true'
								 -| ['compiler_generated'] ) ->
			    %% Line 1271
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( 'badarg'
				     -| ['compiler_generated'] ), A)
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1272
		      ( <( {( 'ok'
			      -| ['compiler_generated'] ),Reply}
			   -| ['compiler_generated'] ),_X_A> when ( 'true'
								    -| ['compiler_generated'] ) ->
			    %% Line 1273
			    Reply
			-| ['compiler_generated'] )
		      %% Line 1274
		      ( <Reply,_X_A> when ( 'true'
					    -| ['compiler_generated'] ) ->
			    %% Line 1275
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'exit'
								   -| ['compiler_generated'] )
				  (Reply)
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated',{'function',{'badarg_exit',2}}] )
      -| [{'function',{'next',2}}] )
'open_file'/1 =
    %% Line 619
    ( fun (_0) ->
	  let <File> =
	      apply %% Line 620
		    'to_list'/1
		  (( _0
		     -| [{'function',{'open_file',1}}] ))
	  in  %% Line 621
	      case call 'erlang':'is_list'
		       (File) of
		%% Line 622
		<'true'> when 'true' ->
		    %% Line 623
		    case call 'dets_server':'open_file'
			     (File) of
		      %% Line 624
		      <'badarg'> when 'true' ->
			  %% Line 625
			  call 'erlang':'error'
			      ('dets_process_died', [File|[]])
		      %% Line 626
		      <Reply> when 'true' ->
			  let <_1> =
			      [%% Line 627
			       File|%% Line 627
				    ( []
				      -| ['compiler_generated'] )]
			  in  %% Line 1250
			      ( case <Reply,_1> of
				  ( <( {( 'error'
					  -| ['compiler_generated'] ),( {( 'file_error'
									   -| ['compiler_generated'] ),_4,( 'einval'
													    -| ['compiler_generated'] )}
									-| ['compiler_generated'] )}
				       -| ['compiler_generated'] ),A> when ( 'true'
									     -| ['compiler_generated'] ) ->
					%% Line 1251
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( 'badarg'
						 -| ['compiler_generated'] ), A)
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  %% Line 1252
				  ( <( {( 'error'
					  -| ['compiler_generated'] ),( {( 'file_error'
									   -| ['compiler_generated'] ),_5,( 'badarg'
													    -| ['compiler_generated'] )}
									-| ['compiler_generated'] )}
				       -| ['compiler_generated'] ),A> when ( 'true'
									     -| ['compiler_generated'] ) ->
					%% Line 1253
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( 'badarg'
						 -| ['compiler_generated'] ), A)
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  %% Line 1254
				  ( <_7,_X_A> when ( 'true'
						     -| ['compiler_generated'] ) ->
					_7
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated',{'function',{'einval',2}}] )
		    end
		%% Line 629
		<'false'> when 'true' ->
		    %% Line 630
		    call 'erlang':'error'
			('badarg', [( _0
				      -| [{'function',{'open_file',1}}] )|[]])
	      end
      -| [{'function',{'open_file',1}}] )
'open_file'/2 =
    %% Line 648
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Tab,Args>
		  when call 'erlang':'is_list'
			(Args) ->
		  let <_2> =
		      catch
			  %% Line 649
			  apply 'defaults'/2
			      (Tab, Args)
		  in  %% Line 649
		      case _2 of
			%% Line 650
			<OpenArgs = {'open_args',_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17}> when ( 'true'
												   -| ['compiler_generated'] ) ->
			    %% Line 651
			    case call 'dets_server':'open_file'
				     (Tab, OpenArgs) of
			      %% Line 652
			      <'badarg'> when 'true' ->
				  %% Line 653
				  call 'erlang':'error'
				      ('dets_process_died', [Tab|[Args|[]]])
			      %% Line 654
			      <Reply> when 'true' ->
				  let <_20> =
				      [%% Line 655
				       Tab|%% Line 655
					   ( [Args|( []
						     -| ['compiler_generated'] )]
					     -| ['compiler_generated'] )]
				  in  %% Line 1250
				      ( case <Reply,_20> of
					  ( <( {( 'error'
						  -| ['compiler_generated'] ),( {( 'file_error'
										   -| ['compiler_generated'] ),_4,( 'einval'
														    -| ['compiler_generated'] )}
										-| ['compiler_generated'] )}
					       -| ['compiler_generated'] ),A> when ( 'true'
										     -| ['compiler_generated'] ) ->
						%% Line 1251
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( 'badarg'
							 -| ['compiler_generated'] ), A)
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  %% Line 1252
					  ( <( {( 'error'
						  -| ['compiler_generated'] ),( {( 'file_error'
										   -| ['compiler_generated'] ),_5,( 'badarg'
														    -| ['compiler_generated'] )}
										-| ['compiler_generated'] )}
					       -| ['compiler_generated'] ),A> when ( 'true'
										     -| ['compiler_generated'] ) ->
						%% Line 1253
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( 'badarg'
							 -| ['compiler_generated'] ), A)
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  %% Line 1254
					  ( <_21,_X_A> when ( 'true'
							      -| ['compiler_generated'] ) ->
						_21
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated',{'function',{'einval',2}}] )
			    end
			%% Line 657
			<_18> when 'true' ->
			    %% Line 658
			    call 'erlang':'error'
				('badarg', [Tab|[Args|[]]])
		      end
	      %% Line 660
	      <Tab,Arg> when 'true' ->
		  %% Line 661
		  apply 'open_file'/2
		      (Tab, [Arg|[]])
	    end
	    -| [{'function',{'open_file',2}}] )
      -| [{'function',{'open_file',2}}] )
'pid2name'/1 =
    %% Line 667
    ( fun (_0) ->
	  %% Line 668
	  call 'dets_server':'pid2name'
	      (( _0
		 -| [{'function',{'pid2name',1}}] ))
      -| [{'function',{'pid2name',1}}] )
'remove_user'/2 =
    %% Line 670
    ( fun (_0,_1) ->
	  %% Line 671
	  apply 'req'/2
	      (_0, {'close',_1})
      -| [{'function',{'remove_user',2}}] )
'repair_continuation'/2 =
    %% Line 678
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Cont = {'dets_cont',_9,_10,_11,_12,_13,_14,{'match_spec',B}},MS> when 'true' ->
		  %% Line 679
		  case call 'ets':'is_compiled_ms'
			   (B) of
		    %% Line 680
		    <'true'> when 'true' ->
			%% Line 681
			Cont
		    %% Line 682
		    <'false'> when 'true' ->
			let <_2> =
			    call %% Line 684
				 'ets':%% Line 684
				       'match_spec_compile'
				(%% Line 684
				 MS)
			in  let <_rec1> = {%% Line 683
				 'match_spec',_2}
			    in  %% Line 683
				case Cont of
				  <{'dets_cont',_15,_16,_17,_18,_19,_20,_21}> when 'true' ->
				      call 'erlang':'setelement'
					  (8, Cont, _rec1)
				  ( <_22> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','dets_cont'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
		    ( <_6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_6})
		      -| ['compiler_generated'] )
		  end
	      %% Line 686
	      <Cont = {'dets_cont',_23,_24,_25,_26,_27,_28,_29},_X_MS> when 'true' ->
		  %% Line 687
		  Cont
	      %% Line 688
	      <T,MS> when 'true' ->
		  %% Line 689
		  call 'erlang':'error'
		      ('badarg', [T|[MS|[]]])
	    end
	    -| [{'function',{'repair_continuation',2}}] )
      -| [{'function',{'repair_continuation',2}}] )
'safe_fixtable'/2 =
    %% Line 695
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Tab,Bool>
		  when let <_2> =
			call 'erlang':'=:='
			    (Bool, 'true')
		    in  let <_4> =
			    call 'erlang':'=:='
				(Bool, 'false')
			in  call 'erlang':'or'
				(_2, _4) ->
		  let <_5> =
		      apply %% Line 696
			    'treq'/2
			  (%% Line 696
			   Tab, %% Line 696
				{'safe_fixtable',Bool})
		  in  let <_9> =
			  [%% Line 696
			   Tab|%% Line 696
			       ( [Bool|( []
					 -| ['compiler_generated'] )]
				 -| ['compiler_generated'] )]
		      in  %% Line 1258
			  ( case <_5,_9> of
			      ( <( 'badarg'
				   -| ['compiler_generated'] ),A> when ( 'true'
									 -| ['compiler_generated'] ) ->
				    %% Line 1259
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( 'badarg'
					     -| ['compiler_generated'] ), A)
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      %% Line 1260
			      ( <Reply,_X_A> when ( 'true'
						    -| ['compiler_generated'] ) ->
				    %% Line 1261
				    Reply
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated',{'function',{'badarg',2}}] )
	      %% Line 697
	      <Tab,Term> when 'true' ->
		  %% Line 698
		  call 'erlang':'error'
		      ('badarg', [Tab|[Term|[]]])
	    end
	    -| [{'function',{'safe_fixtable',2}}] )
      -| [{'function',{'safe_fixtable',2}}] )
'select'/2 =
    %% Line 706
    ( fun (_0,_1) ->
	  let <_2> =
	      apply %% Line 707
		    'safe_match'/3
		  (_0, _1, %% Line 707
			   'select')
	  in  let <_6> =
		  [_0|%% Line 707
		      ( [_1|( []
			      -| ['compiler_generated'] )]
			-| ['compiler_generated'] )]
	      in  %% Line 1258
		  ( case <_2,_6> of
		      ( <( 'badarg'
			   -| ['compiler_generated'] ),A> when ( 'true'
								 -| ['compiler_generated'] ) ->
			    %% Line 1259
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( 'badarg'
				     -| ['compiler_generated'] ), A)
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1260
		      ( <Reply,_X_A> when ( 'true'
					    -| ['compiler_generated'] ) ->
			    %% Line 1261
			    Reply
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated',{'function',{'badarg',2}}] )
      -| [{'function',{'select',2}}] )
'select'/3 =
    %% Line 718
    ( fun (_0,_1,_2) ->
	  let <_3> =
	      apply %% Line 719
		    'init_chunk_match'/5
		  (_0, _1, %% Line 719
			   'select', _2, %% Line 719
					 'no_safe')
	  in  let <_8> =
		  [_0|%% Line 719
		      ( [_1|( [_2|( []
				    -| ['compiler_generated'] )]
			      -| ['compiler_generated'] )]
			-| ['compiler_generated'] )]
	      in  %% Line 1258
		  ( case <_3,_8> of
		      ( <( 'badarg'
			   -| ['compiler_generated'] ),A> when ( 'true'
								 -| ['compiler_generated'] ) ->
			    %% Line 1259
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( 'badarg'
				     -| ['compiler_generated'] ), A)
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1260
		      ( <Reply,_X_A> when ( 'true'
					    -| ['compiler_generated'] ) ->
			    %% Line 1261
			    Reply
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated',{'function',{'badarg',2}}] )
      -| [{'function',{'select',3}}] )
'select'/1 =
    %% Line 728
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'select',1}}] ) of
	      <State = {'dets_cont',_9,_10,_11,_12,_13,_14,_15}>
		  when ( try
			  let <_5> =
			      call 'erlang':'element'
				  (2, State)
			  in  let <_6> =
				  call 'erlang':'=:='
				      (_5, 'select')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _6)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  let <_7> =
		      apply %% Line 729
			    'chunk_match'/2
			  (%% Line 729
			   State, %% Line 729
				  'no_safe')
		  in  let <_1> =
			  [%% Line 729
			   State|%% Line 729
				 ( []
				   -| ['compiler_generated'] )]
		      in  %% Line 1258
			  ( case <_7,_1> of
			      ( <( 'badarg'
				   -| ['compiler_generated'] ),A> when ( 'true'
									 -| ['compiler_generated'] ) ->
				    %% Line 1259
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( 'badarg'
					     -| ['compiler_generated'] ), A)
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      %% Line 1260
			      ( <Reply,_X_A> when ( 'true'
						    -| ['compiler_generated'] ) ->
				    %% Line 1261
				    Reply
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated',{'function',{'badarg',2}}] )
	      %% Line 730
	      <Term> when 'true' ->
		  %% Line 731
		  call 'erlang':'error'
		      ('badarg', [Term|[]])
	    end
	    -| [{'function',{'select',1}}] )
      -| [{'function',{'select',1}}] )
'select_delete'/2 =
    %% Line 739
    ( fun (_0,_1) ->
	  let <_2> =
	      apply %% Line 740
		    'match_delete'/3
		  (_0, _1, %% Line 740
			   'select')
	  in  let <_6> =
		  [_0|%% Line 740
		      ( [_1|( []
			      -| ['compiler_generated'] )]
			-| ['compiler_generated'] )]
	      in  %% Line 1258
		  ( case <_2,_6> of
		      ( <( 'badarg'
			   -| ['compiler_generated'] ),A> when ( 'true'
								 -| ['compiler_generated'] ) ->
			    %% Line 1259
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( 'badarg'
				     -| ['compiler_generated'] ), A)
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1260
		      ( <Reply,_X_A> when ( 'true'
					    -| ['compiler_generated'] ) ->
			    %% Line 1261
			    Reply
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated',{'function',{'badarg',2}}] )
      -| [{'function',{'select_delete',2}}] )
'slot'/2 =
    %% Line 748
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Tab,Slot>
		  when let <_2> =
			call 'erlang':'is_integer'
			    (Slot)
		    in  let <_3> =
			    call 'erlang':'>='
				(Slot, 0)
			in  call 'erlang':'and'
				(_2, _3) ->
		  let <_4> =
		      apply %% Line 749
			    'treq'/2
			  (%% Line 749
			   Tab, %% Line 749
				{'slot',Slot})
		  in  let <_8> =
			  [%% Line 749
			   Tab|%% Line 749
			       ( [Slot|( []
					 -| ['compiler_generated'] )]
				 -| ['compiler_generated'] )]
		      in  %% Line 1258
			  ( case <_4,_8> of
			      ( <( 'badarg'
				   -| ['compiler_generated'] ),A> when ( 'true'
									 -| ['compiler_generated'] ) ->
				    %% Line 1259
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( 'badarg'
					     -| ['compiler_generated'] ), A)
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      %% Line 1260
			      ( <Reply,_X_A> when ( 'true'
						    -| ['compiler_generated'] ) ->
				    %% Line 1261
				    Reply
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated',{'function',{'badarg',2}}] )
	      %% Line 750
	      <Tab,Term> when 'true' ->
		  %% Line 751
		  call 'erlang':'error'
		      ('badarg', [Tab|[Term|[]]])
	    end
	    -| [{'function',{'slot',2}}] )
      -| [{'function',{'slot',2}}] )
'start'/0 =
    %% Line 753
    ( fun () ->
	  %% Line 754
	  call 'dets_server':'start'
	      ()
      -| [{'function',{'start',0}}] )
'stop'/0 =
    %% Line 756
    ( fun () ->
	  %% Line 757
	  call 'dets_server':'stop'
	      ()
      -| [{'function',{'stop',0}}] )
'istart_link'/1 =
    %% Line 759
    ( fun (_0) ->
	  let <_1> =
	      call %% Line 760
		   'erlang':%% Line 760
			    'self'
		  ()
	  in  let <_2> =
		  call %% Line 760
		       'proc_lib':%% Line 760
				  'spawn_link'
		      (%% Line 760
		       'dets', %% Line 760
			       'init', %% Line 760
				       [_1|[( _0
					      -| [{'function',{'istart_link',1}}] )|[]]])
	      in  %% Line 760
		  {'ok',_2}
      -| [{'function',{'istart_link',1}}] )
'sync'/1 =
    %% Line 766
    ( fun (_0) ->
	  let <_1> =
	      apply %% Line 767
		    'treq'/2
		  (( _0
		     -| [{'function',{'sync',1}}] ), %% Line 767
						     'sync')
	  in  let <_5> =
		  [( _0
		     -| [{'function',{'sync',1}}] )|%% Line 767
						    ( []
						      -| ['compiler_generated'] )]
	      in  %% Line 1258
		  ( case <_1,_5> of
		      ( <( 'badarg'
			   -| ['compiler_generated'] ),A> when ( 'true'
								 -| ['compiler_generated'] ) ->
			    %% Line 1259
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( 'badarg'
				     -| ['compiler_generated'] ), A)
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1260
		      ( <Reply,_X_A> when ( 'true'
					    -| ['compiler_generated'] ) ->
			    %% Line 1261
			    Reply
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated',{'function',{'badarg',2}}] )
      -| [{'function',{'sync',1}}] )
'table'/1 =
    %% Line 773
    ( fun (_0) ->
	  %% Line 774
	  apply 'table'/2
	      (( _0
		 -| [{'function',{'table',1}}] ), [])
      -| [{'function',{'table',1}}] )
'table'/2 =
    %% Line 785
    ( fun (_0,_1) ->
	  %% Line 786
	  case apply 'options'/2
		   (_1, ['traverse'|['n_objects']]) of
	    %% Line 787
	    <{'badarg',_47}> when 'true' ->
		%% Line 788
		call 'erlang':'error'
		    ('badarg', [_0|[_1|[]]])
	    %% Line 789
	    <[Traverse|[NObjs|[]]]> when 'true' ->
		let <_8> =
		    case %% Line 790
			 Traverse of
		      %% Line 791
		      <'first_next'> when 'true' ->
			  %% Line 792
			  ( fun () ->
				let <_2> =
				    apply 'first'/1
					(_0)
				in  apply 'qlc_next'/2
					(_0, _2)
			    -| [{'id',{0,0,'-table/2-fun-0-'}}] )
		      %% Line 793
		      <'select'> when 'true' ->
			  %% Line 794
			  ( fun (_4) ->
				let <_3> =
				    apply 'select'/3
					(_0, _4, NObjs)
				in  apply 'qlc_select'/1
					(_3)
			    -| [{'id',{0,0,'-table/2-fun-1-'}}] )
		      %% Line 795
		      <{'select',MS}> when 'true' ->
			  %% Line 796
			  ( fun () ->
				let <_6> =
				    apply 'select'/3
					(_0, MS, NObjs)
				in  apply 'qlc_select'/1
					(_6)
			    -| [{'id',{0,0,'-table/2-fun-2-'}}] )
		      ( <_7> when 'true' ->
			    %% Line 790
			    primop 'match_fail'
				({'case_clause',_7})
			-| ['compiler_generated'] )
		    end
		in  let <PreFun> =
			fun (_10) ->
			    %% Line 798
			    apply 'safe_fixtable'/2
				(_0, 'true')
		    in  let <PostFun> =
			    fun () ->
				%% Line 799
				apply 'safe_fixtable'/2
				    (_0, 'false')
			in  let <InfoFun> =
				fun (_14) ->
				    %% Line 800
				    apply 'table_info'/2
					(_0, _14)
			    in  let <_22> =
				    case %% Line 803
					 Traverse of
				      %% Line 804
				      <{'select',_X_MS}> when 'true' ->
					  %% Line 805
					  'undefined'
				      %% Line 806
				      <_49> when 'true' ->
					  %% Line 807
					  ( fun (_18,_17) ->
						case <_18,_17> of
						  <_X_KeyPos,[K|[]]> when 'true' ->
						      apply 'lookup'/2
							  (_0, K)
						  %% Line 808
						  <_X_KeyPos,Ks> when 'true' ->
						      apply 'lookup_keys'/2
							  (_0, Ks)
						end
					    -| [{'id',{0,0,'-table/2-fun-6-'}}] )
				    end
				in  let <FormatFun> =
					fun (_41) ->
					    %% Line 812
					    case _41 of
					      <{'all',_X_NElements,_X_ElementFun}> when 'true' ->
						  let <_29> =
						      letrec
							  'lc$^7'/1 =
							      %% Line 813
							      fun (_26) ->
								  case _26 of
								    <[_50|_25]>
									when call 'erlang':'=/='
									      (_1,
									       []) ->
									let <_28> =
									    apply 'lc$^7'/1
										(_25)
									in  ( [_1|_28]
									      -| ['compiler_generated'] )
								    ( <[_51|_25]> when 'true' ->
									  apply 'lc$^7'/1
									      (_25)
								      -| ['compiler_generated'] )
								    <[]> when 'true' ->
									[]
								    ( <_27> when 'true' ->
									  primop 'match_fail'
									      ({'function_clause',_27})
								      -| ['compiler_generated'] )
								  end
						      in  %% Line 813
							  apply 'lc$^7'/1
							      ([[]])
						  in  let <As> =
							  [_0|_29]
						      in  %% Line 814
							  {'dets','table',As}
					      %% Line 815
					      <{'match_spec',MS}> when 'true' ->
						  let <_31> =
						      apply %% Line 817
							    'listify'/1
							  (_1)
						  in  %% Line 816
						      {'dets','table',[_0|[[{'traverse',{'select',MS}}|_31]|%% Line 817
													    []]]}
					      %% Line 818
					      <{'lookup',_X_KeyPos,[Value|[]],_X_NElements,ElementFun}> when 'true' ->
						  let <_32> =
						      apply %% Line 820
							    ElementFun
							  (%% Line 820
							   Value)
						  in  %% Line 819
						      call 'io_lib':'format'
							  ([126|[119|[58|[108|[111|[111|[107|[117|[112|[40|[126|[119|[44|[32|[126|[119|[41]]]]]]]]]]]]]]]]], %% Line 820
																			     ['dets'|[_0|[_32|[]]]])
					      %% Line 821
					      <{'lookup',_X_KeyPos,Values,_X_NElements,ElementFun}> when 'true' ->
						  let <_39> =
						      letrec
							  'lc$^8'/1 =
							      %% Line 822
							      fun (_35) ->
								  case _35 of
								    <[V|_34]> when 'true' ->
									let <_37> =
									    apply ElementFun
										(V)
									in  let <_38> =
										apply 'lc$^8'/1
										    (_34)
									    in  ( [_37|_38]
										  -| ['compiler_generated'] )
								    <[]> when 'true' ->
									[]
								    ( <_36> when 'true' ->
									  primop 'match_fail'
									      ({'function_clause',_36})
								      -| ['compiler_generated'] )
								  end
						      in  %% Line 822
							  apply 'lc$^8'/1
							      (Values)
						  in  %% Line 823
						      call 'io_lib':'format'
							  ([108|[105|[115|[116|[115|[58|[102|[108|[97|[116|[109|[97|[112|[40|[102|[117|[110|[40|[86|[41|[32|[45|[62|[32|[126|[119|[58|[108|[111|[111|[107|[117|[112|[40|[126|[119|[44|[32|[86|[41|[32|[101|[110|[100|[44|[32|[126|[119|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 825
																																									     ['dets'|[_0|[_39|[]]]])
					      ( <_42> when 'true' ->
						    primop 'match_fail'
							({'function_clause',_42})
						-| ['compiler_generated'] )
					    end
				    in  %% Line 827
					call 'qlc':'table'
					    (_8, [{'pre_fun',PreFun}|[{'post_fun',PostFun}|%% Line 828
											   [{'info_fun',InfoFun}|[{'format_fun',FormatFun}|%% Line 829
																	   [{'key_equality','=:='}|%% Line 830
																				   [{'lookup_fun',_22}|[]]]]]]])
	    ( <_44> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_44})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'table',2}}] )
'qlc_next'/2 =
    %% Line 833
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <_X_Tab,'$end_of_table'> when 'true' ->
		  %% Line 834
		  []
	      %% Line 835
	      <Tab,Key> when 'true' ->
		  %% Line 836
		  case apply 'lookup'/2
			   (Tab, Key) of
		    %% Line 837
		    <Objects>
			when call 'erlang':'is_list'
			      (Objects) ->
			let <_3> =
			    fun () ->
				let <_2> =
				    apply %% Line 838
					  'next'/2
					(%% Line 838
					 Tab, %% Line 838
					      Key)
				in  %% Line 838
				    apply 'qlc_next'/2
					(Tab, _2)
			in  %% Line 838
			    call 'erlang':'++'
				(Objects, _3)
		    %% Line 839
		    <Error> when 'true' ->
			%% Line 841
			call 'erlang':'exit'
			    (Error)
		  end
	    end
	    -| [{'function',{'qlc_next',2}}] )
      -| [{'function',{'qlc_next',2}}] )
'qlc_select'/1 =
    %% Line 844
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'qlc_select',1}}] ) of
	      <'$end_of_table'> when 'true' ->
		  %% Line 845
		  []
	      %% Line 846
	      <{Objects,Cont}>
		  when call 'erlang':'is_list'
			(Objects) ->
		  let <_2> =
		      fun () ->
			  let <_1> =
			      apply %% Line 847
				    'select'/1
				  (%% Line 847
				   Cont)
			  in  %% Line 847
			      apply 'qlc_select'/1
				  (_1)
		  in  %% Line 847
		      call 'erlang':'++'
			  (Objects, _2)
	      %% Line 848
	      <Error> when 'true' ->
		  %% Line 849
		  Error
	    end
	    -| [{'function',{'qlc_select',1}}] )
      -| [{'function',{'qlc_select',1}}] )
'table_info'/2 =
    %% Line 851
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Tab,'num_of_objects'> when 'true' ->
		  %% Line 852
		  apply 'info'/2
		      (Tab, 'size')
	      %% Line 853
	      <Tab,'keypos'> when 'true' ->
		  %% Line 854
		  apply 'info'/2
		      (Tab, 'keypos')
	      %% Line 855
	      <Tab,'is_unique_objects'> when 'true' ->
		  let <_2> =
		      apply %% Line 856
			    'info'/2
			  (%% Line 856
			   Tab, %% Line 856
				'type')
		  in  %% Line 856
		      call 'erlang':'=/='
			  (_2, 'duplicate_bag')
	      %% Line 857
	      <_X_Tab,_5> when 'true' ->
		  %% Line 858
		  'undefined'
	    end
	    -| [{'function',{'table_info',2}}] )
      -| [{'function',{'table_info',2}}] )
'to_ets'/2 =
    %% Line 867
    ( fun (_0,_1) ->
	  %% Line 868
	  case call 'ets':'info'
		   (_1, 'protection') of
	    %% Line 869
	    <'undefined'> when 'true' ->
		%% Line 870
		call 'erlang':'error'
		    ('badarg', [_0|[_1|[]]])
	    %% Line 871
	    <_11> when 'true' ->
		let <Fun> =
		    fun (_4,_3) ->
			%% Line 872
			case call 'ets':'insert'
				 (_3, _4) of
			  <'true'> when 'true' ->
			      _3
			  ( <_2> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_2})
			    -| ['compiler_generated'] )
			end
		in  %% Line 873
		    apply 'foldl'/3
			(Fun, _1, _0)
	  end
      -| [{'function',{'to_ets',2}}] )
'traverse'/2 =
    %% Line 890
    ( fun (_0,_1) ->
	  let <Ref> =
	      call %% Line 891
		   'erlang':%% Line 891
			    'make_ref'
		  ()
	  in  let <TFun> =
		  fun (_5,_4) ->
		      %% Line 894
		      case apply _1
			       (_5) of
			%% Line 895
			<'continue'> when 'true' ->
			    _4
			%% Line 897
			<{'continue',Val}> when 'true' ->
			    %% Line 898
			    [Val|_4]
			%% Line 899
			<{'done',Value}> when 'true' ->
			    %% Line 900
			    call 'erlang':'throw'
				({Ref,[Value|_4]})
			%% Line 901
			<Other> when 'true' ->
			    %% Line 902
			    call 'erlang':'throw'
				({Ref,Other})
		      end
	      in  let <_9> =
		      apply %% Line 905
			    'do_traverse'/4
			  (%% Line 905
			   TFun, %% Line 905
				 [], _0, %% Line 905
					 Ref)
		  in  let <_15> =
			  [_0|%% Line 905
			      ( [_1|( []
				      -| ['compiler_generated'] )]
				-| ['compiler_generated'] )]
		      in  %% Line 1258
			  ( case <_9,_15> of
			      ( <( 'badarg'
				   -| ['compiler_generated'] ),A> when ( 'true'
									 -| ['compiler_generated'] ) ->
				    %% Line 1259
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( 'badarg'
					     -| ['compiler_generated'] ), A)
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      %% Line 1260
			      ( <Reply,_X_A> when ( 'true'
						    -| ['compiler_generated'] ) ->
				    %% Line 1261
				    Reply
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated',{'function',{'badarg',2}}] )
      -| [{'function',{'traverse',2}}] )
'update_counter'/3 =
    %% Line 915
    ( fun (_0,_1,_2) ->
	  let <_3> =
	      apply %% Line 916
		    'treq'/2
		  (_0, %% Line 916
		       {'update_counter',_1,_2})
	  in  let <_8> =
		  [_0|%% Line 916
		      ( [_1|( [_2|( []
				    -| ['compiler_generated'] )]
			      -| ['compiler_generated'] )]
			-| ['compiler_generated'] )]
	      in  %% Line 1258
		  ( case <_3,_8> of
		      ( <( 'badarg'
			   -| ['compiler_generated'] ),A> when ( 'true'
								 -| ['compiler_generated'] ) ->
			    %% Line 1259
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( 'badarg'
				     -| ['compiler_generated'] ), A)
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1260
		      ( <Reply,_X_A> when ( 'true'
					    -| ['compiler_generated'] ) ->
			    %% Line 1261
			    Reply
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated',{'function',{'badarg',2}}] )
      -| [{'function',{'update_counter',3}}] )
'verbose'/0 =
    %% Line 918
    ( fun () ->
	  %% Line 919
	  apply 'verbose'/1
	      ('true')
      -| [{'function',{'verbose',0}}] )
'verbose'/1 =
    %% Line 921
    ( fun (_0) ->
	  %% Line 922
	  case call 'dets_server':'verbose'
		   (( _0
		      -| [{'function',{'verbose',1}}] )) of
	    <'ok'> when 'true' ->
		let <All> =
		    call %% Line 923
			 'dets_server':%% Line 923
				       'all'
			()
		in  let <Fun> =
			fun (_3) ->
			    %% Line 924
			    apply 'treq'/2
				(_3, {'set_verbose',( _0
						      -| [{'function',{'verbose',1}}] )})
		    in  do  %% Line 925
			    call 'lists':'foreach'
				(Fun, All)
			    %% Line 926
			    All
	    ( <_1> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_1})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'verbose',1}}] )
'where'/2 =
    %% Line 932
    ( fun (_0,_1) ->
	  let <_2> =
	      apply %% Line 933
		    'treq'/2
		  (_0, %% Line 933
		       {'where',_1})
	  in  let <_6> =
		  [_0|%% Line 933
		      ( [_1|( []
			      -| ['compiler_generated'] )]
			-| ['compiler_generated'] )]
	      in  %% Line 1258
		  ( case <_2,_6> of
		      ( <( 'badarg'
			   -| ['compiler_generated'] ),A> when ( 'true'
								 -| ['compiler_generated'] ) ->
			    %% Line 1259
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( 'badarg'
				     -| ['compiler_generated'] ), A)
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1260
		      ( <Reply,_X_A> when ( 'true'
					    -| ['compiler_generated'] ) ->
			    %% Line 1261
			    Reply
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated',{'function',{'badarg',2}}] )
      -| [{'function',{'where',2}}] )
'do_traverse'/4 =
    %% Line 935
    ( fun (_0,_1,_2,_3) ->
	  let <_4> =
	      catch
		  %% Line 936
		  call 'dets_server':'get_pid'
		      (_2)
	  in  %% Line 936
	      case _4 of
		%% Line 937
		<{'EXIT',_X_Reason}> when 'true' ->
		    %% Line 938
		    'badarg'
		%% Line 939
		<Proc> when 'true' ->
		    %% Line 940
		    try
			%% Line 941
			apply 'do_trav'/3
			    (Proc, _1, _0)
		    of <_5> ->
			_5
		    catch <_8,_7,_6> ->
			%% Line 942
			case <_8,_7,_6> of
			  <( 'throw'
			     -| ['compiler_generated'] ),( {_14,Result}
							   -| ['compiler_generated'] ),_15>
			      when call 'erlang':'=:='
				    (_14,
				     _3) ->
			      %% Line 943
			      Result
			  ( <_16,_17,_18> when 'true' ->
				primop 'raise'
				    (_18, _17)
			    -| ['compiler_generated'] )
			end
	      end
      -| [{'function',{'do_traverse',4}}] )
'do_trav'/3 =
    %% Line 947
    ( fun (_0,_1,_2) ->
	  %% Line 948
	  case apply 'compile_match_spec'/2
		   ('object', '_') of
	    <{Spec,MP}> when 'true' ->
		%% Line 950
		case apply 'req'/2
			 (_0, {'match',MP,Spec,'default','safe'}) of
		  %% Line 951
		  <{'cont',State}> when 'true' ->
		      %% Line 952
		      apply 'do_trav'/4
			  (State, _0, _1, _2)
		  %% Line 953
		  <Error> when 'true' ->
		      %% Line 954
		      Error
		end
	    ( <_3> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_3})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'do_trav',3}}] )
'do_trav'/4 =
    %% Line 957
    ( fun (_0,_1,_2,_3) ->
	  %% Line 958
	  case apply 'req'/2
		   (_1, {'match_init',_0,'safe'}) of
	    %% Line 959
	    <'$end_of_table'> when 'true' ->
		_2
	    %% Line 961
	    <{'cont',{Bins,NewState}}> when 'true' ->
		let <_4> =
		    call %% Line 962
			 'lists':%% Line 962
				 'reverse'
			(%% Line 962
			 Bins)
		in  %% Line 962
		    apply 'do_trav_bins'/5
			(NewState, _1, _2, _3, _4)
	    %% Line 963
	    <Error> when 'true' ->
		%% Line 964
		Error
	  end
      -| [{'function',{'do_trav',4}}] )
'do_trav_bins'/5 =
    %% Line 967
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <State,Proc,Acc,Fun,[]> when 'true' ->
		  %% Line 968
		  apply 'do_trav'/4
		      (State, Proc, Acc, Fun)
	      %% Line 969
	      <State,Proc,Acc,Fun,[Bin|Bins]> when 'true' ->
		  let <_5> =
		      catch
			  %% Line 971
			  call 'erlang':'binary_to_term'
			      (Bin)
		  in  %% Line 971
		      case _5 of
			%% Line 972
			<{'EXIT',_14}> when 'true' ->
			    let <_6> =
				call %% Line 973
				     'dets_utils':%% Line 973
						  'bad_object'
				    (%% Line 973
				     'do_trav_bins', %% Line 973
						     Bin)
			    in  %% Line 973
				apply 'req'/2
				    (Proc, {'corrupt',_6})
			%% Line 974
			<Term> when 'true' ->
			    let <NewAcc> =
				apply %% Line 975
				      Fun
				    (%% Line 975
				     Term, %% Line 975
					   Acc)
			    in  %% Line 976
				apply 'do_trav_bins'/5
				    (State, Proc, NewAcc, Fun, Bins)
		      end
	      ( <_13,_12,_11,_10,_9> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_13,_12,_11,_10,_9})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'do_trav_bins',5}}] )
      -| [{'function',{'do_trav_bins',5}}] )
'safe_match'/3 =
    %% Line 979
    ( fun (_0,_1,_2) ->
	  let <_3> =
	      apply %% Line 980
		    'init_chunk_match'/5
		  (_0, _1, _2, %% Line 980
			       'default', %% Line 980
					  'safe')
	  in  %% Line 980
	      apply 'do_safe_match'/2
		  (_3, [])
      -| [{'function',{'safe_match',3}}] )
'do_safe_match'/2 =
    %% Line 982
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <_@r0 = {'error',Error},_X_L> when 'true' ->
		  %% Line 983
		  _@r0
	      %% Line 984
	      <{L,C},LL> when 'true' ->
		  let <_3> =
		      apply %% Line 985
			    'chunk_match'/2
			  (%% Line 985
			   C, %% Line 985
			      'safe')
		  in  let <_2> =
			  call %% Line 985
			       'erlang':%% Line 985
					'++'
			      (%% Line 985
			       L, %% Line 985
				  LL)
		      in  %% Line 985
			  apply 'do_safe_match'/2
			      (_3, _2)
	      %% Line 986
	      <'$end_of_table',L> when 'true' ->
		  %% Line 987
		  L
	      %% Line 988
	      <'badarg',_X_L> when 'true' ->
		  %% Line 989
		  'badarg'
	      ( <_5,_4> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_5,_4})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'do_safe_match',2}}] )
      -| [{'function',{'do_safe_match',2}}] )
'init_chunk_match'/5 =
    %% Line 992
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <Tab,Pat,What,N,Safe>
		  when let <_5> =
			call 'erlang':'is_integer'
			    (N)
		    in  let <_6> =
			    call 'erlang':'>='
				(N, 0)
			in  let <_7> =
				call 'erlang':'and'
				    (_5, _6)
			    in  let <_8> =
				    call %% Line 993
					 'erlang':%% Line 993
						  '=:='
					(%% Line 993
					 N, %% Line 993
					    'default')
				in  call 'erlang':'or'
					(_7, _8) ->
		  %% Line 994
		  case apply 'compile_match_spec'/2
			   (What, Pat) of
		    %% Line 995
		    <{Spec,MP}> when 'true' ->
			let <_9> =
			    catch
				%% Line 996
				call 'dets_server':'get_pid'
				    (Tab)
			in  %% Line 996
			    case _9 of
			      %% Line 997
			      <{'EXIT',_X_Reason}> when 'true' ->
				  %% Line 998
				  'badarg'
			      %% Line 999
			      <Proc> when 'true' ->
				  %% Line 1000
				  case apply 'req'/2
					   (Proc, {'match',MP,Spec,N,Safe}) of
				    %% Line 1001
				    <{'done',L}> when 'true' ->
					%% Line 1002
					{L,{'dets_cont',%% Line 1003
							What,%% Line 1004
							     'default',%% Line 1003
								       'eof',%% Line 1005
									     #{}#,Tab,Proc,'undefined'}}
				    %% Line 1006
				    <{'cont',State}> when 'true' ->
					%% Line 1007
					case State of
					  <{'dets_cont',_23,_24,_25,_26,_27,_28,_29}> when 'true' ->
					      let <_11> =
						  call %% Line 1009
						       'erlang':%% Line 1009
								'setelement'
						      (%% Line 1009
						       7, State, %% Line 1009
								 Proc)
					      in  let <_12> =
						      call %% Line 1008
							   'erlang':%% Line 1008
								    'setelement'
							  (%% Line 1008
							   6, _11, %% Line 1008
								   Tab)
						  in  let <_14> =
							  call 'erlang':'setelement'
							      (2, _12, What)
						      in  apply 'chunk_match'/2
							      (_14, %% Line 1010
								    Safe)
					  ( <_30> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','dets_cont'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
				    %% Line 1011
				    <Error> when 'true' ->
					%% Line 1012
					Error
				  end
			    end
		    %% Line 1015
		    <'badarg'> when 'true' ->
			%% Line 1016
			'badarg'
		    ( <_17> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_17})
		      -| ['compiler_generated'] )
		  end
	      %% Line 1018
	      <_X_Tab,_X_Pat,_X_What,_X_N,_X_Safe> when 'true' ->
		  %% Line 1019
		  'badarg'
	    end
	    -| [{'function',{'init_chunk_match',5}}] )
      -| [{'function',{'init_chunk_match',5}}] )
'chunk_match'/2 =
    %% Line 1021
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <State = {'dets_cont',_12,_13,_14,_15,_16,Proc,_17},Safe> when 'true' ->
		  %% Line 1022
		  case apply 'req'/2
			   (Proc, {'match_init',State,Safe}) of
		    %% Line 1023
		    <Reply = '$end_of_table'> when 'true' ->
			%% Line 1024
			Reply
		    %% Line 1025
		    <{'cont',{Bins,NewState}}> when 'true' ->
			%% Line 1026
			( case NewState of
			    ( <( {'dets_cont',_18,_19,_20,_21,_22,_23,_rec4}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_5> =
				      catch
					  %% Line 1027
					  apply 'do_foldl_bins'/2
					      (Bins, _rec4)
				  in  %% Line 1027
				      case _5 of
					%% Line 1028
					<{'EXIT',_25}> when 'true' ->
					    %% Line 1029
					    case call 'ets':'is_compiled_ms'
						     (_rec4) of
					      %% Line 1030
					      <'true'> when 'true' ->
						  let <Bad> =
						      call %% Line 1031
							   'dets_utils':%% Line 1031
									'bad_object'
							  (%% Line 1031
							   'chunk_match', %% Line 1031
									  Bins)
						  in  %% Line 1032
						      apply 'req'/2
							  (Proc, {'corrupt',Bad})
					      %% Line 1033
					      <'false'> when 'true' ->
						  %% Line 1034
						  'badarg'
					      ( <_7> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_7})
						-| ['compiler_generated'] )
					    end
					%% Line 1036
					<[]> when 'true' ->
					    %% Line 1037
					    apply 'chunk_match'/2
						(NewState, Safe)
					%% Line 1038
					<Terms> when 'true' ->
					    %% Line 1039
					    {Terms,NewState}
				      end
			      -| ['compiler_generated'] )
			    ( <_24> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','dets_cont'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 1041
		    <Error> when 'true' ->
			%% Line 1042
			Error
		  end
	      ( <_11,_10> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_11,_10})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'chunk_match',2}}] )
      -| [{'function',{'chunk_match',2}}] )
'do_foldl_bins'/2 =
    %% Line 1045
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Bins,'true'> when 'true' ->
		  %% Line 1046
		  apply 'foldl_bins'/2
		      (Bins, [])
	      %% Line 1047
	      <Bins,{'match_spec',MP}> when 'true' ->
		  %% Line 1048
		  apply 'foldl_bins'/3
		      (Bins, MP, [])
	      ( <_3,_2> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_3,_2})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'do_foldl_bins',2}}] )
      -| [{'function',{'do_foldl_bins',2}}] )
'foldl_bins'/2 =
    %% Line 1050
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <[],Terms> when 'true' ->
		  %% Line 1052
		  Terms
	      %% Line 1053
	      <[Bin|Bins],Terms> when 'true' ->
		  let <_2> =
		      call %% Line 1054
			   'erlang':%% Line 1054
				    'binary_to_term'
			  (%% Line 1054
			   Bin)
		  in  %% Line 1054
		      apply 'foldl_bins'/2
			  (Bins, [_2|Terms])
	      ( <_4,_3> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_4,_3})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'foldl_bins',2}}] )
      -| [{'function',{'foldl_bins',2}}] )
'foldl_bins'/3 =
    %% Line 1056
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <[],_X_MP,Terms> when 'true' ->
		  %% Line 1058
		  Terms
	      %% Line 1059
	      <[Bin|Bins],MP,Terms> when 'true' ->
		  let <Term> =
		      call %% Line 1060
			   'erlang':%% Line 1060
				    'binary_to_term'
			  (%% Line 1060
			   Bin)
		  in  %% Line 1061
		      case call 'ets':'match_spec_run'
			       ([Term|[]], MP) of
			%% Line 1062
			<[]> when 'true' ->
			    %% Line 1063
			    apply 'foldl_bins'/3
				(Bins, MP, Terms)
			%% Line 1064
			<[Result|[]]> when 'true' ->
			    %% Line 1065
			    apply 'foldl_bins'/3
				(Bins, MP, [Result|Terms])
			( <_4> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_4})
			  -| ['compiler_generated'] )
		      end
	      ( <_7,_6,_5> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_7,_6,_5})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'foldl_bins',3}}] )
      -| [{'function',{'foldl_bins',3}}] )
'compile_match_spec'/2 =
    %% Line 1069
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <'select',Spec = [{'_',[],['$_']}]> when 'true' ->
		  %% Line 1070
		  {Spec,'true'}
	      %% Line 1071
	      <'select',Spec> when 'true' ->
		  %% Line 1072
		  try
		      let <_2> =
			  call 'ets':'match_spec_compile'
			      (Spec)
		      in  {Spec,{'match_spec',_2}}
		  of <_3> ->
		      _3
		  catch <_6,_5,_4> ->
		      %% Line 1073
		      case <_6,_5,_4> of
			<( 'error'
			   -| ['compiler_generated'] ),_9,_10> when 'true' ->
			    'badarg'
			( <_11,_12,_13> when 'true' ->
			      primop 'raise'
				  (_13, _12)
			  -| ['compiler_generated'] )
		      end
	      %% Line 1075
	      <'object',Pat> when 'true' ->
		  %% Line 1076
		  apply 'compile_match_spec'/2
		      ('select', [{Pat,[],['$_']}|[]])
	      %% Line 1077
	      <'bindings',Pat> when 'true' ->
		  %% Line 1078
		  apply 'compile_match_spec'/2
		      ('select', [{Pat,[],['$$']}|[]])
	      %% Line 1079
	      <'delete',Pat> when 'true' ->
		  %% Line 1080
		  apply 'compile_match_spec'/2
		      ('select', [{Pat,[],['true']}|[]])
	      ( <_8,_7> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_8,_7})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'compile_match_spec',2}}] )
      -| [{'function',{'compile_match_spec',2}}] )
'defaults'/2 =
    %% Line 1083
    ( fun (_0,_1) ->
	  let <_3> =
	      apply %% Line 1084
		    'to_list'/1
		  (_0)
	  in  let <_2> =
		  call %% Line 1092
		       'timer':%% Line 1092
			       'minutes'
		      (%% Line 1092
		       3)
	      in  let <Defaults0> =
		      {%% Line 1084
		       'open_args',_3,%% Line 1085
				      'set',%% Line 1086
					    1,%% Line 1087
					      'true',%% Line 1088
						     'default',%% Line 1089
							       'default',%% Line 1090
									 'false',%% Line 1091
										 {3000,14000},_2,%% Line 1093
												 'read_write',%% Line 1094
													      'false'}
		  in  let <_5> = 'repl'/2
		      in  let <Defaults> =
			      call %% Line 1096
				   'lists':%% Line 1096
					   'foldl'
				  (_5, %% Line 1096
				       Defaults0, _1)
			  in  %% Line 1097
			      ( case Defaults of
				  ( <( {'open_args',_rec5,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22}
				       -| ['compiler_generated'] )> when 'true' ->
					case call 'erlang':'is_list'
						 (_rec5) of
					  <'true'> when 'true' ->
					      %% Line 1098
					      apply 'is_comp_min_max'/1
						  (Defaults)
					  ( <_10> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_10})
					    -| ['compiler_generated'] )
					end
				    -| ['compiler_generated'] )
				  ( <_23> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','open_args'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
      -| [{'function',{'defaults',2}}] )
'to_list'/1 =
    %% Line 1100
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'to_list',1}}] ) of
	      <T>
		  when call 'erlang':'is_atom'
			(( _0
			   -| [{'function',{'to_list',1}}] )) ->
		  call 'erlang':'atom_to_list'
		      (T)
	      %% Line 1101
	      <T> when 'true' ->
		  T
	    end
	    -| [{'function',{'to_list',1}}] )
      -| [{'function',{'to_list',1}}] )
'repl'/2 =
    %% Line 1103
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <{'access',A},Defs> when 'true' ->
		  do  %% Line 1104
		      apply 'mem'/2
			  (A, ['read'|['read_write']])
		      %% Line 1105
		      case Defs of
			<{'open_args',_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55}> when 'true' ->
			    call 'erlang':'setelement'
				(11, Defs, A)
			( <_56> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','open_args'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	      %% Line 1106
	      <{'auto_save',Int},Defs>
		  when let <_4> =
			call 'erlang':'is_integer'
			    (Int)
		    in  let <_5> =
			    call 'erlang':'>='
				(Int, 0)
			in  call 'erlang':'and'
				(_4, _5) ->
		  %% Line 1107
		  case Defs of
		    <{'open_args',_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67}> when 'true' ->
			call 'erlang':'setelement'
			    (10, Defs, Int)
		    ( <_68> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','open_args'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      %% Line 1108
	      <{'auto_save','infinity'},Defs> when 'true' ->
		  %% Line 1109
		  case Defs of
		    <{'open_args',_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79}> when 'true' ->
			call 'erlang':'setelement'
			    (10, Defs, 'infinity')
		    ( <_80> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','open_args'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      %% Line 1110
	      <{'cache_size',Int},Defs>
		  when let <_10> =
			call 'erlang':'is_integer'
			    (Int)
		    in  let <_11> =
			    call 'erlang':'>='
				(Int, 0)
			in  call 'erlang':'and'
				(_10, _11) ->
		  %% Line 1112
		  Defs
	      %% Line 1113
	      <{'cache_size','infinity'},Defs> when 'true' ->
		  %% Line 1114
		  Defs
	      %% Line 1115
	      <{'delayed_write','default'},Defs> when 'true' ->
		  %% Line 1116
		  case Defs of
		    <{'open_args',_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91}> when 'true' ->
			call 'erlang':'setelement'
			    (9, Defs, {3000,14000})
		    ( <_92> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','open_args'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      %% Line 1117
	      <{'delayed_write',C = {Delay,Size}},Defs>
		  when %% Line 1118
		    try
			let <_14> =
			    call 'erlang':'is_integer'
				(Delay)
			in  let <_15> =
				call 'erlang':'>='
				    (Delay, 0)
			    in  let <_16> =
				    call 'erlang':'is_integer'
					(Size)
				in  let <_17> =
					call 'erlang':'>='
					    (Size, 0)
				    in  let <_18> =
					    call 'erlang':'and'
						(_16, _17)
					in  let <_19> =
						call 'erlang':'and'
						    (_15, _18)
					    in  call 'erlang':'and'
						    (_14, _19)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  %% Line 1119
		  case Defs of
		    <{'open_args',_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103}> when 'true' ->
			call 'erlang':'setelement'
			    (9, Defs, C)
		    ( <_104> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','open_args'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      %% Line 1120
	      <{'estimated_no_objects',I},Defs> when 'true' ->
		  %% Line 1121
		  apply 'repl'/2
		      ({'min_no_slots',I}, Defs)
	      %% Line 1122
	      <{'file',File},Defs> when 'true' ->
		  let <_rec11> =
		      apply %% Line 1123
			    'to_list'/1
			  (%% Line 1123
			   File)
		  in  %% Line 1123
		      case Defs of
			<{'open_args',_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115}> when 'true' ->
			    call 'erlang':'setelement'
				(2, Defs, _rec11)
			( <_116> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','open_args'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	      %% Line 1124
	      <{'keypos',P},Defs>
		  when let <_25> =
			call 'erlang':'is_integer'
			    (P)
		    in  let <_26> =
			    call 'erlang':'>'
				(P, 0)
			in  call 'erlang':'and'
				(_25, _26) ->
		  %% Line 1125
		  case Defs of
		    <{'open_args',_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127}> when 'true' ->
			call 'erlang':'setelement'
			    (4, Defs, P)
		    ( <_128> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','open_args'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      %% Line 1126
	      <{'max_no_slots',I},Defs> when 'true' ->
		  let <MaxSlots> =
		      apply %% Line 1127
			    'is_max_no_slots'/1
			  (%% Line 1127
			   I)
		  in  %% Line 1128
		      case Defs of
			<{'open_args',_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139}> when 'true' ->
			    call 'erlang':'setelement'
				(7, Defs, MaxSlots)
			( <_140> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','open_args'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	      %% Line 1129
	      <{'min_no_slots',I},Defs> when 'true' ->
		  let <MinSlots> =
		      apply %% Line 1130
			    'is_min_no_slots'/1
			  (%% Line 1130
			   I)
		  in  %% Line 1131
		      case Defs of
			<{'open_args',_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151}> when 'true' ->
			    call 'erlang':'setelement'
				(6, Defs, MinSlots)
			( <_152> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','open_args'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	      %% Line 1132
	      <{'ram_file',Bool},Defs> when 'true' ->
		  do  %% Line 1133
		      apply 'mem'/2
			  (Bool, ['true'|['false']])
		      %% Line 1134
		      case Defs of
			<{'open_args',_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163}> when 'true' ->
			    call 'erlang':'setelement'
				(8, Defs, Bool)
			( <_164> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','open_args'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	      %% Line 1135
	      <{'repair',T},Defs> when 'true' ->
		  do  %% Line 1136
		      apply 'mem'/2
			  (T, ['true'|['false'|['force']]])
		      %% Line 1137
		      case Defs of
			<{'open_args',_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175}> when 'true' ->
			    call 'erlang':'setelement'
				(5, Defs, T)
			( <_176> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','open_args'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	      %% Line 1138
	      <{'type',T},Defs> when 'true' ->
		  do  %% Line 1139
		      apply 'mem'/2
			  (T, ['set'|['bag'|['duplicate_bag']]])
		      %% Line 1140
		      case Defs of
			<{'open_args',_177,_178,_179,_180,_181,_182,_183,_184,_185,_186,_187}> when 'true' ->
			    call 'erlang':'setelement'
				(3, Defs, T)
			( <_188> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','open_args'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	      %% Line 1141
	      <{'version',Version},Defs> when 'true' ->
		  do  %% Line 1143
		      apply 'is_version'/1
			  (Version)
		      %% Line 1144
		      Defs
	      %% Line 1145
	      <{'debug',Bool},Defs> when 'true' ->
		  do  %% Line 1147
		      apply 'mem'/2
			  (Bool, ['true'|['false']])
		      %% Line 1148
		      case Defs of
			<{'open_args',_189,_190,_191,_192,_193,_194,_195,_196,_197,_198,_199}> when 'true' ->
			    call 'erlang':'setelement'
				(12, Defs, Bool)
			( <_200> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','open_args'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	      %% Line 1149
	      <{_201,_202},_203> when 'true' ->
		  %% Line 1150
		  call 'erlang':'exit'
		      ('badarg')
	      ( <_44,_43> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_44,_43})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'repl',2}}] )
      -| [{'function',{'repl',2}}] )
'is_min_no_slots'/1 =
    %% Line 1152
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'is_min_no_slots',1}}] ) of
	      <'default'> when 'true' ->
		  'default'
	      %% Line 1153
	      <I>
		  when let <_1> =
			call 'erlang':'is_integer'
			    (( _0
			       -| [{'function',{'is_min_no_slots',1}}] ))
		    in  let <_2> =
			    call 'erlang':'>='
				(( _0
				   -| [{'function',{'is_min_no_slots',1}}] ), 256)
			in  call 'erlang':'and'
				(_1, _2) ->
		  I
	      %% Line 1154
	      <I>
		  when let <_3> =
			call 'erlang':'is_integer'
			    (( _0
			       -| [{'function',{'is_min_no_slots',1}}] ))
		    in  let <_4> =
			    call 'erlang':'>='
				(( _0
				   -| [{'function',{'is_min_no_slots',1}}] ), 0)
			in  call 'erlang':'and'
				(_3, _4) ->
		  256
	      ( <_5> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_5})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'is_min_no_slots',1}}] )
      -| [{'function',{'is_min_no_slots',1}}] )
'is_max_no_slots'/1 =
    %% Line 1156
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'is_max_no_slots',1}}] ) of
	      <'default'> when 'true' ->
		  'default'
	      %% Line 1157
	      <I>
		  when try
			let <_1> =
			    call 'erlang':'is_integer'
				(( _0
				   -| [{'function',{'is_max_no_slots',1}}] ))
			in  let <_2> =
				call 'erlang':'>'
				    (( _0
				       -| [{'function',{'is_max_no_slots',1}}] ), 0)
			    in  let <_4> =
				    call 'erlang':'<'
					(( _0
					   -| [{'function',{'is_max_no_slots',1}}] ), 2147483648)
				in  let <_5> =
					call 'erlang':'and'
					    (_2, _4)
				    in  call 'erlang':'and'
					    (_1, _5)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  I
	      ( <_6> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_6})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'is_max_no_slots',1}}] )
      -| [{'function',{'is_max_no_slots',1}}] )
'is_comp_min_max'/1 =
    %% Line 1159
    ( fun (_0) ->
	  %% Line 1160
	  case ( _0
		 -| [{'function',{'is_comp_min_max',1}}] ) of
	    <{'open_args',_4,_5,_6,_7,Min,Max,_8,_9,_10,_11,_12}> when 'true' ->
		%% Line 1161
		case <> of
		  %% Line 1162
		  <>
		      when call 'erlang':'=:='
			    (Min,
			     'default') ->
		      ( _0
			-| [{'function',{'is_comp_min_max',1}}] )
		  %% Line 1163
		  <>
		      when call 'erlang':'=:='
			    (Max,
			     'default') ->
		      ( _0
			-| [{'function',{'is_comp_min_max',1}}] )
		  %% Line 1164
		  <> when 'true' ->
		      case call 'erlang':'=<'
			       (Min, Max) of
			<'true'> when 'true' ->
			    ( _0
			      -| [{'function',{'is_comp_min_max',1}}] )
			( <_2> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_2})
			  -| ['compiler_generated'] )
		      end
		end
	    ( <_1> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_1})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'is_comp_min_max',1}}] )
'is_version'/1 =
    %% Line 1167
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'is_version',1}}] ) of
	      <'default'> when 'true' ->
		  'true'
	      %% Line 1168
	      <9> when 'true' ->
		  'true'
	      ( <_1> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_1})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'is_version',1}}] )
      -| [{'function',{'is_version',1}}] )
'mem'/2 =
    %% Line 1170
    ( fun (_0,_1) ->
	  %% Line 1171
	  case call 'lists':'member'
		   (_0, _1) of
	    %% Line 1172
	    <'true'> when 'true' ->
		'true'
	    %% Line 1173
	    <'false'> when 'true' ->
		call 'erlang':'exit'
		    ('badarg')
	    ( <_2> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_2})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'mem',2}}] )
'options'/2 =
    %% Line 1176
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Options,Keys>
		  when call 'erlang':'is_list'
			(Options) ->
		  %% Line 1177
		  apply 'options'/3
		      (Options, Keys, [])
	      %% Line 1178
	      <Option,Keys> when 'true' ->
		  %% Line 1179
		  apply 'options'/3
		      ([Option|[]], Keys, [])
	    end
	    -| [{'function',{'options',2}}] )
      -| [{'function',{'options',2}}] )
'options'/3 =
    %% Line 1181
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <Options,[Key|Keys],L>
		  when call 'erlang':'is_list'
			(Options) ->
		  let <_12> =
		      case %% Line 1182
			   call 'lists':'keysearch'
			       (Key, 1, Options) of
			%% Line 1183
			<{'value',{'format',Format}}>
			    when let <_3> =
				  call 'erlang':'=:='
				      (Format, 'term')
			      in  let <_4> =
				      call %% Line 1184
					   'erlang':%% Line 1184
						    '=:='
					  (%% Line 1184
					   Format, %% Line 1184
						   'bchunk')
				  in  call 'erlang':'or'
					  (_3, _4) ->
			    %% Line 1185
			    {'ok',Format}
			%% Line 1186
			<{'value',{'min_no_slots',I}}> when 'true' ->
			    let <_5> =
				catch
				    %% Line 1187
				    apply 'is_min_no_slots'/1
					(I)
			    in  %% Line 1187
				case _5 of
				  %% Line 1188
				  <{'EXIT',_19}> when 'true' ->
				      'badarg'
				  %% Line 1189
				  <MinNoSlots> when 'true' ->
				      {'ok',MinNoSlots}
				end
			%% Line 1191
			<{'value',{'n_objects','default'}}> when 'true' ->
			    let <_7> =
				apply %% Line 1192
				      'default_option'/1
				    (%% Line 1192
				     Key)
			    in  %% Line 1192
				{'ok',_7}
			%% Line 1193
			<{'value',{'n_objects',NObjs}}>
			    when let <_8> =
				  call 'erlang':'is_integer'
				      (NObjs)
			      in  let <_9> =
				      call %% Line 1194
					   'erlang':%% Line 1194
						    '>='
					  (%% Line 1194
					   NObjs, %% Line 1194
						  1)
				  in  call 'erlang':'and'
					  (_8, _9) ->
			    %% Line 1195
			    {'ok',NObjs}
			%% Line 1196
			<{'value',{'traverse','select'}}> when 'true' ->
			    %% Line 1197
			    {'ok','select'}
			%% Line 1198
			<{'value',{'traverse',_@r0 = {'select',MS}}}> when 'true' ->
			    %% Line 1199
			    {'ok',_@r0}
			%% Line 1200
			<{'value',{'traverse','first_next'}}> when 'true' ->
			    %% Line 1201
			    {'ok','first_next'}
			%% Line 1202
			<{'value',{_20,_21}}>
			    when call 'erlang':'=:='
				  (_20,
				   Key) ->
			    %% Line 1203
			    'badarg'
			%% Line 1204
			<'false'> when 'true' ->
			    let <Default> =
				apply %% Line 1205
				      'default_option'/1
				    (%% Line 1205
				     Key)
			    in  %% Line 1206
				{'ok',Default}
			( <_11> when 'true' ->
			      %% Line 1182
			      primop 'match_fail'
				  ({'case_clause',_11})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 1208
		      case _12 of
			%% Line 1209
			<'badarg'> when 'true' ->
			    %% Line 1210
			    {'badarg',Key}
			%% Line 1211
			<{'ok',Value}> when 'true' ->
			    let <NewOptions> =
				call %% Line 1212
				     'lists':%% Line 1212
					     'keydelete'
				    (%% Line 1212
				     Key, %% Line 1212
					  1, %% Line 1212
					     Options)
			    in  %% Line 1213
				apply 'options'/3
				    (NewOptions, Keys, [Value|L])
			( <_15> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_15})
			  -| ['compiler_generated'] )
		      end
	      %% Line 1215
	      <[],[],L> when 'true' ->
		  %% Line 1216
		  call 'lists':'reverse'
		      (L)
	      %% Line 1217
	      <Options,_22,_X_L> when 'true' ->
		  %% Line 1218
		  {'badarg',Options}
	    end
	    -| [{'function',{'options',3}}] )
      -| [{'function',{'options',3}}] )
'default_option'/1 =
    %% Line 1220
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'default_option',1}}] ) of
	      <'format'> when 'true' ->
		  'term'
	      %% Line 1221
	      <'min_no_slots'> when 'true' ->
		  'default'
	      %% Line 1222
	      <'traverse'> when 'true' ->
		  'select'
	      %% Line 1223
	      <'n_objects'> when 'true' ->
		  'default'
	      ( <_1> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_1})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'default_option',1}}] )
      -| [{'function',{'default_option',1}}] )
'listify'/1 =
    %% Line 1225
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'listify',1}}] ) of
	      <L>
		  when call 'erlang':'is_list'
			(( _0
			   -| [{'function',{'listify',1}}] )) ->
		  %% Line 1226
		  L
	      %% Line 1227
	      <T> when 'true' ->
		  %% Line 1228
		  [T|[]]
	    end
	    -| [{'function',{'listify',1}}] )
      -| [{'function',{'listify',1}}] )
'treq'/2 =
    %% Line 1230
    ( fun (_0,_1) ->
	  let <_2> =
	      catch
		  %% Line 1231
		  call 'dets_server':'get_pid'
		      (_0)
	  in  %% Line 1231
	      case _2 of
		%% Line 1232
		<Pid>
		    when call 'erlang':'is_pid'
			  (_2) ->
		    %% Line 1233
		    apply 'req'/2
			(Pid, _1)
		%% Line 1234
		<_6> when 'true' ->
		    %% Line 1235
		    'badarg'
	      end
      -| [{'function',{'treq',2}}] )
'req'/2 =
    %% Line 1238
    ( fun (_0,_1) ->
	  let <Ref> =
	      call %% Line 1239
		   'erlang':%% Line 1239
			    'monitor'
		  (%% Line 1239
		   'process', _0)
	  in  let <_3> =
		  call %% Line 1240
		       'erlang':%% Line 1240
				'self'
		      ()
	      in  do  %% Line 1240
		      call 'erlang':'!'
			  (_0, {'$dets_call',_3,_1})
		      ( letrec
			    'recv$^0'/0 =
				fun () ->
				    let <_13,_11> =
					primop 'recv_peek_message'
					    ()
				    in  case _13 of
					  <'true'> when 'true' ->
					      %% Line 1241
					      case _11 of
						%% Line 1242
						<{'DOWN',_6,'process',_7,_X_Info}>
						    when let <_8> =
							  call 'erlang':'=:='
							      (_6, Ref)
						      in  let <_9> =
							      call 'erlang':'=:='
								  (_7, _0)
							  in  call 'erlang':'and'
								  (_8, _9) ->
						    do  primop 'remove_message'
							    ()
							%% Line 1243
							'badarg'
						%% Line 1244
						<{_10,Reply}>
						    when call 'erlang':'=:='
							  (_10,
							   _0) ->
						    do  primop 'remove_message'
							    ()
							do  %% Line 1245
							    call 'erlang':'demonitor'
								(Ref, ['flush'])
							    %% Line 1246
							    Reply
						( <Other> when 'true' ->
						      do  primop 'recv_next'
							      ()
							  ( apply 'recv$^0'/0
								()
							    -| ['dialyzer_ignore'] )
						  -| ['compiler_generated','dialyzer_ignore'] )
					      end
					  ( <'false'> when 'true' ->
						let <_12> =
						    primop 'recv_wait_timeout'
							('infinity')
						in  case _12 of
						      <'true'> when 'true' ->
							  do  primop 'timeout'
								  ()
							      'true'
						      ( <'false'> when 'true' ->
							    ( apply 'recv$^0'/0
								  ()
							      -| ['dialyzer_ignore'] )
							-| ['dialyzer_ignore'] )
						    end
					    -| ['dialyzer_ignore'] )
					end
			in  ( apply 'recv$^0'/0
				  ()
			      -| ['dialyzer_ignore'] )
			-| ['letrec_goto'] )
      -| [{'function',{'req',2}}] )
'einval'/2 =
    %% Line 1250
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <{'error',{'file_error',_4,'einval'}},A> when 'true' ->
		  %% Line 1251
		  call 'erlang':'error'
		      ('badarg', A)
	      %% Line 1252
	      <{'error',{'file_error',_5,'badarg'}},A> when 'true' ->
		  %% Line 1253
		  call 'erlang':'error'
		      ('badarg', A)
	      %% Line 1254
	      <Reply,_X_A> when 'true' ->
		  %% Line 1255
		  Reply
	    end
	    -| [{'function',{'einval',2}}] )
      -| [{'function',{'einval',2}}] )
'badarg'/2 =
    %% Line 1258
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <'badarg',A> when 'true' ->
		  %% Line 1259
		  call 'erlang':'error'
		      ('badarg', A)
	      %% Line 1260
	      <Reply,_X_A> when 'true' ->
		  %% Line 1261
		  Reply
	    end
	    -| [{'function',{'badarg',2}}] )
      -| [{'function',{'badarg',2}}] )
'undefined'/1 =
    %% Line 1264
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'undefined',1}}] ) of
	      <'badarg'> when 'true' ->
		  %% Line 1265
		  'undefined'
	      %% Line 1266
	      <Reply> when 'true' ->
		  %% Line 1267
		  Reply
	    end
	    -| [{'function',{'undefined',1}}] )
      -| [{'function',{'undefined',1}}] )
'badarg_exit'/2 =
    %% Line 1270
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <'badarg',A> when 'true' ->
		  %% Line 1271
		  call 'erlang':'error'
		      ('badarg', A)
	      %% Line 1272
	      <{'ok',Reply},_X_A> when 'true' ->
		  %% Line 1273
		  Reply
	      %% Line 1274
	      <Reply,_X_A> when 'true' ->
		  %% Line 1275
		  call 'erlang':'exit'
		      (Reply)
	    end
	    -| [{'function',{'badarg_exit',2}}] )
      -| [{'function',{'badarg_exit',2}}] )
'init'/2 =
    %% Line 1281
    ( fun (_0,_1) ->
	  do  %% Line 1282
	      call 'erlang':'process_flag'
		  ('trap_exit', 'true')
	      ( letrec
		    'recv$^0'/0 =
			fun () ->
			    let <_13,_11> =
				primop 'recv_peek_message'
				    ()
			    in  case _13 of
				  <'true'> when 'true' ->
				      %% Line 1288
				      case _11 of
					%% Line 1289
					<{'$dets_call',From,Op = {'internal_open',Ref,Args}}> when 'true' ->
					    do  primop 'remove_message'
						    ()
						%% Line 1290
						try
						    apply 'do_internal_open'/5
							(_0, _1, From, Ref, Args)
						of <_2> ->
						    %% Line 1292
						    apply 'open_file_loop'/2
							(_2, 0)
						catch <_6,_5,_4> ->
						    %% Line 1294
						    case <_6,_5,_4> of
						      <( 'exit'
							 -| ['compiler_generated'] ),( 'normal'
										       -| ['compiler_generated'] ),_9> when 'true' ->
							  %% Line 1295
							  call 'erlang':'exit'
							      ('normal')
						      %% Line 1296
						      <_10,Bad,_15> when 'true' ->
							  let <Stacktrace> =
							      primop 'build_stacktrace'
								  (_15)
							  in  do  %% Line 1297
								  apply 'bug_found'/5
								      ('no_name', Op, Bad, Stacktrace, From)
								  %% Line 1298
								  call 'erlang':'exit'
								      (Bad)
						    end
					( <Other> when 'true' ->
					      do  primop 'recv_next'
						      ()
						  ( apply 'recv$^0'/0
							()
						    -| ['dialyzer_ignore'] )
					  -| ['compiler_generated','dialyzer_ignore'] )
				      end
				  ( <'false'> when 'true' ->
					let <_12> =
					    primop 'recv_wait_timeout'
						('infinity')
					in  case _12 of
					      <'true'> when 'true' ->
						  do  primop 'timeout'
							  ()
						      'true'
					      ( <'false'> when 'true' ->
						    ( apply 'recv$^0'/0
							  ()
						      -| ['dialyzer_ignore'] )
						-| ['dialyzer_ignore'] )
					    end
				    -| ['dialyzer_ignore'] )
				end
		in  ( apply 'recv$^0'/0
			  ()
		      -| ['dialyzer_ignore'] )
		-| ['letrec_goto'] )
      -| [{'function',{'init',2}}] )
'open_file_loop'/2 =
    %% Line 1302
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Head = {'head',_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56},N>
		  when ( try
			  let <_6> =
			      call 'erlang':'element'
				  (16, Head)
			  in  let <_7> =
				  call 'erlang':'element'
				      (1, _6)
			      in  let <_8> =
				      call 'erlang':'=:='
					  (_7, 'error')
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (( 'true'
					       -| ['compiler_generated'] ), _8)
					-| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 1303
		  apply 'open_file_loop2'/2
		      (Head, N)
	      %% Line 1304
	      <Head,N> when 'true' ->
		  ( letrec
			'recv$^0'/0 =
			    fun () ->
				let <_88,_86> =
				    primop 'recv_peek_message'
					()
				in  case _88 of
				      <'true'> when 'true' ->
					  %% Line 1305
					  case _86 of
					    %% Line 1314
					    <{'$dets_call',From,Op = {'match_init',_X_State,_X_Safe}}> when 'true' ->
						do  primop 'remove_message'
							()
						    %% Line 1315
						    apply 'do_apply_op'/4
							(Op, From, Head, N)
					    %% Line 1316
					    <{'$dets_call',From,Op = {'bchunk',_X_State}}> when 'true' ->
						do  primop 'remove_message'
							()
						    %% Line 1317
						    apply 'do_apply_op'/4
							(Op, From, Head, N)
					    %% Line 1318
					    <{'$dets_call',From,Op = {'next',_X_Key}}> when 'true' ->
						do  primop 'remove_message'
							()
						    %% Line 1319
						    apply 'do_apply_op'/4
							(Op, From, Head, N)
					    %% Line 1320
					    <{'$dets_call',From,Op = {'match_delete_init',_X_MP,_X_Spec}}> when 'true' ->
						do  primop 'remove_message'
							()
						    %% Line 1321
						    apply 'do_apply_op'/4
							(Op, From, Head, N)
					    %% Line 1322
					    <{'EXIT',Pid,Reason}>
						when ( try
							( let <_11> =
							      case ( call ( 'erlang'
									    -| ['compiler_generated'] ):( 'is_record'
													  -| ['compiler_generated'] )
									 (Head, ( 'head'
										  -| ['compiler_generated'] ), ( 30
														 -| ['compiler_generated'] ))
								     -| ['compiler_generated'] ) of
								( <( 'true'
								     -| ['compiler_generated'] )> when 'true' ->
								      ( 'true'
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
								( <( 'false'
								     -| ['compiler_generated'] )> when 'true' ->
								      ( 'fail'
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
								( <( _9
								     -| ['compiler_generated'] )> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {( 'badarg'
										  -| ['compiler_generated'] ),( _9
														-| ['compiler_generated'] )}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							  in  let <_12> =
								  call 'erlang':'=:='
								      (( _11
									 -| ['compiler_generated'] ), 'true')
							      in  let <_13> =
								      call 'erlang':'element'
									  (27, Head)
								  in  let <_14> =
									  call 'erlang':'=:='
									      (Pid, _13)
								      in  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'and'
														 -| ['compiler_generated'] )
										(_12, _14)
									    -| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						    of <Try> ->
							Try
						    catch <T,R> ->
							'false'
						    -| ['compiler_generated'] ) ->
						do  primop 'remove_message'
							()
						    do  %% Line 1324
							apply 'do_stop'/1
							    (Head)
							%% Line 1325
							call 'erlang':'exit'
							    (Reason)
					    %% Line 1326
					    <{'EXIT',Pid,Reason}>
						when ( try
							( let <_18> =
							      case ( call ( 'erlang'
									    -| ['compiler_generated'] ):( 'is_record'
													  -| ['compiler_generated'] )
									 (Head, ( 'head'
										  -| ['compiler_generated'] ), ( 30
														 -| ['compiler_generated'] ))
								     -| ['compiler_generated'] ) of
								( <( 'true'
								     -| ['compiler_generated'] )> when 'true' ->
								      ( 'true'
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
								( <( 'false'
								     -| ['compiler_generated'] )> when 'true' ->
								      ( 'fail'
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
								( <( _16
								     -| ['compiler_generated'] )> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {( 'badarg'
										  -| ['compiler_generated'] ),( _16
														-| ['compiler_generated'] )}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							  in  let <_19> =
								  call 'erlang':'=:='
								      (( _18
									 -| ['compiler_generated'] ), 'true')
							      in  let <_20> =
								      call 'erlang':'element'
									  (28, Head)
								  in  let <_21> =
									  call 'erlang':'=:='
									      (Pid, _20)
								      in  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'and'
														 -| ['compiler_generated'] )
										(_19, _21)
									    -| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						    of <Try> ->
							Try
						    catch <T,R> ->
							'false'
						    -| ['compiler_generated'] ) ->
						do  primop 'remove_message'
							()
						    do  %% Line 1328
							apply 'do_stop'/1
							    (Head)
							%% Line 1329
							call 'erlang':'exit'
							    (Reason)
					    %% Line 1330
					    <{'EXIT',Pid,_X_Reason}> when 'true' ->
						do  primop 'remove_message'
							()
						    let <H2> =
							apply %% Line 1332
							      'remove_fix'/3
							    (%% Line 1332
							     Head, %% Line 1332
								   Pid, %% Line 1332
									'close')
						    in  %% Line 1333
							apply 'open_file_loop'/2
							    (H2, N)
					    %% Line 1334
					    <{'system',From,Req}> when 'true' ->
						do  primop 'remove_message'
							()
						    %% Line 1335
						    ( case Head of
							( <( {'head',_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_rec20,_82,_83,_84}
							     -| ['compiler_generated'] )> when 'true' ->
							      call 'sys':'handle_system_msg'
								  (Req, From, _rec20, %% Line 1336
										      'dets', %% Line 1336
											      [], %% Line 1336
												  Head)
							  -| ['compiler_generated'] )
							( <_85> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','head'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
					    ( <Other> when 'true' ->
						  do  primop 'recv_next'
							  ()
						      ( apply 'recv$^0'/0
							    ()
							-| ['dialyzer_ignore'] )
					      -| ['compiler_generated','dialyzer_ignore'] )
					  end
				      <'false'> when 'true' ->
					  let <_87> =
					      primop 'recv_wait_timeout'
						  (%% Line 1337
						   0)
					  in  case _87 of
						<'true'> when 'true' ->
						    do  primop 'timeout'
							    ()
							%% Line 1338
							apply 'open_file_loop2'/2
							    (Head, N)
						( <'false'> when 'true' ->
						      ( apply 'recv$^0'/0
							    ()
							-| ['dialyzer_ignore'] )
						  -| ['dialyzer_ignore'] )
					      end
				    end
		    in  ( apply 'recv$^0'/0
			      ()
			  -| ['dialyzer_ignore'] )
		    -| ['letrec_goto'] )
	    end
	    -| [{'function',{'open_file_loop',2}}] )
      -| [{'function',{'open_file_loop',2}}] )
'open_file_loop2'/2 =
    %% Line 1341
    ( fun (_0,_1) ->
	  ( letrec
		'recv$^0'/0 =
		    fun () ->
			let <_52,_50> =
			    primop 'recv_peek_message'
				()
			in  case _52 of
			      <'true'> when 'true' ->
				  %% Line 1342
				  case _50 of
				    %% Line 1343
				    <{'$dets_call',From,Op}> when 'true' ->
					do  primop 'remove_message'
						()
					    %% Line 1344
					    apply 'do_apply_op'/4
						(Op, From, _0, _1)
				    %% Line 1345
				    <{'EXIT',Pid,Reason}>
					when ( try
						( let <_4> =
						      case ( call ( 'erlang'
								    -| ['compiler_generated'] ):( 'is_record'
												  -| ['compiler_generated'] )
								 (_0, ( 'head'
									-| ['compiler_generated'] ), ( 30
												       -| ['compiler_generated'] ))
							     -| ['compiler_generated'] ) of
							( <( 'true'
							     -| ['compiler_generated'] )> when 'true' ->
							      ( 'true'
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
							( <( 'false'
							     -| ['compiler_generated'] )> when 'true' ->
							      ( 'fail'
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
							( <( _2
							     -| ['compiler_generated'] )> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {( 'badarg'
									  -| ['compiler_generated'] ),( _2
													-| ['compiler_generated'] )}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						  in  let <_5> =
							  call 'erlang':'=:='
							      (( _4
								 -| ['compiler_generated'] ), 'true')
						      in  let <_6> =
							      call 'erlang':'element'
								  (27, _0)
							  in  let <_7> =
								  call 'erlang':'=:='
								      (Pid, _6)
							      in  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'and'
													 -| ['compiler_generated'] )
									(_5, _7)
								    -| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false'
					    -| ['compiler_generated'] ) ->
					do  primop 'remove_message'
						()
					    do  %% Line 1347
						apply 'do_stop'/1
						    (_0)
						%% Line 1348
						call 'erlang':'exit'
						    (Reason)
				    %% Line 1349
				    <{'EXIT',Pid,Reason}>
					when ( try
						( let <_11> =
						      case ( call ( 'erlang'
								    -| ['compiler_generated'] ):( 'is_record'
												  -| ['compiler_generated'] )
								 (_0, ( 'head'
									-| ['compiler_generated'] ), ( 30
												       -| ['compiler_generated'] ))
							     -| ['compiler_generated'] ) of
							( <( 'true'
							     -| ['compiler_generated'] )> when 'true' ->
							      ( 'true'
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
							( <( 'false'
							     -| ['compiler_generated'] )> when 'true' ->
							      ( 'fail'
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
							( <( _9
							     -| ['compiler_generated'] )> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {( 'badarg'
									  -| ['compiler_generated'] ),( _9
													-| ['compiler_generated'] )}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						  in  let <_12> =
							  call 'erlang':'=:='
							      (( _11
								 -| ['compiler_generated'] ), 'true')
						      in  let <_13> =
							      call 'erlang':'element'
								  (28, _0)
							  in  let <_14> =
								  call 'erlang':'=:='
								      (Pid, _13)
							      in  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'and'
													 -| ['compiler_generated'] )
									(_12, _14)
								    -| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false'
					    -| ['compiler_generated'] ) ->
					do  primop 'remove_message'
						()
					    do  %% Line 1351
						apply 'do_stop'/1
						    (_0)
						%% Line 1352
						call 'erlang':'exit'
						    (Reason)
				    %% Line 1353
				    <{'EXIT',Pid,_X_Reason}> when 'true' ->
					do  primop 'remove_message'
						()
					    let <H2> =
						apply %% Line 1355
						      'remove_fix'/3
						    (_0, %% Line 1355
							 Pid, %% Line 1355
							      'close')
					    in  %% Line 1356
						apply 'open_file_loop'/2
						    (H2, _1)
				    %% Line 1357
				    <{'system',From,Req}> when 'true' ->
					do  primop 'remove_message'
						()
					    %% Line 1358
					    ( case _0 of
						( <( {'head',_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_rec21,_46,_47,_48}
						     -| ['compiler_generated'] )> when 'true' ->
						      call 'sys':'handle_system_msg'
							  (Req, From, _rec21, %% Line 1359
									      'dets', %% Line 1359
										      [], _0)
						  -| ['compiler_generated'] )
						( <_49> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','head'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
				    %% Line 1360
				    <Message> when 'true' ->
					do  primop 'remove_message'
						()
					    do  %% Line 1361
						call 'error_logger':'format'
						    ([42|[42|[32|[100|[101|[116|[115|[58|[32|[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[109|[101|[115|[115|[97|[103|[101|[40|[105|[103|[110|[111|[114|[101|[100|[41|[58|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1362
																																					    [Message|[]])
						%% Line 1363
						apply 'open_file_loop'/2
						    (_0, _1)
				  end
			      ( <'false'> when 'true' ->
				    let <_51> =
					primop 'recv_wait_timeout'
					    ('infinity')
				    in  case _51 of
					  <'true'> when 'true' ->
					      do  primop 'timeout'
						      ()
						  'true'
					  ( <'false'> when 'true' ->
						( apply 'recv$^0'/0
						      ()
						  -| ['dialyzer_ignore'] )
					    -| ['dialyzer_ignore'] )
					end
				-| ['dialyzer_ignore'] )
			    end
	    in  ( apply 'recv$^0'/0
		      ()
		  -| ['dialyzer_ignore'] )
	    -| ['letrec_goto'] )
      -| [{'function',{'open_file_loop2',2}}] )
'do_apply_op'/4 =
    %% Line 1366
    ( fun (_0,_1,_2,_3) ->
	  %% Line 1367
	  try
	      apply 'apply_op'/4
		  (_0, _1, _2, _3)
	  of <_4> ->
	      case _4 of
		%% Line 1368
		<'ok'> when 'true' ->
		    %% Line 1369
		    apply 'open_file_loop'/2
			(_2, _3)
		%% Line 1370
		<{N2,H2 = {'head',_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44}}>
		    when let <_5> =
			  call 'erlang':'is_integer'
			      (N2)
		      in  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'and'
								 -| ['compiler_generated'] )
				(( 'true'
				   -| ['compiler_generated'] ), _5)
			    -| ['compiler_generated'] ) ->
		    %% Line 1371
		    apply 'open_file_loop'/2
			(H2, N2)
		%% Line 1372
		<H2 = {'head',_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73}> when ( 'true'
																			   -| ['compiler_generated'] ) ->
		    %% Line 1373
		    apply 'open_file_loop'/2
			(H2, _3)
		%% Line 1374
		<{{'more',From1,Op1,N1},NewHead}> when 'true' ->
		    %% Line 1375
		    apply 'do_apply_op'/4
			(Op1, From1, NewHead, N1)
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'try_clause',_6})
		  -| ['compiler_generated'] )
	      end
	  catch <_9,_8,_7> ->
	      %% Line 1377
	      case <_9,_8,_7> of
		<( 'exit'
		   -| ['compiler_generated'] ),( 'normal'
						 -| ['compiler_generated'] ),_74> when 'true' ->
		    %% Line 1378
		    call 'erlang':'exit'
			('normal')
		%% Line 1379
		<_75,Bad,_105> when 'true' ->
		    %% Line 1380
		    ( case _2 of
			( <( {'head',_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_rec22,_100,_101,_102,_103}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <Stacktrace> =
				  primop 'build_stacktrace'
				      (_105)
			      in  do  apply 'bug_found'/5
					  (_rec22, _0, Bad, Stacktrace, _1)
				      %% Line 1381
				      apply 'open_file_loop'/2
					  (_2, _3)
			  -| ['compiler_generated'] )
			( <_104> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','head'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
      -| [{'function',{'do_apply_op',4}}] )
'apply_op'/4 =
    %% Line 1384
    ( fun (_0,_1,_2,_3) ->
	  %% Line 1385
	  case _0 of
	    %% Line 1386
	    <{'add_user',Tab,OpenArgs}> when 'true' ->
		%% Line 1388
		case OpenArgs of
		  <{'open_args',Fname,Type,Keypos,_213,_214,_215,Ram,_216,_217,Access,_218}> when 'true' ->
		      let <_26> =
			  case <> of
			    %% Line 1391
			    <>
				when ( try
					( let <_7> =
					      case ( call ( 'erlang'
							    -| ['compiler_generated'] ):( 'is_record'
											  -| ['compiler_generated'] )
							 (_2, ( 'head'
								-| ['compiler_generated'] ), ( 30
											       -| ['compiler_generated'] ))
						     -| ['compiler_generated'] ) of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      ( 'true'
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      ( 'fail'
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <( _5
						     -| ['compiler_generated'] )> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {( 'badarg'
								  -| ['compiler_generated'] ),( _5
												-| ['compiler_generated'] )}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					  in  let <_8> =
						  call 'erlang':'=:='
						      (( _7
							 -| ['compiler_generated'] ), 'true')
					      in  let <_9> =
						      call 'erlang':'element'
							  (26, _2)
						  in  let <_10> =
							  call 'erlang':'=:='
							      (Tab, _9)
						      in  let <_11> =
							      call ( 'erlang'
								     -| ['compiler_generated'] ):( 'and'
												   -| ['compiler_generated'] )
								  (_8, _10)
							  in  let <_12> =
								  call %% Line 1392
								       'erlang':%% Line 1392
										'element'
								      (%% Line 1392
								       11, _2)
							      in  let <_13> =
								      call %% Line 1392
									   'erlang':%% Line 1392
										    '=:='
									  (_12, %% Line 1392
										Keypos)
								  in  let <_14> =
									  call %% Line 1393
									       'erlang':%% Line 1393
											'element'
									      (%% Line 1393
									       10, _2)
								      in  let <_15> =
									      call %% Line 1393
										   'erlang':%% Line 1393
											    '=:='
										  (_14, %% Line 1393
											Type)
									  in  let <_16> =
										  call %% Line 1394
										       'erlang':%% Line 1394
												'element'
										      (%% Line 1394
										       25, _2)
									      in  let <_17> =
										      call %% Line 1394
											   'erlang':%% Line 1394
												    '=:='
											  (_16, %% Line 1394
												Ram)
										  in  let <_18> =
											  call %% Line 1395
											       'erlang':%% Line 1395
													'element'
											      (%% Line 1395
											       24, _2)
										      in  let <_19> =
											      call %% Line 1395
												   'erlang':%% Line 1395
													    '=:='
												  (_18, %% Line 1395
													Access)
											  in  let <_20> =
												  call %% Line 1396
												       'erlang':%% Line 1396
														'element'
												      (%% Line 1396
												       23, _2)
											      in  let <_21> =
												      call %% Line 1396
													   'erlang':%% Line 1396
														    '=:='
													  (%% Line 1396
													   Fname, _20)
												  in  let <_22> =
													  call ( 'erlang'
														 -| ['compiler_generated'] ):( 'and'
																	       -| ['compiler_generated'] )
													      (_19, _21)
												      in  let <_23> =
													      call ( 'erlang'
														     -| ['compiler_generated'] ):( 'and'
																		   -| ['compiler_generated'] )
														  (_17, _22)
													  in  let <_24> =
														  call ( 'erlang'
															 -| ['compiler_generated'] ):( 'and'
																		       -| ['compiler_generated'] )
														      (_15, _23)
													      in  let <_25> =
														      call ( 'erlang'
															     -| ['compiler_generated'] ):( 'and'
																			   -| ['compiler_generated'] )
															  (_13, _24)
														  in  ( call ( 'erlang'
															       -| ['compiler_generated'] ):( 'and'
																			     -| ['compiler_generated'] )
															    (_11, _25)
															-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false'
				    -| ['compiler_generated'] ) ->
				%% Line 1397
				'ok'
			    %% Line 1398
			    <> when 'true' ->
				%% Line 1399
				apply 'err'/1
				    ({'error','incompatible_arguments'})
			  end
		      in  let <_28> =
			      call %% Line 1401
				   'erlang':%% Line 1401
					    'self'
				  ()
			  in  do  %% Line 1401
				  call 'erlang':'!'
				      (_1, {_28,_26})
				  %% Line 1402
				  'ok'
		  ( <_4> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_4})
		    -| ['compiler_generated'] )
		end
	    %% Line 1403
	    <'auto_save'> when 'true' ->
		%% Line 1404
		( case _2 of
		    ( <( {'head',_219,_220,_221,_222,_223,_224,_225,_226,_227,_228,_229,_230,_231,_232,_rec23,_233,_234,_235,_236,_237,_238,_239,_240,_241,_242,_243,_244,_245,_246}
			 -| ['compiler_generated'] )> when 'true' ->
			  case _rec23 of
			    %% Line 1405
			    <'saved'> when 'true' ->
				_2
			    %% Line 1407
			    <{'error',_X_Reason}> when 'true' ->
				_2
			    %% Line 1409
			    <_X_Dirty>
				when call 'erlang':'=:='
				      (_3,
				       0) ->
				%% Line 1412
				( case _2 of
				    ( <( {'head',_248,_249,_250,_251,_252,_253,_254,_255,_256,_257,_258,_259,_260,_261,_262,_263,_264,_265,_266,_267,_268,_269,_270,_271,_rec24,_272,_273,_274,_275}
					 -| ['compiler_generated'] )> when 'true' ->
					  do  call 'dets_utils':'vformat'
						  ([42|[42|[32|[100|[101|[116|[115|[58|[32|[65|[117|[116|[111|[32|[115|[97|[118|[101|[32|[111|[102|[32|[126|[116|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]], [_rec24|[]])
					      %% Line 1413
					      case apply 'perform_save'/2
						       (_2, 'true') of
						<{NewHead,_X_Res}> when 'true' ->
						    do  %% Line 1414
							call 'erlang':'garbage_collect'
							    ()
							%% Line 1415
							{0,NewHead}
						( <_33> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_33})
						  -| ['compiler_generated'] )
					      end
				      -| ['compiler_generated'] )
				    ( <_276> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','head'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 1416
			    <'dirty'> when 'true' ->
				do  %% Line 1418
				    apply 'start_auto_save_timer'/1
					(_2)
				    %% Line 1419
				    {0,_2}
			    ( <_34> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_34})
			      -| ['compiler_generated'] )
			  end
		      -| ['compiler_generated'] )
		    ( <_247> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','head'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
	    %% Line 1421
	    <'close'> when 'true' ->
		let <_36> =
		    call %% Line 1422
			 'erlang':%% Line 1422
				  'self'
			()
		in  let <_35> =
			apply %% Line 1422
			      'fclose'/1
			    (_2)
		    in  do  %% Line 1422
			    call 'erlang':'!'
				(_1, {_36,_35})
			    do  %% Line 1423
				apply 'unlink_fixing_procs'/1
				    (_2)
				%% Line 1425
				call 'erlang':'exit'
				    ('normal')
	    %% Line 1426
	    <{'close',Pid}> when 'true' ->
		let <NewHead> =
		    apply %% Line 1429
			  'remove_fix'/3
			(_2, %% Line 1429
			     Pid, %% Line 1429
				  'close')
		in  let <_40> =
			call %% Line 1430
			     'erlang':%% Line 1430
				      'self'
			    ()
		    in  let <_39> =
			    apply %% Line 1430
				  'status'/1
				(%% Line 1430
				 NewHead)
			in  do  %% Line 1430
				call 'erlang':'!'
				    (_1, {_40,_39})
				%% Line 1431
				NewHead
	    %% Line 1432
	    <{'corrupt',Reason}> when 'true' ->
		%% Line 1433
		case call 'dets_utils':'corrupt_reason'
			 (_2, Reason) of
		  <{H2,Error}> when 'true' ->
		      let <_42> =
			  call %% Line 1434
			       'erlang':%% Line 1434
					'self'
			      ()
		      in  do  %% Line 1434
			      call 'erlang':'!'
				  (_1, {_42,Error})
			      %% Line 1435
			      H2
		  ( <_41> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_41})
		    -| ['compiler_generated'] )
		end
	    %% Line 1436
	    <{'delayed_write',WrTime}> when 'true' ->
		%% Line 1437
		apply 'delayed_write'/2
		    (_2, WrTime)
	    %% Line 1438
	    <'info'> when 'true' ->
		%% Line 1439
		case apply 'finfo'/1
			 (_2) of
		  <{H2,Res}> when 'true' ->
		      let <_44> =
			  call %% Line 1440
			       'erlang':%% Line 1440
					'self'
			      ()
		      in  do  %% Line 1440
			      call 'erlang':'!'
				  (_1, {_44,Res})
			      %% Line 1441
			      H2
		  ( <_43> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_43})
		    -| ['compiler_generated'] )
		end
	    %% Line 1442
	    <{'info',Tag}> when 'true' ->
		%% Line 1443
		case apply 'finfo'/2
			 (_2, Tag) of
		  <{H2,Res}> when 'true' ->
		      let <_46> =
			  call %% Line 1444
			       'erlang':%% Line 1444
					'self'
			      ()
		      in  do  %% Line 1444
			      call 'erlang':'!'
				  (_1, {_46,Res})
			      %% Line 1445
			      H2
		  ( <_45> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_45})
		    -| ['compiler_generated'] )
		end
	    %% Line 1446
	    <{'is_compatible_bchunk_format',Term}> when 'true' ->
		let <Res> =
		    apply %% Line 1447
			  'test_bchunk_format'/2
			(_2, %% Line 1447
			     Term)
		in  let <_48> =
			call %% Line 1448
			     'erlang':%% Line 1448
				      'self'
			    ()
		    in  do  %% Line 1448
			    call 'erlang':'!'
				(_1, {_48,Res})
			    %% Line 1449
			    'ok'
	    %% Line 1450
	    <{'internal_open',Ref,Args}> when 'true' ->
		%% Line 1451
		( case _2 of
		    ( <( {'head',_277,_278,_279,_280,_281,_282,_283,_284,_285,_286,_287,_288,_289,_290,_291,_292,_293,_294,_295,_296,_297,_298,_299,_300,_301,_rec25,_302,_303,_304}
			 -| ['compiler_generated'] )> when 'true' ->
			  ( case _2 of
			      ( <( {'head',_306,_307,_308,_309,_310,_311,_312,_313,_314,_315,_316,_317,_318,_319,_320,_321,_322,_323,_324,_325,_326,_327,_328,_329,_330,_331,_rec26,_332,_333}
				   -| ['compiler_generated'] )> when 'true' ->
				    apply 'do_internal_open'/5
					(_rec25, _rec26, _1, %% Line 1452
							     Ref, %% Line 1452
								  Args)
				-| ['compiler_generated'] )
			      ( <_334> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','head'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		    ( <_305> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','head'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
	    %% Line 1453
	    <'may_grow'>
		when ( try
			( let <_55> =
			      case ( call ( 'erlang'
					    -| ['compiler_generated'] ):( 'is_record'
									  -| ['compiler_generated'] )
					 (_2, ( 'head'
						-| ['compiler_generated'] ), ( 30
									       -| ['compiler_generated'] ))
				     -| ['compiler_generated'] ) of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'true'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'fail'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( _53
				     -| ['compiler_generated'] )> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),( _53
										-| ['compiler_generated'] )}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  let <_56> =
				  call 'erlang':'=:='
				      (( _55
					 -| ['compiler_generated'] ), 'true')
			      in  let <_57> =
				      call 'erlang':'element'
					  (16, _2)
				  in  let <_58> =
					  call 'erlang':'=/='
					      (_57, 'saved')
				      in  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(_56, _58)
					    -| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		    -| ['compiler_generated'] ) ->
		%% Line 1454
		case <> of
		  %% Line 1455
		  <>
		      when ( try
			      ( let <_61> =
				    case ( call ( 'erlang'
						  -| ['compiler_generated'] ):( 'is_record'
										-| ['compiler_generated'] )
					       (_2, ( 'head'
						      -| ['compiler_generated'] ), ( 30
										     -| ['compiler_generated'] ))
					   -| ['compiler_generated'] ) of
				      ( <( 'true'
					   -| ['compiler_generated'] )> when 'true' ->
					    ( 'true'
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <( 'false'
					   -| ['compiler_generated'] )> when 'true' ->
					    ( 'fail'
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <( _59
					   -| ['compiler_generated'] )> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {( 'badarg'
							-| ['compiler_generated'] ),( _59
										      -| ['compiler_generated'] )}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				in  let <_62> =
					call 'erlang':'=:='
					    (( _61
					       -| ['compiler_generated'] ), 'true')
				    in  let <_63> =
					    call 'erlang':'element'
						(16, _2)
					in  let <_64> =
						call 'erlang':'=:='
						    (_63, 'dirty')
					    in  ( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'and'
										       -| ['compiler_generated'] )
						      (_62, _64)
						  -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false'
			  -| ['compiler_generated'] ) ->
		      %% Line 1457
		      case %% Line 1458
			   call 'dets_v9':'may_grow'
			       (_2, 0, 'many_times') of
			<{H2,_X_Res}> when 'true' ->
			    let <_66> =
				call %% Line 1459
				     'erlang':%% Line 1459
					      '+'
				    (_3, %% Line 1459
					 1)
			    in  %% Line 1459
				{_66,H2}
			( <_65> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_65})
			  -| ['compiler_generated'] )
		      end
		  %% Line 1460
		  <> when 'true' ->
		      %% Line 1461
		      'ok'
		end
	    %% Line 1463
	    <{'set_verbose',What}> when 'true' ->
		do  %% Line 1464
		    apply 'set_verbose'/1
			(What)
		    let <_67> =
			call %% Line 1465
			     'erlang':%% Line 1465
				      'self'
			    ()
		    in  do  %% Line 1465
			    call 'erlang':'!'
				(_1, {_67,'ok'})
			    %% Line 1466
			    'ok'
	    %% Line 1467
	    <{'where',Object}> when 'true' ->
		%% Line 1468
		case apply 'where_is_object'/2
			 (_2, Object) of
		  <{H2,Res}> when 'true' ->
		      let <_69> =
			  call %% Line 1469
			       'erlang':%% Line 1469
					'self'
			      ()
		      in  do  %% Line 1469
			      call 'erlang':'!'
				  (_1, {_69,Res})
			      %% Line 1470
			      H2
		  ( <_68> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_68})
		    -| ['compiler_generated'] )
		end
	    %% Line 1471
	    <_X_Message>
		when ( try
			( let <_72> =
			      case ( call ( 'erlang'
					    -| ['compiler_generated'] ):( 'is_record'
									  -| ['compiler_generated'] )
					 (_2, ( 'head'
						-| ['compiler_generated'] ), ( 30
									       -| ['compiler_generated'] ))
				     -| ['compiler_generated'] ) of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'true'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'fail'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( _70
				     -| ['compiler_generated'] )> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),( _70
										-| ['compiler_generated'] )}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  let <_73> =
				  call 'erlang':'=:='
				      (( _72
					 -| ['compiler_generated'] ), 'true')
			      in  let <_74> =
				      call 'erlang':'element'
					  (16, _2)
				  in  let <_75> =
					  call 'erlang':'element'
					      (1, _74)
				      in  let <_76> =
					      call 'erlang':'=:='
						  (_75, 'error')
					  in  ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_73, _76)
						-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		    -| ['compiler_generated'] ) ->
		let <_78> =
		    call %% Line 1472
			 'erlang':%% Line 1472
				  'self'
			()
		in  let <_77> =
			apply %% Line 1472
			      'status'/1
			    (_2)
		    in  do  %% Line 1472
			    call 'erlang':'!'
				(_1, {_78,_77})
			    %% Line 1473
			    'ok'
	    %% Line 1475
	    <{'bchunk_init',Tab}> when 'true' ->
		%% Line 1476
		case apply 'do_bchunk_init'/2
			 (_2, Tab) of
		  <{H2,Res}> when 'true' ->
		      let <_80> =
			  call %% Line 1477
			       'erlang':%% Line 1477
					'self'
			      ()
		      in  do  %% Line 1477
			      call 'erlang':'!'
				  (_1, {_80,Res})
			      %% Line 1478
			      H2
		  ( <_79> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_79})
		    -| ['compiler_generated'] )
		end
	    %% Line 1479
	    <{'bchunk',State}> when 'true' ->
		%% Line 1480
		case apply 'do_bchunk'/2
			 (_2, State) of
		  <{H2,Res}> when 'true' ->
		      let <_82> =
			  call %% Line 1481
			       'erlang':%% Line 1481
					'self'
			      ()
		      in  do  %% Line 1481
			      call 'erlang':'!'
				  (_1, {_82,Res})
			      %% Line 1482
			      H2
		  ( <_81> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_81})
		    -| ['compiler_generated'] )
		end
	    %% Line 1483
	    <'delete_all_objects'> when 'true' ->
		%% Line 1484
		case apply 'fdelete_all_objects'/1
			 (_2) of
		  <{H2,Res}> when 'true' ->
		      let <_84> =
			  call %% Line 1485
			       'erlang':%% Line 1485
					'self'
			      ()
		      in  do  %% Line 1485
			      call 'erlang':'!'
				  (_1, {_84,Res})
			      do  %% Line 1486
				  call 'erlang':'garbage_collect'
				      ()
				  %% Line 1487
				  {0,H2}
		  ( <_83> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_83})
		    -| ['compiler_generated'] )
		end
	    %% Line 1488
	    <{'delete_key',_X_Keys}>
		when ( try
			( let <_87> =
			      case ( call ( 'erlang'
					    -| ['compiler_generated'] ):( 'is_record'
									  -| ['compiler_generated'] )
					 (_2, ( 'head'
						-| ['compiler_generated'] ), ( 30
									       -| ['compiler_generated'] ))
				     -| ['compiler_generated'] ) of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'true'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'fail'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( _85
				     -| ['compiler_generated'] )> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),( _85
										-| ['compiler_generated'] )}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  let <_88> =
				  call 'erlang':'=:='
				      (( _87
					 -| ['compiler_generated'] ), 'true')
			      in  let <_89> =
				      call 'erlang':'element'
					  (16, _2)
				  in  let <_90> =
					  call 'erlang':'=:='
					      (_89, 'dirty')
				      in  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(_88, _90)
					    -| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		    -| ['compiler_generated'] ) ->
		%% Line 1489
		apply 'stream_op'/5
		    (_0, _1, [], _2, _3)
	    %% Line 1490
	    <{'delete_object',Objs}>
		when ( try
			( let <_93> =
			      case ( call ( 'erlang'
					    -| ['compiler_generated'] ):( 'is_record'
									  -| ['compiler_generated'] )
					 (_2, ( 'head'
						-| ['compiler_generated'] ), ( 30
									       -| ['compiler_generated'] ))
				     -| ['compiler_generated'] ) of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'true'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'fail'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( _91
				     -| ['compiler_generated'] )> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),( _91
										-| ['compiler_generated'] )}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  let <_94> =
				  call 'erlang':'=:='
				      (( _93
					 -| ['compiler_generated'] ), 'true')
			      in  let <_95> =
				      call 'erlang':'element'
					  (16, _2)
				  in  let <_96> =
					  call 'erlang':'=:='
					      (_95, 'dirty')
				      in  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(_94, _96)
					    -| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		    -| ['compiler_generated'] ) ->
		%% Line 1491
		( case _2 of
		    ( <( {'head',_335,_336,_337,_338,_339,_340,_341,_342,_343,_rec27,_344,_345,_346,_347,_348,_349,_350,_351,_352,_353,_354,_355,_356,_357,_358,_359,_360,_361,_362}
			 -| ['compiler_generated'] )> when 'true' ->
			  case apply 'check_objects'/2
				   (Objs, _rec27) of
			    %% Line 1492
			    <'true'> when 'true' ->
				%% Line 1493
				apply 'stream_op'/5
				    (_0, _1, [], _2, _3)
			    %% Line 1494
			    <'false'> when 'true' ->
				let <_99> =
				    call %% Line 1495
					 'erlang':%% Line 1495
						  'self'
					()
				in  do  %% Line 1495
					call 'erlang':'!'
					    (_1, {_99,'badarg'})
					%% Line 1496
					'ok'
			    ( <_100> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_100})
			      -| ['compiler_generated'] )
			  end
		      -| ['compiler_generated'] )
		    ( <_363> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','head'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
	    %% Line 1498
	    <'first'> when 'true' ->
		%% Line 1499
		case apply 'ffirst'/1
			 (_2) of
		  <{H2,Res}> when 'true' ->
		      let <_102> =
			  call %% Line 1500
			       'erlang':%% Line 1500
					'self'
			      ()
		      in  do  %% Line 1500
			      call 'erlang':'!'
				  (_1, {_102,Res})
			      %% Line 1501
			      H2
		  ( <_101> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_101})
		    -| ['compiler_generated'] )
		end
	    %% Line 1502
	    <{'initialize',InitFun,Format,MinNoSlots}> when 'true' ->
		%% Line 1503
		case apply 'finit'/4
			 (_2, InitFun, Format, MinNoSlots) of
		  <{H2,Res}> when 'true' ->
		      let <_104> =
			  call %% Line 1504
			       'erlang':%% Line 1504
					'self'
			      ()
		      in  do  %% Line 1504
			      call 'erlang':'!'
				  (_1, {_104,Res})
			      do  %% Line 1505
				  call 'erlang':'garbage_collect'
				      ()
				  %% Line 1506
				  H2
		  ( <_103> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_103})
		    -| ['compiler_generated'] )
		end
	    %% Line 1507
	    <{'insert',Objs}>
		when ( try
			( let <_107> =
			      case ( call ( 'erlang'
					    -| ['compiler_generated'] ):( 'is_record'
									  -| ['compiler_generated'] )
					 (_2, ( 'head'
						-| ['compiler_generated'] ), ( 30
									       -| ['compiler_generated'] ))
				     -| ['compiler_generated'] ) of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'true'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'fail'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( _105
				     -| ['compiler_generated'] )> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),( _105
										-| ['compiler_generated'] )}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  let <_108> =
				  call 'erlang':'=:='
				      (( _107
					 -| ['compiler_generated'] ), 'true')
			      in  let <_109> =
				      call 'erlang':'element'
					  (16, _2)
				  in  let <_110> =
					  call 'erlang':'=:='
					      (_109, 'dirty')
				      in  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(_108, _110)
					    -| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		    -| ['compiler_generated'] ) ->
		%% Line 1508
		( case _2 of
		    ( <( {'head',_364,_365,_366,_367,_368,_369,_370,_371,_372,_rec28,_373,_374,_375,_376,_377,_378,_379,_380,_381,_382,_383,_384,_385,_386,_387,_388,_389,_390,_391}
			 -| ['compiler_generated'] )> when 'true' ->
			  case apply 'check_objects'/2
				   (Objs, _rec28) of
			    %% Line 1509
			    <'true'> when 'true' ->
				%% Line 1510
				apply 'stream_op'/5
				    (_0, _1, [], _2, _3)
			    %% Line 1511
			    <'false'> when 'true' ->
				let <_113> =
				    call %% Line 1512
					 'erlang':%% Line 1512
						  'self'
					()
				in  do  %% Line 1512
					call 'erlang':'!'
					    (_1, {_113,'badarg'})
					%% Line 1513
					'ok'
			    ( <_114> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_114})
			      -| ['compiler_generated'] )
			  end
		      -| ['compiler_generated'] )
		    ( <_392> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','head'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
	    %% Line 1515
	    <{'insert_new',Objs}>
		when ( try
			( let <_117> =
			      case ( call ( 'erlang'
					    -| ['compiler_generated'] ):( 'is_record'
									  -| ['compiler_generated'] )
					 (_2, ( 'head'
						-| ['compiler_generated'] ), ( 30
									       -| ['compiler_generated'] ))
				     -| ['compiler_generated'] ) of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'true'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'fail'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( _115
				     -| ['compiler_generated'] )> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),( _115
										-| ['compiler_generated'] )}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  let <_118> =
				  call 'erlang':'=:='
				      (( _117
					 -| ['compiler_generated'] ), 'true')
			      in  let <_119> =
				      call 'erlang':'element'
					  (16, _2)
				  in  let <_120> =
					  call 'erlang':'=:='
					      (_119, 'dirty')
				      in  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(_118, _120)
					    -| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		    -| ['compiler_generated'] ) ->
		%% Line 1516
		case apply 'finsert_new'/2
			 (_2, Objs) of
		  <{H2,Res}> when 'true' ->
		      let <_122> =
			  call %% Line 1517
			       'erlang':%% Line 1517
					'self'
			      ()
		      in  do  %% Line 1517
			      call 'erlang':'!'
				  (_1, {_122,Res})
			      let <_123> =
				  call %% Line 1518
				       'erlang':%% Line 1518
						'+'
				      (_3, %% Line 1518
					   1)
			      in  %% Line 1518
				  {_123,H2}
		  ( <_121> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_121})
		    -| ['compiler_generated'] )
		end
	    %% Line 1519
	    <{'lookup_keys',_X_Keys}> when 'true' ->
		%% Line 1520
		apply 'stream_op'/5
		    (_0, _1, [], _2, _3)
	    %% Line 1521
	    <{'match_init',State,Safe}> when 'true' ->
		%% Line 1522
		case apply 'fmatch_init'/2
			 (_2, State) of
		  <{H1,Res}> when 'true' ->
		      let <_126> =
			  case %% Line 1523
			       Res of
			    %% Line 1524
			    <{'cont',_393}> when 'true' ->
				H1
			    %% Line 1525
			    <_394>
				when call 'erlang':'=:='
				      (Safe,
				       'no_safe') ->
				H1
			    %% Line 1526
			    <_395>
				when call 'erlang':'=:='
				      (Safe,
				       'safe') ->
				apply 'do_safe_fixtable'/3
				    (H1, _1, 'false')
			    ( <_125> when 'true' ->
				  %% Line 1523
				  primop 'match_fail'
				      ({'case_clause',_125})
			      -| ['compiler_generated'] )
			  end
		      in  let <_128> =
			      call %% Line 1528
				   'erlang':%% Line 1528
					    'self'
				  ()
			  in  do  %% Line 1528
				  call 'erlang':'!'
				      (_1, {_128,Res})
				  _126
		  ( <_124> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_124})
		    -| ['compiler_generated'] )
		end
	    %% Line 1530
	    <{'match',MP,Spec,NObjs,Safe}> when 'true' ->
		%% Line 1531
		case apply 'fmatch'/6
			 (_2, MP, Spec, NObjs, Safe, _1) of
		  <{H2,Res}> when 'true' ->
		      let <_130> =
			  call %% Line 1532
			       'erlang':%% Line 1532
					'self'
			      ()
		      in  do  %% Line 1532
			      call 'erlang':'!'
				  (_1, {_130,Res})
			      %% Line 1533
			      H2
		  ( <_129> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_129})
		    -| ['compiler_generated'] )
		end
	    %% Line 1534
	    <_396 = {'member',_X_Key}>
		when call 'erlang':'=:='
		      (_396,
		       _0) ->
		%% Line 1535
		apply 'stream_op'/5
		    (_0, _1, [], _2, _3)
	    %% Line 1536
	    <{'next',Key}> when 'true' ->
		%% Line 1537
		case apply 'fnext'/2
			 (_2, Key) of
		  <{H2,Res}> when 'true' ->
		      let <_132> =
			  call %% Line 1538
			       'erlang':%% Line 1538
					'self'
			      ()
		      in  do  %% Line 1538
			      call 'erlang':'!'
				  (_1, {_132,Res})
			      %% Line 1539
			      H2
		  ( <_131> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_131})
		    -| ['compiler_generated'] )
		end
	    %% Line 1540
	    <{'match_delete',State}>
		when ( try
			( let <_135> =
			      case ( call ( 'erlang'
					    -| ['compiler_generated'] ):( 'is_record'
									  -| ['compiler_generated'] )
					 (_2, ( 'head'
						-| ['compiler_generated'] ), ( 30
									       -| ['compiler_generated'] ))
				     -| ['compiler_generated'] ) of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'true'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'fail'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( _133
				     -| ['compiler_generated'] )> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),( _133
										-| ['compiler_generated'] )}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  let <_136> =
				  call 'erlang':'=:='
				      (( _135
					 -| ['compiler_generated'] ), 'true')
			      in  let <_137> =
				      call 'erlang':'element'
					  (16, _2)
				  in  let <_138> =
					  call 'erlang':'=:='
					      (_137, 'dirty')
				      in  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(_136, _138)
					    -| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		    -| ['compiler_generated'] ) ->
		%% Line 1541
		case apply 'fmatch_delete'/2
			 (_2, State) of
		  <{H1,Res}> when 'true' ->
		      let <_141> =
			  case %% Line 1542
			       Res of
			    %% Line 1543
			    <{'cont',_X_S,_X_N}> when 'true' ->
				H1
			    %% Line 1544
			    <_397> when 'true' ->
				apply 'do_safe_fixtable'/3
				    (H1, _1, 'false')
			  end
		      in  let <_143> =
			      call %% Line 1546
				   'erlang':%% Line 1546
					    'self'
				  ()
			  in  do  %% Line 1546
				  call 'erlang':'!'
				      (_1, {_143,Res})
				  let <_144> =
				      call %% Line 1547
					   'erlang':%% Line 1547
						    '+'
					  (_3, %% Line 1547
					       1)
				  in  %% Line 1547
				      {_144,_141}
		  ( <_139> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_139})
		    -| ['compiler_generated'] )
		end
	    %% Line 1548
	    <{'match_delete_init',MP,Spec}>
		when ( try
			( let <_147> =
			      case ( call ( 'erlang'
					    -| ['compiler_generated'] ):( 'is_record'
									  -| ['compiler_generated'] )
					 (_2, ( 'head'
						-| ['compiler_generated'] ), ( 30
									       -| ['compiler_generated'] ))
				     -| ['compiler_generated'] ) of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'true'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'fail'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( _145
				     -| ['compiler_generated'] )> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),( _145
										-| ['compiler_generated'] )}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  let <_148> =
				  call 'erlang':'=:='
				      (( _147
					 -| ['compiler_generated'] ), 'true')
			      in  let <_149> =
				      call 'erlang':'element'
					  (16, _2)
				  in  let <_150> =
					  call 'erlang':'=:='
					      (_149, 'dirty')
				      in  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(_148, _150)
					    -| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		    -| ['compiler_generated'] ) ->
		%% Line 1549
		case apply 'fmatch_delete_init'/4
			 (_2, MP, Spec, _1) of
		  <{H2,Res}> when 'true' ->
		      let <_152> =
			  call %% Line 1550
			       'erlang':%% Line 1550
					'self'
			      ()
		      in  do  %% Line 1550
			      call 'erlang':'!'
				  (_1, {_152,Res})
			      let <_153> =
				  call %% Line 1551
				       'erlang':%% Line 1551
						'+'
				      (_3, %% Line 1551
					   1)
			      in  %% Line 1551
				  {_153,H2}
		  ( <_151> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_151})
		    -| ['compiler_generated'] )
		end
	    %% Line 1552
	    <{'safe_fixtable',Bool}> when 'true' ->
		let <NewHead> =
		    apply %% Line 1553
			  'do_safe_fixtable'/3
			(_2, _1, %% Line 1553
				 Bool)
		in  let <_155> =
			call %% Line 1554
			     'erlang':%% Line 1554
				      'self'
			    ()
		    in  do  %% Line 1554
			    call 'erlang':'!'
				(_1, {_155,'ok'})
			    %% Line 1555
			    NewHead
	    %% Line 1556
	    <{'slot',Slot}> when 'true' ->
		%% Line 1557
		case apply 'fslot'/2
			 (_2, Slot) of
		  <{H2,Res}> when 'true' ->
		      let <_157> =
			  call %% Line 1558
			       'erlang':%% Line 1558
					'self'
			      ()
		      in  do  %% Line 1558
			      call 'erlang':'!'
				  (_1, {_157,Res})
			      %% Line 1559
			      H2
		  ( <_156> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_156})
		    -| ['compiler_generated'] )
		end
	    %% Line 1560
	    <'sync'> when 'true' ->
		%% Line 1561
		case apply 'perform_save'/2
			 (_2, 'true') of
		  <{NewHead,Res}> when 'true' ->
		      let <_159> =
			  call %% Line 1562
			       'erlang':%% Line 1562
					'self'
			      ()
		      in  do  %% Line 1562
			      call 'erlang':'!'
				  (_1, {_159,Res})
			      do  %% Line 1563
				  call 'erlang':'garbage_collect'
				      ()
				  %% Line 1564
				  {0,NewHead}
		  ( <_158> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_158})
		    -| ['compiler_generated'] )
		end
	    %% Line 1565
	    <{'update_counter',Key,Incr}>
		when ( try
			( let <_162> =
			      case ( call ( 'erlang'
					    -| ['compiler_generated'] ):( 'is_record'
									  -| ['compiler_generated'] )
					 (_2, ( 'head'
						-| ['compiler_generated'] ), ( 30
									       -| ['compiler_generated'] ))
				     -| ['compiler_generated'] ) of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'true'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'fail'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( _160
				     -| ['compiler_generated'] )> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),( _160
										-| ['compiler_generated'] )}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  let <_163> =
				  call 'erlang':'=:='
				      (( _162
					 -| ['compiler_generated'] ), 'true')
			      in  let <_164> =
				      call 'erlang':'element'
					  (16, _2)
				  in  let <_165> =
					  call 'erlang':'=:='
					      (_164, 'dirty')
				      in  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(_163, _165)
					    -| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		    -| ['compiler_generated'] ) ->
		%% Line 1566
		case apply 'do_update_counter'/3
			 (_2, Key, Incr) of
		  <{NewHead,Res}> when 'true' ->
		      let <_167> =
			  call %% Line 1567
			       'erlang':%% Line 1567
					'self'
			      ()
		      in  do  %% Line 1567
			      call 'erlang':'!'
				  (_1, {_167,Res})
			      let <_168> =
				  call %% Line 1568
				       'erlang':%% Line 1568
						'+'
				      (_3, %% Line 1568
					   1)
			      in  %% Line 1568
				  {_168,NewHead}
		  ( <_166> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_166})
		    -| ['compiler_generated'] )
		end
	    %% Line 1569
	    <WriteOp>
		when ( try
			( let <_171> =
			      case ( call ( 'erlang'
					    -| ['compiler_generated'] ):( 'is_record'
									  -| ['compiler_generated'] )
					 (_2, ( 'head'
						-| ['compiler_generated'] ), ( 30
									       -| ['compiler_generated'] ))
				     -| ['compiler_generated'] ) of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'true'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'fail'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( _169
				     -| ['compiler_generated'] )> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),( _169
										-| ['compiler_generated'] )}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  let <_172> =
				  call 'erlang':'=:='
				      (( _171
					 -| ['compiler_generated'] ), 'true')
			      in  let <_173> =
				      call 'erlang':'element'
					  (16, _2)
				  in  let <_174> =
					  call 'erlang':'=:='
					      (_173, 'new_dirty')
				      in  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(_172, _174)
					    -| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		    -| ['compiler_generated'] ) ->
		%% Line 1570
		case _2 of
		  <{'head',_398,_399,_400,_401,_402,_403,_404,_405,_406,_407,_408,_409,_410,_411,_412,_413,_414,_415,_416,_417,_418,_419,_420,_421,_422,_423,_424,_425,_426}> when 'true' ->
		      let <_177> =
			  call 'erlang':'setelement'
			      (16, _2, 'dirty')
		      in  %% Line 1571
			  apply 'apply_op'/4
			      (WriteOp, _1, _177, 0)
		  ( <_427> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','head'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
	    %% Line 1572
	    <WriteOp>
		when ( try
			( let <_181> =
			      case ( call ( 'erlang'
					    -| ['compiler_generated'] ):( 'is_record'
									  -| ['compiler_generated'] )
					 (_2, ( 'head'
						-| ['compiler_generated'] ), ( 30
									       -| ['compiler_generated'] ))
				     -| ['compiler_generated'] ) of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'true'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'fail'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( _179
				     -| ['compiler_generated'] )> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),( _179
										-| ['compiler_generated'] )}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  let <_182> =
				  call 'erlang':'=:='
				      (( _181
					 -| ['compiler_generated'] ), 'true')
			      in  let <_183> =
				      call 'erlang':'element'
					  (24, _2)
				  in  let <_184> =
					  call 'erlang':'=:='
					      (_183, 'read_write')
				      in  let <_185> =
					      call ( 'erlang'
						     -| ['compiler_generated'] ):( 'and'
										   -| ['compiler_generated'] )
						  (_182, _184)
					  in  let <_186> =
						  call %% Line 1573
						       'erlang':%% Line 1573
								'element'
						      (%% Line 1573
						       16, _2)
					      in  let <_187> =
						      call %% Line 1573
							   'erlang':%% Line 1573
								    '=:='
							  (_186, %% Line 1573
								 'saved')
						  in  ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'and'
											     -| ['compiler_generated'] )
							    (_185, _187)
							-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		    -| ['compiler_generated'] ) ->
		let <_188> =
		    catch
			%% Line 1574
			call 'dets_v9':'mark_dirty'
			    (_2)
		in  %% Line 1574
		    case _188 of
		      %% Line 1575
		      <'ok'> when 'true' ->
			  do  %% Line 1576
			      apply 'start_auto_save_timer'/1
				  (_2)
			      %% Line 1577
			      case _2 of
				<{'head',_428,_429,_430,_431,_432,_433,_434,_435,_436,_437,_438,_439,_440,_441,_442,_443,_444,_445,_446,_447,_448,_449,_450,_451,_452,_453,_454,_455,_456}> when 'true' ->
				    let <_191> =
					call 'erlang':'setelement'
					    (16, _2, 'dirty')
				    in  %% Line 1578
					apply 'apply_op'/4
					    (WriteOp, _1, _191, 0)
				( <_457> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','head'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
		      %% Line 1579
		      <{NewHead = {'head',_458,_459,_460,_461,_462,_463,_464,_465,_466,_467,_468,_469,_470,_471,_472,_473,_474,_475,_476,_477,_478,_479,_480,_481,_482,_483,_484,_485,_486},Error}> when ( 'true'
																									   -| ['compiler_generated'] ) ->
			  let <_193> =
			      call %% Line 1580
				   'erlang':%% Line 1580
					    'self'
				  ()
			  in  do  %% Line 1580
				  call 'erlang':'!'
				      (_1, {_193,Error})
				  %% Line 1581
				  NewHead
		      ( <_194> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_194})
			-| ['compiler_generated'] )
		    end
	    %% Line 1583
	    <WriteOp>
		when try
		      let <_195> =
			  call 'erlang':'is_tuple'
			      (_0)
		      in  ( let <_198> =
				case ( call ( 'erlang'
					      -| ['compiler_generated'] ):( 'is_record'
									    -| ['compiler_generated'] )
					   (_2, ( 'head'
						  -| ['compiler_generated'] ), ( 30
										 -| ['compiler_generated'] ))
				       -| ['compiler_generated'] ) of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					( 'true'
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					( 'fail'
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <( _196
				       -| ['compiler_generated'] )> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {( 'badarg'
						    -| ['compiler_generated'] ),( _196
										  -| ['compiler_generated'] )}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			    in  let <_199> =
				    call 'erlang':'=:='
					(( _198
					   -| ['compiler_generated'] ), 'true')
				in  let <_200> =
					call 'erlang':'element'
					    (24, _2)
				    in  let <_201> =
					    call 'erlang':'=:='
						(_200, 'read')
					in  let <_202> =
						call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_199, _201)
					    in  call 'erlang':'and'
						    (_195, _202)
			    -| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false' ->
		%% Line 1584
		( case _2 of
		    ( <( {'head',_487,_488,_489,_490,_491,_492,_493,_494,_495,_496,_497,_498,_499,_500,_501,_502,_503,_504,_505,_506,_507,_rec31,_508,_509,_510,_511,_512,_513,_514}
			 -| ['compiler_generated'] )> when 'true' ->
			  let <Reason> = {'access_mode',_rec31}
			  in  let <_207> =
				  call %% Line 1585
				       'erlang':%% Line 1585
						'self'
				      ()
			      in  let <_206> =
				      apply %% Line 1585
					    'err'/1
					  (%% Line 1585
					   {'error',Reason})
				  in  do  %% Line 1585
					  call 'erlang':'!'
					      (_1, {_207,_206})
					  %% Line 1586
					  'ok'
		      -| ['compiler_generated'] )
		    ( <_515> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','head'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
	    ( <_208> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_208})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'apply_op',4}}] )
'bug_found'/5 =
    %% Line 1589
    ( fun (_0,_1,_2,_3,_4) ->
	  do  %% Line 1590
	      case call 'dets_utils':'debug_mode'
		       () of
		%% Line 1591
		<'true'> when 'true' ->
		    %% Line 1594
		    call 'error_logger':'format'
			(%% Line 1595
			 [42|[42|[32|[100|[101|[116|[115|[58|[32|[66|[117|[103|[32|[119|[97|[115|[32|[102|[111|[117|[110|[100|[32|[119|[104|[101|[110|[32|[97|[99|[99|[101|[115|[115|[105|[110|[103|[32|[116|[97|[98|[108|[101|[32|[126|[116|[119|[44|[126|[110|[42|[42|[32|[100|[101|[116|[115|[58|[32|[111|[112|[101|[114|[97|[116|[105|[111|[110|[32|[119|[97|[115|[32|[126|[116|[112|[32|[97|[110|[100|[32|[114|[101|[112|[108|[121|[32|[119|[97|[115|[32|[126|[116|[119|[46|[126|[110|[42|[42|[32|[100|[101|[116|[115|[58|[32|[83|[116|[97|[99|[107|[116|[114|[97|[99|[101|[58|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1598
																																																																																									     [_0|[_1|[_2|[_3|[]]]]])
		%% Line 1599
		<'false'> when 'true' ->
		    %% Line 1600
		    call 'error_logger':'format'
			(%% Line 1601
			 [42|[42|[32|[100|[101|[116|[115|[58|[32|[66|[117|[103|[32|[119|[97|[115|[32|[102|[111|[117|[110|[100|[32|[119|[104|[101|[110|[32|[97|[99|[99|[101|[115|[115|[105|[110|[103|[32|[116|[97|[98|[108|[101|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1602
																																					      [_0|[]])
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	      %% Line 1604
	      case <> of
		%% Line 1605
		<>
		    when try
			  let <_6> =
			      call 'erlang':'self'
				  ()
			  in  call 'erlang':'=/='
				  (_4, _6)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_7> =
			call %% Line 1606
			     'erlang':%% Line 1606
				      'self'
			    ()
		    in  do  %% Line 1606
			    call 'erlang':'!'
				(_4, {_7,{'error',{'dets_bug',_0,_1,_2}}})
			    %% Line 1607
			    'ok'
		%% Line 1608
		<> when 'true' ->
		    %% Line 1609
		    'ok'
	      end
      -| [{'function',{'bug_found',5}}] )
'do_internal_open'/5 =
    %% Line 1612
    ( fun (_0,_1,_2,_3,_4) ->
	  %% Line 1614
	  case apply 'do_open_file'/4
		   (_4, _0, _1, _3) of
	    %% Line 1615
	    <{'ok',Head}> when 'true' ->
		let <_5> =
		    call %% Line 1616
			 'erlang':%% Line 1616
				  'self'
			()
		in  do  %% Line 1616
			call 'erlang':'!'
			    (_2, {_5,'ok'})
			%% Line 1617
			Head
	    %% Line 1618
	    <Error> when 'true' ->
		let <_6> =
		    call %% Line 1619
			 'erlang':%% Line 1619
				  'self'
			()
		in  do  %% Line 1619
			call 'erlang':'!'
			    (_2, {_6,Error})
			%% Line 1620
			call 'erlang':'exit'
			    ('normal')
	  end
      -| [{'function',{'do_internal_open',5}}] )
'start_auto_save_timer'/1 =
    %% Line 1623
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'start_auto_save_timer',1}}] ) of
	      <Head = {'head',_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42}>
		  when ( try
			  let <_5> =
			      call 'erlang':'element'
				  (15, Head)
			  in  let <_6> =
				  call 'erlang':'=:='
				      (_5, 'infinity')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _6)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 1624
		  'ok'
	      %% Line 1625
	      <Head> when 'true' ->
		  %% Line 1626
		  ( case Head of
		      ( <( {'head',_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_rec32,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_11> =
				call %% Line 1627
				     'erlang':%% Line 1627
					      'self'
				    ()
			    in  let <_10> =
				    call %% Line 1627
					 'erlang':%% Line 1627
						  'self'
					()
				in  do  %% Line 1627
					call 'erlang':'send_after'
					    (_rec32, _11, {'$dets_call',_10,'auto_save'})
					%% Line 1628
					'ok'
			-| ['compiler_generated'] )
		      ( <_71> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	    end
	    -| [{'function',{'start_auto_save_timer',1}}] )
      -| [{'function',{'start_auto_save_timer',1}}] )
'stream_op'/5 =
    %% Line 1633
    ( fun (_0,_1,_2,_3,_4) ->
	  %% Line 1634
	  case _3 of
	    <{'head',_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,M,Fxd,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37}> when 'true' ->
		%% Line 1635
		apply 'stream_op'/8
		    (_3, _2, [], _4, _1, _0, Fxd, M)
	    ( <_5> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_5})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'stream_op',5}}] )
'stream_loop'/6 =
    %% Line 1637
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  ( case <_0,_1,_2,_3,_4,_5> of
	      <Head,Pids,C,N,Fxd = 'false',M> when 'true' ->
		  ( letrec
			'recv$^0'/0 =
			    fun () ->
				let <_14,_12> =
				    primop 'recv_peek_message'
					()
				in  case _14 of
				      <'true'> when 'true' ->
					  %% Line 1638
					  case _12 of
					    %% Line 1639
					    <{'$dets_call',From,Message}> when 'true' ->
						do  primop 'remove_message'
							()
						    %% Line 1640
						    apply 'stream_op'/8
							(Head, Pids, C, N, From, Message, Fxd, M)
					    ( <Other> when 'true' ->
						  do  primop 'recv_next'
							  ()
						      ( apply 'recv$^0'/0
							    ()
							-| ['dialyzer_ignore'] )
					      -| ['compiler_generated','dialyzer_ignore'] )
					  end
				      <'false'> when 'true' ->
					  let <_13> =
					      primop 'recv_wait_timeout'
						  (%% Line 1641
						   0)
					  in  case _13 of
						<'true'> when 'true' ->
						    do  primop 'timeout'
							    ()
							%% Line 1642
							apply 'stream_end'/5
							    (Head, Pids, C, N, 'no_more')
						( <'false'> when 'true' ->
						      ( apply 'recv$^0'/0
							    ()
							-| ['dialyzer_ignore'] )
						  -| ['dialyzer_ignore'] )
					      end
				    end
		    in  ( apply 'recv$^0'/0
			      ()
			  -| ['dialyzer_ignore'] )
		    -| ['letrec_goto'] )
	      %% Line 1644
	      <Head,Pids,C,N,_X_Fxd,_X_M> when 'true' ->
		  %% Line 1645
		  apply 'stream_end'/5
		      (Head, Pids, C, N, 'no_more')
	    end
	    -| [{'function',{'stream_loop',6}}] )
      -| [{'function',{'stream_loop',6}}] )
'stream_op'/8 =
    %% Line 1647
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6,_7> of
	      <Head,Pids,C,N,Pid,{'lookup_keys',Keys},Fxd,M> when 'true' ->
		  let <NC> =
		      [%% Line 1648
		       {{'lookup',Pid},Keys}|%% Line 1648
					     C]
		  in  %% Line 1649
		      apply 'stream_loop'/6
			  (Head, Pids, NC, N, Fxd, M)
	      %% Line 1650
	      <Head,Pids,C,N,Pid,Op = {'insert',_X_Objects},Fxd,M = 'dirty'> when 'true' ->
		  let <NC> =
		      [%% Line 1651
		       Op|%% Line 1651
			  C]
		  in  %% Line 1652
		      apply 'stream_loop'/6
			  (Head, [Pid|Pids], NC, N, Fxd, M)
	      %% Line 1653
	      <Head,Pids,C,N,Pid,Op = {'delete_key',_X_Keys},Fxd,M = 'dirty'> when 'true' ->
		  let <NC> =
		      [%% Line 1654
		       Op|%% Line 1654
			  C]
		  in  %% Line 1655
		      apply 'stream_loop'/6
			  (Head, [Pid|Pids], NC, N, Fxd, M)
	      %% Line 1656
	      <Head,Pids,C,N,Pid,Op = {'delete_object',_X_Os},Fxd,M = 'dirty'> when 'true' ->
		  let <NC> =
		      [%% Line 1657
		       Op|%% Line 1657
			  C]
		  in  %% Line 1658
		      apply 'stream_loop'/6
			  (Head, [Pid|Pids], NC, N, Fxd, M)
	      %% Line 1659
	      <Head,Pids,C,N,Pid,{'member',Key},Fxd,M> when 'true' ->
		  let <NC> =
		      [%% Line 1660
		       {{'lookup',[Pid|[]]},[Key|[]]}|%% Line 1660
						      C]
		  in  %% Line 1661
		      apply 'stream_loop'/6
			  (Head, Pids, NC, N, Fxd, M)
	      %% Line 1662
	      <Head,Pids,C,N,Pid,Op,_X_Fxd,_X_M> when 'true' ->
		  %% Line 1663
		  apply 'stream_end'/5
		      (Head, Pids, C, N, {Pid,Op})
	    end
	    -| [{'function',{'stream_op',8}}] )
      -| [{'function',{'stream_op',8}}] )
'stream_end'/5 =
    %% Line 1665
    ( fun (_0,_1,_2,_3,_4) ->
	  let <_6> =
	      catch
		  let <_5> =
		      call %% Line 1666
			   'lists':%% Line 1666
				   'reverse'
			  (_2)
		  in  %% Line 1666
		      apply 'update_cache'/2
			  (_0, _5)
	  in  %% Line 1666
	      case _6 of
		%% Line 1667
		<{Head1,[],PwriteList}> when 'true' ->
		    %% Line 1668
		    apply 'stream_end1'/6
			(_1, _4, _3, _2, Head1, PwriteList)
		%% Line 1669
		<{Head1,Found,PwriteList}> when 'true' ->
		    do  %% Line 1677
			apply 'lookup_replies'/1
			    (Found)
			%% Line 1678
			apply 'stream_end1'/6
			    (_1, _4, _3, _2, Head1, PwriteList)
		%% Line 1679
		<Head1 = {'head',_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51}> when ( 'true'
																			      -| ['compiler_generated'] ) ->
		    %% Line 1680
		    apply 'stream_end2'/7
			(_1, _1, _4, _3, _2, Head1, 'ok')
		%% Line 1681
		<{Head1 = {'head',_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80},Error}> when ( 'true'
																				      -| ['compiler_generated'] ) ->
		    let <Fun> =
			fun (_9,_8) ->
			    %% Line 1683
			    case <_9,_8> of
			      <{{'lookup',[Pid|[]]},_X_Keys},L> when 'true' ->
				  [Pid|L]
			      %% Line 1684
			      <{{'lookup',Pid},_X_Keys},L> when 'true' ->
				  [Pid|L]
			      %% Line 1685
			      <_81,L> when 'true' ->
				  L
			    end
		    in  let <LPs0> =
			    call %% Line 1687
				 'lists':%% Line 1687
					 'foldl'
				(%% Line 1687
				 Fun, %% Line 1687
				      [], _2)
			in  let <_14> =
				call %% Line 1688
				     'lists':%% Line 1688
					     'flatten'
				    (%% Line 1688
				     LPs0)
			    in  let <LPs> =
				    call %% Line 1688
					 'lists':%% Line 1688
						 'usort'
					(_14)
				in  let <_16> =
					call %% Line 1689
					     'erlang':%% Line 1689
						      '++'
					    (_1, %% Line 1689
						 LPs)
				    in  %% Line 1689
					apply 'stream_end2'/7
					    (_16, _1, _4, _3, _2, Head1, Error)
		%% Line 1690
		<DetsError> when 'true' ->
		    %% Line 1691
		    call 'erlang':'throw'
			(DetsError)
	      end
      -| [{'function',{'stream_end',5}}] )
'stream_end1'/6 =
    %% Line 1694
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  ( case <_0,_1,_2,_3,_4,_5> of
	      <Pids,Next,N,C,Head,[]> when 'true' ->
		  %% Line 1695
		  apply 'stream_end2'/7
		      (Pids, Pids, Next, N, C, Head, 'ok')
	      %% Line 1696
	      <Pids,Next,N,C,Head,PwriteList> when 'true' ->
		  let <_6> =
		      catch
			  %% Line 1697
			  call 'dets_utils':'pwrite'
			      (Head, PwriteList)
		  in  %% Line 1697
		      case _6 of
			<{Head1,PR}> when 'true' ->
			    %% Line 1698
			    apply 'stream_end2'/7
				(Pids, Pids, Next, N, C, Head1, PR)
			( <_7> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_7})
			  -| ['compiler_generated'] )
		      end
	    end
	    -| [{'function',{'stream_end1',6}}] )
      -| [{'function',{'stream_end1',6}}] )
'stream_end2'/7 =
    %% Line 1700
    ( fun (_0,_1,_2,_3,_4,_5,_6) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6> of
	      <[Pid|Pids],Ps,Next,N,C,Head,Reply> when 'true' ->
		  let <_7> =
		      call %% Line 1701
			   'erlang':%% Line 1701
				    'self'
			  ()
		  in  do  %% Line 1701
			  call 'erlang':'!'
			      (Pid, {_7,Reply})
			  let <_8> =
			      call %% Line 1702
				   'erlang':%% Line 1702
					    '+'
				  (%% Line 1702
				   N, %% Line 1702
				      1)
			  in  %% Line 1702
			      apply 'stream_end2'/7
				  (Pids, Ps, Next, _8, C, Head, Reply)
	      %% Line 1703
	      <[],Ps,'no_more',N,C,Head,_X_Reply> when 'true' ->
		  do  %% Line 1704
		      apply 'penalty'/3
			  (Head, Ps, C)
		      %% Line 1705
		      {N,Head}
	      %% Line 1706
	      <[],_X_Ps,{From,Op},N,_X_C,Head,_X_Reply> when 'true' ->
		  %% Line 1707
		  {{'more',From,Op,N},Head}
	      ( <_15,_14,_13,_12,_11,_10,_9> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_15,_14,_13,_12,_11,_10,_9})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'stream_end2',7}}] )
      -| [{'function',{'stream_end2',7}}] )
'penalty'/3 =
    %% Line 1709
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <H = {'head',_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40},_X_Ps,_X_C>
		  when ( try
			  let <_7> =
			      call 'erlang':'element'
				  (17, H)
			  in  let <_8> =
				  call 'erlang':'=:='
				      (_7, 'false')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _8)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 1710
		  'ok'
	      %% Line 1711
	      <_X_H,_X_Ps,[{{'lookup',_X_Pids},_X_Keys}|[]]> when 'true' ->
		  %% Line 1712
		  'ok'
	      %% Line 1713
	      <{'head',_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,{_56,[{Pid,_57}|[]]},_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70},[_71|[]],_X_C>
		  when call 'erlang':'=:='
			(_71,
			 Pid) ->
		  %% Line 1714
		  'ok'
	      %% Line 1715
	      <_X_H,_X_Ps,_X_C> when 'true' ->
		  %% Line 1716
		  call 'timer':'sleep'
		      (1)
	    end
	    -| [{'function',{'penalty',3}}] )
      -| [{'function',{'penalty',3}}] )
'lookup_replies'/1 =
    %% Line 1718
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'lookup_replies',1}}] ) of
	      <[{P,O}|[]]> when 'true' ->
		  %% Line 1731
		  ( case <P,O> of
		      ( <( [_8|( []
				 -| ['compiler_generated'] )]
			   -| ['compiler_generated'] ),_9> when ( 'true'
								  -| ['compiler_generated'] ) ->
			    ( let <_3> =
				  call %% Line 1732
				       ( 'erlang'
					 -| ['compiler_generated'] ):%% Line 1732
								     ( 'self'
								       -| ['compiler_generated'] )
				      ()
			      in  ( let <_2> =
					call %% Line 1732
					     ( 'erlang'
					       -| ['compiler_generated'] ):%% Line 1732
									   ( '=/='
									     -| ['compiler_generated'] )
					    (_9, %% Line 1732
						 ( []
						   -| ['compiler_generated'] ))
				    in  %% Line 1732
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( '!'
									       -| ['compiler_generated'] )
					      (_8, ( {_3,_2}
						     -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1733
		      ( <_10,_11> when ( 'true'
					 -| ['compiler_generated'] ) ->
			    ( let <_4> =
				  call %% Line 1734
				       ( 'erlang'
					 -| ['compiler_generated'] ):%% Line 1734
								     ( 'self'
								       -| ['compiler_generated'] )
				      ()
			      in  %% Line 1734
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( '!'
									 -| ['compiler_generated'] )
					(_10, ( {_4,_11}
						-| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated',{'function',{'lookup_reply',2}}] )
	      %% Line 1720
	      <Q> when 'true' ->
		  %% Line 1721
		  case call 'dets_utils':'family'
			   (Q) of
		    <[{P,O}|L]> when 'true' ->
			let <_2> =
			    call %% Line 1722
				 'lists':%% Line 1722
					 'append'
				(%% Line 1722
				 O)
			in  %% Line 1722
			    apply 'lookup_replies'/3
				(P, _2, L)
		    ( <_1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_1})
		      -| ['compiler_generated'] )
		  end
	    end
	    -| [{'function',{'lookup_replies',1}}] )
      -| [{'function',{'lookup_replies',1}}] )
'lookup_replies'/3 =
    %% Line 1724
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <P,O,[]> when 'true' ->
		  %% Line 1731
		  ( case <P,O> of
		      ( <( [_10|( []
				  -| ['compiler_generated'] )]
			   -| ['compiler_generated'] ),_11> when ( 'true'
								   -| ['compiler_generated'] ) ->
			    ( let <_3> =
				  call %% Line 1732
				       ( 'erlang'
					 -| ['compiler_generated'] ):%% Line 1732
								     ( 'self'
								       -| ['compiler_generated'] )
				      ()
			      in  ( let <_12> =
					call %% Line 1732
					     ( 'erlang'
					       -| ['compiler_generated'] ):%% Line 1732
									   ( '=/='
									     -| ['compiler_generated'] )
					    (_11, %% Line 1732
						  ( []
						    -| ['compiler_generated'] ))
				    in  %% Line 1732
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( '!'
									       -| ['compiler_generated'] )
					      (_10, ( {_3,_12}
						      -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1733
		      ( <_13,_14> when ( 'true'
					 -| ['compiler_generated'] ) ->
			    ( let <_4> =
				  call %% Line 1734
				       ( 'erlang'
					 -| ['compiler_generated'] ):%% Line 1734
								     ( 'self'
								       -| ['compiler_generated'] )
				      ()
			      in  %% Line 1734
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( '!'
									 -| ['compiler_generated'] )
					(_13, ( {_4,_14}
						-| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated',{'function',{'lookup_reply',2}}] )
	      %% Line 1726
	      <P,O,[{P2,O2}|L]> when 'true' ->
		  do  %% Line 1731
		      ( case <P,O> of
			  ( <( [_17|( []
				      -| ['compiler_generated'] )]
			       -| ['compiler_generated'] ),_18> when ( 'true'
								       -| ['compiler_generated'] ) ->
				( let <_3> =
				      call %% Line 1732
					   ( 'erlang'
					     -| ['compiler_generated'] ):%% Line 1732
									 ( 'self'
									   -| ['compiler_generated'] )
					  ()
				  in  ( let <_19> =
					    call %% Line 1732
						 ( 'erlang'
						   -| ['compiler_generated'] ):%% Line 1732
									       ( '=/='
										 -| ['compiler_generated'] )
						(_18, %% Line 1732
						      ( []
							-| ['compiler_generated'] ))
					in  %% Line 1732
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( '!'
										   -| ['compiler_generated'] )
						  (_17, ( {_3,_19}
							  -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1733
			  ( <_20,_21> when ( 'true'
					     -| ['compiler_generated'] ) ->
				( let <_4> =
				      call %% Line 1734
					   ( 'erlang'
					     -| ['compiler_generated'] ):%% Line 1734
									 ( 'self'
									   -| ['compiler_generated'] )
					  ()
				  in  %% Line 1734
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '!'
									     -| ['compiler_generated'] )
					    (_20, ( {_4,_21}
						    -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated',{'function',{'lookup_reply',2}}] )
		      let <_4> =
			  call %% Line 1728
			       'lists':%% Line 1728
				       'append'
			      (%% Line 1728
			       O2)
		      in  %% Line 1728
			  apply 'lookup_replies'/3
			      (P2, _4, L)
	      ( <_7,_6,_5> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_7,_6,_5})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'lookup_replies',3}}] )
      -| [{'function',{'lookup_replies',3}}] )
'lookup_reply'/2 =
    %% Line 1731
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <[P|[]],O> when 'true' ->
		  let <_3> =
		      call %% Line 1732
			   'erlang':%% Line 1732
				    'self'
			  ()
		  in  let <_2> =
			  call %% Line 1732
			       'erlang':%% Line 1732
					'=/='
			      (%% Line 1732
			       O, %% Line 1732
				  [])
		      in  %% Line 1732
			  call 'erlang':'!'
			      (P, {_3,_2})
	      %% Line 1733
	      <P,O> when 'true' ->
		  let <_4> =
		      call %% Line 1734
			   'erlang':%% Line 1734
				    'self'
			  ()
		  in  %% Line 1734
		      call 'erlang':'!'
			  (P, {_4,O})
	    end
	    -| [{'function',{'lookup_reply',2}}] )
      -| [{'function',{'lookup_reply',2}}] )
'system_continue'/3 =
    %% Line 1739
    ( fun (_0,_1,_2) ->
	  %% Line 1740
	  apply 'open_file_loop'/2
	      (_2, 0)
      -| [{'function',{'system_continue',3}}] )
'system_terminate'/4 =
    %% Line 1742
    ( fun (_0,_1,_2,_3) ->
	  do  %% Line 1743
	      apply 'do_stop'/1
		  (_3)
	      %% Line 1744
	      call 'erlang':'exit'
		  (_0)
      -| [{'function',{'system_terminate',4}}] )
'system_code_change'/4 =
    %% Line 1749
    ( fun (_0,_1,_2,_3) ->
	  %% Line 1750
	  {'ok',_0}
      -| [{'function',{'system_code_change',4}}] )
'read_file_header'/3 =
    %% Line 1758
    ( fun (_0,_1,_2) ->
	  let <_4> =
	      case <> of
		%% Line 1760
		<>
		    when ( call 'erlang':'=:='
			    (_2,
			     'true')
			-| ['compiler_generated'] ) ->
		    %% Line 1761
		    case call 'file':'read_file'
			     (_0) of
		      %% Line 1762
		      <{'ok',B}> when 'true' ->
			  B
		      %% Line 1763
		      <Err> when 'true' ->
			  call 'dets_utils':'file_error'
			      (_0, Err)
		    end
		%% Line 1765
		<> when 'true' ->
		    _0
	      end
	  in  let <_6> =
		  apply %% Line 1768
			'open_args'/2
		      (_1, _2)
	      in  %% Line 1768
		  case call 'dets_utils':'open'
			   (_4, _6) of
		    <{'ok',Fd}> when 'true' ->
			%% Line 1769
			case %% Line 1770
			     call 'dets_utils':'pread_close'
				 (Fd, _0, 16, 4) of
			  <{'ok',#{#<Version>(32,1,'integer',['unsigned'|['big']])}#}> when 'true' ->
			      %% Line 1771
			      case <> of
				%% Line 1772
				<>
				    when call 'erlang':'=<'
					  (Version,
					   8) ->
				    do  %% Line 1773
					( call ( 'file'
						 -| ['result_not_wanted'] ):( 'close'
									      -| ['result_not_wanted'] )
					      (Fd)
					  -| ['result_not_wanted'] )
					%% Line 1774
					call 'erlang':'throw'
					    ({'error',{'format_8_no_longer_supported',_0}})
				%% Line 1775
				<>
				    when call 'erlang':'=:='
					  (Version,
					   9) ->
				    %% Line 1776
				    call 'dets_v9':'read_file_header'
					(Fd, _0)
				%% Line 1777
				<> when 'true' ->
				    do  %% Line 1778
					( call ( 'file'
						 -| ['result_not_wanted'] ):( 'close'
									      -| ['result_not_wanted'] )
					      (Fd)
					  -| ['result_not_wanted'] )
					%% Line 1779
					call 'erlang':'throw'
					    ({'error',{'not_a_dets_file',_0}})
			      end
			  ( <_8> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_8})
			    -| ['compiler_generated'] )
			end
		    ( <_7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_7})
		      -| ['compiler_generated'] )
		  end
      -| [{'function',{'read_file_header',3}}] )
'fclose'/1 =
    %% Line 1782
    ( fun (_0) ->
	  %% Line 1783
	  case apply 'perform_save'/2
		   (( _0
		      -| [{'function',{'fclose',1}}] ), 'false') of
	    <{Head1,Res}> when 'true' ->
		%% Line 1784
		( case Head1 of
		    ( <( {'head',_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_rec33,_32,_33,_34,_35,_36}
			 -| ['compiler_generated'] )> when 'true' ->
			  case _rec33 of
			    %% Line 1785
			    <'true'> when 'true' ->
				%% Line 1786
				Res
			    %% Line 1787
			    <'false'> when 'true' ->
				do  %% Line 1788
				    call 'dets_utils':'stop_disk_map'
					()
				    %% Line 1789
				    ( case Head1 of
					( <( {'head',_38,_39,_40,_rec34,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65}
					     -| ['compiler_generated'] )> when 'true' ->
					      let <Res2> =
						  call 'file':'close'
						      (_rec34)
					      in  %% Line 1790
						  case <> of
						    %% Line 1791
						    <>
							when call 'erlang':'=:='
							      (Res2,
							       'ok') ->
							Res
						    %% Line 1792
						    <> when 'true' ->
							Res2
						  end
					  -| ['compiler_generated'] )
					( <_66> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','head'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
			    ( <_7> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_7})
			      -| ['compiler_generated'] )
			  end
		      -| ['compiler_generated'] )
		    ( <_37> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','head'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
	    ( <_1> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_1})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'fclose',1}}] )
'perform_save'/2 =
    %% Line 1797
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Head = {'head',_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55},DoSync>
		  when let <_8> =
			try
			    let <_6> =
				call 'erlang':'element'
				    (16, Head)
			    in  let <_7> =
				    call 'erlang':'=:='
					(_6, 'dirty')
				in  ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'and'
									   -| ['compiler_generated'] )
					  (( 'true'
					     -| ['compiler_generated'] ), _7)
				      -| ['compiler_generated'] )
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  let <_15> =
			    try
				let <_13> =
				    call %% Line 1798
					 'erlang':%% Line 1798
						  'element'
					(%% Line 1798
					 16, %% Line 1798
					     Head)
				in  let <_14> =
					call %% Line 1798
					     'erlang':%% Line 1798
						      '=:='
					    (_13, %% Line 1798
						  'new_dirty')
				    in  %% Line 1798
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'and'
									       -| ['compiler_generated'] )
					      (( 'true'
						 -| ['compiler_generated'] ), _14)
					  -| ['compiler_generated'] )
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			in  ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'or'
								   -| ['compiler_generated'] )
				  (_8, _15)
			      -| ['compiler_generated'] ) ->
		  let <_22> =
		      catch
			  %% Line 1800
			  case apply 'write_cache'/1
				   (Head) of
			    <{Head1,[]}> when 'true' ->
				%% Line 1801
				case call 'dets_v9':'do_perform_save'
					 (Head1) of
				  <{Head2,'ok'}> when 'true' ->
				      %% Line 1802
				      case apply 'ensure_written'/2
					       (Head2, DoSync) of
					<'ok'> when 'true' ->
					    %% Line 1803
					    case Head2 of
					      <{'head',_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84}> when 'true' ->
						  let <_21> =
						      call 'erlang':'setelement'
							  (16, Head2, 'saved')
						  in  {_21,'ok'}
					      ( <_85> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','head'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					( <_18> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_18})
					  -| ['compiler_generated'] )
				      end
				  ( <_17> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_17})
				    -| ['compiler_generated'] )
				end
			    ( <_16> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_16})
			      -| ['compiler_generated'] )
			  end
		  in  %% Line 1799
		      case _22 of
			%% Line 1805
			<Reply = {NewHead = {'head',_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114},_115}> when ( 'true'
																								      -| ['compiler_generated'] ) ->
			    %% Line 1806
			    Reply
			( <_23> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_23})
			  -| ['compiler_generated'] )
		      end
	      %% Line 1808
	      <Head,_X_DoSync> when 'true' ->
		  let <_24> =
		      apply %% Line 1809
			    'status'/1
			  (%% Line 1809
			   Head)
		  in  %% Line 1809
		      {Head,_24}
	    end
	    -| [{'function',{'perform_save',2}}] )
      -| [{'function',{'perform_save',2}}] )
'ensure_written'/2 =
    %% Line 1811
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Head = {'head',_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66},DoSync>
		  when ( try
			  let <_6> =
			      call 'erlang':'element'
				  (25, Head)
			  in  let <_7> =
				  call 'erlang':'=:='
				      (_6, 'true')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _7)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 1812
		  case call 'dets_utils':'position'
			   (Head, 'eof') of
		    <{'ok',EOF}> when 'true' ->
			%% Line 1813
			case call 'dets_utils':'pread'
				 (Head, 0, EOF, 0) of
			  <{'ok',Bin}> when 'true' ->
			      %% Line 1814
			      case <> of
				%% Line 1815
				<>
				    when ( call 'erlang':'=:='
					    (DoSync,
					     'true')
					-| ['compiler_generated'] ) ->
				    %% Line 1816
				    call 'dets_utils':'write_file'
					(Head, Bin)
				%% Line 1817
				<>
				    when ( call 'erlang':'=:='
					    (DoSync,
					     'false')
					-| ['compiler_generated'] ) ->
				    %% Line 1818
				    ( case Head of
					( <( {'head',_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_rec36,_88,_89,_90,_91,_92,_93,_94}
					     -| ['compiler_generated'] )> when 'true' ->
					      case call 'file':'write_file'
						       (_rec36, Bin) of
						%% Line 1819
						<'ok'> when 'true' ->
						    %% Line 1820
						    'ok'
						%% Line 1821
						<Error> when 'true' ->
						    %% Line 1822
						    call 'dets_utils':'corrupt_file'
							(Head, Error)
					      end
					  -| ['compiler_generated'] )
					( <_95> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','head'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				( <> when 'true' ->
				      primop 'match_fail'
					  ('if_clause')
				  -| ['compiler_generated'] )
			      end
			  ( <_9> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_9})
			    -| ['compiler_generated'] )
			end
		    ( <_8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_8})
		      -| ['compiler_generated'] )
		  end
	      %% Line 1825
	      <Head,'true'>
		  when try
			( let <_16> =
			      case ( call ( 'erlang'
					    -| ['compiler_generated'] ):( 'is_record'
									  -| ['compiler_generated'] )
					 (Head, ( 'head'
						  -| ['compiler_generated'] ), ( 30
										 -| ['compiler_generated'] ))
				     -| ['compiler_generated'] ) of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'true'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'fail'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( _14
				     -| ['compiler_generated'] )> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),( _14
										-| ['compiler_generated'] )}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  let <_17> =
				  call 'erlang':'=:='
				      (( _16
					 -| ['compiler_generated'] ), 'true')
			      in  let <_18> =
				      call 'erlang':'element'
					  (25, Head)
				  in  let <_19> =
					  call 'erlang':'=:='
					      (_18, 'true')
				      in  let <_20> =
					      call ( 'erlang'
						     -| ['compiler_generated'] ):( 'and'
										   -| ['compiler_generated'] )
						  (_17, _19)
					  in  let <_21> =
						  call 'erlang':'not'
						      (_20)
					      in  let <_22> =
						      call 'erlang':'is_boolean'
							  (_18)
						  in  let <_23> =
							  call 'erlang':'and'
							      (_21, _22)
						      in  let <_24> =
							      call 'erlang':'is_boolean'
								  (_16)
							  in  ( call 'erlang':'and'
								    (_23, _24)
								-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  %% Line 1826
		  call 'dets_utils':'sync'
		      (Head)
	      %% Line 1827
	      <Head,'false'>
		  when try
			( let <_27> =
			      case ( call ( 'erlang'
					    -| ['compiler_generated'] ):( 'is_record'
									  -| ['compiler_generated'] )
					 (Head, ( 'head'
						  -| ['compiler_generated'] ), ( 30
										 -| ['compiler_generated'] ))
				     -| ['compiler_generated'] ) of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'true'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( 'fail'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( _25
				     -| ['compiler_generated'] )> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),( _25
										-| ['compiler_generated'] )}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  let <_28> =
				  call 'erlang':'=:='
				      (( _27
					 -| ['compiler_generated'] ), 'true')
			      in  let <_29> =
				      call 'erlang':'element'
					  (25, Head)
				  in  let <_30> =
					  call 'erlang':'=:='
					      (_29, 'true')
				      in  let <_31> =
					      call ( 'erlang'
						     -| ['compiler_generated'] ):( 'and'
										   -| ['compiler_generated'] )
						  (_28, _30)
					  in  let <_32> =
						  call 'erlang':'not'
						      (_31)
					      in  let <_33> =
						      call 'erlang':'is_boolean'
							  (_29)
						  in  let <_34> =
							  call 'erlang':'and'
							      (_32, _33)
						      in  let <_35> =
							      call 'erlang':'is_boolean'
								  (_27)
							  in  ( call 'erlang':'and'
								    (_34, _35)
								-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  %% Line 1828
		  'ok'
	      ( <_37,_36> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_37,_36})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'ensure_written',2}}] )
      -| [{'function',{'ensure_written',2}}] )
'do_bchunk_init'/2 =
    %% Line 1831
    ( fun (_0,_1) ->
	  let <_2> =
	      catch
		  %% Line 1832
		  apply 'write_cache'/1
		      (_0)
	  in  %% Line 1832
	      case _2 of
		%% Line 1833
		<{H2,[]}> when 'true' ->
		    %% Line 1834
		    case call 'dets_v9':'table_parameters'
			     (H2) of
		      %% Line 1835
		      <'undefined'> when 'true' ->
			  %% Line 1836
			  {H2,{'error','old_version'}}
		      %% Line 1837
		      <Parms> when 'true' ->
			  let <L> =
			      call %% Line 1838
				   'dets_utils':%% Line 1838
						'all_allocated'
				  (%% Line 1838
				   H2)
			  in  let <_4> =
				  case <> of
				    %% Line 1840
				    <>
					when call 'erlang':'=:='
					      (L,
					       #{}#) ->
					'eof'
				    %% Line 1841
				    <> when 'true' ->
					#{}#
				  end
			      in  let <BinParms> =
				      call %% Line 1843
					   'erlang':%% Line 1843
						    'term_to_binary'
					  (%% Line 1843
					   Parms)
				  in  let <_7> =
					  call %% Line 1845
					       'erlang':%% Line 1845
							'self'
					      ()
				      in  %% Line 1844
					  {H2,{{'dets_cont',%% Line 1845
							    'bchunk','default',_4,L,_1,_7,'undefined'},%% Line 1846
												       [BinParms|[]]}}
		    end
		%% Line 1848
		<HeadError = {NewHead = {'head',_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40},_41}> when ( 'true'
																						  -| ['compiler_generated'] ) ->
		    %% Line 1849
		    HeadError
		( <_9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_9})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'do_bchunk_init',2}}] )
'do_bchunk'/2 =
    %% Line 1853
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Head,{'dets_cont',_14,_15,_16,_17,_18,Proc,_19}>
		  when try
			let <_2> =
			    call 'erlang':'self'
				()
			in  call 'erlang':'=/='
				(Proc, _2)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  %% Line 1854
		  {Head,'badarg'}
	      %% Line 1855
	      <Head,{'dets_cont',_20,_21,'eof',_22,_23,_24,_25}> when 'true' ->
		  %% Line 1856
		  {Head,'$end_of_table'}
	      %% Line 1857
	      <Head,State> when 'true' ->
		  %% Line 1858
		  ( case State of
		      ( <( {'dets_cont',_26,_27,_28,_rec37,_29,_30,_31}
			   -| ['compiler_generated'] )> when 'true' ->
			    case call 'dets_v9':'read_bchunks'
				     (Head, _rec37) of
			      %% Line 1859
			      <{'error',Reason}> when 'true' ->
				  %% Line 1860
				  call 'dets_utils':'corrupt_reason'
				      (Head, Reason)
			      %% Line 1861
			      <{'finished',Bins}> when 'true' ->
				  %% Line 1862
				  case State of
				    <{'dets_cont',_33,_34,_35,_36,_37,_38,_39}> when 'true' ->
					let <_7> =
					    call 'erlang':'setelement'
						(4, State, 'eof')
					in  {Head,{_7,Bins}}
				    ( <_40> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','dets_cont'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      %% Line 1863
			      <{Bins,NewL}> when 'true' ->
				  %% Line 1864
				  case State of
				    <{'dets_cont',_41,_42,_43,_44,_45,_46,_47}> when 'true' ->
					let <_10> =
					    call 'erlang':'setelement'
						(5, State, NewL)
					in  {Head,{_10,Bins}}
				    ( <_48> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','dets_cont'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      ( <_11> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_11})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_32> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','dets_cont'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	    end
	    -| [{'function',{'do_bchunk',2}}] )
      -| [{'function',{'do_bchunk',2}}] )
'fdelete_all_objects'/1 =
    %% Line 1868
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'fdelete_all_objects',1}}] ) of
	      <Head = {'head',_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}>
		  when ( try
			  let <_5> =
			      call 'erlang':'element'
				  (17, Head)
			  in  let <_6> =
				  call 'erlang':'=:='
				      (_5, 'false')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _6)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  let <_7> =
		      catch
			  %% Line 1869
			  apply 'do_delete_all_objects'/1
			      (Head)
		  in  %% Line 1869
		      case _7 of
			%% Line 1870
			<{'ok',NewHead}> when 'true' ->
			    do  %% Line 1871
				apply 'start_auto_save_timer'/1
				    (NewHead)
				%% Line 1872
				{NewHead,'ok'}
			%% Line 1873
			<{'error',Reason}> when 'true' ->
			    %% Line 1874
			    call 'dets_utils':'corrupt_reason'
				(Head, Reason)
			( <_8> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_8})
			  -| ['compiler_generated'] )
		      end
	      %% Line 1876
	      <Head> when 'true' ->
		  %% Line 1877
		  {Head,'fixed'}
	    end
	    -| [{'function',{'fdelete_all_objects',1}}] )
      -| [{'function',{'fdelete_all_objects',1}}] )
'do_delete_all_objects'/1 =
    %% Line 1879
    ( fun (_0) ->
	  %% Line 1882
	  case ( _0
		 -| [{'function',{'do_delete_all_objects',1}}] ) of
	    <{'head',_5,_6,_7,Fd,_8,_9,_10,_11,Type,Kp,_12,_13,_14,Auto,_15,_16,_17,_18,MinSlots,MaxSlots,Cache,Fname,_19,Ram,Tab,_20,_21,_22,_23}> when 'true' ->
		let <CacheSz> =
		    call %% Line 1883
			 'dets_utils':%% Line 1883
				      'cache_size'
			(%% Line 1883
			 Cache)
		in  %% Line 1884
		    case call 'dets_utils':'truncate'
			     (Fd, Fname, 'bof') of
		      <'ok'> when 'true' ->
			  %% Line 1885
			  call 'dets_v9':'initiate_file'
			      (Fd, Tab, Fname, Type, Kp, MinSlots, MaxSlots, %% Line 1886
									     Ram, %% Line 1886
										  CacheSz, %% Line 1886
											   Auto, %% Line 1886
												 'true')
		      ( <_3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_3})
			-| ['compiler_generated'] )
		    end
	    ( <_1> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_1})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'do_delete_all_objects',1}}] )
'ffirst'/1 =
    %% Line 1888
    ( fun (_0) ->
	  let <Ref> =
	      call %% Line 1889
		   'erlang':%% Line 1889
			    'make_ref'
		  ()
	  in  let <_3> =
		  catch
		      let <_2> =
			  apply %% Line 1890
				'ffirst1'/1
			      (( _0
				 -| [{'function',{'ffirst',1}}] ))
		      in  %% Line 1890
			  {Ref,_2}
	      in  %% Line 1890
		  case _3 of
		    %% Line 1891
		    <{_6,{NH,R}}>
			when call 'erlang':'=:='
			      (_6,
			       Ref) ->
			%% Line 1892
			{NH,{'ok',R}}
		    %% Line 1893
		    <{NH = {'head',_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35},R}> when ( 'true'
																				-| ['compiler_generated'] ) ->
			%% Line 1894
			{NH,{'error',R}}
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_4})
		      -| ['compiler_generated'] )
		  end
      -| [{'function',{'ffirst',1}}] )
'ffirst1'/1 =
    %% Line 1897
    ( fun (_0) ->
	  do  %% Line 1898
	      apply 'check_safe_fixtable'/1
		  (( _0
		     -| [{'function',{'ffirst1',1}}] ))
	      %% Line 1899
	      case apply 'write_cache'/1
		       (( _0
			  -| [{'function',{'ffirst1',1}}] )) of
		<{NH,[]}> when 'true' ->
		    %% Line 1900
		    apply 'ffirst'/2
			(NH, 0)
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_1})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'ffirst1',1}}] )
'ffirst'/2 =
    %% Line 1902
    ( fun (_0,_1) ->
	  %% Line 1903
	  case call 'dets_v9':'slot_objs'
		   (_0, _1) of
	    %% Line 1904
	    <'$end_of_table'> when 'true' ->
		{_0,'$end_of_table'}
	    %% Line 1905
	    <[]> when 'true' ->
		let <_2> =
		    call 'erlang':'+'
			(_1, 1)
		in  apply 'ffirst'/2
			(_0, _2)
	    %% Line 1906
	    <[X|_9]> when 'true' ->
		( case _0 of
		    ( <( {'head',_10,_11,_12,_13,_14,_15,_16,_17,_18,_rec40,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37}
			 -| ['compiler_generated'] )> when 'true' ->
			  let <_5> =
			      call 'erlang':'element'
				  (_rec40, X)
			  in  {_0,_5}
		      -| ['compiler_generated'] )
		    ( <_38> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','head'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
	    ( <_6> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_6})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'ffirst',2}}] )
'finsert'/2 =
    %% Line 1910
    ( fun (_0,_1) ->
	  let <_2> =
	      catch
		  %% Line 1911
		  apply 'update_cache'/3
		      (_0, _1, 'insert')
	  in  %% Line 1911
	      case _2 of
		%% Line 1912
		<{NewHead,[]}> when 'true' ->
		    %% Line 1913
		    {NewHead,'ok'}
		%% Line 1914
		<HeadError = {NewHead = {'head',_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34},_35}> when ( 'true'
																					      -| ['compiler_generated'] ) ->
		    %% Line 1915
		    HeadError
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_3})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'finsert',2}}] )
'finsert_new'/2 =
    %% Line 1919
    ( fun (_0,_1) ->
	  %% Line 1920
	  ( case _0 of
	      ( <( {'head',_20,_21,_22,_23,_24,_25,_26,_27,_28,_rec41,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47}
		   -| ['compiler_generated'] )> when 'true' ->
		    let <_8> =
			catch
			    let <_7> =
				fun (_5) ->
				    %% Line 1921
				    call 'erlang':'element'
					(_rec41, _5)
			    in  %% Line 1921
				call 'lists':'map'
				    (_7, _1)
		    in  %% Line 1921
			case _8 of
			  %% Line 1922
			  <Keys>
			      when call 'erlang':'is_list'
				    (_8) ->
			      let <_9> =
				  catch
				      %% Line 1923
				      apply 'update_cache'/3
					  (_0, Keys, {'lookup','nopid'})
			      in  %% Line 1923
				  case _9 of
				    %% Line 1924
				    <{Head1,PidObjs}>
					when call 'erlang':'is_list'
					      (PidObjs) ->
					let <_12> =
					    fun (_10) ->
						%% Line 1925
						case _10 of
						  <{_X_P,OL}> when 'true' ->
						      call 'erlang':'=:='
							  (OL, [])
						  ( <_11> when 'true' ->
							primop 'match_fail'
							    ({'function_clause',_11})
						    -| ['compiler_generated'] )
						end
					in  %% Line 1925
					    case call 'lists':'all'
						     (_12, PidObjs) of
					      %% Line 1926
					      <'true'> when 'true' ->
						  let <_13> =
						      catch
							  %% Line 1927
							  apply 'update_cache'/3
							      (Head1, _1, 'insert')
						  in  %% Line 1927
						      case _13 of
							%% Line 1928
							<{NewHead,[]}> when 'true' ->
							    %% Line 1929
							    {NewHead,'true'}
							%% Line 1930
							<_@r0 = {NewHead = {'head',_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77},Error}> when ( 'true'
																										       -| ['compiler_generated'] ) ->
							    %% Line 1931
							    _@r0
							( <_14> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_14})
							  -| ['compiler_generated'] )
						      end
					      %% Line 1933
					      <Reply = 'false'> when 'true' ->
						  %% Line 1934
						  {Head1,Reply}
					      ( <_15> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_15})
						-| ['compiler_generated'] )
					    end
				    %% Line 1936
				    <HeadError = {NewHead = {'head',_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106},_107}> when ( 'true'
																									      -| ['compiler_generated'] ) ->
					%% Line 1937
					HeadError
				    ( <_16> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_16})
				      -| ['compiler_generated'] )
				  end
			  %% Line 1939
			  <_108> when 'true' ->
			      %% Line 1940
			      {_0,'badarg'}
			end
		-| ['compiler_generated'] )
	      ( <_48> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'finsert_new',2}}] )
'do_safe_fixtable'/3 =
    %% Line 1943
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <Head,Pid,'true'> when 'true' ->
		  %% Line 1944
		  ( case Head of
		      ( <( {'head',_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_rec42,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53}
			   -| ['compiler_generated'] )> when 'true' ->
			    case _rec42 of
			      %% Line 1945
			      <'false'> when 'true' ->
				  do  %% Line 1946
				      call 'erlang':'link'
					  (Pid)
				      let <MonTime> =
					  call %% Line 1947
					       'erlang':%% Line 1947
							'monotonic_time'
					      ()
				      in  let <TimeOffset> =
					      call %% Line 1948
						   'erlang':%% Line 1948
							    'time_offset'
						  ()
					  in  let <Fixed> =
						  {%% Line 1949
						   {MonTime,TimeOffset},%% Line 1949
									[{Pid,1}|[]]}
					      in  let <Ftab> =
						      call %% Line 1950
							   'dets_utils':%% Line 1950
									'get_freelists'
							  (%% Line 1950
							   Head)
						  in  let <_rec43> = {%% Line 1951
							   Ftab,%% Line 1951
								Ftab}
						      in  %% Line 1951
							  case Head of
							    <{'head',_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83}> when 'true' ->
								let <_11> =
								    call 'erlang':'setelement'
									(17, Head, Fixed)
								in  call 'erlang':'setelement'
									(12, _11, _rec43)
							    ( <_84> when 'true' ->
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'error'
													 -| ['compiler_generated'] )
									(( {'badrecord','head'}
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
			      %% Line 1952
			      <{TimeStamp,Counters}> when 'true' ->
				  %% Line 1953
				  case call 'lists':'keysearch'
					   (Pid, 1, Counters) of
				    %% Line 1954
				    <{'value',{_85,Counter}}>
					when call 'erlang':'=:='
					      (_85,
					       Pid) ->
					let <_13> =
					    call %% Line 1956
						 'erlang':%% Line 1956
							  '+'
						(%% Line 1956
						 Counter, %% Line 1956
							  1)
					in  let <NewCounters> =
						call %% Line 1955
						     'lists':%% Line 1955
							     'keyreplace'
						    (%% Line 1955
						     Pid, %% Line 1955
							  1, %% Line 1955
							     Counters, %% Line 1956
								       {Pid,_13})
					    in  let <_rec45> = {%% Line 1957
						     TimeStamp,%% Line 1957
							       NewCounters}
						in  %% Line 1957
						    case Head of
						      <{'head',_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114}> when 'true' ->
							  call 'erlang':'setelement'
							      (17, Head, _rec45)
						      ( <_115> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','head'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
				    %% Line 1958
				    <'false'> when 'true' ->
					do  %% Line 1959
					    call 'erlang':'link'
						(Pid)
					    let <Fixed> =
						{%% Line 1960
						 TimeStamp,%% Line 1960
							   [{Pid,1}|Counters]}
					    in  %% Line 1961
						case Head of
						  <{'head',_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144}> when 'true' ->
						      call 'erlang':'setelement'
							  (17, Head, Fixed)
						  ( <_145> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','head'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
				    ( <_21> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_21})
				      -| ['compiler_generated'] )
				  end
			      ( <_22> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_22})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_54> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 1964
	      <Head,Pid,'false'> when 'true' ->
		  %% Line 1965
		  apply 'remove_fix'/3
		      (Head, Pid, 'false')
	      ( <_25,_24,_23> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_25,_24,_23})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'do_safe_fixtable',3}}] )
      -| [{'function',{'do_safe_fixtable',3}}] )
'remove_fix'/3 =
    %% Line 1967
    ( fun (_0,_1,_2) ->
	  %% Line 1968
	  ( case _0 of
	      ( <( {'head',_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_rec48,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52}
		   -| ['compiler_generated'] )> when 'true' ->
		    case _rec48 of
		      %% Line 1969
		      <'false'> when 'true' ->
			  _0
		      %% Line 1971
		      <{TimeStamp,Counters}> when 'true' ->
			  %% Line 1972
			  case call 'lists':'keysearch'
				   (_1, 1, Counters) of
			    %% Line 1974
			    <{'value',{_54,Counter}}>
				when let <_55> =
				      call 'erlang':'=:='
					  (_54, _1)
				  in  let <_5> =
					  call 'erlang':'=:='
					      (Counter, 1)
				      in  let <_6> =
					      call 'erlang':'=:='
						  (_2, 'close')
					  in  let <_56> =
						  call 'erlang':'or'
						      (_5, _6)
					      in  call 'erlang':'and'
						      (_55, _56) ->
				do  %% Line 1975
				    call 'erlang':'unlink'
					(_1)
				    %% Line 1976
				    case call 'lists':'keydelete'
					     (_1, 1, Counters) of
				      %% Line 1977
				      <[]> when 'true' ->
					  do  %% Line 1978
					      apply 'check_growth'/1
						  (_0)
					      do  %% Line 1979
						  call 'erlang':'garbage_collect'
						      ()
						  let <_rec49> =
						      call %% Line 1981
							   'dets_utils':%% Line 1981
									'get_freelists'
							  (_0)
						  in  %% Line 1981
						      case _0 of
							<{'head',_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85}> when 'true' ->
							    let <_9> =
								call 'erlang':'setelement'
								    (17, _0, 'false')
							    in  call 'erlang':'setelement'
								    (12, _9, _rec49)
							( <_86> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','head'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
				      %% Line 1982
				      <NewCounters> when 'true' ->
					  let <_rec51> = {%% Line 1983
					       TimeStamp,%% Line 1983
							 NewCounters}
					  in  %% Line 1983
					      case _0 of
						<{'head',_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115}> when 'true' ->
						    call 'erlang':'setelement'
							(17, _0, _rec51)
						( <_116> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','head'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
				    end
			    %% Line 1985
			    <{'value',{_117,Counter}}>
				when call 'erlang':'=:='
				      (_117,
				       _1) ->
				let <_15> =
				    call %% Line 1987
					 'erlang':%% Line 1987
						  '-'
					(%% Line 1987
					 Counter, %% Line 1987
						  1)
				in  let <NewCounters> =
					call %% Line 1986
					     'lists':%% Line 1986
						     'keyreplace'
					    (_1, %% Line 1986
						 1, %% Line 1986
						    Counters, %% Line 1987
							      {_1,_15})
				    in  let <_rec53> = {%% Line 1988
					     TimeStamp,%% Line 1988
						       NewCounters}
					in  %% Line 1988
					    case _0 of
					      <{'head',_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146}> when 'true' ->
						  call 'erlang':'setelement'
						      (17, _0, _rec53)
					      ( <_147> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','head'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
			    %% Line 1989
			    <'false'> when 'true' ->
				_0
			    ( <_20> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_20})
			      -| ['compiler_generated'] )
			  end
		      ( <_21> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_21})
			-| ['compiler_generated'] )
		    end
		-| ['compiler_generated'] )
	      ( <_53> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'remove_fix',3}}] )
'do_stop'/1 =
    %% Line 1994
    ( fun (_0) ->
	  do  %% Line 1995
	      apply 'unlink_fixing_procs'/1
		  (( _0
		     -| [{'function',{'do_stop',1}}] ))
	      %% Line 1996
	      apply 'fclose'/1
		  (( _0
		     -| [{'function',{'do_stop',1}}] ))
      -| [{'function',{'do_stop',1}}] )
'unlink_fixing_procs'/1 =
    %% Line 1998
    ( fun (_0) ->
	  %% Line 1999
	  ( case ( _0
		   -| [{'function',{'unlink_fixing_procs',1}}] ) of
	      ( <( {'head',_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_rec55,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39}
		   -| ['compiler_generated'] )> when 'true' ->
		    case _rec55 of
		      %% Line 2000
		      <'false'> when 'true' ->
			  ( _0
			    -| [{'function',{'unlink_fixing_procs',1}}] )
		      %% Line 2002
		      <{_41,Counters}> when 'true' ->
			  let <_5> =
			      fun (_3) ->
				  %% Line 2003
				  case _3 of
				    <{Pid,_X_Counter}> when 'true' ->
					call 'erlang':'unlink'
					    (Pid)
				    ( <_4> when 'true' ->
					  primop 'match_fail'
					      ({'function_clause',_4})
				      -| ['compiler_generated'] )
				  end
			  in  do  %% Line 2003
				  call 'lists':'foreach'
				      (_5, Counters)
				  let <_rec56> =
				      call %% Line 2005
					   'dets_utils':%% Line 2005
							'get_freelists'
					  (( _0
					     -| [{'function',{'unlink_fixing_procs',1}}] ))
				  in  %% Line 2005
				      case ( _0
					     -| [{'function',{'unlink_fixing_procs',1}}] ) of
					<{'head',_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70}> when 'true' ->
					    let <_8> =
						call 'erlang':'setelement'
						    (17, ( _0
							   -| [{'function',{'unlink_fixing_procs',1}}] ), 'false')
					    in  call 'erlang':'setelement'
						    (12, _8, _rec56)
					( <_71> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','head'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
		      ( <_10> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_10})
			-| ['compiler_generated'] )
		    end
		-| ['compiler_generated'] )
	      ( <_40> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'unlink_fixing_procs',1}}] )
'check_growth'/1 =
    %% Line 2008
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'check_growth',1}}] ) of
	      <{'head',_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,'read',_34,_35,_36,_37,_38,_39}> when 'true' ->
		  %% Line 2009
		  'ok'
	      %% Line 2010
	      <Head> when 'true' ->
		  let <NoThings> =
		      apply %% Line 2011
			    'no_things'/1
			  (%% Line 2011
			   Head)
		  in  %% Line 2012
		      case <> of
			%% Line 2013
			<>
			    when ( try
				    ( let <_4> =
					  case ( call ( 'erlang'
							-| ['compiler_generated'] ):( 'is_record'
										      -| ['compiler_generated'] )
						     (Head, ( 'head'
							      -| ['compiler_generated'] ), ( 30
											     -| ['compiler_generated'] ))
						 -| ['compiler_generated'] ) of
					    ( <( 'true'
						 -| ['compiler_generated'] )> when 'true' ->
						  ( 'true'
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <( 'false'
						 -| ['compiler_generated'] )> when 'true' ->
						  ( 'fail'
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <( _2
						 -| ['compiler_generated'] )> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {( 'badarg'
							      -| ['compiler_generated'] ),( _2
											    -| ['compiler_generated'] )}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				      in  let <_5> =
					      call 'erlang':'=:='
						  (( _4
						     -| ['compiler_generated'] ), 'true')
					  in  let <_6> =
						  call 'erlang':'element'
						      (4, Head)
					      in  let <_7> =
						      call 'erlang':'>'
							  (NoThings, _6)
						  in  ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'and'
											     -| ['compiler_generated'] )
							    (_5, _7)
							-| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false'
				-| ['compiler_generated'] ) ->
			    let <_9> =
				call %% Line 2015
				     'erlang':%% Line 2015
					      'self'
				    ()
			    in  let <_8> =
				    call %% Line 2015
					 'erlang':%% Line 2015
						  'self'
					()
				in  do  %% Line 2014
					call 'erlang':'send_after'
					    (%% Line 2015
					     200, _9, %% Line 2015
						      {'$dets_call',_8,'may_grow'})
					%% Line 2016
					'ok'
			%% Line 2017
			<> when 'true' ->
			    %% Line 2018
			    'ok'
		      end
	    end
	    -| [{'function',{'check_growth',1}}] )
      -| [{'function',{'check_growth',1}}] )
'finfo'/1 =
    %% Line 2021
    ( fun (_0) ->
	  let <_1> =
	      catch
		  %% Line 2022
		  apply 'write_cache'/1
		      (( _0
			 -| [{'function',{'finfo',1}}] ))
	  in  %% Line 2022
	      case _1 of
		%% Line 2023
		<{H2,[]}> when 'true' ->
		    let <_15> =
			catch
			    %% Line 2024
			    ( case H2 of
				( <( {'head',_19,_20,_21,_22,_23,_24,_25,_26,_rec58,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46}
				     -| ['compiler_generated'] )> when 'true' ->
				      %% Line 2025
				      ( case H2 of
					  ( <( {'head',_48,_49,_50,_51,_52,_53,_54,_55,_56,_rec59,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75}
					       -| ['compiler_generated'] )> when 'true' ->
						%% Line 2026
						( case H2 of
						    ( <( {'head',_77,_78,_79,_80,_rec60,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104}
							 -| ['compiler_generated'] )> when 'true' ->
							  %% Line 2028
							  ( case H2 of
							      ( <( {'head',_106,_107,_108,_rec61,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133}
								   -| ['compiler_generated'] )> when 'true' ->
								    ( case H2 of
									( <( {'head',_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_rec62,_156,_157,_158,_159,_160,_161,_162}
									     -| ['compiler_generated'] )> when 'true' ->
									      let <_12> =
										  apply 'file_size'/2
										      (_rec61, _rec62)
									      in  %% Line 2029
										  ( case H2 of
										      ( <( {'head',_164,_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183,_184,_rec63,_185,_186,_187,_188,_189,_190,_191}
											   -| ['compiler_generated'] )> when 'true' ->
											    [{'type',_rec58}|[{'keypos',_rec59}|[{'size',_rec60}|[{'file_size',_12}|[{'filename',_rec63}|[]]]]]]
											-| ['compiler_generated'] )
										      ( <_192> when 'true' ->
											    ( call ( 'erlang'
												     -| ['compiler_generated'] ):( 'error'
																   -| ['compiler_generated'] )
												  (( {'badrecord','head'}
												     -| ['compiler_generated'] ))
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										    end
										    -| ['compiler_generated'] )
									  -| ['compiler_generated'] )
									( <_163> when 'true' ->
									      ( call ( 'erlang'
										       -| ['compiler_generated'] ):( 'error'
														     -| ['compiler_generated'] )
										    (( {'badrecord','head'}
										       -| ['compiler_generated'] ))
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								      end
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      ( <_134> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','head'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <_105> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','head'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_76> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','head'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_47> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','head'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    in  %% Line 2030
			{H2,_15}
		%% Line 2031
		<HeadError = {H2 = {'head',_193,_194,_195,_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208,_209,_210,_211,_212,_213,_214,_215,_216,_217,_218,_219,_220,_221},_222}> when ( 'true'
																									   -| ['compiler_generated'] ) ->
		    %% Line 2032
		    HeadError
		( <_17> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_17})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'finfo',1}}] )
'finfo'/2 =
    %% Line 2035
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <H,'access'> when 'true' ->
		  ( case H of
		      ( <( {'head',_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_rec64,_77,_78,_79,_80,_81,_82}
			   -| ['compiler_generated'] )> when 'true' ->
			    {H,_rec64}
			-| ['compiler_generated'] )
		      ( <_83> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 2036
	      <H,'auto_save'> when 'true' ->
		  ( case H of
		      ( <( {'head',_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_rec65,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111}
			   -| ['compiler_generated'] )> when 'true' ->
			    {H,_rec65}
			-| ['compiler_generated'] )
		      ( <_112> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 2037
	      <H,'bchunk_format'> when 'true' ->
		  let <_6> =
		      catch
			  %% Line 2038
			  apply 'write_cache'/1
			      (H)
		  in  %% Line 2038
		      case _6 of
			%% Line 2039
			<{H2,[]}> when 'true' ->
			    %% Line 2040
			    case call 'dets_v9':'table_parameters'
				     (H2) of
			      %% Line 2041
			      <Undef = 'undefined'> when 'true' ->
				  %% Line 2042
				  {H2,Undef}
			      %% Line 2043
			      <Parms> when 'true' ->
				  let <_7> =
				      call %% Line 2044
					   'erlang':%% Line 2044
						    'term_to_binary'
					  (%% Line 2044
					   Parms)
				  in  %% Line 2044
				      {H2,_7}
			    end
			%% Line 2046
			<HeadError = {H2 = {'head',_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141},_142}> when ( 'true'
																										   -| ['compiler_generated'] ) ->
			    %% Line 2047
			    HeadError
			( <_9> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_9})
			  -| ['compiler_generated'] )
		      end
	      %% Line 2049
	      <H,'delayed_write'> when 'true' ->
		  %% Line 2050
		  ( case H of
		      ( <( {'head',_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_rec66,_163,_164,_165,_166,_167,_168,_169,_170}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_12> =
				call 'dets_utils':'cache_size'
				    (_rec66)
			    in  {H,_12}
			-| ['compiler_generated'] )
		      ( <_171> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 2051
	      <H,'filename'> when 'true' ->
		  ( case H of
		      ( <( {'head',_172,_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183,_184,_185,_186,_187,_188,_189,_190,_191,_192,_rec67,_193,_194,_195,_196,_197,_198,_199}
			   -| ['compiler_generated'] )> when 'true' ->
			    {H,_rec67}
			-| ['compiler_generated'] )
		      ( <_200> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 2052
	      <H,'file_size'> when 'true' ->
		  let <_15> =
		      catch
			  %% Line 2053
			  apply 'write_cache'/1
			      (H)
		  in  %% Line 2053
		      case _15 of
			%% Line 2054
			<{H2,[]}> when 'true' ->
			    let <_20> =
				catch
				    %% Line 2055
				    ( case H of
					( <( {'head',_201,_202,_203,_rec68,_204,_205,_206,_207,_208,_209,_210,_211,_212,_213,_214,_215,_216,_217,_218,_219,_220,_221,_222,_223,_224,_225,_226,_227,_228}
					     -| ['compiler_generated'] )> when 'true' ->
					      ( case H of
						  ( <( {'head',_230,_231,_232,_233,_234,_235,_236,_237,_238,_239,_240,_241,_242,_243,_244,_245,_246,_247,_248,_249,_250,_rec69,_251,_252,_253,_254,_255,_256,_257}
						       -| ['compiler_generated'] )> when 'true' ->
							apply 'file_size'/2
							    (_rec68, _rec69)
						    -| ['compiler_generated'] )
						  ( <_258> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','head'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					( <_229> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','head'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
			    in  %% Line 2055
				{H2,_20}
			%% Line 2056
			<HeadError = {H2 = {'head',_259,_260,_261,_262,_263,_264,_265,_266,_267,_268,_269,_270,_271,_272,_273,_274,_275,_276,_277,_278,_279,_280,_281,_282,_283,_284,_285,_286,_287},_288}> when ( 'true'
																										   -| ['compiler_generated'] ) ->
			    %% Line 2057
			    HeadError
			( <_21> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_21})
			  -| ['compiler_generated'] )
		      end
	      %% Line 2059
	      <H,'fixed'> when 'true' ->
		  %% Line 2061
		  ( case H of
		      ( <( {'head',_289,_290,_291,_292,_293,_294,_295,_296,_297,_298,_299,_300,_301,_302,_303,_rec70,_304,_305,_306,_307,_308,_309,_310,_311,_312,_313,_314,_315,_316}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_25> =
				call 'erlang':'=/='
				    (_rec70, 'false')
			    in  {H,_25}
			-| ['compiler_generated'] )
		      ( <_317> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 2062
	      <H,'hash'> when 'true' ->
		  ( case H of
		      ( <( {'head',_318,_319,_320,_321,_322,_323,_324,_325,_326,_327,_328,_329,_330,_331,_332,_333,_rec71,_334,_335,_336,_337,_338,_339,_340,_341,_342,_343,_344,_345}
			   -| ['compiler_generated'] )> when 'true' ->
			    {H,_rec71}
			-| ['compiler_generated'] )
		      ( <_346> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 2063
	      <H,'keypos'> when 'true' ->
		  ( case H of
		      ( <( {'head',_347,_348,_349,_350,_351,_352,_353,_354,_355,_rec72,_356,_357,_358,_359,_360,_361,_362,_363,_364,_365,_366,_367,_368,_369,_370,_371,_372,_373,_374}
			   -| ['compiler_generated'] )> when 'true' ->
			    {H,_rec72}
			-| ['compiler_generated'] )
		      ( <_375> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 2064
	      <H,'memory'> when 'true' ->
		  apply 'finfo'/2
		      (H, 'file_size')
	      %% Line 2065
	      <H,'no_objects'> when 'true' ->
		  apply 'finfo'/2
		      (H, 'size')
	      %% Line 2066
	      <H,'no_keys'> when 'true' ->
		  let <_30> =
		      catch
			  %% Line 2067
			  apply 'write_cache'/1
			      (H)
		  in  %% Line 2067
		      case _30 of
			%% Line 2068
			<{H2,[]}> when 'true' ->
			    %% Line 2069
			    ( case H2 of
				( <( {'head',_376,_377,_378,_379,_380,_rec73,_381,_382,_383,_384,_385,_386,_387,_388,_389,_390,_391,_392,_393,_394,_395,_396,_397,_398,_399,_400,_401,_402,_403}
				     -| ['compiler_generated'] )> when 'true' ->
				      {H2,_rec73}
				  -| ['compiler_generated'] )
				( <_404> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','head'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			%% Line 2070
			<HeadError = {H2 = {'head',_405,_406,_407,_408,_409,_410,_411,_412,_413,_414,_415,_416,_417,_418,_419,_420,_421,_422,_423,_424,_425,_426,_427,_428,_429,_430,_431,_432,_433},_434}> when ( 'true'
																										   -| ['compiler_generated'] ) ->
			    %% Line 2071
			    HeadError
			( <_33> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_33})
			  -| ['compiler_generated'] )
		      end
	      %% Line 2073
	      <H,'no_slots'> when 'true' ->
		  let <_34> =
		      call 'dets_v9':'no_slots'
			  (H)
		  in  {H,_34}
	      %% Line 2074
	      <H,'pid'> when 'true' ->
		  let <_35> =
		      call 'erlang':'self'
			  ()
		  in  {H,_35}
	      %% Line 2075
	      <H,'ram_file'> when 'true' ->
		  ( case H of
		      ( <( {'head',_435,_436,_437,_438,_439,_440,_441,_442,_443,_444,_445,_446,_447,_448,_449,_450,_451,_452,_453,_454,_455,_456,_457,_rec74,_458,_459,_460,_461,_462}
			   -| ['compiler_generated'] )> when 'true' ->
			    {H,_rec74}
			-| ['compiler_generated'] )
		      ( <_463> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 2076
	      <H,'safe_fixed'> when 'true' ->
		  %% Line 2078
		  ( case H of
		      ( <( {'head',_464,_465,_466,_467,_468,_469,_470,_471,_472,_473,_474,_475,_476,_477,_478,_rec75,_479,_480,_481,_482,_483,_484,_485,_486,_487,_488,_489,_490,_491}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_42> =
				case _rec75 of
				  %% Line 2079
				  <'false'> when 'true' ->
				      %% Line 2080
				      'false'
				  %% Line 2081
				  <{{FixMonTime,TimeOffset},RefList}> when 'true' ->
				      let <_40> =
					  apply %% Line 2082
						'make_timestamp'/2
					      (%% Line 2082
					       FixMonTime, %% Line 2082
							   TimeOffset)
				      in  %% Line 2082
					  {_40,RefList}
				  ( <_41> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_41})
				    -| ['compiler_generated'] )
				end
			    in  {H,_42}
			-| ['compiler_generated'] )
		      ( <_492> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 2084
	      <H,'safe_fixed_monotonic_time'> when 'true' ->
		  %% Line 2086
		  ( case H of
		      ( <( {'head',_493,_494,_495,_496,_497,_498,_499,_500,_501,_502,_503,_504,_505,_506,_507,_rec76,_508,_509,_510,_511,_512,_513,_514,_515,_516,_517,_518,_519,_520}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_46> =
				case _rec76 of
				  %% Line 2087
				  <'false'> when 'true' ->
				      %% Line 2088
				      'false'
				  %% Line 2089
				  <{{FixMonTime,_X_TimeOffset},RefList}> when 'true' ->
				      %% Line 2090
				      {FixMonTime,RefList}
				  ( <_45> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_45})
				    -| ['compiler_generated'] )
				end
			    in  {H,_46}
			-| ['compiler_generated'] )
		      ( <_521> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 2092
	      <H,'size'> when 'true' ->
		  let <_47> =
		      catch
			  %% Line 2093
			  apply 'write_cache'/1
			      (H)
		  in  %% Line 2093
		      case _47 of
			%% Line 2094
			<{H2,[]}> when 'true' ->
			    %% Line 2095
			    ( case H2 of
				( <( {'head',_522,_523,_524,_525,_rec77,_526,_527,_528,_529,_530,_531,_532,_533,_534,_535,_536,_537,_538,_539,_540,_541,_542,_543,_544,_545,_546,_547,_548,_549}
				     -| ['compiler_generated'] )> when 'true' ->
				      {H2,_rec77}
				  -| ['compiler_generated'] )
				( <_550> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','head'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			%% Line 2096
			<HeadError = {H2 = {'head',_551,_552,_553,_554,_555,_556,_557,_558,_559,_560,_561,_562,_563,_564,_565,_566,_567,_568,_569,_570,_571,_572,_573,_574,_575,_576,_577,_578,_579},_580}> when ( 'true'
																										   -| ['compiler_generated'] ) ->
			    %% Line 2097
			    HeadError
			( <_50> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_50})
			  -| ['compiler_generated'] )
		      end
	      %% Line 2099
	      <H,'type'> when 'true' ->
		  ( case H of
		      ( <( {'head',_581,_582,_583,_584,_585,_586,_587,_588,_rec78,_589,_590,_591,_592,_593,_594,_595,_596,_597,_598,_599,_600,_601,_602,_603,_604,_605,_606,_607,_608}
			   -| ['compiler_generated'] )> when 'true' ->
			    {H,_rec78}
			-| ['compiler_generated'] )
		      ( <_609> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 2100
	      <H,'version'> when 'true' ->
		  {H,9}
	      %% Line 2101
	      <H,_610> when 'true' ->
		  {H,'undefined'}
	    end
	    -| [{'function',{'finfo',2}}] )
      -| [{'function',{'finfo',2}}] )
'file_size'/2 =
    %% Line 2103
    ( fun (_0,_1) ->
	  %% Line 2104
	  case call 'dets_utils':'position'
		   (_0, _1, 'eof') of
	    <{'ok',Pos}> when 'true' ->
		%% Line 2105
		Pos
	    ( <_2> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_2})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'file_size',2}}] )
'test_bchunk_format'/2 =
    %% Line 2107
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <_X_Head,'undefined'> when 'true' ->
		  %% Line 2108
		  'false'
	      %% Line 2109
	      <Head,Term> when 'true' ->
		  let <_2> =
		      call %% Line 2110
			   'dets_v9':%% Line 2110
				     'try_bchunk_header'
			  (%% Line 2110
			   Term, %% Line 2110
				 Head)
		  in  %% Line 2110
		      call 'erlang':'=/='
			  (_2, 'not_ok')
	    end
	    -| [{'function',{'test_bchunk_format',2}}] )
      -| [{'function',{'test_bchunk_format',2}}] )
'do_open_file'/4 =
    %% Line 2112
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <[Fname|[Verbose|[]]],Parent,Server,Ref> when 'true' ->
		  let <_4> =
		      catch
			  %% Line 2113
			  apply 'fopen2'/2
			      (Fname, Ref)
		  in  %% Line 2113
		      case _4 of
			%% Line 2114
			<{'error',{'tooshort',_22}}> when 'true' ->
			    %% Line 2115
			    apply 'err'/1
				({'error',{'not_a_dets_file',Fname}})
			%% Line 2116
			<Error = {'error',_X_Reason}> when 'true' ->
			    %% Line 2117
			    apply 'err'/1
				(Error)
			%% Line 2118
			<{'ok',Head}> when 'true' ->
			    do  %% Line 2119
				apply 'maybe_put'/2
				    ('verbose', Verbose)
				%% Line 2120
				case Head of
				  <{'head',_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51}> when 'true' ->
				      let <_6> =
					  call 'erlang':'setelement'
					      (28, Head, Server)
				      in  let <_8> =
					      call 'erlang':'setelement'
						  (27, _6, Parent)
					  in  {'ok',_8}
				  ( <_52> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','head'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			%% Line 2121
			<Error = {'EXIT',_X_Reason}> when 'true' ->
			    %% Line 2122
			    Error
			%% Line 2123
			<Bad> when 'true' ->
			    do  %% Line 2124
				call 'error_logger':'format'
				    (%% Line 2125
				     [42|[42|[32|[100|[101|[116|[115|[58|[32|[66|[117|[103|[32|[119|[97|[115|[32|[102|[111|[117|[110|[100|[32|[105|[110|[32|[111|[112|[101|[110|[95|[102|[105|[108|[101|[47|[49|[44|[32|[114|[101|[112|[108|[121|[32|[119|[97|[115|[32|[126|[116|[119|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2126
																																											    [Bad|[]])
				%% Line 2127
				{'error',{'dets_bug',Fname,Bad}}
		      end
	      %% Line 2129
	      <[Tab|[OpenArgs|[Verb|[]]]],Parent,Server,_X_Ref> when 'true' ->
		  let <_10> =
		      catch
			  %% Line 2130
			  apply 'fopen3'/2
			      (Tab, OpenArgs)
		  in  %% Line 2130
		      case _10 of
			%% Line 2131
			<{'error',{'tooshort',_53}}> when 'true' ->
			    %% Line 2132
			    ( case OpenArgs of
				( <( {'open_args',_rec80,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63}
				     -| ['compiler_generated'] )> when 'true' ->
				      apply 'err'/1
					  ({'error',{'not_a_dets_file',_rec80}})
				  -| ['compiler_generated'] )
				( <_64> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','open_args'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			%% Line 2133
			<Error = {'error',_X_Reason}> when 'true' ->
			    %% Line 2134
			    apply 'err'/1
				(Error)
			%% Line 2135
			<{'ok',Head}> when 'true' ->
			    do  %% Line 2136
				apply 'maybe_put'/2
				    ('verbose', Verb)
				%% Line 2137
				case Head of
				  <{'head',_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93}> when 'true' ->
				      let <_14> =
					  call 'erlang':'setelement'
					      (28, Head, Server)
				      in  let <_16> =
					      call 'erlang':'setelement'
						  (27, _14, Parent)
					  in  {'ok',_16}
				  ( <_94> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','head'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			%% Line 2138
			<Error = {'EXIT',_X_Reason}> when 'true' ->
			    %% Line 2139
			    Error
			%% Line 2140
			<Bad> when 'true' ->
			    do  %% Line 2141
				call 'error_logger':'format'
				    (%% Line 2142
				     [42|[42|[32|[100|[101|[116|[115|[58|[32|[66|[117|[103|[32|[119|[97|[115|[32|[102|[111|[117|[110|[100|[32|[105|[110|[32|[111|[112|[101|[110|[95|[102|[105|[108|[101|[47|[50|[44|[32|[97|[114|[103|[117|[109|[101|[110|[116|[115|[32|[119|[101|[114|[101|[126|[110|[42|[42|[32|[100|[101|[116|[115|[58|[32|[126|[116|[119|[32|[97|[110|[100|[32|[114|[101|[112|[108|[121|[32|[119|[97|[115|[32|[126|[116|[119|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2144
																																																																			[OpenArgs|[Bad|[]]])
				%% Line 2145
				{'error',{'dets_bug',Tab,{'open_file',OpenArgs},Bad}}
		      end
	      ( <_21,_20,_19,_18> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_21,_20,_19,_18})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'do_open_file',4}}] )
      -| [{'function',{'do_open_file',4}}] )
'maybe_put'/2 =
    %% Line 2148
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <_4,'undefined'> when 'true' ->
		  %% Line 2149
		  'ignore'
	      %% Line 2150
	      <K,V> when 'true' ->
		  %% Line 2151
		  call 'erlang':'put'
		      (K, V)
	    end
	    -| [{'function',{'maybe_put',2}}] )
      -| [{'function',{'maybe_put',2}}] )
'finit'/4 =
    %% Line 2154
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <Head = {'head',_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58},InitFun,_X_Format,_X_NoSlots>
		  when ( try
			  let <_8> =
			      call 'erlang':'element'
				  (24, Head)
			  in  let <_9> =
				  call 'erlang':'=:='
				      (_8, 'read')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _9)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  do  try
			  %% Line 2155
			  apply InitFun
			      (( 'close'
				 -| ['result_not_wanted'] ))
		      of <_catch_value> ->
			  _catch_value
		      catch <Class,Reason,Stk> ->
			  'ok'
		      %% Line 2156
		      ( case Head of
			  ( <( {'head',_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_rec82,_80,_81,_82,_83,_84,_85,_86}
			       -| ['compiler_generated'] )> when 'true' ->
				{Head,{'error',{'access_mode',_rec82}}}
			    -| ['compiler_generated'] )
			  ( <_87> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','head'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      %% Line 2157
	      <Head = {'head',_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116},InitFun,_X_Format,_X_NoSlots>
		  when ( try
			  let <_18> =
			      call 'erlang':'element'
				  (17, Head)
			  in  let <_19> =
				  call 'erlang':'=/='
				      (_18, 'false')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _19)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  do  try
			  %% Line 2158
			  apply InitFun
			      (( 'close'
				 -| ['result_not_wanted'] ))
		      of <_catch_value> ->
			  _catch_value
		      catch <Class,Reason,Stk> ->
			  'ok'
		      %% Line 2159
		      ( case Head of
			  ( <( {'head',_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_rec83,_141,_142,_143,_144}
			       -| ['compiler_generated'] )> when 'true' ->
				{Head,{'error',{'fixed_table',_rec83}}}
			    -| ['compiler_generated'] )
			  ( <_145> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','head'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      %% Line 2160
	      <Head,InitFun,Format,NoSlots> when 'true' ->
		  let <_24> =
		      catch
			  %% Line 2161
			  apply 'do_finit'/4
			      (Head, InitFun, Format, NoSlots)
		  in  %% Line 2161
		      case _24 of
			%% Line 2162
			<{'ok',NewHead}> when 'true' ->
			    do  %% Line 2163
				apply 'check_growth'/1
				    (NewHead)
				do  %% Line 2164
				    apply 'start_auto_save_timer'/1
					(NewHead)
				    %% Line 2165
				    {NewHead,'ok'}
			%% Line 2166
			<'badarg'> when 'true' ->
			    %% Line 2167
			    {Head,'badarg'}
			%% Line 2168
			<Error> when 'true' ->
			    %% Line 2169
			    call 'dets_utils':'corrupt'
				(Head, Error)
		      end
	    end
	    -| [{'function',{'finit',4}}] )
      -| [{'function',{'finit',4}}] )
'do_finit'/4 =
    %% Line 2173
    ( fun (_0,_1,_2,_3) ->
	  %% Line 2177
	  case _0 of
	    <{'head',_34,_35,_36,Fd,_37,_38,_39,_40,Type,Kp,_41,_42,_43,Auto,UpdateMode,_44,_45,_46,MinSlots0,MaxSlots,Cache,Fname,_47,Ram,Tab,_48,_49,_50,_51}> when 'true' ->
		let <CacheSz> =
		    call %% Line 2178
			 'dets_utils':%% Line 2178
				      'cache_size'
			(%% Line 2178
			 Cache)
		in  let <_111,_112> =
			case _2 of
			  %% Line 2181
			  <'term'>
			      when let <_6> =
				    call 'erlang':'is_integer'
					(_3)
				in  let <_7> =
					call 'erlang':'>'
					    (_3, MaxSlots)
				    in  call 'erlang':'and'
					    (_6, _7) ->
			      %% Line 2182
			      call 'erlang':'throw'
				  ('badarg')
			  %% Line 2183
			  <'term'> when 'true' ->
			      let <MinSlots> =
				  apply %% Line 2184
					'choose_no_slots'/2
				      (_3, %% Line 2184
					   MinSlots0)
			      in  %% Line 2185
				  case <> of
				    %% Line 2186
				    <>
					when let <_9> =
					      call 'erlang':'=:='
						  (UpdateMode, 'new_dirty')
					  in  let <_10> =
						  call 'erlang':'=:='
						      (MinSlots, MinSlots0)
					      in  call 'erlang':'and'
						      (_9, _10) ->
					%% Line 2187
					<'general_init',_0>
				    %% Line 2188
				    <> when 'true' ->
					%% Line 2189
					case call 'dets_utils':'truncate'
						 (Fd, Fname, 'bof') of
					  <'ok'> when 'true' ->
					      %% Line 2190
					      case %% Line 2191
						   call 'dets_v9':'initiate_file'
						       (Fd, Tab, Fname, Type, Kp, %% Line 2192
										  MinSlots, %% Line 2192
											    MaxSlots, %% Line 2192
												      Ram, %% Line 2193
													   CacheSz, %% Line 2193
														    Auto, %% Line 2193
															  'false') of
						<{'ok',H}> when 'true' ->
						    %% Line 2194
						    <'general_init',H>
						( <_12> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_12})
						  -| ['compiler_generated'] )
					      end
					  ( <_11> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_11})
					    -| ['compiler_generated'] )
					end
				  end
			  %% Line 2196
			  <'bchunk'> when 'true' ->
			      %% Line 2197
			      case call 'dets_utils':'truncate'
				       (Fd, Fname, 'bof') of
				<'ok'> when 'true' ->
				    %% Line 2198
				    <'bchunk_init',_0>
				( <_13> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_13})
				  -| ['compiler_generated'] )
			      end
			  ( <_14> when 'true' ->
				%% Line 2180
				primop 'match_fail'
				    ({'case_clause',_14})
			    -| ['compiler_generated'] )
			end
		    in  %% Line 2200
			case ( _111
			       -| ['compiler_generated'] ) of
			  %% Line 2201
			  <'bchunk_init'> when 'true' ->
			      %% Line 2202
			      case call 'dets_v9':'bchunk_init'
				       (( _112
					  -| ['compiler_generated'] ), _1) of
				%% Line 2203
				<{'ok',NewHead}> when 'true' ->
				    %% Line 2204
				    case NewHead of
				      <{'head',_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80}> when 'true' ->
					  let <_19> =
					      call 'erlang':'setelement'
						  (16, NewHead, 'dirty')
					  in  {'ok',_19}
				      ( <_81> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','head'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				%% Line 2205
				<Error> when 'true' ->
				    %% Line 2206
				    Error
			      end
			  %% Line 2208
			  <'general_init'> when 'true' ->
			      let <Cntrs> =
				  call %% Line 2209
				       'ets':%% Line 2209
					     'new'
				      (%% Line 2209
				       'dets_init', %% Line 2209
						    [])
			      in  let <Input> =
				      call %% Line 2210
					   'dets_v9':%% Line 2210
						     'bulk_input'
					  (( _112
					     -| ['compiler_generated'] ), _1, %% Line 2210
									      Cntrs)
				  in  %% Line 2211
				      ( case ( _112
					       -| ['compiler_generated'] ) of
					  ( <( {'head',_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_rec85,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109}
					       -| ['compiler_generated'] )> when 'true' ->
						let <SlotNumbers> = {_rec85,'bulk_init',MaxSlots}
						in  %% Line 2212
						    case %% Line 2213
							 apply 'do_sort'/5
							     (( _112
								-| ['compiler_generated'] ), SlotNumbers, Input, Cntrs, Fname) of
						      <{Reply,SizeData}> when 'true' ->
							  %% Line 2215
							  case Reply of
							    %% Line 2216
							    <{'ok',NoDups,H1}> when 'true' ->
								%% Line 2217
								apply 'fsck_copy'/4
								    (SizeData, H1, 'true', NoDups)
							    %% Line 2218
							    <Else> when 'true' ->
								do  %% Line 2219
								    apply 'close_files'/3
									('true', SizeData, ( _112
											     -| ['compiler_generated'] ))
								    %% Line 2220
								    Else
							  end
						      ( <_26> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_26})
							-| ['compiler_generated'] )
						    end
					    -| ['compiler_generated'] )
					  ( <_110> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','head'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
			  ( <_29> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_29})
			    -| ['compiler_generated'] )
			end
	    ( <_4> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_4})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'do_finit',4}}] )
'flookup_keys'/2 =
    %% Line 2225
    ( fun (_0,_1) ->
	  let <_2> =
	      catch
		  %% Line 2226
		  apply 'update_cache'/3
		      (_0, _1, {'lookup','nopid'})
	  in  %% Line 2226
	      case _2 of
		%% Line 2227
		<{NewHead,[{_X_NoPid,Objs}|[]]}> when 'true' ->
		    %% Line 2228
		    {NewHead,Objs}
		%% Line 2229
		<{NewHead,L}>
		    when call 'erlang':'is_list'
			  (L) ->
		    let <_5> =
			fun (_3) ->
			    %% Line 2230
			    case _3 of
			      <{_X_Pid,OL}> when 'true' ->
				  OL
			      ( <_4> when 'true' ->
				    primop 'match_fail'
					({'function_clause',_4})
				-| ['compiler_generated'] )
			    end
		    in  let <_6> =
			    call %% Line 2230
				 'lists':%% Line 2230
					 'flatmap'
				(_5, %% Line 2230
				     L)
			in  %% Line 2230
			    {NewHead,_6}
		%% Line 2231
		<HeadError = {NewHead = {'head',_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38},_39}> when ( 'true'
																						  -| ['compiler_generated'] ) ->
		    %% Line 2232
		    HeadError
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_7})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'flookup_keys',2}}] )
'fmatch_init'/2 =
    %% Line 2236
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Head,{'dets_cont',_5,_6,'eof',_7,_8,_9,_10}> when 'true' ->
		  %% Line 2237
		  {Head,'$end_of_table'}
	      %% Line 2238
	      <Head,C> when 'true' ->
		  %% Line 2239
		  case apply 'scan'/2
			   (Head, C) of
		    %% Line 2240
		    <{'scan_error',Reason}> when 'true' ->
			%% Line 2241
			call 'dets_utils':'corrupt_reason'
			    (Head, Reason)
		    %% Line 2242
		    <_@r0 = {Ts,NC}> when 'true' ->
			%% Line 2243
			{Head,{'cont',_@r0}}
		    ( <_2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_2})
		      -| ['compiler_generated'] )
		  end
	    end
	    -| [{'function',{'fmatch_init',2}}] )
      -| [{'function',{'fmatch_init',2}}] )
'fmatch'/6 =
    %% Line 2247
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  %% Line 2248
	  ( case _0 of
	      ( <( {'head',_30,_31,_32,_33,_34,_35,_36,_37,_38,_rec86,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57}
		   -| ['compiler_generated'] )> when 'true' ->
		    %% Line 2249
		    case apply 'find_all_keys'/3
			     (_2, _rec86, []) of
		      %% Line 2250
		      <[]> when 'true' ->
			  let <_9> =
			      catch
				  %% Line 2252
				  apply 'write_cache'/1
				      (_0)
			  in  %% Line 2252
			      case _9 of
				%% Line 2253
				<{Head1,[]}> when 'true' ->
				    let <_11> =
					case _4 of
					  %% Line 2256
					  <'safe'> when 'true' ->
					      apply 'do_safe_fixtable'/3
						  (Head1, _5, 'true')
					  %% Line 2257
					  <'no_safe'> when 'true' ->
					      Head1
					  ( <_10> when 'true' ->
						%% Line 2255
						primop 'match_fail'
						    ({'case_clause',_10})
					    -| ['compiler_generated'] )
					end
				    in  let <C0> =
					    apply %% Line 2259
						  'init_scan'/2
						(_11, _3)
					in  %% Line 2260
					    case C0 of
					      <{'dets_cont',_59,_60,_61,_62,_63,_64,_65}> when 'true' ->
						  let <_16> =
						      call 'erlang':'setelement'
							  (8, C0, _1)
						  in  {_11,{'cont',_16}}
					      ( <_66> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','dets_cont'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
				%% Line 2261
				<HeadError = {NewHead = {'head',_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95},_96}> when ( 'true'
																								  -| ['compiler_generated'] ) ->
				    %% Line 2262
				    HeadError
				( <_17> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_17})
				  -| ['compiler_generated'] )
			      end
		      %% Line 2264
		      <List> when 'true' ->
			  let <Keys> =
			      call %% Line 2265
				   'lists':%% Line 2265
					   'usort'
				  (%% Line 2265
				   List)
			  in  %% Line 2266
			      case apply 'flookup_keys'/2
				       (_0, Keys) of
				<{NewHead,Reply}> when 'true' ->
				    %% Line 2267
				    case Reply of
				      %% Line 2268
				      <Objs>
					  when call 'erlang':'is_list'
						(Reply) ->
					  %% Line 2269
					  case _1 of
					    <{'match_spec',MS}> when 'true' ->
						let <MatchingObjs> =
						    call %% Line 2270
							 'ets':%% Line 2270
							       'match_spec_run'
							(%% Line 2270
							 Objs, %% Line 2270
							       MS)
						in  %% Line 2271
						    {NewHead,{'done',MatchingObjs}}
					    ( <_20> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_20})
					      -| ['compiler_generated'] )
					  end
				      %% Line 2272
				      <Error> when 'true' ->
					  %% Line 2273
					  {NewHead,Error}
				    end
				( <_19> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_19})
				  -| ['compiler_generated'] )
			      end
		    end
		-| ['compiler_generated'] )
	      ( <_58> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'fmatch',6}}] )
'find_all_keys'/3 =
    %% Line 2277
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <[],_9,Ks> when 'true' ->
		  %% Line 2278
		  Ks
	      %% Line 2279
	      <[{H,_10,_11}|T],KeyPos,Ks>
		  when call 'erlang':'is_tuple'
			(H) ->
		  %% Line 2280
		  case call 'erlang':'tuple_size'
			   (H) of
		    %% Line 2281
		    <Enough>
			when call 'erlang':'>='
			      (Enough,
			       KeyPos) ->
			let <Key> =
			    call %% Line 2282
				 'erlang':%% Line 2282
					  'element'
				(%% Line 2282
				 KeyPos, %% Line 2282
					 H)
			in  %% Line 2283
			    case apply 'contains_variable'/1
				     (Key) of
			      %% Line 2284
			      <'true'> when 'true' ->
				  %% Line 2285
				  []
			      %% Line 2286
			      <'false'> when 'true' ->
				  %% Line 2287
				  apply 'find_all_keys'/3
				      (T, KeyPos, [Key|Ks])
			      ( <_4> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_4})
				-| ['compiler_generated'] )
			    end
		    %% Line 2289
		    <_12> when 'true' ->
			%% Line 2290
			apply 'find_all_keys'/3
			    (T, KeyPos, Ks)
		  end
	      %% Line 2292
	      <_13,_14,_15> when 'true' ->
		  %% Line 2293
		  []
	    end
	    -| [{'function',{'find_all_keys',3}}] )
      -| [{'function',{'find_all_keys',3}}] )
'contains_variable'/1 =
    %% Line 2295
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'contains_variable',1}}] ) of
	      <'_'> when 'true' ->
		  %% Line 2296
		  'true'
	      %% Line 2297
	      <A>
		  when call 'erlang':'is_atom'
			(( _0
			   -| [{'function',{'contains_variable',1}}] )) ->
		  %% Line 2298
		  case call 'erlang':'atom_to_list'
			   (A) of
		    %% Line 2299
		    <[36|T]> when 'true' ->
			let <_1> =
			    catch
				%% Line 2300
				call 'erlang':'list_to_integer'
				    (T)
			in  %% Line 2300
			    case _1 of
			      %% Line 2301
			      <{'EXIT',_7}> when 'true' ->
				  %% Line 2302
				  'false'
			      %% Line 2303
			      <_8> when 'true' ->
				  %% Line 2304
				  'true'
			    end
		    %% Line 2306
		    <_9> when 'true' ->
			%% Line 2307
			'false'
		  end
	      %% Line 2309
	      <T>
		  when call 'erlang':'is_tuple'
			(( _0
			   -| [{'function',{'contains_variable',1}}] )) ->
		  let <_4> =
		      call %% Line 2310
			   'erlang':%% Line 2310
				    'tuple_to_list'
			  (%% Line 2310
			   T)
		  in  %% Line 2310
		      apply 'contains_variable'/1
			  (_4)
	      %% Line 2311
	      <[]> when 'true' ->
		  %% Line 2312
		  'false'
	      %% Line 2313
	      <[H|T]> when 'true' ->
		  %% Line 2314
		  case apply 'contains_variable'/1
			   (H) of
		    %% Line 2315
		    <'true'> when 'true' ->
			%% Line 2316
			'true'
		    %% Line 2317
		    <'false'> when 'true' ->
			%% Line 2318
			apply 'contains_variable'/1
			    (T)
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_5})
		      -| ['compiler_generated'] )
		  end
	      %% Line 2320
	      <_10> when 'true' ->
		  %% Line 2321
		  'false'
	    end
	    -| [{'function',{'contains_variable',1}}] )
      -| [{'function',{'contains_variable',1}}] )
'fmatch_delete_init'/4 =
    %% Line 2324
    ( fun (_0,_1,_2,_3) ->
	  %% Line 2325
	  ( case _0 of
	      ( <( {'head',_15,_16,_17,_18,_19,_20,_21,_22,_23,_rec88,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42}
		   -| ['compiler_generated'] )> when 'true' ->
		    let <_9> =
			catch
			    %% Line 2327
			    case apply 'find_all_keys'/3
				     (_2, _rec88, []) of
			      %% Line 2328
			      <[]> when 'true' ->
				  %% Line 2329
				  apply 'do_fmatch_delete_var_keys'/4
				      (_0, _1, _2, _3)
			      %% Line 2330
			      <List> when 'true' ->
				  let <Keys> =
				      call %% Line 2331
					   'lists':%% Line 2331
						   'usort'
					  (%% Line 2331
					   List)
				  in  %% Line 2332
				      apply 'do_fmatch_constant_keys'/3
					  (_0, Keys, _1)
			    end
		    in  %% Line 2326
			case _9 of
			  %% Line 2334
			  <Reply = {NewHead = {'head',_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72},_73}> when ( 'true'
																							-| ['compiler_generated'] ) ->
			      %% Line 2335
			      Reply
			  ( <_10> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_10})
			    -| ['compiler_generated'] )
			end
		-| ['compiler_generated'] )
	      ( <_43> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'fmatch_delete_init',4}}] )
'fmatch_delete'/2 =
    %% Line 2343
    ( fun (_0,_1) ->
	  %% Line 2344
	  case apply 'scan'/2
		   (_0, _1) of
	    %% Line 2345
	    <{'scan_error',Reason}> when 'true' ->
		%% Line 2346
		call 'dets_utils':'corrupt_reason'
		    (_0, Reason)
	    %% Line 2347
	    <{[],_11}> when 'true' ->
		%% Line 2348
		{_0,{'done',0}}
	    %% Line 2349
	    <{RTs,NC}> when 'true' ->
		%% Line 2350
		( case _1 of
		    ( <( {'dets_cont',_12,_13,_14,_15,_16,_17,_rec89}
			 -| ['compiler_generated'] )> when 'true' ->
			  case _rec89 of
			    <{'match_spec',MP}> when 'true' ->
				let <_5> =
				    catch
					%% Line 2351
					apply 'filter_binary_terms'/3
					    (RTs, MP, [])
				in  %% Line 2351
				    case _5 of
				      %% Line 2352
				      <{'EXIT',_19}> when 'true' ->
					  let <Bad> =
					      call %% Line 2353
						   'dets_utils':%% Line 2353
								'bad_object'
						  (%% Line 2353
						   'fmatch_delete', %% Line 2353
								    RTs)
					  in  %% Line 2354
					      call 'dets_utils':'corrupt_reason'
						  (_0, Bad)
				      %% Line 2355
				      <Terms> when 'true' ->
					  %% Line 2356
					  apply 'do_fmatch_delete'/3
					      (_0, Terms, NC)
				    end
			    ( <_4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_4})
			      -| ['compiler_generated'] )
			  end
		      -| ['compiler_generated'] )
		    ( <_18> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','dets_cont'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
	    ( <_8> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_8})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'fmatch_delete',2}}] )
'do_fmatch_delete_var_keys'/4 =
    %% Line 2360
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <Head = {'head',_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53},_X_MP,[{'_',[],['true']}],_X_From>
		  when %% Line 2361
		    ( try
			  let <_8> =
			      call 'erlang':'element'
				  (17, Head)
			  in  let <_9> =
				  call 'erlang':'=:='
				      (_8, 'false')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _9)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 2364
		  case apply 'write_cache'/1
			   (Head) of
		    <{Head1,[]}> when 'true' ->
			%% Line 2365
			( case Head1 of
			    ( <( {'head',_54,_55,_56,_57,_rec90,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81}
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 2366
				  case apply 'fdelete_all_objects'/1
					   (Head1) of
				    %% Line 2367
				    <{NewHead,'ok'}> when 'true' ->
					%% Line 2368
					{NewHead,{'done',_rec90}}
				    %% Line 2369
				    <Reply> when 'true' ->
					%% Line 2370
					Reply
				  end
			      -| ['compiler_generated'] )
			    ( <_82> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','head'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_10> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_10})
		      -| ['compiler_generated'] )
		  end
	      %% Line 2372
	      <Head,MP,_X_Spec,From> when 'true' ->
		  let <Head1> =
		      apply %% Line 2373
			    'do_safe_fixtable'/3
			  (%% Line 2373
			   Head, %% Line 2373
				 From, %% Line 2373
				       'true')
		  in  %% Line 2374
		      case apply 'write_cache'/1
			       (Head1) of
			<{NewHead,[]}> when 'true' ->
			    let <C0> =
				apply %% Line 2375
				      'init_scan'/2
				    (%% Line 2375
				     NewHead, %% Line 2375
					      'default')
			    in  %% Line 2376
				case C0 of
				  <{'dets_cont',_83,_84,_85,_86,_87,_88,_89}> when 'true' ->
				      let <_20> =
					  call 'erlang':'setelement'
					      (8, C0, MP)
				      in  {NewHead,{'cont',_20,0}}
				  ( <_90> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','dets_cont'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			( <_16> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_16})
			  -| ['compiler_generated'] )
		      end
	    end
	    -| [{'function',{'do_fmatch_delete_var_keys',4}}] )
      -| [{'function',{'do_fmatch_delete_var_keys',4}}] )
'do_fmatch_constant_keys'/3 =
    %% Line 2378
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <Head,Keys,{'match_spec',MP}> when 'true' ->
		  %% Line 2379
		  case apply 'flookup_keys'/2
			   (Head, Keys) of
		    %% Line 2380
		    <{NewHead,ReadTerms}>
			when call 'erlang':'is_list'
			      (ReadTerms) ->
			let <Terms> =
			    apply %% Line 2381
				  'filter_terms'/3
				(%% Line 2381
				 ReadTerms, %% Line 2381
					    MP, %% Line 2381
						[])
			in  %% Line 2382
			    apply 'do_fmatch_delete'/3
				(NewHead, Terms, 'fixed')
		    %% Line 2383
		    <Reply> when 'true' ->
			%% Line 2384
			Reply
		  end
	      ( <_7,_6,_5> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_7,_6,_5})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'do_fmatch_constant_keys',3}}] )
      -| [{'function',{'do_fmatch_constant_keys',3}}] )
'filter_binary_terms'/3 =
    %% Line 2387
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <[Bin|Bins],MP,L> when 'true' ->
		  let <Term> =
		      call %% Line 2388
			   'erlang':%% Line 2388
				    'binary_to_term'
			  (%% Line 2388
			   Bin)
		  in  %% Line 2389
		      case call 'ets':'match_spec_run'
			       ([Term|[]], MP) of
			%% Line 2390
			<['true']> when 'true' ->
			    %% Line 2391
			    apply 'filter_binary_terms'/3
				(Bins, MP, [Term|L])
			%% Line 2392
			<_8> when 'true' ->
			    %% Line 2393
			    apply 'filter_binary_terms'/3
				(Bins, MP, L)
		      end
	      %% Line 2395
	      <[],_X_MP,L> when 'true' ->
		  %% Line 2396
		  L
	      ( <_7,_6,_5> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_7,_6,_5})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'filter_binary_terms',3}}] )
      -| [{'function',{'filter_binary_terms',3}}] )
'filter_terms'/3 =
    %% Line 2398
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <[Term|Terms],MP,L> when 'true' ->
		  %% Line 2399
		  case call 'ets':'match_spec_run'
			   ([Term|[]], MP) of
		    %% Line 2400
		    <['true']> when 'true' ->
			%% Line 2401
			apply 'filter_terms'/3
			    (Terms, MP, [Term|L])
		    %% Line 2402
		    <_7> when 'true' ->
			%% Line 2403
			apply 'filter_terms'/3
			    (Terms, MP, L)
		  end
	      %% Line 2405
	      <[],_X_MP,L> when 'true' ->
		  %% Line 2406
		  L
	      ( <_6,_5,_4> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_6,_5,_4})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'filter_terms',3}}] )
      -| [{'function',{'filter_terms',3}}] )
'do_fmatch_delete'/3 =
    %% Line 2408
    ( fun (_0,_1,_2) ->
	  let <N> =
	      call %% Line 2409
		   'erlang':%% Line 2409
			    'length'
		  (_1)
	  in  %% Line 2410
	      case apply 'do_delete'/3
		       (_0, _1, 'delete_object') of
		%% Line 2411
		<{NewHead,'ok'}>
		    when call 'erlang':'=:='
			  (_2,
			   'fixed') ->
		    %% Line 2412
		    {NewHead,{'done',N}}
		%% Line 2413
		<{NewHead,'ok'}> when 'true' ->
		    %% Line 2414
		    {NewHead,{'cont',_2,N}}
		%% Line 2415
		<Reply> when 'true' ->
		    %% Line 2416
		    Reply
	      end
      -| [{'function',{'do_fmatch_delete',3}}] )
'do_delete'/3 =
    %% Line 2419
    ( fun (_0,_1,_2) ->
	  let <_3> =
	      catch
		  %% Line 2420
		  apply 'update_cache'/3
		      (_0, _1, _2)
	  in  %% Line 2420
	      case _3 of
		%% Line 2421
		<{NewHead,[]}> when 'true' ->
		    %% Line 2422
		    {NewHead,'ok'}
		%% Line 2423
		<HeadError = {NewHead = {'head',_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36},_37}> when ( 'true'
																						-| ['compiler_generated'] ) ->
		    %% Line 2424
		    HeadError
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'do_delete',3}}] )
'fnext'/2 =
    %% Line 2427
    ( fun (_0,_1) ->
	  let <Slot> =
	      call %% Line 2428
		   'dets_v9':%% Line 2428
			     'db_hash'
		  (_1, _0)
	  in  let <Ref> =
		  call %% Line 2429
		       'erlang':%% Line 2429
				'make_ref'
		      ()
	      in  let <_5> =
		      catch
			  let <_4> =
			      apply %% Line 2430
				    'fnext'/3
				  (_0, _1, %% Line 2430
					   Slot)
			  in  %% Line 2430
			      {Ref,_4}
		  in  %% Line 2430
		      case _5 of
			%% Line 2431
			<{_9,{H,R}}>
			    when call 'erlang':'=:='
				  (_9,
				   Ref) ->
			    %% Line 2432
			    {H,{'ok',R}}
			%% Line 2433
			<HeadError = {NewHead = {'head',_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38},_39}> when ( 'true'
																							  -| ['compiler_generated'] ) ->
			    %% Line 2434
			    HeadError
			( <_6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_6})
			  -| ['compiler_generated'] )
		      end
      -| [{'function',{'fnext',2}}] )
'fnext'/3 =
    %% Line 2437
    ( fun (_0,_1,_2) ->
	  %% Line 2438
	  case apply 'write_cache'/1
		   (_0) of
	    <{NH,[]}> when 'true' ->
		%% Line 2439
		case call 'dets_v9':'slot_objs'
			 (NH, _2) of
		  %% Line 2440
		  <'$end_of_table'> when 'true' ->
		      {NH,'$end_of_table'}
		  %% Line 2441
		  <L> when 'true' ->
		      apply 'fnext_search'/4
			  (NH, _1, _2, L)
		end
	    ( <_3> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_3})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'fnext',3}}] )
'fnext_search'/4 =
    %% Line 2444
    ( fun (_0,_1,_2,_3) ->
	  %% Line 2445
	  ( case _0 of
	      ( <( {'head',_17,_18,_19,_20,_21,_22,_23,_24,_25,_rec92,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44}
		   -| ['compiler_generated'] )> when 'true' ->
		    %% Line 2446
		    case apply 'beyond_key'/3
			     (_1, _rec92, _3) of
		      %% Line 2447
		      <[]> when 'true' ->
			  let <_7> =
			      call 'erlang':'+'
				  (_2, 1)
			  in  apply 'fnext_slot'/3
				  (_0, _1, _7)
		      %% Line 2448
		      <L2> when 'true' ->
			  ( case _0 of
			      ( <( {'head',_46,_47,_48,_49,_50,_51,_52,_53,_54,_rec93,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73}
				   -| ['compiler_generated'] )> when 'true' ->
				    let <_8> =
					call 'erlang':'hd'
					    (L2)
				    in  let <_11> =
					    call 'erlang':'element'
						(_rec93, _8)
					in  {_0,_11}
				-| ['compiler_generated'] )
			      ( <_74> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','head'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		    end
		-| ['compiler_generated'] )
	      ( <_45> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'fnext_search',4}}] )
'fnext_slot'/3 =
    %% Line 2452
    ( fun (_0,_1,_2) ->
	  %% Line 2453
	  case call 'dets_v9':'slot_objs'
		   (_0, _2) of
	    %% Line 2454
	    <'$end_of_table'> when 'true' ->
		{_0,'$end_of_table'}
	    %% Line 2455
	    <[]> when 'true' ->
		let <_3> =
		    call 'erlang':'+'
			(_2, 1)
		in  apply 'fnext_slot'/3
			(_0, _1, _3)
	    %% Line 2456
	    <L> when 'true' ->
		( case _0 of
		    ( <( {'head',_12,_13,_14,_15,_16,_17,_18,_19,_20,_rec94,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39}
			 -| ['compiler_generated'] )> when 'true' ->
			  let <_4> =
			      call 'erlang':'hd'
				  (L)
			  in  let <_7> =
				  call 'erlang':'element'
				      (_rec94, _4)
			      in  {_0,_7}
		      -| ['compiler_generated'] )
		    ( <_40> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','head'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
	  end
      -| [{'function',{'fnext_slot',3}}] )
'beyond_key'/3 =
    %% Line 2459
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <_X_K,_X_Kp,[]> when 'true' ->
		  []
	      %% Line 2460
	      <K,Kp,[H|T]> when 'true' ->
		  let <_3> =
		      call %% Line 2461
			   'erlang':%% Line 2461
				    'element'
			  (%% Line 2461
			   Kp, %% Line 2461
			       H)
		  in  %% Line 2461
		      case call 'dets_utils':'cmp'
			       (_3, K) of
			%% Line 2462
			<0> when 'true' ->
			    apply 'beyond_key2'/3
				(K, Kp, T)
			%% Line 2463
			<_8> when 'true' ->
			    apply 'beyond_key'/3
				(K, Kp, T)
		      end
	      ( <_7,_6,_5> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_7,_6,_5})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'beyond_key',3}}] )
      -| [{'function',{'beyond_key',3}}] )
'beyond_key2'/3 =
    %% Line 2466
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <_X_K,_X_Kp,[]> when 'true' ->
		  []
	      %% Line 2467
	      <K,Kp,L = [H|T]> when 'true' ->
		  let <_3> =
		      call %% Line 2468
			   'erlang':%% Line 2468
				    'element'
			  (%% Line 2468
			   Kp, %% Line 2468
			       H)
		  in  %% Line 2468
		      case call 'dets_utils':'cmp'
			       (_3, K) of
			%% Line 2469
			<0> when 'true' ->
			    apply 'beyond_key2'/3
				(K, Kp, T)
			%% Line 2470
			<_8> when 'true' ->
			    L
		      end
	      ( <_7,_6,_5> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_7,_6,_5})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'beyond_key2',3}}] )
      -| [{'function',{'beyond_key2',3}}] )
'fopen2'/2 =
    %% Line 2475
    ( fun (_0,_1) ->
	  %% Line 2476
	  case call 'file':'read_file_info'
		   (_0) of
	    %% Line 2477
	    <{'ok',_23}> when 'true' ->
		%% Line 2480
		case apply 'read_file_header'/3
			 (_0, 'read_write', 'false') of
		  <{'ok',Fd,FH}> when 'true' ->
		      let <_16> =
			  case %% Line 2481
			       call 'dets_v9':'check_file_header'
				   (FH, Fd) of
			    %% Line 2482
			    <{'ok',Head1}> when 'true' ->
				%% Line 2483
				case Head1 of
				  <{'head',_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52}> when 'true' ->
				      let <_7> =
					  call 'erlang':'setelement'
					      (23, Head1, _0)
				      in  %% Line 2484
					  try
					      let <_9> =
						  call 'dets_v9':'init_freelist'
						      (_7)
					      in  {'ok',_9}
					  of <_10> ->
					      _10
					  catch <_13,_12,_11> ->
					      %% Line 2486
					      case <_13,_12,_11> of
						<( 'throw'
						   -| ['compiler_generated'] ),_54,_55> when 'true' ->
						    %% Line 2487
						    {'repair',[32|[104|[97|[115|[32|[98|[97|[100|[32|[102|[114|[101|[101|[32|[108|[105|[115|[116|[115|[44|[32|[114|[101|[112|[97|[105|[114|[105|[110|[103|[32|[46|[46|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}
						( <_56,_57,_58> when 'true' ->
						      primop 'raise'
							  (_58, _57)
						  -| ['compiler_generated'] )
					      end
				  ( <_53> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','head'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			    %% Line 2489
			    <{'error','not_closed'}> when 'true' ->
				%% Line 2491
				{'repair',[32|[110|[111|[116|[32|[112|[114|[111|[112|[101|[114|[108|[121|[32|[99|[108|[111|[115|[101|[100|[44|[32|[114|[101|[112|[97|[105|[114|[105|[110|[103|[32|[46|[46|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}
			    %% Line 2492
			    <Else> when 'true' ->
				%% Line 2493
				Else
			  end
		      in  %% Line 2495
			  case _16 of
			    %% Line 2496
			    <{'repair',Mess}> when 'true' ->
				do  %% Line 2497
				    call 'io':'format'
					('user', [100|[101|[116|[115|[58|[32|[102|[105|[108|[101|[32|[126|[116|[112|[126|[115|[126|[110]]]]]]]]]]]]]]]]]], [_0|[Mess|[]]])
				    %% Line 2498
				    case apply 'fsck'/6
					     (Fd, _1, _0, FH, 'default', 'default') of
				      %% Line 2499
				      <'ok'> when 'true' ->
					  %% Line 2500
					  apply 'fopen2'/2
					      (_0, _1)
				      %% Line 2501
				      <Error> when 'true' ->
					  %% Line 2502
					  call 'erlang':'throw'
					      (Error)
				    end
			    %% Line 2504
			    <{'ok',Head}> when 'true' ->
				%% Line 2505
				apply 'open_final'/7
				    (Head, _0, 'read_write', 'false', {3000,14000}, _1, %% Line 2506
											'false')
			    %% Line 2507
			    <{'error',Reason}> when 'true' ->
				%% Line 2508
				call 'erlang':'throw'
				    ({'error',{Reason,_0}})
			    ( <_19> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_19})
			      -| ['compiler_generated'] )
			  end
		  ( <_4> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_4})
		    -| ['compiler_generated'] )
		end
	    %% Line 2510
	    <Error> when 'true' ->
		%% Line 2511
		call 'dets_utils':'file_error'
		    (_0, Error)
	  end
      -| [{'function',{'fopen2',2}}] )
'fopen3'/2 =
    %% Line 2516
    ( fun (_0,_1) ->
	  %% Line 2517
	  ( case _1 of
	      ( <( {'open_args',_rec96,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23}
		   -| ['compiler_generated'] )> when 'true' ->
		    %% Line 2518
		    case call 'file':'read_file_info'
			     (_rec96) of
		      %% Line 2519
		      <{'ok',_25}> when 'true' ->
			  %% Line 2520
			  apply 'fopen_existing_file'/2
			      (_0, _1)
		      %% Line 2521
		      <Error>
			  when ( try
				  ( let <_7> =
					case ( call ( 'erlang'
						      -| ['compiler_generated'] ):( 'is_record'
										    -| ['compiler_generated'] )
						   (_1, ( 'open_args'
							  -| ['compiler_generated'] ), ( 12
											 -| ['compiler_generated'] ))
					       -| ['compiler_generated'] ) of
					  ( <( 'true'
					       -| ['compiler_generated'] )> when 'true' ->
						( 'true'
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <( 'false'
					       -| ['compiler_generated'] )> when 'true' ->
						( 'fail'
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <( _5
					       -| ['compiler_generated'] )> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {( 'badarg'
							    -| ['compiler_generated'] ),( _5
											  -| ['compiler_generated'] )}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
				    in  let <_8> =
					    call 'erlang':'=:='
						(( _7
						   -| ['compiler_generated'] ), 'true')
					in  let <_9> =
						call 'erlang':'element'
						    (11, _1)
					    in  let <_10> =
						    call 'erlang':'=:='
							(_9, 'read')
						in  ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'and'
											   -| ['compiler_generated'] )
							  (_8, _10)
						      -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false'
			      -| ['compiler_generated'] ) ->
			  %% Line 2522
			  call 'dets_utils':'file_error'
			      (_rec96, Error)
		      %% Line 2523
		      <_X_Error> when 'true' ->
			  %% Line 2524
			  apply 'fopen_init_file'/2
			      (_0, _1)
		    end
		-| ['compiler_generated'] )
	      ( <_24> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','open_args'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'fopen3',2}}] )
'fopen_existing_file'/2 =
    %% Line 2527
    ( fun (_0,_1) ->
	  %% Line 2531
	  case _1 of
	    <{'open_args',Fname,Type,Kp,Rep,MinSlots,MaxSlots,Ram,CacheSz,Auto,Acc,Debug}> when 'true' ->
		%% Line 2533
		case apply 'read_file_header'/3
			 (Fname, Acc, Ram) of
		  <{'ok',Fd,FH}> when 'true' ->
		      let <_7> =
			  call %% Line 2534
			       'erlang':%% Line 2534
					'=:='
			      (%% Line 2534
			       MinSlots, %% Line 2534
					 'default')
		      in  %% Line 2534
			  ( case FH of
			      ( <( {'fileheader',_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_rec97,_92,_93,_94,_95,_96,_97,_98,_99,_100}
				   -| ['compiler_generated'] )> when 'true' ->
				    let <_6> =
					call 'erlang':'=:='
					    (MinSlots, _rec97)
				    in  let <MinF> =
					    call 'erlang':'or'
						(_7, _6)
					in  let <_12> =
						call %% Line 2535
						     'erlang':%% Line 2535
							      '=:='
						    (%% Line 2535
						     MaxSlots, %% Line 2535
							       'default')
					    in  %% Line 2535
						( case FH of
						    ( <( {'fileheader',_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_rec98,_114,_115,_116,_117,_118,_119,_120,_121}
							 -| ['compiler_generated'] )> when 'true' ->
							  let <_11> =
							      call 'erlang':'=:='
								  (MaxSlots, _rec98)
							  in  let <MaxF> =
								  call 'erlang':'or'
								      (_12, _11)
							      in  let <_38> =
								      case %% Line 2536
									   call 'dets_v9':'check_file_header'
									       (FH, Fd) of
									%% Line 2537
									<{'ok',Head}>
									    when try
										  let <_14> =
										      call 'erlang':'=:='
											  (Rep, 'force')
										  in  let <_15> =
											  call 'erlang':'=:='
											      (Acc, 'read_write')
										      in  ( let <_18> =
												case %% Line 2538
												     ( call ( 'erlang'
													      -| ['compiler_generated'] ):( 'is_record'
																	    -| ['compiler_generated'] )
													   (FH, ( 'fileheader'
														  -| ['compiler_generated'] ), ( 22
																		 -| ['compiler_generated'] ))
												       -| ['compiler_generated'] ) of
												  %% Line 2538
												  ( <( 'true'
												       -| ['compiler_generated'] )> when 'true' ->
													( 'true'
													  -| ['compiler_generated'] )
												    -| ['compiler_generated'] )
												  %% Line 2538
												  ( <( 'false'
												       -| ['compiler_generated'] )> when 'true' ->
													( 'fail'
													  -| ['compiler_generated'] )
												    -| ['compiler_generated'] )
												  %% Line 2538
												  ( <( _16
												       -| ['compiler_generated'] )> when 'true' ->
													( call ( 'erlang'
														 -| ['compiler_generated'] ):( 'error'
																	       -| ['compiler_generated'] )
													      (( {( 'badarg'
														    -| ['compiler_generated'] ),( _16
																		  -| ['compiler_generated'] )}
														 -| ['compiler_generated'] ))
													  -| ['compiler_generated'] )
												    -| ['compiler_generated'] )
												end
											    in  let <_19> =
												    call 'erlang':'=:='
													(%% Line 2538
													 ( _18
													   -| ['compiler_generated'] ), 'true')
												in  let <_20> =
													call %% Line 2538
													     'erlang':%% Line 2538
														      'element'
													    (%% Line 2538
													     15, %% Line 2538
														 FH)
												    in  let <_21> =
													    call %% Line 2538
														 'erlang':%% Line 2538
															  '=/='
														(_20, %% Line 2538
														      'undefined')
													in  let <_22> =
														call %% Line 2538
														     ( 'erlang'
														       -| ['compiler_generated'] ):%% Line 2538
																		   ( 'and'
																		     -| ['compiler_generated'] )
														    (_19, _21)
													    in  let <_23> =
														    call 'erlang':'=:='
															(%% Line 2539
															 MinF, 'true')
														in  let <_24> =
															call 'erlang':'=:='
															    (%% Line 2539
															     MaxF, 'true')
														    in  let <_25> =
															    call 'erlang':'and'
																(_23, _24)
															in  let <_26> =
																call 'erlang':'and'
																    (_22, _25)
															    in  let <_27> =
																    call 'erlang':'and'
																	(_15, _26)
																in  call 'erlang':'and'
																	(_14, _27)
											    -| ['compiler_generated'] )
									      of <Try> ->
										  Try
									      catch <T,R> ->
										  'false' ->
									    %% Line 2540
									    {'compact',Head}
									%% Line 2541
									<{'ok',_X_Head}>
									    when let <_28> =
										  call 'erlang':'=:='
										      (Rep, 'force')
									      in  let <_29> =
										      call 'erlang':'=:='
											  (Acc, 'read')
										  in  call 'erlang':'and'
											  (_28, _29) ->
									    %% Line 2542
									    call 'erlang':'throw'
										({'error',{'access_mode',Fname}})
									%% Line 2543
									<{'ok',_X_Head}>
									    when call 'erlang':'=:='
										  (Rep,
										   'force') ->
									    %% Line 2545
									    {'repair',[44|[32|[114|[101|[112|[97|[105|[114|[32|[102|[111|[114|[99|[101|[100|[46]]]]]]]]]]]]]]]]}
									%% Line 2546
									<{'ok',Head}> when 'true' ->
									    %% Line 2547
									    {'final',Head}
									%% Line 2548
									<{'error','not_closed'}>
									    when let <_31> =
										  call 'erlang':'=:='
										      (Rep, 'force')
									      in  let <_32> =
										      call 'erlang':'=:='
											  (Acc, 'read_write')
										  in  call 'erlang':'and'
											  (_31, _32) ->
									    %% Line 2550
									    {'repair',[44|[32|[114|[101|[112|[97|[105|[114|[32|[102|[111|[114|[99|[101|[100|[46]]]]]]]]]]]]]]]]}
									%% Line 2551
									<{'error','not_closed'}>
									    when let <_34> =
										  call 'erlang':'=:='
										      (Rep, 'true')
									      in  let <_35> =
										      call 'erlang':'=:='
											  (Acc, 'read_write')
										  in  call 'erlang':'and'
											  (_34, _35) ->
									    %% Line 2553
									    {'repair',[32|[110|[111|[116|[32|[112|[114|[111|[112|[101|[114|[108|[121|[32|[99|[108|[111|[115|[101|[100|[44|[32|[114|[101|[112|[97|[105|[114|[105|[110|[103|[32|[46|[46|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}
									%% Line 2554
									<{'error','not_closed'}>
									    when call 'erlang':'=:='
										  (Rep,
										   'false') ->
									    %% Line 2555
									    call 'erlang':'throw'
										({'error',{'needs_repair',Fname}})
									%% Line 2556
									<{'error',Reason}> when 'true' ->
									    %% Line 2557
									    call 'erlang':'throw'
										({'error',{Reason,Fname}})
									( <_37> when 'true' ->
									      %% Line 2536
									      primop 'match_fail'
										  ({'case_clause',_37})
									  -| ['compiler_generated'] )
								      end
								  in  let <_52> =
									  case _38 of
									    %% Line 2560
									    <{Tag,Hd}>
										when let <_40> =
										      call 'erlang':'=:='
											  (Tag, 'final')
										  in  let <_41> =
											  call 'erlang':'=:='
											      (Tag, 'compact')
										      in  call 'erlang':'or'
											      (_40, _41) ->
										%% Line 2561
										case Hd of
										  <{'head',_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151}> when 'true' ->
										      let <_44> =
											  call 'erlang':'setelement'
											      (23, Hd, Fname)
										      in  %% Line 2562
											  try
											      let <_46> =
												  call 'dets_v9':'init_freelist'
												      (_44)
											      in  {Tag,_46}
											  of <_47> ->
											      _47
											  catch <_50,_49,_48> ->
											      %% Line 2564
											      case <_50,_49,_48> of
												<( 'throw'
												   -| ['compiler_generated'] ),_153,_154> when 'true' ->
												    %% Line 2565
												    {'repair',[32|[104|[97|[115|[32|[98|[97|[100|[32|[102|[114|[101|[101|[32|[108|[105|[115|[116|[115|[44|[32|[114|[101|[112|[97|[105|[114|[105|[110|[103|[32|[46|[46|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}
												( <_199,_200,_201> when 'true' ->
												      primop 'raise'
													  (_201, _200)
												  -| ['compiler_generated'] )
											      end
										  ( <_152> when 'true' ->
											( call ( 'erlang'
												 -| ['compiler_generated'] ):( 'error'
															       -| ['compiler_generated'] )
											      (( {'badrecord','head'}
												 -| ['compiler_generated'] ))
											  -| ['compiler_generated'] )
										    -| ['compiler_generated'] )
										end
									    %% Line 2567
									    <Else> when 'true' ->
										%% Line 2568
										Else
									  end
								      in  %% Line 2570
									  case _52 of
									    %% Line 2571
									    <_155>
										when ( try
											( let <_56> =
											      case ( call ( 'erlang'
													    -| ['compiler_generated'] ):( 'is_record'
																	  -| ['compiler_generated'] )
													 (FH, ( 'fileheader'
														-| ['compiler_generated'] ), ( 22
																	       -| ['compiler_generated'] ))
												     -| ['compiler_generated'] ) of
												( <( 'true'
												     -| ['compiler_generated'] )> when 'true' ->
												      ( 'true'
													-| ['compiler_generated'] )
												  -| ['compiler_generated'] )
												( <( 'false'
												     -| ['compiler_generated'] )> when 'true' ->
												      ( 'fail'
													-| ['compiler_generated'] )
												  -| ['compiler_generated'] )
												( <( _54
												     -| ['compiler_generated'] )> when 'true' ->
												      ( call ( 'erlang'
													       -| ['compiler_generated'] ):( 'error'
																	     -| ['compiler_generated'] )
													    (( {( 'badarg'
														  -| ['compiler_generated'] ),( _54
																		-| ['compiler_generated'] )}
													       -| ['compiler_generated'] ))
													-| ['compiler_generated'] )
												  -| ['compiler_generated'] )
											      end
											  in  let <_57> =
												  call 'erlang':'=:='
												      (( _56
													 -| ['compiler_generated'] ), 'true')
											      in  let <_58> =
												      call 'erlang':'element'
													  (6, FH)
												  in  let <_59> =
													  call 'erlang':'=/='
													      (_58, Type)
												      in  ( call ( 'erlang'
														   -| ['compiler_generated'] ):( 'and'
																		 -| ['compiler_generated'] )
														(_57, _59)
													    -| ['compiler_generated'] )
											  -| ['compiler_generated'] )
										    of <Try> ->
											Try
										    catch <T,R> ->
											'false'
										    -| ['compiler_generated'] ) ->
										%% Line 2572
										call 'erlang':'throw'
										    ({'error',{'type_mismatch',Fname}})
									    %% Line 2573
									    <_156>
										when ( try
											( let <_62> =
											      case ( call ( 'erlang'
													    -| ['compiler_generated'] ):( 'is_record'
																	  -| ['compiler_generated'] )
													 (FH, ( 'fileheader'
														-| ['compiler_generated'] ), ( 22
																	       -| ['compiler_generated'] ))
												     -| ['compiler_generated'] ) of
												( <( 'true'
												     -| ['compiler_generated'] )> when 'true' ->
												      ( 'true'
													-| ['compiler_generated'] )
												  -| ['compiler_generated'] )
												( <( 'false'
												     -| ['compiler_generated'] )> when 'true' ->
												      ( 'fail'
													-| ['compiler_generated'] )
												  -| ['compiler_generated'] )
												( <( _60
												     -| ['compiler_generated'] )> when 'true' ->
												      ( call ( 'erlang'
													       -| ['compiler_generated'] ):( 'error'
																	     -| ['compiler_generated'] )
													    (( {( 'badarg'
														  -| ['compiler_generated'] ),( _60
																		-| ['compiler_generated'] )}
													       -| ['compiler_generated'] ))
													-| ['compiler_generated'] )
												  -| ['compiler_generated'] )
											      end
											  in  let <_63> =
												  call 'erlang':'=:='
												      (( _62
													 -| ['compiler_generated'] ), 'true')
											      in  let <_64> =
												      call 'erlang':'element'
													  (10, FH)
												  in  let <_65> =
													  call 'erlang':'=/='
													      (_64, Kp)
												      in  ( call ( 'erlang'
														   -| ['compiler_generated'] ):( 'and'
																		 -| ['compiler_generated'] )
														(_63, _65)
													    -| ['compiler_generated'] )
											  -| ['compiler_generated'] )
										    of <Try> ->
											Try
										    catch <T,R> ->
											'false'
										    -| ['compiler_generated'] ) ->
										%% Line 2574
										call 'erlang':'throw'
										    ({'error',{'keypos_mismatch',Fname}})
									    %% Line 2575
									    <{'compact',SourceHead}> when 'true' ->
										do  %% Line 2576
										    call 'io':'format'
											('user', [100|[101|[116|[115|[58|[32|[102|[105|[108|[101|[32|[126|[116|[112|[32|[105|[115|[32|[110|[111|[119|[32|[99|[111|[109|[112|[97|[99|[116|[101|[100|[32|[46|[46|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Fname|[]])
										    %% Line 2577
										    case apply 'open_final'/7
											     (SourceHead, Fname, 'read', 'false', %% Line 2578
																  {3000,14000}, _0, %% Line 2578
																		    Debug) of
										      <{'ok',NewSourceHead}> when 'true' ->
											  let <_67> =
											      catch
												  %% Line 2579
												  apply 'compact'/1
												      (NewSourceHead)
											  in  %% Line 2579
											      case _67 of
												%% Line 2580
												<'ok'> when 'true' ->
												    do  %% Line 2581
													call 'erlang':'garbage_collect'
													    ()
													%% Line 2582
													case _1 of
													  <{'open_args',_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167}> when 'true' ->
													      let <_70> =
														  call 'erlang':'setelement'
														      (5, _1, 'false')
													      in  apply 'fopen3'/2
														      (_0, _70)
													  ( <_168> when 'true' ->
														( call ( 'erlang'
															 -| ['compiler_generated'] ):( 'error'
																		       -| ['compiler_generated'] )
														      (( {'badrecord','open_args'}
															 -| ['compiler_generated'] ))
														  -| ['compiler_generated'] )
													    -| ['compiler_generated'] )
													end
												%% Line 2583
												<_X_Err> when 'true' ->
												    do  %% Line 2584
													( call ( 'file'
														 -| ['result_not_wanted'] ):( 'close'
																	      -| ['result_not_wanted'] )
													      (Fd)
													  -| ['result_not_wanted'] )
													do  %% Line 2585
													    call 'dets_utils':'stop_disk_map'
														()
													    do  %% Line 2586
														call 'io':'format'
														    ('user', [100|[101|[116|[115|[58|[32|[99|[111|[109|[112|[97|[99|[116|[105|[111|[110|[32|[111|[102|[32|[102|[105|[108|[101|[32|[126|[116|[112|[32|[102|[97|[105|[108|[101|[100|[44|[32|[110|[111|[119|[32|[114|[101|[112|[97|[105|[114|[105|[110|[103|[32|[46|[46|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2587
																																																							    [Fname|[]])
														%% Line 2588
														case apply 'read_file_header'/3
															 (Fname, Acc, Ram) of
														  <{'ok',Fd2,_X_FH}> when 'true' ->
														      %% Line 2589
														      apply 'do_repair'/7
															  (Fd2, _0, Fname, FH, MinSlots, MaxSlots, _1)
														  ( <_72> when 'true' ->
															primop 'match_fail'
															    ({'badmatch',_72})
														    -| ['compiler_generated'] )
														end
											      end
										      ( <_66> when 'true' ->
											    primop 'match_fail'
												({'badmatch',_66})
											-| ['compiler_generated'] )
										    end
									    %% Line 2592
									    <{'repair',Mess}> when 'true' ->
										do  %% Line 2593
										    call 'io':'format'
											('user', [100|[101|[116|[115|[58|[32|[102|[105|[108|[101|[32|[126|[116|[112|[126|[115|[126|[110]]]]]]]]]]]]]]]]]], [Fname|[Mess|[]]])
										    %% Line 2594
										    apply 'do_repair'/7
											(Fd, _0, Fname, FH, MinSlots, MaxSlots, _1)
									    %% Line 2596
									    <{'final',H}> when 'true' ->
										%% Line 2597
										case H of
										  <{'head',_169,_170,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183,_184,_185,_186,_187,_188,_189,_190,_191,_192,_193,_194,_195,_196,_197}> when 'true' ->
										      let <_76> =
											  call 'erlang':'setelement'
											      (15, H, Auto)
										      in  %% Line 2598
											  apply 'open_final'/7
											      (_76, Fname, Acc, Ram, CacheSz, _0, Debug)
										  ( <_198> when 'true' ->
											( call ( 'erlang'
												 -| ['compiler_generated'] ):( 'error'
															       -| ['compiler_generated'] )
											      (( {'badrecord','head'}
												 -| ['compiler_generated'] ))
											  -| ['compiler_generated'] )
										    -| ['compiler_generated'] )
										end
									    ( <_78> when 'true' ->
										  primop 'match_fail'
										      ({'case_clause',_78})
									      -| ['compiler_generated'] )
									  end
						      -| ['compiler_generated'] )
						    ( <_122> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','fileheader'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <_101> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','fileheader'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		  ( <_3> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_3})
		    -| ['compiler_generated'] )
		end
	    ( <_2> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_2})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'fopen_existing_file',2}}] )
'do_repair'/7 =
    %% Line 2601
    ( fun (_0,_1,_2,_3,_4,_5,_6) ->
	  %% Line 2602
	  case apply 'fsck'/6
		   (_0, _1, _2, _3, _4, _5) of
	    %% Line 2603
	    <'ok'> when 'true' ->
		do  %% Line 2604
		    call 'erlang':'garbage_collect'
			()
		    %% Line 2605
		    case _6 of
		      <{'open_args',_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28}> when 'true' ->
			  let <_9> =
			      call 'erlang':'setelement'
				  (5, _6, 'false')
			  in  apply 'fopen3'/2
				  (_1, _9)
		      ( <_29> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','open_args'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
	    %% Line 2606
	    <Error> when 'true' ->
		%% Line 2607
		call 'erlang':'throw'
		    (Error)
	  end
      -| [{'function',{'do_repair',7}}] )
'open_final'/7 =
    %% Line 2611
    ( fun (_0,_1,_2,_3,_4,_5,_6) ->
	  let <_rec103> =
	      call %% Line 2616
		   'dets_utils':%% Line 2616
				'new_cache'
		  (_4)
	  in  %% Line 2616
	      case _0 of
		<{'head',_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55}> when 'true' ->
		    let <_9> =
			call 'erlang':'setelement'
			    (26, _0, _5)
		    in  let <_10> =
			    call 'erlang':'setelement'
				(25, _9, _3)
			in  let <_11> =
				call 'erlang':'setelement'
				    (24, _10, _2)
			    in  let <_12> =
				    call 'erlang':'setelement'
					(23, _11, _1)
				in  let <_14> =
					call 'erlang':'setelement'
					    (22, _12, _rec103)
				    in  do  %% Line 2617
					    apply 'init_disk_map'/2
						(_5, _6)
					    %% Line 2618
					    ( case _14 of
						( <( {'head',_57,_58,_59,_rec105,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84}
						     -| ['compiler_generated'] )> when 'true' ->
						      ( case _14 of
							  ( <( {'head',_86,_87,_rec106,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113}
							       -| ['compiler_generated'] )> when 'true' ->
								do  call 'dets_v9':'cache_segps'
									(_rec105, _1, _rec106)
								    do  %% Line 2619
									apply 'check_growth'/1
									    (_14)
									%% Line 2620
									{'ok',_14}
							    -| ['compiler_generated'] )
							  ( <_114> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','head'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <_85> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','head'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
		( <_56> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','head'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'open_final',7}}] )
'fopen_init_file'/2 =
    %% Line 2623
    ( fun (_0,_1) ->
	  %% Line 2627
	  case _1 of
	    <{'open_args',Fname,Type,Kp,_21,MinSlotsArg,MaxSlotsArg,Ram,CacheSz,Auto,_22,Debug}> when 'true' ->
		let <MinSlots> =
		    apply %% Line 2628
			  'choose_no_slots'/2
			(%% Line 2628
			 MinSlotsArg, %% Line 2628
				      256)
		in  let <MaxSlots> =
			apply %% Line 2629
			      'choose_no_slots'/2
			    (%% Line 2629
			     MaxSlotsArg, %% Line 2629
					  33554432)
		    in  let <_7> =
			    case <> of
			      %% Line 2631
			      <>
				  when ( call 'erlang':'=:='
					  (Ram,
					   'true')
				      -| ['compiler_generated'] ) ->
				  []
			      %% Line 2632
			      <> when 'true' ->
				  Fname
			    end
			in  let <_9> =
				apply %% Line 2634
				      'open_args'/2
				    (%% Line 2634
				     'read_write', %% Line 2634
						   Ram)
			    in  %% Line 2634
				case call 'dets_utils':'open'
					 (_7, _9) of
				  <{'ok',Fd}> when 'true' ->
				      do  %% Line 2636
					  apply 'init_disk_map'/2
					      (_0, Debug)
					  let <_11> =
					      catch
						  %% Line 2637
						  call 'dets_v9':'initiate_file'
						      (Fd, _0, Fname, Type, Kp, %% Line 2638
										MinSlots, %% Line 2638
											  MaxSlots, %% Line 2639
												    Ram, %% Line 2639
													 CacheSz, %% Line 2639
														  Auto, %% Line 2639
															'true')
					  in  %% Line 2637
					      case _11 of
						%% Line 2640
						<_@r0 = {'error',Reason}>
						    when ( call 'erlang':'=:='
							    (Ram,
							     'true')
							-| ['compiler_generated'] ) ->
						    do  %% Line 2641
							( call ( 'file'
								 -| ['result_not_wanted'] ):( 'close'
											      -| ['result_not_wanted'] )
							      (Fd)
							  -| ['result_not_wanted'] )
							%% Line 2642
							call 'erlang':'throw'
							    (_@r0)
						%% Line 2643
						<_@r1 = {'error',Reason}> when 'true' ->
						    do  %% Line 2644
							( call ( 'file'
								 -| ['result_not_wanted'] ):( 'close'
											      -| ['result_not_wanted'] )
							      (Fd)
							  -| ['result_not_wanted'] )
							do  %% Line 2645
							    ( call ( 'file'
								     -| ['result_not_wanted'] ):( 'delete'
												  -| ['result_not_wanted'] )
								  (Fname)
							      -| ['result_not_wanted'] )
							    %% Line 2646
							    call 'erlang':'throw'
								(_@r1)
						%% Line 2647
						<{'ok',Head}> when 'true' ->
						    do  %% Line 2648
							apply 'start_auto_save_timer'/1
							    (Head)
							%% Line 2650
							case Head of
							  <{'head',_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52}> when 'true' ->
							      let <_17> =
								  call 'erlang':'setelement'
								      (16, Head, 'new_dirty')
							      in  {'ok',_17}
							  ( <_53> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','head'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
						( <_18> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_18})
						  -| ['compiler_generated'] )
					      end
				  ( <_10> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_10})
				    -| ['compiler_generated'] )
				end
	    ( <_2> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_2})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'fopen_init_file',2}}] )
'init_disk_map'/2 =
    %% Line 2654
    ( fun (_0,_1) ->
	  let <_4> =
	      case _1 of
		%% Line 2655
		( <( 'true'
		     -| ['compiler_generated'] )> when 'true' ->
		      'true'
		  -| ['compiler_generated'] )
		%% Line 2655
		( <( 'false'
		     -| ['compiler_generated'] )> when 'true' ->
		      call 'dets_utils':'debug_mode'
			  ()
		  -| ['compiler_generated'] )
		%% Line 2655
		( <_2> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {( 'badarg'
				  -| ['compiler_generated'] ),_2}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  in  %% Line 2655
	      case _4 of
		%% Line 2656
		<'true'> when 'true' ->
		    %% Line 2657
		    call 'dets_utils':'init_disk_map'
			(_0)
		%% Line 2658
		<'false'> when 'true' ->
		    %% Line 2659
		    'ok'
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'init_disk_map',2}}] )
'open_args'/2 =
    %% Line 2662
    ( fun (_0,_1) ->
	  let <_3> =
	      case _0 of
		%% Line 2664
		<'read'> when 'true' ->
		    []
		%% Line 2665
		<'read_write'> when 'true' ->
		    ['write']
		( <_2> when 'true' ->
		      %% Line 2663
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
	  in  let <_6> =
		  case _1 of
		    %% Line 2668
		    <'true'> when 'true' ->
			['ram']
		    %% Line 2669
		    <'false'> when 'true' ->
			['raw']
		    ( <_5> when 'true' ->
			  %% Line 2667
			  primop 'match_fail'
			      ({'case_clause',_5})
		      -| ['compiler_generated'] )
		  end
	      in  let <_8> =
		      call %% Line 2671
			   'erlang':%% Line 2671
				    '++'
			  (_6, %% Line 2671
			       ['binary'|['read']])
		  in  %% Line 2671
		      call 'erlang':'++'
			  (_3, _8)
      -| [{'function',{'open_args',2}}] )
'compact'/1 =
    %% Line 2674
    ( fun (_0) ->
	  %% Line 2676
	  case ( _0
		 -| [{'function',{'compact',1}}] ) of
	    <{'head',_22,_23,_24,SFd,_25,_26,_27,_28,Type,Kp,_29,_30,_31,Auto,_32,_33,_34,_35,_36,_37,_38,Fname,_39,Ram,Tab,_40,_41,_42,_43}> when 'true' ->
		let <Tmp> =
		    apply %% Line 2677
			  'tempfile'/1
			(%% Line 2677
			 Fname)
		in  let <TblParms> =
			call %% Line 2678
			     'dets_v9':%% Line 2678
				       'table_parameters'
			    (( _0
			       -| [{'function',{'compact',1}}] ))
		    in  let <_4> =
			    apply %% Line 2679
				  'open_args'/2
				(%% Line 2679
				 'read_write', %% Line 2679
					       'false')
			in  %% Line 2679
			    case call 'dets_utils':'open'
				     (Tmp, _4) of
			      <{'ok',Fd}> when 'true' ->
				  let <_7> =
				      catch
					  %% Line 2685
					  call 'dets_v9':'prep_table_copy'
					      (Fd, Tab, Tmp, Type, Kp, Ram, {3000,14000}, %% Line 2686
											  Auto, %% Line 2686
												TblParms)
				  in  let <_11> =
					  case _7 of
					    %% Line 2687
					    <{'ok',H}> when 'true' ->
						%% Line 2688
						H
					    %% Line 2689
					    <Error> when 'true' ->
						do  %% Line 2690
						    ( call ( 'file'
							     -| ['result_not_wanted'] ):( 'close'
											  -| ['result_not_wanted'] )
							  (Fd)
						      -| ['result_not_wanted'] )
						    do  %% Line 2691
							( call ( 'file'
								 -| ['result_not_wanted'] ):( 'delete'
											      -| ['result_not_wanted'] )
							      (Tmp)
							  -| ['result_not_wanted'] )
							%% Line 2692
							call 'erlang':'throw'
							    (Error)
					  end
				      in  %% Line 2695
					  case call 'dets_v9':'compact_init'
						   (( _0
						      -| [{'function',{'compact',1}}] ), _11, TblParms) of
					    %% Line 2696
					    <{'ok',NewHead}> when 'true' ->
						let <_15> =
						    case %% Line 2697
							 apply 'fclose'/1
							     (NewHead) of
						      %% Line 2698
						      <'ok'> when 'true' ->
							  %% Line 2699
							  case call 'file':'close'
								   (SFd) of
							    <'ok'> when 'true' ->
								%% Line 2701
								call 'dets_utils':'rename'
								    (Tmp, Fname)
							    ( <_13> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_13})
							      -| ['compiler_generated'] )
							  end
						      %% Line 2702
						      <E> when 'true' ->
							  %% Line 2703
							  E
						    end
						in  %% Line 2705
						    case <> of
						      %% Line 2706
						      <>
							  when call 'erlang':'=:='
								(_15,
								 'ok') ->
							  'ok'
						      %% Line 2707
						      <> when 'true' ->
							  do  %% Line 2708
							      ( call ( 'file'
								       -| ['result_not_wanted'] ):( 'delete'
												    -| ['result_not_wanted'] )
								    (Tmp)
								-| ['result_not_wanted'] )
							      %% Line 2709
							      call 'erlang':'throw'
								  (_15)
						    end
					    %% Line 2711
					    <Err> when 'true' ->
						do  %% Line 2712
						    ( call ( 'file'
							     -| ['result_not_wanted'] ):( 'close'
											  -| ['result_not_wanted'] )
							  (Fd)
						      -| ['result_not_wanted'] )
						    do  %% Line 2713
							( call ( 'file'
								 -| ['result_not_wanted'] ):( 'delete'
											      -| ['result_not_wanted'] )
							      (Tmp)
							  -| ['result_not_wanted'] )
							%% Line 2714
							call 'erlang':'throw'
							    (Err)
					  end
			      ( <_5> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_5})
				-| ['compiler_generated'] )
			    end
	    ( <_1> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_1})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'compact',1}}] )
'fsck'/6 =
    %% Line 2719
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  %% Line 2722
	  case _3 of
	    <{'fileheader',_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,MinSlotsFile,MaxSlotsFile,_34,_35,_36,_37,_38,_39,_40,_41}> when 'true' ->
		let <EstNoSlots0> =
		    apply %% Line 2723
			  'file_no_things'/1
			(_3)
		in  let <MinSlots> =
			apply %% Line 2724
			      'choose_no_slots'/2
			    (_4, %% Line 2724
				 MinSlotsFile)
		    in  let <MaxSlots> =
			    apply %% Line 2725
				  'choose_no_slots'/2
				(_5, %% Line 2725
				     MaxSlotsFile)
			in  let <_10> =
				call %% Line 2726
				     'erlang':%% Line 2726
					      'max'
				    (%% Line 2726
				     MinSlots, %% Line 2726
					       EstNoSlots0)
			    in  let <EstNoSlots> =
				    call %% Line 2726
					 'erlang':%% Line 2726
						  'min'
					(%% Line 2726
					 MaxSlots, _10)
				in  let <SlotNumbers> = {%% Line 2727
					 MinSlots,%% Line 2727
						  EstNoSlots,%% Line 2727
							     MaxSlots}
				    in  %% Line 2732
					case apply 'fsck_try'/5
						 (_0, _1, _3, _2, SlotNumbers) of
					  %% Line 2733
					  <{'try_again',BetterNoSlots}> when 'true' ->
					      let <BetterSlotNumbers> = {%% Line 2734
						   MinSlots,%% Line 2734
							    BetterNoSlots,%% Line 2734
									  MaxSlots}
					      in  %% Line 2735
						  case apply 'fsck_try'/5
							   (_0, _1, _3, _2, BetterSlotNumbers) of
						    %% Line 2736
						    <{'try_again',_42}> when 'true' ->
							do  %% Line 2737
							    ( call ( 'file'
								     -| ['result_not_wanted'] ):( 'close'
												  -| ['result_not_wanted'] )
								  (_0)
							      -| ['result_not_wanted'] )
							    %% Line 2738
							    {'error',{'cannot_repair',_2}}
						    %% Line 2739
						    <Else> when 'true' ->
							%% Line 2740
							Else
						  end
					  %% Line 2742
					  <Else> when 'true' ->
					      %% Line 2743
					      Else
					end
	    ( <_6> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_6})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'fsck',6}}] )
'choose_no_slots'/2 =
    %% Line 2746
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <'default',NoSlots> when 'true' ->
		  NoSlots
	      %% Line 2747
	      <NoSlots,_4> when 'true' ->
		  NoSlots
	    end
	    -| [{'function',{'choose_no_slots',2}}] )
      -| [{'function',{'choose_no_slots',2}}] )
'fsck_try'/5 =
    %% Line 2754
    ( fun (_0,_1,_2,_3,_4) ->
	  let <Tmp> =
	      apply %% Line 2755
		    'tempfile'/1
		  (_3)
	  in  %% Line 2756
	      case _2 of
		<{'fileheader',_23,_24,_25,_26,Type,_27,_28,_29,KeyPos,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41}> when 'true' ->
		    %% Line 2757
		    case _4 of
		      <{_X_MinSlots,EstNoSlots,MaxSlots}> when 'true' ->
			  let <OpenArgs> =
			      {%% Line 2758
			       'open_args',%% Line 2758
					   Tmp,%% Line 2758
					       Type,%% Line 2758
						    KeyPos,%% Line 2759
							   'false',%% Line 2759
								   EstNoSlots,%% Line 2760
									      MaxSlots,%% Line 2761
										       'false',%% Line 2761
											       {3000,14000},%% Line 2762
													    'infinity',%% Line 2762
														       'read_write',%% Line 2763
																    'false'}
			  in  let <_9> =
				  catch
				      %% Line 2764
				      apply 'fopen3'/2
					  (_1, OpenArgs)
			      in  %% Line 2764
				  case _9 of
				    %% Line 2765
				    <{'ok',Head}> when 'true' ->
					%% Line 2766
					case apply 'fsck_try_est'/5
						 (Head, _0, _3, _4, _2) of
					  %% Line 2767
					  <{'ok',NewHead}> when 'true' ->
					      let <_11> =
						  case %% Line 2768
						       apply 'fclose'/1
							   (NewHead) of
						    %% Line 2769
						    <'ok'> when 'true' ->
							%% Line 2771
							call 'dets_utils':'rename'
							    (Tmp, _3)
						    %% Line 2772
						    <Error> when 'true' ->
							%% Line 2773
							Error
						  end
					      in  %% Line 2775
						  case <> of
						    %% Line 2776
						    <>
							when call 'erlang':'=:='
							      (_11,
							       'ok') ->
							'ok'
						    %% Line 2777
						    <> when 'true' ->
							do  %% Line 2778
							    ( call ( 'file'
								     -| ['result_not_wanted'] ):( 'delete'
												  -| ['result_not_wanted'] )
								  (Tmp)
							      -| ['result_not_wanted'] )
							    _11
						  end
					  %% Line 2781
					  <TryAgainOrError> when 'true' ->
					      do  %% Line 2782
						  ( call ( 'file'
							   -| ['result_not_wanted'] ):( 'delete'
											-| ['result_not_wanted'] )
							(Tmp)
						    -| ['result_not_wanted'] )
						  %% Line 2783
						  TryAgainOrError
					end
				    %% Line 2785
				    <Error> when 'true' ->
					do  %% Line 2786
					    ( call ( 'file'
						     -| ['result_not_wanted'] ):( 'close'
										  -| ['result_not_wanted'] )
						  (_0)
					      -| ['result_not_wanted'] )
					    %% Line 2787
					    Error
				  end
		      ( <_7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_7})
			-| ['compiler_generated'] )
		    end
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_6})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'fsck_try',5}}] )
'tempfile'/1 =
    %% Line 2790
    ( fun (_0) ->
	  let <Tmp> =
	      call %% Line 2791
		   'lists':%% Line 2791
			   'concat'
		  (%% Line 2791
		   [( _0
		      -| [{'function',{'tempfile',1}}] )|[[46|[84|[77|[80]]]]]])
	  in  do  %% Line 2792
		  case call 'file':'delete'
			   (Tmp) of
		    %% Line 2793
		    <{'error',_X_Reason}> when 'true' ->
			'ok'
		    %% Line 2795
		    <'ok'> when 'true' ->
			%% Line 2796
			apply 'assure_no_file'/1
			    (Tmp)
		    ( <_2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_2})
		      -| ['compiler_generated'] )
		  end
		  %% Line 2798
		  Tmp
      -| [{'function',{'tempfile',1}}] )
'assure_no_file'/1 =
    %% Line 2800
    ( fun (_0) ->
	  %% Line 2801
	  case call 'file':'read_file_info'
		   (( _0
		      -| [{'function',{'assure_no_file',1}}] )) of
	    %% Line 2802
	    <{'ok',_X_FileInfo}> when 'true' ->
		do  %% Line 2804
		    call 'timer':'sleep'
			(100)
		    %% Line 2805
		    apply 'assure_no_file'/1
			(( _0
			   -| [{'function',{'assure_no_file',1}}] ))
	    %% Line 2806
	    <{'error',_3}> when 'true' ->
		%% Line 2807
		'ok'
	    ( <_1> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_1})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'assure_no_file',1}}] )
'fsck_try_est'/5 =
    %% Line 2811
    ( fun (_0,_1,_2,_3,_4) ->
	  let <Cntrs> =
	      call %% Line 2813
		   'ets':%% Line 2813
			 'new'
		  (%% Line 2813
		   'dets_repair', %% Line 2813
				  [])
	  in  let <Input> =
		  call %% Line 2814
		       'dets_v9':%% Line 2814
				 'fsck_input'
		      (_0, _1, %% Line 2814
			       Cntrs, _4)
	      in  %% Line 2815
		  case apply 'do_sort'/5
			   (_0, _3, Input, Cntrs, _2) of
		    <{Reply,SizeData}> when 'true' ->
			%% Line 2817
			case Reply of
			  %% Line 2818
			  <{'ok',NoDups,H1}> when 'true' ->
			      do  %% Line 2819
				  ( call ( 'file'
					   -| ['result_not_wanted'] ):( 'close'
									-| ['result_not_wanted'] )
					(_1)
				    -| ['result_not_wanted'] )
				  %% Line 2820
				  apply 'fsck_copy'/4
				      (SizeData, H1, 'false', NoDups)
			  %% Line 2821
			  <Return = {'try_again',_17}> when 'true' ->
			      do  %% Line 2822
				  apply 'close_files'/3
				      ('false', SizeData, _0)
				  %% Line 2823
				  Return
			  %% Line 2824
			  <Else> when 'true' ->
			      do  %% Line 2825
				  ( call ( 'file'
					   -| ['result_not_wanted'] ):( 'close'
									-| ['result_not_wanted'] )
					(_1)
				    -| ['result_not_wanted'] )
				  do  %% Line 2826
				      apply 'close_files'/3
					  ('false', SizeData, _0)
				      %% Line 2827
				      Else
			end
		    ( <_7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_7})
		      -| ['compiler_generated'] )
		  end
      -| [{'function',{'fsck_try_est',5}}] )
'do_sort'/5 =
    %% Line 2830
    ( fun (_0,_1,_2,_3,_4) ->
	  let <Output> =
	      call %% Line 2836
		   'dets_v9':%% Line 2836
			     'output_objs'
		  (_0, _1, _3)
	  in  let <TmpDir> =
		  call %% Line 2837
		       'filename':%% Line 2837
				  'dirname'
		      (_4)
	      in  let <_7> =
		      catch
			  %% Line 2838
			  call 'file_sorter':'sort'
			      (_2, Output, %% Line 2839
					   [{'format','binary'}|[{'tmpdir',TmpDir}|[]]])
		  in  let <L> =
			  call %% Line 2840
			       'ets':%% Line 2840
				     'tab2list'
			      (_3)
		      in  do  %% Line 2841
			      call 'ets':'delete'
				  (_3)
			      let <_10> =
				  call %% Line 2842
				       'lists':%% Line 2842
					       'keysort'
				      (%% Line 2842
				       1, %% Line 2842
					  L)
			      in  let <_11> =
				      call %% Line 2842
					   'lists':%% Line 2842
						   'reverse'
					  (_10)
				  in  %% Line 2842
				      {_7,_11}
      -| [{'function',{'do_sort',5}}] )
'fsck_copy'/4 =
    %% Line 2844
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <[{_X_LogSz,Pos,Bins,_X_NoObjects}|SizeData],Head,_X_Bulk,NoDups>
		  when %% Line 2845
		    call 'erlang':'is_list'
			(Bins) ->
		  %% Line 2846
		  case call 'erlang':'=:='
			   (NoDups, 0) of
		    <'true'> when 'true' ->
			let <_7> =
			    fun (_5) ->
				%% Line 2847
				case _5 of
				  <{_18,P,B,_19}> when 'true' ->
				      {P,B}
				  ( <_6> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',_6})
				    -| ['compiler_generated'] )
				end
			in  let <_8> =
				call %% Line 2847
				     'lists':%% Line 2847
					     'map'
				    (_7, %% Line 2847
					 SizeData)
			    in  let <PWs> =
				    [%% Line 2847
				     {Pos,Bins}|_8]
				in  %% Line 2848
				    case Head of
				      <{'head',_20,_21,_22,Fd,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,FileName,_40,_41,_42,_43,_44,_45,_46}> when 'true' ->
					  do  %% Line 2849
					      call 'dets_utils':'pwrite'
						  (Fd, FileName, PWs)
					      %% Line 2850
					      case Head of
						<{'head',_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75}> when 'true' ->
						    let <_13> =
							call 'erlang':'setelement'
							    (16, Head, 'dirty')
						    in  {'ok',_13}
						( <_76> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','head'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
				      ( <_10> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_10})
					-| ['compiler_generated'] )
				    end
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4})
		      -| ['compiler_generated'] )
		  end
	      %% Line 2851
	      <SizeData,Head,Bulk,NoDups> when 'true' ->
		  catch
		      %% Line 2852
		      apply 'fsck_copy1'/4
			  (SizeData, Head, Bulk, NoDups)
	    end
	    -| [{'function',{'fsck_copy',4}}] )
      -| [{'function',{'fsck_copy',4}}] )
'fsck_copy1'/4 =
    %% Line 2854
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <[SzData|L],Head,Bulk,NoDups> when 'true' ->
		  %% Line 2855
		  ( case Head of
		      ( <( {'head',_34,_35,_36,_rec109,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61}
			   -| ['compiler_generated'] )> when 'true' ->
			    %% Line 2856
			    case SzData of
			      <{LogSz,Pos,{FileName,Fd},NoObjects}> when 'true' ->
				  let <_9> =
				      case <> of
					%% Line 2857
					<>
					    when call 'erlang':'=:='
						  (NoObjects,
						   0) ->
					    0
					%% Line 2857
					<> when 'true' ->
					    let <_8> =
						call 'erlang':'-'
						    (LogSz, 1)
					    in  call 'erlang':'bsl'
						    (1, _8)
				      end
				  in  let <ExpectedSize> =
					  call %% Line 2858
					       'erlang':%% Line 2858
							'*'
					      (_9, %% Line 2858
						   NoObjects)
				      in  do  %% Line 2859
					      case apply 'close_tmp'/1
						       (Fd) of
						%% Line 2860
						<'ok'> when 'true' ->
						    'ok'
						%% Line 2861
						<Err> when 'true' ->
						    do  %% Line 2862
							apply 'close_files'/3
							    (Bulk, L, Head)
							%% Line 2863
							call 'dets_utils':'file_error'
							    (FileName, Err)
					      end
					      do  %% Line 2865
						  case call 'file':'position'
							   (_rec109, Pos) of
						    %% Line 2866
						    <{'ok',_63}>
							when call 'erlang':'=:='
							      (_63,
							       Pos) ->
							'ok'
						    %% Line 2867
						    <Err2> when 'true' ->
							do  %% Line 2868
							    apply 'close_files'/3
								(Bulk, L, Head)
							    %% Line 2869
							    ( case Head of
								( <( {'head',_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_rec110,_85,_86,_87,_88,_89,_90,_91}
								     -| ['compiler_generated'] )> when 'true' ->
								      call 'dets_utils':'file_error'
									  (_rec110, Err2)
								  -| ['compiler_generated'] )
								( <_92> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','head'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
						  end
						  let <CR> =
						      call %% Line 2871
							   'file':%% Line 2871
								  'copy'
							  (%% Line 2871
							   {FileName,['raw'|['binary']]}, _rec109)
						  in  do  %% Line 2872
							  ( call ( 'file'
								   -| ['result_not_wanted'] ):( 'delete'
												-| ['result_not_wanted'] )
								(FileName)
							    -| ['result_not_wanted'] )
							  %% Line 2873
							  case CR of
							    %% Line 2874
							    <{'ok',Copied}>
								when let <_18> =
								      call 'erlang':'=:='
									  (Copied, ExpectedSize)
								  in  let <_19> =
									  call %% Line 2875
									       'erlang':%% Line 2875
											'=:='
									      (%% Line 2875
									       NoObjects, %% Line 2875
											  0)
								      in  call 'erlang':'or'
									      (_18, _19) ->
								%% Line 2876
								apply 'fsck_copy1'/4
								    (L, Head, Bulk, NoDups)
							    %% Line 2877
							    <{'ok',_X_Copied}> when 'true' ->
								do  %% Line 2878
								    apply 'close_files'/3
									(Bulk, L, Head)
								    let <_20> =
									case <> of
									  %% Line 2879
									  <>
									      when ( call 'erlang':'=:='
										      (Bulk,
										       'true')
										  -| ['compiler_generated'] ) ->
									      'initialization_failed'
									  %% Line 2880
									  <> when 'true' ->
									      'repair_failed'
									end
								    in  %% Line 2881
									( case Head of
									    ( <( {'head',_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_rec111,_114,_115,_116,_117,_118,_119,_120}
										 -| ['compiler_generated'] )> when 'true' ->
										  {'error',{_20,_rec111}}
									      -| ['compiler_generated'] )
									    ( <_121> when 'true' ->
										  ( call ( 'erlang'
											   -| ['compiler_generated'] ):( 'error'
															 -| ['compiler_generated'] )
											(( {'badrecord','head'}
											   -| ['compiler_generated'] ))
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									  end
									  -| ['compiler_generated'] )
							    %% Line 2882
							    <FError> when 'true' ->
								do  %% Line 2883
								    apply 'close_files'/3
									(Bulk, L, Head)
								    %% Line 2884
								    call 'dets_utils':'file_error'
									(FileName, FError)
							  end
			      ( <_7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_7})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_62> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 2886
	      <[],Head,_X_Bulk,NoDups>
		  when call 'erlang':'=/='
			(NoDups,
			 0) ->
		  %% Line 2887
		  ( case Head of
		      ( <( {'head',_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_rec112,_143,_144,_145,_146,_147,_148,_149}
			   -| ['compiler_generated'] )> when 'true' ->
			    {'error',{'initialization_failed',_rec112}}
			-| ['compiler_generated'] )
		      ( <_150> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 2888
	      <[],Head,_X_Bulk,_X_NoDups> when 'true' ->
		  %% Line 2889
		  case Head of
		    <{'head',_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177,_178,_179}> when 'true' ->
			let <_29> =
			    call 'erlang':'setelement'
				(16, Head, 'dirty')
			in  {'ok',_29}
		    ( <_180> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','head'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      ( <_33,_32,_31,_30> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_33,_32,_31,_30})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'fsck_copy1',4}}] )
      -| [{'function',{'fsck_copy1',4}}] )
'close_files'/3 =
    %% Line 2891
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <'false',SizeData,Head> when 'true' ->
		  %% Line 2892
		  ( case Head of
		      ( <( {'head',_13,_14,_15,_rec114,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40}
			   -| ['result_not_wanted','compiler_generated'] )> when 'true' ->
			    do  ( call ( 'file'
					 -| ['result_not_wanted'] ):( 'close'
								      -| ['result_not_wanted'] )
				      (_rec114)
				  -| ['result_not_wanted'] )
				%% Line 2893
				apply 'close_files'/3
				    ('true', SizeData, Head)
			-| ['compiler_generated'] )
		      ( <_41> when 'true' ->
			    ( call ( 'erlang'
				     -| ['result_not_wanted','compiler_generated'] ):( 'error'
										       -| ['result_not_wanted','compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['result_not_wanted','compiler_generated'] ))
			      -| ['result_not_wanted','compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 2894
	      <'true',SizeData,_X_Head> when 'true' ->
		  let <Fun> =
		      fun (_7) ->
			  %% Line 2895
			  case _7 of
			    <{_X_Size,_X_Pos,{FileName,Fd},_X_No}> when 'true' ->
				do  %% Line 2896
				    apply 'close_tmp'/1
					(Fd)
				    %% Line 2897
				    call 'file':'delete'
					(FileName)
			    %% Line 2898
			    <_42> when 'true' ->
				%% Line 2899
				'ok'
			  end
		  in  %% Line 2901
		      call 'lists':'foreach'
			  (Fun, SizeData)
	      ( <_12,_11,_10> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_12,_11,_10})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'close_files',3}}] )
      -| [{'function',{'close_files',3}}] )
'close_tmp'/1 =
    %% Line 2903
    ( fun (_0) ->
	  %% Line 2904
	  call 'file':'close'
	      (( _0
		 -| [{'function',{'close_tmp',1}}] ))
      -| [{'function',{'close_tmp',1}}] )
'fslot'/2 =
    %% Line 2906
    ( fun (_0,_1) ->
	  let <_4> =
	      catch
		  %% Line 2908
		  case apply 'write_cache'/1
			   (_0) of
		    <{NH,[]}> when 'true' ->
			let <Objs> =
			    call %% Line 2909
				 'dets_v9':%% Line 2909
					   'slot_objs'
				(%% Line 2909
				 NH, _1)
			in  %% Line 2910
			    {NH,Objs}
		    ( <_2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_2})
		      -| ['compiler_generated'] )
		  end
	  in  %% Line 2907
	      case _4 of
		%% Line 2912
		<Reply = {NewHead = {'head',_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36},_X_Objects}> when ( 'true'
																						   -| ['compiler_generated'] ) ->
		    %% Line 2913
		    Reply
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'fslot',2}}] )
'do_update_counter'/3 =
    %% Line 2916
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <Head = {'head',_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47},_X_Key,_X_Incr>
		  when ( try
			  let <_7> =
			      call 'erlang':'element'
				  (10, Head)
			  in  let <_8> =
				  call 'erlang':'=/='
				      (_7, 'set')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _8)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 2917
		  {Head,'badarg'}
	      %% Line 2918
	      <Head,Key,Incr> when 'true' ->
		  %% Line 2919
		  case apply 'flookup_keys'/2
			   (Head, [Key|[]]) of
		    %% Line 2920
		    <{H1,[O|[]]}> when 'true' ->
			%% Line 2921
			( case H1 of
			    ( <( {'head',_48,_49,_50,_51,_52,_53,_54,_55,_56,_rec115,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_12> =
				      catch
					  %% Line 2922
					  apply 'try_update_tuple'/3
					      (O, _rec115, Incr)
				  in  %% Line 2922
				      case _12 of
					%% Line 2923
					<{'EXIT',_77}> when 'true' ->
					    %% Line 2924
					    {H1,'badarg'}
					%% Line 2925
					<{New,Term}> when 'true' ->
					    %% Line 2926
					    case apply 'finsert'/2
						     (H1, [Term|[]]) of
					      %% Line 2927
					      <{H2,'ok'}> when 'true' ->
						  %% Line 2928
						  {H2,New}
					      %% Line 2929
					      <Reply> when 'true' ->
						  %% Line 2930
						  Reply
					    end
					( <_14> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_14})
					  -| ['compiler_generated'] )
				      end
			      -| ['compiler_generated'] )
			    ( <_76> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','head'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 2933
		    <{H1,[]}> when 'true' ->
			%% Line 2934
			{H1,'badarg'}
		    %% Line 2935
		    <HeadError> when 'true' ->
			%% Line 2936
			HeadError
		  end
	    end
	    -| [{'function',{'do_update_counter',3}}] )
      -| [{'function',{'do_update_counter',3}}] )
'try_update_tuple'/3 =
    %% Line 2939
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <O,_X_Kp,{Pos,Incr}> when 'true' ->
		  %% Line 2940
		  apply 'try_update_tuple2'/3
		      (O, Pos, Incr)
	      %% Line 2941
	      <O,Kp,Incr> when 'true' ->
		  let <_3> =
		      call %% Line 2942
			   'erlang':%% Line 2942
				    '+'
			  (%% Line 2942
			   Kp, %% Line 2942
			       1)
		  in  %% Line 2942
		      apply 'try_update_tuple2'/3
			  (O, _3, Incr)
	    end
	    -| [{'function',{'try_update_tuple',3}}] )
      -| [{'function',{'try_update_tuple',3}}] )
'try_update_tuple2'/3 =
    %% Line 2944
    ( fun (_0,_1,_2) ->
	  let <_3> =
	      call %% Line 2945
		   'erlang':%% Line 2945
			    'element'
		  (_1, _0)
	  in  let <New> =
		  call %% Line 2945
		       'erlang':%% Line 2945
				'+'
		      (_3, _2)
	      in  let <_5> =
		      call %% Line 2946
			   'erlang':%% Line 2946
				    'setelement'
			  (_1, _0, %% Line 2946
				   New)
		  in  %% Line 2946
		      {New,_5}
      -| [{'function',{'try_update_tuple2',3}}] )
'set_verbose'/1 =
    %% Line 2948
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'set_verbose',1}}] ) of
	      <'true'> when 'true' ->
		  %% Line 2949
		  call 'erlang':'put'
		      ('verbose', 'yes')
	      %% Line 2950
	      <_2> when 'true' ->
		  %% Line 2951
		  call 'erlang':'erase'
		      ('verbose')
	    end
	    -| [{'function',{'set_verbose',1}}] )
      -| [{'function',{'set_verbose',1}}] )
'where_is_object'/2 =
    %% Line 2953
    ( fun (_0,_1) ->
	  %% Line 2954
	  ( case _0 of
	      ( <( {'head',_11,_12,_13,_14,_15,_16,_17,_18,_19,_rec116,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}
		   -| ['compiler_generated'] )> when 'true' ->
		    %% Line 2955
		    case apply 'check_objects'/2
			     ([_1|[]], _rec116) of
		      %% Line 2956
		      <'true'> when 'true' ->
			  let <_5> =
			      catch
				  %% Line 2957
				  apply 'write_cache'/1
				      (_0)
			  in  %% Line 2957
			      case _5 of
				%% Line 2958
				<{NewHead,[]}> when 'true' ->
				    let <_6> =
					call %% Line 2959
					     'dets_v9':%% Line 2959
						       'find_object'
					    (%% Line 2959
					     NewHead, _1)
				    in  %% Line 2959
					{NewHead,_6}
				%% Line 2960
				<HeadError = {NewHead = {'head',_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68},_69}> when ( 'true'
																								  -| ['compiler_generated'] ) ->
				    %% Line 2961
				    HeadError
				( <_7> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_7})
				  -| ['compiler_generated'] )
			      end
		      %% Line 2963
		      <'false'> when 'true' ->
			  %% Line 2964
			  {_0,'badarg'}
		      ( <_8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_8})
			-| ['compiler_generated'] )
		    end
		-| ['compiler_generated'] )
	      ( <_39> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'where_is_object',2}}] )
'check_objects'/2 =
    %% Line 2967
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <[T|Ts],Kp>
		  when try
			let <_2> =
			    call 'erlang':'tuple_size'
				(T)
			in  call 'erlang':'>='
				(_2, Kp)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  %% Line 2968
		  apply 'check_objects'/2
		      (Ts, Kp)
	      %% Line 2969
	      <L,_X_Kp> when 'true' ->
		  %% Line 2970
		  call 'erlang':'=:='
		      (L, [])
	    end
	    -| [{'function',{'check_objects',2}}] )
      -| [{'function',{'check_objects',2}}] )
'no_things'/1 =
    %% Line 2972
    ( fun (_0) ->
	  %% Line 2973
	  ( case ( _0
		   -| [{'function',{'no_things',1}}] ) of
	      ( <( {'head',_3,_4,_5,_6,_7,_rec117,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30}
		   -| ['compiler_generated'] )> when 'true' ->
		    _rec117
		-| ['compiler_generated'] )
	      ( <_31> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'no_things',1}}] )
'file_no_things'/1 =
    %% Line 2975
    ( fun (_0) ->
	  %% Line 2976
	  ( case ( _0
		   -| [{'function',{'file_no_things',1}}] ) of
	      ( <( {'fileheader',_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_rec118,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22}
		   -| ['compiler_generated'] )> when 'true' ->
		    _rec118
		-| ['compiler_generated'] )
	      ( <_23> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','fileheader'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'file_no_things',1}}] )
'update_cache'/3 =
    %% Line 2997
    ( fun (_0,_1,_2) ->
	  %% Line 2998
	  case apply 'update_cache'/2
		   (_0, [{_2,_1}|[]]) of
	    <{Head1,LU,PwriteList}> when 'true' ->
		%% Line 2999
		case call 'dets_utils':'pwrite'
			 (Head1, PwriteList) of
		  <{NewHead,'ok'}> when 'true' ->
		      %% Line 3000
		      {NewHead,LU}
		  ( <_4> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_4})
		    -| ['compiler_generated'] )
		end
	    ( <_3> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_3})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'update_cache',3}}] )
'update_cache'/2 =
    %% Line 3003
    ( fun (_0,_1) ->
	  %% Line 3004
	  ( case _0 of
	      ( <( {'head',_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_rec119,_77,_78,_79,_80,_81,_82,_83,_84}
		   -| ['compiler_generated'] )> when 'true' ->
		    %% Line 3005
		    case _rec119 of
		      <{'cache',C,Size0,Ins,_86,_87,_88}> when 'true' ->
			  let <_6> =
			      call %% Line 3006
				   'erlang':%% Line 3006
					    'external_size'
				  (_1)
			  in  let <NewSize> =
				  call %% Line 3006
				       'erlang':%% Line 3006
						'+'
				      (%% Line 3006
				       Size0, _6)
			      in  %% Line 3008
				  case %% Line 3009
				       apply 'cache_binary'/7
					   (_0, _1, C, Size0, Ins, 'false', []) of
				    <{NewC,NewIns,Lookup,Found}> when 'true' ->
					%% Line 3010
					case _rec119 of
					  <{'cache',_89,_90,_91,_92,_93,_94}> when 'true' ->
					      let <_10> =
						  call 'erlang':'setelement'
						      (4, _rec119, NewIns)
					      in  let <_11> =
						      call 'erlang':'setelement'
							  (3, _10, NewSize)
						  in  let <_13> =
							  call 'erlang':'setelement'
							      (2, _11, NewC)
						      in  %% Line 3011
							  case _0 of
							    <{'head',_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124}> when 'true' ->
								let <_17> =
								    call 'erlang':'setelement'
									(22, _0, _13)
								in  %% Line 3012
								    case <> of
								      %% Line 3013
								      <>
									  when let <_19> =
										call 'erlang':'=:='
										    (Lookup, 'true')
									    in  let <_26> =
										    try
											( let <_22> =
											      case ( call ( 'erlang'
													    -| ['compiler_generated'] ):( 'is_record'
																	  -| ['compiler_generated'] )
													 (_rec119, ( 'cache'
														     -| ['compiler_generated'] ), ( 7
																		    -| ['compiler_generated'] ))
												     -| ['compiler_generated'] ) of
												( <( 'true'
												     -| ['compiler_generated'] )> when 'true' ->
												      ( 'true'
													-| ['compiler_generated'] )
												  -| ['compiler_generated'] )
												( <( 'false'
												     -| ['compiler_generated'] )> when 'true' ->
												      ( 'fail'
													-| ['compiler_generated'] )
												  -| ['compiler_generated'] )
												( <( _20
												     -| ['compiler_generated'] )> when 'true' ->
												      ( call ( 'erlang'
													       -| ['compiler_generated'] ):( 'error'
																	     -| ['compiler_generated'] )
													    (( {( 'badarg'
														  -| ['compiler_generated'] ),( _20
																		-| ['compiler_generated'] )}
													       -| ['compiler_generated'] ))
													-| ['compiler_generated'] )
												  -| ['compiler_generated'] )
											      end
											  in  let <_23> =
												  call 'erlang':'=:='
												      (( _22
													 -| ['compiler_generated'] ), 'true')
											      in  let <_24> =
												      call 'erlang':'element'
													  (6, _rec119)
												  in  let <_25> =
													  call 'erlang':'>='
													      (NewSize, _24)
												      in  ( call ( 'erlang'
														   -| ['compiler_generated'] ):( 'and'
																		 -| ['compiler_generated'] )
														(_23, _25)
													    -| ['compiler_generated'] )
											  -| ['compiler_generated'] )
										    of <Try> ->
											Try
										    catch <T,R> ->
											'false'
										in  call 'erlang':'or'
											(_19, _26) ->
									  %% Line 3015
									  case call 'dets_v9':'write_cache'
										   (_17) of
									    <{NewHead,LU,PwriteList}> when 'true' ->
										let <_28> =
										    call %% Line 3016
											 'erlang':%% Line 3016
												  '++'
											(%% Line 3016
											 Found, %% Line 3016
												LU)
										in  %% Line 3016
										    {NewHead,_28,PwriteList}
									    ( <_27> when 'true' ->
										  primop 'match_fail'
										      ({'badmatch',_27})
									      -| ['compiler_generated'] )
									  end
								      %% Line 3017
								      <>
									  when call 'erlang':'=:='
										(NewC,
										 []) ->
									  %% Line 3018
									  {_17,Found,[]}
								      %% Line 3019
								      <>
									  when ( try
										  ( let <_31> =
											case ( call ( 'erlang'
												      -| ['compiler_generated'] ):( 'is_record'
																    -| ['compiler_generated'] )
												   (_rec119, ( 'cache'
													       -| ['compiler_generated'] ), ( 7
																	      -| ['compiler_generated'] ))
											       -| ['compiler_generated'] ) of
											  ( <( 'true'
											       -| ['compiler_generated'] )> when 'true' ->
												( 'true'
												  -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
											  ( <( 'false'
											       -| ['compiler_generated'] )> when 'true' ->
												( 'fail'
												  -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
											  ( <( _29
											       -| ['compiler_generated'] )> when 'true' ->
												( call ( 'erlang'
													 -| ['compiler_generated'] ):( 'error'
																       -| ['compiler_generated'] )
												      (( {( 'badarg'
													    -| ['compiler_generated'] ),( _29
																	  -| ['compiler_generated'] )}
													 -| ['compiler_generated'] ))
												  -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
											end
										    in  let <_32> =
											    call 'erlang':'=:='
												(( _31
												   -| ['compiler_generated'] ), 'true')
											in  let <_33> =
												call 'erlang':'element'
												    (5, _rec119)
											    in  let <_34> =
												    call 'erlang':'=:='
													(_33, 'undefined')
												in  ( call ( 'erlang'
													     -| ['compiler_generated'] ):( 'and'
																	   -| ['compiler_generated'] )
													  (_32, _34)
												      -| ['compiler_generated'] )
										    -| ['compiler_generated'] )
									      of <Try> ->
										  Try
									      catch <T,R> ->
										  'false'
									      -| ['compiler_generated'] ) ->
									  let <Now> =
									      call %% Line 3205
										   ( 'erlang'
										     -| ['compiler_generated'] ):%% Line 3205
														 ( 'monotonic_time'
														   -| ['compiler_generated'] )
										  (%% Line 3205
										   ( 1000000
										     -| ['compiler_generated'] ))
									  in  let <Me> =
										  call %% Line 3021
										       'erlang':%% Line 3021
												'self'
										      ()
									      in  let <Call> = {%% Line 3022
										       '$dets_call',%% Line 3022
												    Me,%% Line 3022
												       {'delayed_write',Now}}
										  in  %% Line 3023
										      ( case _rec119 of
											  ( <( {'cache',_126,_127,_128,_129,_130,_rec122}
											       -| ['compiler_generated'] )> when 'true' ->
												do  call 'erlang':'send_after'
													(_rec122, Me, Call)
												    %% Line 3024
												    case _13 of
												      <{'cache',_132,_133,_134,_135,_136,_137}> when 'true' ->
													  let <_42> =
													      call 'erlang':'setelement'
														  (5, _13, Now)
													  in  case _17 of
														<{'head',_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167}> when 'true' ->
														    let <_46> =
															call 'erlang':'setelement'
															    (22, _17, _42)
														    in  {_46,Found,[]}
														( <_168> when 'true' ->
														      ( call ( 'erlang'
															       -| ['compiler_generated'] ):( 'error'
																			     -| ['compiler_generated'] )
															    (( {'badrecord','head'}
															       -| ['compiler_generated'] ))
															-| ['compiler_generated'] )
														  -| ['compiler_generated'] )
													      end
												      ( <_138> when 'true' ->
													    ( call ( 'erlang'
														     -| ['compiler_generated'] ):( 'error'
																		   -| ['compiler_generated'] )
														  (( {'badrecord','cache'}
														     -| ['compiler_generated'] ))
													      -| ['compiler_generated'] )
													-| ['compiler_generated'] )
												    end
											    -| ['compiler_generated'] )
											  ( <_131> when 'true' ->
												( call ( 'erlang'
													 -| ['compiler_generated'] ):( 'error'
																       -| ['compiler_generated'] )
												      (( {'badrecord','cache'}
													 -| ['compiler_generated'] ))
												  -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
											end
											-| ['compiler_generated'] )
								      %% Line 3025
								      <>
									  when call 'erlang':'=:='
										(Size0,
										 0) ->
									  let <_rec128> =
									      call %% Line 3205
										   ( 'erlang'
										     -| ['compiler_generated'] ):%% Line 3205
														 ( 'monotonic_time'
														   -| ['compiler_generated'] )
										  (%% Line 3205
										   ( 1000000
										     -| ['compiler_generated'] ))
									  in  %% Line 3028
									      case _13 of
										<{'cache',_169,_170,_171,_172,_173,_174}> when 'true' ->
										    let <_50> =
											call 'erlang':'setelement'
											    (5, _13, _rec128)
										    in  case _17 of
											  <{'head',_176,_177,_178,_179,_180,_181,_182,_183,_184,_185,_186,_187,_188,_189,_190,_191,_192,_193,_194,_195,_196,_197,_198,_199,_200,_201,_202,_203,_204}> when 'true' ->
											      let <_54> =
												  call 'erlang':'setelement'
												      (22, _17, _50)
											      in  {_54,Found,[]}
											  ( <_205> when 'true' ->
												( call ( 'erlang'
													 -| ['compiler_generated'] ):( 'error'
																       -| ['compiler_generated'] )
												      (( {'badrecord','head'}
													 -| ['compiler_generated'] ))
												  -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
											end
										( <_175> when 'true' ->
										      ( call ( 'erlang'
											       -| ['compiler_generated'] ):( 'error'
															     -| ['compiler_generated'] )
											    (( {'badrecord','cache'}
											       -| ['compiler_generated'] ))
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									      end
								      %% Line 3029
								      <> when 'true' ->
									  %% Line 3031
									  {_17,Found,[]}
								    end
							    ( <_125> when 'true' ->
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'error'
													 -| ['compiler_generated'] )
									(( {'badrecord','head'}
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
					  ( <_95> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','cache'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
				    ( <_8> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_8})
				      -| ['compiler_generated'] )
				  end
		      ( <_5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_5})
			-| ['compiler_generated'] )
		    end
		-| ['compiler_generated'] )
	      ( <_85> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'update_cache',2}}] )
'cache_binary'/7 =
    %% Line 3034
    ( fun (_0,_1,_2,_3,_4,_5,_6) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6> of
	      <Head,[{Q,Os}|L],C,Seq,Ins,Lu,F>
		  when call 'erlang':'=:='
			(Q,
			 'delete_object') ->
		  %% Line 3035
		  ( case Head of
		      ( <( {'head',_24,_25,_26,_27,_28,_29,_30,_31,_32,_rec130,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51}
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'cache_obj_op'/10
				(Head, L, C, Seq, Ins, Lu, F, Os, _rec130, Q)
			-| ['compiler_generated'] )
		      ( <_52> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 3036
	      <Head,[{Q,Os}|L],C,Seq,Ins,Lu,F>
		  when call 'erlang':'=:='
			(Q,
			 'insert') ->
		  let <_9> =
		      call %% Line 3037
			   'erlang':%% Line 3037
				    'length'
			  (%% Line 3037
			   Os)
		  in  let <NewIns> =
			  call %% Line 3037
			       'erlang':%% Line 3037
					'+'
			      (%% Line 3037
			       Ins, _9)
		      in  %% Line 3038
			  ( case Head of
			      ( <( {'head',_53,_54,_55,_56,_57,_58,_59,_60,_61,_rec131,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80}
				   -| ['compiler_generated'] )> when 'true' ->
				    apply 'cache_obj_op'/10
					(Head, L, C, Seq, NewIns, Lu, F, Os, _rec131, Q)
				-| ['compiler_generated'] )
			      ( <_81> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','head'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
	      %% Line 3039
	      <Head,[{Q,Ks}|L],C,Seq,Ins,Lu,F>
		  when call 'erlang':'=:='
			(Q,
			 'delete_key') ->
		  %% Line 3040
		  apply 'cache_key_op'/9
		      (Head, L, C, Seq, Ins, Lu, F, Ks, Q)
	      %% Line 3041
	      <Head,[{Q,Ks}|L],C,Seq,Ins,_X_Lu,F>
		  when call 'erlang':'=:='
			(C,
			 []) ->
		  %% Line 3042
		  apply 'cache_key_op'/9
		      (Head, L, C, Seq, Ins, 'true', F, Ks, Q)
	      %% Line 3043
	      <Head,[{Q,Ks}|L],C,Seq,Ins,Lu,F> when 'true' ->
		  %% Line 3044
		  ( case Head of
		      ( <( {'head',_82,_83,_84,_85,_86,_87,_88,_89,_rec132,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109}
			   -| ['compiler_generated'] )> when 'true' ->
			    case call 'dets_utils':'cache_lookup'
				     (_rec132, Ks, C, []) of
			      %% Line 3045
			      <'false'> when 'true' ->
				  %% Line 3046
				  apply 'cache_key_op'/9
				      (Head, L, C, Seq, Ins, 'true', F, Ks, Q)
			      %% Line 3047
			      <Found> when 'true' ->
				  %% Line 3048
				  case Q of
				    <{'lookup',Pid}> when 'true' ->
					%% Line 3049
					apply 'cache_binary'/7
					    (Head, L, C, Seq, Ins, Lu, [{Pid,Found}|F])
				    ( <_15> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_15})
				      -| ['compiler_generated'] )
				  end
			    end
			-| ['compiler_generated'] )
		      ( <_110> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 3051
	      <_X_Head,[],C,_X_Seq,Ins,Lu,F> when 'true' ->
		  %% Line 3052
		  {C,Ins,Lu,F}
	      ( <_23,_22,_21,_20,_19,_18,_17> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_23,_22,_21,_20,_19,_18,_17})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'cache_binary',7}}] )
      -| [{'function',{'cache_binary',7}}] )
'cache_key_op'/9 =
    %% Line 3054
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	      <Head,L,C,Seq,Ins,Lu,F,[K|Ks],Q> when 'true' ->
		  let <E> = {%% Line 3055
		       K,%% Line 3055
			 {Seq,Q}}
		  in  let <_10> =
			  call %% Line 3056
			       'erlang':%% Line 3056
					'+'
			      (%% Line 3056
			       Seq, %% Line 3056
				    1)
		      in  %% Line 3056
			  apply 'cache_key_op'/9
			      (Head, L, [E|C], _10, Ins, Lu, F, Ks, Q)
	      %% Line 3057
	      <Head,L,C,Seq,Ins,Lu,F,[],_X_Q> when 'true' ->
		  %% Line 3058
		  apply 'cache_binary'/7
		      (Head, L, C, Seq, Ins, Lu, F)
	      ( <_19,_18,_17,_16,_15,_14,_13,_12,_11> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_19,_18,_17,_16,_15,_14,_13,_12,_11})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'cache_key_op',9}}] )
      -| [{'function',{'cache_key_op',9}}] )
'cache_obj_op'/10 =
    %% Line 3060
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9> of
	      <Head,L,C,Seq,Ins,Lu,F,[O|Os],Kp,Q> when 'true' ->
		  let <_10> =
		      call %% Line 3061
			   'erlang':%% Line 3061
				    'element'
			  (%% Line 3061
			   Kp, %% Line 3061
			       O)
		  in  let <E> = {_10,%% Line 3061
			       {Seq,{Q,O}}}
		      in  let <_12> =
			      call %% Line 3062
				   'erlang':%% Line 3062
					    '+'
				  (%% Line 3062
				   Seq, %% Line 3062
					1)
			  in  %% Line 3062
			      apply 'cache_obj_op'/10
				  (Head, L, [E|C], _12, Ins, Lu, F, Os, Kp, Q)
	      %% Line 3063
	      <Head,L,C,Seq,Ins,Lu,F,[],_X_Kp,_X_Q> when 'true' ->
		  %% Line 3064
		  apply 'cache_binary'/7
		      (Head, L, C, Seq, Ins, Lu, F)
	      ( <_22,_21,_20,_19,_18,_17,_16,_15,_14,_13> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_22,_21,_20,_19,_18,_17,_16,_15,_14,_13})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'cache_obj_op',10}}] )
      -| [{'function',{'cache_obj_op',10}}] )
'delayed_write'/2 =
    %% Line 3068
    ( fun (_0,_1) ->
	  %% Line 3069
	  ( case _0 of
	      ( <( {'head',_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_rec133,_57,_58,_59,_60,_61,_62,_63,_64}
		   -| ['compiler_generated'] )> when 'true' ->
		    %% Line 3070
		    ( case _rec133 of
			( <( {'cache',_66,_67,_68,_rec134,_69,_70}
			     -| ['compiler_generated'] )> when 'true' ->
			      %% Line 3071
			      case <> of
				%% Line 3072
				<>
				    when call 'erlang':'=:='
					  (_rec134,
					   _1) ->
				    let <_8> =
					catch
					    %% Line 3074
					    apply 'write_cache'/1
						(_0)
				    in  %% Line 3074
					case _8 of
					  %% Line 3075
					  <{Head2,[]}> when 'true' ->
					      %% Line 3076
					      ( case Head2 of
						  ( <( {'head',_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_rec136,_92,_93,_94,_95,_96,_97,_98,_99}
						       -| ['compiler_generated'] )> when 'true' ->
							case _rec136 of
							  <{'cache',_101,_102,_103,_104,_105,_106}> when 'true' ->
							      let <_13> =
								  call 'erlang':'setelement'
								      (5, _rec136, 'undefined')
							      in  %% Line 3077
								  case Head2 of
								    <{'head',_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136}> when 'true' ->
									call 'erlang':'setelement'
									    (22, Head2, _13)
								    ( <_137> when 'true' ->
									  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'error'
														 -| ['compiler_generated'] )
										(( {'badrecord','head'}
										   -| ['compiler_generated'] ))
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								  end
							  ( <_107> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','cache'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
						    -| ['compiler_generated'] )
						  ( <_100> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','head'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  %% Line 3078
					  <{NewHead,_X_Error}> when 'true' ->
					      %% Line 3079
					      NewHead
					  ( <_17> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_17})
					    -| ['compiler_generated'] )
					end
				%% Line 3081
				<> when 'true' ->
				    %% Line 3084
				    case <> of
				      %% Line 3085
				      <>
					  when ( try
						  ( let <_20> =
							case ( call ( 'erlang'
								      -| ['compiler_generated'] ):( 'is_record'
												    -| ['compiler_generated'] )
								   (_rec133, ( 'cache'
									       -| ['compiler_generated'] ), ( 7
													      -| ['compiler_generated'] ))
							       -| ['compiler_generated'] ) of
							  ( <( 'true'
							       -| ['compiler_generated'] )> when 'true' ->
								( 'true'
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							  ( <( 'false'
							       -| ['compiler_generated'] )> when 'true' ->
								( 'fail'
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							  ( <( _18
							       -| ['compiler_generated'] )> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {( 'badarg'
									    -| ['compiler_generated'] ),( _18
													  -| ['compiler_generated'] )}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
						    in  let <_21> =
							    call 'erlang':'=:='
								(( _20
								   -| ['compiler_generated'] ), 'true')
							in  let <_22> =
								call 'erlang':'element'
								    (3, _rec133)
							    in  let <_23> =
								    call 'erlang':'=:='
									(_22, 0)
								in  ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'and'
													   -| ['compiler_generated'] )
									  (_21, _23)
								      -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      of <Try> ->
						  Try
					      catch <T,R> ->
						  'false'
					      -| ['compiler_generated'] ) ->
					  %% Line 3087
					  case _rec133 of
					    <{'cache',_138,_139,_140,_141,_142,_143}> when 'true' ->
						let <_26> =
						    call 'erlang':'setelement'
							(5, _rec133, 'undefined')
						in  %% Line 3088
						    case _0 of
						      <{'head',_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_171,_172,_173}> when 'true' ->
							  call 'erlang':'setelement'
							      (22, _0, _26)
						      ( <_174> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','head'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
					    ( <_144> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','cache'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				      %% Line 3089
				      <> when 'true' ->
					  let <_30> =
					      call %% Line 3091
						   'erlang':%% Line 3091
							    '-'
						  (_rec134, _1)
					  in  let <_31> =
						  call %% Line 3091
						       'erlang':%% Line 3091
								'/'
						      (_30, %% Line 3091
							    1000)
					      in  let <When> =
						      call %% Line 3091
							   'erlang':%% Line 3091
								    'round'
							  (_31)
						  in  let <Me> =
							  call %% Line 3091
							       'erlang':%% Line 3091
									'self'
							      ()
						      in  let <Call> = {%% Line 3092
							       '$dets_call',%% Line 3092
									    Me,%% Line 3092
									       {'delayed_write',_rec134}}
							  in  do  %% Line 3093
								  call 'erlang':'send_after'
								      (When, Me, Call)
								  _0
				    end
			      end
			  -| ['compiler_generated'] )
			( <_71> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','cache'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	      ( <_65> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'delayed_write',2}}] )
'write_cache'/1 =
    %% Line 3099
    ( fun (_0) ->
	  %% Line 3100
	  case call 'dets_v9':'write_cache'
		   (( _0
		      -| [{'function',{'write_cache',1}}] )) of
	    <{Head1,LU,PwriteList}> when 'true' ->
		%% Line 3101
		case call 'dets_utils':'pwrite'
			 (Head1, PwriteList) of
		  <{NewHead,'ok'}> when 'true' ->
		      %% Line 3102
		      {NewHead,LU}
		  ( <_2> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_2})
		    -| ['compiler_generated'] )
		end
	    ( <_1> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_1})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'write_cache',1}}] )
'status'/1 =
    %% Line 3104
    ( fun (_0) ->
	  %% Line 3105
	  ( case ( _0
		   -| [{'function',{'status',1}}] ) of
	      ( <( {'head',_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_rec140,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32}
		   -| ['compiler_generated'] )> when 'true' ->
		    case _rec140 of
		      %% Line 3106
		      <'saved'> when 'true' ->
			  'ok'
		      %% Line 3107
		      <'dirty'> when 'true' ->
			  'ok'
		      %% Line 3108
		      <'new_dirty'> when 'true' ->
			  'ok'
		      %% Line 3109
		      <Error> when 'true' ->
			  Error
		    end
		-| ['compiler_generated'] )
	      ( <_33> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'status',1}}] )
'init_scan'/2 =
    %% Line 3115
    ( fun (_0,_1) ->
	  do  %% Line 3116
	      apply 'check_safe_fixtable'/1
		  (_0)
	      let <FreeLists> =
		  call %% Line 3117
		       'dets_utils':%% Line 3117
				    'get_freelists'
		      (_0)
	      in  %% Line 3118
		  ( case _0 of
		      ( <( {'head',_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_rec141}
			   -| ['compiler_generated'] )> when 'true' ->
			    %% Line 3119
			    case call 'dets_utils':'find_next_allocated'
				     (FreeLists, _rec141, _rec141) of
			      %% Line 3120
			      <{From,To}> when 'true' ->
				  %% Line 3121
				  {'dets_cont','undefined',_1,#{}#,{From,To,#{}#},'undefined','undefined','undefined'}
			      %% Line 3122
			      <'none'> when 'true' ->
				  %% Line 3123
				  {'dets_cont','undefined',_1,'eof',#{}#,'undefined','undefined','undefined'}
			      ( <_6> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_6})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_37> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
      -| [{'function',{'init_scan',2}}] )
'check_safe_fixtable'/1 =
    %% Line 3126
    ( fun (_0) ->
	  %% Line 3127
	  ( case ( _0
		   -| [{'function',{'check_safe_fixtable',1}}] ) of
	      ( <( {'head',_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_rec142,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40}
		   -| ['compiler_generated'] )> when 'true' ->
		    let <_8> =
			case call 'erlang':'=:='
				 (_rec142, 'false') of
			  ( <( 'true'
			       -| ['compiler_generated'] )> when 'true' ->
				let <_5> =
				    call %% Line 3128
					 'erlang':%% Line 3128
						  'get'
					(%% Line 3128
					 'verbose')
				in  %% Line 3128
				    ( case call 'erlang':'=:='
					       (_5, 'yes') of
					( <( 'true'
					     -| ['compiler_generated'] )> when 'true' ->
					      'true'
					  -| ['compiler_generated'] )
					( <( 'false'
					     -| ['compiler_generated'] )> when 'true' ->
					      call 'dets_utils':'debug_mode'
						  ()
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <( 'false'
			       -| ['compiler_generated'] )> when 'true' ->
				'false'
			    -| ['compiler_generated'] )
			end
		    in  case _8 of
			  %% Line 3129
			  <'true'> when 'true' ->
			      %% Line 3132
			      ( case ( _0
				       -| [{'function',{'check_safe_fixtable',1}}] ) of
				  ( <( {'head',_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_rec143,_66,_67,_68,_69}
				       -| ['compiler_generated'] )> when 'true' ->
					call 'error_logger':'format'
					    ([42|[42|[32|[100|[101|[116|[115|[58|[32|[116|[114|[97|[118|[101|[114|[115|[97|[108|[32|[111|[102|[32|[126|[116|[112|[32|[110|[101|[101|[100|[115|[32|[115|[97|[102|[101|[95|[102|[105|[120|[116|[97|[98|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_rec143|[]])
				    -| ['compiler_generated'] )
				  ( <_70> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','head'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 3133
			  <'false'> when 'true' ->
			      %% Line 3134
			      'ok'
			  ( <_11> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_11})
			    -| ['compiler_generated'] )
			end
		-| ['compiler_generated'] )
	      ( <_41> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','head'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'check_safe_fixtable',1}}] )
'scan'/2 =
    %% Line 3139
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <_X_Head,C = {'dets_cont',_12,_13,_14,#{}#,_15,_16,_17}> when 'true' ->
		  %% Line 3140
		  {[],C}
	      %% Line 3141
	      <Head,C> when 'true' ->
		  %% Line 3142
		  case C of
		    <{'dets_cont',_18,No,Bin,L0,_19,_20,_21}> when 'true' ->
			%% Line 3143
			case L0 of
			  <{From,To,L}> when 'true' ->
			      let <_6> =
				  case %% Line 3144
				       No of
				    %% Line 3145
				    <'default'> when 'true' ->
					%% Line 3146
					0
				    %% Line 3147
				    <_22>
					when call 'erlang':'is_integer'
					      (No) ->
					let <_4> =
					    call %% Line 3148
						 'erlang':%% Line 3148
							  '-'
						(%% Line 3148
						 No)
					in  %% Line 3148
					    call 'erlang':'-'
						(_4, 1)
				    ( <_5> when 'true' ->
					  %% Line 3144
					  primop 'match_fail'
					      ({'case_clause',_5})
				      -| ['compiler_generated'] )
				  end
			      in  %% Line 3150
				  ( case Head of
				      ( <( {'head',_23,_24,_25,_26,_27,_28,_29,_30,_rec144,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50}
					   -| ['compiler_generated'] )> when 'true' ->
					    apply 'scan'/8
						(Bin, Head, From, To, L, [], _6, {C,_rec144})
					-| ['compiler_generated'] )
				      ( <_51> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','head'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			  ( <_3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_3})
			    -| ['compiler_generated'] )
			end
		    ( <_2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_2})
		      -| ['compiler_generated'] )
		  end
	    end
	    -| [{'function',{'scan',2}}] )
      -| [{'function',{'scan',2}}] )
'scan'/8 =
    %% Line 3152
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6,_7> of
	      <Bin,H,From,To,L,Ts,R,C = {C0,Type}> when 'true' ->
		  %% Line 3153
		  case call 'dets_v9':'scan_objs'
			   (H, Bin, From, To, L, Ts, R, Type) of
		    %% Line 3154
		    <{'more',NFrom,NTo,NL,NTs,NR,Sz}> when 'true' ->
			%% Line 3155
			apply 'scan_read'/8
			    (H, NFrom, NTo, Sz, NL, NTs, NR, C)
		    %% Line 3156
		    <{'stop',B = #{}#,NFrom,NTo,NL = #{}#,NTs}> when 'true' ->
			let <Ftab> =
			    call %% Line 3157
				 'dets_utils':%% Line 3157
					      'get_freelists'
				(%% Line 3157
				 H)
			in  %% Line 3158
			    ( case H of
				( <( {'head',_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_rec145}
				     -| ['compiler_generated'] )> when 'true' ->
				      case call 'dets_utils':'find_next_allocated'
					       (Ftab, NFrom, _rec145) of
					%% Line 3159
					<'none'> when 'true' ->
					    %% Line 3160
					    case C0 of
					      <{'dets_cont',_65,_66,_67,_68,_69,_70,_71}> when 'true' ->
						  let <_12> =
						      call 'erlang':'setelement'
							  (5, C0, B)
						  in  let <_14> =
							  call 'erlang':'setelement'
							      (4, _12, 'eof')
						      in  {NTs,_14}
					      ( <_72> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','dets_cont'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					%% Line 3161
					<_73> when 'true' ->
					    let <_rec147> = {%% Line 3162
						 NFrom,%% Line 3162
						       NTo,%% Line 3162
							   NL}
					    in  %% Line 3162
						case C0 of
						  <{'dets_cont',_74,_75,_76,_77,_78,_79,_80}> when 'true' ->
						      let <_17> =
							  call 'erlang':'setelement'
							      (5, C0, _rec147)
						      in  let <_19> =
							      call 'erlang':'setelement'
								  (4, _17, B)
							  in  {NTs,_19}
						  ( <_81> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','dets_cont'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
				      end
				  -| ['compiler_generated'] )
				( <_64> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','head'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    %% Line 3164
		    <{'stop',B,NFrom,NTo,NL,NTs}> when 'true' ->
			let <_rec149> = {%% Line 3165
			     NFrom,%% Line 3165
				   NTo,%% Line 3165
				       NL}
			in  %% Line 3165
			    case C0 of
			      <{'dets_cont',_82,_83,_84,_85,_86,_87,_88}> when 'true' ->
				  let <_23> =
				      call 'erlang':'setelement'
					  (5, C0, _rec149)
				  in  let <_25> =
					  call 'erlang':'setelement'
					      (4, _23, B)
				      in  {NTs,_25}
			      ( <_89> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','dets_cont'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
		    %% Line 3166
		    <'bad_object'> when 'true' ->
			let <_26> =
			    call %% Line 3167
				 'dets_utils':%% Line 3167
					      'bad_object'
				(%% Line 3167
				 'scan', %% Line 3167
					 {From,To,Bin})
			in  %% Line 3167
			    {'scan_error',_26}
		    ( <_27> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_27})
		      -| ['compiler_generated'] )
		  end
	      ( <_35,_34,_33,_32,_31,_30,_29,_28> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_35,_34,_33,_32,_31,_30,_29,_28})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'scan',8}}] )
      -| [{'function',{'scan',8}}] )
'scan_read'/8 =
    %% Line 3170
    ( fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	  ( case <_0,_1,_2,_3,_4,_5,_6,_7> of
	      <_X_H,From,To,_X_Min,L0,Ts,%% Line 3171
					 R,%% Line 3171
					   {C,_X_Type}>
		  when %% Line 3171
		    call 'erlang':'>='
			(R,
			 8192) ->
		  let <L> = {%% Line 3173
		       From,%% Line 3173
			    To,%% Line 3173
			       L0}
		  in  %% Line 3174
		      case C of
			<{'dets_cont',_35,_36,_37,_38,_39,_40,_41}> when 'true' ->
			    let <_10> =
				call 'erlang':'setelement'
				    (5, C, L)
			    in  let <_12> =
				    call 'erlang':'setelement'
					(4, _10, #{}#)
				in  {Ts,_12}
			( <_42> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','dets_cont'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	      %% Line 3175
	      <H,From,_X_To,Min,_X_L,Ts,R,C> when 'true' ->
		  let <_13> =
		      case <> of
			%% Line 3177
			<>
			    when call 'erlang':'<'
				  (Min,
				   8192) ->
			    8192
			%% Line 3178
			<> when 'true' ->
			    Min
		      end
		  in  let <FreeLists> =
			  call %% Line 3180
			       'dets_utils':%% Line 3180
					    'get_freelists'
			      (%% Line 3180
			       H)
		      in  %% Line 3181
			  ( case H of
			      ( <( {'head',_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_rec152}
				   -| ['compiler_generated'] )> when 'true' ->
				    case call 'dets_utils':'find_allocated'
					     (FreeLists, From, _13, _rec152) of
				      %% Line 3182
				      <Bin0 = #{}#> when 'true' ->
					  %% Line 3183
					  case C of
					    <{Cont,_72}> when 'true' ->
						%% Line 3184
						case Cont of
						  <{'dets_cont',_73,_74,_75,_76,_77,_78,_79}> when 'true' ->
						      let <_20> =
							  call 'erlang':'setelement'
							      (5, Cont, Bin0)
						      in  let <_22> =
							      call 'erlang':'setelement'
								  (4, _20, 'eof')
							  in  {Ts,_22}
						  ( <_80> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','dets_cont'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					    ( <_18> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_18})
					      -| ['compiler_generated'] )
					  end
				      %% Line 3185
				      <#{#<From1>(32,1,'integer',['unsigned'|['big']]),
					 #<To1>(32,1,'integer',['unsigned'|['big']]),
					 #<L1>(( 'all'
						 -| ['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#> when 'true' ->
					  %% Line 3186
					  ( case H of
					      ( <( {'head',_81,_82,_83,_rec154,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108}
						   -| ['compiler_generated'] )> when 'true' ->
						    case call 'dets_utils':'pread_n'
							     (_rec154, From1, _13) of
						      %% Line 3187
						      <'eof'> when 'true' ->
							  %% Line 3188
							  {'scan_error','premature_eof'}
						      %% Line 3189
						      <NewBin> when 'true' ->
							  %% Line 3190
							  apply 'scan'/8
							      (NewBin, H, From1, To1, L1, Ts, R, C)
						    end
						-| ['compiler_generated'] )
					      ( <_109> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','head'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      ( <_26> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_26})
					-| ['compiler_generated'] )
				    end
				-| ['compiler_generated'] )
			      ( <_71> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','head'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
	    end
	    -| [{'function',{'scan_read',8}}] )
      -| [{'function',{'scan_read',8}}] )
'err'/1 =
    %% Line 3194
    ( fun (_0) ->
	  %% Line 3195
	  case call 'erlang':'get'
		   ('verbose') of
	    %% Line 3196
	    <'yes'> when 'true' ->
		do  %% Line 3197
		    call 'error_logger':'format'
			([42|[42|[32|[100|[101|[116|[115|[58|[32|[102|[97|[105|[108|[101|[100|[32|[119|[105|[116|[104|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]], [( _0
																						 -| [{'function',{'err',1}}] )|[]])
		    ( _0
		      -| [{'function',{'err',1}}] )
	    %% Line 3199
	    <'undefined'> when 'true' ->
		( _0
		  -| [{'function',{'err',1}}] )
	    ( <_1> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_1})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'err',1}}] )
'time_now'/0 =
    %% Line 3204
    ( fun () ->
	  %% Line 3205
	  call 'erlang':'monotonic_time'
	      (1000000)
      -| [{'function',{'time_now',0}}] )
'make_timestamp'/2 =
    %% Line 3207
    ( fun (_0,_1) ->
	  let <_2> =
	      call %% Line 3208
		   'erlang':%% Line 3208
			    '+'
		  (_0, _1)
	  in  let <ErlangSystemTime> =
		  call %% Line 3208
		       'erlang':%% Line 3208
				'convert_time_unit'
		      (_2, %% Line 3209
			   'native', %% Line 3210
				     'microsecond')
	      in  let <MegaSecs> =
		      call %% Line 3211
			   'erlang':%% Line 3211
				    'div'
			  (%% Line 3211
			   ErlangSystemTime, %% Line 3211
					     1000000000000)
		  in  let <_6> =
			  call %% Line 3212
			       'erlang':%% Line 3212
					'div'
			      (%% Line 3212
			       ErlangSystemTime, %% Line 3212
						 1000000)
		      in  let <_5> =
			      call %% Line 3212
				   'erlang':%% Line 3212
					    '*'
				  (%% Line 3212
				   MegaSecs, %% Line 3212
					     1000000)
			  in  let <Secs> =
				  call %% Line 3212
				       'erlang':%% Line 3212
						'-'
				      (_6, _5)
			      in  let <MicroSecs> =
				      call %% Line 3213
					   'erlang':%% Line 3213
						    'rem'
					  (%% Line 3213
					   ErlangSystemTime, %% Line 3213
							     1000000)
				  in  %% Line 3214
				      {MegaSecs,Secs,MicroSecs}
      -| [{'function',{'make_timestamp',2}}] )
'file_info'/1 =
    %% Line 3218
    ( fun (_0) ->
	  let <_1> =
	      catch
		  %% Line 3219
		  apply 'read_file_header'/3
		      (( _0
			 -| [{'function',{'file_info',1}}] ), 'read', 'false')
	  in  %% Line 3219
	      case _1 of
		%% Line 3220
		<{'ok',Fd,FH}> when 'true' ->
		    do  %% Line 3221
			( call ( 'file'
				 -| ['result_not_wanted'] ):( 'close'
							      -| ['result_not_wanted'] )
			      (Fd)
			  -| ['result_not_wanted'] )
			%% Line 3222
			call 'dets_v9':'file_info'
			    (FH)
		%% Line 3223
		<Other> when 'true' ->
		    %% Line 3224
		    Other
	      end
      -| [{'function',{'file_info',1}}] )
'get_head_field'/2 =
    %% Line 3227
    ( fun (_0,_1) ->
	  %% Line 3228
	  call 'dets_utils':'read_4'
	      (_0, _1)
      -| [{'function',{'get_head_field',2}}] )
'view'/1 =
    %% Line 3234
    ( fun (_0) ->
	  let <_1> =
	      catch
		  %% Line 3235
		  apply 'read_file_header'/3
		      (( _0
			 -| [{'function',{'view',1}}] ), 'read', 'false')
	  in  %% Line 3235
	      case _1 of
		%% Line 3236
		<{'ok',Fd,FH}> when 'true' ->
		    %% Line 3237
		    letrec
			'after$^0'/0 =
			    fun () ->
				%% Line 3248
				( call ( 'file'
					 -| ['result_not_wanted'] ):( 'close'
								      -| ['result_not_wanted'] )
				      (Fd)
				  -| ['result_not_wanted'] )
		    in  try
			    try
				call 'dets_v9':'check_file_header'
				    (FH, Fd)
			    of <_2> ->
				case _2 of
				  %% Line 3238
				  <{'ok',H0}> when 'true' ->
				      %% Line 3239
				      case call 'dets_v9':'check_file_header'
					       (FH, Fd) of
					%% Line 3240
					<{'ok',_16}>
					    when call 'erlang':'=:='
						  (_16,
						   H0) ->
					    let <H> =
						call %% Line 3241
						     'dets_v9':%% Line 3241
							       'init_freelist'
						    (%% Line 3241
						     H0)
					    in  do  %% Line 3242
						    apply 'v_free_list'/1
							(H)
						    do  %% Line 3243
							call 'dets_v9':'v_segments'
							    (H)
							%% Line 3244
							'ok'
					%% Line 3245
					<X> when 'true' ->
					    %% Line 3246
					    X
				      end
				  ( <_5> when 'true' ->
					primop 'match_fail'
					    ({'try_clause',_5})
				    -| ['compiler_generated'] )
				end
			    catch <_8,_7,_6> ->
				primop 'raise'
				    (_6, _7)
			of <_10> ->
			    do  ( apply 'after$^0'/0
				      ()
				  -| ['compiler_generated'] )
				_10
			catch <_13,_12,_11> ->
			    do  ( apply 'after$^0'/0
				      ()
				  -| ['compiler_generated'] )
				primop 'raise'
				    (_11, _12)
		%% Line 3250
		<X> when 'true' ->
		    %% Line 3251
		    X
	      end
      -| [{'function',{'view',1}}] )
'v_free_list'/1 =
    %% Line 3254
    ( fun (_0) ->
	  do  %% Line 3255
	      call 'io':'format'
		  ([70|[82|[69|[69|[32|[76|[73|[83|[84|[32|[46|[46|[46|[46|[46|[46|[32|[10]]]]]]]]]]]]]]]]]], [])
	      let <_1> =
		  call %% Line 3256
		       'dets_utils':%% Line 3256
				    'all_free'
		      (( _0
			 -| [{'function',{'v_free_list',1}}] ))
	      in  do  %% Line 3256
		      call 'io':'format'
			  ([126|[112|[126|[110]]]], [_1|[]])
		      %% Line 3257
		      call 'io':'format'
			  ([69|[78|[68|[32|[79|[70|[32|[70|[82|[69|[69|[32|[76|[73|[83|[84|[32|[10]]]]]]]]]]]]]]]]]], [])
      -| [{'function',{'v_free_list',1}}] )
'module_info'/0 =
    ( fun () ->
	  call 'erlang':'get_module_info'
	      ('dets')
      -| [{'function',{'module_info',0}}] )
'module_info'/1 =
    ( fun (_0) ->
	  call 'erlang':'get_module_info'
	      ('dets', ( _0
			 -| [{'function',{'module_info',1}}] ))
      -| [{'function',{'module_info',1}}] )
end