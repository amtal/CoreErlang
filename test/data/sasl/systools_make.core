module 'systools_make' ['format_error'/1,
			'format_warning'/1,
			'get_release'/2,
			'get_release'/3,
			'get_release'/4,
			'make_hybrid_boot'/4,
			'make_script'/1,
			'make_script'/2,
			'make_script'/3,
			'make_tar'/1,
			'make_tar'/2,
			'module_info'/0,
			'module_info'/1,
			'pack_app'/1,
			'preloaded'/0,
			'read_application'/4,
			'read_release'/2]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[115|[121|[115|[116|[111|[111|[108|[115|[95|[109|[97|[107|[101|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[115|[121|[115|[116|[111|[111|[108|[115|[46|[104|[114|[108]]]]]]]]]]]]]]]],1}],
		%% Line 27
		'record' =
		    %% Line 27
		    [{'release',[{'record_field',29,{'atom',29,'name'}}|[{'record_field',30,{'atom',30,'vsn'}}|[{'record_field',31,{'atom',31,'erts_vsn'}}|[{'record_field',32,{'atom',32,'applications'}}|[{'record_field',35,{'atom',35,'incl_apps'}}]]]]]}],
		%% Line 40
		'record' =
		    %% Line 40
		    [{'application',[{'record_field',41,{'atom',41,'name'}}|[{'record_field',42,{'atom',42,'type'},{'atom',42,'permanent'}}|[{'record_field',43,{'atom',43,'vsn'},{'string',43,[]}}|[{'record_field',44,{'atom',44,'id'},{'string',44,[]}}|[{'record_field',45,{'atom',45,'description'},{'string',45,[]}}|[{'record_field',46,{'atom',46,'modules'},{'nil',46}}|[{'record_field',49,{'atom',49,'uses'},{'nil',49}}|[{'record_field',51,{'atom',51,'includes'},{'nil',51}}|[{'record_field',53,{'atom',53,'regs'},{'nil',53}}|[{'record_field',56,{'atom',56,'env'},{'nil',56}}|[{'record_field',58,{'atom',58,'maxT'},{'atom',58,'infinity'}}|[{'record_field',60,{'atom',60,'maxP'},{'atom',60,'infinity'}}|[{'record_field',62,{'atom',62,'mod'},{'nil',62}}|[{'record_field',64,{'atom',64,'start_phases'}}|[{'record_field',67,{'atom',67,'dir'},{'string',67,[]}}]]]]]]]]]]]]]]]}],
		%% Line 42
		'file' =
		    %% Line 42
		    [{[115|[114|[99|[47|[115|[121|[115|[116|[111|[111|[108|[115|[95|[109|[97|[107|[101|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]],42}],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[47|[117|[115|[114|[47|[108|[111|[99|[97|[108|[47|[67|[101|[108|[108|[97|[114|[47|[101|[114|[108|[97|[110|[103|[47|[50|[50|[46|[50|[47|[108|[105|[98|[47|[101|[114|[108|[97|[110|[103|[47|[108|[105|[98|[47|[107|[101|[114|[110|[101|[108|[45|[54|[46|[53|[46|[49|[47|[105|[110|[99|[108|[117|[100|[101|[47|[102|[105|[108|[101|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 25
		'record' =
		    %% Line 25
		    [{'file_info',[{'typed_record_field',{'record_field',26,{'atom',26,'size'}},{'type',26,'union',[{'type',26,'non_neg_integer',[]}|[{'atom',26,'undefined'}]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'type'}},{'type',27,'union',[{'atom',27,'device'}|[{'atom',27,'directory'}|[{'atom',27,'other'}|[{'atom',27,'regular'}|[{'atom',27,'symlink'}|[{'atom',28,'undefined'}]]]]]]}}|[{'typed_record_field',{'record_field',29,{'atom',29,'access'}},{'type',29,'union',[{'atom',29,'read'}|[{'atom',29,'write'}|[{'atom',29,'read_write'}|[{'atom',29,'none'}|[{'atom',29,'undefined'}]]]]]}}|[{'typed_record_field',{'record_field',30,{'atom',30,'atime'}},{'type',30,'union',[{'remote_type',30,[{'atom',30,'file'}|[{'atom',30,'date_time'}|[[]]]]}|[{'type',30,'non_neg_integer',[]}|[{'atom',30,'undefined'}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'mtime'}},{'type',34,'union',[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}|[{'atom',34,'undefined'}]]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'ctime'}},{'type',36,'union',[{'remote_type',36,[{'atom',36,'file'}|[{'atom',36,'date_time'}|[[]]]]}|[{'type',36,'non_neg_integer',[]}|[{'atom',36,'undefined'}]]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'mode'}},{'type',42,'union',[{'type',42,'non_neg_integer',[]}|[{'atom',42,'undefined'}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'links'}},{'type',46,'union',[{'type',46,'non_neg_integer',[]}|[{'atom',46,'undefined'}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'major_device'}},{'type',49,'union',[{'type',49,'non_neg_integer',[]}|[{'atom',49,'undefined'}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'minor_device'}},{'type',55,'union',[{'type',55,'non_neg_integer',[]}|[{'atom',55,'undefined'}]]}}|[{'typed_record_field',{'record_field',57,{'atom',57,'inode'}},{'type',57,'union',[{'type',57,'non_neg_integer',[]}|[{'atom',57,'undefined'}]]}}|[{'typed_record_field',{'record_field',58,{'atom',58,'uid'}},{'type',58,'union',[{'type',58,'non_neg_integer',[]}|[{'atom',58,'undefined'}]]}}|[{'typed_record_field',{'record_field',59,{'atom',59,'gid'}},{'type',59,'union',[{'type',59,'non_neg_integer',[]}|[{'atom',59,'undefined'}]]}}]]]]]]]]]]]]]}],
		%% Line 62
		'record' =
		    %% Line 62
		    [{'file_descriptor',[{'typed_record_field',{'record_field',63,{'atom',63,'module'}},{'type',63,'module',[]}}|[{'typed_record_field',{'record_field',64,{'atom',64,'data'}},{'type',64,'term',[]}}]]}],
		%% Line 44
		'file' =
		    %% Line 44
		    [{[115|[114|[99|[47|[115|[121|[115|[116|[111|[111|[108|[115|[95|[109|[97|[107|[101|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]],44}],
		%% Line 47
		'compile' =
		    %% Line 47
		    [{'inline',[{'badarg',2}]}]]
'make_script'/1 =
    %% Line 75
    fun (_0) ->
	case _0 of
	  <RelName>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 76
	      apply 'make_script'/2
		  (RelName, [])
	  %% Line 77
	  <RelName> when 'true' ->
	      let <_1> =
		  [%% Line 78
		   RelName|%% Line 78
			   ( []
			     -| ['compiler_generated'] )]
	      in  %% Line 139
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {( 'badarg'
			      -| ['compiler_generated'] ),RelName}
			   -| ['compiler_generated'] ), _1)
		    -| ['compiler_generated'] )
	end
'make_script'/2 =
    %% Line 80
    fun (_0,_1) ->
	case <_0,_1> of
	  <RelName,Flags>
	      when let <_2> =
		    call 'erlang':'is_list'
			(RelName)
		in  let <_3> =
			call 'erlang':'is_list'
			    (Flags)
		    in  call 'erlang':'and'
			    (_2, _3) ->
	      %% Line 81
	      case apply 'get_outdir'/1
		       (Flags) of
		%% Line 82
		<[]> when 'true' ->
		    %% Line 83
		    apply 'make_script'/3
			(RelName, RelName, Flags)
		%% Line 84
		<OutDir> when 'true' ->
		    let <_4> =
			call %% Line 89
			     'filename':%% Line 89
					'basename'
			    (%% Line 89
			     RelName)
		    in  let <Output> =
			    call %% Line 89
				 'filename':%% Line 89
					    'join'
				(%% Line 89
				 OutDir, _4)
			in  %% Line 90
			    apply 'make_script'/3
				(RelName, Output, Flags)
	      end
	  ( <_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7})
		  -| [{'function_name',{'make_script',2}}] )
	    -| ['compiler_generated'] )
	end
'make_script'/3 =
    %% Line 93
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <RelName,Output,Flags>
	      when try
		    let <_3> =
			call 'erlang':'is_list'
			    (RelName)
		    in  let <_4> =
			    call %% Line 94
				 'erlang':%% Line 94
					  'is_list'
				(%% Line 94
				 Output)
			in  let <_5> =
				call %% Line 95
				     'erlang':%% Line 95
					      'is_list'
				    (%% Line 95
				     Flags)
			    in  let <_6> =
				    call 'erlang':'and'
					(_4, _5)
				in  call 'erlang':'and'
					(_3, _6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 96
	      case apply 'check_args_script'/1
		       (Flags) of
		%% Line 97
		<[]> when 'true' ->
		    let <Path0> =
			apply %% Line 98
			      'get_path'/1
			    (%% Line 98
			     Flags)
		    in  let <Path1> =
			    apply %% Line 99
				  'mk_path'/1
				(%% Line 99
				 Path0)
			in  let <_9> =
				call %% Line 100
				     'code':%% Line 100
					    'get_path'
				    ()
			    in  let <_10> =
				    call %% Line 100
					 'erlang':%% Line 100
						  '++'
					(%% Line 100
					 Path1, _9)
				in  let <Path> =
					apply %% Line 100
					      'make_set'/1
					    (_10)
				    in  let <_13> =
					    call %% Line 101
						 'lists':%% Line 101
							 'member'
						(%% Line 101
						 'src_tests', %% Line 101
							      Flags)
					in  let <_12> =
						apply %% Line 101
						      'xref_p'/1
						    (%% Line 101
						     Flags)
					    in  let <ModTestP> = {_13,_12}
						in  let <_15> =
							apply %% Line 102
							      'machine'/1
							    (%% Line 102
							     Flags)
						    in  %% Line 102
							case apply 'get_release'/4
								 (RelName, Path, ModTestP, _15) of
							  %% Line 103
							  <{'ok',Release,Appls,Warnings0}> when 'true' ->
							      let <Warnings> =
								  apply %% Line 104
									'wsasl'/2
								      (%% Line 104
								       Flags, %% Line 104
									      Warnings0)
							      in  %% Line 105
								  case call 'systools_lib':'werror'
									   (Flags, Warnings) of
								    %% Line 106
								    <'true'> when 'true' ->
									let <_21> =
									    letrec
										'lc$^0'/1 =
										    %% Line 107
										    fun (_19) ->
											case _19 of
											  <[{'warning',W}|_18]> when 'true' ->
											      let <_20> =
												  apply 'lc$^0'/1
												      (_18)
											      in  ( [W|_20]
												    -| ['compiler_generated'] )
											  ( <[_17|_18]> when 'true' ->
												apply 'lc$^0'/1
												    (_18)
											    -| ['compiler_generated'] )
											  <[]> when 'true' ->
											      []
											  ( <_30> when 'true' ->
												( primop 'match_fail'
												      ({'function_clause',_30})
												  -| [{'function_name',{'lc$^0',1}}] )
											    -| ['compiler_generated'] )
											end
									    in  %% Line 107
										apply 'lc$^0'/1
										    (Warnings)
									in  %% Line 108
									    apply 'return'/3
										({'error','systools_make',%% Line 109
													  {'warnings_treated_as_errors',_21}}, %% Line 110
																	       Warnings, %% Line 111
																			 Flags)
								    %% Line 112
								    <'false'> when 'true' ->
									%% Line 113
									case apply 'generate_script'/4
										 (Output, Release, Appls, Flags) of
									  %% Line 114
									  <'ok'> when 'true' ->
									      %% Line 115
									      apply 'return'/3
										  ('ok', Warnings, Flags)
									  %% Line 116
									  <Error> when 'true' ->
									      %% Line 117
									      apply 'return'/3
										  (Error, Warnings, Flags)
									end
								    ( <_24> when 'true' ->
									  primop 'match_fail'
									      ({'case_clause',_24})
								      -| ['compiler_generated'] )
								  end
							  %% Line 120
							  <Error> when 'true' ->
							      %% Line 121
							      apply 'return'/3
								  (Error, [], Flags)
							end
		%% Line 123
		<ErrorVars> when 'true' ->
		    let <_32> =
			[%% Line 124
			 RelName|%% Line 124
				 ( [Flags|( []
					    -| ['compiler_generated'] )]
				   -| ['compiler_generated'] )]
		    in  %% Line 139
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),ErrorVars}
				 -| ['compiler_generated'] ), _32)
			  -| ['compiler_generated'] )
	      end
	  %% Line 127
	  <RelName,_X_Output,Flags>
	      when call 'erlang':'is_list'
		    (Flags) ->
	      let <_36> =
		  [%% Line 128
		   RelName|%% Line 128
			   ( [Flags|( []
				      -| ['compiler_generated'] )]
			     -| ['compiler_generated'] )]
	      in  %% Line 139
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {( 'badarg'
			      -| ['compiler_generated'] ),RelName}
			   -| ['compiler_generated'] ), _36)
		    -| ['compiler_generated'] )
	  %% Line 129
	  <RelName,_X_Output,Flags> when 'true' ->
	      let <_40> =
		  [%% Line 130
		   RelName|%% Line 130
			   ( [Flags|( []
				      -| ['compiler_generated'] )]
			     -| ['compiler_generated'] )]
	      in  %% Line 139
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {( 'badarg'
			      -| ['compiler_generated'] ),Flags}
			   -| ['compiler_generated'] ), _40)
		    -| ['compiler_generated'] )
	end
'wsasl'/2 =
    %% Line 132
    fun (_0,_1) ->
	%% Line 133
	case call 'lists':'member'
		 ('no_warn_sasl', _0) of
	  %% Line 134
	  <'true'> when 'true' ->
	      call 'lists':'delete'
		  ({'warning','missing_sasl'}, _1)
	  %% Line 135
	  <'false'> when 'true' ->
	      _1
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_2})
	    -| ['compiler_generated'] )
	end
'badarg'/2 =
    %% Line 138
    fun (_0,_1) ->
	%% Line 139
	call 'erlang':'error'
	    ({'badarg',_0}, _1)
'machine'/1 =
    %% Line 141
    fun (_0) ->
	%% Line 142
	case apply 'get_flag'/2
		 ('machine', _0) of
	  %% Line 143
	  <{'machine',Machine}>
	      when call 'erlang':'is_atom'
		    (Machine) ->
	      Machine
	  %% Line 144
	  <_3> when 'true' ->
	      'false'
	end
'get_path'/1 =
    %% Line 147
    fun (_0) ->
	%% Line 148
	case apply 'get_flag'/2
		 ('path', _0) of
	  %% Line 149
	  <{'path',Path}>
	      when call 'erlang':'is_list'
		    (Path) ->
	      Path
	  %% Line 150
	  <_3> when 'true' ->
	      []
	end
'get_outdir'/1 =
    %% Line 153
    fun (_0) ->
	%% Line 154
	case apply 'get_flag'/2
		 ('outdir', _0) of
	  %% Line 155
	  <{'outdir',OutDir}>
	      when call 'erlang':'is_list'
		    (OutDir) ->
	      %% Line 156
	      OutDir
	  %% Line 157
	  <_3> when 'true' ->
	      %% Line 158
	      []
	end
'return'/3 =
    %% Line 161
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <'ok',Warnings,Flags> when 'true' ->
	      %% Line 162
	      case call 'lists':'member'
		       ('silent', Flags) of
		%% Line 163
		<'true'> when 'true' ->
		    %% Line 164
		    {'ok','systools_make',Warnings}
		%% Line 165
		<_10> when 'true' ->
		    let <_3> =
			apply %% Line 166
			      'format_warning'/1
			    (%% Line 166
			     Warnings)
		    in  do  %% Line 166
			    call 'io':'format'
				([126|[116|[115]]], [_3|[]])
			    %% Line 167
			    'ok'
	      end
	  %% Line 169
	  <_@r0 = {'error',Mod,Error},_11,Flags> when 'true' ->
	      %% Line 170
	      case call 'lists':'member'
		       ('silent', Flags) of
		%% Line 171
		<'true'> when 'true' ->
		    %% Line 172
		    _@r0
		%% Line 173
		<_12> when 'true' ->
		    let <_5> =
			call %% Line 174
			     Mod:%% Line 174
				 'format_error'
			    (%% Line 174
			     Error)
		    in  do  %% Line 174
			    call 'io':'format'
				([126|[116|[115]]], [_5|[]])
			    %% Line 175
			    'error'
	      end
	  ( <_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7})
		  -| [{'function_name',{'return',3}}] )
	    -| ['compiler_generated'] )
	end
'make_hybrid_boot'/4 =
    %% Line 195
    fun (_0,_1,_2,_3) ->
	catch
	    %% Line 196
	    apply 'do_make_hybrid_boot'/4
		(_0, _1, _2, _3)
'do_make_hybrid_boot'/4 =
    %% Line 197
    fun (_0,_1,_2,_3) ->
	%% Line 198
	case call 'erlang':'binary_to_term'
		 (_1) of
	  <{'script',{_X_RelName1,_X_RelVsn1},OldScript}> when 'true' ->
	      %% Line 199
	      case call 'erlang':'binary_to_term'
		       (_2) of
		<{'script',{NewRelName,_X_RelVsn2},NewScript}> when 'true' ->
		    let <Fun1> =
			fun (_6) ->
			    %% Line 202
			    case _6 of
			      <{'progress','kernel_load_completed'}> when 'true' ->
				  'false'
			      %% Line 203
			      <_41> when 'true' ->
				  'true'
			    end
		    in  %% Line 205
			case call 'lists':'splitwith'
				 (Fun1, OldScript) of
			  <{_X_OldKernelLoad,OldRest1}> when 'true' ->
			      %% Line 206
			      case call 'lists':'splitwith'
				       (Fun1, NewScript) of
				<{NewKernelLoad,NewRest1}> when 'true' ->
				    let <Fun2> =
					fun (_11) ->
					    %% Line 208
					    case _11 of
					      <{'progress','modules_loaded'}> when 'true' ->
						  'false'
					      %% Line 209
					      <_42> when 'true' ->
						  'true'
					    end
				    in  %% Line 211
					case call 'lists':'splitwith'
						 (Fun2, OldRest1) of
					  <{OldModLoad,OldRest2}> when 'true' ->
					      %% Line 212
					      case call 'lists':'splitwith'
						       (Fun2, NewRest1) of
						<{NewModLoad,NewRest2}> when 'true' ->
						    let <Fun3> =
							fun (_16) ->
							    %% Line 214
							    case _16 of
							      <{'kernelProcess',_43,_44}> when 'true' ->
								  'false'
							      %% Line 215
							      <_45> when 'true' ->
								  'true'
							    end
						    in  %% Line 217
							case call 'lists':'splitwith'
								 (Fun3, OldRest2) of
							  <{OldPaths,OldRest3}> when 'true' ->
							      %% Line 218
							      case call 'lists':'splitwith'
								       (Fun3, NewRest2) of
								<{NewPaths,NewRest3}> when 'true' ->
								    let <Fun4> =
									fun (_21) ->
									    %% Line 220
									    case _21 of
									      <{'progress','init_kernel_started'}> when 'true' ->
										  'false'
									      %% Line 221
									      <_46> when 'true' ->
										  'true'
									    end
								    in  %% Line 223
									case call 'lists':'splitwith'
										 (Fun4, OldRest3) of
									  <{_X_OldKernelProcs,OldApps}> when 'true' ->
									      %% Line 224
									      case call 'lists':'splitwith'
										       (Fun4, NewRest3) of
										<{NewKernelProcs,NewApps}> when 'true' ->
										    let <MatchPaths> =
											apply %% Line 230
											      'get_regexp_path'/0
											    ()
										    in  let <ModLoad> =
											    apply %% Line 231
												  'replace_module_load'/3
												(%% Line 231
												 OldModLoad, %% Line 231
													     NewModLoad, %% Line 231
															 MatchPaths)
											in  let <Paths> =
												apply %% Line 232
												      'replace_paths'/3
												    (%% Line 232
												     OldPaths, %% Line 232
													       NewPaths, %% Line 232
															 MatchPaths)
											    in  %% Line 234
												case apply 'get_apps'/3
													 (NewApps, 'undefined', 'undefined') of
												  <{Stdlib,Sasl}> when 'true' ->
												      let <Apps0> =
													  apply %% Line 235
														'replace_apps'/3
													      (%% Line 235
													       OldApps, %% Line 235
															Stdlib, %% Line 235
																Sasl)
												      in  let <Apps> =
													      apply %% Line 236
														    'add_apply_upgrade'/2
														  (%% Line 236
														   Apps0, _3)
													  in  let <_32> =
														  call %% Line 238
														       'erlang':%% Line 238
																'++'
														      (%% Line 238
														       NewKernelProcs, %% Line 238
																       Apps)
													      in  let <_33> =
														      call %% Line 238
															   'erlang':%% Line 238
																    '++'
															  (%% Line 238
															   Paths, _32)
														  in  let <_34> =
															  call %% Line 238
															       'erlang':%% Line 238
																	'++'
															      (%% Line 238
															       ModLoad, _33)
														      in  let <Script> =
															      call %% Line 238
																   'erlang':%% Line 238
																	    '++'
																  (%% Line 238
																   NewKernelLoad, _34)
															  in  let <Boot> =
																  call %% Line 239
																       'erlang':%% Line 239
																		'term_to_binary'
																      (%% Line 239
																       {'script',{NewRelName,_0},Script})
															      in  %% Line 240
																  {'ok',Boot}
												  ( <_29> when 'true' ->
													primop 'match_fail'
													    ({'badmatch',_29})
												    -| ['compiler_generated'] )
												end
										( <_25> when 'true' ->
										      primop 'match_fail'
											  ({'badmatch',_25})
										  -| ['compiler_generated'] )
									      end
									  ( <_24> when 'true' ->
										primop 'match_fail'
										    ({'badmatch',_24})
									    -| ['compiler_generated'] )
									end
								( <_20> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_20})
								  -| ['compiler_generated'] )
							      end
							  ( <_19> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_19})
							    -| ['compiler_generated'] )
							end
						( <_15> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_15})
						  -| ['compiler_generated'] )
					      end
					  ( <_14> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_14})
					    -| ['compiler_generated'] )
					end
				( <_10> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_10})
				  -| ['compiler_generated'] )
			      end
			  ( <_9> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_9})
			    -| ['compiler_generated'] )
			end
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_5})
		  -| ['compiler_generated'] )
	      end
	  ( <_4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_4})
	    -| ['compiler_generated'] )
	end
'get_regexp_path'/0 =
    %% Line 243
    fun () ->
	%% Line 244
	case call 're':'compile'
		 ([107|[101|[114|[110|[101|[108|[45|[91|[48|[45|[57|[46|[93|[43]]]]]]]]]]]]]], ['unicode']) of
	  <{'ok',KernelMP}> when 'true' ->
	      %% Line 245
	      case call 're':'compile'
		       ([115|[116|[100|[108|[105|[98|[45|[91|[48|[45|[57|[46|[93|[43]]]]]]]]]]]]]], ['unicode']) of
		<{'ok',StdlibMP}> when 'true' ->
		    %% Line 246
		    case call 're':'compile'
			     ([115|[97|[115|[108|[45|[91|[48|[45|[57|[46|[93|[43]]]]]]]]]]]], ['unicode']) of
		      <{'ok',SaslMP}> when 'true' ->
			  %% Line 247
			  [KernelMP|[StdlibMP|[SaslMP|[]]]]
		      ( <_2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_2})
			-| ['compiler_generated'] )
		    end
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_1})
		  -| ['compiler_generated'] )
	      end
	  ( <_0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_0})
	    -| ['compiler_generated'] )
	end
'replace_module_load'/3 =
    %% Line 249
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Old,New,[MP|MatchPaths]> when 'true' ->
	      let <_3> =
		  apply %% Line 250
			'do_replace_module_load'/3
		      (%% Line 250
		       Old, %% Line 250
			    New, %% Line 250
				 MP)
	      in  %% Line 250
		  apply 'replace_module_load'/3
		      (_3, New, MatchPaths)
	  %% Line 251
	  <Script,_7,[]> when 'true' ->
	      %% Line 252
	      Script
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'replace_module_load',3}}] )
	    -| ['compiler_generated'] )
	end
'do_replace_module_load'/3 =
    %% Line 254
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[_@r0 = {'path',[OldAppPath|[]]}|[_@r1 = {'primLoad',OldMods}|OldRest]],New,MP> when 'true' ->
	      %% Line 255
	      case call 're':'run'
		       (OldAppPath, MP, [{'capture','none'}]) of
		%% Line 256
		<'nomatch'> when 'true' ->
		    let <_3> =
			apply %% Line 258
			      'do_replace_module_load'/3
			    (%% Line 258
			     OldRest, %% Line 258
				      New, %% Line 258
					   MP)
		    in  %% Line 257
			[_@r0|[_@r1|_3]]
		%% Line 259
		<'match'> when 'true' ->
		    let <_4> =
			apply %% Line 260
			      'get_module_load'/2
			    (%% Line 260
			     New, %% Line 260
				  MP)
		    in  %% Line 260
			call 'erlang':'++'
			    (_4, OldRest)
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 262
	  <[Other|Rest],New,MP> when 'true' ->
	      let <_6> =
		  apply %% Line 263
			'do_replace_module_load'/3
		      (%% Line 263
		       Rest, %% Line 263
			     New, %% Line 263
				  MP)
	      in  %% Line 263
		  [Other|_6]
	  %% Line 264
	  <[],_10,_11> when 'true' ->
	      %% Line 265
	      []
	  ( <_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7})
		  -| [{'function_name',{'do_replace_module_load',3}}] )
	    -| ['compiler_generated'] )
	end
'get_module_load'/2 =
    %% Line 267
    fun (_0,_1) ->
	case <_0,_1> of
	  <[_@r0 = {'path',[AppPath|[]]}|[_@r1 = {'primLoad',Mods}|Rest]],MP> when 'true' ->
	      %% Line 268
	      case call 're':'run'
		       (AppPath, MP, [{'capture','none'}]) of
		%% Line 269
		<'nomatch'> when 'true' ->
		    %% Line 270
		    apply 'get_module_load'/2
			(Rest, MP)
		%% Line 271
		<'match'> when 'true' ->
		    %% Line 272
		    [_@r0|[_@r1|[]]]
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 274
	  <[_5|Rest],MP> when 'true' ->
	      %% Line 275
	      apply 'get_module_load'/2
		  (Rest, MP)
	  %% Line 276
	  <[],_6> when 'true' ->
	      %% Line 277
	      []
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'get_module_load',2}}] )
	    -| ['compiler_generated'] )
	end
'replace_paths'/3 =
    %% Line 279
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[{'path',OldPaths}|Old],New,MatchPaths> when 'true' ->
	      %% Line 280
	      case call 'lists':'keyfind'
		       ('path', 1, New) of
		<{'path',NewPath}> when 'true' ->
		    let <_4> =
			apply %% Line 281
			      'do_replace_paths'/3
			    (%% Line 281
			     OldPaths, %% Line 281
				       NewPath, %% Line 281
						MatchPaths)
		    in  %% Line 281
			[{'path',_4}|Old]
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 282
	  <[Other|Old],New,MatchPaths> when 'true' ->
	      let <_5> =
		  apply %% Line 283
			'replace_paths'/3
		      (%% Line 283
		       Old, %% Line 283
			    New, %% Line 283
				 MatchPaths)
	      in  %% Line 283
		  [Other|_5]
	  ( <_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7,_6})
		  -| [{'function_name',{'replace_paths',3}}] )
	    -| ['compiler_generated'] )
	end
'do_replace_paths'/3 =
    %% Line 285
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Old,New,[MP|MatchPaths]> when 'true' ->
	      let <_3> =
		  apply %% Line 286
			'do_replace_paths1'/3
		      (%% Line 286
		       Old, %% Line 286
			    New, %% Line 286
				 MP)
	      in  %% Line 286
		  apply 'do_replace_paths'/3
		      (_3, New, MatchPaths)
	  %% Line 287
	  <Paths,_7,[]> when 'true' ->
	      %% Line 288
	      Paths
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'do_replace_paths',3}}] )
	    -| ['compiler_generated'] )
	end
'do_replace_paths1'/3 =
    %% Line 290
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[P|Ps],New,MP> when 'true' ->
	      %% Line 291
	      case call 're':'run'
		       (P, MP, [{'capture','none'}]) of
		%% Line 292
		<'nomatch'> when 'true' ->
		    let <_3> =
			apply %% Line 293
			      'do_replace_paths1'/3
			    (%% Line 293
			     Ps, %% Line 293
				 New, %% Line 293
				      MP)
		    in  %% Line 293
			[P|_3]
		%% Line 294
		<'match'> when 'true' ->
		    let <_4> =
			apply %% Line 295
			      'get_path'/2
			    (%% Line 295
			     New, %% Line 295
				  MP)
		    in  %% Line 295
			call 'erlang':'++'
			    (_4, Ps)
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 297
	  <[],_9,_10> when 'true' ->
	      %% Line 298
	      []
	  ( <_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7,_6})
		  -| [{'function_name',{'do_replace_paths1',3}}] )
	    -| ['compiler_generated'] )
	end
'get_path'/2 =
    %% Line 300
    fun (_0,_1) ->
	case <_0,_1> of
	  <[P|Ps],MP> when 'true' ->
	      %% Line 301
	      case call 're':'run'
		       (P, MP, [{'capture','none'}]) of
		%% Line 302
		<'nomatch'> when 'true' ->
		    %% Line 303
		    apply 'get_path'/2
			(Ps, MP)
		%% Line 304
		<'match'> when 'true' ->
		    %% Line 305
		    [P|[]]
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 307
	  <[],_5> when 'true' ->
	      %% Line 308
	      []
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'get_path',2}}] )
	    -| ['compiler_generated'] )
	end
'get_apps'/3 =
    %% Line 312
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[Stdlib = {'apply',{'application','load',[{'application','stdlib',_6}|[]]}}|Script],_7,%% Line 313
												  Sasl> when 'true' ->
	      %% Line 314
	      apply 'get_apps'/3
		  (Script, Stdlib, Sasl)
	  %% Line 315
	  <[Sasl = {'apply',{'application','load',[{'application','sasl',_8}|[]]}}|_X_Script],%% Line 316
											      Stdlib,_9> when 'true' ->
	      %% Line 317
	      {Stdlib,Sasl}
	  %% Line 318
	  <[_10|Script],Stdlib,Sasl> when 'true' ->
	      %% Line 319
	      apply 'get_apps'/3
		  (Script, Stdlib, Sasl)
	  %% Line 320
	  <[],'undefined',_11> when 'true' ->
	      %% Line 321
	      call 'erlang':'throw'
		  ({'error',{'app_not_found','stdlib'}})
	  %% Line 322
	  <[],_12,'undefined'> when 'true' ->
	      %% Line 323
	      call 'erlang':'throw'
		  ({'error',{'app_not_found','sasl'}})
	  ( <_5,_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4,_3})
		  -| [{'function_name',{'get_apps',3}}] )
	    -| ['compiler_generated'] )
	end
'replace_apps'/3 =
    %% Line 326
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[{'apply',{'application','load',[{'application','stdlib',_8}|[]]}}|Script],%% Line 327
										      Stdlib,%% Line 327
											     Sasl> when 'true' ->
	      let <_3> =
		  apply %% Line 328
			'replace_apps'/3
		      (%% Line 328
		       Script, %% Line 328
			       'undefined', %% Line 328
					    Sasl)
	      in  %% Line 328
		  [Stdlib|_3]
	  %% Line 329
	  <[{'apply',{'application','load',[{'application','sasl',_9}|[]]}}|Script],%% Line 330
										    _X_Stdlib,%% Line 330
											      Sasl> when 'true' ->
	      %% Line 331
	      [Sasl|Script]
	  %% Line 332
	  <[Stuff|Script],Stdlib,Sasl> when 'true' ->
	      let <_4> =
		  apply %% Line 333
			'replace_apps'/3
		      (%% Line 333
		       Script, %% Line 333
			       Stdlib, %% Line 333
				       Sasl)
	      in  %% Line 333
		  [Stuff|_4]
	  %% Line 334
	  <[],'undefined',_10> when 'true' ->
	      %% Line 335
	      call 'erlang':'throw'
		  ({'error',{'app_not_replaced','sasl'}})
	  %% Line 336
	  <[],_11,_12> when 'true' ->
	      %% Line 337
	      call 'erlang':'throw'
		  ({'error',{'app_not_replaced','stdlib'}})
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'replace_apps',3}}] )
	    -| ['compiler_generated'] )
	end
'add_apply_upgrade'/2 =
    %% Line 341
    fun (_0,_1) ->
	%% Line 342
	case call 'lists':'reverse'
		 (_0) of
	  <[{'progress','started'}|RevScript]> when 'true' ->
	      %% Line 343
	      call 'lists':'reverse'
		  ([{'progress','started'}|%% Line 344
					   [{'apply',{'release_handler','new_emulator_upgrade',_1}}|%% Line 345
												    RevScript]])
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_2})
	    -| ['compiler_generated'] )
	end
'make_tar'/1 =
    %% Line 384
    fun (_0) ->
	case _0 of
	  <RelName>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 385
	      apply 'make_tar'/2
		  (RelName, [])
	  %% Line 386
	  <RelName> when 'true' ->
	      let <_1> =
		  [%% Line 387
		   RelName|%% Line 387
			   ( []
			     -| ['compiler_generated'] )]
	      in  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {( 'badarg'
			      -| ['compiler_generated'] ),%% Line 387
							  RelName}
			   -| ['compiler_generated'] ), _1)
		    -| ['compiler_generated'] )
	end
'make_tar'/2 =
    %% Line 389
    fun (_0,_1) ->
	case <_0,_1> of
	  <RelName,Flags>
	      when let <_2> =
		    call 'erlang':'is_list'
			(RelName)
		in  let <_3> =
			call 'erlang':'is_list'
			    (Flags)
		    in  call 'erlang':'and'
			    (_2, _3) ->
	      %% Line 390
	      case apply 'check_args_tar'/1
		       (Flags) of
		%% Line 391
		<[]> when 'true' ->
		    let <Path0> =
			apply %% Line 392
			      'get_path'/1
			    (%% Line 392
			     Flags)
		    in  let <Path1> =
			    apply %% Line 393
				  'mk_path'/1
				(%% Line 393
				 Path0)
			in  let <_6> =
				call %% Line 394
				     'code':%% Line 394
					    'get_path'
				    ()
			    in  let <_7> =
				    call %% Line 394
					 'erlang':%% Line 394
						  '++'
					(%% Line 394
					 Path1, _6)
				in  let <Path> =
					apply %% Line 394
					      'make_set'/1
					    (_7)
				    in  let <_10> =
					    call %% Line 395
						 'lists':%% Line 395
							 'member'
						(%% Line 395
						 'src_tests', %% Line 395
							      Flags)
					in  let <_9> =
						apply %% Line 395
						      'xref_p'/1
						    (%% Line 395
						     Flags)
					    in  let <ModTestP> = {_10,_9}
						in  let <_12> =
							apply %% Line 396
							      'machine'/1
							    (%% Line 396
							     Flags)
						    in  %% Line 396
							case apply 'get_release'/4
								 (RelName, Path, ModTestP, _12) of
							  %% Line 397
							  <{'ok',Release,Appls,Warnings0}> when 'true' ->
							      let <Warnings> =
								  apply %% Line 398
									'wsasl'/2
								      (%% Line 398
								       Flags, %% Line 398
									      Warnings0)
							      in  %% Line 399
								  case call 'systools_lib':'werror'
									   (Flags, Warnings) of
								    %% Line 400
								    <'true'> when 'true' ->
									let <_18> =
									    letrec
										'lc$^0'/1 =
										    %% Line 401
										    fun (_16) ->
											case _16 of
											  <[{'warning',W}|_15]> when 'true' ->
											      let <_17> =
												  apply 'lc$^0'/1
												      (_15)
											      in  ( [W|_17]
												    -| ['compiler_generated'] )
											  ( <[_14|_15]> when 'true' ->
												apply 'lc$^0'/1
												    (_15)
											    -| ['compiler_generated'] )
											  <[]> when 'true' ->
											      []
											  ( <_27> when 'true' ->
												( primop 'match_fail'
												      ({'function_clause',_27})
												  -| [{'function_name',{'lc$^0',1}}] )
											    -| ['compiler_generated'] )
											end
									    in  %% Line 401
										apply 'lc$^0'/1
										    (Warnings)
									in  %% Line 402
									    apply 'return'/3
										({'error','systools_make',%% Line 403
													  {'warnings_treated_as_errors',_18}}, %% Line 404
																	       Warnings, %% Line 405
																			 Flags)
								    %% Line 406
								    <'false'> when 'true' ->
									let <_20> =
									    catch
										%% Line 407
										apply 'mk_tar'/5
										    (RelName, Release, Appls, Flags, Path1)
									in  %% Line 407
									    case _20 of
									      %% Line 408
									      <'ok'> when 'true' ->
										  %% Line 409
										  apply 'return'/3
										      ('ok', Warnings, Flags)
									      %% Line 410
									      <Error> when 'true' ->
										  %% Line 411
										  apply 'return'/3
										      (Error, Warnings, Flags)
									    end
								    ( <_22> when 'true' ->
									  primop 'match_fail'
									      ({'case_clause',_22})
								      -| ['compiler_generated'] )
								  end
							  %% Line 414
							  <Error> when 'true' ->
							      %% Line 415
							      apply 'return'/3
								  (Error, [], Flags)
							end
		%% Line 417
		<ErrorVars> when 'true' ->
		    let <_29> =
			[%% Line 418
			 RelName|%% Line 418
				 ( [Flags|( []
					    -| ['compiler_generated'] )]
				   -| ['compiler_generated'] )]
		    in  ( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),%% Line 418
								ErrorVars}
				 -| ['compiler_generated'] ), _29)
			  -| ['compiler_generated'] )
	      end
	  %% Line 420
	  <RelName,Flags>
	      when call 'erlang':'is_list'
		    (Flags) ->
	      let <_33> =
		  [%% Line 421
		   RelName|%% Line 421
			   ( [Flags|( []
				      -| ['compiler_generated'] )]
			     -| ['compiler_generated'] )]
	      in  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {( 'badarg'
			      -| ['compiler_generated'] ),%% Line 421
							  RelName}
			   -| ['compiler_generated'] ), _33)
		    -| ['compiler_generated'] )
	  %% Line 422
	  <RelName,Flags> when 'true' ->
	      let <_37> =
		  [%% Line 423
		   RelName|%% Line 423
			   ( [Flags|( []
				      -| ['compiler_generated'] )]
			     -| ['compiler_generated'] )]
	      in  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {( 'badarg'
			      -| ['compiler_generated'] ),%% Line 423
							  Flags}
			   -| ['compiler_generated'] ), _37)
		    -| ['compiler_generated'] )
	end
'get_release'/2 =
    %% Line 431
    fun (_0,_1) ->
	%% Line 432
	apply 'get_release'/4
	    (_0, _1, {'false','false'}, 'false')
'get_release'/3 =
    %% Line 434
    fun (_0,_1,_2) ->
	%% Line 435
	apply 'get_release'/4
	    (_0, _1, _2, 'false')
'get_release'/4 =
    %% Line 437
    fun (_0,_1,_2,_3) ->
	let <_4> =
	    catch
		%% Line 438
		apply 'get_release1'/4
		    (_0, _1, _2, _3)
	in  %% Line 438
	    case _4 of
	      %% Line 439
	      <{'error',Error}> when 'true' ->
		  %% Line 440
		  {'error','systools_make',Error}
	      %% Line 441
	      <_@r0 = {'EXIT',Why}> when 'true' ->
		  %% Line 442
		  {'error','systools_make',_@r0}
	      %% Line 443
	      <Answer> when 'true' ->
		  %% Line 444
		  Answer
	    end
'get_release1'/4 =
    %% Line 447
    fun (_0,_1,_2,_3) ->
	%% Line 448
	case apply 'read_release'/2
		 (_0, _1) of
	  <{'ok',Release,Warnings1}> when 'true' ->
	      %% Line 449
	      case apply 'collect_applications'/2
		       (Release, _1) of
		<{'ok',Appls0}> when 'true' ->
		    %% Line 450
		    case apply 'check_applications'/1
			     (Appls0) of
		      <{'ok',Appls1}> when 'true' ->
			  %% Line 451
			  case apply 'sort_used_and_incl_appls'/2
				   (Appls1, Release) of
			    <{'ok',Appls2}> when 'true' ->
				%% Line 452
				case apply 'check_modules'/4
					 (Appls2, _1, _2, _3) of
				  <{'ok',Warnings2}> when 'true' ->
				      %% Line 453
				      case apply 'sort_appls'/1
					       (Appls2) of
					<{'ok',Appls}> when 'true' ->
					    let <_10> =
						call %% Line 454
						     'erlang':%% Line 454
							      '++'
						    (%% Line 454
						     Warnings1, %% Line 454
								Warnings2)
					    in  %% Line 454
						{'ok',Release,Appls,_10}
					( <_9> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_9})
					  -| ['compiler_generated'] )
				      end
				  ( <_8> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_8})
				    -| ['compiler_generated'] )
				end
			    ( <_7> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_7})
			      -| ['compiler_generated'] )
			  end
		      ( <_6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_6})
			-| ['compiler_generated'] )
		    end
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_5})
		  -| ['compiler_generated'] )
	      end
	  ( <_4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_4})
	    -| ['compiler_generated'] )
	end
'read_release'/2 =
    %% Line 459
    fun (_0,_1) ->
	let <_2> =
	    call %% Line 460
		 'erlang':%% Line 460
			  '++'
		(_0, %% Line 460
		     [46|[114|[101|[108]]]])
	in  %% Line 460
	    case apply 'read_file'/2
		     (_2, [[46]|_1]) of
	      %% Line 461
	      <{'ok',Release,_X_FullName}> when 'true' ->
		  %% Line 462
		  apply 'check_rel'/1
		      (Release)
	      %% Line 463
	      <{'error',Error}> when 'true' ->
		  %% Line 464
		  call 'erlang':'throw'
		      ({'error','systools_make',Error})
	      ( <_3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_3})
		-| ['compiler_generated'] )
	    end
'check_rel'/1 =
    %% Line 467
    fun (_0) ->
	let <_1> =
	    catch
		%% Line 468
		apply 'check_rel1'/1
		    (_0)
	in  %% Line 468
	    case _1 of
	      %% Line 469
	      <{'ok',{Name,Vsn,Evsn,Appl,Incl},Ws}> when 'true' ->
		  %% Line 470
		  {'ok',{'release',Name,Vsn,%% Line 471
					    Evsn,%% Line 472
						 Appl,%% Line 473
						      Incl},%% Line 474
							    Ws}
	      %% Line 475
	      <{'error',Error}> when 'true' ->
		  %% Line 476
		  call 'erlang':'throw'
		      ({'error','systools_make',Error})
	      %% Line 477
	      <Error> when 'true' ->
		  %% Line 478
		  call 'erlang':'throw'
		      ({'error','systools_make',Error})
	    end
'check_rel1'/1 =
    %% Line 481
    fun (_0) ->
	case _0 of
	  <{'release',{Name,Vsn},{'erts',EVsn},Appl}>
	      when call 'erlang':'is_list'
		    (Appl) ->
	      %% Line 482
	      case apply 'check_name'/1
		       (Name) of
		<_6>
		    when call 'erlang':'=:='
			  (_6,
			   Name) ->
		    %% Line 483
		    case apply 'check_vsn'/1
			     (Vsn) of
		      <_7>
			  when call 'erlang':'=:='
				(_7,
				 Vsn) ->
			  %% Line 484
			  case apply 'check_evsn'/1
				   (EVsn) of
			    <_8>
				when call 'erlang':'=:='
				      (_8,
				       EVsn) ->
				%% Line 485
				case apply 'check_appl'/1
					 (Appl) of
				  <{{Appls,Incls},Ws}> when 'true' ->
				      %% Line 486
				      {'ok',{Name,Vsn,EVsn,Appls,Incls},Ws}
				  ( <_4> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_4})
				    -| ['compiler_generated'] )
				end
			    ( <_3> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_3})
			      -| ['compiler_generated'] )
			  end
		      ( <_2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_2})
			-| ['compiler_generated'] )
		    end
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 487
	  <_9> when 'true' ->
	      %% Line 488
	      {'error','badly_formatted_release'}
	end
'check_name'/1 =
    %% Line 490
    fun (_0) ->
	%% Line 491
	case apply 'string_p'/1
		 (_0) of
	  %% Line 492
	  <'true'> when 'true' ->
	      _0
	  %% Line 494
	  <_3> when 'true' ->
	      %% Line 495
	      call 'erlang':'throw'
		  ({'error',{'illegal_name',_0}})
	end
'check_vsn'/1 =
    %% Line 498
    fun (_0) ->
	%% Line 499
	case apply 'string_p'/1
		 (_0) of
	  %% Line 500
	  <'true'> when 'true' ->
	      _0
	  %% Line 502
	  <_3> when 'true' ->
	      %% Line 503
	      call 'erlang':'throw'
		  ({'error',{'illegal_form',_0}})
	end
'check_evsn'/1 =
    %% Line 506
    fun (_0) ->
	%% Line 507
	case apply 'string_p'/1
		 (_0) of
	  %% Line 508
	  <'true'> when 'true' ->
	      _0
	  %% Line 510
	  <_3> when 'true' ->
	      %% Line 511
	      call 'erlang':'throw'
		  ({'error',{'illegal_form',{'erts',_0}}})
	end
'check_appl'/1 =
    %% Line 514
    fun (_0) ->
	let <_22> =
	    fun (_20) ->
		%% Line 515
		case _20 of
		  <{App,Vsn}>
		      when call 'erlang':'is_atom'
			    (App) ->
		      let <_1> =
			  apply %% Line 516
				'string_p'/1
			      (%% Line 516
			       Vsn)
		      in  %% Line 516
			  call 'erlang':'not'
			      (_1)
		  %% Line 517
		  <{App,Vsn,Incl}>
		      when let <_2> =
			    call 'erlang':'is_atom'
				(App)
			in  let <_3> =
				call 'erlang':'is_list'
				    (Incl)
			    in  call 'erlang':'and'
				    (_2, _3) ->
		      let <_5> =
			  apply %% Line 518
				'string_p'/1
			      (%% Line 518
			       Vsn)
		      in  let <_4> =
			      apply %% Line 518
				    'a_list_p'/1
				  (%% Line 518
				   Incl)
			  in  %% Line 518
			      case <_5,_4> of
				%% Line 519
				<'true','true'> when 'true' ->
				    'false'
				%% Line 520
				<( _31
				   -| ['compiler_generated'] ),( _32
								 -| ['compiler_generated'] )> when 'true' ->
				    'true'
			      end
		  %% Line 522
		  <{App,Vsn,Type}>
		      when let <_7> =
			    call 'erlang':'is_atom'
				(App)
			in  let <_8> =
				call 'erlang':'is_atom'
				    (Type)
			    in  call 'erlang':'and'
				    (_7, _8) ->
		      let <_10> =
			  apply %% Line 523
				'string_p'/1
			      (%% Line 523
			       Vsn)
		      in  let <_9> =
			      apply %% Line 523
				    'is_app_type'/1
				  (%% Line 523
				   Type)
			  in  %% Line 523
			      case <_10,_9> of
				%% Line 524
				<'true','true'> when 'true' ->
				    'false'
				%% Line 525
				<( _35
				   -| ['compiler_generated'] ),( _36
								 -| ['compiler_generated'] )> when 'true' ->
				    'true'
			      end
		  %% Line 527
		  <{App,Vsn,Type,Incl}>
		      when try
			    let <_12> =
				call 'erlang':'is_atom'
				    (App)
			    in  let <_13> =
				    call %% Line 528
					 'erlang':%% Line 528
						  'is_atom'
					(%% Line 528
					 Type)
				in  let <_14> =
					call %% Line 529
					     'erlang':%% Line 529
						      'is_list'
					    (%% Line 529
					     Incl)
				    in  let <_15> =
					    call 'erlang':'and'
						(_13, _14)
					in  call 'erlang':'and'
						(_12, _15)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false' ->
		      let <_18> =
			  apply %% Line 530
				'string_p'/1
			      (%% Line 530
			       Vsn)
		      in  let <_17> =
			      apply %% Line 530
				    'is_app_type'/1
				  (%% Line 530
				   Type)
			  in  let <_16> =
				  apply %% Line 530
					'a_list_p'/1
				      (%% Line 530
				       Incl)
			      in  %% Line 530
				  case <_18,_17,_16> of
				    %% Line 531
				    <'true','true','true'> when 'true' ->
					'false'
				    %% Line 532
				    <( _39
				       -| ['compiler_generated'] ),( _40
								     -| ['compiler_generated'] ),( _41
												   -| ['compiler_generated'] )> when 'true' ->
					'true'
				  end
		  %% Line 534
		  <_30> when 'true' ->
		      %% Line 535
		      'true'
		end
	in  %% Line 515
	    case call 'lists':'filter'
		     (_22, _0) of
	      %% Line 538
	      <[]> when 'true' ->
		  %% Line 539
		  case apply 'split_app_incl'/1
			   (_0) of
		    <_@r0 = {ApplsNoIncls,Incls}> when 'true' ->
			%% Line 540
			case apply 'mandatory_applications'/4
				 (ApplsNoIncls, 'undefined', %% Line 541
							     'undefined', %% Line 541
									  'undefined') of
			  <{'ok',Ws}> when 'true' ->
			      %% Line 542
			      {_@r0,Ws}
			  ( <_24> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_24})
			    -| ['compiler_generated'] )
			end
		    ( <_23> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_23})
		      -| ['compiler_generated'] )
		  end
	      %% Line 543
	      <Illegal> when 'true' ->
		  %% Line 544
		  call 'erlang':'throw'
		      ({'error',{'illegal_applications',Illegal}})
	    end
'mandatory_applications'/4 =
    %% Line 547
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[{'kernel',_8,Type}|Apps],'undefined',Stdlib,Sasl> when 'true' ->
	      %% Line 548
	      apply 'mandatory_applications'/4
		  (Apps, Type, Stdlib, Sasl)
	  %% Line 549
	  <[{'stdlib',_9,Type}|Apps],Kernel,'undefined',Sasl> when 'true' ->
	      %% Line 550
	      apply 'mandatory_applications'/4
		  (Apps, Kernel, Type, Sasl)
	  %% Line 551
	  <[{'sasl',_10,Type}|Apps],Kernel,Stdlib,'undefined'> when 'true' ->
	      %% Line 552
	      apply 'mandatory_applications'/4
		  (Apps, Kernel, Stdlib, Type)
	  %% Line 553
	  <[_11|Apps],Kernel,Stdlib,Sasl> when 'true' ->
	      %% Line 554
	      apply 'mandatory_applications'/4
		  (Apps, Kernel, Stdlib, Sasl)
	  %% Line 555
	  <[],Type,_12,_13>
	      when call 'erlang':'=/='
		    (Type,
		     'permanent') ->
	      %% Line 556
	      apply 'error_mandatory_application'/2
		  ('kernel', Type)
	  %% Line 557
	  <[],_14,Type,_15>
	      when call 'erlang':'=/='
		    (Type,
		     'permanent') ->
	      %% Line 558
	      apply 'error_mandatory_application'/2
		  ('stdlib', Type)
	  %% Line 559
	  <[],_16,_17,'undefined'> when 'true' ->
	      %% Line 560
	      {'ok',[{'warning','missing_sasl'}]}
	  %% Line 561
	  <[],_18,_19,_20> when 'true' ->
	      %% Line 562
	      {'ok',[]}
	  ( <_7,_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5,_4})
		  -| [{'function_name',{'mandatory_applications',4}}] )
	    -| ['compiler_generated'] )
	end
'error_mandatory_application'/2 =
    %% Line 564
    fun (_0,_1) ->
	case <_0,_1> of
	  <App,'undefined'> when 'true' ->
	      %% Line 565
	      call 'erlang':'throw'
		  ({'error',{'missing_mandatory_app',App}})
	  %% Line 566
	  <App,Type> when 'true' ->
	      %% Line 567
	      call 'erlang':'throw'
		  ({'error',{'mandatory_app',App,Type}})
	end
'split_app_incl'/1 =
    %% Line 569
    fun (_0) ->
	apply 'split_app_incl'/3
	    (_0, [], [])
'split_app_incl'/3 =
    %% Line 571
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[{App,Vsn}|Appls],Apps,Incls> when 'true' ->
	      %% Line 572
	      apply 'split_app_incl'/3
		  (Appls, [{App,Vsn,'permanent'}|Apps], Incls)
	  %% Line 573
	  <[{App,Vsn,Incl}|Appls],Apps,Incls>
	      when call 'erlang':'is_list'
		    (Incl) ->
	      %% Line 574
	      apply 'split_app_incl'/3
		  (Appls, [{App,Vsn,'permanent'}|Apps], [{App,Incl}|Incls])
	  %% Line 575
	  <[_@r0 = {App,Vsn,Type}|Appls],Apps,Incls> when 'true' ->
	      %% Line 576
	      apply 'split_app_incl'/3
		  (Appls, [_@r0|Apps], Incls)
	  %% Line 577
	  <[{App,Vsn,Type,Incl}|Appls],Apps,Incls>
	      when call 'erlang':'is_list'
		    (Incl) ->
	      %% Line 578
	      apply 'split_app_incl'/3
		  (Appls, [{App,Vsn,Type}|Apps], [{App,Incl}|Incls])
	  %% Line 579
	  <[],Apps,Incls> when 'true' ->
	      let <_4> =
		  call %% Line 580
		       'lists':%% Line 580
			       'reverse'
		      (%% Line 580
		       Apps)
	      in  let <_3> =
		      call %% Line 580
			   'lists':%% Line 580
				   'reverse'
			  (%% Line 580
			   Incls)
		  in  %% Line 580
		      {_4,_3}
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'split_app_incl',3}}] )
	    -| ['compiler_generated'] )
	end
'collect_applications'/2 =
    %% Line 588
    fun (_0,_1) ->
	%% Line 589
	( case _0 of
	    ( <( {'release',_28,_29,_30,_rec0,_31}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 590
		  ( case _0 of
		      ( <( {'release',_33,_34,_35,_36,_rec1}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_22> =
				fun (_19,_18) ->
				    %% Line 591
				    case <_19,_18> of
				      <{Name,Vsn,Type},{Ok,Errs}> when 'true' ->
					  let <_8> =
					      apply %% Line 592
						    'to_list'/1
						  (%% Line 592
						   Name)
					  in  %% Line 592
					      case apply 'read_application'/4
						       (_8, Vsn, _1, _rec1) of
						%% Line 593
						<{'ok',A}> when 'true' ->
						    %% Line 594
						    ( case A of
							( <( {'application',_rec2,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51}
							     -| ['compiler_generated'] )> when 'true' ->
							      ( case A of
								  ( <( {'application',_53,_54,_rec3,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66}
								       -| ['compiler_generated'] )> when 'true' ->
									case <_rec2,_rec3> of
									  %% Line 595
									  <_68,_69>
									      when let <_70> =
										    call 'erlang':'=:='
											(_68, Name)
										in  let <_71> =
											call 'erlang':'=:='
											    (_69, Vsn)
										    in  call 'erlang':'and'
											    (_70, _71) ->
									      %% Line 596
									      case A of
										<{'application',_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86}> when 'true' ->
										    let <_15> =
											call 'erlang':'setelement'
											    (3, A, Type)
										    in  {[{{Name,Vsn},_15}|Ok],%% Line 597
													       Errs}
										( <_87> when 'true' ->
										      ( call ( 'erlang'
											       -| ['compiler_generated'] ):( 'error'
															     -| ['compiler_generated'] )
											    (( {'badrecord','application'}
											       -| ['compiler_generated'] ))
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									      end
									  %% Line 598
									  <( _89
									     -| ['compiler_generated'] ),( _90
													   -| ['compiler_generated'] )> when 'true' ->
									      %% Line 599
									      let <E> = {( _89
										     -| ['compiler_generated'] ),( _90
														   -| ['compiler_generated'] )}
									      in  {Ok,[{'bad_application_name',{Name,E}}|Errs]}
									end
								    -| ['compiler_generated'] )
								  ( <_67> when 'true' ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','application'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
							( <_52> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','application'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
						%% Line 601
						<{'error',What}> when 'true' ->
						    %% Line 602
						    {Ok,[{'error_reading',{Name,What}}|Errs]}
						( <_17> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_17})
						  -| ['compiler_generated'] )
					      end
				      ( <_21,_20> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_21,_20})
					      -| [{'function_name',{'-collect_applications/2-fun-0-',2}}] )
					-| ['compiler_generated'] )
				    end
			    in  %% Line 605
				case call 'lists':'foldl'
					 (_22, {[],[]}, _rec0) of
				  %% Line 606
				  <{A,[]}> when 'true' ->
				      let <_24> =
					  call %% Line 607
					       'lists':%% Line 607
						       'reverse'
					      (%% Line 607
					       A)
				      in  %% Line 607
					  {'ok',_24}
				  %% Line 608
				  <{_88,Errs}> when 'true' ->
				      %% Line 609
				      call 'erlang':'throw'
					  ({'error',Errs})
				  ( <_25> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_25})
				    -| ['compiler_generated'] )
				end
			-| ['compiler_generated'] )
		      ( <_37> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','release'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_32> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','release'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'read_application'/4 =
    %% Line 616
    fun (_0,_1,_2,_3) ->
	%% Line 617
	apply 'read_application'/6
	    (_0, _1, _2, _3, 'false', 'no_fault')
'read_application'/6 =
    %% Line 619
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <Name,Vsn,[Dir|Path],Incls,Found,FirstError> when 'true' ->
	      let <_6> =
		  call %% Line 620
		       'erlang':%% Line 620
				'++'
		      (%% Line 620
		       Name, %% Line 620
			     [46|[97|[112|[112]]]])
	      in  %% Line 620
		  case apply 'read_file'/2
			   (_6, [Dir|[]]) of
		    %% Line 621
		    <{'ok',Term,FullName}> when 'true' ->
			%% Line 622
			case apply 'parse_application'/4
				 (Term, FullName, Vsn, Incls) of
			  %% Line 623
			  <{'error',{'no_valid_version',{_21,OtherVsn}}}>
			      when let <_22> =
				    call 'erlang':'=:='
					(_21, Vsn)
				in  let <_23> =
					call 'erlang':'=:='
					    (FirstError, 'no_fault')
				    in  call 'erlang':'and'
					    (_22, _23) ->
			      let <_7> =
				  call %% Line 625
				       'erlang':%% Line 625
						'++'
				      (%% Line 625
				       Name, %% Line 625
					     [46|[97|[112|[112]]]])
			      in  let <_8> =
				      call %% Line 625
					   'filename':%% Line 625
						      'join'
					  (%% Line 625
					   Dir, _7)
				  in  let <NFE> =
					  {%% Line 624
					   'no_valid_version',%% Line 624
							      {{[115|[104|[111|[117|[108|[100|[32|[98|[101]]]]]]]]],Vsn},%% Line 625
															 {[102|[111|[117|[110|[100|[32|[102|[105|[108|[101]]]]]]]]]],_8,%% Line 626
																							OtherVsn}}}
				      in  %% Line 627
					  apply 'read_application'/6
					      (Name, Vsn, Path, Incls, 'true', NFE)
			  %% Line 628
			  <{'error',{'no_valid_version',{_24,_X_OtherVsn}}}>
			      when call 'erlang':'=:='
				    (_24,
				     Vsn) ->
			      %% Line 629
			      apply 'read_application'/6
				  (Name, Vsn, Path, Incls, 'true', FirstError)
			  %% Line 630
			  <Res> when 'true' ->
			      %% Line 631
			      Res
			end
		    %% Line 633
		    <{'error',{'parse',_X_File,{Line,_X_Mod,Err}}}>
			when call 'erlang':'=:='
			      (FirstError,
			       'no_fault') ->
			let <_11> =
			    call %% Line 635
				 'erlang':%% Line 635
					  '++'
				(%% Line 635
				 Name, %% Line 635
				       [46|[97|[112|[112]]]])
			in  let <_12> =
				call %% Line 635
				     'filename':%% Line 635
						'join'
				    (%% Line 635
				     Dir, _11)
			    in  %% Line 634
				apply 'read_application'/6
				    (Name, Vsn, Path, Incls, Found, %% Line 635
								    {'parse_error',{_12,Line,Err}})
		    %% Line 636
		    <{'error',{'parse',_X_File,_X_Err}}> when 'true' ->
			%% Line 637
			apply 'read_application'/6
			    (Name, Vsn, Path, Incls, Found, FirstError)
		    %% Line 638
		    <{'error',_X_Err}> when 'true' ->
			%% Line 639
			apply 'read_application'/6
			    (Name, Vsn, Path, Incls, Found, FirstError)
		    ( <_13> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_13})
		      -| ['compiler_generated'] )
		  end
	  %% Line 641
	  <Name,Vsn,[],_25,'true','no_fault'> when 'true' ->
	      %% Line 642
	      {'error',{'application_vsn',{Name,Vsn}}}
	  %% Line 643
	  <_X_Name,_X_Vsn,[],_26,'true',FirstError> when 'true' ->
	      %% Line 644
	      {'error',FirstError}
	  %% Line 645
	  <Name,_27,[],_28,_29,'no_fault'> when 'true' ->
	      let <_14> =
		  call %% Line 646
		       'erlang':%% Line 646
				'++'
		      (%% Line 646
		       Name, %% Line 646
			     [46|[97|[112|[112]]]])
	      in  %% Line 646
		  {'error',{'not_found',_14}}
	  %% Line 647
	  <_X_Name,_30,[],_31,_32,FirstError> when 'true' ->
	      %% Line 648
	      {'error',FirstError}
	  ( <_20,_19,_18,_17,_16,_15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_20,_19,_18,_17,_16,_15})
		  -| [{'function_name',{'read_application',6}}] )
	    -| ['compiler_generated'] )
	end
'parse_application'/4 =
    %% Line 650
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <_@r0 = {'application',Name,Dict},File,Vsn,Incls>
	      when let <_4> =
		    call %% Line 651
			 'erlang':%% Line 651
				  'is_atom'
			(%% Line 651
			 Name)
		in  let <_5> =
			call %% Line 652
			     'erlang':%% Line 652
				      'is_list'
			    (%% Line 652
			     Dict)
		    in  %% Line 651
			call 'erlang':'and'
			    (_4, _5) ->
	      let <_7> =
		  catch
		      %% Line 655
		      apply 'get_items'/2
			  (['vsn'|['id'|['description'|['modules'|['registered'|['applications'|['included_applications'|['mod'|['start_phases'|['env'|['maxT'|['maxP']]]]]]]]]]]], Dict)
	      in  %% Line 655
		  case _7 of
		    %% Line 656
		    <[_15|[Id|[Desc|[Mods|[Regs|[Apps|[Incs0|[Mod|[Phases|[Env|[MaxT|[MaxP|[]]]]]]]]]]]]]>
			when call 'erlang':'=:='
			      (_15,
			       Vsn) ->
			%% Line 657
			case apply 'override_include'/3
				 (Name, Incs0, Incls) of
			  %% Line 658
			  <{'ok',Incs}> when 'true' ->
			      let <_8> =
				  call %% Line 672
				       'filename':%% Line 672
						  'dirname'
				      (%% Line 672
				       File)
			      in  %% Line 659
				  {'ok',{'application',Name,'permanent',%% Line 660
									Vsn,%% Line 661
									    Id,%% Line 662
									       Desc,%% Line 663
										    Mods,%% Line 664
											 Apps,%% Line 665
											      Incs,%% Line 666
												   Regs,%% Line 669
													Env,%% Line 670
													    MaxT,%% Line 671
														 MaxP,%% Line 667
														      Mod,%% Line 668
															  Phases,_8}}
			  %% Line 673
			  <{'error',IncApps}> when 'true' ->
			      %% Line 674
			      {'error',{'override_include',IncApps}}
			  ( <_9> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_9})
			    -| ['compiler_generated'] )
			end
		    %% Line 676
		    <[OtherVsn|[_16|[_17|[_18|[_19|[_20|[_21|[_22|[_23|[_24|[_25|[_26|[]]]]]]]]]]]]]> when 'true' ->
			%% Line 677
			{'error',{'no_valid_version',{Vsn,OtherVsn}}}
		    %% Line 678
		    <Err> when 'true' ->
			%% Line 679
			{'error',{Err,_@r0}}
		  end
	  %% Line 681
	  <Other,_27,_28,_29> when 'true' ->
	      %% Line 682
	      {'error',{'badly_formatted_application',Other}}
	end
'override_include'/3 =
    %% Line 687
    fun (_0,_1,_2) ->
	%% Line 688
	case call 'lists':'keysearch'
		 (_0, 1, _2) of
	  %% Line 689
	  <{'value',{_8,I}}>
	      when call 'erlang':'=:='
		    (_8,
		     _0) ->
	      %% Line 690
	      case apply 'specified'/2
		       (I, _1) of
		%% Line 691
		<[]> when 'true' ->
		    %% Line 692
		    {'ok',I}
		%% Line 693
		<NotSpec> when 'true' ->
		    %% Line 694
		    {'error',NotSpec}
	      end
	  %% Line 696
	  <_9> when 'true' ->
	      %% Line 697
	      {'ok',_1}
	end
'specified'/2 =
    %% Line 700
    fun (_0,_1) ->
	case <_0,_1> of
	  <[App|Incls],Spec> when 'true' ->
	      %% Line 701
	      case call 'lists':'member'
		       (App, Spec) of
		%% Line 702
		<'true'> when 'true' ->
		    %% Line 703
		    apply 'specified'/2
			(Incls, Spec)
		%% Line 704
		<_6> when 'true' ->
		    let <_2> =
			apply %% Line 705
			      'specified'/2
			    (%% Line 705
			     Incls, %% Line 705
				    Spec)
		    in  %% Line 705
			[App|_2]
	      end
	  %% Line 707
	  <[],_7> when 'true' ->
	      %% Line 708
	      []
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'specified',2}}] )
	    -| ['compiler_generated'] )
	end
'get_items'/2 =
    %% Line 710
    fun (_0,_1) ->
	case <_0,_1> of
	  <[H|T],Dict> when 'true' ->
	      let <_2> =
		  call %% Line 711
		       'lists':%% Line 711
			       'keysearch'
		      (%% Line 711
		       H, %% Line 711
			  1, %% Line 711
			     Dict)
	      in  let <Item> =
		      apply %% Line 711
			    'check_item'/2
			  (_2, %% Line 711
			       H)
		  in  let <_4> =
			  apply %% Line 712
				'get_items'/2
			      (%% Line 712
			       T, %% Line 712
				  Dict)
		      in  %% Line 712
			  [Item|_4]
	  %% Line 713
	  <[],_X_Dict> when 'true' ->
	      %% Line 714
	      []
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'get_items',2}}] )
	    -| ['compiler_generated'] )
	end
'check_item'/2 =
    %% Line 716
    fun (_0,_1) ->
	case <_0,_1> of
	  <{_19,{'mod',_@r0 = {M,A}}},_20>
	      when call 'erlang':'is_atom'
		    (M) ->
	      %% Line 717
	      _@r0
	  %% Line 718
	  <{_21,{'mod',[]}},_22> when 'true' ->
	      %% Line 719
	      []
	  %% Line 720
	  <{_23,{'vsn',Vsn}},I> when 'true' ->
	      %% Line 721
	      case apply 'string_p'/1
		       (Vsn) of
		%% Line 722
		<'true'> when 'true' ->
		    Vsn
		%% Line 723
		<_24> when 'true' ->
		    call 'erlang':'throw'
			({'bad_param',I})
	      end
	  %% Line 725
	  <{_25,{'id',Id}},I> when 'true' ->
	      %% Line 726
	      case apply 'string_p'/1
		       (Id) of
		%% Line 727
		<'true'> when 'true' ->
		    Id
		%% Line 728
		<_26> when 'true' ->
		    call 'erlang':'throw'
			({'bad_param',I})
	      end
	  %% Line 730
	  <{_27,{'description',Desc}},I> when 'true' ->
	      %% Line 731
	      case apply 'string_p'/1
		       (Desc) of
		%% Line 732
		<'true'> when 'true' ->
		    Desc
		%% Line 733
		<_28> when 'true' ->
		    call 'erlang':'throw'
			({'bad_param',I})
	      end
	  %% Line 735
	  <{_29,{'applications',Apps}},I> when 'true' ->
	      %% Line 736
	      case apply 'a_list_p'/1
		       (Apps) of
		%% Line 737
		<'true'> when 'true' ->
		    Apps
		%% Line 738
		<_30> when 'true' ->
		    call 'erlang':'throw'
			({'bad_param',I})
	      end
	  %% Line 740
	  <{_31,{'included_applications',Apps}},I> when 'true' ->
	      %% Line 741
	      case apply 'a_list_p'/1
		       (Apps) of
		%% Line 742
		<'true'> when 'true' ->
		    Apps
		%% Line 743
		<_32> when 'true' ->
		    call 'erlang':'throw'
			({'bad_param',I})
	      end
	  %% Line 745
	  <{_33,{'registered',Regs}},I> when 'true' ->
	      %% Line 746
	      case apply 'a_list_p'/1
		       (Regs) of
		%% Line 747
		<'true'> when 'true' ->
		    Regs
		%% Line 748
		<_34> when 'true' ->
		    call 'erlang':'throw'
			({'bad_param',I})
	      end
	  %% Line 750
	  <{_35,{'modules',Mods}},I> when 'true' ->
	      %% Line 751
	      case apply 'a_list_p'/1
		       (Mods) of
		%% Line 752
		<'true'> when 'true' ->
		    Mods
		%% Line 753
		<_36> when 'true' ->
		    call 'erlang':'throw'
			({'bad_param',I})
	      end
	  %% Line 755
	  <{_37,{'start_phases','undefined'}},_38> when 'true' ->
	      %% Line 756
	      'undefined'
	  %% Line 757
	  <{_39,{'start_phases',Phase}},I> when 'true' ->
	      %% Line 758
	      case apply 't_list_p'/1
		       (Phase) of
		%% Line 759
		<'true'> when 'true' ->
		    Phase
		%% Line 760
		<_40> when 'true' ->
		    call 'erlang':'throw'
			({'bad_param',I})
	      end
	  %% Line 762
	  <{_41,{'env',Env}},I> when 'true' ->
	      %% Line 763
	      case apply 't_list_p'/1
		       (Env) of
		%% Line 764
		<'true'> when 'true' ->
		    Env
		%% Line 765
		<_42> when 'true' ->
		    call 'erlang':'throw'
			({'bad_param',I})
	      end
	  %% Line 767
	  <{_43,{'maxT',MaxT}},I> when 'true' ->
	      %% Line 768
	      case MaxT of
		%% Line 769
		<_44>
		    when let <_11> =
			  call 'erlang':'is_integer'
			      (MaxT)
		      in  let <_12> =
			      call 'erlang':'>'
				  (MaxT, 0)
			  in  call 'erlang':'and'
				  (_11, _12) ->
		    MaxT
		%% Line 770
		<'infinity'> when 'true' ->
		    'infinity'
		%% Line 771
		<_47> when 'true' ->
		    call 'erlang':'throw'
			({'bad_param',I})
	      end
	  %% Line 773
	  <{_48,{'maxP',MaxP}},I> when 'true' ->
	      %% Line 774
	      case MaxP of
		%% Line 775
		<_49>
		    when let <_14> =
			  call 'erlang':'is_integer'
			      (MaxP)
		      in  let <_15> =
			      call 'erlang':'>'
				  (MaxP, 0)
			  in  call 'erlang':'and'
				  (_14, _15) ->
		    MaxP
		%% Line 776
		<'infinity'> when 'true' ->
		    'infinity'
		%% Line 777
		<_52> when 'true' ->
		    call 'erlang':'throw'
			({'bad_param',I})
	      end
	  %% Line 779
	  <'false','included_applications'> when 'true' ->
	      %% Line 780
	      []
	  %% Line 781
	  <'false','mod'> when 'true' ->
	      %% Line 782
	      []
	  %% Line 783
	  <'false','env'> when 'true' ->
	      %% Line 784
	      []
	  %% Line 785
	  <'false','id'> when 'true' ->
	      %% Line 786
	      []
	  %% Line 787
	  <'false','start_phases'> when 'true' ->
	      %% Line 788
	      'undefined'
	  %% Line 789
	  <'false','maxT'> when 'true' ->
	      %% Line 790
	      'infinity'
	  %% Line 791
	  <'false','maxP'> when 'true' ->
	      %% Line 792
	      'infinity'
	  %% Line 793
	  <_53,Item> when 'true' ->
	      %% Line 794
	      call 'erlang':'throw'
		  ({'missing_param',Item})
	end
'check_applications'/1 =
    %% Line 804
    fun (_0) ->
	do  %% Line 805
	    apply 'undef_appls'/1
		(_0)
	    do  %% Line 806
		apply 'dupl_regs'/1
		    (_0)
		let <_12> =
		    letrec
			'lc$^0'/1 =
			    %% Line 809
			    fun (_7) ->
				case _7 of
				  <[{{App,Appv},A}|_2]> when 'true' ->
				      %% Line 810
				      ( letrec
					    'lc$^1'/1 =
						fun (_8) ->
						    case _8 of
						      <[IncApp|_4]> when 'true' ->
							  ( case A of
							      ( <( {'application',_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_rec6}
								   -| ['compiler_generated'] )> when 'true' ->
								    let <_11> =
									apply 'lc$^1'/1
									    (_4)
								    in  ( [{IncApp,App,Appv,_rec6}|_11]
									  -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      ( <_30> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','application'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      <[]> when 'true' ->
							  apply 'lc$^0'/1
							      (_2)
						      ( <_46> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_46})
							      -| [{'function_name',{'lc$^1',1}}] )
							-| ['compiler_generated'] )
						    end
					in  ( case A of
						( <( {'application',_31,_32,_33,_34,_35,_36,_37,_rec5,_38,_39,_40,_41,_42,_43,_44}
						     -| ['compiler_generated'] )> when 'true' ->
						      apply 'lc$^1'/1
							  (_rec5)
						  -| ['compiler_generated'] )
						( <_45> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','application'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					-| ['list_comprehension'] )
				  ( <[_1|_2]> when 'true' ->
					apply 'lc$^0'/1
					    (_2)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_47> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_47})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  %% Line 809
			apply 'lc$^0'/1
			    (_0)
		in  do  %% Line 811
			apply 'dupl_incls'/1
			    (_12)
			let <Res> =
			    apply %% Line 812
				  'add_top_apps_to_uses'/3
				(_12, _0, %% Line 812
					  [])
			in  %% Line 813
			    {'ok',Res}
'undef_appls'/1 =
    %% Line 817
    fun (_0) ->
	%% Line 818
	case apply 'undefined_applications'/1
		 (_0) of
	  %% Line 819
	  <[]> when 'true' ->
	      %% Line 820
	      'ok'
	  %% Line 821
	  <L> when 'true' ->
	      let <_1> =
		  apply %% Line 822
			'make_set'/1
		      (%% Line 822
		       L)
	      in  %% Line 822
		  call 'erlang':'throw'
		      ({'error',{'undefined_applications',_1}})
	end
'dupl_regs'/1 =
    %% Line 825
    fun (_0) ->
	let <_12> =
	    letrec
		'lc$^0'/1 =
		    %% Line 828
		    fun (_7) ->
			case _7 of
			  <[{{App,Appv},A}|_2]> when 'true' ->
			      %% Line 829
			      ( letrec
				    'lc$^1'/1 =
					fun (_8) ->
					    case _8 of
					      <[Name|_4]> when 'true' ->
						  ( case A of
						      ( <( {'application',_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_rec8}
							   -| ['compiler_generated'] )> when 'true' ->
							    let <_11> =
								apply 'lc$^1'/1
								    (_4)
							    in  ( [{Name,App,Appv,_rec8}|_11]
								  -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						      ( <_30> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','application'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      <[]> when 'true' ->
						  apply 'lc$^0'/1
						      (_2)
					      ( <_46> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_46})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  ( case A of
					( <( {'application',_31,_32,_33,_34,_35,_36,_37,_38,_rec7,_39,_40,_41,_42,_43,_44}
					     -| ['compiler_generated'] )> when 'true' ->
					      apply 'lc$^1'/1
						  (_rec7)
					  -| ['compiler_generated'] )
					( <_45> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','application'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				-| ['list_comprehension'] )
			  ( <[_1|_2]> when 'true' ->
				apply 'lc$^0'/1
				    (_2)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_47> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_47})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 828
		apply 'lc$^0'/1
		    (_0)
	in  %% Line 830
	    case apply 'duplicates'/1
		     (_12) of
	      %% Line 831
	      <[]> when 'true' ->
		  %% Line 832
		  'ok'
	      %% Line 833
	      <Dups> when 'true' ->
		  %% Line 834
		  call 'erlang':'throw'
		      ({'error',{'duplicate_register',Dups}})
	    end
'dupl_incls'/1 =
    %% Line 838
    fun (_0) ->
	%% Line 839
	case apply 'duplicates'/1
		 (_0) of
	  %% Line 840
	  <[]> when 'true' ->
	      %% Line 841
	      'ok'
	  %% Line 842
	  <Dups> when 'true' ->
	      %% Line 843
	      call 'erlang':'throw'
		  ({'error',{'duplicate_include',Dups}})
	end
'add_top_apps_to_uses'/3 =
    %% Line 860
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <_X_InclApps,[],Res> when 'true' ->
	      %% Line 862
	      Res
	  %% Line 863
	  <InclApps,[{Name,Appl}|Appls],Res> when 'true' ->
	      %% Line 864
	      ( case Appl of
		  ( <( {'application',_rec9,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41}
		       -| ['compiler_generated'] )> when 'true' ->
			let <MyTop> =
			    apply 'find_top_app'/2
				(_rec9, InclApps)
			in  let <F> =
				fun (_12,_11) ->
				    %% Line 865
				    case <_12,_11> of
				      <UsedApp,AccIn>
					  when call 'erlang':'=='
						(UsedApp,
						 MyTop) ->
					  %% Line 869
					  call 'erlang':'--'
					      (AccIn, [MyTop|[]])
				      %% Line 870
				      <UsedApp,AccIn> when 'true' ->
					  %% Line 871
					  case call 'lists':'keysearch'
						   (UsedApp, 1, InclApps) of
					    %% Line 872
					    <'false'> when 'true' ->
						%% Line 873
						AccIn
					    %% Line 874
					    <{'value',{_43,DependApp,_44,_45}}> when 'true' ->
						let <UsedAppTop> =
						    apply %% Line 875
							  'find_top_app'/2
							(%% Line 875
							 DependApp, %% Line 875
								    InclApps)
						in  let <_7> =
							call %% Line 876
							     'lists':%% Line 876
								     'member'
							    (%% Line 876
							     UsedAppTop, %% Line 876
									 AccIn)
						    in  %% Line 876
							case <_7,MyTop> of
							  %% Line 877
							  <( 'true'
							     -| ['compiler_generated'] ),_46> when 'true' ->
							      %% Line 880
							      call 'erlang':'--'
								  (AccIn, [UsedApp|[]])
							  %% Line 881
							  <_47,_48>
							      when call 'erlang':'=:='
								    (_48,
								     UsedAppTop) ->
							      %% Line 883
							      AccIn
							  %% Line 884
							  <( _96
							     -| ['compiler_generated'] ),( _97
											   -| ['compiler_generated'] )> when 'true' ->
							      let <AccIn1> =
								  call %% Line 887
								       'erlang':%% Line 887
										'--'
								      (%% Line 887
								       AccIn, %% Line 887
									      [UsedApp|[]])
							      in  %% Line 888
								  call 'erlang':'++'
								      (AccIn1, [UsedAppTop|[]])
							end
					    ( <_10> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_10})
					      -| ['compiler_generated'] )
					  end
				    end
			    in  %% Line 893
				( case Appl of
				    ( <( {'application',_50,_51,_52,_53,_54,_55,_rec10,_56,_57,_58,_59,_60,_61,_62,_63}
					 -| ['compiler_generated'] )> when 'true' ->
					  ( case Appl of
					      ( <( {'application',_65,_66,_67,_68,_69,_70,_rec11,_71,_72,_73,_74,_75,_76,_77,_78}
						   -| ['compiler_generated'] )> when 'true' ->
						    let <NewUses> =
							call 'lists':'foldl'
							    (F, _rec10, _rec11)
						    in  %% Line 895
							case Appl of
							  <{'application',_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94}> when 'true' ->
							      let <_23> =
								  call 'erlang':'setelement'
								      (8, Appl, NewUses)
							      in  let <_24> =
								      call 'erlang':'++'
									  (Res, [{Name,_23}|[]])
								  in  apply 'add_top_apps_to_uses'/3
									  (InclApps, Appls, _24)
							  ( <_95> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','application'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
						-| ['compiler_generated'] )
					      ( <_79> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','application'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <_64> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','application'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_42> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','application'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_27,_26,_25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_27,_26,_25})
		  -| [{'function_name',{'add_top_apps_to_uses',3}}] )
	    -| ['compiler_generated'] )
	end
'find_top_app'/2 =
    %% Line 899
    fun (_0,_1) ->
	%% Line 900
	case call 'lists':'keysearch'
		 (_0, 1, _1) of
	  %% Line 901
	  <'false'> when 'true' ->
	      _0
	  %% Line 903
	  <{'value',{_5,TopApp,_6,_7}}> when 'true' ->
	      %% Line 904
	      apply 'find_top_app'/2
		  (TopApp, _1)
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_2})
	    -| ['compiler_generated'] )
	end
'undefined_applications'/1 =
    %% Line 914
    fun (_0) ->
	let <_7> =
	    fun (_5) ->
		%% Line 915
		case _5 of
		  <{_19,A}> when 'true' ->
		      %% Line 916
		      ( case A of
			  ( <( {'application',_20,_21,_22,_23,_24,_25,_rec13,_26,_27,_28,_29,_30,_31,_32,_33}
			       -| ['compiler_generated'] )> when 'true' ->
				( case A of
				    ( <( {'application',_35,_36,_37,_38,_39,_40,_41,_rec14,_42,_43,_44,_45,_46,_47,_48}
					 -| ['compiler_generated'] )> when 'true' ->
					  call 'erlang':'++'
					      (_rec13, _rec14)
				      -| ['compiler_generated'] )
				    ( <_49> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','application'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <_34> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','application'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  ( <_6> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_6})
			  -| [{'function_name',{'-undefined_applications/1-fun-0-',1}}] )
		    -| ['compiler_generated'] )
		end
	in  let <_8> =
		call %% Line 915
		     'lists':%% Line 915
			     'map'
		    (_7, _0)
	    in  let <Uses> =
		    call %% Line 915
			 'lists':%% Line 915
				 'append'
			(_8)
		in  let <_12> =
			fun (_10) ->
			    %% Line 918
			    case _10 of
			      <{{X,_50},_51}> when 'true' ->
				  X
			      ( <_11> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_11})
				      -| [{'function_name',{'-undefined_applications/1-fun-1-',1}}] )
				-| ['compiler_generated'] )
			    end
		    in  let <Defined> =
			    call %% Line 918
				 'lists':%% Line 918
					 'map'
				(_12, _0)
			in  let <_17> =
				fun (_15) ->
				    let <_14> =
					call %% Line 919
					     'lists':%% Line 919
						     'member'
					    (%% Line 919
					     _15, %% Line 919
						  Defined)
				    in  %% Line 919
					call 'erlang':'not'
					    (_14)
			    in  %% Line 919
				call 'lists':'filter'
				    (_17, Uses)
'sort_used_and_incl_appls'/2 =
    %% Line 932
    fun (_0,_1) ->
	case <_0,_1> of
	  <Applications,Release>
	      when call 'erlang':'is_tuple'
		    (Release) ->
	      %% Line 934
	      ( case Release of
		  ( <( {'release',_25,_26,_27,_rec15,_28}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_4> =
			    apply 'sort_used_and_incl_appls'/2
				(Applications, _rec15)
			in  {'ok',_4}
		    -| ['compiler_generated'] )
		  ( <_29> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','release'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 936
	  <[{Tuple,Appl}|Appls],OrderedAppls> when 'true' ->
	      %% Line 938
	      ( case Appl of
		  ( <( {'application',_30,_31,_32,_33,_34,_35,_36,_rec16,_37,_38,_39,_40,_41,_42,_43}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_9> =
			    case _rec16 of
			      %% Line 939
			      <Incls>
				  when try
					let <_7> =
					    call 'erlang':'length'
						(_rec16)
					in  call 'erlang':'>'
						(_7, 1)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  %% Line 940
				  apply 'sort_appl_list'/2
				      (Incls, OrderedAppls)
			      %% Line 941
			      <Incls> when 'true' ->
				  %% Line 942
				  Incls
			    end
			in  %% Line 945
			    ( case Appl of
				( <( {'application',_45,_46,_47,_48,_49,_50,_rec17,_51,_52,_53,_54,_55,_56,_57,_58}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_15> =
					  case _rec17 of
					    %% Line 946
					    <Uses>
						when try
						      let <_13> =
							  call 'erlang':'length'
							      (_rec17)
						      in  call 'erlang':'>'
							      (_13, 1)
						  of <Try> ->
						      Try
						  catch <T,R> ->
						      'false' ->
						%% Line 947
						apply 'sort_appl_list'/2
						    (Uses, OrderedAppls)
					    %% Line 948
					    <Uses> when 'true' ->
						%% Line 949
						Uses
					  end
				      in  %% Line 951
					  case Appl of
					    <{'application',_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74}> when 'true' ->
						let <_18> =
						    call 'erlang':'setelement'
							(9, Appl, _9)
						in  let <_20> =
							call 'erlang':'setelement'
							    (8, _18, _15)
						    in  let <_22> =
							    apply %% Line 952
								  'sort_used_and_incl_appls'/2
								(%% Line 952
								 Appls, %% Line 952
									OrderedAppls)
							in  %% Line 952
							    [{Tuple,_20}|_22]
					    ( <_75> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','application'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				  -| ['compiler_generated'] )
				( <_59> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','application'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_44> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','application'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 953
	  <[],_X_OrderedAppls> when 'true' ->
	      %% Line 954
	      []
	  ( <_24,_23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_24,_23})
		  -| [{'function_name',{'sort_used_and_incl_appls',2}}] )
	    -| ['compiler_generated'] )
	end
'sort_appl_list'/2 =
    %% Line 956
    fun (_0,_1) ->
	let <IndexedList> =
	    apply %% Line 957
		  'find_pos'/2
		(_0, _1)
	in  let <SortedIndexedList> =
		call %% Line 958
		     'lists':%% Line 958
			     'keysort'
		    (%% Line 958
		     1, %% Line 958
			IndexedList)
	    in  let <_6> =
		    fun (_4) ->
			%% Line 959
			case _4 of
			  <{_X_Index,Name}> when 'true' ->
			      Name
			  ( <_5> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_5})
				  -| [{'function_name',{'-sort_appl_list/2-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		in  %% Line 959
		    call 'lists':'map'
			(_6, SortedIndexedList)
'find_pos'/2 =
    %% Line 961
    fun (_0,_1) ->
	case <_0,_1> of
	  <[Name|Incs],OrderedAppls> when 'true' ->
	      let <_2> =
		  apply %% Line 962
			'find_pos'/3
		      (%% Line 962
		       1, %% Line 962
			  Name, %% Line 962
				OrderedAppls)
	      in  let <_3> =
		      apply %% Line 962
			    'find_pos'/2
			  (%% Line 962
			   Incs, %% Line 962
				 OrderedAppls)
		  in  %% Line 962
		      [_2|_3]
	  %% Line 963
	  <[],_X_OrderedAppls> when 'true' ->
	      %% Line 964
	      []
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'find_pos',2}}] )
	    -| ['compiler_generated'] )
	end
'find_pos'/3 =
    %% Line 966
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <N,Name,[{_7,_X_Vsn,_X_Type}|_X_OrderedAppls]>
	      when call 'erlang':'=:='
		    (_7,
		     Name) ->
	      %% Line 967
	      {N,Name}
	  %% Line 968
	  <N,Name,[_X_OtherAppl|OrderedAppls]> when 'true' ->
	      let <_3> =
		  call %% Line 969
		       'erlang':%% Line 969
				'+'
		      (%% Line 969
		       N, %% Line 969
			  1)
	      in  %% Line 969
		  apply 'find_pos'/3
		      (_3, Name, OrderedAppls)
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'find_pos',3}}] )
	    -| ['compiler_generated'] )
	end
'check_modules'/4 =
    %% Line 978
    fun (_0,_1,_2,_3) ->
	let <_15> =
	    letrec
		'lc$^0'/1 =
		    %% Line 982
		    fun (_10) ->
			case _10 of
			  <[{{App,_X_Appv},A}|_5]> when 'true' ->
			      %% Line 983
			      ( letrec
				    'lc$^1'/1 =
					fun (_11) ->
					    case _11 of
					      <[Mod|_7]> when 'true' ->
						  ( case A of
						      ( <( {'application',_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_rec20}
							   -| ['compiler_generated'] )> when 'true' ->
							    let <_14> =
								apply 'lc$^1'/1
								    (_7)
							    in  ( [{Mod,App,_rec20}|_14]
								  -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						      ( <_37> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','application'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      <[]> when 'true' ->
						  apply 'lc$^0'/1
						      (_5)
					      ( <_53> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_53})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  ( case A of
					( <( {'application',_38,_39,_40,_41,_42,_rec19,_43,_44,_45,_46,_47,_48,_49,_50,_51}
					     -| ['compiler_generated'] )> when 'true' ->
					      apply 'lc$^1'/1
						  (_rec19)
					  -| ['compiler_generated'] )
					( <_52> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','application'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				-| ['list_comprehension'] )
			  ( <[_4|_5]> when 'true' ->
				apply 'lc$^0'/1
				    (_5)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_54> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_54})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 982
		apply 'lc$^0'/1
		    (_0)
	in  %% Line 984
	    case apply 'duplicates'/1
		     (_15) of
	      %% Line 985
	      <[]> when 'true' ->
		  %% Line 986
		  case apply 'check_mods'/5
			   (_15, _0, _1, _2, _3) of
		    %% Line 987
		    <{'error',Errors}> when 'true' ->
			%% Line 988
			call 'erlang':'throw'
			    ({'error',{'modules',Errors}})
		    %% Line 989
		    <Return> when 'true' ->
			%% Line 990
			Return
		  end
	      %% Line 992
	      <Dups> when 'true' ->
		  %% Line 994
		  call 'erlang':'throw'
		      ({'error',{'duplicate_modules',Dups}})
	    end
'check_mods'/5 =
    %% Line 1002
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <Modules,Appls,Path,{SrcTestP,XrefP},Machine> when 'true' ->
	      let <SrcTestRes> =
		  apply %% Line 1003
			'check_src'/5
		      (%% Line 1003
		       Modules, %% Line 1003
				Appls, %% Line 1003
				       Path, %% Line 1003
					     SrcTestP, %% Line 1003
						       Machine)
	      in  let <XrefRes> =
		      apply %% Line 1004
			    'check_xref'/3
			  (%% Line 1004
			   Appls, %% Line 1004
				  Path, %% Line 1004
					XrefP)
		  in  let <Res> =
			  call %% Line 1005
			       'erlang':%% Line 1005
					'++'
			      (%% Line 1005
			       SrcTestRes, %% Line 1005
					   XrefRes)
		      in  let <_10> =
			      fun (_8) ->
				  %% Line 1006
				  case _8 of
				    <{'error',_21}> when 'true' ->
					'true'
				    %% Line 1007
				    <_22> when 'true' ->
					'false'
				  end
			  in  %% Line 1006
			      case call 'lists':'filter'
				       (_10, %% Line 1009
					     Res) of
				%% Line 1010
				<[]> when 'true' ->
				    let <_13> =
					fun (_11) ->
					    %% Line 1011
					    case _11 of
					      <{'warning',_23}> when 'true' ->
						  'true'
					      %% Line 1012
					      <_24> when 'true' ->
						  'false'
					    end
				    in  let <_14> =
					    call %% Line 1011
						 'lists':%% Line 1011
							 'filter'
						(_13, %% Line 1014
						      Res)
					in  %% Line 1011
					    {'ok',_14}
				%% Line 1015
				<Errors> when 'true' ->
				    %% Line 1016
				    {'error',Errors}
			      end
	  ( <_20,_19,_18,_17,_16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_20,_19,_18,_17,_16})
		  -| [{'function_name',{'check_mods',5}}] )
	    -| ['compiler_generated'] )
	end
'check_src'/5 =
    %% Line 1019
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <Modules,Appls,Path,'true',Machine> when 'true' ->
	      let <Ext> =
		  apply %% Line 1020
			'objfile_extension'/1
		      (%% Line 1020
		       Machine)
	      in  let <IncPath> =
		      apply %% Line 1021
			    'create_include_path'/2
			  (%% Line 1021
			   Appls, %% Line 1021
				  Path)
		  in  let <_11> =
			  fun (_9) ->
			      %% Line 1023
			      case _9 of
				<{Mod,App,Dir}> when 'true' ->
				    %% Line 1024
				    case apply 'check_mod'/5
					     (Mod, App, Dir, Ext, IncPath) of
				      %% Line 1025
				      <'ok'> when 'true' ->
					  %% Line 1026
					  []
				      %% Line 1027
				      <{'error',Error}> when 'true' ->
					  %% Line 1028
					  [{'error',{Error,_9}}|[]]
				      %% Line 1029
				      <{'warning',Warn}> when 'true' ->
					  %% Line 1030
					  [{'warning',{Warn,_9}}|[]]
				      ( <_8> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_8})
					-| ['compiler_generated'] )
				    end
				( <_7> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_7})
				  -| ['compiler_generated'] )
			      end
		      in  let <_12> =
			      call %% Line 1022
				   'lists':%% Line 1022
					   'map'
				  (_11, %% Line 1033
					Modules)
			  in  %% Line 1022
			      call 'lists':'append'
				  (_12)
	  %% Line 1034
	  <_18,_19,_20,_21,_22> when 'true' ->
	      %% Line 1035
	      []
	end
'check_xref'/3 =
    %% Line 1037
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <_X_Appls,_X_Path,'false'> when 'true' ->
	      %% Line 1038
	      []
	  %% Line 1039
	  <Appls,Path,XrefP> when 'true' ->
	      let <_9> =
		  letrec
		      'lc$^0'/1 =
			  %% Line 1040
			  fun (_5) ->
			      case _5 of
				<[{{App,_X_Appv},A}|_4]> when 'true' ->
				    ( case A of
					( <( {'application',_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_rec21}
					     -| ['compiler_generated'] )> when 'true' ->
					      let <_8> =
						  apply 'lc$^0'/1
						      (_4)
					      in  ( [{App,_rec21}|_8]
						    -| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					( <_44> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','application'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				( <[_3|_4]> when 'true' ->
				      apply 'lc$^0'/1
					  (_4)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_47> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_47})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  %% Line 1040
		      apply 'lc$^0'/1
			  (Appls)
	      in  let <AppDirs0> =
		      call %% Line 1041
			   'sofs':%% Line 1041
				  'relation'
			  (_9)
		  in  let <_14> =
			  case %% Line 1042
			       XrefP of
			    %% Line 1043
			    <'true'> when 'true' ->
				%% Line 1044
				AppDirs0
			    %% Line 1045
			    <{'true',Apps}> when 'true' ->
				let <_12> =
				    call %% Line 1046
					 'sofs':%% Line 1046
						'set'
					(%% Line 1046
					 Apps)
				in  %% Line 1046
				    call 'sofs':'restriction'
					(AppDirs0, _12)
			    ( <_13> when 'true' ->
				  %% Line 1042
				  primop 'match_fail'
				      ({'case_clause',_13})
			      -| ['compiler_generated'] )
			  end
		      in  let <_17> =
			      catch
				  %% Line 1049
				  call 'xref':'start'
				      ('systools_make', [{'xref_mode','modules'}])
			  in  do  %% Line 1049
				  case _17 of
				    %% Line 1050
				    <{'ok',_X_Pid}> when 'true' ->
					'ok'
				    %% Line 1052
				    <{'error',{'already_started',_X_Pid}}> when 'true' ->
					do  %% Line 1053
					    call 'xref':'stop'
						('systools_make')
					    %% Line 1054
					    case call 'xref':'start'
						     ('systools_make', [{'xref_mode','modules'}]) of
					      <{'ok',_45}> when 'true' ->
						  'ok'
					      ( <_18> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_18})
						-| ['compiler_generated'] )
					    end
				    ( <_19> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_19})
				      -| ['compiler_generated'] )
				  end
				  %% Line 1057
				  case call 'xref':'set_default'
					   ('systools_make', 'verbose', 'false') of
				    <{'ok',_46}> when 'true' ->
					let <_21> =
					    call %% Line 1058
						 'code':%% Line 1058
							'get_path'
						()
					in  let <_23> =
						case <> of
						  %% Line 1059
						  <>
						      when call 'erlang':'=='
							    (Path,
							     _21) ->
						      'code_path'
						  %% Line 1060
						  <> when 'true' ->
						      Path
						end
					    in  %% Line 1062
						case call 'xref':'set_library_path'
							 ('systools_make', _23) of
						  <'ok'> when 'true' ->
						      let <_26> =
							  call %% Line 1063
							       'sofs':%% Line 1063
								      'to_external'
							      (_14)
						      in  %% Line 1063
							  apply 'check_xref'/1
							      (_26)
						  ( <_25> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_25})
						    -| ['compiler_generated'] )
						end
				    ( <_20> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_20})
				      -| ['compiler_generated'] )
				  end
	end
'check_xref'/1 =
    %% Line 1065
    fun (_0) ->
	case _0 of
	  <[{App,AppDir}|Appls]> when 'true' ->
	      %% Line 1066
	      case call 'xref':'add_application'
		       ('systools_make', AppDir, {'name',App}) of
		%% Line 1067
		<{'ok',_X_App}> when 'true' ->
		    %% Line 1068
		    apply 'check_xref'/1
			(Appls)
		%% Line 1069
		<Error> when 'true' ->
		    do  %% Line 1070
			call 'xref':'stop'
			    ('systools_make')
			%% Line 1071
			[{'error',Error}|[]]
	      end
	  %% Line 1073
	  <[]> when 'true' ->
	      let <_3> =
		  case %% Line 1074
		       call 'xref':'analyze'
			   ('systools_make', 'undefined_functions') of
		    %% Line 1075
		    <{'ok',[]}> when 'true' ->
			%% Line 1076
			[]
		    %% Line 1077
		    <{'ok',Undefined}> when 'true' ->
			%% Line 1079
			apply 'adjust_for_hipe'/1
			    (Undefined)
		    %% Line 1080
		    <Error> when 'true' ->
			%% Line 1081
			[{'error',Error}|[]]
		  end
	      in  do  %% Line 1083
		      call 'xref':'stop'
			  ('systools_make')
		      _3
	  ( <_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5})
		  -| [{'function_name',{'check_xref',1}}] )
	    -| ['compiler_generated'] )
	end
'adjust_for_hipe'/1 =
    %% Line 1086
    fun (_0) ->
	%% Line 1087
	case call 'erlang':'system_info'
		 ('hipe_architecture') of
	  %% Line 1088
	  <'undefined'> when 'true' ->
	      let <_3> =
		  fun (_1) ->
		      %% Line 1089
		      case _1 of
			<{'hipe_bifs',_11,_12}> when 'true' ->
			    'false'
			%% Line 1090
			<{'hipe',_13,_14}> when 'true' ->
			    'false'
			%% Line 1091
			<_15> when 'true' ->
			    'true'
		      end
	      in  let <U> =
		      call %% Line 1089
			   'lists':%% Line 1089
				   'filter'
			  (_3, _0)
		  in  %% Line 1093
		      case <> of
			%% Line 1094
			<>
			    when call 'erlang':'=:='
				  ([],
				   U) ->
			    %% Line 1095
			    []
			%% Line 1096
			<> when 'true' ->
			    %% Line 1097
			    [{'warning',{'exref_undef',U}}|[]]
		      end
	  %% Line 1099
	  <_X_Arch> when 'true' ->
	      let <_7> =
		  fun (_5) ->
		      %% Line 1101
		      case _5 of
			<{'hipe_bifs','write_u64',2}> when 'true' ->
			    'false'
			%% Line 1102
			<_16> when 'true' ->
			    'true'
		      end
	      in  let <U> =
		      call %% Line 1101
			   'lists':%% Line 1101
				   'filter'
			  (_7, _0)
		  in  %% Line 1104
		      [{'warning',{'exref_undef',U}}|[]]
	end
'xref_p'/1 =
    %% Line 1110
    fun (_0) ->
	%% Line 1111
	case call 'lists':'member'
		 ('exref', _0) of
	  %% Line 1112
	  <'true'> when 'true' ->
	      %% Line 1113
	      apply 'exists_xref'/1
		  ('true')
	  %% Line 1114
	  <_5> when 'true' ->
	      %% Line 1115
	      case apply 'get_flag'/2
		       ('exref', _0) of
		%% Line 1116
		<{'exref',Appls}>
		    when call 'erlang':'is_list'
			  (Appls) ->
		    %% Line 1117
		    case apply 'a_list_p'/1
			     (Appls) of
		      %% Line 1118
		      <'true'> when 'true' ->
			  apply 'exists_xref'/1
			      ({'true',Appls})
		      %% Line 1119
		      <_6> when 'true' ->
			  'false'
		    end
		%% Line 1121
		<_7> when 'true' ->
		    %% Line 1122
		    'false'
	      end
	end
'exists_xref'/1 =
    %% Line 1126
    fun (_0) ->
	%% Line 1127
	case call 'code':'ensure_loaded'
		 ('xref') of
	  %% Line 1128
	  <{'error',_3}> when 'true' ->
	      'false'
	  %% Line 1129
	  <_4> when 'true' ->
	      _0
	end
'objfile_extension'/1 =
    %% Line 1132
    fun (_0) ->
	case _0 of
	  <'false'> when 'true' ->
	      %% Line 1133
	      call 'code':'objfile_extension'
		  ()
	  %% Line 1134
	  <Machine> when 'true' ->
	      let <_1> =
		  call %% Line 1135
		       'erlang':%% Line 1135
				'atom_to_list'
		      (%% Line 1135
		       Machine)
	      in  %% Line 1135
		  [46|_1]
	end
'check_mod'/5 =
    %% Line 1137
    fun (_0,_1,_2,_3,_4) ->
	let <ObjFile> =
	    apply %% Line 1138
		  'mod_to_filename'/3
		(_2, _0, _3)
	in  %% Line 1139
	    case call 'file':'read_file_info'
		     (ObjFile) of
	      %% Line 1140
	      <{'ok',FileInfo}> when 'true' ->
		  %% Line 1141
		  ( case FileInfo of
		      ( <( {'file_info',_15,_16,_17,_18,_rec22,_19,_20,_21,_22,_23,_24,_25,_26}
			   -| ['compiler_generated'] )> when 'true' ->
			    %% Line 1142
			    apply 'check_module'/4
				(_0, _2, _rec22, _4)
			-| ['compiler_generated'] )
		      ( <_27> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','file_info'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 1143
	      <_28> when 'true' ->
		  %% Line 1144
		  {'error',{'module_not_found',_1,_0}}
	    end
'mod_to_filename'/3 =
    %% Line 1147
    fun (_0,_1,_2) ->
	let <_3> =
	    call %% Line 1148
		 'erlang':%% Line 1148
			  'atom_to_list'
		(_1)
	in  let <_4> =
		call %% Line 1148
		     'erlang':%% Line 1148
			      '++'
		    (_3, _2)
	    in  %% Line 1148
		call 'filename':'join'
		    (_0, _4)
'check_module'/4 =
    %% Line 1150
    fun (_0,_1,_2,_3) ->
	%% Line 1151
	case apply 'smart_guess'/2
		 (_1, _3) of
	  <{SrcDirs,_X_IncDirs}> when 'true' ->
	      %% Line 1152
	      case apply 'locate_src'/2
		       (_0, SrcDirs) of
		%% Line 1153
		<{'ok',_X_FDir,_X_File,LastModTime}> when 'true' ->
		    %% Line 1154
		    case <> of
		      %% Line 1155
		      <>
			  when call 'erlang':'>'
				(LastModTime,
				 _2) ->
			  %% Line 1156
			  {'warning','obj_out_of_date'}
		      %% Line 1157
		      <> when 'true' ->
			  %% Line 1158
			  'ok'
		    end
		%% Line 1160
		<_10> when 'true' ->
		    %% Line 1161
		    {'warning','source_not_found'}
	      end
	  ( <_4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_4})
	    -| ['compiler_generated'] )
	end
'locate_src'/2 =
    %% Line 1164
    fun (_0,_1) ->
	case <_0,_1> of
	  <Mod,[Dir|Dirs]> when 'true' ->
	      let <File> =
		  apply %% Line 1165
			'mod_to_filename'/3
		      (%% Line 1165
		       Dir, %% Line 1165
			    Mod, %% Line 1165
				 [46|[101|[114|[108]]]])
	      in  %% Line 1166
		  case call 'file':'read_file_info'
			   (File) of
		    %% Line 1167
		    <{'ok',FileInfo}> when 'true' ->
			%% Line 1168
			( case FileInfo of
			    ( <( {'file_info',_9,_10,_11,_12,_rec23,_13,_14,_15,_16,_17,_18,_19,_20}
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 1169
				  {'ok',Dir,File,_rec23}
			      -| ['compiler_generated'] )
			    ( <_21> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','file_info'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 1170
		    <_22> when 'true' ->
			%% Line 1171
			apply 'locate_src'/2
			    (Mod, Dirs)
		  end
	  %% Line 1173
	  <_23,[]> when 'true' ->
	      %% Line 1174
	      'false'
	  ( <_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7})
		  -| [{'function_name',{'locate_src',2}}] )
	    -| ['compiler_generated'] )
	end
'smart_guess'/2 =
    %% Line 1183
    fun (_0,_1) ->
	let <_2> =
	    call %% Line 1184
		 'filename':%% Line 1184
			    'split'
		(_0)
	in  %% Line 1184
	    case call 'lists':'reverse'
		     (_2) of
	      %% Line 1185
	      <[[101|[98|[105|[110]]]]|D]> when 'true' ->
		  let <D1> =
		      call %% Line 1186
			   'lists':%% Line 1186
				   'reverse'
			  (%% Line 1186
			   D)
		  in  let <_4> =
			  call %% Line 1187
			       'erlang':%% Line 1187
					'++'
			      (%% Line 1187
			       D1, %% Line 1187
				   [[115|[114|[99]]]])
		      in  let <_5> =
			      call %% Line 1187
				   'filename':%% Line 1187
					      'join'
				  (_4)
			  in  let <_6> =
				  call %% Line 1188
				       'erlang':%% Line 1188
						'++'
				      (%% Line 1188
				       D1, %% Line 1188
					   [[115|[114|[99]]]|[[101|[95|[115|[114|[99]]]]]]])
			      in  let <_7> =
				      call %% Line 1188
					   'filename':%% Line 1188
						      'join'
					  (_6)
				  in  let <Dirs> =
					  [_5|%% Line 1188
					      [_7|[]]]
				      in  let <_9> =
					      call %% Line 1189
						   'erlang':%% Line 1189
							    '++'
						  (%% Line 1189
						   Dirs, _1)
					  in  %% Line 1189
					      {Dirs,_9}
	      %% Line 1190
	      <_14> when 'true' ->
		  let <_10> =
		      [_0|_1]
		  in  %% Line 1191
		      {[_0|[]],_10}
	    end
'generate_script'/4 =
    %% Line 1201
    fun (_0,_1,_2,_3) ->
	let <PathFlag> =
	    apply %% Line 1202
		  'path_flag'/1
		(_3)
	in  let <Variables> =
		apply %% Line 1203
		      'get_variables'/1
		    (_3)
	    in  let <Preloaded> =
		    apply %% Line 1204
			  'preloaded'/0
			()
		in  let <Mandatory> =
			apply %% Line 1205
			      'mandatory_modules'/0
			    ()
		    in  %% Line 1206
			( case _1 of
			    ( <( {'release',_rec24,_41,_42,_43,_44}
				 -| ['compiler_generated'] )> when 'true' ->
				  ( case _1 of
				      ( <( {'release',_46,_rec25,_47,_48,_49}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_21> =
						apply %% Line 1209
						      'create_mandatory_path'/3
						    (_2, %% Line 1209
							 PathFlag, %% Line 1209
								   Variables)
					    in  let <_18> =
						    call %% Line 1213
							 'erlang':%% Line 1213
								  '++'
							(%% Line 1213
							 Mandatory, %% Line 1213
								    Preloaded)
						in  let <_19> =
							apply %% Line 1213
							      'load_appl_mods'/4
							    (_2, _18, %% Line 1214
								      PathFlag, %% Line 1214
										Variables)
						    in  let <_16> =
							    apply %% Line 1215
								  'create_path'/3
								(_2, %% Line 1215
								     PathFlag, %% Line 1215
									       Variables)
							in  let <_14> =
								apply %% Line 1216
								      'create_kernel_procs'/1
								    (_2)
							    in  let <_12> =
								    apply %% Line 1217
									  'create_load_appls'/1
									(_2)
								in  let <_10> =
									apply %% Line 1218
									      'create_start_appls'/1
									    (_2)
								    in  let <_8> =
									    call %% Line 1219
										 'lists':%% Line 1219
											 'member'
										(%% Line 1219
										 'no_dot_erlang', _3)
									in  let <_9> =
										apply %% Line 1219
										      'script_end'/1
										    (_8)
									    in  let <_11> =
										    call %% Line 1218
											 'erlang':%% Line 1218
												  '++'
											(_10, _9)
										in  let <_13> =
											call %% Line 1217
											     'erlang':%% Line 1217
												      '++'
											    (_12, _11)
										    in  let <_15> =
											    call %% Line 1216
												 'erlang':%% Line 1216
													  '++'
												(_14, _13)
											in  let <_17> =
												[%% Line 1215
												 {'path',_16}|_15]
											    in  let <_20> =
												    call %% Line 1214
													 'erlang':%% Line 1214
														  '++'
													(_19, _17)
												in  let <_22> =
													[%% Line 1207
													 {'preLoaded',Preloaded}|%% Line 1208
																 [{'progress','preloaded'}|%% Line 1209
																			   [{'path',_21}|%% Line 1210
																					 [{'primLoad',Mandatory}|%% Line 1212
																								 [{'kernel_load_completed'}|[{'progress','kernel_load_completed'}|_20]]]]]]
												    in  let <Script> = {'script',{_rec24,_rec25},_22}
													in  let <ScriptFile> =
														call %% Line 1222
														     'erlang':%% Line 1222
															      '++'
														    (_0, %% Line 1222
															 [46|[115|[99|[114|[105|[112|[116]]]]]]])
													    in  %% Line 1223
														case call 'file':'open'
															 (ScriptFile, ['write'|[{'encoding','utf8'}]]) of
														  %% Line 1224
														  <{'ok',Fd}> when 'true' ->
														      let <_29> =
															  call %% Line 1226
															       'epp':%% Line 1226
																     'encoding_to_string'
															      (%% Line 1226
															       'utf8')
														      in  let <_30> =
															      call %% Line 1226
																   'erlang':%% Line 1226
																	    'date'
																  ()
															  in  let <_31> =
																  call %% Line 1226
																       'erlang':%% Line 1226
																		'time'
																      ()
															      in  do  %% Line 1225
																      call 'io':'format'
																	  (Fd, [37|[37|[32|[126|[115|[10|[37|[37|[32|[115|[99|[114|[105|[112|[116|[32|[103|[101|[110|[101|[114|[97|[116|[101|[100|[32|[97|[116|[32|[126|[119|[32|[126|[119|[10|[126|[116|[112|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1226
																																													       [_29|[_30|[_31|[Script|[]]]]])
																      %% Line 1227
																      case call 'file':'close'
																	       (Fd) of
																	%% Line 1228
																	<'ok'> when 'true' ->
																	    let <BootFile> =
																		call %% Line 1229
																		     'erlang':%% Line 1229
																			      '++'
																		    (_0, %% Line 1229
																			 [46|[98|[111|[111|[116]]]]])
																	    in  let <_33> =
																		    call %% Line 1230
																			 'erlang':%% Line 1230
																				  'term_to_binary'
																			(%% Line 1230
																			 Script)
																		in  %% Line 1230
																		    case call 'file':'write_file'
																			     (BootFile, _33) of
																		      %% Line 1231
																		      <'ok'> when 'true' ->
																			  %% Line 1232
																			  'ok'
																		      %% Line 1233
																		      <{'error',Reason}> when 'true' ->
																			  %% Line 1234
																			  {'error','systools_make',{'open',BootFile,Reason}}
																		      ( <_34> when 'true' ->
																			    primop 'match_fail'
																				({'case_clause',_34})
																			-| ['compiler_generated'] )
																		    end
																	%% Line 1236
																	<{'error',Reason}> when 'true' ->
																	    %% Line 1237
																	    {'error','systools_make',{'close',ScriptFile,Reason}}
																	( <_35> when 'true' ->
																	      primop 'match_fail'
																		  ({'case_clause',_35})
																	  -| ['compiler_generated'] )
																      end
														  %% Line 1239
														  <{'error',Reason}> when 'true' ->
														      %% Line 1240
														      {'error','systools_make',{'open',ScriptFile,Reason}}
														  ( <_36> when 'true' ->
															primop 'match_fail'
															    ({'case_clause',_36})
														    -| ['compiler_generated'] )
														end
					-| ['compiler_generated'] )
				      ( <_50> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','release'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_45> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','release'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
'path_flag'/1 =
    %% Line 1243
    fun (_0) ->
	let <_2> =
	    call %% Line 1244
		 'lists':%% Line 1244
			 'member'
		(%% Line 1244
		 'local', _0)
	in  let <_1> =
		call %% Line 1244
		     'lists':%% Line 1244
			     'member'
		    (%% Line 1244
		     'otp_build', _0)
	    in  %% Line 1244
		case <_2,_1> of
		  %% Line 1245
		  <( 'true'
		     -| ['compiler_generated'] ),_5> when 'true' ->
		      'local'
		  %% Line 1246
		  <_6,( 'true'
			-| ['compiler_generated'] )> when 'true' ->
		      'otp_build'
		  %% Line 1247
		  <_7,_8> when 'true' ->
		      'true'
		end
'get_variables'/1 =
    %% Line 1250
    fun (_0) ->
	%% Line 1251
	case apply 'get_flag'/2
		 ('variables', _0) of
	  %% Line 1252
	  <{'variables',Variables}>
	      when call 'erlang':'is_list'
		    (Variables) ->
	      %% Line 1253
	      apply 'valid_variables'/1
		  (Variables)
	  %% Line 1254
	  <_3> when 'true' ->
	      %% Line 1255
	      []
	end
'valid_variables'/1 =
    %% Line 1258
    fun (_0) ->
	case _0 of
	  <[{Var,Path}|Variables]>
	      when let <_1> =
		    call 'erlang':'is_list'
			(Var)
		in  let <_2> =
			call 'erlang':'is_list'
			    (Path)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      let <_3> =
		  apply %% Line 1259
			'rm_tlsl'/1
		      (%% Line 1259
		       Path)
	      in  let <_4> =
		      apply %% Line 1259
			    'valid_variables'/1
			  (%% Line 1259
			   Variables)
		  in  %% Line 1259
		      [{Var,_3}|_4]
	  %% Line 1260
	  <[{Var,Path}|Variables]>
	      when let <_5> =
		    call 'erlang':'is_atom'
			(Var)
		in  let <_6> =
			call 'erlang':'is_list'
			    (Path)
		    in  call 'erlang':'and'
			    (_5, _6) ->
	      let <_8> =
		  apply %% Line 1261
			'to_list'/1
		      (%% Line 1261
		       Var)
	      in  let <_7> =
		      apply %% Line 1261
			    'rm_tlsl'/1
			  (%% Line 1261
			   Path)
		  in  let <_9> =
			  apply %% Line 1261
				'valid_variables'/1
			      (%% Line 1261
			       Variables)
		      in  %% Line 1261
			  [{_8,_7}|_9]
	  %% Line 1262
	  <[_11|Variables]> when 'true' ->
	      %% Line 1263
	      apply 'valid_variables'/1
		  (Variables)
	  %% Line 1264
	  <_12> when 'true' ->
	      %% Line 1265
	      []
	end
'rm_tlsl'/1 =
    %% Line 1267
    fun (_0) ->
	let <_1> =
	    call 'lists':'reverse'
		(_0)
	in  apply 'rm_tlsl1'/1
		(_1)
'rm_tlsl1'/1 =
    %% Line 1268
    fun (_0) ->
	case _0 of
	  <[47|P]> when 'true' ->
	      apply 'rm_tlsl1'/1
		  (P)
	  %% Line 1269
	  <P> when 'true' ->
	      call 'lists':'reverse'
		  (P)
	end
'create_start_appls'/1 =
    %% Line 1275
    fun (_0) ->
	let <_4> =
	    fun (_2) ->
		%% Line 1276
		case _2 of
		  <{_8,A}> when 'true' ->
		      %% Line 1277
		      ( case A of
			  ( <( {'application',_9,_10,_11,_12,_13,_14,_15,_rec26,_16,_17,_18,_19,_20,_21,_22}
			       -| ['compiler_generated'] )> when 'true' ->
				_rec26
			    -| ['compiler_generated'] )
			  ( <_23> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','application'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  ( <_3> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_3})
			  -| [{'function_name',{'-create_start_appls/1-fun-0-',1}}] )
		    -| ['compiler_generated'] )
		end
	in  let <_5> =
		call %% Line 1276
		     'lists':%% Line 1276
			     'map'
		    (_4, _0)
	    in  let <Included> =
		    call %% Line 1276
			 'lists':%% Line 1276
				 'append'
			(_5)
		in  %% Line 1279
		    apply 'create_start_appls'/2
			(_0, Included)
'create_start_appls'/2 =
    %% Line 1281
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{_23,A}|T],Incl> when 'true' ->
	      %% Line 1282
	      ( case A of
		  ( <( {'application',_rec27,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1283
			case call 'lists':'member'
				 (_rec27, Incl) of
			  %% Line 1284
			  <'false'>
			      when ( try
				      ( let <_7> =
					    case ( call ( 'erlang'
							  -| ['compiler_generated'] ):( 'is_record'
											-| ['compiler_generated'] )
						       (A, ( 'application'
							     -| ['compiler_generated'] ), ( 16
											    -| ['compiler_generated'] ))
						   -| ['compiler_generated'] ) of
					      ( <( 'true'
						   -| ['compiler_generated'] )> when 'true' ->
						    ( 'true'
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <( 'false'
						   -| ['compiler_generated'] )> when 'true' ->
						    ( 'fail'
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <( _5
						   -| ['compiler_generated'] )> when 'true' ->
						    ( _5
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					in  let <_8> =
						call 'erlang':'=:='
						    (( _7
						       -| ['compiler_generated'] ), 'true')
					    in  let <_9> =
						    call 'erlang':'element'
							(3, A)
						in  let <_10> =
							call 'erlang':'=:='
							    (_9, 'none')
						    in  ( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'and'
											       -| ['compiler_generated'] )
							      (_8, _10)
							  -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
				  -| ['compiler_generated'] ) ->
			      %% Line 1285
			      apply 'create_start_appls'/2
				  (T, Incl)
			  %% Line 1286
			  <'false'>
			      when ( try
				      ( let <_13> =
					    case ( call ( 'erlang'
							  -| ['compiler_generated'] ):( 'is_record'
											-| ['compiler_generated'] )
						       (A, ( 'application'
							     -| ['compiler_generated'] ), ( 16
											    -| ['compiler_generated'] ))
						   -| ['compiler_generated'] ) of
					      ( <( 'true'
						   -| ['compiler_generated'] )> when 'true' ->
						    ( 'true'
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <( 'false'
						   -| ['compiler_generated'] )> when 'true' ->
						    ( 'fail'
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <( _11
						   -| ['compiler_generated'] )> when 'true' ->
						    ( _11
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					in  let <_14> =
						call 'erlang':'=:='
						    (( _13
						       -| ['compiler_generated'] ), 'true')
					    in  let <_15> =
						    call 'erlang':'element'
							(3, A)
						in  let <_16> =
							call 'erlang':'=:='
							    (_15, 'load')
						    in  ( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'and'
											       -| ['compiler_generated'] )
							      (_14, _16)
							  -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
				  -| ['compiler_generated'] ) ->
			      %% Line 1287
			      apply 'create_start_appls'/2
				  (T, Incl)
			  %% Line 1288
			  <'false'> when 'true' ->
			      %% Line 1289
			      ( case A of
				  ( <( {'application',_39,_rec28,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_19> =
					    apply %% Line 1290
						  'create_start_appls'/2
						(%% Line 1290
						 T, %% Line 1290
						    Incl)
					in  [{'apply',{'application','start_boot',[_rec27|[_rec28|[]]]}}|_19]
				    -| ['compiler_generated'] )
				  ( <_53> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','application'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 1291
			  <_54> when 'true' ->
			      %% Line 1292
			      apply 'create_start_appls'/2
				  (T, Incl)
			end
		    -| ['compiler_generated'] )
		  ( <_38> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','application'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1294
	  <[],_55> when 'true' ->
	      %% Line 1295
	      []
	  ( <_22,_21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_22,_21})
		  -| [{'function_name',{'create_start_appls',2}}] )
	    -| ['compiler_generated'] )
	end
'create_load_appls'/1 =
    %% Line 1300
    fun (_0) ->
	case _0 of
	  <[{{'kernel',_10},_11}|T]> when 'true' ->
	      %% Line 1301
	      apply 'create_load_appls'/1
		  (T)
	  %% Line 1302
	  <[{_12,A = {'application',_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27}}|T]>
	      when ( try
		      let <_5> =
			  call 'erlang':'element'
			      (3, A)
		      in  call 'erlang':'=:='
			      (_5, 'none')
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 1303
	      apply 'create_load_appls'/1
		  (T)
	  %% Line 1304
	  <[{_28,A}|T]> when 'true' ->
	      let <_7> =
		  apply %% Line 1305
			'pack_app'/1
		      (%% Line 1305
		       A)
	      in  let <_8> =
		      apply %% Line 1306
			    'create_load_appls'/1
			  (%% Line 1306
			   T)
		  in  %% Line 1305
		      [{'apply',{'application','load',[_7|[]]}}|_8]
	  %% Line 1307
	  <[]> when 'true' ->
	      %% Line 1308
	      [{'progress','applications_loaded'}]
	  ( <_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9})
		  -| [{'function_name',{'create_load_appls',1}}] )
	    -| ['compiler_generated'] )
	end
'script_end'/1 =
    %% Line 1313
    fun (_0) ->
	case _0 of
	  <'false'> when 'true' ->
	      %% Line 1314
	      [{'apply',{'c','erlangrc',[]}}|[{'progress','started'}]]
	  %% Line 1316
	  <'true'> when 'true' ->
	      %% Line 1317
	      [{'progress','started'}]
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'script_end',1}}] )
	    -| ['compiler_generated'] )
	end
'sort_appls'/1 =
    %% Line 1329
    fun (_0) ->
	let <_1> =
	    apply 'sort_appls'/4
		(_0, [], [], [])
	in  {'ok',_1}
'sort_appls'/4 =
    %% Line 1331
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[_@r0 = {N,A}|T],Missing,Circular,Visited> when 'true' ->
	      %% Line 1332
	      case N of
		<{Name,_X_Vsn}> when 'true' ->
		    %% Line 1333
		    ( case A of
			( <( {'application',_39,_40,_41,_42,_43,_44,_rec29,_45,_46,_47,_48,_49,_50,_51,_52}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_7> =
				  call 'lists':'reverse'
				      (_rec29)
			      in  case apply 'find_all'/6
					   (Name, _7, %% Line 1334
						      T, %% Line 1334
							 Visited, %% Line 1334
								  [], %% Line 1334
								      []) of
				    <{Uses,T1,NotFnd1}> when 'true' ->
					%% Line 1335
					( case A of
					    ( <( {'application',_54,_55,_56,_57,_58,_59,_60,_rec30,_61,_62,_63,_64,_65,_66,_67}
						 -| ['compiler_generated'] )> when 'true' ->
						  let <_11> =
						      call 'lists':'reverse'
							  (_rec30)
						  in  case apply 'find_all'/6
							       (Name, _11, %% Line 1336
									   T1, %% Line 1336
									       Visited, %% Line 1336
											[], %% Line 1336
											    []) of
							<{Incs,T2,NotFnd2}> when 'true' ->
							    let <_13> =
								call %% Line 1337
								     'erlang':%% Line 1337
									      '++'
								    (%% Line 1337
								     NotFnd2, %% Line 1337
									      Missing)
							    in  let <Missing1> =
								    call %% Line 1337
									 'erlang':%% Line 1337
										  '++'
									(%% Line 1337
									 NotFnd1, _13)
								in  %% Line 1338
								    case call 'erlang':'++'
									     (Uses, Incs) of
								      %% Line 1339
								      <[]> when 'true' ->
									  let <_15> =
									      apply %% Line 1343
										    'sort_appls'/4
										  (%% Line 1343
										   T, %% Line 1343
										      Missing1, %% Line 1343
												Circular, %% Line 1343
													  [N|Visited])
									  in  %% Line 1343
									      [_@r0|_15]
								      %% Line 1344
								      <L> when 'true' ->
									  let <_23> =
									      letrec
										  'lc$^0'/1 =
										      %% Line 1348
										      fun (_20) ->
											  case _20 of
											    <[{N1,_69}|_17]> when 'true' ->
												( letrec
												      'lc$^1'/1 =
													  fun (_21) ->
													      case _21 of
														<[N2|_19]>
														    when call 'erlang':'=='
															  (N1,
															   N2) ->
														    let <_22> =
															apply 'lc$^1'/1
															    (_19)
														    in  ( [N1|_22]
															  -| ['compiler_generated'] )
														( <[N2|_19]> when 'true' ->
														      apply 'lc$^1'/1
															  (_19)
														  -| ['compiler_generated'] )
														<[]> when 'true' ->
														    apply 'lc$^0'/1
															(_17)
														( <_75> when 'true' ->
														      ( primop 'match_fail'
															    ({'function_clause',_75})
															-| [{'function_name',{'lc$^1',1}}] )
														  -| ['compiler_generated'] )
													      end
												  in  apply 'lc$^1'/1
													  (Visited)
												  -| ['list_comprehension'] )
											    ( <[_16|_17]> when 'true' ->
												  apply 'lc$^0'/1
												      (_17)
											      -| ['compiler_generated'] )
											    <[]> when 'true' ->
												[]
											    ( <_76> when 'true' ->
												  ( primop 'match_fail'
													({'function_clause',_76})
												    -| [{'function_name',{'lc$^0',1}}] )
											      -| ['compiler_generated'] )
											  end
									      in  %% Line 1348
										  apply 'lc$^0'/1
										      (L)
									  in  let <_26> =
										  case _23 of
										    %% Line 1350
										    <[]> when 'true' ->
											Circular
										    %% Line 1351
										    <_70> when 'true' ->
											[N|call 'erlang':'++'
											       (_23, Circular)]
										  end
									      in  let <_28> =
										      call %% Line 1355
											   'erlang':%% Line 1355
												    '++'
											  (%% Line 1355
											   L, %% Line 1355
											      [_@r0|T2])
										  in  let <Apps> =
											  apply %% Line 1355
												'del_apps'/2
											      (_23, _28)
										      in  %% Line 1356
											  apply 'sort_appls'/4
											      (Apps, Missing1, _26, [N|Visited])
								    end
							( <_12> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_12})
							  -| ['compiler_generated'] )
						      end
					      -| ['compiler_generated'] )
					    ( <_68> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','application'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    ( <_8> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_8})
				      -| ['compiler_generated'] )
				  end
			  -| ['compiler_generated'] )
			( <_53> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','application'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1358
	  <[],[],[],_71> when 'true' ->
	      %% Line 1359
	      []
	  %% Line 1360
	  <[],Missing,[],_72> when 'true' ->
	      let <_31> =
		  apply %% Line 1362
			'make_set'/1
		      (%% Line 1362
		       Missing)
	      in  %% Line 1362
		  call 'erlang':'throw'
		      ({'error',{'undefined_applications',_31}})
	  %% Line 1363
	  <[],[],Circular,_73> when 'true' ->
	      let <_32> =
		  apply %% Line 1364
			'make_set'/1
		      (%% Line 1364
		       Circular)
	      in  %% Line 1364
		  call 'erlang':'throw'
		      ({'error',{'circular_dependencies',_32}})
	  %% Line 1365
	  <[],Missing,Circular,_74> when 'true' ->
	      let <_33> =
		  apply %% Line 1366
			'make_set'/1
		      (%% Line 1366
		       Circular)
	      in  let <_34> =
		      apply %% Line 1367
			    'make_set'/1
			  (%% Line 1367
			   Missing)
		  in  %% Line 1366
		      call 'erlang':'throw'
			  ({'error',{'apps',[{'circular_dependencies',_33}|%% Line 1367
									   [{'undefined_applications',_34}|[]]]}})
	  ( <_38,_37,_36,_35> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_38,_37,_36,_35})
		  -| [{'function_name',{'sort_appls',4}}] )
	    -| ['compiler_generated'] )
	end
'find_all'/6 =
    %% Line 1369
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <CheckingApp,[Name|T],L,Visited,Found,NotFound> when 'true' ->
	      %% Line 1370
	      case apply 'find_app'/2
		       (Name, L) of
		%% Line 1371
		<{'value',App}> when 'true' ->
		    %% Line 1372
		    case App of
		      <{_X_A,R}> when 'true' ->
			  %% Line 1375
			  ( case R of
			      ( <( {'application',_20,_21,_22,_23,_24,_25,_26,_rec31,_27,_28,_29,_30,_31,_32,_33}
				   -| ['compiler_generated'] )> when 'true' ->
				    case call 'lists':'member'
					     (CheckingApp, _rec31) of
				      %% Line 1376
				      <'true'> when 'true' ->
					  %% Line 1377
					  case call 'lists':'keymember'
						   (Name, 1, Visited) of
					    %% Line 1378
					    <'true'> when 'true' ->
						%% Line 1379
						apply 'find_all'/6
						    (CheckingApp, T, L, Visited, Found, NotFound)
					    %% Line 1380
					    <'false'> when 'true' ->
						%% Line 1381
						apply 'find_all'/6
						    (CheckingApp, T, L, Visited, Found, [Name|NotFound])
					    ( <_9> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_9})
					      -| ['compiler_generated'] )
					  end
				      %% Line 1383
				      <'false'> when 'true' ->
					  let <_10> =
					      call %% Line 1384
						   'erlang':%% Line 1384
							    '--'
						  (%% Line 1384
						   L, %% Line 1384
						      [App|[]])
					  in  %% Line 1384
					      apply 'find_all'/6
						  (CheckingApp, T, _10, Visited, [App|Found], NotFound)
				      ( <_11> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_11})
					-| ['compiler_generated'] )
				    end
				-| ['compiler_generated'] )
			      ( <_34> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','application'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      ( <_6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_6})
			-| ['compiler_generated'] )
		    end
		%% Line 1386
		<'false'> when 'true' ->
		    %% Line 1387
		    case call 'lists':'keymember'
			     (Name, 1, Visited) of
		      %% Line 1388
		      <'true'> when 'true' ->
			  %% Line 1389
			  apply 'find_all'/6
			      (CheckingApp, T, L, Visited, Found, NotFound)
		      %% Line 1390
		      <'false'> when 'true' ->
			  %% Line 1391
			  apply 'find_all'/6
			      (CheckingApp, T, L, Visited, Found, [Name|NotFound])
		      ( <_12> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_12})
			-| ['compiler_generated'] )
		    end
		( <_13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1394
	  <_X_CheckingApp,[],L,_X_Visited,Found,NotFound> when 'true' ->
	      %% Line 1395
	      {Found,L,NotFound}
	  ( <_19,_18,_17,_16,_15,_14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_19,_18,_17,_16,_15,_14})
		  -| [{'function_name',{'find_all',6}}] )
	    -| ['compiler_generated'] )
	end
'find_app'/2 =
    %% Line 1397
    fun (_0,_1) ->
	case <_0,_1> of
	  <Name,[{{_4,Vsn},Application}|_5]>
	      when call 'erlang':'=:='
		    (_4,
		     Name) ->
	      %% Line 1398
	      {'value',{{Name,Vsn},Application}}
	  %% Line 1399
	  <Name,[_6|T]> when 'true' ->
	      %% Line 1400
	      apply 'find_app'/2
		  (Name, T)
	  %% Line 1401
	  <_X_Name,[]> when 'true' ->
	      %% Line 1402
	      'false'
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'find_app',2}}] )
	    -| ['compiler_generated'] )
	end
'del_apps'/2 =
    %% Line 1404
    fun (_0,_1) ->
	case <_0,_1> of
	  <[Name|T],L> when 'true' ->
	      let <_2> =
		  call %% Line 1405
		       'lists':%% Line 1405
			       'keydelete'
		      (%% Line 1405
		       Name, %% Line 1405
			     1, %% Line 1405
				L)
	      in  %% Line 1405
		  apply 'del_apps'/2
		      (T, _2)
	  %% Line 1406
	  <[],L> when 'true' ->
	      %% Line 1407
	      L
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'del_apps',2}}] )
	    -| ['compiler_generated'] )
	end
'create_path'/3 =
    %% Line 1418
    fun (_0,_1,_2) ->
	let <_5> =
	    fun (_3) ->
		%% Line 1419
		case _3 of
		  <{{Name,Vsn},App}> when 'true' ->
		      %% Line 1420
		      apply 'cr_path'/5
			  (Name, Vsn, App, _1, _2)
		  ( <_4> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_4})
			  -| [{'function_name',{'-create_path/3-fun-0-',1}}] )
		    -| ['compiler_generated'] )
		end
	in  let <_6> =
		call %% Line 1419
		     'lists':%% Line 1419
			     'map'
		    (_5, _0)
	    in  %% Line 1419
		apply 'make_set'/1
		    (_6)
'cr_path'/5 =
    %% Line 1426
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <Name,Vsn,_26,'true',[]> when 'true' ->
	      let <_6> =
		  apply %% Line 1427
			'to_list'/1
		      (%% Line 1427
		       Name)
	      in  let <_5> =
		      [45|%% Line 1427
			  Vsn]
		  in  let <_7> =
			  call %% Line 1427
			       'erlang':%% Line 1427
					'++'
			      (_6, _5)
		      in  %% Line 1427
			  call 'filename':'join'
			      ([[36|[82|[79|[79|[84]]]]]|[[108|[105|[98]]]|[_7|[[101|[98|[105|[110]]]]]]]])
	  %% Line 1428
	  <Name,Vsn,App,'true',Variables> when 'true' ->
	      %% Line 1429
	      ( case App of
		  ( <( {'application',_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_rec32}
		       -| ['compiler_generated'] )> when 'true' ->
			let <N> =
			    apply %% Line 1430
				  'to_list'/1
				(%% Line 1430
				 Name)
			in  let <_12> =
				[45|%% Line 1431
				    Vsn]
			    in  let <_13> =
				    call %% Line 1431
					 'erlang':%% Line 1431
						  '++'
					(%% Line 1431
					 N, _12)
				in  let <Tail> =
					[_13|%% Line 1431
					     [[101|[98|[105|[110]]]]]]
				    in  %% Line 1432
					case apply 'variable_dir'/4
						 (_rec32, N, Vsn, Variables) of
					  %% Line 1433
					  <{'ok',VarDir}> when 'true' ->
					      let <_15> =
						  [%% Line 1434
						   VarDir|%% Line 1434
							  Tail]
					      in  %% Line 1434
						  call 'filename':'join'
						      (_15)
					  %% Line 1435
					  <_42> when 'true' ->
					      let <_16> =
						  [[36|[82|[79|[79|[84]]]]]|%% Line 1436
									    [[108|[105|[98]]]|Tail]]
					      in  %% Line 1436
						  call 'filename':'join'
						      (_16)
					end
		    -| ['compiler_generated'] )
		  ( <_41> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','application'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1438
	  <Name,_43,_44,'otp_build',_45> when 'true' ->
	      let <_18> =
		  apply %% Line 1439
			'to_list'/1
		      (%% Line 1439
		       Name)
	      in  %% Line 1439
		  call 'filename':'join'
		      ([[36|[82|[79|[79|[84]]]]]|[[108|[105|[98]]]|[_18|[[101|[98|[105|[110]]]]]]]])
	  %% Line 1440
	  <_46,_47,App,_48,_49> when 'true' ->
	      %% Line 1441
	      ( case App of
		  ( <( {'application',_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_rec33}
		       -| ['compiler_generated'] )> when 'true' ->
			call 'filename':'absname'
			    (_rec33)
		    -| ['compiler_generated'] )
		  ( <_64> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','application'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'variable_dir'/4 =
    %% Line 1443
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Dir,Name,Vsn,[{Var,Path}|Variables]> when 'true' ->
	      %% Line 1444
	      case call 'lists':'prefix'
		       (Path, Dir) of
		%% Line 1445
		<'true'> when 'true' ->
		    let <D0> =
			apply %% Line 1446
			      'strip_prefix'/2
			    (%% Line 1446
			     Path, %% Line 1446
				   Dir)
		    in  %% Line 1447
			case apply 'strip_name_ebin'/3
				 (D0, Name, Vsn) of
			  %% Line 1448
			  <{'ok',D}> when 'true' ->
			      let <_5> =
				  [36|%% Line 1449
				      Var]
			      in  let <_6> =
				      [_5|%% Line 1449
					  D]
				  in  let <_7> =
					  call %% Line 1449
					       'filename':%% Line 1449
							  'join'
					      (_6)
				      in  %% Line 1449
					  {'ok',_7}
			  %% Line 1450
			  <_17> when 'true' ->
			      let <_8> =
				  [36|%% Line 1453
				      Var]
			      in  let <_9> =
				      [_8|%% Line 1453
					  D0]
				  in  let <_10> =
					  call %% Line 1453
					       'filename':%% Line 1453
							  'join'
					      (_9)
				      in  %% Line 1453
					  {'ok',_10}
			end
		%% Line 1455
		<_18> when 'true' ->
		    %% Line 1456
		    apply 'variable_dir'/4
			(Dir, Name, Vsn, Variables)
	      end
	  %% Line 1458
	  <_X_Dir,_19,_20,[]> when 'true' ->
	      %% Line 1459
	      'false'
	  ( <_16,_15,_14,_13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15,_14,_13})
		  -| [{'function_name',{'variable_dir',4}}] )
	    -| ['compiler_generated'] )
	end
'strip_prefix'/2 =
    %% Line 1461
    fun (_0,_1) ->
	let <_2> =
	    call %% Line 1462
		 'filename':%% Line 1462
			    'split'
		(_0)
	in  let <L> =
		call %% Line 1462
		     'erlang':%% Line 1462
			      'length'
		    (_2)
	    in  let <_4> =
		    call %% Line 1463
			 'filename':%% Line 1463
				    'split'
			(_1)
		in  %% Line 1463
		    call 'lists':'nthtail'
			(L, _4)
'strip_name_ebin'/3 =
    %% Line 1465
    fun (_0,_1,_2) ->
	let <_3> =
	    [45|_2]
	in  let <FullName> =
		call %% Line 1466
		     'erlang':%% Line 1466
			      '++'
		    (_1, _3)
	    in  %% Line 1467
		case call 'lists':'reverse'
			 (_0) of
		  %% Line 1468
		  <[[101|[98|[105|[110]]]]|[_11|D]]>
		      when call 'erlang':'=:='
			    (_11,
			     _1) ->
		      let <_5> =
			  call 'lists':'reverse'
			      (D)
		      in  {'ok',_5}
		  %% Line 1469
		  <[[101|[98|[105|[110]]]]|[_12|D]]>
		      when call 'erlang':'=:='
			    (_12,
			     FullName) ->
		      let <_6> =
			  call 'lists':'reverse'
			      (D)
		      in  {'ok',_6}
		  %% Line 1470
		  <_13> when 'true' ->
		      'false'
		end
'create_mandatory_path'/3 =
    %% Line 1474
    fun (_0,_1,_2) ->
	let <_7> =
	    fun (_5) ->
		%% Line 1476
		case _5 of
		  <{{Name,Vsn},A}> when 'true' ->
		      %% Line 1477
		      case call 'lists':'member'
			       (Name, ['kernel'|['stdlib']]) of
			%% Line 1478
			<'true'> when 'true' ->
			    %% Line 1479
			    apply 'cr_path'/5
				(Name, Vsn, A, _1, _2)
			%% Line 1480
			<_12> when 'true' ->
			    %% Line 1481
			    []
		      end
		  ( <_6> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_6})
			  -| [{'function_name',{'-create_mandatory_path/3-fun-0-',1}}] )
		    -| ['compiler_generated'] )
		end
	in  let <_8> =
		call %% Line 1476
		     'lists':%% Line 1476
			     'map'
		    (_7, _0)
	    in  %% Line 1476
		apply 'make_set'/1
		    (_8)
'load_appl_mods'/4 =
    %% Line 1489
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[{{Name,Vsn},A}|Appls],Mand,PathFlag,Variables> when 'true' ->
	      %% Line 1490
	      ( case A of
		  ( <( {'application',_19,_20,_21,_22,_23,_rec34,_24,_25,_26,_27,_28,_29,_30,_31,_32}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_12> =
			    fun (_10) ->
				let <_9> =
				    call %% Line 1491
					 'lists':%% Line 1491
						 'member'
					(%% Line 1491
					 _10, %% Line 1491
					      Mand)
				in  %% Line 1491
				    call 'erlang':'not'
					(_9)
			in  let <_13> =
				call %% Line 1491
				     'lists':%% Line 1491
					     'filter'
				    (_12, _rec34)
			    in  let <_8> =
				    apply %% Line 1492
					  'cr_path'/5
					(%% Line 1492
					 Name, %% Line 1492
					       Vsn, %% Line 1492
						    A, %% Line 1492
						       PathFlag, %% Line 1492
								 Variables)
				in  let <_14> =
					apply %% Line 1491
					      'load_commands'/2
					    (_13, _8)
				    in  let <_7> =
					    apply %% Line 1493
						  'load_appl_mods'/4
						(%% Line 1493
						 Appls, %% Line 1493
							Mand, %% Line 1493
							      PathFlag, %% Line 1493
									Variables)
					in  %% Line 1492
					    call 'erlang':'++'
						(_14, _7)
		    -| ['compiler_generated'] )
		  ( <_33> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','application'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1497
	  <[],_34,_35,_36> when 'true' ->
	      %% Line 1498
	      [{'progress','modules_loaded'}]
	  ( <_18,_17,_16,_15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_18,_17,_16,_15})
		  -| [{'function_name',{'load_appl_mods',4}}] )
	    -| ['compiler_generated'] )
	end
'load_commands'/2 =
    %% Line 1500
    fun (_0,_1) ->
	let <_2> =
	    call %% Line 1501
		 'filename':%% Line 1501
			    'join'
		(%% Line 1501
		 [_1|[]])
	in  let <_3> =
		call %% Line 1502
		     'lists':%% Line 1502
			     'sort'
		    (_0)
	    in  %% Line 1501
		[{'path',[_2|[]]}|%% Line 1502
				  [{'primLoad',_3}|[]]]
'pack_app'/1 =
    %% Line 1507
    fun (_0) ->
	case _0 of
	  <{'application',Name,_3,V,Id,D,M,%% Line 1508
					   App,%% Line 1508
					       Incs,%% Line 1508
						    Regs,%% Line 1509
							 Env,%% Line 1509
							     MaxT,%% Line 1509
								  MaxP,%% Line 1508
								       Mod,%% Line 1508
									   SF,_4}> when 'true' ->
	      let <_1> =
		  apply %% Line 1521
			'behave'/1
		      (%% Line 1521
		       [{'start_phases',SF}|[{'mod',Mod}|[]]])
	      in  %% Line 1510
		  {'application',Name,%% Line 1511
				      [{'description',D}|%% Line 1512
							 [{'vsn',V}|%% Line 1513
								    [{'id',Id}|%% Line 1514
									       [{'modules',M}|%% Line 1515
											      [{'registered',Regs}|%% Line 1516
														   [{'applications',App}|%% Line 1517
																	 [{'included_applications',Incs}|%% Line 1518
																					 [{'env',Env}|%% Line 1519
																						      [{'maxT',MaxT}|%% Line 1520
																								     [{'maxP',MaxP}|_1]]]]]]]]]]}
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'pack_app',1}}] )
	    -| ['compiler_generated'] )
	end
'behave'/1 =
    %% Line 1523
    fun (_0) ->
	case _0 of
	  <[{'mod',[]}|T]> when 'true' ->
	      %% Line 1524
	      apply 'behave'/1
		  (T)
	  %% Line 1525
	  <[{'start_phases','undefined'}|T]> when 'true' ->
	      %% Line 1526
	      apply 'behave'/1
		  (T)
	  %% Line 1527
	  <[H|T]> when 'true' ->
	      let <_1> =
		  apply %% Line 1528
			'behave'/1
		      (%% Line 1528
		       T)
	      in  %% Line 1528
		  [H|_1]
	  %% Line 1529
	  <[]> when 'true' ->
	      %% Line 1530
	      []
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'behave',1}}] )
	    -| ['compiler_generated'] )
	end
'mandatory_modules'/0 =
    %% Line 1532
    fun () ->
	%% Line 1533
	['error_handler'|['application'|['application_controller'|['application_master'|['code'|['code_server'|['erl_eval'|['erl_lint'|['erl_parse'|['error_logger'|['ets'|['file'|['filename'|['file_server'|['file_io_server'|['gen'|['gen_event'|['gen_server'|['heart'|['kernel'|['logger'|['logger_filters'|['logger_server'|['logger_backend'|['logger_config'|['logger_simple_h'|['lists'|['proc_lib'|['supervisor']]]]]]]]]]]]]]]]]]]]]]]]]]]]]
'preloaded'/0 =
    %% Line 1573
    fun () ->
	%% Line 1579
	['atomics'|['counters'|['erl_init'|['erl_prim_loader'|['erl_tracer'|['erlang'|['erts_code_purger'|['erts_dirty_process_signal_handler'|['erts_internal'|['erts_literal_area_collector'|['init'|['persistent_term'|['prim_buffer'|['prim_eval'|['prim_file'|['prim_inet'|['prim_zip'|['zlib']]]]]]]]]]]]]]]]]]
'kernel_processes'/0 =
    %% Line 1587
    fun () ->
	let <_7> =
	    fun (_5) ->
		let <_2> =
		    fun (_0) ->
			%% Line 1592
			case _0 of
			  <{{'kernel',_8},_X_App}> when 'true' ->
			      'true'
			  %% Line 1593
			  <_9> when 'true' ->
			      'false'
			end
		in  %% Line 1592
		    case call 'lists':'filter'
			     (_2, _5) of
		      <[{_10,App}|[]]> when 'true' ->
			  let <_4> =
			      apply %% Line 1596
				    'pack_app'/1
				  (%% Line 1596
				   App)
			  in  %% Line 1596
			      [_4|[]]
		      ( <_3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_3})
			-| ['compiler_generated'] )
		    end
	in  %% Line 1588
	    [{'heart','heart','start',[]}|%% Line 1589
					  [{'logger','logger_server','start_link',[]}|%% Line 1590
										      [{'application_controller','application_controller','start',_7}|%% Line 1598
																		      []]]]
'create_kernel_procs'/1 =
    %% Line 1603
    fun (_0) ->
	let <_5> =
	    fun (_3) ->
		%% Line 1604
		case _3 of
		  <{Name,Mod,Func,Args}>
		      when call 'erlang':'is_function'
			    (Args) ->
		      let <_2> =
			  apply %% Line 1605
				Args
			      (_0)
		      in  %% Line 1605
			  {'kernelProcess',Name,{Mod,Func,_2}}
		  %% Line 1606
		  <{Name,Mod,Func,Args}> when 'true' ->
		      %% Line 1607
		      {'kernelProcess',Name,{Mod,Func,Args}}
		  ( <_4> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_4})
			  -| [{'function_name',{'-create_kernel_procs/1-fun-0-',1}}] )
		    -| ['compiler_generated'] )
		end
	in  let <_1> =
		apply %% Line 1609
		      'kernel_processes'/0
		    ()
	    in  let <_6> =
		    call %% Line 1604
			 'lists':%% Line 1604
				 'map'
			(_5, _1)
		in  %% Line 1609
		    call 'erlang':'++'
			(_6, %% Line 1610
			     [{'progress','init_kernel_started'}])
'mk_tar'/5 =
    %% Line 1636
    fun (_0,_1,_2,_3,_4) ->
	let <_8> =
	    case %% Line 1637
		 apply 'get_outdir'/1
		     (_3) of
	      %% Line 1638
	      <[]> when 'true' ->
		  %% Line 1639
		  call 'erlang':'++'
		      (_0, [46|[116|[97|[114|[46|[103|[122]]]]]]])
	      %% Line 1640
	      <OutDir> when 'true' ->
		  let <_5> =
		      call %% Line 1641
			   'filename':%% Line 1641
				      'basename'
			  (_0)
		  in  let <_6> =
			  call %% Line 1641
			       'filename':%% Line 1641
					  'join'
			      (%% Line 1641
			       OutDir, _5)
		      in  %% Line 1642
			  call 'erlang':'++'
			      (_6, [46|[116|[97|[114|[46|[103|[122]]]]]]])
	    end
	in  let <Tar> =
		apply %% Line 1644
		      'open_main_tar'/1
		    (_8)
	    in  let <_11> =
		    catch
			%% Line 1645
			apply 'mk_tar'/6
			    (Tar, _0, _1, _2, _3, _4)
		in  %% Line 1645
		    case _11 of
		      %% Line 1646
		      <{'error',Error}> when 'true' ->
			  do  %% Line 1647
			      apply 'del_tar'/2
				  (Tar, _8)
			      %% Line 1648
			      {'error','systools_make',Error}
		      %% Line 1649
		      <{'EXIT',Reason}> when 'true' ->
			  do  %% Line 1650
			      apply 'del_tar'/2
				  (Tar, _8)
			      %% Line 1651
			      {'error','systools_make',Reason}
		      %% Line 1652
		      <_21> when 'true' ->
			  %% Line 1653
			  case call 'erl_tar':'close'
				   (Tar) of
			    %% Line 1654
			    <'ok'> when 'true' ->
				'ok'
			    %% Line 1655
			    <{'error',Reason}> when 'true' ->
				{'error','systools_make',{'close',_8,Reason}}
			    ( <_14> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_14})
			      -| ['compiler_generated'] )
			  end
		    end
'open_main_tar'/1 =
    %% Line 1659
    fun (_0) ->
	let <_1> =
	    catch
		%% Line 1660
		apply 'open_tar'/1
		    (_0)
	in  %% Line 1660
	    case _1 of
	      %% Line 1661
	      <{'error',Error}> when 'true' ->
		  %% Line 1662
		  call 'erlang':'throw'
		      ({'error','systools_make',Error})
	      %% Line 1663
	      <Tar> when 'true' ->
		  %% Line 1664
		  Tar
	    end
'mk_tar'/6 =
    %% Line 1667
    fun (_0,_1,_2,_3,_4,_5) ->
	let <Variables> =
	    apply %% Line 1668
		  'get_variables'/1
		(_4)
	in  do  %% Line 1669
		apply 'add_applications'/5
		    (_3, _0, Variables, _4, 'false')
		do  %% Line 1670
		    apply 'add_variable_tars'/4
			(Variables, _3, _0, _4)
		    do  %% Line 1671
			apply 'add_system_files'/4
			    (_0, _1, _2, _5)
			%% Line 1672
			apply 'add_erts_bin'/3
			    (_0, _2, _4)
'add_applications'/5 =
    %% Line 1674
    fun (_0,_1,_2,_3,_4) ->
	let <_12> =
	    fun (_9,_8) ->
		%% Line 1675
		case <_9,_8> of
		  <{{Name,Vsn},App},Errs> when 'true' ->
		      let <_6> =
			  catch
			      let <_5> =
				  apply %% Line 1676
					'to_list'/1
				      (%% Line 1676
				       Name)
			      in  %% Line 1676
				  apply 'add_appl'/7
				      (_5, Vsn, App, _1, _2, _3, _4)
		      in  %% Line 1676
			  case _6 of
			    %% Line 1678
			    <'ok'> when 'true' ->
				%% Line 1679
				Errs
			    %% Line 1680
			    <{'error',What}> when 'true' ->
				%% Line 1681
				[{'error_add_appl',{Name,What}}|Errs]
			    ( <_7> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_7})
			      -| ['compiler_generated'] )
			  end
		  ( <_11,_10> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_11,_10})
			  -| [{'function_name',{'-add_applications/5-fun-0-',2}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 1684
	    case call 'lists':'foldl'
		     (_12, [], _0) of
	      %% Line 1685
	      <[]> when 'true' ->
		  %% Line 1686
		  'ok'
	      %% Line 1687
	      <Errors> when 'true' ->
		  %% Line 1688
		  call 'erlang':'throw'
		      ({'error',Errors})
	    end
'add_variable_tars'/4 =
    %% Line 1695
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[Variable|Variables],Appls,Tar,Flags> when 'true' ->
	      do  %% Line 1696
		  apply 'add_variable_tar'/4
		      (Variable, Appls, Tar, Flags)
		  %% Line 1697
		  apply 'add_variable_tars'/4
		      (Variables, Appls, Tar, Flags)
	  %% Line 1698
	  <[],_8,_9,_10> when 'true' ->
	      %% Line 1699
	      'ok'
	  ( <_7,_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5,_4})
		  -| [{'function_name',{'add_variable_tars',4}}] )
	    -| ['compiler_generated'] )
	end
'add_variable_tar'/4 =
    %% Line 1701
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <_@r0 = {Variable,P},Appls,Tar,Flags> when 'true' ->
	      %% Line 1702
	      case apply 'var_tar_flag'/1
		       (Flags) of
		%% Line 1703
		<'omit'> when 'true' ->
		    %% Line 1704
		    'ok'
		%% Line 1705
		<Flag> when 'true' ->
		    let <TarName> =
			call %% Line 1706
			     'erlang':%% Line 1706
				      '++'
			    (%% Line 1706
			     Variable, %% Line 1706
				       [46|[116|[97|[114|[46|[103|[122]]]]]]])
		    in  let <VarTar> =
			    apply %% Line 1707
				  'open_tar'/1
				(%% Line 1707
				 TarName)
			in  let <_6> =
				catch
				    %% Line 1708
				    apply 'add_applications'/5
					(Appls, VarTar, [_@r0|[]], %% Line 1709
								   Flags, %% Line 1709
									  Variable)
			    in  %% Line 1708
				case _6 of
				  %% Line 1710
				  <'ok'>
				      when call 'erlang':'=:='
					    (Flag,
					     'include') ->
				      do  %% Line 1711
					  apply 'close_tar'/2
					      (VarTar, TarName)
					  do  %% Line 1712
					      apply 'add_to_tar'/3
						  (Tar, TarName, TarName)
					      %% Line 1713
					      apply 'del_file'/1
						  (TarName)
				  %% Line 1714
				  <'ok'>
				      when call 'erlang':'=:='
					    (Flag,
					     'ownfile') ->
				      %% Line 1715
				      apply 'close_tar'/2
					  (VarTar, TarName)
				  %% Line 1716
				  <Error> when 'true' ->
				      do  %% Line 1717
					  apply 'del_tar'/2
					      (VarTar, TarName)
					  %% Line 1718
					  call 'erlang':'throw'
					      (Error)
				end
	      end
	  ( <_13,_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12,_11,_10})
		  -| [{'function_name',{'add_variable_tar',4}}] )
	    -| ['compiler_generated'] )
	end
'var_tar_flag'/1 =
    %% Line 1722
    fun (_0) ->
	%% Line 1723
	case apply 'get_flag'/2
		 ('var_tar', _0) of
	  %% Line 1724
	  <{'var_tar',Flag}> when 'true' ->
	      %% Line 1725
	      case call 'lists':'member'
		       (Flag, ['include'|['ownfile'|['omit']]]) of
		%% Line 1726
		<'true'> when 'true' ->
		    Flag
		%% Line 1727
		<_4> when 'true' ->
		    'include'
	      end
	  %% Line 1729
	  <_5> when 'true' ->
	      %% Line 1730
	      'include'
	end
'add_system_files'/4 =
    %% Line 1738
    fun (_0,_1,_2,_3) ->
	%% Line 1739
	( case _2 of
	    ( <( {'release',_32,_rec35,_33,_34,_35}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <RelName0> =
		      call %% Line 1740
			   'filename':%% Line 1740
				      'basename'
			  (_1)
		  in  let <RelVsnDir> =
			  call %% Line 1742
			       'filename':%% Line 1742
					  'join'
			      (%% Line 1742
			       [114|[101|[108|[101|[97|[115|[101|[115]]]]]]]], _rec35)
		      in  let <_11> =
			      call %% Line 1750
				   'erlang':%% Line 1750
					    '++'
				  (_1, %% Line 1750
				       [46|[114|[101|[108]]]])
			  in  let <_9> =
				  call %% Line 1751
				       'erlang':%% Line 1751
						'++'
				      (%% Line 1751
				       RelName0, %% Line 1751
						 [46|[114|[101|[108]]]])
			      in  let <_10> =
				      call %% Line 1751
					   'filename':%% Line 1751
						      'join'
					  (%% Line 1751
					   [114|[101|[108|[101|[97|[115|[101|[115]]]]]]]], _9)
				  in  do  %% Line 1750
					  apply 'add_to_tar'/3
					      (_0, _11, _10)
					  let <_14> =
					      call %% Line 1752
						   'erlang':%% Line 1752
							    '++'
						  (_1, %% Line 1752
						       [46|[114|[101|[108]]]])
					  in  let <_12> =
						  call %% Line 1753
						       'erlang':%% Line 1753
								'++'
						      (%% Line 1753
						       RelName0, %% Line 1753
								 [46|[114|[101|[108]]]])
					      in  let <_13> =
						      call %% Line 1753
							   'filename':%% Line 1753
								      'join'
							  (%% Line 1753
							   RelVsnDir, _12)
						  in  do  %% Line 1752
							  apply 'add_to_tar'/3
							      (_0, _14, _13)
							  let <_16> =
							      case %% Line 1763
								   call 'filename':'dirname'
								       (_1) of
								%% Line 1764
								<[46]> when 'true' ->
								    %% Line 1765
								    [[46]|_3]
								%% Line 1766
								<RelDir> when 'true' ->
								    %% Line 1767
								    [RelDir|[[46]|_3]]
							      end
							  in  let <_18> =
								  call %% Line 1770
								       'erlang':%% Line 1770
										'++'
								      (%% Line 1770
								       RelName0, %% Line 1770
										 [46|[98|[111|[111|[116]]]]])
							      in  do  %% Line 1770
								      case apply 'lookup_file'/2
									       (_18, _16) of
									%% Line 1771
									<'false'> when 'true' ->
									    let <_19> =
										call %% Line 1772
										     'erlang':%% Line 1772
											      '++'
										    (%% Line 1772
										     RelName0, %% Line 1772
											       [46|[98|[111|[111|[116]]]]])
									    in  %% Line 1772
										call 'erlang':'throw'
										    ({'error',{'tar_error',{'add',_19,'enoent'}}})
									%% Line 1773
									<Boot> when 'true' ->
									    let <_20> =
										call %% Line 1774
										     'filename':%% Line 1774
												'join'
										    (%% Line 1774
										     RelVsnDir, %% Line 1774
												[115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]])
									    in  %% Line 1774
										apply 'add_to_tar'/3
										    (_0, Boot, _20)
								      end
								      do  %% Line 1777
									  case apply 'lookup_file'/2
										   ([114|[101|[108|[117|[112]]]]], _16) of
									    %% Line 1778
									    <'false'> when 'true' ->
										'ok'
									    %% Line 1780
									    <Relup> when 'true' ->
										do  %% Line 1781
										    apply 'check_relup'/1
											(Relup)
										    let <_22> =
											call %% Line 1782
											     'filename':%% Line 1782
													'join'
											    (%% Line 1782
											     RelVsnDir, %% Line 1782
													[114|[101|[108|[117|[112]]]]])
										    in  %% Line 1782
											apply 'add_to_tar'/3
											    (_0, Relup, _22)
									  end
									  do  %% Line 1785
									      case apply 'lookup_file'/2
										       ([115|[121|[115|[46|[99|[111|[110|[102|[105|[103|[46|[115|[114|[99]]]]]]]]]]]]]], _16) of
										%% Line 1786
										<'false'> when 'true' ->
										    %% Line 1787
										    case apply 'lookup_file'/2
											     ([115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]], _16) of
										      %% Line 1788
										      <'false'> when 'true' ->
											  'ok'
										      %% Line 1790
										      <Sys> when 'true' ->
											  do  %% Line 1791
											      apply 'check_sys_config'/1
												  (Sys)
											      let <_24> =
												  call %% Line 1792
												       'filename':%% Line 1792
														  'join'
												      (%% Line 1792
												       RelVsnDir, %% Line 1792
														  [115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]])
											      in  %% Line 1792
												  apply 'add_to_tar'/3
												      (_0, Sys, _24)
										    end
										%% Line 1794
										<SysSrc> when 'true' ->
										    let <_26> =
											call %% Line 1795
											     'filename':%% Line 1795
													'join'
											    (%% Line 1795
											     RelVsnDir, %% Line 1795
													[115|[121|[115|[46|[99|[111|[110|[102|[105|[103|[46|[115|[114|[99]]]]]]]]]]]]]])
										    in  %% Line 1795
											apply 'add_to_tar'/3
											    (_0, SysSrc, _26)
									      end
									      %% Line 1797
									      'ok'
	      -| ['compiler_generated'] )
	    ( <_36> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','release'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'lookup_file'/2 =
    %% Line 1799
    fun (_0,_1) ->
	case <_0,_1> of
	  <Name,[Dir|Path]> when 'true' ->
	      let <File> =
		  call %% Line 1800
		       'filename':%% Line 1800
				  'join'
		      (%% Line 1800
		       Dir, %% Line 1800
			    Name)
	      in  %% Line 1801
		  case call 'filelib':'is_file'
			   (File) of
		    %% Line 1802
		    <'true'> when 'true' ->
			%% Line 1803
			File
		    %% Line 1804
		    <'false'> when 'true' ->
			%% Line 1805
			apply 'lookup_file'/2
			    (Name, Path)
		    ( <_3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1807
	  <_X_Name,[]> when 'true' ->
	      %% Line 1808
	      'false'
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'lookup_file',2}}] )
	    -| ['compiler_generated'] )
	end
'check_relup'/1 =
    %% Line 1811
    fun (_0) ->
	%% Line 1812
	case call 'file':'consult'
		 (_0) of
	  %% Line 1813
	  <{'ok',[{Vsn,UpFrom,DownTo}|[]]}>
	      when try
		    let <_1> =
			call 'erlang':'is_list'
			    (Vsn)
		    in  let <_2> =
			    call 'erlang':'hd'
				(Vsn)
			in  let <_3> =
				call 'erlang':'is_integer'
				    (_2)
			    in  let <_4> =
				    call %% Line 1814
					 'erlang':%% Line 1814
						  'is_list'
					(%% Line 1814
					 UpFrom)
				in  let <_5> =
					call %% Line 1814
					     'erlang':%% Line 1814
						      'is_list'
					    (%% Line 1814
					     DownTo)
				    in  let <_6> =
					    call 'erlang':'and'
						(_4, _5)
					in  let <_7> =
						call 'erlang':'and'
						    (_3, _6)
					    in  call 'erlang':'and'
						    (_1, _7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1815
	      'ok'
	  %% Line 1816
	  <{'ok',_10}> when 'true' ->
	      %% Line 1817
	      call 'erlang':'throw'
		  ({'error',{'tar_error',{'add',[114|[101|[108|[117|[112]]]]],['invalid_format']}}})
	  %% Line 1818
	  <Other> when 'true' ->
	      %% Line 1819
	      call 'erlang':'throw'
		  ({'error',{'tar_error',{'add',[114|[101|[108|[117|[112]]]]],[Other|[]]}}})
	end
'check_sys_config'/1 =
    %% Line 1823
    fun (_0) ->
	%% Line 1824
	case call 'file':'consult'
		 (_0) of
	  %% Line 1825
	  <{'ok',[SysConfig|[]]}> when 'true' ->
	      let <_8> =
		  fun (_6) ->
		      %% Line 1826
		      case _6 of
			<{App,KeyVals}>
			    when let <_1> =
				  call 'erlang':'is_atom'
				      (App)
			      in  let <_2> =
				      call %% Line 1827
					   'erlang':%% Line 1827
						    'is_list'
					  (%% Line 1827
					   KeyVals)
				  in  call 'erlang':'and'
					  (_1, _2) ->
			    %% Line 1828
			    'true'
			%% Line 1829
			<OtherConfig>
			    when try
				  let <_3> =
				      call 'erlang':'is_list'
					  (_6)
				  in  let <_4> =
					  call %% Line 1830
					       'erlang':%% Line 1830
							'hd'
					      (_6)
				      in  let <_5> =
					      call %% Line 1830
						   'erlang':%% Line 1830
							    'is_integer'
						  (_4)
					  in  call 'erlang':'and'
						  (_3, _5)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    %% Line 1831
			    'true'
			%% Line 1832
			<_12> when 'true' ->
			    %% Line 1833
			    'false'
		      end
	      in  %% Line 1826
		  case call 'lists':'all'
			   (_8, %% Line 1835
				SysConfig) of
		    %% Line 1836
		    <'true'> when 'true' ->
			%% Line 1837
			'ok'
		    %% Line 1838
		    <'false'> when 'true' ->
			%% Line 1839
			call 'erlang':'throw'
			    ({'error',{'tar_error',{'add',[115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]],['invalid_format']}}})
		    ( <_9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_9})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1842
	  <{'ok',_13}> when 'true' ->
	      %% Line 1843
	      call 'erlang':'throw'
		  ({'error',{'tar_error',{'add',[115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]],['invalid_format']}}})
	  %% Line 1844
	  <Other> when 'true' ->
	      %% Line 1845
	      call 'erlang':'throw'
		  ({'error',{'tar_error',{'add',[115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]],[Other|[]]}}})
	end
'add_appl'/7 =
    %% Line 1854
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	%% Line 1855
	( case _2 of
	    ( <( {'application',_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_rec36}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 1856
		  case apply 'add_to'/5
			   (_rec36, _0, _1, _4, _6) of
		    %% Line 1857
		    <'false'> when 'true' ->
			%% Line 1858
			'ok'
		    %% Line 1859
		    <{'ok',ToDir}> when 'true' ->
			let <ADir> =
			    apply %% Line 1860
				  'appDir'/1
				(_rec36)
			in  do  %% Line 1861
				apply 'add_priv'/3
				    (ADir, ToDir, _3)
				do  %% Line 1862
				    case apply 'get_flag'/2
					     ('dirs', _5) of
				      %% Line 1863
				      <{'dirs',Dirs}> when 'true' ->
					  %% Line 1864
					  apply 'add_dirs'/4
					      (ADir, Dirs, ToDir, _3)
				      %% Line 1865
				      <_48> when 'true' ->
					  'ok'
				    end
				    let <BinDir> =
					call %% Line 1868
					     'filename':%% Line 1868
							'join'
					    (%% Line 1868
					     ToDir, %% Line 1868
						    [101|[98|[105|[110]]]])
				    in  let <_15> =
					    call %% Line 1870
						 'erlang':%% Line 1870
							  '++'
						(_0, %% Line 1870
						     [46|[97|[112|[112]]]])
					in  let <_16> =
						call %% Line 1870
						     'filename':%% Line 1870
								'join'
						    (_rec36, _15)
					    in  let <_13> =
						    call %% Line 1871
							 'erlang':%% Line 1871
								  '++'
							(_0, %% Line 1871
							     [46|[97|[112|[112]]]])
						in  let <_14> =
							call %% Line 1871
							     'filename':%% Line 1871
									'join'
							    (%% Line 1871
							     BinDir, _13)
						    in  do  %% Line 1869
							    apply 'add_to_tar'/3
								(_3, _16, _14)
							    let <_23> =
								fun (_21) ->
								    %% Line 1872
								    apply 'to_list'/1
									(_21)
							    in  %% Line 1873
								( case _2 of
								    ( <( {'application',_49,_50,_51,_52,_53,_rec37,_54,_55,_56,_57,_58,_59,_60,_61,_62}
									 -| ['compiler_generated'] )> when 'true' ->
									  let <_24> =
									      call 'lists':'map'
										  (_23, _rec37)
									  in  let <_17> =
										  apply %% Line 1877
											'machine'/1
										      (_5)
									      in  let <_18> =
										      apply %% Line 1877
											    'objfile_extension'/1
											  (_17)
										  in  apply 'add_modules'/5
											  (_24, _3, _rec36, %% Line 1876
													    BinDir, _18)
								      -| ['compiler_generated'] )
								    ( <_63> when 'true' ->
									  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'error'
														 -| ['compiler_generated'] )
										(( {'badrecord','application'}
										   -| ['compiler_generated'] ))
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								  end
								  -| ['compiler_generated'] )
		    ( <_25> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_25})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_47> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','application'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_to'/5 =
    %% Line 1885
    fun (_0,_1,_2,_3,_4) ->
	%% Line 1886
	case apply 'var_dir'/4
		 (_0, _1, _2, _3) of
	  %% Line 1887
	  <{'ok',_18,RestPath}>
	      when call 'erlang':'=:='
		    (_18,
		     _4) ->
	      let <_5> =
		  [45|_2]
	      in  let <_6> =
		      call %% Line 1888
			   'erlang':%% Line 1888
				    '++'
			  (_1, _5)
		  in  let <_7> =
			  call %% Line 1888
			       'erlang':%% Line 1888
					'++'
			      (%% Line 1888
			       RestPath, %% Line 1888
					 [_6|[]])
		      in  let <_8> =
			      call %% Line 1888
				   'filename':%% Line 1888
					      'join'
				  (_7)
			  in  %% Line 1888
			      {'ok',_8}
	  %% Line 1889
	  <{'ok',_19,_20}> when 'true' ->
	      %% Line 1890
	      'false'
	  %% Line 1891
	  <_21>
	      when call 'erlang':'=:='
		    (_4,
		     'false') ->
	      let <_9> =
		  [45|_2]
	      in  let <_10> =
		      call %% Line 1892
			   'erlang':%% Line 1892
				    '++'
			  (_1, _9)
		  in  let <_11> =
			  call %% Line 1892
			       'filename':%% Line 1892
					  'join'
			      (%% Line 1892
			       [108|[105|[98]]], _10)
		      in  %% Line 1892
			  {'ok',_11}
	  %% Line 1893
	  <_22> when 'true' ->
	      %% Line 1894
	      'false'
	end
'var_dir'/4 =
    %% Line 1897
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Dir,Name,Vsn,[{Var,Path}|Variables]> when 'true' ->
	      %% Line 1898
	      case call 'lists':'prefix'
		       (Path, Dir) of
		%% Line 1899
		<'true'> when 'true' ->
		    let <D0> =
			apply %% Line 1900
			      'strip_prefix'/2
			    (%% Line 1900
			     Path, %% Line 1900
				   Dir)
		    in  %% Line 1901
			case apply 'strip_name_ebin'/3
				 (D0, Name, Vsn) of
			  %% Line 1902
			  <{'ok',D}> when 'true' ->
			      %% Line 1903
			      {'ok',Var,D}
			  %% Line 1904
			  <_11> when 'true' ->
			      %% Line 1905
			      'false'
			end
		%% Line 1907
		<_12> when 'true' ->
		    %% Line 1908
		    apply 'var_dir'/4
			(Dir, Name, Vsn, Variables)
	      end
	  %% Line 1910
	  <_X_Dir,_13,_14,[]> when 'true' ->
	      %% Line 1911
	      'false'
	  ( <_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8,_7})
		  -| [{'function_name',{'var_dir',4}}] )
	    -| ['compiler_generated'] )
	end
'appDir'/1 =
    %% Line 1913
    fun (_0) ->
	%% Line 1914
	case call 'filename':'basename'
		 (_0) of
	  %% Line 1915
	  <[101|[98|[105|[110]]]]> when 'true' ->
	      call 'filename':'dirname'
		  (_0)
	  %% Line 1916
	  <_3> when 'true' ->
	      _0
	end
'add_modules'/5 =
    %% Line 1919
    fun (_0,_1,_2,_3,_4) ->
	let <_11> =
	    fun (_9) ->
		let <_7> =
		    call %% Line 1922
			 'erlang':%% Line 1922
				  '++'
			(%% Line 1920
			 _9, _4)
		in  let <_8> =
			call %% Line 1922
			     'filename':%% Line 1922
					'join'
			    (_2, _7)
		    in  let <_5> =
			    call %% Line 1923
				 'erlang':%% Line 1923
					  '++'
				(%% Line 1920
				 _9, _4)
			in  let <_6> =
				call %% Line 1923
				     'filename':%% Line 1923
						'join'
				    (_3, _5)
			    in  %% Line 1921
				apply 'add_to_tar'/3
				    (_1, _8, _6)
	in  %% Line 1920
	    call 'lists':'foreach'
		(_11, _0)
'add_dirs'/4 =
    %% Line 1930
    fun (_0,_1,_2,_3) ->
	let <_7> =
	    fun (_5) ->
		catch
		    let <_4> =
			apply %% Line 1931
			      'to_list'/1
			    (%% Line 1931
			     _5)
		    in  %% Line 1931
			apply 'add_dir'/4
			    (_0, _4, _2, _3)
	in  %% Line 1931
	    call 'lists':'foreach'
		(_7, _1)
'add_dir'/4 =
    %% Line 1934
    fun (_0,_1,_2,_3) ->
	let <FromD> =
	    call %% Line 1935
		 'filename':%% Line 1935
			    'join'
		(_0, _1)
	in  %% Line 1936
	    case apply 'dirp'/1
		     (FromD) of
	      %% Line 1937
	      <'true'> when 'true' ->
		  let <_5> =
		      call %% Line 1938
			   'filename':%% Line 1938
				      'join'
			  (_2, _1)
		  in  %% Line 1938
		      apply 'add_to_tar'/3
			  (_3, FromD, _5)
	      %% Line 1939
	      <_11> when 'true' ->
		  %% Line 1940
		  'ok'
	    end
'add_priv'/3 =
    %% Line 1946
    fun (_0,_1,_2) ->
	let <Priv> =
	    call %% Line 1947
		 'filename':%% Line 1947
			    'join'
		(_0, %% Line 1947
		     [112|[114|[105|[118]]]])
	in  %% Line 1948
	    case apply 'dirp'/1
		     (Priv) of
	      %% Line 1949
	      <'true'> when 'true' ->
		  let <_4> =
		      call %% Line 1950
			   'filename':%% Line 1950
				      'join'
			  (_1, %% Line 1950
			       [112|[114|[105|[118]]]])
		  in  %% Line 1950
		      apply 'add_to_tar'/3
			  (_2, Priv, _4)
	      %% Line 1951
	      <_9> when 'true' ->
		  %% Line 1952
		  'ok'
	    end
'add_erts_bin'/3 =
    %% Line 1955
    fun (_0,_1,_2) ->
	%% Line 1956
	case apply 'get_flag'/2
		 ('erts', _2) of
	  %% Line 1957
	  <{'erts',ErtsDir}> when 'true' ->
	      %% Line 1958
	      ( case _1 of
		  ( <( {'release',_15,_16,_rec38,_17,_18}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_6> =
			    apply %% Line 1959
				  'to_list'/1
				(%% Line 1959
				 ErtsDir)
			in  let <_7> =
				call %% Line 1960
				     'erlang':%% Line 1960
					      '++'
				    (%% Line 1960
				     [101|[114|[116|[115|[45]]]]], _rec38)
			    in  let <FromDir> =
				    call %% Line 1959
					 'filename':%% Line 1959
						    'join'
					(%% Line 1959
					 [_6|%% Line 1960
					     [_7|[[98|[105|[110]]]]]])
				in  do  %% Line 1961
					apply 'dirp'/1
					    (FromDir)
					let <_9> =
					    call %% Line 1962
						 'erlang':%% Line 1962
							  '++'
						(%% Line 1962
						 [101|[114|[116|[115|[45]]]]], _rec38)
					in  let <ToDir> =
						call %% Line 1962
						     'filename':%% Line 1962
								'join'
						    (_9, %% Line 1962
							 [98|[105|[110]]])
					    in  %% Line 1963
						apply 'add_to_tar'/3
						    (_0, FromDir, ToDir)
		    -| ['compiler_generated'] )
		  ( <_19> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','release'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1964
	  <_20> when 'true' ->
	      %% Line 1965
	      'ok'
	end
'open_tar'/1 =
    %% Line 1971
    fun (_0) ->
	%% Line 1972
	case call 'erl_tar':'open'
		 (_0, ['write'|['compressed']]) of
	  %% Line 1973
	  <{'ok',Tar}> when 'true' ->
	      %% Line 1974
	      Tar
	  %% Line 1975
	  <{'error',Error}> when 'true' ->
	      %% Line 1976
	      call 'erlang':'throw'
		  ({'error',{'tar_error',{'open',_0,Error}}})
	  ( <_1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_1})
	    -| ['compiler_generated'] )
	end
'close_tar'/2 =
    %% Line 1979
    fun (_0,_1) ->
	%% Line 1980
	case call 'erl_tar':'close'
		 (_0) of
	  %% Line 1981
	  <'ok'> when 'true' ->
	      'ok'
	  %% Line 1982
	  <{'error',Reason}> when 'true' ->
	      call 'erlang':'throw'
		  ({'error',{'close',_1,Reason}})
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_2})
	    -| ['compiler_generated'] )
	end
'del_tar'/2 =
    %% Line 1985
    fun (_0,_1) ->
	do  %% Line 1986
	    ( call ( 'erl_tar'
		     -| ['result_not_wanted'] ):( 'close'
						  -| ['result_not_wanted'] )
		  (_0)
	      -| ['result_not_wanted'] )
	    %% Line 1987
	    call 'file':'delete'
		(_1)
'add_to_tar'/3 =
    %% Line 1989
    fun (_0,_1,_2) ->
	let <_3> =
	    catch
		%% Line 1990
		call 'erl_tar':'add'
		    (_0, _1, _2, ['compressed'|['dereference']])
	in  %% Line 1990
	    case _3 of
	      %% Line 1991
	      <'ok'> when 'true' ->
		  'ok'
	      %% Line 1992
	      <{'EXIT',Reason}> when 'true' ->
		  %% Line 1993
		  call 'erlang':'throw'
		      ({'error',{'tar_error',{'add',_1,Reason}}})
	      %% Line 1994
	      <{'error',Error}> when 'true' ->
		  %% Line 1995
		  call 'erlang':'throw'
		      ({'error',{'tar_error',{'add',_1,Error}}})
	      ( <_4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_4})
		-| ['compiler_generated'] )
	    end
'make_set'/1 =
    %% Line 2002
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      []
	  %% Line 2003
	  <[[]|T]> when 'true' ->
	      %% Line 2004
	      apply 'make_set'/1
		  (T)
	  %% Line 2005
	  <[H|T]> when 'true' ->
	      let <_6> =
		  letrec
		      'lc$^0'/1 =
			  %% Line 2006
			  fun (_4) ->
			      case _4 of
				<[Y|_2]>
				    when %% Line 2007
				      call 'erlang':'=/='
					  (Y,
					   H) ->
				    let <_5> =
					apply 'lc$^0'/1
					    (_2)
				    in  ( [Y|_5]
					  -| ['compiler_generated'] )
				( <[Y|_2]> when 'true' ->
				      apply 'lc$^0'/1
					  (_2)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_8> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_8})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  let <_3> =
			  apply %% Line 2006
				'make_set'/1
			      (%% Line 2006
			       T)
		      in  %% Line 2006
			  apply 'lc$^0'/1
			      (_3)
	      in  %% Line 2006
		  [H|_6]
	  ( <_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7})
		  -| [{'function_name',{'make_set',1}}] )
	    -| ['compiler_generated'] )
	end
'to_list'/1 =
    %% Line 2009
    fun (_0) ->
	case _0 of
	  <A>
	      when call 'erlang':'is_atom'
		    (_0) ->
	      call 'erlang':'atom_to_list'
		  (A)
	  %% Line 2010
	  <L> when 'true' ->
	      L
	end
'mk_path'/1 =
    %% Line 2012
    fun (_0) ->
	let <_3> =
	    fun (_1) ->
		%% Line 2013
		case _1 of
		  <Dir>
		      when call 'erlang':'is_atom'
			    (_1) ->
		      call 'erlang':'atom_to_list'
			  (Dir)
		  %% Line 2014
		  <Dir> when 'true' ->
		      Dir
		end
	in  let <Path1> =
		call %% Line 2013
		     'lists':%% Line 2013
			     'map'
		    (_3, _0)
	    in  %% Line 2016
		call 'systools_lib':'get_path'
		    (Path1)
'duplicates'/1 =
    %% Line 2022
    fun (_0) ->
	let <_1> =
	    call 'lists':'keysort'
		(1, _0)
	in  apply 'duplicates'/2
		(_1, [])
'duplicates'/2 =
    %% Line 2024
    fun (_0,_1) ->
	case <_0,_1> of
	  <[H1|_@r0 = [H2|T]],L> when 'true' ->
	      let <_3> =
		  call %% Line 2025
		       'erlang':%% Line 2025
				'element'
		      (%% Line 2025
		       1, %% Line 2025
			  H1)
	      in  let <_2> =
		      call %% Line 2025
			   'erlang':%% Line 2025
				    'element'
			  (%% Line 2025
			   1, %% Line 2025
			      H2)
		  in  %% Line 2025
		      case <_3,_2> of
			%% Line 2026
			<X,_7>
			    when call 'erlang':'=:='
				  (_7,
				   X) ->
			    apply 'duplicates'/2
				(_@r0, [{H1,H2}|L])
			%% Line 2027
			<( _10
			   -| ['compiler_generated'] ),( _11
							 -| ['compiler_generated'] )> when 'true' ->
			    apply 'duplicates'/2
				(_@r0, L)
		      end
	  %% Line 2029
	  <_9,L> when 'true' ->
	      L
	end
'read_file'/2 =
    %% Line 2035
    fun (_0,_1) ->
	%% Line 2036
	case call 'file':'path_open'
		 (_1, _0, ['read']) of
	  %% Line 2037
	  <{'ok',Stream,FullName}> when 'true' ->
	      let <_3> =
		  case %% Line 2038
		       call 'systools_lib':'read_term_from_stream'
			   (Stream, _0) of
		    %% Line 2039
		    <{'ok',Term}> when 'true' ->
			%% Line 2040
			{'ok',Term,FullName}
		    %% Line 2041
		    <Other> when 'true' ->
			%% Line 2042
			Other
		  end
	      in  %% Line 2044
		  case call 'file':'close'
			   (Stream) of
		    %% Line 2045
		    <'ok'> when 'true' ->
			_3
		    %% Line 2046
		    <{'error',Error}> when 'true' ->
			{'error',{'close',_0,Error}}
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2048
	  <_X_Other> when 'true' ->
	      %% Line 2049
	      {'error',{'not_found',_0}}
	end
'del_file'/1 =
    %% Line 2052
    fun (_0) ->
	%% Line 2053
	case call 'file':'delete'
		 (_0) of
	  %% Line 2054
	  <'ok'> when 'true' ->
	      'ok'
	  %% Line 2055
	  <{'error',Error}> when 'true' ->
	      %% Line 2056
	      call 'erlang':'throw'
		  ({'error',{'delete',_0,Error}})
	  ( <_1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_1})
	    -| ['compiler_generated'] )
	end
'dirp'/1 =
    %% Line 2059
    fun (_0) ->
	%% Line 2060
	case call 'file':'read_file_info'
		 (_0) of
	  %% Line 2061
	  <{'ok',FileInfo}> when 'true' ->
	      ( case FileInfo of
		  ( <( {'file_info',_5,_rec39,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16}
		       -| ['compiler_generated'] )> when 'true' ->
			call 'erlang':'=:='
			    (_rec39, 'directory')
		    -| ['compiler_generated'] )
		  ( <_17> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','file_info'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 2062
	  <_18> when 'true' ->
	      'false'
	end
'create_include_path'/2 =
    %% Line 2074
    fun (_0,_1) ->
	let <_5> =
	    fun (_3) ->
		%% Line 2075
		case _3 of
		  <{_18,A}> when 'true' ->
		      ( case A of
			  ( <( {'application',_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_rec40}
			       -| ['compiler_generated'] )> when 'true' ->
				_rec40
			    -| ['compiler_generated'] )
			  ( <_33> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','application'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  ( <_4> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_4})
			  -| [{'function_name',{'-create_include_path/2-fun-0-',1}}] )
		    -| ['compiler_generated'] )
		end
	in  let <FoundAppDirs> =
		call %% Line 2075
		     'lists':%% Line 2075
			     'map'
		    (_5, _0)
	    in  let <_15> =
		    fun (_13) ->
			let <_9> =
			    call %% Line 2077
				 'filename':%% Line 2077
					    'split'
				(%% Line 2076
				 _13)
			in  %% Line 2077
			    case call 'lists':'reverse'
				     (_9) of
			      %% Line 2078
			      <[[101|[98|[105|[110]]]]|D]> when 'true' ->
				  let <_10> =
				      call %% Line 2079
					   'lists':%% Line 2079
						   'reverse'
					  (%% Line 2079
					   D)
				  in  let <_11> =
					  call %% Line 2079
					       'erlang':%% Line 2079
							'++'
					      (_10, %% Line 2079
						    [[105|[110|[99|[108|[117|[100|[101]]]]]]]])
				      in  %% Line 2079
					  call 'filename':'join'
					      (_11)
			      %% Line 2080
			      <_34> when 'true' ->
				  %% Line 2081
				  call 'filename':'join'
				      (_13, [105|[110|[99|[108|[117|[100|[101]]]]]]])
			    end
		in  let <_7> =
			apply %% Line 2084
			      'no_dupl'/2
			    (_1, %% Line 2084
				 FoundAppDirs)
		    in  let <_8> =
			    call %% Line 2084
				 'erlang':%% Line 2084
					  '++'
				(%% Line 2084
				 FoundAppDirs, _7)
			in  %% Line 2076
			    call 'lists':'map'
				(_15, _8)
'no_dupl'/2 =
    %% Line 2086
    fun (_0,_1) ->
	case <_0,_1> of
	  <[Dir|Path],FoundAppDirs> when 'true' ->
	      %% Line 2087
	      case call 'lists':'member'
		       (Dir, FoundAppDirs) of
		%% Line 2088
		<'true'> when 'true' ->
		    %% Line 2089
		    apply 'no_dupl'/2
			(Path, FoundAppDirs)
		%% Line 2090
		<_6> when 'true' ->
		    let <_2> =
			apply %% Line 2091
			      'no_dupl'/2
			    (%% Line 2091
			     Path, %% Line 2091
				   FoundAppDirs)
		    in  %% Line 2091
			[Dir|_2]
	      end
	  %% Line 2093
	  <[],_7> when 'true' ->
	      %% Line 2094
	      []
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'no_dupl',2}}] )
	    -| ['compiler_generated'] )
	end
'is_app_type'/1 =
    %% Line 2096
    fun (_0) ->
	case _0 of
	  <'permanent'> when 'true' ->
	      'true'
	  %% Line 2097
	  <'transient'> when 'true' ->
	      'true'
	  %% Line 2098
	  <'temporary'> when 'true' ->
	      'true'
	  %% Line 2099
	  <'none'> when 'true' ->
	      'true'
	  %% Line 2100
	  <'load'> when 'true' ->
	      'true'
	  %% Line 2101
	  <_2> when 'true' ->
	      'false'
	end
'string_p'/1 =
    %% Line 2105
    fun (_0) ->
	%% Line 2106
	case call 'unicode':'characters_to_list'
		 (_0) of
	  %% Line 2107
	  <_3>
	      when call 'erlang':'=:='
		    (_3,
		     _0) ->
	      'true'
	  %% Line 2108
	  <_4> when 'true' ->
	      'false'
	end
't_list_p'/1 =
    %% Line 2114
    fun (_0) ->
	case _0 of
	  <[{A,_2}|T]>
	      when call 'erlang':'is_atom'
		    (A) ->
	      apply 't_list_p'/1
		  (T)
	  %% Line 2115
	  <[]> when 'true' ->
	      'true'
	  %% Line 2116
	  <_3> when 'true' ->
	      'false'
	end
'a_list_p'/1 =
    %% Line 2120
    fun (_0) ->
	case _0 of
	  <[A|T]>
	      when call 'erlang':'is_atom'
		    (A) ->
	      apply 'a_list_p'/1
		  (T)
	  %% Line 2121
	  <[]> when 'true' ->
	      'true'
	  %% Line 2122
	  <_2> when 'true' ->
	      'false'
	end
'get_flag'/2 =
    %% Line 2126
    fun (_0,_1) ->
	case <_0,_1> of
	  <F,[{_4,D}|_5]>
	      when call 'erlang':'=:='
		    (_4,
		     F) ->
	      {F,D}
	  %% Line 2127
	  <F,[_6|Fs]> when 'true' ->
	      apply 'get_flag'/2
		  (F, Fs)
	  %% Line 2128
	  <_7,_8> when 'true' ->
	      'false'
	end
'check_args_script'/1 =
    %% Line 2131
    fun (_0) ->
	%% Line 2132
	apply 'cas'/2
	    (_0, [])
'cas'/2 =
    %% Line 2134
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],X> when 'true' ->
	      %% Line 2135
	      X
	  %% Line 2137
	  <[_@r0 = {'path',P}|Args],X>
	      when call 'erlang':'is_list'
		    (P) ->
	      %% Line 2138
	      case apply 'check_path'/1
		       (P) of
		%% Line 2139
		<'ok'> when 'true' ->
		    %% Line 2140
		    apply 'cas'/2
			(Args, X)
		%% Line 2141
		<'error'> when 'true' ->
		    let <_2> =
			call %% Line 2142
			     'erlang':%% Line 2142
				      '++'
			    (%% Line 2142
			     X, %% Line 2142
				[_@r0|[]])
		    in  %% Line 2142
			apply 'cas'/2
			    (Args, _2)
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2145
	  <['silent'|Args],X> when 'true' ->
	      %% Line 2146
	      apply 'cas'/2
		  (Args, X)
	  %% Line 2148
	  <['local'|Args],X> when 'true' ->
	      %% Line 2149
	      apply 'cas'/2
		  (Args, X)
	  %% Line 2151
	  <['src_tests'|Args],X> when 'true' ->
	      %% Line 2152
	      apply 'cas'/2
		  (Args, X)
	  %% Line 2154
	  <[_@r1 = {'variables',V}|Args],X>
	      when call 'erlang':'is_list'
		    (V) ->
	      %% Line 2155
	      case apply 'check_vars'/1
		       (V) of
		%% Line 2156
		<'ok'> when 'true' ->
		    %% Line 2157
		    apply 'cas'/2
			(Args, X)
		%% Line 2158
		<'error'> when 'true' ->
		    let <_4> =
			call %% Line 2159
			     'erlang':%% Line 2159
				      '++'
			    (%% Line 2159
			     X, %% Line 2159
				[_@r1|[]])
		    in  %% Line 2159
			apply 'cas'/2
			    (Args, _4)
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2162
	  <[{'machine',M}|Args],X>
	      when call 'erlang':'is_atom'
		    (M) ->
	      %% Line 2163
	      apply 'cas'/2
		  (Args, X)
	  %% Line 2165
	  <['exref'|Args],X> when 'true' ->
	      %% Line 2166
	      apply 'cas'/2
		  (Args, X)
	  %% Line 2168
	  <[_@r2 = {'exref',Apps}|Args],X>
	      when call 'erlang':'is_list'
		    (Apps) ->
	      %% Line 2169
	      case apply 'check_apps'/1
		       (Apps) of
		%% Line 2170
		<'ok'> when 'true' ->
		    %% Line 2171
		    apply 'cas'/2
			(Args, X)
		%% Line 2172
		<'error'> when 'true' ->
		    let <_6> =
			call %% Line 2173
			     'erlang':%% Line 2173
				      '++'
			    (%% Line 2173
			     X, %% Line 2173
				[_@r2|[]])
		    in  %% Line 2173
			apply 'cas'/2
			    (Args, _6)
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2176
	  <[{'outdir',Dir}|Args],X>
	      when call 'erlang':'is_list'
		    (Dir) ->
	      %% Line 2177
	      apply 'cas'/2
		  (Args, X)
	  %% Line 2179
	  <['otp_build'|Args],X> when 'true' ->
	      %% Line 2180
	      apply 'cas'/2
		  (Args, X)
	  %% Line 2182
	  <['warnings_as_errors'|Args],X> when 'true' ->
	      %% Line 2183
	      apply 'cas'/2
		  (Args, X)
	  %% Line 2185
	  <['no_warn_sasl'|Args],X> when 'true' ->
	      %% Line 2186
	      apply 'cas'/2
		  (Args, X)
	  %% Line 2188
	  <['no_module_tests'|Args],X> when 'true' ->
	      %% Line 2189
	      apply 'cas'/2
		  (Args, X)
	  %% Line 2190
	  <['no_dot_erlang'|Args],X> when 'true' ->
	      %% Line 2191
	      apply 'cas'/2
		  (Args, X)
	  %% Line 2194
	  <[Y|Args],X> when 'true' ->
	      let <_8> =
		  call %% Line 2195
		       'erlang':%% Line 2195
				'++'
		      (%% Line 2195
		       X, %% Line 2195
			  [Y|[]])
	      in  %% Line 2195
		  apply 'cas'/2
		      (Args, _8)
	  ( <_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9})
		  -| [{'function_name',{'cas',2}}] )
	    -| ['compiler_generated'] )
	end
'check_args_tar'/1 =
    %% Line 2200
    fun (_0) ->
	%% Line 2201
	apply 'cat'/2
	    (_0, [])
'cat'/2 =
    %% Line 2203
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],X> when 'true' ->
	      %% Line 2204
	      X
	  %% Line 2206
	  <[_@r0 = {'path',P}|Args],X>
	      when call 'erlang':'is_list'
		    (P) ->
	      %% Line 2207
	      case apply 'check_path'/1
		       (P) of
		%% Line 2208
		<'ok'> when 'true' ->
		    %% Line 2209
		    apply 'cat'/2
			(Args, X)
		%% Line 2210
		<'error'> when 'true' ->
		    let <_2> =
			call %% Line 2211
			     'erlang':%% Line 2211
				      '++'
			    (%% Line 2211
			     X, %% Line 2211
				[_@r0|[]])
		    in  %% Line 2211
			apply 'cat'/2
			    (Args, _2)
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2214
	  <['silent'|Args],X> when 'true' ->
	      %% Line 2215
	      apply 'cat'/2
		  (Args, X)
	  %% Line 2217
	  <[_@r1 = {'dirs',D}|Args],X> when 'true' ->
	      %% Line 2218
	      case apply 'check_dirs'/1
		       (D) of
		%% Line 2219
		<'ok'> when 'true' ->
		    %% Line 2220
		    apply 'cat'/2
			(Args, X)
		%% Line 2221
		<'error'> when 'true' ->
		    let <_4> =
			call %% Line 2222
			     'erlang':%% Line 2222
				      '++'
			    (%% Line 2222
			     X, %% Line 2222
				[_@r1|[]])
		    in  %% Line 2222
			apply 'cat'/2
			    (Args, _4)
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2225
	  <[{'erts',E}|Args],X>
	      when call 'erlang':'is_list'
		    (E) ->
	      %% Line 2226
	      apply 'cat'/2
		  (Args, X)
	  %% Line 2228
	  <['src_tests'|Args],X> when 'true' ->
	      %% Line 2229
	      apply 'cat'/2
		  (Args, X)
	  %% Line 2231
	  <[_@r2 = {'variables',V}|Args],X>
	      when call 'erlang':'is_list'
		    (V) ->
	      %% Line 2232
	      case apply 'check_vars'/1
		       (V) of
		%% Line 2233
		<'ok'> when 'true' ->
		    %% Line 2234
		    apply 'cat'/2
			(Args, X)
		%% Line 2235
		<'error'> when 'true' ->
		    let <_6> =
			call %% Line 2236
			     'erlang':%% Line 2236
				      '++'
			    (%% Line 2236
			     X, %% Line 2236
				[_@r2|[]])
		    in  %% Line 2236
			apply 'cat'/2
			    (Args, _6)
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2239
	  <[{'var_tar',VT}|Args],X>
	      when let <_8> =
		    call 'erlang':'=:='
			(VT, 'include')
		in  let <_9> =
			call %% Line 2240
			     'erlang':%% Line 2240
				      '=:='
			    (%% Line 2240
			     VT, %% Line 2240
				 'ownfile')
		    in  let <_10> =
			    call %% Line 2241
				 'erlang':%% Line 2241
					  '=:='
				(%% Line 2241
				 VT, %% Line 2241
				     'omit')
			in  let <_11> =
				call %% Line 2240
				     'erlang':%% Line 2240
					      'or'
				    (_9, _10)
			    in  call 'erlang':'or'
				    (_8, _11) ->
	      %% Line 2242
	      apply 'cat'/2
		  (Args, X)
	  %% Line 2244
	  <[{'machine',M}|Args],X>
	      when call 'erlang':'is_atom'
		    (M) ->
	      %% Line 2245
	      apply 'cat'/2
		  (Args, X)
	  %% Line 2247
	  <['exref'|Args],X> when 'true' ->
	      %% Line 2248
	      apply 'cat'/2
		  (Args, X)
	  %% Line 2250
	  <[_@r3 = {'exref',Apps}|Args],X>
	      when call 'erlang':'is_list'
		    (Apps) ->
	      %% Line 2251
	      case apply 'check_apps'/1
		       (Apps) of
		%% Line 2252
		<'ok'> when 'true' ->
		    %% Line 2253
		    apply 'cat'/2
			(Args, X)
		%% Line 2254
		<'error'> when 'true' ->
		    let <_12> =
			call %% Line 2255
			     'erlang':%% Line 2255
				      '++'
			    (%% Line 2255
			     X, %% Line 2255
				[_@r3|[]])
		    in  %% Line 2255
			apply 'cat'/2
			    (Args, _12)
		( <_13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2258
	  <[{'outdir',Dir}|Args],X>
	      when call 'erlang':'is_list'
		    (Dir) ->
	      %% Line 2259
	      apply 'cat'/2
		  (Args, X)
	  %% Line 2261
	  <['otp_build'|Args],X> when 'true' ->
	      %% Line 2262
	      apply 'cat'/2
		  (Args, X)
	  %% Line 2264
	  <['warnings_as_errors'|Args],X> when 'true' ->
	      %% Line 2265
	      apply 'cat'/2
		  (Args, X)
	  %% Line 2267
	  <['no_warn_sasl'|Args],X> when 'true' ->
	      %% Line 2268
	      apply 'cat'/2
		  (Args, X)
	  %% Line 2270
	  <['no_module_tests'|Args],X> when 'true' ->
	      %% Line 2271
	      apply 'cat'/2
		  (Args, X)
	  %% Line 2273
	  <[Y|Args],X> when 'true' ->
	      let <_14> =
		  call %% Line 2274
		       'erlang':%% Line 2274
				'++'
		      (%% Line 2274
		       X, %% Line 2274
			  [Y|[]])
	      in  %% Line 2274
		  apply 'cat'/2
		      (Args, _14)
	  ( <_16,_15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15})
		  -| [{'function_name',{'cat',2}}] )
	    -| ['compiler_generated'] )
	end
'check_path'/1 =
    %% Line 2276
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      %% Line 2277
	      'ok'
	  %% Line 2278
	  <[H|T]>
	      when call 'erlang':'is_list'
		    (H) ->
	      %% Line 2279
	      apply 'check_path'/1
		  (T)
	  %% Line 2280
	  <[_X_H|_X_T]> when 'true' ->
	      %% Line 2281
	      'error'
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'check_path',1}}] )
	    -| ['compiler_generated'] )
	end
'check_dirs'/1 =
    %% Line 2283
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      %% Line 2284
	      'ok'
	  %% Line 2285
	  <[H|T]>
	      when call 'erlang':'is_atom'
		    (H) ->
	      %% Line 2286
	      apply 'check_dirs'/1
		  (T)
	  %% Line 2287
	  <[_X_H|_X_T]> when 'true' ->
	      %% Line 2288
	      'error'
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'check_dirs',1}}] )
	    -| ['compiler_generated'] )
	end
'check_vars'/1 =
    %% Line 2290
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      %% Line 2291
	      'ok'
	  %% Line 2292
	  <[{Name,Dir}|T]> when 'true' ->
	      %% Line 2293
	      case <> of
		%% Line 2294
		<>
		    when let <_1> =
			  call 'erlang':'is_atom'
			      (Name)
		      in  let <_2> =
			      call 'erlang':'is_list'
				  (Dir)
			  in  call 'erlang':'and'
				  (_1, _2) ->
		    %% Line 2295
		    apply 'check_vars'/1
			(T)
		%% Line 2296
		<>
		    when let <_3> =
			  call 'erlang':'is_list'
			      (Name)
		      in  let <_4> =
			      call 'erlang':'is_list'
				  (Dir)
			  in  call 'erlang':'and'
				  (_3, _4) ->
		    %% Line 2297
		    apply 'check_vars'/1
			(T)
		%% Line 2298
		<> when 'true' ->
		    %% Line 2299
		    'error'
	      end
	  %% Line 2301
	  <_6> when 'true' ->
	      %% Line 2302
	      'error'
	end
'check_apps'/1 =
    %% Line 2304
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      %% Line 2305
	      'ok'
	  %% Line 2306
	  <[H|T]>
	      when call 'erlang':'is_atom'
		    (H) ->
	      %% Line 2307
	      apply 'check_apps'/1
		  (T)
	  %% Line 2308
	  <_2> when 'true' ->
	      %% Line 2309
	      'error'
	end
'format_error'/1 =
    %% Line 2313
    fun (_0) ->
	case _0 of
	  <'badly_formatted_release'> when 'true' ->
	      %% Line 2314
	      call 'io_lib':'format'
		  ([83|[121|[110|[116|[97|[120|[32|[101|[114|[114|[111|[114|[32|[105|[110|[32|[116|[104|[101|[32|[114|[101|[108|[101|[97|[115|[101|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 2315
	  <{'illegal_name',Name}> when 'true' ->
	      %% Line 2316
	      call 'io_lib':'format'
		  ([73|[108|[108|[101|[103|[97|[108|[32|[110|[97|[109|[101|[32|[40|[126|[116|[112|[41|[32|[105|[110|[32|[116|[104|[101|[32|[114|[101|[108|[101|[97|[115|[101|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[]])
	  %% Line 2317
	  <{'illegal_form',Form}> when 'true' ->
	      %% Line 2318
	      call 'io_lib':'format'
		  ([73|[108|[108|[101|[103|[97|[108|[32|[116|[97|[103|[32|[105|[110|[32|[116|[104|[101|[32|[114|[101|[108|[101|[97|[115|[101|[32|[102|[105|[108|[101|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Form|[]])
	  %% Line 2319
	  <{'missing_parameter',Par}> when 'true' ->
	      %% Line 2320
	      call 'io_lib':'format'
		  ([77|[105|[115|[115|[105|[110|[103|[32|[112|[97|[114|[97|[109|[101|[116|[101|[114|[32|[40|[126|[112|[41|[32|[105|[110|[32|[116|[104|[101|[32|[114|[101|[108|[101|[97|[115|[101|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Par|[]])
	  %% Line 2321
	  <{'illegal_applications',Names}> when 'true' ->
	      %% Line 2322
	      call 'io_lib':'format'
		  ([73|[108|[108|[101|[103|[97|[108|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[115|[32|[105|[110|[32|[116|[104|[101|[32|[114|[101|[108|[101|[97|[115|[101|[32|[102|[105|[108|[101|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2323
																																			   [Names|[]])
	  %% Line 2324
	  <{'missing_mandatory_app',Name}> when 'true' ->
	      %% Line 2325
	      call 'io_lib':'format'
		  ([77|[97|[110|[100|[97|[116|[111|[114|[121|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[126|[119|[32|[109|[117|[115|[116|[32|[98|[101|[32|[115|[112|[101|[99|[105|[102|[105|[101|[100|[32|[105|[110|[32|[116|[104|[101|[32|[114|[101|[108|[101|[97|[115|[101|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2326
																																																  [Name|[]])
	  %% Line 2327
	  <{'mandatory_app',Name,Type}> when 'true' ->
	      %% Line 2328
	      call 'io_lib':'format'
		  ([77|[97|[110|[100|[97|[116|[111|[114|[121|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[126|[119|[32|[109|[117|[115|[116|[32|[98|[101|[32|[111|[102|[32|[116|[121|[112|[101|[32|[39|[112|[101|[114|[109|[97|[110|[101|[110|[116|[39|[32|[105|[110|[32|[116|[104|[101|[32|[114|[101|[108|[101|[97|[115|[101|[32|[102|[105|[108|[101|[46|[32|[73|[115|[32|[39|[126|[112|[39|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2329
																																																													       [Name|[Type|[]]])
	  %% Line 2330
	  <{'duplicate_register',Dups}> when 'true' ->
	      let <_3> =
		  fun (_1) ->
		      %% Line 2332
		      case _1 of
			<{{Reg,App1,_22,_23},{_24,App2,_25,_26}}>
			    when call 'erlang':'=:='
				  (_24,
				   Reg) ->
			    %% Line 2333
			    call 'io_lib':'format'
				([9|[126|[116|[119|[32|[114|[101|[103|[105|[115|[116|[101|[114|[101|[100|[32|[105|[110|[32|[126|[119|[32|[97|[110|[100|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2334
																									      [Reg|[App1|[App2|[]]]])
			( <_2> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_2})
				-| [{'function_name',{'-format_error/1-fun-0-',1}}] )
			  -| ['compiler_generated'] )
		      end
	      in  let <_4> =
		      call %% Line 2332
			   'lists':%% Line 2332
				   'map'
			  (_3, %% Line 2335
			       Dups)
		  in  %% Line 2331
		      call 'io_lib':'format'
			  ([68|[117|[112|[108|[105|[99|[97|[116|[101|[100|[32|[114|[101|[103|[105|[115|[116|[101|[114|[32|[110|[97|[109|[101|[115|[58|[32|[126|[110|[126|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2332
																										    [_4|%% Line 2335
																											[]])
	  %% Line 2336
	  <{'undefined_applications',Apps}> when 'true' ->
	      %% Line 2337
	      call 'io_lib':'format'
		  ([85|[110|[100|[101|[102|[105|[110|[101|[100|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[115|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Apps|[]])
	  %% Line 2338
	  <{'duplicate_modules',Dups}> when 'true' ->
	      let <_7> =
		  fun (_5) ->
		      %% Line 2340
		      case _5 of
			<{{Mod,App1,_27},{_28,App2,_29}}>
			    when call 'erlang':'=:='
				  (_28,
				   Mod) ->
			    %% Line 2341
			    call 'io_lib':'format'
				([9|[126|[119|[32|[115|[112|[101|[99|[105|[102|[105|[101|[100|[32|[105|[110|[32|[126|[119|[32|[97|[110|[100|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2342
																								 [Mod|[App1|[App2|[]]]])
			( <_6> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_6})
				-| [{'function_name',{'-format_error/1-fun-1-',1}}] )
			  -| ['compiler_generated'] )
		      end
	      in  let <_8> =
		      call %% Line 2340
			   'lists':%% Line 2340
				   'map'
			  (_7, %% Line 2343
			       Dups)
		  in  %% Line 2339
		      call 'io_lib':'format'
			  ([68|[117|[112|[108|[105|[99|[97|[116|[101|[100|[32|[109|[111|[100|[117|[108|[101|[115|[58|[32|[126|[110|[126|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2340
																					    [_8|%% Line 2343
																						[]])
	  %% Line 2344
	  <{'included_and_used',Dups}> when 'true' ->
	      %% Line 2345
	      call 'io_lib':'format'
		  ([65|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[115|[32|[98|[111|[116|[104|[32|[117|[115|[101|[100|[32|[97|[110|[100|[32|[105|[110|[99|[108|[117|[100|[101|[100|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Dups|[]])
	  %% Line 2346
	  <{'duplicate_include',Dups}> when 'true' ->
	      let <_11> =
		  fun (_9) ->
		      %% Line 2348
		      case _9 of
			<{{Name,App1,_30,_31},{_32,App2,_33,_34}}>
			    when call 'erlang':'=:='
				  (_32,
				   Name) ->
			    %% Line 2349
			    call 'io_lib':'format'
				([9|[126|[119|[32|[105|[110|[99|[108|[117|[100|[101|[100|[32|[105|[110|[32|[126|[119|[32|[97|[110|[100|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2350
																							   [Name|[App1|[App2|[]]]])
			( <_10> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_10})
				-| [{'function_name',{'-format_error/1-fun-2-',1}}] )
			  -| ['compiler_generated'] )
		      end
	      in  let <_12> =
		      call %% Line 2348
			   'lists':%% Line 2348
				   'map'
			  (_11, %% Line 2351
				Dups)
		  in  %% Line 2347
		      call 'io_lib':'format'
			  ([68|[117|[112|[108|[105|[99|[97|[116|[101|[100|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[105|[110|[99|[108|[117|[100|[101|[100|[58|[32|[126|[110|[126|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2348
																														     [_12|%% Line 2351
																															  []])
	  %% Line 2352
	  <{'modules',ModErrs}> when 'true' ->
	      %% Line 2353
	      apply 'format_errors'/1
		  (ModErrs)
	  %% Line 2354
	  <{'circular_dependencies',Apps}> when 'true' ->
	      %% Line 2355
	      call 'io_lib':'format'
		  ([67|[105|[114|[99|[117|[108|[97|[114|[32|[100|[101|[112|[101|[110|[100|[101|[110|[99|[105|[101|[115|[32|[97|[109|[111|[110|[103|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[115|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Apps|[]])
	  %% Line 2356
	  <{'not_found',File}> when 'true' ->
	      %% Line 2357
	      call 'io_lib':'format'
		  ([70|[105|[108|[101|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]], [File|[]])
	  %% Line 2358
	  <{'parse',File,{Line,Mod,What}}> when 'true' ->
	      let <Str> =
		  call %% Line 2359
		       Mod:%% Line 2359
			   'format_error'
		      (%% Line 2359
		       What)
	      in  %% Line 2360
		  call 'io_lib':'format'
		      ([126|[116|[115|[58|[126|[119|[58|[32|[126|[116|[115|[10]]]]]]]]]]]], [File|[Line|[Str|[]]]])
	  %% Line 2361
	  <{'read',File}> when 'true' ->
	      %% Line 2362
	      call 'io_lib':'format'
		  ([67|[97|[110|[110|[111|[116|[32|[114|[101|[97|[100|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]], [File|[]])
	  %% Line 2363
	  <{'open',File,Error}> when 'true' ->
	      let <_14> =
		  call %% Line 2365
		       'file':%% Line 2365
			      'format_error'
		      (%% Line 2365
		       Error)
	      in  %% Line 2364
		  call 'io_lib':'format'
		      ([67|[97|[110|[110|[111|[116|[32|[111|[112|[101|[110|[32|[126|[116|[112|[32|[45|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]], %% Line 2365
																			   [File|[_14|[]]])
	  %% Line 2366
	  <{'close',File,Error}> when 'true' ->
	      let <_15> =
		  call %% Line 2368
		       'file':%% Line 2368
			      'format_error'
		      (%% Line 2368
		       Error)
	      in  %% Line 2367
		  call 'io_lib':'format'
		      ([67|[97|[110|[110|[111|[116|[32|[99|[108|[111|[115|[101|[32|[126|[116|[112|[32|[45|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2368
																				[File|[_15|[]]])
	  %% Line 2369
	  <{'delete',File,Error}> when 'true' ->
	      let <_16> =
		  call %% Line 2371
		       'file':%% Line 2371
			      'format_error'
		      (%% Line 2371
		       Error)
	      in  %% Line 2370
		  call 'io_lib':'format'
		      ([67|[97|[110|[110|[111|[116|[32|[100|[101|[108|[101|[116|[101|[32|[126|[116|[112|[32|[45|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2371
																				       [File|[_16|[]]])
	  %% Line 2372
	  <{'tar_error',What}> when 'true' ->
	      %% Line 2373
	      apply 'form_tar_err'/1
		  (What)
	  %% Line 2374
	  <{'warnings_treated_as_errors',Warnings}> when 'true' ->
	      let <_19> =
		  fun (_17) ->
		      %% Line 2376
		      apply 'form_warn'/2
			  ([], _17)
	      in  let <_20> =
		      call %% Line 2376
			   'lists':%% Line 2376
				   'map'
			  (_19, %% Line 2376
				Warnings)
		  in  %% Line 2375
		      call 'io_lib':'format'
			  ([87|[97|[114|[110|[105|[110|[103|[115|[32|[98|[101|[105|[110|[103|[32|[116|[114|[101|[97|[116|[101|[100|[32|[97|[115|[32|[101|[114|[114|[111|[114|[115|[58|[126|[110|[126|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2376
																														      [_20|[]])
	  %% Line 2377
	  <ListOfErrors>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 2378
	      apply 'format_errors'/1
		  (ListOfErrors)
	  %% Line 2379
	  <E> when 'true' ->
	      call 'io_lib':'format'
		  ([126|[116|[112|[126|[110]]]]], [E|[]])
	end
'format_errors'/1 =
    %% Line 2381
    fun (_0) ->
	let <_3> =
	    fun (_1) ->
		%% Line 2382
		case _1 of
		  <{'error',E}> when 'true' ->
		      apply 'form_err'/1
			  (E)
		  %% Line 2383
		  <E> when 'true' ->
		      apply 'form_err'/1
			  (E)
		end
	in  %% Line 2382
	    call 'lists':'map'
		(_3, _0)
'form_err'/1 =
    %% Line 2386
    fun (_0) ->
	case _0 of
	  <{'bad_application_name',{Name,Found}}> when 'true' ->
	      %% Line 2387
	      call 'io_lib':'format'
		  ([126|[112|[58|[32|[77|[105|[115|[109|[97|[116|[99|[104|[101|[100|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[105|[100|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[Found|[]]])
	  %% Line 2388
	  <{'error_reading',{Name,What}}> when 'true' ->
	      let <_1> =
		  apply %% Line 2389
			'form_reading'/1
		      (%% Line 2389
		       What)
	      in  %% Line 2389
		  call 'io_lib':'format'
		      ([126|[112|[58|[32|[126|[116|[115|[126|[110]]]]]]]]], [Name|[_1|[]]])
	  %% Line 2390
	  <{'module_not_found',App,Mod}> when 'true' ->
	      %% Line 2391
	      call 'io_lib':'format'
		  ([126|[119|[58|[32|[77|[111|[100|[117|[108|[101|[32|[40|[126|[119|[41|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]], [App|[Mod|[]]])
	  %% Line 2392
	  <{'error_add_appl',{Name,{'tar_error',What}}}> when 'true' ->
	      let <_2> =
		  apply %% Line 2393
			'form_tar_err'/1
		      (%% Line 2393
		       What)
	      in  %% Line 2393
		  call 'io_lib':'format'
		      ([126|[112|[58|[32|[126|[116|[115|[126|[110]]]]]]]]], [Name|[_2|[]]])
	  %% Line 2394
	  <E> when 'true' ->
	      %% Line 2395
	      call 'io_lib':'format'
		  ([126|[116|[112|[126|[110]]]]], [E|[]])
	end
'form_reading'/1 =
    %% Line 2397
    fun (_0) ->
	case _0 of
	  <{'not_found',File}> when 'true' ->
	      %% Line 2398
	      call 'io_lib':'format'
		  ([70|[105|[108|[101|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]], [File|[]])
	  %% Line 2399
	  <{'application_vsn',{Name,Vsn}}> when 'true' ->
	      %% Line 2400
	      call 'io_lib':'format'
		  ([65|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[126|[116|[115|[32|[119|[105|[116|[104|[32|[118|[101|[114|[115|[105|[111|[110|[32|[126|[116|[112|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[Vsn|[]]])
	  %% Line 2401
	  <{'parse',File,{Line,Mod,What}}> when 'true' ->
	      let <Str> =
		  call %% Line 2402
		       Mod:%% Line 2402
			   'format_error'
		      (%% Line 2402
		       What)
	      in  %% Line 2403
		  call 'io_lib':'format'
		      ([126|[116|[115|[58|[126|[119|[58|[32|[126|[116|[115|[10]]]]]]]]]]]], [File|[Line|[Str|[]]]])
	  %% Line 2404
	  <{'read',File}> when 'true' ->
	      %% Line 2405
	      call 'io_lib':'format'
		  ([67|[97|[110|[110|[111|[116|[32|[114|[101|[97|[100|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]], [File|[]])
	  %% Line 2406
	  <{{'bad_param',P},_3}> when 'true' ->
	      %% Line 2407
	      call 'io_lib':'format'
		  ([66|[97|[100|[32|[112|[97|[114|[97|[109|[101|[116|[101|[114|[32|[105|[110|[32|[46|[97|[112|[112|[32|[102|[105|[108|[101|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [P|[]])
	  %% Line 2408
	  <{{'missing_param',P},_4}> when 'true' ->
	      %% Line 2409
	      call 'io_lib':'format'
		  ([77|[105|[115|[115|[105|[110|[103|[32|[112|[97|[114|[97|[109|[101|[116|[101|[114|[32|[105|[110|[32|[46|[97|[112|[112|[32|[102|[105|[108|[101|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [P|[]])
	  %% Line 2410
	  <{'badly_formatted_application',_5}> when 'true' ->
	      %% Line 2411
	      call 'io_lib':'format'
		  ([83|[121|[110|[116|[97|[120|[32|[101|[114|[114|[111|[114|[32|[105|[110|[32|[46|[97|[112|[112|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 2412
	  <{'override_include',Apps}> when 'true' ->
	      %% Line 2413
	      call 'io_lib':'format'
		  ([84|[114|[105|[101|[100|[32|[116|[111|[32|[105|[110|[99|[108|[117|[100|[101|[32|[110|[111|[116|[32|[40|[105|[110|[32|[46|[97|[112|[112|[32|[102|[105|[108|[101|[41|[32|[115|[112|[101|[99|[105|[102|[105|[101|[100|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[115|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2414
																																																[Apps|[]])
	  %% Line 2415
	  <{'no_valid_version',{{_6,SVsn},{_7,File,FVsn}}}> when 'true' ->
	      %% Line 2416
	      call 'io_lib':'format'
		  ([78|[111|[32|[118|[97|[108|[105|[100|[32|[118|[101|[114|[115|[105|[111|[110|[32|[40|[126|[116|[112|[41|[32|[111|[102|[32|[46|[97|[112|[112|[32|[102|[105|[108|[101|[32|[102|[111|[117|[110|[100|[46|[32|[70|[111|[117|[110|[100|[32|[102|[105|[108|[101|[32|[126|[116|[112|[32|[119|[105|[116|[104|[32|[118|[101|[114|[115|[105|[111|[110|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2417
																																																								       [SVsn|[File|[FVsn|[]]]])
	  %% Line 2418
	  <{'parse_error',{File,Line,Error}}> when 'true' ->
	      %% Line 2419
	      call 'io_lib':'format'
		  ([80|[97|[114|[115|[101|[32|[101|[114|[114|[111|[114|[32|[105|[110|[32|[102|[105|[108|[101|[58|[32|[126|[116|[112|[46|[32|[32|[76|[105|[110|[101|[58|[32|[126|[119|[32|[32|[69|[114|[114|[111|[114|[58|[32|[126|[116|[112|[59|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [File|[Line|[Error|[]]]])
	  %% Line 2420
	  <W> when 'true' ->
	      %% Line 2421
	      call 'io_lib':'format'
		  ([126|[116|[112|[126|[110]]]]], [W|[]])
	end
'form_tar_err'/1 =
    %% Line 2423
    fun (_0) ->
	case _0 of
	  <{'open',File,Error}> when 'true' ->
	      let <_1> =
		  call %% Line 2425
		       'erl_tar':%% Line 2425
				 'format_error'
		      (%% Line 2425
		       Error)
	      in  %% Line 2424
		  call 'io_lib':'format'
		      ([67|[97|[110|[110|[111|[116|[32|[111|[112|[101|[110|[32|[116|[97|[114|[32|[102|[105|[108|[101|[32|[126|[116|[115|[32|[45|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2425
																									      [File|[_1|[]]])
	  %% Line 2426
	  <{'add',File,Error}> when 'true' ->
	      let <_2> =
		  call %% Line 2428
		       'erl_tar':%% Line 2428
				 'format_error'
		      (%% Line 2428
		       Error)
	      in  %% Line 2427
		  call 'io_lib':'format'
		      ([67|[97|[110|[110|[111|[116|[32|[97|[100|[100|[32|[102|[105|[108|[101|[32|[126|[116|[115|[32|[116|[111|[32|[116|[97|[114|[32|[102|[105|[108|[101|[32|[45|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2428
																														     [File|[_2|[]]])
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'form_tar_err',1}}] )
	    -| ['compiler_generated'] )
	end
'format_warning'/1 =
    %% Line 2432
    fun (_0) ->
	let <_3> =
	    fun (_1) ->
		%% Line 2433
		case _1 of
		  <{'warning',W}> when 'true' ->
		      apply 'form_warn'/2
			  ([42|[87|[65|[82|[78|[73|[78|[71|[42|[32]]]]]]]]]], W)
		  ( <_2> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_2})
			  -| [{'function_name',{'-format_warning/1-fun-0-',1}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 2433
	    call 'lists':'map'
		(_3, _0)
'form_warn'/2 =
    %% Line 2435
    fun (_0,_1) ->
	case <_0,_1> of
	  <Prefix,{'source_not_found',{Mod,App,_7}}> when 'true' ->
	      %% Line 2436
	      call 'io_lib':'format'
		  ([126|[116|[115|[126|[119|[58|[32|[83|[111|[117|[114|[99|[101|[32|[99|[111|[100|[101|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100|[58|[32|[126|[119|[46|[101|[114|[108|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2437
																													     [Prefix|[App|[Mod|[]]]])
	  %% Line 2438
	  <Prefix,{{'parse_error',File},{_8,_9,App,_10,_11}}> when 'true' ->
	      %% Line 2439
	      call 'io_lib':'format'
		  ([126|[116|[115|[126|[119|[58|[32|[80|[97|[114|[115|[101|[32|[101|[114|[114|[111|[114|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2440
																				   [Prefix|[App|[File|[]]]])
	  %% Line 2441
	  <Prefix,{'obj_out_of_date',{Mod,App,_12}}> when 'true' ->
	      %% Line 2442
	      call 'io_lib':'format'
		  ([126|[116|[115|[126|[119|[58|[32|[79|[98|[106|[101|[99|[116|[32|[99|[111|[100|[101|[32|[40|[126|[119|[41|[32|[111|[117|[116|[32|[111|[102|[32|[100|[97|[116|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2443
																												    [Prefix|[App|[Mod|[]]]])
	  %% Line 2444
	  <Prefix,{'exref_undef',Undef}> when 'true' ->
	      let <F> =
		  fun (_2) ->
		      %% Line 2445
		      case _2 of
			<{M,F,A}> when 'true' ->
			    %% Line 2446
			    call 'io_lib':'format'
				([126|[116|[115|[85|[110|[100|[101|[102|[105|[110|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[58|[126|[116|[119|[47|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2447
																												  [Prefix|[M|[F|[A|[]]]]])
			( <_3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_3})
				-| [{'function_name',{'-form_warn/2-fun-0-',1}}] )
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 2449
		  call 'lists':'map'
		      (F, Undef)
	  %% Line 2450
	  <Prefix,'missing_sasl'> when 'true' ->
	      %% Line 2451
	      call 'io_lib':'format'
		  ([126|[116|[115|[77|[105|[115|[115|[105|[110|[103|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[115|[97|[115|[108|[46|[32|[67|[97|[110|[32|[110|[111|[116|[32|[117|[112|[103|[114|[97|[100|[101|[32|[119|[105|[116|[104|[32|[116|[104|[105|[115|[32|[114|[101|[108|[101|[97|[115|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2453
																																																  [Prefix|[]])
	  %% Line 2454
	  <Prefix,What> when 'true' ->
	      %% Line 2455
	      call 'io_lib':'format'
		  ([126|[116|[115|[126|[116|[112|[126|[110]]]]]]]], [Prefix|[What|[]]])
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('systools_make')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('systools_make', _0)
end