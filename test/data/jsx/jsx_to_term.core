module 'jsx_to_term' ['finish'/1,
		      'get_key'/1,
		      'get_value'/1,
		      'handle_event'/2,
		      'init'/1,
		      'insert'/2,
		      'module_info'/0,
		      'module_info'/1,
		      'start_array'/1,
		      'start_object'/1,
		      'start_term'/1,
		      'to_term'/2]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[106|[115|[120|[95|[116|[111|[95|[116|[101|[114|[109|[46|[101|[114|[108]]]]]]]]]]]]]]],1}],
		%% Line 39
		'record' =
		    %% Line 39
		    [{'config',[{'record_field',40,{'atom',40,'labels'},{'atom',40,'binary'}}|[{'record_field',41,{'atom',41,'return_maps'},{'atom',41,'false'}}]]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{'config',{'type',44,'list',[]},[]}],
		%% Line 45
		'export_type' =
		    %% Line 45
		    [{'config',0}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'json_value',{'type',48,'union',[{'type',48,'list',[{'user_type',48,'json_value',[]}]}|[{'type',49,'list',[{'type',49,'tuple',[{'type',49,'union',[{'type',49,'binary',[]}|[{'type',49,'atom',[]}]]}|[{'user_type',49,'json_value',[]}]]}]}|[{'type',49,'nonempty_list',[{'type',49,'tuple',[]}]}|[{'atom',50,'true'}|[{'atom',51,'false'}|[{'atom',52,'null'}|[{'type',53,'integer',[]}|[{'type',54,'float',[]}|[{'type',55,'binary',[]}]]]]]]]]]},[]}],
		%% Line 71
		'spec' =
		    %% Line 71
		    [{{'to_term',2},[{'type',71,'fun',[{'type',71,'product',[{'ann_type',71,[{'var',71,'Source'}|[{'type',71,'binary',[]}]]}|[{'ann_type',71,[{'var',71,'Config'}|[{'user_type',71,'config',[]}]]}]]}|[{'user_type',71,'json_value',[]}]]}]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'state',{'type',108,'tuple',[{'type',108,'list',[]}|[{'type',108,'record',[{'atom',108,'config'}]}]]},[]}],
		%% Line 109
		'spec' =
		    %% Line 109
		    [{{'init',1},[{'type',109,'fun',[{'type',109,'product',[{'ann_type',109,[{'var',109,'Config'}|[{'remote_type',109,[{'atom',109,'proplists'}|[{'atom',109,'proplist'}|[[]]]]}]]}]}|[{'user_type',109,'state',[]}]]}]}],
		%% Line 113
		'spec' =
		    %% Line 113
		    [{{'handle_event',2},[{'type',113,'fun',[{'type',113,'product',[{'ann_type',113,[{'var',113,'Event'}|[{'type',113,'any',[]}]]}|[{'ann_type',113,[{'var',113,'State'}|[{'user_type',113,'state',[]}]]}]]}|[{'user_type',113,'state',[]}]]}]}]]
'to_term'/2 =
    %% Line 78
    fun (_0,_1) ->
	case <_0,_1> of
	  <Source,Config>
	      when call 'erlang':'is_list'
		    (Config) ->
	      let <_2> =
		  call %% Line 79
		       'jsx_config':%% Line 79
				    'extract_config'
		      (%% Line 79
		       Config)
	      in  let <_3> =
		      call %% Line 79
			   'jsx':%% Line 79
				 'decoder'
			  (%% Line 79
			   'jsx_to_term', %% Line 79
					  Config, _2)
		  in  %% Line 79
		      apply _3
			  (Source)
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'to_term',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_config'/1 =
    %% Line 82
    fun (_0) ->
	apply 'parse_config'/2
	    (_0, {'config','binary','false'})
'parse_config'/2 =
    %% Line 84
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{'labels',Val}|Rest],Config>
	      when let <_2> =
		    call %% Line 85
			 'erlang':%% Line 85
				  '=:='
			(%% Line 85
			 Val, %% Line 85
			      'binary')
		in  let <_3> =
			call %% Line 85
			     'erlang':%% Line 85
				      '=:='
			    (%% Line 85
			     Val, %% Line 85
				  'atom')
		    in  let <_4> =
			    call %% Line 85
				 'erlang':%% Line 85
					  '=:='
				(%% Line 85
				 Val, %% Line 85
				      'existing_atom')
			in  let <_5> =
				call %% Line 85
				     'erlang':%% Line 85
					      '=:='
				    (%% Line 85
				     Val, %% Line 85
					  'attempt_atom')
			    in  let <_6> =
				    call %% Line 85
					 'erlang':%% Line 85
						  'or'
					(_4, _5)
				in  let <_7> =
					call %% Line 85
					     'erlang':%% Line 85
						      'or'
					    (_3, _6)
				    in  %% Line 85
					call 'erlang':'or'
					    (_2, _7) ->
	      %% Line 86
	      case Config of
		<{'config',_28,_29}> when 'true' ->
		    let <_10> =
			call 'erlang':'setelement'
			    (2, Config, Val)
		    in  apply 'parse_config'/2
			    (Rest, _10)
		( <_30> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','config'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 87
	  <['labels'|Rest],Config> when 'true' ->
	      %% Line 88
	      case Config of
		<{'config',_31,_32}> when 'true' ->
		    let <_13> =
			call 'erlang':'setelement'
			    (2, Config, 'binary')
		    in  apply 'parse_config'/2
			    (Rest, _13)
		( <_33> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','config'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 89
	  <[{'return_maps',Val}|Rest],Config>
	      when let <_14> =
		    call %% Line 90
			 'erlang':%% Line 90
				  '=:='
			(%% Line 90
			 Val, %% Line 90
			      'true')
		in  let <_15> =
			call %% Line 90
			     'erlang':%% Line 90
				      '=:='
			    (%% Line 90
			     Val, %% Line 90
				  'false')
		    in  %% Line 90
			call 'erlang':'or'
			    (_14, _15) ->
	      %% Line 91
	      case Config of
		<{'config',_34,_35}> when 'true' ->
		    let <_18> =
			call 'erlang':'setelement'
			    (3, Config, Val)
		    in  apply 'parse_config'/2
			    (Rest, _18)
		( <_36> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','config'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 92
	  <['return_maps'|Rest],Config> when 'true' ->
	      %% Line 93
	      case Config of
		<{'config',_37,_38}> when 'true' ->
		    let <_21> =
			call 'erlang':'setelement'
			    (3, Config, 'true')
		    in  apply 'parse_config'/2
			    (Rest, _21)
		( <_39> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','config'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 94
	  <Options = [{K,_40}|Rest],Config> when 'true' ->
	      let <_22> =
		  call %% Line 95
		       'jsx_config':%% Line 95
				    'valid_flags'
		      ()
	      in  %% Line 95
		  case call 'lists':'member'
			   (K, _22) of
		    %% Line 96
		    <'true'> when 'true' ->
			apply 'parse_config'/2
			    (Rest, Config)
		    %% Line 97
		    <'false'> when 'true' ->
			call 'erlang':'error'
			    ('badarg', [Options|[Config|[]]])
		    ( <_23> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_23})
		      -| ['compiler_generated'] )
		  end
	  %% Line 99
	  <Options = [K|Rest],Config> when 'true' ->
	      let <_24> =
		  call %% Line 100
		       'jsx_config':%% Line 100
				    'valid_flags'
		      ()
	      in  %% Line 100
		  case call 'lists':'member'
			   (K, _24) of
		    %% Line 101
		    <'true'> when 'true' ->
			apply 'parse_config'/2
			    (Rest, Config)
		    %% Line 102
		    <'false'> when 'true' ->
			call 'erlang':'error'
			    ('badarg', [Options|[Config|[]]])
		    ( <_25> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_25})
		      -| ['compiler_generated'] )
		  end
	  %% Line 104
	  <[],Config> when 'true' ->
	      %% Line 105
	      Config
	  ( <_27,_26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_27,_26})
		  -| [{'function_name',{'parse_config',2}}] )
	    -| ['compiler_generated'] )
	end
'init'/1 =
    %% Line 111
    fun (_0) ->
	apply 'start_term'/1
	    (_0)
'handle_event'/2 =
    %% Line 115
    fun (_0,_1) ->
	case <_0,_1> of
	  <'end_json',State> when 'true' ->
	      apply 'get_value'/1
		  (State)
	  %% Line 117
	  <'start_object',State> when 'true' ->
	      apply 'start_object'/1
		  (State)
	  %% Line 118
	  <'end_object',State> when 'true' ->
	      apply 'finish'/1
		  (State)
	  %% Line 120
	  <'start_array',State> when 'true' ->
	      apply 'start_array'/1
		  (State)
	  %% Line 121
	  <'end_array',State> when 'true' ->
	      apply 'finish'/1
		  (State)
	  %% Line 123
	  <{'key',Key},State = {_5,Config}> when 'true' ->
	      let <_2> =
		  apply 'format_key'/2
		      (Key, Config)
	      in  apply 'insert'/2
		      (_2, State)
	  %% Line 125
	  <{_6,Event},State> when 'true' ->
	      apply 'insert'/2
		  (Event, State)
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'handle_event',2}}] )
	    -| ['compiler_generated'] )
	end
'format_key'/2 =
    %% Line 128
    fun (_0,_1) ->
	%% Line 129
	( case _1 of
	    ( <( {'config',_rec4,_12}
		 -| ['compiler_generated'] )> when 'true' ->
		  case _rec4 of
		    %% Line 130
		    <'binary'> when 'true' ->
			_0
		    %% Line 131
		    <'atom'> when 'true' ->
			call 'erlang':'binary_to_atom'
			    (_0, 'utf8')
		    %% Line 132
		    <'existing_atom'> when 'true' ->
			call 'erlang':'binary_to_existing_atom'
			    (_0, 'utf8')
		    %% Line 133
		    <'attempt_atom'> when 'true' ->
			%% Line 134
			try
			    call 'erlang':'binary_to_existing_atom'
				(_0, 'utf8')
			of <_4> ->
			    _4
			catch <_8,_7,_6> ->
			    %% Line 137
			    case <_8,_7,_6> of
			      <( 'error'
				 -| ['compiler_generated'] ),( 'badarg'
							       -| ['compiler_generated'] ),_14> when 'true' ->
				  _0
			      ( <_16,_17,_18> when 'true' ->
				    primop 'raise'
					(_18, _17)
				-| ['compiler_generated'] )
			    end
		    ( <_9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_9})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_13> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','config'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'start_term'/1 =
    %% Line 165
    fun (_0) ->
	case _0 of
	  <Config>
	      when call 'erlang':'is_list'
		    (_0) ->
	      let <_1> =
		  apply 'parse_config'/1
		      (Config)
	      in  {[],_1}
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'start_term',1}}] )
	    -| ['compiler_generated'] )
	end
'start_object'/1 =
    %% Line 170
    fun (_0) ->
	case _0 of
	  <{Stack,Config}> when 'true' ->
	      let <_1> =
		  [{'object',[]}|Stack]
	      in  {_1,Config}
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'start_object',1}}] )
	    -| ['compiler_generated'] )
	end
'start_array'/1 =
    %% Line 174
    fun (_0) ->
	case _0 of
	  <{Stack,Config}> when 'true' ->
	      let <_1> =
		  [{'array',[]}|Stack]
	      in  {_1,Config}
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'start_array',1}}] )
	    -| ['compiler_generated'] )
	end
'finish'/1 =
    %% Line 179
    fun (_0) ->
	case _0 of
	  <{[{'object',[]}],Config}> when 'true' ->
	      {[{}],Config}
	  %% Line 180
	  <{[{'object',[]}|Rest],Config}> when 'true' ->
	      apply 'insert'/2
		  ([{}], {Rest,Config})
	  %% Line 181
	  <{[{'object',Pairs}|[]],Config}> when 'true' ->
	      let <_1> =
		  call 'lists':'reverse'
		      (Pairs)
	      in  {_1,Config}
	  %% Line 182
	  <{[{'object',Pairs}|Rest],Config}> when 'true' ->
	      let <_2> =
		  call 'lists':'reverse'
		      (Pairs)
	      in  apply 'insert'/2
		      (_2, {Rest,Config})
	  %% Line 183
	  <{[{'array',Values}|[]],Config}> when 'true' ->
	      let <_3> =
		  call 'lists':'reverse'
		      (Values)
	      in  {_3,Config}
	  %% Line 184
	  <{[{'array',Values}|Rest],Config}> when 'true' ->
	      let <_4> =
		  call 'lists':'reverse'
		      (Values)
	      in  apply 'insert'/2
		      (_4, {Rest,Config})
	  %% Line 185
	  <_6> when 'true' ->
	      call 'erlang':'error'
		  ('badarg')
	end
'insert'/2 =
    %% Line 189
    fun (_0,_1) ->
	case <_0,_1> of
	  <Value,{[],Config}> when 'true' ->
	      {Value,Config}
	  %% Line 191
	  <Key,{[{'object',Pairs}|Rest],Config}> when 'true' ->
	      let <_2> =
		  [%% Line 192
		   {'object',Key,Pairs}|%% Line 192
					Rest]
	      in  %% Line 192
		  {_2,Config}
	  %% Line 193
	  <Value,{[{'object',Key,Pairs}|Rest],Config}> when 'true' ->
	      let <_3> =
		  [%% Line 194
		   {Key,Value}|%% Line 194
			       Pairs]
	      in  let <_4> =
		      [%% Line 194
		       {'object',_3}|%% Line 194
				     Rest]
		  in  %% Line 194
		      {_4,Config}
	  %% Line 195
	  <Value,{[{'array',Values}|Rest],Config}> when 'true' ->
	      let <_5> =
		  [%% Line 196
		   Value|%% Line 196
			 Values]
	      in  let <_6> =
		      [%% Line 196
		       {'array',_5}|%% Line 196
				    Rest]
		  in  %% Line 196
		      {_6,Config}
	  %% Line 197
	  <_9,_10> when 'true' ->
	      call 'erlang':'error'
		  ('badarg')
	end
'get_key'/1 =
    %% Line 243
    fun (_0) ->
	case _0 of
	  <{[{'object',Key,_2}|_3],_4}> when 'true' ->
	      Key
	  %% Line 244
	  <_5> when 'true' ->
	      call 'erlang':'error'
		  ('badarg')
	end
'get_value'/1 =
    %% Line 247
    fun (_0) ->
	case _0 of
	  <{Value,_X_Config}> when 'true' ->
	      Value
	  %% Line 248
	  <_2> when 'true' ->
	      call 'erlang':'error'
		  ('badarg')
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('jsx_to_term')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('jsx_to_term', _0)
end