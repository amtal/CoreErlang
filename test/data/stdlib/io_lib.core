module 'io_lib' ['build_text'/1,
		 'build_text'/2,
		 'char_list'/1,
		 'chars_length'/1,
		 'collect_chars'/3,
		 'collect_chars'/4,
		 'collect_line'/3,
		 'collect_line'/4,
		 'deep_char_list'/1,
		 'deep_latin1_char_list'/1,
		 'deep_unicode_char_list'/1,
		 'format'/2,
		 'format'/3,
		 'format_prompt'/1,
		 'format_prompt'/2,
		 'fread'/2,
		 'fread'/3,
		 'fwrite'/2,
		 'fwrite'/3,
		 'get_until'/3,
		 'get_until'/4,
		 'indentation'/2,
		 'latin1_char_list'/1,
		 'limit_term'/2,
		 'module_info'/0,
		 'module_info'/1,
		 'nl'/0,
		 'print'/1,
		 'print'/4,
		 'printable_latin1_list'/1,
		 'printable_list'/1,
		 'printable_unicode_list'/1,
		 'quote_atom'/2,
		 'scan_format'/2,
		 'unscan_format'/1,
		 'write'/1,
		 'write'/2,
		 'write'/3,
		 'write_atom'/1,
		 'write_atom_as_latin1'/1,
		 'write_binary'/3,
		 'write_char'/1,
		 'write_char_as_latin1'/1,
		 'write_latin1_char'/1,
		 'write_latin1_string'/1,
		 'write_latin1_string'/2,
		 'write_string'/1,
		 'write_string'/2,
		 'write_string_as_latin1'/1,
		 'write_string_as_latin1'/2,
		 'write_unicode_char'/1,
		 'write_unicode_string'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[105|[111|[95|[108|[105|[98|[46|[101|[114|[108]]]]]]]]]]]]]],1}],
		%% Line 92
		'export_type' =
		    %% Line 92
		    [{'chars',0}|[{'latin1_string',0}|[{'continuation',0}|[{'fread_error',0}|[{'fread_item',0}|[{'format_spec',0}|[{'chars_limit',0}]]]]]]],
		%% Line 97
		'type' =
		    %% Line 97
		    [{'chars',{'type',97,'list',[{'type',97,'union',[{'type',97,'char',[]}|[{'user_type',97,'chars',[]}]]}]},[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{'latin1_string',{'type',98,'list',[{'remote_type',98,[{'atom',98,'unicode'}|[{'atom',98,'latin1_char'}|[[]]]]}]},[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{'depth',{'type',99,'union',[{'op',99,'-',{'integer',99,1}}|[{'type',99,'non_neg_integer',[]}]]},[]}],
		%% Line 101
		'opaque' =
		    %% Line 101
		    [{'continuation',{'type',101,'tuple',[{'ann_type',101,[{'var',101,'Format'}|[{'type',101,'string',[]}]]}|[{'ann_type',102,[{'var',102,'Stack'}|[{'user_type',102,'chars',[]}]]}|[{'ann_type',103,[{'var',103,'Nchars'}|[{'type',103,'non_neg_integer',[]}]]}|[{'ann_type',104,[{'var',104,'Results'}|[{'type',104,'list',[{'type',104,'term',[]}]}]]}]]]]},[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{'fread_error',{'type',106,'union',[{'atom',106,'atom'}|[{'atom',107,'based'}|[{'atom',108,'character'}|[{'atom',109,'float'}|[{'atom',110,'format'}|[{'atom',111,'input'}|[{'atom',112,'integer'}|[{'atom',113,'string'}|[{'atom',114,'unsigned'}]]]]]]]]]},[]}],
		%% Line 116
		'type' =
		    %% Line 116
		    [{'fread_item',{'type',116,'union',[{'type',116,'string',[]}|[{'type',116,'atom',[]}|[{'type',116,'integer',[]}|[{'type',116,'float',[]}]]]]},[]}],
		%% Line 118
		'type' =
		    %% Line 118
		    [{'format_spec',{'type',119,'map',[{'type',120,'map_field_exact',[{'atom',120,'control_char'}|[{'type',120,'char',[]}]]}|[{'type',121,'map_field_exact',[{'atom',121,'args'}|[{'type',121,'list',[{'type',121,'any',[]}]}]]}|[{'type',122,'map_field_exact',[{'atom',122,'width'}|[{'type',122,'union',[{'atom',122,'none'}|[{'type',122,'integer',[]}]]}]]}|[{'type',123,'map_field_exact',[{'atom',123,'adjust'}|[{'type',123,'union',[{'atom',123,'left'}|[{'atom',123,'right'}]]}]]}|[{'type',124,'map_field_exact',[{'atom',124,'precision'}|[{'type',124,'union',[{'atom',124,'none'}|[{'type',124,'integer',[]}]]}]]}|[{'type',125,'map_field_exact',[{'atom',125,'pad_char'}|[{'type',125,'char',[]}]]}|[{'type',126,'map_field_exact',[{'atom',126,'encoding'}|[{'type',126,'union',[{'atom',126,'unicode'}|[{'atom',126,'latin1'}]]}]]}|[{'type',127,'map_field_exact',[{'atom',127,'strings'}|[{'type',127,'boolean',[]}]]}]]]]]]]]},[]}],
		%% Line 134
		'spec' =
		    %% Line 134
		    [{{'fwrite',2},[{'type',134,'bounded_fun',[{'type',134,'fun',[{'type',134,'product',[{'var',134,'Format'}|[{'var',134,'Data'}]]}|[{'user_type',134,'chars',[]}]]}|[[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'Format'}|[{'remote_type',135,[{'atom',135,'io'}|[{'atom',135,'format'}|[[]]]]}]]]]}|[{'type',136,'constraint',[{'atom',136,'is_subtype'}|[[{'var',136,'Data'}|[{'type',136,'list',[{'type',136,'term',[]}]}]]]]}]]]]}]}],
		%% Line 141
		'type' =
		    %% Line 141
		    [{'chars_limit',{'type',141,'integer',[]},[]}],
		%% Line 143
		'spec' =
		    %% Line 143
		    [{{'fwrite',3},[{'type',143,'bounded_fun',[{'type',143,'fun',[{'type',143,'product',[{'var',143,'Format'}|[{'var',143,'Data'}|[{'var',143,'Options'}]]]}|[{'user_type',143,'chars',[]}]]}|[[{'type',144,'constraint',[{'atom',144,'is_subtype'}|[[{'var',144,'Format'}|[{'remote_type',144,[{'atom',144,'io'}|[{'atom',144,'format'}|[[]]]]}]]]]}|[{'type',145,'constraint',[{'atom',145,'is_subtype'}|[[{'var',145,'Data'}|[{'type',145,'list',[{'type',145,'term',[]}]}]]]]}|[{'type',146,'constraint',[{'atom',146,'is_subtype'}|[[{'var',146,'Options'}|[{'type',146,'list',[{'var',146,'Option'}]}]]]]}|[{'type',147,'constraint',[{'atom',147,'is_subtype'}|[[{'var',147,'Option'}|[{'type',147,'tuple',[{'atom',147,'chars_limit'}|[{'var',147,'CharsLimit'}]]}]]]]}|[{'type',148,'constraint',[{'atom',148,'is_subtype'}|[[{'var',148,'CharsLimit'}|[{'user_type',148,'chars_limit',[]}]]]]}]]]]]]]}]}],
		%% Line 153
		'spec' =
		    %% Line 153
		    [{{'fread',2},[{'type',153,'bounded_fun',[{'type',153,'fun',[{'type',153,'product',[{'var',153,'Format'}|[{'var',153,'String'}]]}|[{'var',153,'Result'}]]}|[[{'type',154,'constraint',[{'atom',154,'is_subtype'}|[[{'var',154,'Format'}|[{'type',154,'string',[]}]]]]}|[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'String'}|[{'type',155,'string',[]}]]]]}|[{'type',156,'constraint',[{'atom',156,'is_subtype'}|[[{'var',156,'Result'}|[{'type',156,'union',[{'type',156,'tuple',[{'atom',156,'ok'}|[{'ann_type',156,[{'var',156,'InputList'}|[{'type',156,'list',[{'user_type',156,'fread_item',[]}]}]]}|[{'ann_type',156,[{'var',156,'LeftOverChars'}|[{'type',156,'string',[]}]]}]]]}|[{'type',157,'tuple',[{'atom',157,'more'}|[{'ann_type',157,[{'var',157,'RestFormat'}|[{'type',157,'string',[]}]]}|[{'ann_type',158,[{'var',158,'Nchars'}|[{'type',158,'non_neg_integer',[]}]]}|[{'ann_type',159,[{'var',159,'InputStack'}|[{'user_type',159,'chars',[]}]]}]]]]}|[{'type',160,'tuple',[{'atom',160,'error'}|[{'type',160,'tuple',[{'atom',160,'fread'}|[{'ann_type',160,[{'var',160,'What'}|[{'user_type',160,'fread_error',[]}]]}]]}]]}]]]}]]]]}]]]]]}]}],
		%% Line 165
		'spec' =
		    %% Line 165
		    [{{'fread',3},[{'type',165,'bounded_fun',[{'type',165,'fun',[{'type',165,'product',[{'var',165,'Continuation'}|[{'var',165,'CharSpec'}|[{'var',165,'Format'}]]]}|[{'var',165,'Return'}]]}|[[{'type',166,'constraint',[{'atom',166,'is_subtype'}|[[{'var',166,'Continuation'}|[{'type',166,'union',[{'user_type',166,'continuation',[]}|[{'type',166,'nil',[]}]]}]]]]}|[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'CharSpec'}|[{'type',167,'union',[{'type',167,'string',[]}|[{'atom',167,'eof'}]]}]]]]}|[{'type',168,'constraint',[{'atom',168,'is_subtype'}|[[{'var',168,'Format'}|[{'type',168,'string',[]}]]]]}|[{'type',169,'constraint',[{'atom',169,'is_subtype'}|[[{'var',169,'Return'}|[{'type',169,'union',[{'type',169,'tuple',[{'atom',169,'more'}|[{'ann_type',169,[{'var',169,'Continuation1'}|[{'user_type',169,'continuation',[]}]]}]]}|[{'type',170,'tuple',[{'atom',170,'done'}|[{'var',170,'Result'}|[{'ann_type',170,[{'var',170,'LeftOverChars'}|[{'type',170,'string',[]}]]}]]]}]]}]]]]}|[{'type',171,'constraint',[{'atom',171,'is_subtype'}|[[{'var',171,'Result'}|[{'type',171,'union',[{'type',171,'tuple',[{'atom',171,'ok'}|[{'ann_type',171,[{'var',171,'InputList'}|[{'type',171,'list',[{'user_type',171,'fread_item',[]}]}]]}]]}|[{'atom',172,'eof'}|[{'type',173,'tuple',[{'atom',173,'error'}|[{'type',173,'tuple',[{'atom',173,'fread'}|[{'ann_type',173,[{'var',173,'What'}|[{'user_type',173,'fread_error',[]}]]}]]}]]}]]]}]]]]}]]]]]]]}]}],
		%% Line 178
		'spec' =
		    %% Line 178
		    [{{'format',2},[{'type',178,'bounded_fun',[{'type',178,'fun',[{'type',178,'product',[{'var',178,'Format'}|[{'var',178,'Data'}]]}|[{'user_type',178,'chars',[]}]]}|[[{'type',179,'constraint',[{'atom',179,'is_subtype'}|[[{'var',179,'Format'}|[{'remote_type',179,[{'atom',179,'io'}|[{'atom',179,'format'}|[[]]]]}]]]]}|[{'type',180,'constraint',[{'atom',180,'is_subtype'}|[[{'var',180,'Data'}|[{'type',180,'list',[{'type',180,'term',[]}]}]]]]}]]]]}]}],
		%% Line 190
		'spec' =
		    %% Line 190
		    [{{'format',3},[{'type',190,'bounded_fun',[{'type',190,'fun',[{'type',190,'product',[{'var',190,'Format'}|[{'var',190,'Data'}|[{'var',190,'Options'}]]]}|[{'user_type',190,'chars',[]}]]}|[[{'type',191,'constraint',[{'atom',191,'is_subtype'}|[[{'var',191,'Format'}|[{'remote_type',191,[{'atom',191,'io'}|[{'atom',191,'format'}|[[]]]]}]]]]}|[{'type',192,'constraint',[{'atom',192,'is_subtype'}|[[{'var',192,'Data'}|[{'type',192,'list',[{'type',192,'term',[]}]}]]]]}|[{'type',193,'constraint',[{'atom',193,'is_subtype'}|[[{'var',193,'Options'}|[{'type',193,'list',[{'var',193,'Option'}]}]]]]}|[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'Option'}|[{'type',194,'tuple',[{'atom',194,'chars_limit'}|[{'var',194,'CharsLimit'}]]}]]]]}|[{'type',195,'constraint',[{'atom',195,'is_subtype'}|[[{'var',195,'CharsLimit'}|[{'user_type',195,'chars_limit',[]}]]]]}]]]]]]]}]}],
		%% Line 205
		'spec' =
		    %% Line 205
		    [{{'scan_format',2},[{'type',205,'bounded_fun',[{'type',205,'fun',[{'type',205,'product',[{'var',205,'Format'}|[{'var',205,'Data'}]]}|[{'var',205,'FormatList'}]]}|[[{'type',206,'constraint',[{'atom',206,'is_subtype'}|[[{'var',206,'Format'}|[{'remote_type',206,[{'atom',206,'io'}|[{'atom',206,'format'}|[[]]]]}]]]]}|[{'type',207,'constraint',[{'atom',207,'is_subtype'}|[[{'var',207,'Data'}|[{'type',207,'list',[{'type',207,'term',[]}]}]]]]}|[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'FormatList'}|[{'type',208,'list',[{'type',208,'union',[{'type',208,'char',[]}|[{'user_type',208,'format_spec',[]}]]}]}]]]]}]]]]]}]}],
		%% Line 218
		'spec' =
		    %% Line 218
		    [{{'unscan_format',1},[{'type',218,'bounded_fun',[{'type',218,'fun',[{'type',218,'product',[{'var',218,'FormatList'}]}|[{'type',218,'tuple',[{'var',218,'Format'}|[{'var',218,'Data'}]]}]]}|[[{'type',219,'constraint',[{'atom',219,'is_subtype'}|[[{'var',219,'FormatList'}|[{'type',219,'list',[{'type',219,'union',[{'type',219,'char',[]}|[{'user_type',219,'format_spec',[]}]]}]}]]]]}|[{'type',220,'constraint',[{'atom',220,'is_subtype'}|[[{'var',220,'Format'}|[{'remote_type',220,[{'atom',220,'io'}|[{'atom',220,'format'}|[[]]]]}]]]]}|[{'type',221,'constraint',[{'atom',221,'is_subtype'}|[[{'var',221,'Data'}|[{'type',221,'list',[{'type',221,'term',[]}]}]]]]}]]]]]}]}],
		%% Line 226
		'spec' =
		    %% Line 226
		    [{{'build_text',1},[{'type',226,'bounded_fun',[{'type',226,'fun',[{'type',226,'product',[{'var',226,'FormatList'}]}|[{'user_type',226,'chars',[]}]]}|[[{'type',227,'constraint',[{'atom',227,'is_subtype'}|[[{'var',227,'FormatList'}|[{'type',227,'list',[{'type',227,'union',[{'type',227,'char',[]}|[{'user_type',227,'format_spec',[]}]]}]}]]]]}]]]}]}],
		%% Line 237
		'spec' =
		    %% Line 237
		    [{{'build_text',2},[{'type',237,'bounded_fun',[{'type',237,'fun',[{'type',237,'product',[{'var',237,'FormatList'}|[{'var',237,'Options'}]]}|[{'user_type',237,'chars',[]}]]}|[[{'type',238,'constraint',[{'atom',238,'is_subtype'}|[[{'var',238,'FormatList'}|[{'type',238,'list',[{'type',238,'union',[{'type',238,'char',[]}|[{'user_type',238,'format_spec',[]}]]}]}]]]]}|[{'type',239,'constraint',[{'atom',239,'is_subtype'}|[[{'var',239,'Options'}|[{'type',239,'list',[{'var',239,'Option'}]}]]]]}|[{'type',240,'constraint',[{'atom',240,'is_subtype'}|[[{'var',240,'Option'}|[{'type',240,'tuple',[{'atom',240,'chars_limit'}|[{'var',240,'CharsLimit'}]]}]]]]}|[{'type',241,'constraint',[{'atom',241,'is_subtype'}|[[{'var',241,'CharsLimit'}|[{'user_type',241,'chars_limit',[]}]]]]}]]]]]]}]}],
		%% Line 262
		'spec' =
		    %% Line 262
		    [{{'print',1},[{'type',262,'bounded_fun',[{'type',262,'fun',[{'type',262,'product',[{'var',262,'Term'}]}|[{'user_type',262,'chars',[]}]]}|[[{'type',263,'constraint',[{'atom',263,'is_subtype'}|[[{'var',263,'Term'}|[{'type',263,'term',[]}]]]]}]]]}]}],
		%% Line 268
		'spec' =
		    %% Line 268
		    [{{'print',4},[{'type',268,'bounded_fun',[{'type',268,'fun',[{'type',268,'product',[{'var',268,'Term'}|[{'var',268,'Column'}|[{'var',268,'LineLength'}|[{'var',268,'Depth'}]]]]}|[{'user_type',268,'chars',[]}]]}|[[{'type',269,'constraint',[{'atom',269,'is_subtype'}|[[{'var',269,'Term'}|[{'type',269,'term',[]}]]]]}|[{'type',270,'constraint',[{'atom',270,'is_subtype'}|[[{'var',270,'Column'}|[{'type',270,'non_neg_integer',[]}]]]]}|[{'type',271,'constraint',[{'atom',271,'is_subtype'}|[[{'var',271,'LineLength'}|[{'type',271,'non_neg_integer',[]}]]]]}|[{'type',272,'constraint',[{'atom',272,'is_subtype'}|[[{'var',272,'Depth'}|[{'user_type',272,'depth',[]}]]]]}]]]]]]}]}],
		%% Line 277
		'spec' =
		    %% Line 277
		    [{{'indentation',2},[{'type',277,'bounded_fun',[{'type',277,'fun',[{'type',277,'product',[{'var',277,'String'}|[{'var',277,'StartIndent'}]]}|[{'type',277,'integer',[]}]]}|[[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'String'}|[{'type',278,'string',[]}]]]]}|[{'type',279,'constraint',[{'atom',279,'is_subtype'}|[[{'var',279,'StartIndent'}|[{'type',279,'integer',[]}]]]]}]]]]}]}],
		%% Line 289
		'spec' =
		    %% Line 289
		    [{{'format_prompt',1},[{'type',289,'fun',[{'type',289,'product',[{'type',289,'term',[]}]}|[{'user_type',289,'chars',[]}]]}]}],
		%% Line 294
		'spec' =
		    %% Line 294
		    [{{'format_prompt',2},[{'type',294,'fun',[{'type',294,'product',[{'type',294,'term',[]}|[{'type',294,'atom',[]}]]}|[{'user_type',294,'chars',[]}]]}]}],
		%% Line 321
		'spec' =
		    %% Line 321
		    [{{'write',1},[{'type',321,'bounded_fun',[{'type',321,'fun',[{'type',321,'product',[{'var',321,'Term'}]}|[{'user_type',321,'chars',[]}]]}|[[{'type',322,'constraint',[{'atom',322,'is_subtype'}|[[{'var',322,'Term'}|[{'type',322,'term',[]}]]]]}]]]}]}],
		%% Line 327
		'spec' =
		    %% Line 327
		    [{{'write',3},[{'type',327,'fun',[{'type',327,'product',[{'type',327,'term',[]}|[{'user_type',327,'depth',[]}|[{'type',327,'boolean',[]}]]]}|[{'user_type',327,'chars',[]}]]}]}],
		%% Line 334
		'spec' =
		    %% Line 334
		    [{{'write',2},[{'type',334,'bounded_fun',[{'type',334,'fun',[{'type',334,'product',[{'var',334,'Term'}|[{'var',334,'Depth'}]]}|[{'user_type',334,'chars',[]}]]}|[[{'type',335,'constraint',[{'atom',335,'is_subtype'}|[[{'var',335,'Term'}|[{'type',335,'term',[]}]]]]}|[{'type',336,'constraint',[{'atom',336,'is_subtype'}|[[{'var',336,'Depth'}|[{'user_type',336,'depth',[]}]]]]}]]]]}|[{'type',337,'bounded_fun',[{'type',337,'fun',[{'type',337,'product',[{'var',337,'Term'}|[{'var',337,'Options'}]]}|[{'user_type',337,'chars',[]}]]}|[[{'type',338,'constraint',[{'atom',338,'is_subtype'}|[[{'var',338,'Term'}|[{'type',338,'term',[]}]]]]}|[{'type',339,'constraint',[{'atom',339,'is_subtype'}|[[{'var',339,'Options'}|[{'type',339,'list',[{'var',339,'Option'}]}]]]]}|[{'type',340,'constraint',[{'atom',340,'is_subtype'}|[[{'var',340,'Option'}|[{'type',340,'union',[{'type',340,'tuple',[{'atom',340,'chars_limit'}|[{'var',340,'CharsLimit'}]]}|[{'type',341,'tuple',[{'atom',341,'depth'}|[{'var',341,'Depth'}]]}|[{'type',342,'tuple',[{'atom',342,'encoding'}|[{'type',342,'union',[{'atom',342,'latin1'}|[{'atom',342,'utf8'}|[{'atom',342,'unicode'}]]]}]]}]]]}]]]]}|[{'type',343,'constraint',[{'atom',343,'is_subtype'}|[[{'var',343,'CharsLimit'}|[{'user_type',343,'chars_limit',[]}]]]]}|[{'type',344,'constraint',[{'atom',344,'is_subtype'}|[[{'var',344,'Depth'}|[{'user_type',344,'depth',[]}]]]]}]]]]]]]}]]}],
		%% Line 480
		'spec' =
		    %% Line 480
		    [{{'write_atom',1},[{'type',480,'bounded_fun',[{'type',480,'fun',[{'type',480,'product',[{'var',480,'Atom'}]}|[{'user_type',480,'chars',[]}]]}|[[{'type',481,'constraint',[{'atom',481,'is_subtype'}|[[{'var',481,'Atom'}|[{'type',481,'atom',[]}]]]]}]]]}]}],
		%% Line 486
		'spec' =
		    %% Line 486
		    [{{'write_atom_as_latin1',1},[{'type',486,'bounded_fun',[{'type',486,'fun',[{'type',486,'product',[{'var',486,'Atom'}]}|[{'user_type',486,'latin1_string',[]}]]}|[[{'type',487,'constraint',[{'atom',487,'is_subtype'}|[[{'var',487,'Atom'}|[{'type',487,'atom',[]}]]]]}]]]}]}],
		%% Line 505
		'spec' =
		    %% Line 505
		    [{{'quote_atom',2},[{'type',505,'fun',[{'type',505,'product',[{'type',505,'atom',[]}|[{'user_type',505,'chars',[]}]]}|[{'type',505,'boolean',[]}]]}]}],
		%% Line 544
		'spec' =
		    %% Line 544
		    [{{'write_string',1},[{'type',544,'bounded_fun',[{'type',544,'fun',[{'type',544,'product',[{'var',544,'String'}]}|[{'user_type',544,'chars',[]}]]}|[[{'type',545,'constraint',[{'atom',545,'is_subtype'}|[[{'var',545,'String'}|[{'type',545,'string',[]}]]]]}]]]}]}],
		%% Line 550
		'spec' =
		    %% Line 550
		    [{{'write_string',2},[{'type',550,'fun',[{'type',550,'product',[{'type',550,'string',[]}|[{'type',550,'char',[]}]]}|[{'user_type',550,'chars',[]}]]}]}],
		%% Line 559
		'spec' =
		    %% Line 559
		    [{{'write_latin1_string',1},[{'type',559,'bounded_fun',[{'type',559,'fun',[{'type',559,'product',[{'var',559,'Latin1String'}]}|[{'user_type',559,'latin1_string',[]}]]}|[[{'type',560,'constraint',[{'atom',560,'is_subtype'}|[[{'var',560,'Latin1String'}|[{'user_type',560,'latin1_string',[]}]]]]}]]]}]}],
		%% Line 565
		'spec' =
		    %% Line 565
		    [{{'write_latin1_string',2},[{'type',565,'fun',[{'type',565,'product',[{'user_type',565,'latin1_string',[]}|[{'type',565,'char',[]}]]}|[{'user_type',565,'latin1_string',[]}]]}]}],
		%% Line 570
		'spec' =
		    %% Line 570
		    [{{'write_string_as_latin1',1},[{'type',570,'bounded_fun',[{'type',570,'fun',[{'type',570,'product',[{'var',570,'String'}]}|[{'user_type',570,'latin1_string',[]}]]}|[[{'type',571,'constraint',[{'atom',571,'is_subtype'}|[[{'var',571,'String'}|[{'type',571,'string',[]}]]]]}]]]}]}],
		%% Line 576
		'spec' =
		    %% Line 576
		    [{{'write_string_as_latin1',2},[{'type',576,'fun',[{'type',576,'product',[{'type',576,'string',[]}|[{'type',576,'char',[]}]]}|[{'user_type',576,'latin1_string',[]}]]}]}],
		%% Line 621
		'spec' =
		    %% Line 621
		    [{{'write_char',1},[{'type',621,'bounded_fun',[{'type',621,'fun',[{'type',621,'product',[{'var',621,'Char'}]}|[{'user_type',621,'chars',[]}]]}|[[{'type',622,'constraint',[{'atom',622,'is_subtype'}|[[{'var',622,'Char'}|[{'type',622,'char',[]}]]]]}]]]}]}],
		%% Line 632
		'spec' =
		    %% Line 632
		    [{{'write_latin1_char',1},[{'type',632,'bounded_fun',[{'type',632,'fun',[{'type',632,'product',[{'var',632,'Latin1Char'}]}|[{'user_type',632,'latin1_string',[]}]]}|[[{'type',633,'constraint',[{'atom',633,'is_subtype'}|[[{'var',633,'Latin1Char'}|[{'remote_type',633,[{'atom',633,'unicode'}|[{'atom',633,'latin1_char'}|[[]]]]}]]]]}]]]}]}],
		%% Line 638
		'spec' =
		    %% Line 638
		    [{{'write_char_as_latin1',1},[{'type',638,'bounded_fun',[{'type',638,'fun',[{'type',638,'product',[{'var',638,'Char'}]}|[{'user_type',638,'latin1_string',[]}]]}|[[{'type',639,'constraint',[{'atom',639,'is_subtype'}|[[{'var',639,'Char'}|[{'type',639,'char',[]}]]]]}]]]}]}],
		%% Line 649
		'spec' =
		    %% Line 649
		    [{{'latin1_char_list',1},[{'type',649,'bounded_fun',[{'type',649,'fun',[{'type',649,'product',[{'var',649,'Term'}]}|[{'type',649,'boolean',[]}]]}|[[{'type',650,'constraint',[{'atom',650,'is_subtype'}|[[{'var',650,'Term'}|[{'type',650,'term',[]}]]]]}]]]}]}],
		%% Line 657
		'spec' =
		    %% Line 657
		    [{{'char_list',1},[{'type',657,'bounded_fun',[{'type',657,'fun',[{'type',657,'product',[{'var',657,'Term'}]}|[{'type',657,'boolean',[]}]]}|[[{'type',658,'constraint',[{'atom',658,'is_subtype'}|[[{'var',658,'Term'}|[{'type',658,'term',[]}]]]]}]]]}]}],
		%% Line 667
		'spec' =
		    %% Line 667
		    [{{'deep_latin1_char_list',1},[{'type',667,'bounded_fun',[{'type',667,'fun',[{'type',667,'product',[{'var',667,'Term'}]}|[{'type',667,'boolean',[]}]]}|[[{'type',668,'constraint',[{'atom',668,'is_subtype'}|[[{'var',668,'Term'}|[{'type',668,'term',[]}]]]]}]]]}]}],
		%% Line 683
		'spec' =
		    %% Line 683
		    [{{'deep_char_list',1},[{'type',683,'bounded_fun',[{'type',683,'fun',[{'type',683,'product',[{'var',683,'Term'}]}|[{'type',683,'boolean',[]}]]}|[[{'type',684,'constraint',[{'atom',684,'is_subtype'}|[[{'var',684,'Term'}|[{'type',684,'term',[]}]]]]}]]]}]}],
		%% Line 709
		'spec' =
		    %% Line 709
		    [{{'printable_latin1_list',1},[{'type',709,'bounded_fun',[{'type',709,'fun',[{'type',709,'product',[{'var',709,'Term'}]}|[{'type',709,'boolean',[]}]]}|[[{'type',710,'constraint',[{'atom',710,'is_subtype'}|[[{'var',710,'Term'}|[{'type',710,'term',[]}]]]]}]]]}]}],
		%% Line 737
		'spec' =
		    %% Line 737
		    [{{'printable_list',1},[{'type',737,'bounded_fun',[{'type',737,'fun',[{'type',737,'product',[{'var',737,'Term'}]}|[{'type',737,'boolean',[]}]]}|[[{'type',738,'constraint',[{'atom',738,'is_subtype'}|[[{'var',738,'Term'}|[{'type',738,'term',[]}]]]]}]]]}]}],
		%% Line 750
		'spec' =
		    %% Line 750
		    [{{'printable_unicode_list',1},[{'type',750,'bounded_fun',[{'type',750,'fun',[{'type',750,'product',[{'var',750,'Term'}]}|[{'type',750,'boolean',[]}]]}|[[{'type',751,'constraint',[{'atom',751,'is_subtype'}|[[{'var',751,'Term'}|[{'type',751,'term',[]}]]]]}]]]}]}],
		%% Line 773
		'spec' =
		    %% Line 773
		    [{{'nl',0},[{'type',773,'fun',[{'type',773,'product',[]}|[{'type',773,'string',[]}]]}]}],
		%% Line 994
		'spec' =
		    %% Line 994
		    [{{'limit_term',2},[{'type',994,'fun',[{'type',994,'product',[{'type',994,'term',[]}|[{'type',994,'non_neg_integer',[]}]]}|[{'type',994,'term',[]}]]}]}],
		%% Line 1123
		'spec' =
		    %% Line 1123
		    [{{'chars_length',1},[{'type',1123,'fun',[{'type',1123,'product',[{'user_type',1123,'chars',[]}]}|[{'type',1123,'non_neg_integer',[]}]]}]}]]
'fwrite'/2 =
    %% Line 138
    fun (_0,_1) ->
	%% Line 139
	apply 'format'/2
	    (_0, _1)
'fwrite'/3 =
    %% Line 150
    fun (_0,_1,_2) ->
	%% Line 151
	apply 'format'/3
	    (_0, _1, _2)
'fread'/2 =
    %% Line 162
    fun (_0,_1) ->
	%% Line 163
	call 'io_lib_fread':'fread'
	    (_0, _1)
'fread'/3 =
    %% Line 175
    fun (_0,_1,_2) ->
	%% Line 176
	call 'io_lib_fread':'fread'
	    (_0, _1, _2)
'format'/2 =
    %% Line 182
    fun (_0,_1) ->
	%% Line 183
	try
	    call 'io_lib_format':'fwrite'
		(_0, _1)
	of <_2> ->
	    _2
	catch <_5,_4,_3> ->
	    let <S> =
		primop 'build_stacktrace'
		    (_3)
	    in  do  %% Line 186
		    apply 'test_modules_loaded'/3
			(_5, _4, S)
		    %% Line 187
		    call 'erlang':'error'
			('badarg', [_0|[_1|[]]])
'format'/3 =
    %% Line 197
    fun (_0,_1,_2) ->
	%% Line 198
	try
	    call 'io_lib_format':'fwrite'
		(_0, _1, _2)
	of <_3> ->
	    _3
	catch <_6,_5,_4> ->
	    let <S> =
		primop 'build_stacktrace'
		    (_4)
	    in  do  %% Line 201
		    apply 'test_modules_loaded'/3
			(_6, _5, S)
		    %% Line 202
		    call 'erlang':'error'
			('badarg', [_0|[_1|[]]])
'scan_format'/2 =
    %% Line 210
    fun (_0,_1) ->
	%% Line 211
	try
	    call 'io_lib_format':'scan'
		(_0, _1)
	of <_2> ->
	    _2
	catch <_5,_4,_3> ->
	    let <S> =
		primop 'build_stacktrace'
		    (_3)
	    in  do  %% Line 214
		    apply 'test_modules_loaded'/3
			(_5, _4, S)
		    %% Line 215
		    call 'erlang':'error'
			('badarg', [_0|[_1|[]]])
'unscan_format'/1 =
    %% Line 223
    fun (_0) ->
	%% Line 224
	call 'io_lib_format':'unscan'
	    (_0)
'build_text'/1 =
    %% Line 229
    fun (_0) ->
	%% Line 230
	try
	    call 'io_lib_format':'build'
		(_0)
	of <_1> ->
	    _1
	catch <_4,_3,_2> ->
	    let <S> =
		primop 'build_stacktrace'
		    (_2)
	    in  do  %% Line 233
		    apply 'test_modules_loaded'/3
			(_4, _3, S)
		    %% Line 234
		    call 'erlang':'error'
			('badarg', [_0|[]])
'build_text'/2 =
    %% Line 243
    fun (_0,_1) ->
	%% Line 244
	try
	    call 'io_lib_format':'build'
		(_0, _1)
	of <_2> ->
	    _2
	catch <_5,_4,_3> ->
	    let <S> =
		primop 'build_stacktrace'
		    (_3)
	    in  do  %% Line 247
		    apply 'test_modules_loaded'/3
			(_5, _4, S)
		    %% Line 248
		    call 'erlang':'error'
			('badarg', [_0|[_1|[]]])
'test_modules_loaded'/3 =
    %% Line 255
    fun (_0,_1,_2) ->
	%% Line 257
	case call 'code':'ensure_modules_loaded'
		 (['io_lib_format'|['io_lib_pretty'|['string'|['unicode']]]]) of
	  %% Line 258
	  <'ok'> when 'true' ->
	      'ok'
	  %% Line 259
	  <Error> when 'true' ->
	      call 'erlang':'error'
		  (Error)
	end
'print'/1 =
    %% Line 265
    fun (_0) ->
	%% Line 266
	call 'io_lib_pretty':'print'
	    (_0)
'print'/4 =
    %% Line 274
    fun (_0,_1,_2,_3) ->
	%% Line 275
	call 'io_lib_pretty':'print'
	    (_0, _1, _2, _3)
'indentation'/2 =
    %% Line 281
    fun (_0,_1) ->
	%% Line 282
	call 'io_lib_format':'indentation'
	    (_0, _1)
'format_prompt'/1 =
    %% Line 291
    fun (_0) ->
	%% Line 292
	apply 'format_prompt'/2
	    (_0, 'latin1')
'format_prompt'/2 =
    %% Line 296
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'format',Format,Args},_X_Encoding> when 'true' ->
	      %% Line 297
	      apply 'do_format_prompt'/2
		  (Format, Args)
	  %% Line 298
	  <Prompt,Encoding>
	      when let <_2> =
		    call %% Line 299
			 'erlang':%% Line 299
				  'is_list'
			(%% Line 299
			 Prompt)
		in  let <_3> =
			call %% Line 299
			     'erlang':%% Line 299
				      'is_atom'
			    (%% Line 299
			     Prompt)
		    in  let <_4> =
			    call %% Line 299
				 'erlang':%% Line 299
					  'is_binary'
				(%% Line 299
				 Prompt)
			in  let <_5> =
				call %% Line 299
				     'erlang':%% Line 299
					      'or'
				    (_3, _4)
			    in  %% Line 299
				call 'erlang':'or'
				    (_2, _5) ->
	      let <_6> =
		  apply %% Line 300
			'add_modifier'/2
		      (%% Line 300
		       Encoding, %% Line 300
				 [115])
	      in  %% Line 300
		  apply 'do_format_prompt'/2
		      (_6, [Prompt|[]])
	  %% Line 301
	  <Prompt,Encoding> when 'true' ->
	      let <_7> =
		  apply %% Line 302
			'add_modifier'/2
		      (%% Line 302
		       Encoding, %% Line 302
				 [112])
	      in  %% Line 302
		  apply 'do_format_prompt'/2
		      (_7, [Prompt|[]])
	end
'do_format_prompt'/2 =
    %% Line 304
    fun (_0,_1) ->
	let <_2> =
	    catch
		%% Line 305
		apply 'format'/2
		    (_0, _1)
	in  %% Line 305
	    case _2 of
	      %% Line 306
	      <{'EXIT',_6}> when 'true' ->
		  [63|[63|[63]]]
	      %% Line 307
	      <List> when 'true' ->
		  List
	    end
'add_modifier'/2 =
    %% Line 310
    fun (_0,_1) ->
	case <_0,_1> of
	  <'latin1',C> when 'true' ->
	      %% Line 311
	      [126|C]
	  %% Line 312
	  <_4,C> when 'true' ->
	      %% Line 313
	      [126|[116|C]]
	end
'write'/1 =
    %% Line 324
    fun (_0) ->
	%% Line 325
	apply 'write1'/3
	    (_0, -1, 'latin1')
'write'/3 =
    %% Line 329
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Term,D,'true'> when 'true' ->
	      %% Line 330
	      call 'io_lib_pretty':'print'
		  (Term, 1, 80, D)
	  %% Line 331
	  <Term,D,'false'> when 'true' ->
	      %% Line 332
	      apply 'write'/2
		  (Term, D)
	  ( <_5,_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4,_3})
		  -| [{'function_name',{'write',3}}] )
	    -| ['compiler_generated'] )
	end
'write'/2 =
    %% Line 346
    fun (_0,_1) ->
	case <_0,_1> of
	  <Term,Options>
	      when call 'erlang':'is_list'
		    (Options) ->
	      let <Depth> =
		  apply %% Line 347
			'get_option'/3
		      (%% Line 347
		       'depth', %% Line 347
				Options, %% Line 347
					 -1)
	      in  let <_4> =
		      call %% Line 348
			   'epp':%% Line 348
				 'default_encoding'
			  ()
		  in  let <Encoding> =
			  apply %% Line 348
				'get_option'/3
			      (%% Line 348
			       'encoding', %% Line 348
					   Options, _4)
		      in  let <CharsLimit> =
			      apply %% Line 349
				    'get_option'/3
				  (%% Line 349
				   'chars_limit', %% Line 349
						  Options, %% Line 349
							   -1)
			  in  %% Line 350
			      case <> of
				%% Line 351
				<>
				    when let <_8> =
					  call 'erlang':'=:='
					      (Depth, 0)
				      in  let <_9> =
					      call 'erlang':'=:='
						  (CharsLimit, 0)
					  in  call 'erlang':'or'
						  (_8, _9) ->
				    %% Line 352
				    [46|[46|[46]]]
				%% Line 353
				<>
				    when call 'erlang':'<'
					  (CharsLimit,
					   0) ->
				    %% Line 354
				    apply 'write1'/3
					(Term, Depth, Encoding)
				%% Line 355
				<>
				    when call 'erlang':'>'
					  (CharsLimit,
					   0) ->
				    let <RecDefFun> =
					fun (_11,_10) ->
					    %% Line 356
					    'no'
				    in  let <If> =
					    call %% Line 357
						 'io_lib_pretty':%% Line 357
								 'intermediate'
						(%% Line 358
						 Term, %% Line 358
						       Depth, %% Line 358
							      CharsLimit, %% Line 358
									  RecDefFun, %% Line 358
										     Encoding, ( 'false'
												 -| ['compiler_generated'] ))
					in  %% Line 359
					    call 'io_lib_pretty':'write'
						(If)
				( <> when 'true' ->
				      primop 'match_fail'
					  ('if_clause')
				  -| ['compiler_generated'] )
			      end
	  %% Line 361
	  <Term,Depth> when 'true' ->
	      %% Line 362
	      apply 'write'/2
		  (Term, [{'depth',Depth}|[{'encoding','latin1'}]])
	end
'write1'/3 =
    %% Line 364
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <_X_Term,0,_X_E> when 'true' ->
	      [46|[46|[46]]]
	  %% Line 365
	  <Term,_X_D,_X_E>
	      when call 'erlang':'is_integer'
		    (Term) ->
	      call 'erlang':'integer_to_list'
		  (Term)
	  %% Line 366
	  <Term,_X_D,_X_E>
	      when call 'erlang':'is_float'
		    (Term) ->
	      call 'io_lib_format':'fwrite_g'
		  (Term)
	  %% Line 367
	  <Atom,_X_D,'latin1'>
	      when call 'erlang':'is_atom'
		    (Atom) ->
	      apply 'write_atom_as_latin1'/1
		  (Atom)
	  %% Line 368
	  <Atom,_X_D,_X_E>
	      when call 'erlang':'is_atom'
		    (Atom) ->
	      apply 'write_atom'/1
		  (Atom)
	  %% Line 369
	  <Term,_X_D,_X_E>
	      when call 'erlang':'is_port'
		    (Term) ->
	      apply 'write_port'/1
		  (Term)
	  %% Line 370
	  <Term,_X_D,_X_E>
	      when call 'erlang':'is_pid'
		    (Term) ->
	      call 'erlang':'pid_to_list'
		  (Term)
	  %% Line 371
	  <Term,_X_D,_X_E>
	      when call 'erlang':'is_reference'
		    (Term) ->
	      apply 'write_ref'/1
		  (Term)
	  %% Line 372
	  <Term = #{#<_15>('all',1,'binary',['unsigned'|['big']])}#,D,_X_E> when 'true' ->
	      apply 'write_binary'/2
		  (Term, D)
	  %% Line 373
	  <[],_X_D,_X_E> when 'true' ->
	      [91|[93]]
	  %% Line 374
	  <{},_X_D,_X_E> when 'true' ->
	      [123|[125]]
	  %% Line 375
	  <[H|T],D,E> when 'true' ->
	      %% Line 376
	      case <> of
		%% Line 377
		<>
		    when call 'erlang':'=:='
			  (D,
			   1) ->
		    [91|[46|[46|[46|[93]]]]]
		%% Line 378
		<> when 'true' ->
		    let <_3> =
			call %% Line 379
			     'erlang':%% Line 379
				      '-'
			    (%% Line 379
			     D, %% Line 379
				1)
		    in  let <_4> =
			    apply %% Line 379
				  'write1'/3
				(%% Line 379
				 H, _3, %% Line 379
					E)
			in  let <_5> =
				call %% Line 379
				     'erlang':%% Line 379
					      '-'
				    (%% Line 379
				     D, %% Line 379
					1)
			    in  let <_6> =
				    apply %% Line 379
					  'write_tail'/3
					(%% Line 379
					 T, _5, %% Line 379
						E)
				in  %% Line 379
				    [91|[[_4|_6]|[93]]]
	      end
	  %% Line 381
	  <F,_X_D,_X_E>
	      when call 'erlang':'is_function'
		    (F) ->
	      %% Line 382
	      call 'erlang':'fun_to_list'
		  (F)
	  %% Line 383
	  <Term,D,E>
	      when call 'erlang':'is_map'
		    (Term) ->
	      %% Line 384
	      apply 'write_map'/3
		  (Term, D, E)
	  %% Line 385
	  <T,D,E>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      %% Line 386
	      case <> of
		%% Line 387
		<>
		    when call 'erlang':'=:='
			  (D,
			   1) ->
		    [123|[46|[46|[46|[125]]]]]
		%% Line 388
		<> when 'true' ->
		    let <_8> =
			call %% Line 390
			     'erlang':%% Line 390
				      'element'
			    (%% Line 390
			     1, %% Line 390
				T)
		    in  let <_7> =
			    call %% Line 390
				 'erlang':%% Line 390
					  '-'
				(%% Line 390
				 D, %% Line 390
				    1)
			in  let <_9> =
				apply %% Line 390
				      'write1'/3
				    (_8, _7, %% Line 390
					     E)
			    in  let <_10> =
				    call %% Line 390
					 'erlang':%% Line 390
						  '-'
					(%% Line 390
					 D, %% Line 390
					    1)
				in  let <_11> =
					apply %% Line 390
					      'write_tuple'/4
					    (%% Line 390
					     T, %% Line 390
						2, _10, %% Line 390
							E)
				    in  %% Line 389
					[123|%% Line 390
					     [[_9|_11]|%% Line 391
						       [125]]]
	      end
	  ( <_14,_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13,_12})
		  -| [{'function_name',{'write1',3}}] )
	    -| ['compiler_generated'] )
	end
'write_tail'/3 =
    %% Line 397
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[],_X_D,_X_E> when 'true' ->
	      []
	  %% Line 398
	  <_12,1,_X_E> when 'true' ->
	      [124|[46|[46|[46]]]]
	  %% Line 399
	  <[H|T],D,E> when 'true' ->
	      let <_3> =
		  call %% Line 400
		       'erlang':%% Line 400
				'-'
		      (%% Line 400
		       D, %% Line 400
			  1)
	      in  let <_4> =
		      apply %% Line 400
			    'write1'/3
			  (%% Line 400
			   H, _3, %% Line 400
				  E)
		  in  let <_5> =
			  call %% Line 400
			       'erlang':%% Line 400
					'-'
			      (%% Line 400
			       D, %% Line 400
				  1)
		      in  let <_6> =
			      apply %% Line 400
				    'write_tail'/3
				  (%% Line 400
				   T, _5, %% Line 400
					  E)
			  in  %% Line 400
			      [44|[_4|_6]]
	  %% Line 401
	  <Other,D,E> when 'true' ->
	      let <_7> =
		  call %% Line 402
		       'erlang':%% Line 402
				'-'
		      (%% Line 402
		       D, %% Line 402
			  1)
	      in  let <_8> =
		      apply %% Line 402
			    'write1'/3
			  (%% Line 402
			   Other, _7, %% Line 402
				      E)
		  in  %% Line 402
		      [124|[_8|[]]]
	end
'write_tuple'/4 =
    %% Line 404
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <T,I,_X_D,_X_E>
	      when try
		    let <_4> =
			call 'erlang':'tuple_size'
			    (T)
		    in  call 'erlang':'>'
			    (I, _4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      []
	  %% Line 405
	  <_15,_X_I,1,_X_E> when 'true' ->
	      [44|[46|[46|[46]]]]
	  %% Line 406
	  <T,I,D,E> when 'true' ->
	      let <_6> =
		  call %% Line 407
		       'erlang':%% Line 407
				'element'
		      (%% Line 407
		       I, %% Line 407
			  T)
	      in  let <_5> =
		      call %% Line 407
			   'erlang':%% Line 407
				    '-'
			  (%% Line 407
			   D, %% Line 407
			      1)
		  in  let <_7> =
			  apply %% Line 407
				'write1'/3
			      (_6, _5, %% Line 407
				       E)
		      in  let <_9> =
			      call %% Line 407
				   'erlang':%% Line 407
					    '+'
				  (%% Line 407
				   I, %% Line 407
				      1)
			  in  let <_8> =
				  call %% Line 407
				       'erlang':%% Line 407
						'-'
				      (%% Line 407
				       D, %% Line 407
					  1)
			      in  let <_10> =
				      apply %% Line 407
					    'write_tuple'/4
					  (%% Line 407
					   T, _9, _8, %% Line 407
						      E)
				  in  %% Line 407
				      [44|[_7|_10]]
	end
'write_port'/1 =
    %% Line 409
    fun (_0) ->
	%% Line 410
	call 'erlang':'port_to_list'
	    (_0)
'write_ref'/1 =
    %% Line 412
    fun (_0) ->
	%% Line 413
	call 'erlang':'ref_to_list'
	    (_0)
'write_map'/3 =
    %% Line 415
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <_11,1,_X_E> when 'true' ->
	      [35|[123|[125]]]
	  %% Line 416
	  <Map,D,E>
	      when call 'erlang':'is_integer'
		    (D) ->
	      let <I> =
		  call %% Line 417
		       'maps':%% Line 417
			      'iterator'
		      (%% Line 417
		       Map)
	      in  %% Line 418
		  case call 'maps':'next'
			   (I) of
		    %% Line 419
		    <{K,V,NextI}> when 'true' ->
			let <D0> =
			    call %% Line 420
				 'erlang':%% Line 420
					  '-'
				(%% Line 420
				 D, %% Line 420
				    1)
			in  let <W> =
				apply %% Line 421
				      'write_map_assoc'/4
				    (%% Line 421
				     K, %% Line 421
					V, %% Line 421
					   D0, %% Line 421
					       E)
			    in  let <_6> =
				    apply %% Line 422
					  'write_map_body'/4
					(%% Line 422
					 NextI, %% Line 422
						D0, %% Line 422
						    D0, %% Line 422
							E)
				in  %% Line 422
				    [35|[123|[[W|_6]|[125]]]]
		    %% Line 423
		    <'none'> when 'true' ->
			[35|[123|[125]]]
		    ( <_7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_7})
		      -| ['compiler_generated'] )
		  end
	  ( <_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8})
		  -| [{'function_name',{'write_map',3}}] )
	    -| ['compiler_generated'] )
	end
'write_map_body'/4 =
    %% Line 426
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <_12,1,_X_D0,_X_E> when 'true' ->
	      [44|[46|[46|[46]]]]
	  %% Line 427
	  <I,D,D0,E> when 'true' ->
	      %% Line 428
	      case call 'maps':'next'
		       (I) of
		%% Line 429
		<{K,V,NextI}> when 'true' ->
		    let <W> =
			apply %% Line 430
			      'write_map_assoc'/4
			    (%% Line 430
			     K, %% Line 430
				V, %% Line 430
				   D0, %% Line 430
				       E)
		    in  let <_5> =
			    call %% Line 431
				 'erlang':%% Line 431
					  '-'
				(%% Line 431
				 D, %% Line 431
				    1)
			in  let <_6> =
				apply %% Line 431
				      'write_map_body'/4
				    (%% Line 431
				     NextI, _5, %% Line 431
						D0, %% Line 431
						    E)
			    in  %% Line 431
				[44|[W|_6]]
		%% Line 432
		<'none'> when 'true' ->
		    []
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_7})
		  -| ['compiler_generated'] )
	      end
	end
'write_map_assoc'/4 =
    %% Line 435
    fun (_0,_1,_2,_3) ->
	let <_4> =
	    apply %% Line 436
		  'write1'/3
		(_0, _2, _3)
	in  let <_5> =
		apply %% Line 436
		      'write1'/3
		    (_1, _2, _3)
	    in  %% Line 436
		[_4|[[32|[61|[62|[32]]]]|[_5|[]]]]
'write_binary'/2 =
    %% Line 438
    fun (_0,_1) ->
	case <_0,_1> of
	  <B,D>
	      when call 'erlang':'is_integer'
		    (D) ->
	      %% Line 439
	      case apply 'write_binary'/3
		       (B, D, -1) of
		<{S,_6}> when 'true' ->
		    %% Line 440
		    S
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'write_binary',2}}] )
	    -| ['compiler_generated'] )
	end
'write_binary'/3 =
    %% Line 442
    fun (_0,_1,_2) ->
	let <_3> =
	    apply %% Line 443
		  'tsub'/2
		(_2, %% Line 443
		     4)
	in  %% Line 443
	    case apply 'write_binary_body'/4
		     (_0, _1, _3, []) of
	      <{S,Rest}> when 'true' ->
		  let <_5> =
		      call %% Line 444
			   'lists':%% Line 444
				   'reverse'
			  (%% Line 444
			   S)
		  in  %% Line 444
		      {[60|[60|[_5|[62|[62]]]]],Rest}
	      ( <_4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_4})
		-| ['compiler_generated'] )
	    end
'write_binary_body'/4 =
    %% Line 446
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <B = #{}#,_X_D,_X_T,Acc> when 'true' ->
	      %% Line 447
	      {Acc,B}
	  %% Line 448
	  <B,D,T,Acc>
	      when let <_4> =
		    call 'erlang':'=:='
			(D, 1)
		in  let <_5> =
			call 'erlang':'=:='
			    (T, 0)
		    in  call 'erlang':'or'
			    (_4, _5) ->
	      %% Line 449
	      {[[46|[46|[46]]]|Acc],B}
	  %% Line 450
	  <#{#<X>(8,1,'integer',['unsigned'|['big']])}#,_X_D,_X_T,Acc> when 'true' ->
	      let <_6> =
		  call %% Line 451
		       'erlang':%% Line 451
				'integer_to_list'
		      (%% Line 451
		       X)
	      in  %% Line 451
		  {[_6|Acc],#{}#}
	  %% Line 452
	  <#{#<X>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',1,'binary',['unsigned'|['big']])}#,D,T,Acc> when 'true' ->
	      let <S> =
		  call %% Line 453
		       'erlang':%% Line 453
				'integer_to_list'
		      (%% Line 453
		       X)
	      in  let <_11> =
		      call %% Line 454
			   'erlang':%% Line 454
				    '-'
			  (%% Line 454
			   D, %% Line 454
			      1)
		  in  let <_8> =
			  call %% Line 454
			       'erlang':%% Line 454
					'length'
			      (%% Line 454
			       S)
		      in  let <_9> =
			      call %% Line 454
				   'erlang':%% Line 454
					    '+'
				  (_8, %% Line 454
				       1)
			  in  let <_10> =
				  apply %% Line 454
					'tsub'/2
				      (%% Line 454
				       T, _9)
			      in  %% Line 454
				  apply 'write_binary_body'/4
				      (Rest, _11, _10, [44|[S|Acc]])
	  %% Line 455
	  <B,_X_D,_X_T,Acc> when 'true' ->
	      let <L> =
		  call %% Line 456
		       'erlang':%% Line 456
				'bit_size'
		      (%% Line 456
		       B)
	      in  %% Line 457
		  case B of
		    <#{#<X>(L,1,'integer',['unsigned'|['big']])}#> when 'true' ->
			let <_14> =
			    call %% Line 458
				 'erlang':%% Line 458
					  'integer_to_list'
				(%% Line 458
				 L)
			in  let <_15> =
				call %% Line 458
				     'erlang':%% Line 458
					      'integer_to_list'
				    (%% Line 458
				     X)
			    in  %% Line 458
				{[_14|[58|[_15|Acc]]],#{}#}
		    ( <_13> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_13})
		      -| ['compiler_generated'] )
		  end
	end
'tsub'/2 =
    %% Line 461
    fun (_0,_1) ->
	case <_0,_1> of
	  <T,_4>
	      when call 'erlang':'<'
		    (T,
		     0) ->
	      T
	  %% Line 462
	  <T,E>
	      when call 'erlang':'>='
		    (T,
		     E) ->
	      call 'erlang':'-'
		  (T, E)
	  %% Line 463
	  <_5,_6> when 'true' ->
	      0
	end
'get_option'/3 =
    %% Line 465
    fun (_0,_1,_2) ->
	%% Line 466
	case call 'lists':'keyfind'
		 (_0, 1, _1) of
	  %% Line 467
	  <'false'> when 'true' ->
	      _2
	  %% Line 468
	  <{_7,Value}>
	      when call 'erlang':'=:='
		    (_7,
		     _0) ->
	      Value
	  %% Line 469
	  <_8> when 'true' ->
	      _2
	end
'write_atom'/1 =
    %% Line 483
    fun (_0) ->
	let <_1> = 'write_string'/2
	in  %% Line 484
	    apply 'write_possibly_quoted_atom'/2
		(_0, _1)
'write_atom_as_latin1'/1 =
    %% Line 489
    fun (_0) ->
	let <_1> = 'write_string_as_latin1'/2
	in  %% Line 490
	    apply 'write_possibly_quoted_atom'/2
		(_0, _1)
'write_possibly_quoted_atom'/2 =
    %% Line 492
    fun (_0,_1) ->
	let <Chars> =
	    call %% Line 493
		 'erlang':%% Line 493
			  'atom_to_list'
		(_0)
	in  %% Line 494
	    case apply 'quote_atom'/2
		     (_0, Chars) of
	      %% Line 495
	      <'true'> when 'true' ->
		  %% Line 496
		  apply _1
		      (Chars, 39)
	      %% Line 497
	      <'false'> when 'true' ->
		  %% Line 498
		  Chars
	      ( <_3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_3})
		-| ['compiler_generated'] )
	    end
'quote_atom'/2 =
    %% Line 507
    fun (_0,_1) ->
	%% Line 508
	case call 'erl_scan':'reserved_word'
		 (_0) of
	  %% Line 509
	  <'true'> when 'true' ->
	      'true'
	  %% Line 510
	  <'false'> when 'true' ->
	      %% Line 511
	      case _1 of
		%% Line 512
		<[C|Cs]>
		    when let <_2> =
			  call 'erlang':'>='
			      (C, 97)
		      in  let <_3> =
			      call 'erlang':'=<'
				  (C, 122)
			  in  call 'erlang':'and'
				  (_2, _3) ->
		    let <_4> =
			apply %% Line 513
			      'name_chars'/1
			    (%% Line 513
			     Cs)
		    in  %% Line 513
			call 'erlang':'not'
			    (_4)
		%% Line 514
		<[C|Cs]>
		    when try
			  let <_5> =
			      call 'erlang':'>='
				  (C, 223)
			  in  let <_6> =
				  call 'erlang':'=<'
				      (C, 255)
			      in  let <_7> =
				      call 'erlang':'=/='
					  (C, 247)
				  in  let <_8> =
					  call 'erlang':'and'
					      (_6, _7)
				      in  call 'erlang':'and'
					      (_5, _8)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_9> =
			apply %% Line 515
			      'name_chars'/1
			    (%% Line 515
			     Cs)
		    in  %% Line 515
			call 'erlang':'not'
			    (_9)
		%% Line 516
		<_14> when 'true' ->
		    'true'
	      end
	  ( <_11> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_11})
	    -| ['compiler_generated'] )
	end
'name_chars'/1 =
    %% Line 520
    fun (_0) ->
	case _0 of
	  <[C|Cs]> when 'true' ->
	      %% Line 521
	      case apply 'name_char'/1
		       (C) of
		%% Line 522
		<'true'> when 'true' ->
		    apply 'name_chars'/1
			(Cs)
		%% Line 523
		<'false'> when 'true' ->
		    'false'
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 525
	  <[]> when 'true' ->
	      'true'
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'name_chars',1}}] )
	    -| ['compiler_generated'] )
	end
'name_char'/1 =
    %% Line 527
    fun (_0) ->
	case _0 of
	  <C>
	      when let <_1> =
		    call 'erlang':'>='
			(_0, 97)
		in  let <_2> =
			call 'erlang':'=<'
			    (_0, 122)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      'true'
	  %% Line 528
	  <C>
	      when try
		    let <_3> =
			call 'erlang':'>='
			    (_0, 223)
		    in  let <_4> =
			    call 'erlang':'=<'
				(_0, 255)
			in  let <_5> =
				call 'erlang':'=/='
				    (_0, 247)
			    in  let <_6> =
				    call 'erlang':'and'
					(_4, _5)
				in  call 'erlang':'and'
					(_3, _6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'true'
	  %% Line 529
	  <C>
	      when let <_7> =
		    call 'erlang':'>='
			(_0, 65)
		in  let <_8> =
			call 'erlang':'=<'
			    (_0, 90)
		    in  call 'erlang':'and'
			    (_7, _8) ->
	      'true'
	  %% Line 530
	  <C>
	      when try
		    let <_9> =
			call 'erlang':'>='
			    (_0, 192)
		    in  let <_10> =
			    call 'erlang':'=<'
				(_0, 222)
			in  let <_11> =
				call 'erlang':'=/='
				    (_0, 215)
			    in  let <_12> =
				    call 'erlang':'and'
					(_10, _11)
				in  call 'erlang':'and'
					(_9, _12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'true'
	  %% Line 531
	  <C>
	      when let <_13> =
		    call 'erlang':'>='
			(_0, 48)
		in  let <_14> =
			call 'erlang':'=<'
			    (_0, 57)
		    in  call 'erlang':'and'
			    (_13, _14) ->
	      'true'
	  %% Line 532
	  <95> when 'true' ->
	      'true'
	  %% Line 533
	  <64> when 'true' ->
	      'true'
	  %% Line 534
	  <_16> when 'true' ->
	      'false'
	end
'write_string'/1 =
    %% Line 547
    fun (_0) ->
	%% Line 548
	apply 'write_string'/2
	    (_0, 34)
'write_string'/2 =
    %% Line 552
    fun (_0,_1) ->
	let <_2> =
	    apply %% Line 553
		  'write_string1'/3
		(%% Line 553
		 'unicode_as_unicode', _0, _1)
	in  %% Line 553
	    [_1|_2]
'write_unicode_string'/1 =
    %% Line 556
    fun (_0) ->
	%% Line 557
	apply 'write_string'/1
	    (_0)
'write_latin1_string'/1 =
    %% Line 562
    fun (_0) ->
	%% Line 563
	apply 'write_latin1_string'/2
	    (_0, 34)
'write_latin1_string'/2 =
    %% Line 567
    fun (_0,_1) ->
	let <_2> =
	    apply %% Line 568
		  'write_string1'/3
		(%% Line 568
		 'latin1', _0, _1)
	in  %% Line 568
	    [_1|_2]
'write_string_as_latin1'/1 =
    %% Line 573
    fun (_0) ->
	%% Line 574
	apply 'write_string_as_latin1'/2
	    (_0, 34)
'write_string_as_latin1'/2 =
    %% Line 578
    fun (_0,_1) ->
	let <_2> =
	    apply %% Line 579
		  'write_string1'/3
		(%% Line 579
		 'unicode_as_latin1', _0, _1)
	in  %% Line 579
	    [_1|_2]
'write_string1'/3 =
    %% Line 581
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <_7,[],Q> when 'true' ->
	      %% Line 582
	      [Q|[]]
	  %% Line 583
	  <Enc,[C|Cs],Q> when 'true' ->
	      let <_3> =
		  apply %% Line 584
			'write_string1'/3
		      (%% Line 584
		       Enc, %% Line 584
			    Cs, %% Line 584
				Q)
	      in  %% Line 584
		  apply 'string_char'/4
		      (Enc, C, Q, _3)
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'write_string1',3}}] )
	    -| ['compiler_generated'] )
	end
'string_char'/4 =
    %% Line 586
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <_24,Q,_25,Tail>
	      when call 'erlang':'=:='
		    (_25,
		     Q) ->
	      [92|[Q|Tail]]
	  %% Line 587
	  <_26,92,_27,Tail> when 'true' ->
	      [92|[92|Tail]]
	  %% Line 588
	  <_28,C,_29,Tail>
	      when let <_4> =
		    call 'erlang':'>='
			(C, 32)
		in  let <_5> =
			call 'erlang':'=<'
			    (C, 126)
		    in  call 'erlang':'and'
			    (_4, _5) ->
	      %% Line 589
	      [C|Tail]
	  %% Line 590
	  <'latin1',C,_30,Tail>
	      when let <_6> =
		    call 'erlang':'>='
			(C, 160)
		in  let <_7> =
			call 'erlang':'=<'
			    (C, 255)
		    in  call 'erlang':'and'
			    (_6, _7) ->
	      %% Line 591
	      [C|Tail]
	  %% Line 592
	  <'unicode_as_unicode',C,_31,Tail>
	      when call 'erlang':'>='
		    (C,
		     160) ->
	      %% Line 593
	      [C|Tail]
	  %% Line 594
	  <'unicode_as_latin1',C,_32,Tail>
	      when let <_8> =
		    call 'erlang':'>='
			(C, 160)
		in  let <_9> =
			call 'erlang':'=<'
			    (C, 255)
		    in  call 'erlang':'and'
			    (_8, _9) ->
	      %% Line 595
	      [C|Tail]
	  %% Line 596
	  <'unicode_as_latin1',C,_33,Tail>
	      when call 'erlang':'>='
		    (C,
		     255) ->
	      let <_11> =
		  call %% Line 597
		       'erlang':%% Line 597
				'integer_to_list'
		      (%% Line 597
		       C, %% Line 597
			  16)
	      in  let <_10> =
		      [125|%% Line 597
			   Tail]
		  in  let <_12> =
			  call %% Line 597
			       'erlang':%% Line 597
					'++'
			      (_11, _10)
		      in  %% Line 597
			  [92|[120|[123|_12]]]
	  %% Line 598
	  <_34,10,_35,Tail> when 'true' ->
	      [92|[110|Tail]]
	  %% Line 599
	  <_36,13,_37,Tail> when 'true' ->
	      [92|[114|Tail]]
	  %% Line 600
	  <_38,9,_39,Tail> when 'true' ->
	      [92|[116|Tail]]
	  %% Line 601
	  <_40,11,_41,Tail> when 'true' ->
	      [92|[118|Tail]]
	  %% Line 602
	  <_42,8,_43,Tail> when 'true' ->
	      [92|[98|Tail]]
	  %% Line 603
	  <_44,12,_45,Tail> when 'true' ->
	      [92|[102|Tail]]
	  %% Line 604
	  <_46,27,_47,Tail> when 'true' ->
	      [92|[101|Tail]]
	  %% Line 605
	  <_48,127,_49,Tail> when 'true' ->
	      [92|[100|Tail]]
	  %% Line 606
	  <_50,C,_51,Tail>
	      when call 'erlang':'<'
		    (C,
		     160) ->
	      let <_13> =
		  call %% Line 607
		       'erlang':%% Line 607
				'bsr'
		      (%% Line 607
		       C, %% Line 607
			  6)
	      in  let <C1> =
		      call %% Line 607
			   'erlang':%% Line 607
				    '+'
			  (_13, %% Line 607
				48)
		  in  let <_15> =
			  call %% Line 608
			       'erlang':%% Line 608
					'bsr'
			      (%% Line 608
			       C, %% Line 608
				  3)
		      in  let <_16> =
			      call %% Line 608
				   'erlang':%% Line 608
					    'band'
				  (_15, %% Line 608
					7)
			  in  let <C2> =
				  call %% Line 608
				       'erlang':%% Line 608
						'+'
				      (_16, %% Line 608
					    48)
			      in  let <_18> =
				      call %% Line 609
					   'erlang':%% Line 609
						    'band'
					  (%% Line 609
					   C, %% Line 609
					      7)
				  in  let <C3> =
					  call %% Line 609
					       'erlang':%% Line 609
							'+'
					      (_18, %% Line 609
						    48)
				      in  %% Line 610
					  [92|[C1|[C2|[C3|Tail]]]]
	  ( <_23,_22,_21,_20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_23,_22,_21,_20})
		  -| [{'function_name',{'string_char',4}}] )
	    -| ['compiler_generated'] )
	end
'write_char'/1 =
    %% Line 624
    fun (_0) ->
	case _0 of
	  <32> when 'true' ->
	      [36|[92|[115]]]
	  %% Line 625
	  <C>
	      when let <_1> =
		    call 'erlang':'is_integer'
			(_0)
		in  let <_2> =
			call 'erlang':'>='
			    (_0, 0)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      let <_4> =
		  apply %% Line 626
			'string_char'/4
		      (%% Line 626
		       'unicode_as_unicode', %% Line 626
					     C, %% Line 626
						-1, %% Line 626
						    [])
	      in  %% Line 626
		  [36|_4]
	  ( <_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5})
		  -| [{'function_name',{'write_char',1}}] )
	    -| ['compiler_generated'] )
	end
'write_unicode_char'/1 =
    %% Line 629
    fun (_0) ->
	%% Line 630
	apply 'write_char'/1
	    (_0)
'write_latin1_char'/1 =
    %% Line 635
    fun (_0) ->
	case _0 of
	  <Lat1>
	      when try
		    let <_1> =
			call 'erlang':'is_integer'
			    (_0)
		    in  let <_2> =
			    call 'erlang':'>='
				(_0, 0)
			in  let <_3> =
				call 'erlang':'=<'
				    (_0, 255)
			    in  let <_4> =
				    call 'erlang':'and'
					(_2, _3)
				in  call 'erlang':'and'
					(_1, _4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_6> =
		  apply %% Line 636
			'string_char'/4
		      (%% Line 636
		       'latin1', %% Line 636
				 Lat1, %% Line 636
				       -1, %% Line 636
					   [])
	      in  %% Line 636
		  [36|_6]
	  ( <_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7})
		  -| [{'function_name',{'write_latin1_char',1}}] )
	    -| ['compiler_generated'] )
	end
'write_char_as_latin1'/1 =
    %% Line 641
    fun (_0) ->
	case _0 of
	  <Uni>
	      when let <_1> =
		    call 'erlang':'is_integer'
			(_0)
		in  let <_2> =
			call 'erlang':'>='
			    (_0, 0)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      let <_4> =
		  apply %% Line 642
			'string_char'/4
		      (%% Line 642
		       'unicode_as_latin1', %% Line 642
					    Uni, %% Line 642
						 -1, %% Line 642
						     [])
	      in  %% Line 642
		  [36|_4]
	  ( <_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5})
		  -| [{'function_name',{'write_char_as_latin1',1}}] )
	    -| ['compiler_generated'] )
	end
'latin1_char_list'/1 =
    %% Line 652
    fun (_0) ->
	case _0 of
	  <[C|Cs]>
	      when try
		    let <_1> =
			call 'erlang':'is_integer'
			    (C)
		    in  let <_2> =
			    call 'erlang':'>='
				(C, 0)
			in  let <_3> =
				call 'erlang':'=<'
				    (C, 255)
			    in  let <_4> =
				    call 'erlang':'and'
					(_2, _3)
				in  call 'erlang':'and'
					(_1, _4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 653
	      apply 'latin1_char_list'/1
		  (Cs)
	  %% Line 654
	  <[]> when 'true' ->
	      'true'
	  %% Line 655
	  <_6> when 'true' ->
	      'false'
	end
'char_list'/1 =
    %% Line 660
    fun (_0) ->
	case _0 of
	  <[C|Cs]>
	      when let <_5> =
		    try
			let <_1> =
			    call 'erlang':'is_integer'
				(C)
			in  let <_2> =
				call 'erlang':'>='
				    (C, 0)
			    in  let <_3> =
				    call 'erlang':'<'
					(C, 55296)
				in  let <_4> =
					call 'erlang':'and'
					    (_2, _3)
				    in  call 'erlang':'and'
					    (_1, _4)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_10> =
			try
			    let <_6> =
				call %% Line 661
				     'erlang':%% Line 661
					      'is_integer'
				    (%% Line 661
				     C)
			    in  let <_7> =
				    call %% Line 661
					 'erlang':%% Line 661
						  '>'
					(%% Line 661
					 C, %% Line 661
					    57343)
				in  let <_8> =
					call %% Line 661
					     'erlang':%% Line 661
						      '<'
					    (%% Line 661
					     C, %% Line 661
						65534)
				    in  let <_9> =
					    call %% Line 661
						 'erlang':%% Line 661
							  'and'
						(_7, _8)
					in  %% Line 661
					    call 'erlang':'and'
						(_6, _9)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  let <_15> =
			    try
				let <_11> =
				    call %% Line 662
					 'erlang':%% Line 662
						  'is_integer'
					(%% Line 662
					 C)
				in  let <_12> =
					call %% Line 662
					     'erlang':%% Line 662
						      '>'
					    (%% Line 662
					     C, %% Line 662
						65535)
				    in  let <_13> =
					    call %% Line 662
						 'erlang':%% Line 662
							  '=<'
						(%% Line 662
						 C, %% Line 662
						    1114111)
					in  let <_14> =
						call %% Line 662
						     'erlang':%% Line 662
							      'and'
						    (_12, _13)
					    in  %% Line 662
						call 'erlang':'and'
						    (_11, _14)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			in  let <_16> =
				call %% Line 661
				     'erlang':%% Line 661
					      'or'
				    (_10, _15)
			    in  call 'erlang':'or'
				    (_5, _16) ->
	      %% Line 663
	      apply 'char_list'/1
		  (Cs)
	  %% Line 664
	  <[]> when 'true' ->
	      'true'
	  %% Line 665
	  <_18> when 'true' ->
	      'false'
	end
'deep_latin1_char_list'/1 =
    %% Line 670
    fun (_0) ->
	%% Line 671
	apply 'deep_latin1_char_list'/2
	    (_0, [])
'deep_latin1_char_list'/2 =
    %% Line 673
    fun (_0,_1) ->
	case <_0,_1> of
	  <[C|Cs],More>
	      when call 'erlang':'is_list'
		    (C) ->
	      %% Line 674
	      apply 'deep_latin1_char_list'/2
		  (C, [Cs|More])
	  %% Line 675
	  <[C|Cs],More>
	      when try
		    let <_2> =
			call 'erlang':'is_integer'
			    (C)
		    in  let <_3> =
			    call 'erlang':'>='
				(C, 0)
			in  let <_4> =
				call 'erlang':'=<'
				    (C, 255)
			    in  let <_5> =
				    call 'erlang':'and'
					(_3, _4)
				in  call 'erlang':'and'
					(_2, _5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 676
	      apply 'deep_latin1_char_list'/2
		  (Cs, More)
	  %% Line 677
	  <[],[Cs|More]> when 'true' ->
	      %% Line 678
	      apply 'deep_latin1_char_list'/2
		  (Cs, More)
	  %% Line 679
	  <[],[]> when 'true' ->
	      'true'
	  %% Line 680
	  <_8,_X_More> when 'true' ->
	      %% Line 681
	      'false'
	end
'deep_char_list'/1 =
    %% Line 686
    fun (_0) ->
	%% Line 687
	apply 'deep_char_list'/2
	    (_0, [])
'deep_char_list'/2 =
    %% Line 689
    fun (_0,_1) ->
	case <_0,_1> of
	  <[C|Cs],More>
	      when call 'erlang':'is_list'
		    (C) ->
	      %% Line 690
	      apply 'deep_char_list'/2
		  (C, [Cs|More])
	  %% Line 691
	  <[C|Cs],More>
	      when let <_6> =
		    try
			let <_2> =
			    call %% Line 692
				 'erlang':%% Line 692
					  'is_integer'
				(%% Line 692
				 C)
			in  let <_3> =
				call %% Line 692
				     'erlang':%% Line 692
					      '>='
				    (%% Line 692
				     C, %% Line 692
					0)
			    in  let <_4> =
				    call %% Line 692
					 'erlang':%% Line 692
						  '<'
					(%% Line 692
					 C, %% Line 692
					    55296)
				in  let <_5> =
					call %% Line 692
					     'erlang':%% Line 692
						      'and'
					    (_3, _4)
				    in  %% Line 692
					call 'erlang':'and'
					    (_2, _5)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_11> =
			try
			    let <_7> =
				call %% Line 693
				     'erlang':%% Line 693
					      'is_integer'
				    (%% Line 693
				     C)
			    in  let <_8> =
				    call %% Line 693
					 'erlang':%% Line 693
						  '>'
					(%% Line 693
					 C, %% Line 693
					    57343)
				in  let <_9> =
					call %% Line 693
					     'erlang':%% Line 693
						      '<'
					    (%% Line 693
					     C, %% Line 693
						65534)
				    in  let <_10> =
					    call %% Line 693
						 'erlang':%% Line 693
							  'and'
						(_8, _9)
					in  %% Line 693
					    call 'erlang':'and'
						(_7, _10)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  let <_16> =
			    try
				let <_12> =
				    call %% Line 694
					 'erlang':%% Line 694
						  'is_integer'
					(%% Line 694
					 C)
				in  let <_13> =
					call %% Line 694
					     'erlang':%% Line 694
						      '>'
					    (%% Line 694
					     C, %% Line 694
						65535)
				    in  let <_14> =
					    call %% Line 694
						 'erlang':%% Line 694
							  '=<'
						(%% Line 694
						 C, %% Line 694
						    1114111)
					in  let <_15> =
						call %% Line 694
						     'erlang':%% Line 694
							      'and'
						    (_13, _14)
					    in  %% Line 694
						call 'erlang':'and'
						    (_12, _15)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			in  let <_17> =
				call %% Line 693
				     'erlang':%% Line 693
					      'or'
				    (_11, _16)
			    in  %% Line 692
				call 'erlang':'or'
				    (_6, _17) ->
	      %% Line 695
	      apply 'deep_char_list'/2
		  (Cs, More)
	  %% Line 696
	  <[],[Cs|More]> when 'true' ->
	      %% Line 697
	      apply 'deep_char_list'/2
		  (Cs, More)
	  %% Line 698
	  <[],[]> when 'true' ->
	      'true'
	  %% Line 699
	  <_20,_X_More> when 'true' ->
	      %% Line 700
	      'false'
	end
'deep_unicode_char_list'/1 =
    %% Line 702
    fun (_0) ->
	%% Line 703
	apply 'deep_char_list'/1
	    (_0)
'printable_latin1_list'/1 =
    %% Line 712
    fun (_0) ->
	case _0 of
	  <[C|Cs]>
	      when try
		    let <_1> =
			call 'erlang':'is_integer'
			    (C)
		    in  let <_2> =
			    call 'erlang':'>='
				(C, 32)
			in  let <_3> =
				call 'erlang':'=<'
				    (C, 126)
			    in  let <_4> =
				    call 'erlang':'and'
					(_2, _3)
				in  call 'erlang':'and'
					(_1, _4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 713
	      apply 'printable_latin1_list'/1
		  (Cs)
	  %% Line 714
	  <[C|Cs]>
	      when try
		    let <_5> =
			call 'erlang':'is_integer'
			    (C)
		    in  let <_6> =
			    call 'erlang':'>='
				(C, 160)
			in  let <_7> =
				call 'erlang':'=<'
				    (C, 255)
			    in  let <_8> =
				    call 'erlang':'and'
					(_6, _7)
				in  call 'erlang':'and'
					(_5, _8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 715
	      apply 'printable_latin1_list'/1
		  (Cs)
	  %% Line 716
	  <[10|Cs]> when 'true' ->
	      apply 'printable_latin1_list'/1
		  (Cs)
	  %% Line 717
	  <[13|Cs]> when 'true' ->
	      apply 'printable_latin1_list'/1
		  (Cs)
	  %% Line 718
	  <[9|Cs]> when 'true' ->
	      apply 'printable_latin1_list'/1
		  (Cs)
	  %% Line 719
	  <[11|Cs]> when 'true' ->
	      apply 'printable_latin1_list'/1
		  (Cs)
	  %% Line 720
	  <[8|Cs]> when 'true' ->
	      apply 'printable_latin1_list'/1
		  (Cs)
	  %% Line 721
	  <[12|Cs]> when 'true' ->
	      apply 'printable_latin1_list'/1
		  (Cs)
	  %% Line 722
	  <[27|Cs]> when 'true' ->
	      apply 'printable_latin1_list'/1
		  (Cs)
	  %% Line 723
	  <[]> when 'true' ->
	      'true'
	  %% Line 724
	  <_10> when 'true' ->
	      'false'
	end
'printable_list'/1 =
    %% Line 740
    fun (_0) ->
	%% Line 743
	case call 'io':'printable_range'
		 () of
	  %% Line 744
	  <'latin1'> when 'true' ->
	      %% Line 745
	      apply 'printable_latin1_list'/1
		  (_0)
	  %% Line 746
	  <'unicode'> when 'true' ->
	      %% Line 747
	      apply 'printable_unicode_list'/1
		  (_0)
	  ( <_1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_1})
	    -| ['compiler_generated'] )
	end
'printable_unicode_list'/1 =
    %% Line 753
    fun (_0) ->
	case _0 of
	  <[C|Cs]>
	      when try
		    let <_1> =
			call 'erlang':'is_integer'
			    (C)
		    in  let <_2> =
			    call 'erlang':'>='
				(C, 32)
			in  let <_3> =
				call 'erlang':'=<'
				    (C, 126)
			    in  let <_4> =
				    call 'erlang':'and'
					(_2, _3)
				in  call 'erlang':'and'
					(_1, _4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 754
	      apply 'printable_unicode_list'/1
		  (Cs)
	  %% Line 755
	  <[C|Cs]>
	      when let <_9> =
		    try
			let <_5> =
			    call %% Line 756
				 'erlang':%% Line 756
					  'is_integer'
				(%% Line 756
				 C)
			in  let <_6> =
				call %% Line 756
				     'erlang':%% Line 756
					      '>='
				    (%% Line 756
				     C, %% Line 756
					160)
			    in  let <_7> =
				    call %% Line 756
					 'erlang':%% Line 756
						  '<'
					(%% Line 756
					 C, %% Line 756
					    55296)
				in  let <_8> =
					call %% Line 756
					     'erlang':%% Line 756
						      'and'
					    (_6, _7)
				    in  %% Line 756
					call 'erlang':'and'
					    (_5, _8)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_14> =
			try
			    let <_10> =
				call %% Line 757
				     'erlang':%% Line 757
					      'is_integer'
				    (%% Line 757
				     C)
			    in  let <_11> =
				    call %% Line 757
					 'erlang':%% Line 757
						  '>'
					(%% Line 757
					 C, %% Line 757
					    57343)
				in  let <_12> =
					call %% Line 757
					     'erlang':%% Line 757
						      '<'
					    (%% Line 757
					     C, %% Line 757
						65534)
				    in  let <_13> =
					    call %% Line 757
						 'erlang':%% Line 757
							  'and'
						(_11, _12)
					in  %% Line 757
					    call 'erlang':'and'
						(_10, _13)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  let <_19> =
			    try
				let <_15> =
				    call %% Line 758
					 'erlang':%% Line 758
						  'is_integer'
					(%% Line 758
					 C)
				in  let <_16> =
					call %% Line 758
					     'erlang':%% Line 758
						      '>'
					    (%% Line 758
					     C, %% Line 758
						65535)
				    in  let <_17> =
					    call %% Line 758
						 'erlang':%% Line 758
							  '=<'
						(%% Line 758
						 C, %% Line 758
						    1114111)
					in  let <_18> =
						call %% Line 758
						     'erlang':%% Line 758
							      'and'
						    (_16, _17)
					    in  %% Line 758
						call 'erlang':'and'
						    (_15, _18)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			in  let <_20> =
				call %% Line 757
				     'erlang':%% Line 757
					      'or'
				    (_14, _19)
			    in  %% Line 756
				call 'erlang':'or'
				    (_9, _20) ->
	      %% Line 759
	      apply 'printable_unicode_list'/1
		  (Cs)
	  %% Line 760
	  <[10|Cs]> when 'true' ->
	      apply 'printable_unicode_list'/1
		  (Cs)
	  %% Line 761
	  <[13|Cs]> when 'true' ->
	      apply 'printable_unicode_list'/1
		  (Cs)
	  %% Line 762
	  <[9|Cs]> when 'true' ->
	      apply 'printable_unicode_list'/1
		  (Cs)
	  %% Line 763
	  <[11|Cs]> when 'true' ->
	      apply 'printable_unicode_list'/1
		  (Cs)
	  %% Line 764
	  <[8|Cs]> when 'true' ->
	      apply 'printable_unicode_list'/1
		  (Cs)
	  %% Line 765
	  <[12|Cs]> when 'true' ->
	      apply 'printable_unicode_list'/1
		  (Cs)
	  %% Line 766
	  <[27|Cs]> when 'true' ->
	      apply 'printable_unicode_list'/1
		  (Cs)
	  %% Line 767
	  <[]> when 'true' ->
	      'true'
	  %% Line 768
	  <_22> when 'true' ->
	      'false'
	end
'nl'/0 =
    %% Line 775
    fun () ->
	%% Line 776
	[10]
'count_and_find_utf8'/2 =
    %% Line 782
    fun (_0,_1) ->
	%% Line 783
	apply 'cafu'/5
	    (_0, _1, 0, 0, 'none')
'cafu'/5 =
    %% Line 785
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <#{}#,_X_N,Count,_X_ByteCount,SavePos> when 'true' ->
	      %% Line 786
	      {Count,SavePos}
	  %% Line 787
	  <#{#<_20>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,0,Count,ByteCount,_X_SavePos> when 'true' ->
	      let <_5> =
		  call %% Line 788
		       'erlang':%% Line 788
				'+'
		      (%% Line 788
		       Count, %% Line 788
			      1)
	      in  %% Line 788
		  apply 'cafu'/5
		      (Rest, -1, _5, 0, ByteCount)
	  %% Line 789
	  <#{#<_21>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Count,_X_ByteCount,SavePos>
	      when call 'erlang':'<'
		    (N,
		     0) ->
	      let <_7> =
		  call %% Line 790
		       'erlang':%% Line 790
				'+'
		      (%% Line 790
		       Count, %% Line 790
			      1)
	      in  %% Line 790
		  apply 'cafu'/5
		      (Rest, -1, _7, 0, SavePos)
	  %% Line 791
	  <Whole = #{#<_22>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Count,ByteCount,SavePos> when 'true' ->
	      let <_10> =
		  call %% Line 792
		       'erlang':%% Line 792
				'byte_size'
		      (%% Line 792
		       Whole)
	      in  let <_9> =
		      call %% Line 792
			   'erlang':%% Line 792
				    'byte_size'
			  (%% Line 792
			   Rest)
		  in  let <Delta> =
			  call %% Line 792
			       'erlang':%% Line 792
					'-'
			      (_10, _9)
		      in  let <_14> =
			      call %% Line 793
				   'erlang':%% Line 793
					    '-'
				  (%% Line 793
				   N, %% Line 793
				      1)
			  in  let <_13> =
				  call %% Line 793
				       'erlang':%% Line 793
						'+'
				      (%% Line 793
				       Count, %% Line 793
					      1)
			      in  let <_12> =
				      call %% Line 793
					   'erlang':%% Line 793
						    '+'
					  (%% Line 793
					   ByteCount, %% Line 793
						      Delta)
				  in  %% Line 793
				      apply 'cafu'/5
					  (Rest, _14, _13, _12, SavePos)
	  %% Line 794
	  <_X_Other,_X_N,Count,_X_ByteCount,SavePos> when 'true' ->
	      %% Line 795
	      {Count,SavePos}
	end
'collect_chars'/3 =
    %% Line 802
    fun (_0,_1,_2) ->
	%% Line 803
	apply 'collect_chars'/4
	    (_0, _1, 'latin1', _2)
'collect_chars'/4 =
    %% Line 806
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <'start',Data,'unicode',N>
	      when call 'erlang':'is_binary'
		    (Data) ->
	      %% Line 807
	      case apply 'count_and_find_utf8'/2
		       (Data, N) of
		<{Size,Npos}> when 'true' ->
		    %% Line 808
		    case <> of
		      <>
			  when call 'erlang':'>'
				(Size,
				 N) ->
			  %% Line 809
			  case call 'erlang':'split_binary'
				   (Data, Npos) of
			    <{B1,B2}> when 'true' ->
				%% Line 810
				{'stop',B1,B2}
			    ( <_5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_5})
			      -| ['compiler_generated'] )
			  end
		      %% Line 811
		      <>
			  when call 'erlang':'<'
				(Size,
				 N) ->
			  let <_6> =
			      call %% Line 812
				   'erlang':%% Line 812
					    '-'
				  (%% Line 812
				   N, %% Line 812
				      Size)
			  in  %% Line 812
			      {'binary',[Data|[]],_6}
		      %% Line 813
		      <> when 'true' ->
			  %% Line 814
			  {'stop',Data,'eof'}
		    end
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 816
	  <'start',Data,'latin1',N>
	      when call 'erlang':'is_binary'
		    (Data) ->
	      let <Size> =
		  call %% Line 817
		       'erlang':%% Line 817
				'byte_size'
		      (%% Line 817
		       Data)
	      in  %% Line 818
		  case <> of
		    <>
			when call 'erlang':'>'
			      (Size,
			       N) ->
			%% Line 819
			case call 'erlang':'split_binary'
				 (Data, N) of
			  <{B1,B2}> when 'true' ->
			      %% Line 820
			      {'stop',B1,B2}
			  ( <_8> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_8})
			    -| ['compiler_generated'] )
			end
		    %% Line 821
		    <>
			when call 'erlang':'<'
			      (Size,
			       N) ->
			let <_9> =
			    call %% Line 822
				 'erlang':%% Line 822
					  '-'
				(%% Line 822
				 N, %% Line 822
				    Size)
			in  %% Line 822
			    {'binary',[Data|[]],_9}
		    %% Line 823
		    <> when 'true' ->
			%% Line 824
			{'stop',Data,'eof'}
		  end
	  %% Line 826
	  <'start',Data,_25,N>
	      when call 'erlang':'is_list'
		    (Data) ->
	      %% Line 827
	      apply 'collect_chars_list'/3
		  ([], N, Data)
	  %% Line 828
	  <'start','eof',_26,_27> when 'true' ->
	      %% Line 829
	      {'stop','eof','eof'}
	  %% Line 830
	  <{'binary',Stack,_X_N},'eof',_28,_29> when 'true' ->
	      let <_10> =
		  apply %% Line 831
			'binrev'/1
		      (%% Line 831
		       Stack)
	      in  %% Line 831
		  {'stop',_10,'eof'}
	  %% Line 832
	  <{'binary',Stack,N},Data,'unicode',_30> when 'true' ->
	      %% Line 833
	      case apply 'count_and_find_utf8'/2
		       (Data, N) of
		<{Size,Npos}> when 'true' ->
		    %% Line 834
		    case <> of
		      <>
			  when call 'erlang':'>'
				(Size,
				 N) ->
			  %% Line 835
			  case call 'erlang':'split_binary'
				   (Data, Npos) of
			    <{B1,B2}> when 'true' ->
				let <_13> =
				    apply %% Line 836
					  'binrev'/2
					(%% Line 836
					 Stack, %% Line 836
						[B1|[]])
				in  %% Line 836
				    {'stop',_13,B2}
			    ( <_12> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_12})
			      -| ['compiler_generated'] )
			  end
		      %% Line 837
		      <>
			  when call 'erlang':'<'
				(Size,
				 N) ->
			  let <_14> =
			      call %% Line 838
				   'erlang':%% Line 838
					    '-'
				  (%% Line 838
				   N, %% Line 838
				      Size)
			  in  %% Line 838
			      {'binary',[Data|Stack],_14}
		      %% Line 839
		      <> when 'true' ->
			  let <_15> =
			      apply %% Line 840
				    'binrev'/2
				  (%% Line 840
				   Stack, %% Line 840
					  [Data|[]])
			  in  %% Line 840
			      {'stop',_15,'eof'}
		    end
		( <_11> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 842
	  <{'binary',Stack,N},Data,'latin1',_31> when 'true' ->
	      let <Size> =
		  call %% Line 843
		       'erlang':%% Line 843
				'byte_size'
		      (%% Line 843
		       Data)
	      in  %% Line 844
		  case <> of
		    <>
			when call 'erlang':'>'
			      (Size,
			       N) ->
			%% Line 845
			case call 'erlang':'split_binary'
				 (Data, N) of
			  <{B1,B2}> when 'true' ->
			      let <_18> =
				  apply %% Line 846
					'binrev'/2
				      (%% Line 846
				       Stack, %% Line 846
					      [B1|[]])
			      in  %% Line 846
				  {'stop',_18,B2}
			  ( <_17> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_17})
			    -| ['compiler_generated'] )
			end
		    %% Line 847
		    <>
			when call 'erlang':'<'
			      (Size,
			       N) ->
			let <_19> =
			    call %% Line 848
				 'erlang':%% Line 848
					  '-'
				(%% Line 848
				 N, %% Line 848
				    Size)
			in  %% Line 848
			    {'binary',[Data|Stack],_19}
		    %% Line 849
		    <> when 'true' ->
			let <_20> =
			    apply %% Line 850
				  'binrev'/2
				(%% Line 850
				 Stack, %% Line 850
					[Data|[]])
			in  %% Line 850
			    {'stop',_20,'eof'}
		  end
	  %% Line 852
	  <{'list',Stack,N},Data,_32,_33> when 'true' ->
	      %% Line 853
	      apply 'collect_chars_list'/3
		  (Stack, N, Data)
	  %% Line 860
	  <[],Chars,_34,N> when 'true' ->
	      %% Line 861
	      apply 'collect_chars1'/3
		  (N, Chars, [])
	  %% Line 862
	  <{Left,Sofar},Chars,_35,_X_N> when 'true' ->
	      %% Line 863
	      apply 'collect_chars1'/3
		  (Left, Chars, Sofar)
	  ( <_24,_23,_22,_21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_24,_23,_22,_21})
		  -| [{'function_name',{'collect_chars',4}}] )
	    -| ['compiler_generated'] )
	end
'collect_chars1'/3 =
    %% Line 865
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <N,Chars,Stack>
	      when call 'erlang':'=<'
		    (N,
		     0) ->
	      let <_3> =
		  call %% Line 866
		       'lists':%% Line 866
			       'reverse'
		      (%% Line 866
		       Stack, %% Line 866
			      [])
	      in  %% Line 866
		  {'done',_3,Chars}
	  %% Line 867
	  <N,[C|Rest],Stack> when 'true' ->
	      let <_4> =
		  call %% Line 868
		       'erlang':%% Line 868
				'-'
		      (%% Line 868
		       N, %% Line 868
			  1)
	      in  %% Line 868
		  apply 'collect_chars1'/3
		      (_4, Rest, [C|Stack])
	  %% Line 869
	  <_X_N,'eof',[]> when 'true' ->
	      %% Line 870
	      {'done','eof',[]}
	  %% Line 871
	  <_X_N,'eof',Stack> when 'true' ->
	      let <_5> =
		  call %% Line 872
		       'lists':%% Line 872
			       'reverse'
		      (%% Line 872
		       Stack, %% Line 872
			      [])
	      in  %% Line 872
		  {'done',_5,[]}
	  %% Line 873
	  <N,[],Stack> when 'true' ->
	      %% Line 874
	      {'more',{N,Stack}}
	  ( <_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7,_6})
		  -| [{'function_name',{'collect_chars1',3}}] )
	    -| ['compiler_generated'] )
	end
'collect_chars_list'/3 =
    %% Line 876
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Stack,0,Data> when 'true' ->
	      let <_3> =
		  call %% Line 877
		       'lists':%% Line 877
			       'reverse'
		      (%% Line 877
		       Stack, %% Line 877
			      [])
	      in  %% Line 877
		  {'stop',_3,Data}
	  %% Line 878
	  <Stack,_X_N,'eof'> when 'true' ->
	      let <_4> =
		  call %% Line 879
		       'lists':%% Line 879
			       'reverse'
		      (%% Line 879
		       Stack, %% Line 879
			      [])
	      in  %% Line 879
		  {'stop',_4,'eof'}
	  %% Line 880
	  <Stack,N,[]> when 'true' ->
	      %% Line 881
	      {'list',Stack,N}
	  %% Line 882
	  <Stack,N,[H|T]> when 'true' ->
	      let <_5> =
		  call %% Line 883
		       'erlang':%% Line 883
				'-'
		      (%% Line 883
		       N, %% Line 883
			  1)
	      in  %% Line 883
		  apply 'collect_chars_list'/3
		      ([H|Stack], _5, T)
	  ( <_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7,_6})
		  -| [{'function_name',{'collect_chars_list',3}}] )
	    -| ['compiler_generated'] )
	end
'collect_line'/3 =
    %% Line 890
    fun (_0,_1,_2) ->
	%% Line 891
	apply 'collect_line'/4
	    (_0, _1, 'latin1', _2)
'collect_line'/4 =
    %% Line 894
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <'start',Data,Encoding,_10>
	      when call 'erlang':'is_binary'
		    (Data) ->
	      %% Line 895
	      apply 'collect_line_bin'/4
		  (Data, Data, [], Encoding)
	  %% Line 896
	  <'start',Data,_11,_12>
	      when call 'erlang':'is_list'
		    (Data) ->
	      %% Line 897
	      apply 'collect_line_list'/2
		  (Data, [])
	  %% Line 898
	  <'start','eof',_13,_14> when 'true' ->
	      %% Line 899
	      {'stop','eof','eof'}
	  %% Line 900
	  <Stack,Data,Encoding,_15>
	      when call 'erlang':'is_binary'
		    (Data) ->
	      %% Line 901
	      apply 'collect_line_bin'/4
		  (Data, Data, Stack, Encoding)
	  %% Line 902
	  <Stack,Data,_16,_17>
	      when call 'erlang':'is_list'
		    (Data) ->
	      %% Line 903
	      apply 'collect_line_list'/2
		  (Data, Stack)
	  %% Line 904
	  <Stack = [B|_18],'eof',_19,_20>
	      when call 'erlang':'is_binary'
		    (B) ->
	      let <_4> =
		  apply %% Line 905
			'binrev'/1
		      (%% Line 905
		       Stack)
	      in  %% Line 905
		  {'stop',_4,'eof'}
	  %% Line 906
	  <Stack,'eof',_21,_22> when 'true' ->
	      let <_5> =
		  call %% Line 907
		       'lists':%% Line 907
			       'reverse'
		      (%% Line 907
		       Stack, %% Line 907
			      [])
	      in  %% Line 907
		  {'stop',_5,'eof'}
	  ( <_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6})
		  -| [{'function_name',{'collect_line',4}}] )
	    -| ['compiler_generated'] )
	end
'collect_line_bin'/4 =
    %% Line 910
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <#{#<10>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Data,Stack0,_24> when 'true' ->
	      let <_5> =
		  call %% Line 911
		       'erlang':%% Line 911
				'byte_size'
		      (%% Line 911
		       Data)
	      in  let <_4> =
		      call %% Line 911
			   'erlang':%% Line 911
				    'byte_size'
			  (%% Line 911
			   T)
		  in  let <N> =
			  call %% Line 911
			       'erlang':%% Line 911
					'-'
			      (_5, _4)
		      in  %% Line 912
			  case Data of
			    <#{#<Line>(N,8,'binary',['unsigned'|['big']]),
			       #<_25>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				%% Line 913
				case Stack0 of
				  %% Line 914
				  <[]> when 'true' ->
				      %% Line 915
				      {'stop',Line,T}
				  %% Line 916
				  <[#{#<13>(8,1,'integer',['unsigned'|['big']])}#|Stack]>
				      when call 'erlang':'=:='
					    (N,
					     1) ->
				      let <_8> =
					  apply %% Line 917
						'binrev'/2
					      (%% Line 917
					       Stack, %% Line 917
						      [10])
				      in  %% Line 917
					  {'stop',_8,T}
				  %% Line 918
				  <_26> when 'true' ->
				      let <_9> =
					  apply %% Line 919
						'binrev'/2
					      (%% Line 919
					       Stack0, %% Line 919
						       [Line|[]])
				      in  %% Line 919
					  {'stop',_9,T}
				end
			    ( <_7> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_7})
			      -| ['compiler_generated'] )
			  end
	  %% Line 921
	  <#{#<13>(8,1,'integer',['unsigned'|['big']]),
	     #<10>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Data,Stack,_27> when 'true' ->
	      let <_12> =
		  call %% Line 922
		       'erlang':%% Line 922
				'byte_size'
		      (%% Line 922
		       Data)
	      in  let <_11> =
		      call %% Line 922
			   'erlang':%% Line 922
				    'byte_size'
			  (%% Line 922
			   T)
		  in  let <_13> =
			  call %% Line 922
			       'erlang':%% Line 922
					'-'
			      (_12, _11)
		      in  let <N> =
			      call %% Line 922
				   'erlang':%% Line 922
					    '-'
				  (_13, %% Line 922
					2)
			  in  %% Line 923
			      case Data of
				<#{#<Line>(N,8,'binary',['unsigned'|['big']]),
				   #<_28>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				    let <_16> =
					apply %% Line 924
					      'binrev'/2
					    (%% Line 924
					     Stack, %% Line 924
						    [Line|[10]])
				    in  %% Line 924
					{'stop',_16,T}
				( <_15> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_15})
				  -| ['compiler_generated'] )
			      end
	  %% Line 925
	  <#{#<13>(8,1,'integer',['unsigned'|['big']])}#,Data0,Stack,_29> when 'true' ->
	      let <_17> =
		  call %% Line 926
		       'erlang':%% Line 926
				'byte_size'
		      (%% Line 926
		       Data0)
	      in  let <N> =
		      call %% Line 926
			   'erlang':%% Line 926
				    '-'
			  (_17, %% Line 926
				1)
		  in  %% Line 927
		      case Data0 of
			<#{#<Data>(N,8,'binary',['unsigned'|['big']]),
			   #<_30>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			    %% Line 928
			    [#{#<13>(8,1,'integer',['unsigned'|['big']])}#|[Data|Stack]]
			( <_19> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_19})
			  -| ['compiler_generated'] )
		      end
	  %% Line 929
	  <#{#<_31>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Data,Stack,Enc> when 'true' ->
	      %% Line 930
	      apply 'collect_line_bin'/4
		  (T, Data, Stack, Enc)
	  %% Line 931
	  <#{}#,Data,Stack,_32> when 'true' ->
	      %% Line 933
	      [Data|Stack]
	  ( <_23,_22,_21,_20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_23,_22,_21,_20})
		  -| [{'function_name',{'collect_line_bin',4}}] )
	    -| ['compiler_generated'] )
	end
'collect_line_list'/2 =
    %% Line 935
    fun (_0,_1) ->
	case <_0,_1> of
	  <[10|T],[13|Stack]> when 'true' ->
	      let <_2> =
		  call %% Line 936
		       'lists':%% Line 936
			       'reverse'
		      (%% Line 936
		       Stack, %% Line 936
			      [10])
	      in  %% Line 936
		  {'stop',_2,T}
	  %% Line 937
	  <[10|T],Stack> when 'true' ->
	      let <_3> =
		  call %% Line 938
		       'lists':%% Line 938
			       'reverse'
		      (%% Line 938
		       Stack, %% Line 938
			      [10])
	      in  %% Line 938
		  {'stop',_3,T}
	  %% Line 939
	  <[H|T],Stack> when 'true' ->
	      %% Line 940
	      apply 'collect_line_list'/2
		  (T, [H|Stack])
	  %% Line 941
	  <[],Stack> when 'true' ->
	      %% Line 942
	      Stack
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'collect_line_list',2}}] )
	    -| ['compiler_generated'] )
	end
'get_until'/3 =
    %% Line 950
    fun (_0,_1,_2) ->
	%% Line 951
	apply 'get_until'/4
	    (_0, _1, 'latin1', _2)
'get_until'/4 =
    %% Line 954
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <'start',Data,Encoding,XtraArg> when 'true' ->
	      %% Line 955
	      apply 'get_until'/4
		  ([], Data, Encoding, XtraArg)
	  %% Line 956
	  <Cont,Data,Encoding,{Mod,Func,XtraArgs}> when 'true' ->
	      let <_6> =
		  case <> of
		    %% Line 957
		    <>
			when let <_4> =
			      call 'erlang':'is_binary'
				  (Data)
			  in  let <_5> =
				  call 'erlang':'=:='
				      (Encoding, 'unicode')
			      in  call 'erlang':'and'
				      (_4, _5) ->
			%% Line 958
			call 'unicode':'characters_to_list'
			    (Data, 'utf8')
		    %% Line 959
		    <>
			when call 'erlang':'is_binary'
			      (Data) ->
			%% Line 960
			call 'erlang':'binary_to_list'
			    (Data)
		    %% Line 961
		    <> when 'true' ->
			%% Line 962
			Data
		  end
	      in  %% Line 964
		  case call 'erlang':'apply'
			   (Mod, Func, [Cont|[_6|XtraArgs]]) of
		    %% Line 965
		    <{'done',Result,Buf}> when 'true' ->
			let <_14> =
			    case <> of
			      %% Line 966
			      <>
				  when try
					let <_8> =
					    call 'erlang':'is_binary'
						(Data)
					in  let <_9> =
						call %% Line 967
						     'erlang':%% Line 967
							      'is_list'
						    (%% Line 967
						     Result)
					    in  let <_10> =
						    call %% Line 968
							 'erlang':%% Line 968
								  '=:='
							(%% Line 968
							 Encoding, %% Line 968
								   'unicode')
						in  let <_11> =
							call 'erlang':'and'
							    (_9, _10)
						    in  call 'erlang':'and'
							    (_8, _11)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  %% Line 969
				  call 'unicode':'characters_to_binary'
				      (Result, 'unicode', 'unicode')
			      %% Line 970
			      <>
				  when let <_12> =
					call 'erlang':'is_binary'
					    (Data)
				    in  let <_13> =
					    call %% Line 971
						 'erlang':%% Line 971
							  'is_list'
						(%% Line 971
						 Result)
					in  call 'erlang':'and'
						(_12, _13) ->
				  %% Line 972
				  call 'erlang':'iolist_to_binary'
				      (Result)
			      %% Line 980
			      <> when 'true' ->
				  %% Line 981
				  Result
			    end
			in  %% Line 966
			    {'stop',_14,%% Line 983
					Buf}
		    %% Line 984
		    <{'more',NewCont}> when 'true' ->
			%% Line 985
			NewCont
		    ( <_15> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_15})
		      -| ['compiler_generated'] )
		  end
	  ( <_19,_18,_17,_16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_19,_18,_17,_16})
		  -| [{'function_name',{'get_until',4}}] )
	    -| ['compiler_generated'] )
	end
'binrev'/1 =
    %% Line 988
    fun (_0) ->
	let <_1> =
	    call %% Line 989
		 'lists':%% Line 989
			 'reverse'
		(_0, %% Line 989
		     [])
	in  %% Line 989
	    call 'erlang':'list_to_binary'
		(_1)
'binrev'/2 =
    %% Line 991
    fun (_0,_1) ->
	let <_2> =
	    call %% Line 992
		 'lists':%% Line 992
			 'reverse'
		(_0, _1)
	in  %% Line 992
	    call 'erlang':'list_to_binary'
		(_2)
'limit_term'/2 =
    %% Line 1000
    fun (_0,_1) ->
	%% Line 1001
	try
	    apply 'test_limit'/2
		(_0, _1)
	of <_2> ->
	    case _2 of
	      %% Line 1002
	      <'ok'> when 'true' ->
		  _0
	      ( <_3> when 'true' ->
		    primop 'match_fail'
			({'try_clause',_3})
		-| ['compiler_generated'] )
	    end
	catch <_6,_5,_4> ->
	    %% Line 1004
	    case <_6,_5,_4> of
	      <( 'throw'
		 -| ['compiler_generated'] ),( 'limit'
					       -| ['compiler_generated'] ),_9> when 'true' ->
		  %% Line 1005
		  apply 'limit'/2
		      (_0, _1)
	      ( <_10,_11,_12> when 'true' ->
		    primop 'raise'
			(_12, _11)
		-| ['compiler_generated'] )
	    end
'limit'/2 =
    %% Line 1008
    fun (_0,_1) ->
	case <_0,_1> of
	  <_14,0> when 'true' ->
	      '...'
	  %% Line 1009
	  <L = [H|T],D> when 'true' ->
	      %% Line 1010
	      case <> of
		%% Line 1011
		<>
		    when call 'erlang':'=:='
			  (D,
			   1) ->
		    ['...']
		%% Line 1012
		<> when 'true' ->
		    %% Line 1013
		    case apply 'printable_list'/1
			     (L) of
		      %% Line 1014
		      <'true'> when 'true' ->
			  L
		      %% Line 1015
		      <'false'> when 'true' ->
			  let <_2> =
			      call %% Line 1016
				   'erlang':%% Line 1016
					    '-'
				  (%% Line 1016
				   D, %% Line 1016
				      1)
			  in  let <_3> =
				  apply %% Line 1016
					'limit'/2
				      (%% Line 1016
				       H, _2)
			      in  let <_4> =
				      call %% Line 1016
					   'erlang':%% Line 1016
						    '-'
					  (%% Line 1016
					   D, %% Line 1016
					      1)
				  in  let <_5> =
					  apply %% Line 1016
						'limit_tail'/2
					      (%% Line 1016
					       T, _4)
				      in  %% Line 1016
					  [_3|_5]
		      ( <_6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_6})
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 1019
	  <Term,D>
	      when call 'erlang':'is_map'
		    (Term) ->
	      %% Line 1020
	      apply 'limit_map'/2
		  (Term, D)
	  %% Line 1021
	  <T = {},_X_D> when 'true' ->
	      T
	  %% Line 1022
	  <T,D>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      %% Line 1023
	      case <> of
		%% Line 1024
		<>
		    when call 'erlang':'=:='
			  (D,
			   1) ->
		    {'...'}
		%% Line 1025
		<> when 'true' ->
		    let <_8> =
			call %% Line 1026
			     'erlang':%% Line 1026
				      'element'
			    (%% Line 1026
			     1, %% Line 1026
				T)
		    in  let <_7> =
			    call %% Line 1026
				 'erlang':%% Line 1026
					  '-'
				(%% Line 1026
				 D, %% Line 1026
				    1)
			in  let <_9> =
				apply %% Line 1026
				      'limit'/2
				    (_8, _7)
			    in  let <_10> =
				    call %% Line 1027
					 'erlang':%% Line 1027
						  '-'
					(%% Line 1027
					 D, %% Line 1027
					    1)
				in  let <_11> =
					apply %% Line 1027
					      'limit_tuple'/3
					    (%% Line 1027
					     T, %% Line 1027
						2, _10)
				    in  %% Line 1026
					call 'erlang':'list_to_tuple'
					    ([_9|_11])
	      end
	  %% Line 1029
	  <Term = #{#<_15>('all',1,'binary',['unsigned'|['big']])}#,D> when 'true' ->
	      apply 'limit_bitstring'/2
		  (Term, D)
	  %% Line 1030
	  <Term,_X_D> when 'true' ->
	      Term
	end
'limit_tail'/2 =
    %% Line 1032
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],_X_D> when 'true' ->
	      []
	  %% Line 1033
	  <_9,1> when 'true' ->
	      ['...']
	  %% Line 1034
	  <[H|T],D> when 'true' ->
	      let <_2> =
		  call %% Line 1035
		       'erlang':%% Line 1035
				'-'
		      (%% Line 1035
		       D, %% Line 1035
			  1)
	      in  let <_3> =
		      apply %% Line 1035
			    'limit'/2
			  (%% Line 1035
			   H, _2)
		  in  let <_4> =
			  call %% Line 1035
			       'erlang':%% Line 1035
					'-'
			      (%% Line 1035
			       D, %% Line 1035
				  1)
		      in  let <_5> =
			      apply %% Line 1035
				    'limit_tail'/2
				  (%% Line 1035
				   T, _4)
			  in  %% Line 1035
			      [_3|_5]
	  %% Line 1036
	  <Other,D> when 'true' ->
	      let <_6> =
		  call %% Line 1037
		       'erlang':%% Line 1037
				'-'
		      (%% Line 1037
		       D, %% Line 1037
			  1)
	      in  %% Line 1037
		  apply 'limit'/2
		      (Other, _6)
	end
'limit_tuple'/3 =
    %% Line 1039
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <T,I,_X_D>
	      when try
		    let <_3> =
			call 'erlang':'tuple_size'
			    (T)
		    in  call 'erlang':'>'
			    (I, _3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      []
	  %% Line 1040
	  <_13,_X_I,1> when 'true' ->
	      ['...']
	  %% Line 1041
	  <T,I,D> when 'true' ->
	      let <_5> =
		  call %% Line 1042
		       'erlang':%% Line 1042
				'element'
		      (%% Line 1042
		       I, %% Line 1042
			  T)
	      in  let <_4> =
		      call %% Line 1042
			   'erlang':%% Line 1042
				    '-'
			  (%% Line 1042
			   D, %% Line 1042
			      1)
		  in  let <_6> =
			  apply %% Line 1042
				'limit'/2
			      (_5, _4)
		      in  let <_8> =
			      call %% Line 1042
				   'erlang':%% Line 1042
					    '+'
				  (%% Line 1042
				   I, %% Line 1042
				      1)
			  in  let <_7> =
				  call %% Line 1042
				       'erlang':%% Line 1042
						'-'
				      (%% Line 1042
				       D, %% Line 1042
					  1)
			      in  let <_9> =
				      apply %% Line 1042
					    'limit_tuple'/3
					  (%% Line 1042
					   T, _8, _7)
				  in  %% Line 1042
				      [_6|_9]
	end
'limit_map'/2 =
    %% Line 1050
    fun (_0,_1) ->
	let <_3> =
	    call %% Line 1052
		 'maps':%% Line 1052
			'iterator'
		(_0)
	in  let <_2> =
		call %% Line 1052
		     'erlang':%% Line 1052
			      '+'
		    (_1, %% Line 1052
			 1)
	    in  %% Line 1052
		apply 'limit_map_body'/4
		    (_3, _2, _1, [])
'limit_map_body'/4 =
    %% Line 1054
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <_X_I,0,_X_D0,Acc> when 'true' ->
	      %% Line 1055
	      call 'maps':'from_list'
		  (Acc)
	  %% Line 1056
	  <I,D,D0,Acc> when 'true' ->
	      %% Line 1057
	      case call 'maps':'next'
		       (I) of
		%% Line 1058
		<{K,V,NextI}> when 'true' ->
		    let <_5> =
			call %% Line 1059
			     'erlang':%% Line 1059
				      '-'
			    (%% Line 1059
			     D, %% Line 1059
				1)
		    in  let <_4> =
			    apply %% Line 1059
				  'limit_map_assoc'/3
				(%% Line 1059
				 K, %% Line 1059
				    V, %% Line 1059
				       D0)
			in  %% Line 1059
			    apply 'limit_map_body'/4
				(NextI, _5, D0, [_4|Acc])
		%% Line 1060
		<'none'> when 'true' ->
		    %% Line 1061
		    call 'maps':'from_list'
			(Acc)
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_6})
		  -| ['compiler_generated'] )
	      end
	end
'limit_map_assoc'/3 =
    %% Line 1064
    fun (_0,_1,_2) ->
	let <_3> =
	    call %% Line 1066
		 'erlang':%% Line 1066
			  '-'
		(_2, %% Line 1066
		     1)
	in  let <_4> =
		apply %% Line 1066
		      'limit'/2
		    (_1, _3)
	    in  %% Line 1066
		{_0,_4}
'limit_bitstring'/2 =
    %% Line 1068
    fun (_0,_1) ->
	_0
'test_limit'/2 =
    %% Line 1070
    fun (_0,_1) ->
	case <_0,_1> of
	  <_8,0> when 'true' ->
	      call 'erlang':'throw'
		  ('limit')
	  %% Line 1071
	  <L = [H|T],D>
	      when call 'erlang':'is_integer'
		    (D) ->
	      %% Line 1072
	      case <> of
		%% Line 1073
		<>
		    when call 'erlang':'=:='
			  (D,
			   1) ->
		    call 'erlang':'throw'
			('limit')
		%% Line 1074
		<> when 'true' ->
		    %% Line 1075
		    case apply 'printable_list'/1
			     (L) of
		      %% Line 1076
		      <'true'> when 'true' ->
			  'ok'
		      %% Line 1077
		      <'false'> when 'true' ->
			  let <_2> =
			      call %% Line 1078
				   'erlang':%% Line 1078
					    '-'
				  (%% Line 1078
				   D, %% Line 1078
				      1)
			  in  do  %% Line 1078
				  apply 'test_limit'/2
				      (H, _2)
				  let <_3> =
				      call %% Line 1079
					   'erlang':%% Line 1079
						    '-'
					  (%% Line 1079
					   D, %% Line 1079
					      1)
				  in  %% Line 1079
				      apply 'test_limit_tail'/2
					  (T, _3)
		      ( <_4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_4})
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 1082
	  <Term,D>
	      when call 'erlang':'is_map'
		    (Term) ->
	      %% Line 1083
	      apply 'test_limit_map'/2
		  (Term, D)
	  %% Line 1084
	  <{},_X_D> when 'true' ->
	      'ok'
	  %% Line 1085
	  <T,D>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_5> =
		  call %% Line 1086
		       'erlang':%% Line 1086
				'tuple_size'
		      (%% Line 1086
		       T)
	      in  %% Line 1086
		  apply 'test_limit_tuple'/4
		      (T, 1, _5, D)
	  %% Line 1087
	  <Term = #{#<_9>('all',1,'binary',['unsigned'|['big']])}#,D> when 'true' ->
	      apply 'test_limit_bitstring'/2
		  (Term, D)
	  %% Line 1088
	  <_X_Term,_X_D> when 'true' ->
	      'ok'
	end
'test_limit_tail'/2 =
    %% Line 1090
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],_X_D> when 'true' ->
	      'ok'
	  %% Line 1091
	  <_7,1> when 'true' ->
	      call 'erlang':'throw'
		  ('limit')
	  %% Line 1092
	  <[H|T],D> when 'true' ->
	      let <_2> =
		  call %% Line 1093
		       'erlang':%% Line 1093
				'-'
		      (%% Line 1093
		       D, %% Line 1093
			  1)
	      in  do  %% Line 1093
		      apply 'test_limit'/2
			  (H, _2)
		      let <_3> =
			  call %% Line 1094
			       'erlang':%% Line 1094
					'-'
			      (%% Line 1094
			       D, %% Line 1094
				  1)
		      in  %% Line 1094
			  apply 'test_limit_tail'/2
			      (T, _3)
	  %% Line 1095
	  <Other,D> when 'true' ->
	      let <_4> =
		  call %% Line 1096
		       'erlang':%% Line 1096
				'-'
		      (%% Line 1096
		       D, %% Line 1096
			  1)
	      in  %% Line 1096
		  apply 'test_limit'/2
		      (Other, _4)
	end
'test_limit_tuple'/4 =
    %% Line 1098
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <_X_T,I,Sz,_X_D>
	      when call 'erlang':'>'
		    (I,
		     Sz) ->
	      'ok'
	  %% Line 1099
	  <_12,_13,_14,1> when 'true' ->
	      call 'erlang':'throw'
		  ('limit')
	  %% Line 1100
	  <T,I,Sz,D> when 'true' ->
	      let <_5> =
		  call %% Line 1101
		       'erlang':%% Line 1101
				'element'
		      (%% Line 1101
		       I, %% Line 1101
			  T)
	      in  let <_4> =
		      call %% Line 1101
			   'erlang':%% Line 1101
				    '-'
			  (%% Line 1101
			   D, %% Line 1101
			      1)
		  in  do  %% Line 1101
			  apply 'test_limit'/2
			      (_5, _4)
			  let <_7> =
			      call %% Line 1102
				   'erlang':%% Line 1102
					    '+'
				  (%% Line 1102
				   I, %% Line 1102
				      1)
			  in  let <_6> =
				  call %% Line 1102
				       'erlang':%% Line 1102
						'-'
				      (%% Line 1102
				       D, %% Line 1102
					  1)
			      in  %% Line 1102
				  apply 'test_limit_tuple'/4
				      (T, _7, Sz, _6)
	end
'test_limit_map'/2 =
    %% Line 1104
    fun (_0,_1) ->
	let <_2> =
	    call %% Line 1105
		 'maps':%% Line 1105
			'iterator'
		(_0)
	in  %% Line 1105
	    apply 'test_limit_map_body'/2
		(_2, _1)
'test_limit_map_body'/2 =
    %% Line 1107
    fun (_0,_1) ->
	case <_0,_1> of
	  <_X_I,0> when 'true' ->
	      call 'erlang':'throw'
		  ('limit')
	  %% Line 1108
	  <I,D> when 'true' ->
	      %% Line 1109
	      case call 'maps':'next'
		       (I) of
		%% Line 1110
		<{K,V,NextI}> when 'true' ->
		    do  %% Line 1111
			apply 'test_limit_map_assoc'/3
			    (K, V, D)
			let <_2> =
			    call %% Line 1112
				 'erlang':%% Line 1112
					  '-'
				(%% Line 1112
				 D, %% Line 1112
				    1)
			in  %% Line 1112
			    apply 'test_limit_map_body'/2
				(NextI, _2)
		%% Line 1113
		<'none'> when 'true' ->
		    %% Line 1114
		    'ok'
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_3})
		  -| ['compiler_generated'] )
	      end
	end
'test_limit_map_assoc'/3 =
    %% Line 1117
    fun (_0,_1,_2) ->
	let <_3> =
	    call %% Line 1118
		 'erlang':%% Line 1118
			  '-'
		(_2, %% Line 1118
		     1)
	in  do  %% Line 1118
		apply 'test_limit'/2
		    (_0, _3)
		let <_4> =
		    call %% Line 1119
			 'erlang':%% Line 1119
				  '-'
			(_2, %% Line 1119
			     1)
		in  %% Line 1119
		    apply 'test_limit'/2
			(_1, _4)
'test_limit_bitstring'/2 =
    %% Line 1121
    fun (_0,_1) ->
	'ok'
'chars_length'/1 =
    %% Line 1128
    fun (_0) ->
	%% Line 1129
	try
	    %% Line 1131
	    call 'erlang':'iolist_size'
		(_0)
	of <_1> ->
	    _1
	catch <_4,_3,_2> ->
	    %% Line 1134
	    call 'string':'length'
		(_0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('io_lib')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('io_lib', _0)
end