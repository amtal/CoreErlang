module 'orddict' ['append'/3,
		  'append_list'/3,
		  'erase'/2,
		  'fetch'/2,
		  'fetch_keys'/1,
		  'filter'/2,
		  'find'/2,
		  'fold'/3,
		  'from_list'/1,
		  'is_empty'/1,
		  'is_key'/2,
		  'map'/2,
		  'merge'/3,
		  'module_info'/0,
		  'module_info'/1,
		  'new'/0,
		  'size'/1,
		  'store'/3,
		  'take'/2,
		  'to_list'/1,
		  'update'/3,
		  'update'/4,
		  'update_counter'/3]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[111|[114|[100|[100|[105|[99|[116|[46|[101|[114|[108]]]]]]]]]]]]]]],1}],
		%% Line 29
		'export_type' =
		    %% Line 29
		    [{'orddict',0}|[{'orddict',2}]],
		%% Line 33
		'type' =
		    %% Line 33
		    [{'orddict',{'user_type',33,'orddict',[{'var',33,'_'}|[{'var',33,'_'}]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{'orddict',{'type',35,'list',[{'type',35,'tuple',[{'var',35,'Key'}|[{'var',35,'Value'}]]}]},[{'var',35,'Key'}|[{'var',35,'Value'}]]}],
		%% Line 39
		'spec' =
		    %% Line 39
		    [{{'new',0},[{'type',39,'fun',[{'type',39,'product',[]}|[{'user_type',39,'orddict',[]}]]}]}],
		%% Line 43
		'spec' =
		    %% Line 43
		    [{{'is_key',2},[{'type',43,'bounded_fun',[{'type',43,'fun',[{'type',43,'product',[{'var',43,'Key'}|[{'var',43,'Orddict'}]]}|[{'type',43,'boolean',[]}]]}|[[{'type',44,'constraint',[{'atom',44,'is_subtype'}|[[{'var',44,'Orddict'}|[{'user_type',44,'orddict',[{'var',44,'Key'}|[{'ann_type',44,[{'var',44,'Value'}|[{'type',44,'term',[]}]]}]]}]]]]}]]]}]}],
		%% Line 51
		'spec' =
		    %% Line 51
		    [{{'to_list',1},[{'type',51,'bounded_fun',[{'type',51,'fun',[{'type',51,'product',[{'var',51,'Orddict'}]}|[{'var',51,'List'}]]}|[[{'type',52,'constraint',[{'atom',52,'is_subtype'}|[[{'var',52,'Orddict'}|[{'user_type',52,'orddict',[{'var',52,'Key'}|[{'var',52,'Value'}]]}]]]]}|[{'type',53,'constraint',[{'atom',53,'is_subtype'}|[[{'var',53,'List'}|[{'type',53,'list',[{'type',53,'tuple',[{'var',53,'Key'}|[{'var',53,'Value'}]]}]}]]]]}]]]]}]}],
		%% Line 57
		'spec' =
		    %% Line 57
		    [{{'from_list',1},[{'type',57,'bounded_fun',[{'type',57,'fun',[{'type',57,'product',[{'var',57,'List'}]}|[{'var',57,'Orddict'}]]}|[[{'type',58,'constraint',[{'atom',58,'is_subtype'}|[[{'var',58,'List'}|[{'type',58,'list',[{'type',58,'tuple',[{'var',58,'Key'}|[{'var',58,'Value'}]]}]}]]]]}|[{'type',59,'constraint',[{'atom',59,'is_subtype'}|[[{'var',59,'Orddict'}|[{'user_type',59,'orddict',[{'var',59,'Key'}|[{'var',59,'Value'}]]}]]]]}]]]]}]}],
		%% Line 66
		'spec' =
		    %% Line 66
		    [{{'size',1},[{'type',66,'bounded_fun',[{'type',66,'fun',[{'type',66,'product',[{'var',66,'Orddict'}]}|[{'type',66,'non_neg_integer',[]}]]}|[[{'type',67,'constraint',[{'atom',67,'is_subtype'}|[[{'var',67,'Orddict'}|[{'user_type',67,'orddict',[]}]]]]}]]]}]}],
		%% Line 71
		'spec' =
		    %% Line 71
		    [{{'is_empty',1},[{'type',71,'bounded_fun',[{'type',71,'fun',[{'type',71,'product',[{'var',71,'Orddict'}]}|[{'type',71,'boolean',[]}]]}|[[{'type',72,'constraint',[{'atom',72,'is_subtype'}|[[{'var',72,'Orddict'}|[{'user_type',72,'orddict',[]}]]]]}]]]}]}],
		%% Line 77
		'spec' =
		    %% Line 77
		    [{{'fetch',2},[{'type',77,'bounded_fun',[{'type',77,'fun',[{'type',77,'product',[{'var',77,'Key'}|[{'var',77,'Orddict'}]]}|[{'var',77,'Value'}]]}|[[{'type',78,'constraint',[{'atom',78,'is_subtype'}|[[{'var',78,'Orddict'}|[{'user_type',78,'orddict',[{'var',78,'Key'}|[{'var',78,'Value'}]]}]]]]}]]]}]}],
		%% Line 83
		'spec' =
		    %% Line 83
		    [{{'find',2},[{'type',83,'bounded_fun',[{'type',83,'fun',[{'type',83,'product',[{'var',83,'Key'}|[{'var',83,'Orddict'}]]}|[{'type',83,'union',[{'type',83,'tuple',[{'atom',83,'ok'}|[{'var',83,'Value'}]]}|[{'atom',83,'error'}]]}]]}|[[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'Orddict'}|[{'user_type',84,'orddict',[{'var',84,'Key'}|[{'var',84,'Value'}]]}]]]]}]]]}]}],
		%% Line 91
		'spec' =
		    %% Line 91
		    [{{'fetch_keys',1},[{'type',91,'bounded_fun',[{'type',91,'fun',[{'type',91,'product',[{'var',91,'Orddict'}]}|[{'var',91,'Keys'}]]}|[[{'type',92,'constraint',[{'atom',92,'is_subtype'}|[[{'var',92,'Orddict'}|[{'user_type',92,'orddict',[{'var',92,'Key'}|[{'ann_type',92,[{'var',92,'Value'}|[{'type',92,'term',[]}]]}]]}]]]]}|[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'Keys'}|[{'type',93,'list',[{'var',93,'Key'}]}]]]]}]]]]}]}],
		%% Line 99
		'spec' =
		    %% Line 99
		    [{{'erase',2},[{'type',99,'bounded_fun',[{'type',99,'fun',[{'type',99,'product',[{'var',99,'Key'}|[{'var',99,'Orddict1'}]]}|[{'var',99,'Orddict2'}]]}|[[{'type',100,'constraint',[{'atom',100,'is_subtype'}|[[{'var',100,'Orddict1'}|[{'user_type',100,'orddict',[{'var',100,'Key'}|[{'var',100,'Value'}]]}]]]]}|[{'type',101,'constraint',[{'atom',101,'is_subtype'}|[[{'var',101,'Orddict2'}|[{'user_type',101,'orddict',[{'var',101,'Key'}|[{'var',101,'Value'}]]}]]]]}]]]]}]}],
		%% Line 109
		'spec' =
		    %% Line 109
		    [{{'take',2},[{'type',109,'bounded_fun',[{'type',109,'fun',[{'type',109,'product',[{'var',109,'Key'}|[{'var',109,'Orddict'}]]}|[{'type',109,'union',[{'type',109,'tuple',[{'var',109,'Value'}|[{'var',109,'Orddict1'}]]}|[{'atom',109,'error'}]]}]]}|[[{'type',110,'constraint',[{'atom',110,'is_subtype'}|[[{'var',110,'Orddict'}|[{'user_type',110,'orddict',[{'var',110,'Key'}|[{'var',110,'Value'}]]}]]]]}|[{'type',111,'constraint',[{'atom',111,'is_subtype'}|[[{'var',111,'Orddict1'}|[{'user_type',111,'orddict',[{'var',111,'Key'}|[{'var',111,'Value'}]]}]]]]}|[{'type',112,'constraint',[{'atom',112,'is_subtype'}|[[{'var',112,'Key'}|[{'type',112,'term',[]}]]]]}|[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'Value'}|[{'type',113,'term',[]}]]]]}]]]]]]}]}],
		%% Line 126
		'spec' =
		    %% Line 126
		    [{{'store',3},[{'type',126,'bounded_fun',[{'type',126,'fun',[{'type',126,'product',[{'var',126,'Key'}|[{'var',126,'Value'}|[{'var',126,'Orddict1'}]]]}|[{'var',126,'Orddict2'}]]}|[[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'Orddict1'}|[{'user_type',127,'orddict',[{'var',127,'Key'}|[{'var',127,'Value'}]]}]]]]}|[{'type',128,'constraint',[{'atom',128,'is_subtype'}|[[{'var',128,'Orddict2'}|[{'user_type',128,'orddict',[{'var',128,'Key'}|[{'var',128,'Value'}]]}]]]]}]]]]}]}],
		%% Line 138
		'spec' =
		    %% Line 138
		    [{{'append',3},[{'type',138,'bounded_fun',[{'type',138,'fun',[{'type',138,'product',[{'var',138,'Key'}|[{'var',138,'Value'}|[{'var',138,'Orddict1'}]]]}|[{'var',138,'Orddict2'}]]}|[[{'type',139,'constraint',[{'atom',139,'is_subtype'}|[[{'var',139,'Orddict1'}|[{'user_type',139,'orddict',[{'var',139,'Key'}|[{'var',139,'Value'}]]}]]]]}|[{'type',140,'constraint',[{'atom',140,'is_subtype'}|[[{'var',140,'Orddict2'}|[{'user_type',140,'orddict',[{'var',140,'Key'}|[{'var',140,'Value'}]]}]]]]}]]]]}]}],
		%% Line 150
		'spec' =
		    %% Line 150
		    [{{'append_list',3},[{'type',150,'bounded_fun',[{'type',150,'fun',[{'type',150,'product',[{'var',150,'Key'}|[{'var',150,'ValList'}|[{'var',150,'Orddict1'}]]]}|[{'var',150,'Orddict2'}]]}|[[{'type',151,'constraint',[{'atom',151,'is_subtype'}|[[{'var',151,'ValList'}|[{'type',151,'list',[{'var',151,'Value'}]}]]]]}|[{'type',152,'constraint',[{'atom',152,'is_subtype'}|[[{'var',152,'Orddict1'}|[{'user_type',152,'orddict',[{'var',152,'Key'}|[{'var',152,'Value'}]]}]]]]}|[{'type',153,'constraint',[{'atom',153,'is_subtype'}|[[{'var',153,'Orddict2'}|[{'user_type',153,'orddict',[{'var',153,'Key'}|[{'var',153,'Value'}]]}]]]]}]]]]]}]}],
		%% Line 164
		'spec' =
		    %% Line 164
		    [{{'update',3},[{'type',164,'bounded_fun',[{'type',164,'fun',[{'type',164,'product',[{'var',164,'Key'}|[{'var',164,'Fun'}|[{'var',164,'Orddict1'}]]]}|[{'var',164,'Orddict2'}]]}|[[{'type',165,'constraint',[{'atom',165,'is_subtype'}|[[{'var',165,'Fun'}|[{'type',165,'fun',[{'type',165,'product',[{'ann_type',165,[{'var',165,'Value1'}|[{'var',165,'Value'}]]}]}|[{'ann_type',165,[{'var',165,'Value2'}|[{'var',165,'Value'}]]}]]}]]]]}|[{'type',166,'constraint',[{'atom',166,'is_subtype'}|[[{'var',166,'Orddict1'}|[{'user_type',166,'orddict',[{'var',166,'Key'}|[{'var',166,'Value'}]]}]]]]}|[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'Orddict2'}|[{'user_type',167,'orddict',[{'var',167,'Key'}|[{'var',167,'Value'}]]}]]]]}]]]]]}]}],
		%% Line 174
		'spec' =
		    %% Line 174
		    [{{'update',4},[{'type',174,'bounded_fun',[{'type',174,'fun',[{'type',174,'product',[{'var',174,'Key'}|[{'var',174,'Fun'}|[{'var',174,'Initial'}|[{'var',174,'Orddict1'}]]]]}|[{'var',174,'Orddict2'}]]}|[[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'Initial'}|[{'var',175,'Value'}]]]]}|[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'Fun'}|[{'type',176,'fun',[{'type',176,'product',[{'ann_type',176,[{'var',176,'Value1'}|[{'var',176,'Value'}]]}]}|[{'ann_type',176,[{'var',176,'Value2'}|[{'var',176,'Value'}]]}]]}]]]]}|[{'type',177,'constraint',[{'atom',177,'is_subtype'}|[[{'var',177,'Orddict1'}|[{'user_type',177,'orddict',[{'var',177,'Key'}|[{'var',177,'Value'}]]}]]]]}|[{'type',178,'constraint',[{'atom',178,'is_subtype'}|[[{'var',178,'Orddict2'}|[{'user_type',178,'orddict',[{'var',178,'Key'}|[{'var',178,'Value'}]]}]]]]}]]]]]]}]}],
		%% Line 188
		'spec' =
		    %% Line 188
		    [{{'update_counter',3},[{'type',188,'bounded_fun',[{'type',188,'fun',[{'type',188,'product',[{'var',188,'Key'}|[{'var',188,'Increment'}|[{'var',188,'Orddict1'}]]]}|[{'var',188,'Orddict2'}]]}|[[{'type',189,'constraint',[{'atom',189,'is_subtype'}|[[{'var',189,'Orddict1'}|[{'user_type',189,'orddict',[{'var',189,'Key'}|[{'var',189,'Value'}]]}]]]]}|[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'Orddict2'}|[{'user_type',190,'orddict',[{'var',190,'Key'}|[{'var',190,'Value'}]]}]]]]}|[{'type',191,'constraint',[{'atom',191,'is_subtype'}|[[{'var',191,'Increment'}|[{'type',191,'number',[]}]]]]}]]]]]}]}],
		%% Line 201
		'spec' =
		    %% Line 201
		    [{{'fold',3},[{'type',201,'bounded_fun',[{'type',201,'fun',[{'type',201,'product',[{'var',201,'Fun'}|[{'var',201,'Acc0'}|[{'var',201,'Orddict'}]]]}|[{'var',201,'Acc1'}]]}|[[{'type',202,'constraint',[{'atom',202,'is_subtype'}|[[{'var',202,'Fun'}|[{'type',202,'fun',[{'type',202,'product',[{'var',202,'Key'}|[{'var',202,'Value'}|[{'var',202,'AccIn'}]]]}|[{'var',202,'AccOut'}]]}]]]]}|[{'type',203,'constraint',[{'atom',203,'is_subtype'}|[[{'var',203,'Orddict'}|[{'user_type',203,'orddict',[{'var',203,'Key'}|[{'var',203,'Value'}]]}]]]]}|[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'Acc0'}|[{'var',204,'Acc'}]]]]}|[{'type',205,'constraint',[{'atom',205,'is_subtype'}|[[{'var',205,'Acc1'}|[{'var',205,'Acc'}]]]]}|[{'type',206,'constraint',[{'atom',206,'is_subtype'}|[[{'var',206,'AccIn'}|[{'var',206,'Acc'}]]]]}|[{'type',207,'constraint',[{'atom',207,'is_subtype'}|[[{'var',207,'AccOut'}|[{'var',207,'Acc'}]]]]}]]]]]]]]}]}],
		%% Line 213
		'spec' =
		    %% Line 213
		    [{{'map',2},[{'type',213,'bounded_fun',[{'type',213,'fun',[{'type',213,'product',[{'var',213,'Fun'}|[{'var',213,'Orddict1'}]]}|[{'var',213,'Orddict2'}]]}|[[{'type',214,'constraint',[{'atom',214,'is_subtype'}|[[{'var',214,'Fun'}|[{'type',214,'fun',[{'type',214,'product',[{'var',214,'Key'}|[{'var',214,'Value1'}]]}|[{'var',214,'Value2'}]]}]]]]}|[{'type',215,'constraint',[{'atom',215,'is_subtype'}|[[{'var',215,'Orddict1'}|[{'user_type',215,'orddict',[{'var',215,'Key'}|[{'var',215,'Value1'}]]}]]]]}|[{'type',216,'constraint',[{'atom',216,'is_subtype'}|[[{'var',216,'Orddict2'}|[{'user_type',216,'orddict',[{'var',216,'Key'}|[{'var',216,'Value2'}]]}]]]]}]]]]]}]}],
		%% Line 222
		'spec' =
		    %% Line 222
		    [{{'filter',2},[{'type',222,'bounded_fun',[{'type',222,'fun',[{'type',222,'product',[{'var',222,'Pred'}|[{'var',222,'Orddict1'}]]}|[{'var',222,'Orddict2'}]]}|[[{'type',223,'constraint',[{'atom',223,'is_subtype'}|[[{'var',223,'Pred'}|[{'type',223,'fun',[{'type',223,'product',[{'var',223,'Key'}|[{'var',223,'Value'}]]}|[{'type',223,'boolean',[]}]]}]]]]}|[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'Orddict1'}|[{'user_type',224,'orddict',[{'var',224,'Key'}|[{'var',224,'Value'}]]}]]]]}|[{'type',225,'constraint',[{'atom',225,'is_subtype'}|[[{'var',225,'Orddict2'}|[{'user_type',225,'orddict',[{'var',225,'Key'}|[{'var',225,'Value'}]]}]]]]}]]]]]}]}],
		%% Line 234
		'spec' =
		    %% Line 234
		    [{{'merge',3},[{'type',234,'bounded_fun',[{'type',234,'fun',[{'type',234,'product',[{'var',234,'Fun'}|[{'var',234,'Orddict1'}|[{'var',234,'Orddict2'}]]]}|[{'var',234,'Orddict3'}]]}|[[{'type',235,'constraint',[{'atom',235,'is_subtype'}|[[{'var',235,'Fun'}|[{'type',235,'fun',[{'type',235,'product',[{'var',235,'Key'}|[{'var',235,'Value1'}|[{'var',235,'Value2'}]]]}|[{'var',235,'Value'}]]}]]]]}|[{'type',236,'constraint',[{'atom',236,'is_subtype'}|[[{'var',236,'Orddict1'}|[{'user_type',236,'orddict',[{'var',236,'Key'}|[{'var',236,'Value1'}]]}]]]]}|[{'type',237,'constraint',[{'atom',237,'is_subtype'}|[[{'var',237,'Orddict2'}|[{'user_type',237,'orddict',[{'var',237,'Key'}|[{'var',237,'Value2'}]]}]]]]}|[{'type',238,'constraint',[{'atom',238,'is_subtype'}|[[{'var',238,'Orddict3'}|[{'user_type',238,'orddict',[{'var',238,'Key'}|[{'var',238,'Value'}]]}]]]]}]]]]]]}]}]]
'new'/0 =
    %% Line 41
    fun () ->
	[]
'is_key'/2 =
    %% Line 46
    fun (_0,_1) ->
	case <_0,_1> of
	  <Key,[{K,_4}|_5]>
	      when call 'erlang':'<'
		    (Key,
		     K) ->
	      'false'
	  %% Line 47
	  <Key,[{K,_6}|Dict]>
	      when call 'erlang':'>'
		    (Key,
		     K) ->
	      apply 'is_key'/2
		  (Key, Dict)
	  %% Line 48
	  <_X_Key,[{_X_K,_X_Val}|_7]> when 'true' ->
	      'true'
	  %% Line 49
	  <_8,[]> when 'true' ->
	      'false'
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'is_key',2}}] )
	    -| ['compiler_generated'] )
	end
'to_list'/1 =
    %% Line 55
    fun (_0) ->
	_0
'from_list'/1 =
    %% Line 61
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      []
	  %% Line 62
	  <Pair = [{_3,_4}|[]]> when 'true' ->
	      Pair
	  %% Line 63
	  <Pairs> when 'true' ->
	      let <_1> =
		  apply %% Line 64
			'reverse_pairs'/2
		      (%% Line 64
		       Pairs, %% Line 64
			      [])
	      in  %% Line 64
		  call 'lists':'ukeysort'
		      (1, _1)
	end
'size'/1 =
    %% Line 69
    fun (_0) ->
	call 'erlang':'length'
	    (_0)
'is_empty'/1 =
    %% Line 74
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      'true'
	  %% Line 75
	  <[_2|_3]> when 'true' ->
	      'false'
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'is_empty',1}}] )
	    -| ['compiler_generated'] )
	end
'fetch'/2 =
    %% Line 80
    fun (_0,_1) ->
	case <_0,_1> of
	  <Key,[{K,_4}|D]>
	      when call 'erlang':'>'
		    (Key,
		     K) ->
	      apply 'fetch'/2
		  (Key, D)
	  %% Line 81
	  <Key,[{K,Value}|_5]>
	      when call 'erlang':'=='
		    (Key,
		     K) ->
	      Value
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'fetch',2}}] )
	    -| ['compiler_generated'] )
	end
'find'/2 =
    %% Line 86
    fun (_0,_1) ->
	case <_0,_1> of
	  <Key,[{K,_4}|_5]>
	      when call 'erlang':'<'
		    (Key,
		     K) ->
	      'error'
	  %% Line 87
	  <Key,[{K,_6}|D]>
	      when call 'erlang':'>'
		    (Key,
		     K) ->
	      apply 'find'/2
		  (Key, D)
	  %% Line 88
	  <_X_Key,[{_X_K,Value}|_7]> when 'true' ->
	      {'ok',Value}
	  %% Line 89
	  <_8,[]> when 'true' ->
	      'error'
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'find',2}}] )
	    -| ['compiler_generated'] )
	end
'fetch_keys'/1 =
    %% Line 95
    fun (_0) ->
	case _0 of
	  <[{Key,_3}|Dict]> when 'true' ->
	      let <_1> =
		  apply %% Line 96
			'fetch_keys'/1
		      (%% Line 96
		       Dict)
	      in  %% Line 96
		  [Key|_1]
	  %% Line 97
	  <[]> when 'true' ->
	      []
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'fetch_keys',1}}] )
	    -| ['compiler_generated'] )
	end
'erase'/2 =
    %% Line 103
    fun (_0,_1) ->
	case <_0,_1> of
	  <Key,_@r0 = [E = {K,_5}|Dict]>
	      when call 'erlang':'<'
		    (Key,
		     K) ->
	      _@r0
	  %% Line 104
	  <Key,[E = {K,_6}|Dict]>
	      when call 'erlang':'>'
		    (Key,
		     K) ->
	      let <_2> =
		  apply %% Line 105
			'erase'/2
		      (%% Line 105
		       Key, %% Line 105
			    Dict)
	      in  %% Line 105
		  [E|_2]
	  %% Line 106
	  <_X_Key,[{_X_K,_X_Val}|Dict]> when 'true' ->
	      Dict
	  %% Line 107
	  <_7,[]> when 'true' ->
	      []
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'erase',2}}] )
	    -| ['compiler_generated'] )
	end
'take'/2 =
    %% Line 115
    fun (_0,_1) ->
	%% Line 116
	apply 'take_1'/3
	    (_0, _1, [])
'take_1'/3 =
    %% Line 118
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Key,[{K,_7}|_8],_X_Acc>
	      when call 'erlang':'<'
		    (Key,
		     K) ->
	      %% Line 119
	      'error'
	  %% Line 120
	  <Key,[P = {K,_9}|D],Acc>
	      when call 'erlang':'>'
		    (Key,
		     K) ->
	      %% Line 121
	      apply 'take_1'/3
		  (Key, D, [P|Acc])
	  %% Line 122
	  <_X_Key,[{_X_K,Value}|D],Acc> when 'true' ->
	      let <_3> =
		  call %% Line 123
		       'lists':%% Line 123
			       'reverse'
		      (%% Line 123
		       Acc, %% Line 123
			    D)
	      in  %% Line 123
		  {Value,_3}
	  %% Line 124
	  <_10,[],_11> when 'true' ->
	      'error'
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'take_1',3}}] )
	    -| ['compiler_generated'] )
	end
'store'/3 =
    %% Line 130
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Key,New,Dict = [{K,_7}|_8]>
	      when call 'erlang':'<'
		    (Key,
		     K) ->
	      %% Line 131
	      [{Key,New}|Dict]
	  %% Line 132
	  <Key,New,[E = {K,_9}|Dict]>
	      when call 'erlang':'>'
		    (Key,
		     K) ->
	      let <_3> =
		  apply %% Line 133
			'store'/3
		      (%% Line 133
		       Key, %% Line 133
			    New, %% Line 133
				 Dict)
	      in  %% Line 133
		  [E|_3]
	  %% Line 134
	  <Key,New,[{_X_K,_X_Old}|Dict]> when 'true' ->
	      %% Line 135
	      [{Key,New}|Dict]
	  %% Line 136
	  <Key,New,[]> when 'true' ->
	      [{Key,New}|[]]
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'store',3}}] )
	    -| ['compiler_generated'] )
	end
'append'/3 =
    %% Line 142
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Key,New,Dict = [{K,_8}|_9]>
	      when call 'erlang':'<'
		    (Key,
		     K) ->
	      %% Line 143
	      [{Key,[New|[]]}|Dict]
	  %% Line 144
	  <Key,New,[E = {K,_10}|Dict]>
	      when call 'erlang':'>'
		    (Key,
		     K) ->
	      let <_3> =
		  apply %% Line 145
			'append'/3
		      (%% Line 145
		       Key, %% Line 145
			    New, %% Line 145
				 Dict)
	      in  %% Line 145
		  [E|_3]
	  %% Line 146
	  <Key,New,[{_X_K,Old}|Dict]> when 'true' ->
	      let <_4> =
		  call %% Line 147
		       'erlang':%% Line 147
				'++'
		      (%% Line 147
		       Old, %% Line 147
			    [New|[]])
	      in  %% Line 147
		  [{Key,_4}|Dict]
	  %% Line 148
	  <Key,New,[]> when 'true' ->
	      [{Key,[New|[]]}|[]]
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'append',3}}] )
	    -| ['compiler_generated'] )
	end
'append_list'/3 =
    %% Line 155
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Key,NewList,Dict = [{K,_8}|_9]>
	      when call 'erlang':'<'
		    (Key,
		     K) ->
	      %% Line 156
	      [{Key,NewList}|Dict]
	  %% Line 157
	  <Key,NewList,[E = {K,_10}|Dict]>
	      when call 'erlang':'>'
		    (Key,
		     K) ->
	      let <_3> =
		  apply %% Line 158
			'append_list'/3
		      (%% Line 158
		       Key, %% Line 158
			    NewList, %% Line 158
				     Dict)
	      in  %% Line 158
		  [E|_3]
	  %% Line 159
	  <Key,NewList,[{_X_K,Old}|Dict]> when 'true' ->
	      let <_4> =
		  call %% Line 160
		       'erlang':%% Line 160
				'++'
		      (%% Line 160
		       Old, %% Line 160
			    NewList)
	      in  %% Line 160
		  [{Key,_4}|Dict]
	  %% Line 161
	  <Key,NewList,[]> when 'true' ->
	      %% Line 162
	      [{Key,NewList}|[]]
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'append_list',3}}] )
	    -| ['compiler_generated'] )
	end
'update'/3 =
    %% Line 169
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Key,Fun,[E = {K,_8}|Dict]>
	      when call 'erlang':'>'
		    (Key,
		     K) ->
	      let <_3> =
		  apply %% Line 170
			'update'/3
		      (%% Line 170
		       Key, %% Line 170
			    Fun, %% Line 170
				 Dict)
	      in  %% Line 170
		  [E|_3]
	  %% Line 171
	  <Key,Fun,[{K,Val}|Dict]>
	      when call 'erlang':'=='
		    (Key,
		     K) ->
	      let <_4> =
		  apply %% Line 172
			Fun
		      (%% Line 172
		       Val)
	      in  %% Line 172
		  [{Key,_4}|Dict]
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'update',3}}] )
	    -| ['compiler_generated'] )
	end
'update'/4 =
    %% Line 180
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Key,_10,Init,Dict = [{K,_11}|_12]>
	      when call 'erlang':'<'
		    (Key,
		     K) ->
	      %% Line 181
	      [{Key,Init}|Dict]
	  %% Line 182
	  <Key,Fun,Init,[E = {K,_13}|Dict]>
	      when call 'erlang':'>'
		    (Key,
		     K) ->
	      let <_4> =
		  apply %% Line 183
			'update'/4
		      (%% Line 183
		       Key, %% Line 183
			    Fun, %% Line 183
				 Init, %% Line 183
				       Dict)
	      in  %% Line 183
		  [E|_4]
	  %% Line 184
	  <Key,Fun,_X_Init,[{_X_K,Val}|Dict]> when 'true' ->
	      let <_5> =
		  apply %% Line 185
			Fun
		      (%% Line 185
		       Val)
	      in  %% Line 185
		  [{Key,_5}|Dict]
	  %% Line 186
	  <Key,_14,Init,[]> when 'true' ->
	      [{Key,Init}|[]]
	  ( <_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6})
		  -| [{'function_name',{'update',4}}] )
	    -| ['compiler_generated'] )
	end
'update_counter'/3 =
    %% Line 193
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Key,Incr,Dict = [{K,_8}|_9]>
	      when call 'erlang':'<'
		    (Key,
		     K) ->
	      %% Line 194
	      [{Key,Incr}|Dict]
	  %% Line 195
	  <Key,Incr,[E = {K,_10}|Dict]>
	      when call 'erlang':'>'
		    (Key,
		     K) ->
	      let <_3> =
		  apply %% Line 196
			'update_counter'/3
		      (%% Line 196
		       Key, %% Line 196
			    Incr, %% Line 196
				  Dict)
	      in  %% Line 196
		  [E|_3]
	  %% Line 197
	  <Key,Incr,[{_X_K,Val}|Dict]> when 'true' ->
	      let <_4> =
		  call %% Line 198
		       'erlang':%% Line 198
				'+'
		      (%% Line 198
		       Val, %% Line 198
			    Incr)
	      in  %% Line 198
		  [{Key,_4}|Dict]
	  %% Line 199
	  <Key,Incr,[]> when 'true' ->
	      [{Key,Incr}|[]]
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'update_counter',3}}] )
	    -| ['compiler_generated'] )
	end
'fold'/3 =
    %% Line 209
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <F,Acc,[{Key,Val}|D]> when 'true' ->
	      let <_3> =
		  apply %% Line 210
			F
		      (%% Line 210
		       Key, %% Line 210
			    Val, %% Line 210
				 Acc)
	      in  %% Line 210
		  apply 'fold'/3
		      (F, _3, D)
	  %% Line 211
	  <F,Acc,[]>
	      when call 'erlang':'is_function'
		    (F,
		     3) ->
	      Acc
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'fold',3}}] )
	    -| ['compiler_generated'] )
	end
'map'/2 =
    %% Line 218
    fun (_0,_1) ->
	case <_0,_1> of
	  <F,[{Key,Val}|D]> when 'true' ->
	      let <_2> =
		  apply %% Line 219
			F
		      (%% Line 219
		       Key, %% Line 219
			    Val)
	      in  let <_3> =
		      apply %% Line 219
			    'map'/2
			  (%% Line 219
			   F, %% Line 219
			      D)
		  in  %% Line 219
		      [{Key,_2}|_3]
	  %% Line 220
	  <F,[]>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      []
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'map',2}}] )
	    -| ['compiler_generated'] )
	end
'filter'/2 =
    %% Line 227
    fun (_0,_1) ->
	case <_0,_1> of
	  <F,[E = {Key,Val}|D]> when 'true' ->
	      %% Line 228
	      case apply F
		       (Key, Val) of
		%% Line 229
		<'true'> when 'true' ->
		    let <_2> =
			apply 'filter'/2
			    (F, D)
		    in  [E|_2]
		%% Line 230
		<'false'> when 'true' ->
		    apply 'filter'/2
			(F, D)
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 232
	  <F,[]>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      []
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'filter',2}}] )
	    -| ['compiler_generated'] )
	end
'merge'/3 =
    %% Line 240
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <F,[E1 = {K1,_10}|D1],_@r0 = [E2 = {K2,_11}|D2]>
	      when call 'erlang':'<'
		    (K1,
		     K2) ->
	      let <_3> =
		  apply %% Line 241
			'merge'/3
		      (%% Line 241
		       F, %% Line 241
			  D1, %% Line 241
			      _@r0)
	      in  %% Line 241
		  [E1|_3]
	  %% Line 242
	  <F,_@r1 = [E1 = {K1,_12}|D1],[E2 = {K2,_13}|D2]>
	      when call 'erlang':'>'
		    (K1,
		     K2) ->
	      let <_4> =
		  apply %% Line 243
			'merge'/3
		      (%% Line 243
		       F, %% Line 243
			  _@r1, %% Line 243
				D2)
	      in  %% Line 243
		  [E2|_4]
	  %% Line 244
	  <F,[{K1,V1}|D1],[{_X_K2,V2}|D2]> when 'true' ->
	      let <_5> =
		  apply %% Line 245
			F
		      (%% Line 245
		       K1, %% Line 245
			   V1, %% Line 245
			       V2)
	      in  let <_6> =
		      apply %% Line 245
			    'merge'/3
			  (%% Line 245
			   F, %% Line 245
			      D1, %% Line 245
				  D2)
		  in  %% Line 245
		      [{K1,_5}|_6]
	  %% Line 246
	  <F,[],D2>
	      when call 'erlang':'is_function'
		    (F,
		     3) ->
	      D2
	  %% Line 247
	  <F,D1,[]>
	      when call 'erlang':'is_function'
		    (F,
		     3) ->
	      D1
	  ( <_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7})
		  -| [{'function_name',{'merge',3}}] )
	    -| ['compiler_generated'] )
	end
'reverse_pairs'/2 =
    %% Line 249
    fun (_0,_1) ->
	case <_0,_1> of
	  <[H = {_4,_5}|T],Acc> when 'true' ->
	      %% Line 250
	      apply 'reverse_pairs'/2
		  (T, [H|Acc])
	  %% Line 251
	  <[],Acc> when 'true' ->
	      Acc
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'reverse_pairs',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('orddict')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('orddict', _0)
end