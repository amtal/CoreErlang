module 'io_lib_pretty' ['intermediate'/6,
			'module_info'/0,
			'module_info'/1,
			'print'/1,
			'print'/2,
			'print'/3,
			'print'/4,
			'print'/5,
			'print'/6,
			'write'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[105|[111|[95|[108|[105|[98|[95|[112|[114|[101|[116|[116|[121|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 40
		'spec' =
		    %% Line 40
		    [{{'print',1},[{'type',40,'fun',[{'type',40,'product',[{'type',40,'term',[]}]}|[{'remote_type',40,[{'atom',40,'io_lib'}|[{'atom',40,'chars'}|[[]]]]}]]}]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{'rec_print_fun',{'type',50,'fun',[{'type',50,'product',[{'ann_type',50,[{'var',50,'Tag'}|[{'type',50,'atom',[]}]]}|[{'ann_type',50,[{'var',50,'NFields'}|[{'type',50,'non_neg_integer',[]}]]}]]}|[{'type',51,'union',[{'atom',51,'no'}|[{'type',51,'list',[{'ann_type',51,[{'var',51,'FieldName'}|[{'type',51,'atom',[]}]]}]}]]}]]},[]}],
		%% Line 52
		'type' =
		    %% Line 52
		    [{'column',{'type',52,'integer',[]},[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'encoding',{'type',53,'union',[{'remote_type',53,[{'atom',53,'epp'}|[{'atom',53,'source_encoding'}|[[]]]]}|[{'atom',53,'unicode'}]]},[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{'line_length',{'type',54,'pos_integer',[]},[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{'depth',{'type',55,'integer',[]},[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{'line_max_chars',{'type',56,'integer',[]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{'chars_limit',{'type',57,'integer',[]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'chars',{'remote_type',59,[{'atom',59,'io_lib'}|[{'atom',59,'chars'}|[[]]]]},[]}],
		%% Line 60
		'type' =
		    %% Line 60
		    [{'option',{'type',60,'union',[{'type',60,'tuple',[{'atom',60,'chars_limit'}|[{'user_type',60,'chars_limit',[]}]]}|[{'type',61,'tuple',[{'atom',61,'column'}|[{'user_type',61,'column',[]}]]}|[{'type',62,'tuple',[{'atom',62,'depth'}|[{'user_type',62,'depth',[]}]]}|[{'type',63,'tuple',[{'atom',63,'encoding'}|[{'user_type',63,'encoding',[]}]]}|[{'type',64,'tuple',[{'atom',64,'line_length'}|[{'user_type',64,'line_length',[]}]]}|[{'type',65,'tuple',[{'atom',65,'line_max_chars'}|[{'user_type',65,'line_max_chars',[]}]]}|[{'type',66,'tuple',[{'atom',66,'record_print_fun'}|[{'user_type',66,'rec_print_fun',[]}]]}|[{'type',67,'tuple',[{'atom',67,'strings'}|[{'type',67,'boolean',[]}]]}]]]]]]]]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'options',{'type',68,'list',[{'user_type',68,'option',[]}]},[]}],
		%% Line 70
		'spec' =
		    %% Line 70
		    [{{'print',2},[{'type',70,'fun',[{'type',70,'product',[{'type',70,'term',[]}|[{'user_type',70,'rec_print_fun',[]}]]}|[{'user_type',70,'chars',[]}]]}|[{'type',71,'fun',[{'type',71,'product',[{'type',71,'term',[]}|[{'user_type',71,'options',[]}]]}|[{'user_type',71,'chars',[]}]]}]]}],
		%% Line 86
		'spec' =
		    %% Line 86
		    [{{'print',3},[{'type',86,'fun',[{'type',86,'product',[{'type',86,'term',[]}|[{'user_type',86,'depth',[]}|[{'user_type',86,'rec_print_fun',[]}]]]}|[{'user_type',86,'chars',[]}]]}]}],
		%% Line 91
		'spec' =
		    %% Line 91
		    [{{'print',4},[{'type',91,'fun',[{'type',91,'product',[{'type',91,'term',[]}|[{'user_type',91,'column',[]}|[{'user_type',91,'line_length',[]}|[{'user_type',91,'depth',[]}]]]]}|[{'user_type',91,'chars',[]}]]}]}],
		%% Line 96
		'spec' =
		    %% Line 96
		    [{{'print',5},[{'type',96,'fun',[{'type',96,'product',[{'type',96,'term',[]}|[{'user_type',96,'column',[]}|[{'user_type',96,'line_length',[]}|[{'user_type',96,'depth',[]}|[{'user_type',96,'rec_print_fun',[]}]]]]]}|[{'user_type',97,'chars',[]}]]}]}],
		%% Line 101
		'spec' =
		    %% Line 101
		    [{{'print',6},[{'type',101,'fun',[{'type',101,'product',[{'type',101,'term',[]}|[{'user_type',101,'column',[]}|[{'user_type',101,'line_length',[]}|[{'user_type',101,'depth',[]}|[{'user_type',101,'line_max_chars',[]}|[{'user_type',102,'rec_print_fun',[]}]]]]]]}|[{'user_type',102,'chars',[]}]]}]}],
		%% Line 417
		'type' =
		    %% Line 417
		    [{'more',{'type',417,'fun',[{'type',417,'product',[{'user_type',417,'chars_limit',[]}|[{'ann_type',417,[{'var',417,'DeltaDepth'}|[{'type',417,'non_neg_integer',[]}]]}]]}|[{'user_type',418,'intermediate_format',[]}]]},[]}],
		%% Line 420
		'type' =
		    %% Line 420
		    [{'if_list',{'type',420,'maybe_improper_list',[{'user_type',420,'intermediate_format',[]}|[{'type',421,'tuple',[{'atom',421,'dots'}|[{'type',421,'non_neg_integer',[]}|[{'type',422,'non_neg_integer',[]}|[{'user_type',422,'more',[]}]]]]}]]},[]}],
		%% Line 424
		'type' =
		    %% Line 424
		    [{'intermediate_format',{'type',425,'tuple',[{'type',425,'union',[{'user_type',425,'chars',[]}|[{'type',426,'tuple',[{'atom',426,'bin'}|[{'user_type',426,'chars',[]}]]}|[{'atom',427,'dots'}|[{'type',428,'tuple',[{'atom',428,'field'}|[{'ann_type',428,[{'var',428,'Name'}|[{'user_type',428,'chars',[]}]]}|[{'ann_type',428,[{'var',428,'NameLen'}|[{'type',428,'non_neg_integer',[]}]]}|[{'user_type',429,'intermediate_format',[]}]]]]}|[{'type',430,'tuple',[{'atom',430,'list'}|[{'user_type',430,'if_list',[]}]]}|[{'type',431,'tuple',[{'atom',431,'map'}|[{'user_type',431,'if_list',[]}]]}|[{'type',432,'tuple',[{'atom',432,'map_pair'}|[{'ann_type',432,[{'var',432,'K'}|[{'user_type',432,'intermediate_format',[]}]]}|[{'ann_type',433,[{'var',433,'V'}|[{'user_type',433,'intermediate_format',[]}]]}]]]}|[{'type',434,'tuple',[{'atom',434,'record'}|[{'type',434,'list',[{'type',434,'union',[{'type',434,'tuple',[{'ann_type',434,[{'var',434,'Name'}|[{'user_type',434,'chars',[]}]]}|[{'ann_type',434,[{'var',434,'NameLen'}|[{'type',434,'non_neg_integer',[]}]]}]]}|[{'user_type',435,'if_list',[]}]]}]}]]}|[{'type',436,'tuple',[{'atom',436,'tuple'}|[{'ann_type',436,[{'var',436,'IsTagged'}|[{'type',436,'boolean',[]}]]}|[{'user_type',436,'if_list',[]}]]]}]]]]]]]]]}|[{'ann_type',437,[{'var',437,'Len'}|[{'type',437,'non_neg_integer',[]}]]}|[{'ann_type',438,[{'var',438,'NumOfDots'}|[{'type',438,'non_neg_integer',[]}]]}|[{'ann_type',439,[{'var',439,'More'}|[{'type',439,'union',[{'user_type',439,'more',[]}|[{'atom',439,'no_more'}]]}]]}]]]]},[]}],
		%% Line 442
		'spec' =
		    %% Line 442
		    [{{'intermediate',6},[{'type',442,'fun',[{'type',442,'product',[{'type',442,'term',[]}|[{'user_type',442,'depth',[]}|[{'type',442,'pos_integer',[]}|[{'user_type',442,'rec_print_fun',[]}|[{'user_type',443,'encoding',[]}|[{'type',443,'boolean',[]}]]]]]]}|[{'user_type',443,'intermediate_format',[]}]]}]}]]
'print'/1 =
    %% Line 42
    fun (_0) ->
	%% Line 43
	apply 'print'/4
	    (_0, 1, 80, -1)
'print'/2 =
    %% Line 73
    fun (_0,_1) ->
	case <_0,_1> of
	  <Term,Options>
	      when call 'erlang':'is_list'
		    (Options) ->
	      let <Col> =
		  apply %% Line 74
			'get_option'/3
		      (%% Line 74
		       'column', %% Line 74
				 Options, %% Line 74
					  1)
	      in  let <Ll> =
		      apply %% Line 75
			    'get_option'/3
			  (%% Line 75
			   'line_length', %% Line 75
					  Options, %% Line 75
						   80)
		  in  let <D> =
			  apply %% Line 76
				'get_option'/3
			      (%% Line 76
			       'depth', %% Line 76
					Options, %% Line 76
						 -1)
		      in  let <M> =
			      apply %% Line 77
				    'get_option'/3
				  (%% Line 77
				   'line_max_chars', %% Line 77
						     Options, %% Line 77
							      -1)
			  in  let <T> =
				  apply %% Line 78
					'get_option'/3
				      (%% Line 78
				       'chars_limit', %% Line 78
						      Options, %% Line 78
							       -1)
			      in  let <RecDefFun> =
				      apply %% Line 79
					    'get_option'/3
					  (%% Line 79
					   'record_print_fun', %% Line 79
							       Options, %% Line 79
									'no_fun')
				  in  let <_11> =
					  call %% Line 80
					       'epp':%% Line 80
						     'default_encoding'
					      ()
				      in  let <Encoding> =
					      apply %% Line 80
						    'get_option'/3
						  (%% Line 80
						   'encoding', %% Line 80
							       Options, _11)
					  in  let <Strings> =
						  apply %% Line 81
							'get_option'/3
						      (%% Line 81
						       'strings', %% Line 81
								  Options, %% Line 81
									   'true')
					      in  %% Line 82
						  apply 'print'/9
						      (Term, Col, Ll, D, M, T, RecDefFun, Encoding, Strings)
	  %% Line 83
	  <Term,RecDefFun> when 'true' ->
	      %% Line 84
	      apply 'print'/3
		  (Term, -1, RecDefFun)
	end
'print'/3 =
    %% Line 88
    fun (_0,_1,_2) ->
	%% Line 89
	apply 'print'/5
	    (_0, 1, 80, _1, _2)
'print'/4 =
    %% Line 93
    fun (_0,_1,_2,_3) ->
	%% Line 94
	apply 'print'/9
	    (_0, _1, _2, _3, -1, -1, 'no_fun', 'latin1', 'true')
'print'/5 =
    %% Line 98
    fun (_0,_1,_2,_3,_4) ->
	%% Line 99
	apply 'print'/6
	    (_0, _1, _2, _3, -1, _4)
'print'/6 =
    %% Line 104
    fun (_0,_1,_2,_3,_4,_5) ->
	%% Line 105
	apply 'print'/9
	    (_0, _1, _2, _3, _4, -1, _5, 'latin1', 'true')
'print'/9 =
    %% Line 114
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <_37,_38,_39,0,_X_M,_X_T,_X_RF,_X_Enc,_X_Str> when 'true' ->
	      [46|[46|[46]]]
	  %% Line 115
	  <_40,_41,_42,_X_D,_X_M,0,_X_RF,_X_Enc,_X_Str> when 'true' ->
	      [46|[46|[46]]]
	  %% Line 116
	  <Term,Col,Ll,D,M,T,RecDefFun,Enc,Str>
	      when call 'erlang':'=<'
		    (Col,
		     0) ->
	      %% Line 118
	      apply 'print'/9
		  (Term, 1, Ll, D, M, T, RecDefFun, Enc, Str)
	  %% Line 119
	  <Atom,_X_Col,_X_Ll,_X_D,_X_M,_X_T,_X_RF,Enc,_X_Str>
	      when call 'erlang':'is_atom'
		    (Atom) ->
	      %% Line 120
	      apply 'write_atom'/2
		  (Atom, Enc)
	  %% Line 121
	  <Term,Col,Ll,D,M0,T,RecDefFun,Enc,Str>
	      when let <_9> =
		    call 'erlang':'is_tuple'
			(Term)
		in  let <_10> =
			call %% Line 122
			     'erlang':%% Line 122
				      'is_list'
			    (%% Line 122
			     Term)
		    in  let <_11> =
			    call %% Line 123
				 'erlang':%% Line 123
					  'is_map'
				(%% Line 123
				 Term)
			in  let <_12> =
				call %% Line 124
				     'erlang':%% Line 124
					      'is_bitstring'
				    (%% Line 124
				     Term)
			    in  let <_13> =
				    call %% Line 123
					 'erlang':%% Line 123
						  'or'
					(_11, _12)
				in  let <_14> =
					call %% Line 122
					     'erlang':%% Line 122
						      'or'
					    (_10, _13)
				    in  call 'erlang':'or'
					    (_9, _14) ->
	      let <_16> =
		  case <> of
		    %% Line 128
		    <>
			when call 'erlang':'<'
			      (T,
			       0) ->
			apply 'print_length'/6
			    (Term, D, T, RecDefFun, Enc, Str)
		    %% Line 129
		    <> when 'true' ->
			apply 'intermediate'/6
			    (Term, D, T, RecDefFun, Enc, Str)
		  end
	      in  %% Line 126
		  case _16 of
		    <If = {_43,Len,_X_Dots,_44}> when 'true' ->
			let <M> =
			    apply %% Line 132
				  'max_cs'/2
				(%% Line 132
				 M0, %% Line 132
				     Len)
			in  %% Line 133
			    case <> of
			      %% Line 134
			      <>
				  when call 'erlang':'=:='
					(Ll,
					 0) ->
				  %% Line 135
				  apply 'write'/1
				      (If)
			      %% Line 136
			      <>
				  when try
					let <_19> =
					    call 'erlang':'-'
						(Ll, Col)
					in  let <_20> =
						call 'erlang':'<'
						    (Len, _19)
					    in  let <_21> =
						    call 'erlang':'=<'
							(Len, M)
						in  call 'erlang':'and'
							(_20, _21)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  %% Line 138
				  apply 'write'/1
				      (If)
			      %% Line 139
			      <> when 'true' ->
				  let <_24> =
				      fun (_22) ->
					  %% Line 142
					  apply 'cind'/7
					      (If, Col, Ll, M, _22, 0, 0)
				  in  let <TInd> =
					  apply %% Line 141
						'while_fail'/3
					      (%% Line 141
					       [-1|[4]], _24, %% Line 143
							      1)
				      in  let <_27> =
					      apply %% Line 144
						    'indent'/1
						  (%% Line 144
						   Col)
					  in  %% Line 144
					      apply 'pp'/8
						  (If, Col, Ll, M, TInd, _27, 0, 0)
			    end
		    ( <_17> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_17})
		      -| ['compiler_generated'] )
		  end
	  %% Line 146
	  <Term,_X_Col,_X_Ll,_X_D,_X_M,_X_T,_X_RF,_X_Enc,_X_Str> when 'true' ->
	      %% Line 148
	      call 'io_lib':'write'
		  (Term)
	end
'max_cs'/2 =
    %% Line 155
    fun (_0,_1) ->
	case <_0,_1> of
	  <M,Len>
	      when call 'erlang':'<'
		    (M,
		     0) ->
	      %% Line 156
	      Len
	  %% Line 157
	  <M,_X_Len> when 'true' ->
	      %% Line 158
	      M
	end
'pp'/8 =
    %% Line 167
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <If = {_X_S,Len,_41,_42},Col,Ll,M,_X_TInd,_X_Ind,LD,W>
	      when %% Line 168
		try
		    let <_8> =
			call 'erlang':'-'
			    (Ll, Col)
		    in  let <_9> =
			    call 'erlang':'-'
				(_8, LD)
			in  let <_10> =
				call 'erlang':'<'
				    (Len, _9)
			    in  let <_11> =
				    call 'erlang':'+'
					(Len, W)
				in  let <_12> =
					call 'erlang':'+'
					    (_11, LD)
				    in  let <_13> =
					    call 'erlang':'=<'
						(_12, M)
					in  call 'erlang':'and'
						(_10, _13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 169
	      apply 'write'/1
		  (If)
	  %% Line 170
	  <{{'list',L},_X_Len,_43,_44},Col,Ll,M,TInd,Ind,LD,W> when 'true' ->
	      let <_16> =
		  call %% Line 171
		       'erlang':%% Line 171
				'+'
		      (%% Line 171
		       Col, %% Line 171
			    1)
	      in  let <_15> =
		      apply %% Line 171
			    'indent'/2
			  (%% Line 171
			   1, %% Line 171
			      Ind)
		  in  let <_14> =
			  call %% Line 171
			       'erlang':%% Line 171
					'+'
			      (%% Line 171
			       W, %% Line 171
				  1)
		      in  let <_17> =
			      apply %% Line 171
				    'pp_list'/9
				  (%% Line 171
				   L, _16, %% Line 171
					   Ll, %% Line 171
					       M, %% Line 171
						  TInd, _15, %% Line 171
							     LD, %% Line 171
								 124, _14)
			  in  %% Line 171
			      [91|[_17|[93]]]
	  %% Line 172
	  <{{'tuple','true',L},_X_Len,_45,_46},Col,Ll,M,TInd,Ind,LD,W> when 'true' ->
	      let <_18> =
		  call %% Line 173
		       'erlang':%% Line 173
				'+'
		      (%% Line 173
		       W, %% Line 173
			  1)
	      in  let <_19> =
		      apply %% Line 173
			    'pp_tag_tuple'/8
			  (%% Line 173
			   L, %% Line 173
			      Col, %% Line 173
				   Ll, %% Line 173
				       M, %% Line 173
					  TInd, %% Line 173
						Ind, %% Line 173
						     LD, _18)
		  in  %% Line 173
		      [123|[_19|[125]]]
	  %% Line 174
	  <{{'tuple','false',L},_X_Len,_47,_48},Col,Ll,M,TInd,Ind,LD,W> when 'true' ->
	      let <_22> =
		  call %% Line 175
		       'erlang':%% Line 175
				'+'
		      (%% Line 175
		       Col, %% Line 175
			    1)
	      in  let <_21> =
		      apply %% Line 175
			    'indent'/2
			  (%% Line 175
			   1, %% Line 175
			      Ind)
		  in  let <_20> =
			  call %% Line 175
			       'erlang':%% Line 175
					'+'
			      (%% Line 175
			       W, %% Line 175
				  1)
		      in  let <_23> =
			      apply %% Line 175
				    'pp_list'/9
				  (%% Line 175
				   L, _22, %% Line 175
					   Ll, %% Line 175
					       M, %% Line 175
						  TInd, _21, %% Line 175
							     LD, %% Line 175
								 44, _20)
			  in  %% Line 175
			      [123|[_23|[125]]]
	  %% Line 176
	  <{{'map',Pairs},_X_Len,_49,_50},Col,Ll,M,TInd,Ind,LD,W> when 'true' ->
	      let <_26> =
		  call %% Line 177
		       'erlang':%% Line 177
				'+'
		      (%% Line 177
		       Col, %% Line 177
			    2)
	      in  let <_25> =
		      apply %% Line 177
			    'indent'/2
			  (%% Line 177
			   2, %% Line 177
			      Ind)
		  in  let <_24> =
			  call %% Line 177
			       'erlang':%% Line 177
					'+'
			      (%% Line 177
			       W, %% Line 177
				  1)
		      in  let <_27> =
			      apply %% Line 177
				    'pp_map'/8
				  (%% Line 177
				   Pairs, _26, %% Line 177
					       Ll, %% Line 177
						   M, %% Line 177
						      TInd, _25, %% Line 177
								 LD, _24)
			  in  %% Line 177
			      [35|[123|[_27|%% Line 178
					    [125]]]]
	  %% Line 179
	  <{{'record',[{Name,NLen}|L]},_X_Len,_51,_52},Col,Ll,M,TInd,Ind,LD,W> when 'true' ->
	      let <_28> =
		  call %% Line 180
		       'erlang':%% Line 180
				'+'
		      (%% Line 180
		       W, %% Line 180
			  NLen)
	      in  let <_29> =
		      call %% Line 180
			   'erlang':%% Line 180
				    '+'
			  (_28, %% Line 180
				1)
		  in  let <_30> =
			  apply %% Line 180
				'pp_record'/9
			      (%% Line 180
			       L, %% Line 180
				  NLen, %% Line 180
					Col, %% Line 180
					     Ll, %% Line 180
						 M, %% Line 180
						    TInd, %% Line 180
							  Ind, %% Line 180
							       LD, _29)
		      in  %% Line 180
			  [Name|[123|[_30|[125]]]]
	  %% Line 181
	  <{{'bin',S},_X_Len,_53,_54},Col,Ll,M,_X_TInd,Ind,LD,W> when 'true' ->
	      let <_32> =
		  call %% Line 182
		       'erlang':%% Line 182
				'+'
		      (%% Line 182
		       Col, %% Line 182
			    2)
	      in  let <_31> =
		      apply %% Line 182
			    'indent'/2
			  (%% Line 182
			   2, %% Line 182
			      Ind)
		  in  %% Line 182
		      apply 'pp_binary'/7
			  (S, _32, Ll, M, _31, LD, W)
	  %% Line 183
	  <{S,_X_Len,_55,_56},_X_Col,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 184
	      S
	  ( <_40,_39,_38,_37,_36,_35,_34,_33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_40,_39,_38,_37,_36,_35,_34,_33})
		  -| [{'function_name',{'pp',8}}] )
	    -| ['compiler_generated'] )
	end
'pp_tag_tuple'/8 =
    %% Line 188
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <[{Tag,Tlen,_29,_30}|L],Col,Ll,M,TInd,Ind,LD,W> when 'true' ->
	      let <TagInd> =
		  call %% Line 190
		       'erlang':%% Line 190
				'+'
		      (%% Line 190
		       Tlen, %% Line 190
			     2)
	      in  let <Tcol> =
		      call %% Line 191
			   'erlang':%% Line 191
				    '+'
			  (%% Line 191
			   Col, %% Line 191
				TagInd)
		  in  %% Line 193
		      case <> of
			%% Line 194
			<>
			    when let <_11> =
				  call 'erlang':'>'
				      (TInd, 0)
			      in  let <_12> =
				      call 'erlang':'>'
					  (TagInd, TInd)
				  in  call 'erlang':'and'
					  (_11, _12) ->
			    let <Col1> =
				call %% Line 195
				     'erlang':%% Line 195
					      '+'
				    (%% Line 195
				     Col, %% Line 195
					  TInd)
			    in  let <Indent> =
				    apply %% Line 196
					  'indent'/2
					(%% Line 196
					 TInd, %% Line 196
					       Ind)
				in  let <_15> =
					call %% Line 197
					     'erlang':%% Line 197
						      '+'
					    (%% Line 197
					     W, %% Line 197
						Tlen)
				    in  let <_16> =
					    apply %% Line 197
						  'pp_tail'/10
						(%% Line 197
						 L, %% Line 197
						    Col1, %% Line 197
							  Tcol, %% Line 197
								Ll, %% Line 197
								    M, %% Line 197
								       TInd, %% Line 197
									     Indent, %% Line 197
										     LD, 44, _15)
					in  %% Line 197
					    [Tag|_16]
			%% Line 198
			<> when 'true' ->
			    let <Indent> =
				apply %% Line 199
				      'indent'/2
				    (%% Line 199
				     TagInd, %% Line 199
					     Ind)
			    in  let <_18> =
				    call %% Line 200
					 'erlang':%% Line 200
						  '+'
					(%% Line 200
					 W, %% Line 200
					    Tlen)
				in  let <_19> =
					call %% Line 200
					     'erlang':%% Line 200
						      '+'
					    (_18, %% Line 200
						  1)
				    in  let <_20> =
					    apply %% Line 200
						  'pp_list'/9
						(%% Line 200
						 L, %% Line 200
						    Tcol, %% Line 200
							  Ll, %% Line 200
							      M, %% Line 200
								 TInd, %% Line 200
								       Indent, %% Line 200
									       LD, 44, _19)
					in  %% Line 200
					    [Tag|[44|_20]]
		      end
	  ( <_28,_27,_26,_25,_24,_23,_22,_21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_28,_27,_26,_25,_24,_23,_22,_21})
		  -| [{'function_name',{'pp_tag_tuple',8}}] )
	    -| ['compiler_generated'] )
	end
'pp_map'/8 =
    %% Line 203
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <[],_X_Col,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 204
	      []
	  %% Line 205
	  <{'dots',_20,_21,_22},_X_Col,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 206
	      [46|[46|[46]]]
	  %% Line 207
	  <[P|Ps],Col,Ll,M,TInd,Ind,LD,W> when 'true' ->
	      let <_8> =
		  apply %% Line 208
			'last_depth'/2
		      (%% Line 208
		       Ps, %% Line 208
			   LD)
	      in  %% Line 208
		  case apply 'pp_pair'/8
			   (P, Col, Ll, M, TInd, Ind, _8, W) of
		    <{PS,PW}> when 'true' ->
			let <_10> =
			    call %% Line 209
				 'erlang':%% Line 209
					  '+'
				(%% Line 209
				 Col, %% Line 209
				      PW)
			in  let <_11> =
				apply %% Line 209
				      'pp_pairs_tail'/9
				    (%% Line 209
				     Ps, %% Line 209
					 Col, _10, %% Line 209
						   Ll, %% Line 209
						       M, %% Line 209
							  TInd, %% Line 209
								Ind, %% Line 209
								     LD, %% Line 209
									 PW)
			    in  %% Line 209
				[PS|_11]
		    ( <_9> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_9})
		      -| ['compiler_generated'] )
		  end
	  ( <_19,_18,_17,_16,_15,_14,_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_19,_18,_17,_16,_15,_14,_13,_12})
		  -| [{'function_name',{'pp_map',8}}] )
	    -| ['compiler_generated'] )
	end
'pp_pairs_tail'/9 =
    %% Line 211
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <[],_X_Col0,_X_Col,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 212
	      []
	  %% Line 213
	  <{'dots',_67,_68,_69},_X_Col0,_X_Col,_X_M,_X_Ll,_X_TInd,_X_Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 214
	      [44|[46|[46|[46]]]]
	  %% Line 215
	  <[P = {_70,Len,_71,_72}|Ps],Col0,Col,Ll,M,TInd,Ind,LD,W> when 'true' ->
	      let <LD1> =
		  apply %% Line 216
			'last_depth'/2
		      (%% Line 216
		       Ps, %% Line 216
			   LD)
	      in  let <ELen> =
		      call %% Line 217
			   'erlang':%% Line 217
				    '+'
			  (%% Line 217
			   1, %% Line 217
			      Len)
		  in  %% Line 218
		      case <> of
			%% Line 219
			<>
			    when let <_30> =
				  try
				      let <_11> =
					  call 'erlang':'=:='
					      (LD1, 0)
				      in  let <_13> =
					      call 'erlang':'+'
						  (ELen, 1)
					  in  let <_12> =
						  call 'erlang':'-'
						      (Ll, Col)
					      in  let <_14> =
						      call 'erlang':'<'
							  (_13, _12)
						  in  let <_15> =
							  call 'erlang':'+'
							      (W, ELen)
						      in  let <_16> =
							      call 'erlang':'+'
								  (_15, 1)
							  in  let <_17> =
								  call 'erlang':'=<'
								      (_16, M)
							      in  let <_19> =
								      call 'erlang':'element'
									  (1, P)
								  in  let <_20> =
									  call 'erlang':'element'
									      (2, _19)
								      in  let <_21> =
									      call 'erlang':'element'
										  (1, _20)
									  in  ( let <_26> =
										    case call 'erlang':'is_list'
											     (_21) of
										      ( <( 'true'
											   -| ['compiler_generated'] )> when 'true' ->
											    let <_22> =
												call 'erlang':'element'
												    (1, P)
											    in  let <_23> =
												    call 'erlang':'element'
													(3, _22)
												in  let <_24> =
													call 'erlang':'element'
													    (1, _23)
												    in  call 'erlang':'is_list'
													    (_24)
											-| ['compiler_generated'] )
										      ( <( 'false'
											   -| ['compiler_generated'] )> when 'true' ->
											    'false'
											-| ['compiler_generated'] )
										      ( <_18> when 'true' ->
											    _18
											-| ['compiler_generated'] )
										    end
										in  let <_27> =
											call 'erlang':'=:='
											    (( _26
											       -| ['compiler_generated'] ), 'true')
										    in  let <_28> =
											    call 'erlang':'and'
												(_17, _27)
											in  let <_29> =
												call 'erlang':'and'
												    (_14, _28)
											    in  call 'erlang':'and'
												    (_11, _29)
										-| ['compiler_generated'] )
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
			      in  let <_50> =
				      try
					  let <_31> =
					      call %% Line 220
						   'erlang':%% Line 220
							    '>'
						  (%% Line 220
						   LD1, %% Line 220
							0)
					  in  let <_32> =
						  call %% Line 220
						       'erlang':%% Line 220
								'-'
						      (%% Line 220
						       Ll, %% Line 220
							   Col)
					      in  let <_33> =
						      call %% Line 220
							   'erlang':%% Line 220
								    '-'
							  (_32, %% Line 220
								LD1)
						  in  let <_34> =
							  call %% Line 220
							       'erlang':%% Line 220
									'<'
							      (%% Line 220
							       ELen, _33)
						      in  let <_35> =
							      call %% Line 220
								   'erlang':%% Line 220
									    '+'
								  (%% Line 220
								   W, %% Line 220
								      ELen)
							  in  let <_36> =
								  call %% Line 220
								       'erlang':%% Line 220
										'+'
								      (_35, %% Line 220
									    LD1)
							      in  let <_37> =
								      call %% Line 220
									   'erlang':%% Line 220
										    '=<'
									  (_36, %% Line 220
										M)
								  in  let <_39> =
									  call %% Line 220
									       'erlang':%% Line 220
											'element'
									      (%% Line 220
									       1, %% Line 220
										  P)
								      in  let <_40> =
									      call %% Line 220
										   'erlang':%% Line 220
											    'element'
										  (%% Line 220
										   2, _39)
									  in  let <_41> =
										  call %% Line 220
										       'erlang':%% Line 220
												'element'
										      (%% Line 220
										       1, _40)
									      in  ( let <_46> =
											case %% Line 220
											     call 'erlang':'is_list'
												 (_41) of
											  %% Line 220
											  ( <( 'true'
											       -| ['compiler_generated'] )> when 'true' ->
												let <_42> =
												    call 'erlang':'element'
													(1, P)
												in  let <_43> =
													call 'erlang':'element'
													    (3, _42)
												    in  let <_44> =
													    call 'erlang':'element'
														(1, _43)
													in  call 'erlang':'is_list'
														(_44)
											    -| ['compiler_generated'] )
											  %% Line 220
											  ( <( 'false'
											       -| ['compiler_generated'] )> when 'true' ->
												'false'
											    -| ['compiler_generated'] )
											  %% Line 220
											  ( <_38> when 'true' ->
												_38
											    -| ['compiler_generated'] )
											end
										    in  let <_47> =
											    call 'erlang':'=:='
												(%% Line 220
												 ( _46
												   -| ['compiler_generated'] ), 'true')
											in  let <_48> =
												call %% Line 220
												     'erlang':%% Line 220
													      'and'
												    (_37, _47)
											    in  let <_49> =
												    call %% Line 220
													 'erlang':%% Line 220
														  'and'
													(_34, _48)
												in  %% Line 220
												    call 'erlang':'and'
													(_31, _49)
										    -| ['compiler_generated'] )
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false'
				  in  call 'erlang':'or'
					  (_30, _50) ->
			    let <_51> =
				apply %% Line 221
				      'write_pair'/1
				    (%% Line 221
				     P)
			    in  let <_53> =
				    call %% Line 222
					 'erlang':%% Line 222
						  '+'
					(%% Line 222
					 Col, %% Line 222
					      ELen)
				in  let <_52> =
					call %% Line 222
					     'erlang':%% Line 222
						      '+'
					    (%% Line 222
					     W, %% Line 222
						ELen)
				    in  let <_54> =
					    apply %% Line 222
						  'pp_pairs_tail'/9
						(%% Line 222
						 Ps, %% Line 222
						     Col0, _53, %% Line 222
								Ll, %% Line 222
								    M, %% Line 222
								       TInd, %% Line 222
									     Ind, %% Line 222
										  LD, _52)
					in  %% Line 221
					    [44|[_51|_54]]
			%% Line 223
			<> when 'true' ->
			    %% Line 224
			    case apply 'pp_pair'/8
				     (P, Col0, Ll, M, TInd, Ind, LD1, 0) of
			      <{PS,PW}> when 'true' ->
				  let <_56> =
				      call %% Line 226
					   'erlang':%% Line 226
						    '+'
					  (%% Line 226
					   Col0, %% Line 226
						 PW)
				  in  let <_57> =
					  apply %% Line 226
						'pp_pairs_tail'/9
					      (%% Line 226
					       Ps, %% Line 226
						   Col0, _56, %% Line 226
							      Ll, %% Line 226
								  M, %% Line 226
								     TInd, %% Line 226
									   Ind, %% Line 226
										LD, %% Line 226
										    PW)
				      in  %% Line 225
					  [44|[10|[Ind|[PS|_57]]]]
			      ( <_55> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_55})
				-| ['compiler_generated'] )
			    end
		      end
	  ( <_66,_65,_64,_63,_62,_61,_60,_59,_58> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_66,_65,_64,_63,_62,_61,_60,_59,_58})
		  -| [{'function_name',{'pp_pairs_tail',9}}] )
	    -| ['compiler_generated'] )
	end
'pp_pair'/8 =
    %% Line 229
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <Pair = {_38,Len,_39,_40},Col,Ll,M,_X_TInd,_X_Ind,LD,W>
	      when %% Line 230
		try
		    let <_8> =
			call 'erlang':'-'
			    (Ll, Col)
		    in  let <_9> =
			    call 'erlang':'-'
				(_8, LD)
			in  let <_10> =
				call 'erlang':'<'
				    (Len, _9)
			    in  let <_11> =
				    call 'erlang':'+'
					(Len, W)
				in  let <_12> =
					call 'erlang':'+'
					    (_11, LD)
				    in  let <_13> =
					    call 'erlang':'=<'
						(_12, M)
					in  call 'erlang':'and'
						(_10, _13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_24> =
		  apply %% Line 231
			'write_pair'/1
		      (%% Line 231
		       Pair)
	      in  let <_23> =
		      case <> of
			%% Line 232
			<>
			    when try
				  let <_15> =
				      call 'erlang':'element'
					  (1, Pair)
				  in  let <_16> =
					  call 'erlang':'element'
					      (2, _15)
				      in  let <_17> =
					      call 'erlang':'element'
						  (1, _16)
					  in  ( let <_22> =
						    case call 'erlang':'is_list'
							     (_17) of
						      ( <( 'true'
							   -| ['compiler_generated'] )> when 'true' ->
							    let <_18> =
								call 'erlang':'element'
								    (1, Pair)
							    in  let <_19> =
								    call 'erlang':'element'
									(3, _18)
								in  let <_20> =
									call 'erlang':'element'
									    (1, _19)
								    in  call 'erlang':'is_list'
									    (_20)
							-| ['compiler_generated'] )
						      ( <( 'false'
							   -| ['compiler_generated'] )> when 'true' ->
							    'false'
							-| ['compiler_generated'] )
						      ( <_14> when 'true' ->
							    _14
							-| ['compiler_generated'] )
						    end
						in  ( call 'erlang':'=:='
							  (( _22
							     -| ['compiler_generated'] ), 'true')
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    %% Line 233
			    Len
			%% Line 234
			<> when 'true' ->
			    %% Line 235
			    Ll
		      end
		  in  %% Line 231
		      {_24,_23}
	  %% Line 237
	  <{{'map_pair',K,V},_X_Len,_41,_42},Col0,Ll,M,TInd,Ind0,LD,W> when 'true' ->
	      let <I> =
		  apply %% Line 238
			'map_value_indent'/1
		      (%% Line 238
		       TInd)
	      in  let <Ind> =
		      apply %% Line 239
			    'indent'/2
			  (%% Line 239
			   I, %% Line 239
			      Ind0)
		  in  let <_27> =
			  apply %% Line 240
				'pp'/8
			      (%% Line 240
			       K, %% Line 240
				  Col0, %% Line 240
					Ll, %% Line 240
					    M, %% Line 240
					       TInd, %% Line 240
						     Ind0, %% Line 240
							   LD, %% Line 240
							       W)
		      in  let <_28> =
			      call %% Line 241
				   'erlang':%% Line 241
					    '+'
				  (%% Line 241
				   Col0, %% Line 241
					 I)
			  in  let <_29> =
				  apply %% Line 241
					'pp'/8
				      (%% Line 241
				       V, _28, %% Line 241
					       Ll, %% Line 241
						   M, %% Line 241
						      TInd, %% Line 241
							    Ind, %% Line 241
								 LD, %% Line 241
								     0)
			      in  %% Line 240
				  {[_27|[[32|[61|[62|[10]]]]|%% Line 241
							     [Ind|_29]]],%% Line 241
									 Ll}
	  ( <_37,_36,_35,_34,_33,_32,_31,_30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_37,_36,_35,_34,_33,_32,_31,_30})
		  -| [{'function_name',{'pp_pair',8}}] )
	    -| ['compiler_generated'] )
	end
'pp_record'/9 =
    %% Line 243
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <[],_X_Nlen,_X_Col,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 244
	      []
	  %% Line 245
	  <{'dots',_25,_26,_27},_X_Nlen,_X_Col,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 246
	      [46|[46|[46]]]
	  %% Line 247
	  <[F|Fs],Nlen,Col0,Ll,M,TInd,Ind0,LD,W0> when 'true' ->
	      let <Nind> =
		  call %% Line 248
		       'erlang':%% Line 248
				'+'
		      (%% Line 248
		       Nlen, %% Line 248
			     1)
	      in  %% Line 249
		  case apply 'rec_indent'/5
			   (Nind, TInd, Col0, Ind0, W0) of
		    <{Col,Ind,S,W}> when 'true' ->
			let <_11> =
			    apply %% Line 250
				  'last_depth'/2
				(%% Line 250
				 Fs, %% Line 250
				     LD)
			in  %% Line 250
			    case apply 'pp_field'/8
				     (F, Col, Ll, M, TInd, Ind, _11, W) of
			      <{FS,FW}> when 'true' ->
				  let <_14> =
				      call %% Line 251
					   'erlang':%% Line 251
						    '+'
					  (%% Line 251
					   Col, %% Line 251
						FW)
				  in  let <_13> =
					  call %% Line 251
					       'erlang':%% Line 251
							'+'
					      (%% Line 251
					       W, %% Line 251
						  FW)
				      in  let <_15> =
					      apply %% Line 251
						    'pp_fields_tail'/9
						  (%% Line 251
						   Fs, %% Line 251
						       Col, _14, %% Line 251
								 Ll, %% Line 251
								     M, %% Line 251
									TInd, %% Line 251
									      Ind, %% Line 251
										   LD, _13)
					  in  %% Line 251
					      [S|[FS|_15]]
			      ( <_12> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_12})
				-| ['compiler_generated'] )
			    end
		    ( <_10> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_10})
		      -| ['compiler_generated'] )
		  end
	  ( <_24,_23,_22,_21,_20,_19,_18,_17,_16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_24,_23,_22,_21,_20,_19,_18,_17,_16})
		  -| [{'function_name',{'pp_record',9}}] )
	    -| ['compiler_generated'] )
	end
'pp_fields_tail'/9 =
    %% Line 253
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <[],_X_Col0,_X_Col,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 254
	      []
	  %% Line 255
	  <{'dots',_55,_56,_57},_X_Col0,_X_Col,_X_M,_X_Ll,_X_TInd,_X_Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 256
	      [44|[46|[46|[46]]]]
	  %% Line 257
	  <[F = {_58,Len,_59,_60}|Fs],Col0,Col,Ll,M,TInd,Ind,LD,W> when 'true' ->
	      let <LD1> =
		  apply %% Line 258
			'last_depth'/2
		      (%% Line 258
		       Fs, %% Line 258
			   LD)
	      in  let <ELen> =
		      call %% Line 259
			   'erlang':%% Line 259
				    '+'
			  (%% Line 259
			   1, %% Line 259
			      Len)
		  in  %% Line 260
		      case <> of
			%% Line 261
			<>
			    when let <_24> =
				  try
				      let <_11> =
					  call 'erlang':'=:='
					      (LD1, 0)
				      in  let <_13> =
					      call 'erlang':'+'
						  (ELen, 1)
					  in  let <_12> =
						  call 'erlang':'-'
						      (Ll, Col)
					      in  let <_14> =
						      call 'erlang':'<'
							  (_13, _12)
						  in  let <_15> =
							  call 'erlang':'+'
							      (W, ELen)
						      in  let <_16> =
							      call 'erlang':'+'
								  (_15, 1)
							  in  let <_17> =
								  call 'erlang':'=<'
								      (_16, M)
							      in  let <_18> =
								      call 'erlang':'element'
									  (1, F)
								  in  let <_19> =
									  call 'erlang':'element'
									      (4, _18)
								      in  let <_20> =
									      call 'erlang':'element'
										  (1, _19)
									  in  let <_21> =
										  call 'erlang':'is_list'
										      (_20)
									      in  let <_22> =
										      call 'erlang':'and'
											  (_17, _21)
										  in  let <_23> =
											  call 'erlang':'and'
											      (_14, _22)
										      in  call 'erlang':'and'
											      (_11, _23)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
			      in  let <_38> =
				      try
					  let <_25> =
					      call %% Line 262
						   'erlang':%% Line 262
							    '>'
						  (%% Line 262
						   LD1, %% Line 262
							0)
					  in  let <_26> =
						  call %% Line 262
						       'erlang':%% Line 262
								'-'
						      (%% Line 262
						       Ll, %% Line 262
							   Col)
					      in  let <_27> =
						      call %% Line 262
							   'erlang':%% Line 262
								    '-'
							  (_26, %% Line 262
								LD1)
						  in  let <_28> =
							  call %% Line 262
							       'erlang':%% Line 262
									'<'
							      (%% Line 262
							       ELen, _27)
						      in  let <_29> =
							      call %% Line 262
								   'erlang':%% Line 262
									    '+'
								  (%% Line 262
								   W, %% Line 262
								      ELen)
							  in  let <_30> =
								  call %% Line 262
								       'erlang':%% Line 262
										'+'
								      (_29, %% Line 262
									    LD1)
							      in  let <_31> =
								      call %% Line 262
									   'erlang':%% Line 262
										    '=<'
									  (_30, %% Line 262
										M)
								  in  let <_32> =
									  call %% Line 262
									       'erlang':%% Line 262
											'element'
									      (%% Line 262
									       1, %% Line 262
										  F)
								      in  let <_33> =
									      call %% Line 262
										   'erlang':%% Line 262
											    'element'
										  (%% Line 262
										   4, _32)
									  in  let <_34> =
										  call %% Line 262
										       'erlang':%% Line 262
												'element'
										      (%% Line 262
										       1, _33)
									      in  let <_35> =
										      call %% Line 262
											   'erlang':%% Line 262
												    'is_list'
											  (_34)
										  in  let <_36> =
											  call %% Line 262
											       'erlang':%% Line 262
													'and'
											      (_31, _35)
										      in  let <_37> =
											      call %% Line 262
												   'erlang':%% Line 262
													    'and'
												  (_28, _36)
											  in  %% Line 262
											      call 'erlang':'and'
												  (_25, _37)
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false'
				  in  call 'erlang':'or'
					  (_24, _38) ->
			    let <_39> =
				apply %% Line 263
				      'write_field'/1
				    (%% Line 263
				     F)
			    in  let <_41> =
				    call %% Line 264
					 'erlang':%% Line 264
						  '+'
					(%% Line 264
					 Col, %% Line 264
					      ELen)
				in  let <_40> =
					call %% Line 264
					     'erlang':%% Line 264
						      '+'
					    (%% Line 264
					     W, %% Line 264
						ELen)
				    in  let <_42> =
					    apply %% Line 264
						  'pp_fields_tail'/9
						(%% Line 264
						 Fs, %% Line 264
						     Col0, _41, %% Line 264
								Ll, %% Line 264
								    M, %% Line 264
								       TInd, %% Line 264
									     Ind, %% Line 264
										  LD, _40)
					in  %% Line 263
					    [44|[_39|_42]]
			%% Line 265
			<> when 'true' ->
			    %% Line 266
			    case apply 'pp_field'/8
				     (F, Col0, Ll, M, TInd, Ind, LD1, 0) of
			      <{FS,FW}> when 'true' ->
				  let <_44> =
				      call %% Line 268
					   'erlang':%% Line 268
						    '+'
					  (%% Line 268
					   Col0, %% Line 268
						 FW)
				  in  let <_45> =
					  apply %% Line 268
						'pp_fields_tail'/9
					      (%% Line 268
					       Fs, %% Line 268
						   Col0, _44, %% Line 268
							      Ll, %% Line 268
								  M, %% Line 268
								     TInd, %% Line 268
									   Ind, %% Line 268
										LD, %% Line 268
										    FW)
				      in  %% Line 267
					  [44|[10|[Ind|[FS|_45]]]]
			      ( <_43> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_43})
				-| ['compiler_generated'] )
			    end
		      end
	  ( <_54,_53,_52,_51,_50,_49,_48,_47,_46> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_54,_53,_52,_51,_50,_49,_48,_47,_46})
		  -| [{'function_name',{'pp_fields_tail',9}}] )
	    -| ['compiler_generated'] )
	end
'pp_field'/8 =
    %% Line 271
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <Fl = {_33,Len,_34,_35},Col,Ll,M,_X_TInd,_X_Ind,LD,W>
	      when %% Line 272
		try
		    let <_8> =
			call 'erlang':'-'
			    (Ll, Col)
		    in  let <_9> =
			    call 'erlang':'-'
				(_8, LD)
			in  let <_10> =
				call 'erlang':'<'
				    (Len, _9)
			    in  let <_11> =
				    call 'erlang':'+'
					(Len, W)
				in  let <_12> =
					call 'erlang':'+'
					    (_11, LD)
				    in  let <_13> =
					    call 'erlang':'=<'
						(_12, M)
					in  call 'erlang':'and'
						(_10, _13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_18> =
		  apply %% Line 273
			'write_field'/1
		      (%% Line 273
		       Fl)
	      in  let <_17> =
		      case <> of
			%% Line 274
			<>
			    when try
				  let <_14> =
				      call 'erlang':'element'
					  (1, Fl)
				  in  let <_15> =
					  call 'erlang':'element'
					      (4, _14)
				      in  let <_16> =
					      call 'erlang':'element'
						  (1, _15)
					  in  call 'erlang':'is_list'
						  (_16)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    %% Line 275
			    Len
			%% Line 276
			<> when 'true' ->
			    %% Line 277
			    Ll
		      end
		  in  %% Line 273
		      {_18,_17}
	  %% Line 279
	  <{{'field',Name,NameL,F},_36,_37,_38},Col0,Ll,M,TInd,Ind0,LD,W0> when 'true' ->
	      let <_19> =
		  call %% Line 280
		       'erlang':%% Line 280
				'+'
		      (%% Line 280
		       W0, %% Line 280
			   NameL)
	      in  %% Line 280
		  case apply 'rec_indent'/5
			   (NameL, TInd, Col0, Ind0, _19) of
		    <{Col,Ind,S,W}> when 'true' ->
			let <_22> =
			    case %% Line 281
				 S of
			      %% Line 282
			      <[10|_39]> when 'true' ->
				  [32|[61]]
			      %% Line 283
			      <_40> when 'true' ->
				  [32|[61|[32]]]
			    end
			in  let <_24> =
				apply %% Line 285
				      'pp'/8
				    (%% Line 285
				     F, %% Line 285
					Col, %% Line 285
					     Ll, %% Line 285
						 M, %% Line 285
						    TInd, %% Line 285
							  Ind, %% Line 285
							       LD, %% Line 285
								   W)
			    in  %% Line 285
				{[Name|[_22|[S|_24]]],Ll}
		    ( <_20> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_20})
		      -| ['compiler_generated'] )
		  end
	  ( <_32,_31,_30,_29,_28,_27,_26,_25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_32,_31,_30,_29,_28,_27,_26,_25})
		  -| [{'function_name',{'pp_field',8}}] )
	    -| ['compiler_generated'] )
	end
'rec_indent'/5 =
    %% Line 287
    fun (_0,_1,_2,_3,_4) ->
	let <_6> =
	    call %% Line 289
		 'erlang':%% Line 289
			  '>'
		(_1, %% Line 289
		     0)
	in  let <_5> =
		call %% Line 289
		     'erlang':%% Line 289
			      '>'
		    (_0, _1)
	    in  let <Nl> =
		    call %% Line 289
			 'erlang':%% Line 289
				  'and'
			(_6, _5)
		in  let <_9> =
			case %% Line 290
			     Nl of
			  %% Line 291
			  <'true'> when 'true' ->
			      _1
			  %% Line 292
			  <'false'> when 'true' ->
			      _0
			  ( <_8> when 'true' ->
				%% Line 290
				primop 'match_fail'
				    ({'case_clause',_8})
			    -| ['compiler_generated'] )
			end
		    in  let <Col> =
			    call %% Line 294
				 'erlang':%% Line 294
					  '+'
				(_2, _9)
			in  let <Ind> =
				apply %% Line 295
				      'indent'/2
				    (_9, _3)
			    in  let <_14> =
				    case %% Line 296
					 Nl of
				      %% Line 297
				      <'true'> when 'true' ->
					  [10|Ind]
				      %% Line 298
				      <'false'> when 'true' ->
					  []
				      ( <_13> when 'true' ->
					    %% Line 296
					    primop 'match_fail'
						({'case_clause',_13})
					-| ['compiler_generated'] )
				    end
				in  let <_17> =
					case %% Line 300
					     Nl of
					  %% Line 301
					  <'true'> when 'true' ->
					      0
					  %% Line 302
					  <'false'> when 'true' ->
					      _4
					  ( <_16> when 'true' ->
						%% Line 300
						primop 'match_fail'
						    ({'case_clause',_16})
					    -| ['compiler_generated'] )
					end
				    in  %% Line 304
					{Col,Ind,_14,_17}
'pp_list'/9 =
    %% Line 306
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <{'dots',_23,_24,_25},_X_Col0,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,_X_S,_X_W> when 'true' ->
	      %% Line 307
	      [46|[46|[46]]]
	  %% Line 308
	  <[E|Es],Col0,Ll,M,TInd,Ind,LD,S,W> when 'true' ->
	      let <_9> =
		  apply %% Line 309
			'last_depth'/2
		      (%% Line 309
		       Es, %% Line 309
			   LD)
	      in  %% Line 309
		  case apply 'pp_element'/8
			   (E, Col0, Ll, M, TInd, Ind, _9, W) of
		    <{ES,WE}> when 'true' ->
			let <_12> =
			    call %% Line 310
				 'erlang':%% Line 310
					  '+'
				(%% Line 310
				 Col0, %% Line 310
				       WE)
			in  let <_11> =
				call %% Line 310
				     'erlang':%% Line 310
					      '+'
				    (%% Line 310
				     W, %% Line 310
					WE)
			    in  let <_13> =
				    apply %% Line 310
					  'pp_tail'/10
					(%% Line 310
					 Es, %% Line 310
					     Col0, _12, %% Line 310
							Ll, %% Line 310
							    M, %% Line 310
							       TInd, %% Line 310
								     Ind, %% Line 310
									  LD, %% Line 310
									      S, _11)
				in  %% Line 310
				    [ES|_13]
		    ( <_10> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_10})
		      -| ['compiler_generated'] )
		  end
	  ( <_22,_21,_20,_19,_18,_17,_16,_15,_14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_22,_21,_20,_19,_18,_17,_16,_15,_14})
		  -| [{'function_name',{'pp_list',9}}] )
	    -| ['compiler_generated'] )
	end
'pp_tail'/10 =
    %% Line 312
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9> of
	  <[],_X_Col0,_X_Col,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,_X_S,_X_W> when 'true' ->
	      %% Line 313
	      []
	  %% Line 314
	  <[E = {_69,Len,_70,_71}|Es],Col0,Col,Ll,M,TInd,Ind,LD,S,W> when 'true' ->
	      let <LD1> =
		  apply %% Line 315
			'last_depth'/2
		      (%% Line 315
		       Es, %% Line 315
			   LD)
	      in  let <ELen> =
		      call %% Line 316
			   'erlang':%% Line 316
				    '+'
			  (%% Line 316
			   1, %% Line 316
			      Len)
		  in  %% Line 317
		      case <> of
			%% Line 318
			<>
			    when let <_23> =
				  try
				      let <_12> =
					  call 'erlang':'=:='
					      (LD1, 0)
				      in  let <_14> =
					      call 'erlang':'+'
						  (ELen, 1)
					  in  let <_13> =
						  call 'erlang':'-'
						      (Ll, Col)
					      in  let <_15> =
						      call 'erlang':'<'
							  (_14, _13)
						  in  let <_16> =
							  call 'erlang':'+'
							      (W, ELen)
						      in  let <_17> =
							      call 'erlang':'+'
								  (_16, 1)
							  in  let <_18> =
								  call 'erlang':'=<'
								      (_17, M)
							      in  let <_19> =
								      call 'erlang':'element'
									  (1, E)
								  in  let <_20> =
									  call 'erlang':'is_list'
									      (_19)
								      in  let <_21> =
									      call 'erlang':'and'
										  (_18, _20)
									  in  let <_22> =
										  call 'erlang':'and'
										      (_15, _21)
									      in  call 'erlang':'and'
										      (_12, _22)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
			      in  let <_35> =
				      try
					  let <_24> =
					      call %% Line 319
						   'erlang':%% Line 319
							    '>'
						  (%% Line 319
						   LD1, %% Line 319
							0)
					  in  let <_25> =
						  call %% Line 319
						       'erlang':%% Line 319
								'-'
						      (%% Line 319
						       Ll, %% Line 319
							   Col)
					      in  let <_26> =
						      call %% Line 319
							   'erlang':%% Line 319
								    '-'
							  (_25, %% Line 319
								LD1)
						  in  let <_27> =
							  call %% Line 319
							       'erlang':%% Line 319
									'<'
							      (%% Line 319
							       ELen, _26)
						      in  let <_28> =
							      call %% Line 319
								   'erlang':%% Line 319
									    '+'
								  (%% Line 319
								   W, %% Line 319
								      ELen)
							  in  let <_29> =
								  call %% Line 319
								       'erlang':%% Line 319
										'+'
								      (_28, %% Line 319
									    LD1)
							      in  let <_30> =
								      call %% Line 319
									   'erlang':%% Line 319
										    '=<'
									  (_29, %% Line 319
										M)
								  in  let <_31> =
									  call %% Line 319
									       'erlang':%% Line 319
											'element'
									      (%% Line 319
									       1, %% Line 319
										  E)
								      in  let <_32> =
									      call %% Line 319
										   'erlang':%% Line 319
											    'is_list'
										  (_31)
									  in  let <_33> =
										  call %% Line 319
										       'erlang':%% Line 319
												'and'
										      (_30, _32)
									      in  let <_34> =
										      call %% Line 319
											   'erlang':%% Line 319
												    'and'
											  (_27, _33)
										  in  %% Line 319
										      call 'erlang':'and'
											  (_24, _34)
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false'
				  in  call 'erlang':'or'
					  (_23, _35) ->
			    let <_36> =
				apply %% Line 320
				      'write'/1
				    (%% Line 320
				     E)
			    in  let <_38> =
				    call %% Line 321
					 'erlang':%% Line 321
						  '+'
					(%% Line 321
					 Col, %% Line 321
					      ELen)
				in  let <_37> =
					call %% Line 321
					     'erlang':%% Line 321
						      '+'
					    (%% Line 321
					     W, %% Line 321
						ELen)
				    in  let <_39> =
					    apply %% Line 321
						  'pp_tail'/10
						(%% Line 321
						 Es, %% Line 321
						     Col0, _38, %% Line 321
								Ll, %% Line 321
								    M, %% Line 321
								       TInd, %% Line 321
									     Ind, %% Line 321
										  LD, %% Line 321
										      S, _37)
					in  %% Line 320
					    [44|[_36|_39]]
			%% Line 322
			<> when 'true' ->
			    %% Line 323
			    case apply 'pp_element'/8
				     (E, Col0, Ll, M, TInd, Ind, LD1, 0) of
			      <{ES,WE}> when 'true' ->
				  let <_41> =
				      call %% Line 325
					   'erlang':%% Line 325
						    '+'
					  (%% Line 325
					   Col0, %% Line 325
						 WE)
				  in  let <_42> =
					  apply %% Line 325
						'pp_tail'/10
					      (%% Line 325
					       Es, %% Line 325
						   Col0, _41, %% Line 325
							      Ll, %% Line 325
								  M, %% Line 325
								     TInd, %% Line 325
									   Ind, %% Line 325
										LD, %% Line 325
										    S, %% Line 325
										       WE)
				      in  %% Line 324
					  [44|[10|[Ind|[ES|_42]]]]
			      ( <_40> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_40})
				-| ['compiler_generated'] )
			    end
		      end
	  %% Line 327
	  <{'dots',_72,_73,_74},_X_Col0,_X_Col,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,S,_X_W> when 'true' ->
	      %% Line 328
	      [S|[46|[46|[46]]]]
	  %% Line 329
	  <E = {_75,Len,_76,_77},_X_Col0,Col,Ll,M,_X_TInd,_X_Ind,LD,S,W>
	      when %% Line 330
		try
		    let <_46> =
			call 'erlang':'+'
			    (Len, 1)
		    in  let <_44> =
			    call 'erlang':'-'
				(Ll, Col)
			in  let <_43> =
				call 'erlang':'+'
				    (LD, 1)
			    in  let <_45> =
				    call 'erlang':'-'
					(_44, _43)
				in  let <_47> =
					call 'erlang':'<'
					    (_46, _45)
				    in  let <_49> =
					    call %% Line 331
						 'erlang':%% Line 331
							  '+'
						(%% Line 331
						 Len, %% Line 331
						      1)
					in  let <_50> =
						call %% Line 331
						     'erlang':%% Line 331
							      '+'
						    (_49, %% Line 331
							  W)
					    in  let <_48> =
						    call %% Line 331
							 'erlang':%% Line 331
								  '+'
							(%% Line 331
							 LD, %% Line 331
							     1)
						in  let <_51> =
							call %% Line 331
							     'erlang':%% Line 331
								      '+'
							    (_50, _48)
						    in  let <_52> =
							    call %% Line 331
								 'erlang':%% Line 331
									  '=<'
								(_51, %% Line 331
								      M)
							in  let <_53> =
								call %% Line 332
								     'erlang':%% Line 332
									      'element'
								    (%% Line 332
								     1, %% Line 332
									E)
							    in  let <_54> =
								    call %% Line 332
									 'erlang':%% Line 332
										  'is_list'
									(_53)
								in  let <_55> =
									call 'erlang':'and'
									    (_52, _54)
								    in  call 'erlang':'and'
									    (_47, _55)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_56> =
		  apply %% Line 333
			'write'/1
		      (%% Line 333
		       E)
	      in  %% Line 333
		  [S|_56]
	  %% Line 334
	  <E,Col0,_X_Col,Ll,M,TInd,Ind,LD,S,_X_W> when 'true' ->
	      let <_57> =
		  call %% Line 335
		       'erlang':%% Line 335
				'+'
		      (%% Line 335
		       LD, %% Line 335
			   1)
	      in  let <_58> =
		      apply %% Line 335
			    'pp'/8
			  (%% Line 335
			   E, %% Line 335
			      Col0, %% Line 335
				    Ll, %% Line 335
					M, %% Line 335
					   TInd, %% Line 335
						 Ind, _57, %% Line 335
							   0)
		  in  %% Line 335
		      [S|[10|[Ind|_58]]]
	end
'pp_element'/8 =
    %% Line 337
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <E = {_27,Len,_28,_29},Col,Ll,M,_X_TInd,_X_Ind,LD,W>
	      when %% Line 338
		try
		    let <_8> =
			call 'erlang':'-'
			    (Ll, Col)
		    in  let <_9> =
			    call 'erlang':'-'
				(_8, LD)
			in  let <_10> =
				call 'erlang':'<'
				    (Len, _9)
			    in  let <_11> =
				    call 'erlang':'+'
					(Len, W)
				in  let <_12> =
					call 'erlang':'+'
					    (_11, LD)
				    in  let <_13> =
					    call 'erlang':'=<'
						(_12, M)
					in  let <_14> =
						call 'erlang':'element'
						    (1, E)
					    in  let <_15> =
						    call 'erlang':'is_list'
							(_14)
						in  let <_16> =
							call 'erlang':'and'
							    (_13, _15)
						    in  call 'erlang':'and'
							    (_10, _16)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_17> =
		  apply %% Line 339
			'write'/1
		      (%% Line 339
		       E)
	      in  %% Line 339
		  {_17,Len}
	  %% Line 340
	  <E,Col,Ll,M,TInd,Ind,LD,W> when 'true' ->
	      let <_18> =
		  apply %% Line 341
			'pp'/8
		      (%% Line 341
		       E, %% Line 341
			  Col, %% Line 341
			       Ll, %% Line 341
				   M, %% Line 341
				      TInd, %% Line 341
					    Ind, %% Line 341
						 LD, %% Line 341
						     W)
	      in  %% Line 341
		  {_18,Ll}
	end
'pp_binary'/7 =
    %% Line 344
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <[LT|[_21|[S|[GT|[_22|[]]]]]],Col,Ll,M,Ind,LD,W>
	      when let <_23> =
		    call 'erlang':'=:='
			(_21, LT)
		in  let <_24> =
			call 'erlang':'=:='
			    (_22, GT)
		    in  call 'erlang':'and'
			    (_23, _24) ->
	      let <_9> =
		  call %% Line 345
		       'erlang':%% Line 345
				'-'
		      (%% Line 345
		       Ll, %% Line 345
			   Col)
	      in  let <_7> =
		      call %% Line 345
			   'erlang':%% Line 345
				    '-'
			  (%% Line 345
			   M, %% Line 345
			      4)
		  in  let <_8> =
			  call %% Line 345
			       'erlang':%% Line 345
					'-'
			      (_7, %% Line 345
				   W)
		      in  let <_10> =
			      call %% Line 345
				   'erlang':%% Line 345
					    'min'
				  (_9, _8)
			  in  let <_11> =
				  call %% Line 345
				       'erlang':%% Line 345
						'-'
				      (_10, %% Line 345
					    LD)
			      in  let <N> =
				      call %% Line 345
					   'erlang':%% Line 345
						    'max'
					  (%% Line 345
					   8, _11)
				  in  let <_13> =
					  apply %% Line 346
						'pp_binary'/4
					      (%% Line 346
					       S, %% Line 346
						  N, %% Line 346
						     N, %% Line 346
							Ind)
				      in  %% Line 346
					  [LT|[LT|[_13|[GT|[GT|[]]]]]]
	  ( <_20,_19,_18,_17,_16,_15,_14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_20,_19,_18,_17,_16,_15,_14})
		  -| [{'function_name',{'pp_binary',7}}] )
	    -| ['compiler_generated'] )
	end
'pp_binary'/4 =
    %% Line 348
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[BS|[44|S]],N,N0,Ind> when 'true' ->
	      let <_4> =
		  call %% Line 349
		       'erlang':%% Line 349
				'length'
		      (%% Line 349
		       BS)
	      in  let <Len> =
		      call %% Line 349
			   'erlang':%% Line 349
				    '+'
			  (_4, %% Line 349
			       1)
		  in  %% Line 350
		      case call 'erlang':'-'
			       (N, Len) of
			%% Line 351
			<N1>
			    when call 'erlang':'<'
				  (N1,
				   0) ->
			    let <_6> =
				call %% Line 352
				     'erlang':%% Line 352
					      '-'
				    (%% Line 352
				     N0, %% Line 352
					 Len)
			    in  let <_7> =
				    apply %% Line 352
					  'pp_binary'/4
					(%% Line 352
					 S, _6, %% Line 352
						N0, %% Line 352
						    Ind)
				in  %% Line 352
				    [10|[Ind|[BS|[44|_7]]]]
			%% Line 353
			<N1> when 'true' ->
			    let <_8> =
				apply %% Line 354
				      'pp_binary'/4
				    (%% Line 354
				     S, %% Line 354
					N1, %% Line 354
					    N0, %% Line 354
						Ind)
			    in  %% Line 354
				[BS|[44|_8]]
		      end
	  %% Line 356
	  <S = [BS1|[58|[BS2|[]]]],N,_X_N0,Ind>
	      when %% Line 357
		try
		    let <_11> =
			call 'erlang':'length'
			    (BS1)
		    in  let <_10> =
			    call 'erlang':'length'
				(BS2)
			in  let <_12> =
				call 'erlang':'+'
				    (_11, _10)
			    in  let <_13> =
				    call 'erlang':'+'
					(_12, 1)
				in  call 'erlang':'>'
					(_13, N)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 358
	      [10|[Ind|[S|[]]]]
	  %% Line 359
	  <S,N,_X_N0,Ind> when 'true' ->
	      let <_14> =
		  call %% Line 360
		       'erlang':%% Line 360
				'iolist_size'
		      (%% Line 360
		       S)
	      in  %% Line 360
		  case <> of
		    %% Line 361
		    <>
			when call 'erlang':'>'
			      (_14,
			       N) ->
			%% Line 362
			[10|[Ind|[S|[]]]]
		    %% Line 363
		    <> when 'true' ->
			%% Line 364
			S
		  end
	end
'write'/1 =
    %% Line 368
    fun (_0) ->
	case _0 of
	  <{{'tuple',_X_IsTagged,L},_6,_7,_8}> when 'true' ->
	      let <_1> =
		  apply %% Line 369
			'write_list'/2
		      (%% Line 369
		       L, %% Line 369
			  44)
	      in  %% Line 369
		  [123|[_1|[125]]]
	  %% Line 370
	  <{{'list',L},_9,_10,_11}> when 'true' ->
	      let <_2> =
		  apply %% Line 371
			'write_list'/2
		      (%% Line 371
		       L, %% Line 371
			  124)
	      in  %% Line 371
		  [91|[_2|[93]]]
	  %% Line 372
	  <{{'map',Pairs},_12,_13,_14}> when 'true' ->
	      let <_3> =
		  apply %% Line 373
			'write_list'/2
		      (%% Line 373
		       Pairs, %% Line 373
			      44)
	      in  %% Line 373
		  [35|[123|[_3|[125]]]]
	  %% Line 374
	  <Pair = {{'map_pair',_X_K,_X_V},_15,_16,_17}> when 'true' ->
	      %% Line 375
	      apply 'write_pair'/1
		  (Pair)
	  %% Line 376
	  <{{'record',[{Name,_18}|L]},_19,_20,_21}> when 'true' ->
	      let <_4> =
		  apply %% Line 377
			'write_fields'/1
		      (%% Line 377
		       L)
	      in  %% Line 377
		  [Name|[123|[_4|[125]]]]
	  %% Line 378
	  <{{'bin',S},_22,_23,_24}> when 'true' ->
	      %% Line 379
	      S
	  %% Line 380
	  <{S,_25,_26,_27}> when 'true' ->
	      %% Line 381
	      S
	  ( <_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5})
		  -| [{'function_name',{'write',1}}] )
	    -| ['compiler_generated'] )
	end
'write_pair'/1 =
    %% Line 383
    fun (_0) ->
	case _0 of
	  <{{'map_pair',K,V},_4,_5,_6}> when 'true' ->
	      let <_1> =
		  apply %% Line 384
			'write'/1
		      (%% Line 384
		       K)
	      in  let <_2> =
		      apply %% Line 384
			    'write'/1
			  (%% Line 384
			   V)
		  in  %% Line 384
		      [_1|[[32|[61|[62|[32]]]]|[_2|[]]]]
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'write_pair',1}}] )
	    -| ['compiler_generated'] )
	end
'write_fields'/1 =
    %% Line 386
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      %% Line 387
	      []
	  %% Line 388
	  <{'dots',_4,_5,_6}> when 'true' ->
	      %% Line 389
	      [46|[46|[46]]]
	  %% Line 390
	  <[F|Fs]> when 'true' ->
	      let <_1> =
		  apply %% Line 391
			'write_field'/1
		      (%% Line 391
		       F)
	      in  let <_2> =
		      apply %% Line 391
			    'write_fields_tail'/1
			  (%% Line 391
			   Fs)
		  in  %% Line 391
		      [_1|_2]
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'write_fields',1}}] )
	    -| ['compiler_generated'] )
	end
'write_fields_tail'/1 =
    %% Line 393
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      %% Line 394
	      []
	  %% Line 395
	  <{'dots',_4,_5,_6}> when 'true' ->
	      %% Line 396
	      [44|[46|[46|[46]]]]
	  %% Line 397
	  <[F|Fs]> when 'true' ->
	      let <_1> =
		  apply %% Line 398
			'write_field'/1
		      (%% Line 398
		       F)
	      in  let <_2> =
		      apply %% Line 398
			    'write_fields_tail'/1
			  (%% Line 398
			   Fs)
		  in  %% Line 398
		      [44|[_1|_2]]
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'write_fields_tail',1}}] )
	    -| ['compiler_generated'] )
	end
'write_field'/1 =
    %% Line 400
    fun (_0) ->
	case _0 of
	  <{{'field',Name,_X_NameL,F},_3,_4,_5}> when 'true' ->
	      let <_1> =
		  apply %% Line 401
			'write'/1
		      (%% Line 401
		       F)
	      in  %% Line 401
		  [Name|[[32|[61|[32]]]|_1]]
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'write_field',1}}] )
	    -| ['compiler_generated'] )
	end
'write_list'/2 =
    %% Line 403
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'dots',_6,_7,_8},_X_S> when 'true' ->
	      %% Line 404
	      [46|[46|[46]]]
	  %% Line 405
	  <[E|Es],S> when 'true' ->
	      let <_2> =
		  apply %% Line 406
			'write'/1
		      (%% Line 406
		       E)
	      in  let <_3> =
		      apply %% Line 406
			    'write_tail'/2
			  (%% Line 406
			   Es, %% Line 406
			       S)
		  in  %% Line 406
		      [_2|_3]
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'write_list',2}}] )
	    -| ['compiler_generated'] )
	end
'write_tail'/2 =
    %% Line 408
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],_X_S> when 'true' ->
	      %% Line 409
	      []
	  %% Line 410
	  <[E|Es],S> when 'true' ->
	      let <_2> =
		  apply %% Line 411
			'write'/1
		      (%% Line 411
		       E)
	      in  let <_3> =
		      apply %% Line 411
			    'write_tail'/2
			  (%% Line 411
			   Es, %% Line 411
			       S)
		  in  %% Line 411
		      [44|[_2|_3]]
	  %% Line 412
	  <{'dots',_7,_8,_9},S> when 'true' ->
	      %% Line 413
	      [S|[46|[46|[46]]]]
	  %% Line 414
	  <E,S> when 'true' ->
	      let <_4> =
		  apply %% Line 415
			'write'/1
		      (%% Line 415
		       E)
	      in  %% Line 415
		  [S|_4]
	end
'intermediate'/6 =
    %% Line 445
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <Term,D,T,RF,Enc,Str>
	      when call 'erlang':'>'
		    (T,
		     0) ->
	      let <If> =
		  apply %% Line 447
			'print_length'/6
		      (%% Line 447
		       Term, %% Line 446
			     1, %% Line 447
				T, %% Line 447
				   RF, %% Line 447
				       Enc, %% Line 447
					    Str)
	      in  %% Line 448
		  case If of
		    %% Line 449
		    <{_19,Len,Dots,_20}>
			when let <_8> =
			      call 'erlang':'=:='
				  (Dots, 0)
			  in  let <_9> =
				  call 'erlang':'>'
				      (Len, T)
			      in  let <_10> =
				      call 'erlang':'=:='
					  (D, 1)
				  in  let <_11> =
					  call 'erlang':'or'
					      (_9, _10)
				      in  call 'erlang':'or'
					      (_8, _11) ->
			%% Line 450
			If
		    %% Line 451
		    <_21> when 'true' ->
			%% Line 452
			apply 'find_upper'/9
			    (If, Term, T, 1, 2, D, RF, Enc, Str)
		  end
	  ( <_18,_17,_16,_15,_14,_13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_18,_17,_16,_15,_14,_13})
		  -| [{'function_name',{'intermediate',6}}] )
	    -| ['compiler_generated'] )
	end
'find_upper'/9 =
    %% Line 455
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	let <Dd2> =
	    call %% Line 456
		 'erlang':%% Line 456
			  '*'
		(_4, %% Line 456
		     2)
	in  let <_12> =
		case <> of
		  %% Line 458
		  <>
		      when call 'erlang':'<'
			    (_5,
			     0) ->
		      call 'erlang':'+'
			  (_3, Dd2)
		  %% Line 459
		  <> when 'true' ->
		      let <_10> =
			  call 'erlang':'+'
			      (_3, Dd2)
		      in  call 'erlang':'min'
			      (_10, _5)
		end
	    in  let <_14> =
		    call %% Line 461
			 'erlang':%% Line 461
				  '-'
			(_12, _3)
		in  let <If> =
			apply %% Line 461
			      'expand'/3
			    (_0, _2, _14)
		    in  %% Line 462
			case If of
			  %% Line 463
			  <{_31,_32,_X_Dots = 0,_33}> when 'true' ->
			      %% Line 464
			      If
			  %% Line 465
			  <{_34,_X_Len = _35,_36,_37}>
			      when call 'erlang':'=:='
				    (_35,
				     _2) ->
			      %% Line 466
			      If
			  %% Line 467
			  <{_38,Len,_39,_40}>
			      when try
				    let <_16> =
					call 'erlang':'<'
					    (Len, _2)
				    in  ( let <_19> =
					      case call 'erlang':'<'
						       (_12, _5) of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      'true'
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      call 'erlang':'<'
							  (_5, 0)
						  -| ['compiler_generated'] )
						( <_17> when 'true' ->
						      _17
						  -| ['compiler_generated'] )
					      end
					  in  let <_20> =
						  call 'erlang':'=:='
						      (( _19
							 -| ['compiler_generated'] ), 'true')
					      in  call 'erlang':'and'
						      (_16, _20)
					  -| ['compiler_generated'] )
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false' ->
			      %% Line 468
			      apply 'find_upper'/9
				  (If, _1, _2, _12, Dd2, _5, _6, _7, _8)
			  %% Line 469
			  <_41> when 'true' ->
			      %% Line 470
			      apply 'search_depth'/9
				  (_0, If, _1, _2, _3, _12, _6, _7, _8)
			end
'search_depth'/9 =
    %% Line 475
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <Lower,Upper,_X_Term,T,Dl,Du,_X_RF,_X_Enc,_X_Str>
	      when %% Line 476
		try
		    let <_9> =
			call 'erlang':'-'
			    (Du, Dl)
		    in  call 'erlang':'=:='
			    (_9, 1)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 478
	      case Lower of
		%% Line 479
		<{_25,_26,_27,_28}>
		    when call 'erlang':'=:='
			  (_26,
			   T) ->
		    %% Line 480
		    Lower
		%% Line 481
		<_29> when 'true' ->
		    %% Line 482
		    Upper
	      end
	  %% Line 484
	  <Lower,Upper,Term,T,Dl,Du,RF,Enc,Str> when 'true' ->
	      let <_11> =
		  call %% Line 485
		       'erlang':%% Line 485
				'+'
		      (%% Line 485
		       Dl, %% Line 485
			   Du)
	      in  let <D1> =
		      call %% Line 485
			   'erlang':%% Line 485
				    'div'
			  (_11, %% Line 485
				2)
		  in  let <_13> =
			  call %% Line 486
			       'erlang':%% Line 486
					'-'
			      (%% Line 486
			       D1, %% Line 486
				   Dl)
		      in  let <If> =
			      apply %% Line 486
				    'expand'/3
				  (%% Line 486
				   Lower, %% Line 486
					  T, _13)
			  in  %% Line 487
			      case If of
				%% Line 488
				<{_30,Len,_31,_32}>
				    when call 'erlang':'>'
					  (Len,
					   T) ->
				    %% Line 493
				    apply 'search_depth'/9
					(Lower, If, Term, T, Dl, D1, RF, Enc, Str)
				%% Line 494
				<_33> when 'true' ->
				    %% Line 495
				    apply 'search_depth'/9
					(If, Upper, Term, T, D1, Du, RF, Enc, Str)
			      end
	end
'print_length'/6 =
    %% Line 504
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <[],_X_D,_X_T,_X_RF,_X_Enc,_X_Str> when 'true' ->
	      %% Line 505
	      {[91|[93]],2,0,'no_more'}
	  %% Line 506
	  <{},_X_D,_X_T,_X_RF,_X_Enc,_X_Str> when 'true' ->
	      %% Line 507
	      {[123|[125]],2,0,'no_more'}
	  %% Line 508
	  <M = ~{}~,_X_D,_X_T,_X_RF,_X_Enc,_X_Str>
	      when try
		    let <_6> =
			call 'erlang':'map_size'
			    (M)
		    in  call 'erlang':'=:='
			    (_6, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 509
	      {[35|[123|[125]]],3,0,'no_more'}
	  %% Line 510
	  <Atom,_X_D,_X_T,_X_RF,Enc,_X_Str>
	      when call 'erlang':'is_atom'
		    (Atom) ->
	      let <S> =
		  apply %% Line 511
			'write_atom'/2
		      (%% Line 511
		       Atom, %% Line 511
			     Enc)
	      in  let <_8> =
		      call %% Line 512
			   'io_lib':%% Line 512
				    'chars_length'
			  (%% Line 512
			   S)
		  in  %% Line 512
		      {S,_8,0,'no_more'}
	  %% Line 513
	  <List,D,T,RF,Enc,Str>
	      when call 'erlang':'is_list'
		    (List) ->
	      let <_11> =
		  case %% Line 515
		       Str of
		    %% Line 515
		    ( <( 'true'
			 -| ['compiler_generated'] )> when 'true' ->
			  apply 'printable_list'/4
			      (List, D, T, Enc)
		      -| ['compiler_generated'] )
		    %% Line 515
		    ( <( 'false'
			 -| ['compiler_generated'] )> when 'true' ->
			  'false'
		      -| ['compiler_generated'] )
		    %% Line 515
		    ( <_9> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {( 'badarg'
				      -| ['compiler_generated'] ),_9}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 515
		  case _11 of
		    %% Line 516
		    <'true'> when 'true' ->
			let <S> =
			    apply %% Line 518
				  'write_string'/2
				(%% Line 518
				 List, %% Line 518
				       Enc)
			in  let <_13> =
				call %% Line 519
				     'io_lib':%% Line 519
					      'chars_length'
				    (%% Line 519
				     S)
			    in  %% Line 519
				{S,_13,0,'no_more'}
		    %% Line 520
		    <{'true',Prefix}> when 'true' ->
			let <S> =
			    apply %% Line 522
				  'write_string'/2
				(%% Line 522
				 Prefix, %% Line 522
					 Enc)
			in  let <_15> =
				call %% Line 525
				     'io_lib':%% Line 525
					      'chars_length'
				    (%% Line 525
				     S)
			    in  let <_16> =
				    call %% Line 525
					 'erlang':%% Line 525
						  '+'
					(%% Line 525
					 3, _15)
				in  %% Line 525
				    {[S|[46|[46|[46]]]],_16,0,'no_more'}
		    %% Line 526
		    <'false'> when 'true' ->
			%% Line 527
			case apply 'print_length_list'/6
				 (List, D, T, RF, Enc, Str) of
			  %% Line 528
			  <{What,Len,Dots,_X_More}>
			      when call 'erlang':'>'
				    (Dots,
				     0) ->
			      let <More> =
				  fun (_19,_18) ->
				      let <_17> =
					  call %% Line 530
					       'erlang':%% Line 530
							'+'
					      (%% Line 530
					       D, _18)
				      in  %% Line 530
					  apply 'print_length'/6
					      (List, _17, _19, RF, Enc, Str)
			      in  %% Line 532
				  {What,Len,Dots,More}
			  %% Line 533
			  <If> when 'true' ->
			      %% Line 534
			      If
			end
		    ( <_24> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_24})
		      -| ['compiler_generated'] )
		  end
	  %% Line 537
	  <Fun,_X_D,_X_T,_X_RF,_X_Enc,_X_Str>
	      when call 'erlang':'is_function'
		    (Fun) ->
	      let <S> =
		  call %% Line 538
		       'io_lib':%% Line 538
				'write'
		      (%% Line 538
		       Fun)
	      in  let <_26> =
		      call %% Line 539
			   'erlang':%% Line 539
				    'iolist_size'
			  (%% Line 539
			   S)
		  in  %% Line 539
		      {S,_26,0,'no_more'}
	  %% Line 540
	  <R,D,T,RF,Enc,Str>
	      when try
		    let <_27> =
			call 'erlang':'element'
			    (1, R)
		    in  let <_28> =
			    call 'erlang':'is_atom'
				(_27)
			in  let <_29> =
				call %% Line 541
				     'erlang':%% Line 541
					      'is_function'
				    (%% Line 541
				     RF)
			    in  call 'erlang':'and'
				    (_28, _29)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_32> =
		  call %% Line 542
		       'erlang':%% Line 542
				'element'
		      (%% Line 542
		       1, %% Line 542
			  R)
	      in  let <_30> =
		      call %% Line 542
			   'erlang':%% Line 542
				    'tuple_size'
			  (%% Line 542
			   R)
		  in  let <_31> =
			  call %% Line 542
			       'erlang':%% Line 542
					'-'
			      (_30, %% Line 542
				    1)
		      in  %% Line 542
			  case apply RF
				   (_32, _31) of
			    %% Line 543
			    <'no'> when 'true' ->
				%% Line 544
				apply 'print_length_tuple'/6
				    (R, D, T, RF, Enc, Str)
			    %% Line 545
			    <RDefs> when 'true' ->
				%% Line 546
				apply 'print_length_record'/7
				    (R, D, T, RF, RDefs, Enc, Str)
			  end
	  %% Line 548
	  <Tuple,D,T,RF,Enc,Str>
	      when call 'erlang':'is_tuple'
		    (Tuple) ->
	      %% Line 549
	      apply 'print_length_tuple'/6
		  (Tuple, D, T, RF, Enc, Str)
	  %% Line 550
	  <Map,D,T,RF,Enc,Str>
	      when call 'erlang':'is_map'
		    (Map) ->
	      %% Line 551
	      apply 'print_length_map'/6
		  (Map, D, T, RF, Enc, Str)
	  %% Line 552
	  <#{}#,_X_D,_X_T,_X_RF,_X_Enc,_X_Str> when 'true' ->
	      %% Line 553
	      {[60|[60|[62|[62]]]],4,0,'no_more'}
	  %% Line 554
	  <Bin = #{#<_91>('all',1,'binary',['unsigned'|['big']])}#,1,_X_T,RF,Enc,Str> when 'true' ->
	      let <More> =
		  fun (_36,_35) ->
		      let <_34> =
			  call %% Line 555
			       'erlang':%% Line 555
					'+'
			      (%% Line 555
			       1, _35)
		      in  %% Line 555
			  apply 'print_length'/6
			      (Bin, _34, _36, RF, Enc, Str)
	      in  %% Line 556
		  {[60|[60|[46|[46|[46|[62|[62]]]]]]],7,3,More}
	  %% Line 557
	  <Bin = #{#<_92>('all',1,'binary',['unsigned'|['big']])}#,D,T,RF,Enc,Str> when 'true' ->
	      let <D1> =
		  call %% Line 558
		       'erlang':%% Line 558
				'-'
		      (%% Line 558
		       D, %% Line 558
			  1)
	      in  let <_48> =
		      case %% Line 560
			   Str of
			%% Line 560
			( <( 'true'
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_43> =
				  call %% Line 561
				       'erlang':%% Line 561
						'bit_size'
				      (%% Line 561
				       Bin)
			      in  let <_44> =
				      call %% Line 561
					   'erlang':%% Line 561
						    'rem'
					  (_43, %% Line 561
						8)
				  in  %% Line 561
				      ( case <> of
					  ( <>
						when call 'erlang':'=:='
						      (_44,
						       0) ->
						let <_45> =
						    apply %% Line 562
							  'tsub'/2
							(%% Line 562
							 T, %% Line 562
							    6)
						in  %% Line 562
						    apply 'printable_bin0'/4
							(Bin, D1, _45, Enc)
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						'false'
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 560
			( <( 'false'
			     -| ['compiler_generated'] )> when 'true' ->
			      'false'
			  -| ['compiler_generated'] )
			%% Line 560
			( <_41> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {( 'badarg'
					  -| ['compiler_generated'] ),_41}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 559
		      case _48 of
			%% Line 564
			<{'true',List}>
			    when call 'erlang':'is_list'
				  (List) ->
			    let <S> =
				call %% Line 565
				     'io_lib':%% Line 565
					      'write_string'
				    (%% Line 565
				     List, %% Line 565
					   34)
			    in  let <_50> =
				    call %% Line 566
					 'erlang':%% Line 566
						  'length'
					(%% Line 566
					 S)
				in  let <_51> =
					call %% Line 566
					     'erlang':%% Line 566
						      '+'
					    (%% Line 566
					     4, _50)
				    in  %% Line 566
					{[60|[60|[S|[62|[62]]]]],_51,0,'no_more'}
			%% Line 567
			<{'false',List}>
			    when call 'erlang':'is_list'
				  (List) ->
			    let <S> =
				call %% Line 568
				     'io_lib':%% Line 568
					      'write_string'
				    (%% Line 568
				     List, %% Line 568
					   34)
			    in  let <_53> =
				    call %% Line 569
					 'io_lib':%% Line 569
						  'chars_length'
					(%% Line 569
					 S)
				in  let <_54> =
					call %% Line 569
					     'erlang':%% Line 569
						      '+'
					    (%% Line 569
					     9, _53)
				    in  %% Line 569
					{[60|[60|[S|[[47|[117|[116|[102|[56|[62|[62]]]]]]]]]]],_54,0,'no_more'}
			%% Line 570
			<{'true','true',Prefix}> when 'true' ->
			    let <S> =
				call %% Line 571
				     'io_lib':%% Line 571
					      'write_string'
				    (%% Line 571
				     Prefix, %% Line 571
					     34)
			    in  let <More> =
				    fun (_58,_57) ->
					let <_56> =
					    call %% Line 573
						 'erlang':%% Line 573
							  '+'
						(%% Line 573
						 D, _57)
					in  %% Line 573
					    apply 'print_length'/6
						(Bin, _56, _58, RF, Enc, Str)
				in  let <_62> =
					call %% Line 575
					     'erlang':%% Line 575
						      'length'
					    (%% Line 575
					     S)
				    in  let <_63> =
					    call %% Line 575
						 'erlang':%% Line 575
							  '+'
						(%% Line 575
						 7, _62)
					in  %% Line 575
					    {[60|[60|[S|[46|[46|[46|[62|[62]]]]]]]],_63,3,More}
			%% Line 576
			<{'false','true',Prefix}> when 'true' ->
			    let <S> =
				call %% Line 577
				     'io_lib':%% Line 577
					      'write_string'
				    (%% Line 577
				     Prefix, %% Line 577
					     34)
			    in  let <More> =
				    fun (_67,_66) ->
					let <_65> =
					    call %% Line 579
						 'erlang':%% Line 579
							  '+'
						(%% Line 579
						 D, _66)
					in  %% Line 579
					    apply 'print_length'/6
						(Bin, _65, _67, RF, Enc, Str)
				in  let <_71> =
					call %% Line 581
					     'io_lib':%% Line 581
						      'chars_length'
					    (%% Line 581
					     S)
				    in  let <_72> =
					    call %% Line 581
						 'erlang':%% Line 581
							  '+'
						(%% Line 581
						 12, _71)
					in  %% Line 581
					    {[60|[60|[S|[47|[117|[116|[102|[56|[46|[46|[46|[62|[62]]]]]]]]]]]]],_72,3,More}
			%% Line 582
			<'false'> when 'true' ->
			    %% Line 583
			    case call 'io_lib':'write_binary'
				     (Bin, D, T) of
			      %% Line 584
			      <{S,#{}#}> when 'true' ->
				  let <_73> =
				      call %% Line 585
					   'erlang':%% Line 585
						    'iolist_size'
					  (%% Line 585
					   S)
				  in  %% Line 585
				      {{'bin',S},_73,0,'no_more'}
			      %% Line 586
			      <{S,_X_Rest}> when 'true' ->
				  let <More> =
				      fun (_76,_75) ->
					  let <_74> =
					      call %% Line 588
						   'erlang':%% Line 588
							    '+'
						  (%% Line 588
						   D, _75)
					  in  %% Line 588
					      apply 'print_length'/6
						  (Bin, _74, _76, RF, Enc, Str)
				  in  let <_80> =
					  call %% Line 590
					       'erlang':%% Line 590
							'iolist_size'
					      (%% Line 590
					       S)
				      in  %% Line 590
					  {{'bin',S},_80,3,More}
			      ( <_81> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_81})
				-| ['compiler_generated'] )
			    end
			( <_82> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_82})
			  -| ['compiler_generated'] )
		      end
	  %% Line 593
	  <Term,_X_D,_X_T,_X_RF,_X_Enc,_X_Str> when 'true' ->
	      let <S> =
		  call %% Line 594
		       'io_lib':%% Line 594
				'write'
		      (%% Line 594
		       Term)
	      in  let <_84> =
		      call %% Line 596
			   'io_lib':%% Line 596
				    'chars_length'
			  (%% Line 596
			   S)
		  in  %% Line 596
		      {S,_84,0,'no_more'}
	end
'print_length_map'/6 =
    %% Line 598
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <Map,1,_X_T,RF,Enc,Str> when 'true' ->
	      let <More> =
		  fun (_8,_7) ->
		      let <_6> =
			  call %% Line 599
			       'erlang':%% Line 599
					'+'
			      (%% Line 599
			       1, _7)
		      in  %% Line 599
			  apply 'print_length_map'/6
			      (Map, _6, _8, RF, Enc, Str)
	      in  %% Line 600
		  {[35|[123|[46|[46|[46|[125]]]]]],6,3,More}
	  %% Line 601
	  <Map,D,T,RF,Enc,Str>
	      when call 'erlang':'is_map'
		    (Map) ->
	      let <_12> =
		  call %% Line 602
		       'maps':%% Line 602
			      'iterator'
		      (%% Line 602
		       Map)
	      in  let <Next> =
		      call %% Line 602
			   'maps':%% Line 602
				  'next'
			  (_12)
		  in  let <_15> =
			  call %% Line 603
			       'erlang':%% Line 603
					'-'
			      (%% Line 603
			       D, %% Line 603
				  1)
		      in  let <_14> =
			      apply %% Line 603
				    'tsub'/2
				  (%% Line 603
				   T, %% Line 603
				      3)
			  in  let <PairsS> =
				  apply %% Line 603
					'print_length_map_pairs'/7
				      (%% Line 603
				       Next, %% Line 603
					     D, _15, _14, %% Line 603
							  RF, %% Line 603
							      Enc, %% Line 603
								   Str)
			      in  %% Line 604
				  case apply 'list_length'/3
					   (PairsS, 3, 0) of
				    <{Len,Dots}> when 'true' ->
					%% Line 605
					{{'map',PairsS},Len,Dots,'no_more'}
				    ( <_17> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_17})
				      -| ['compiler_generated'] )
				  end
	  ( <_23,_22,_21,_20,_19,_18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_23,_22,_21,_20,_19,_18})
		  -| [{'function_name',{'print_length_map',6}}] )
	    -| ['compiler_generated'] )
	end
'print_length_map_pairs'/7 =
    %% Line 607
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <'none',_X_D,_X_D0,_X_T,_X_RF,_X_Enc,_X_Str> when 'true' ->
	      %% Line 608
	      []
	  %% Line 609
	  <Term,D,D0,T,RF,Enc,Str>
	      when let <_7> =
		    call 'erlang':'=:='
			(D, 1)
		in  let <_8> =
			call 'erlang':'=:='
			    (T, 0)
		    in  call 'erlang':'or'
			    (_7, _8) ->
	      let <More> =
		  fun (_11,_10) ->
		      let <_9> =
			  call %% Line 611
			       'erlang':%% Line 611
					'+'
			      (%% Line 611
			       D, _10)
		      in  %% Line 611
			  apply 'print_length_map_pairs'/7
			      (Term, _9, D0, _11, RF, Enc, Str)
	      in  %% Line 613
		  {'dots',3,3,More}
	  %% Line 614
	  <{K,V,Iter},D,D0,T,RF,Enc,Str> when 'true' ->
	      let <_15> =
		  apply %% Line 615
			'tsub'/2
		      (%% Line 615
		       T, %% Line 615
			  1)
	      in  let <Pair1> =
		      apply %% Line 615
			    'print_length_map_pair'/7
			  (%% Line 615
			   K, %% Line 615
			      V, %% Line 615
				 D0, _15, %% Line 615
					  RF, %% Line 615
					      Enc, %% Line 615
						   Str)
		  in  %% Line 616
		      case Pair1 of
			<{_30,Len1,_31,_32}> when 'true' ->
			    let <Next> =
				call %% Line 617
				     'maps':%% Line 617
					    'next'
				    (%% Line 617
				     Iter)
			    in  let <_21> =
				    call %% Line 619
					 'erlang':%% Line 619
						  '-'
					(%% Line 619
					 D, %% Line 619
					    1)
				in  let <_19> =
					call %% Line 619
					     'erlang':%% Line 619
						      '+'
					    (%% Line 619
					     Len1, %% Line 619
						   1)
				    in  let <_20> =
					    apply %% Line 619
						  'tsub'/2
						(%% Line 619
						 T, _19)
					in  let <_22> =
						apply %% Line 619
						      'print_length_map_pairs'/7
						    (%% Line 619
						     Next, _21, %% Line 619
								D0, _20, %% Line 619
									 RF, %% Line 619
									     Enc, %% Line 619
										  Str)
					    in  %% Line 618
						[Pair1|_22]
			( <_17> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_17})
			  -| ['compiler_generated'] )
		      end
	  ( <_29,_28,_27,_26,_25,_24,_23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_29,_28,_27,_26,_25,_24,_23})
		  -| [{'function_name',{'print_length_map_pairs',7}}] )
	    -| ['compiler_generated'] )
	end
'print_length_map_pair'/7 =
    %% Line 621
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	%% Line 622
	case apply 'print_length'/6
		 (_0, _2, _3, _4, _5, _6) of
	  <P1 = {_20,KL,KD,_21}> when 'true' ->
	      let <KL1> =
		  call %% Line 623
		       'erlang':%% Line 623
				'+'
		      (%% Line 623
		       KL, %% Line 623
			   4)
	      in  let <_9> =
		      apply %% Line 624
			    'tsub'/2
			  (_3, %% Line 624
			       KL1)
		  in  %% Line 624
		      case apply 'print_length'/6
			       (_1, _2, _9, _4, _5, _6) of
			<P2 = {_22,VL,VD,_23}> when 'true' ->
			    let <_12> =
				call %% Line 625
				     'erlang':%% Line 625
					      '+'
				    (%% Line 625
				     KL1, %% Line 625
					  VL)
			    in  let <_11> =
				    call %% Line 625
					 'erlang':%% Line 625
						  '+'
					(%% Line 625
					 KD, %% Line 625
					     VD)
				in  %% Line 625
				    {{'map_pair',P1,P2},_12,_11,'no_more'}
			( <_10> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_10})
			  -| ['compiler_generated'] )
		      end
	  ( <_7> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_7})
	    -| ['compiler_generated'] )
	end
'print_length_tuple'/6 =
    %% Line 627
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <Tuple,1,_X_T,RF,Enc,Str> when 'true' ->
	      let <More> =
		  fun (_8,_7) ->
		      let <_6> =
			  call %% Line 628
			       'erlang':%% Line 628
					'+'
			      (%% Line 628
			       1, _7)
		      in  %% Line 628
			  apply 'print_length_tuple'/6
			      (Tuple, _6, _8, RF, Enc, Str)
	      in  %% Line 629
		  {[123|[46|[46|[46|[125]]]]],5,3,More}
	  %% Line 630
	  <Tuple,D,T,RF,Enc,Str> when 'true' ->
	      let <_12> =
		  apply %% Line 631
			'tsub'/2
		      (%% Line 631
		       T, %% Line 631
			  2)
	      in  let <L> =
		      apply %% Line 631
			    'print_length_tuple1'/7
			  (%% Line 631
			   Tuple, %% Line 631
				  1, %% Line 631
				     D, _12, %% Line 631
					     RF, %% Line 631
						 Enc, %% Line 631
						      Str)
		  in  let <_16> =
			  call %% Line 632
			       'erlang':%% Line 632
					'element'
			      (%% Line 632
			       1, %% Line 632
				  Tuple)
		      in  let <_17> =
			      call %% Line 632
				   'erlang':%% Line 632
					    'is_atom'
				  (_16)
			  in  let <_14> =
				  call %% Line 632
				       'erlang':%% Line 632
						'tuple_size'
				      (%% Line 632
				       Tuple)
			      in  let <_15> =
				      call %% Line 632
					   'erlang':%% Line 632
						    '>'
					  (_14, %% Line 632
						1)
				  in  let <IsTagged> =
					  call %% Line 632
					       'erlang':%% Line 632
							'and'
					      (_17, _15)
				      in  %% Line 633
					  case apply 'list_length'/3
						   (L, 2, 0) of
					    <{Len,Dots}> when 'true' ->
						%% Line 634
						{{'tuple',IsTagged,L},Len,Dots,'no_more'}
					    ( <_19> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_19})
					      -| ['compiler_generated'] )
					  end
	end
'print_length_tuple1'/7 =
    %% Line 636
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <Tuple,I,_X_D,_X_T,_X_RF,_X_Enc,_X_Str>
	      when %% Line 637
		try
		    let <_7> =
			call 'erlang':'tuple_size'
			    (Tuple)
		    in  call 'erlang':'>'
			    (I, _7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 638
	      []
	  %% Line 639
	  <Tuple,I,D,T,RF,Enc,Str>
	      when let <_8> =
		    call 'erlang':'=:='
			(D, 1)
		in  let <_9> =
			call 'erlang':'=:='
			    (T, 0)
		    in  call 'erlang':'or'
			    (_8, _9) ->
	      let <More> =
		  fun (_12,_11) ->
		      let <_10> =
			  call %% Line 640
			       'erlang':%% Line 640
					'+'
			      (%% Line 640
			       D, _11)
		      in  %% Line 640
			  apply 'print_length_tuple1'/7
			      (Tuple, I, _10, _12, RF, Enc, Str)
	      in  %% Line 641
		  {'dots',3,3,More}
	  %% Line 642
	  <Tuple,I,D,T,RF,Enc,Str> when 'true' ->
	      let <E> =
		  call %% Line 643
		       'erlang':%% Line 643
				'element'
		      (%% Line 643
		       I, %% Line 643
			  Tuple)
	      in  let <T1> =
		      apply %% Line 644
			    'tsub'/2
			  (%% Line 644
			   T, %% Line 644
			      1)
		  in  let <_18> =
			  call %% Line 645
			       'erlang':%% Line 645
					'-'
			      (%% Line 645
			       D, %% Line 645
				  1)
		      in  %% Line 645
			  case apply 'print_length'/6
				   (E, _18, T1, RF, Enc, Str) of
			    <Elem1 = {_31,Len1,_32,_33}> when 'true' ->
				let <T2> =
				    apply %% Line 646
					  'tsub'/2
					(%% Line 646
					 T1, %% Line 646
					     Len1)
				in  let <_22> =
					call %% Line 647
					     'erlang':%% Line 647
						      '+'
					    (%% Line 647
					     I, %% Line 647
						1)
				    in  let <_21> =
					    call %% Line 647
						 'erlang':%% Line 647
							  '-'
						(%% Line 647
						 D, %% Line 647
						    1)
					in  let <_23> =
						apply %% Line 647
						      'print_length_tuple1'/7
						    (%% Line 647
						     Tuple, _22, _21, %% Line 647
								      T2, %% Line 647
									  RF, %% Line 647
									      Enc, %% Line 647
										   Str)
					    in  %% Line 647
						[Elem1|_23]
			    ( <_19> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_19})
			      -| ['compiler_generated'] )
			  end
	end
'print_length_record'/7 =
    %% Line 649
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <Tuple,1,_X_T,RF,RDefs,Enc,Str> when 'true' ->
	      let <More> =
		  fun (_9,_8) ->
		      let <_7> =
			  call %% Line 651
			       'erlang':%% Line 651
					'+'
			      (%% Line 651
			       1, _8)
		      in  %% Line 651
			  apply 'print_length_record'/7
			      (Tuple, _7, _9, RF, RDefs, Enc, Str)
	      in  %% Line 653
		  {[123|[46|[46|[46|[125]]]]],5,3,More}
	  %% Line 654
	  <Tuple,D,T,RF,RDefs,Enc,Str> when 'true' ->
	      let <_13> =
		  call %% Line 655
		       'erlang':%% Line 655
				'element'
		      (%% Line 655
		       1, %% Line 655
			  Tuple)
	      in  let <_14> =
		      apply %% Line 655
			    'write_atom'/2
			  (_13, %% Line 655
				Enc)
		  in  let <Name> =
			  [%% Line 655
			   35|_14]
		      in  let <NameL> =
			      call %% Line 656
				   'io_lib':%% Line 656
					    'chars_length'
				  (%% Line 656
				   Name)
			  in  let <_17> =
				  call %% Line 657
				       'erlang':%% Line 657
						'+'
				      (%% Line 657
				       NameL, %% Line 657
					      2)
			      in  let <T1> =
				      apply %% Line 657
					    'tsub'/2
					  (%% Line 657
					   T, _17)
				  in  let <_19> =
					  call %% Line 658
					       'erlang':%% Line 658
							'-'
					      (%% Line 658
					       D, %% Line 658
						  1)
				      in  let <L> =
					      apply %% Line 658
						    'print_length_fields'/8
						  (%% Line 658
						   RDefs, _19, %% Line 658
							       T1, %% Line 658
								   Tuple, %% Line 658
									  2, %% Line 658
									     RF, %% Line 658
										 Enc, %% Line 658
										      Str)
					  in  let <_21> =
						  call %% Line 659
						       'erlang':%% Line 659
								'+'
						      (%% Line 659
						       NameL, %% Line 659
							      2)
					      in  %% Line 659
						  case apply 'list_length'/3
							   (L, _21, 0) of
						    <{Len,Dots}> when 'true' ->
							%% Line 660
							{{'record',[{Name,NameL}|L]},Len,Dots,'no_more'}
						    ( <_22> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_22})
						      -| ['compiler_generated'] )
						  end
	end
'print_length_fields'/8 =
    %% Line 662
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <[],_X_D,_X_T,Tuple,I,_X_RF,_X_Enc,_X_Str>
	      when %% Line 663
		try
		    let <_8> =
			call 'erlang':'tuple_size'
			    (Tuple)
		    in  call 'erlang':'>'
			    (I, _8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 664
	      []
	  %% Line 665
	  <Term,D,T,Tuple,I,RF,Enc,Str>
	      when let <_9> =
		    call %% Line 666
			 'erlang':%% Line 666
				  '=:='
			(%% Line 666
			 D, %% Line 666
			    1)
		in  let <_10> =
			call %% Line 666
			     'erlang':%% Line 666
				      '=:='
			    (%% Line 666
			     T, %% Line 666
				0)
		    in  %% Line 666
			call 'erlang':'or'
			    (_9, _10) ->
	      let <More> =
		  fun (_13,_12) ->
		      let <_11> =
			  call %% Line 668
			       'erlang':%% Line 668
					'+'
			      (%% Line 668
			       D, _12)
		      in  %% Line 668
			  apply 'print_length_fields'/8
			      (Term, _11, _13, Tuple, I, RF, Enc, Str)
	      in  %% Line 670
		  {'dots',3,3,More}
	  %% Line 671
	  <[Def|Defs],D,T,Tuple,I,RF,Enc,Str> when 'true' ->
	      let <E> =
		  call %% Line 672
		       'erlang':%% Line 672
				'element'
		      (%% Line 672
		       I, %% Line 672
			  Tuple)
	      in  let <T1> =
		      apply %% Line 673
			    'tsub'/2
			  (%% Line 673
			   T, %% Line 673
			      1)
		  in  let <_19> =
			  call %% Line 674
			       'erlang':%% Line 674
					'-'
			      (%% Line 674
			       D, %% Line 674
				  1)
		      in  let <Field1> =
			      apply %% Line 674
				    'print_length_field'/7
				  (%% Line 674
				   Def, _19, %% Line 674
					     T1, %% Line 674
						 E, %% Line 674
						    RF, %% Line 674
							Enc, %% Line 674
							     Str)
			  in  %% Line 675
			      case Field1 of
				<{_34,Len1,_35,_36}> when 'true' ->
				    let <T2> =
					apply %% Line 676
					      'tsub'/2
					    (%% Line 676
					     T1, %% Line 676
						 Len1)
				    in  let <_24> =
					    call %% Line 678
						 'erlang':%% Line 678
							  '-'
						(%% Line 678
						 D, %% Line 678
						    1)
					in  let <_23> =
						call %% Line 678
						     'erlang':%% Line 678
							      '+'
						    (%% Line 678
						     I, %% Line 678
							1)
					    in  let <_25> =
						    apply %% Line 678
							  'print_length_fields'/8
							(%% Line 678
							 Defs, _24, %% Line 678
								    T2, %% Line 678
									Tuple, _23, %% Line 678
										    RF, %% Line 678
											Enc, %% Line 678
											     Str)
						in  %% Line 677
						    [Field1|_25]
				( <_21> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_21})
				  -| ['compiler_generated'] )
			      end
	  ( <_33,_32,_31,_30,_29,_28,_27,_26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_33,_32,_31,_30,_29,_28,_27,_26})
		  -| [{'function_name',{'print_length_fields',8}}] )
	    -| ['compiler_generated'] )
	end
'print_length_field'/7 =
    %% Line 680
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	let <Name> =
	    apply %% Line 681
		  'write_atom'/2
		(_0, _5)
	in  let <_8> =
		call %% Line 682
		     'io_lib':%% Line 682
			      'chars_length'
		    (%% Line 682
		     Name)
	    in  let <NameL> =
		    call %% Line 682
			 'erlang':%% Line 682
				  '+'
			(_8, %% Line 682
			     3)
		in  let <_10> =
			apply %% Line 684
			      'tsub'/2
			    (_2, %% Line 684
				 NameL)
		    in  %% Line 683
			case %% Line 684
			     apply 'print_length'/6
				 (_3, _1, _10, _4, _5, _6) of
			  <%% Line 684
			   Field = {_20,Len,Dots,_21}> when 'true' ->
			      let <_12> =
				  call %% Line 685
				       'erlang':%% Line 685
						'+'
				      (%% Line 685
				       NameL, %% Line 685
					      Len)
			      in  %% Line 685
				  {{'field',Name,NameL,Field},_12,Dots,'no_more'}
			  ( <_11> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_11})
			    -| ['compiler_generated'] )
			end
'print_length_list'/6 =
    %% Line 687
    fun (_0,_1,_2,_3,_4,_5) ->
	let <_6> =
	    apply %% Line 688
		  'tsub'/2
		(_2, %% Line 688
		     2)
	in  let <L> =
		apply %% Line 688
		      'print_length_list1'/6
		    (_0, _1, _6, _3, _4, _5)
	    in  %% Line 689
		case apply 'list_length'/3
			 (L, 2, 0) of
		  <{Len,Dots}> when 'true' ->
		      %% Line 690
		      {{'list',L},Len,Dots,'no_more'}
		  ( <_8> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_8})
		    -| ['compiler_generated'] )
		end
'print_length_list1'/6 =
    %% Line 692
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <[],_X_D,_X_T,_X_RF,_X_Enc,_X_Str> when 'true' ->
	      %% Line 693
	      []
	  %% Line 694
	  <Term,D,T,RF,Enc,Str>
	      when let <_6> =
		    call 'erlang':'=:='
			(D, 1)
		in  let <_7> =
			call 'erlang':'=:='
			    (T, 0)
		    in  call 'erlang':'or'
			    (_6, _7) ->
	      let <More> =
		  fun (_10,_9) ->
		      let <_8> =
			  call %% Line 695
			       'erlang':%% Line 695
					'+'
			      (%% Line 695
			       D, _9)
		      in  %% Line 695
			  apply 'print_length_list1'/6
			      (Term, _8, _10, RF, Enc, Str)
	      in  %% Line 696
		  {'dots',3,3,More}
	  %% Line 697
	  <[E|Es],D,T,RF,Enc,Str> when 'true' ->
	      let <_15> =
		  call %% Line 698
		       'erlang':%% Line 698
				'-'
		      (%% Line 698
		       D, %% Line 698
			  1)
	      in  let <_14> =
		      apply %% Line 698
			    'tsub'/2
			  (%% Line 698
			   T, %% Line 698
			      1)
		  in  %% Line 698
		      case apply 'print_length'/6
			       (E, _15, _14, RF, Enc, Str) of
			<Elem1 = {_28,Len1,_29,_30}> when 'true' ->
			    let <_19> =
				call %% Line 699
				     'erlang':%% Line 699
					      '-'
				    (%% Line 699
				     D, %% Line 699
					1)
			    in  let <_17> =
				    call %% Line 699
					 'erlang':%% Line 699
						  '+'
					(%% Line 699
					 Len1, %% Line 699
					       1)
				in  let <_18> =
					apply %% Line 699
					      'tsub'/2
					    (%% Line 699
					     T, _17)
				    in  let <_20> =
					    apply %% Line 699
						  'print_length_list1'/6
						(%% Line 699
						 Es, _19, _18, %% Line 699
							       RF, %% Line 699
								   Enc, %% Line 699
									Str)
					in  %% Line 699
					    [Elem1|_20]
			( <_16> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_16})
			  -| ['compiler_generated'] )
		      end
	  %% Line 700
	  <E,D,T,RF,Enc,Str> when 'true' ->
	      let <_21> =
		  call %% Line 701
		       'erlang':%% Line 701
				'-'
		      (%% Line 701
		       D, %% Line 701
			  1)
	      in  %% Line 701
		  apply 'print_length'/6
		      (E, _21, T, RF, Enc, Str)
	end
'list_length'/3 =
    %% Line 703
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[],Acc,DotsAcc> when 'true' ->
	      %% Line 704
	      {Acc,DotsAcc}
	  %% Line 705
	  <[{_10,Len,Dots,_11}|Es],Acc,DotsAcc> when 'true' ->
	      let <_4> =
		  call %% Line 706
		       'erlang':%% Line 706
				'+'
		      (%% Line 706
		       Acc, %% Line 706
			    Len)
	      in  let <_3> =
		      call %% Line 706
			   'erlang':%% Line 706
				    '+'
			  (%% Line 706
			   DotsAcc, %% Line 706
				    Dots)
		  in  %% Line 706
		      apply 'list_length_tail'/3
			  (Es, _4, _3)
	  %% Line 707
	  <{_12,Len,Dots,_13},Acc,DotsAcc> when 'true' ->
	      let <_6> =
		  call %% Line 708
		       'erlang':%% Line 708
				'+'
		      (%% Line 708
		       Acc, %% Line 708
			    Len)
	      in  let <_5> =
		      call %% Line 708
			   'erlang':%% Line 708
				    '+'
			  (%% Line 708
			   DotsAcc, %% Line 708
				    Dots)
		  in  %% Line 708
		      {_6,_5}
	  ( <_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7})
		  -| [{'function_name',{'list_length',3}}] )
	    -| ['compiler_generated'] )
	end
'list_length_tail'/3 =
    %% Line 710
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[],Acc,DotsAcc> when 'true' ->
	      %% Line 711
	      {Acc,DotsAcc}
	  %% Line 712
	  <[{_12,Len,Dots,_13}|Es],Acc,DotsAcc> when 'true' ->
	      let <_4> =
		  call %% Line 713
		       'erlang':%% Line 713
				'+'
		      (%% Line 713
		       Acc, %% Line 713
			    1)
	      in  let <_5> =
		      call %% Line 713
			   'erlang':%% Line 713
				    '+'
			  (_4, %% Line 713
			       Len)
		  in  let <_3> =
			  call %% Line 713
			       'erlang':%% Line 713
					'+'
			      (%% Line 713
			       DotsAcc, %% Line 713
					Dots)
		      in  %% Line 713
			  apply 'list_length_tail'/3
			      (Es, _5, _3)
	  %% Line 714
	  <{_14,Len,Dots,_15},Acc,DotsAcc> when 'true' ->
	      let <_7> =
		  call %% Line 715
		       'erlang':%% Line 715
				'+'
		      (%% Line 715
		       Acc, %% Line 715
			    1)
	      in  let <_8> =
		      call %% Line 715
			   'erlang':%% Line 715
				    '+'
			  (_7, %% Line 715
			       Len)
		  in  let <_6> =
			  call %% Line 715
			       'erlang':%% Line 715
					'+'
			      (%% Line 715
			       DotsAcc, %% Line 715
					Dots)
		      in  %% Line 715
			  {_8,_6}
	  ( <_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9})
		  -| [{'function_name',{'list_length_tail',3}}] )
	    -| ['compiler_generated'] )
	end
'printable_list'/4 =
    %% Line 721
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <_X_L,1,_X_T,_X_Enc> when 'true' ->
	      %% Line 722
	      'false'
	  %% Line 723
	  <L,_X_D,T,'latin1'>
	      when call 'erlang':'<'
		    (T,
		     0) ->
	      %% Line 724
	      call 'io_lib':'printable_latin1_list'
		  (L)
	  %% Line 725
	  <L,_X_D,T,'latin1'>
	      when call 'erlang':'>='
		    (T,
		     0) ->
	      let <N> =
		  apply %% Line 726
			'tsub'/2
		      (%% Line 726
		       T, %% Line 726
			  2)
	      in  %% Line 727
		  case apply 'printable_latin1_list'/2
			   (L, N) of
		    %% Line 728
		    <'all'> when 'true' ->
			%% Line 729
			'true'
		    %% Line 730
		    <0> when 'true' ->
			%% Line 731
			case call 'lists':'split'
				 (N, L) of
			  <{L1,_22}> when 'true' ->
			      %% Line 732
			      {'true',L1}
			  ( <_5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_5})
			    -| ['compiler_generated'] )
			end
		    %% Line 733
		    <_X_NC> when 'true' ->
			%% Line 734
			'false'
		  end
	  %% Line 736
	  <L,_X_D,T,_X_Unicode>
	      when call 'erlang':'>='
		    (T,
		     0) ->
	      let <N> =
		  apply %% Line 737
			'tsub'/2
		      (%% Line 737
		       T, %% Line 737
			  2)
	      in  %% Line 739
		  try
		      call 'string':'slice'
			  (L, 0, N)
		  of <_8> ->
		      case _8 of
			%% Line 740
			<[]> when 'true' ->
			    %% Line 741
			    'false'
			%% Line 742
			<Prefix> when 'true' ->
			    let <_9> =
				call %% Line 743
				     'lists':%% Line 743
					     'flatlength'
				    (%% Line 743
				     Prefix)
			    in  %% Line 743
				case apply 'is_flat'/2
					 (L, _9) of
				  %% Line 744
				  <'true'> when 'true' ->
				      %% Line 745
				      case call 'string':'equal'
					       (Prefix, L) of
					%% Line 746
					<'true'> when 'true' ->
					    %% Line 747
					    call 'io_lib':'printable_list'
						(L)
					%% Line 748
					<'false'> when 'true' ->
					    %% Line 750
					    ( case call 'io_lib':'printable_list'
						       (Prefix) of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      {'true',Prefix}
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
						( <_10> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {( 'badarg'
								  -| ['compiler_generated'] ),_10}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					( <_12> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_12})
					  -| ['compiler_generated'] )
				      end
				  %% Line 752
				  <'false'> when 'true' ->
				      %% Line 753
				      'false'
				  ( <_13> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_13})
				    -| ['compiler_generated'] )
				end
		      end
		  catch <_17,_16,_15> ->
		      %% Line 755
		      'false'
	  %% Line 757
	  <L,_X_D,T,_X_Uni>
	      when call 'erlang':'<'
		    (T,
		     0) ->
	      %% Line 758
	      call 'io_lib':'printable_list'
		  (L)
	  ( <_21,_20,_19,_18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_21,_20,_19,_18})
		  -| [{'function_name',{'printable_list',4}}] )
	    -| ['compiler_generated'] )
	end
'is_flat'/2 =
    %% Line 760
    fun (_0,_1) ->
	case <_0,_1> of
	  <_X_L,0> when 'true' ->
	      %% Line 761
	      'true'
	  %% Line 762
	  <[C|Cs],N>
	      when call 'erlang':'is_integer'
		    (C) ->
	      let <_2> =
		  call %% Line 763
		       'erlang':%% Line 763
				'-'
		      (%% Line 763
		       N, %% Line 763
			  1)
	      in  %% Line 763
		  apply 'is_flat'/2
		      (Cs, _2)
	  %% Line 764
	  <_5,_X_N> when 'true' ->
	      %% Line 765
	      'false'
	end
'printable_bin0'/4 =
    %% Line 767
    fun (_0,_1,_2,_3) ->
	let <_9> =
	    case %% Line 768
		 call 'erlang':'>='
		     (_1, 0) of
	      %% Line 769
	      <'true'> when 'true' ->
		  let <_5> =
		      call %% Line 771
			   'erlang':%% Line 771
				    '*'
			  (%% Line 771
			   4, _1)
		  in  let <_4> =
			  call %% Line 771
			       'erlang':%% Line 771
					'byte_size'
			      (_0)
		      in  let <DChars> =
			      call %% Line 771
				   'erlang':%% Line 771
					    'min'
				  (_5, _4)
			  in  %% Line 772
			      case <> of
				%% Line 773
				<>
				    when call 'erlang':'>='
					  (_2,
					   0) ->
				    %% Line 774
				    call 'erlang':'min'
					(_2, DChars)
				%% Line 775
				<> when 'true' ->
				    %% Line 776
				    DChars
			      end
	      %% Line 778
	      <'false'>
		  when call 'erlang':'<'
			(_2,
			 0) ->
		  %% Line 779
		  call 'erlang':'byte_size'
		      (_0)
	      %% Line 780
	      <'false'>
		  when call 'erlang':'>='
			(_2,
			 0) ->
		  _2
	      ( <_8> when 'true' ->
		    %% Line 768
		    primop 'match_fail'
			({'case_clause',_8})
		-| ['compiler_generated'] )
	    end
	in  %% Line 783
	    apply 'printable_bin'/4
		(_0, _9, _1, _3)
'printable_bin'/4 =
    %% Line 785
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <_X_Bin,0,_X_D,_X_Enc> when 'true' ->
	      %% Line 786
	      'false'
	  %% Line 787
	  <Bin,Len,D,'latin1'> when 'true' ->
	      let <N> =
		  call %% Line 788
		       'erlang':%% Line 788
				'min'
		      (%% Line 788
		       20, %% Line 788
			   Len)
	      in  let <L> =
		      call %% Line 789
			   'erlang':%% Line 789
				    'binary_to_list'
			  (%% Line 789
			   Bin, %% Line 789
				1, %% Line 789
				   N)
		  in  %% Line 790
		      case apply 'printable_latin1_list'/2
			       (L, N) of
			%% Line 791
			<'all'>
			    when try
				  let <_6> =
				      call 'erlang':'byte_size'
					  (Bin)
				  in  call 'erlang':'=:='
					  (N, _6)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    %% Line 792
			    {'true',L}
			%% Line 793
			<'all'>
			    when call 'erlang':'=:='
				  (N,
				   Len) ->
			    %% Line 794
			    {'true','true',L}
			%% Line 795
			<'all'> when 'true' ->
			    let <_8> =
				call %% Line 796
				     'erlang':%% Line 796
					      '+'
				    (%% Line 796
				     1, %% Line 796
					N)
			    in  let <_7> =
				    call %% Line 796
					 'erlang':%% Line 796
						  '-'
					(%% Line 796
					 Len, %% Line 796
					      N)
				in  %% Line 796
				    case apply 'printable_bin1'/3
					     (Bin, _8, _7) of
				      %% Line 797
				      <0>
					  when try
						let <_9> =
						    call 'erlang':'byte_size'
							(Bin)
						in  call 'erlang':'=:='
							(_9, Len)
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  let <_10> =
					      call %% Line 798
						   'erlang':%% Line 798
							    'binary_to_list'
						  (%% Line 798
						   Bin)
					  in  %% Line 798
					      {'true',_10}
				      %% Line 799
				      <NC>
					  when try
						let <_11> =
						    call 'erlang':'>'
							(D, 0)
						in  let <_12> =
							call 'erlang':'-'
							    (Len, NC)
						    in  let <_13> =
							    call 'erlang':'>='
								(_12, D)
							in  call 'erlang':'and'
								(_11, _13)
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  let <_14> =
					      call %% Line 800
						   'erlang':%% Line 800
							    '-'
						  (%% Line 800
						   Len, %% Line 800
							NC)
					  in  let <_15> =
						  call %% Line 800
						       'erlang':%% Line 800
								'binary_to_list'
						      (%% Line 800
						       Bin, %% Line 800
							    1, _14)
					      in  %% Line 800
						  {'true','true',_15}
				      %% Line 801
				      <NC>
					  when call 'erlang':'is_integer'
						(NC) ->
					  %% Line 802
					  'false'
				      ( <_16> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_16})
					-| ['compiler_generated'] )
				    end
			%% Line 804
			<NC>
			    when try
				  let <_17> =
				      call 'erlang':'is_integer'
					  (NC)
				  in  let <_18> =
					  call 'erlang':'>'
					      (D, 0)
				      in  let <_19> =
					      call 'erlang':'-'
						  (N, NC)
					  in  let <_20> =
						  call 'erlang':'>='
						      (_19, D)
					      in  let <_21> =
						      call 'erlang':'and'
							  (_18, _20)
						  in  call 'erlang':'and'
							  (_17, _21)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    let <_22> =
				call %% Line 805
				     'erlang':%% Line 805
					      '-'
				    (%% Line 805
				     N, %% Line 805
					NC)
			    in  let <_23> =
				    call %% Line 805
					 'erlang':%% Line 805
						  'binary_to_list'
					(%% Line 805
					 Bin, %% Line 805
					      1, _22)
				in  %% Line 805
				    {'true','true',_23}
			%% Line 806
			<NC>
			    when call 'erlang':'is_integer'
				  (NC) ->
			    %% Line 807
			    'false'
			( <_24> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_24})
			  -| ['compiler_generated'] )
		      end
	  %% Line 809
	  <Bin,Len,D,_X_Uni> when 'true' ->
	      %% Line 810
	      case apply 'valid_utf8'/2
		       (Bin, Len) of
		%% Line 811
		<'true'> when 'true' ->
		    let <_25> =
			call %% Line 812
			     'io':%% Line 812
				  'printable_range'
			    ()
		    in  %% Line 812
			case apply 'printable_unicode'/4
				 (Bin, Len, [], _25) of
			  %% Line 813
			  <{_43,#{}#,L}> when 'true' ->
			      let <_27> =
				  call %% Line 814
				       'erlang':%% Line 814
						'byte_size'
				      (%% Line 814
				       Bin)
			      in  let <_26> =
				      call %% Line 814
					   'erlang':%% Line 814
						    'length'
					  (%% Line 814
					   L)
				  in  let <_28> =
					  call %% Line 814
					       'erlang':%% Line 814
							'=:='
					      (_27, _26)
				      in  %% Line 814
					  {_28,L}
			  %% Line 815
			  <{NC,Bin1,L}>
			      when try
				    let <_29> =
					call 'erlang':'>'
					    (D, 0)
				    in  let <_30> =
					    call 'erlang':'-'
						(Len, NC)
					in  let <_31> =
						call 'erlang':'>='
						    (_30, D)
					    in  call 'erlang':'and'
						    (_29, _31)
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false' ->
			      let <_34> =
				  call %% Line 816
				       'erlang':%% Line 816
						'byte_size'
				      (%% Line 816
				       Bin)
			      in  let <_33> =
				      call %% Line 816
					   'erlang':%% Line 816
						    'byte_size'
					  (%% Line 816
					   Bin1)
				  in  let <_35> =
					  call %% Line 816
					       'erlang':%% Line 816
							'-'
					      (_34, _33)
				      in  let <_32> =
					      call %% Line 816
						   'erlang':%% Line 816
							    'length'
						  (%% Line 816
						   L)
					  in  let <_36> =
						  call %% Line 816
						       'erlang':%% Line 816
								'=:='
						      (_35, _32)
					      in  %% Line 816
						  {_36,'true',L}
			  %% Line 817
			  <{_X_NC,_X_Bin,_X_L}> when 'true' ->
			      %% Line 818
			      'false'
			  ( <_37> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_37})
			    -| ['compiler_generated'] )
			end
		%% Line 820
		<'false'> when 'true' ->
		    %% Line 821
		    apply 'printable_bin'/4
			(Bin, Len, D, 'latin1')
		( <_38> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_38})
		  -| ['compiler_generated'] )
	      end
	end
'printable_bin1'/3 =
    %% Line 824
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <_X_Bin,_X_Start,0> when 'true' ->
	      %% Line 825
	      0
	  %% Line 826
	  <Bin,Start,Len> when 'true' ->
	      let <N> =
		  call %% Line 827
		       'erlang':%% Line 827
				'min'
		      (%% Line 827
		       10000, %% Line 827
			      Len)
	      in  let <_4> =
		      call %% Line 828
			   'erlang':%% Line 828
				    '+'
			  (%% Line 828
			   Start, %% Line 828
				  N)
		  in  let <_5> =
			  call %% Line 828
			       'erlang':%% Line 828
					'-'
			      (_4, %% Line 828
				   1)
		      in  let <L> =
			      call %% Line 828
				   'erlang':%% Line 828
					    'binary_to_list'
				  (%% Line 828
				   Bin, %% Line 828
					Start, _5)
			  in  %% Line 829
			      case apply 'printable_latin1_list'/2
				       (L, N) of
				%% Line 830
				<'all'> when 'true' ->
				    let <_8> =
					call %% Line 831
					     'erlang':%% Line 831
						      '+'
					    (%% Line 831
					     Start, %% Line 831
						    N)
				    in  let <_7> =
					    call %% Line 831
						 'erlang':%% Line 831
							  '-'
						(%% Line 831
						 Len, %% Line 831
						      N)
					in  %% Line 831
					    apply 'printable_bin1'/3
						(Bin, _8, _7)
				%% Line 832
				<NC>
				    when call 'erlang':'is_integer'
					  (NC) ->
				    let <_9> =
					call %% Line 833
					     'erlang':%% Line 833
						      '-'
					    (%% Line 833
					     N, %% Line 833
						NC)
				    in  %% Line 833
					call 'erlang':'-'
					    (Len, _9)
				( <_10> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_10})
				  -| ['compiler_generated'] )
			      end
	end
'printable_latin1_list'/2 =
    %% Line 837
    fun (_0,_1) ->
	case <_0,_1> of
	  <[_17|_18],0> when 'true' ->
	      0
	  %% Line 838
	  <[C|Cs],N>
	      when let <_2> =
		    call 'erlang':'>='
			(C, 32)
		in  let <_3> =
			call 'erlang':'=<'
			    (C, 126)
		    in  call 'erlang':'and'
			    (_2, _3) ->
	      let <_4> =
		  call %% Line 839
		       'erlang':%% Line 839
				'-'
		      (%% Line 839
		       N, %% Line 839
			  1)
	      in  %% Line 839
		  apply 'printable_latin1_list'/2
		      (Cs, _4)
	  %% Line 840
	  <[C|Cs],N>
	      when let <_5> =
		    call 'erlang':'>='
			(C, 160)
		in  let <_6> =
			call 'erlang':'=<'
			    (C, 255)
		    in  call 'erlang':'and'
			    (_5, _6) ->
	      let <_7> =
		  call %% Line 841
		       'erlang':%% Line 841
				'-'
		      (%% Line 841
		       N, %% Line 841
			  1)
	      in  %% Line 841
		  apply 'printable_latin1_list'/2
		      (Cs, _7)
	  %% Line 842
	  <[10|Cs],N> when 'true' ->
	      let <_8> =
		  call 'erlang':'-'
		      (N, 1)
	      in  apply 'printable_latin1_list'/2
		      (Cs, _8)
	  %% Line 843
	  <[13|Cs],N> when 'true' ->
	      let <_9> =
		  call 'erlang':'-'
		      (N, 1)
	      in  apply 'printable_latin1_list'/2
		      (Cs, _9)
	  %% Line 844
	  <[9|Cs],N> when 'true' ->
	      let <_10> =
		  call 'erlang':'-'
		      (N, 1)
	      in  apply 'printable_latin1_list'/2
		      (Cs, _10)
	  %% Line 845
	  <[11|Cs],N> when 'true' ->
	      let <_11> =
		  call 'erlang':'-'
		      (N, 1)
	      in  apply 'printable_latin1_list'/2
		      (Cs, _11)
	  %% Line 846
	  <[8|Cs],N> when 'true' ->
	      let <_12> =
		  call 'erlang':'-'
		      (N, 1)
	      in  apply 'printable_latin1_list'/2
		      (Cs, _12)
	  %% Line 847
	  <[12|Cs],N> when 'true' ->
	      let <_13> =
		  call 'erlang':'-'
		      (N, 1)
	      in  apply 'printable_latin1_list'/2
		      (Cs, _13)
	  %% Line 848
	  <[27|Cs],N> when 'true' ->
	      let <_14> =
		  call 'erlang':'-'
		      (N, 1)
	      in  apply 'printable_latin1_list'/2
		      (Cs, _14)
	  %% Line 849
	  <[],_19> when 'true' ->
	      'all'
	  %% Line 850
	  <_20,N> when 'true' ->
	      N
	end
'valid_utf8'/2 =
    %% Line 852
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{}#,_5> when 'true' ->
	      %% Line 853
	      'true'
	  %% Line 854
	  <_6,0> when 'true' ->
	      %% Line 855
	      'true'
	  %% Line 856
	  <#{#<_7>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<R>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' ->
	      let <_2> =
		  call %% Line 857
		       'erlang':%% Line 857
				'-'
		      (%% Line 857
		       N, %% Line 857
			  1)
	      in  %% Line 857
		  apply 'valid_utf8'/2
		      (R, _2)
	  %% Line 858
	  <_8,_9> when 'true' ->
	      %% Line 859
	      'false'
	end
'printable_unicode'/4 =
    %% Line 861
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Bin = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<R>('all',8,'binary',['unsigned'|['big']])}#,I,L,Range>
	      when call 'erlang':'>'
		    (I,
		     0) ->
	      %% Line 862
	      case apply 'printable_char'/2
		       (C, Range) of
		%% Line 863
		<'true'> when 'true' ->
		    let <_4> =
			call %% Line 864
			     'erlang':%% Line 864
				      '-'
			    (%% Line 864
			     I, %% Line 864
				1)
		    in  %% Line 864
			apply 'printable_unicode'/4
			    (R, _4, [C|L], Range)
		%% Line 865
		<'false'> when 'true' ->
		    let <_5> =
			call %% Line 866
			     'lists':%% Line 866
				     'reverse'
			    (%% Line 866
			     L)
		    in  %% Line 866
			{I,Bin,_5}
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 868
	  <Bin,I,L,_12> when 'true' ->
	      let <_7> =
		  call %% Line 869
		       'lists':%% Line 869
			       'reverse'
		      (%% Line 869
		       L)
	      in  %% Line 869
		  {I,Bin,_7}
	end
'printable_char'/2 =
    %% Line 871
    fun (_0,_1) ->
	case <_0,_1> of
	  <10,_28> when 'true' ->
	      'true'
	  %% Line 872
	  <13,_29> when 'true' ->
	      'true'
	  %% Line 873
	  <9,_30> when 'true' ->
	      'true'
	  %% Line 874
	  <11,_31> when 'true' ->
	      'true'
	  %% Line 875
	  <8,_32> when 'true' ->
	      'true'
	  %% Line 876
	  <12,_33> when 'true' ->
	      'true'
	  %% Line 877
	  <27,_34> when 'true' ->
	      'true'
	  %% Line 878
	  <C,'latin1'> when 'true' ->
	      let <_5> =
		  case <> of
		    %% Line 879
		    ( <>
			  when call 'erlang':'>='
				(C,
				 32) ->
			  call 'erlang':'=<'
			      (C, 126)
		      -| ['compiler_generated'] )
		    %% Line 879
		    ( <> when 'true' ->
			  'false'
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 879
		  ( case _5 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    'true'
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    %% Line 880
			    ( case <> of
				( <>
				      when call 'erlang':'>='
					    (C,
					     160) ->
				      call 'erlang':'=<'
					  (C, 255)
				  -| ['compiler_generated'] )
				( <> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_2> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_2}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 881
	  <C,'unicode'> when 'true' ->
	      let <_12> =
		  case <> of
		    %% Line 882
		    ( <>
			  when call 'erlang':'>='
				(C,
				 32) ->
			  call 'erlang':'=<'
			      (C, 126)
		      -| ['compiler_generated'] )
		    %% Line 882
		    ( <> when 'true' ->
			  'false'
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 882
		  ( case _12 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    'true'
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_16> =
				case <> of
				  %% Line 883
				  ( <>
					when call 'erlang':'>='
					      (C,
					       160) ->
					call 'erlang':'<'
					    (C, 55296)
				    -| ['compiler_generated'] )
				  %% Line 883
				  ( <> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				end
			    in  %% Line 883
				( case _16 of
				    ( <( 'true'
					 -| ['compiler_generated'] )> when 'true' ->
					  'true'
				      -| ['compiler_generated'] )
				    ( <( 'false'
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_20> =
					      case <> of
						%% Line 884
						( <>
						      when call 'erlang':'>'
							    (C,
							     57343) ->
						      call 'erlang':'<'
							  (C, 65534)
						  -| ['compiler_generated'] )
						%% Line 884
						( <> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
					      end
					  in  %% Line 884
					      ( case _20 of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							'true'
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							%% Line 885
							( case <> of
							    ( <>
								  when call 'erlang':'>'
									(C,
									 65535) ->
								  call 'erlang':'=<'
								      (C, 1114111)
							      -| ['compiler_generated'] )
							    ( <> when 'true' ->
								  'false'
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <_17> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {( 'badarg'
								    -| ['compiler_generated'] ),_17}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <_13> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {( 'badarg'
						      -| ['compiler_generated'] ),_13}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_9> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_9}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_27,_26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_27,_26})
		  -| [{'function_name',{'printable_char',2}}] )
	    -| ['compiler_generated'] )
	end
'write_atom'/2 =
    %% Line 887
    fun (_0,_1) ->
	case <_0,_1> of
	  <A,'latin1'> when 'true' ->
	      %% Line 888
	      call 'io_lib':'write_atom_as_latin1'
		  (A)
	  %% Line 889
	  <A,_X_Uni> when 'true' ->
	      %% Line 890
	      call 'io_lib':'write_atom'
		  (A)
	end
'write_string'/2 =
    %% Line 892
    fun (_0,_1) ->
	case <_0,_1> of
	  <S,'latin1'> when 'true' ->
	      %% Line 893
	      call 'io_lib':'write_latin1_string'
		  (S, 34)
	  %% Line 894
	  <S,_X_Uni> when 'true' ->
	      %% Line 895
	      call 'io_lib':'write_string'
		  (S, 34)
	end
'expand'/3 =
    %% Line 897
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <If = {_20,_21,_X_Dots = 0,'no_more'},_X_T,_X_Dd> when 'true' ->
	      If
	  %% Line 898
	  <{{'tuple',IsTagged,L},_X_Len,_22,'no_more'},T,Dd> when 'true' ->
	      %% Line 899
	      case apply 'expand_list'/4
		       (L, T, Dd, 2) of
		<{NL,NLen,NDots}> when 'true' ->
		    %% Line 900
		    {{'tuple',IsTagged,NL},NLen,NDots,'no_more'}
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 901
	  <{{'map',Pairs},_X_Len,_23,'no_more'},T,Dd> when 'true' ->
	      %% Line 902
	      case apply 'expand_list'/4
		       (Pairs, T, Dd, 3) of
		<{NPairs,NLen,NDots}> when 'true' ->
		    %% Line 903
		    {{'map',NPairs},NLen,NDots,'no_more'}
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 904
	  <{{'map_pair',K,V},_X_Len,_24,'no_more'},T,Dd> when 'true' ->
	      let <_5> =
		  apply %% Line 905
			'tsub'/2
		      (%% Line 905
		       T, %% Line 905
			  1)
	      in  %% Line 905
		  case apply 'expand'/3
			   (K, _5, Dd) of
		    <P1 = {_25,KL,KD,_26}> when 'true' ->
			let <KL1> =
			    call %% Line 906
				 'erlang':%% Line 906
					  '+'
				(%% Line 906
				 KL, %% Line 906
				     4)
			in  let <_8> =
				apply %% Line 907
				      'tsub'/2
				    (%% Line 907
				     T, %% Line 907
					KL1)
			    in  %% Line 907
				case apply 'expand'/3
					 (V, _8, Dd) of
				  <P2 = {_27,VL,VD,_28}> when 'true' ->
				      let <_11> =
					  call %% Line 908
					       'erlang':%% Line 908
							'+'
					      (%% Line 908
					       KL1, %% Line 908
						    VL)
				      in  let <_10> =
					      call %% Line 908
						   'erlang':%% Line 908
							    '+'
						  (%% Line 908
						   KD, %% Line 908
						       VD)
					  in  %% Line 908
					      {{'map_pair',P1,P2},_11,_10,'no_more'}
				  ( <_9> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_9})
				    -| ['compiler_generated'] )
				end
		    ( <_6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 909
	  <{{'record',[_@r0 = {Name,NameL}|L]},_X_Len,_29,'no_more'},T,Dd> when 'true' ->
	      let <_12> =
		  call %% Line 910
		       'erlang':%% Line 910
				'+'
		      (%% Line 910
		       NameL, %% Line 910
			      2)
	      in  %% Line 910
		  case apply 'expand_list'/4
			   (L, T, Dd, _12) of
		    <{NL,NLen,NDots}> when 'true' ->
			%% Line 911
			{{'record',[_@r0|NL]},NLen,NDots,'no_more'}
		    ( <_13> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_13})
		      -| ['compiler_generated'] )
		  end
	  %% Line 912
	  <{{'field',Name,NameL,Field},_X_Len,_30,'no_more'},T,Dd> when 'true' ->
	      let <_14> =
		  apply %% Line 913
			'tsub'/2
		      (%% Line 913
		       T, %% Line 913
			  NameL)
	      in  %% Line 913
		  case apply 'expand'/3
			   (Field, _14, Dd) of
		    <F = {_X_S,L,Dots,_31}> when 'true' ->
			let <_16> =
			    call %% Line 914
				 'erlang':%% Line 914
					  '+'
				(%% Line 914
				 NameL, %% Line 914
					L)
			in  %% Line 914
			    {{'field',Name,NameL,F},_16,Dots,'no_more'}
		    ( <_15> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_15})
		      -| ['compiler_generated'] )
		  end
	  %% Line 915
	  <{_32,_33,_34,More},T,Dd> when 'true' ->
	      %% Line 916
	      apply More
		  (T, Dd)
	  ( <_19,_18,_17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_19,_18,_17})
		  -| [{'function_name',{'expand',3}}] )
	    -| ['compiler_generated'] )
	end
'expand_list'/4 =
    %% Line 918
    fun (_0,_1,_2,_3) ->
	let <_4> =
	    apply %% Line 919
		  'tsub'/2
		(_1, _3)
	in  let <L> =
		apply %% Line 919
		      'expand_list'/3
		    (_0, _4, _2)
	    in  %% Line 920
		case apply 'list_length'/3
			 (L, _3, 0) of
		  <{Len,Dots}> when 'true' ->
		      %% Line 921
		      {L,Len,Dots}
		  ( <_6> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_6})
		    -| ['compiler_generated'] )
		end
'expand_list'/3 =
    %% Line 923
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[],_X_T,_X_Dd> when 'true' ->
	      %% Line 924
	      []
	  %% Line 925
	  <[If|Ifs],T,Dd> when 'true' ->
	      let <_3> =
		  apply %% Line 926
			'tsub'/2
		      (%% Line 926
		       T, %% Line 926
			  1)
	      in  %% Line 926
		  case apply 'expand'/3
			   (If, _3, Dd) of
		    <Elem1 = {_11,Len1,_12,_13}> when 'true' ->
			let <_5> =
			    call %% Line 927
				 'erlang':%% Line 927
					  '+'
				(%% Line 927
				 Len1, %% Line 927
				       1)
			in  let <_6> =
				apply %% Line 927
				      'tsub'/2
				    (%% Line 927
				     T, _5)
			    in  let <_7> =
				    apply %% Line 927
					  'expand_list'/3
					(%% Line 927
					 Ifs, _6, %% Line 927
						  Dd)
				in  %% Line 927
				    [Elem1|_7]
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 928
	  <{_14,_15,_16,More},T,Dd> when 'true' ->
	      %% Line 929
	      apply More
		  (T, Dd)
	  ( <_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8})
		  -| [{'function_name',{'expand_list',3}}] )
	    -| ['compiler_generated'] )
	end
'tsub'/2 =
    %% Line 932
    fun (_0,_1) ->
	case <_0,_1> of
	  <T,_4>
	      when call 'erlang':'<'
		    (T,
		     0) ->
	      T
	  %% Line 933
	  <T,E>
	      when call 'erlang':'>='
		    (T,
		     E) ->
	      call 'erlang':'-'
		  (T, E)
	  %% Line 934
	  <_5,_6> when 'true' ->
	      0
	end
'cind'/7 =
    %% Line 939
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <{_X_S,Len,_29,_30},Col,Ll,M,Ind,LD,W>
	      when try
		    let <_7> =
			call 'erlang':'-'
			    (Ll, Col)
		    in  let <_8> =
			    call 'erlang':'-'
				(_7, LD)
			in  let <_9> =
				call 'erlang':'<'
				    (Len, _8)
			    in  let <_10> =
				    call %% Line 940
					 'erlang':%% Line 940
						  '+'
					(%% Line 940
					 Len, %% Line 940
					      W)
				in  let <_11> =
					call %% Line 940
					     'erlang':%% Line 940
						      '+'
					    (_10, %% Line 940
						  LD)
				    in  let <_12> =
					    call %% Line 940
						 'erlang':%% Line 940
							  '=<'
						(_11, %% Line 940
						      M)
					in  call 'erlang':'and'
						(_9, _12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 941
	      Ind
	  %% Line 942
	  <{{'list',L},_X_Len,_31,_32},Col,Ll,M,Ind,LD,W> when 'true' ->
	      let <_14> =
		  call %% Line 943
		       'erlang':%% Line 943
				'+'
		      (%% Line 943
		       Col, %% Line 943
			    1)
	      in  let <_13> =
		      call %% Line 943
			   'erlang':%% Line 943
				    '+'
			  (%% Line 943
			   W, %% Line 943
			      1)
		  in  %% Line 943
		      apply 'cind_list'/7
			  (L, _14, Ll, M, Ind, LD, _13)
	  %% Line 944
	  <{{'tuple','true',L},_X_Len,_33,_34},Col,Ll,M,Ind,LD,W> when 'true' ->
	      let <_15> =
		  call %% Line 945
		       'erlang':%% Line 945
				'+'
		      (%% Line 945
		       W, %% Line 945
			  1)
	      in  %% Line 945
		  apply 'cind_tag_tuple'/7
		      (L, Col, Ll, M, Ind, LD, _15)
	  %% Line 946
	  <{{'tuple','false',L},_X_Len,_35,_36},Col,Ll,M,Ind,LD,W> when 'true' ->
	      let <_17> =
		  call %% Line 947
		       'erlang':%% Line 947
				'+'
		      (%% Line 947
		       Col, %% Line 947
			    1)
	      in  let <_16> =
		      call %% Line 947
			   'erlang':%% Line 947
				    '+'
			  (%% Line 947
			   W, %% Line 947
			      1)
		  in  %% Line 947
		      apply 'cind_list'/7
			  (L, _17, Ll, M, Ind, LD, _16)
	  %% Line 948
	  <{{'map',Pairs},_X_Len,_37,_38},Col,Ll,M,Ind,LD,W> when 'true' ->
	      let <_19> =
		  call %% Line 949
		       'erlang':%% Line 949
				'+'
		      (%% Line 949
		       Col, %% Line 949
			    2)
	      in  let <_18> =
		      call %% Line 949
			   'erlang':%% Line 949
				    '+'
			  (%% Line 949
			   W, %% Line 949
			      2)
		  in  %% Line 949
		      apply 'cind_map'/7
			  (Pairs, _19, Ll, M, Ind, LD, _18)
	  %% Line 950
	  <{{'record',[{_X_Name,NLen}|L]},_X_Len,_39,_40},Col,Ll,M,Ind,LD,W> when 'true' ->
	      let <_20> =
		  call %% Line 951
		       'erlang':%% Line 951
				'+'
		      (%% Line 951
		       W, %% Line 951
			  NLen)
	      in  let <_21> =
		      call %% Line 951
			   'erlang':%% Line 951
				    '+'
			  (_20, %% Line 951
				1)
		  in  %% Line 951
		      apply 'cind_record'/8
			  (L, NLen, Col, Ll, M, Ind, LD, _21)
	  %% Line 952
	  <{{'bin',_X_S},_X_Len,_41,_42},_X_Col,_X_Ll,_X_M,Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 953
	      Ind
	  %% Line 954
	  <{_X_S,_X_Len,_43,_44},_X_Col,_X_Ll,_X_M,Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 955
	      Ind
	  ( <_28,_27,_26,_25,_24,_23,_22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_28,_27,_26,_25,_24,_23,_22})
		  -| [{'function_name',{'cind',7}}] )
	    -| ['compiler_generated'] )
	end
'cind_tag_tuple'/7 =
    %% Line 957
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <[{_X_Tag,Tlen,_30,_31}|L],Col,Ll,M,Ind,LD,W> when 'true' ->
	      let <TagInd> =
		  call %% Line 958
		       'erlang':%% Line 958
				'+'
		      (%% Line 958
		       Tlen, %% Line 958
			     2)
	      in  let <Tcol> =
		      call %% Line 959
			   'erlang':%% Line 959
				    '+'
			  (%% Line 959
			   Col, %% Line 959
				TagInd)
		  in  %% Line 960
		      case <> of
			%% Line 961
			<>
			    when let <_9> =
				  call 'erlang':'>'
				      (Ind, 0)
			      in  let <_10> =
				      call 'erlang':'>'
					  (TagInd, Ind)
				  in  call 'erlang':'and'
					  (_9, _10) ->
			    let <Col1> =
				call %% Line 962
				     'erlang':%% Line 962
					      '+'
				    (%% Line 962
				     Col, %% Line 962
					  Ind)
			    in  %% Line 963
				case <> of
				  %% Line 964
				  <>
				      when let <_13> =
					    try
						let <_12> =
						    call 'erlang':'+'
							(M, Col1)
						in  call 'erlang':'=<'
							(_12, Ll)
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false'
					in  let <_15> =
						try
						    let <_14> =
							call 'erlang':'div'
							    (Ll, 2)
						    in  call 'erlang':'=<'
							    (Col1, _14)
						of <Try> ->
						    Try
						catch <T,R> ->
						    'false'
					    in  call 'erlang':'or'
						    (_13, _15) ->
				      let <_16> =
					  call %% Line 965
					       'erlang':%% Line 965
							'+'
					      (%% Line 965
					       W, %% Line 965
						  Tlen)
				      in  %% Line 965
					  apply 'cind_tail'/8
					      (L, Col1, Tcol, Ll, M, Ind, LD, _16)
				  %% Line 966
				  <> when 'true' ->
				      %% Line 967
				      call 'erlang':'throw'
					  ('no_good')
				end
			%% Line 969
			<>
			    when let <_18> =
				  try
				      let <_17> =
					  call 'erlang':'+'
					      (M, Tcol)
				      in  call 'erlang':'<'
					      (_17, Ll)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
			      in  let <_20> =
				      try
					  let <_19> =
					      call 'erlang':'div'
						  (Ll, 2)
					  in  call 'erlang':'<'
						  (Tcol, _19)
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false'
				  in  call 'erlang':'or'
					  (_18, _20) ->
			    let <_21> =
				call %% Line 970
				     'erlang':%% Line 970
					      '+'
				    (%% Line 970
				     W, %% Line 970
					Tlen)
			    in  let <_22> =
				    call %% Line 970
					 'erlang':%% Line 970
						  '+'
					(_21, %% Line 970
					      1)
				in  %% Line 970
				    apply 'cind_list'/7
					(L, Tcol, Ll, M, Ind, LD, _22)
			%% Line 971
			<> when 'true' ->
			    %% Line 972
			    call 'erlang':'throw'
				('no_good')
		      end
	  ( <_29,_28,_27,_26,_25,_24,_23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_29,_28,_27,_26,_25,_24,_23})
		  -| [{'function_name',{'cind_tag_tuple',7}}] )
	    -| ['compiler_generated'] )
	end
'cind_map'/7 =
    %% Line 975
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <[P|Ps],Col,Ll,M,Ind,LD,W> when 'true' ->
	      let <_7> =
		  apply %% Line 976
			'last_depth'/2
		      (%% Line 976
		       Ps, %% Line 976
			   LD)
	      in  let <PW> =
		      apply %% Line 976
			    'cind_pair'/7
			  (%% Line 976
			   P, %% Line 976
			      Col, %% Line 976
				   Ll, %% Line 976
				       M, %% Line 976
					  Ind, _7, %% Line 976
						   W)
		  in  let <_10> =
			  call %% Line 977
			       'erlang':%% Line 977
					'+'
			      (%% Line 977
			       Col, %% Line 977
				    PW)
		      in  let <_9> =
			      call %% Line 977
				   'erlang':%% Line 977
					    '+'
				  (%% Line 977
				   W, %% Line 977
				      PW)
			  in  %% Line 977
			      apply 'cind_pairs_tail'/8
				  (Ps, Col, _10, Ll, M, Ind, LD, _9)
	  %% Line 978
	  <_18,_X_Col,_X_Ll,_X_M,Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 979
	      Ind
	end
'cind_pairs_tail'/8 =
    %% Line 981
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <[P = {_62,Len,_63,_64}|Ps],Col0,Col,Ll,M,Ind,LD,W> when 'true' ->
	      let <LD1> =
		  apply %% Line 982
			'last_depth'/2
		      (%% Line 982
		       Ps, %% Line 982
			   LD)
	      in  let <ELen> =
		      call %% Line 983
			   'erlang':%% Line 983
				    '+'
			  (%% Line 983
			   1, %% Line 983
			      Len)
		  in  %% Line 984
		      case <> of
			%% Line 985
			<>
			    when let <_29> =
				  try
				      let <_10> =
					  call 'erlang':'=:='
					      (LD1, 0)
				      in  let <_12> =
					      call 'erlang':'+'
						  (ELen, 1)
					  in  let <_11> =
						  call 'erlang':'-'
						      (Ll, Col)
					      in  let <_13> =
						      call 'erlang':'<'
							  (_12, _11)
						  in  let <_14> =
							  call 'erlang':'+'
							      (W, ELen)
						      in  let <_15> =
							      call 'erlang':'+'
								  (_14, 1)
							  in  let <_16> =
								  call 'erlang':'=<'
								      (_15, M)
							      in  let <_18> =
								      call 'erlang':'element'
									  (1, P)
								  in  let <_19> =
									  call 'erlang':'element'
									      (2, _18)
								      in  let <_20> =
									      call 'erlang':'element'
										  (1, _19)
									  in  ( let <_25> =
										    case call 'erlang':'is_list'
											     (_20) of
										      ( <( 'true'
											   -| ['compiler_generated'] )> when 'true' ->
											    let <_21> =
												call 'erlang':'element'
												    (1, P)
											    in  let <_22> =
												    call 'erlang':'element'
													(3, _21)
												in  let <_23> =
													call 'erlang':'element'
													    (1, _22)
												    in  call 'erlang':'is_list'
													    (_23)
											-| ['compiler_generated'] )
										      ( <( 'false'
											   -| ['compiler_generated'] )> when 'true' ->
											    'false'
											-| ['compiler_generated'] )
										      ( <_17> when 'true' ->
											    _17
											-| ['compiler_generated'] )
										    end
										in  let <_26> =
											call 'erlang':'=:='
											    (( _25
											       -| ['compiler_generated'] ), 'true')
										    in  let <_27> =
											    call 'erlang':'and'
												(_16, _26)
											in  let <_28> =
												call 'erlang':'and'
												    (_13, _27)
											    in  call 'erlang':'and'
												    (_10, _28)
										-| ['compiler_generated'] )
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
			      in  let <_49> =
				      try
					  let <_30> =
					      call %% Line 986
						   'erlang':%% Line 986
							    '>'
						  (%% Line 986
						   LD1, %% Line 986
							0)
					  in  let <_31> =
						  call %% Line 986
						       'erlang':%% Line 986
								'-'
						      (%% Line 986
						       Ll, %% Line 986
							   Col)
					      in  let <_32> =
						      call %% Line 986
							   'erlang':%% Line 986
								    '-'
							  (_31, %% Line 986
								LD1)
						  in  let <_33> =
							  call %% Line 986
							       'erlang':%% Line 986
									'<'
							      (%% Line 986
							       ELen, _32)
						      in  let <_34> =
							      call %% Line 986
								   'erlang':%% Line 986
									    '+'
								  (%% Line 986
								   W, %% Line 986
								      ELen)
							  in  let <_35> =
								  call %% Line 986
								       'erlang':%% Line 986
										'+'
								      (_34, %% Line 986
									    LD1)
							      in  let <_36> =
								      call %% Line 986
									   'erlang':%% Line 986
										    '=<'
									  (_35, %% Line 986
										M)
								  in  let <_38> =
									  call %% Line 986
									       'erlang':%% Line 986
											'element'
									      (%% Line 986
									       1, %% Line 986
										  P)
								      in  let <_39> =
									      call %% Line 986
										   'erlang':%% Line 986
											    'element'
										  (%% Line 986
										   2, _38)
									  in  let <_40> =
										  call %% Line 986
										       'erlang':%% Line 986
												'element'
										      (%% Line 986
										       1, _39)
									      in  ( let <_45> =
											case %% Line 986
											     call 'erlang':'is_list'
												 (_40) of
											  %% Line 986
											  ( <( 'true'
											       -| ['compiler_generated'] )> when 'true' ->
												let <_41> =
												    call 'erlang':'element'
													(1, P)
												in  let <_42> =
													call 'erlang':'element'
													    (3, _41)
												    in  let <_43> =
													    call 'erlang':'element'
														(1, _42)
													in  call 'erlang':'is_list'
														(_43)
											    -| ['compiler_generated'] )
											  %% Line 986
											  ( <( 'false'
											       -| ['compiler_generated'] )> when 'true' ->
												'false'
											    -| ['compiler_generated'] )
											  %% Line 986
											  ( <_37> when 'true' ->
												_37
											    -| ['compiler_generated'] )
											end
										    in  let <_46> =
											    call 'erlang':'=:='
												(%% Line 986
												 ( _45
												   -| ['compiler_generated'] ), 'true')
											in  let <_47> =
												call %% Line 986
												     'erlang':%% Line 986
													      'and'
												    (_36, _46)
											    in  let <_48> =
												    call %% Line 986
													 'erlang':%% Line 986
														  'and'
													(_33, _47)
												in  %% Line 986
												    call 'erlang':'and'
													(_30, _48)
										    -| ['compiler_generated'] )
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false'
				  in  call 'erlang':'or'
					  (_29, _49) ->
			    let <_51> =
				call %% Line 987
				     'erlang':%% Line 987
					      '+'
				    (%% Line 987
				     Col, %% Line 987
					  ELen)
			    in  let <_50> =
				    call %% Line 987
					 'erlang':%% Line 987
						  '+'
					(%% Line 987
					 W, %% Line 987
					    ELen)
				in  %% Line 987
				    apply 'cind_pairs_tail'/8
					(Ps, Col0, _51, Ll, M, Ind, LD, _50)
			%% Line 988
			<> when 'true' ->
			    let <PW> =
				apply %% Line 989
				      'cind_pair'/7
				    (%% Line 989
				     P, %% Line 989
					Col0, %% Line 989
					      Ll, %% Line 989
						  M, %% Line 989
						     Ind, %% Line 989
							  LD1, %% Line 989
							       0)
			    in  let <_53> =
				    call %% Line 990
					 'erlang':%% Line 990
						  '+'
					(%% Line 990
					 Col0, %% Line 990
					       PW)
				in  %% Line 990
				    apply 'cind_pairs_tail'/8
					(Ps, Col0, _53, Ll, M, Ind, LD, PW)
		      end
	  %% Line 992
	  <_65,_X_Col0,_X_Col,_X_Ll,_X_M,Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 993
	      Ind
	end
'cind_pair'/7 =
    %% Line 995
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <Pair = {{'map_pair',_X_Key,_X_Value},Len,_31,_32},Col,Ll,M,_X_Ind,LD,W>
	      when %% Line 996
		try
		    let <_7> =
			call 'erlang':'-'
			    (Ll, Col)
		    in  let <_8> =
			    call 'erlang':'-'
				(_7, LD)
			in  let <_9> =
				call 'erlang':'<'
				    (Len, _8)
			    in  let <_10> =
				    call 'erlang':'+'
					(Len, W)
				in  let <_11> =
					call 'erlang':'+'
					    (_10, LD)
				    in  let <_12> =
					    call 'erlang':'=<'
						(_11, M)
					in  call 'erlang':'and'
						(_9, _12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 997
	      case <> of
		%% Line 998
		<>
		    when try
			  let <_14> =
			      call 'erlang':'element'
				  (1, Pair)
			  in  let <_15> =
				  call 'erlang':'element'
				      (2, _14)
			      in  let <_16> =
				      call 'erlang':'element'
					  (1, _15)
				  in  ( let <_21> =
					    case call 'erlang':'is_list'
						     (_16) of
					      ( <( 'true'
						   -| ['compiler_generated'] )> when 'true' ->
						    let <_17> =
							call 'erlang':'element'
							    (1, Pair)
						    in  let <_18> =
							    call 'erlang':'element'
								(3, _17)
							in  let <_19> =
								call 'erlang':'element'
								    (1, _18)
							    in  call 'erlang':'is_list'
								    (_19)
						-| ['compiler_generated'] )
					      ( <( 'false'
						   -| ['compiler_generated'] )> when 'true' ->
						    'false'
						-| ['compiler_generated'] )
					      ( <_13> when 'true' ->
						    _13
						-| ['compiler_generated'] )
					    end
					in  ( call 'erlang':'=:='
						  (( _21
						     -| ['compiler_generated'] ), 'true')
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 999
		    Len
		%% Line 1000
		<> when 'true' ->
		    %% Line 1001
		    Ll
	      end
	  %% Line 1003
	  <{{'map_pair',K,V},_X_Len,_33,_34},Col0,Ll,M,Ind,LD,W0> when 'true' ->
	      do  %% Line 1004
		  apply 'cind'/7
		      (K, Col0, Ll, M, Ind, LD, W0)
		  let <I> =
		      apply %% Line 1005
			    'map_value_indent'/1
			  (%% Line 1005
			   Ind)
		  in  let <_23> =
			  call %% Line 1006
			       'erlang':%% Line 1006
					'+'
			      (%% Line 1006
			       Col0, %% Line 1006
				     I)
		      in  do  %% Line 1006
			      apply 'cind'/7
				  (V, _23, Ll, M, Ind, LD, 0)
			      %% Line 1007
			      Ll
	  ( <_30,_29,_28,_27,_26,_25,_24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_30,_29,_28,_27,_26,_25,_24})
		  -| [{'function_name',{'cind_pair',7}}] )
	    -| ['compiler_generated'] )
	end
'map_value_indent'/1 =
    %% Line 1009
    fun (_0) ->
	%% Line 1010
	case <> of
	  %% Line 1011
	  <>
	      when call 'erlang':'>'
		    (_0,
		     0) ->
	      _0
	  %% Line 1013
	  <> when 'true' ->
	      %% Line 1014
	      4
	end
'cind_record'/8 =
    %% Line 1017
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <[F|Fs],Nlen,Col0,Ll,M,Ind,LD,W0> when 'true' ->
	      let <Nind> =
		  call %% Line 1018
		       'erlang':%% Line 1018
				'+'
		      (%% Line 1018
		       Nlen, %% Line 1018
			     1)
	      in  %% Line 1019
		  case apply 'cind_rec'/6
			   (Nind, Col0, Ll, M, Ind, W0) of
		    <{Col,W}> when 'true' ->
			let <_10> =
			    apply %% Line 1020
				  'last_depth'/2
				(%% Line 1020
				 Fs, %% Line 1020
				     LD)
			in  let <FW> =
				apply %% Line 1020
				      'cind_field'/7
				    (%% Line 1020
				     F, %% Line 1020
					Col, %% Line 1020
					     Ll, %% Line 1020
						 M, %% Line 1020
						    Ind, _10, %% Line 1020
							      W)
			    in  let <_13> =
				    call %% Line 1021
					 'erlang':%% Line 1021
						  '+'
					(%% Line 1021
					 Col, %% Line 1021
					      FW)
				in  let <_12> =
					call %% Line 1021
					     'erlang':%% Line 1021
						      '+'
					    (%% Line 1021
					     W, %% Line 1021
						FW)
				    in  %% Line 1021
					apply 'cind_fields_tail'/8
					    (Fs, Col, _13, Ll, M, Ind, LD, _12)
		    ( <_9> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_9})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1022
	  <_22,_X_Nlen,_X_Col,_X_Ll,_X_M,Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 1023
	      Ind
	end
'cind_fields_tail'/8 =
    %% Line 1025
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <[F = {_50,Len,_51,_52}|Fs],Col0,Col,Ll,M,Ind,LD,W> when 'true' ->
	      let <LD1> =
		  apply %% Line 1026
			'last_depth'/2
		      (%% Line 1026
		       Fs, %% Line 1026
			   LD)
	      in  let <ELen> =
		      call %% Line 1027
			   'erlang':%% Line 1027
				    '+'
			  (%% Line 1027
			   1, %% Line 1027
			      Len)
		  in  %% Line 1028
		      case <> of
			%% Line 1029
			<>
			    when let <_23> =
				  try
				      let <_10> =
					  call 'erlang':'=:='
					      (LD1, 0)
				      in  let <_12> =
					      call 'erlang':'+'
						  (ELen, 1)
					  in  let <_11> =
						  call 'erlang':'-'
						      (Ll, Col)
					      in  let <_13> =
						      call 'erlang':'<'
							  (_12, _11)
						  in  let <_14> =
							  call 'erlang':'+'
							      (W, ELen)
						      in  let <_15> =
							      call 'erlang':'+'
								  (_14, 1)
							  in  let <_16> =
								  call 'erlang':'=<'
								      (_15, M)
							      in  let <_17> =
								      call 'erlang':'element'
									  (1, F)
								  in  let <_18> =
									  call 'erlang':'element'
									      (4, _17)
								      in  let <_19> =
									      call 'erlang':'element'
										  (1, _18)
									  in  let <_20> =
										  call 'erlang':'is_list'
										      (_19)
									      in  let <_21> =
										      call 'erlang':'and'
											  (_16, _20)
										  in  let <_22> =
											  call 'erlang':'and'
											      (_13, _21)
										      in  call 'erlang':'and'
											      (_10, _22)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
			      in  let <_37> =
				      try
					  let <_24> =
					      call %% Line 1030
						   'erlang':%% Line 1030
							    '>'
						  (%% Line 1030
						   LD1, %% Line 1030
							0)
					  in  let <_25> =
						  call %% Line 1030
						       'erlang':%% Line 1030
								'-'
						      (%% Line 1030
						       Ll, %% Line 1030
							   Col)
					      in  let <_26> =
						      call %% Line 1030
							   'erlang':%% Line 1030
								    '-'
							  (_25, %% Line 1030
								LD1)
						  in  let <_27> =
							  call %% Line 1030
							       'erlang':%% Line 1030
									'<'
							      (%% Line 1030
							       ELen, _26)
						      in  let <_28> =
							      call %% Line 1030
								   'erlang':%% Line 1030
									    '+'
								  (%% Line 1030
								   W, %% Line 1030
								      ELen)
							  in  let <_29> =
								  call %% Line 1030
								       'erlang':%% Line 1030
										'+'
								      (_28, %% Line 1030
									    LD1)
							      in  let <_30> =
								      call %% Line 1030
									   'erlang':%% Line 1030
										    '=<'
									  (_29, %% Line 1030
										M)
								  in  let <_31> =
									  call %% Line 1030
									       'erlang':%% Line 1030
											'element'
									      (%% Line 1030
									       1, %% Line 1030
										  F)
								      in  let <_32> =
									      call %% Line 1030
										   'erlang':%% Line 1030
											    'element'
										  (%% Line 1030
										   4, _31)
									  in  let <_33> =
										  call %% Line 1030
										       'erlang':%% Line 1030
												'element'
										      (%% Line 1030
										       1, _32)
									      in  let <_34> =
										      call %% Line 1030
											   'erlang':%% Line 1030
												    'is_list'
											  (_33)
										  in  let <_35> =
											  call %% Line 1030
											       'erlang':%% Line 1030
													'and'
											      (_30, _34)
										      in  let <_36> =
											      call %% Line 1030
												   'erlang':%% Line 1030
													    'and'
												  (_27, _35)
											  in  %% Line 1030
											      call 'erlang':'and'
												  (_24, _36)
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false'
				  in  call 'erlang':'or'
					  (_23, _37) ->
			    let <_39> =
				call %% Line 1031
				     'erlang':%% Line 1031
					      '+'
				    (%% Line 1031
				     Col, %% Line 1031
					  ELen)
			    in  let <_38> =
				    call %% Line 1031
					 'erlang':%% Line 1031
						  '+'
					(%% Line 1031
					 W, %% Line 1031
					    ELen)
				in  %% Line 1031
				    apply 'cind_fields_tail'/8
					(Fs, Col0, _39, Ll, M, Ind, LD, _38)
			%% Line 1032
			<> when 'true' ->
			    let <FW> =
				apply %% Line 1033
				      'cind_field'/7
				    (%% Line 1033
				     F, %% Line 1033
					Col0, %% Line 1033
					      Ll, %% Line 1033
						  M, %% Line 1033
						     Ind, %% Line 1033
							  LD1, %% Line 1033
							       0)
			    in  let <_41> =
				    call %% Line 1034
					 'erlang':%% Line 1034
						  '+'
					(%% Line 1034
					 Col, %% Line 1034
					      FW)
				in  %% Line 1034
				    apply 'cind_fields_tail'/8
					(Fs, Col0, _41, Ll, M, Ind, LD, FW)
		      end
	  %% Line 1036
	  <_53,_X_Col0,_X_Col,_X_Ll,_X_M,Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 1037
	      Ind
	end
'cind_field'/7 =
    %% Line 1039
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <Fl = {{'field',_X_N,_X_NL,_X_F},Len,_25,_26},Col,Ll,M,_X_Ind,LD,W>
	      when %% Line 1040
		try
		    let <_7> =
			call 'erlang':'-'
			    (Ll, Col)
		    in  let <_8> =
			    call 'erlang':'-'
				(_7, LD)
			in  let <_9> =
				call 'erlang':'<'
				    (Len, _8)
			    in  let <_10> =
				    call 'erlang':'+'
					(Len, W)
				in  let <_11> =
					call 'erlang':'+'
					    (_10, LD)
				    in  let <_12> =
					    call 'erlang':'=<'
						(_11, M)
					in  call 'erlang':'and'
						(_9, _12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1041
	      case <> of
		%% Line 1042
		<>
		    when try
			  let <_13> =
			      call 'erlang':'element'
				  (1, Fl)
			  in  let <_14> =
				  call 'erlang':'element'
				      (4, _13)
			      in  let <_15> =
				      call 'erlang':'element'
					  (1, _14)
				  in  call 'erlang':'is_list'
					  (_15)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 1043
		    Len
		%% Line 1044
		<> when 'true' ->
		    %% Line 1045
		    Ll
	      end
	  %% Line 1047
	  <{{'field',_X_Name,NameL,F},_X_Len,_27,_28},Col0,Ll,M,Ind,LD,W0> when 'true' ->
	      let <_16> =
		  call %% Line 1048
		       'erlang':%% Line 1048
				'+'
		      (%% Line 1048
		       W0, %% Line 1048
			   NameL)
	      in  %% Line 1048
		  case apply 'cind_rec'/6
			   (NameL, Col0, Ll, M, Ind, _16) of
		    <{Col,W}> when 'true' ->
			do  %% Line 1049
			    apply 'cind'/7
				(F, Col, Ll, M, Ind, LD, W)
			    %% Line 1050
			    Ll
		    ( <_17> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_17})
		      -| ['compiler_generated'] )
		  end
	  ( <_24,_23,_22,_21,_20,_19,_18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_24,_23,_22,_21,_20,_19,_18})
		  -| [{'function_name',{'cind_field',7}}] )
	    -| ['compiler_generated'] )
	end
'cind_rec'/6 =
    %% Line 1052
    fun (_0,_1,_2,_3,_4,_5) ->
	let <_7> =
	    call %% Line 1053
		 'erlang':%% Line 1053
			  '>'
		(_4, %% Line 1053
		     0)
	in  let <_6> =
		call %% Line 1053
		     'erlang':%% Line 1053
			      '>'
		    (_0, _4)
	    in  let <Nl> =
		    call %% Line 1053
			 'erlang':%% Line 1053
				  'and'
			(_7, _6)
		in  let <_10> =
			case %% Line 1054
			     Nl of
			  %% Line 1055
			  <'true'> when 'true' ->
			      _4
			  %% Line 1056
			  <'false'> when 'true' ->
			      _0
			  ( <_9> when 'true' ->
				%% Line 1054
				primop 'match_fail'
				    ({'case_clause',_9})
			    -| ['compiler_generated'] )
			end
		    in  let <Col> =
			    call %% Line 1058
				 'erlang':%% Line 1058
					  '+'
				(_1, _10)
			in  %% Line 1059
			    case <> of
			      %% Line 1060
			      <>
				  when let <_14> =
					try
					    let <_13> =
						call 'erlang':'+'
						    (_3, Col)
					    in  call 'erlang':'=<'
						    (_13, _2)
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false'
				    in  let <_16> =
					    try
						let <_15> =
						    call 'erlang':'div'
							(_2, 2)
						in  call 'erlang':'=<'
							(Col, _15)
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false'
					in  call 'erlang':'or'
						(_14, _16) ->
				  let <_18> =
				      case %% Line 1061
					   Nl of
					%% Line 1062
					<'true'> when 'true' ->
					    0
					%% Line 1063
					<'false'> when 'true' ->
					    _5
					( <_17> when 'true' ->
					      %% Line 1061
					      primop 'match_fail'
						  ({'case_clause',_17})
					  -| ['compiler_generated'] )
				      end
				  in  %% Line 1065
				      {Col,_18}
			      %% Line 1066
			      <> when 'true' ->
				  %% Line 1067
				  call 'erlang':'throw'
				      ('no_good')
			    end
'cind_list'/7 =
    %% Line 1070
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <{'dots',_18,_19,_20},_X_Col0,_X_Ll,_X_M,Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 1071
	      Ind
	  %% Line 1072
	  <[E|Es],Col0,Ll,M,Ind,LD,W> when 'true' ->
	      let <_7> =
		  apply %% Line 1073
			'last_depth'/2
		      (%% Line 1073
		       Es, %% Line 1073
			   LD)
	      in  let <WE> =
		      apply %% Line 1073
			    'cind_element'/7
			  (%% Line 1073
			   E, %% Line 1073
			      Col0, %% Line 1073
				    Ll, %% Line 1073
					M, %% Line 1073
					   Ind, _7, %% Line 1073
						    W)
		  in  let <_10> =
			  call %% Line 1074
			       'erlang':%% Line 1074
					'+'
			      (%% Line 1074
			       Col0, %% Line 1074
				     WE)
		      in  let <_9> =
			      call %% Line 1074
				   'erlang':%% Line 1074
					    '+'
				  (%% Line 1074
				   W, %% Line 1074
				      WE)
			  in  %% Line 1074
			      apply 'cind_tail'/8
				  (Es, Col0, _10, Ll, M, Ind, LD, _9)
	  ( <_17,_16,_15,_14,_13,_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_17,_16,_15,_14,_13,_12,_11})
		  -| [{'function_name',{'cind_list',7}}] )
	    -| ['compiler_generated'] )
	end
'cind_tail'/8 =
    %% Line 1076
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <[],_X_Col0,_X_Col,_X_Ll,_X_M,Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 1077
	      Ind
	  %% Line 1078
	  <[E = {_60,Len,_61,_62}|Es],Col0,Col,Ll,M,Ind,LD,W> when 'true' ->
	      let <LD1> =
		  apply %% Line 1079
			'last_depth'/2
		      (%% Line 1079
		       Es, %% Line 1079
			   LD)
	      in  let <ELen> =
		      call %% Line 1080
			   'erlang':%% Line 1080
				    '+'
			  (%% Line 1080
			   1, %% Line 1080
			      Len)
		  in  %% Line 1081
		      case <> of
			%% Line 1082
			<>
			    when let <_21> =
				  try
				      let <_10> =
					  call 'erlang':'=:='
					      (LD1, 0)
				      in  let <_12> =
					      call 'erlang':'+'
						  (ELen, 1)
					  in  let <_11> =
						  call 'erlang':'-'
						      (Ll, Col)
					      in  let <_13> =
						      call 'erlang':'<'
							  (_12, _11)
						  in  let <_14> =
							  call 'erlang':'+'
							      (W, ELen)
						      in  let <_15> =
							      call 'erlang':'+'
								  (_14, 1)
							  in  let <_16> =
								  call 'erlang':'=<'
								      (_15, M)
							      in  let <_17> =
								      call 'erlang':'element'
									  (1, E)
								  in  let <_18> =
									  call 'erlang':'is_list'
									      (_17)
								      in  let <_19> =
									      call 'erlang':'and'
										  (_16, _18)
									  in  let <_20> =
										  call 'erlang':'and'
										      (_13, _19)
									      in  call 'erlang':'and'
										      (_10, _20)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
			      in  let <_33> =
				      try
					  let <_22> =
					      call %% Line 1083
						   'erlang':%% Line 1083
							    '>'
						  (%% Line 1083
						   LD1, %% Line 1083
							0)
					  in  let <_23> =
						  call %% Line 1083
						       'erlang':%% Line 1083
								'-'
						      (%% Line 1083
						       Ll, %% Line 1083
							   Col)
					      in  let <_24> =
						      call %% Line 1083
							   'erlang':%% Line 1083
								    '-'
							  (_23, %% Line 1083
								LD1)
						  in  let <_25> =
							  call %% Line 1083
							       'erlang':%% Line 1083
									'<'
							      (%% Line 1083
							       ELen, _24)
						      in  let <_26> =
							      call %% Line 1083
								   'erlang':%% Line 1083
									    '+'
								  (%% Line 1083
								   W, %% Line 1083
								      ELen)
							  in  let <_27> =
								  call %% Line 1083
								       'erlang':%% Line 1083
										'+'
								      (_26, %% Line 1083
									    LD1)
							      in  let <_28> =
								      call %% Line 1083
									   'erlang':%% Line 1083
										    '=<'
									  (_27, %% Line 1083
										M)
								  in  let <_29> =
									  call %% Line 1083
									       'erlang':%% Line 1083
											'element'
									      (%% Line 1083
									       1, %% Line 1083
										  E)
								      in  let <_30> =
									      call %% Line 1083
										   'erlang':%% Line 1083
											    'is_list'
										  (_29)
									  in  let <_31> =
										  call %% Line 1083
										       'erlang':%% Line 1083
												'and'
										      (_28, _30)
									      in  let <_32> =
										      call %% Line 1083
											   'erlang':%% Line 1083
												    'and'
											  (_25, _31)
										  in  %% Line 1083
										      call 'erlang':'and'
											  (_22, _32)
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false'
				  in  call 'erlang':'or'
					  (_21, _33) ->
			    let <_35> =
				call %% Line 1084
				     'erlang':%% Line 1084
					      '+'
				    (%% Line 1084
				     Col, %% Line 1084
					  ELen)
			    in  let <_34> =
				    call %% Line 1084
					 'erlang':%% Line 1084
						  '+'
					(%% Line 1084
					 W, %% Line 1084
					    ELen)
				in  %% Line 1084
				    apply 'cind_tail'/8
					(Es, Col0, _35, Ll, M, Ind, LD, _34)
			%% Line 1085
			<> when 'true' ->
			    let <WE> =
				apply %% Line 1086
				      'cind_element'/7
				    (%% Line 1086
				     E, %% Line 1086
					Col0, %% Line 1086
					      Ll, %% Line 1086
						  M, %% Line 1086
						     Ind, %% Line 1086
							  LD1, %% Line 1086
							       0)
			    in  let <_37> =
				    call %% Line 1087
					 'erlang':%% Line 1087
						  '+'
					(%% Line 1087
					 Col0, %% Line 1087
					       WE)
				in  %% Line 1087
				    apply 'cind_tail'/8
					(Es, Col0, _37, Ll, M, Ind, LD, WE)
		      end
	  %% Line 1089
	  <{'dots',_63,_64,_65},_X_Col0,_X_Col,_X_Ll,_X_M,Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 1090
	      Ind
	  %% Line 1091
	  <E = {_66,Len,_67,_68},_X_Col0,Col,Ll,M,Ind,LD,W>
	      when %% Line 1092
		try
		    let <_41> =
			call 'erlang':'+'
			    (Len, 1)
		    in  let <_39> =
			    call 'erlang':'-'
				(Ll, Col)
			in  let <_38> =
				call 'erlang':'+'
				    (LD, 1)
			    in  let <_40> =
				    call 'erlang':'-'
					(_39, _38)
				in  let <_42> =
					call 'erlang':'<'
					    (_41, _40)
				    in  let <_44> =
					    call %% Line 1093
						 'erlang':%% Line 1093
							  '+'
						(%% Line 1093
						 Len, %% Line 1093
						      1)
					in  let <_45> =
						call %% Line 1093
						     'erlang':%% Line 1093
							      '+'
						    (_44, %% Line 1093
							  W)
					    in  let <_43> =
						    call %% Line 1093
							 'erlang':%% Line 1093
								  '+'
							(%% Line 1093
							 LD, %% Line 1093
							     1)
						in  let <_46> =
							call %% Line 1093
							     'erlang':%% Line 1093
								      '+'
							    (_45, _43)
						    in  let <_47> =
							    call %% Line 1093
								 'erlang':%% Line 1093
									  '=<'
								(_46, %% Line 1093
								      M)
							in  let <_48> =
								call %% Line 1094
								     'erlang':%% Line 1094
									      'element'
								    (%% Line 1094
								     1, %% Line 1094
									E)
							    in  let <_49> =
								    call %% Line 1094
									 'erlang':%% Line 1094
										  'is_list'
									(_48)
								in  let <_50> =
									call 'erlang':'and'
									    (_47, _49)
								    in  call 'erlang':'and'
									    (_42, _50)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1095
	      Ind
	  %% Line 1096
	  <E,_X_Col0,Col,Ll,M,Ind,LD,_X_W> when 'true' ->
	      let <_51> =
		  call %% Line 1097
		       'erlang':%% Line 1097
				'+'
		      (%% Line 1097
		       LD, %% Line 1097
			   1)
	      in  %% Line 1097
		  apply 'cind'/7
		      (E, Col, Ll, M, Ind, _51, 0)
	end
'cind_element'/7 =
    %% Line 1099
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <E = {_23,Len,_24,_25},Col,Ll,M,_X_Ind,LD,W>
	      when %% Line 1100
		try
		    let <_7> =
			call 'erlang':'-'
			    (Ll, Col)
		    in  let <_8> =
			    call 'erlang':'-'
				(_7, LD)
			in  let <_9> =
				call 'erlang':'<'
				    (Len, _8)
			    in  let <_10> =
				    call 'erlang':'+'
					(Len, W)
				in  let <_11> =
					call 'erlang':'+'
					    (_10, LD)
				    in  let <_12> =
					    call 'erlang':'=<'
						(_11, M)
					in  let <_13> =
						call 'erlang':'element'
						    (1, E)
					    in  let <_14> =
						    call 'erlang':'is_list'
							(_13)
						in  let <_15> =
							call 'erlang':'and'
							    (_12, _14)
						    in  call 'erlang':'and'
							    (_9, _15)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1101
	      Len
	  %% Line 1102
	  <E,Col,Ll,M,Ind,LD,W> when 'true' ->
	      do  %% Line 1103
		  apply 'cind'/7
		      (E, Col, Ll, M, Ind, LD, W)
		  %% Line 1104
		  Ll
	end
'last_depth'/2 =
    %% Line 1106
    fun (_0,_1) ->
	case <_0,_1> of
	  <[_4|_5],_X_LD> when 'true' ->
	      %% Line 1107
	      0
	  %% Line 1108
	  <_6,LD> when 'true' ->
	      %% Line 1109
	      call 'erlang':'+'
		  (LD, 1)
	end
'while_fail'/3 =
    %% Line 1111
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[],_X_F,V> when 'true' ->
	      %% Line 1112
	      V
	  %% Line 1113
	  <[A|As],F,V> when 'true' ->
	      %% Line 1114
	      try
		  apply F
		      (A)
	      of <_3> ->
		  _3
	      catch <_6,_5,_4> ->
		  case <_6,_5,_4> of
		    <( 'throw'
		       -| ['compiler_generated'] ),_10,_11> when 'true' ->
			apply 'while_fail'/3
			    (As, F, V)
		    ( <_12,_13,_14> when 'true' ->
			  primop 'raise'
			      (_14, _13)
		      -| ['compiler_generated'] )
		  end
	  ( <_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7})
		  -| [{'function_name',{'while_fail',3}}] )
	    -| ['compiler_generated'] )
	end
'indent'/1 =
    %% Line 1117
    fun (_0) ->
	case _0 of
	  <N>
	      when let <_1> =
		    call 'erlang':'is_integer'
			(_0)
		in  let <_2> =
			call 'erlang':'>'
			    (_0, 0)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      let <_3> =
		  call %% Line 1118
		       'erlang':%% Line 1118
				'-'
		      (%% Line 1118
		       N, %% Line 1118
			  1)
	      in  %% Line 1118
		  apply 'chars'/2
		      (32, _3)
	  ( <_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4})
		  -| [{'function_name',{'indent',1}}] )
	    -| ['compiler_generated'] )
	end
'indent'/2 =
    %% Line 1121
    fun (_0,_1) ->
	case <_0,_1> of
	  <1,Ind> when 'true' ->
	      %% Line 1122
	      [32|Ind]
	  %% Line 1123
	  <4,Ind> when 'true' ->
	      %% Line 1125
	      [[32|[32]]|[[32|[32]]|Ind]]
	  %% Line 1126
	  <N,Ind>
	      when let <_3> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_4> =
			call 'erlang':'>'
			    (N, 0)
		    in  call 'erlang':'and'
			    (_3, _4) ->
	      let <_5> =
		  apply %% Line 1127
			'chars'/2
		      (%% Line 1127
		       32, %% Line 1127
			   N)
	      in  %% Line 1127
		  [_5|Ind]
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'indent',2}}] )
	    -| ['compiler_generated'] )
	end
'chars'/2 =
    %% Line 1130
    fun (_0,_1) ->
	case <_0,_1> of
	  <_X_C,0> when 'true' ->
	      %% Line 1131
	      []
	  %% Line 1132
	  <C,2> when 'true' ->
	      %% Line 1133
	      [C|[C|[]]]
	  %% Line 1134
	  <C,3> when 'true' ->
	      %% Line 1135
	      [C|[C|[C|[]]]]
	  %% Line 1136
	  <C,N>
	      when try
		    let <_2> =
			call 'erlang':'band'
			    (N, 1)
		    in  call 'erlang':'=:='
			    (_2, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_3> =
		  call %% Line 1137
		       'erlang':%% Line 1137
				'bsr'
		      (%% Line 1137
		       N, %% Line 1137
			  1)
	      in  let <S> =
		      apply %% Line 1137
			    'chars'/2
			  (%% Line 1137
			   C, _3)
		  in  %% Line 1138
		      [S|S]
	  %% Line 1139
	  <C,N> when 'true' ->
	      let <_5> =
		  call %% Line 1140
		       'erlang':%% Line 1140
				'bsr'
		      (%% Line 1140
		       N, %% Line 1140
			  1)
	      in  let <S> =
		      apply %% Line 1140
			    'chars'/2
			  (%% Line 1140
			   C, _5)
		  in  %% Line 1141
		      [C|[S|S]]
	end
'get_option'/3 =
    %% Line 1143
    fun (_0,_1,_2) ->
	%% Line 1144
	case call 'lists':'keyfind'
		 (_0, 1, _1) of
	  %% Line 1145
	  <'false'> when 'true' ->
	      _2
	  %% Line 1146
	  <{_7,Value}>
	      when call 'erlang':'=:='
		    (_7,
		     _0) ->
	      Value
	  %% Line 1147
	  <_8> when 'true' ->
	      _2
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('io_lib_pretty')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('io_lib_pretty', _0)
end