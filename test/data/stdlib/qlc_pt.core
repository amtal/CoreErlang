module 'qlc_pt' ['module_info'/0,
		 'module_info'/1,
		 'parse_transform'/2,
		 'transform_expression'/2,
		 'transform_from_evaluator'/2]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[113|[108|[99|[95|[112|[116|[46|[101|[114|[108]]]]]]]]]]]]]],1}],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[47|[117|[115|[114|[47|[108|[111|[99|[97|[108|[47|[67|[101|[108|[108|[97|[114|[47|[101|[114|[108|[97|[110|[103|[47|[50|[50|[46|[50|[47|[108|[105|[98|[47|[101|[114|[108|[97|[110|[103|[47|[108|[105|[98|[47|[115|[116|[100|[108|[105|[98|[45|[51|[46|[49|[49|[47|[105|[110|[99|[108|[117|[100|[101|[47|[109|[115|[95|[116|[114|[97|[110|[115|[102|[111|[114|[109|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 28
		'file' =
		    %% Line 28
		    [{[115|[114|[99|[47|[113|[108|[99|[95|[112|[116|[46|[101|[114|[108]]]]]]]]]]]]]],28}],
		%% Line 38
		'record' =
		    %% Line 38
		    [{'qlc_lc',[{'record_field',39,{'atom',39,'lc'}}|[{'record_field',40,{'atom',40,'opt'}}]]}],
		%% Line 43
		'record' =
		    %% Line 43
		    [{'state',[{'record_field',43,{'atom',43,'imp'}}|[{'record_field',44,{'atom',44,'overridden'}}|[{'record_field',45,{'atom',45,'maxargs'}}|[{'record_field',46,{'atom',46,'records'}}|[{'record_field',47,{'atom',47,'xwarnings'},{'nil',47}}|[{'record_field',48,{'atom',48,'intro_vars'}}|[{'record_field',49,{'atom',49,'node_info'}}]]]]]]]}],
		%% Line 70
		'spec' =
		    %% Line 70
		    [{{'parse_transform',2},[{'type',70,'bounded_fun',[{'type',70,'fun',[{'type',70,'product',[{'var',70,'Forms'}|[{'var',70,'Options'}]]}|[{'var',70,'Forms2'}]]}|[[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'Forms'}|[{'type',71,'list',[{'type',71,'union',[{'remote_type',71,[{'atom',71,'erl_parse'}|[{'atom',71,'abstract_form'}|[[]]]]}|[{'remote_type',71,[{'atom',71,'erl_parse'}|[{'atom',71,'form_info'}|[[]]]]}]]}]}]]]]}|[{'type',72,'constraint',[{'atom',72,'is_subtype'}|[[{'var',72,'Forms2'}|[{'type',72,'list',[{'type',72,'union',[{'remote_type',72,[{'atom',72,'erl_parse'}|[{'atom',72,'abstract_form'}|[[]]]]}|[{'remote_type',72,[{'atom',72,'erl_parse'}|[{'atom',72,'form_info'}|[[]]]]}]]}]}]]]]}|[{'type',73,'constraint',[{'atom',73,'is_subtype'}|[[{'var',73,'Options'}|[{'type',73,'list',[{'var',73,'Option'}]}]]]]}|[{'type',74,'constraint',[{'atom',74,'is_subtype'}|[[{'var',74,'Option'}|[{'type',74,'union',[{'atom',74,'type_checker'}|[{'remote_type',74,[{'atom',74,'compile'}|[{'atom',74,'option'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 121
		'spec' =
		    %% Line 121
		    [{{'transform_from_evaluator',2},[{'type',121,'bounded_fun',[{'type',121,'fun',[{'type',121,'product',[{'var',121,'LC'}|[{'var',121,'Bs'}]]}|[{'var',121,'Return'}]]}|[[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'LC'}|[{'remote_type',122,[{'atom',122,'erl_parse'}|[{'atom',122,'abstract_expr'}|[[]]]]}]]]]}|[{'type',123,'constraint',[{'atom',123,'is_subtype'}|[[{'var',123,'Bs'}|[{'remote_type',123,[{'atom',123,'erl_eval'}|[{'atom',123,'binding_struct'}|[[]]]]}]]]]}|[{'type',124,'constraint',[{'atom',124,'is_subtype'}|[[{'var',124,'Return'}|[{'type',124,'union',[{'type',124,'tuple',[{'atom',124,'ok'}|[{'remote_type',124,[{'atom',124,'erl_parse'}|[{'atom',124,'abstract_expr'}|[[]]]]}]]}|[{'type',125,'tuple',[{'atom',125,'not_ok'}|[{'type',125,'tuple',[{'atom',125,'error'}|[{'type',125,'module',[]}|[{'ann_type',125,[{'var',125,'Reason'}|[{'type',125,'term',[]}]]}]]]}]]}]]}]]]]}]]]]]}]}],
		%% Line 131
		'spec' =
		    %% Line 131
		    [{{'transform_expression',2},[{'type',131,'bounded_fun',[{'type',131,'fun',[{'type',131,'product',[{'var',131,'LC'}|[{'var',131,'Bs'}]]}|[{'var',131,'Return'}]]}|[[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'LC'}|[{'remote_type',132,[{'atom',132,'erl_parse'}|[{'atom',132,'abstract_expr'}|[[]]]]}]]]]}|[{'type',133,'constraint',[{'atom',133,'is_subtype'}|[[{'var',133,'Bs'}|[{'remote_type',133,[{'atom',133,'erl_eval'}|[{'atom',133,'binding_struct'}|[[]]]]}]]]]}|[{'type',134,'constraint',[{'atom',134,'is_subtype'}|[[{'var',134,'Return'}|[{'type',134,'union',[{'type',134,'tuple',[{'atom',134,'ok'}|[{'remote_type',134,[{'atom',134,'erl_parse'}|[{'atom',134,'abstract_expr'}|[[]]]]}]]}|[{'type',135,'tuple',[{'atom',135,'not_ok'}|[{'type',135,'list',[{'type',135,'tuple',[{'atom',135,'error'}|[{'ann_type',135,[{'var',135,'Reason'}|[{'type',135,'term',[]}]]}]]}]}]]}]]}]]]]}]]]]]}]}],
		%% Line 230
		'record' =
		    %% Line 230
		    [{'qid',[{'record_field',230,{'atom',230,'lcid'}}|[{'record_field',230,{'atom',230,'no'}}]]}],
		%% Line 1659
		'record' =
		    %% Line 1659
		    [{'fstate',[{'record_field',1659,{'atom',1659,'state'}}|[{'record_field',1659,{'atom',1659,'bind_fun'}}|[{'record_field',1659,{'atom',1659,'imported'}}]]]}],
		%% Line 1982
		'record' =
		    %% Line 1982
		    [{'bind',[{'record_field',1982,{'atom',1982,'var'}}|[{'record_field',1982,{'atom',1982,'value'}}|[{'record_field',1982,{'atom',1982,'op'}}]]]}]]
'parse_transform'/2 =
    %% Line 76
    fun (_0,_1) ->
	let <Imported> =
	    apply %% Line 78
		  'is_qlc_q_imported'/1
		(_0)
	in  %% Line 79
	    case apply 'initiate'/2
		     (_0, Imported) of
	      <{Forms,FormsNoShadows,State}> when 'true' ->
		  %% Line 80
		  ( case State of
		      ( <( {'state',_38,_39,_40,_41,_42,_43,_rec0}
			   -| ['compiler_generated'] )> when 'true' ->
			    %% Line 81
			    letrec
				'after$^1'/0 =
				    fun () ->
					let <_45> =
					    call %% Line 118
						 'ets':%% Line 118
						       'delete'
						(_rec0)
					in  %% Line 118
					    case _45 of
					      <'true'> when 'true' ->
						  ( _45
						    -| ['compiler_generated'] )
					      ( <_31> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_31})
						-| ['compiler_generated'] )
					    end
			    in  try
				    %% Line 82
				    case apply 'called_from_type_checker'/1
					     (_1) of
				      %% Line 83
				      <'true'> when 'true' ->
					  let <L> =
					      apply %% Line 86
						    'anno0'/0
						  ()
					  in  %% Line 87
					      case apply 'abstr'/2
						       ({'qlc_lc','undefined','undefined'}, L) of
						<{'tuple',_46,Fs0}> when 'true' ->
						    let <F> =
							fun (_13,_12,_11) ->
							    let <Init> =
								apply %% Line 89
								      'simple'/4
								    (%% Line 89
								     L, %% Line 89
									'V', _12, %% Line 89
										  L)
							    in  let <_10> =
								    apply %% Line 90
									  'set_field'/3
									(%% Line 90
									 2, %% Line 90
									    Fs0, %% Line 90
										 Init)
								in  %% Line 90
								    {{'tuple',L,_10},_11}
						    in  %% Line 92
							case apply 'qlc_mapfold'/4
								 (F, 'ok', Forms, State) of
							  <{Forms1,'ok'}> when 'true' ->
							      %% Line 93
							      Forms1
							  ( <_18> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_18})
							    -| ['compiler_generated'] )
							end
						( <_8> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_8})
						  -| ['compiler_generated'] )
					      end
				      %% Line 94
				      <'false'> when 'true' ->
					  %% Line 95
					  case %% Line 96
					       apply 'compile_messages'/4
						   (Forms, FormsNoShadows, _1, State) of
					    %% Line 98
					    <{[],Warnings}> when 'true' ->
						%% Line 101
						case %% Line 102
						     apply 'transform'/2
							 (FormsNoShadows, State) of
						  <{NewForms,State1}> when 'true' ->
						      %% Line 103
						      ( case State1 of
							  ( <( {'state',_47,_48,_49,_50,_rec1,_51,_52}
							       -| ['compiler_generated'] )> when 'true' ->
								%% Line 104
								case apply 'no_duplicates'/5
									 (NewForms, [], Warnings, _rec1, _1) of
								  <{[],WForms}> when 'true' ->
								      let <_25> =
									  apply %% Line 106
										'restore_locations'/2
									      (%% Line 106
									       WForms, %% Line 106
										       State)
								      in  let <_24> =
									      apply %% Line 107
										    'restore_anno'/2
										  (%% Line 107
										   NewForms, _rec0)
									  in  %% Line 106
									      call 'erlang':'++'
										  (_25, _24)
								  ( <_23> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_23})
								    -| ['compiler_generated'] )
								end
							    -| ['compiler_generated'] )
							  ( <_53> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','state'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  ( <_19> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_19})
						    -| ['compiler_generated'] )
						end
					    %% Line 108
					    <{Errors,Warnings}> when 'true' ->
						%% Line 111
						case apply 'no_duplicates'/5
							 (FormsNoShadows, Errors, %% Line 112
										  Warnings, %% Line 112
											    [], _1) of
						  <{EForms,WForms}> when 'true' ->
						      let <_27> =
							  call %% Line 114
							       'erlang':%% Line 114
									'++'
							      (%% Line 114
							       EForms, %% Line 114
								       WForms)
						      in  let <_28> =
							      apply %% Line 114
								    'restore_locations'/2
								  (_27, %% Line 114
									State)
							  in  %% Line 114
							      call 'erlang':'++'
								  (_28, _0)
						  ( <_26> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_26})
						    -| ['compiler_generated'] )
						end
					    ( <_29> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_29})
					      -| ['compiler_generated'] )
					  end
				      ( <_30> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_30})
					-| ['compiler_generated'] )
				    end
				of <_32> ->
				    do  ( apply 'after$^1'/0
					      ()
					  -| ['compiler_generated'] )
					_32
				catch <_35,_34,_33> ->
				    do  ( apply 'after$^1'/0
					      ()
					  -| ['compiler_generated'] )
					primop 'raise'
					    (_33, _34)
			-| ['compiler_generated'] )
		      ( <_44> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      ( <_3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_3})
		-| ['compiler_generated'] )
	    end
'transform_from_evaluator'/2 =
    %% Line 127
    fun (_0,_1) ->
	%% Line 129
	apply 'transform_expression'/3
	    (_0, _1, 'false')
'transform_expression'/2 =
    %% Line 137
    fun (_0,_1) ->
	%% Line 138
	apply 'transform_expression'/3
	    (_0, _1, 'true')
'called_from_type_checker'/1 =
    %% Line 144
    fun (_0) ->
	%% Line 145
	call 'lists':'member'
	    ('type_checker', _0)
'transform_expression'/3 =
    %% Line 147
    fun (_0,_1,_2) ->
	let <L> =
	    apply %% Line 148
		  'anno1'/0
		()
	in  let <_8> =
		letrec
		    'lc$^0'/1 =
			%% Line 149
			fun (_6) ->
			    case _6 of
			      <[{V,_X_Val}|_5]> when 'true' ->
				  let <_7> =
				      apply 'lc$^0'/1
					  (_5)
				  in  ( [{'var',L,V}|_7]
					-| ['compiler_generated'] )
			      ( <[_4|_5]> when 'true' ->
				    apply 'lc$^0'/1
					(_5)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_56> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_56})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  %% Line 149
		    apply 'lc$^0'/1
			(_1)
	    in  let <Ar> =
		    call %% Line 150
			 'erlang':%% Line 150
				  'length'
			(_8)
		in  let <F> =
			{%% Line 151
			 'function',%% Line 151
				    L,%% Line 151
				      'bar',%% Line 151
					    Ar,%% Line 151
					       [{'clause',L,_8,[],[{'call',L,{'remote',L,{'atom',L,'qlc'},{'atom',L,'q'}},[_0|[]]}|[]]}|[]]}
		    in  let <Forms0> =
			    [%% Line 152
			     {'attribute',L,'file',{[102|[111|[111]]],L}}|%% Line 153
									  [{'attribute',L,'module','foo'}|[F|[]]]]
			in  %% Line 154
			    case apply 'initiate'/2
				     (Forms0, 'false') of
			      <{Forms,FormsNoShadows,State}> when 'true' ->
				  %% Line 155
				  ( case State of
				      ( <( {'state',_37,_38,_39,_40,_41,_42,_rec2}
					   -| ['compiler_generated'] )> when 'true' ->
					    %% Line 157
					    letrec
						'after$^1'/0 =
						    fun () ->
							let <_44> =
							    call %% Line 173
								 'ets':%% Line 173
								       'delete'
								(_rec2)
							in  %% Line 173
							    case _44 of
							      <'true'> when 'true' ->
								  ( _44
								    -| ['compiler_generated'] )
							      ( <_29> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_29})
								-| ['compiler_generated'] )
							    end
					    in  try
						    try
							apply 'compile_messages'/4
							    (Forms, FormsNoShadows, [], State)
						    of <_18> ->
							case _18 of
							  %% Line 158
							  <{Errors0,_X_Warnings}> when 'true' ->
							      %% Line 159
							      case apply 'restore_locations'/2
								       (Errors0, State) of
								%% Line 160
								<[]> when 'true' ->
								    %% Line 161
								    case apply 'transform'/2
									     (FormsNoShadows, State) of
								      <{NewForms,_X_State1}> when 'true' ->
									  let <NewForms1> =
									      apply %% Line 162
										    'restore_anno'/2
										  (%% Line 162
										   NewForms, _rec2)
									  in  %% Line 163
									      case %% Line 164
										   call 'lists':'last'
										       (NewForms1) of
										<{'function',_45,'bar',_46,[{'clause',_47,_48,[],[NF|[]]}|[]]}>
										    when let <_53> =
											  call 'erlang':'=:='
											      (_45, L)
										      in  let <_51> =
											      call 'erlang':'=:='
												  (_46, Ar)
											  in  let <_49> =
												  call 'erlang':'=:='
												      (_47, L)
											      in  let <_50> =
												      call 'erlang':'=:='
													  (_48, _8)
												  in  let <_52> =
													  call 'erlang':'and'
													      (_49, _50)
												      in  let <_54> =
													      call 'erlang':'and'
														  (_51, _52)
													  in  call 'erlang':'and'
														  (_53, _54) ->
										    %% Line 165
										    {'ok',NF}
										( <_21> when 'true' ->
										      primop 'match_fail'
											  ({'badmatch',_21})
										  -| ['compiler_generated'] )
									      end
								      ( <_19> when 'true' ->
									    primop 'match_fail'
										({'badmatch',_19})
									-| ['compiler_generated'] )
								    end
								%% Line 166
								<Errors>
								    when ( call 'erlang':'=:='
									    (_2,
									     'true')
									-| ['compiler_generated'] ) ->
								    let <_22> =
									apply %% Line 167
									      'mforms'/2
									    (%% Line 167
									     'error', %% Line 167
										      Errors)
								    in  %% Line 167
									{'not_ok',_22}
								%% Line 168
								<Errors> when 'true' ->
								    %% Line 169
								    case apply 'mforms'/2
									     ('error', Errors) of
								      <[{'error',Reason}|_55]> when 'true' ->
									  %% Line 170
									  {'not_ok',{'error','qlc',Reason}}
								      ( <_23> when 'true' ->
									    primop 'match_fail'
										({'badmatch',_23})
									-| ['compiler_generated'] )
								    end
							      end
							  ( <_25> when 'true' ->
								primop 'match_fail'
								    ({'try_clause',_25})
							    -| ['compiler_generated'] )
							end
						    catch <_28,_27,_26> ->
							primop 'raise'
							    (_26, _27)
						of <_30> ->
						    do  ( apply 'after$^1'/0
							      ()
							  -| ['compiler_generated'] )
							_30
						catch <_33,_32,_31> ->
						    do  ( apply 'after$^1'/0
							      ()
							  -| ['compiler_generated'] )
							primop 'raise'
							    (_31, _32)
					-| ['compiler_generated'] )
				      ( <_43> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','state'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      ( <_13> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_13})
				-| ['compiler_generated'] )
			    end
'initiate'/2 =
    %% Line 182
    fun (_0,_1) ->
	let <NodeInfo> =
	    call %% Line 183
		 'ets':%% Line 183
		       'new'
		(%% Line 183
		 'qlc', %% Line 183
			[])
	in  %% Line 184
	    case call 'ets':'insert'
		     (NodeInfo, {'var_n',0}) of
	      <'true'> when 'true' ->
		  do  %% Line 185
		      apply 'exclude_integers_from_unique_line_numbers'/2
			  (_0, NodeInfo)
		      let <IsOverridden> =
			  apply %% Line 188
				'set_up_overridden'/1
			      (_0)
		      in  let <_5> =
			      apply %% Line 192
				    'record_attributes'/1
				  (_0)
			  in  let <State0> =
				  {%% Line 189
				   'state',_1,%% Line 190
					      IsOverridden,%% Line 191
							   20,_5,[],'undefined',%% Line 193
										NodeInfo}
			      in  let <Forms> =
				      apply %% Line 194
					    'save_anno'/2
					  (_0, %% Line 194
					       NodeInfo)
				  in  let <FormsNoShadows> =
					  apply %% Line 195
						'no_shadows'/2
					      (%% Line 195
					       Forms, %% Line 195
						      State0)
				      in  let <IntroVars> =
					      apply %% Line 196
						    'intro_variables'/2
						  (%% Line 196
						   FormsNoShadows, %% Line 196
								   State0)
					  in  let <_12> =
						  call %% Line 197
						       'erlang':%% Line 197
								'setelement'
						      (%% Line 197
						       7, %% Line 197
							  State0, %% Line 197
								  IntroVars)
					      in  %% Line 198
						  {Forms,FormsNoShadows,_12}
	      ( <_3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_3})
		-| ['compiler_generated'] )
	    end
'exclude_integers_from_unique_line_numbers'/2 =
    %% Line 202
    fun (_0,_1) ->
	let <Integers> =
	    apply %% Line 203
		  'find_integers'/1
		(_0)
	in  let <_5> =
		fun (_3) ->
		    %% Line 204
		    call 'ets':'insert'
			(_1, {_3})
	    in  %% Line 204
		call 'lists':'foreach'
		    (_5, Integers)
'find_integers'/1 =
    %% Line 206
    fun (_0) ->
	let <F> =
	    fun (_6) ->
		let <_3> =
		    fun (_1) ->
			%% Line 207
			_6
		in  let <Fs1> =
			apply %% Line 208
			      'map_anno'/2
			    (_3, _0)
		    in  let <_5> =
			    apply %% Line 209
				  'integers'/2
				(%% Line 209
				 Fs1, %% Line 209
				      [])
			in  %% Line 209
			    call 'ordsets':'from_list'
				(_5)
	in  let <_11> =
		apply %% Line 211
		      'anno0'/0
		    ()
	    in  let <_12> =
		    apply %% Line 211
			  F
			(_11)
		in  let <_9> =
			apply %% Line 211
			      'anno1'/0
			    ()
		    in  let <_10> =
			    apply %% Line 211
				  F
				(_9)
			in  let <_13> =
				call %% Line 211
				     'ordsets':%% Line 211
					       'intersection'
				    (_12, _10)
			    in  %% Line 211
				call 'ordsets':'to_list'
				    (_13)
'integers'/2 =
    %% Line 213
    fun (_0,_1) ->
	case <_0,_1> of
	  <[E|Es],L> when 'true' ->
	      let <_2> =
		  apply %% Line 214
			'integers'/2
		      (%% Line 214
		       E, %% Line 214
			  L)
	      in  %% Line 214
		  apply 'integers'/2
		      (Es, _2)
	  %% Line 215
	  <T,L>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_3> =
		  call %% Line 216
		       'erlang':%% Line 216
				'tuple_to_list'
		      (%% Line 216
		       T)
	      in  %% Line 216
		  apply 'integers'/2
		      (_3, L)
	  %% Line 217
	  <I,L>
	      when let <_4> =
		    call 'erlang':'is_integer'
			(I)
		in  let <_5> =
			call 'erlang':'>'
			    (I, 0)
		    in  call 'erlang':'and'
			    (_4, _5) ->
	      %% Line 218
	      [I|L]
	  %% Line 219
	  <_8,L> when 'true' ->
	      %% Line 220
	      L
	end
'mforms'/2 =
    %% Line 232
    fun (_0,_1) ->
	let <_9> =
	    letrec
		'lc$^0'/1 =
		    %% Line 233
		    fun (_6) ->
			case _6 of
			  <[{_X_File,Ms}|_3]> when 'true' ->
			      ( letrec
				    'lc$^1'/1 =
					fun (_7) ->
					    case _7 of
					      <[M|_5]> when 'true' ->
						  let <_8> =
						      apply 'lc$^1'/1
							  (_5)
						  in  ( [{_0,M}|_8]
							-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  apply 'lc$^0'/1
						      (_3)
					      ( <_12> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_12})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^1'/1
					(Ms)
				-| ['list_comprehension'] )
			  ( <[_2|_3]> when 'true' ->
				apply 'lc$^0'/1
				    (_3)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_13> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_13})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 233
		apply 'lc$^0'/1
		    (_1)
	in  %% Line 233
	    call 'lists':'sort'
		(_9)
'no_duplicates'/5 =
    %% Line 238
    fun (_0,_1,_2,_3,_4) ->
	let <_11> =
	    letrec
		'lc$^0'/1 =
		    %% Line 244
		    fun (_8) ->
			case _8 of
			  <[W = {_X_File,[{_43,'qlc',Tag}|[]]}|_6]> when 'true' ->
			      %% Line 246
			      ( case call 'lists':'member'
					 (Tag, ['nomatch_pattern'|['nomatch_filter']]) of
				  <'false'> when 'true' ->
				      let <_9> =
					  apply 'lc$^0'/1
					      (_6)
				      in  ( [W|_9]
					    -| ['compiler_generated'] )
				  ( <'true'> when 'true' ->
					apply 'lc$^0'/1
					    (_6)
				    -| ['compiler_generated'] )
				  ( <_cor_variable> when 'true' ->
					call 'erlang':'error'
					    ('badarg')
				    -| ['compiler_generated'] )
				end
				-| ['list_comprehension'] )
			  ( <[_5|_6]> when 'true' ->
				apply 'lc$^0'/1
				    (_6)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_44> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_44})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 244
		apply 'lc$^0'/1
		    (_3)
	in  let <_26> =
		apply %% Line 247
		      'mforms'/1
		    (_2)
	    in  let <_18> =
		    letrec
			'lc$^1'/1 =
			    %% Line 253
			    fun (_16) ->
				case _16 of
				  <[{File,[{L,'qlc',M}|[]]}|_14]>
				      when %% Line 254
					call 'erlang':'=:='
					    (M,
					     'nomatch_filter') ->
				      let <_17> =
					  apply 'lc$^1'/1
					      (_14)
				      in  ( [{File,[{L,'sys_core_fold','nomatch_guard'}|[]]}|_17]
					    -| ['compiler_generated'] )
				  ( <[_13|_14]> when 'true' ->
					apply 'lc$^1'/1
					    (_14)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_45> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_45})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_15> =
			    apply %% Line 253
				  'mforms'/1
				(_11)
			in  %% Line 253
			    apply 'lc$^1'/1
				(_15)
		in  let <_25> =
			letrec
			    'lc$^2'/1 =
				%% Line 249
				fun (_22) ->
				    case _22 of
				      <[{File,[{L,'qlc',M}|[]]}|_20]> when 'true' ->
					  %% Line 250
					  ( case call 'lists':'member'
						     (M, ['nomatch_pattern'|['nomatch_filter']]) of
					      <'true'> when 'true' ->
						  let <_23> =
						      apply 'lc$^2'/1
							  (_20)
						  in  ( [{File,[{L,'v3_core','nomatch'}|[]]}|_23]
							-| ['compiler_generated'] )
					      ( <'false'> when 'true' ->
						    apply 'lc$^2'/1
							(_20)
						-| ['compiler_generated'] )
					      ( <_24> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_24})
						-| ['compiler_generated'] )
					    end
					    -| ['list_comprehension'] )
				      ( <[_19|_20]> when 'true' ->
					    apply 'lc$^2'/1
						(_20)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  _18
				      ( <_46> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_46})
					      -| [{'function_name',{'lc$^2',1}}] )
					-| ['compiler_generated'] )
				    end
			in  let <_21> =
				apply %% Line 249
				      'mforms'/1
				    (_11)
			    in  %% Line 249
				apply 'lc$^2'/1
				    (_21)
		    in  let <Warnings1> =
			    call %% Line 247
				 'erlang':%% Line 247
					  '--'
				(_26, _25)
			in  let <Warnings> =
				call %% Line 255
				     'erlang':%% Line 255
					      '++'
				    (%% Line 255
				     Warnings1, _11)
			    in  %% Line 256
				case apply 'compile_forms'/2
					 (_0, _4) of
				  <{Es1,Ws1}> when 'true' ->
				      let <_31> =
					  apply %% Line 257
						'mforms'/1
					      (_1)
				      in  let <_30> =
					      apply %% Line 257
						    'mforms'/1
						  (%% Line 257
						   Es1)
					  in  let <Es> =
						  call %% Line 257
						       'erlang':%% Line 257
								'--'
						      (_31, _30)
					      in  let <_34> =
						      apply %% Line 258
							    'mforms'/1
							  (%% Line 258
							   Warnings)
						  in  let <_33> =
							  apply %% Line 258
								'mforms'/1
							      (%% Line 258
							       Ws1)
						      in  let <Ws> =
							      call %% Line 258
								   'erlang':%% Line 258
									    '--'
								  (_34, _33)
							  in  let <_37> =
								  apply %% Line 259
									'mforms2'/2
								      (%% Line 259
								       'error', %% Line 259
										Es)
							      in  let <_36> =
								      apply %% Line 259
									    'mforms2'/2
									  (%% Line 259
									   'warning', %% Line 259
										      Ws)
								  in  %% Line 259
								      {_37,_36}
				  ( <_29> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_29})
				    -| ['compiler_generated'] )
				end
'mforms'/1 =
    %% Line 261
    fun (_0) ->
	let <_8> =
	    letrec
		'lc$^0'/1 =
		    %% Line 262
		    fun (_5) ->
			case _5 of
			  <[{File,Ms}|_2]> when 'true' ->
			      ( letrec
				    'lc$^1'/1 =
					fun (_6) ->
					    case _6 of
					      <[M|_4]> when 'true' ->
						  let <_7> =
						      apply 'lc$^1'/1
							  (_4)
						  in  ( [{File,[M|[]]}|_7]
							-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  apply 'lc$^0'/1
						      (_2)
					      ( <_10> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_10})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^1'/1
					(Ms)
				-| ['list_comprehension'] )
			  ( <[_1|_2]> when 'true' ->
				apply 'lc$^0'/1
				    (_2)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_11> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_11})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 262
		apply 'lc$^0'/1
		    (_0)
	in  %% Line 262
	    call 'lists':'sort'
		(_8)
'mforms2'/2 =
    %% Line 264
    fun (_0,_1) ->
	let <Line> =
	    apply %% Line 265
		  'anno0'/0
		()
	in  let <_10> =
		fun (_8) ->
		    %% Line 266
		    case _8 of
		      <{File,Ms}> when 'true' ->
			  %% Line 268
			  ( letrec
				'lc$^0'/1 =
				    fun (_6) ->
					case _6 of
					  <[M|_5]> when 'true' ->
					      let <_7> =
						  apply 'lc$^0'/1
						      (_5)
					      in  ( [[{'attribute',Line,'file',{File,0}}|[{_0,M}|[]]]|_7]
						    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_15> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_15})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (Ms)
			    -| ['list_comprehension'] )
		      ( <_9> when 'true' ->
			    ( primop 'match_fail'
				  ({'function_clause',_9})
			      -| [{'function_name',{'-mforms2/2-fun-1-',1}}] )
			-| ['compiler_generated'] )
		    end
	    in  let <_3> =
		    call %% Line 269
			 'lists':%% Line 269
				 'sort'
			(_1)
		in  let <ML> =
			call %% Line 266
			     'lists':%% Line 266
				     'flatmap'
			    (_10, _3)
		    in  let <_12> =
			    call %% Line 270
				 'lists':%% Line 270
					 'sort'
				(%% Line 270
				 ML)
			in  %% Line 270
			    call 'lists':'flatten'
				(_12)
'restore_locations'/2 =
    %% Line 272
    fun (_0,_1) ->
	case <_0,_1> of
	  <[T|Ts],State> when 'true' ->
	      let <_2> =
		  apply %% Line 273
			'restore_locations'/2
		      (%% Line 273
		       T, %% Line 273
			  State)
	      in  let <_3> =
		      apply %% Line 273
			    'restore_locations'/2
			  (%% Line 273
			   Ts, %% Line 273
			       State)
		  in  %% Line 273
		      [_2|_3]
	  %% Line 274
	  <T,State>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_4> =
		  call %% Line 275
		       'erlang':%% Line 275
				'tuple_to_list'
		      (%% Line 275
		       T)
	      in  let <_5> =
		      apply %% Line 275
			    'restore_locations'/2
			  (_4, %% Line 275
			       State)
		  in  %% Line 275
		      call 'erlang':'list_to_tuple'
			  (_5)
	  %% Line 276
	  <I,State>
	      when call 'erlang':'>'
		    (I,
		     0) ->
	      %% Line 277
	      apply 'restore_loc'/2
		  (I, State)
	  %% Line 278
	  <T,_X_State> when 'true' ->
	      %% Line 279
	      T
	end
'is_qlc_q_imported'/1 =
    %% Line 281
    fun (_0) ->
	let <_8> =
	    letrec
		'lc$^0'/1 =
		    %% Line 282
		    fun (_5) ->
			case _5 of
			  <[{'attribute',_10,'import',{'qlc',FAs}}|_2]> when 'true' ->
			      ( letrec
				    'lc$^1'/1 =
					fun (_6) ->
					    case _6 of
					      <[{'q',1}|_4]> when 'true' ->
						  let <_7> =
						      apply 'lc$^1'/1
							  (_4)
						  in  ( [[]|_7]
							-| ['compiler_generated'] )
					      ( <[_3|_4]> when 'true' ->
						    apply 'lc$^1'/1
							(_4)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  apply 'lc$^0'/1
						      (_2)
					      ( <_11> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_11})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^1'/1
					(FAs)
				-| ['list_comprehension'] )
			  ( <[_1|_2]> when 'true' ->
				apply 'lc$^0'/1
				    (_2)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_12> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_12})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 282
		apply 'lc$^0'/1
		    (_0)
	in  %% Line 282
	    call 'erlang':'=/='
		(_8, [])
'record_attributes'/1 =
    %% Line 284
    fun (_0) ->
	%% Line 285
	( letrec
	      'lc$^0'/1 =
		  fun (_3) ->
		      case _3 of
			<[A = {'attribute',_6,'record',_X_D}|_2]> when 'true' ->
			    let <_4> =
				apply 'lc$^0'/1
				    (_2)
			    in  ( [A|_4]
				  -| ['compiler_generated'] )
			( <[_1|_2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_7> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_7})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_0)
	  -| ['list_comprehension'] )
'compile_messages'/4 =
    %% Line 293
    fun (_0,_1,_2,_3) ->
	let <BGenF> =
	    fun (_10,_9,_8,_7) ->
		%% Line 295
		case <_10,_9,_8,_7> of
		  <_X_QId,BGen = {'b_generate',Line,_X_P,_X_LE},GA,A> when 'true' ->
		      let <_4> =
			  apply %% Line 296
				'loc'/1
			      (%% Line 296
			       Line)
		      in  let <M> = {_4,%% Line 296
				  'qlc',%% Line 296
					'binary_generator'}
			  in  let <_6> =
				  call %% Line 297
				       'erlang':%% Line 297
						'get'
				      (%% Line 297
				       'qlc_current_file')
			      in  %% Line 297
				  {BGen,[{_6,[M|[]]}|GA],A}
		  %% Line 298
		  <_X_QId,Q,GA,A> when 'true' ->
		      %% Line 299
		      {Q,GA,A}
		end
	in  %% Line 301
	    case apply 'qual_fold'/5
		     (BGenF, [], [], _0, _3) of
	      <{_44,BGens}> when 'true' ->
		  let <GenForm> =
		      apply %% Line 302
			    'used_genvar_check'/2
			  (_1, _3)
		  in  %% Line 304
		      case apply 'compile_forms'/2
			       ([GenForm|[]], _2) of
			<{GEs,_45}> when 'true' ->
			    let <UsedGenVarMsgs> =
				apply %% Line 305
				      'used_genvar_messages'/2
				    (%% Line 305
				     GEs, _3)
			    in  %% Line 306
				( case _3 of
				    ( <( {'state',_46,_47,_48,_49,_50,_51,_rec4}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <WarnFun> =
					      fun (_26,_25,_24) ->
						  let <_23> =
						      apply %% Line 307
							    'lc_nodes'/2
							  (_25, _rec4)
						  in  %% Line 307
						      {_23,_24}
					  in  %% Line 308
					      case apply 'qlc_mapfold'/4
						       (WarnFun, 'ok', _0, _3) of
						<{WForms,'ok'}> when 'true' ->
						    %% Line 309
						    case apply 'compile_forms'/2
							     (WForms, _2) of
						      <{Es,Ws}> when 'true' ->
							  let <LcEs> =
							      apply %% Line 310
								    'lc_messages'/2
								  (%% Line 310
								   Es, _rec4)
							  in  let <LcWs> =
								  apply %% Line 311
									'lc_messages'/2
								      (%% Line 311
								       Ws, _rec4)
							      in  let <_37> =
								      apply %% Line 312
									    'badarg'/2
									  (_0, _3)
								  in  let <_35> =
									  call %% Line 312
									       'erlang':%% Line 312
											'++'
									      (%% Line 312
									       LcEs, %% Line 312
										     BGens)
								      in  let <_36> =
									      call %% Line 312
										   'erlang':%% Line 312
											    '++'
										  (%% Line 312
										   UsedGenVarMsgs, _35)
									  in  let <Errors> =
										  call %% Line 312
										       'erlang':%% Line 312
												'++'
										      (_37, _36)
									      in  %% Line 314
										  {Errors,LcWs}
						      ( <_32> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_32})
							-| ['compiler_generated'] )
						    end
						( <_31> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_31})
						  -| ['compiler_generated'] )
					      end
				      -| ['compiler_generated'] )
				    ( <_52> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','state'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			( <_18> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_18})
			  -| ['compiler_generated'] )
		      end
	      ( <_16> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_16})
		-| ['compiler_generated'] )
	    end
'badarg'/2 =
    %% Line 316
    fun (_0,_1) ->
	let <F> =
	    fun (_7,_6,_5) ->
		%% Line 317
		case <_7,_6,_5> of
		  <_X_Id,LC = {'lc',_X_L,_X_E,_X_Qs},Es> when 'true' ->
		      %% Line 318
		      {LC,Es}
		  %% Line 319
		  <Id,A,Es> when 'true' ->
		      let <_2> =
			  apply %% Line 320
				'get_lcid_line'/1
			      (%% Line 320
			       Id)
		      in  let <E> = {_2,%% Line 320
				  'qlc',%% Line 320
					'not_a_query_list_comprehension'}
			  in  let <_4> =
				  call %% Line 321
				       'erlang':%% Line 321
						'get'
				      (%% Line 321
				       'qlc_current_file')
			      in  %% Line 321
				  {A,[{_4,[E|[]]}|Es]}
		end
	in  %% Line 323
	    case apply 'qlc_mapfold'/4
		     (F, [], _0, _1) of
	      <{_15,E0}> when 'true' ->
		  %% Line 324
		  E0
	      ( <_12> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_12})
		-| ['compiler_generated'] )
	    end
'lc_nodes'/2 =
    %% Line 326
    fun (_0,_1) ->
	let <_9> =
	    fun (_7) ->
		let <N> =
		    call %% Line 328
			 'erl_anno':%% Line 328
				    'line'
			(%% Line 327
			 _7)
		in  %% Line 329
		    case call 'ets':'lookup'
			     (_1, N) of
		      <[{_12,Data}|[]]>
			  when call 'erlang':'=:='
				(_12,
				 N) ->
			  %% Line 330
			  case <> of
			    ( <>
				  when call 'erlang':'is_map'
					(Data) ->
				  let <_4> =
				      ~{'inside_lc'=>'true'|Data}~
				  in  %% Line 331
				      case call 'ets':'insert'
					       (_1, {N,_4}) of
					<'true'> when 'true' ->
					    _7
					( <_6> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_6})
					  -| ['compiler_generated'] )
				      end
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  ( primop 'match_fail'
					({'badmap',Data})
				    -| [{'eval_failure','badmap'}] )
			      -| ['compiler_generated'] )
			  end
		      ( <_3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_3})
			-| ['compiler_generated'] )
		    end
	in  %% Line 327
	    apply 'map_anno'/2
		(_9, _0)
'used_genvar_messages'/2 =
    %% Line 335
    fun (_0,_1) ->
	%% Line 337
	( letrec
	      'lc$^0'/1 =
		  fun (_9) ->
		      case _9 of
			<[{_15,Ms}|_3]> when 'true' ->
			    %% Line 338
			    ( letrec
				  'lc$^1'/1 =
				      fun (_10) ->
					  case _10 of
					    <[{XLoc,'erl_lint',{'unbound_var',_16}}|_5]> when 'true' ->
						%% Line 339
						( letrec
						      'lc$^2'/1 =
							  fun (_11) ->
							      case _11 of
								<[{Loc,File,V}|_7]> when 'true' ->
								    let <_12> =
									apply 'lc$^2'/1
									    (_7)
								    in  ( [{File,[{Loc,'qlc',{'used_generator_variable',V}}|[]]}|_12]
									  -| ['compiler_generated'] )
								( <[_6|_7]> when 'true' ->
								      apply 'lc$^2'/1
									  (_7)
								  -| ['compiler_generated'] )
								<[]> when 'true' ->
								    apply 'lc$^1'/1
									(_5)
								( <_17> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_17})
									-| [{'function_name',{'lc$^2',1}}] )
								  -| ['compiler_generated'] )
							      end
						  in  let <_8> =
							  apply 'genvar_pos'/2
							      (XLoc, _1)
						      in  apply 'lc$^2'/1
							      ([_8|[]])
						  -| ['list_comprehension'] )
					    ( <[_4|_5]> when 'true' ->
						  apply 'lc$^1'/1
						      (_5)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						apply 'lc$^0'/1
						    (_3)
					    ( <_18> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_18})
						    -| [{'function_name',{'lc$^1',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^1'/1
				      (Ms)
			      -| ['list_comprehension'] )
			( <[_2|_3]> when 'true' ->
			      apply 'lc$^0'/1
				  (_3)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_19> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_19})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_0)
	  -| ['list_comprehension'] )
'lc_messages'/2 =
    %% Line 341
    fun (_0,_1) ->
	%% Line 343
	( letrec
	      'lc$^0'/1 =
		  fun (_4) ->
		      case _4 of
			<[{File,Ms}|_3]> when 'true' ->
			    let <_10> =
				letrec
				    'lc$^1'/1 =
					fun (_7) ->
					    case _7 of
					      <[_@r0 = {Loc,Mod,T}|_6]> when 'true' ->
						  ( case apply 'lc_loc'/2
							     (Loc, _1) of
						      <'true'> when 'true' ->
							  let <_8> =
							      apply 'lc$^1'/1
								  (_6)
							  in  ( [_@r0|_8]
								-| ['compiler_generated'] )
						      ( <'false'> when 'true' ->
							    apply 'lc$^1'/1
								(_6)
							-| ['compiler_generated'] )
						      ( <_9> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_9})
							-| ['compiler_generated'] )
						    end
						    -| ['list_comprehension'] )
					      ( <[_5|_6]> when 'true' ->
						    apply 'lc$^1'/1
							(_6)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_14> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_14})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^1'/1
					(Ms)
			    in  let <_11> =
				    apply 'lc$^0'/1
					(_3)
				in  ( [{File,_10}|_11]
				      -| ['compiler_generated'] )
			( <[_2|_3]> when 'true' ->
			      apply 'lc$^0'/1
				  (_3)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_15> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_15})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_0)
	  -| ['list_comprehension'] )
'lc_loc'/2 =
    %% Line 345
    fun (_0,_1) ->
	%% Line 346
	case call 'ets':'lookup'
		 (_1, _0) of
	  %% Line 347
	  <[{_5,~{'inside_lc':='true'}~}|[]]>
	      when call 'erlang':'=:='
		    (_5,
		     _0) ->
	      %% Line 348
	      'true'
	  %% Line 349
	  <[{_6,_7}|[]]>
	      when call 'erlang':'=:='
		    (_6,
		     _0) ->
	      %% Line 350
	      'false'
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_2})
	    -| ['compiler_generated'] )
	end
'genvar_pos'/2 =
    %% Line 353
    fun (_0,_1) ->
	%% Line 354
	( case _1 of
	    ( <( {'state',_7,_8,_9,_10,_11,_12,_rec5}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'ets':'lookup'
			   (_rec5, _0) of
		    %% Line 355
		    <[{_14,~{'genvar_pos':=Pos}~}|[]]>
			when call 'erlang':'=:='
			      (_14,
			       _0) ->
			%% Line 356
			Pos
		    %% Line 357
		    <[]> when 'true' ->
			_0
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_4})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_13> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'intro_variables'/2 =
    %% Line 373
    fun (_0,_1) ->
	%% Line 374
	( case _1 of
	    ( <( {'state',_76,_77,_78,_79,_80,_81,_rec6}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Fun> =
		      fun (_29,_28,_27,_26) ->
			  %% Line 375
			  case <_29,_28,_27,_26> of
			    <QId,Q = {T,_X_L,P0,_X_E0},{GVs,QIds},Foo>
				when let <_5> =
				      call 'erlang':'=:='
					  (T, 'b_generate')
				  in  let <_6> =
					  call %% Line 376
					       'erlang':%% Line 376
							'=:='
					      (%% Line 376
					       T, %% Line 376
						  'generate')
				      in  call 'erlang':'or'
					      (_5, _6) ->
				let <_9> =
				    fun (_7) ->
					%% Line 377
					case _7 of
					  <{'var',_83,V}> when 'true' ->
					      {QId,V}
					  ( <_8> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_8})
						  -| [{'function_name',{'-intro_variables/2-fun-0-',1}}] )
					    -| ['compiler_generated'] )
					end
				in  let <PVs> =
					call %% Line 377
					     'qlc':%% Line 377
						   'var_ufold'
					    (_9, %% Line 377
						 P0)
				    in  let <_11> =
					    call %% Line 378
						 'ordsets':%% Line 378
							   'to_list'
						(%% Line 378
						 PVs)
					in  let <_12> =
						call %% Line 378
						     'erlang':%% Line 378
							      '++'
						    (_11, %% Line 378
							  GVs)
					    in  %% Line 378
						{Q,{_12,[{QId,[]}|QIds]},Foo}
			    %% Line 379
			    <QId,Filter0,{GVs,QIds},Foo> when 'true' ->
				let <_13> =
				    call %% Line 383
					 'qlc':%% Line 383
					       'vars'
					(%% Line 383
					 Filter0)
				in  let <Vs> =
					call %% Line 383
					     'ordsets':%% Line 383
						       'to_list'
					    (_13)
				    in  let <AnyLine> =
					    apply %% Line 384
						  'anno0'/0
						()
					in  let <_20> =
						letrec
						    'lc$^1'/1 =
							%% Line 385
							fun (_18) ->
							    case _18 of
							      <[V|_17]> when 'true' ->
								  let <_19> =
								      apply 'lc$^1'/1
									  (_17)
								  in  ( [{'var',AnyLine,V}|_19]
									-| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_84> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_84})
								      -| [{'function_name',{'lc$^1',1}}] )
								-| ['compiler_generated'] )
							    end
						in  %% Line 385
						    apply 'lc$^1'/1
							(Vs)
					    in  let <LC> =
						    apply %% Line 386
							  'embed_vars'/2
							(_20, %% Line 386
							      AnyLine)
						in  let <LC1> =
							apply %% Line 387
							      'intro_anno'/4
							    (%% Line 387
							     LC, %% Line 387
								 'before', %% Line 387
									   QId, _rec6)
						    in  let <LC2> =
							    apply %% Line 388
								  'intro_anno'/4
								(%% Line 388
								 LC, %% Line 388
								     'after', %% Line 388
									      QId, _rec6)
							in  let <Filter> =
								{%% Line 389
								 'block',%% Line 389
									 AnyLine,%% Line 389
										 [LC1|[Filter0|[LC2|[]]]]}
							    in  %% Line 390
								{Filter,{GVs,[{QId,[]}|QIds]},Foo}
			    ( <_33,_32,_31,_30> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_33,_32,_31,_30})
				    -| [{'function_name',{'-intro_variables/2-fun-2-',4}}] )
			      -| ['compiler_generated'] )
			  end
		  in  %% Line 393
		      case %% Line 394
			   apply 'qual_fold'/5
			       (Fun, {[],[]}, [], _0, _1) of
			<{FForms,{GenVars,QIds}}> when 'true' ->
			    let <Es0> =
				apply %% Line 397
				      'compile_errors'/1
				    (%% Line 397
				     FForms)
			    in  let <_46> =
				    letrec
					'lc$^3'/1 =
					    %% Line 401
					    fun (_43) ->
						case _43 of
						  <[{L,'erl_lint',{'unbound_var',V}}|_39]> when 'true' ->
						      %% Line 402
						      ( letrec
							    'lc$^4'/1 =
								fun (_44) ->
								    case _44 of
								      <[{_X_L,{QId,'before'}}|_41]> when 'true' ->
									  let <_45> =
									      apply 'lc$^4'/1
										  (_41)
									  in  ( [{QId,V}|_45]
										-| ['compiler_generated'] )
								      ( <[_40|_41]> when 'true' ->
									    apply 'lc$^4'/1
										(_41)
									-| ['compiler_generated'] )
								      <[]> when 'true' ->
									  apply 'lc$^3'/1
									      (_39)
								      ( <_85> when 'true' ->
									    ( primop 'match_fail'
										  ({'function_clause',_85})
									      -| [{'function_name',{'lc$^4',1}}] )
									-| ['compiler_generated'] )
								    end
							in  let <_42> =
								call 'ets':'lookup'
								    (_rec6, L)
							    in  apply 'lc$^4'/1
								    (_42)
							-| ['list_comprehension'] )
						  ( <[_38|_39]> when 'true' ->
							apply 'lc$^3'/1
							    (_39)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_86> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_86})
							  -| [{'function_name',{'lc$^3',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  %% Line 401
					apply 'lc$^3'/1
					    (Es0)
				in  let <_56> =
					letrec
					    'lc$^5'/1 =
						%% Line 404
						fun (_53) ->
						    case _53 of
						      <[{L,'erl_lint',{'unbound_var',V}}|_49]> when 'true' ->
							  %% Line 405
							  ( letrec
								'lc$^6'/1 =
								    fun (_54) ->
									case _54 of
									  <[{_X_L,{QId,'after'}}|_51]> when 'true' ->
									      let <_55> =
										  apply 'lc$^6'/1
										      (_51)
									      in  ( [{QId,V}|_55]
										    -| ['compiler_generated'] )
									  ( <[_50|_51]> when 'true' ->
										apply 'lc$^6'/1
										    (_51)
									    -| ['compiler_generated'] )
									  <[]> when 'true' ->
									      apply 'lc$^5'/1
										  (_49)
									  ( <_87> when 'true' ->
										( primop 'match_fail'
										      ({'function_clause',_87})
										  -| [{'function_name',{'lc$^6',1}}] )
									    -| ['compiler_generated'] )
									end
							    in  let <_52> =
								    call 'ets':'lookup'
									(_rec6, L)
								in  apply 'lc$^6'/1
									(_52)
							    -| ['list_comprehension'] )
						      ( <[_48|_49]> when 'true' ->
							    apply 'lc$^5'/1
								(_49)
							-| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_88> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_88})
							      -| [{'function_name',{'lc$^5',1}}] )
							-| ['compiler_generated'] )
						    end
					in  %% Line 404
					    apply 'lc$^5'/1
						(Es0)
				    in  let <_66> =
					    letrec
						'lc$^7'/1 =
						    %% Line 407
						    fun (_63) ->
							case _63 of
							  <[{L,'erl_lint',{'unsafe_var',V,_X_Where}}|_59]> when 'true' ->
							      %% Line 408
							      ( letrec
								    'lc$^8'/1 =
									fun (_64) ->
									    case _64 of
									      <[{_X_L,{QId,'after'}}|_61]> when 'true' ->
										  let <_65> =
										      apply 'lc$^8'/1
											  (_61)
										  in  ( [{QId,V}|_65]
											-| ['compiler_generated'] )
									      ( <[_60|_61]> when 'true' ->
										    apply 'lc$^8'/1
											(_61)
										-| ['compiler_generated'] )
									      <[]> when 'true' ->
										  apply 'lc$^7'/1
										      (_59)
									      ( <_89> when 'true' ->
										    ( primop 'match_fail'
											  ({'function_clause',_89})
										      -| [{'function_name',{'lc$^8',1}}] )
										-| ['compiler_generated'] )
									    end
								in  let <_62> =
									call 'ets':'lookup'
									    (_rec6, L)
								    in  apply 'lc$^8'/1
									    (_62)
								-| ['list_comprehension'] )
							  ( <[_58|_59]> when 'true' ->
								apply 'lc$^7'/1
								    (_59)
							    -| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_90> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_90})
								  -| [{'function_name',{'lc$^7',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  %% Line 407
						apply 'lc$^7'/1
						    (Es0)
					in  let <_68> =
						call %% Line 413
						     'erlang':%% Line 413
							      '--'
						    (_46, _56)
					    in  let <IV> =
						    call %% Line 413
							 'erlang':%% Line 413
								  '--'
							(_68, _66)
						in  let <_70> =
							call %% Line 414
							     'erlang':%% Line 414
								      '++'
							    (%% Line 414
							     IV, %% Line 414
								 GenVars)
						    in  let <I1> =
							    apply %% Line 414
								  'family'/1
								(_70)
							in  let <_72> =
								call %% Line 415
								     'sofs':%% Line 415
									    'family'
								    (%% Line 415
								     QIds)
							    in  let <_73> =
								    call %% Line 415
									 'sofs':%% Line 415
										'family_union'
									(_72, %% Line 415
									      I1)
								in  %% Line 415
								    call 'sofs':'to_external'
									(_73)
			( <_36> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_36})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_82> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'intro_anno'/4 =
    %% Line 417
    fun (_0,_1,_2,_3) ->
	let <Data> = {_2,_1}
	in  let <Fun> =
		fun (_7) ->
		    let <Location> =
			call %% Line 420
			     'erl_anno':%% Line 420
					'location'
			    (%% Line 419
			     _7)
		    in  %% Line 421
			case call 'ets':'insert'
				 (_3, {Location,Data}) of
			  <'true'> when 'true' ->
			      _7
			  ( <_6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_6})
			    -| ['compiler_generated'] )
			end
	    in  let <_10> =
		    apply %% Line 424
			  'save_anno'/2
			(_0, _3)
		in  %% Line 424
		    apply 'map_anno'/2
			(Fun, _10)
'compile_errors'/1 =
    %% Line 426
    fun (_0) ->
	%% Line 427
	case apply 'compile_forms'/2
		 (_0, []) of
	  %% Line 428
	  <{[],_X_Warnings}> when 'true' ->
	      %% Line 429
	      []
	  %% Line 430
	  <{Errors,_X_Warnings}> when 'true' ->
	      let <_3> =
		  fun (_1) ->
		      %% Line 432
		      case _1 of
			<{_X_File,Es}> when 'true' ->
			    Es
			( <_2> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_2})
				-| [{'function_name',{'-compile_errors/1-fun-0-',1}}] )
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 432
		  call 'lists':'flatmap'
		      (_3, Errors)
	  ( <_4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_4})
	    -| ['compiler_generated'] )
	end
'compile_forms'/2 =
    %% Line 435
    fun (_0,_1) ->
	let <Exclude> =
	    fun (_2) ->
		%% Line 436
		case _2 of
		  <'eof'> when 'true' ->
		      'true'
		  %% Line 437
		  <'warning'> when 'true' ->
		      'true'
		  %% Line 438
		  <'error'> when 'true' ->
		      'true'
		  %% Line 439
		  <_24> when 'true' ->
		      'false'
		end
	in  let <_12> =
		letrec
		    'lc$^1'/1 =
			%% Line 441
			fun (_9) ->
			    case _9 of
			      <[F|_6]> when 'true' ->
				  let <_7> =
				      call 'erlang':'element'
					  (1, F)
				  in  ( case apply Exclude
						 (_7) of
					  <'false'> when 'true' ->
					      let <_10> =
						  apply 'lc$^1'/1
						      (_6)
					      in  ( [F|_10]
						    -| ['compiler_generated'] )
					  ( <'true'> when 'true' ->
						apply 'lc$^1'/1
						    (_6)
					    -| ['compiler_generated'] )
					  ( <_cor_variable> when 'true' ->
						call 'erlang':'error'
						    ('badarg')
					    -| ['compiler_generated'] )
					end
					-| ['list_comprehension'] )
			      <[]> when 'true' ->
				  %% Line 442
				  [{'eof',0}]
			      ( <_28> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_28})
				      -| [{'function_name',{'lc$^1',1}}] )
				-| ['compiler_generated'] )
			    end
		in  %% Line 441
		    apply 'lc$^1'/1
			(_0)
	    in  %% Line 443
		try
		    let <_14> =
			apply %% Line 444
			      'compile_options'/1
			    (_1)
		    in  %% Line 444
			case call 'compile':'noenv_forms'
				 (_12, _14) of
			  %% Line 445
			  <{'ok',_X_ModName,Ws0}> when 'true' ->
			      %% Line 446
			      {[],Ws0}
			  %% Line 447
			  <{'error',Es0,Ws0}> when 'true' ->
			      %% Line 448
			      {Es0,Ws0}
			  ( <_15> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_15})
			    -| ['compiler_generated'] )
			end
		of <_16> ->
		    _16
		catch <_19,_18,_17> ->
		    let <_20> =
			apply %% Line 452
			      'lint_options'/1
			    (_1)
		    in  %% Line 452
			case call 'erl_lint':'module'
				 (_12, _20) of
			  %% Line 453
			  <{'ok',Warnings}> when 'true' ->
			      %% Line 454
			      {[],Warnings}
			  %% Line 455
			  <{'error',Errors,Warnings}> when 'true' ->
			      %% Line 456
			      {Errors,Warnings}
			  ( <_21> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_21})
			    -| ['compiler_generated'] )
			end
'compile_options'/1 =
    %% Line 460
    fun (_0) ->
	let <_1> =
	    apply %% Line 461
		  'bitstr_options'/0
		()
	in  let <No> =
		[%% Line 461
		 'report'|%% Line 461
			  ['report_errors'|['report_warnings'|['P'|['E'|_1]]]]]
	    in  let <_3> =
		    apply %% Line 462
			  'skip_options'/2
			(%% Line 462
			 No, _0)
		in  %% Line 462
		    ['strong_validation'|['return'|_3]]
'lint_options'/1 =
    %% Line 464
    fun (_0) ->
	let <_1> =
	    apply %% Line 465
		  'bitstr_options'/0
		()
	in  %% Line 465
	    apply 'skip_options'/2
		(_1, _0)
'skip_options'/2 =
    %% Line 467
    fun (_0,_1) ->
	%% Line 468
	( letrec
	      'lc$^0'/1 =
		  fun (_5) ->
		      case _5 of
			<[O|_3]> when 'true' ->
			    ( case call 'lists':'member'
				       (O, _0) of
				<'false'> when 'true' ->
				    let <_6> =
					apply 'lc$^0'/1
					    (_3)
				    in  ( [O|_6]
					  -| ['compiler_generated'] )
				( <'true'> when 'true' ->
				      apply 'lc$^0'/1
					  (_3)
				  -| ['compiler_generated'] )
				( <_cor_variable> when 'true' ->
				      call 'erlang':'error'
					  ('badarg')
				  -| ['compiler_generated'] )
			      end
			      -| ['list_comprehension'] )
			<[]> when 'true' ->
			    []
			( <_10> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_10})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_1)
	  -| ['list_comprehension'] )
'bitstr_options'/0 =
    %% Line 470
    fun () ->
	%% Line 471
	['binary_comprehension'|['bitlevel_binaries']]
'used_genvar_check'/2 =
    %% Line 482
    fun (_0,_1) ->
	%% Line 483
	( case _1 of
	    ( <( {'state',_60,_61,_62,_63,_64,_65,_rec7}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <F> =
		      fun (_37,_36,_35,_34) ->
			  %% Line 484
			  case <_37,_36,_35,_34> of
			    <QId,Q = {T,Ln,_X_P,LE},{QsIVs0,Exprs0},IVsSoFar0>
				when let <_5> =
				      call %% Line 485
					   'erlang':%% Line 485
						    '=:='
					  (%% Line 485
					   T, %% Line 485
					      'b_generate')
				  in  let <_6> =
					  call %% Line 485
					       'erlang':%% Line 485
							'=:='
					      (%% Line 485
					       T, %% Line 485
						  'generate')
				      in  %% Line 485
					  call 'erlang':'or'
					      (_5, _6) ->
				let <F> =
				    fun (_17) ->
					%% Line 487
					case %% Line 488
					     apply 'undo_no_shadows'/2
						 (_17, _1) of
					  <{'var',Anno0,OrigVar}> when 'true' ->
					      %% Line 489
					      case apply 'save_anno'/2
						       (_17, _rec7) of
						<NewVar = {'var',Anno,_67}> when 'true' ->
						    let <Location0> =
							call %% Line 490
							     'erl_anno':%% Line 490
									'location'
							    (%% Line 490
							     Anno0)
						    in  let <Location> =
							    call %% Line 491
								 'erl_anno':%% Line 491
									    'location'
								(%% Line 491
								 Anno)
							in  %% Line 492
							    case %% Line 493
								 call 'ets':'lookup'
								     (_rec7, Location) of
							      <[{_68,Data}|[]]>
								  when call 'erlang':'=:='
									(_68,
									 Location) ->
								  let <_12> =
								      call %% Line 494
									   'erlang':%% Line 494
										    'get'
									  (%% Line 494
									   'qlc_current_file')
								  in  let <Pos> = {%% Line 494
									   Location0,_12,%% Line 494
											 OrigVar}
								      in  %% Line 495
									  case <> of
									    ( <>
										  when call 'erlang':'is_map'
											(Data) ->
										  let <_14> =
										      ~{'genvar_pos'=>Pos|Data}~
										  in  %% Line 496
										      case call 'ets':'insert'
											       (_rec7, {Location,_14}) of
											<'true'> when 'true' ->
											    %% Line 497
											    NewVar
											( <_16> when 'true' ->
											      primop 'match_fail'
												  ({'badmatch',_16})
											  -| ['compiler_generated'] )
										      end
									      -| ['compiler_generated'] )
									    ( <> when 'true' ->
										  ( primop 'match_fail'
											({'badmap',Data})
										    -| [{'eval_failure','badmap'}] )
									      -| ['compiler_generated'] )
									  end
							      ( <_11> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_11})
								-| ['compiler_generated'] )
							    end
						( <_8> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_8})
						  -| ['compiler_generated'] )
					      end
					  ( <_7> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_7})
					    -| ['compiler_generated'] )
					end
				in  let <_26> =
					letrec
					    'lc$^1'/1 =
						%% Line 499
						fun (_23) ->
						    case _23 of
						      <[Var = {'var',_69,V}|_21]> when 'true' ->
							  %% Line 500
							  ( case call 'lists':'member'
								     (V, IVsSoFar0) of
							      <'true'> when 'true' ->
								  let <_24> =
								      apply 'lc$^1'/1
									  (_21)
								  in  ( [Var|_24]
									-| ['compiler_generated'] )
							      ( <'false'> when 'true' ->
								    apply 'lc$^1'/1
									(_21)
								-| ['compiler_generated'] )
							      ( <_25> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_25})
								-| ['compiler_generated'] )
							    end
							    -| ['list_comprehension'] )
						      ( <[_20|_21]> when 'true' ->
							    apply 'lc$^1'/1
								(_21)
							-| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_83> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_83})
							      -| [{'function_name',{'lc$^1',1}}] )
							-| ['compiler_generated'] )
						    end
					in  let <_22> =
						call %% Line 499
						     'qlc':%% Line 499
							   'var_fold'
						    (%% Line 499
						     F, %% Line 499
							[], %% Line 499
							    LE)
					    in  %% Line 499
						apply 'lc$^1'/1
						    (_22)
				    in  let <_30> =
					    case _26 of
					      %% Line 502
					      <[]> when 'true' ->
						  Exprs0
					      %% Line 503
					      <_70> when 'true' ->
						  let <_28> =
						      apply 'embed_vars'/2
							  (_26, Ln)
						  in  [_28|Exprs0]
					    end
					in  %% Line 505
					    case apply 'q_intro_vars'/3
						     (QId, QsIVs0, IVsSoFar0) of
					      <{QsIVs,IVsSoFar}> when 'true' ->
						  %% Line 506
						  {Q,{QsIVs,_30},IVsSoFar}
					      ( <_32> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_32})
						-| ['compiler_generated'] )
					    end
			    %% Line 507
			    <QId,Filter,{QsIVs0,Exprs},IVsSoFar0> when 'true' ->
				%% Line 508
				case apply 'q_intro_vars'/3
					 (QId, QsIVs0, IVsSoFar0) of
				  <{QsIVs,IVsSoFar}> when 'true' ->
				      %% Line 509
				      {Filter,{QsIVs,Exprs},IVsSoFar}
				  ( <_33> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_33})
				    -| ['compiler_generated'] )
				end
			    ( <_41,_40,_39,_38> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_41,_40,_39,_38})
				    -| [{'function_name',{'-used_genvar_check/2-fun-2-',4}}] )
			      -| ['compiler_generated'] )
			  end
		  in  %% Line 511
		      ( case _1 of
			  ( <( {'state',_71,_72,_73,_74,_75,_rec8,_76}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_43> =
				    apply 'anno0'/0
					()
				in  let <Acc0> =
					{_rec8,[{'atom',_43,'true'}|[]]}
				    in  %% Line 512
					case apply 'qual_fold'/5
						 (F, Acc0, [], _0, _1) of
					  <{_78,{[],Exprs}}> when 'true' ->
					      let <_52> =
						  letrec
						      'lc$^3'/1 =
							  %% Line 513
							  fun (_50) ->
							      case _50 of
								<[{'function',_79,Name,_80,_81}|_49]> when 'true' ->
								    let <_51> =
									apply 'lc$^3'/1
									    (_49)
								    in  ( [Name|_51]
									  -| ['compiler_generated'] )
								( <[_48|_49]> when 'true' ->
								      apply 'lc$^3'/1
									  (_49)
								  -| ['compiler_generated'] )
								<[]> when 'true' ->
								    []
								( <_84> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_84})
									-| [{'function_name',{'lc$^3',1}}] )
								  -| ['compiler_generated'] )
							      end
						  in  %% Line 513
						      apply 'lc$^3'/1
							  (_0)
					      in  let <_54> =
						      call %% Line 514
							   'gb_sets':%% Line 514
								     'from_list'
							  (_52)
						  in  let <UniqueFName> =
							  call %% Line 514
							       'qlc':%% Line 514
								     'aux_name'
							      (%% Line 514
							       'used_genvar', %% Line 514
									      1, _54)
						      in  let <A> =
							      apply %% Line 515
								    'anno0'/0
								  ()
							  in  let <_57> =
								  call %% Line 516
								       'lists':%% Line 516
									       'reverse'
								      (%% Line 516
								       Exprs)
							      in  %% Line 516
								  {'function',A,UniqueFName,0,[{'clause',A,[],[],_57}|[]]}
					  ( <_47> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_47})
					    -| ['compiler_generated'] )
					end
			    -| ['compiler_generated'] )
			  ( <_77> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_66> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'q_intro_vars'/3 =
    %% Line 518
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <QId,[{_7,IVs}|QsIVs],IVsSoFar>
	      when call 'erlang':'=:='
		    (_7,
		     QId) ->
	      let <_3> =
		  call 'erlang':'++'
		      (IVs, IVsSoFar)
	      in  {QsIVs,_3}
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'q_intro_vars',3}}] )
	    -| ['compiler_generated'] )
	end
'transform'/2 =
    %% Line 613
    fun (_0,_1) ->
	do  %% Line 614
	    ( call ( 'erlang'
		     -| ['result_not_wanted'] ):( 'system_flag'
						  -| ['result_not_wanted'] )
		  (( 'backtrace_depth'
		     -| ['result_not_wanted'] ), ( 500
						   -| ['result_not_wanted'] ))
	      -| ['result_not_wanted'] )
	    %% Line 615
	    ( case _1 of
		( <( {'state',_113,_114,_115,_116,_117,_rec9,_118}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_6> =
			  call %% Line 616
			       'qlc':%% Line 616
				     'vars'
			      (_0)
		      in  let <_7> =
			      call %% Line 616
				   'ordsets':%% Line 616
					     'to_list'
				  (_6)
			  in  let <AllVars> =
				  call %% Line 616
				       'gb_sets':%% Line 616
						 'from_list'
				      (_7)
			      in  let <F1> =
				      fun (_16,_15,_14,_13) ->
					  %% Line 618
					  case <_16,_15,_14,_13> of
					    <QId,{'generate',_120,P,LE},Foo,{GoI,SI}> when 'true' ->
						let <_10> =
						    call %% Line 619
							 'erlang':%% Line 619
								  '+'
							(%% Line 619
							 GoI, %% Line 619
							      3)
						in  let <_9> =
							call %% Line 619
							     'erlang':%% Line 619
								      '+'
							    (%% Line 619
							     SI, %% Line 619
								 2)
						    in  %% Line 619
							{{QId,GoI,SI,{'gen',P,LE}},Foo,{_10,_9}}
					    %% Line 620
					    <QId,F,Foo,{GoI,SI}> when 'true' ->
						let <_12> =
						    call %% Line 621
							 'erlang':%% Line 621
								  '+'
							(%% Line 621
							 GoI, %% Line 621
							      2)
						in  let <_11> =
							call %% Line 621
							     'erlang':%% Line 621
								      '+'
							    (%% Line 621
							     SI, %% Line 621
								 1)
						    in  %% Line 621
							{{QId,GoI,SI,{'fil',F}},Foo,{_12,_11}}
					    ( <_20,_19,_18,_17> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_20,_19,_18,_17})
						    -| [{'function_name',{'-transform/2-fun-0-',4}}] )
					      -| ['compiler_generated'] )
					  end
				  in  let <TemplS> =
					  call %% Line 623
					       'qlc':%% Line 623
						     'template_state'
					      ()
				      in  let <_24> =
					      call %% Line 624
						   'erlang':%% Line 624
							    '+'
						  (%% Line 624
						   TemplS, %% Line 624
							   1)
					  in  let <_23> =
						  call %% Line 624
						       'erlang':%% Line 624
								'+'
						      (%% Line 624
						       TemplS, %% Line 624
							       1)
					      in  let <GoState> = {_24,_23}
						  in  %% Line 625
						      case %% Line 626
							   apply 'qual_fold'/5
							       (F1, [], GoState, _0, _1) of
							<{ModifiedForms1,_121}> when 'true' ->
							    let <_37> =
								fun (_32,_31,_30,_29) ->
								    %% Line 632
								    case <_32,_31,_30,_29> of
								      <_X_QId,Q = {'generate',_122,_X_P,_X_E},Dict,Foo> when 'true' ->
									  %% Line 633
									  {Q,Dict,Foo}
								      %% Line 634
								      <QId,F,Dict,Foo> when 'true' ->
									  let <_28> =
									      call %% Line 635
										   'maps':%% Line 635
											  'put'
										  (%% Line 635
										   QId, %% Line 635
											F, %% Line 635
											   Dict)
									  in  %% Line 635
									      {F,_28,Foo}
								    end
							    in  let <_27> =
								    call %% Line 636
									 'maps':%% Line 636
										'new'
									()
								in  %% Line 632
								    case apply 'qual_fold'/5
									     (_37, _27, %% Line 636
											[], _0, _1) of
								      <{_123,Source0}> when 'true' ->
									  let <_46> =
									      fun (_42,_41,_40) ->
										  %% Line 637
										  case <_42,_41,_40> of
										    <Id,LC = {'lc',_X_L,E,_X_Qs},Dict> when 'true' ->
											let <_39> =
											    call %% Line 638
												 'maps':%% Line 638
													'put'
												(%% Line 638
												 Id, %% Line 638
												     E, %% Line 638
													Dict)
											in  %% Line 638
											    {LC,_39}
										    ( <_45,_44,_43> when 'true' ->
											  ( primop 'match_fail'
												({'function_clause',_45,_44,_43})
											    -| [{'function_name',{'-transform/2-fun-2-',3}}] )
										      -| ['compiler_generated'] )
										  end
									  in  %% Line 637
									      case apply 'qlc_mapfold'/4
										       (_46, %% Line 639
											     Source0, _0, _1) of
										<{_124,Source}> when 'true' ->
										    let <F2> =
											fun (_102,_101,_100) ->
											    %% Line 643
											    case <_102,_101,_100> of
											      <Id,{'lc',_X_L,E,Qs},{IntroVs0,XWarn0}> when 'true' ->
												  let <LcNo> =
												      apply %% Line 644
													    'get_lcid_no'/1
													  (%% Line 644
													   Id)
												  in  let <LcL> =
													  apply %% Line 645
														'get_lcid_line'/1
													      (%% Line 645
													       Id)
												      in  %% Line 646
													  case %% Line 647
													       apply 'aux_vars'/3
														   (['RL'|['Fun'|['Go'|['C'|['S0'|['RL0'|['Go0'|['AT'|['E']]]]]]]]], %% Line 648
																						     LcNo, %% Line 648
																							   AllVars) of
													    <[RL|[Fun|[Go|[NGV|[S0|[RL0|[Go0|[AT|[Err|[]]]]]]]]]]> when 'true' ->
														let <_51> =
														    call %% Line 650
															 'erlang':%% Line 650
																  'length'
															(%% Line 650
															 Qs)
														in  %% Line 650
														    case call 'lists':'split'
															     (_51, IntroVs0) of
														      <{IntroVs,RestIntroVs}> when 'true' ->
															  let <IntroVs_Qs> =
															      call %% Line 651
																   'lists':%% Line 651
																	   'zip'
																  (%% Line 651
																   IntroVs, %% Line 651
																	    Qs)
															  in  let <F> =
																  fun (_61,_60) ->
																      %% Line 652
																      case <_61,_60> of
																	<{{QId,IVs},{_125,GoI,SI,{'gen',P,LE}}},AllIVs0>
																	    when call 'erlang':'=:='
																		  (_125,
																		   QId) ->
																	    %% Line 653
																	    ( case QId of
																		( <( {'qid',_126,_rec10}
																		     -| ['compiler_generated'] )> when 'true' ->
																		      let <GV> =
																			  apply 'aux_var'/5
																			      ('C', LcNo, _rec10, 1, AllVars)
																		      in  let <GenIVs> =
																			      [%% Line 654
																			       GV|%% Line 654
																				  IVs]
																			  in  let <_58> =
																				  call %% Line 656
																				       'erlang':%% Line 656
																						'++'
																				      (%% Line 656
																				       GenIVs, %% Line 656
																					       AllIVs0)
																			      in  %% Line 655
																				  {{QId,{GenIVs,{{'gen',P,LE,GV},GoI,SI}}},_58}
																		  -| ['compiler_generated'] )
																		( <_127> when 'true' ->
																		      ( call ( 'erlang'
																			       -| ['compiler_generated'] ):( 'error'
																							     -| ['compiler_generated'] )
																			    (( {'badrecord','qid'}
																			       -| ['compiler_generated'] ))
																			-| ['compiler_generated'] )
																		  -| ['compiler_generated'] )
																	      end
																	      -| ['compiler_generated'] )
																	%% Line 657
																	<{{QId,IVs},{_128,GoI,SI,_@r0 = {'fil',F}}},AllIVs0>
																	    when call 'erlang':'=:='
																		  (_128,
																		   QId) ->
																	    let <_59> =
																		call %% Line 659
																		     'erlang':%% Line 659
																			      '++'
																		    (%% Line 659
																		     IVs, %% Line 659
																			  AllIVs0)
																	    in  %% Line 658
																		{{QId,{IVs,{_@r0,GoI,SI}}},_59}
																	( <_63,_62> when 'true' ->
																	      ( primop 'match_fail'
																		    ({'function_clause',_63,_62})
																		-| [{'function_name',{'-transform/2-fun-3-',2}}] )
																	  -| ['compiler_generated'] )
																      end
															      in  %% Line 661
																  case call 'lists':'mapfoldl'
																	   (F, [], IntroVs_Qs) of
																    <{QCs,AllIVs}> when 'true' ->
																	let <Dependencies> =
																	    apply %% Line 663
																		  'qualifier_dependencies'/2
																		(%% Line 663
																		 Qs, %% Line 663
																		     IntroVs)
																	in  let <L> =
																		apply %% Line 664
																		      'no_compiler_warning'/1
																		    (%% Line 664
																		     LcL)
																	    in  %% Line 666
																		case %% Line 667
																		     apply 'constants_and_sizes'/5
																			 (Qs, E, Dependencies, AllIVs, _1) of
																		  <{EqColumnConstants,EqualColumnConstants,ExtraConsts,SizeInfo}> when 'true' ->
																		      %% Line 668
																		      case %% Line 669
																			   apply 'join_kind'/5
																			       (Qs, LcL, AllIVs, Dependencies, _1) of
																			<{JoinInfo,XWarn}> when 'true' ->
																			    let <FWarn> =
																				apply %% Line 673
																				      'warn_failing_qualifiers'/4
																				    (%% Line 673
																				     Qs, %% Line 673
																					 AllIVs, %% Line 673
																						 Dependencies, _1)
																			    in  let <JQs> =
																				    apply %% Line 675
																					  'join_quals'/6
																					(%% Line 675
																					 JoinInfo, %% Line 675
																						   QCs, %% Line 675
																							L, %% Line 675
																							   LcNo, %% Line 675
																								 ExtraConsts, %% Line 675
																									      AllVars)
																				in  let <XQCs> =
																					call %% Line 676
																					     'erlang':%% Line 676
																						      '++'
																					    (%% Line 676
																					     QCs, %% Line 676
																						  JQs)
																				    in  let <Cs0> =
																					    apply %% Line 677
																						  'clauses'/8
																						(%% Line 677
																						 XQCs, %% Line 677
																						       RL, %% Line 677
																							   Fun, %% Line 677
																								Go, %% Line 677
																								    NGV, %% Line 677
																									 Err, %% Line 677
																									      AllIVs, _1)
																					in  let <Template> =
																						apply %% Line 678
																						      'template'/8
																						    (%% Line 678
																						     E, %% Line 678
																							RL, %% Line 678
																							    Fun, %% Line 678
																								 Go, %% Line 678
																								     AT, %% Line 678
																									 L, %% Line 678
																									    AllIVs, _1)
																					    in  let <Fin> =
																						    apply %% Line 679
																							  'final'/4
																							(%% Line 679
																							 RL, %% Line 679
																							     AllIVs, %% Line 679
																								     L, _1)
																						in  let <_76> =
																							call %% Line 680
																							     'erlang':%% Line 680
																								      '++'
																							    (%% Line 680
																							     Template, %% Line 680
																								       Cs0)
																						    in  let <_77> =
																							    call %% Line 680
																								 'erlang':%% Line 680
																									  '++'
																								(%% Line 680
																								 Fin, _76)
																							in  let <FunC> = {%% Line 680
																								 'fun',%% Line 680
																								       L,%% Line 680
																									 {'clauses',_77}}
																							    in  let <_79> =
																								    apply %% Line 682
																									  'replace'/3
																									(%% Line 682
																									 AllIVs, %% Line 682
																										 AllIVs, %% Line 682
																											 'nil')
																								in  let <_80> =
																									apply %% Line 681
																									      'abst_vars'/2
																									    (%% Line 681
																									     [S0|[RL0|[Fun|[Go0|_79]]]], %% Line 683
																													 L)
																								    in  let <As0> =
																									    apply %% Line 681
																										  'pack_args'/3
																										(_80, %% Line 683
																										      L, _1)
																									in  let <AsW> =
																										apply %% Line 684
																										      'abst_vars'/2
																										    (%% Line 684
																										     [S0|[RL0|[Go0|[]]]], %% Line 684
																													  L)
																									    in  let <FunW> =
																										    {%% Line 685
																										     'fun',%% Line 685
																											   L,%% Line 685
																											     {'clauses',[{'clause',L,AsW,[],%% Line 686
																															    [{'match',L,{'var',L,Fun},FunC}|%% Line 687
																																			    [{'call',L,{'var',L,Fun},As0}|[]]]}|%% Line 687
																																								[]]}}
																										in  let <OrigE0> =
																											call %% Line 688
																											     'erlang':%% Line 688
																												      'map_get'
																											    (%% Line 688
																											     Id, %% Line 688
																												 Source)
																										    in  let <OrigE> =
																											    apply %% Line 689
																												  'undo_no_shadows'/2
																												(%% Line 689
																												 OrigE0, _1)
																											in  let <QCode> =
																												apply %% Line 690
																												      'qcode'/5
																												    (%% Line 690
																												     OrigE, %% Line 690
																													    XQCs, %% Line 690
																														  Source, %% Line 690
																															  L, _1)
																											    in  let <Qdata> =
																												    apply %% Line 691
																													  'qdata'/2
																													(%% Line 691
																													 XQCs, %% Line 691
																													       L)
																												in  let <TemplateInfo> =
																													apply %% Line 693
																													      'template_columns'/5
																													    (%% Line 693
																													     Qs, %% Line 693
																														 E, %% Line 693
																														    AllIVs, %% Line 693
																															    Dependencies, _1)
																												    in  let <MSQs> =
																													    apply %% Line 695
																														  'match_spec_quals'/4
																														(%% Line 695
																														 E, %% Line 695
																														    Dependencies, %% Line 695
																																  Qs, _1)
																													in  let <Opt> =
																														apply %% Line 696
																														      'opt_info'/7
																														    (%% Line 696
																														     TemplateInfo, %% Line 696
																																   SizeInfo, %% Line 696
																																	     JoinInfo, %% Line 696
																																		       MSQs, %% Line 696
																																			     L, %% Line 697
																																				EqColumnConstants, %% Line 697
																																						   EqualColumnConstants)
																													    in  let <_93> =
																														    case %% Line 699
																															 apply 'qlc_kind'/3
																															     (OrigE, Qs, _1) of
																														      %% Line 700
																														      <'qlc'> when 'true' ->
																															  %% Line 701
																															  {'tuple',L,[{'atom',L,'qlc_v1'}|[FunW|[QCode|[Qdata|[Opt|[]]]]]]}
																														      %% Line 702
																														      <{'simple',PL,LE,V}> when 'true' ->
																															  let <Init> =
																															      apply %% Line 703
																																    'closure'/2
																																  (%% Line 703
																																   LE, %% Line 703
																																       L)
																															  in  %% Line 704
																															      apply 'simple'/4
																																  (L, V, Init, PL)
																														      ( <_92> when 'true' ->
																															    %% Line 699
																															    primop 'match_fail'
																																({'case_clause',_92})
																															-| ['compiler_generated'] )
																														    end
																														in  let <LCFun> =
																															{%% Line 706
																															 'fun',%% Line 706
																															       L,%% Line 706
																																 {'clauses',[{'clause',L,[],[],[_93|[]]}|[]]}}
																														    in  %% Line 707
																															case apply 'abstr'/2
																																 ({'qlc_lc','undefined','undefined'}, L) of
																															  <{'tuple',_129,Fs0}> when 'true' ->
																															      let <Fs> =
																																  apply %% Line 708
																																	'set_field'/3
																																      (%% Line 708
																																       2, %% Line 708
																																	  Fs0, %% Line 708
																																	       LCFun)
																															      in  let <_98> =
																																      call %% Line 709
																																	   'erlang':%% Line 709
																																		    '++'
																																	  (%% Line 709
																																	   XWarn, %% Line 709
																																		  XWarn0)
																																  in  let <_99> =
																																	  call %% Line 709
																																	       'erlang':%% Line 709
																																			'++'
																																	      (%% Line 709
																																	       FWarn, _98)
																																      in  %% Line 709
																																	  {{'tuple',L,Fs},{RestIntroVs,_99}}
																															  ( <_96> when 'true' ->
																																primop 'match_fail'
																																    ({'badmatch',_96})
																															    -| ['compiler_generated'] )
																															end
																			( <_69> when 'true' ->
																			      primop 'match_fail'
																				  ({'badmatch',_69})
																			  -| ['compiler_generated'] )
																		      end
																		  ( <_68> when 'true' ->
																			primop 'match_fail'
																			    ({'badmatch',_68})
																		    -| ['compiler_generated'] )
																		end
																    ( <_65> when 'true' ->
																	  primop 'match_fail'
																	      ({'badmatch',_65})
																      -| ['compiler_generated'] )
																  end
														      ( <_52> when 'true' ->
															    primop 'match_fail'
																({'badmatch',_52})
															-| ['compiler_generated'] )
														    end
													    ( <_50> when 'true' ->
														  primop 'match_fail'
														      ({'badmatch',_50})
													      -| ['compiler_generated'] )
													  end
											      ( <_105,_104,_103> when 'true' ->
												    ( primop 'match_fail'
													  ({'function_clause',_105,_104,_103})
												      -| [{'function_name',{'-transform/2-fun-4-',3}}] )
												-| ['compiler_generated'] )
											    end
										    in  %% Line 711
											case apply 'qlc_mapfold'/4
												 (F2, {_rec9,[]}, ModifiedForms1, _1) of
											  <{NForms,{[],XW}}> when 'true' ->
											      do  %% Line 712
												  apply 'display_forms'/1
												      (NForms)
												  %% Line 713
												  case _1 of
												    <{'state',_130,_131,_132,_133,_134,_135,_136}> when 'true' ->
													let <_110> =
													    call 'erlang':'setelement'
														(6, _1, XW)
													in  {NForms,_110}
												    ( <_137> when 'true' ->
													  ( call ( 'erlang'
														   -| ['compiler_generated'] ):( 'error'
																		 -| ['compiler_generated'] )
														(( {'badrecord','state'}
														   -| ['compiler_generated'] ))
													    -| ['compiler_generated'] )
												      -| ['compiler_generated'] )
												  end
											  ( <_107> when 'true' ->
												primop 'match_fail'
												    ({'badmatch',_107})
											    -| ['compiler_generated'] )
											end
										( <_47> when 'true' ->
										      primop 'match_fail'
											  ({'badmatch',_47})
										  -| ['compiler_generated'] )
									      end
								      ( <_38> when 'true' ->
									    primop 'match_fail'
										({'badmatch',_38})
									-| ['compiler_generated'] )
								    end
							( <_26> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_26})
							  -| ['compiler_generated'] )
						      end
		  -| ['compiler_generated'] )
		( <_119> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'join_kind'/5 =
    %% Line 715
    fun (_0,_1,_2,_3,_4) ->
	%% Line 716
	case apply 'equal_columns'/4
		 (_0, _2, _3, _4) of
	  <{EqualCols2,EqualColsN}> when 'true' ->
	      %% Line 717
	      case apply 'eq_columns'/4
		       (_0, _2, _3, _4) of
		<{MatchCols2,MatchColsN}> when 'true' ->
		    let <_14> =
			letrec
			    'lc$^0'/1 =
				%% Line 720
				fun (_11) ->
				    case _11 of
				      <[{C,_X_Skip}|_8]> when 'true' ->
					  ( letrec
						'lc$^1'/1 =
						    fun (_12) ->
							case _12 of
							  <[T|_10]>
							      when call 'erlang':'is_integer'
								    (T) ->
							      let <_13> =
								  apply 'lc$^1'/1
								      (_10)
							      in  ( [T|_13]
								    -| ['compiler_generated'] )
							  ( <[T|_10]> when 'true' ->
								apply 'lc$^1'/1
								    (_10)
							    -| ['compiler_generated'] )
							  <[]> when 'true' ->
							      apply 'lc$^0'/1
								  (_8)
							  ( <_37> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_37})
								  -| [{'function_name',{'lc$^1',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^1'/1
						    (C)
					    -| ['list_comprehension'] )
				      ( <[_7|_8]> when 'true' ->
					    apply 'lc$^0'/1
						(_8)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_38> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_38})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  %% Line 720
			    apply 'lc$^0'/1
				(EqualCols2)
		    in  let <_22> =
			    letrec
				'lc$^2'/1 =
				    %% Line 719
				    fun (_19) ->
					case _19 of
					  <[{C,_X_Skip}|_16]> when 'true' ->
					      ( letrec
						    'lc$^3'/1 =
							fun (_20) ->
							    case _20 of
							      <[{T,_36}|_18]> when 'true' ->
								  let <_21> =
								      apply 'lc$^3'/1
									  (_18)
								  in  ( [T|_21]
									-| ['compiler_generated'] )
							      ( <[_17|_18]> when 'true' ->
								    apply 'lc$^3'/1
									(_18)
								-| ['compiler_generated'] )
							      <[]> when 'true' ->
								  apply 'lc$^2'/1
								      (_16)
							      ( <_39> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_39})
								      -| [{'function_name',{'lc$^3',1}}] )
								-| ['compiler_generated'] )
							    end
						in  apply 'lc$^3'/1
							(C)
						-| ['list_comprehension'] )
					  ( <[_15|_16]> when 'true' ->
						apply 'lc$^2'/1
						    (_16)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      _14
					  ( <_40> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_40})
						  -| [{'function_name',{'lc$^2',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  %% Line 719
				apply 'lc$^2'/1
				    (EqualCols2)
			in  let <Tables> =
				call %% Line 718
				     'lists':%% Line 718
					     'usort'
				    (_22)
			    in  %% Line 721
				case <> of
				  %% Line 722
				  <>
				      when let <_24> =
					    call 'erlang':'=/='
						(EqualColsN, [])
					in  let <_25> =
						call 'erlang':'=/='
						    (MatchColsN, [])
					    in  call 'erlang':'or'
						    (_24, _25) ->
				      let <_26> =
					  call %% Line 724
					       'erlang':%% Line 724
							'get'
					      (%% Line 724
					       'qlc_current_file')
				      in  %% Line 723
					  {[],%% Line 724
					      [{_26,[{_1,'qlc','too_complex_join'}|[]]}|[]]}
				  %% Line 725
				  <>
				      when let <_27> =
					    call 'erlang':'=:='
						(EqualCols2, [])
					in  let <_28> =
						call 'erlang':'=:='
						    (MatchCols2, [])
					    in  call 'erlang':'and'
						    (_27, _28) ->
				      %% Line 726
				      {[],[]}
				  %% Line 727
				  <>
				      when try
					    let <_29> =
						call 'erlang':'length'
						    (Tables)
					    in  call 'erlang':'>'
						    (_29, 2)
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false' ->
				      let <_30> =
					  call %% Line 729
					       'erlang':%% Line 729
							'get'
					      (%% Line 729
					       'qlc_current_file')
				      in  %% Line 728
					  {[],%% Line 729
					      [{_30,[{_1,'qlc','too_many_joins'}|[]]}|[]]}
				  %% Line 730
				  <>
				      when call 'erlang':'=:='
					    (EqualCols2,
					     MatchCols2) ->
				      %% Line 731
				      {EqualCols2,[]}
				  %% Line 732
				  <> when 'true' ->
				      %% Line 733
				      {{EqualCols2,MatchCols2},[]}
				end
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_6})
		  -| ['compiler_generated'] )
	      end
	  ( <_5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_5})
	    -| ['compiler_generated'] )
	end
'qlc_kind'/3 =
    %% Line 736
    fun (_0,_1,_2) ->
	let <_3> =
	    apply %% Line 738
		  'undo_no_shadows'/2
		(_1, _2)
	in  %% Line 737
	    case %% Line 738
		 apply 'qual_data'/1
		     (_3) of
	      <{OrigFilterData,OrigGeneratorData}> when 'true' ->
		  let <OrigAllFilters> =
		      apply %% Line 739
			    'filters_as_one'/1
			  (%% Line 739
			   OrigFilterData)
		  in  %% Line 740
		      case apply 'qual_data'/1
			       (_1) of
			<{_X_FilterData,GeneratorData}> when 'true' ->
			    %% Line 741
			    case <_0,OrigAllFilters,OrigGeneratorData> of
			      %% Line 742
			      <( {( 'var'
				    -| ['compiler_generated'] ),_12,V}
				 -| ['compiler_generated'] ),( {( 'atom'
								  -| ['compiler_generated'] ),_13,( 'true'
												    -| ['compiler_generated'] )}
							       -| ['compiler_generated'] ),( [( {_14,( {( 'gen'
													  -| ['compiler_generated'] ),( {( 'var'
																	   -| ['compiler_generated'] ),PatternL,_15}
																	-| ['compiler_generated'] ),_X_LE}
												       -| ['compiler_generated'] )}
												-| ['compiler_generated'] )|( []
															      -| ['compiler_generated'] )]
											     -| ['compiler_generated'] )>
				  when call 'erlang':'=:='
					(_15,
					 V) ->
				  %% Line 743
				  case GeneratorData of
				    <[{_16,{'gen',_17,LE}}|[]]> when 'true' ->
					%% Line 744
					{'simple',PatternL,LE,V}
				    ( <_7> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_7})
				      -| ['compiler_generated'] )
				  end
			      %% Line 745
			      <( _19
				 -| ['compiler_generated'] ),( _20
							       -| ['compiler_generated'] ),( _21
											     -| ['compiler_generated'] )> when 'true' ->
				  %% Line 746
				  'qlc'
			    end
			( <_6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_6})
			  -| ['compiler_generated'] )
		      end
	      ( <_4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_4})
		-| ['compiler_generated'] )
	    end
'warn_failing_qualifiers'/4 =
    %% Line 752
    fun (_0,_1,_2,_3) ->
	%% Line 753
	case apply 'qual_data'/1
		 (_0) of
	  <{FilterData,GeneratorData}> when 'true' ->
	      let <BindFun> =
		  fun (_7,_6) ->
		      %% Line 755
		      apply 'is_bindable'/1
			  (_6)
	      in  %% Line 756
		  case %% Line 757
		       apply 'pattern_frame'/4
			   (GeneratorData, BindFun, 1, _3) of
		    <{PFrame,_X_PatternVars}> when 'true' ->
			%% Line 758
			case %% Line 759
			     apply 'filter_info'/4
				 (FilterData, _1, _2, _3) of
			  <{_34,_35,Imported}> when 'true' ->
			      let <PFrames> =
				  apply %% Line 760
					'frame2frames'/1
				      (%% Line 760
				       PFrame)
			      in  let <_28> =
				      fun (_25,_24) ->
					  %% Line 762
					  case <_25,_24> of
					    <{_X_QId,{'fil',_X_Filter}},_@r0 = {Frames = [],Warnings}> when 'true' ->
						%% Line 763
						_@r0
					    %% Line 764
					    <{_X_QId,{'fil',Filter}},{Frames,Warnings}> when 'true' ->
						let <_15> =
						    apply %% Line 765
							  'reset_anno'/1
							(%% Line 765
							 Filter)
						in  %% Line 765
						    case apply 'filter'/5
							     (_15, Frames, BindFun, _3, %% Line 766
											Imported) of
						      %% Line 767
						      <[]> when 'true' ->
							  let <_18> =
							      call %% Line 769
								   'erlang':%% Line 769
									    'get'
								  (%% Line 769
								   'qlc_current_file')
							  in  let <_16> =
								  call %% Line 770
								       'erlang':%% Line 770
										'element'
								      (%% Line 770
								       2, %% Line 770
									  Filter)
							      in  let <_17> =
								      apply %% Line 770
									    'loc'/1
									  (_16)
								  in  %% Line 768
								      {[],%% Line 769
									  [{_18,%% Line 770
										[{_17,'qlc',%% Line 771
											    'nomatch_filter'}|%% Line 771
													      []]}|%% Line 771
														   Warnings]}
						      %% Line 772
						      <Frames1> when 'true' ->
							  %% Line 773
							  {Frames1,Warnings}
						    end
					    %% Line 775
					    <{_X_QId,{'gen',Pattern,_36}},_@r1 = {Frames,Warnings}> when 'true' ->
						%% Line 776
						case apply 'pattern'/5
							 (Pattern, 1, [], BindFun, _3) of
						  %% Line 777
						  <{'failed',_37,_38}> when 'true' ->
						      let <_22> =
							  call %% Line 779
							       'erlang':%% Line 779
									'get'
							      (%% Line 779
							       'qlc_current_file')
						      in  let <_20> =
							      call %% Line 780
								   'erlang':%% Line 780
									    'element'
								  (%% Line 780
								   2, %% Line 780
								      Pattern)
							  in  let <_21> =
								  apply %% Line 780
									'loc'/1
								      (_20)
							      in  %% Line 778
								  {Frames,%% Line 779
									  [{_22,%% Line 780
										[{_21,'qlc',%% Line 781
											    'nomatch_pattern'}|%% Line 781
													       []]}|%% Line 781
														    Warnings]}
						  %% Line 782
						  <_39> when 'true' ->
						      %% Line 783
						      _@r1
						end
					    ( <_27,_26> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_27,_26})
						    -| [{'function_name',{'-warn_failing_qualifiers/4-fun-1-',2}}] )
					      -| ['compiler_generated'] )
					  end
				  in  let <_14> =
					  call %% Line 785
					       'erlang':%% Line 785
							'++'
					      (%% Line 785
					       FilterData, %% Line 785
							   GeneratorData)
				      in  %% Line 761
					  case %% Line 762
					       call 'lists':'foldl'
						   (_28, %% Line 785
							 {PFrames,[]}, _14) of
					    <{_40,Warnings}> when 'true' ->
						%% Line 786
						Warnings
					    ( <_29> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_29})
					      -| ['compiler_generated'] )
					  end
			  ( <_12> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_12})
			    -| ['compiler_generated'] )
			end
		    ( <_11> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_11})
		      -| ['compiler_generated'] )
		  end
	  ( <_4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_4})
	    -| ['compiler_generated'] )
	end
'opt_info'/7 =
    %% Line 791
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	let <_12> =
	    letrec
		'lc$^0'/1 =
		    %% Line 793
		    fun (_10) ->
			case _10 of
			  <[{C,Sz}|_8]> when 'true' ->
			      let <_11> =
				  apply 'lc$^0'/1
				      (_8)
			      in  ( [{'clause',_4,[{'integer',_4,C}|[]],[],[{'integer',_4,Sz}|[]]}|_11]
				    -| ['compiler_generated'] )
			  ( <[_7|_8]> when 'true' ->
				apply 'lc$^0'/1
				    (_8)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      %% Line 794
			      [{'clause',_4,[{'var',_4,'_'}|[]],[],[{'atom',_4,'undefined'}|[]]}|[]]
			  ( <_106> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_106})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  let <_9> =
		    call %% Line 793
			 'lists':%% Line 793
				 'sort'
			(_1)
		in  %% Line 793
		    apply 'lc$^0'/1
			(_9)
	in  let <S> =
		[%% Line 795
		 {'size',{'fun',_4,{'clauses',_12}}}|%% Line 795
						     []]
	    in  let <_17> =
		    case _2 of
		      %% Line 796
		      <[]> when 'true' ->
			  []
		      %% Line 796
		      <_104> when 'true' ->
			  let <_15> =
			      apply 'abstr'/2
				  (_2, _4)
			  in  [{'join',_15}|[]]
		    end
		in  let <_30> =
			letrec
			    'lc$^1'/1 =
				%% Line 802
				fun (_21) ->
				    case _21 of
				      <[{EqType,TemplateColumns}|_20]> when 'true' ->
					  let <_28> =
					      letrec
						  'lc$^2'/1 =
						      fun (_24) ->
							  case _24 of
							    <[{Col,TemplCols}|_23]> when 'true' ->
								let <_26> =
								    apply 'abstr'/2
									(Col, _4)
								in  let <_25> =
									apply 'abstr'/2
									    (TemplCols, _4)
								    in  let <_27> =
									    apply 'lc$^2'/1
										(_23)
									in  ( [{'clause',_4,[_26|[EqType|[]]],[],[_25|[]]}|_27]
									      -| ['compiler_generated'] )
							    ( <[_22|_23]> when 'true' ->
								  apply 'lc$^2'/1
								      (_23)
							      -| ['compiler_generated'] )
							    <[]> when 'true' ->
								[]
							    ( <_107> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_107})
								    -| [{'function_name',{'lc$^2',1}}] )
							      -| ['compiler_generated'] )
							  end
					      in  apply 'lc$^2'/1
						      (TemplateColumns)
					  in  let <_29> =
						  apply 'lc$^1'/1
						      (_20)
					      in  ( [_28|_29]
						    -| ['compiler_generated'] )
				      ( <[_19|_20]> when 'true' ->
					    apply 'lc$^1'/1
						(_20)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_108> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_108})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  %% Line 802
			    apply 'lc$^1'/1
				(_0)
		    in  let <TCls0> =
			    call %% Line 798
				 'lists':%% Line 798
					 'append'
				(_30)
			in  let <_32> =
				call %% Line 803
				     'lists':%% Line 803
					     'sort'
				    (%% Line 803
				     TCls0)
			    in  let <TCls> =
				    call %% Line 803
					 'erlang':%% Line 803
						  '++'
					(_32, %% Line 803
					      [{'clause',_4,[{'var',_4,'_'}|[{'var',_4,'_'}|[]]],[],[{'nil',_4}|[]]}|[]])
				in  let <T> =
					[%% Line 804
					 {'template',{'fun',_4,{'clauses',TCls}}}|%% Line 804
										  []]
				    in  let <EqColumnConstants> =
					    apply %% Line 808
						  'opt_column_constants'/1
						(_5)
					in  let <CCs> =
						apply %% Line 809
						      'opt_constants'/2
						    (_4, %% Line 809
							 EqColumnConstants)
					    in  let <EqC> = {%% Line 810
						     'constants',%% Line 810
								 {'fun',_4,{'clauses',CCs}}}
						in  let <EqualColumnConstants> =
							apply %% Line 812
							      'opt_column_constants'/1
							    (_6)
						    in  let <ECCs> =
							    apply %% Line 813
								  'opt_constants'/2
								(_4, %% Line 813
								     EqualColumnConstants)
							in  let <EqualC> = {%% Line 814
								 'equal_constants',%% Line 814
										   {'fun',_4,{'clauses',ECCs}}}
							    in  let <_46> =
								    letrec
									'lc$^3'/1 =
									    %% Line 815
									    fun (_44) ->
										case _44 of
										  <['true'|_42]> when 'true' ->
										      let <_45> =
											  apply 'lc$^3'/1
											      (_42)
										      in  ( [EqualC|_45]
											    -| ['compiler_generated'] )
										  ( <[_41|_42]> when 'true' ->
											apply 'lc$^3'/1
											    (_42)
										    -| ['compiler_generated'] )
										  <[]> when 'true' ->
										      []
										  ( <_109> when 'true' ->
											( primop 'match_fail'
											      ({'function_clause',_109})
											  -| [{'function_name',{'lc$^3',1}}] )
										    -| ['compiler_generated'] )
										end
								    in  let <_43> =
									    call %% Line 815
										 'erlang':%% Line 815
											  '=/='
										(%% Line 815
										 CCs, %% Line 815
										      ECCs)
									in  %% Line 815
									    apply 'lc$^3'/1
										([_43|[]])
								in  let <C> =
									[%% Line 815
									 EqC|_46]
								    in  let <_52> =
									    letrec
										'lc$^4'/1 =
										    %% Line 819
										    fun (_50) ->
											case _50 of
											  <[{_@r0 = {IdNo,Col},[_105|[]],_X_FilNs}|_49]> when 'true' ->
											      let <_51> =
												  apply 'lc$^4'/1
												      (_49)
											      in  ( [_@r0|_51]
												    -| ['compiler_generated'] )
											  ( <[_48|_49]> when 'true' ->
												apply 'lc$^4'/1
												    (_49)
											    -| ['compiler_generated'] )
											  <[]> when 'true' ->
											      []
											  ( <_110> when 'true' ->
												( primop 'match_fail'
												      ({'function_clause',_110})
												  -| [{'function_name',{'lc$^4',1}}] )
											    -| ['compiler_generated'] )
											end
									    in  %% Line 819
										apply 'lc$^4'/1
										    (EqualColumnConstants)
									in  let <ConstColsFamily> =
										apply %% Line 820
										      'family_list'/1
										    (_52)
									    in  let <_64> =
										    letrec
											'lc$^5'/1 =
											    %% Line 822
											    fun (_57) ->
												case _57 of
												  <[{IdNo,Cols}|_56]> when 'true' ->
												      let <_58> =
													  call 'erlang':'length'
													      (Cols)
												      in  let <_59> =
													      call 'erlang':'+'
														  (_58, 1)
													  in  let <_60> =
														  call 'lists':'seq'
														      (1, _59)
													      in  let <_61> =
														      call 'erlang':'--'
															  (_60, Cols)
														  in  let <_62> =
															  call 'erlang':'hd'
															      (_61)
														      in  let <_63> =
															      apply 'lc$^5'/1
																  (_56)
															  in  ( [{IdNo,_62}|_63]
																-| ['compiler_generated'] )
												  ( <[_55|_56]> when 'true' ->
													apply 'lc$^5'/1
													    (_56)
												    -| ['compiler_generated'] )
												  <[]> when 'true' ->
												      []
												  ( <_111> when 'true' ->
													( primop 'match_fail'
													      ({'function_clause',_111})
													  -| [{'function_name',{'lc$^5',1}}] )
												    -| ['compiler_generated'] )
												end
										    in  %% Line 822
											apply 'lc$^5'/1
											    (ConstColsFamily)
										in  let <_71> =
											letrec
											    'lc$^6'/1 =
												%% Line 824
												fun (_68) ->
												    case _68 of
												      <[{IdNo,N}|_67]>
													  when call 'erlang':'>'
														(N,
														 0) ->
													  let <_69> =
													      call 'erlang':'-'
														  (N, 1)
													  in  let <_70> =
														  apply 'lc$^6'/1
														      (_67)
													      in  ( [{'clause',_4,[{'integer',_4,IdNo}|[]],[],[{'integer',_4,_69}|[]]}|_70]
														    -| ['compiler_generated'] )
												      ( <[_66|_67]> when 'true' ->
													    apply 'lc$^6'/1
														(_67)
													-| ['compiler_generated'] )
												      <[]> when 'true' ->
													  %% Line 825
													  [{'clause',_4,[{'var',_4,'_'}|[]],[],[{'integer',_4,0}|[]]}|[]]
												      ( <_112> when 'true' ->
													    ( primop 'match_fail'
														  ({'function_clause',_112})
													      -| [{'function_name',{'lc$^6',1}}] )
													-| ['compiler_generated'] )
												    end
											in  %% Line 824
											    apply 'lc$^6'/1
												(_64)
										    in  let <N> =
											    [%% Line 826
											     {'n_leading_constant_columns',{'fun',_4,{'clauses',_71}}}|%% Line 826
																		       []]
											in  let <_79> =
												letrec
												    'lc$^7'/1 =
													%% Line 829
													fun (_76) ->
													    case _76 of
													      <[{IdNo,Cols}|_75]> when 'true' ->
														  let <_77> =
														      apply 'abstr'/2
															  (Cols, _4)
														  in  let <_78> =
															  apply 'lc$^7'/1
															      (_75)
														      in  ( [{'clause',_4,[{'integer',_4,IdNo}|[]],[],[_77|[]]}|_78]
															    -| ['compiler_generated'] )
													      ( <[_74|_75]> when 'true' ->
														    apply 'lc$^7'/1
															(_75)
														-| ['compiler_generated'] )
													      <[]> when 'true' ->
														  %% Line 830
														  [{'clause',_4,[{'var',_4,'_'}|[]],[],[{'nil',_4}|[]]}|[]]
													      ( <_113> when 'true' ->
														    ( primop 'match_fail'
															  ({'function_clause',_113})
														      -| [{'function_name',{'lc$^7',1}}] )
														-| ['compiler_generated'] )
													    end
												in  %% Line 829
												    apply 'lc$^7'/1
													(ConstColsFamily)
											    in  let <CC> =
												    [%% Line 831
												     {'constant_columns',{'fun',_4,{'clauses',_79}}}|%% Line 831
																		     []]
												in  let <_87> =
													letrec
													    'lc$^8'/1 =
														%% Line 834
														fun (_84) ->
														    case _84 of
														      <[{G,MS,Fs}|_83]> when 'true' ->
															  let <_85> =
															      apply 'abstr'/2
																  (Fs, _4)
															  in  let <_86> =
																  apply 'lc$^8'/1
																      (_83)
															      in  ( [{'clause',_4,[{'integer',_4,G}|[]],[],[{'tuple',_4,[MS|[_85|[]]]}|[]]}|_86]
																    -| ['compiler_generated'] )
														      ( <[_82|_83]> when 'true' ->
															    apply 'lc$^8'/1
																(_83)
															-| ['compiler_generated'] )
														      <[]> when 'true' ->
															  %% Line 835
															  [{'clause',_4,[{'var',_4,'_'}|[]],[],[{'atom',_4,'undefined'}|[]]}|[]]
														      ( <_114> when 'true' ->
															    ( primop 'match_fail'
																  ({'function_clause',_114})
															      -| [{'function_name',{'lc$^8',1}}] )
															-| ['compiler_generated'] )
														    end
													in  %% Line 834
													    apply 'lc$^8'/1
														(_3)
												    in  let <MS> =
													    [%% Line 836
													     {'match_specs',{'fun',_4,{'clauses',_87}}}|%% Line 836
																			[]]
													in  let <_95> =
														letrec
														    'lc$^9'/1 =
															%% Line 839
															fun (_93) ->
															    case _93 of
															      <[{Tag,V}|_91]> when 'true' ->
																  let <_94> =
																      apply 'lc$^9'/1
																	  (_91)
																  in  ( [{'clause',_4,[{'atom',_4,Tag}|[]],[],[V|[]]}|_94]
																	-| ['compiler_generated'] )
															      ( <[_90|_91]> when 'true' ->
																    apply 'lc$^9'/1
																	(_91)
																-| ['compiler_generated'] )
															      <[]> when 'true' ->
																  %% Line 840
																  [{'clause',_4,[{'var',_4,'_'}|[]],[],[{'atom',_4,'undefined'}|[]]}|[]]
															      ( <_115> when 'true' ->
																    ( primop 'match_fail'
																	  ({'function_clause',_115})
																      -| [{'function_name',{'lc$^9',1}}] )
																-| ['compiler_generated'] )
															    end
														in  let <_92> =
															call %% Line 839
															     'lists':%% Line 839
																     'append'
															    (%% Line 839
															     [_17|[S|[T|[C|[N|[CC|[MS|[]]]]]]]])
														    in  %% Line 839
															apply 'lc$^9'/1
															    (_92)
													    in  %% Line 841
														{'fun',_4,{'clauses',_95}}
'opt_column_constants'/1 =
    %% Line 843
    fun (_0) ->
	%% Line 844
	( letrec
	      'lc$^0'/1 =
		  fun (_6) ->
		      case _6 of
			<[CC = {{IdNo,_X_Col},Const,_X_FilNs}|_2]>
			    when %% Line 845
			      try
				  let <_3> =
				      call 'erlang':'=/='
					  (IdNo, 0)
				  in  let <_4> =
					  call 'erlang':'length'
					      (Const)
				      in  let <_5> =
					      call 'erlang':'=:='
						  (_4, 1)
					  in  call 'erlang':'or'
						  (_3, _5)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    let <_7> =
				apply 'lc$^0'/1
				    (_2)
			    in  ( [CC|_7]
				  -| ['compiler_generated'] )
			( <[_1|_2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_9> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_9})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_0)
	  -| ['list_comprehension'] )
'opt_constants'/2 =
    %% Line 847
    fun (_0,_1) ->
	let <_6> =
	    letrec
		'lc$^0'/1 =
		    %% Line 848
		    fun (_4) ->
			case _4 of
			  <[{{IdNo,_X_Col},_X_Const,_X_FilNs}|_3]> when 'true' ->
			      let <_5> =
				  apply 'lc$^0'/1
				      (_3)
			      in  ( [IdNo|_5]
				    -| ['compiler_generated'] )
			  ( <[_2|_3]> when 'true' ->
				apply 'lc$^0'/1
				    (_3)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_15> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_15})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 848
		apply 'lc$^0'/1
		    (_1)
	in  let <Ns> =
		call %% Line 848
		     'lists':%% Line 848
			     'usort'
		    (_6)
	    in  %% Line 850
		( letrec
		      'lc$^1'/1 =
			  fun (_10) ->
			      case _10 of
				<[IdNo|_9]> when 'true' ->
				    let <_11> =
					apply 'column_fun'/3
					    (_1, IdNo, _0)
				    in  let <_12> =
					    apply 'lc$^1'/1
						(_9)
					in  ( [{'clause',_0,[{'integer',_0,IdNo}|[]],[],[_11|[]]}|_12]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    %% Line 851
				    [{'clause',_0,[{'var',_0,'_'}|[]],[],[{'atom',_0,'no_column_fun'}|[]]}|[]]
				( <_16> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_16})
					-| [{'function_name',{'lc$^1',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^1'/1
			  (Ns)
		  -| ['list_comprehension'] )
'abstr'/2 =
    %% Line 853
    fun (_0,_1) ->
	let <_2> =
	    apply %% Line 854
		  'loc'/1
		(_1)
	in  %% Line 854
	    call 'erl_parse':'abstract'
		(_0, _2)
'join_quals'/6 =
    %% Line 857
    fun (_0,_1,_2,_3,_4,_5) ->
	let <_14> =
	    fun (_11,_10) ->
		%% Line 859
		case <_11,_10> of
		  <{_X_QId,{_X_QIVs,{{'fil',_111},GoI,SI}}},%% Line 860
							    {GoI0,_X_SI0}>
		      when %% Line 860
			call 'erlang':'>='
			    (GoI,
			     GoI0) ->
		      let <_7> =
			  call %% Line 861
			       'erlang':%% Line 861
					'+'
			      (%% Line 861
			       GoI, %% Line 861
				    2)
		      in  let <_6> =
			      call %% Line 861
				   'erlang':%% Line 861
					    '+'
				  (%% Line 861
				   SI, %% Line 861
				       1)
			  in  %% Line 861
			      {_7,_6}
		  %% Line 862
		  <{_X_QId,{_X_QIVs,{{'gen',_112,_113,_114},GoI,SI}}},%% Line 863
								      {GoI0,_X_SI0}>
		      when %% Line 863
			call 'erlang':'>='
			    (GoI,
			     GoI0) ->
		      let <_9> =
			  call %% Line 864
			       'erlang':%% Line 864
					'+'
			      (%% Line 864
			       GoI, %% Line 864
				    3)
		      in  let <_8> =
			      call %% Line 864
				   'erlang':%% Line 864
					    '+'
				  (%% Line 864
				   SI, %% Line 864
				       2)
			  in  %% Line 864
			      {_9,_8}
		  %% Line 865
		  <_115,A> when 'true' ->
		      %% Line 866
		      A
		end
	in  %% Line 858
	    case %% Line 859
		 call 'lists':'foldl'
		     (_14, %% Line 867
			   {0,0}, _1) of
	      <{LastGoI,LastSI}> when 'true' ->
		  let <_20> =
		      letrec
			  'lc$^1'/1 =
			      %% Line 868
			      fun (_18) ->
				  case _18 of
				    <[{QId,{_X_QIVs,{_X_Q,_X_GoI,_X_SI}}}|_17]> when 'true' ->
					let <_19> =
					    apply 'lc$^1'/1
						(_17)
					in  ( [QId|_19]
					      -| ['compiler_generated'] )
				    ( <[_16|_17]> when 'true' ->
					  apply 'lc$^1'/1
					      (_17)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_130> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_130})
					    -| [{'function_name',{'lc$^1',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  %% Line 868
			  apply 'lc$^1'/1
			      (_1)
		  in  let <LastQId> =
			  call %% Line 868
			       'lists':%% Line 868
				       'max'
			      (_20)
		      in  let <_40> =
			      case _0 of
				%% Line 875
				<{EqualCols,MatchCols}> when 'true' ->
				    let <EQs> =
					apply %% Line 876
					      'join_qnums'/1
					    (%% Line 876
					     EqualCols)
				    in  let <MQs> =
					    apply %% Line 877
						  'join_qnums'/1
						(%% Line 877
						 MatchCols)
					in  let <_29> =
						letrec
						    'lc$^2'/1 =
							%% Line 879
							fun (_27) ->
							    case _27 of
							      <[{Q1,Q2}|_25]> when 'true' ->
								  let <_28> =
								      apply 'lc$^2'/1
									  (_25)
								  in  ( [{Q1,Q2,'=='}|_28]
									-| ['compiler_generated'] )
							      ( <[_24|_25]> when 'true' ->
								    apply 'lc$^2'/1
									(_25)
								-| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_131> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_131})
								      -| [{'function_name',{'lc$^2',1}}] )
								-| ['compiler_generated'] )
							    end
						in  let <_26> =
							call %% Line 879
							     'erlang':%% Line 879
								      '--'
							    (%% Line 879
							     EQs, %% Line 879
								  MQs)
						    in  %% Line 879
							apply 'lc$^2'/1
							    (_26)
					    in  %% Line 878
						( letrec
						      'lc$^3'/1 =
							  fun (_32) ->
							      case _32 of
								<[{Q1,Q2}|_31]> when 'true' ->
								    let <_33> =
									apply 'lc$^3'/1
									    (_31)
								    in  ( [{Q1,Q2,'=:='}|_33]
									  -| ['compiler_generated'] )
								( <[_30|_31]> when 'true' ->
								      apply 'lc$^3'/1
									  (_31)
								  -| ['compiler_generated'] )
								<[]> when 'true' ->
								    _29
								( <_132> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_132})
									-| [{'function_name',{'lc$^3',1}}] )
								  -| ['compiler_generated'] )
							      end
						  in  apply 'lc$^3'/1
							  (MQs)
						  -| ['list_comprehension'] )
				%% Line 880
				<EqualCols> when 'true' ->
				    %% Line 881
				    ( letrec
					  'lc$^4'/1 =
					      fun (_37) ->
						  case _37 of
						    <[{Q1,Q2}|_35]> when 'true' ->
							let <_38> =
							    apply 'lc$^4'/1
								(_35)
							in  ( [{Q1,Q2,'=='}|_38]
							      -| ['compiler_generated'] )
						    ( <[_34|_35]> when 'true' ->
							  apply 'lc$^4'/1
							      (_35)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_133> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_133})
							    -| [{'function_name',{'lc$^4',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  let <_36> =
					      apply 'join_qnums'/1
						  (EqualCols)
					  in  apply 'lc$^4'/1
						  (_36)
				      -| ['list_comprehension'] )
			      end
			  in  let <_73> =
				  letrec
				      'lc$^5'/1 =
					  %% Line 893
					  fun (_45) ->
					      case _45 of
						<[{Q1,Q2,Op}|_43]> when 'true' ->
						    let <_56> =
							letrec
							    'lc$^6'/1 =
								fun (_54) ->
								    case _54 of
								      <[{QId,{QIVs,{{'gen',P,_116,GV},_X_GoI,_X_SI}}}|_47]>
									  when ( try
										  ( let <_50> =
											case ( call ( 'erlang'
												      -| ['compiler_generated'] ):( 'is_record'
																    -| ['compiler_generated'] )
												   (QId, ( 'qid'
													   -| ['compiler_generated'] ), ( 3
																	  -| ['compiler_generated'] ))
											       -| ['compiler_generated'] ) of
											  ( <( 'true'
											       -| ['compiler_generated'] )> when 'true' ->
												( 'true'
												  -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
											  ( <( 'false'
											       -| ['compiler_generated'] )> when 'true' ->
												( 'fail'
												  -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
											  ( <( _48
											       -| ['compiler_generated'] )> when 'true' ->
												( _48
												  -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
											end
										    in  let <_51> =
											    call 'erlang':'=:='
												(( _50
												   -| ['compiler_generated'] ), 'true')
											in  let <_52> =
												call 'erlang':'element'
												    (3, QId)
											    in  let <_53> =
												    call 'erlang':'=:='
													(_52, Q1)
												in  ( call ( 'erlang'
													     -| ['compiler_generated'] ):( 'and'
																	   -| ['compiler_generated'] )
													  (_51, _53)
												      -| ['compiler_generated'] )
										    -| ['compiler_generated'] )
									      of <Try> ->
										  Try
									      catch <T,R> ->
										  'false'
									      -| ['compiler_generated'] ) ->
									  let <_55> =
									      apply 'lc$^6'/1
										  (_47)
									  in  ( [{QId,P,GV,QIVs}|_55]
										-| ['compiler_generated'] )
								      ( <[_46|_47]> when 'true' ->
									    apply 'lc$^6'/1
										(_47)
									-| ['compiler_generated'] )
								      <[]> when 'true' ->
									  []
								      ( <_134> when 'true' ->
									    ( primop 'match_fail'
										  ({'function_clause',_134})
									      -| [{'function_name',{'lc$^6',1}}] )
									-| ['compiler_generated'] )
								    end
							in  apply 'lc$^6'/1
								(_1)
						    in  case _56 of
							  <[{QId1,P1,GV1,QIVs1}|[]]> when 'true' ->
							      let <_69> =
								  letrec
								      'lc$^7'/1 =
									  fun (_66) ->
									      case _66 of
										<[{QId,{QIVs,{{'gen',P,_117,GV},_118,_119}}}|_59]>
										    when ( try
											    ( let <_62> =
												  case ( call ( 'erlang'
														-| ['compiler_generated'] ):( 'is_record'
																	      -| ['compiler_generated'] )
													     (QId, ( 'qid'
														     -| ['compiler_generated'] ), ( 3
																		    -| ['compiler_generated'] ))
													 -| ['compiler_generated'] ) of
												    ( <( 'true'
													 -| ['compiler_generated'] )> when 'true' ->
													  ( 'true'
													    -| ['compiler_generated'] )
												      -| ['compiler_generated'] )
												    ( <( 'false'
													 -| ['compiler_generated'] )> when 'true' ->
													  ( 'fail'
													    -| ['compiler_generated'] )
												      -| ['compiler_generated'] )
												    ( <( _60
													 -| ['compiler_generated'] )> when 'true' ->
													  ( _60
													    -| ['compiler_generated'] )
												      -| ['compiler_generated'] )
												  end
											      in  let <_63> =
												      call 'erlang':'=:='
													  (( _62
													     -| ['compiler_generated'] ), 'true')
												  in  let <_64> =
													  call 'erlang':'element'
													      (3, QId)
												      in  let <_65> =
													      call 'erlang':'=:='
														  (_64, Q2)
													  in  ( call ( 'erlang'
														       -| ['compiler_generated'] ):( 'and'
																		     -| ['compiler_generated'] )
														    (_63, _65)
														-| ['compiler_generated'] )
											      -| ['compiler_generated'] )
											of <Try> ->
											    Try
											catch <T,R> ->
											    'false'
											-| ['compiler_generated'] ) ->
										    let <_67> =
											call 'erlang':'--'
											    (QIVs, [GV|[]])
										    in  let <_68> =
											    apply 'lc$^7'/1
												(_59)
											in  ( [{QId,P,_67}|_68]
											      -| ['compiler_generated'] )
										( <[_58|_59]> when 'true' ->
										      apply 'lc$^7'/1
											  (_59)
										  -| ['compiler_generated'] )
										<[]> when 'true' ->
										    []
										( <_135> when 'true' ->
										      ( primop 'match_fail'
											    ({'function_clause',_135})
											-| [{'function_name',{'lc$^7',1}}] )
										  -| ['compiler_generated'] )
									      end
								  in  apply 'lc$^7'/1
									  (_1)
							      in  case _69 of
								    <[{QId2,P2,QIVs2}|[]]> when 'true' ->
									let <_71> =
									    call 'erlang':'++'
										(QIVs1, QIVs2)
									in  let <_72> =
										apply 'lc$^5'/1
										    (_43)
									    in  ( [{QId1,Op,P1,GV1,_71,QId2,P2}|_72]
										  -| ['compiler_generated'] )
								    ( <_70> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_70})
								      -| ['compiler_generated'] )
								  end
							  ( <_57> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_57})
							    -| ['compiler_generated'] )
							end
						( <[_42|_43]> when 'true' ->
						      apply 'lc$^5'/1
							  (_43)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_136> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_136})
							-| [{'function_name',{'lc$^5',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  let <_44> =
					  call %% Line 893
					       'lists':%% Line 893
						       'usort'
					      (_40)
				      in  %% Line 893
					  apply 'lc$^5'/1
					      (_44)
			      in  let <_75> =
				      apply %% Line 894
					    'aux_vars'/3
					  (%% Line 894
					   ['F'|['H'|['O'|['C']]]], _3, _5)
				  in  let <Aux> =
					  apply %% Line 894
						'abst_vars'/2
					      (_75, _2)
				      in  let <F> =
					      fun (_100,_99) ->
						  %% Line 895
						  case <_100,_99> of
						    <{QId1,Op,P1,GV1,QIVs,QId2,P2},{QId,GoI,SI}> when 'true' ->
							let <AP1> =
							    apply %% Line 896
								  'anon_pattern'/1
								(%% Line 896
								 P1)
							in  let <AP2> =
								apply %% Line 897
								      'anon_pattern'/1
								    (%% Line 897
								     P2)
							    in  let <Cs1> =
								    apply %% Line 898
									  'join_handle_constants'/2
									(%% Line 898
									 QId1, _4)
								in  let <Cs2> =
									apply %% Line 899
									      'join_handle_constants'/2
									    (%% Line 899
									     QId2, _4)
								    in  let <H1> =
									    apply %% Line 900
										  'join_handle'/4
										(%% Line 900
										 AP1, _2, %% Line 900
											  Aux, %% Line 900
											       Cs1)
									in  let <H2> =
										apply %% Line 901
										      'join_handle'/4
										    (%% Line 901
										     AP2, _2, %% Line 901
											      Aux, %% Line 901
												   Cs2)
									    in  %% Line 903
										( case QId1 of
										    ( <( {'qid',_120,_rec12}
											 -| ['compiler_generated'] )> when 'true' ->
											  ( case QId2 of
											      ( <( {'qid',_122,_rec13}
												   -| ['compiler_generated'] )> when 'true' ->
												    let <Join> =
													{'join',Op,_rec12,_rec13,H1,H2,Cs1,Cs2}
												    in  %% Line 904
													( case QId of
													    ( <( {'qid',_124,_rec16}
														 -| ['compiler_generated'] )> when 'true' ->
														  let <_rec14> =
														      call 'erlang':'+'
															  (_rec16, 1)
														  in  case QId of
															<{'qid',_126,_127}> when 'true' ->
															    let <_93> =
																call 'erlang':'setelement'
																    (3, QId, _rec14)
															    in  let <G> =
																    {_93,%% Line 905
																	 {QIVs,{{'gen',{'cons',_2,P1,P2},Join,GV1},GoI,SI}}}
																in  let <_97> =
																	call %% Line 906
																	     'erlang':%% Line 906
																		      '+'
																	    (%% Line 906
																	     GoI, %% Line 906
																		  3)
																    in  let <_96> =
																	    call %% Line 906
																		 'erlang':%% Line 906
																			  '+'
																		(%% Line 906
																		 SI, %% Line 906
																		     2)
																	in  let <A> = {_93,_97,_96}
																	    in  %% Line 907
																		{G,A}
															( <_128> when 'true' ->
															      ( call ( 'erlang'
																       -| ['compiler_generated'] ):( 'error'
																				     -| ['compiler_generated'] )
																    (( {'badrecord','qid'}
																       -| ['compiler_generated'] ))
																-| ['compiler_generated'] )
															  -| ['compiler_generated'] )
														      end
													      -| ['compiler_generated'] )
													    ( <_125> when 'true' ->
														  ( call ( 'erlang'
															   -| ['compiler_generated'] ):( 'error'
																			 -| ['compiler_generated'] )
															(( {'badrecord','qid'}
															   -| ['compiler_generated'] ))
														    -| ['compiler_generated'] )
													      -| ['compiler_generated'] )
													  end
													  -| ['compiler_generated'] )
												-| ['compiler_generated'] )
											      ( <_123> when 'true' ->
												    ( call ( 'erlang'
													     -| ['compiler_generated'] ):( 'error'
																	   -| ['compiler_generated'] )
													  (( {'badrecord','qid'}
													     -| ['compiler_generated'] ))
												      -| ['compiler_generated'] )
												-| ['compiler_generated'] )
											    end
											    -| ['compiler_generated'] )
										      -| ['compiler_generated'] )
										    ( <_121> when 'true' ->
											  ( call ( 'erlang'
												   -| ['compiler_generated'] ):( 'error'
																 -| ['compiler_generated'] )
												(( {'badrecord','qid'}
												   -| ['compiler_generated'] ))
											    -| ['compiler_generated'] )
										      -| ['compiler_generated'] )
										  end
										  -| ['compiler_generated'] )
						    ( <_102,_101> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_102,_101})
							    -| [{'function_name',{'-join_quals/6-fun-8-',2}}] )
						      -| ['compiler_generated'] )
						  end
					  in  %% Line 909
					      case call 'lists':'mapfoldl'
						       (F, {LastQId,LastGoI,LastSI}, _73) of
						<{Qs,_129}> when 'true' ->
						    %% Line 910
						    Qs
						( <_104> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_104})
						  -| ['compiler_generated'] )
					      end
	      ( <_15> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_15})
		-| ['compiler_generated'] )
	    end
'join_qnums'/1 =
    %% Line 912
    fun (_0) ->
	let <_5> =
	    letrec
		'lc$^0'/1 =
		    %% Line 913
		    fun (_3) ->
			case _3 of
			  <[{[{Q1,_X_C1}|[{Q2,_X_C2}|[]]],_X_Skip}|_2]> when 'true' ->
			      let <_4> =
				  apply 'lc$^0'/1
				      (_2)
			      in  ( [{Q1,Q2}|_4]
				    -| ['compiler_generated'] )
			  ( <[_1|_2]> when 'true' ->
				apply 'lc$^0'/1
				    (_2)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_7> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_7})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 913
		apply 'lc$^0'/1
		    (_0)
	in  %% Line 913
	    call 'lists':'usort'
		(_5)
'anon_pattern'/1 =
    %% Line 916
    fun (_0) ->
	let <_2> =
	    apply %% Line 917
		  'occ_vars'/1
		(_0)
	in  let <_1> =
		call %% Line 917
		     'qlc':%% Line 917
			   'vars'
		    (_0)
	    in  let <_3> =
		    call %% Line 917
			 'erlang':%% Line 917
				  '--'
			(_2, _1)
		in  let <MoreThanOnce> =
			call %% Line 917
			     'lists':%% Line 917
				     'usort'
			    (_3)
		    in  let <_10> =
			    fun (_7,_6) ->
				%% Line 918
				case <_7,_6> of
				  <_@r0 = {'var',L,V},A> when 'true' ->
				      %% Line 919
				      case call 'lists':'member'
					       (V, MoreThanOnce) of
					%% Line 920
					<'true'> when 'true' ->
					    %% Line 921
					    {_@r0,A}
					%% Line 922
					<'false'> when 'true' ->
					    %% Line 923
					    {{'var',L,'_'},A}
					( <_5> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_5})
					  -| ['compiler_generated'] )
				      end
				  ( <_9,_8> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_9,_8})
					  -| [{'function_name',{'-anon_pattern/1-fun-0-',2}}] )
				    -| ['compiler_generated'] )
				end
			in  %% Line 918
			    case apply 'var_mapfold'/3
				     (_10, %% Line 925
					   'foo', _0) of
			      <{AP,'foo'}> when 'true' ->
				  %% Line 926
				  AP
			      ( <_11> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_11})
				-| ['compiler_generated'] )
			    end
'join_handle'/4 =
    %% Line 934
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <AP,L,[F|[H|[O|_@r0 = [C|[]]]]],Constants> when 'true' ->
	      %% Line 935
	      case <AP,Constants> of
		%% Line 936
		<( {( 'var'
		      -| ['compiler_generated'] ),_32,_33}
		   -| ['compiler_generated'] ),( []
						 -| ['compiler_generated'] )> when 'true' ->
		    %% Line 937
		    {'fun',L,{'clauses',[{'clause',L,[H|[]],[],[H|[]]}|[]]}}
		%% Line 938
		<( _35
		   -| ['compiler_generated'] ),( _36
						 -| ['compiler_generated'] )> when 'true' ->
		    let <A> =
			apply %% Line 939
			      'anno0'/0
			    ()
		    in  let <_16> =
			    letrec
				'lc$^0'/1 =
				    %% Line 943
				    fun (_7) ->
					case _7 of
					  <[{Col,Cs}|_6]> when 'true' ->
					      let <Call> =
						  {'call',A,{'atom',A,'element'},[{'integer',A,Col}|[O|[]]]}
					      in  let <_13> =
						      letrec
							  'lc$^1'/1 =
							      fun (_11) ->
								  case _11 of
								    <[{Con,Op}|_10]> when 'true' ->
									let <_12> =
									    apply 'lc$^1'/1
										(_10)
									in  ( [{'op',A,Op,Con,Call}|_12]
									      -| ['compiler_generated'] )
								    ( <[_9|_10]> when 'true' ->
									  apply 'lc$^1'/1
									      (_10)
								      -| ['compiler_generated'] )
								    <[]> when 'true' ->
									[]
								    ( <_39> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_39})
									    -| [{'function_name',{'lc$^1',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  apply 'lc$^1'/1
							      (Cs)
						  in  let <_14> =
							  apply 'list2op'/2
							      (_13, 'or')
						      in  let <_15> =
							      apply 'lc$^0'/1
								  (_6)
							  in  ( [_14|_15]
								-| ['compiler_generated'] )
					  ( <[_5|_6]> when 'true' ->
						apply 'lc$^0'/1
						    (_6)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_40> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_40})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  %% Line 943
				apply 'lc$^0'/1
				    (Constants)
			in  let <_18> =
				case <> of
				  %% Line 944
				  <>
				      when call 'erlang':'=:='
					    (_16,
					     []) ->
				      _16
				  %% Line 944
				  <> when 'true' ->
				      [_16|[]]
				end
			    in  let <_20> =
				    apply %% Line 945
					  'closure'/2
					(%% Line 945
					 {'call',L,F,[F|_@r0]}, %% Line 945
								L)
				in  let <CC1> =
					{%% Line 945
					 'clause',%% Line 945
						  L,%% Line 945
						    [AP|[]],_18,%% Line 945
								[{'cons',L,O,_20}|[]]}
				    in  let <CC2> =
					    {%% Line 946
					     'clause',%% Line 946
						      L,%% Line 946
							[{'var',L,'_'}|[]],%% Line 946
									   [],%% Line 946
									      [{'call',L,F,[F|_@r0]}|[]]}
					in  let <Case> =
						{%% Line 947
						 'case',%% Line 947
							L,%% Line 947
							  O,%% Line 947
							    [CC1|[CC2|[]]]}
					    in  let <Cls> =
						    [%% Line 948
						     {'clause',L,[{'var',L,'_'}|[{'nil',L}|[]]],[],[{'nil',L}|[]]}|%% Line 949
														   [{'clause',L,[F|[{'cons',L,O,C}|[]]],[],[Case|[]]}|%% Line 950
																				      [{'clause',L,[F|_@r0],[[{'call',L,{'atom',L,'is_function'},_@r0}|[]]|[]],%% Line 951
																													       [{'call',L,F,[F|[{'call',L,C,[]}|[]]]}|[]]}|%% Line 952
																																			   [{'clause',L,[{'var',L,'_'}|_@r0],[],_@r0}|[]]]]]
						in  let <Fun> = {%% Line 953
							 'fun',%% Line 953
							       L,%% Line 953
								 {'clauses',Cls}}
						    in  let <_26> =
							    apply %% Line 955
								  'closure'/2
								(%% Line 955
								 {'call',L,F,[F|[H|[]]]}, %% Line 956
											  L)
							in  %% Line 954
							    {'fun',L,{'clauses',[{'clause',L,[H|[]],[],[{'match',L,F,Fun}|%% Line 955
															  [_26|%% Line 956
															       []]]}|%% Line 956
																     []]}}
	      end
	  ( <_31,_30,_29,_28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_31,_30,_29,_28})
		  -| [{'function_name',{'join_handle',4}}] )
	    -| ['compiler_generated'] )
	end
'join_handle_constants'/2 =
    %% Line 959
    fun (_0,_1) ->
	%% Line 960
	( case _0 of
	    ( <( {'qid',_8,_rec17}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 961
		  case call 'lists':'keyfind'
			   (_rec17, 1, _1) of
		    %% Line 962
		    <{_10,ConstOps}>
			when call 'erlang':'=:='
			      (_10,
			       _rec17) ->
			%% Line 963
			ConstOps
		    %% Line 964
		    <'false'> when 'true' ->
			%% Line 965
			[]
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_5})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_9> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','qid'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'column_fun'/3 =
    %% Line 978
    fun (_0,_1,_2) ->
	let <A> =
	    apply %% Line 979
		  'anno0'/0
		()
	in  let <_27> =
		letrec
		    'lc$^0'/1 =
			%% Line 998
			fun (_6) ->
			    case _6 of
			      <[{{CIdNo,Col},Vs0,{FTag,Fils}}|_5]>
				  when %% Line 999
				    call 'erlang':'=:='
					(CIdNo,
					 _1) ->
				  case call 'erlang':'=/='
					   (Vs0, []) of
				    <'true'> when 'true' ->
					let <Vs1> =
					    apply 'list2cons'/1
						(Vs0)
					in  let <_13> =
						fun (_10,_9) ->
						    {'cons',A,{'integer',A,_10},_9}
					    in  let <_14> =
						    call 'lists':'foldr'
							(_13, {'nil',A}, Fils)
						in  let <Fils1> =
							{'tuple',A,[{'atom',A,FTag}|[_14|[]]]}
						    in  let <_16> =
							    call 'qlc':'vars'
								(Vs1)
							in  let <_22> =
								case call 'ordsets':'to_list'
									 (_16) of
								  <Imp>
								      when try
									    let <_17> =
										call 'erlang':'length'
										    (Imp)
									    in  let <_18> =
										    call 'erlang':'>'
											(_17, 0)
										in  let <_19> =
											call 'erlang':'length'
											    (Vs0)
										    in  let <_20> =
											    call 'erlang':'>'
												(_19, 1)
											in  call 'erlang':'and'
												(_18, _20)
									of <Try> ->
									    Try
									catch <T,R> ->
									    'false' ->
								      'usort_needed'
								  <_33> when 'true' ->
								      'values'
								end
							    in  let <Vs> =
								    {'tuple',A,[{'atom',A,_22}|[Vs1|[Fils1|[]]]]}
								in  let <_25> =
									call 'erl_parse':'abstract'
									    (Col)
								    in  let <_26> =
									    apply 'lc$^0'/1
										(_5)
									in  ( [{'clause',A,[_25|[]],[],[Vs|[]]}|_26]
									      -| ['compiler_generated'] )
				    ( <_7> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_7})
				      -| ['compiler_generated'] )
				  end
			      ( <[_4|_5]> when 'true' ->
				    apply 'lc$^0'/1
					(_5)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  %% Line 1000
				  [{'clause',A,[{'var',A,'_'}|[]],[],[{'atom',A,'false'}|[]]}|[]]
			      ( <_36> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_36})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  %% Line 998
		    apply 'lc$^0'/1
			(_0)
	    in  let <ColCls> =
		    apply %% Line 1001
			  'set_anno'/2
			(_27, _2)
		in  %% Line 1002
		    {'fun',_2,{'clauses',ColCls}}
'template_columns'/5 =
    %% Line 1016
    fun (_0,_1,_2,_3,_4) ->
	let <_5> =
	    apply %% Line 1017
		  'pre_expand'/1
		(_1)
	in  let <E> =
		apply %% Line 1017
		      'expand_expr_records'/2
		    (_5, _4)
	    in  let <TemplateAsPattern> =
		    apply %% Line 1018
			  'template_as_pattern'/1
			(%% Line 1018
			 E)
		in  let <Qs> =
			[%% Line 1019
			 TemplateAsPattern|_0]
		    in  let <EqualColumns> =
			    apply %% Line 1020
				  'equal_columns2'/4
				(%% Line 1020
				 Qs, _2, _3, _4)
			in  let <MatchColumns> =
				apply %% Line 1021
				      'eq_columns2'/4
				    (%% Line 1021
				     Qs, _2, _3, _4)
			    in  let <Equal> =
				    apply %% Line 1022
					  'template_cols'/1
					(%% Line 1022
					 EqualColumns)
				in  let <Match> =
					apply %% Line 1023
					      'template_cols'/1
					    (%% Line 1023
					     MatchColumns)
				    in  let <L> =
					    apply %% Line 1024
						  'anno0'/0
						()
					in  %% Line 1025
					    case <> of
					      %% Line 1026
					      <>
						  when call 'erlang':'=:='
							(Match,
							 Equal) ->
						  %% Line 1027
						  [{{'var',L,'_'},Match}|[]]
					      %% Line 1028
					      <> when 'true' ->
						  %% Line 1029
						  [{{'atom',L,'=='},Equal}|[{{'atom',L,'=:='},Match}|[]]]
					    end
'equal_columns2'/4 =
    %% Line 1032
    fun (_0,_1,_2,_3) ->
	%% Line 1033
	case %% Line 1034
	     apply 'join_info'/5
		 (_0, _1, _2, _3, ( '=='
				    -| ['compiler_generated'] )) of
	  <{JI,_X_Skip}> when 'true' ->
	      %% Line 1035
	      JI
	  ( <_6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_6})
	    -| ['compiler_generated'] )
	end
'eq_columns2'/4 =
    %% Line 1037
    fun (_0,_1,_2,_3) ->
	%% Line 1038
	case %% Line 1039
	     apply 'join_info'/5
		 (_0, _1, _2, _3, ( '=:='
				    -| ['compiler_generated'] )) of
	  <{JI,_X_SKip}> when 'true' ->
	      %% Line 1040
	      JI
	  ( <_6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_6})
	    -| ['compiler_generated'] )
	end
'template_cols'/1 =
    %% Line 1042
    fun (_0) ->
	let <_16> =
	    letrec
		'lc$^1'/1 =
		    %% Line 1044
		    fun (_11) ->
			case _11 of
			  <[Class|_2]> when 'true' ->
			      %% Line 1045
			      ( letrec
				    'lc$^2'/1 =
					fun (_12) ->
					    case _12 of
					      <[_@r0 = {IdNo,Col}|_4]>
						  when %% Line 1046
						    call 'erlang':'=/='
							(IdNo,
							 0) ->
						  let <_9> =
						      letrec
							  'lc$^0'/1 =
							      %% Line 1047
							      fun (_7) ->
								  case _7 of
								    <[{0,C}|_6]> when 'true' ->
									let <_8> =
									    apply 'lc$^0'/1
										(_6)
									in  ( [C|_8]
									      -| ['compiler_generated'] )
								    ( <[_5|_6]> when 'true' ->
									  apply 'lc$^0'/1
									      (_6)
								      -| ['compiler_generated'] )
								    <[]> when 'true' ->
									[]
								    ( <_18> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_18})
									    -| [{'function_name',{'lc$^0',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  %% Line 1047
							  apply 'lc$^0'/1
							      (Class)
						  in  %% Line 1047
						      ( case <> of
							  <>
							      when call 'erlang':'=/='
								    ([],
								     _9) ->
							      let <_13> =
								  call 'lists':'usort'
								      (_9)
							      in  let <_14> =
								      apply 'lc$^2'/1
									  (_4)
								  in  ( [{_@r0,_13}|_14]
									-| ['compiler_generated'] )
							  ( <> when 'true' ->
								apply 'lc$^2'/1
								    (_4)
							    -| ['compiler_generated'] )
							end
							-| ['list_comprehension'] )
					      ( <[_3|_4]> when 'true' ->
						    apply 'lc$^2'/1
							(_4)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  apply 'lc$^1'/1
						      (_2)
					      ( <_19> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_19})
						      -| [{'function_name',{'lc$^2',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^2'/1
					(Class)
				-| ['list_comprehension'] )
			  <[]> when 'true' ->
			      []
			  ( <_20> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_20})
				  -| [{'function_name',{'lc$^1',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 1044
		apply 'lc$^1'/1
		    (_0)
	in  %% Line 1043
	    call 'lists':'sort'
		(_16)
'template_as_pattern'/1 =
    %% Line 1049
    fun (_0) ->
	let <P> =
	    apply %% Line 1050
		  'simple_template'/1
		(_0)
	in  let <_2> =
		apply %% Line 1051
		      'anno0'/0
		    ()
	    in  %% Line 1051
		{{'qid','template',0},'foo','foo',{'gen',P,{'nil',_2}}}
'simple_template'/1 =
    %% Line 1053
    fun (_0) ->
	case _0 of
	  <{'call',L,Call = {'remote',_13,{'atom',_14,'erlang'},{'atom',_15,'element'}},%% Line 1054
											[A1 = {'integer',_16,I}|[A2|[]]]}>
	      when %% Line 1054
		call 'erlang':'>'
		    (I,
		     0) ->
	      let <_1> =
		  apply %% Line 1056
			'simple_template'/1
		      (%% Line 1056
		       A2)
	      in  %% Line 1056
		  {'call',L,Call,[A1|[_1|[]]]}
	  %% Line 1057
	  <E = {'var',_17,_18}> when 'true' ->
	      %% Line 1058
	      E
	  %% Line 1059
	  <{'tuple',L,Es}> when 'true' ->
	      let <_7> =
		  letrec
		      'lc$^0'/1 =
			  %% Line 1060
			  fun (_4) ->
			      case _4 of
				<[E|_3]> when 'true' ->
				    let <_5> =
					apply 'simple_template'/1
					    (E)
				    in  let <_6> =
					    apply 'lc$^0'/1
						(_3)
					in  ( [_5|_6]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_21> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_21})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  %% Line 1060
		      apply 'lc$^0'/1
			  (Es)
	      in  %% Line 1060
		  {'tuple',L,_7}
	  %% Line 1061
	  <{'cons',L,H,T}> when 'true' ->
	      let <_9> =
		  apply %% Line 1062
			'simple_template'/1
		      (%% Line 1062
		       H)
	      in  let <_8> =
		      apply %% Line 1062
			    'simple_template'/1
			  (%% Line 1062
			   T)
		  in  %% Line 1062
		      {'cons',L,_9,_8}
	  %% Line 1063
	  <E> when 'true' ->
	      let <_10> =
		  catch
		      %% Line 1064
		      call 'erl_parse':'normalise'
			  (E)
	      in  %% Line 1064
		  case _10 of
		    %% Line 1065
		    <{'EXIT',_19}> when 'true' ->
			apply 'unique_var'/0
			    ()
		    %% Line 1066
		    <_20> when 'true' ->
			E
		  end
	end
'qualifier_dependencies'/2 =
    %% Line 1071
    fun (_0,_1) ->
	let <_9> =
	    letrec
		'lc$^0'/1 =
		    %% Line 1072
		    fun (_6) ->
			case _6 of
			  <[{QId,IVs}|_3]> when 'true' ->
			      ( letrec
				    'lc$^1'/1 =
					fun (_7) ->
					    case _7 of
					      <[IV|_5]> when 'true' ->
						  let <_8> =
						      apply 'lc$^1'/1
							  (_5)
						  in  ( [{IV,QId}|_8]
							-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  apply 'lc$^0'/1
						      (_3)
					      ( <_45> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_45})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^1'/1
					(IVs)
				-| ['list_comprehension'] )
			  ( <[_2|_3]> when 'true' ->
				apply 'lc$^0'/1
				    (_3)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_46> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_46})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 1072
		apply 'lc$^0'/1
		    (_1)
	in  let <Intro> =
		call %% Line 1072
		     'sofs':%% Line 1072
			    'relation'
		    (_9)
	    in  %% Line 1073
		case apply 'qual_data'/1
			 (_0) of
		  <{FilterData,_44}> when 'true' ->
		      let <_20> =
			  letrec
			      'lc$^2'/1 =
				  %% Line 1075
				  fun (_17) ->
				      case _17 of
					<[{QId,{'fil',F}}|_13]> when 'true' ->
					    %% Line 1076
					    ( letrec
						  'lc$^3'/1 =
						      fun (_18) ->
							  case _18 of
							    <[UV|_15]> when 'true' ->
								let <_19> =
								    apply 'lc$^3'/1
									(_15)
								in  ( [{QId,UV}|_19]
								      -| ['compiler_generated'] )
							    <[]> when 'true' ->
								apply 'lc$^2'/1
								    (_13)
							    ( <_47> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_47})
								    -| [{'function_name',{'lc$^3',1}}] )
							      -| ['compiler_generated'] )
							  end
					      in  let <_16> =
						      call 'qlc':'vars'
							  (F)
						  in  apply 'lc$^3'/1
							  (_16)
					      -| ['list_comprehension'] )
					( <[_12|_13]> when 'true' ->
					      apply 'lc$^2'/1
						  (_13)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_48> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_48})
						-| [{'function_name',{'lc$^2',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  %% Line 1075
			      apply 'lc$^2'/1
				  (FilterData)
		      in  let <Used> =
			      call %% Line 1074
				   'sofs':%% Line 1074
					  'relation'
				  (_20)
			  in  let <_22> =
				  call %% Line 1077
				       'sofs':%% Line 1077
					      'relative_product'
				      (%% Line 1077
				       Used, %% Line 1077
					     Intro)
			      in  let <Depend> =
				      call %% Line 1077
					   'sofs':%% Line 1077
						  'strict_relation'
					  (_22)
				  in  let <_24> =
					  call %% Line 1078
					       'sofs':%% Line 1078
						      'relation_to_family'
					      (%% Line 1078
					       Depend)
				      in  let <G> =
					      call %% Line 1078
						   'sofs':%% Line 1078
							  'family_to_digraph'
						  (_24)
					  in  let <_32> =
						  letrec
						      'lc$^4'/1 =
							  %% Line 1080
							  fun (_29) ->
							      case _29 of
								<[V|_27]> when 'true' ->
								    let <_30> =
									call 'digraph_utils':'reachable_neighbours'
									    ([V|[]], G)
								    in  let <_31> =
									    apply 'lc$^4'/1
										(_27)
									in  ( [{V,_30}|_31]
									      -| ['compiler_generated'] )
								<[]> when 'true' ->
								    []
								( <_49> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_49})
									-| [{'function_name',{'lc$^4',1}}] )
								  -| ['compiler_generated'] )
							      end
						  in  let <_28> =
							  call %% Line 1080
							       'digraph':%% Line 1080
									 'vertices'
							      (%% Line 1080
							       G)
						      in  %% Line 1080
							  apply 'lc$^4'/1
							      (_28)
					      in  %% Line 1081
						  case call 'digraph':'delete'
							   (G) of
						    <'true'> when 'true' ->
							let <_35> =
							    apply %% Line 1082
								  'filter_ids'/1
								(_0)
							in  let <FilterIds> =
								call %% Line 1082
								     'sofs':%% Line 1082
									    'set'
								    (_35)
							    in  let <_37> =
								    call %% Line 1083
									 'sofs':%% Line 1083
										'family'
									(_32)
								in  let <Dep1> =
									call %% Line 1083
									     'sofs':%% Line 1083
										    'restriction'
									    (_37, %% Line 1083
										  FilterIds)
								    in  let <_39> =
									    call %% Line 1084
										 'sofs':%% Line 1084
											'empty_set'
										()
									in  let <NoDep> =
										call %% Line 1084
										     'sofs':%% Line 1084
											    'constant_function'
										    (%% Line 1084
										     FilterIds, _39)
									    in  let <_41> =
										    call %% Line 1085
											 'sofs':%% Line 1085
												'family_union'
											(%% Line 1085
											 Dep1, %% Line 1085
											       NoDep)
										in  %% Line 1085
										    call 'sofs':'to_external'
											(_41)
						    ( <_34> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_34})
						      -| ['compiler_generated'] )
						  end
		  ( <_11> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_11})
		    -| ['compiler_generated'] )
		end
'filter_ids'/1 =
    %% Line 1087
    fun (_0) ->
	%% Line 1088
	case apply 'qual_data'/1
		 (_0) of
	  <{FilterData,_7}> when 'true' ->
	      %% Line 1089
	      ( letrec
		    'lc$^0'/1 =
			fun (_4) ->
			    case _4 of
			      <[{QId,_8}|_3]> when 'true' ->
				  let <_5> =
				      apply 'lc$^0'/1
					  (_3)
				  in  ( [QId|_5]
					-| ['compiler_generated'] )
			      ( <[_2|_3]> when 'true' ->
				    apply 'lc$^0'/1
					(_3)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_9> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_9})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(FilterData)
		-| ['list_comprehension'] )
	  ( <_1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_1})
	    -| ['compiler_generated'] )
	end
'match_spec_quals'/4 =
    %% Line 1097
    fun (_0,_1,_2,_3) ->
	%% Line 1098
	case apply 'qual_data'/1
		 (_2) of
	  <{FilterData,GeneratorData}> when 'true' ->
	      let <_13> =
		  letrec
		      'lc$^1'/1 =
			  %% Line 1099
			  fun (_11) ->
			      case _11 of
				<[{GId,_74}|_10]> when 'true' ->
				    let <_12> =
					apply 'lc$^1'/1
					    (_10)
				    in  ( [GId|_12]
					  -| ['compiler_generated'] )
				( <[_9|_10]> when 'true' ->
				      apply 'lc$^1'/1
					  (_10)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_87> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_87})
					-| [{'function_name',{'lc$^1',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  %% Line 1099
		      apply 'lc$^1'/1
			  (GeneratorData)
	      in  let <_7> =
		      fun (_5) ->
			  %% Line 1100
			  case _5 of
			    <{_75,GIds}> when 'true' ->
				GIds
			    ( <_6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_6})
				    -| [{'function_name',{'-match_spec_quals/4-fun-0-',1}}] )
			      -| ['compiler_generated'] )
			  end
		  in  let <_8> =
			  call %% Line 1100
			       'lists':%% Line 1100
				       'flatmap'
			      (_7, _1)
		      in  let <NoFilterGIds> =
			      call %% Line 1100
				   'erlang':%% Line 1100
					    '--'
				  (_13, _8)
			  in  let <Filters> =
				  apply %% Line 1101
					'filter_list'/3
				      (%% Line 1101
				       FilterData, _1, _3)
			      in  let <_24> =
				      letrec
					  'lc$^2'/1 =
					      %% Line 1109
					      fun (_18) ->
						  case _18 of
						    <[{GId,{'gen',Pattern,_76}}|_17]> when 'true' ->
							%% Line 1110
							( case call 'lists':'member'
								   (GId, NoFilterGIds) of
							    <'true'> when 'true' ->
								( case GId of
								    ( <( {'qid',_77,_rec19}
									 -| ['compiler_generated'] )> when 'true' ->
									  let <_19> =
									      apply 'anno0'/0
										  ()
									  in  let <_22> =
										  apply 'lc$^2'/1
										      (_17)
									      in  ( [{_rec19,Pattern,[],{'atom',_19,'true'}}|_22]
										    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								    ( <_78> when 'true' ->
									  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'error'
														 -| ['compiler_generated'] )
										(( {'badrecord','qid'}
										   -| ['compiler_generated'] ))
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								  end
								  -| ['compiler_generated'] )
							    ( <'false'> when 'true' ->
								  apply 'lc$^2'/1
								      (_17)
							      -| ['compiler_generated'] )
							    ( <_23> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_23})
							      -| ['compiler_generated'] )
							  end
							  -| ['list_comprehension'] )
						    ( <[_16|_17]> when 'true' ->
							  apply 'lc$^2'/1
							      (_17)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_88> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_88})
							    -| [{'function_name',{'lc$^2',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  %% Line 1109
					  apply 'lc$^2'/1
					      (GeneratorData)
				  in  let <_37> =
					  letrec
					      'lc$^3'/1 =
						  %% Line 1103
						  fun (_31) ->
						      case _31 of
							<[{QId,[QId2|[]]}|_26]> when 'true' ->
							    %% Line 1104
							    ( letrec
								  'lc$^4'/1 =
								      fun (_32) ->
									  case _32 of
									    <[{GQId,{'gen',Pattern,_79}}|_28]>
										when %% Line 1105
										  call 'erlang':'=:='
										      (GQId,
										       QId2) ->
										%% Line 1106
										( letrec
										      'lc$^5'/1 =
											  fun (_33) ->
											      case _33 of
												<[Filter = {FQId,{'fil',F}}|_30]>
												    when %% Line 1107
												      call 'erlang':'=:='
													  (FQId,
													   QId) ->
												    ( case QId2 of
													( <( {'qid',_80,_rec18}
													     -| ['compiler_generated'] )> when 'true' ->
													      let <_36> =
														  apply 'lc$^5'/1
														      (_30)
													      in  ( [{_rec18,Pattern,[Filter|[]],F}|_36]
														    -| ['compiler_generated'] )
													  -| ['compiler_generated'] )
													( <_81> when 'true' ->
													      ( call ( 'erlang'
														       -| ['compiler_generated'] ):( 'error'
																		     -| ['compiler_generated'] )
														    (( {'badrecord','qid'}
														       -| ['compiler_generated'] ))
														-| ['compiler_generated'] )
													  -| ['compiler_generated'] )
												      end
												      -| ['compiler_generated'] )
												( <[_29|_30]> when 'true' ->
												      apply 'lc$^5'/1
													  (_30)
												  -| ['compiler_generated'] )
												<[]> when 'true' ->
												    apply 'lc$^4'/1
													(_28)
												( <_89> when 'true' ->
												      ( primop 'match_fail'
													    ({'function_clause',_89})
													-| [{'function_name',{'lc$^5',1}}] )
												  -| ['compiler_generated'] )
											      end
										  in  apply 'lc$^5'/1
											  (Filters)
										  -| ['list_comprehension'] )
									    ( <[_27|_28]> when 'true' ->
										  apply 'lc$^4'/1
										      (_28)
									      -| ['compiler_generated'] )
									    <[]> when 'true' ->
										apply 'lc$^3'/1
										    (_26)
									    ( <_90> when 'true' ->
										  ( primop 'match_fail'
											({'function_clause',_90})
										    -| [{'function_name',{'lc$^4',1}}] )
									      -| ['compiler_generated'] )
									  end
							      in  apply 'lc$^4'/1
								      (GeneratorData)
							      -| ['list_comprehension'] )
							( <[_25|_26]> when 'true' ->
							      apply 'lc$^3'/1
								  (_26)
							  -| ['compiler_generated'] )
							<[]> when 'true' ->
							    _24
							( <_91> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_91})
								-| [{'function_name',{'lc$^3',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  %% Line 1103
					      apply 'lc$^3'/1
						  (_1)
				      in  let <_39> =
					      apply %% Line 1111
						    'anno0'/0
						  ()
					  in  let <E> = {%% Line 1111
						   'nil',_39}
					      in  let <_47> =
						      letrec
							  'lc$^6'/1 =
							      %% Line 1113
							      fun (_44) ->
								  case _44 of
								    <[{GNum,Pattern,Filter,F}|_42]> when 'true' ->
									let <_43> =
									    apply %% Line 1114
										  'try_ms'/4
										(%% Line 1114
										 E, %% Line 1114
										    Pattern, %% Line 1114
											     F, _3)
									in  %% Line 1114
									    ( case <> of
										<>
										    when call 'erlang':'=/='
											  ('no',
											   _43) ->
										    let <_45> =
											apply 'lc$^6'/1
											    (_42)
										    in  ( [{{GNum,Pattern},Filter}|_45]
											  -| ['compiler_generated'] )
										( <> when 'true' ->
										      apply 'lc$^6'/1
											  (_42)
										  -| ['compiler_generated'] )
									      end
									      -| ['list_comprehension'] )
								    ( <[_41|_42]> when 'true' ->
									  apply 'lc$^6'/1
									      (_42)
								      -| ['compiler_generated'] )
								    <[]> when 'true' ->
									[]
								    ( <_92> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_92})
									    -| [{'function_name',{'lc$^6',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  %% Line 1113
							  apply 'lc$^6'/1
							      (_37)
						  in  let <_49> =
							  call %% Line 1115
							       'sofs':%% Line 1115
								      'relation'
							      (_47, %% Line 1116
								    [{'gnum_pattern',['filter']}])
						      in  let <GFF> =
							      call %% Line 1115
								   'sofs':%% Line 1115
									  'relation_to_family'
								  (_49)
							  in  let <_51> =
								  call %% Line 1117
								       'sofs':%% Line 1117
									      'family_union'
								      (%% Line 1117
								       GFF)
							      in  let <GFFL> =
								      call %% Line 1117
									   'sofs':%% Line 1117
										  'to_external'
									  (_51)
								  in  %% Line 1118
								      try
									  %% Line 1119
									  case GFFL of
									    <[{{GNum,Pattern},GFilterData}|[]]> when 'true' ->
										let <_55> =
										    call %% Line 1120
											 'erlang':%% Line 1120
												  'length'
											(%% Line 1120
											 GFilterData)
										in  let <_54> =
											call %% Line 1120
											     'erlang':%% Line 1120
												      'length'
											    (%% Line 1120
											     FilterData)
										    in  %% Line 1120
											case call 'erlang':'=:='
												 (_55, _54) of
											  <'true'> when 'true' ->
											      %% Line 1121
											      case GeneratorData of
												<[_82|[]]> when 'true' ->
												    let <AbstrMS> =
													apply %% Line 1122
													      'gen_ms'/4
													    (_0, %% Line 1122
														 Pattern, %% Line 1122
															  GFilterData, _3)
												    in  %% Line 1126
													[{GNum,AbstrMS,'all'}|[]]
												( <_57> when 'true' ->
												      primop 'match_fail'
													  ({'badmatch',_57})
												  -| ['compiler_generated'] )
											      end
											  ( <_56> when 'true' ->
												primop 'match_fail'
												    ({'badmatch',_56})
											    -| ['compiler_generated'] )
											end
									    ( <_53> when 'true' ->
										  primop 'match_fail'
										      ({'badmatch',_53})
									      -| ['compiler_generated'] )
									  end
								      of <_59> ->
									  _59
								      catch <_62,_61,_60> ->
									  let <_63> =
									      apply %% Line 1128
										    'anno0'/0
										  ()
									  in  %% Line 1128
									      case apply 'anon_var'/2
										       ({'var',_63,'_'}, 0) of
										<{TemplVar,_86}> when 'true' ->
										    %% Line 1130
										    ( letrec
											  'lc$^7'/1 =
											      fun (_67) ->
												  case _67 of
												    <[{{GNum,Pattern},GFilterData}|_66]> when 'true' ->
													let <_68> =
													    apply 'one_gen_match_spec'/5
														(GNum, Pattern, GFilterData, _3, TemplVar)
													in  let <_69> =
														apply 'lc$^7'/1
														    (_66)
													    in  ( [_68|_69]
														  -| ['compiler_generated'] )
												    ( <[_65|_66]> when 'true' ->
													  apply 'lc$^7'/1
													      (_66)
												      -| ['compiler_generated'] )
												    <[]> when 'true' ->
													[]
												    ( <_93> when 'true' ->
													  ( primop 'match_fail'
														({'function_clause',_93})
													    -| [{'function_name',{'lc$^7',1}}] )
												      -| ['compiler_generated'] )
												  end
										      in  apply 'lc$^7'/1
											      (GFFL)
										      -| ['list_comprehension'] )
										( <_64> when 'true' ->
										      primop 'match_fail'
											  ({'badmatch',_64})
										  -| ['compiler_generated'] )
									      end
	  ( <_4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_4})
	    -| ['compiler_generated'] )
	end
'one_gen_match_spec'/5 =
    %% Line 1133
    fun (_0,_1,_2,_3,_4) ->
	%% Line 1134
	case apply 'pattern_as_template'/2
		 (_1, _4) of
	  <{E,Pattern}> when 'true' ->
	      let <AbstrMS> =
		  apply %% Line 1135
			'gen_ms'/4
		      (%% Line 1135
		       E, %% Line 1135
			  Pattern, _2, _3)
	      in  let <_13> =
		      letrec
			  'lc$^0'/1 =
			      %% Line 1136
			      fun (_9) ->
				  case _9 of
				    <[{FId,_19}|_8]> when 'true' ->
					( case FId of
					    ( <( {'qid',_20,_rec20}
						 -| ['compiler_generated'] )> when 'true' ->
						  let <_12> =
						      apply 'lc$^0'/1
							  (_8)
						  in  ( [_rec20|_12]
							-| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_21> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','qid'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    ( <[_7|_8]> when 'true' ->
					  apply 'lc$^0'/1
					      (_8)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_22> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_22})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  %% Line 1136
			  apply 'lc$^0'/1
			      (_2)
		  in  %% Line 1136
		      {_0,AbstrMS,_13}
	  ( <_5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_5})
	    -| ['compiler_generated'] )
	end
'gen_ms'/4 =
    %% Line 1138
    fun (_0,_1,_2,_3) ->
	let <_4> =
	    apply %% Line 1139
		  'filters_as_one'/1
		(_2)
	in  %% Line 1139
	    case apply 'try_ms'/4
		     (_0, _1, _4, _3) of
	      <{'ok',MS,AMS}> when 'true' ->
		  %% Line 1140
		  case MS of
		    %% Line 1141
		    <[{'$1',['true'],['$1']}]> when 'true' ->
			let <_6> =
			    apply %% Line 1142
				  'anno0'/0
				()
			in  %% Line 1142
			    {'atom',_6,'no_match_spec'}
		    %% Line 1143
		    <_12> when 'true' ->
			%% Line 1144
			AMS
		  end
	      ( <_5> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_5})
		-| ['compiler_generated'] )
	    end
'pattern_as_template'/2 =
    %% Line 1151
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'var',_5,'_'},TemplVar> when 'true' ->
	      %% Line 1152
	      {TemplVar,TemplVar}
	  %% Line 1153
	  <V = {'var',_6,_7},_X_TemplVar> when 'true' ->
	      %% Line 1154
	      {V,V}
	  %% Line 1155
	  <{'match',L,E,{'var',_8,'_'}},TemplVar> when 'true' ->
	      %% Line 1156
	      {TemplVar,{'match',L,E,TemplVar}}
	  %% Line 1157
	  <{'match',L,{'var',_9,'_'},E},TemplVar> when 'true' ->
	      %% Line 1158
	      {TemplVar,{'match',L,E,TemplVar}}
	  %% Line 1159
	  <P = {'match',_10,_X_E,V = {'var',_11,_12}},_X_TemplVar> when 'true' ->
	      %% Line 1160
	      {V,P}
	  %% Line 1161
	  <P = {'match',_13,V = {'var',_14,_15},_X_E},_X_TemplVar> when 'true' ->
	      %% Line 1162
	      {V,P}
	  %% Line 1163
	  <E,TemplVar> when 'true' ->
	      let <L> =
		  apply %% Line 1164
			'anno0'/0
		      ()
	      in  %% Line 1165
		  {TemplVar,{'match',L,E,TemplVar}}
	end
'constants_and_sizes'/5 =
    %% Line 1185
    fun (_0,_1,_2,_3,_4) ->
	let <TemplateAsPattern> =
	    apply %% Line 1186
		  'template_as_pattern'/1
		(_1)
	in  let <Qualifiers> =
		[%% Line 1187
		 TemplateAsPattern|_0]
	    in  %% Line 1188
		case apply 'qual_data'/1
			 (Qualifiers) of
		  <{FilterData,GeneratorData}> when 'true' ->
		      %% Line 1189
		      case %% Line 1190
			   apply 'filter_info'/4
			       (FilterData, _3, _2, _4) of
			<{Filter,Anon1,Imported}> when 'true' ->
			    let <PatBindFun> =
				fun (_10,_9) ->
				    %% Line 1191
				    apply 'is_bindable'/1
					(_9)
			    in  %% Line 1192
				case %% Line 1193
				     apply 'pattern_frame'/4
					 (GeneratorData, PatBindFun, Anon1, _4) of
				  <{PatternFrame,PatternVars}> when 'true' ->
				      let <PatternFrames> =
					  apply %% Line 1194
						'frame2frames'/1
					      (%% Line 1194
					       PatternFrame)
				      in  let <FilterFun> =
					      fun (_16) ->
						  %% Line 1197
						  apply 'filter'/5
						      (Filter, PatternFrames, _16, _4, Imported)
					  in  let <SzFs> =
						  apply %% Line 1199
							FilterFun
						      (%% Line 1199
						       PatBindFun)
					      in  let <SizeInfo> =
						      apply %% Line 1201
							    'pattern_sizes'/2
							  (%% Line 1201
							   PatternVars, %% Line 1201
									SzFs)
						  in  let <SelectorFun> =
							  apply %% Line 1202
								'const_selector'/1
							      (%% Line 1202
							       Imported)
						      in  let <_22> =
							      apply %% Line 1205
								    'deref_pattern'/1
								  (%% Line 1205
								   Imported)
							  in  let <_23> =
								  apply %% Line 1204
									'frames_to_columns'/6
								      (%% Line 1204
								       PatternFrames, %% Line 1204
										      PatternVars, _22, %% Line 1206
													SelectorFun, %% Line 1206
														     Imported, %% Line 1207
															       '=:=')
							      in  let <PatternConstants> =
								      call %% Line 1204
									   'lists':%% Line 1204
										   'flatten'
									  (_23)
								  in  %% Line 1209
								      case %% Line 1210
									   apply 'constants'/9
									       (FilterFun, PatternVars, PatternConstants, PatternFrame, %% Line 1211
																	FilterData, _2, ( '=:='
																			  -| ['compiler_generated'] ), %% Line 1212
																						       Imported, _4) of
									<{EqColumnConstants,_X_EqExtraConsts}> when 'true' ->
									    %% Line 1213
									    case %% Line 1214
										 apply 'constants'/9
										     (FilterFun, PatternVars, PatternConstants, PatternFrame, %% Line 1215
																	      FilterData, _2, ( '=='
																				-| ['compiler_generated'] ), %% Line 1216
																							     Imported, _4) of
									      <{EqualColumnConstants,EqualExtraConsts}> when 'true' ->
										  let <_38> =
										      letrec
											  'lc$^2'/1 =
											      %% Line 1226
											      fun (_35) ->
												  case _35 of
												    <[{Consts,Op}|_32]> when 'true' ->
													%% Line 1227
													( letrec
													      'lc$^3'/1 =
														  fun (_36) ->
														      case _36 of
															<[{_@r0 = {GId,Col},Val}|_34]> when 'true' ->
															    let <_37> =
																apply 'lc$^3'/1
																    (_34)
															    in  ( [{_@r0,{Val,Op}}|_37]
																  -| ['compiler_generated'] )
															( <[_33|_34]> when 'true' ->
															      apply 'lc$^3'/1
																  (_34)
															  -| ['compiler_generated'] )
															<[]> when 'true' ->
															    apply 'lc$^2'/1
																(_32)
															( <_55> when 'true' ->
															      ( primop 'match_fail'
																    ({'function_clause',_55})
																-| [{'function_name',{'lc$^3',1}}] )
															  -| ['compiler_generated'] )
														      end
													  in  apply 'lc$^3'/1
														  (Consts)
													  -| ['list_comprehension'] )
												    ( <[_31|_32]> when 'true' ->
													  apply 'lc$^2'/1
													      (_32)
												      -| ['compiler_generated'] )
												    <[]> when 'true' ->
													[]
												    ( <_56> when 'true' ->
													  ( primop 'match_fail'
														({'function_clause',_56})
													    -| [{'function_name',{'lc$^2',1}}] )
												      -| ['compiler_generated'] )
												  end
										      in  %% Line 1226
											  apply 'lc$^2'/1
											      ([{EqualExtraConsts,'=='}|[]])
										  in  let <_45> =
											  letrec
											      'lc$^4'/1 =
												  %% Line 1230
												  fun (_43) ->
												      case _43 of
													<[{{GId,Col},ValOps}|_41]> when 'true' ->
													    let <_44> =
														apply 'lc$^4'/1
														    (_41)
													    in  ( [{GId,{Col,ValOps}}|_44]
														  -| ['compiler_generated'] )
													( <[_40|_41]> when 'true' ->
													      apply 'lc$^4'/1
														  (_41)
													  -| ['compiler_generated'] )
													<[]> when 'true' ->
													    []
													( <_57> when 'true' ->
													      ( primop 'match_fail'
														    ({'function_clause',_57})
														-| [{'function_name',{'lc$^4',1}}] )
													  -| ['compiler_generated'] )
												      end
											  in  let <_42> =
												  apply %% Line 1230
													'family_list'/1
												      (_38)
											      in  %% Line 1230
												  apply 'lc$^4'/1
												      (_42)
										      in  let <ExtraConstants> =
											      apply %% Line 1229
												    'family_list'/1
												  (_45)
											  in  %% Line 1231
											      {EqColumnConstants,EqualColumnConstants,ExtraConstants,SizeInfo}
									      ( <_30> when 'true' ->
										    primop 'match_fail'
											({'badmatch',_30})
										-| ['compiler_generated'] )
									    end
									( <_27> when 'true' ->
									      primop 'match_fail'
										  ({'badmatch',_27})
									  -| ['compiler_generated'] )
								      end
				  ( <_14> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_14})
				    -| ['compiler_generated'] )
				end
			( <_8> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_8})
			  -| ['compiler_generated'] )
		      end
		  ( <_7> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_7})
		    -| ['compiler_generated'] )
		end
'constants'/9 =
    %% Line 1233
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	let <BindFun> =
	    fun (_10,_9) ->
		%% Line 1235
		apply 'is_bindable'/1
		    (_9)
	in  let <Fs> =
		apply _0
		    (%% Line 1236
		     BindFun)
	    in  let <SelectorFun> =
		    apply %% Line 1237
			  'const_selector'/1
			(_7)
		in  let <_16> =
			apply %% Line 1239
			      'deref_lookup'/2
			    (_7, _6)
		    in  let <ColumnConstants0> =
			    apply %% Line 1238
				  'frames_to_columns'/6
				(%% Line 1238
				 Fs, _1, _16, %% Line 1240
					      SelectorFun, _7, _6)
			in  let <ColumnConstants1> =
				call %% Line 1241
				     'lists':%% Line 1241
					     'flatten'
				    (%% Line 1241
				     ColumnConstants0)
			    in  let <_27> =
				    letrec
					'lc$^1'/1 =
					    %% Line 1244
					    fun (_24) ->
						case _24 of
						  <[{_@r0 = {GId,Col},Vals}|_20]>
						      when %% Line 1245
							call 'erlang':'=/='
							    (GId,
							     0) ->
						      %% Line 1246
						      ( letrec
							    'lc$^2'/1 =
								fun (_25) ->
								    case _25 of
								      <[Val|_23]> when 'true' ->
									  let <_26> =
									      apply 'lc$^2'/1
										  (_23)
									  in  ( [{_@r0,Val}|_26]
										-| ['compiler_generated'] )
								      <[]> when 'true' ->
									  apply 'lc$^1'/1
									      (_20)
								      ( <_41> when 'true' ->
									    ( primop 'match_fail'
										  ({'function_clause',_41})
									      -| [{'function_name',{'lc$^2',1}}] )
									-| ['compiler_generated'] )
								    end
							in  apply 'lc$^2'/1
								(Vals)
							-| ['list_comprehension'] )
						  ( <[_19|_20]> when 'true' ->
							apply 'lc$^1'/1
							    (_20)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_42> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_42})
							  -| [{'function_name',{'lc$^1',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  let <_21> =
					    call %% Line 1244
						 'erlang':%% Line 1244
							  '--'
						(%% Line 1244
						 ColumnConstants1, _2)
					in  %% Line 1244
					    apply 'lc$^1'/1
						(_21)
				in  let <ColumnConstants> =
					apply %% Line 1247
					      'lu_skip'/8
					    (%% Line 1247
					     ColumnConstants1, _4, _3, _1, _5, _8, _7, _6)
				    in  %% Line 1250
					{ColumnConstants,_27}
'deref_lookup'/2 =
    %% Line 1269
    fun (_0,_1) ->
	case <_0,_1> of
	  <Imported,'=='> when 'true' ->
	      %% Line 1271
	      ( fun (_3,_2) ->
		    apply 'deref_values'/3
			(_3, _2, Imported)
		-| [{'id',{0,0,'-deref_lookup/2-fun-0-'}}] )
	  %% Line 1272
	  <Imported,'=:='> when 'true' ->
	      let <BFun> =
		  fun (_9,_8) ->
		      %% Line 1276
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (_8,
				       '=:=') ->
				'true'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				apply 'free_of_integers'/2
				    (_9, Imported)
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      in  %% Line 1278
		  ( fun (_14,_13) ->
			apply 'deref_values'/4
			    (_14, _13, BFun, Imported)
		    -| [{'id',{0,0,'-deref_lookup/2-fun-2-'}}] )
	  ( <_18,_17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_18,_17})
		  -| [{'function_name',{'deref_lookup',2}}] )
	    -| ['compiler_generated'] )
	end
'lu_skip'/8 =
    %% Line 1283
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	let <FailSelector> =
	    fun (_10) ->
		%% Line 1287
		( fun (_8) ->
		      {'yes',_8}
		  -| [{'id',{0,0,'-lu_skip/8-fun-0-'}}] )
	in  let <PatternFrames> =
		apply %% Line 1290
		      'frame2frames'/1
		    (_2)
	    in  let <_14> =
		    apply %% Line 1293
			  'deref_pattern'/1
			(_6)
		in  let <_15> =
			apply %% Line 1292
			      'frames_to_columns'/6
			    (%% Line 1292
			     PatternFrames, _3, _14, %% Line 1293
						     FailSelector, _6, _7)
		    in  let <PatternColumns> =
			    call %% Line 1292
				 'lists':%% Line 1292
					 'flatten'
				(_15)
			in  let <BindFun> =
				fun (_18,_17) ->
				    %% Line 1303
				    apply 'is_bindable'/1
					(_17)
			    in  let <_66> =
				    letrec
					'lc$^4'/1 =
					    %% Line 1305
					    fun (_56) ->
						case _56 of
						  <[{FId,{'fil',Fil}}|_23]> when 'true' ->
						      let <_25> =
							  apply %% Line 1307
								'reset_anno'/1
							      (%% Line 1307
							       Fil)
						      in  let <_27> =
							      apply %% Line 1307
								    'safe_filter'/5
								  (_25, %% Line 1307
									PatternFrames, %% Line 1308
										       BindFun, _5, _6)
							  in  %% Line 1307
							      ( case <> of
								  <>
								      when call 'erlang':'=/='
									    ([],
									     _27) ->
								      %% Line 1309
								      ( letrec
									    'lc$^5'/1 =
										fun (_57) ->
										    case _57 of
										      <[_@r0 = {GId,PV}|_29]> when 'true' ->
											  let <_31> =
											      apply %% Line 1312
												    'deref_lu_skip'/2
												  (_7, _6)
											  in  let <_30> =
												  apply %% Line 1314
													'const_selector'/1
												      (_6)
											      in  let <_32> =
												      apply %% Line 1311
													    'frames_to_columns'/6
													  (_27, %% Line 1311
														[_@r0|[]], _31, _30, _6, _7)
												  in  let <_34> =
													  call %% Line 1311
													       'erlang':%% Line 1311
															'hd'
													      (_32)
												      in  %% Line 1310
													  ( case <> of
													      <>
														  when call 'erlang':'=/='
															([],
															 _34) ->
														  let <_36> =
														      call %% Line 1321
															   'erlang':%% Line 1321
																    '--'
															  (_34, %% Line 1321
																PatternColumns)
														  in  let <_37> =
															  call %% Line 1321
															       'erlang':%% Line 1321
																	'length'
															      (_36)
														      in  %% Line 1321
															  ( case <> of
															      <>
																  when call 'erlang':'=:='
																	(_37,
																	 1) ->
																  %% Line 1322
																  ( letrec
																	'lc$^6'/1 =
																	    fun (_58) ->
																		case _58 of
																		  <[{Column = {_82,Col},Constants}|_39]> when 'true' ->
																		      let <_55> =
																			  fun (_53) ->
																			      %% Line 1330
																			      case apply 'unify_column'/5
																				       (_53, PV, Col, BindFun, _6) of
																				<{VarI,FrameI}> when 'true' ->
																				    let <VarValues> =
																					apply %% Line 1332
																					      'deref_skip'/4
																					    (%% Line 1332
																					     VarI, %% Line 1332
																						   FrameI, _7, _6)
																				    in  %% Line 1334
																					case apply 'unify_column'/5
																						 (_2, PV, Col, BindFun, _6) of
																					  <{NV,F1}> when 'true' ->
																					      let <F2> =
																						  apply %% Line 1336
																							'unify_var_bindings'/7
																						      (%% Line 1336
																						       VarValues, %% Line 1336
																								  '=:=', %% Line 1336
																									 NV, %% Line 1336
																									     F1, %% Line 1337
																										 BindFun, _6, %% Line 1337
																											      'false')
																					      in  let <_45> =
																						      case %% Line 1349
																							   call 'lists':'keyfind'
																							       (Column, 1, _0) of
																							%% Line 1350
																							<'false'> when 'true' ->
																							    []
																							%% Line 1351
																							<{_83,LUCs}>
																							    when call 'erlang':'=:='
																								  (_83,
																								   Column) ->
																							    LUCs
																							( <_44> when 'true' ->
																							      %% Line 1349
																							      primop 'match_fail'
																								  ({'case_clause',_44})
																							  -| ['compiler_generated'] )
																						      end
																						  in  let <_48> =
																							  call %% Line 1355
																							       'erlang':%% Line 1355
																									'length'
																							      (%% Line 1355
																							       VarValues)
																						      in  %% Line 1355
																							  ( case <> of
																							      ( <>
																								    when call 'erlang':'=<'
																									  (_48,
																									   1) ->
																								    let <_50> =
																									call %% Line 1356
																									     'erlang':%% Line 1356
																										      '--'
																									    (%% Line 1356
																									     Constants, _45)
																								    in  %% Line 1356
																									( case <> of
																									    ( <>
																										  when call 'erlang':'=:='
																											(_50,
																											 []) ->
																										  %% Line 1357
																										  apply 'bindings_is_subset'/3
																										      (_53, F2, _6)
																									      -| ['compiler_generated'] )
																									    ( <> when 'true' ->
																										  'false'
																									      -| ['compiler_generated'] )
																									  end
																									  -| ['compiler_generated'] )
																								-| ['compiler_generated'] )
																							      ( <> when 'true' ->
																								    'false'
																								-| ['compiler_generated'] )
																							    end
																							    -| ['compiler_generated'] )
																					  ( <_42> when 'true' ->
																						primop 'match_fail'
																						    ({'badmatch',_42})
																					    -| ['compiler_generated'] )
																					end
																				( <_40> when 'true' ->
																				      primop 'match_fail'
																					  ({'badmatch',_40})
																				  -| ['compiler_generated'] )
																			      end
																		      in  %% Line 1324
																			  ( case call 'lists':'all'
																				     (_55, _27) of
																			      <'true'> when 'true' ->
																				  ( case FId of
																				      ( <( {'qid',_84,_rec21}
																					   -| ['compiler_generated'] )> when 'true' ->
																					    let <_61> =
																						apply 'lc$^6'/1
																						    (_39)
																					    in  ( [{Column,_rec21}|_61]
																						  -| ['compiler_generated'] )
																					-| ['compiler_generated'] )
																				      ( <_85> when 'true' ->
																					    ( call ( 'erlang'
																						     -| ['compiler_generated'] ):( 'error'
																										   -| ['compiler_generated'] )
																						  (( {'badrecord','qid'}
																						     -| ['compiler_generated'] ))
																					      -| ['compiler_generated'] )
																					-| ['compiler_generated'] )
																				    end
																				    -| ['compiler_generated'] )
																			      ( <'false'> when 'true' ->
																				    apply 'lc$^6'/1
																					(_39)
																				-| ['compiler_generated'] )
																			      ( <_62> when 'true' ->
																				    primop 'match_fail'
																					({'case_clause',_62})
																				-| ['compiler_generated'] )
																			    end
																			    -| ['list_comprehension'] )
																		  ( <[_38|_39]> when 'true' ->
																			apply 'lc$^6'/1
																			    (_39)
																		    -| ['compiler_generated'] )
																		  <[]> when 'true' ->
																		      apply 'lc$^5'/1
																			  (_29)
																		  ( <_91> when 'true' ->
																			( primop 'match_fail'
																			      ({'function_clause',_91})
																			  -| [{'function_name',{'lc$^6',1}}] )
																		    -| ['compiler_generated'] )
																		end
																    in  apply 'lc$^6'/1
																	    (_36)
																    -| ['list_comprehension'] )
															      ( <> when 'true' ->
																    apply 'lc$^5'/1
																	(_29)
																-| ['compiler_generated'] )
															    end
															    -| ['list_comprehension'] )
													      ( <> when 'true' ->
														    apply 'lc$^5'/1
															(_29)
														-| ['compiler_generated'] )
													    end
													    -| ['list_comprehension'] )
										      ( <[_28|_29]> when 'true' ->
											    apply 'lc$^5'/1
												(_29)
											-| ['compiler_generated'] )
										      <[]> when 'true' ->
											  apply 'lc$^4'/1
											      (_23)
										      ( <_92> when 'true' ->
											    ( primop 'match_fail'
												  ({'function_clause',_92})
											      -| [{'function_name',{'lc$^5',1}}] )
											-| ['compiler_generated'] )
										    end
									in  apply 'lc$^5'/1
										(_3)
									-| ['list_comprehension'] )
								  ( <> when 'true' ->
									apply 'lc$^4'/1
									    (_23)
								    -| ['compiler_generated'] )
								end
								-| ['list_comprehension'] )
						  ( <[_22|_23]> when 'true' ->
							apply 'lc$^4'/1
							    (_23)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_93> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_93})
							  -| [{'function_name',{'lc$^4',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  let <_24> =
					    apply %% Line 1306
						  'filter_list'/3
						(_1, _4, _5)
					in  %% Line 1305
					    apply 'lc$^4'/1
						(_24)
				in  let <ColFils> =
					apply %% Line 1359
					      'family_list'/1
					    (_66)
				    in  %% Line 1364
					( letrec
					      'lc$^7'/1 =
						  fun (_71) ->
						      case _71 of
							<[{Col,Constants}|_70]> when 'true' ->
							    let <_72> =
								apply 'skip_tag'/3
								    (Col, ColFils, _1)
							    in  let <_73> =
								    apply 'lc$^7'/1
									(_70)
								in  ( [{Col,Constants,_72}|_73]
								      -| ['compiler_generated'] )
							( <[_69|_70]> when 'true' ->
							      apply 'lc$^7'/1
								  (_70)
							  -| ['compiler_generated'] )
							<[]> when 'true' ->
							    []
							( <_94> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_94})
								-| [{'function_name',{'lc$^7',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  apply 'lc$^7'/1
						  (_0)
					  -| ['list_comprehension'] )
'deref_skip'/4 =
    %% Line 1366
    fun (_0,_1,_2,_3) ->
	%% Line 1367
	apply 'deref'/3
	    (_0, _1, _3)
'deref_lu_skip'/2 =
    %% Line 1369
    fun (_0,_1) ->
	case <_0,_1> of
	  <'==',Imported> when 'true' ->
	      let <BFun> =
		  fun (_5,_4) ->
		      %% Line 1372
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (_4,
				       '==') ->
				'true'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				apply 'free_of_integers'/2
				    (_5, Imported)
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      in  %% Line 1374
		  ( fun (_10,_9) ->
			apply 'deref_values'/4
			    (_10, _9, BFun, Imported)
		    -| [{'id',{0,0,'-deref_lu_skip/2-fun-1-'}}] )
	  %% Line 1375
	  <'=:=',Imported> when 'true' ->
	      %% Line 1377
	      ( fun (_14,_13) ->
		    apply 'deref_values'/3
			(_14, _13, Imported)
		-| [{'id',{0,0,'-deref_lu_skip/2-fun-2-'}}] )
	  ( <_18,_17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_18,_17})
		  -| [{'function_name',{'deref_lu_skip',2}}] )
	    -| ['compiler_generated'] )
	end
'equal_columns'/4 =
    %% Line 1379
    fun (_0,_1,_2,_3) ->
	%% Line 1380
	case %% Line 1381
	     apply 'join_info'/5
		 (_0, _1, _2, _3, ( '=='
				    -| ['compiler_generated'] )) of
	  <{Cs,Skip}> when 'true' ->
	      %% Line 1382
	      apply 'join_gens'/3
		  (Cs, _0, Skip)
	  ( <_6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_6})
	    -| ['compiler_generated'] )
	end
'eq_columns'/4 =
    %% Line 1384
    fun (_0,_1,_2,_3) ->
	%% Line 1385
	case %% Line 1386
	     apply 'join_info'/5
		 (_0, _1, _2, _3, ( '=:='
				    -| ['compiler_generated'] )) of
	  <{Cs,Skip}> when 'true' ->
	      %% Line 1387
	      apply 'join_gens'/3
		  (Cs, _0, Skip)
	  ( <_6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_6})
	    -| ['compiler_generated'] )
	end
'join_gens'/3 =
    %% Line 1390
    fun (_0,_1,_2) ->
	let <_8> =
	    letrec
		'lc$^0'/1 =
		    %% Line 1391
		    fun (_5) ->
			case _5 of
			  <[C|_4]> when 'true' ->
			      let <_6> =
				  apply 'family_list'/1
				      (C)
			      in  let <_7> =
				      apply 'lc$^0'/1
					  (_4)
				  in  ( [_6|_7]
					-| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_26> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_26})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 1391
		apply 'lc$^0'/1
		    (_0)
	in  %% Line 1392
	    case apply 'qual_data'/1
		     (_1) of
	      <{FD,_X_GeneratorData}> when 'true' ->
		  let <_20> =
		      fun (_18) ->
			  let <_17> =
			      call %% Line 1393
				   'erlang':%% Line 1393
					    'length'
				  (%% Line 1393
				   _18)
			  in  %% Line 1393
			      call 'erlang':'=:='
				  (_17, 2)
		  in  let <_21> =
			  call %% Line 1393
			       'lists':%% Line 1393
				       'filter'
			      (_20, _8)
		      in  let <_22> =
			      apply %% Line 1393
				    'join_gens2'/3
				  (_21, %% Line 1393
					FD, _2)
			  in  let <_14> =
				  fun (_12) ->
				      let <_11> =
					  call %% Line 1394
					       'erlang':%% Line 1394
							'length'
					      (%% Line 1394
					       _12)
				      in  %% Line 1394
					  call 'erlang':'>'
					      (_11, 2)
			      in  let <_15> =
				      call %% Line 1394
					   'lists':%% Line 1394
						   'filter'
					  (_14, _8)
				  in  let <_16> =
					  apply %% Line 1394
						'join_gens2'/3
					      (_15, %% Line 1394
						    FD, _2)
				      in  %% Line 1393
					  {_22,_16}
	      ( <_10> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_10})
		-| ['compiler_generated'] )
	    end
'join_gens2'/3 =
    %% Line 1396
    fun (_0,_1,_2) ->
	%% Line 1403
	( letrec
	      'lc$^1'/1 =
		  fun (_12) ->
		      case _12 of
			<[J|_4]> when 'true' ->
			    let <_14> =
				case call 'lists':'keyfind'
					 (J, 1, _2) of
				  <{_20,FilL}>
				      when call 'erlang':'=:='
					    (_20,
					     J) ->
				      FilL
				  <'false'> when 'true' ->
				      []
				  ( <_13> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_13})
				    -| ['compiler_generated'] )
				end
			    in  let <_15> =
				    apply 'skip_tag'/2
					(_14, _1)
				in  let <_16> =
					apply 'lc$^1'/1
					    (_4)
				    in  ( [{J,_15}|_16]
					  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_21> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_21})
				-| [{'function_name',{'lc$^1',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_10> =
		  letrec
		      'lc$^0'/1 =
			  fun (_7) ->
			      case _7 of
				<[C|_6]> when 'true' ->
				    let <_8> =
					call 'qlc':'all_selections'
					    (C)
				    in  let <_9> =
					    apply 'lc$^0'/1
						(_6)
					in  ( [_8|_9]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_22> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_22})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_0)
	      in  let <_11> =
		      call 'lists':'append'
			  (_10)
		  in  apply 'lc$^1'/1
			  (_11)
	  -| ['list_comprehension'] )
'skip_tag'/2 =
    %% Line 1405
    fun (_0,_1) ->
	let <_4> =
	    case <> of
	      %% Line 1407
	      <>
		  when try
			let <_3> =
			    call 'erlang':'length'
				(_1)
			in  let <_2> =
				call 'erlang':'length'
				    (_0)
			    in  call 'erlang':'=:='
				    (_3, _2)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  %% Line 1408
		  'all'
	      %% Line 1409
	      <> when 'true' ->
		  %% Line 1410
		  'some'
	    end
	in  %% Line 1406
	    {_4,_0}
'skip_tag'/3 =
    %% Line 1413
    fun (_0,_1,_2) ->
	%% Line 1414
	case call 'lists':'keyfind'
		 (_0, 1, _1) of
	  %% Line 1415
	  <{_11,FilL}>
	      when call 'erlang':'=:='
		    (_11,
		     _0) ->
	      let <_5> =
		  case <> of
		    %% Line 1417
		    <>
			when try
			      let <_4> =
				  call 'erlang':'length'
				      (_2)
			      in  let <_3> =
				      call 'erlang':'length'
					  (FilL)
				  in  call 'erlang':'=:='
					  (_4, _3)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			%% Line 1418
			'all'
		    %% Line 1419
		    <> when 'true' ->
			%% Line 1420
			'some'
		  end
	      in  %% Line 1422
		  {_5,FilL}
	  %% Line 1423
	  <'false'> when 'true' ->
	      %% Line 1424
	      {'some',[]}
	  ( <_7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_7})
	    -| ['compiler_generated'] )
	end
'join_info'/5 =
    %% Line 1432
    fun (_0,_1,_2,_3,_4) ->
	%% Line 1433
	case apply 'qual_data'/1
		 (_0) of
	  <{FilterData,GeneratorData}> when 'true' ->
	      %% Line 1434
	      case %% Line 1435
		   apply 'filter_info'/4
		       (FilterData, _1, _2, _3) of
		<{Filter,Anon1,Imported}> when 'true' ->
		    let <BindFun> =
			fun (_8,_7) ->
			    %% Line 1436
			    apply 'bind_no_const'/2
				(_7, Imported)
		    in  %% Line 1437
			case %% Line 1438
			     apply 'pattern_frame'/4
				 (GeneratorData, BindFun, Anon1, _3) of
			  <{PatternFrame,PatternVars}> when 'true' ->
			      let <PatternFrames> =
				  apply %% Line 1439
					'frame2frames'/1
				      (%% Line 1439
				       PatternFrame)
			      in  let <Fs> =
				      apply %% Line 1440
					    'filter'/5
					  (%% Line 1440
					   Filter, %% Line 1440
						   PatternFrames, %% Line 1440
								  BindFun, _3, %% Line 1440
									       Imported)
				  in  let <SelectorFun> =
					  apply %% Line 1441
						'no_const_selector'/1
					      (%% Line 1441
					       Imported)
				      in  let <_20> =
					      fun (_17,_16) ->
						  %% Line 1443
						  apply 'deref_join'/3
						      (_17, _16, _4)
					  in  let <Cols> =
						  apply %% Line 1442
							'frames_to_columns'/6
						      (%% Line 1442
						       Fs, %% Line 1442
							   PatternVars, _20, %% Line 1444
									     SelectorFun, %% Line 1444
											  Imported, %% Line 1444
												    '=:=')
					      in  let <JC> =
						      apply %% Line 1445
							    'join_classes'/1
							  (%% Line 1445
							   Cols)
						  in  let <Skip> =
							  apply %% Line 1446
								'join_skip'/8
							      (%% Line 1446
							       JC, %% Line 1446
								   FilterData, %% Line 1446
									       PatternFrame, %% Line 1447
											     PatternVars, _2, _3, %% Line 1447
														  Imported, _4)
						      in  %% Line 1448
							  {JC,Skip}
			  ( <_12> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_12})
			    -| ['compiler_generated'] )
			end
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_6})
		  -| ['compiler_generated'] )
	      end
	  ( <_5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_5})
	    -| ['compiler_generated'] )
	end
'deref_join'/3 =
    %% Line 1450
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <E,Frame,'=='> when 'true' ->
	      %% Line 1451
	      apply 'deref_values'/3
		  (E, Frame, ( []
			       -| ['compiler_generated'] ))
	  %% Line 1452
	  <E,Frame,'=:='> when 'true' ->
	      let <_9> =
		  fun (_6,_5) ->
		      %% Line 1457
		      call 'erlang':'=:='
			  (_5, '=:=')
	      in  %% Line 1457
		  apply 'deref_values'/4
		      (E, Frame, _9, 'all')
	  ( <_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11,_10})
		  -| [{'function_name',{'deref_join',3}}] )
	    -| ['compiler_generated'] )
	end
'join_classes'/1 =
    %% Line 1459
    fun (_0) ->
	let <_1> =
	    call %% Line 1460
		 'lists':%% Line 1460
			 'append'
		(_0)
	in  let <ColVar> =
		call %% Line 1460
		     'sofs':%% Line 1460
			    'relation'
		    (_1)
	    in  let <Cols> =
		    call %% Line 1461
			 'sofs':%% Line 1461
				'partition'
			(%% Line 1461
			 2, %% Line 1461
			    ColVar)
		in  %% Line 1462
		    ( letrec
			  'lc$^0'/1 =
			      fun (_8) ->
				  case _8 of
				    <[Cs|_5]>
					when try
					      let <_6> =
						  call 'erlang':'length'
						      (Cs)
					      in  call 'erlang':'>'
						      (_6, 1)
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      'false' ->
					let <_13> =
					    letrec
						'lc$^1'/1 =
						    fun (_11) ->
							case _11 of
							  <[{C,_16}|_10]> when 'true' ->
							      let <_12> =
								  apply 'lc$^1'/1
								      (_10)
							      in  ( [C|_12]
								    -| ['compiler_generated'] )
							  ( <[_9|_10]> when 'true' ->
								apply 'lc$^1'/1
								    (_10)
							    -| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_17> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_17})
								  -| [{'function_name',{'lc$^1',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^1'/1
						    (Cs)
					in  let <_14> =
						apply 'lc$^0'/1
						    (_5)
					    in  ( [_13|_14]
						  -| ['compiler_generated'] )
				    ( <[Cs|_5]> when 'true' ->
					  apply 'lc$^0'/1
					      (_5)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_18> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_18})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_7> =
			      call 'sofs':'to_external'
				  (Cols)
			  in  apply 'lc$^0'/1
				  (_7)
		      -| ['list_comprehension'] )
'join_skip'/8 =
    %% Line 1464
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	let <PatternFrames> =
	    apply %% Line 1466
		  'frame2frames'/1
		(_2)
	in  let <_61> =
		letrec
		    'lc$^2'/1 =
			%% Line 1468
			fun (_51) ->
			    case _51 of
			      <[JoinClass = [{Q1,C1}|[{Q2,C2}|[]]]|_10]> when 'true' ->
				  %% Line 1469
				  ( letrec
					'lc$^3'/1 =
					    fun (_52) ->
						case _52 of
						  <[{GId1,PV1}|_12]>
						      when %% Line 1470
							( try
							      ( let <_15> =
								    case ( call ( 'erlang'
										  -| ['compiler_generated'] ):( 'is_record'
														-| ['compiler_generated'] )
									       (GId1, ( 'qid'
											-| ['compiler_generated'] ), ( 3
														       -| ['compiler_generated'] ))
									   -| ['compiler_generated'] ) of
								      ( <( 'true'
									   -| ['compiler_generated'] )> when 'true' ->
									    ( 'true'
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								      ( <( 'false'
									   -| ['compiler_generated'] )> when 'true' ->
									    ( 'fail'
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								      ( <( _13
									   -| ['compiler_generated'] )> when 'true' ->
									    ( _13
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								    end
								in  let <_16> =
									call 'erlang':'=:='
									    (( _15
									       -| ['compiler_generated'] ), 'true')
								    in  let <_17> =
									    call 'erlang':'element'
										(3, GId1)
									in  let <_18> =
										call 'erlang':'=:='
										    (_17, Q1)
									    in  ( call ( 'erlang'
											 -| ['compiler_generated'] ):( 'and'
														       -| ['compiler_generated'] )
										      (_16, _18)
										  -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							  of <Try> ->
							      Try
							  catch <T,R> ->
							      'false'
							  -| ['compiler_generated'] ) ->
						      %% Line 1471
						      ( letrec
							    'lc$^4'/1 =
								fun (_53) ->
								    case _53 of
								      <[{GId2,PV2}|_20]>
									  when %% Line 1472
									    ( try
										  ( let <_23> =
											case ( call ( 'erlang'
												      -| ['compiler_generated'] ):( 'is_record'
																    -| ['compiler_generated'] )
												   (GId2, ( 'qid'
													    -| ['compiler_generated'] ), ( 3
																	   -| ['compiler_generated'] ))
											       -| ['compiler_generated'] ) of
											  ( <( 'true'
											       -| ['compiler_generated'] )> when 'true' ->
												( 'true'
												  -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
											  ( <( 'false'
											       -| ['compiler_generated'] )> when 'true' ->
												( 'fail'
												  -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
											  ( <( _21
											       -| ['compiler_generated'] )> when 'true' ->
												( _21
												  -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
											end
										    in  let <_24> =
											    call 'erlang':'=:='
												(( _23
												   -| ['compiler_generated'] ), 'true')
											in  let <_25> =
												call 'erlang':'element'
												    (3, GId2)
											    in  let <_26> =
												    call 'erlang':'=:='
													(_25, Q2)
												in  ( call ( 'erlang'
													     -| ['compiler_generated'] ):( 'and'
																	   -| ['compiler_generated'] )
													  (_24, _26)
												      -| ['compiler_generated'] )
										    -| ['compiler_generated'] )
									      of <Try> ->
										  Try
									      catch <T,R> ->
										  'false'
									      -| ['compiler_generated'] ) ->
									  %% Line 1475
									  ( letrec
										'lc$^5'/1 =
										    fun (_54) ->
											case _54 of
											  <[{FId,{'fil',Fil}}|_28]> when 'true' ->
											      %% Line 1477
											      ( letrec
												    'lc$^6'/1 =
													fun (_55) ->
													    case _55 of
													      <[{'value',{_71,GIds}}|_31]> when 'true' ->
														  let <_33> =
														      call %% Line 1479
															   'lists':%% Line 1479
																   'sort'
															  (%% Line 1479
															   [GId1|[GId2|[]]])
														  in  %% Line 1479
														      ( case <> of
															  <>
															      when call 'erlang':'=:='
																    (GIds,
																     _33) ->
															      let <BindFun> =
																  fun (_35,_34) ->
																      %% Line 1488
																      apply 'is_bindable'/1
																	  (_34)
															      in  %% Line 1489
																  case %% Line 1490
																       apply 'unify_column'/5
																	   (_2, PV1, C1, BindFun, _6) of
																    <{V1,JF1}> when 'true' ->
																	%% Line 1491
																	case %% Line 1492
																	     apply 'unify_column'/5
																		 (JF1, PV2, C2, BindFun, _6) of
																	  <{V2,JF2}> when 'true' ->
																	      let <JF> =
																		  apply %% Line 1493
																			'unify'/6
																		      (_7, %% Line 1493
																			   V1, %% Line 1493
																			       V2, %% Line 1493
																				   JF2, %% Line 1493
																					BindFun, _6)
																	      in  let <_42> =
																		      apply %% Line 1496
																			    'reset_anno'/1
																			  (%% Line 1496
																			   Fil)
																		  in  let <SFs> =
																			  apply %% Line 1496
																				'safe_filter'/5
																			      (_42, %% Line 1496
																				    PatternFrames, %% Line 1497
																						   BindFun, _5, _6)
																		      in  let <JImp> =
																			      call %% Line 1498
																				   'qlc':%% Line 1498
																					 'vars'
																				  (%% Line 1498
																				   [SFs|[JF|[]]])
																			  in  let <_48> =
																				  fun (_46) ->
																				      %% Line 1500
																				      apply 'bindings_is_subset'/3
																					  (_46, JF, JImp)
																			      in  let <_50> =
																				      case %% Line 1499
																					   call 'lists':'all'
																					       (_48, %% Line 1501
																						     SFs) of
																					%% Line 1501
																					( <( 'true'
																					     -| ['compiler_generated'] )> when 'true' ->
																					      call 'erlang':'=/='
																						  (SFs, [])
																					  -| ['compiler_generated'] )
																					%% Line 1501
																					( <( 'false'
																					     -| ['compiler_generated'] )> when 'true' ->
																					      'false'
																					  -| ['compiler_generated'] )
																					%% Line 1501
																					( <_45> when 'true' ->
																					      ( call ( 'erlang'
																						       -| ['compiler_generated'] ):( 'error'
																										     -| ['compiler_generated'] )
																						    (( {( 'badarg'
																							  -| ['compiler_generated'] ),_45}
																						       -| ['compiler_generated'] ))
																						-| ['compiler_generated'] )
																					  -| ['compiler_generated'] )
																				      end
																				  in  ( case _50 of
																					  <'true'> when 'true' ->
																					      ( case FId of
																						  ( <( {'qid',_72,_rec22}
																						       -| ['compiler_generated'] )> when 'true' ->
																							let <_58> =
																							    apply 'lc$^6'/1
																								(_31)
																							in  ( [{JoinClass,_rec22}|_58]
																							      -| ['compiler_generated'] )
																						    -| ['compiler_generated'] )
																						  ( <_73> when 'true' ->
																							( call ( 'erlang'
																								 -| ['compiler_generated'] ):( 'error'
																											       -| ['compiler_generated'] )
																							      (( {'badrecord','qid'}
																								 -| ['compiler_generated'] ))
																							  -| ['compiler_generated'] )
																						    -| ['compiler_generated'] )
																						end
																						-| ['compiler_generated'] )
																					  ( <'false'> when 'true' ->
																						apply 'lc$^6'/1
																						    (_31)
																					    -| ['compiler_generated'] )
																					  ( <_59> when 'true' ->
																						primop 'match_fail'
																						    ({'case_clause',_59})
																					    -| ['compiler_generated'] )
																					end
																					-| ['list_comprehension'] )
																	  ( <_40> when 'true' ->
																		primop 'match_fail'
																		    ({'badmatch',_40})
																	    -| ['compiler_generated'] )
																	end
																    ( <_39> when 'true' ->
																	  primop 'match_fail'
																	      ({'badmatch',_39})
																      -| ['compiler_generated'] )
																  end
															  ( <> when 'true' ->
																apply 'lc$^6'/1
																    (_31)
															    -| ['compiler_generated'] )
															end
															-| ['list_comprehension'] )
													      ( <[_30|_31]> when 'true' ->
														    apply 'lc$^6'/1
															(_31)
														-| ['compiler_generated'] )
													      <[]> when 'true' ->
														  apply 'lc$^5'/1
														      (_28)
													      ( <_77> when 'true' ->
														    ( primop 'match_fail'
															  ({'function_clause',_77})
														      -| [{'function_name',{'lc$^6',1}}] )
														-| ['compiler_generated'] )
													    end
												in  let <_32> =
													call %% Line 1478
													     'lists':%% Line 1478
														     'keysearch'
													    (%% Line 1478
													     FId, %% Line 1478
														  1, _4)
												    in  apply 'lc$^6'/1
													    (%% Line 1478
													     [_32|[]])
												-| ['list_comprehension'] )
											  ( <[_27|_28]> when 'true' ->
												apply 'lc$^5'/1
												    (_28)
											    -| ['compiler_generated'] )
											  <[]> when 'true' ->
											      apply 'lc$^4'/1
												  (_20)
											  ( <_78> when 'true' ->
												( primop 'match_fail'
												      ({'function_clause',_78})
												  -| [{'function_name',{'lc$^5',1}}] )
											    -| ['compiler_generated'] )
											end
									    in  let <_29> =
										    apply %% Line 1476
											  'filter_list'/3
											(_1, _4, _5)
										in  apply 'lc$^5'/1
											(_29)
									    -| ['list_comprehension'] )
								      ( <[_19|_20]> when 'true' ->
									    apply 'lc$^4'/1
										(_20)
									-| ['compiler_generated'] )
								      <[]> when 'true' ->
									  apply 'lc$^3'/1
									      (_12)
								      ( <_79> when 'true' ->
									    ( primop 'match_fail'
										  ({'function_clause',_79})
									      -| [{'function_name',{'lc$^4',1}}] )
									-| ['compiler_generated'] )
								    end
							in  apply 'lc$^4'/1
								(_3)
							-| ['list_comprehension'] )
						  ( <[_11|_12]> when 'true' ->
							apply 'lc$^3'/1
							    (_12)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      apply 'lc$^2'/1
							  (_10)
						  ( <_80> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_80})
							  -| [{'function_name',{'lc$^3',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^3'/1
					    (_3)
				    -| ['list_comprehension'] )
			      ( <[_9|_10]> when 'true' ->
				    apply 'lc$^2'/1
					(_10)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_81> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_81})
				      -| [{'function_name',{'lc$^2',1}}] )
				-| ['compiler_generated'] )
			    end
		in  %% Line 1468
		    apply 'lc$^2'/1
			(_0)
	    in  %% Line 1503
		apply 'family_list'/1
		    (_61)
'filter_info'/4 =
    %% Line 1505
    fun (_0,_1,_2,_3) ->
	let <FilterList> =
	    apply %% Line 1506
		  'filter_list'/3
		(_0, _2, _3)
	in  let <_5> =
		apply %% Line 1507
		      'filters_as_one'/1
		    (%% Line 1507
		     FilterList)
	    in  let <Filter0> =
		    apply %% Line 1507
			  'reset_anno'/1
			(_5)
		in  %% Line 1509
		    case apply 'anon_var'/2
			     (Filter0, 0) of
		      <{Filter,Anon1}> when 'true' ->
			  let <_10> =
			      call %% Line 1510
				   'qlc':%% Line 1510
					 'vars'
				  (%% Line 1510
				   Filter)
			  in  let <_9> =
				  call %% Line 1511
				       'ordsets':%% Line 1511
						 'from_list'
				      (_1)
			      in  let <Imported> =
				      call %% Line 1510
					   'ordsets':%% Line 1510
						     'subtract'
					  (_10, _9)
				  in  %% Line 1512
				      {Filter,Anon1,Imported}
		      ( <_8> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_8})
			-| ['compiler_generated'] )
		    end
'filter_list'/3 =
    %% Line 1524
    fun (_0,_1,_2) ->
	%% Line 1525
	apply 'sel_gf'/6
	    (_0, 1, _1, _2, [], [])
'sel_gf'/6 =
    %% Line 1527
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <[],_X_N,_X_Deps,_X_RDs,_X_Gens,_X_Gens1> when 'true' ->
	      %% Line 1528
	      []
	  %% Line 1529
	  <[Fil = {Id = {'qid',_26,N},{'fil',F}}|FData],_27,Deps,State,Gens,Gens1>
	      when call 'erlang':'=:='
		    (_27,
		     N) ->
	      %% Line 1530
	      case apply 'is_guard_test'/2
		       (F, State) of
		%% Line 1531
		<'true'> when 'true' ->
		    %% Line 1532
		    case call 'lists':'keyfind'
			     (Id, 1, Deps) of
		      <{_28,GIds}>
			  when call 'erlang':'=:='
				(_28,
				 Id) ->
			  let <_7> =
			      call %% Line 1533
				   'erlang':%% Line 1533
					    'length'
				  (%% Line 1533
				   GIds)
			  in  %% Line 1533
			      case <> of
				%% Line 1534
				<>
				    when call 'erlang':'=<'
					  (_7,
					   1) ->
				    %% Line 1535
				    case apply 'generators_in_scope'/2
					     (GIds, Gens1) of
				      %% Line 1536
				      <'true'> when 'true' ->
					  let <_8> =
					      call %% Line 1537
						   'erlang':%% Line 1537
							    '+'
						  (%% Line 1537
						   N, %% Line 1537
						      1)
					  in  let <_9> =
						  apply %% Line 1537
							'sel_gf'/6
						      (%% Line 1537
						       FData, _8, %% Line 1537
								  Deps, %% Line 1537
									State, %% Line 1537
									       Gens, %% Line 1537
										     Gens1)
					      in  %% Line 1537
						  [Fil|_9]
				      %% Line 1538
				      <'false'> when 'true' ->
					  let <_10> =
					      call %% Line 1539
						   'erlang':%% Line 1539
							    '+'
						  (%% Line 1539
						   N, %% Line 1539
						      1)
					  in  %% Line 1539
					      apply 'sel_gf'/6
						  (FData, _10, Deps, State, [], [])
				      ( <_11> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_11})
					-| ['compiler_generated'] )
				    end
				%% Line 1541
				<> when 'true' ->
				    %% Line 1542
				    case apply 'generators_in_scope'/2
					     (GIds, Gens) of
				      %% Line 1543
				      <'true'> when 'true' ->
					  let <_12> =
					      call %% Line 1544
						   'erlang':%% Line 1544
							    '+'
						  (%% Line 1544
						   N, %% Line 1544
						      1)
					  in  let <_13> =
						  apply %% Line 1544
							'sel_gf'/6
						      (%% Line 1544
						       FData, _12, %% Line 1544
								   Deps, %% Line 1544
									 State, %% Line 1544
										Gens, %% Line 1544
										      [])
					      in  %% Line 1544
						  [Fil|_13]
				      %% Line 1545
				      <'false'> when 'true' ->
					  let <_14> =
					      call %% Line 1546
						   'erlang':%% Line 1546
							    '+'
						  (%% Line 1546
						   N, %% Line 1546
						      1)
					  in  %% Line 1546
					      apply 'sel_gf'/6
						  (FData, _14, Deps, State, [], [])
				      ( <_15> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_15})
					-| ['compiler_generated'] )
				    end
			      end
		      ( <_6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_6})
			-| ['compiler_generated'] )
		    end
		%% Line 1549
		<'false'> when 'true' ->
		    let <_17> =
			call %% Line 1550
			     'erlang':%% Line 1550
				      '+'
			    (%% Line 1550
			     N, %% Line 1550
				1)
		    in  %% Line 1550
			apply 'sel_gf'/6
			    (FData, _17, Deps, State, [], [])
		( <_18> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_18})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1552
	  <FData,N,Deps,State,Gens,Gens1> when 'true' ->
	      let <_19> =
		  call %% Line 1553
		       'erlang':%% Line 1553
				'+'
		      (%% Line 1553
		       N, %% Line 1553
			  1)
	      in  %% Line 1553
		  apply 'sel_gf'/6
		      (FData, _19, Deps, State, [N|Gens], [N|Gens1])
	end
'generators_in_scope'/2 =
    %% Line 1555
    fun (_0,_1) ->
	let <_4> =
	    fun (_2) ->
		%% Line 1556
		case _2 of
		  <{'qid',_7,N}> when 'true' ->
		      call 'lists':'member'
			  (N, _1)
		  ( <_3> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_3})
			  -| [{'function_name',{'-generators_in_scope/2-fun-0-',1}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 1556
	    call 'lists':'all'
		(_4, _0)
'pattern_frame'/4 =
    %% Line 1558
    fun (_0,_1,_2,_3) ->
	let <_10> =
	    fun (_7,_6) ->
		%% Line 1561
		case <_7,_6> of
		  <{QId,{'gen',Pattern,_16}},{F0,An0,PVs}> when 'true' ->
		      %% Line 1562
		      case %% Line 1563
			   apply 'pattern'/5
			       (Pattern, An0, F0, _1, _3) of
			<{F1,An1,PV}> when 'true' ->
			    %% Line 1564
			    {F1,An1,[{QId,PV}|PVs]}
			( <_5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_5})
			  -| ['compiler_generated'] )
		      end
		  ( <_9,_8> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_9,_8})
			  -| [{'function_name',{'-pattern_frame/4-fun-0-',2}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 1560
	    case %% Line 1561
		 call 'lists':'foldl'
		     (_10, %% Line 1565
			   {[],_2,[]}, _0) of
	      <{PatternFrame,_X_Anon2,PatternVars}> when 'true' ->
		  %% Line 1566
		  {PatternFrame,PatternVars}
	      ( <_11> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_11})
		-| ['compiler_generated'] )
	    end
'const_selector'/1 =
    %% Line 1568
    fun (_0) ->
	let <_1> = 'is_const'/2
	in  %% Line 1569
	    apply 'selector'/2
		(_0, _1)
'no_const_selector'/1 =
    %% Line 1571
    fun (_0) ->
	let <_6> =
	    fun (_3,_2) ->
		let <_1> =
		    apply %% Line 1572
			  'is_const'/2
			(_3, _2)
		in  %% Line 1572
		    call 'erlang':'not'
			(_1)
	in  %% Line 1572
	    apply 'selector'/2
		(_0, _6)
'selector'/2 =
    %% Line 1574
    fun (_0,_1) ->
	%% Line 1575
	( fun (_5) ->
	      %% Line 1576
	      ( fun (_3) ->
		    %% Line 1577
		    case apply _1
			     (_3, _0) of
		      %% Line 1578
		      <'true'> when 'true' ->
			  %% Line 1579
			  {'yes',_3}
		      %% Line 1580
		      <'false'> when 'true' ->
			  %% Line 1581
			  'no'
		      ( <_2> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_2})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-selector/2-fun-0-'}}] )
	  -| [{'id',{0,0,'-selector/2-fun-1-'}}] )
'bind_no_const'/2 =
    %% Line 1586
    fun (_0,_1) ->
	%% Line 1587
	case apply 'is_const'/2
		 (_0, _1) of
	  %% Line 1588
	  <'true'> when 'true' ->
	      %% Line 1589
	      'false'
	  %% Line 1590
	  <'false'> when 'true' ->
	      %% Line 1591
	      apply 'is_bindable'/1
		  (_0)
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_2})
	    -| ['compiler_generated'] )
	end
'is_const'/2 =
    %% Line 1595
    fun (_0,_1) ->
	let <_2> =
	    call %% Line 1597
		 'qlc':%% Line 1597
		       'vars'
		(_0)
	in  let <_3> =
		call %% Line 1597
		     'ordsets':%% Line 1597
			       'subtract'
		    (_2, _1)
	    in  let <_4> =
		    call %% Line 1597
			 'ordsets':%% Line 1597
				   'to_list'
			(_3)
		in  %% Line 1597
		    call 'erlang':'=:='
			([], _4)
'is_bindable'/1 =
    %% Line 1599
    fun (_0) ->
	%% Line 1600
	case apply 'normalise'/1
		 (_0) of
	  %% Line 1601
	  <{'ok',_X_C}> when 'true' ->
	      %% Line 1602
	      'true'
	  %% Line 1603
	  <'not_ok'> when 'true' ->
	      %% Line 1604
	      'false'
	  ( <_1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_1})
	    -| ['compiler_generated'] )
	end
'pattern'/5 =
    %% Line 1607
    fun (_0,_1,_2,_3,_4) ->
	let <_9> =
	    try
		%% Line 1609
		apply 'expand_pattern_records'/2
		    (_0, _4)
	    of <_5> ->
		_5
	    catch <_8,_7,_6> ->
		_0
	in  let <P2> =
		apply %% Line 1613
		      'reset_anno'/1
		    (_9)
	    in  %% Line 1614
		case apply 'anon_var'/2
			 (P2, _1) of
		  <{P3,AnonN}> when 'true' ->
		      let <_13> =
			  apply %% Line 1615
				'tuple2cons'/1
			      (%% Line 1615
			       P3)
		      in  %% Line 1615
			  case apply 'match_in_pattern'/3
				   (_13, _2, _3) of
			    <{P4,F1}> when 'true' ->
				%% Line 1616
				case apply 'element_calls'/4
					 (P4, F1, _3, ( []
							-| ['compiler_generated'] )) of
				  <{P,F2}> when 'true' ->
				      %% Line 1617
				      case apply 'unique_var'/0
					       () of
					<UniqueVar = {'var',_30,PatternVar}> when 'true' ->
					    let <F> =
						apply %% Line 1618
						      'unify'/6
						    (%% Line 1618
						     '=:=', %% Line 1618
							    UniqueVar, %% Line 1618
								       P, %% Line 1618
									  F2, _3, ( []
										    -| ['compiler_generated'] ))
					    in  %% Line 1619
						{F,AnonN,PatternVar}
					( <_18> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_18})
					  -| ['compiler_generated'] )
				      end
				  ( <_17> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_17})
				    -| ['compiler_generated'] )
				end
			    ( <_14> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_14})
			      -| ['compiler_generated'] )
			  end
		  ( <_12> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_12})
		    -| ['compiler_generated'] )
		end
'frame2frames'/1 =
    %% Line 1621
    fun (_0) ->
	case _0 of
	  <'failed'> when 'true' ->
	      %% Line 1622
	      []
	  %% Line 1623
	  <F> when 'true' ->
	      %% Line 1624
	      [F|[]]
	end
'match_in_pattern'/3 =
    %% Line 1626
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{'match',_19,E10,E20},F0,BF> when 'true' ->
	      %% Line 1627
	      case apply 'match_in_pattern'/3
		       (E10, F0, BF) of
		<{E1,F1}> when 'true' ->
		    %% Line 1628
		    case apply 'match_in_pattern'/3
			     (E20, F1, BF) of
		      <{E2,F}> when 'true' ->
			  let <_6> =
			      case %% Line 1630
				   apply BF
				       ('=:=', E1) of
				%% Line 1631
				<'true'> when 'true' ->
				    E1
				%% Line 1632
				<'false'> when 'true' ->
				    E2
				( <_5> when 'true' ->
				      %% Line 1630
				      primop 'match_fail'
					  ({'case_clause',_5})
				  -| ['compiler_generated'] )
			      end
			  in  let <_10> =
				  apply %% Line 1634
					'unify'/6
				      (%% Line 1634
				       '=:=', %% Line 1634
					      E1, %% Line 1634
						  E2, %% Line 1634
						      F, %% Line 1634
							 BF, ( []
							       -| ['compiler_generated'] ))
			      in  %% Line 1634
				  {_6,_10}
		      ( <_4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_4})
			-| ['compiler_generated'] )
		    end
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1635
	  <T,F0,BF>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_11> =
		  call %% Line 1636
		       'erlang':%% Line 1636
				'tuple_to_list'
		      (%% Line 1636
		       T)
	      in  %% Line 1636
		  case apply 'match_in_pattern'/3
			   (_11, F0, BF) of
		    <{L,F}> when 'true' ->
			let <_13> =
			    call %% Line 1637
				 'erlang':%% Line 1637
					  'list_to_tuple'
				(%% Line 1637
				 L)
			in  %% Line 1637
			    {_13,F}
		    ( <_12> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_12})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1638
	  <[E0|Es0],F0,BF> when 'true' ->
	      %% Line 1639
	      case apply 'match_in_pattern'/3
		       (E0, F0, BF) of
		<{E,F1}> when 'true' ->
		    %% Line 1640
		    case apply 'match_in_pattern'/3
			     (Es0, F1, BF) of
		      <{Es,F}> when 'true' ->
			  %% Line 1641
			  {[E|Es],F}
		      ( <_15> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_15})
			-| ['compiler_generated'] )
		    end
		( <_14> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1642
	  <E,F,_X_BF> when 'true' ->
	      %% Line 1643
	      {E,F}
	end
'anon_var'/2 =
    %% Line 1647
    fun (_0,_1) ->
	let <_7> =
	    fun (_4,_3) ->
		%% Line 1648
		case <_4,_3> of
		  <{'var',L,'_'},N> when 'true' ->
		      let <_2> =
			  call %% Line 1649
			       'erlang':%% Line 1649
					'+'
			      (%% Line 1649
			       N, %% Line 1649
				  1)
		      in  %% Line 1649
			  {{'var',L,N},_2}
		  %% Line 1650
		  <Var,N> when 'true' ->
		      {Var,N}
		end
	in  %% Line 1648
	    apply 'var_mapfold'/3
		(_7, _1, _0)
'reset_anno'/1 =
    %% Line 1653
    fun (_0) ->
	let <_1> =
	    apply %% Line 1654
		  'anno0'/0
		()
	in  %% Line 1654
	    apply 'set_anno'/2
		(_0, _1)
'set_anno'/2 =
    %% Line 1656
    fun (_0,_1) ->
	let <_4> =
	    fun (_2) ->
		_1
	in  %% Line 1657
	    apply 'map_anno'/2
		(_4, _0)
'filter'/5 =
    %% Line 1661
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <_X_E,Frames0 = [],_X_BF,_X_State,_X_Imported> when 'true' ->
	      %% Line 1662
	      Frames0
	  %% Line 1663
	  <E0,Frames0,BF,State,Imported> when 'true' ->
	      let <E> =
		  apply %% Line 1664
			'pre_expand'/1
		      (%% Line 1664
		       E0)
	      in  let <FState> =
		      {%% Line 1665
		       'fstate',%% Line 1665
				State,%% Line 1665
				      BF,%% Line 1665
					 Imported}
		  in  %% Line 1666
		      apply 'filter1'/3
			  (E, Frames0, FState)
	end
'filter1'/3 =
    %% Line 1692
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{'op',_24,Op,L0,R0},Fs,FS>
	      when let <_3> =
		    call 'erlang':'=:='
			(Op, '=:=')
		in  let <_4> =
			call 'erlang':'=:='
			    (Op, '==')
		    in  call 'erlang':'or'
			    (_3, _4) ->
	      %% Line 1693
	      case FS of
		<{'fstate',S,BF,Imported}> when 'true' ->
		    let <_11> =
			fun (_9) ->
			    %% Line 1697
			    case apply 'prep_expr'/5
				     (L0, _9, S, BF, Imported) of
			      <{L,F1}> when 'true' ->
				  %% Line 1698
				  case apply 'prep_expr'/5
					   (R0, F1, S, BF, Imported) of
				    <{R,F2}> when 'true' ->
					%% Line 1699
					case apply 'unify'/6
						 (Op, L, R, F2, BF, Imported) of
					  %% Line 1700
					  <'failed'> when 'true' ->
					      []
					  %% Line 1701
					  <F> when 'true' ->
					      [F|[]]
					end
				    ( <_7> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_7})
				      -| ['compiler_generated'] )
				  end
			      ( <_6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_6})
				-| ['compiler_generated'] )
			    end
		    in  %% Line 1696
			call 'lists':'flatmap'
			    (_11, %% Line 1703
				  Fs)
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1704
	  <{'op',_25,Op,L,R},Fs,FS>
	      when let <_12> =
		    call 'erlang':'=:='
			(Op, 'and')
		in  let <_13> =
			call 'erlang':'=:='
			    (Op, 'andalso')
		    in  call 'erlang':'or'
			    (_12, _13) ->
	      let <_14> =
		  apply %% Line 1705
			'filter1'/3
		      (%% Line 1705
		       L, %% Line 1705
			  Fs, %% Line 1705
			      FS)
	      in  %% Line 1705
		  apply 'filter1'/3
		      (R, _14, FS)
	  %% Line 1706
	  <{'op',_26,Op,L,R},Fs,FS>
	      when let <_15> =
		    call 'erlang':'=:='
			(Op, 'or')
		in  let <_16> =
			call %% Line 1707
			     'erlang':%% Line 1707
				      '=:='
			    (%% Line 1707
			     Op, %% Line 1707
				 'orelse')
		    in  let <_17> =
			    call %% Line 1708
				 'erlang':%% Line 1708
					  '=:='
				(%% Line 1708
				 Op, %% Line 1708
				     'xor')
			in  let <_18> =
				call %% Line 1707
				     'erlang':%% Line 1707
					      'or'
				    (_16, _17)
			    in  call 'erlang':'or'
				    (_15, _18) ->
	      let <_20> =
		  apply %% Line 1709
			'filter1'/3
		      (%% Line 1709
		       L, %% Line 1709
			  Fs, %% Line 1709
			      FS)
	      in  let <_19> =
		      apply %% Line 1709
			    'filter1'/3
			  (%% Line 1709
			   R, %% Line 1709
			      Fs, %% Line 1709
				  FS)
		  in  %% Line 1709
		      call 'erlang':'++'
			  (_20, _19)
	  %% Line 1710
	  <{'atom',_27,Atom},_X_Fs,_X_FS>
	      when call 'erlang':'=/='
		    (Atom,
		     'true') ->
	      %% Line 1711
	      []
	  %% Line 1712
	  <{'call',L,{'remote',_28,{'atom',_29,'erlang'},{'atom',_30,'is_record'}},[T|[R|[]]]},%% Line 1713
											       Fs,%% Line 1713
												  FS> when 'true' ->
	      %% Line 1714
	      apply 'filter1'/3
		  ({'op',L,'=:=',{'call',L,{'remote',L,{'atom',L,'erlang'},{'atom',L,'element'}},%% Line 1715
												 [{'integer',L,1}|[T|[]]]},%% Line 1715
															   R}, %% Line 1716
															       Fs, %% Line 1716
																   FS)
	  %% Line 1718
	  <{'call',L,_@r0 = {'remote',L1,M = {'atom',_31,'erlang'},{'atom',L2,'is_record'}},[T|[R|[_X_Sz|[]]]]},%% Line 1719
														Fs,%% Line 1719
														   FS> when 'true' ->
	      %% Line 1720
	      apply 'filter1'/3
		  ({'call',L,_@r0,[T|[R|[]]]}, Fs, FS)
	  %% Line 1721
	  <_X_E,Fs,_X_FS> when 'true' ->
	      %% Line 1722
	      Fs
	end
'safe_filter'/5 =
    %% Line 1728
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <_X_E,Frames0 = [],_X_BF,_X_State,_X_Imported> when 'true' ->
	      %% Line 1729
	      Frames0
	  %% Line 1730
	  <E0,Frames0,BF,State,Imported> when 'true' ->
	      let <E> =
		  apply %% Line 1731
			'pre_expand'/1
		      (%% Line 1731
		       E0)
	      in  let <FState> =
		      {%% Line 1732
		       'fstate',%% Line 1732
				State,%% Line 1732
				      BF,%% Line 1732
					 Imported}
		  in  %% Line 1733
		      apply 'safe_filter1'/3
			  (E, Frames0, FState)
	end
'safe_filter1'/3 =
    %% Line 1735
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{'op',_22,Op,L0,R0},Fs,FS>
	      when let <_3> =
		    call 'erlang':'=:='
			(Op, '=:=')
		in  let <_4> =
			call 'erlang':'=:='
			    (Op, '==')
		    in  call 'erlang':'or'
			    (_3, _4) ->
	      %% Line 1736
	      case FS of
		<{'fstate',S,BF,Imported}> when 'true' ->
		    let <_11> =
			fun (_9) ->
			    %% Line 1738
			    case apply 'prep_expr'/5
				     (L0, _9, S, BF, Imported) of
			      <{L,F1}> when 'true' ->
				  %% Line 1739
				  case apply 'prep_expr'/5
					   (R0, F1, S, BF, Imported) of
				    <{R,F2}> when 'true' ->
					%% Line 1740
					case apply 'safe_unify'/6
						 (Op, L, R, F2, BF, Imported) of
					  %% Line 1741
					  <'failed'> when 'true' ->
					      []
					  %% Line 1742
					  <F> when 'true' ->
					      [F|[]]
					end
				    ( <_7> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_7})
				      -| ['compiler_generated'] )
				  end
			      ( <_6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_6})
				-| ['compiler_generated'] )
			    end
		    in  %% Line 1737
			call 'lists':'flatmap'
			    (_11, %% Line 1744
				  Fs)
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1745
	  <{'op',_23,Op,L,R},Fs,FS>
	      when let <_12> =
		    call 'erlang':'=:='
			(Op, 'and')
		in  let <_13> =
			call 'erlang':'=:='
			    (Op, 'andalso')
		    in  call 'erlang':'or'
			    (_12, _13) ->
	      let <_14> =
		  apply %% Line 1746
			'safe_filter1'/3
		      (%% Line 1746
		       L, %% Line 1746
			  Fs, %% Line 1746
			      FS)
	      in  %% Line 1746
		  apply 'safe_filter1'/3
		      (R, _14, FS)
	  %% Line 1747
	  <{'op',_24,Op,L,R},Fs,FS>
	      when let <_15> =
		    call 'erlang':'=:='
			(Op, 'or')
		in  let <_16> =
			call 'erlang':'=:='
			    (Op, 'orelse')
		    in  call 'erlang':'or'
			    (_15, _16) ->
	      let <_18> =
		  apply %% Line 1748
			'safe_filter1'/3
		      (%% Line 1748
		       L, %% Line 1748
			  Fs, %% Line 1748
			      FS)
	      in  let <_17> =
		      apply %% Line 1748
			    'safe_filter1'/3
			  (%% Line 1748
			   R, %% Line 1748
			      Fs, %% Line 1748
				  FS)
		  in  %% Line 1748
		      call 'erlang':'++'
			  (_18, _17)
	  %% Line 1749
	  <{'atom',_25,'true'},Fs,_X_FS> when 'true' ->
	      %% Line 1750
	      Fs
	  %% Line 1751
	  <_X_E,_X_Fs,_X_FS> when 'true' ->
	      %% Line 1752
	      []
	end
'pre_expand'/1 =
    %% Line 1756
    fun (_0) ->
	case _0 of
	  <{'call',L1,{'atom',L2,'record'},As}> when 'true' ->
	      %% Line 1757
	      apply 'pre_expand'/1
		  ({'call',L1,{'atom',L2,'is_record'},As})
	  %% Line 1758
	  <{'call',L,F = {'atom',_6,_7},As}> when 'true' ->
	      %% Line 1759
	      apply 'pre_expand'/1
		  ({'call',L,{'remote',L,{'atom',L,'erlang'},F},As})
	  %% Line 1760
	  <{'call',L,{'tuple',_8,[M|[F|[]]]},As}> when 'true' ->
	      %% Line 1761
	      apply 'pre_expand'/1
		  ({'call',L,{'remote',L,M,F},As})
	  %% Line 1762
	  <T>
	      when call 'erlang':'is_tuple'
		    (_0) ->
	      let <_1> =
		  call %% Line 1763
		       'erlang':%% Line 1763
				'tuple_to_list'
		      (%% Line 1763
		       T)
	      in  let <_2> =
		      apply %% Line 1763
			    'pre_expand'/1
			  (_1)
		  in  %% Line 1763
		      call 'erlang':'list_to_tuple'
			  (_2)
	  %% Line 1764
	  <[E|Es]> when 'true' ->
	      let <_3> =
		  apply %% Line 1765
			'pre_expand'/1
		      (%% Line 1765
		       E)
	      in  let <_4> =
		      apply %% Line 1765
			    'pre_expand'/1
			  (%% Line 1765
			   Es)
		  in  %% Line 1765
		      [_3|_4]
	  %% Line 1766
	  <T> when 'true' ->
	      %% Line 1767
	      T
	end
'frames_to_columns'/6 =
    %% Line 1770
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <[],_X_PatternVars,_X_DerefFun,_X_SelectorFun,_X_Imp,_X_CompOp> when 'true' ->
	      %% Line 1771
	      []
	  %% Line 1772
	  <Fs,PatternVars,DerefFun,SelectorFun,Imp,CompOp> when 'true' ->
	      let <_24> =
		  letrec
		      'lc$^0'/1 =
			  %% Line 1785
			  fun (_8) ->
			      case _8 of
				<[{PatternId,PV}|_7]> when 'true' ->
				    let <_9> =
					apply 'anno0'/0
					    ()
				    in  let <PatVar> = {'var',_9,PV}
					in  let <_16> =
						letrec
						    'lc$^1'/1 =
							fun (_13) ->
							    case _13 of
							      <[F|_12]> when 'true' ->
								  let <_14> =
								      apply 'pattern_size'/3
									  ([F|[]], PatVar, 'false')
								  in  let <_15> =
									  apply 'lc$^1'/1
									      (_12)
								      in  ( [_14|_15]
									    -| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_57> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_57})
								      -| [{'function_name',{'lc$^1',1}}] )
								-| ['compiler_generated'] )
							    end
						in  apply 'lc$^1'/1
							(Fs)
					    in  let <_18> =
						    call 'erlang':'--'
							(_16, ['undefined'])
						in  let <MaxPZ> =
							call 'lists':'max'
							    ([0|_18])
						    in  let <Vars> =
							    apply 'pat_vars'/1
								(MaxPZ)
							in  ( case PatternId of
								( <( {'qid',_55,_rec23}
								     -| ['compiler_generated'] )> when 'true' ->
								      let <_23> =
									  apply 'lc$^0'/1
									      (_7)
								      in  ( [{_rec23,PatVar,_16,Vars}|_23]
									    -| ['compiler_generated'] )
								  -| ['compiler_generated'] )
								( <_56> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','qid'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
				( <[_6|_7]> when 'true' ->
				      apply 'lc$^0'/1
					  (_7)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_58> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_58})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  %% Line 1785
		      apply 'lc$^0'/1
			  (PatternVars)
	      in  let <BF> =
		      fun (_27,_26) ->
			  %% Line 1786
			  apply 'is_bindable'/1
			      (_26)
		  in  let <Fun> =
			  fun (_39,_38) ->
			      %% Line 1787
			      case <_39,_38> of
				<{_X_PatN,PatVar,PatSizes,Vars},Frames> when 'true' ->
				    %% Line 1789
				    ( letrec
					  'lc$^3'/1 =
					      fun (_34) ->
						  case _34 of
						    <[{Sz,Frame}|_32]> when 'true' ->
							let <_35> =
							    apply 'pat_tuple'/2
								(Sz, Vars)
							in  let <_36> =
								apply 'unify'/6
								    ('=:=', _35, PatVar, Frame, BF, Imp)
							    in  let <_37> =
								    apply 'lc$^3'/1
									(_32)
								in  ( [_36|_37]
								      -| ['compiler_generated'] )
						    ( <[_31|_32]> when 'true' ->
							  apply 'lc$^3'/1
							      (_32)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_61> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_61})
							    -| [{'function_name',{'lc$^3',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  let <_33> =
					      call 'lists':'zip'
						  (PatSizes, Frames)
					  in  apply 'lc$^3'/1
						  (_33)
				      -| ['list_comprehension'] )
				( <_41,_40> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_41,_40})
					-| [{'function_name',{'-frames_to_columns/6-fun-4-',2}}] )
				  -| ['compiler_generated'] )
			      end
		      in  let <NFs> =
			      call %% Line 1791
				   'lists':%% Line 1791
					   'foldl'
				  (%% Line 1791
				   Fun, %% Line 1791
					Fs, _24)
			  in  %% Line 1793
			      ( letrec
				    'lc$^5'/1 =
					fun (_46) ->
					    case _46 of
					      <[{PatN,_X_PatVar,PatSizes,Vars}|_45]> when 'true' ->
						  let <_47> =
						      apply 'frames2cols'/7
							  (NFs, PatN, PatSizes, Vars, DerefFun, SelectorFun, CompOp)
						  in  let <_48> =
							  apply 'lc$^5'/1
							      (_45)
						      in  ( [_47|_48]
							    -| ['compiler_generated'] )
					      ( <[_44|_45]> when 'true' ->
						    apply 'lc$^5'/1
							(_45)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_62> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_62})
						      -| [{'function_name',{'lc$^5',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^5'/1
					(_24)
				-| ['list_comprehension'] )
	end
'frames2cols'/7 =
    %% Line 1795
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	let <_33> =
	    letrec
		'lc$^0'/1 =
		    %% Line 1819
		    fun (_10) ->
			case _10 of
			  <[{F,PatSz}|_8]> when 'true' ->
			      let <_29> =
				  letrec
				      'lc$^1'/1 =
					  fun (_23) ->
					      case _23 of
						<[{V,Col}|_12]> when 'true' ->
						    let <_17> =
							apply _4
							    (V, F)
						    in  let <_18> =
							    call 'erlang':'tl'
								(_17)
							in  ( case <> of
								<>
								    when call 'erlang':'=:='
									  (_18,
									   []) ->
								    let <_19> =
									apply _5
									    (F)
								    in  let <_20> =
									    call 'erlang':'hd'
										(_17)
									in  let <_22> =
										apply _19
										    (_20)
									    in  ( case <> of
										    <>
											when call 'erlang':'=/='
											      (_22,
											       'no') ->
											let <_24> =
											    call 'erlang':'element'
												(2, _22)
											in  let <_25> =
												apply 'cons2tuple'/1
												    (_24)
											    in  let <_26> =
												    apply 'lc$^1'/1
													(_12)
												in  ( [{{_1,Col},_25}|_26]
												      -| ['compiler_generated'] )
										    ( <> when 'true' ->
											  apply 'lc$^1'/1
											      (_12)
										      -| ['compiler_generated'] )
										  end
										  -| ['list_comprehension'] )
								( <> when 'true' ->
								      apply 'lc$^1'/1
									  (_12)
								  -| ['compiler_generated'] )
							      end
							      -| ['list_comprehension'] )
						( <[_11|_12]> when 'true' ->
						      apply 'lc$^1'/1
							  (_12)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_59> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_59})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  let <_14> =
					  call 'lists':'sublist'
					      (_3, PatSz)
				      in  let <_13> =
					      call 'lists':'seq'
						  (1, PatSz)
					  in  let <_15> =
						  call 'lists':'zip'
						      (_14, _13)
					      in  apply 'lc$^1'/1
						      (_15)
			      in  let <_31> =
				      call 'sofs':'relation'
					  (_29)
				  in  let <_32> =
					  apply 'lc$^0'/1
					      (_8)
				      in  ( [_31|_32]
					    -| ['compiler_generated'] )
			  ( <[_7|_8]> when 'true' ->
				apply 'lc$^0'/1
				    (_8)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_60> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_60})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  let <_9> =
		    call %% Line 1819
			 'lists':%% Line 1819
				 'zip'
			(_0, _2)
		in  %% Line 1819
		    apply 'lc$^0'/1
			(_9)
	in  let <Ss> =
		call %% Line 1820
		     'sofs':%% Line 1820
			    'from_sets'
		    (_33)
	    in  let <_38> =
		    fun (_36) ->
			%% Line 1822
			call 'sofs':'projection'
			    (1, _36)
		in  let <_39> =
			call %% Line 1822
			     'sofs':%% Line 1822
				    'projection'
			    (_38, %% Line 1823
				  Ss)
		    in  let <D> =
			    call %% Line 1822
				 'sofs':%% Line 1822
					'intersection'
				(_39)
			in  let <_41> =
				call %% Line 1824
				     'sofs':%% Line 1824
					    'union'
				    (%% Line 1824
				     Ss)
			    in  let <_42> =
				    call %% Line 1824
					 'sofs':%% Line 1824
						'relation_to_family'
					(_41)
				in  let <Cs> =
					call %% Line 1824
					     'sofs':%% Line 1824
						    'restriction'
					    (_42, %% Line 1824
						  D)
				    in  %% Line 1825
					( letrec
					      'lc$^3'/1 =
						  fun (_48) ->
						      case _48 of
							<[C = {_58,Vs}|_45]> when 'true' ->
							    ( case apply 'col_ignore'/2
								       (Vs, _6) of
								<'false'> when 'true' ->
								    let <_49> =
									apply 'lc$^3'/1
									    (_45)
								    in  ( [C|_49]
									  -| ['compiler_generated'] )
								( <'true'> when 'true' ->
								      apply 'lc$^3'/1
									  (_45)
								  -| ['compiler_generated'] )
								( <_cor_variable> when 'true' ->
								      call 'erlang':'error'
									  ('badarg')
								  -| ['compiler_generated'] )
							      end
							      -| ['list_comprehension'] )
							( <[_44|_45]> when 'true' ->
							      apply 'lc$^3'/1
								  (_45)
							  -| ['compiler_generated'] )
							<[]> when 'true' ->
							    []
							( <_62> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_62})
								-| [{'function_name',{'lc$^3',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  let <_46> =
						  call 'sofs':'to_external'
						      (Cs)
					      in  apply 'lc$^3'/1
						      (_46)
					  -| ['list_comprehension'] )
'pat_vars'/1 =
    %% Line 1827
    fun (_0) ->
	%% Line 1828
	( letrec
	      'lc$^0'/1 =
		  fun (_4) ->
		      case _4 of
			<[_8|_2]> when 'true' ->
			    let <_5> =
				apply 'unique_var'/0
				    ()
			    in  let <_6> =
				    apply 'lc$^0'/1
					(_2)
				in  ( [_5|_6]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_9> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_9})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_3> =
		  call 'lists':'seq'
		      (1, _0)
	      in  apply 'lc$^0'/1
		      (_3)
	  -| ['list_comprehension'] )
'pat_tuple'/2 =
    %% Line 1830
    fun (_0,_1) ->
	case <_0,_1> of
	  <Sz,Vars>
	      when let <_2> =
		    call 'erlang':'is_integer'
			(Sz)
		in  let <_3> =
			call 'erlang':'>'
			    (Sz, 0)
		    in  call 'erlang':'and'
			    (_2, _3) ->
	      let <TupleTail> =
		  apply %% Line 1831
			'unique_var'/0
		      ()
	      in  let <_5> =
		      call %% Line 1832
			   'lists':%% Line 1832
				   'sublist'
			  (%% Line 1832
			   Vars, %% Line 1832
				 Sz)
		  in  let <_6> =
			  call %% Line 1832
			       'erlang':%% Line 1832
					'++'
			      (_5, %% Line 1832
				   TupleTail)
		      in  let <_7> =
			      apply %% Line 1832
				    'list2cons'/1
				  (_6)
			  in  %% Line 1832
			      {'cons_tuple',_7}
	  %% Line 1833
	  <_10,_X_Vars> when 'true' ->
	      %% Line 1834
	      apply 'unique_var'/0
		  ()
	end
'col_ignore'/2 =
    %% Line 1838
    fun (_0,_1) ->
	case <_0,_1> of
	  <_X_Vs,'=:='> when 'true' ->
	      %% Line 1839
	      'false'
	  %% Line 1840
	  <Vs,'=='> when 'true' ->
	      let <_11> =
		  call %% Line 1841
		       'erlang':%% Line 1841
				'length'
		      (%% Line 1841
		       Vs)
	      in  let <_8> =
		      letrec
			  'lc$^0'/1 =
			      %% Line 1841
			      fun (_4) ->
				  case _4 of
				    <[V|_3]> when 'true' ->
					let <_5> =
					    apply 'normalise'/1
						(V)
					in  let <_6> =
						call 'erlang':'element'
						    (2, _5)
					    in  let <_7> =
						    apply 'lc$^0'/1
							(_3)
						in  ( [_6|_7]
						      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_14> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_14})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  %% Line 1841
			  apply 'lc$^0'/1
			      (Vs)
		  in  let <_9> =
			  call %% Line 1841
			       'lists':%% Line 1841
				       'usort'
			      (_8)
		      in  let <_10> =
			      call %% Line 1841
				   'erlang':%% Line 1841
					    'length'
				  (_9)
			  in  %% Line 1841
			      call 'erlang':'=/='
				  (_11, _10)
	  ( <_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12})
		  -| [{'function_name',{'col_ignore',2}}] )
	    -| ['compiler_generated'] )
	end
'pattern_sizes'/2 =
    %% Line 1843
    fun (_0,_1) ->
	%% Line 1845
	( letrec
	      'lc$^0'/1 =
		  fun (_7) ->
		      case _7 of
			<[{QId,PV}|_3]> when 'true' ->
			    let <_4> =
				apply %% Line 1846
				      'anno0'/0
				    ()
			    in  let <_6> =
				    apply %% Line 1846
					  'pattern_size'/3
					(_1, %% Line 1846
					     {'var',_4,PV}, %% Line 1846
							    'true')
				in  %% Line 1846
				    ( case <> of
					<>
					    when call 'erlang':'=/='
						  ('undefined',
						   _6) ->
					    ( case QId of
						( <( {'qid',_14,_rec24}
						     -| ['compiler_generated'] )> when 'true' ->
						      let <_10> =
							  apply 'lc$^0'/1
							      (_3)
						      in  ( [{_rec24,_6}|_10]
							    -| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <_15> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','qid'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					( <> when 'true' ->
					      apply 'lc$^0'/1
						  (_3)
					  -| ['compiler_generated'] )
				      end
				      -| ['list_comprehension'] )
			( <[_2|_3]> when 'true' ->
			      apply 'lc$^0'/1
				  (_3)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_16> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_16})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_0)
	  -| ['list_comprehension'] )
'pattern_size'/3 =
    %% Line 1848
    fun (_0,_1,_2) ->
	let <Fun> =
	    fun (_6) ->
		let <_5> =
		    apply %% Line 1849
			  'deref_pattern'/1
			(( []
			   -| ['compiler_generated'] ))
		in  %% Line 1849
		    apply _5
			(_1, _6)
	in  let <Derefs> =
		call %% Line 1850
		     'lists':%% Line 1850
			     'flatmap'
		    (%% Line 1850
		     Fun, _0)
	    in  let <_15> =
		    letrec
			'lc$^1'/1 =
			    %% Line 1851
			    fun (_12) ->
				case _12 of
				  <[{'cons_tuple',Cs}|_11]> when 'true' ->
				      let <_13> =
					  apply 'pattern_sz'/3
					      (Cs, 0, _2)
				      in  let <_14> =
					      apply 'lc$^1'/1
						  (_11)
					  in  ( [_13|_14]
						-| ['compiler_generated'] )
				  ( <[_10|_11]> when 'true' ->
					apply 'lc$^1'/1
					    (_11)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_26> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_26})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  %% Line 1851
			apply 'lc$^1'/1
			    (Derefs)
		in  %% Line 1852
		    case call 'lists':'usort'
			     (_15) of
		      %% Line 1853
		      <[Sz|[]]>
			  when let <_17> =
				call 'erlang':'is_integer'
				    (Sz)
			    in  let <_18> =
				    call 'erlang':'>='
					(Sz, 0)
				in  call 'erlang':'and'
					(_17, _18) ->
			  Sz
		      %% Line 1854
		      <[]>
			  when ( call 'erlang':'=:='
				  (_2,
				   'false')
			      -| ['compiler_generated'] ) ->
			  0
		      %% Line 1855
		      <_24> when 'true' ->
			  'undefined'
		    end
'pattern_sz'/3 =
    %% Line 1858
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{'cons',_7,_X_C,E},Col,Exact> when 'true' ->
	      let <_3> =
		  call %% Line 1859
		       'erlang':%% Line 1859
				'+'
		      (%% Line 1859
		       Col, %% Line 1859
			    1)
	      in  %% Line 1859
		  apply 'pattern_sz'/3
		      (E, _3, Exact)
	  %% Line 1860
	  <{'nil',_8},Sz,_X_Exact> when 'true' ->
	      %% Line 1861
	      Sz
	  %% Line 1862
	  <_9,_X_Sz,'true'> when 'true' ->
	      %% Line 1863
	      'undefined'
	  %% Line 1864
	  <_10,Sz,'false'> when 'true' ->
	      %% Line 1865
	      Sz
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'pattern_sz',3}}] )
	    -| ['compiler_generated'] )
	end
'deref_pattern'/1 =
    %% Line 1867
    fun (_0) ->
	%% Line 1868
	( fun (_2,_1) ->
	      apply 'deref_values'/3
		  (_2, _1, _0)
	  -| [{'id',{0,0,'-deref_pattern/1-fun-0-'}}] )
'prep_expr'/5 =
    %% Line 1870
    fun (_0,_1,_2,_3,_4) ->
	let <_5> =
	    apply %% Line 1871
		  'expand_expr_records'/2
		(_0, _2)
	in  let <_6> =
		apply %% Line 1871
		      'tuple2cons'/1
		    (_5)
	    in  %% Line 1871
		apply 'element_calls'/4
		    (_6, _1, _3, _4)
'unify_column'/5 =
    %% Line 1873
    fun (_0,_1,_2,_3,_4) ->
	let <A> =
	    apply %% Line 1874
		  'anno0'/0
		()
	in  let <Call> =
		{%% Line 1875
		 'call',%% Line 1875
			A,%% Line 1875
			  {'remote',A,{'atom',A,'erlang'},{'atom',A,'element'}},%% Line 1876
										[{'integer',A,_2}|[{'var',A,_1}|[]]]}
	    in  %% Line 1877
		apply 'element_calls'/4
		    (Call, _0, _3, _4)
'element_calls'/4 =
    %% Line 1884
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <{'call',_28,{'remote',_29,{'atom',_30,'erlang'},{'atom',_31,'element'}},%% Line 1885
										   [{'integer',_32,I}|[Term0|[]]]},%% Line 1885
														   F0,%% Line 1885
														      BF,%% Line 1885
															 Imported>
	      when %% Line 1885
		call 'erlang':'>'
		    (I,
		     0) ->
	      let <TupleTail> =
		  apply %% Line 1888
			'unique_var'/0
		      ()
	      in  let <_11> =
		      letrec
			  'lc$^0'/1 =
			      %% Line 1889
			      fun (_8) ->
				  case _8 of
				    <[_33|_6]> when 'true' ->
					let <_9> =
					    apply 'unique_var'/0
						()
					in  let <_10> =
						apply 'lc$^0'/1
						    (_6)
					    in  ( [_9|_10]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_34> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_34})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_7> =
			      call %% Line 1889
				   'lists':%% Line 1889
					   'seq'
				  (%% Line 1889
				   1, %% Line 1889
				      I)
			  in  %% Line 1889
			      apply 'lc$^0'/1
				  (_7)
		  in  let <Vars> =
			  call %% Line 1890
			       'erlang':%% Line 1890
					'++'
			      (_11, %% Line 1890
				    TupleTail)
		      in  let <_14> =
			      apply %% Line 1891
				    'list2cons'/1
				  (%% Line 1891
				   Vars)
			  in  let <Tuple> = {%% Line 1891
				   'cons_tuple',_14}
			      in  let <VarI> =
				      call %% Line 1892
					   'lists':%% Line 1892
						   'nth'
					  (%% Line 1892
					   I, _11)
				  in  %% Line 1893
				      case apply 'element_calls'/4
					       (Term0, F0, BF, Imported) of
					<{Term,F}> when 'true' ->
					    let <_18> =
						apply %% Line 1894
						      'unify'/6
						    (%% Line 1894
						     '=:=', %% Line 1894
							    Tuple, %% Line 1894
								   Term, %% Line 1894
									 F, %% Line 1894
									    BF, %% Line 1894
										Imported)
					    in  %% Line 1894
						{VarI,_18}
					( <_17> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_17})
					  -| ['compiler_generated'] )
				      end
	  %% Line 1895
	  <T,F0,BF,Imported>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_19> =
		  call %% Line 1896
		       'erlang':%% Line 1896
				'tuple_to_list'
		      (%% Line 1896
		       T)
	      in  %% Line 1896
		  case apply 'element_calls'/4
			   (_19, F0, BF, Imported) of
		    <{L,F}> when 'true' ->
			let <_21> =
			    call %% Line 1897
				 'erlang':%% Line 1897
					  'list_to_tuple'
				(%% Line 1897
				 L)
			in  %% Line 1897
			    {_21,F}
		    ( <_20> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_20})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1898
	  <[E0|Es0],F0,BF,Imported> when 'true' ->
	      %% Line 1899
	      case apply 'element_calls'/4
		       (E0, F0, BF, Imported) of
		<{E,F1}> when 'true' ->
		    %% Line 1900
		    case apply 'element_calls'/4
			     (Es0, F1, BF, Imported) of
		      <{Es,F}> when 'true' ->
			  %% Line 1901
			  {[E|Es],F}
		      ( <_23> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_23})
			-| ['compiler_generated'] )
		    end
		( <_22> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_22})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1902
	  <E,F,_X_BF,_X_Imported> when 'true' ->
	      %% Line 1903
	      {E,F}
	end
'unique_var'/0 =
    %% Line 1905
    fun () ->
	let <_1> =
	    apply %% Line 1906
		  'anno0'/0
		()
	in  let <_0> =
		call %% Line 1906
		     'erlang':%% Line 1906
			      'make_ref'
		    ()
	    in  %% Line 1906
		{'var',_1,_0}
'is_unique_var'/1 =
    %% Line 1908
    fun (_0) ->
	case _0 of
	  <{'var',_X_L,V}> when 'true' ->
	      %% Line 1909
	      call 'erlang':'is_reference'
		  (V)
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'is_unique_var',1}}] )
	    -| ['compiler_generated'] )
	end
'expand_pattern_records'/2 =
    %% Line 1911
    fun (_0,_1) ->
	let <A> =
	    apply %% Line 1912
		  'anno0'/0
		()
	in  let <E> =
		{%% Line 1913
		 'case',%% Line 1913
			A,%% Line 1913
			  {'atom',A,'true'},%% Line 1913
					    [{'clause',A,[_0|[]],[],[{'atom',A,'true'}|[]]}|[]]}
	    in  %% Line 1914
		case apply 'expand_expr_records'/2
			 (E, _1) of
		  <{'case',_7,_8,[{'clause',_9,[NP|[]],_10,_11}|[]]}>
		      when call 'erlang':'=:='
			    (_9,
			     A) ->
		      %% Line 1915
		      NP
		  ( <_4> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_4})
		    -| ['compiler_generated'] )
		end
'expand_expr_records'/2 =
    %% Line 1917
    fun (_0,_1) ->
	%% Line 1918
	( case _1 of
	    ( <( {'state',_12,_13,_14,_rec25,_15,_16,_17}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <A> =
		      apply %% Line 1919
			    'anno1'/0
			  ()
		  in  let <_6> =
			  apply %% Line 1920
				'pe'/1
			      (_0)
		      in  let <Forms0> =
			      call %% Line 1920
				   'erlang':%% Line 1920
					    '++'
				  (_rec25, %% Line 1920
					   [{'function',A,'foo',0,[{'clause',A,[],[],[_6|[]]}|[]]}|[]])
			  in  let <Forms> =
				  call %% Line 1921
				       'erl_expand_records':%% Line 1921
							    'module'
				      (%% Line 1921
				       Forms0, %% Line 1921
					       ['no_strict_record_tests'])
			      in  %% Line 1922
				  case call 'lists':'last'
					   (Forms) of
				    <{'function',_19,'foo',0,[{'clause',_20,[],[],[NE|[]]}|[]]}> when 'true' ->
					%% Line 1923
					NE
				    ( <_9> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_9})
				      -| ['compiler_generated'] )
				  end
	      -| ['compiler_generated'] )
	    ( <_18> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'pe'/1 =
    %% Line 1926
    fun (_0) ->
	case _0 of
	  <{'op',Line,Op,A}> when 'true' ->
	      let <_1> =
		  apply %% Line 1927
			'pe'/1
		      (%% Line 1927
		       A)
	      in  %% Line 1927
		  call 'erl_eval':'partial_eval'
		      ({'op',Line,Op,_1})
	  %% Line 1928
	  <{'op',Line,Op,L,R}> when 'true' ->
	      let <_3> =
		  apply %% Line 1929
			'pe'/1
		      (%% Line 1929
		       L)
	      in  let <_2> =
		      apply %% Line 1929
			    'pe'/1
			  (%% Line 1929
			   R)
		  in  %% Line 1929
		      call 'erl_eval':'partial_eval'
			  ({'op',Line,Op,_3,_2})
	  %% Line 1930
	  <T>
	      when call 'erlang':'is_tuple'
		    (_0) ->
	      let <_4> =
		  call %% Line 1931
		       'erlang':%% Line 1931
				'tuple_to_list'
		      (%% Line 1931
		       T)
	      in  let <_5> =
		      apply %% Line 1931
			    'pe'/1
			  (_4)
		  in  %% Line 1931
		      call 'erlang':'list_to_tuple'
			  (_5)
	  %% Line 1932
	  <[E|Es]> when 'true' ->
	      let <_6> =
		  apply %% Line 1933
			'pe'/1
		      (%% Line 1933
		       E)
	      in  let <_7> =
		      apply %% Line 1933
			    'pe'/1
			  (%% Line 1933
			   Es)
		  in  %% Line 1933
		      [_6|_7]
	  %% Line 1934
	  <E> when 'true' ->
	      %% Line 1935
	      E
	end
'unify'/6 =
    %% Line 1937
    fun (_0,_1,_2,_3,_4,_5) ->
	%% Line 1938
	apply 'unify'/7
	    (_0, _1, _2, _3, _4, _5, 'false')
'safe_unify'/6 =
    %% Line 1940
    fun (_0,_1,_2,_3,_4,_5) ->
	%% Line 1941
	apply 'unify'/7
	    (_0, _1, _2, _3, _4, _5, 'true')
'unify'/7 =
    %% Line 1943
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <_X_Op,_X_E1,_X_E2,'failed',_X_BF,_X_Imported,_X_Safe> when 'true' ->
	      %% Line 1944
	      'failed'
	  %% Line 1945
	  <_X_Op,E,_26,F,_X_BF,_X_Imported,_X_Safe>
	      when call 'erlang':'=:='
		    (_26,
		     E) ->
	      %% Line 1946
	      F
	  %% Line 1947
	  <Op,Var = {'var',_27,_28},E2,F,BF,Imported,Safe> when 'true' ->
	      %% Line 1948
	      apply 'extend_frame'/7
		  (Op, Var, E2, F, BF, Imported, Safe)
	  %% Line 1949
	  <Op,E1,Var = {'var',_29,_30},F,BF,Imported,Safe> when 'true' ->
	      %% Line 1950
	      apply 'extend_frame'/7
		  (Op, Var, E1, F, BF, Imported, Safe)
	  %% Line 1951
	  <Op,{'cons_tuple',Es1},{'cons_tuple',Es2},F,BF,Imported,Safe> when 'true' ->
	      %% Line 1952
	      apply 'unify'/7
		  (Op, Es1, Es2, F, BF, Imported, Safe)
	  %% Line 1953
	  <Op,{'cons',_31,L1,R1},{'cons',_32,L2,R2},F,BF,Imported,Safe> when 'true' ->
	      let <E> =
		  apply %% Line 1954
			'unify'/7
		      (%% Line 1954
		       Op, %% Line 1954
			   L1, %% Line 1954
			       L2, %% Line 1954
				   F, %% Line 1954
				      BF, %% Line 1954
					  Imported, %% Line 1954
						    Safe)
	      in  %% Line 1955
		  apply 'unify'/7
		      (Op, R1, R2, E, BF, Imported, Safe)
	  %% Line 1956
	  <Op,E1,E2,F,_X_BF,_X_Imported,Safe> when 'true' ->
	      %% Line 1957
	      try
		  %% Line 1958
		  case apply 'normalise'/1
			   (E1) of
		    <{'ok',C1}> when 'true' ->
			%% Line 1959
			case apply 'normalise'/1
				 (E2) of
			  <{'ok',C2}> when 'true' ->
			      %% Line 1960
			      case <> of
				%% Line 1961
				<>
				    when let <_10> =
					  call 'erlang':'=:='
					      (Op, '=:=')
				      in  let <_11> =
					      call 'erlang':'=:='
						  (C1, C2)
					  in  call 'erlang':'and'
						  (_10, _11) ->
				    %% Line 1962
				    F
				%% Line 1963
				<>
				    when let <_12> =
					  call 'erlang':'=:='
					      (Op, '==')
				      in  let <_13> =
					      call 'erlang':'=='
						  (C1, C2)
					  in  call 'erlang':'and'
						  (_12, _13) ->
				    %% Line 1964
				    F
				%% Line 1965
				<> when 'true' ->
				    %% Line 1966
				    'failed'
			      end
			  ( <_9> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_9})
			    -| ['compiler_generated'] )
			end
		    ( <_8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_8})
		      -| ['compiler_generated'] )
		  end
	      of <_14> ->
		  _14
	      catch <_17,_16,_15> ->
		  %% Line 1968
		  case <_17,_16,_15> of
		    <( 'error'
		       -| ['compiler_generated'] ),_33,_34>
			when ( call 'erlang':'=:='
				(Safe,
				 'true')
			    -| ['compiler_generated'] ) ->
			'failed'
		    %% Line 1969
		    <( 'error'
		       -| ['compiler_generated'] ),_35,_36>
			when ( call 'erlang':'=:='
				(Safe,
				 'false')
			    -| ['compiler_generated'] ) ->
			F
		    ( <_37,_38,_39> when 'true' ->
			  primop 'raise'
			      (_39, _38)
		      -| ['compiler_generated'] )
		  end
	end
'extend_frame'/7 =
    %% Line 1984
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	%% Line 1985
	case apply 'var_values'/2
		 (_1, _3) of
	  %% Line 1986
	  <[]> when 'true' ->
	      %% Line 1987
	      case _2 of
		%% Line 1988
		<{'var',_17,_18}> when 'true' ->
		    %% Line 1989
		    case apply 'var_values'/2
			     (_2, _3) of
		      %% Line 1990
		      <[]> when 'true' ->
			  %% Line 1991
			  apply 'add_binding'/7
			      (_0, _2, _1, _3, _4, _5, _6)
		      %% Line 1992
		      <ValsOps> when 'true' ->
			  %% Line 1993
			  apply 'maybe_add_binding'/8
			      (ValsOps, _0, _2, _1, _3, _4, _5, _6)
		    end
		%% Line 1996
		<_19> when 'true' ->
		    %% Line 1997
		    apply 'add_binding'/7
			(_0, _1, _2, _3, _4, _5, _6)
	      end
	  %% Line 1999
	  <ValsOps> when 'true' ->
	      %% Line 2000
	      apply 'maybe_add_binding'/8
		  (ValsOps, _0, _1, _2, _3, _4, _5, _6)
	end
'maybe_add_binding'/8 =
    %% Line 2003
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	%% Line 2004
	case apply 'unify_var_bindings'/7
		 (_0, _1, _3, _4, _5, _6, _7) of
	  %% Line 2005
	  <'failed'> when 'true' ->
	      %% Line 2006
	      'failed'
	  %% Line 2007
	  <F> when 'true' ->
	      %% Line 2008
	      case apply 'already_bound'/4
		       (_1, _2, _3, F) of
		%% Line 2009
		<'true'> when 'true' ->
		    %% Line 2010
		    F
		%% Line 2011
		<'false'> when 'true' ->
		    %% Line 2012
		    apply 'add_binding'/7
			(_1, _2, _3, F, _5, _6, _7)
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_8})
		  -| ['compiler_generated'] )
	      end
	end
'already_bound'/4 =
    %% Line 2016
    fun (_0,_1,_2,_3) ->
	let <BFun> =
	    fun (_5,_4) ->
		%% Line 2019
		call 'erlang':'=:='
		    (_0, _4)
	in  let <DerefValue> =
		apply %% Line 2020
		      'deref_value'/5
		    (_2, _0, _3, %% Line 2020
				 BFun, %% Line 2020
				       'all')
	    in  let <DerefVar> =
		    apply %% Line 2021
			  'deref_var'/4
			(_1, _3, %% Line 2021
				 BFun, %% Line 2021
				       'all')
		in  let <_11> =
			call %% Line 2022
			     'erlang':%% Line 2022
				      '--'
			    (%% Line 2022
			     DerefValue, %% Line 2022
					 DerefVar)
		    in  %% Line 2022
			call 'erlang':'=:='
			    (_11, [])
'unify_var_bindings'/7 =
    %% Line 2024
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <[],_X_Op,_X_Value,F,_X_BF,_X_Imported,_X_Safe> when 'true' ->
	      %% Line 2025
	      F
	  %% Line 2026
	  <[{VarValue,Op2}|Bindings],%% Line 2027
				     Op1,%% Line 2027
					 Value,%% Line 2027
					       F0,%% Line 2027
						  BF,%% Line 2027
						     Imported,%% Line 2027
							      Safe> when 'true' ->
	      let <Op> =
		  apply %% Line 2028
			'deref_op'/2
		      (%% Line 2028
		       Op1, %% Line 2028
			    Op2)
	      in  %% Line 2029
		  case apply 'unify'/7
			   (Op, VarValue, Value, F0, BF, Imported, Safe) of
		    %% Line 2030
		    <'failed'> when 'true' ->
			%% Line 2031
			'failed'
		    %% Line 2032
		    <F> when 'true' ->
			%% Line 2033
			apply 'unify_var_bindings'/7
			    (Bindings, Op1, Value, F, BF, Imported, Safe)
		  end
	  ( <_15,_14,_13,_12,_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_15,_14,_13,_12,_11,_10,_9})
		  -| [{'function_name',{'unify_var_bindings',7}}] )
	    -| ['compiler_generated'] )
	end
'deref_op'/2 =
    %% Line 2036
    fun (_0,_1) ->
	case <_0,_1> of
	  <'=:=','=:='> when 'true' ->
	      %% Line 2037
	      '=:='
	  %% Line 2038
	  <_4,_5> when 'true' ->
	      %% Line 2039
	      '=='
	end
'var_values'/2 =
    %% Line 2043
    fun (_0,_1) ->
	%% Line 2045
	( letrec
	      'lc$^0'/1 =
		  fun (_5) ->
		      case _5 of
			<[{'bind',_9,Value,Op}|_3]> when 'true' ->
			    let <_6> =
				apply 'lc$^0'/1
				    (_3)
			    in  ( [{Value,Op}|_6]
				  -| ['compiler_generated'] )
			( <[_2|_3]> when 'true' ->
			      apply 'lc$^0'/1
				  (_3)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_10> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_10})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_4> =
		  apply 'var_bindings'/2
		      (_0, _1)
	      in  apply 'lc$^0'/1
		      (_4)
	  -| ['list_comprehension'] )
'deref_var'/3 =
    %% Line 2047
    fun (_0,_1,_2) ->
	let <_7> =
	    fun (_4,_3) ->
		%% Line 2048
		'true'
	in  %% Line 2048
	    apply 'deref_var'/4
		(_0, _1, _7, _2)
'deref_var'/4 =
    %% Line 2050
    fun (_0,_1,_2,_3) ->
	let <_13> =
	    letrec
		'lc$^0'/1 =
		    %% Line 2052
		    fun (_10) ->
			case _10 of
			  <[{'bind',_18,Value,Op}|_5]> when 'true' ->
			      %% Line 2053
			      ( letrec
				    'lc$^1'/1 =
					fun (_11) ->
					    case _11 of
					      <[ValOp|_8]> when 'true' ->
						  let <_12> =
						      apply 'lc$^1'/1
							  (_8)
						  in  ( [ValOp|_12]
							-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  apply 'lc$^0'/1
						      (_5)
					      ( <_19> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_19})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  let <_9> =
					apply 'deref_value'/5
					    (Value, Op, _1, _2, _3)
				    in  apply 'lc$^1'/1
					    (_9)
				-| ['list_comprehension'] )
			  ( <[_4|_5]> when 'true' ->
				apply 'lc$^0'/1
				    (_5)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_20> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_20})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  let <_6> =
		    apply %% Line 2052
			  'var_bindings'/2
			(_0, _1)
		in  %% Line 2052
		    apply 'lc$^0'/1
			(_6)
	in  %% Line 2051
	    call 'lists':'usort'
		(_13)
'deref_value'/5 =
    %% Line 2055
    fun (_0,_1,_2,_3,_4) ->
	let <_11> =
	    letrec
		'lc$^0'/1 =
		    %% Line 2057
		    fun (_8) ->
			case _8 of
			  <[ValOp = {Val,_X_Op}|_6]> when 'true' ->
			      let <_9> =
				  apply 'value_op'/3
				      (ValOp, _1, _4)
			      in  let <_10> =
				      apply 'lc$^0'/1
					  (_6)
				  in  ( [{Val,_9}|_10]
					-| ['compiler_generated'] )
			  ( <[_5|_6]> when 'true' ->
				apply 'lc$^0'/1
				    (_6)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_17> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_17})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  let <_7> =
		    apply %% Line 2057
			  'deref'/4
			(_0, _2, _3, _4)
		in  %% Line 2057
		    apply 'lc$^0'/1
			(_7)
	in  %% Line 2056
	    call 'lists':'usort'
		(_11)
'add_binding'/7 =
    %% Line 2059
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	%% Line 2060
	case apply 'maybe_swap_var_value'/4
		 (_1, _2, _3, _5) of
	  <{Var,Value}> when 'true' ->
	      %% Line 2061
	      case apply _4
		       (_0, Value) of
		%% Line 2062
		<'true'> when 'true' ->
		    %% Line 2063
		    apply 'add_binding2'/4
			(Var, Value, _0, _3)
		%% Line 2064
		<'false'>
		    when ( call 'erlang':'=:='
			    (_6,
			     'true')
			-| ['compiler_generated'] ) ->
		    %% Line 2065
		    'failed'
		%% Line 2066
		<'false'>
		    when ( call 'erlang':'=:='
			    (_6,
			     'false')
			-| ['compiler_generated'] ) ->
		    _3
		( <_9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_9})
		  -| ['compiler_generated'] )
	      end
	  ( <_7> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_7})
	    -| ['compiler_generated'] )
	end
'add_binding2'/4 =
    %% Line 2070
    fun (_0,_1,_2,_3) ->
	%% Line 2071
	case apply 'occurs'/3
		 (_0, _1, _3) of
	  %% Line 2072
	  <'true'> when 'true' ->
	      %% Line 2073
	      'failed'
	  %% Line 2074
	  <'false'> when 'true' ->
	      %% Line 2075
	      [{'bind',_0,_1,_2}|_3]
	  ( <_4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_4})
	    -| ['compiler_generated'] )
	end
'maybe_swap_var_value'/4 =
    %% Line 2081
    fun (_0,_1,_2,_3) ->
	%% Line 2082
	case apply 'do_swap_var_value'/4
		 (_0, _1, _2, _3) of
	  %% Line 2083
	  <'true'> when 'true' ->
	      %% Line 2084
	      {_1,_0}
	  %% Line 2085
	  <'false'> when 'true' ->
	      %% Line 2086
	      {_0,_1}
	  ( <_4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_4})
	    -| ['compiler_generated'] )
	end
'do_swap_var_value'/4 =
    %% Line 2089
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Var1 = {'var',_13,V1},Var2 = {'var',_14,V2},F,Imported> when 'true' ->
	      %% Line 2090
	      case apply 'swap_vv'/3
		       (Var1, Var2, F) of
		%% Line 2091
		<[]> when 'true' ->
		    %% Line 2092
		    case apply 'swap_vv'/3
			     (Var2, Var1, F) of
		      %% Line 2093
		      <[]> when 'true' ->
			  %% Line 2094
			  ( case call 'ordsets':'is_element'
				     (V1, Imported) of
			      ( <( 'true'
				   -| ['compiler_generated'] )> when 'true' ->
				    let <_5> =
					call %% Line 2095
					     'ordsets':%% Line 2095
						       'is_element'
					    (%% Line 2095
					     V2, %% Line 2095
						 Imported)
				    in  %% Line 2095
					call 'erlang':'not'
					    (_5)
				-| ['compiler_generated'] )
			      ( <( 'false'
				   -| ['compiler_generated'] )> when 'true' ->
				    'false'
				-| ['compiler_generated'] )
			      ( <_4> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {( 'badarg'
						-| ['compiler_generated'] ),_4}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      %% Line 2096
		      <_X_Bs> when 'true' ->
			  %% Line 2097
			  'true'
		    end
		%% Line 2099
		<_X_Bs> when 'true' ->
		    %% Line 2100
		    'false'
	      end
	  %% Line 2102
	  <_15,_16,_X_F,_X_Imp> when 'true' ->
	      %% Line 2103
	      'false'
	end
'swap_vv'/3 =
    %% Line 2105
    fun (_0,_1,_2) ->
	%% Line 2106
	( letrec
	      'lc$^0'/1 =
		  fun (_6) ->
		      case _6 of
			<[{'bind',_11,V,_12}|_4]>
			    when call 'erlang':'=:='
				  (V,
				   _1) ->
			    let <_7> =
				apply 'lc$^0'/1
				    (_4)
			    in  ( [V|_7]
				  -| ['compiler_generated'] )
			( <[_3|_4]> when 'true' ->
			      apply 'lc$^0'/1
				  (_4)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_13> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_13})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_5> =
		  apply 'var_bindings'/2
		      (_0, _2)
	      in  apply 'lc$^0'/1
		      (_5)
	  -| ['list_comprehension'] )
'normalise'/1 =
    %% Line 2108
    fun (_0) ->
	let <_3> =
	    catch
		let <_1> =
		    apply %% Line 2110
			  'cons2tuple'/1
			(_0)
		in  let <_2> =
			apply %% Line 2110
			      'var2const'/1
			    (_1)
		    in  %% Line 2110
			call 'erl_parse':'normalise'
			    (_2)
	in  %% Line 2110
	    case _3 of
	      %% Line 2111
	      <{'EXIT',_6}> when 'true' ->
		  %% Line 2112
		  'not_ok'
	      %% Line 2113
	      <C> when 'true' ->
		  %% Line 2114
		  {'ok',C}
	    end
'occurs'/3 =
    %% Line 2117
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <V,_18,_X_F>
	      when call 'erlang':'=:='
		    (_18,
		     V) ->
	      %% Line 2118
	      'true'
	  %% Line 2119
	  <V,Var = {'var',_19,_20},F> when 'true' ->
	      let <_8> =
		  fun (_6) ->
		      %% Line 2120
		      ( case _6 of
			  ( <( {'bind',_21,_rec26,_22}
			       -| ['compiler_generated'] )> when 'true' ->
				apply 'occurs'/3
				    (V, _rec26, F)
			    -| ['compiler_generated'] )
			  ( <_23> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','bind'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      in  let <_3> =
		      apply %% Line 2120
			    'var_bindings'/2
			  (%% Line 2120
			   Var, %% Line 2120
				F)
		  in  %% Line 2120
		      call 'lists':'any'
			  (_8, _3)
	  %% Line 2121
	  <V,T,F>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_12> =
		  fun (_10) ->
		      %% Line 2122
		      apply 'occurs'/3
			  (V, _10, F)
	      in  let <_9> =
		      call %% Line 2122
			   'erlang':%% Line 2122
				    'tuple_to_list'
			  (%% Line 2122
			   T)
		  in  %% Line 2122
		      call 'lists':'any'
			  (_12, _9)
	  %% Line 2123
	  <V,[E|Es],F> when 'true' ->
	      %% Line 2124
	      ( case apply 'occurs'/3
			 (V, E, F) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			'true'
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'occurs'/3
			    (V, Es, F)
		    -| ['compiler_generated'] )
		  ( <_13> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_13}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 2125
	  <_X_V,_X_E,_X_F> when 'true' ->
	      %% Line 2126
	      'false'
	end
'deref_values'/3 =
    %% Line 2128
    fun (_0,_1,_2) ->
	let <_7> =
	    fun (_4,_3) ->
		%% Line 2129
		'true'
	in  %% Line 2129
	    apply 'deref_values'/4
		(_0, _1, _7, _2)
'deref_values'/4 =
    %% Line 2131
    fun (_0,_1,_2,_3) ->
	let <_10> =
	    letrec
		'lc$^0'/1 =
		    %% Line 2133
		    fun (_7) ->
			case _7 of
			  <[{V,Op}|_5]> when 'true' ->
			      %% Line 2134
			      ( case apply _2
					 (V, Op) of
				  <'true'> when 'true' ->
				      let <_8> =
					  apply 'lc$^0'/1
					      (_5)
				      in  ( [V|_8]
					    -| ['compiler_generated'] )
				  ( <'false'> when 'true' ->
					apply 'lc$^0'/1
					    (_5)
				    -| ['compiler_generated'] )
				  ( <_9> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_9})
				    -| ['compiler_generated'] )
				end
				-| ['list_comprehension'] )
			  ( <[_4|_5]> when 'true' ->
				apply 'lc$^0'/1
				    (_5)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_15> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_15})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  let <_6> =
		    apply %% Line 2133
			  'deref'/4
			(_0, _1, _2, _3)
		in  %% Line 2133
		    apply 'lc$^0'/1
			(_6)
	in  %% Line 2132
	    call 'lists':'usort'
		(_10)
'deref'/3 =
    %% Line 2136
    fun (_0,_1,_2) ->
	let <BFun> =
	    fun (_4,_3) ->
		%% Line 2137
		'true'
	in  %% Line 2138
	    apply 'deref'/4
		(_0, _1, BFun, _2)
'deref'/4 =
    %% Line 2140
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <V = {'var',_35,_36},F,BFun,Imp> when 'true' ->
	      let <_7> =
		  fun (_5) ->
		      %% Line 2141
		      apply 'deref_binding'/4
			  (_5, F, BFun, Imp)
	      in  let <_4> =
		      apply %% Line 2142
			    'var_bindings'/2
			  (%% Line 2142
			   V, %% Line 2142
			      F)
		  in  let <DBs> =
			  call %% Line 2141
			       'lists':%% Line 2141
				       'flatmap'
			      (_7, _4)
		      in  %% Line 2143
			  case DBs of
			    %% Line 2144
			    <[]> when 'true' ->
				%% Line 2145
				[{V,'=:='}|[]]
			    %% Line 2146
			    <_37> when 'true' ->
				%% Line 2147
				call 'lists':'usort'
				    (DBs)
			  end
	  %% Line 2149
	  <T,F,BFun,Imp>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      %% Line 2151
	      ( letrec
		    'lc$^1'/1 =
			fun (_14) ->
			    case _14 of
			      <[{DL,Op}|_11]> when 'true' ->
				  let <_15> =
				      call 'erlang':'list_to_tuple'
					  (DL)
				  in  let <_16> =
					  apply 'lc$^1'/1
					      (_11)
				      in  ( [{_15,Op}|_16]
					    -| ['compiler_generated'] )
			      ( <[_10|_11]> when 'true' ->
				    apply 'lc$^1'/1
					(_11)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_39> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_39})
				      -| [{'function_name',{'lc$^1',1}}] )
				-| ['compiler_generated'] )
			    end
		in  let <_12> =
			call 'erlang':'tuple_to_list'
			    (T)
		    in  let <_13> =
			    apply 'deref'/4
				(_12, F, BFun, Imp)
			in  apply 'lc$^1'/1
				(_13)
		-| ['list_comprehension'] )
	  %% Line 2152
	  <Es,F,BFun,Imp>
	      when call 'erlang':'is_list'
		    (Es) ->
	      let <_22> =
		  letrec
		      'lc$^2'/1 =
			  %% Line 2153
			  fun (_19) ->
			      case _19 of
				<[C|_18]> when 'true' ->
				    let <_20> =
					apply 'deref'/4
					    (C, F, BFun, Imp)
				    in  let <_21> =
					    apply 'lc$^2'/1
						(_18)
					in  ( [_20|_21]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_40> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_40})
					-| [{'function_name',{'lc$^2',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  %% Line 2153
		      apply 'lc$^2'/1
			  (Es)
	      in  let <_30> =
		      letrec
			  'lc$^3'/1 =
			      %% Line 2154
			      fun (_27) ->
				  case _27 of
				    <[S|_25]> when 'true' ->
					let <_28> =
					    apply 'deref_list'/1
						(S)
					in  let <_29> =
						apply 'lc$^3'/1
						    (_25)
					    in  ( [_28|_29]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_41> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_41})
					    -| [{'function_name',{'lc$^3',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_26> =
			      apply %% Line 2154
				    'all_comb'/1
				  (_22)
			  in  %% Line 2154
			      apply 'lc$^3'/1
				  (_26)
		  in  %% Line 2154
		      call 'lists':'usort'
			  (_30)
	  %% Line 2155
	  <E,_X_F,_X_BFun,_X_Imp> when 'true' ->
	      %% Line 2156
	      [{E,'=:='}|[]]
	end
'var_bindings'/2 =
    %% Line 2158
    fun (_0,_1) ->
	%% Line 2159
	( letrec
	      'lc$^0'/1 =
		  fun (_4) ->
		      case _4 of
			<[B = {'bind',V,_8,_9}|_3]>
			    when call 'erlang':'=:='
				  (V,
				   _0) ->
			    let <_5> =
				apply 'lc$^0'/1
				    (_3)
			    in  ( [B|_5]
				  -| ['compiler_generated'] )
			( <[_2|_3]> when 'true' ->
			      apply 'lc$^0'/1
				  (_3)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_10> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_10})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_1)
	  -| ['list_comprehension'] )
'deref_binding'/4 =
    %% Line 2161
    fun (_0,_1,_2,_3) ->
	%% Line 2162
	case _0 of
	  <{'bind',_17,Value,Op0}> when 'true' ->
	      %% Line 2164
	      ( letrec
		    'lc$^0'/1 =
			fun (_10) ->
			    case _10 of
			      <[ValOp = {Val,_X_Op}|_6]> when 'true' ->
				  let <_9> =
				      apply %% Line 2165
					    'value_op'/3
					  (%% Line 2165
					   ValOp, %% Line 2165
						  Op0, _3)
				  in  %% Line 2165
				      ( case apply _2
						 (Val, _9) of
					  <'true'> when 'true' ->
					      let <_11> =
						  apply 'lc$^0'/1
						      (_6)
					      in  ( [{Val,_9}|_11]
						    -| ['compiler_generated'] )
					  ( <'false'> when 'true' ->
						apply 'lc$^0'/1
						    (_6)
					    -| ['compiler_generated'] )
					  ( <_12> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_12})
					    -| ['compiler_generated'] )
					end
					-| ['list_comprehension'] )
			      ( <[_5|_6]> when 'true' ->
				    apply 'lc$^0'/1
					(_6)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_18> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_18})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  let <_7> =
			apply 'deref'/4
			    (Value, _1, _2, _3)
		    in  apply 'lc$^0'/1
			    (_7)
		-| ['list_comprehension'] )
	  ( <_4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_4})
	    -| ['compiler_generated'] )
	end
'deref_list'/1 =
    %% Line 2167
    fun (_0) ->
	let <_5> =
	    letrec
		'lc$^0'/1 =
		    %% Line 2168
		    fun (_3) ->
			case _3 of
			  <[{_X_Val,Op}|_2]> when 'true' ->
			      let <_4> =
				  apply 'lc$^0'/1
				      (_2)
			      in  ( [Op|_4]
				    -| ['compiler_generated'] )
			  ( <[_1|_2]> when 'true' ->
				apply 'lc$^0'/1
				    (_2)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_16> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_16})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 2168
		apply 'lc$^0'/1
		    (_0)
	in  let <_7> =
		case %% Line 2168
		     call 'lists':'usort'
			 (_5) of
		  %% Line 2169
		  <['=:=']> when 'true' ->
		      %% Line 2170
		      '=:='
		  %% Line 2171
		  <_15> when 'true' ->
		      %% Line 2172
		      '=='
		end
	    in  let <_13> =
		    letrec
			'lc$^1'/1 =
			    %% Line 2174
			    fun (_11) ->
				case _11 of
				  <[{V,_X_Op}|_10]> when 'true' ->
				      let <_12> =
					  apply 'lc$^1'/1
					      (_10)
				      in  ( [V|_12]
					    -| ['compiler_generated'] )
				  ( <[_9|_10]> when 'true' ->
					apply 'lc$^1'/1
					    (_10)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_17> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_17})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  %% Line 2174
			apply 'lc$^1'/1
			    (_0)
		in  %% Line 2174
		    {_13,_7}
'value_op'/3 =
    %% Line 2176
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{_X_V,'=='},_X_BindOp,_X_Imp> when 'true' ->
	      %% Line 2177
	      '=='
	  %% Line 2178
	  <{_X_V,'=:='},_X_BindOp = '=:=',_X_Imp> when 'true' ->
	      %% Line 2179
	      '=:='
	  %% Line 2180
	  <{V,'=:='},_X_BindOp = '==',Imp> when 'true' ->
	      %% Line 2181
	      case apply 'free_of_integers'/2
		       (V, Imp) of
		%% Line 2182
		<'true'> when 'true' ->
		    %% Line 2183
		    '=:='
		%% Line 2184
		<'false'> when 'true' ->
		    %% Line 2185
		    '=='
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_3})
		  -| ['compiler_generated'] )
	      end
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'value_op',3}}] )
	    -| ['compiler_generated'] )
	end
'all_comb'/1 =
    %% Line 2188
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      %% Line 2189
	      [[]]
	  %% Line 2190
	  <[Cs|ICs]> when 'true' ->
	      %% Line 2191
	      ( letrec
		    'lc$^0'/1 =
			fun (_6) ->
			    case _6 of
			      <[C|_2]> when 'true' ->
				  ( letrec
					'lc$^1'/1 =
					    fun (_7) ->
						case _7 of
						  <[L|_4]> when 'true' ->
						      let <_8> =
							  apply 'lc$^1'/1
							      (_4)
						      in  ( [[C|L]|_8]
							    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      apply 'lc$^0'/1
							  (_2)
						  ( <_10> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_10})
							  -| [{'function_name',{'lc$^1',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  let <_5> =
					    apply 'all_comb'/1
						(ICs)
					in  apply 'lc$^1'/1
						(_5)
				    -| ['list_comprehension'] )
			      <[]> when 'true' ->
				  []
			      ( <_11> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_11})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(Cs)
		-| ['list_comprehension'] )
	  ( <_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9})
		  -| [{'function_name',{'all_comb',1}}] )
	    -| ['compiler_generated'] )
	end
'free_of_integers'/2 =
    %% Line 2196
    fun (_0,_1) ->
	%% Line 2197
	( case apply 'has_integer'/1
		   (_0) of
	    ( <'false'> when 'true' ->
		  let <_4> =
		      apply 'has_imported_vars'/2
			  (_0, _1)
		  in  call 'erlang':'not'
			  (_4)
	      -| ['compiler_generated'] )
	    ( <'true'> when 'true' ->
		  'false'
	      -| ['compiler_generated'] )
	    ( <_cor_variable> when 'true' ->
		  call 'erlang':'error'
		      ('badarg')
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'has_imported_vars'/2 =
    %% Line 2201
    fun (_0,_1) ->
	case <_0,_1> of
	  <Value,'all'> when 'true' ->
	      let <_2> =
		  call %% Line 2202
		       'qlc':%% Line 2202
			     'vars'
		      (%% Line 2202
		       Value)
	      in  %% Line 2202
		  call 'erlang':'=/='
		      (_2, [])
	  %% Line 2203
	  <Value,Imported> when 'true' ->
	      let <_9> =
		  letrec
		      'lc$^0'/1 =
			  %% Line 2204
			  fun (_6) ->
			      case _6 of
				<[Var|_4]> when 'true' ->
				    ( case call 'lists':'member'
					       (Var, Imported) of
					<'true'> when 'true' ->
					    let <_7> =
						apply 'lc$^0'/1
						    (_4)
					    in  ( [Var|_7]
						  -| ['compiler_generated'] )
					( <'false'> when 'true' ->
					      apply 'lc$^0'/1
						  (_4)
					  -| ['compiler_generated'] )
					( <_8> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_8})
					  -| ['compiler_generated'] )
				      end
				      -| ['list_comprehension'] )
				<[]> when 'true' ->
				    []
				( <_12> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_12})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  let <_5> =
			  call %% Line 2204
			       'qlc':%% Line 2204
				     'vars'
			      (%% Line 2204
			       Value)
		      in  %% Line 2204
			  apply 'lc$^0'/1
			      (_5)
	      in  %% Line 2204
		  call 'erlang':'=/='
		      (_9, [])
	end
'has_integer'/1 =
    %% Line 2206
    fun (_0) ->
	%% Line 2207
	try
	    %% Line 2208
	    apply 'has_int'/1
		(_0)
	of <_1> ->
	    _1
	catch <_4,_3,_2> ->
	    %% Line 2209
	    case <_4,_3,_2> of
	      <( 'throw'
		 -| ['compiler_generated'] ),( 'true'
					       -| ['compiler_generated'] ),_6> when 'true' ->
		  'true'
	      ( <_7,_8,_9> when 'true' ->
		    primop 'raise'
			(_9, _8)
		-| ['compiler_generated'] )
	    end
'has_int'/1 =
    %% Line 2212
    fun (_0) ->
	case _0 of
	  <{'integer',_5,I}>
	      when try
		    let <_1> =
			call 'erlang':'float'
			    (I)
		    in  call 'erlang':'=='
			    (_1, I)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2213
	      call 'erlang':'throw'
		  ('true')
	  %% Line 2214
	  <{'float',_6,F}>
	      when try
		    let <_2> =
			call 'erlang':'round'
			    (F)
		    in  call 'erlang':'=='
			    (_2, F)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2215
	      call 'erlang':'throw'
		  ('true')
	  %% Line 2216
	  <T>
	      when call 'erlang':'is_tuple'
		    (_0) ->
	      let <_3> =
		  call %% Line 2217
		       'erlang':%% Line 2217
				'tuple_to_list'
		      (%% Line 2217
		       T)
	      in  %% Line 2217
		  apply 'has_int'/1
		      (_3)
	  %% Line 2218
	  <[E|Es]> when 'true' ->
	      do  %% Line 2219
		  apply 'has_int'/1
		      (E)
		  %% Line 2220
		  apply 'has_int'/1
		      (Es)
	  %% Line 2221
	  <_7> when 'true' ->
	      %% Line 2222
	      'false'
	end
'tuple2cons'/1 =
    %% Line 2224
    fun (_0) ->
	case _0 of
	  <{'tuple',_8,Es}> when 'true' ->
	      let <_1> =
		  apply %% Line 2225
			'tuple2cons'/1
		      (%% Line 2225
		       Es)
	      in  let <_2> =
		      apply %% Line 2225
			    'list2cons'/1
			  (_1)
		  in  %% Line 2225
		      {'cons_tuple',_2}
	  %% Line 2226
	  <T>
	      when call 'erlang':'is_tuple'
		    (_0) ->
	      let <_3> =
		  call %% Line 2227
		       'erlang':%% Line 2227
				'tuple_to_list'
		      (%% Line 2227
		       T)
	      in  let <_4> =
		      apply %% Line 2227
			    'tuple2cons'/1
			  (_3)
		  in  %% Line 2227
		      call 'erlang':'list_to_tuple'
			  (_4)
	  %% Line 2228
	  <[E|Es]> when 'true' ->
	      let <_5> =
		  apply %% Line 2229
			'tuple2cons'/1
		      (%% Line 2229
		       E)
	      in  let <_6> =
		      apply %% Line 2229
			    'tuple2cons'/1
			  (%% Line 2229
			   Es)
		  in  %% Line 2229
		      [_5|_6]
	  %% Line 2230
	  <E> when 'true' ->
	      %% Line 2231
	      E
	end
'list2cons'/1 =
    %% Line 2233
    fun (_0) ->
	case _0 of
	  <[E|Es]> when 'true' ->
	      let <_2> =
		  apply %% Line 2234
			'anno0'/0
		      ()
	      in  let <_1> =
		      apply %% Line 2234
			    'list2cons'/1
			  (%% Line 2234
			   Es)
		  in  %% Line 2234
		      {'cons',_2,E,_1}
	  %% Line 2235
	  <[]> when 'true' ->
	      let <_3> =
		  apply %% Line 2236
			'anno0'/0
		      ()
	      in  %% Line 2236
		  {'nil',_3}
	  %% Line 2237
	  <E> when 'true' ->
	      %% Line 2238
	      E
	end
'cons2tuple'/1 =
    %% Line 2241
    fun (_0) ->
	case _0 of
	  <{'cons_tuple',Es}> when 'true' ->
	      let <_2> =
		  apply %% Line 2242
			'anno0'/0
		      ()
	      in  let <_1> =
		      apply %% Line 2242
			    'cons2list'/1
			  (%% Line 2242
			   Es)
		  in  %% Line 2242
		      {'tuple',_2,_1}
	  %% Line 2243
	  <T>
	      when call 'erlang':'is_tuple'
		    (_0) ->
	      let <_3> =
		  call %% Line 2244
		       'erlang':%% Line 2244
				'tuple_to_list'
		      (%% Line 2244
		       T)
	      in  let <_4> =
		      apply %% Line 2244
			    'cons2tuple'/1
			  (_3)
		  in  %% Line 2244
		      call 'erlang':'list_to_tuple'
			  (_4)
	  %% Line 2245
	  <[E|Es]> when 'true' ->
	      let <_5> =
		  apply %% Line 2246
			'cons2tuple'/1
		      (%% Line 2246
		       E)
	      in  let <_6> =
		      apply %% Line 2246
			    'cons2tuple'/1
			  (%% Line 2246
			   Es)
		  in  %% Line 2246
		      [_5|_6]
	  %% Line 2247
	  <E> when 'true' ->
	      %% Line 2248
	      E
	end
'cons2list'/1 =
    %% Line 2250
    fun (_0) ->
	case _0 of
	  <{'cons',_5,L,R}> when 'true' ->
	      let <_1> =
		  apply %% Line 2251
			'cons2tuple'/1
		      (%% Line 2251
		       L)
	      in  let <_2> =
		      apply %% Line 2251
			    'cons2list'/1
			  (%% Line 2251
			   R)
		  in  %% Line 2251
		      [_1|_2]
	  %% Line 2252
	  <{'nil',_6}> when 'true' ->
	      %% Line 2253
	      []
	  %% Line 2254
	  <E> when 'true' ->
	      let <_3> =
		  apply %% Line 2255
			'cons2tuple'/1
		      (%% Line 2255
		       E)
	      in  %% Line 2255
		  [_3|[]]
	end
'bindings_is_subset'/3 =
    %% Line 2261
    fun (_0,_1,_2) ->
	let <BF> =
	    fun (_4,_3) ->
		%% Line 2262
		'true'
	in  let <_12> =
		fun (_9,_8) ->
		    %% Line 2264
		    case <_9,_8> of
		      <{'bind',V,Value,Op},Frame> when 'true' ->
			  %% Line 2265
			  apply 'unify'/6
			      (Op, V, Value, Frame, BF, _2)
		      ( <_11,_10> when 'true' ->
			    ( primop 'match_fail'
				  ({'function_clause',_11,_10})
			      -| [{'function_name',{'-bindings_is_subset/3-fun-1-',2}}] )
			-| ['compiler_generated'] )
		    end
	    in  let <F> =
		    call %% Line 2264
			 'lists':%% Line 2264
				 'foldl'
			(_12, _1, _0)
		in  %% Line 2267
		    ( case apply 'bindings_subset'/3
			       (F, _1, _2) of
			( <( 'true'
			     -| ['compiler_generated'] )> when 'true' ->
			      apply 'bindings_subset'/3
				  (_1, F, _2)
			  -| ['compiler_generated'] )
			( <( 'false'
			     -| ['compiler_generated'] )> when 'true' ->
			      'false'
			  -| ['compiler_generated'] )
			( <_14> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {( 'badarg'
					  -| ['compiler_generated'] ),_14}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
'bindings_subset'/3 =
    %% Line 2269
    fun (_0,_1,_2) ->
	let <_9> =
	    letrec
		'lc$^0'/1 =
		    %% Line 2270
		    fun (_6) ->
			case _6 of
			  <[{'bind',V,_19,_20}|_4]> when 'true' ->
			      ( case apply 'is_unique_var'/1
					 (V) of
				  <'false'> when 'true' ->
				      let <_7> =
					  apply 'lc$^0'/1
					      (_4)
				      in  ( [V|_7]
					    -| ['compiler_generated'] )
				  ( <'true'> when 'true' ->
					apply 'lc$^0'/1
					    (_4)
				    -| ['compiler_generated'] )
				  ( <_cor_variable> when 'true' ->
					call 'erlang':'error'
					    ('badarg')
				    -| ['compiler_generated'] )
				end
				-| ['list_comprehension'] )
			  ( <[_3|_4]> when 'true' ->
				apply 'lc$^0'/1
				    (_4)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_21> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_21})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 2270
		apply 'lc$^0'/1
		    (_0)
	in  let <Vars> =
		call %% Line 2270
		     'lists':%% Line 2270
			     'usort'
		    (_9)
	    in  let <_15> =
		    fun (_13) ->
			let <_12> =
			    apply %% Line 2272
				  'deref_var'/3
				(%% Line 2271
				 _13, _0, _2)
			in  let <_11> =
				apply %% Line 2272
				      'deref_var'/3
				    (%% Line 2271
				     _13, _1, _2)
			    in  %% Line 2272
				call 'erlang':'=:='
				    (_12, _11)
		in  %% Line 2271
		    call 'lists':'all'
			(_15, %% Line 2273
			      Vars)
'try_ms'/4 =
    %% Line 2280
    fun (_0,_1,_2,_3) ->
	let <L> =
	    apply %% Line 2281
		  'anno1'/0
		()
	in  let <Fun> =
		{%% Line 2282
		 'fun',%% Line 2282
		       L,%% Line 2282
			 {'clauses',[{'clause',L,[_1|[]],[[_2|[]]|[]],[_0|[]]}|[]]}}
	    in  let <Expr> =
		    {%% Line 2283
		     'call',%% Line 2283
			    L,%% Line 2283
			      {'remote',L,{'atom',L,'ets'},{'atom',L,'fun2ms'}},%% Line 2283
										[Fun|[]]}
		in  let <Form> =
			{%% Line 2284
			 'function',%% Line 2284
				    L,%% Line 2284
				      'foo',%% Line 2284
					    0,%% Line 2284
					      [{'clause',L,[],[],[Expr|[]]}|[]]}
		    in  %% Line 2285
			( case _3 of
			    ( <( {'state',_23,_24,_25,_rec27,_26,_27,_28}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_10> =
				      call 'erlang':'++'
					  (_rec27, [Form|[]])
				  in  let <X> =
					  call 'ms_transform':'parse_transform'
					      (_10, [])
				      in  let <_17> =
					      catch
						  %% Line 2288
						  case call 'lists':'last'
							   (X) of
						    <{'function',_30,'foo',0,[{'clause',_31,[],[],[MS0|[]]}|[]]}>
							when let <_32> =
							      call 'erlang':'=:='
								  (_30, L)
							  in  let <_33> =
								  call 'erlang':'=:='
								      (_31, L)
							      in  call 'erlang':'and'
								      (_32, _33) ->
							let <_13> =
							    apply %% Line 2289
								  'var2const'/1
								(%% Line 2289
								 MS0)
							in  let <MS> =
								call %% Line 2289
								     'erl_parse':%% Line 2289
										 'normalise'
								    (_13)
							    in  let <XMS> =
								    call %% Line 2290
									 'ets':%% Line 2290
									       'match_spec_compile'
									(%% Line 2290
									 MS)
								in  %% Line 2291
								    case call 'ets':'is_compiled_ms'
									     (XMS) of
								      <'true'> when 'true' ->
									  %% Line 2292
									  {'ok',MS,MS0}
								      ( <_16> when 'true' ->
									    primop 'match_fail'
										({'badmatch',_16})
									-| ['compiler_generated'] )
								    end
						    ( <_12> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_12})
						      -| ['compiler_generated'] )
						  end
					  in  %% Line 2286
					      case _17 of
						%% Line 2294
						<{'EXIT',_X_Reason}> when 'true' ->
						    %% Line 2295
						    'no'
						%% Line 2296
						<Reply> when 'true' ->
						    %% Line 2297
						    Reply
					      end
			      -| ['compiler_generated'] )
			    ( <_29> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
'filters_as_one'/1 =
    %% Line 2300
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      let <_1> =
		  apply %% Line 2301
			'anno0'/0
		      ()
	      in  %% Line 2301
		  {'atom',_1,'true'}
	  %% Line 2302
	  <FilterData> when 'true' ->
	      %% Line 2303
	      case call 'lists':'reverse'
		       (FilterData) of
		<[{_10,{'fil',Filter1}}|Filters]> when 'true' ->
		    let <_8> =
			fun (_5,_4) ->
			    %% Line 2304
			    case <_5,_4> of
			      <{_X_QId,{'fil',Filter}},AbstF> when 'true' ->
				  let <_3> =
				      apply %% Line 2305
					    'anno0'/0
					  ()
				  in  %% Line 2305
				      {'op',_3,'andalso',Filter,AbstF}
			      ( <_7,_6> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_7,_6})
				      -| [{'function_name',{'-filters_as_one/1-fun-0-',2}}] )
				-| ['compiler_generated'] )
			    end
		    in  %% Line 2304
			call 'lists':'foldr'
			    (_8, %% Line 2306
				 Filter1, %% Line 2306
					  Filters)
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	end
'qual_data'/1 =
    %% Line 2308
    fun (_0) ->
	let <F> =
	    fun (_6) ->
		%% Line 2310
		( letrec
		      'lc$^0'/1 =
			  fun (_4) ->
			      case _4 of
				<[{QId,_12,_13,Q}|_2]>
				    when try
					  let <_3> =
					      call 'erlang':'element'
						  (1, Q)
					  in  call 'erlang':'=:='
						  (_3, _6)
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false' ->
				    let <_5> =
					apply 'lc$^0'/1
					    (_2)
				    in  ( [{QId,Q}|_5]
					  -| ['compiler_generated'] )
				( <[_1|_2]> when 'true' ->
				      apply 'lc$^0'/1
					  (_2)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_14> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_14})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_0)
		  -| ['list_comprehension'] )
	in  let <_10> =
		apply %% Line 2312
		      F
		    (%% Line 2312
		     'fil')
	    in  let <_9> =
		    apply %% Line 2312
			  F
			(%% Line 2312
			 'gen')
		in  %% Line 2312
		    {_10,_9}
'set_field'/3 =
    %% Line 2314
    fun (_0,_1,_2) ->
	let <_5> =
	    call %% Line 2315
		 'erlang':%% Line 2315
			  '-'
		(_0, %% Line 2315
		     1)
	in  let <_6> =
		call %% Line 2315
		     'lists':%% Line 2315
			     'sublist'
		    (_1, _5)
	    in  let <_3> =
		    call %% Line 2315
			 'lists':%% Line 2315
				 'nthtail'
			(_0, _1)
		in  let <_4> =
			[_2|_3]
		    in  %% Line 2315
			call 'erlang':'++'
			    (_6, _4)
'qdata'/2 =
    %% Line 2317
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{{'qid',_13,QIdNo},{_X_QIVs,{{'gen',_X_P,LE,_X_GV},GoI,SI}}}|QCs],L> when 'true' ->
	      let <_7> =
		  case %% Line 2318
		       LE of
		    %% Line 2319
		    <{'join',Op,Q1,Q2,H1,H2,Cs1_0,Cs2_0}> when 'true' ->
			let <Cs1> =
			    apply %% Line 2320
				  'qcon'/1
				(%% Line 2320
				 Cs1_0)
			in  let <Cs2> =
				apply %% Line 2321
				      'qcon'/1
				    (%% Line 2321
				     Cs2_0)
			    in  let <Compat> = {%% Line 2324
				     'atom',%% Line 2324
					    L,%% Line 2324
					      'v1'}
				in  let <CF> =
					apply %% Line 2325
					      'closure'/2
					    (%% Line 2325
					     {'tuple',L,[Cs1|[Cs2|[Compat|[]]]]}, %% Line 2325
										  L)
				    in  %% Line 2326
					{'tuple',L,[{'atom',L,'join'}|[{'atom',L,Op}|[{'integer',L,Q1}|[{'integer',L,Q2}|[H1|[H2|[CF|[]]]]]]]]}
		    %% Line 2327
		    <_14> when 'true' ->
			%% Line 2328
			apply 'closure'/2
			    (LE, L)
		  end
	      in  let <_9> =
		      apply %% Line 2332
			    'qdata'/2
			  (%% Line 2332
			   QCs, %% Line 2332
				L)
		  in  %% Line 2331
		      {'cons',L,{'tuple',L,[{'integer',L,QIdNo}|[{'integer',L,GoI}|[{'integer',L,SI}|[{'tuple',L,[{'atom',L,'gen'}|[_7|[]]]}|[]]]]]},_9}
	  %% Line 2333
	  <[{{'qid',_15,QIdNo},{_X_QIVs,{{'fil',_X_F},GoI,SI}}}|QCs],L> when 'true' ->
	      let <_10> =
		  apply %% Line 2335
			'qdata'/2
		      (%% Line 2335
		       QCs, %% Line 2335
			    L)
	      in  %% Line 2335
		  {'cons',L,{'tuple',L,[{'integer',L,QIdNo}|[{'integer',L,GoI}|[{'integer',L,SI}|[{'atom',L,'fil'}|[]]]]]},_10}
	  %% Line 2336
	  <[],L> when 'true' ->
	      %% Line 2337
	      {'nil',L}
	  ( <_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11})
		  -| [{'function_name',{'qdata',2}}] )
	    -| ['compiler_generated'] )
	end
'qcon'/1 =
    %% Line 2339
    fun (_0) ->
	let <A> =
	    apply %% Line 2340
		  'anno0'/0
		()
	in  let <_8> =
		letrec
		    'lc$^0'/1 =
			%% Line 2342
			fun (_4) ->
			    case _4 of
			      <[{Col,ConstOps}|_3]> when 'true' ->
				  let <_5> =
				      apply 'qcon1'/1
					  (ConstOps)
				  in  let <_6> =
					  apply 'list2cons'/1
					      (_5)
				      in  let <_7> =
					      apply 'lc$^0'/1
						  (_3)
					  in  ( [{'tuple',A,[{'integer',A,Col}|[_6|[]]]}|_7]
						-| ['compiler_generated'] )
			      ( <[_2|_3]> when 'true' ->
				    apply 'lc$^0'/1
					(_3)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_10> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_10})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  %% Line 2342
		    apply 'lc$^0'/1
			(_0)
	    in  %% Line 2341
		apply 'list2cons'/1
		    (_8)
'qcon1'/1 =
    %% Line 2344
    fun (_0) ->
	let <A> =
	    apply %% Line 2345
		  'anno0'/0
		()
	in  %% Line 2346
	    ( letrec
		  'lc$^0'/1 =
		      fun (_4) ->
			  case _4 of
			    <[{Const,Op}|_3]> when 'true' ->
				let <_5> =
				    apply 'abstr'/2
					(Op, A)
				in  let <_6> =
					apply 'lc$^0'/1
					    (_3)
				    in  ( [{'tuple',A,[Const|[_5|[]]]}|_6]
					  -| ['compiler_generated'] )
			    ( <[_2|_3]> when 'true' ->
				  apply 'lc$^0'/1
				      (_3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_8> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_8})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_0)
	      -| ['list_comprehension'] )
'qcode'/5 =
    %% Line 2351
    fun (_0,_1,_2,_3,_4) ->
	let <_14> =
	    letrec
		'lc$^0'/1 =
		    %% Line 2357
		    fun (_10) ->
			case _10 of
			  <[{_21,C}|_6]> when 'true' ->
			      let <Bin> =
				  call 'erlang':'term_to_binary'
				      (C, ['compressed'])
			      in  let <_12> =
				      call 'erlang':'binary_to_list'
					  (Bin)
				  in  let <_13> =
					  apply 'lc$^0'/1
					      (_6)
				      in  ( [{'bin',_3,[{'bin_element',_3,{'string',_3,_12},'default','default'}|[]]}|_13]
					    -| ['compiler_generated'] )
			  ( <[_5|_6]> when 'true' ->
				apply 'lc$^0'/1
				    (_6)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_22> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_22})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  let <_7> =
		    call %% Line 2357
			 'qlc':%% Line 2357
			       'template_state'
			()
		in  let <_8> =
			apply %% Line 2358
			      'qcode'/3
			    (_1, _2, _4)
		    in  let <_9> =
			    call %% Line 2357
				 'lists':%% Line 2357
					 'keysort'
				(%% Line 2357
				 1, %% Line 2357
				    [{_7,_0}|_8])
			in  %% Line 2357
			    apply 'lc$^0'/1
				(_9)
	in  %% Line 2359
	    {'fun',_3,{'clauses',[{'clause',_3,[],[],[{'tuple',_3,_14}|[]]}|[]]}}
'qcode'/3 =
    %% Line 2361
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[{_X_QId,{_X_QIvs,{{'gen',P,_X_LE,_X_GV},GoI,_X_SI}}}|QCs],Source,State> when 'true' ->
	      let <_3> =
		  apply %% Line 2362
			'undo_no_shadows'/2
		      (%% Line 2362
		       P, %% Line 2362
			  State)
	      in  let <_4> =
		      apply %% Line 2362
			    'qcode'/3
			  (%% Line 2362
			   QCs, %% Line 2362
				Source, %% Line 2362
					State)
		  in  %% Line 2362
		      [{GoI,_3}|_4]
	  %% Line 2363
	  <[{QId,{_X_QIVs,{{'fil',_X_F},GoI,_X_SI}}}|QCs],Source,State> when 'true' ->
	      let <OrigF> =
		  call %% Line 2364
		       'erlang':%% Line 2364
				'map_get'
		      (%% Line 2364
		       QId, %% Line 2364
			    Source)
	      in  let <_6> =
		      apply %% Line 2365
			    'undo_no_shadows'/2
			  (%% Line 2365
			   OrigF, %% Line 2365
				  State)
		  in  let <_7> =
			  apply %% Line 2365
				'qcode'/3
			      (%% Line 2365
			       QCs, %% Line 2365
				    Source, %% Line 2365
					    State)
		      in  %% Line 2365
			  [{GoI,_6}|_7]
	  %% Line 2366
	  <[],_X_Source,_X_State> when 'true' ->
	      %% Line 2367
	      []
	  ( <_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8})
		  -| [{'function_name',{'qcode',3}}] )
	    -| ['compiler_generated'] )
	end
'closure'/2 =
    %% Line 2369
    fun (_0,_1) ->
	%% Line 2370
	{'fun',_1,{'clauses',[{'clause',_1,[],[],[_0|[]]}|[]]}}
'simple'/4 =
    %% Line 2372
    fun (_0,_1,_2,_3) ->
	let <_4> =
	    apply %% Line 2373
		  'loc'/1
		(_3)
	in  let <_5> =
		apply %% Line 2373
		      'abstr'/2
		    (_4, _3)
	    in  %% Line 2373
		{'tuple',_0,[{'atom',_0,'simple_v1'}|[{'atom',_0,_1}|[_2|[_5|[]]]]]}
'clauses'/8 =
    %% Line 2375
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <[{QId,{QIVs,{QualData,GoI,S}}}|QCs],RL,Fun,Go,NGV,E,IVs,St> when 'true' ->
	      %% Line 2379
	      ( case QId of
		  ( <( {'qid',_rec28,_24}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_10> =
			    apply 'get_lcid_line'/1
				(_rec28)
			in  let <L> =
				apply 'no_compiler_warning'/1
				    (_10)
			    in  let <_13> =
				    case %% Line 2380
					 QualData of
				      %% Line 2381
				      <{'gen',P,_X_LE,GV}> when 'true' ->
					  %% Line 2382
					  apply 'generator'/13
					      (S, QIVs, P, GV, NGV, E, IVs, RL, Fun, Go, GoI, L, St)
				      %% Line 2383
				      <{'fil',F}> when 'true' ->
					  %% Line 2384
					  apply 'filter'/10
					      (F, L, QIVs, S, RL, Fun, Go, GoI, IVs, St)
				      ( <_12> when 'true' ->
					    %% Line 2380
					    primop 'match_fail'
						({'case_clause',_12})
					-| ['compiler_generated'] )
				    end
				in  let <_15> =
					apply %% Line 2386
					      'clauses'/8
					    (%% Line 2386
					     QCs, %% Line 2386
						  RL, %% Line 2386
						      Fun, %% Line 2386
							   Go, %% Line 2386
							       NGV, %% Line 2386
								    E, %% Line 2386
								       IVs, %% Line 2386
									    St)
				    in  %% Line 2386
					call 'erlang':'++'
					    (_13, _15)
		    -| ['compiler_generated'] )
		  ( <_25> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','qid'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 2387
	  <[],_X_RL,_X_Fun,_X_Go,_X_NGV,_X_IVs,_X_E,_X_St> when 'true' ->
	      %% Line 2388
	      []
	  ( <_23,_22,_21,_20,_19,_18,_17,_16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_23,_22,_21,_20,_19,_18,_17,_16})
		  -| [{'function_name',{'clauses',8}}] )
	    -| ['compiler_generated'] )
	end
'final'/4 =
    %% Line 2390
    fun (_0,_1,_2,_3) ->
	let <IAs> =
	    apply %% Line 2391
		  'replace'/3
		(_1, _1, %% Line 2391
			 '_')
	in  let <_5> =
		[_0|%% Line 2392
		    ['_'|['_'|IAs]]]
	    in  let <_6> =
		    apply %% Line 2392
			  'abst_vars'/2
			(_5, _2)
		in  let <AsL> =
			apply %% Line 2392
			      'pack_args'/3
			    (%% Line 2392
			     [{'integer',_2,0}|_6], _2, _3)
		    in  let <_8> =
			    apply %% Line 2393
				  'is_list_c'/2
				(_0, _2)
			in  let <Grd> =
				[_8|%% Line 2393
				    []]
			    in  let <Rev> =
				    {%% Line 2394
				     'call',_2,%% Line 2394
					       {'remote',_2,{'atom',_2,'lists'},{'atom',_2,'reverse'}},%% Line 2394
												       [{'var',_2,_0}|[]]}
				in  let <CL> =
					{%% Line 2395
					 'clause',_2,%% Line 2395
						     AsL,%% Line 2395
							 [Grd|[]],%% Line 2395
								  [Rev|[]]}
				    in  let <_12> =
					    ['_'|%% Line 2396
						 ['_'|['_'|IAs]]]
					in  let <_13> =
						apply %% Line 2396
						      'abst_vars'/2
						    (_12, _2)
					    in  let <AsF> =
						    apply %% Line 2396
							  'pack_args'/3
							(%% Line 2396
							 [{'integer',_2,0}|_13], _2, _3)
						in  let <CF> =
							{%% Line 2397
							 'clause',_2,%% Line 2397
								     AsF,%% Line 2397
									 [],%% Line 2397
									    [{'nil',_2}|[]]}
						    in  %% Line 2398
							[CL|[CF|[]]]
'template'/8 =
    %% Line 2400
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	let <I> =
	    call %% Line 2401
		 'qlc':%% Line 2401
		       'template_state'
		()
	in  let <GoI> =
		call %% Line 2401
		     'qlc':%% Line 2401
			   'template_state'
		    ()
	    in  let <_10> =
		    apply %% Line 2402
			  'abst_vars'/2
			(_1, _5)
		in  let <ARL> =
			{%% Line 2402
			 'cons',_5,_0,_10}
		    in  let <Next> =
			    apply %% Line 2403
				  'next'/3
				(_3, %% Line 2403
				     GoI, _5)
			in  let <_13> =
				[_1|%% Line 2404
				    [_2|[_3|_6]]]
			    in  let <As0> =
				    apply %% Line 2404
					  'abst_vars'/2
					(_13, _5)
				in  let <As> =
					apply %% Line 2405
					      'pack_args'/3
					    (%% Line 2405
					     [{'integer',_5,I}|As0], _5, _7)
				    in  let <_16> =
					    [_2|%% Line 2406
						[_3|_6]]
					in  let <_17> =
						apply %% Line 2406
						      'abst_vars'/2
						    (_16, _5)
					    in  let <_18> =
						    [%% Line 2406
						     Next|%% Line 2406
							  [ARL|_17]]
						in  let <NAs> =
							apply %% Line 2406
							      'pack_args'/3
							    (_18, _5, _7)
						    in  let <_20> =
							    apply %% Line 2407
								  'is_list_c'/2
								(_1, _5)
							in  let <Grd> =
								[_20|%% Line 2407
								     []]
							    in  let <CL> =
								    {%% Line 2408
								     'clause',_5,%% Line 2408
										 As,%% Line 2408
										    [Grd|[]],%% Line 2408
											     [{'call',_5,{'var',_5,_2},NAs}|[]]}
								in  let <_26> =
									case %% Line 2411
									     apply 'split_args'/3
										 ([Next|As0], _5, _7) of
									  %% Line 2412
									  <{ArgsL,ArgsT}> when 'true' ->
									      let <_23> =
										  call %% Line 2413
										       'erlang':%% Line 2413
												'++'
										      (%% Line 2413
										       ArgsL, %% Line 2413
											      [{'var',_5,_4}|[]])
									      in  let <Call> =
										      {%% Line 2413
										       'call',_5,%% Line 2413
												 {'var',_5,_2},_23}
										  in  %% Line 2414
										      {'block',_5,%% Line 2415
												  [{'match',_5,{'var',_5,_4},ArgsT}|%% Line 2416
																    [{'fun',_5,{'clauses',[{'clause',_5,[],[],[Call|[]]}|[]]}}|[]]]}
									  %% Line 2417
									  <FNAs> when 'true' ->
									      %% Line 2418
									      {'fun',_5,{'clauses',[{'clause',_5,[],[],[{'call',_5,{'var',_5,_2},FNAs}|[]]}|[]]}}
									end
								    in  let <CF> =
									    {%% Line 2420
									     'clause',_5,%% Line 2420
											 As,%% Line 2420
											    [],%% Line 2420
											       [{'cons',_5,_0,_26}|[]]}
									in  %% Line 2421
									    [CL|[CF|[]]]
'generator'/13 =
    %% Line 2423
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12) ->
	let <ComAs> =
	    apply %% Line 2424
		  'abst_vars'/2
		(%% Line 2424
		 [_7|[_8|[_9|[]]]], _11)
	in  let <InitC> =
		apply %% Line 2425
		      'generator_init'/9
		    (_0, _11, _3, _7, _8, _9, _10, _6, _12)
	    in  let <_15> =
		    call %% Line 2426
			 'erlang':%% Line 2426
				  '+'
			(_0, %% Line 2426
			     1)
		in  let <_16> =
			call %% Line 2426
			     'erlang':%% Line 2426
				      '--'
			    (_1, %% Line 2426
				 [_3|[]])
		    in  let <_17> =
			    apply %% Line 2426
				  'replace'/3
				(_16, _6, %% Line 2426
					  '_')
			in  let <_18> =
				apply %% Line 2426
				      'abst_vars'/2
				    (_17, _11)
			    in  let <_19> =
				    call %% Line 2426
					 'erlang':%% Line 2426
						  '++'
					(%% Line 2426
					 ComAs, _18)
				in  let <As> =
					[%% Line 2426
					 {'integer',_11,_15}|_19]
				    in  let <_21> =
					    call %% Line 2428
						 'erlang':%% Line 2428
							  '+'
						(_10, %% Line 2428
						      1)
					in  let <MatchS> =
						apply %% Line 2428
						      'next'/3
						    (_9, _21, _11)
					    in  let <_23> =
						    apply %% Line 2429
							  'replace'/3
							(%% Line 2429
							 [_3|[]], _6, _4)
						in  let <_24> =
							apply %% Line 2429
							      'abst_vars'/2
							    (_23, _11)
						    in  let <_25> =
							    call %% Line 2429
								 'erlang':%% Line 2429
									  '++'
								(%% Line 2429
								 ComAs, _24)
							in  let <AsM0> =
								[%% Line 2429
								 MatchS|_25]
							    in  let <AsM> =
								    apply %% Line 2430
									  'pack_args'/3
									(%% Line 2430
									 AsM0, _11, _12)
								in  let <_28> =
									call %% Line 2432
									     'erlang':%% Line 2432
										      '+'
									    (_0, %% Line 2432
										 1)
								    in  let <ContS> = {%% Line 2432
									     'integer',_11,_28}
									in  let <QIVs__GV> =
										call %% Line 2433
										     'erlang':%% Line 2433
											      '--'
										    (_1, %% Line 2433
											 [_3|[]])
									    in  let <_31> =
										    apply %% Line 2434
											  'replace'/3
											(%% Line 2434
											 QIVs__GV, _6, %% Line 2434
												       'nil')
										in  let <Tmp> =
											apply %% Line 2434
											      'replace'/3
											    (%% Line 2434
											     [_3|[]], _31, _4)
										    in  let <_33> =
											    apply %% Line 2435
												  'abst_vars'/2
												(%% Line 2435
												 Tmp, _11)
											in  let <_34> =
												call %% Line 2435
												     'erlang':%% Line 2435
													      '++'
												    (%% Line 2435
												     ComAs, _33)
											    in  let <AsC> =
												    apply %% Line 2435
													  'pack_args'/3
													(%% Line 2435
													 [ContS|_34], _11, _12)
												in  let <DoneS> =
													apply %% Line 2437
													      'next'/3
													    (_9, _10, _11)
												    in  let <_37> =
													    apply %% Line 2438
														  'replace'/3
														(_1, _6, %% Line 2438
															 'nil')
													in  let <_38> =
														apply %% Line 2438
														      'abst_vars'/2
														    (_37, _11)
													    in  let <_39> =
														    call %% Line 2438
															 'erlang':%% Line 2438
																  '++'
															(%% Line 2438
															 ComAs, _38)
														in  let <AsD0> =
															[%% Line 2438
															 DoneS|_39]
														    in  let <AsD> =
															    apply %% Line 2439
																  'pack_args'/3
																(%% Line 2439
																 AsD0, _11, _12)
															in  let <CsL> =
																apply %% Line 2441
																      'generator_list'/10
																    (_2, _3, _4, %% Line 2441
																		 As, %% Line 2441
																		     AsM, %% Line 2441
																			  AsC, %% Line 2441
																			       AsD, _8, _11, _12)
															    in  let <CsF> =
																    apply %% Line 2442
																	  'generator_cont'/11
																	(_2, _3, _4, _5, %% Line 2442
																			 As, %% Line 2442
																			     AsM, %% Line 2442
																				  AsC, %% Line 2442
																				       AsD, _8, _11, _12)
																in  let <_44> =
																	call %% Line 2443
																	     'erlang':%% Line 2443
																		      '++'
																	    (%% Line 2443
																	     CsL, %% Line 2443
																		  CsF)
																    in  %% Line 2443
																	[InitC|_44]
'generator_init'/9 =
    %% Line 2445
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	let <_9> =
	    apply %% Line 2446
		  'replace'/3
		(%% Line 2446
		 [_2|[]], _7, %% Line 2446
			      '_')
	in  let <_10> =
		[_3|%% Line 2446
		    [_4|[_5|_9]]]
	    in  let <As0> =
		    apply %% Line 2446
			  'abst_vars'/2
			(_10, _1)
		in  let <As> =
			apply %% Line 2447
			      'pack_args'/3
			    (%% Line 2447
			     [{'integer',_1,_0}|As0], _1, _8)
		    in  let <_13> =
			    call %% Line 2448
				 'erlang':%% Line 2448
					  '+'
				(_6, %% Line 2448
				     2)
			in  let <Next> =
				apply %% Line 2448
				      'next'/3
				    (_5, _13, _1)
			    in  let <_15> =
				    call %% Line 2449
					 'erlang':%% Line 2449
						  '+'
					(_0, %% Line 2449
					     1)
				in  let <_16> =
					apply %% Line 2449
					      'replace'/3
					    (%% Line 2449
					     [{'var',_1,'_'}|[]], %% Line 2449
								  As0, %% Line 2449
								       Next)
				    in  let <NAs> =
					    apply %% Line 2449
						  'pack_args'/3
						(%% Line 2449
						 [{'integer',_1,_15}|_16], _1, _8)
					in  %% Line 2450
					    {'clause',_1,As,[],[{'call',_1,{'var',_1,_4},NAs}|[]]}
'generator_list'/10 =
    %% Line 2452
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) ->
	let <_10> =
	    apply %% Line 2453
		  'replace'/3
		(%% Line 2453
		 [{'var',_8,_1}|[]], _3, %% Line 2453
					 {'cons',_8,_0,{'var',_8,_2}})
	in  let <As1> =
		apply %% Line 2453
		      'pack_args'/3
		    (_10, _8, _9)
	    in  let <_12> =
		    apply %% Line 2454
			  'replace'/3
			(%% Line 2454
			 [{'var',_8,_1}|[]], _3, %% Line 2454
						 {'cons',_8,{'var',_8,'_'},{'var',_8,_2}})
		in  let <As2> =
			apply %% Line 2454
			      'pack_args'/3
			    (_12, _8, _9)
		    in  let <_14> =
			    apply %% Line 2455
				  'replace'/3
				(%% Line 2455
				 [{'var',_8,_1}|[]], _3, %% Line 2455
							 {'nil',_8})
			in  let <As3> =
				apply %% Line 2455
				      'pack_args'/3
				    (_14, _8, _9)
			    in  let <CM> =
				    {%% Line 2456
				     'clause',_8,%% Line 2456
						 As1,%% Line 2456
						     [],%% Line 2456
							[{'call',_8,{'var',_8,_7},_4}|[]]}
				in  let <CC> =
					{%% Line 2457
					 'clause',_8,%% Line 2457
						     As2,%% Line 2457
							 [],%% Line 2457
							    [{'call',_8,{'var',_8,_7},_5}|[]]}
				    in  let <CD> =
					    {%% Line 2458
					     'clause',_8,%% Line 2458
							 As3,%% Line 2458
							     [],%% Line 2458
								[{'call',_8,{'var',_8,_7},_6}|[]]}
					in  %% Line 2459
					    [CM|[CC|[CD|[]]]]
'generator_cont'/11 =
    %% Line 2463
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) ->
	let <As> =
	    apply %% Line 2464
		  'pack_args'/3
		(_4, _9, _10)
	in  let <CF1> =
		{%% Line 2465
		 'cons',_9,_0,%% Line 2465
			      {'var',_9,_2}}
	    in  let <CF2> =
		    {%% Line 2466
		     'cons',_9,%% Line 2466
			       {'var',_9,'_'},%% Line 2466
					      {'var',_9,_2}}
		in  let <CF3> = {%% Line 2467
			 'nil',_9}
		    in  let <CF4> = {%% Line 2468
			     'var',_9,_3}
			in  let <CM> =
				{%% Line 2469
				 'clause',_9,%% Line 2469
					     [CF1|[]],%% Line 2469
						      [],%% Line 2469
							 [{'call',_9,{'var',_9,_8},_5}|[]]}
			    in  let <CC> =
				    {%% Line 2470
				     'clause',_9,%% Line 2470
						 [CF2|[]],%% Line 2470
							  [],%% Line 2470
							     [{'call',_9,{'var',_9,_8},_6}|[]]}
				in  let <CD> =
					{%% Line 2471
					 'clause',_9,%% Line 2471
						     [CF3|[]],%% Line 2471
							      [],%% Line 2471
								 [{'call',_9,{'var',_9,_8},_7}|[]]}
				    in  let <CE> =
					    {%% Line 2472
					     'clause',_9,%% Line 2472
							 [CF4|[]],%% Line 2472
								  [],%% Line 2472
								     [CF4|[]]}
					in  let <Cls> =
						[%% Line 2473
						 CM|%% Line 2473
						    [CC|[CD|[CE|[]]]]]
					    in  let <B> =
						    {%% Line 2474
						     'case',_9,%% Line 2474
							       {'call',_9,{'var',_9,_1},[]},%% Line 2474
											    Cls}
						in  %% Line 2475
						    [{'clause',_9,As,[],[B|[]]}|[]]
'filter'/10 =
    %% Line 2477
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) ->
	let <IAs> =
	    apply %% Line 2478
		  'replace'/3
		(_2, _8, %% Line 2478
			 '_')
	in  let <_11> =
		[_4|%% Line 2479
		    [_5|[_6|IAs]]]
	    in  let <_12> =
		    apply %% Line 2479
			  'abst_vars'/2
			(_11, _1)
		in  let <As> =
			apply %% Line 2479
			      'pack_args'/3
			    (%% Line 2479
			     [{'integer',_1,_3}|_12], _1, _9)
		    in  let <_14> =
			    [_4|%% Line 2480
				[_5|[_6|_8]]]
			in  let <NAs> =
				apply %% Line 2480
				      'abst_vars'/2
				    (_14, _1)
			    in  let <_16> =
				    call %% Line 2481
					 'erlang':%% Line 2481
						  '+'
					(_7, %% Line 2481
					     1)
				in  let <TNext> =
					apply %% Line 2481
					      'next'/3
					    (_6, _16, _1)
				    in  let <FNext> =
					    apply %% Line 2482
						  'next'/3
						(_6, _7, _1)
					in  let <NAsT> =
						apply %% Line 2483
						      'pack_args'/3
						    (%% Line 2483
						     [TNext|NAs], _1, _9)
					    in  let <NAsF> =
						    apply %% Line 2484
							  'pack_args'/3
							(%% Line 2484
							 [FNext|NAs], _1, _9)
						in  let <_26> =
							case %% Line 2488
							     apply 'is_guard_test'/2
								 (_0, _9) of
							  %% Line 2489
							  <'true'> when 'true' ->
							      let <CT> =
								  {%% Line 2490
								   'clause',_1,%% Line 2490
									       [],%% Line 2490
										  [[_0|[]]|[]],%% Line 2490
											       [{'call',_1,{'var',_1,_5},NAsT}|[]]}
							      in  let <CF> =
								      {%% Line 2491
								       'clause',_1,%% Line 2491
										   [],%% Line 2491
										      [[{'atom',_1,'true'}|[]]|[]],%% Line 2491
														   [{'call',_1,{'var',_1,_5},NAsF}|[]]}
								  in  %% Line 2492
								      [{'if',_1,[CT|[CF|[]]]}|[]]
							  %% Line 2493
							  <'false'> when 'true' ->
							      let <CT> =
								  {%% Line 2494
								   'clause',_1,%% Line 2494
									       [{'atom',_1,'true'}|[]],%% Line 2494
												       [],%% Line 2494
													  [{'call',_1,{'var',_1,_5},NAsT}|[]]}
							      in  let <CF> =
								      {%% Line 2495
								       'clause',_1,%% Line 2495
										   [{'atom',_1,'false'}|[]],%% Line 2495
													    [],%% Line 2495
													       [{'call',_1,{'var',_1,_5},NAsF}|[]]}
								  in  %% Line 2496
								      [{'case',_1,_0,[CT|[CF|[]]]}|[]]
							  ( <_25> when 'true' ->
								%% Line 2488
								primop 'match_fail'
								    ({'case_clause',_25})
							    -| ['compiler_generated'] )
							end
						    in  %% Line 2498
							[{'clause',_1,As,[],_26}|[]]
'pack_args'/3 =
    %% Line 2500
    fun (_0,_1,_2) ->
	%% Line 2501
	case apply 'split_args'/3
		 (_0, _1, _2) of
	  %% Line 2502
	  <{ArgsL,ArgsT}> when 'true' ->
	      %% Line 2503
	      call 'erlang':'++'
		  (ArgsL, [ArgsT|[]])
	  %% Line 2504
	  <_7> when 'true' ->
	      _0
	end
'split_args'/3 =
    %% Line 2508
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Args,L,State = {'state',_21,_22,_23,_24,_25,_26,_27}>
	      when ( try
		      let <_8> =
			  call 'erlang':'length'
			      (Args)
		      in  let <_7> =
			      call 'erlang':'element'
				  (4, State)
			  in  call 'erlang':'>'
				  (_8, _7)
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 2509
	      ( case State of
		  ( <( {'state',_28,_29,_rec29,_30,_31,_32,_33}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_16> =
			    call 'erlang':'-'
				(_rec29, 1)
			in  let <_17> =
				call 'lists':'sublist'
				    (Args, _16)
			    in  %% Line 2510
				( case State of
				    ( <( {'state',_35,_36,_rec30,_37,_38,_39,_40}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_12> =
					      call 'erlang':'-'
						  (_rec30, 1)
					  in  let <_13> =
						  call 'lists':'nthtail'
						      (_12, Args)
					      in  {_17,{'tuple',L,_13}}
				      -| ['compiler_generated'] )
				    ( <_41> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','state'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_34> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 2511
	  <Args,_X_L,_X_State> when 'true' ->
	      %% Line 2512
	      Args
	end
'replace'/3 =
    %% Line 2516
    fun (_0,_1,_2) ->
	%% Line 2520
	( letrec
	      'lc$^0'/1 =
		  fun (_5) ->
		      case _5 of
			<[E|_4]> when 'true' ->
			    let <_7> =
				case call 'lists':'member'
					 (E, _0) of
				  <'true'> when 'true' ->
				      _2
				  <'false'> when 'true' ->
				      E
				  ( <_6> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_6})
				    -| ['compiler_generated'] )
				end
			    in  let <_8> =
				    apply 'lc$^0'/1
					(_4)
				in  ( [_7|_8]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_12> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_12})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_1)
	  -| ['list_comprehension'] )
'is_list_c'/2 =
    %% Line 2522
    fun (_0,_1) ->
	%% Line 2523
	{'call',_1,{'atom',_1,'is_list'},[{'var',_1,_0}|[]]}
'next'/3 =
    %% Line 2525
    fun (_0,_1,_2) ->
	%% Line 2526
	{'call',_2,{'atom',_2,'element'},[{'integer',_2,_1}|[{'var',_2,_0}|[]]]}
'aux_vars'/3 =
    %% Line 2528
    fun (_0,_1,_2) ->
	%% Line 2529
	( letrec
	      'lc$^0'/1 =
		  fun (_5) ->
		      case _5 of
			<[Name|_4]> when 'true' ->
			    let <_6> =
				apply 'aux_var'/5
				    (Name, _1, 0, 1, _2)
			    in  let <_7> =
				    apply 'lc$^0'/1
					(_4)
				in  ( [_6|_7]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_11> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_11})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_0)
	  -| ['list_comprehension'] )
'aux_var'/5 =
    %% Line 2531
    fun (_0,_1,_2,_3,_4) ->
	let <_5> =
	    call %% Line 2532
		 'lists':%% Line 2532
			 'concat'
		(%% Line 2532
		 [_0|[_1|['_'|[_2|['_']]]]])
	in  %% Line 2532
	    call 'qlc':'aux_name'
		(_5, _3, _4)
'no_compiler_warning'/1 =
    %% Line 2534
    fun (_0) ->
	let <Anno> =
	    call %% Line 2535
		 'erl_anno':%% Line 2535
			    'new'
		(_0)
	in  %% Line 2536
	    call 'erl_anno':'set_generated'
		('true', Anno)
'loc'/1 =
    %% Line 2538
    fun (_0) ->
	%% Line 2539
	call 'erl_anno':'location'
	    (_0)
'list2op'/2 =
    %% Line 2541
    fun (_0,_1) ->
	case <_0,_1> of
	  <[E|[]],_X_Op> when 'true' ->
	      %% Line 2542
	      E
	  %% Line 2543
	  <[E|Es],Op> when 'true' ->
	      let <_3> =
		  apply %% Line 2544
			'anno0'/0
		      ()
	      in  let <_2> =
		      apply %% Line 2544
			    'list2op'/2
			  (%% Line 2544
			   Es, %% Line 2544
			       Op)
		  in  %% Line 2544
		      {'op',_3,Op,E,_2}
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'list2op',2}}] )
	    -| ['compiler_generated'] )
	end
'anno0'/0 =
    %% Line 2546
    fun () ->
	%% Line 2547
	call 'erl_anno':'new'
	    (0)
'anno1'/0 =
    %% Line 2549
    fun () ->
	%% Line 2550
	call 'erl_anno':'new'
	    (1)
'qual_fold'/5 =
    %% Line 2554
    fun (_0,_1,_2,_3,_4) ->
	let <F> =
	    fun (_8,_7,_6) ->
		%% Line 2555
		case <_8,_7,_6> of
		  <Id,{'lc',L,E,Qs0},GA0> when 'true' ->
		      %% Line 2556
		      case apply 'qual_fold'/7
			       (Qs0, _0, GA0, _2, Id, 1, []) of
			<{Qs,GA,_X_NA}> when 'true' ->
			    %% Line 2557
			    {{'lc',L,E,Qs},GA}
			( <_5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_5})
			  -| ['compiler_generated'] )
		      end
		  %% Line 2558
		  <_X_Id,Expr,GA> when 'true' ->
		      %% Line 2559
		      {Expr,GA}
		end
	in  %% Line 2561
	    apply 'qlc_mapfold'/4
		(F, _1, _3, _4)
'qual_fold'/7 =
    %% Line 2563
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <[Q0|Qs],F,GA0,A0,Id,No,NQs> when 'true' ->
	      let <QId> =
		  apply %% Line 2564
			'qid'/2
		      (%% Line 2564
		       Id, %% Line 2564
			   No)
	      in  %% Line 2565
		  case apply F
			   (QId, Q0, GA0, A0) of
		    <{Q,GA,A}> when 'true' ->
			let <_9> =
			    call %% Line 2566
				 'erlang':%% Line 2566
					  '+'
				(%% Line 2566
				 No, %% Line 2566
				     1)
			in  %% Line 2566
			    apply 'qual_fold'/7
				(Qs, F, GA, A, Id, _9, [Q|NQs])
		    ( <_8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_8})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2567
	  <[],_X_F,GA,A,_X_Id,_X_No,NQs> when 'true' ->
	      let <_10> =
		  call %% Line 2568
		       'lists':%% Line 2568
			       'reverse'
		      (%% Line 2568
		       NQs)
	      in  %% Line 2568
		  {_10,GA,A}
	  ( <_17,_16,_15,_14,_13,_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_17,_16,_15,_14,_13,_12,_11})
		  -| [{'function_name',{'qual_fold',7}}] )
	    -| ['compiler_generated'] )
	end
'qlc_mapfold'/4 =
    %% Line 2570
    fun (_0,_1,_2,_3) ->
	%% Line 2571
	( case _3 of
	    ( <( {'state',_rec31,_11,_12,_13,_14,_15,_16}
		 -| ['compiler_generated'] )> when 'true' ->
		  case apply 'qlcmf'/5
			   (_2, _0, _rec31, _1, 1) of
		    <{Forms,A,_X_NNo}> when 'true' ->
			do  %% Line 2572
			    call 'erlang':'erase'
				('qlc_current_file')
			    %% Line 2573
			    {Forms,A}
		    ( <_6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_6})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_17> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'qlcmf'/5 =
    %% Line 2575
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <[E0|Es0],F,Imp,A0,No0> when 'true' ->
	      %% Line 2576
	      case apply 'qlcmf'/5
		       (E0, F, Imp, A0, No0) of
		<{E,A1,No1}> when 'true' ->
		    %% Line 2577
		    case apply 'qlcmf'/5
			     (Es0, F, Imp, A1, No1) of
		      <{Es,A,No}> when 'true' ->
			  %% Line 2578
			  {[E|Es],A,No}
		      ( <_6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_6})
			-| ['compiler_generated'] )
		    end
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2579
	  <{'call',L1,_@r0 = {'remote',L2,{'atom',L3,'qlc'},{'atom',L4,'q'}},[LC0|Os0]},F,Imp,A0,No0>
	      when try
		    let <_7> =
			call 'erlang':'length'
			    (Os0)
		    in  call 'erlang':'<'
			    (_7, 2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2580
	      case apply 'qlcmf'/5
		       (Os0, F, Imp, A0, No0) of
		<{Os,A1,No1}> when 'true' ->
		    %% Line 2581
		    case apply 'qlcmf'/5
			     (LC0, F, Imp, A1, No1) of
		      <{LC,A2,No}> when 'true' ->
			  let <NL> =
			      apply %% Line 2582
				    'make_lcid'/2
				  (%% Line 2582
				   L1, %% Line 2582
				       No)
			  in  %% Line 2583
			      case apply F
				       (NL, LC, A2) of
				<{T,A}> when 'true' ->
				    let <_12> =
					call %% Line 2584
					     'erlang':%% Line 2584
						      '+'
					    (%% Line 2584
					     No, %% Line 2584
						 1)
				    in  %% Line 2584
					{{'call',L1,_@r0,[T|Os]},A,_12}
				( <_11> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_11})
				  -| ['compiler_generated'] )
			      end
		      ( <_9> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_9})
			-| ['compiler_generated'] )
		    end
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2585
	  <{'call',L,_@r1 = {'atom',L2,'q'},[LC0|Os0]},F,Imp = 'true',A0,No0>
	      when try
		    let <_13> =
			call 'erlang':'length'
			    (Os0)
		    in  call 'erlang':'<'
			    (_13, 2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2586
	      case apply 'qlcmf'/5
		       (Os0, F, Imp, A0, No0) of
		<{Os,A1,No1}> when 'true' ->
		    %% Line 2587
		    case apply 'qlcmf'/5
			     (LC0, F, Imp, A1, No1) of
		      <{LC,A2,No}> when 'true' ->
			  let <NL> =
			      apply %% Line 2588
				    'make_lcid'/2
				  (%% Line 2588
				   L, %% Line 2588
				      No)
			  in  %% Line 2589
			      case apply F
				       (NL, LC, A2) of
				<{T,A}> when 'true' ->
				    let <_18> =
					call %% Line 2590
					     'erlang':%% Line 2590
						      '+'
					    (%% Line 2590
					     No, %% Line 2590
						 1)
				    in  %% Line 2590
					{{'call',L,_@r1,[T|Os]},A,_18}
				( <_17> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_17})
				  -| ['compiler_generated'] )
			      end
		      ( <_15> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_15})
			-| ['compiler_generated'] )
		    end
		( <_14> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2591
	  <Attr = {'attribute',_X_L,'file',{File,_X_Line}},_X_F,_X_Imp,A,No> when 'true' ->
	      do  %% Line 2592
		  call 'erlang':'put'
		      ('qlc_current_file', File)
		  %% Line 2593
		  {Attr,A,No}
	  %% Line 2594
	  <T,F,Imp,A0,No0>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_19> =
		  call %% Line 2595
		       'erlang':%% Line 2595
				'tuple_to_list'
		      (%% Line 2595
		       T)
	      in  %% Line 2595
		  case apply 'qlcmf'/5
			   (_19, F, Imp, A0, No0) of
		    <{TL,A,No}> when 'true' ->
			let <_21> =
			    call %% Line 2596
				 'erlang':%% Line 2596
					  'list_to_tuple'
				(%% Line 2596
				 TL)
			in  %% Line 2596
			    {_21,A,No}
		    ( <_20> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_20})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2597
	  <T,_X_F,_X_Imp,A,No> when 'true' ->
	      %% Line 2598
	      {T,A,No}
	end
'occ_vars'/1 =
    %% Line 2600
    fun (_0) ->
	let <_3> =
	    fun (_1) ->
		%% Line 2601
		case _1 of
		  <{'var',_X_L,V}> when 'true' ->
		      V
		  ( <_2> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_2})
			  -| [{'function_name',{'-occ_vars/1-fun-0-',1}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 2601
	    call 'qlc':'var_fold'
		(_3, [], _0)
'save_anno'/2 =
    %% Line 2607
    fun (_0,_1) ->
	let <F> =
	    fun (_7) ->
		let <N> =
		    apply %% Line 2609
			  'next_slot'/1
			(_1)
		in  let <Location> =
			call %% Line 2610
			     'erl_anno':%% Line 2610
					'location'
			    (%% Line 2608
			     _7)
		    in  let <_4> =
			    ~{%% Line 2611
			     'location'=>Location}~
			in  let <Data> = {%% Line 2611
				 N,_4}
			    in  %% Line 2612
				case call 'ets':'insert'
					 (_1, Data) of
				  <'true'> when 'true' ->
				      %% Line 2613
				      call 'erl_anno':'new'
					  (N)
				  ( <_6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_6})
				    -| ['compiler_generated'] )
				end
	in  %% Line 2615
	    apply 'map_anno'/2
		(F, _0)
'next_slot'/1 =
    %% Line 2617
    fun (_0) ->
	let <I> =
	    call %% Line 2618
		 'ets':%% Line 2618
		       'update_counter'
		(_0, %% Line 2618
		     'var_n', %% Line 2618
			      1)
	in  %% Line 2619
	    case call 'ets':'lookup'
		     (_0, I) of
	      %% Line 2620
	      <[]> when 'true' ->
		  %% Line 2621
		  I
	      %% Line 2622
	      <_4> when 'true' ->
		  %% Line 2623
		  apply 'next_slot'/1
		      (_0)
	    end
'restore_anno'/2 =
    %% Line 2626
    fun (_0,_1) ->
	let <F> =
	    fun (_5) ->
		let <Location> =
		    call %% Line 2628
			 'erl_anno':%% Line 2628
				    'location'
			(%% Line 2627
			 _5)
		in  %% Line 2629
		    case call 'ets':'lookup'
			     (_1, Location) of
		      %% Line 2630
		      <[{_10,Data}|[]]>
			  when call 'erlang':'=:='
				(_10,
				 Location) ->
			  let <OrigLocation> =
			      call %% Line 2631
				   'maps':%% Line 2631
					  'get'
				  (%% Line 2631
				   'location', %% Line 2631
					       Data)
			  in  %% Line 2632
			      call 'erl_anno':'set_location'
				  (OrigLocation, _5)
		      %% Line 2633
		      <[{_11}|[]]>
			  when call 'erlang':'=:='
				(_11,
				 Location) ->
			  _5
		      %% Line 2635
		      <[]> when 'true' ->
			  _5
		      ( <_4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_4})
			-| ['compiler_generated'] )
		    end
	in  %% Line 2639
	    apply 'map_anno'/2
		(F, _0)
'restore_loc'/2 =
    %% Line 2641
    fun (_0,_1) ->
	case <_0,_1> of
	  <Location,{'state',_5,_6,_7,_8,_9,_10,NodeInfo}> when 'true' ->
	      %% Line 2642
	      case call 'ets':'lookup'
		       (NodeInfo, Location) of
		%% Line 2643
		<[{_11,~{'location':=OrigLocation}~}|[]]>
		    when call 'erlang':'=:='
			  (_11,
			   Location) ->
		    %% Line 2644
		    OrigLocation
		%% Line 2645
		<[{_12}|[]]>
		    when call 'erlang':'=:='
			  (_12,
			   Location) ->
		    %% Line 2646
		    Location
		%% Line 2647
		<[]> when 'true' ->
		    %% Line 2648
		    Location
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'restore_loc',2}}] )
	    -| ['compiler_generated'] )
	end
'no_shadows'/2 =
    %% Line 2651
    fun (_0,_1) ->
	let <_2> =
	    call %% Line 2669
		 'qlc':%% Line 2669
		       'vars'
		(_0)
	in  let <_3> =
		call %% Line 2669
		     'ordsets':%% Line 2669
			       'to_list'
		    (_2)
	    in  let <AllVars> =
		    call %% Line 2669
			 'gb_sets':%% Line 2669
				   'from_list'
			(_3)
		in  let <VFun> =
			fun (_7,_6,_5) ->
			    %% Line 2671
			    apply 'nos'/2
				(_6, _5)
		    in  let <LI> =
			    call %% Line 2672
				 'ets':%% Line 2672
				       'new'
				(%% Line 2672
				 'qlc', %% Line 2672
					[])
			in  let <UV> =
				call %% Line 2673
				     'ets':%% Line 2673
					   'new'
				    (%% Line 2673
				     'qlc', %% Line 2673
					    [])
			    in  let <D0> =
				    call %% Line 2674
					 'maps':%% Line 2674
						'new'
					()
				in  let <S1> =
					{%% Line 2675
					 LI,%% Line 2675
					    D0,%% Line 2675
					       UV,%% Line 2675
						  AllVars,%% Line 2675
							  [],_1}
				    in  do  %% Line 2676
					    apply 'qlc_mapfold'/4
						(VFun, S1, _0, _1)
					    let <Singletons> =
						call %% Line 2678
						     'ets':%% Line 2678
							   'select'
						    (%% Line 2678
						     UV, %% Line 2678
							 [{{'$1',0},[],['$1']}])
					    in  %% Line 2680
						case call 'ets':'delete_all_objects'
							 (LI) of
						  <'true'> when 'true' ->
						      %% Line 2681
						      case call 'ets':'delete_all_objects'
							       (UV) of
							<'true'> when 'true' ->
							    let <S2> =
								{%% Line 2683
								 LI,%% Line 2683
								    D0,%% Line 2683
								       UV,%% Line 2683
									  AllVars,%% Line 2683
										  Singletons,_1}
							    in  %% Line 2684
								case apply 'qlc_mapfold'/4
									 (VFun, S2, _0, _1) of
								  <{Forms,_26}> when 'true' ->
								      %% Line 2685
								      case call 'ets':'delete'
									       (LI) of
									<'true'> when 'true' ->
									    %% Line 2686
									    case call 'ets':'delete'
										     (UV) of
									      <'true'> when 'true' ->
										  %% Line 2687
										  Forms
									      ( <_23> when 'true' ->
										    primop 'match_fail'
											({'badmatch',_23})
										-| ['compiler_generated'] )
									    end
									( <_22> when 'true' ->
									      primop 'match_fail'
										  ({'badmatch',_22})
									  -| ['compiler_generated'] )
								      end
								  ( <_21> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_21})
								    -| ['compiler_generated'] )
								end
							( <_19> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_19})
							  -| ['compiler_generated'] )
						      end
						  ( <_18> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_18})
						    -| ['compiler_generated'] )
						end
'nos'/2 =
    %% Line 2689
    fun (_0,_1) ->
	case <_0,_1> of
	  <[E0|Es0],S0> when 'true' ->
	      %% Line 2690
	      case apply 'nos'/2
		       (E0, S0) of
		<{E,S1}> when 'true' ->
		    %% Line 2691
		    case apply 'nos'/2
			     (Es0, S1) of
		      <{Es,S}> when 'true' ->
			  %% Line 2692
			  {[E|Es],S}
		      ( <_3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_3})
			-| ['compiler_generated'] )
		    end
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2693
	  <{'fun',L,{'clauses',Cs}},S> when 'true' ->
	      let <_10> =
		  letrec
		      'lc$^0'/1 =
			  %% Line 2698
			  fun (_6) ->
			      case _6 of
				<[{'clause',Ln,H0,G0,B0}|_5]> when 'true' ->
				    case apply 'nos_pattern'/2
					     (H0, S) of
				      <{H,S1}> when 'true' ->
					  case apply 'nos'/2
						   ([G0|[B0|[]]], S1) of
					    <{[G|[B|[]]],_40}> when 'true' ->
						let <_9> =
						    apply 'lc$^0'/1
							(_5)
						in  ( [{'clause',Ln,H,G,B}|_9]
						      -| ['compiler_generated'] )
					    ( <_8> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_8})
					      -| ['compiler_generated'] )
					  end
				      ( <_7> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_7})
					-| ['compiler_generated'] )
				    end
				( <[_4|_5]> when 'true' ->
				      apply 'lc$^0'/1
					  (_5)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_45> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_45})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  %% Line 2698
		      apply 'lc$^0'/1
			  (Cs)
	      in  %% Line 2699
		  {{'fun',L,{'clauses',_10}},S}
	  %% Line 2700
	  <{'named_fun',Loc,Name,Cs},S> when 'true' ->
	      let <_13> =
		  case %% Line 2701
		       Name of
		    %% Line 2702
		    <'_'> when 'true' ->
			%% Line 2703
			S
		    %% Line 2704
		    <_41> when 'true' ->
			%% Line 2705
			apply 'nos_pattern'/2
			    ({'var',Loc,Name}, S)
		  end
	      in  %% Line 2701
		  case _13 of
		    <{{'var',NLoc,NName},S1}> when 'true' ->
			let <_21> =
			    letrec
				'lc$^1'/1 =
				    %% Line 2711
				    fun (_17) ->
					case _17 of
					  <[{'clause',CLoc,H0,G0,B0}|_16]> when 'true' ->
					      case apply 'nos_pattern'/2
						       (H0, S1) of
						<{H,S2}> when 'true' ->
						    case apply 'nos'/2
							     ([G0|[B0|[]]], S2) of
						      <{[G|[B|[]]],_42}> when 'true' ->
							  let <_20> =
							      apply 'lc$^1'/1
								  (_16)
							  in  ( [{'clause',CLoc,H,G,B}|_20]
								-| ['compiler_generated'] )
						      ( <_19> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_19})
							-| ['compiler_generated'] )
						    end
						( <_18> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_18})
						  -| ['compiler_generated'] )
					      end
					  ( <[_15|_16]> when 'true' ->
						apply 'lc$^1'/1
						    (_16)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_46> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_46})
						  -| [{'function_name',{'lc$^1',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  %% Line 2711
				apply 'lc$^1'/1
				    (Cs)
			in  %% Line 2712
			    {{'named_fun',NLoc,NName,_21},S}
		    ( <_14> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_14})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2713
	  <{'lc',L,E0,Qs0},S> when 'true' ->
	      let <F> =
		  fun (_28,_27) ->
		      %% Line 2717
		      case <_28,_27> of
			<{T,Ln,P0,LE0},QS0>
			    when let <_23> =
				  call 'erlang':'=:='
				      (T, 'b_generate')
			      in  let <_24> =
				      call 'erlang':'=:='
					  (T, 'generate')
				  in  call 'erlang':'or'
					  (_23, _24) ->
			    %% Line 2718
			    case apply 'nos'/2
				     (LE0, QS0) of
			      <{LE,_43}> when 'true' ->
				  %% Line 2719
				  case apply 'nos_pattern'/2
					   (P0, QS0) of
				    <{P,QS}> when 'true' ->
					%% Line 2720
					{{T,Ln,P,LE},QS}
				    ( <_26> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_26})
				      -| ['compiler_generated'] )
				  end
			      ( <_25> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_25})
				-| ['compiler_generated'] )
			    end
			%% Line 2721
			<Filter,QS> when 'true' ->
			    %% Line 2722
			    apply 'nos'/2
				(Filter, QS)
		      end
	      in  %% Line 2724
		  case call 'lists':'mapfoldl'
			   (F, S, Qs0) of
		    <{Qs,S1}> when 'true' ->
			%% Line 2725
			case apply 'nos'/2
				 (E0, S1) of
			  <{E,_44}> when 'true' ->
			      %% Line 2726
			      {{'lc',L,E,Qs},S}
			  ( <_33> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_33})
			    -| ['compiler_generated'] )
			end
		    ( <_32> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_32})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2727
	  <Var = {'var',L,V},S = {_X_LI,Vs,UV,_X_A,_X_Sg,State}>
	      when call 'erlang':'=/='
		    (V,
		     '_') ->
	      %% Line 2728
	      case apply 'used_var'/3
		       (V, Vs, UV) of
		%% Line 2729
		<{'true',VN}> when 'true' ->
		    do  %% Line 2730
			apply 'nos_var'/3
			    (L, V, State)
			%% Line 2731
			{{'var',L,VN},S}
		%% Line 2732
		<'false'> when 'true' ->
		    %% Line 2733
		    {Var,S}
		( <_34> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_34})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2735
	  <T,S0>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_35> =
		  call %% Line 2736
		       'erlang':%% Line 2736
				'tuple_to_list'
		      (%% Line 2736
		       T)
	      in  %% Line 2736
		  case apply 'nos'/2
			   (_35, S0) of
		    <{TL,S}> when 'true' ->
			let <_37> =
			    call %% Line 2737
				 'erlang':%% Line 2737
					  'list_to_tuple'
				(%% Line 2737
				 TL)
			in  %% Line 2737
			    {_37,S}
		    ( <_36> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_36})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2738
	  <T,S> when 'true' ->
	      %% Line 2739
	      {T,S}
	end
'nos_pattern'/2 =
    %% Line 2741
    fun (_0,_1) ->
	%% Line 2742
	case apply 'nos_pattern'/3
		 (_0, _1, []) of
	  <{T,NS,_5}> when 'true' ->
	      %% Line 2743
	      {T,NS}
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_2})
	    -| ['compiler_generated'] )
	end
'nos_pattern'/3 =
    %% Line 2745
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[P0|Ps0],S0,PVs0> when 'true' ->
	      %% Line 2746
	      case apply 'nos_pattern'/3
		       (P0, S0, PVs0) of
		<{P,S1,PVs1}> when 'true' ->
		    %% Line 2747
		    case apply 'nos_pattern'/3
			     (Ps0, S1, PVs1) of
		      <{Ps,S,PVs}> when 'true' ->
			  %% Line 2748
			  {[P|Ps],S,PVs}
		      ( <_4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_4})
			-| ['compiler_generated'] )
		    end
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2749
	  <{'var',L,V},{LI,Vs0,UV,A,Sg,State},PVs0>
	      when call 'erlang':'=/='
		    (V,
		     '_') ->
	      let <_20,_21,_22> =
		  case %% Line 2751
		       call 'lists':'keyfind'
			   (V, 1, PVs0) of
		    %% Line 2752
		    <{_19,VN}>
			when call 'erlang':'=:='
			      (_19,
			       V) ->
			do  %% Line 2753
			    apply 'used_var'/3
				(V, Vs0, UV)
			    %% Line 2754
			    <VN,Vs0,PVs0>
		    %% Line 2755
		    <'false'> when 'true' ->
			%% Line 2756
			case apply 'next_var'/5
				 (V, Vs0, A, LI, UV) of
			  <{VN,Vs1}> when 'true' ->
			      let <_8> =
				  case %% Line 2757
				       call 'lists':'member'
					   (VN, Sg) of
				    %% Line 2758
				    <'true'> when 'true' ->
					'_'
				    %% Line 2759
				    <'false'> when 'true' ->
					VN
				    ( <_7> when 'true' ->
					  %% Line 2757
					  primop 'match_fail'
					      ({'case_clause',_7})
				      -| ['compiler_generated'] )
				  end
			      in  %% Line 2761
				  <_8,Vs1,[{V,VN}|PVs0]>
			  ( <_6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_6})
			    -| ['compiler_generated'] )
			end
		    ( <_10> when 'true' ->
			  %% Line 2751
			  primop 'match_fail'
			      ({'case_clause',_10})
		      -| ['compiler_generated'] )
		  end
	      in  do  %% Line 2763
		      apply 'nos_var'/3
			  (L, V, State)
		      %% Line 2764
		      {{'var',L,( _20
				  -| ['compiler_generated'] )},{LI,( _21
								     -| ['compiler_generated'] ),UV,A,Sg,State},( _22
														  -| ['compiler_generated'] )}
	  %% Line 2765
	  <T,S0,PVs0>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_13> =
		  call %% Line 2766
		       'erlang':%% Line 2766
				'tuple_to_list'
		      (%% Line 2766
		       T)
	      in  %% Line 2766
		  case apply 'nos_pattern'/3
			   (_13, S0, PVs0) of
		    <{TL,S,PVs}> when 'true' ->
			let <_15> =
			    call %% Line 2767
				 'erlang':%% Line 2767
					  'list_to_tuple'
				(%% Line 2767
				 TL)
			in  %% Line 2767
			    {_15,S,PVs}
		    ( <_14> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_14})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2768
	  <T,S,PVs> when 'true' ->
	      %% Line 2769
	      {T,S,PVs}
	end
'nos_var'/3 =
    %% Line 2771
    fun (_0,_1,_2) ->
	%% Line 2772
	( case _2 of
	    ( <( {'state',_13,_14,_15,_16,_17,_18,_rec32}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Location> =
		      call %% Line 2773
			   'erl_anno':%% Line 2773
				      'location'
			  (_0)
		  in  %% Line 2774
		      case call 'ets':'lookup'
			       (_rec32, Location) of
			%% Line 2775
			<[{_20,~{'name':=_21}~}|[]]>
			    when call 'erlang':'=:='
				  (_20,
				   Location) ->
			    %% Line 2776
			    'true'
			%% Line 2777
			<[{_22,Data}|[]]>
			    when call 'erlang':'=:='
				  (_22,
				   Location) ->
			    %% Line 2778
			    case <> of
			      ( <>
				    when call 'erlang':'is_map'
					  (Data) ->
				    let <_7> =
					~{'name'=>_1|Data}~
				    in  let <_23> =
					    call 'ets':'insert'
						(_rec32, {Location,_7})
					in  case _23 of
					      <'true'> when 'true' ->
						  ( _23
						    -| ['compiler_generated'] )
					      ( <_8> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_8})
						-| ['compiler_generated'] )
					    end
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    ( primop 'match_fail'
					  ({'badmap',Data})
				      -| [{'eval_failure','badmap'}] )
				-| ['compiler_generated'] )
			    end
			%% Line 2779
			<[]> when 'true' ->
			    %% Line 2780
			    'true'
			( <_9> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_9})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_19> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'used_var'/3 =
    %% Line 2783
    fun (_0,_1,_2) ->
	%% Line 2784
	case call 'maps':'find'
		 (_0, _1) of
	  %% Line 2785
	  <{'ok',Value}> when 'true' ->
	      let <VN> =
		  call %% Line 2786
		       'qlc':%% Line 2786
			     'name_suffix'
		      (_0, %% Line 2786
			   Value)
	      in  do  %% Line 2787
		      ( call ( 'ets'
			       -| ['result_not_wanted'] ):( 'update_counter'
							    -| ['result_not_wanted'] )
			    (_2, VN, ( 1
				       -| ['result_not_wanted'] ))
			-| ['result_not_wanted'] )
		      %% Line 2788
		      {'true',VN}
	  %% Line 2789
	  <'error'> when 'true' ->
	      'false'
	  ( <_5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_5})
	    -| ['compiler_generated'] )
	end
'next_var'/5 =
    %% Line 2792
    fun (_0,_1,_2,_3,_4) ->
	let <_6> =
	    case %% Line 2793
		 call 'ets':'lookup'
		     (_3, _0) of
	      %% Line 2794
	      <[{_18,Value}|[]]>
		  when call 'erlang':'=:='
			(_18,
			 _0) ->
		  call 'erlang':'+'
		      (Value, 1)
	      %% Line 2795
	      <[]> when 'true' ->
		  1
	      ( <_5> when 'true' ->
		    %% Line 2793
		    primop 'match_fail'
			({'case_clause',_5})
		-| ['compiler_generated'] )
	    end
	in  %% Line 2797
	    case call 'ets':'insert'
		     (_3, {_0,_6}) of
	      <'true'> when 'true' ->
		  let <VN> =
		      call %% Line 2798
			   'qlc':%% Line 2798
				 'name_suffix'
			  (_0, _6)
		  in  %% Line 2799
		      case call 'gb_sets':'is_member'
			       (VN, _2) of
			%% Line 2800
			<'true'> when 'true' ->
			    apply 'next_var'/5
				(_0, _1, _2, _3, _4)
			%% Line 2801
			<'false'> when 'true' ->
			    case call 'ets':'insert'
				     (_4, {VN,0}) of
			      <'true'> when 'true' ->
				  let <NVs> =
				      call %% Line 2802
					   'maps':%% Line 2802
						  'put'
					  (_0, _6, _1)
				  in  %% Line 2803
				      {VN,NVs}
			      ( <_10> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_10})
				-| ['compiler_generated'] )
			    end
			( <_12> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_12})
			  -| ['compiler_generated'] )
		      end
	      ( <_8> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_8})
		-| ['compiler_generated'] )
	    end
'undo_no_shadows'/2 =
    %% Line 2806
    fun (_0,_1) ->
	let <_4> =
	    fun (_2) ->
		%% Line 2807
		apply 'undo_no_shadows1'/2
		    (_2, _1)
	in  %% Line 2807
	    apply 'var_map'/2
		(_4, _0)
'undo_no_shadows1'/2 =
    %% Line 2809
    fun (_0,_1) ->
	case <_0,_1> of
	  <Var = {'var',Anno,_9},State> when 'true' ->
	      let <Location> =
		  call %% Line 2810
		       'erl_anno':%% Line 2810
				  'location'
		      (%% Line 2810
		       Anno)
	      in  %% Line 2811
		  ( case State of
		      ( <( {'state',_10,_11,_12,_13,_14,_15,_rec33}
			   -| ['compiler_generated'] )> when 'true' ->
			    %% Line 2812
			    case call 'ets':'lookup'
				     (_rec33, Location) of
			      %% Line 2813
			      <[{_17,~{'name':=Name}~}|[]]>
				  when call 'erlang':'=:='
					(_17,
					 Location) ->
				  %% Line 2814
				  {'var',Anno,Name}
			      %% Line 2815
			      <_18> when 'true' ->
				  %% Line 2816
				  Var
			    end
			-| ['compiler_generated'] )
		      ( <_16> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7})
		  -| [{'function_name',{'undo_no_shadows1',2}}] )
	    -| ['compiler_generated'] )
	end
'make_lcid'/2 =
    %% Line 2822
    fun (_0,_1) ->
	case <_0,_1> of
	  <Anno,No>
	      when let <_2> =
		    call 'erlang':'is_integer'
			(No)
		in  let <_3> =
			call 'erlang':'>'
			    (No, 0)
		    in  call 'erlang':'and'
			    (_2, _3) ->
	      let <_4> =
		  call %% Line 2823
		       'erl_anno':%% Line 2823
				  'line'
		      (%% Line 2823
		       Anno)
	      in  %% Line 2823
		  {No,_4}
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'make_lcid',2}}] )
	    -| ['compiler_generated'] )
	end
'get_lcid_no'/1 =
    %% Line 2825
    fun (_0) ->
	case _0 of
	  <{No,_X_Line}> when 'true' ->
	      %% Line 2826
	      No
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'get_lcid_no',1}}] )
	    -| ['compiler_generated'] )
	end
'get_lcid_line'/1 =
    %% Line 2828
    fun (_0) ->
	case _0 of
	  <{_X_No,Line}> when 'true' ->
	      %% Line 2829
	      Line
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'get_lcid_line',1}}] )
	    -| ['compiler_generated'] )
	end
'qid'/2 =
    %% Line 2831
    fun (_0,_1) ->
	%% Line 2832
	{'qid',_0,_1}
'abst_vars'/2 =
    %% Line 2834
    fun (_0,_1) ->
	case <_0,_1> of
	  <[V|Vs],L> when 'true' ->
	      let <_2> =
		  apply %% Line 2835
			'abst_vars'/2
		      (%% Line 2835
		       V, %% Line 2835
			  L)
	      in  let <_3> =
		      apply %% Line 2835
			    'abst_vars'/2
			  (%% Line 2835
			   Vs, %% Line 2835
			       L)
		  in  %% Line 2835
		      [_2|_3]
	  %% Line 2836
	  <[],_X_L> when 'true' ->
	      %% Line 2837
	      []
	  %% Line 2838
	  <'nil',L> when 'true' ->
	      %% Line 2839
	      {'nil',L}
	  %% Line 2840
	  <V,L> when 'true' ->
	      %% Line 2841
	      {'var',L,V}
	end
'embed_vars'/2 =
    %% Line 2843
    fun (_0,_1) ->
	%% Line 2844
	apply 'embed_expr'/2
	    ({'tuple',_1,_0}, _1)
'embed_expr'/2 =
    %% Line 2847
    fun (_0,_1) ->
	%% Line 2848
	{'lc',_1,_0,[{'generate',_1,{'var',_1,'_'},{'nil',_1}}|[]]}
'var2const'/1 =
    %% Line 2851
    fun (_0) ->
	let <_3> =
	    fun (_1) ->
		%% Line 2852
		case _1 of
		  <{'var',L,V}> when 'true' ->
		      {'atom',L,V}
		  ( <_2> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_2})
			  -| [{'function_name',{'-var2const/1-fun-0-',1}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 2852
	    apply 'var_map'/2
		(_3, _0)
'var_map'/2 =
    %% Line 2854
    fun (_0,_1) ->
	case <_0,_1> of
	  <F,V = {'var',_10,_11}> when 'true' ->
	      %% Line 2855
	      apply F
		  (V)
	  %% Line 2856
	  <F,{'named_fun',NLoc,NName,Cs}> when 'true' ->
	      %% Line 2857
	      case apply F
		       ({'var',NLoc,NName}) of
		<{'var',Loc,Name}> when 'true' ->
		    let <_3> =
			apply %% Line 2858
			      'var_map'/2
			    (%% Line 2858
			     F, %% Line 2858
				Cs)
		    in  %% Line 2858
			{'named_fun',Loc,Name,_3}
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2859
	  <F,T>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_4> =
		  call %% Line 2860
		       'erlang':%% Line 2860
				'tuple_to_list'
		      (%% Line 2860
		       T)
	      in  let <_5> =
		      apply %% Line 2860
			    'var_map'/2
			  (%% Line 2860
			   F, _4)
		  in  %% Line 2860
		      call 'erlang':'list_to_tuple'
			  (_5)
	  %% Line 2861
	  <F,[E|Es]> when 'true' ->
	      let <_6> =
		  apply %% Line 2862
			'var_map'/2
		      (%% Line 2862
		       F, %% Line 2862
			  E)
	      in  let <_7> =
		      apply %% Line 2862
			    'var_map'/2
			  (%% Line 2862
			   F, %% Line 2862
			      Es)
		  in  %% Line 2862
		      [_6|_7]
	  %% Line 2863
	  <_X_F,E> when 'true' ->
	      %% Line 2864
	      E
	end
'var_mapfold'/3 =
    %% Line 2866
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <F,A,V = {'var',_11,_12}> when 'true' ->
	      %% Line 2867
	      apply F
		  (V, A)
	  %% Line 2868
	  <F,A0,T>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_3> =
		  call %% Line 2869
		       'erlang':%% Line 2869
				'tuple_to_list'
		      (%% Line 2869
		       T)
	      in  %% Line 2869
		  case apply 'var_mapfold'/3
			   (F, A0, _3) of
		    <{L,A}> when 'true' ->
			let <_5> =
			    call %% Line 2870
				 'erlang':%% Line 2870
					  'list_to_tuple'
				(%% Line 2870
				 L)
			in  %% Line 2870
			    {_5,A}
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2871
	  <F,A0,[E0|Es0]> when 'true' ->
	      %% Line 2872
	      case apply 'var_mapfold'/3
		       (F, A0, E0) of
		<{E,A1}> when 'true' ->
		    %% Line 2873
		    case apply 'var_mapfold'/3
			     (F, A1, Es0) of
		      <{Es,A}> when 'true' ->
			  %% Line 2874
			  {[E|Es],A}
		      ( <_7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_7})
			-| ['compiler_generated'] )
		    end
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2875
	  <_X_F,A,E> when 'true' ->
	      %% Line 2876
	      {E,A}
	end
'map_anno'/2 =
    %% Line 2878
    fun (_0,_1) ->
	case <_0,_1> of
	  <F,AbstrList>
	      when call 'erlang':'is_list'
		    (AbstrList) ->
	      %% Line 2879
	      ( letrec
		    'lc$^0'/1 =
			fun (_4) ->
			    case _4 of
			      <[Abstr|_3]> when 'true' ->
				  let <_5> =
				      apply 'map_anno1'/2
					  (F, Abstr)
				  in  let <_6> =
					  apply 'lc$^0'/1
					      (_3)
				      in  ( [_5|_6]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_9> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_9})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(AbstrList)
		-| ['list_comprehension'] )
	  %% Line 2880
	  <F,Abstr> when 'true' ->
	      %% Line 2881
	      apply 'map_anno1'/2
		  (F, Abstr)
	end
'map_anno1'/2 =
    %% Line 2883
    fun (_0,_1) ->
	%% Line 2884
	call 'erl_parse':'map_anno'
	    (_0, _1)
'family_list'/1 =
    %% Line 2886
    fun (_0) ->
	let <_1> =
	    apply %% Line 2887
		  'family'/1
		(_0)
	in  %% Line 2887
	    call 'sofs':'to_external'
		(_1)
'family'/1 =
    %% Line 2889
    fun (_0) ->
	let <_1> =
	    call %% Line 2890
		 'sofs':%% Line 2890
			'relation'
		(_0)
	in  %% Line 2890
	    call 'sofs':'relation_to_family'
		(_1)
'is_guard_test'/2 =
    %% Line 2892
    fun (_0,_1) ->
	case <_0,_1> of
	  <E,{'state',_4,IsOverridden,_5,RDs,_6,_7,_8}> when 'true' ->
	      %% Line 2893
	      call 'erl_lint':'is_guard_test'
		  (E, RDs, IsOverridden)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'is_guard_test',2}}] )
	    -| ['compiler_generated'] )
	end
'set_up_overridden'/1 =
    %% Line 2903
    fun (_0) ->
	let <_5> =
	    letrec
		'lc$^0'/1 =
		    %% Line 2904
		    fun (_3) ->
			case _3 of
			  <[{'function',_26,Name,Arity,_27}|_2]> when 'true' ->
			      let <_4> =
				  apply 'lc$^0'/1
				      (_2)
			      in  ( [{Name,Arity}|_4]
				    -| ['compiler_generated'] )
			  ( <[_1|_2]> when 'true' ->
				apply 'lc$^0'/1
				    (_2)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_30> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_30})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 2904
		apply 'lc$^0'/1
		    (_0)
	in  let <_11> =
		letrec
		    'lc$^1'/1 =
			%% Line 2905
			fun (_9) ->
			    case _9 of
			      <[{'attribute',_28,'import',Fs}|_8]> when 'true' ->
				  let <_10> =
				      apply 'lc$^1'/1
					  (_8)
				  in  ( [Fs|_10]
					-| ['compiler_generated'] )
			      ( <[_7|_8]> when 'true' ->
				    apply 'lc$^1'/1
					(_8)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_31> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_31})
				      -| [{'function_name',{'lc$^1',1}}] )
				-| ['compiler_generated'] )
			    end
		in  %% Line 2905
		    apply 'lc$^1'/1
			(_0)
	    in  let <Imports1> =
		    call %% Line 2906
			 'lists':%% Line 2906
				 'flatten'
			(_11)
		in  let <_18> =
			letrec
			    'lc$^2'/1 =
				%% Line 2907
				fun (_16) ->
				    case _16 of
				      <[{_29,Fs}|_15]> when 'true' ->
					  let <_17> =
					      apply 'lc$^2'/1
						  (_15)
					  in  ( [Fs|_17]
						-| ['compiler_generated'] )
				      ( <[_14|_15]> when 'true' ->
					    apply 'lc$^2'/1
						(_15)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_32> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_32})
					      -| [{'function_name',{'lc$^2',1}}] )
					-| ['compiler_generated'] )
				    end
			in  %% Line 2907
			    apply 'lc$^2'/1
				(Imports1)
		    in  let <Imports> =
			    call %% Line 2908
				 'lists':%% Line 2908
					 'flatten'
				(_18)
			in  let <_21> =
				call %% Line 2909
				     'erlang':%% Line 2909
					      '++'
				    (%% Line 2909
				     Imports, _5)
			    in  let <Overridden> =
				    call %% Line 2909
					 'gb_sets':%% Line 2909
						   'from_list'
					(_21)
				in  %% Line 2910
				    ( fun (_23) ->
					  call 'gb_sets':'is_element'
					      (_23, Overridden)
				      -| [{'id',{0,0,'-set_up_overridden/1-fun-3-'}}] )
'display_forms'/1 =
    %% Line 2920
    fun (_0) ->
	%% Line 2921
	'ok'
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('qlc_pt')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('qlc_pt', _0)
end