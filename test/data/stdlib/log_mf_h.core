module 'log_mf_h' ['code_change'/3,
		   'handle_call'/2,
		   'handle_event'/2,
		   'handle_info'/2,
		   'init'/1,
		   'init'/3,
		   'init'/4,
		   'module_info'/0,
		   'module_info'/1,
		   'terminate'/2]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[108|[111|[103|[95|[109|[102|[95|[104|[46|[101|[114|[108]]]]]]]]]]]]]]]],1}],
		%% Line 22
		'behaviour' =
		    %% Line 22
		    ['gen_event'],
		%% Line 29
		'export_type' =
		    %% Line 29
		    [{'args',0}],
		%% Line 33
		'type' =
		    %% Line 33
		    [{'b',{'type',33,'non_neg_integer',[]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{'f',{'type',34,'range',[{'integer',34,1}|[{'integer',34,255}]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{'pred',{'type',35,'fun',[{'type',35,'product',[{'type',35,'term',[]}]}|[{'type',35,'boolean',[]}]]},[]}],
		%% Line 39
		'record' =
		    %% Line 39
		    [{'state',[{'typed_record_field',{'record_field',39,{'atom',39,'dir'}},{'remote_type',39,[{'atom',39,'file'}|[{'atom',39,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'maxB'}},{'user_type',40,'b',[]}}|[{'typed_record_field',{'record_field',41,{'atom',41,'maxF'}},{'user_type',41,'f',[]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'curB'}},{'user_type',42,'b',[]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'curF'}},{'user_type',43,'f',[]}}|[{'typed_record_field',{'record_field',44,{'atom',44,'cur_fd'}},{'remote_type',44,[{'atom',44,'file'}|[{'atom',44,'fd'}|[[]]]]}}|[{'record_field',45,{'atom',45,'index'},{'nil',45}}|[{'typed_record_field',{'record_field',46,{'atom',46,'pred'}},{'user_type',46,'pred',[]}}]]]]]]]]}],
		%% Line 72
		'opaque' =
		    %% Line 72
		    [{'args',{'type',72,'tuple',[{'remote_type',72,[{'atom',72,'file'}|[{'atom',72,'filename'}|[[]]]]}|[{'user_type',72,'b',[]}|[{'user_type',72,'f',[]}|[{'user_type',72,'pred',[]}]]]]},[]}],
		%% Line 75
		'spec' =
		    %% Line 75
		    [{{'init',3},[{'type',75,'bounded_fun',[{'type',75,'fun',[{'type',75,'product',[{'var',75,'Dir'}|[{'var',75,'MaxBytes'}|[{'var',75,'MaxFiles'}]]]}|[{'var',75,'Args'}]]}|[[{'type',76,'constraint',[{'atom',76,'is_subtype'}|[[{'var',76,'Dir'}|[{'remote_type',76,[{'atom',76,'file'}|[{'atom',76,'filename'}|[[]]]]}]]]]}|[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'MaxBytes'}|[{'type',77,'non_neg_integer',[]}]]]]}|[{'type',78,'constraint',[{'atom',78,'is_subtype'}|[[{'var',78,'MaxFiles'}|[{'type',78,'range',[{'integer',78,1}|[{'integer',78,255}]]}]]]]}|[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'Args'}|[{'user_type',79,'args',[]}]]]]}]]]]]]}]}],
		%% Line 83
		'spec' =
		    %% Line 83
		    [{{'init',4},[{'type',83,'bounded_fun',[{'type',83,'fun',[{'type',83,'product',[{'var',83,'Dir'}|[{'var',83,'MaxBytes'}|[{'var',83,'MaxFiles'}|[{'var',83,'Pred'}]]]]}|[{'var',83,'Args'}]]}|[[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'Dir'}|[{'remote_type',84,[{'atom',84,'file'}|[{'atom',84,'filename'}|[[]]]]}]]]]}|[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'MaxBytes'}|[{'type',85,'non_neg_integer',[]}]]]]}|[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'MaxFiles'}|[{'type',86,'range',[{'integer',86,1}|[{'integer',86,255}]]}]]]]}|[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'Pred'}|[{'type',87,'fun',[{'type',87,'product',[{'ann_type',87,[{'var',87,'Event'}|[{'type',87,'term',[]}]]}]}|[{'type',87,'boolean',[]}]]}]]]]}|[{'type',88,'constraint',[{'atom',88,'is_subtype'}|[[{'var',88,'Args'}|[{'user_type',88,'args',[]}]]]]}]]]]]]]}]}],
		%% Line 96
		'spec' =
		    %% Line 96
		    [{{'init',1},[{'type',96,'fun',[{'type',96,'product',[{'type',96,'tuple',[{'remote_type',96,[{'atom',96,'file'}|[{'atom',96,'filename'}|[[]]]]}|[{'type',96,'non_neg_integer',[]}|[{'user_type',96,'f',[]}|[{'user_type',96,'pred',[]}]]]]}]}|[{'type',96,'union',[{'type',96,'tuple',[{'atom',96,'ok'}|[{'type',96,'record',[{'atom',96,'state'}]}]]}|[{'type',96,'tuple',[{'atom',96,'error'}|[{'type',96,'term',[]}]]}]]}]]}]}],
		%% Line 120
		'spec' =
		    %% Line 120
		    [{{'handle_event',2},[{'type',120,'fun',[{'type',120,'product',[{'type',120,'term',[]}|[{'type',120,'record',[{'atom',120,'state'}]}]]}|[{'type',120,'tuple',[{'atom',120,'ok'}|[{'type',120,'record',[{'atom',120,'state'}]}]]}]]}]}],
		%% Line 150
		'spec' =
		    %% Line 150
		    [{{'handle_info',2},[{'type',150,'fun',[{'type',150,'product',[{'type',150,'term',[]}|[{'type',150,'record',[{'atom',150,'state'}]}]]}|[{'type',150,'tuple',[{'atom',150,'ok'}|[{'type',150,'record',[{'atom',150,'state'}]}]]}]]}]}],
		%% Line 157
		'spec' =
		    %% Line 157
		    [{{'terminate',2},[{'type',157,'fun',[{'type',157,'product',[{'type',157,'term',[]}|[{'type',157,'record',[{'atom',157,'state'}]}]]}|[{'type',157,'record',[{'atom',157,'state'}]}]]}]}],
		%% Line 163
		'spec' =
		    %% Line 163
		    [{{'handle_call',2},[{'type',163,'fun',[{'type',163,'product',[{'atom',163,'null'}|[{'type',163,'record',[{'atom',163,'state'}]}]]}|[{'type',163,'tuple',[{'atom',163,'ok'}|[{'atom',163,'null'}|[{'type',163,'record',[{'atom',163,'state'}]}]]]}]]}]}],
		%% Line 168
		'spec' =
		    %% Line 168
		    [{{'code_change',3},[{'type',168,'fun',[{'type',168,'product',[{'type',168,'term',[]}|[{'type',168,'record',[{'atom',168,'state'}]}|[{'type',168,'term',[]}]]]}|[{'type',168,'tuple',[{'atom',168,'ok'}|[{'type',168,'record',[{'atom',168,'state'}]}]]}]]}]}]]
'init'/3 =
    %% Line 81
    fun (_0,_1,_2) ->
	let <_5> =
	    fun (_3) ->
		'true'
	in  apply 'init'/4
		(_0, _1, _2, _5)
'init'/4 =
    %% Line 90
    fun (_0,_1,_2,_3) ->
	{_0,_1,_2,_3}
'init'/1 =
    %% Line 98
    fun (_0) ->
	case _0 of
	  <{Dir,MaxB,MaxF,Pred}>
	      when try
		    let <_1> =
			call 'erlang':'is_integer'
			    (MaxF)
		    in  let <_2> =
			    call 'erlang':'>'
				(MaxF, 0)
			in  let <_3> =
				call 'erlang':'<'
				    (MaxF, 256)
			    in  let <_4> =
				    call 'erlang':'and'
					(_2, _3)
				in  call 'erlang':'and'
					(_1, _4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_6> =
		  case %% Line 100
		       apply 'read_index_file'/1
			   (Dir) of
		    %% Line 101
		    <{'ok',LastWritten}> when 'true' ->
			apply 'inc'/2
			    (LastWritten, MaxF)
		    %% Line 102
		    <_11> when 'true' ->
			1
		  end
	      in  let <_8> =
		      catch
			  %% Line 104
			  apply 'file_open'/2
			      (Dir, _6)
		  in  %% Line 104
		      case _8 of
			%% Line 105
			<{'ok',Fd}> when 'true' ->
			    %% Line 106
			    {'ok',{'state',Dir,MaxB,MaxF,%% Line 107
							 0,_6,%% Line 107
							      Fd,[],Pred}}
			%% Line 108
			<Error> when 'true' ->
			    Error
		      end
	  ( <_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_event'/2 =
    %% Line 122
    fun (_0,_1) ->
	%% Line 124
	case _1 of
	  <{'state',Dir,MaxB,MaxF,CurB,CurF,CurFd,_31,Pred}> when 'true' ->
	      let <_3> =
		  catch
		      %% Line 125
		      apply Pred
			  (_0)
	      in  %% Line 125
		  case _3 of
		    %% Line 126
		    <'true'> when 'true' ->
			let <_4> =
			    apply %% Line 127
				  'tag_event'/1
				(_0)
			in  let <Bin> =
				call %% Line 127
				     'erlang':%% Line 127
					      'term_to_binary'
				    (_4)
			    in  let <Size> =
				    call %% Line 128
					 'erlang':%% Line 128
						  'byte_size'
					(%% Line 128
					 Bin)
				in  let <_15> =
					case <> of
					  %% Line 131
					  <>
					      when try
						    let <_7> =
							call 'erlang':'+'
							    (CurB, Size)
						    in  call 'erlang':'<'
							    (_7, MaxB)
						of <Try> ->
						    Try
						catch <T,R> ->
						    'false' ->
					      _1
					  %% Line 132
					  <> when 'true' ->
					      %% Line 133
					      case call 'file':'close'
						       (CurFd) of
						<'ok'> when 'true' ->
						    let <NewF> =
							apply %% Line 134
							      'inc'/2
							    (%% Line 134
							     CurF, %% Line 134
								   MaxF)
						    in  %% Line 135
							case apply 'file_open'/2
								 (Dir, NewF) of
							  <{'ok',NewFd}> when 'true' ->
							      %% Line 136
							      case _1 of
								<{'state',_32,_33,_34,_35,_36,_37,_38,_39}> when 'true' ->
								    let <_12> =
									call 'erlang':'setelement'
									    (7, _1, NewFd)
								    in  let <_13> =
									    call 'erlang':'setelement'
										(6, _12, NewF)
									in  call 'erlang':'setelement'
										(5, _13, 0)
								( <_40> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','state'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							  ( <_10> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_10})
							    -| ['compiler_generated'] )
							end
						( <_8> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_8})
						  -| ['compiler_generated'] )
					      end
					end
				    in  %% Line 138
					case apply 'put_int16'/1
						 (Size) of
					  <[Hi|[Lo|[]]]> when 'true' ->
					      %% Line 139
					      ( case _15 of
						  ( <( {'state',_41,_42,_43,_44,_45,_rec1,_46,_47}
						       -| ['compiler_generated'] )> when 'true' ->
							do  case call 'file':'write'
								     (_rec1, [Hi|[Lo|[Bin|[]]]]) of
							      %% Line 140
							      <'ok'> when 'true' ->
								  'ok'
							      %% Line 142
							      <{'error',Reason}> when 'true' ->
								  %% Line 143
								  call 'erlang':'exit'
								      ({'file_exit',Reason})
							      ( <_20> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_20})
								-| ['compiler_generated'] )
							    end
							    %% Line 145
							    ( case _15 of
								( <( {'state',_49,_50,_51,_rec4,_52,_53,_54,_55}
								     -| ['compiler_generated'] )> when 'true' ->
								      let <_23> =
									  call 'erlang':'+'
									      (_rec4, Size)
								      in  let <_rec2> =
									      call 'erlang':'+'
										  (_23, 2)
									  in  case _15 of
										<{'state',_57,_58,_59,_60,_61,_62,_63,_64}> when 'true' ->
										    let <_27> =
											call 'erlang':'setelement'
											    (5, _15, _rec2)
										    in  {'ok',_27}
										( <_65> when 'true' ->
										      ( call ( 'erlang'
											       -| ['compiler_generated'] ):( 'error'
															     -| ['compiler_generated'] )
											    (( {'badrecord','state'}
											       -| ['compiler_generated'] ))
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									      end
								  -| ['compiler_generated'] )
								( <_56> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','state'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <_48> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','state'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  ( <_17> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_17})
					    -| ['compiler_generated'] )
					end
		    %% Line 146
		    <_66> when 'true' ->
			%% Line 147
			{'ok',_1}
		  end
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_2})
	    -| ['compiler_generated'] )
	end
'handle_info'/2 =
    %% Line 152
    fun (_0,_1) ->
	case <_0,_1> of
	  <_@r0 = {'emulator',GL,Chars},State> when 'true' ->
	      %% Line 153
	      apply 'handle_event'/2
		  (_@r0, State)
	  %% Line 154
	  <_4,State> when 'true' ->
	      %% Line 155
	      {'ok',State}
	end
'terminate'/2 =
    %% Line 159
    fun (_0,_1) ->
	%% Line 160
	( case _1 of
	    ( <( {'state',_8,_9,_10,_11,_12,_rec5,_13,_14}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'file':'close'
			   (_rec5) of
		    <'ok'> when 'true' ->
			_1
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_15> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'handle_call'/2 =
    %% Line 165
    fun (_0,_1) ->
	case <_0,_1> of
	  <'null',State> when 'true' ->
	      %% Line 166
	      {'ok','null',State}
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'handle_call',2}}] )
	    -| ['compiler_generated'] )
	end
'code_change'/3 =
    %% Line 170
    fun (_0,_1,_2) ->
	%% Line 171
	{'ok',_1}
'file_open'/2 =
    %% Line 177
    fun (_0,_1) ->
	let <_2> =
	    call %% Line 178
		 'erlang':%% Line 178
			  'integer_to_list'
		(_1)
	in  let <_3> =
		call %% Line 178
		     'erlang':%% Line 178
			      '++'
		    (_0, %% Line 178
			 [47|_2])
	    in  %% Line 178
		case call 'file':'open'
			 (_3, ['raw'|['write']]) of
		  %% Line 179
		  <_@r0 = {'ok',Fd}> when 'true' ->
		      do  %% Line 180
			  apply 'write_index_file'/2
			      (_0, _1)
			  %% Line 181
			  _@r0
		  %% Line 182
		  <_7> when 'true' ->
		      %% Line 183
		      call 'erlang':'exit'
			  ('file_open')
		end
'put_int16'/1 =
    %% Line 186
    fun (_0) ->
	let <_1> =
	    call %% Line 187
		 'erlang':%% Line 187
			  'band'
		(_0, %% Line 187
		     65280)
	in  let <_2> =
		call %% Line 187
		     'erlang':%% Line 187
			      'bsr'
		    (_1, %% Line 187
			 8)
	    in  let <_3> =
		    call %% Line 187
			 'erlang':%% Line 187
				  'band'
			(_0, %% Line 187
			     255)
		in  %% Line 187
		    [_2|[_3|[]]]
'tag_event'/1 =
    %% Line 189
    fun (_0) ->
	let <_1> =
	    call %% Line 190
		 'erlang':%% Line 190
			  'localtime'
		()
	in  %% Line 190
	    {_1,_0}
'read_index_file'/1 =
    %% Line 192
    fun (_0) ->
	let <_1> =
	    call %% Line 193
		 'erlang':%% Line 193
			  '++'
		(_0, %% Line 193
		     [47|[105|[110|[100|[101|[120]]]]]])
	in  %% Line 193
	    case call 'file':'open'
		     (_1, ['raw'|['read']]) of
	      %% Line 194
	      <{'ok',Fd}> when 'true' ->
		  let <_2> =
		      catch
			  %% Line 195
			  call 'file':'read'
			      (Fd, 1)
		  in  let <_4> =
			  case _2 of
			    %% Line 196
			    <{'ok',[Index|[]]}> when 'true' ->
				{'ok',Index}
			    %% Line 197
			    <_9> when 'true' ->
				'error'
			  end
		      in  %% Line 199
			  case call 'file':'close'
				   (Fd) of
			    <'ok'> when 'true' ->
				_4
			    ( <_6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_6})
			      -| ['compiler_generated'] )
			  end
	      %% Line 201
	      <_10> when 'true' ->
		  'error'
	    end
'write_index_file'/2 =
    %% Line 211
    fun (_0,_1) ->
	let <File> =
	    call %% Line 212
		 'erlang':%% Line 212
			  '++'
		(_0, %% Line 212
		     [47|[105|[110|[100|[101|[120]]]]]])
	in  let <TmpFile> =
		call %% Line 213
		     'erlang':%% Line 213
			      '++'
		    (%% Line 213
		     File, %% Line 213
			   [46|[116|[109|[112]]]])
	    in  %% Line 214
		case call 'file':'open'
			 (TmpFile, ['raw'|['write']]) of
		  %% Line 215
		  <{'ok',Fd}> when 'true' ->
		      %% Line 216
		      case call 'file':'write'
			       (Fd, [_1|[]]) of
			<'ok'> when 'true' ->
			    %% Line 217
			    case call 'file':'close'
				     (Fd) of
			      <'ok'> when 'true' ->
				  %% Line 218
				  case call 'file':'rename'
					   (TmpFile, File) of
				    <'ok'> when 'true' ->
					%% Line 219
					'ok'
				    ( <_6> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_6})
				      -| ['compiler_generated'] )
				  end
			      ( <_5> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_5})
				-| ['compiler_generated'] )
			    end
			( <_4> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_4})
			  -| ['compiler_generated'] )
		      end
		  %% Line 220
		  <_10> when 'true' ->
		      call 'erlang':'exit'
			  ('write_index_file')
		end
'inc'/2 =
    %% Line 223
    fun (_0,_1) ->
	%% Line 224
	case <> of
	  %% Line 225
	  <>
	      when call 'erlang':'<'
		    (_0,
		     _1) ->
	      call 'erlang':'+'
		  (_0, 1)
	  %% Line 226
	  <> when 'true' ->
	      1
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('log_mf_h')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('log_mf_h', _0)
end