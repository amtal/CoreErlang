module 'ordsets' ['add_element'/2,
		  'del_element'/2,
		  'filter'/2,
		  'fold'/3,
		  'from_list'/1,
		  'intersection'/1,
		  'intersection'/2,
		  'is_disjoint'/2,
		  'is_element'/2,
		  'is_empty'/1,
		  'is_set'/1,
		  'is_subset'/2,
		  'module_info'/0,
		  'module_info'/1,
		  'new'/0,
		  'size'/1,
		  'subtract'/2,
		  'to_list'/1,
		  'union'/1,
		  'union'/2]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[111|[114|[100|[115|[101|[116|[115|[46|[101|[114|[108]]]]]]]]]]]]]]],1}],
		%% Line 29
		'export_type' =
		    %% Line 29
		    [{'ordset',1}],
		%% Line 31
		'type' =
		    %% Line 31
		    [{'ordset',{'type',31,'list',[{'var',31,'T'}]},[{'var',31,'T'}]}],
		%% Line 36
		'spec' =
		    %% Line 36
		    [{{'new',0},[{'type',36,'fun',[{'type',36,'product',[]}|[{'type',36,'nil',[]}]]}]}],
		%% Line 43
		'spec' =
		    %% Line 43
		    [{{'is_set',1},[{'type',43,'bounded_fun',[{'type',43,'fun',[{'type',43,'product',[{'var',43,'Ordset'}]}|[{'type',43,'boolean',[]}]]}|[[{'type',44,'constraint',[{'atom',44,'is_subtype'}|[[{'var',44,'Ordset'}|[{'type',44,'term',[]}]]]]}]]]}]}],
		%% Line 58
		'spec' =
		    %% Line 58
		    [{{'size',1},[{'type',58,'bounded_fun',[{'type',58,'fun',[{'type',58,'product',[{'var',58,'Ordset'}]}|[{'type',58,'non_neg_integer',[]}]]}|[[{'type',59,'constraint',[{'atom',59,'is_subtype'}|[[{'var',59,'Ordset'}|[{'user_type',59,'ordset',[{'var',59,'_'}]}]]]]}]]]}]}],
		%% Line 65
		'spec' =
		    %% Line 65
		    [{{'is_empty',1},[{'type',65,'bounded_fun',[{'type',65,'fun',[{'type',65,'product',[{'var',65,'Ordset'}]}|[{'type',65,'boolean',[]}]]}|[[{'type',66,'constraint',[{'atom',66,'is_subtype'}|[[{'var',66,'Ordset'}|[{'user_type',66,'ordset',[{'var',66,'_'}]}]]]]}]]]}]}],
		%% Line 73
		'spec' =
		    %% Line 73
		    [{{'to_list',1},[{'type',73,'bounded_fun',[{'type',73,'fun',[{'type',73,'product',[{'var',73,'Ordset'}]}|[{'var',73,'List'}]]}|[[{'type',74,'constraint',[{'atom',74,'is_subtype'}|[[{'var',74,'Ordset'}|[{'user_type',74,'ordset',[{'var',74,'T'}]}]]]]}|[{'type',75,'constraint',[{'atom',75,'is_subtype'}|[[{'var',75,'List'}|[{'type',75,'list',[{'var',75,'T'}]}]]]]}]]]]}]}],
		%% Line 82
		'spec' =
		    %% Line 82
		    [{{'from_list',1},[{'type',82,'bounded_fun',[{'type',82,'fun',[{'type',82,'product',[{'var',82,'List'}]}|[{'var',82,'Ordset'}]]}|[[{'type',83,'constraint',[{'atom',83,'is_subtype'}|[[{'var',83,'List'}|[{'type',83,'list',[{'var',83,'T'}]}]]]]}|[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'Ordset'}|[{'user_type',84,'ordset',[{'var',84,'T'}]}]]]]}]]]]}]}],
		%% Line 92
		'spec' =
		    %% Line 92
		    [{{'is_element',2},[{'type',92,'bounded_fun',[{'type',92,'fun',[{'type',92,'product',[{'var',92,'Element'}|[{'var',92,'Ordset'}]]}|[{'type',92,'boolean',[]}]]}|[[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'Element'}|[{'type',93,'term',[]}]]]]}|[{'type',94,'constraint',[{'atom',94,'is_subtype'}|[[{'var',94,'Ordset'}|[{'user_type',94,'ordset',[{'var',94,'_'}]}]]]]}]]]]}]}],
		%% Line 104
		'spec' =
		    %% Line 104
		    [{{'add_element',2},[{'type',104,'bounded_fun',[{'type',104,'fun',[{'type',104,'product',[{'var',104,'Element'}|[{'var',104,'Ordset1'}]]}|[{'var',104,'Ordset2'}]]}|[[{'type',105,'constraint',[{'atom',105,'is_subtype'}|[[{'var',105,'Element'}|[{'var',105,'E'}]]]]}|[{'type',106,'constraint',[{'atom',106,'is_subtype'}|[[{'var',106,'Ordset1'}|[{'user_type',106,'ordset',[{'var',106,'T'}]}]]]]}|[{'type',107,'constraint',[{'atom',107,'is_subtype'}|[[{'var',107,'Ordset2'}|[{'user_type',107,'ordset',[{'type',107,'union',[{'var',107,'T'}|[{'var',107,'E'}]]}]}]]]]}]]]]]}]}],
		%% Line 119
		'spec' =
		    %% Line 119
		    [{{'del_element',2},[{'type',119,'bounded_fun',[{'type',119,'fun',[{'type',119,'product',[{'var',119,'Element'}|[{'var',119,'Ordset1'}]]}|[{'var',119,'Ordset2'}]]}|[[{'type',120,'constraint',[{'atom',120,'is_subtype'}|[[{'var',120,'Element'}|[{'type',120,'term',[]}]]]]}|[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'Ordset1'}|[{'user_type',121,'ordset',[{'var',121,'T'}]}]]]]}|[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'Ordset2'}|[{'user_type',122,'ordset',[{'var',122,'T'}]}]]]]}]]]]]}]}],
		%% Line 132
		'spec' =
		    %% Line 132
		    [{{'union',2},[{'type',132,'bounded_fun',[{'type',132,'fun',[{'type',132,'product',[{'var',132,'Ordset1'}|[{'var',132,'Ordset2'}]]}|[{'var',132,'Ordset3'}]]}|[[{'type',133,'constraint',[{'atom',133,'is_subtype'}|[[{'var',133,'Ordset1'}|[{'user_type',133,'ordset',[{'var',133,'T1'}]}]]]]}|[{'type',134,'constraint',[{'atom',134,'is_subtype'}|[[{'var',134,'Ordset2'}|[{'user_type',134,'ordset',[{'var',134,'T2'}]}]]]]}|[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'Ordset3'}|[{'user_type',135,'ordset',[{'type',135,'union',[{'var',135,'T1'}|[{'var',135,'T2'}]]}]}]]]]}]]]]]}]}],
		%% Line 149
		'spec' =
		    %% Line 149
		    [{{'union',1},[{'type',149,'bounded_fun',[{'type',149,'fun',[{'type',149,'product',[{'var',149,'OrdsetList'}]}|[{'var',149,'Ordset'}]]}|[[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'OrdsetList'}|[{'type',150,'list',[{'user_type',150,'ordset',[{'var',150,'T'}]}]}]]]]}|[{'type',151,'constraint',[{'atom',151,'is_subtype'}|[[{'var',151,'Ordset'}|[{'user_type',151,'ordset',[{'var',151,'T'}]}]]]]}]]]]}]}],
		%% Line 159
		'spec' =
		    %% Line 159
		    [{{'intersection',2},[{'type',159,'bounded_fun',[{'type',159,'fun',[{'type',159,'product',[{'var',159,'Ordset1'}|[{'var',159,'Ordset2'}]]}|[{'var',159,'Ordset3'}]]}|[[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'Ordset1'}|[{'user_type',160,'ordset',[{'var',160,'_'}]}]]]]}|[{'type',161,'constraint',[{'atom',161,'is_subtype'}|[[{'var',161,'Ordset2'}|[{'user_type',161,'ordset',[{'var',161,'_'}]}]]]]}|[{'type',162,'constraint',[{'atom',162,'is_subtype'}|[[{'var',162,'Ordset3'}|[{'user_type',162,'ordset',[{'var',162,'_'}]}]]]]}]]]]]}]}],
		%% Line 178
		'spec' =
		    %% Line 178
		    [{{'intersection',1},[{'type',178,'bounded_fun',[{'type',178,'fun',[{'type',178,'product',[{'var',178,'OrdsetList'}]}|[{'var',178,'Ordset'}]]}|[[{'type',179,'constraint',[{'atom',179,'is_subtype'}|[[{'var',179,'OrdsetList'}|[{'type',179,'nonempty_list',[{'user_type',179,'ordset',[{'var',179,'_'}]}]}]]]]}|[{'type',180,'constraint',[{'atom',180,'is_subtype'}|[[{'var',180,'Ordset'}|[{'user_type',180,'ordset',[{'var',180,'_'}]}]]]]}]]]]}]}],
		%% Line 193
		'spec' =
		    %% Line 193
		    [{{'is_disjoint',2},[{'type',193,'bounded_fun',[{'type',193,'fun',[{'type',193,'product',[{'var',193,'Ordset1'}|[{'var',193,'Ordset2'}]]}|[{'type',193,'boolean',[]}]]}|[[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'Ordset1'}|[{'user_type',194,'ordset',[{'var',194,'_'}]}]]]]}|[{'type',195,'constraint',[{'atom',195,'is_subtype'}|[[{'var',195,'Ordset2'}|[{'user_type',195,'ordset',[{'var',195,'_'}]}]]]]}]]]]}]}],
		%% Line 212
		'spec' =
		    %% Line 212
		    [{{'subtract',2},[{'type',212,'bounded_fun',[{'type',212,'fun',[{'type',212,'product',[{'var',212,'Ordset1'}|[{'var',212,'Ordset2'}]]}|[{'var',212,'Ordset3'}]]}|[[{'type',213,'constraint',[{'atom',213,'is_subtype'}|[[{'var',213,'Ordset1'}|[{'user_type',213,'ordset',[{'var',213,'_'}]}]]]]}|[{'type',214,'constraint',[{'atom',214,'is_subtype'}|[[{'var',214,'Ordset2'}|[{'user_type',214,'ordset',[{'var',214,'_'}]}]]]]}|[{'type',215,'constraint',[{'atom',215,'is_subtype'}|[[{'var',215,'Ordset3'}|[{'user_type',215,'ordset',[{'var',215,'_'}]}]]]]}]]]]]}]}],
		%% Line 230
		'spec' =
		    %% Line 230
		    [{{'is_subset',2},[{'type',230,'bounded_fun',[{'type',230,'fun',[{'type',230,'product',[{'var',230,'Ordset1'}|[{'var',230,'Ordset2'}]]}|[{'type',230,'boolean',[]}]]}|[[{'type',231,'constraint',[{'atom',231,'is_subtype'}|[[{'var',231,'Ordset1'}|[{'user_type',231,'ordset',[{'var',231,'_'}]}]]]]}|[{'type',232,'constraint',[{'atom',232,'is_subtype'}|[[{'var',232,'Ordset2'}|[{'user_type',232,'ordset',[{'var',232,'_'}]}]]]]}]]]]}]}],
		%% Line 246
		'spec' =
		    %% Line 246
		    [{{'fold',3},[{'type',246,'bounded_fun',[{'type',246,'fun',[{'type',246,'product',[{'var',246,'Function'}|[{'var',246,'Acc0'}|[{'var',246,'Ordset'}]]]}|[{'var',246,'Acc1'}]]}|[[{'type',247,'constraint',[{'atom',247,'is_subtype'}|[[{'var',247,'Function'}|[{'type',247,'fun',[{'type',247,'product',[{'ann_type',247,[{'var',247,'Element'}|[{'var',247,'T'}]]}|[{'ann_type',247,[{'var',247,'AccIn'}|[{'type',247,'term',[]}]]}]]}|[{'ann_type',247,[{'var',247,'AccOut'}|[{'type',247,'term',[]}]]}]]}]]]]}|[{'type',248,'constraint',[{'atom',248,'is_subtype'}|[[{'var',248,'Ordset'}|[{'user_type',248,'ordset',[{'var',248,'T'}]}]]]]}|[{'type',249,'constraint',[{'atom',249,'is_subtype'}|[[{'var',249,'Acc0'}|[{'type',249,'term',[]}]]]]}|[{'type',250,'constraint',[{'atom',250,'is_subtype'}|[[{'var',250,'Acc1'}|[{'type',250,'term',[]}]]]]}]]]]]]}]}],
		%% Line 258
		'spec' =
		    %% Line 258
		    [{{'filter',2},[{'type',258,'bounded_fun',[{'type',258,'fun',[{'type',258,'product',[{'var',258,'Pred'}|[{'var',258,'Ordset1'}]]}|[{'var',258,'Ordset2'}]]}|[[{'type',259,'constraint',[{'atom',259,'is_subtype'}|[[{'var',259,'Pred'}|[{'type',259,'fun',[{'type',259,'product',[{'ann_type',259,[{'var',259,'Element'}|[{'var',259,'T'}]]}]}|[{'type',259,'boolean',[]}]]}]]]]}|[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'Ordset1'}|[{'user_type',260,'ordset',[{'var',260,'T'}]}]]]]}|[{'type',261,'constraint',[{'atom',261,'is_subtype'}|[[{'var',261,'Ordset2'}|[{'user_type',261,'ordset',[{'var',261,'T'}]}]]]]}]]]]]}]}]]
'new'/0 =
    %% Line 38
    fun () ->
	[]
'is_set'/1 =
    %% Line 46
    fun (_0) ->
	case _0 of
	  <[E|Es]> when 'true' ->
	      apply 'is_set'/2
		  (Es, E)
	  %% Line 47
	  <[]> when 'true' ->
	      'true'
	  %% Line 48
	  <_2> when 'true' ->
	      'false'
	end
'is_set'/2 =
    %% Line 50
    fun (_0,_1) ->
	case <_0,_1> of
	  <[E2|Es],E1>
	      when call 'erlang':'<'
		    (E1,
		     E2) ->
	      %% Line 51
	      apply 'is_set'/2
		  (Es, E2)
	  %% Line 52
	  <[_4|_5],_6> when 'true' ->
	      'false'
	  %% Line 53
	  <[],_7> when 'true' ->
	      'true'
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'is_set',2}}] )
	    -| ['compiler_generated'] )
	end
'size'/1 =
    %% Line 61
    fun (_0) ->
	call 'erlang':'length'
	    (_0)
'is_empty'/1 =
    %% Line 68
    fun (_0) ->
	call 'erlang':'=:='
	    (_0, [])
'to_list'/1 =
    %% Line 77
    fun (_0) ->
	_0
'from_list'/1 =
    %% Line 86
    fun (_0) ->
	%% Line 87
	call 'lists':'usort'
	    (_0)
'is_element'/2 =
    %% Line 96
    fun (_0,_1) ->
	case <_0,_1> of
	  <E,[H|Es]>
	      when call 'erlang':'>'
		    (E,
		     H) ->
	      apply 'is_element'/2
		  (E, Es)
	  %% Line 97
	  <E,[H|_4]>
	      when call 'erlang':'<'
		    (E,
		     H) ->
	      'false'
	  %% Line 98
	  <_X_E,[_X_H|_5]> when 'true' ->
	      'true'
	  %% Line 99
	  <_6,[]> when 'true' ->
	      'false'
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'is_element',2}}] )
	    -| ['compiler_generated'] )
	end
'add_element'/2 =
    %% Line 111
    fun (_0,_1) ->
	case <_0,_1> of
	  <E,[H|Es]>
	      when call 'erlang':'>'
		    (E,
		     H) ->
	      let <_2> =
		  apply 'add_element'/2
		      (E, Es)
	      in  [H|_2]
	  %% Line 112
	  <E,Set = [H|_5]>
	      when call 'erlang':'<'
		    (E,
		     H) ->
	      [E|Set]
	  %% Line 113
	  <_X_E,Set = [_X_H|_6]> when 'true' ->
	      Set
	  %% Line 114
	  <E,[]> when 'true' ->
	      [E|[]]
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'add_element',2}}] )
	    -| ['compiler_generated'] )
	end
'del_element'/2 =
    %% Line 124
    fun (_0,_1) ->
	case <_0,_1> of
	  <E,[H|Es]>
	      when call 'erlang':'>'
		    (E,
		     H) ->
	      let <_2> =
		  apply 'del_element'/2
		      (E, Es)
	      in  [H|_2]
	  %% Line 125
	  <E,Set = [H|_5]>
	      when call 'erlang':'<'
		    (E,
		     H) ->
	      Set
	  %% Line 126
	  <_X_E,[_X_H|Es]> when 'true' ->
	      Es
	  %% Line 127
	  <_6,[]> when 'true' ->
	      []
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'del_element',2}}] )
	    -| ['compiler_generated'] )
	end
'union'/2 =
    %% Line 137
    fun (_0,_1) ->
	case <_0,_1> of
	  <[E1|Es1],Set2 = [E2|_7]>
	      when call 'erlang':'<'
		    (E1,
		     E2) ->
	      let <_2> =
		  apply %% Line 138
			'union'/2
		      (%% Line 138
		       Es1, %% Line 138
			    Set2)
	      in  %% Line 138
		  [E1|_2]
	  %% Line 139
	  <Set1 = [E1|_8],[E2|Es2]>
	      when call 'erlang':'>'
		    (E1,
		     E2) ->
	      let <_3> =
		  apply %% Line 140
			'union'/2
		      (%% Line 140
		       Es2, %% Line 140
			    Set1)
	      in  %% Line 140
		  [E2|_3]
	  %% Line 141
	  <[E1|Es1],[_X_E2|Es2]> when 'true' ->
	      let <_4> =
		  apply %% Line 142
			'union'/2
		      (%% Line 142
		       Es1, %% Line 142
			    Es2)
	      in  %% Line 142
		  [E1|_4]
	  %% Line 143
	  <[],Es2> when 'true' ->
	      Es2
	  %% Line 144
	  <Es1,[]> when 'true' ->
	      Es1
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'union',2}}] )
	    -| ['compiler_generated'] )
	end
'union'/1 =
    %% Line 153
    fun (_0) ->
	%% Line 154
	call 'lists':'umerge'
	    (_0)
'intersection'/2 =
    %% Line 164
    fun (_0,_1) ->
	case <_0,_1> of
	  <[E1|Es1],Set2 = [E2|_5]>
	      when call 'erlang':'<'
		    (E1,
		     E2) ->
	      %% Line 165
	      apply 'intersection'/2
		  (Es1, Set2)
	  %% Line 166
	  <Set1 = [E1|_6],[E2|Es2]>
	      when call 'erlang':'>'
		    (E1,
		     E2) ->
	      %% Line 167
	      apply 'intersection'/2
		  (Es2, Set1)
	  %% Line 168
	  <[E1|Es1],[_X_E2|Es2]> when 'true' ->
	      let <_2> =
		  apply %% Line 169
			'intersection'/2
		      (%% Line 169
		       Es1, %% Line 169
			    Es2)
	      in  %% Line 169
		  [E1|_2]
	  %% Line 170
	  <[],_7> when 'true' ->
	      %% Line 171
	      []
	  %% Line 172
	  <_8,[]> when 'true' ->
	      %% Line 173
	      []
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'intersection',2}}] )
	    -| ['compiler_generated'] )
	end
'intersection'/1 =
    %% Line 182
    fun (_0) ->
	case _0 of
	  <[S1|[S2|Ss]]> when 'true' ->
	      let <_1> =
		  apply %% Line 183
			'intersection'/2
		      (%% Line 183
		       S1, %% Line 183
			   S2)
	      in  %% Line 183
		  apply 'intersection1'/2
		      (_1, Ss)
	  %% Line 184
	  <[S|[]]> when 'true' ->
	      S
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'intersection',1}}] )
	    -| ['compiler_generated'] )
	end
'intersection1'/2 =
    %% Line 186
    fun (_0,_1) ->
	case <_0,_1> of
	  <S1,[S2|Ss]> when 'true' ->
	      let <_2> =
		  apply %% Line 187
			'intersection'/2
		      (%% Line 187
		       S1, %% Line 187
			   S2)
	      in  %% Line 187
		  apply 'intersection1'/2
		      (_2, Ss)
	  %% Line 188
	  <S1,[]> when 'true' ->
	      S1
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'intersection1',2}}] )
	    -| ['compiler_generated'] )
	end
'is_disjoint'/2 =
    %% Line 197
    fun (_0,_1) ->
	case <_0,_1> of
	  <[E1|Es1],Set2 = [E2|_4]>
	      when call 'erlang':'<'
		    (E1,
		     E2) ->
	      %% Line 198
	      apply 'is_disjoint'/2
		  (Es1, Set2)
	  %% Line 199
	  <Set1 = [E1|_5],[E2|Es2]>
	      when call 'erlang':'>'
		    (E1,
		     E2) ->
	      %% Line 200
	      apply 'is_disjoint'/2
		  (Es2, Set1)
	  %% Line 201
	  <[_X_E1|_X_Es1],[_X_E2|_X_Es2]> when 'true' ->
	      %% Line 202
	      'false'
	  %% Line 203
	  <[],_6> when 'true' ->
	      %% Line 204
	      'true'
	  %% Line 205
	  <_7,[]> when 'true' ->
	      %% Line 206
	      'true'
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'is_disjoint',2}}] )
	    -| ['compiler_generated'] )
	end
'subtract'/2 =
    %% Line 217
    fun (_0,_1) ->
	case <_0,_1> of
	  <[E1|Es1],Set2 = [E2|_5]>
	      when call 'erlang':'<'
		    (E1,
		     E2) ->
	      let <_2> =
		  apply %% Line 218
			'subtract'/2
		      (%% Line 218
		       Es1, %% Line 218
			    Set2)
	      in  %% Line 218
		  [E1|_2]
	  %% Line 219
	  <Set1 = [E1|_6],[E2|Es2]>
	      when call 'erlang':'>'
		    (E1,
		     E2) ->
	      %% Line 220
	      apply 'subtract'/2
		  (Set1, Es2)
	  %% Line 221
	  <[_X_E1|Es1],[_X_E2|Es2]> when 'true' ->
	      %% Line 222
	      apply 'subtract'/2
		  (Es1, Es2)
	  %% Line 223
	  <[],_7> when 'true' ->
	      []
	  %% Line 224
	  <Es1,[]> when 'true' ->
	      Es1
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'subtract',2}}] )
	    -| ['compiler_generated'] )
	end
'is_subset'/2 =
    %% Line 234
    fun (_0,_1) ->
	case <_0,_1> of
	  <[E1|_4],[E2|_5]>
	      when call 'erlang':'<'
		    (E1,
		     E2) ->
	      %% Line 235
	      'false'
	  %% Line 236
	  <Set1 = [E1|_6],[E2|Es2]>
	      when call 'erlang':'>'
		    (E1,
		     E2) ->
	      %% Line 237
	      apply 'is_subset'/2
		  (Set1, Es2)
	  %% Line 238
	  <[_X_E1|Es1],[_X_E2|Es2]> when 'true' ->
	      %% Line 239
	      apply 'is_subset'/2
		  (Es1, Es2)
	  %% Line 240
	  <[],_7> when 'true' ->
	      'true'
	  %% Line 241
	  <_8,[]> when 'true' ->
	      'false'
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'is_subset',2}}] )
	    -| ['compiler_generated'] )
	end
'fold'/3 =
    %% Line 252
    fun (_0,_1,_2) ->
	%% Line 253
	call 'lists':'foldl'
	    (_0, _1, _2)
'filter'/2 =
    %% Line 263
    fun (_0,_1) ->
	%% Line 264
	call 'lists':'filter'
	    (_0, _1)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ordsets')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('ordsets', _0)
end