module 'erl_tar' ['add'/3,
		  'add'/4,
		  'close'/1,
		  'create'/2,
		  'create'/3,
		  'extract'/1,
		  'extract'/2,
		  'format_error'/1,
		  'init'/3,
		  'module_info'/0,
		  'module_info'/1,
		  'open'/2,
		  't'/1,
		  'table'/1,
		  'table'/2,
		  'tt'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[101|[114|[108|[95|[116|[97|[114|[46|[101|[114|[108]]]]]]]]]]]]]]],1}],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[47|[117|[115|[114|[47|[108|[111|[99|[97|[108|[47|[67|[101|[108|[108|[97|[114|[47|[101|[114|[108|[97|[110|[103|[47|[50|[50|[46|[50|[47|[108|[105|[98|[47|[101|[114|[108|[97|[110|[103|[47|[108|[105|[98|[47|[107|[101|[114|[110|[101|[108|[45|[54|[46|[53|[46|[49|[47|[105|[110|[99|[108|[117|[100|[101|[47|[102|[105|[108|[101|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 25
		'record' =
		    %% Line 25
		    [{'file_info',[{'typed_record_field',{'record_field',26,{'atom',26,'size'}},{'type',26,'union',[{'type',26,'non_neg_integer',[]}|[{'atom',26,'undefined'}]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'type'}},{'type',27,'union',[{'atom',27,'device'}|[{'atom',27,'directory'}|[{'atom',27,'other'}|[{'atom',27,'regular'}|[{'atom',27,'symlink'}|[{'atom',28,'undefined'}]]]]]]}}|[{'typed_record_field',{'record_field',29,{'atom',29,'access'}},{'type',29,'union',[{'atom',29,'read'}|[{'atom',29,'write'}|[{'atom',29,'read_write'}|[{'atom',29,'none'}|[{'atom',29,'undefined'}]]]]]}}|[{'typed_record_field',{'record_field',30,{'atom',30,'atime'}},{'type',30,'union',[{'remote_type',30,[{'atom',30,'file'}|[{'atom',30,'date_time'}|[[]]]]}|[{'type',30,'non_neg_integer',[]}|[{'atom',30,'undefined'}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'mtime'}},{'type',34,'union',[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}|[{'atom',34,'undefined'}]]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'ctime'}},{'type',36,'union',[{'remote_type',36,[{'atom',36,'file'}|[{'atom',36,'date_time'}|[[]]]]}|[{'type',36,'non_neg_integer',[]}|[{'atom',36,'undefined'}]]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'mode'}},{'type',42,'union',[{'type',42,'non_neg_integer',[]}|[{'atom',42,'undefined'}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'links'}},{'type',46,'union',[{'type',46,'non_neg_integer',[]}|[{'atom',46,'undefined'}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'major_device'}},{'type',49,'union',[{'type',49,'non_neg_integer',[]}|[{'atom',49,'undefined'}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'minor_device'}},{'type',55,'union',[{'type',55,'non_neg_integer',[]}|[{'atom',55,'undefined'}]]}}|[{'typed_record_field',{'record_field',57,{'atom',57,'inode'}},{'type',57,'union',[{'type',57,'non_neg_integer',[]}|[{'atom',57,'undefined'}]]}}|[{'typed_record_field',{'record_field',58,{'atom',58,'uid'}},{'type',58,'union',[{'type',58,'non_neg_integer',[]}|[{'atom',58,'undefined'}]]}}|[{'typed_record_field',{'record_field',59,{'atom',59,'gid'}},{'type',59,'union',[{'type',59,'non_neg_integer',[]}|[{'atom',59,'undefined'}]]}}]]]]]]]]]]]]]}],
		%% Line 62
		'record' =
		    %% Line 62
		    [{'file_descriptor',[{'typed_record_field',{'record_field',63,{'atom',63,'module'}},{'type',63,'module',[]}}|[{'typed_record_field',{'record_field',64,{'atom',64,'data'}},{'type',64,'term',[]}}]]}],
		%% Line 41
		'file' =
		    %% Line 41
		    [{[115|[114|[99|[47|[101|[114|[108|[95|[116|[97|[114|[46|[101|[114|[108]]]]]]]]]]]]]]],41}],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[101|[114|[108|[95|[116|[97|[114|[46|[104|[114|[108]]]]]]]]]]]]]]],1}],
		%% Line 21
		'record' =
		    %% Line 21
		    [{'add_opts',[{'record_field',22,{'atom',22,'read_info'}}|[{'record_field',23,{'atom',23,'chunk_size'},{'integer',23,0}}|[{'record_field',24,{'atom',24,'verbose'},{'atom',24,'false'}}|[{'record_field',25,{'atom',25,'atime'},{'atom',25,'undefined'}}|[{'record_field',26,{'atom',26,'mtime'},{'atom',26,'undefined'}}|[{'record_field',27,{'atom',27,'ctime'},{'atom',27,'undefined'}}|[{'record_field',28,{'atom',28,'uid'},{'integer',28,0}}|[{'record_field',29,{'atom',29,'gid'},{'integer',29,0}}]]]]]]]]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{'add_opts',{'type',30,'record',[{'atom',30,'add_opts'}]},[]}],
		%% Line 33
		'record' =
		    %% Line 33
		    [{'read_opts',[{'typed_record_field',{'record_field',34,{'atom',34,'cwd'}},{'type',34,'string',[]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'keep_old_files'},{'atom',35,'false'}},{'type',35,'boolean',[]}}|[{'record_field',36,{'atom',36,'files'},{'atom',36,'all'}}|[{'typed_record_field',{'record_field',37,{'atom',37,'output'},{'atom',37,'file'}},{'type',37,'union',[{'atom',37,'file'}|[{'atom',37,'memory'}]]}}|[{'record_field',38,{'atom',38,'open_mode'},{'nil',38}}|[{'typed_record_field',{'record_field',39,{'atom',39,'verbose'},{'atom',39,'false'}},{'type',39,'boolean',[]}}]]]]]]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{'read_opts',{'type',40,'record',[{'atom',40,'read_opts'}]},[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{'add_opt',{'type',42,'union',[{'atom',42,'dereference'}|[{'atom',43,'verbose'}|[{'type',44,'tuple',[{'atom',44,'chunks'}|[{'type',44,'pos_integer',[]}]]}|[{'type',45,'tuple',[{'atom',45,'atime'}|[{'type',45,'non_neg_integer',[]}]]}|[{'type',46,'tuple',[{'atom',46,'mtime'}|[{'type',46,'non_neg_integer',[]}]]}|[{'type',47,'tuple',[{'atom',47,'ctime'}|[{'type',47,'non_neg_integer',[]}]]}|[{'type',48,'tuple',[{'atom',48,'uid'}|[{'type',48,'non_neg_integer',[]}]]}|[{'type',49,'tuple',[{'atom',49,'gid'}|[{'type',49,'non_neg_integer',[]}]]}]]]]]]]]},[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{'name_in_archive',{'type',51,'string',[]},[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'extract_opt',{'type',53,'union',[{'type',53,'tuple',[{'atom',53,'cwd'}|[{'type',53,'string',[]}]]}|[{'type',54,'tuple',[{'atom',54,'files'}|[{'type',54,'list',[{'user_type',54,'name_in_archive',[]}]}]]}|[{'atom',55,'compressed'}|[{'atom',56,'cooked'}|[{'atom',57,'memory'}|[{'atom',58,'keep_old_files'}|[{'atom',59,'verbose'}]]]]]]]},[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{'create_opt',{'type',61,'union',[{'atom',61,'compressed'}|[{'atom',62,'cooked'}|[{'atom',63,'dereference'}|[{'atom',64,'verbose'}]]]]},[]}],
		%% Line 66
		'type' =
		    %% Line 66
		    [{'filelist',{'type',66,'list',[{'type',66,'union',[{'remote_type',66,[{'atom',66,'file'}|[{'atom',66,'filename'}|[[]]]]}|[{'type',67,'tuple',[{'user_type',67,'name_in_archive',[]}|[{'remote_type',67,[{'atom',67,'file'}|[{'atom',67,'filename_all'}|[[]]]]}]]}]]}]},[]}],
		%% Line 69
		'type' =
		    %% Line 69
		    [{'tar_time',{'type',69,'non_neg_integer',[]},[]}],
		%% Line 72
		'record' =
		    %% Line 72
		    [{'tar_header',[{'typed_record_field',{'record_field',73,{'atom',73,'name'},{'string',73,[]}},{'user_type',73,'name_in_archive',[]}}|[{'typed_record_field',{'record_field',74,{'atom',74,'mode'},{'integer',74,33188}},{'type',74,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',75,{'atom',75,'uid'},{'integer',75,0}},{'type',75,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'gid'},{'integer',76,0}},{'type',76,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',77,{'atom',77,'size'},{'integer',77,0}},{'type',77,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',78,{'atom',78,'mtime'}},{'user_type',78,'tar_time',[]}}|[{'typed_record_field',{'record_field',79,{'atom',79,'typeflag'}},{'type',79,'char',[]}}|[{'typed_record_field',{'record_field',80,{'atom',80,'linkname'},{'string',80,[]}},{'user_type',80,'name_in_archive',[]}}|[{'typed_record_field',{'record_field',81,{'atom',81,'uname'},{'string',81,[]}},{'type',81,'string',[]}}|[{'typed_record_field',{'record_field',82,{'atom',82,'gname'},{'string',82,[]}},{'type',82,'string',[]}}|[{'typed_record_field',{'record_field',83,{'atom',83,'devmajor'},{'integer',83,0}},{'type',83,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',84,{'atom',84,'devminor'},{'integer',84,0}},{'type',84,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',85,{'atom',85,'atime'}},{'user_type',85,'tar_time',[]}}|[{'typed_record_field',{'record_field',86,{'atom',86,'ctime'}},{'user_type',86,'tar_time',[]}}]]]]]]]]]]]]]]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{'tar_header',{'type',88,'record',[{'atom',88,'tar_header'}]},[]}],
		%% Line 91
		'record' =
		    %% Line 91
		    [{'sparse_entry',[{'typed_record_field',{'record_field',92,{'atom',92,'offset'},{'integer',92,0}},{'type',92,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',93,{'atom',93,'num_bytes'},{'integer',93,0}},{'type',93,'non_neg_integer',[]}}]]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{'sparse_entry',{'type',94,'record',[{'atom',94,'sparse_entry'}]},[]}],
		%% Line 96
		'record' =
		    %% Line 96
		    [{'sparse_array',[{'typed_record_field',{'record_field',97,{'atom',97,'entries'},{'nil',97}},{'type',97,'list',[{'user_type',97,'sparse_entry',[]}]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'is_extended'},{'atom',98,'false'}},{'type',98,'boolean',[]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'max_entries'},{'integer',99,0}},{'type',99,'non_neg_integer',[]}}]]]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'sparse_array',{'type',100,'record',[{'atom',100,'sparse_array'}]},[]}],
		%% Line 102
		'record' =
		    %% Line 102
		    [{'header_v7',[{'typed_record_field',{'record_field',103,{'atom',103,'name'}},{'type',103,'binary',[]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'mode'}},{'type',104,'binary',[]}}|[{'typed_record_field',{'record_field',105,{'atom',105,'uid'}},{'type',105,'binary',[]}}|[{'typed_record_field',{'record_field',106,{'atom',106,'gid'}},{'type',106,'binary',[]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'size'}},{'type',107,'binary',[]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'mtime'}},{'type',108,'binary',[]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'checksum'}},{'type',109,'binary',[]}}|[{'typed_record_field',{'record_field',110,{'atom',110,'typeflag'}},{'type',110,'byte',[]}}|[{'typed_record_field',{'record_field',111,{'atom',111,'linkname'}},{'type',111,'binary',[]}}]]]]]]]]]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{'header_v7',{'type',112,'record',[{'atom',112,'header_v7'}]},[]}],
		%% Line 114
		'record' =
		    %% Line 114
		    [{'header_gnu',[{'typed_record_field',{'record_field',115,{'atom',115,'header_v7'}},{'user_type',115,'header_v7',[]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'magic'}},{'type',116,'binary',[]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'version'}},{'type',117,'binary',[]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'uname'}},{'type',118,'binary',[]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'gname'}},{'type',119,'binary',[]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'devmajor'}},{'type',120,'binary',[]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'devminor'}},{'type',121,'binary',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'atime'}},{'type',122,'binary',[]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'ctime'}},{'type',123,'binary',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'sparse'}},{'user_type',124,'sparse_array',[]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'real_size'}},{'type',125,'binary',[]}}]]]]]]]]]]]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{'header_gnu',{'type',126,'record',[{'atom',126,'header_gnu'}]},[]}],
		%% Line 128
		'record' =
		    %% Line 128
		    [{'header_star',[{'typed_record_field',{'record_field',129,{'atom',129,'header_v7'}},{'user_type',129,'header_v7',[]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'magic'}},{'type',130,'binary',[]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'version'}},{'type',131,'binary',[]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'uname'}},{'type',132,'binary',[]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'gname'}},{'type',133,'binary',[]}}|[{'typed_record_field',{'record_field',134,{'atom',134,'devmajor'}},{'type',134,'binary',[]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'devminor'}},{'type',135,'binary',[]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'prefix'}},{'type',136,'binary',[]}}|[{'typed_record_field',{'record_field',137,{'atom',137,'atime'}},{'type',137,'binary',[]}}|[{'typed_record_field',{'record_field',138,{'atom',138,'ctime'}},{'type',138,'binary',[]}}|[{'typed_record_field',{'record_field',139,{'atom',139,'trailer'}},{'type',139,'binary',[]}}]]]]]]]]]]]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{'header_star',{'type',140,'record',[{'atom',140,'header_star'}]},[]}],
		%% Line 142
		'record' =
		    %% Line 142
		    [{'header_ustar',[{'typed_record_field',{'record_field',143,{'atom',143,'header_v7'}},{'user_type',143,'header_v7',[]}}|[{'typed_record_field',{'record_field',144,{'atom',144,'magic'}},{'type',144,'binary',[]}}|[{'typed_record_field',{'record_field',145,{'atom',145,'version'}},{'type',145,'binary',[]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'uname'}},{'type',146,'binary',[]}}|[{'typed_record_field',{'record_field',147,{'atom',147,'gname'}},{'type',147,'binary',[]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'devmajor'}},{'type',148,'binary',[]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'devminor'}},{'type',149,'binary',[]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'prefix'}},{'type',150,'binary',[]}}]]]]]]]]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{'header_ustar',{'type',151,'record',[{'atom',151,'header_ustar'}]},[]}],
		%% Line 153
		'type' =
		    %% Line 153
		    [{'header_fields',{'type',153,'union',[{'user_type',153,'header_v7',[]}|[{'user_type',154,'header_gnu',[]}|[{'user_type',155,'header_star',[]}|[{'user_type',156,'header_ustar',[]}]]]]},[]}],
		%% Line 160
		'record' =
		    %% Line 160
		    [{'reader',[{'typed_record_field',{'record_field',161,{'atom',161,'handle'}},{'user_type',161,'user_data',[]}}|[{'typed_record_field',{'record_field',162,{'atom',162,'access'}},{'type',162,'union',[{'atom',162,'read'}|[{'atom',162,'write'}|[{'atom',162,'ram'}]]]}}|[{'typed_record_field',{'record_field',163,{'atom',163,'pos'},{'integer',163,0}},{'type',163,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',164,{'atom',164,'func'}},{'user_type',164,'file_op',[]}}]]]]}],
		%% Line 166
		'opaque' =
		    %% Line 166
		    [{'tar_descriptor',{'type',166,'record',[{'atom',166,'reader'}]},[]}],
		%% Line 167
		'export_type' =
		    %% Line 167
		    [{'tar_descriptor',0}],
		%% Line 171
		'record' =
		    %% Line 171
		    [{'reg_file_reader',[{'typed_record_field',{'record_field',172,{'atom',172,'handle'}},{'user_type',172,'tar_descriptor',[]}}|[{'record_field',173,{'atom',173,'num_bytes'},{'integer',173,0}}|[{'record_field',174,{'atom',174,'pos'},{'integer',174,0}}|[{'record_field',175,{'atom',175,'size'},{'integer',175,0}}]]]]}],
		%% Line 177
		'type' =
		    %% Line 177
		    [{'reg_file_reader',{'type',177,'record',[{'atom',177,'reg_file_reader'}]},[]}],
		%% Line 180
		'record' =
		    %% Line 180
		    [{'sparse_file_reader',[{'typed_record_field',{'record_field',181,{'atom',181,'handle'}},{'user_type',181,'tar_descriptor',[]}}|[{'record_field',182,{'atom',182,'num_bytes'},{'integer',182,0}}|[{'record_field',183,{'atom',183,'pos'},{'integer',183,0}}|[{'record_field',184,{'atom',184,'size'},{'integer',184,0}}|[{'record_field',185,{'atom',185,'sparse_map'},{'record',185,'sparse_array',[]}}]]]]]}],
		%% Line 187
		'type' =
		    %% Line 187
		    [{'sparse_file_reader',{'type',187,'record',[{'atom',187,'sparse_file_reader'}]},[]}],
		%% Line 190
		'type' =
		    %% Line 190
		    [{'descriptor_type',{'type',190,'union',[{'user_type',190,'tar_descriptor',[]}|[{'user_type',190,'reg_file_reader',[]}|[{'user_type',190,'sparse_file_reader',[]}]]]},[]}],
		%% Line 191
		'type' =
		    %% Line 191
		    [{'user_data',{'type',191,'term',[]},[]}],
		%% Line 194
		'type' =
		    %% Line 194
		    [{'file_op',{'type',194,'fun',[{'type',194,'product',[{'type',194,'union',[{'atom',194,'write'}|[{'atom',194,'close'}|[{'atom',194,'read2'}|[{'atom',194,'position'}]]]]}|[{'type',195,'union',[{'type',195,'tuple',[{'user_type',195,'user_data',[]}|[{'type',195,'iodata',[]}]]}|[{'user_type',195,'user_data',[]}|[{'type',195,'tuple',[{'user_type',195,'user_data',[]}|[{'type',195,'non_neg_integer',[]}]]}|[{'type',196,'tuple',[{'user_type',196,'user_data',[]}|[{'type',196,'non_neg_integer',[]}]]}]]]]}]]}|[{'type',197,'union',[{'atom',197,'ok'}|[{'atom',197,'eof'}|[{'type',197,'tuple',[{'atom',197,'ok'}|[{'type',197,'union',[{'type',197,'string',[]}|[{'type',197,'binary',[]}]]}]]}|[{'type',197,'tuple',[{'atom',197,'ok'}|[{'type',197,'non_neg_integer',[]}]]}|[{'type',198,'tuple',[{'atom',198,'error'}|[{'type',198,'term',[]}]]}]]]]]}]]},[]}],
		%% Line 42
		'file' =
		    %% Line 42
		    [{[115|[114|[99|[47|[101|[114|[108|[95|[116|[97|[114|[46|[101|[114|[108]]]]]]]]]]]]]]],42}],
		%% Line 44
		'spec' =
		    %% Line 44
		    [{{'format_error',1},[{'type',44,'fun',[{'type',44,'product',[{'type',44,'term',[]}]}|[{'type',44,'string',[]}]]}]}],
		%% Line 82
		'spec' =
		    %% Line 82
		    [{{'init',3},[{'type',82,'fun',[{'type',82,'product',[{'ann_type',82,[{'var',82,'UserData'}|[{'user_type',82,'user_data',[]}]]}|[{'type',82,'union',[{'atom',82,'write'}|[{'atom',82,'read'}]]}|[{'user_type',82,'file_op',[]}]]]}|[{'type',83,'union',[{'type',83,'tuple',[{'atom',83,'ok'}|[{'user_type',83,'tar_descriptor',[]}]]}|[{'type',83,'tuple',[{'atom',83,'error'}|[{'atom',83,'badarg'}]]}]]}]]}]}],
		%% Line 93
		'spec' =
		    %% Line 93
		    [{{'extract',1},[{'type',93,'fun',[{'type',93,'product',[{'ann_type',93,[{'var',93,'Open'}|[{'user_type',93,'open_type',[]}]]}]}|[{'type',93,'union',[{'atom',93,'ok'}|[{'type',93,'tuple',[{'atom',93,'error'}|[{'type',93,'term',[]}]]}]]}]]}]}],
		%% Line 106
		'spec' =
		    %% Line 106
		    [{{'extract',2},[{'type',106,'fun',[{'type',106,'product',[{'ann_type',106,[{'var',106,'Open'}|[{'user_type',106,'open_type',[]}]]}|[{'type',106,'list',[{'user_type',106,'extract_opt',[]}]}]]}|[{'type',107,'union',[{'type',107,'tuple',[{'atom',107,'ok'}|[{'type',107,'list',[{'type',107,'tuple',[{'type',107,'string',[]}|[{'type',107,'binary',[]}]]}]}]]}|[{'type',108,'tuple',[{'atom',108,'error'}|[{'type',108,'term',[]}]]}|[{'atom',109,'ok'}]]]}]]}]}],
		%% Line 169
		'type' =
		    %% Line 169
		    [{'typeflag',{'type',169,'union',[{'atom',169,'regular'}|[{'atom',169,'link'}|[{'atom',169,'symlink'}|[{'atom',170,'char'}|[{'atom',170,'block'}|[{'atom',170,'directory'}|[{'atom',171,'fifo'}|[{'atom',171,'reserved'}|[{'atom',171,'unknown'}]]]]]]]]]},[]}],
		%% Line 172
		'type' =
		    %% Line 172
		    [{'mode',{'type',172,'non_neg_integer',[]},[]}],
		%% Line 173
		'type' =
		    %% Line 173
		    [{'uid',{'type',173,'non_neg_integer',[]},[]}],
		%% Line 174
		'type' =
		    %% Line 174
		    [{'gid',{'type',174,'non_neg_integer',[]},[]}],
		%% Line 176
		'type' =
		    %% Line 176
		    [{'tar_entry',{'type',176,'tuple',[{'ann_type',176,[{'var',176,'Name'}|[{'user_type',176,'name_in_archive',[]}]]}|[{'ann_type',177,[{'var',177,'Type'}|[{'user_type',177,'typeflag',[]}]]}|[{'ann_type',178,[{'var',178,'Size'}|[{'type',178,'non_neg_integer',[]}]]}|[{'ann_type',179,[{'var',179,'MTime'}|[{'user_type',179,'tar_time',[]}]]}|[{'ann_type',180,[{'var',180,'Mode'}|[{'user_type',180,'mode',[]}]]}|[{'ann_type',181,[{'var',181,'Uid'}|[{'user_type',181,'uid',[]}]]}|[{'ann_type',182,[{'var',182,'Gid'}|[{'user_type',182,'gid',[]}]]}]]]]]]]},[]}],
		%% Line 185
		'spec' =
		    %% Line 185
		    [{{'table',1},[{'type',185,'fun',[{'type',185,'product',[{'ann_type',185,[{'var',185,'Open'}|[{'user_type',185,'open_type',[]}]]}]}|[{'type',185,'union',[{'type',185,'tuple',[{'atom',185,'ok'}|[{'type',185,'list',[{'user_type',185,'name_in_archive',[]}]}]]}|[{'type',185,'tuple',[{'atom',185,'error'}|[{'type',185,'term',[]}]]}]]}]]}]}],
		%% Line 191
		'spec' =
		    %% Line 191
		    [{{'table',2},[{'type',191,'fun',[{'type',191,'product',[{'ann_type',191,[{'var',191,'Open'}|[{'user_type',191,'open_type',[]}]]}|[{'type',191,'list',[{'type',191,'union',[{'atom',191,'compressed'}|[{'atom',191,'verbose'}|[{'atom',191,'cooked'}]]]}]}]]}|[{'type',192,'union',[{'type',192,'tuple',[{'atom',192,'ok'}|[{'type',192,'list',[{'type',192,'union',[{'user_type',192,'name_in_archive',[]}|[{'user_type',192,'tar_entry',[]}]]}]}]]}|[{'type',192,'tuple',[{'atom',192,'error'}|[{'type',192,'term',[]}]]}]]}]]}]}],
		%% Line 232
		'spec' =
		    %% Line 232
		    [{{'t',1},[{'type',232,'fun',[{'type',232,'product',[{'remote_type',232,[{'atom',232,'file'}|[{'atom',232,'filename'}|[[]]]]}]}|[{'type',232,'union',[{'atom',232,'ok'}|[{'type',232,'tuple',[{'atom',232,'error'}|[{'type',232,'term',[]}]]}]]}]]}]}],
		%% Line 242
		'spec' =
		    %% Line 242
		    [{{'tt',1},[{'type',242,'fun',[{'type',242,'product',[{'user_type',242,'open_type',[]}]}|[{'type',242,'union',[{'atom',242,'ok'}|[{'type',242,'tuple',[{'atom',242,'error'}|[{'type',242,'term',[]}]]}]]}]]}]}],
		%% Line 252
		'spec' =
		    %% Line 252
		    [{{'print_header',1},[{'type',252,'fun',[{'type',252,'product',[{'user_type',252,'tar_entry',[]}]}|[{'atom',252,'ok'}]]}]}],
		%% Line 304
		'type' =
		    %% Line 304
		    [{'open_type',{'type',304,'union',[{'remote_type',304,[{'atom',304,'file'}|[{'atom',304,'filename_all'}|[[]]]]}|[{'type',305,'tuple',[{'atom',305,'binary'}|[{'type',305,'binary',[]}]]}|[{'type',306,'tuple',[{'atom',306,'file'}|[{'remote_type',306,[{'atom',306,'file'}|[{'atom',306,'io_device'}|[[]]]]}]]}]]]},[]}],
		%% Line 307
		'spec' =
		    %% Line 307
		    [{{'open',2},[{'type',307,'fun',[{'type',307,'product',[{'ann_type',307,[{'var',307,'Open'}|[{'user_type',307,'open_type',[]}]]}|[{'type',307,'list',[{'type',307,'union',[{'atom',307,'write'}|[{'atom',307,'compressed'}|[{'atom',307,'cooked'}]]]}]}]]}|[{'type',308,'union',[{'type',308,'tuple',[{'atom',308,'ok'}|[{'user_type',308,'tar_descriptor',[]}]]}|[{'type',308,'tuple',[{'atom',308,'error'}|[{'type',308,'term',[]}]]}]]}]]}]}],
		%% Line 385
		'spec' =
		    %% Line 385
		    [{{'close',1},[{'type',385,'fun',[{'type',385,'product',[{'ann_type',385,[{'var',385,'TarDescriptor'}|[{'user_type',385,'tar_descriptor',[]}]]}]}|[{'type',385,'union',[{'atom',385,'ok'}|[{'type',385,'tuple',[{'atom',385,'error'}|[{'type',385,'term',[]}]]}]]}]]}]}],
		%% Line 406
		'spec' =
		    %% Line 406
		    [{{'create',2},[{'type',406,'fun',[{'type',406,'product',[{'remote_type',406,[{'atom',406,'file'}|[{'atom',406,'filename_all'}|[[]]]]}|[{'user_type',406,'filelist',[]}]]}|[{'type',406,'union',[{'atom',406,'ok'}|[{'type',406,'tuple',[{'atom',406,'error'}|[{'type',406,'tuple',[{'type',406,'string',[]}|[{'type',406,'term',[]}]]}]]}]]}]]}]}],
		%% Line 412
		'spec' =
		    %% Line 412
		    [{{'create',3},[{'type',412,'fun',[{'type',412,'product',[{'remote_type',412,[{'atom',412,'file'}|[{'atom',412,'filename_all'}|[[]]]]}|[{'user_type',412,'filelist',[]}|[{'type',412,'list',[{'user_type',412,'create_opt',[]}]}]]]}|[{'type',413,'union',[{'atom',413,'ok'}|[{'type',413,'tuple',[{'atom',413,'error'}|[{'type',413,'term',[]}]]}|[{'type',413,'tuple',[{'atom',413,'error'}|[{'type',413,'tuple',[{'type',413,'string',[]}|[{'type',413,'term',[]}]]}]]}]]]}]]}]}],
		%% Line 444
		'type' =
		    %% Line 444
		    [{'add_type',{'type',444,'union',[{'user_type',444,'name_in_archive',[]}|[{'type',445,'tuple',[{'user_type',445,'name_in_archive',[]}|[{'remote_type',445,[{'atom',445,'file'}|[{'atom',445,'filename_all'}|[[]]]]}]]}]]},[]}],
		%% Line 446
		'spec' =
		    %% Line 446
		    [{{'add',3},[{'type',446,'bounded_fun',[{'type',446,'fun',[{'type',446,'product',[{'var',446,'TarDescriptor'}|[{'var',446,'AddType'}|[{'var',446,'Options'}]]]}|[{'type',446,'union',[{'atom',446,'ok'}|[{'type',446,'tuple',[{'atom',446,'error'}|[{'type',446,'term',[]}]]}]]}]]}|[[{'type',447,'constraint',[{'atom',447,'is_subtype'}|[[{'var',447,'TarDescriptor'}|[{'user_type',447,'tar_descriptor',[]}]]]]}|[{'type',448,'constraint',[{'atom',448,'is_subtype'}|[[{'var',448,'AddType'}|[{'user_type',448,'add_type',[]}]]]]}|[{'type',449,'constraint',[{'atom',449,'is_subtype'}|[[{'var',449,'Options'}|[{'type',449,'list',[{'user_type',449,'add_opt',[]}]}]]]]}]]]]]}]}],
		%% Line 459
		'spec' =
		    %% Line 459
		    [{{'add',4},[{'type',459,'bounded_fun',[{'type',459,'fun',[{'type',459,'product',[{'var',459,'TarDescriptor'}|[{'var',459,'Filename'}|[{'var',459,'NameInArchive'}|[{'var',459,'Options'}]]]]}|[{'type',460,'union',[{'atom',460,'ok'}|[{'type',460,'tuple',[{'atom',460,'error'}|[{'type',460,'term',[]}]]}]]}]]}|[[{'type',461,'constraint',[{'atom',461,'is_subtype'}|[[{'var',461,'TarDescriptor'}|[{'user_type',461,'tar_descriptor',[]}]]]]}|[{'type',462,'constraint',[{'atom',462,'is_subtype'}|[[{'var',462,'Filename'}|[{'remote_type',462,[{'atom',462,'file'}|[{'atom',462,'filename_all'}|[[]]]]}]]]]}|[{'type',463,'constraint',[{'atom',463,'is_subtype'}|[[{'var',463,'NameInArchive'}|[{'user_type',463,'name_in_archive',[]}]]]]}|[{'type',464,'constraint',[{'atom',464,'is_subtype'}|[[{'var',464,'Options'}|[{'type',464,'list',[{'user_type',464,'add_opt',[]}]}]]]]}]]]]]]}]}],
		%% Line 1001
		'spec' =
		    %% Line 1001
		    [{{'get_format',1},[{'type',1001,'fun',[{'type',1001,'product',[{'type',1001,'binary',[]}]}|[{'type',1001,'union',[{'type',1001,'tuple',[{'atom',1001,'ok'}|[{'type',1001,'pos_integer',[]}|[{'user_type',1001,'header_v7',[]}]]]}|[{'integer',1002,0}|[{'type',1003,'tuple',[{'atom',1003,'error'}|[{'type',1003,'term',[]}]]}]]]}]]}]}],
		%% Line 1155
		'spec' =
		    %% Line 1155
		    [{{'parse_sparse_map',2},[{'type',1155,'fun',[{'type',1155,'product',[{'user_type',1155,'header_gnu',[]}|[{'user_type',1155,'descriptor_type',[]}]]}|[{'type',1156,'tuple',[{'type',1156,'list',[{'user_type',1156,'sparse_entry',[]}]}|[{'user_type',1156,'descriptor_type',[]}]]}]]}]}],
		%% Line 1205
		'spec' =
		    %% Line 1205
		    [{{'parse_numeric',1},[{'type',1205,'fun',[{'type',1205,'product',[{'type',1205,'binary',[]}]}|[{'type',1205,'non_neg_integer',[]}]]}]}],
		%% Line 1434
		'spec' =
		    %% Line 1434
		    [{{'merge_pax',2},[{'type',1434,'fun',[{'type',1434,'product',[{'user_type',1434,'tar_header',[]}|[{'type',1434,'map',[{'type',1434,'map_field_assoc',[{'type',1434,'binary',[]}|[{'type',1434,'binary',[]}]]}]}]]}|[{'user_type',1434,'tar_header',[]}]]}]}],
		%% Line 1472
		'spec' =
		    %% Line 1472
		    [{{'parse_pax_time',1},[{'type',1472,'fun',[{'type',1472,'product',[{'type',1472,'binary',[]}]}|[{'user_type',1472,'tar_time',[]}]]}]}],
		%% Line 1919
		'spec' =
		    %% Line 1919
		    [{{'do_close',1},[{'type',1919,'fun',[{'type',1919,'product',[{'user_type',1919,'tar_descriptor',[]}]}|[{'type',1919,'union',[{'atom',1919,'ok'}|[{'type',1919,'tuple',[{'atom',1919,'error'}|[{'type',1919,'term',[]}]]}]]}]]}]}]]
'format_error'/1 =
    %% Line 45
    fun (_0) ->
	case _0 of
	  <'invalid_tar_checksum'> when 'true' ->
	      %% Line 46
	      [67|[104|[101|[99|[107|[115|[117|[109|[32|[102|[97|[105|[108|[101|[100]]]]]]]]]]]]]]]
	  %% Line 47
	  <'bad_header'> when 'true' ->
	      %% Line 48
	      [85|[110|[114|[101|[99|[111|[103|[110|[105|[122|[101|[100|[32|[116|[97|[114|[32|[104|[101|[97|[100|[101|[114|[32|[102|[111|[114|[109|[97|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 49
	  <{'bad_header',Reason}> when 'true' ->
	      let <_1> =
		  call %% Line 50
		       'io_lib':%% Line 50
				'format'
		      (%% Line 50
		       [85|[110|[114|[101|[99|[111|[103|[110|[105|[122|[101|[100|[32|[116|[97|[114|[32|[104|[101|[97|[100|[101|[114|[32|[102|[111|[114|[109|[97|[116|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 50
																											  [Reason|[]])
	      in  %% Line 50
		  call 'lists':'flatten'
		      (_1)
	  %% Line 51
	  <{'invalid_header','negative_size'}> when 'true' ->
	      %% Line 52
	      [73|[110|[118|[97|[108|[105|[100|[32|[104|[101|[97|[100|[101|[114|[58|[32|[110|[101|[103|[97|[116|[105|[118|[101|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 53
	  <'invalid_sparse_header_size'> when 'true' ->
	      %% Line 54
	      [73|[110|[118|[97|[108|[105|[100|[32|[115|[112|[97|[114|[115|[101|[32|[104|[101|[97|[100|[101|[114|[58|[32|[110|[101|[103|[97|[116|[105|[118|[101|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 55
	  <'invalid_sparse_map_entry'> when 'true' ->
	      %% Line 56
	      [73|[110|[118|[97|[108|[105|[100|[32|[115|[112|[97|[114|[115|[101|[32|[109|[97|[112|[32|[101|[110|[116|[114|[121]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 57
	  <{'invalid_sparse_map_entry',Reason}> when 'true' ->
	      let <_2> =
		  call %% Line 58
		       'io_lib':%% Line 58
				'format'
		      (%% Line 58
		       [73|[110|[118|[97|[108|[105|[100|[32|[115|[112|[97|[114|[115|[101|[32|[109|[97|[112|[32|[101|[110|[116|[114|[121|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 58
																						       [Reason|[]])
	      in  %% Line 58
		  call 'lists':'flatten'
		      (_2)
	  %% Line 59
	  <'invalid_end_of_archive'> when 'true' ->
	      %% Line 60
	      [73|[110|[118|[97|[108|[105|[100|[32|[101|[110|[100|[32|[111|[102|[32|[97|[114|[99|[104|[105|[118|[101]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 61
	  <'eof'> when 'true' ->
	      %% Line 62
	      [85|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[101|[110|[100|[32|[111|[102|[32|[102|[105|[108|[101]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 63
	  <'integer_overflow'> when 'true' ->
	      %% Line 64
	      [70|[97|[105|[108|[101|[100|[32|[116|[111|[32|[112|[97|[114|[115|[101|[32|[110|[117|[109|[101|[114|[105|[99|[58|[32|[105|[110|[116|[101|[103|[101|[114|[32|[111|[118|[101|[114|[102|[108|[111|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 65
	  <{'misaligned_read',Pos}> when 'true' ->
	      let <_3> =
		  call %% Line 66
		       'io_lib':%% Line 66
				'format'
		      (%% Line 66
		       [82|[101|[97|[100|[32|[97|[32|[98|[108|[111|[99|[107|[32|[119|[104|[105|[99|[104|[32|[119|[97|[115|[32|[109|[105|[115|[97|[108|[105|[103|[110|[101|[100|[58|[32|[98|[108|[111|[99|[107|[95|[115|[105|[122|[101|[61|[126|[112|[32|[112|[111|[115|[61|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 67
																																									     [512|[Pos|[]]])
	      in  %% Line 66
		  call 'lists':'flatten'
		      (_3)
	  %% Line 68
	  <'invalid_gnu_1_0_sparsemap'> when 'true' ->
	      %% Line 69
	      [73|[110|[118|[97|[108|[105|[100|[32|[71|[78|[85|[32|[115|[112|[97|[114|[115|[101|[32|[109|[97|[112|[32|[40|[118|[101|[114|[115|[105|[111|[110|[32|[49|[46|[48|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 70
	  <{'invalid_gnu_0_1_sparsemap',Format}> when 'true' ->
	      let <_4> =
		  call %% Line 71
		       'io_lib':%% Line 71
				'format'
		      (%% Line 71
		       [73|[110|[118|[97|[108|[105|[100|[32|[71|[78|[85|[32|[115|[112|[97|[114|[115|[101|[32|[109|[97|[112|[32|[40|[118|[101|[114|[115|[105|[111|[110|[32|[126|[115|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 71
																											    [Format|[]])
	      in  %% Line 71
		  call 'lists':'flatten'
		      (_4)
	  %% Line 72
	  <'unsafe_path'> when 'true' ->
	      %% Line 73
	      [84|[104|[101|[32|[112|[97|[116|[104|[32|[112|[111|[105|[110|[116|[115|[32|[97|[98|[111|[118|[101|[32|[116|[104|[101|[32|[99|[117|[114|[114|[101|[110|[116|[32|[119|[111|[114|[107|[105|[110|[103|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 74
	  <{Name,Reason}> when 'true' ->
	      let <_5> =
		  apply %% Line 75
			'format_error'/1
		      (%% Line 75
		       Reason)
	      in  let <_6> =
		      call %% Line 75
			   'io_lib':%% Line 75
				    'format'
			  (%% Line 75
			   [126|[116|[115|[58|[32|[126|[116|[115]]]]]]]], %% Line 75
									  [Name|[_5|[]]])
		  in  %% Line 75
		      call 'lists':'flatten'
			  (_6)
	  %% Line 76
	  <Atom>
	      when call 'erlang':'is_atom'
		    (_0) ->
	      %% Line 77
	      call 'file':'format_error'
		  (Atom)
	  %% Line 78
	  <Term> when 'true' ->
	      let <_7> =
		  call %% Line 79
		       'io_lib':%% Line 79
				'format'
		      (%% Line 79
		       [126|[116|[112]]], %% Line 79
					  [Term|[]])
	      in  %% Line 79
		  call 'lists':'flatten'
		      (_7)
	end
'init'/3 =
    %% Line 84
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <UserData,AccessMode,Fun>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      let <Reader> =
		  {%% Line 85
		   'reader',%% Line 85
			    UserData,%% Line 85
				     AccessMode,%% Line 163
						0,%% Line 85
						  Fun}
	      in  %% Line 86
		  case apply 'do_position'/2
			   (Reader, {'cur',0}) of
		    <{'ok',Pos,Reader2}> when 'true' ->
			%% Line 87
			case Reader2 of
			  <{'reader',_11,_12,_13,_14}> when 'true' ->
			      let <_7> =
				  call 'erlang':'setelement'
				      (4, Reader2, Pos)
			      in  {'ok',_7}
			  ( <_15> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','reader'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 88
	  <_X_UserData,_X_AccessMode,_X_Fun> when 'true' ->
	      %% Line 89
	      {'error','badarg'}
	end
'extract'/1 =
    %% Line 94
    fun (_0) ->
	%% Line 95
	apply 'extract'/2
	    (_0, [])
'extract'/2 =
    %% Line 110
    fun (_0,_1) ->
	case <_0,_1> of
	  <_@r0 = {'binary',Bin},Opts>
	      when call 'erlang':'is_list'
		    (Opts) ->
	      %% Line 111
	      apply 'do_extract'/2
		  (_@r0, Opts)
	  %% Line 112
	  <_@r1 = {'file',Fd},Opts>
	      when call 'erlang':'is_list'
		    (Opts) ->
	      %% Line 113
	      apply 'do_extract'/2
		  (_@r1, Opts)
	  %% Line 114
	  <Reader = {'reader',_8,_9,_10,_11},Opts>
	      when call 'erlang':'is_list'
		    (Opts) ->
	      %% Line 115
	      apply 'do_extract'/2
		  (Reader, Opts)
	  %% Line 116
	  <Name,Opts>
	      when let <_2> =
		    call 'erlang':'is_list'
			(Name)
		in  let <_3> =
			call 'erlang':'is_binary'
			    (Name)
		    in  let <_4> =
			    call 'erlang':'is_list'
				(Opts)
			in  let <_5> =
				call 'erlang':'and'
				    (_3, _4)
			    in  call 'erlang':'or'
				    (_2, _5) ->
	      %% Line 117
	      apply 'do_extract'/2
		  (Name, Opts)
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'extract',2}}] )
	    -| ['compiler_generated'] )
	end
'do_extract'/2 =
    %% Line 119
    fun (_0,_1) ->
	case <_0,_1> of
	  <Handle,Opts>
	      when call 'erlang':'is_list'
		    (Opts) ->
	      let <Opts2> =
		  apply %% Line 120
			'extract_opts'/1
		      (%% Line 120
		       Opts)
	      in  let <_9> =
		      case <> of
			%% Line 121
			<>
			    when ( try
				    ( let <_5> =
					  case ( call ( 'erlang'
							-| ['compiler_generated'] ):( 'is_record'
										      -| ['compiler_generated'] )
						     (Opts2, ( 'read_opts'
							       -| ['compiler_generated'] ), ( 7
											      -| ['compiler_generated'] ))
						 -| ['compiler_generated'] ) of
					    ( <( 'true'
						 -| ['compiler_generated'] )> when 'true' ->
						  ( 'true'
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <( 'false'
						 -| ['compiler_generated'] )> when 'true' ->
						  ( 'fail'
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <( _3
						 -| ['compiler_generated'] )> when 'true' ->
						  ( _3
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				      in  let <_6> =
					      call 'erlang':'=:='
						  (( _5
						     -| ['compiler_generated'] ), 'true')
					  in  let <_7> =
						  call 'erlang':'element'
						      (5, Opts2)
					      in  let <_8> =
						      call 'erlang':'=:='
							  (_7, 'memory')
						  in  ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'and'
											     -| ['compiler_generated'] )
							    (_6, _8)
							-| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false'
				-| ['compiler_generated'] ) ->
			    []
			%% Line 121
			<> when 'true' ->
			    'ok'
		      end
		  in  let <_11> = 'extract1'/4
		      in  %% Line 122
			  apply 'foldl_read'/4
			      (Handle, _11, _9, Opts2)
	  ( <_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12})
		  -| [{'function_name',{'do_extract',2}}] )
	    -| ['compiler_generated'] )
	end
'extract1'/4 =
    %% Line 124
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <'eof',Reader,_13,Acc>
	      when call 'erlang':'is_list'
		    (Acc) ->
	      let <_4> =
		  call %% Line 125
		       'lists':%% Line 125
			       'reverse'
		      (%% Line 125
		       Acc)
	      in  %% Line 125
		  {'ok',{'ok',_4},Reader}
	  %% Line 126
	  <'eof',Reader,_14,'leading_slash'> when 'true' ->
	      do  %% Line 127
		  call 'error_logger':'info_msg'
		      ([101|[114|[108|[95|[116|[97|[114|[58|[32|[114|[101|[109|[111|[118|[101|[100|[32|[108|[101|[97|[100|[105|[110|[103|[32|[39|[47|[39|[32|[102|[114|[111|[109|[32|[109|[101|[109|[98|[101|[114|[32|[110|[97|[109|[101|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		  %% Line 128
		  {'ok','ok',Reader}
	  %% Line 129
	  <'eof',Reader,_15,Acc> when 'true' ->
	      %% Line 130
	      {'ok',Acc,Reader}
	  %% Line 131
	  <Header = {'tar_header',Name,_16,_17,_18,Size,_19,_20,_21,_22,_23,_24,_25,_26,_27},Reader0,Opts,Acc0> when 'true' ->
	      %% Line 132
	      case apply 'check_extract'/2
		       (Name, Opts) of
		%% Line 133
		<'true'> when 'true' ->
		    %% Line 134
		    case apply 'do_read'/2
			     (Reader0, Size) of
		      %% Line 135
		      <{'ok',Bin,Reader1}> when 'true' ->
			  let <Acc> =
			      apply %% Line 136
				    'extract2'/4
				  (%% Line 136
				   Header, %% Line 136
					   Bin, %% Line 136
						Opts, %% Line 136
						      Acc0)
			  in  %% Line 137
			      {'ok',Acc,Reader1}
		      %% Line 138
		      <Err = {'error',_28}> when 'true' ->
			  %% Line 139
			  call 'erlang':'throw'
			      (Err)
		      ( <_6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_6})
			-| ['compiler_generated'] )
		    end
		%% Line 141
		<'false'> when 'true' ->
		    let <_7> =
			apply %% Line 142
			      'skip_file'/1
			    (%% Line 142
			     Reader0)
		    in  %% Line 142
			{'ok',Acc0,_7}
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_8})
		  -| ['compiler_generated'] )
	      end
	  ( <_12,_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11,_10,_9})
		  -| [{'function_name',{'extract1',4}}] )
	    -| ['compiler_generated'] )
	end
'extract2'/4 =
    %% Line 145
    fun (_0,_1,_2,_3) ->
	%% Line 146
	case apply 'write_extracted_element'/3
		 (_0, _1, _2) of
	  %% Line 147
	  <'ok'> when 'true' ->
	      %% Line 148
	      case _0 of
		%% Line 149
		<{'tar_header',[47|_10],_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23}> when 'true' ->
		    %% Line 150
		    'leading_slash'
		%% Line 151
		<{'tar_header',_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37}> when 'true' ->
		    _3
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 154
	  <{'ok',NameBin}>
	      when call 'erlang':'is_list'
		    (_3) ->
	      %% Line 155
	      [NameBin|_3]
	  %% Line 156
	  <Err = {'error',_38}> when 'true' ->
	      %% Line 157
	      call 'erlang':'throw'
		  (Err)
	  ( <_5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_5})
	    -| ['compiler_generated'] )
	end
'check_extract'/2 =
    %% Line 161
    fun (_0,_1) ->
	case <_0,_1> of
	  <_4,{'read_opts',_5,_6,'all',_7,_8,_9}> when 'true' ->
	      %% Line 162
	      'true'
	  %% Line 163
	  <Name,{'read_opts',_10,_11,Files,_12,_13,_14}> when 'true' ->
	      %% Line 164
	      call 'ordsets':'is_element'
		  (Name, Files)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'check_extract',2}}] )
	    -| ['compiler_generated'] )
	end
'table'/1 =
    %% Line 186
    fun (_0) ->
	%% Line 187
	apply 'table'/2
	    (_0, [])
'table'/2 =
    %% Line 193
    fun (_0,_1) ->
	case <_0,_1> of
	  <Name,Opts>
	      when call 'erlang':'is_list'
		    (Opts) ->
	      let <_3> = 'table1'/4
	      in  let <_2> =
		      apply %% Line 194
			    'table_opts'/1
			  (%% Line 194
			   Opts)
		  in  %% Line 194
		      apply 'foldl_read'/4
			  (Name, _3, [], _2)
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'table',2}}] )
	    -| ['compiler_generated'] )
	end
'table1'/4 =
    %% Line 196
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <'eof',Reader,_11,Result> when 'true' ->
	      let <_4> =
		  call %% Line 197
		       'lists':%% Line 197
			       'reverse'
		      (%% Line 197
		       Result)
	      in  %% Line 197
		  {'ok',{'ok',_4},Reader}
	  %% Line 198
	  <Header = {'tar_header',_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25},Reader,{'read_opts',_26,_27,_28,_29,_30,Verbose},Result> when 'true' ->
	      let <Attrs> =
		  apply %% Line 199
			'table1_attrs'/2
		      (%% Line 199
		       Header, %% Line 199
			       Verbose)
	      in  let <Reader2> =
		      apply %% Line 200
			    'skip_file'/1
			  (%% Line 200
			   Reader)
		  in  %% Line 201
		      {'ok',[Attrs|Result],Reader2}
	  ( <_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8,_7})
		  -| [{'function_name',{'table1',4}}] )
	    -| ['compiler_generated'] )
	end
'table1_attrs'/2 =
    %% Line 204
    fun (_0,_1) ->
	case <_0,_1> of
	  <Header = {'tar_header',_20,Mode,_21,_22,_23,_24,Typeflag,_25,_26,_27,_28,_29,_30,_31},'true'> when 'true' ->
	      let <Type> =
		  apply %% Line 205
			'typeflag'/1
		      (%% Line 205
		       Typeflag)
	      in  %% Line 206
		  ( case Header of
		      ( <( {'tar_header',_rec1,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44}
			   -| ['compiler_generated'] )> when 'true' ->
			    %% Line 207
			    ( case Header of
				( <( {'tar_header',_46,_47,_48,_49,_50,_rec2,_51,_52,_53,_54,_55,_56,_57,_58}
				     -| ['compiler_generated'] )> when 'true' ->
				      %% Line 208
				      ( case Header of
					  ( <( {'tar_header',_60,_61,_rec3,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72}
					       -| ['compiler_generated'] )> when 'true' ->
						%% Line 209
						( case Header of
						    ( <( {'tar_header',_74,_75,_76,_rec4,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86}
							 -| ['compiler_generated'] )> when 'true' ->
							  %% Line 210
							  ( case Header of
							      ( <( {'tar_header',_88,_89,_90,_91,_rec5,_92,_93,_94,_95,_96,_97,_98,_99,_100}
								   -| ['compiler_generated'] )> when 'true' ->
								    %% Line 211
								    {_rec1,Type,_rec5,_rec2,Mode,_rec3,_rec4}
								-| ['compiler_generated'] )
							      ( <_101> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','tar_header'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <_87> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','tar_header'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_73> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','tar_header'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_59> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','tar_header'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_45> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','tar_header'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 212
	  <{'tar_header',Name,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114},_X_Verbose> when 'true' ->
	      %% Line 213
	      Name
	  ( <_19,_18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_19,_18})
		  -| [{'function_name',{'table1_attrs',2}}] )
	    -| ['compiler_generated'] )
	end
'typeflag'/1 =
    %% Line 215
    fun (_0) ->
	case _0 of
	  <48> when 'true' ->
	      'regular'
	  %% Line 216
	  <0> when 'true' ->
	      'regular'
	  %% Line 217
	  <83> when 'true' ->
	      'regular'
	  %% Line 218
	  <55> when 'true' ->
	      'regular'
	  %% Line 219
	  <49> when 'true' ->
	      'link'
	  %% Line 220
	  <50> when 'true' ->
	      'symlink'
	  %% Line 221
	  <51> when 'true' ->
	      'char'
	  %% Line 222
	  <52> when 'true' ->
	      'block'
	  %% Line 223
	  <53> when 'true' ->
	      'directory'
	  %% Line 224
	  <54> when 'true' ->
	      'fifo'
	  %% Line 225
	  <_2> when 'true' ->
	      'unknown'
	end
't'/1 =
    %% Line 233
    fun (_0) ->
	case _0 of
	  <Name>
	      when let <_1> =
		    call 'erlang':'is_list'
			(_0)
		in  let <_2> =
			call 'erlang':'is_binary'
			    (_0)
		    in  call 'erlang':'or'
			    (_1, _2) ->
	      %% Line 234
	      case apply 'table'/1
		       (Name) of
		%% Line 235
		<{'ok',List}> when 'true' ->
		    let <_6> =
			fun (_4) ->
			    let <_9> =
				call %% Line 236
				     'io':%% Line 236
					  'format'
				    (%% Line 236
				     [126|[116|[115|[10]]]], %% Line 236
							     [_4|[]])
			    in  %% Line 236
				case _9 of
				  <'ok'> when 'true' ->
				      ( _9
					-| ['compiler_generated'] )
				  ( <_3> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_3})
				    -| ['compiler_generated'] )
				end
		    in  %% Line 236
			call 'lists':'foreach'
			    (_6, List)
		%% Line 237
		<Error> when 'true' ->
		    %% Line 238
		    Error
	      end
	  ( <_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8})
		  -| [{'function_name',{'t',1}}] )
	    -| ['compiler_generated'] )
	end
'tt'/1 =
    %% Line 243
    fun (_0) ->
	%% Line 244
	case apply 'table'/2
		 (_0, ['verbose']) of
	  %% Line 245
	  <{'ok',List}> when 'true' ->
	      let <_1> = 'print_header'/1
	      in  %% Line 246
		  call 'lists':'foreach'
		      (_1, List)
	  %% Line 247
	  <Error> when 'true' ->
	      %% Line 248
	      Error
	end
'print_header'/1 =
    %% Line 253
    fun (_0) ->
	case _0 of
	  <{Name,Type,Size,Mtime,Mode,Uid,Gid}> when 'true' ->
	      let <_1> =
		  apply %% Line 255
			'type_to_string'/1
		      (%% Line 255
		       Type)
	      in  let <_2> =
		      apply %% Line 255
			    'mode_to_string'/1
			  (%% Line 255
			   Mode)
		  in  let <_3> =
			  apply %% Line 256
				'time_to_string'/1
			      (%% Line 256
			       Mtime)
		      in  %% Line 254
			  call 'io':'format'
			      ([126|[115|[126|[115|[32|[126|[52|[119|[47|[126|[45|[52|[119|[32|[126|[55|[119|[32|[126|[115|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]], %% Line 255
																				      [_1|[_2|%% Line 256
																					      [Uid|[Gid|[Size|[_3|[Name|[]]]]]]]])
	  ( <_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4})
		  -| [{'function_name',{'print_header',1}}] )
	    -| ['compiler_generated'] )
	end
'type_to_string'/1 =
    %% Line 258
    fun (_0) ->
	case _0 of
	  <'regular'> when 'true' ->
	      [45]
	  %% Line 259
	  <'directory'> when 'true' ->
	      [100]
	  %% Line 260
	  <'link'> when 'true' ->
	      [108]
	  %% Line 261
	  <'symlink'> when 'true' ->
	      [115]
	  %% Line 262
	  <'char'> when 'true' ->
	      [99]
	  %% Line 263
	  <'block'> when 'true' ->
	      [98]
	  %% Line 264
	  <'fifo'> when 'true' ->
	      [102]
	  %% Line 265
	  <'unknown'> when 'true' ->
	      [63]
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'type_to_string',1}}] )
	    -| ['compiler_generated'] )
	end
'mode_to_string'/1 =
    %% Line 268
    fun (_0) ->
	%% Line 269
	apply 'mode_to_string'/3
	    (_0, [120|[119|[114|[120|[119|[114|[120|[119|[114]]]]]]]]], [])
'mode_to_string'/3 =
    %% Line 270
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Mode,[C|T],Acc>
	      when try
		    let <_3> =
			call 'erlang':'band'
			    (Mode, 1)
		    in  call 'erlang':'=:='
			    (_3, 1)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_4> =
		  call %% Line 271
		       'erlang':%% Line 271
				'bsr'
		      (%% Line 271
		       Mode, %% Line 271
			     1)
	      in  %% Line 271
		  apply 'mode_to_string'/3
		      (_4, T, [C|Acc])
	  %% Line 272
	  <Mode,[_9|T],Acc> when 'true' ->
	      let <_5> =
		  call %% Line 273
		       'erlang':%% Line 273
				'bsr'
		      (%% Line 273
		       Mode, %% Line 273
			     1)
	      in  %% Line 273
		  apply 'mode_to_string'/3
		      (_5, T, [45|Acc])
	  %% Line 274
	  <_10,[],Acc> when 'true' ->
	      %% Line 275
	      Acc
	  ( <_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7,_6})
		  -| [{'function_name',{'mode_to_string',3}}] )
	    -| ['compiler_generated'] )
	end
'time_to_string'/1 =
    %% Line 278
    fun (_0) ->
	let <Epoch> =
	    call %% Line 279
		 'calendar':%% Line 279
			    'datetime_to_gregorian_seconds'
		(%% Line 279
		 {{1970,1,1},{0,0,0}})
	in  let <Secs> =
		call %% Line 280
		     'erlang':%% Line 280
			      '+'
		    (%% Line 280
		     Epoch, _0)
	    in  let <DateTime0> =
		    call %% Line 281
			 'calendar':%% Line 281
				    'gregorian_seconds_to_datetime'
			(%% Line 281
			 Secs)
		in  %% Line 283
		    case call 'calendar':'universal_time_to_local_time'
			     (DateTime0) of
		      <{{Y,Mon,Day},{H,Min,_10}}> when 'true' ->
			  let <_6> =
			      apply %% Line 284
				    'month'/1
				  (%% Line 284
				   Mon)
			  in  let <_7> =
				  apply %% Line 284
					'two_d'/1
				      (%% Line 284
				       H)
			      in  let <_8> =
				      apply %% Line 284
					    'two_d'/1
					  (%% Line 284
					   Min)
				  in  %% Line 284
				      call 'io_lib':'format'
					  ([126|[115|[32|[126|[50|[119|[32|[126|[115|[58|[126|[115|[32|[126|[119]]]]]]]]]]]]]]], [_6|[Day|[_7|[_8|[Y|[]]]]]])
		      ( <_5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_5})
			-| ['compiler_generated'] )
		    end
'two_d'/1 =
    %% Line 286
    fun (_0) ->
	let <_1> =
	    call %% Line 287
		 'erlang':%% Line 287
			  '+'
		(_0, %% Line 287
		     100)
	in  let <_2> =
		call %% Line 287
		     'erlang':%% Line 287
			      'integer_to_list'
		    (_1)
	    in  %% Line 287
		call 'erlang':'tl'
		    (_2)
'month'/1 =
    %% Line 289
    fun (_0) ->
	case _0 of
	  <1> when 'true' ->
	      [74|[97|[110]]]
	  %% Line 290
	  <2> when 'true' ->
	      [70|[101|[98]]]
	  %% Line 291
	  <3> when 'true' ->
	      [77|[97|[114]]]
	  %% Line 292
	  <4> when 'true' ->
	      [65|[112|[114]]]
	  %% Line 293
	  <5> when 'true' ->
	      [77|[97|[121]]]
	  %% Line 294
	  <6> when 'true' ->
	      [74|[117|[110]]]
	  %% Line 295
	  <7> when 'true' ->
	      [74|[117|[108]]]
	  %% Line 296
	  <8> when 'true' ->
	      [65|[117|[103]]]
	  %% Line 297
	  <9> when 'true' ->
	      [83|[101|[112]]]
	  %% Line 298
	  <10> when 'true' ->
	      [79|[99|[116]]]
	  %% Line 299
	  <11> when 'true' ->
	      [78|[111|[118]]]
	  %% Line 300
	  <12> when 'true' ->
	      [68|[101|[99]]]
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'month',1}}] )
	    -| ['compiler_generated'] )
	end
'open'/2 =
    %% Line 309
    fun (_0,_1) ->
	case <_0,_1> of
	  <_@r0 = {'binary',Bin},Mode>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 310
	      apply 'do_open'/2
		  (_@r0, Mode)
	  %% Line 311
	  <_@r1 = {'file',Fd},Mode> when 'true' ->
	      %% Line 312
	      apply 'do_open'/2
		  (_@r1, Mode)
	  %% Line 313
	  <Name,Mode>
	      when let <_2> =
		    call 'erlang':'is_list'
			(Name)
		in  let <_3> =
			call 'erlang':'is_binary'
			    (Name)
		    in  call 'erlang':'or'
			    (_2, _3) ->
	      %% Line 314
	      apply 'do_open'/2
		  (Name, Mode)
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'open',2}}] )
	    -| ['compiler_generated'] )
	end
'do_open'/2 =
    %% Line 316
    fun (_0,_1) ->
	case <_0,_1> of
	  <Name,Mode>
	      when call 'erlang':'is_list'
		    (Mode) ->
	      %% Line 317
	      case apply 'open_mode'/1
		       (Mode) of
		%% Line 318
		<{'ok',Access,Raw,Opts}> when 'true' ->
		    %% Line 319
		    apply 'open1'/4
			(Name, Access, Raw, Opts)
		%% Line 320
		<{'error',Reason}> when 'true' ->
		    %% Line 321
		    {'error',{Name,Reason}}
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'do_open',2}}] )
	    -| ['compiler_generated'] )
	end
'open1'/4 =
    %% Line 324
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Handle = {'binary',Bin},'read',_X_Raw,Opts>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 325
	      case call 'file':'open'
		       (Bin, ['ram'|['binary'|['read']]]) of
		%% Line 326
		<{'ok',File}> when 'true' ->
		    do  %% Line 327
			( case ( call ( 'lists'
					-| ['result_not_wanted'] ):( 'member'
								     -| ['result_not_wanted'] )
				     (( 'compressed'
					-| ['result_not_wanted'] ), Opts)
				 -| ['result_not_wanted'] ) of
			    <'true'> when 'true' ->
				( call ( 'ram_file'
					 -| ['result_not_wanted'] ):( 'uncompress'
								      -| ['result_not_wanted'] )
				      (File)
				  -| ['result_not_wanted'] )
			    ( <'false'> when 'true' ->
				  []
			      -| ['compiler_generated'] )
			    ( <_5> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_5})
			      -| ['compiler_generated'] )
			  end
			  -| ['list_comprehension'] )
			let <_8> = 'file_op'/2
			in  %% Line 328
			    {'ok',{'reader',File,'read',0,_8}}
		%% Line 329
		<{'error',Reason}> when 'true' ->
		    %% Line 330
		    {'error',{Handle,Reason}}
		( <_9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 332
	  <Handle = {'file',Fd},'read',['raw'],Opts> when 'true' ->
	      %% Line 333
	      case call 'lists':'member'
		       ('compressed', Opts) of
		%% Line 334
		<'false'> when 'true' ->
		    let <_11> = 'file_op'/2
		    in  let <Reader> =
			    {%% Line 335
			     'reader',%% Line 335
				      Fd,%% Line 335
					 'read',0,_11}
			in  %% Line 336
			    case apply 'do_position'/2
				     (Reader, {'cur',0}) of
			      %% Line 337
			      <{'ok',Pos,Reader2}> when 'true' ->
				  %% Line 338
				  case Reader2 of
				    <{'reader',_27,_28,_29,_30}> when 'true' ->
					let <_15> =
					    call 'erlang':'setelement'
						(4, Reader2, Pos)
					in  {'ok',_15}
				    ( <_31> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','reader'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      %% Line 339
			      <{'error',Reason}> when 'true' ->
				  %% Line 340
				  {'error',{Handle,Reason}}
			      ( <_16> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_16})
				-| ['compiler_generated'] )
			    end
		%% Line 342
		<'true'> when 'true' ->
		    %% Line 343
		    {'error',{Handle,{'incompatible_option','compressed'}}}
		( <_cor_variable> when 'true' ->
		      call 'erlang':'error'
			  ('badarg')
		  -| ['compiler_generated'] )
	      end
	  %% Line 345
	  <Handle = {'file',_X_Fd},'read',[],_X_Opts> when 'true' ->
	      %% Line 346
	      {'error',{Handle,{'incompatible_option','cooked'}}}
	  %% Line 347
	  <Name,Access,Raw,Opts>
	      when let <_18> =
		    call 'erlang':'is_list'
			(Name)
		in  let <_19> =
			call 'erlang':'is_binary'
			    (Name)
		    in  call 'erlang':'or'
			    (_18, _19) ->
	      let <_20> =
		  call %% Line 348
		       'erlang':%% Line 348
				'++'
		      (%% Line 348
		       Raw, %% Line 348
			    ['binary'|[Access|Opts]])
	      in  %% Line 348
		  case call 'file':'open'
			   (Name, _20) of
		    %% Line 349
		    <{'ok',File}> when 'true' ->
			let <_21> = 'file_op'/2
			in  %% Line 350
			    {'ok',{'reader',File,Access,0,_21}}
		    %% Line 351
		    <{'error',Reason}> when 'true' ->
			%% Line 352
			{'error',{Name,Reason}}
		    ( <_22> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_22})
		      -| ['compiler_generated'] )
		  end
	  ( <_26,_25,_24,_23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_26,_25,_24,_23})
		  -| [{'function_name',{'open1',4}}] )
	    -| ['compiler_generated'] )
	end
'open_mode'/1 =
    %% Line 355
    fun (_0) ->
	%% Line 356
	apply 'open_mode'/4
	    (_0, 'false', ['raw'], [])
'open_mode'/4 =
    %% Line 358
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <'read',_8,Raw,_9> when 'true' ->
	      %% Line 359
	      {'ok','read',Raw,[]}
	  %% Line 360
	  <'write',_10,Raw,_11> when 'true' ->
	      %% Line 361
	      {'ok','write',Raw,[]}
	  %% Line 362
	  <['read'|Rest],'false',Raw,Opts> when 'true' ->
	      %% Line 363
	      apply 'open_mode'/4
		  (Rest, 'read', Raw, Opts)
	  %% Line 364
	  <['write'|Rest],'false',Raw,Opts> when 'true' ->
	      %% Line 365
	      apply 'open_mode'/4
		  (Rest, 'write', Raw, Opts)
	  %% Line 366
	  <['compressed'|Rest],Access,Raw,Opts> when 'true' ->
	      %% Line 367
	      apply 'open_mode'/4
		  (Rest, Access, Raw, ['compressed'|['read_ahead'|Opts]])
	  %% Line 368
	  <['cooked'|Rest],Access,_X_Raw,Opts> when 'true' ->
	      %% Line 369
	      apply 'open_mode'/4
		  (Rest, Access, [], Opts)
	  %% Line 370
	  <[],Access,Raw,Opts> when 'true' ->
	      %% Line 371
	      {'ok',Access,Raw,Opts}
	  %% Line 372
	  <_12,_13,_14,_15> when 'true' ->
	      %% Line 373
	      {'error','einval'}
	end
'file_op'/2 =
    %% Line 375
    fun (_0,_1) ->
	case <_0,_1> of
	  <'write',{Fd,Data}> when 'true' ->
	      %% Line 376
	      call 'file':'write'
		  (Fd, Data)
	  %% Line 377
	  <'position',{Fd,Pos}> when 'true' ->
	      %% Line 378
	      call 'file':'position'
		  (Fd, Pos)
	  %% Line 379
	  <'read2',{Fd,Size}> when 'true' ->
	      %% Line 380
	      call 'file':'read'
		  (Fd, Size)
	  %% Line 381
	  <'close',Fd> when 'true' ->
	      %% Line 382
	      call 'file':'close'
		  (Fd)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'file_op',2}}] )
	    -| ['compiler_generated'] )
	end
'close'/1 =
    %% Line 386
    fun (_0) ->
	case _0 of
	  <Reader = {'reader',_5,'read',_6,_7}> when 'true' ->
	      let <_8> =
		  apply %% Line 387
			'do_close'/1
		      (%% Line 387
		       Reader)
	      in  %% Line 387
		  case _8 of
		    <'ok'> when 'true' ->
			( _8
			  -| ['compiler_generated'] )
		    ( <_1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_1})
		      -| ['compiler_generated'] )
		  end
	  %% Line 388
	  <Reader = {'reader',_9,'write',_10,_11}> when 'true' ->
	      %% Line 389
	      case apply 'pad_file'/1
		       (Reader) of
		<{'ok',Reader2}> when 'true' ->
		    %% Line 390
		    case apply 'do_close'/1
			     (Reader2) of
		      <'ok'> when 'true' ->
			  %% Line 391
			  'ok'
		      ( <_3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_3})
			-| ['compiler_generated'] )
		    end
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 392
	  <_12> when 'true' ->
	      %% Line 393
	      {'error','einval'}
	end
'pad_file'/1 =
    %% Line 395
    fun (_0) ->
	case _0 of
	  <Reader = {'reader',_5,_6,Pos,_7}> when 'true' ->
	      let <_1> =
		  call %% Line 397
		       'erlang':%% Line 397
				'+'
		      (%% Line 397
		       Pos, %% Line 397
			    512)
	      in  let <PadCurrent> =
		      apply %% Line 397
			    'skip_padding'/1
			  (_1)
		  in  let <Padding> =
			  #{#<%% Line 398
			      0>(%% Line 398
				 PadCurrent,8,'integer',['unsigned'|['big']])}#
		      in  %% Line 399
			  apply 'do_write'/2
			      (Reader, [Padding|[#{#<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']]),
						   #<0>(8,1,'integer',['unsigned'|['big']])}#|[#{#<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']]),
												 #<0>(8,1,'integer',['unsigned'|['big']])}#]]])
	  ( <_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4})
		  -| [{'function_name',{'pad_file',1}}] )
	    -| ['compiler_generated'] )
	end
'create'/2 =
    %% Line 407
    fun (_0,_1) ->
	case <_0,_1> of
	  <Name,FileList>
	      when let <_2> =
		    call 'erlang':'is_list'
			(Name)
		in  let <_3> =
			call 'erlang':'is_binary'
			    (Name)
		    in  call 'erlang':'or'
			    (_2, _3) ->
	      %% Line 408
	      apply 'create'/3
		  (Name, FileList, [])
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'create',2}}] )
	    -| ['compiler_generated'] )
	end
'create'/3 =
    %% Line 414
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Name,FileList,Options>
	      when let <_3> =
		    call 'erlang':'is_list'
			(Name)
		in  let <_4> =
			call 'erlang':'is_binary'
			    (Name)
		    in  call 'erlang':'or'
			    (_3, _4) ->
	      let <_9> =
		  fun (_7) ->
		      let <_6> =
			  call %% Line 415
			       'erlang':%% Line 415
					'=:='
			      (%% Line 415
			       _7, %% Line 415
				   'compressed')
		      in  let <_5> =
			      call %% Line 415
				   'erlang':%% Line 415
					    '=:='
				  (%% Line 415
				   _7, %% Line 415
				       'cooked')
			  in  %% Line 415
			      call 'erlang':'or'
				  (_6, _5)
	      in  let <Mode> =
		      call %% Line 415
			   'lists':%% Line 415
				   'filter'
			  (_9, %% Line 416
			       Options)
		  in  %% Line 417
		      case apply 'open'/2
			       (Name, ['write'|Mode]) of
			%% Line 418
			<{'ok',TarFile}> when 'true' ->
			    %% Line 419
			    apply 'do_create'/3
				(TarFile, FileList, Options)
			%% Line 420
			<Err = {'error',_15}> when 'true' ->
			    %% Line 421
			    Err
			( <_11> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_11})
			  -| ['compiler_generated'] )
		      end
	  ( <_14,_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13,_12})
		  -| [{'function_name',{'create',3}}] )
	    -| ['compiler_generated'] )
	end
'do_create'/3 =
    %% Line 424
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <TarFile,[],_X_Opts> when 'true' ->
	      %% Line 425
	      apply 'close'/1
		  (TarFile)
	  %% Line 426
	  <TarFile,[{NameInArchive,NameOrBin}|Rest],Opts> when 'true' ->
	      %% Line 427
	      case apply 'add'/4
		       (TarFile, NameOrBin, NameInArchive, Opts) of
		%% Line 428
		<'ok'> when 'true' ->
		    %% Line 429
		    apply 'do_create'/3
			(TarFile, Rest, Opts)
		%% Line 430
		<Err = {'error',_10}> when 'true' ->
		    do  %% Line 431
			apply 'close'/1
			    (TarFile)
			%% Line 432
			Err
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 434
	  <TarFile,[Name|Rest],Opts> when 'true' ->
	      %% Line 435
	      case apply 'add'/4
		       (TarFile, Name, Name, Opts) of
		%% Line 436
		<'ok'> when 'true' ->
		    %% Line 437
		    apply 'do_create'/3
			(TarFile, Rest, Opts)
		%% Line 438
		<Err = {'error',_11}> when 'true' ->
		    do  %% Line 439
			apply 'close'/1
			    (TarFile)
			%% Line 440
			Err
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_6})
		  -| ['compiler_generated'] )
	      end
	  ( <_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7})
		  -| [{'function_name',{'do_create',3}}] )
	    -| ['compiler_generated'] )
	end
'add'/3 =
    %% Line 450
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Reader,{NameInArchive,Name},Opts>
	      when let <_3> =
		    call %% Line 451
			 'erlang':%% Line 451
				  'is_list'
			(%% Line 451
			 NameInArchive)
		in  let <_4> =
			call %% Line 451
			     'erlang':%% Line 451
				      'is_list'
			    (%% Line 451
			     Name)
		    in  %% Line 451
			call 'erlang':'and'
			    (_3, _4) ->
	      %% Line 452
	      apply 'do_add'/4
		  (Reader, Name, NameInArchive, Opts)
	  %% Line 453
	  <Reader,{NameInArchive,Bin},Opts>
	      when let <_5> =
		    call %% Line 454
			 'erlang':%% Line 454
				  'is_list'
			(%% Line 454
			 NameInArchive)
		in  let <_6> =
			call %% Line 454
			     'erlang':%% Line 454
				      'is_binary'
			    (%% Line 454
			     Bin)
		    in  %% Line 454
			call 'erlang':'and'
			    (_5, _6) ->
	      %% Line 455
	      apply 'do_add'/4
		  (Reader, Bin, NameInArchive, Opts)
	  %% Line 456
	  <Reader,Name,Opts>
	      when call 'erlang':'is_list'
		    (Name) ->
	      %% Line 457
	      apply 'do_add'/4
		  (Reader, Name, Name, Opts)
	  ( <_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7})
		  -| [{'function_name',{'add',3}}] )
	    -| ['compiler_generated'] )
	end
'add'/4 =
    %% Line 465
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Reader,NameOrBin,NameInArchive,Options>
	      when let <_4> =
		    call %% Line 466
			 'erlang':%% Line 466
				  'is_list'
			(%% Line 466
			 NameOrBin)
		in  let <_9> =
			try
			    let <_5> =
				call %% Line 466
				     'erlang':%% Line 466
					      'is_binary'
				    (%% Line 466
				     NameOrBin)
			    in  let <_6> =
				    call %% Line 467
					 'erlang':%% Line 467
						  'is_list'
					(%% Line 467
					 NameInArchive)
				in  let <_7> =
					call %% Line 467
					     'erlang':%% Line 467
						      'is_list'
					    (%% Line 467
					     Options)
				    in  let <_8> =
					    call %% Line 466
						 'erlang':%% Line 466
							  'and'
						(_6, _7)
					in  %% Line 466
					    call 'erlang':'and'
						(_5, _8)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 466
			call 'erlang':'or'
			    (_4, _9) ->
	      %% Line 468
	      apply 'do_add'/4
		  (Reader, NameOrBin, NameInArchive, Options)
	  ( <_13,_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12,_11,_10})
		  -| [{'function_name',{'add',4}}] )
	    -| ['compiler_generated'] )
	end
'do_add'/4 =
    %% Line 470
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Reader = {'reader',_13,'write',_14,_15},Name,NameInArchive,Options>
	      when let <_4> =
		    call %% Line 471
			 'erlang':%% Line 471
				  'is_list'
			(%% Line 471
			 NameInArchive)
		in  let <_5> =
			call %% Line 471
			     'erlang':%% Line 471
				      'is_list'
			    (%% Line 471
			     Options)
		    in  %% Line 471
			call 'erlang':'and'
			    (_4, _5) ->
	      let <RF> =
		  apply %% Line 472
			'apply_file_info_opts_fun'/2
		      (%% Line 472
		       Options, %% Line 472
				'read_link_info')
	      in  let <Opts> =
		      {%% Line 473
		       'add_opts',%% Line 473
				  RF,0,'false','undefined','undefined','undefined',0,0}
		  in  let <_8> =
			  apply %% Line 474
				'add_opts'/3
			      (%% Line 474
			       Options, %% Line 474
					Options, %% Line 474
						 Opts)
		      in  %% Line 474
			  apply 'add1'/4
			      (Reader, Name, NameInArchive, _8)
	  %% Line 475
	  <{'reader',_16,'read',_17,_18},_19,_20,_21> when 'true' ->
	      %% Line 476
	      {'error','eacces'}
	  %% Line 477
	  <Reader,_22,_23,_24> when 'true' ->
	      %% Line 478
	      {'error',{'badarg',Reader}}
	end
'add_opts'/3 =
    %% Line 480
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <['dereference'|T],AllOptions,Opts> when 'true' ->
	      let <RF> =
		  apply %% Line 481
			'apply_file_info_opts_fun'/2
		      (%% Line 481
		       AllOptions, %% Line 481
				   'read_file_info')
	      in  %% Line 482
		  case Opts of
		    <{'add_opts',_31,_32,_33,_34,_35,_36,_37,_38}> when 'true' ->
			let <_6> =
			    call 'erlang':'setelement'
				(2, Opts, RF)
			in  apply 'add_opts'/3
				(T, AllOptions, _6)
		    ( <_39> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','add_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 483
	  <['verbose'|T],AllOptions,Opts> when 'true' ->
	      %% Line 484
	      case Opts of
		<{'add_opts',_40,_41,_42,_43,_44,_45,_46,_47}> when 'true' ->
		    let <_9> =
			call 'erlang':'setelement'
			    (4, Opts, 'true')
		    in  apply 'add_opts'/3
			    (T, AllOptions, _9)
		( <_48> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','add_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 485
	  <[{'chunks',N}|T],AllOptions,Opts> when 'true' ->
	      %% Line 486
	      case Opts of
		<{'add_opts',_49,_50,_51,_52,_53,_54,_55,_56}> when 'true' ->
		    let <_12> =
			call 'erlang':'setelement'
			    (3, Opts, N)
		    in  apply 'add_opts'/3
			    (T, AllOptions, _12)
		( <_57> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','add_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 487
	  <[{'atime',Value}|T],AllOptions,Opts> when 'true' ->
	      %% Line 488
	      case Opts of
		<{'add_opts',_58,_59,_60,_61,_62,_63,_64,_65}> when 'true' ->
		    let <_15> =
			call 'erlang':'setelement'
			    (5, Opts, Value)
		    in  apply 'add_opts'/3
			    (T, AllOptions, _15)
		( <_66> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','add_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 489
	  <[{'mtime',Value}|T],AllOptions,Opts> when 'true' ->
	      %% Line 490
	      case Opts of
		<{'add_opts',_67,_68,_69,_70,_71,_72,_73,_74}> when 'true' ->
		    let <_18> =
			call 'erlang':'setelement'
			    (6, Opts, Value)
		    in  apply 'add_opts'/3
			    (T, AllOptions, _18)
		( <_75> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','add_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 491
	  <[{'ctime',Value}|T],AllOptions,Opts> when 'true' ->
	      %% Line 492
	      case Opts of
		<{'add_opts',_76,_77,_78,_79,_80,_81,_82,_83}> when 'true' ->
		    let <_21> =
			call 'erlang':'setelement'
			    (7, Opts, Value)
		    in  apply 'add_opts'/3
			    (T, AllOptions, _21)
		( <_84> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','add_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 493
	  <[{'uid',Value}|T],AllOptions,Opts> when 'true' ->
	      %% Line 494
	      case Opts of
		<{'add_opts',_85,_86,_87,_88,_89,_90,_91,_92}> when 'true' ->
		    let <_24> =
			call 'erlang':'setelement'
			    (8, Opts, Value)
		    in  apply 'add_opts'/3
			    (T, AllOptions, _24)
		( <_93> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','add_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 495
	  <[{'gid',Value}|T],AllOptions,Opts> when 'true' ->
	      %% Line 496
	      case Opts of
		<{'add_opts',_94,_95,_96,_97,_98,_99,_100,_101}> when 'true' ->
		    let <_27> =
			call 'erlang':'setelement'
			    (9, Opts, Value)
		    in  apply 'add_opts'/3
			    (T, AllOptions, _27)
		( <_102> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','add_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 497
	  <[_103|T],AllOptions,Opts> when 'true' ->
	      %% Line 498
	      apply 'add_opts'/3
		  (T, AllOptions, Opts)
	  %% Line 499
	  <[],_X_AllOptions,Opts> when 'true' ->
	      %% Line 500
	      Opts
	  ( <_30,_29,_28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_30,_29,_28})
		  -| [{'function_name',{'add_opts',3}}] )
	    -| ['compiler_generated'] )
	end
'apply_file_info_opts'/2 =
    %% Line 502
    fun (_0,_1) ->
	case <_0,_1> of
	  <Opts,{'ok',FileInfo}> when 'true' ->
	      let <_2> =
		  apply %% Line 503
			'do_apply_file_info_opts'/2
		      (%% Line 503
		       Opts, %% Line 503
			     FileInfo)
	      in  %% Line 503
		  {'ok',_2}
	  %% Line 504
	  <_X_Opts,Other> when 'true' ->
	      %% Line 505
	      Other
	end
'do_apply_file_info_opts'/2 =
    %% Line 507
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{'atime',Value}|T],FileInfo> when 'true' ->
	      %% Line 508
	      case FileInfo of
		<{'file_info',_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31}> when 'true' ->
		    let <_4> =
			call 'erlang':'setelement'
			    (5, FileInfo, Value)
		    in  apply 'do_apply_file_info_opts'/2
			    (T, _4)
		( <_32> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','file_info'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 509
	  <[{'mtime',Value}|T],FileInfo> when 'true' ->
	      %% Line 510
	      case FileInfo of
		<{'file_info',_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45}> when 'true' ->
		    let <_7> =
			call 'erlang':'setelement'
			    (6, FileInfo, Value)
		    in  apply 'do_apply_file_info_opts'/2
			    (T, _7)
		( <_46> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','file_info'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 511
	  <[{'ctime',Value}|T],FileInfo> when 'true' ->
	      %% Line 512
	      case FileInfo of
		<{'file_info',_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59}> when 'true' ->
		    let <_10> =
			call 'erlang':'setelement'
			    (7, FileInfo, Value)
		    in  apply 'do_apply_file_info_opts'/2
			    (T, _10)
		( <_60> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','file_info'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 513
	  <[{'uid',Value}|T],FileInfo> when 'true' ->
	      %% Line 514
	      case FileInfo of
		<{'file_info',_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73}> when 'true' ->
		    let <_13> =
			call 'erlang':'setelement'
			    (13, FileInfo, Value)
		    in  apply 'do_apply_file_info_opts'/2
			    (T, _13)
		( <_74> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','file_info'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 515
	  <[{'gid',Value}|T],FileInfo> when 'true' ->
	      %% Line 516
	      case FileInfo of
		<{'file_info',_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87}> when 'true' ->
		    let <_16> =
			call 'erlang':'setelement'
			    (14, FileInfo, Value)
		    in  apply 'do_apply_file_info_opts'/2
			    (T, _16)
		( <_88> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','file_info'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 517
	  <[_89|T],FileInfo> when 'true' ->
	      %% Line 518
	      apply 'do_apply_file_info_opts'/2
		  (T, FileInfo)
	  %% Line 519
	  <[],FileInfo> when 'true' ->
	      %% Line 520
	      FileInfo
	  ( <_18,_17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_18,_17})
		  -| [{'function_name',{'do_apply_file_info_opts',2}}] )
	    -| ['compiler_generated'] )
	end
'apply_file_info_opts_fun'/2 =
    %% Line 522
    fun (_0,_1) ->
	%% Line 523
	( fun (_3) ->
	      let <_2> =
		  call %% Line 524
		       'file':_1
		      (_3, %% Line 524
			   [{'time','posix'}])
	      in  %% Line 524
		  apply 'apply_file_info_opts'/2
		      (_0, _2)
	  -| [{'id',{0,0,'-apply_file_info_opts_fun/2-fun-0-'}}] )
'add1'/4 =
    %% Line 527
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Reader = {'reader',_45,_46,_47,_48},Name,NameInArchive,Opts = {'add_opts',ReadInfo,_49,_50,_51,_52,_53,_54,_55}>
	      when %% Line 528
		call 'erlang':'is_list'
		    (Name) ->
	      let <_16> =
		  case %% Line 529
		       apply ReadInfo
			   (Name) of
		    %% Line 530
		    <{'error',Reason0}> when 'true' ->
			%% Line 531
			{'error',{Name,Reason0}}
		    %% Line 532
		    <{'ok',Fi = {'file_info',_56,'symlink',_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67}}> when 'true' ->
			do  %% Line 533
			    apply 'add_verbose'/3
				(Opts, [97|[32|[126|[116|[115|[126|[110]]]]]]], [NameInArchive|[]])
			    %% Line 534
			    case call 'file':'read_link'
				     (Name) of
			      <{'ok',Linkname}> when 'true' ->
				  let <Header> =
				      apply %% Line 535
					    'fileinfo_to_header'/3
					  (%% Line 535
					   NameInArchive, %% Line 535
							  Fi, %% Line 535
							      Linkname)
				  in  %% Line 536
				      apply 'add_header'/3
					  (Reader, Header, Opts)
			      ( <_4> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_4})
				-| ['compiler_generated'] )
			    end
		    %% Line 537
		    <{'ok',Fi = {'file_info',_68,'regular',_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79}}> when 'true' ->
			do  %% Line 538
			    apply 'add_verbose'/3
				(Opts, [97|[32|[126|[116|[115|[126|[110]]]]]]], [NameInArchive|[]])
			    let <Header> =
				apply %% Line 539
				      'fileinfo_to_header'/3
				    (%% Line 539
				     NameInArchive, %% Line 539
						    Fi, %% Line 539
							'false')
			    in  %% Line 540
				case apply 'add_header'/3
					 (Reader, Header, Opts) of
				  <{'ok',Reader2}> when 'true' ->
				      %% Line 541
				      ( case Header of
					  ( <( {'tar_header',_80,_81,_82,_83,_rec20,_84,_85,_86,_87,_88,_89,_90,_91,_92}
					       -| ['compiler_generated'] )> when 'true' ->
						%% Line 542
						case apply 'do_copy'/3
							 (Reader2, Name, Opts) of
						  <{'ok',_94,Reader3}>
						      when call 'erlang':'=:='
							    (_94,
							     _rec20) ->
						      let <Padding> =
							  apply %% Line 543
								'skip_padding'/1
							      (_rec20)
						      in  let <Pad> =
							      #{#<%% Line 544
								  0>(%% Line 544
								     Padding,8,'integer',['unsigned'|['big']])}#
							  in  %% Line 545
							      apply 'do_write'/2
								  (Reader3, Pad)
						  ( <_11> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_11})
						    -| ['compiler_generated'] )
						end
					    -| ['compiler_generated'] )
					  ( <_93> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','tar_header'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  ( <_7> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_7})
				    -| ['compiler_generated'] )
				end
		    %% Line 546
		    <{'ok',Fi = {'file_info',_95,'directory',_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106}}> when 'true' ->
			%% Line 547
			apply 'add_directory'/5
			    (Reader, Name, NameInArchive, Fi, Opts)
		    %% Line 548
		    <{'ok',Fi = {'file_info',_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119}}> when 'true' ->
			do  %% Line 549
			    apply 'add_verbose'/3
				(Opts, [97|[32|[126|[116|[115|[126|[110]]]]]]], [NameInArchive|[]])
			    let <Header> =
				apply %% Line 550
				      'fileinfo_to_header'/3
				    (%% Line 550
				     NameInArchive, %% Line 550
						    Fi, %% Line 550
							'false')
			    in  %% Line 551
				apply 'add_header'/3
				    (Reader, Header, Opts)
		    ( <_15> when 'true' ->
			  %% Line 529
			  primop 'match_fail'
			      ({'case_clause',_15})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 553
		  case _16 of
		    %% Line 554
		    <'ok'> when 'true' ->
			'ok'
		    %% Line 555
		    <{'ok',_X_Reader}> when 'true' ->
			'ok'
		    %% Line 556
		    <Err = {'error',_X_Reason}> when 'true' ->
			Err
		    ( <_18> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_18})
		      -| ['compiler_generated'] )
		  end
	  %% Line 558
	  <Reader,Bin,NameInArchive,Opts>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      do  %% Line 559
		  apply 'add_verbose'/3
		      (Opts, [97|[32|[126|[116|[115|[126|[110]]]]]]], [NameInArchive|[]])
		  let <Now> =
		      call %% Line 560
			   'os':%% Line 560
				'system_time'
			  (%% Line 560
			   'seconds')
		  in  %% Line 568
		      ( case Opts of
			  ( <( {'add_opts',_120,_121,_122,_123,_124,_125,_rec21,_126}
			       -| ['compiler_generated'] )> when 'true' ->
				%% Line 569
				( case Opts of
				    ( <( {'add_opts',_128,_129,_130,_131,_132,_133,_134,_rec22}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_29> =
					      call 'erlang':'byte_size'
						  (Bin)
					  in  ( case Opts of
						  ( <( {'add_opts',_136,_137,_138,_139,_rec23,_140,_141,_142}
						       -| ['compiler_generated'] )> when 'true' ->
							let <_28> =
							    apply 'add_opts_time'/2
								(_rec23, Now)
							in  ( case Opts of
								( <( {'add_opts',_144,_145,_146,_rec24,_147,_148,_149,_150}
								     -| ['compiler_generated'] )> when 'true' ->
								      let <_25> =
									  apply 'add_opts_time'/2
									      (_rec24, Now)
								      in  ( case Opts of
									      ( <( {'add_opts',_152,_153,_154,_155,_156,_rec25,_157,_158}
										   -| ['compiler_generated'] )> when 'true' ->
										    let <_22> =
											apply 'add_opts_time'/2
											    (_rec25, Now)
										    in  let <Header> =
											    {'tar_header',NameInArchive,%% Line 570
															33188,_rec21,_rec22,_29,_28,48,[],[],[],0,0,_25,_22}
											in  %% Line 571
											    case apply 'add_header'/3
												     (Reader, Header, Opts) of
											      <{'ok',Reader2}> when 'true' ->
												  let <_36> =
												      call %% Line 572
													   'erlang':%% Line 572
														    'byte_size'
													  (%% Line 572
													   Bin)
												  in  let <Padding> =
													  apply %% Line 572
														'skip_padding'/1
													      (_36)
												      in  let <_38> =
													      #{#<%% Line 573
														  0>(%% Line 573
														     Padding,8,'integer',['unsigned'|['big']])}#
													  in  let <Data> =
														  [%% Line 573
														   Bin|%% Line 573
														       [_38|[]]]
													      in  %% Line 574
														  case apply 'do_write'/2
															   (Reader2, Data) of
														    %% Line 575
														    <{'ok',_X_Reader3}> when 'true' ->
															'ok'
														    %% Line 576
														    <{'error',Reason}> when 'true' ->
															{'error',{NameInArchive,Reason}}
														    ( <_40> when 'true' ->
															  primop 'match_fail'
															      ({'case_clause',_40})
														      -| ['compiler_generated'] )
														  end
											      ( <_35> when 'true' ->
												    primop 'match_fail'
													({'badmatch',_35})
												-| ['compiler_generated'] )
											    end
										-| ['compiler_generated'] )
									      ( <_159> when 'true' ->
										    ( call ( 'erlang'
											     -| ['compiler_generated'] ):( 'error'
															   -| ['compiler_generated'] )
											  (( {'badrecord','add_opts'}
											     -| ['compiler_generated'] ))
										      -| ['compiler_generated'] )
										-| ['compiler_generated'] )
									    end
									    -| ['compiler_generated'] )
								  -| ['compiler_generated'] )
								( <_151> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','add_opts'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <_143> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','add_opts'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <_135> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','add_opts'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <_127> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','add_opts'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  ( <_44,_43,_42,_41> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_44,_43,_42,_41})
		  -| [{'function_name',{'add1',4}}] )
	    -| ['compiler_generated'] )
	end
'add_opts_time'/2 =
    %% Line 579
    fun (_0,_1) ->
	case <_0,_1> of
	  <'undefined',Now> when 'true' ->
	      Now
	  %% Line 580
	  <Time,_X_Now> when 'true' ->
	      Time
	end
'add_directory'/5 =
    %% Line 582
    fun (_0,_1,_2,_3,_4) ->
	%% Line 583
	case call 'file':'list_dir'
		 (_1) of
	  %% Line 584
	  <{'ok',[]}> when 'true' ->
	      do  %% Line 585
		  apply 'add_verbose'/3
		      (_4, [97|[32|[126|[116|[115|[126|[110]]]]]]], [_2|[]])
		  let <Header> =
		      apply %% Line 586
			    'fileinfo_to_header'/3
			  (_2, _3, %% Line 586
				   'false')
		  in  %% Line 587
		      apply 'add_header'/3
			  (_0, Header, _4)
	  %% Line 588
	  <{'ok',Files}> when 'true' ->
	      do  %% Line 589
		  apply 'add_verbose'/3
		      (_4, [97|[32|[126|[116|[115|[126|[110]]]]]]], [_2|[]])
		  %% Line 590
		  try
		      apply 'add_files'/5
			  (_0, Files, _1, _2, _4)
		  of <_6> ->
		      case _6 of
			%% Line 591
			<'ok'> when 'true' ->
			    'ok'
			%% Line 592
			<Err = {'error',_17}> when 'true' ->
			    Err
			( <_7> when 'true' ->
			      primop 'match_fail'
				  ({'try_clause',_7})
			  -| ['compiler_generated'] )
		      end
		  catch <_10,_9,_8> ->
		      %% Line 594
		      case <_10,_9,_8> of
			<( 'throw'
			   -| ['compiler_generated'] ),Err = ( {( 'error'
								  -| ['compiler_generated'] ),( {_X_Name,_X_Reason}
												-| ['compiler_generated'] )}
							       -| ['compiler_generated'] ),_18> when 'true' ->
			    Err
			%% Line 595
			<( 'throw'
			   -| ['compiler_generated'] ),( {( 'error'
							    -| ['compiler_generated'] ),Reason}
							 -| ['compiler_generated'] ),_19> when 'true' ->
			    {'error',{_1,Reason}}
			( <_20,_21,_22> when 'true' ->
			      primop 'raise'
				  (_22, _21)
			  -| ['compiler_generated'] )
		      end
	  %% Line 597
	  <{'error',Reason}> when 'true' ->
	      %% Line 598
	      {'error',{_1,Reason}}
	  ( <_11> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_11})
	    -| ['compiler_generated'] )
	end
'add_files'/5 =
    %% Line 601
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <_X_Reader,[],_X_Dir,_X_DirInArchive,_X_Opts> when 'true' ->
	      %% Line 602
	      'ok'
	  %% Line 603
	  <Reader,[Name|Rest],Dir,DirInArchive,Opts = {'add_opts',Info,_27,_28,_29,_30,_31,_32,_33}> when 'true' ->
	      let <FullName> =
		  call %% Line 604
		       'filename':%% Line 604
				  'join'
		      (%% Line 604
		       Dir, %% Line 604
			    Name)
	      in  let <NameInArchive> =
		      call %% Line 605
			   'filename':%% Line 605
				      'join'
			  (%% Line 605
			   DirInArchive, %% Line 605
					 Name)
		  in  let <_19> =
			  case %% Line 606
			       apply Info
				   (FullName) of
			    %% Line 607
			    <{'error',Reason}> when 'true' ->
				%% Line 608
				{'error',{FullName,Reason}}
			    %% Line 609
			    <{'ok',Fi = {'file_info',_34,'directory',_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45}}> when 'true' ->
				%% Line 610
				apply 'add_directory'/5
				    (Reader, FullName, NameInArchive, Fi, Opts)
			    %% Line 611
			    <{'ok',Fi = {'file_info',_46,'symlink',_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57}}> when 'true' ->
				do  %% Line 612
				    apply 'add_verbose'/3
					(Opts, [97|[32|[126|[116|[115|[126|[110]]]]]]], [NameInArchive|[]])
				    %% Line 613
				    case call 'file':'read_link'
					     (FullName) of
				      <{'ok',Linkname}> when 'true' ->
					  let <Header> =
					      apply %% Line 614
						    'fileinfo_to_header'/3
						  (%% Line 614
						   NameInArchive, %% Line 614
								  Fi, %% Line 614
								      Linkname)
					  in  %% Line 615
					      apply 'add_header'/3
						  (Reader, Header, Opts)
				      ( <_7> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_7})
					-| ['compiler_generated'] )
				    end
			    %% Line 616
			    <{'ok',Fi = {'file_info',_58,'regular',_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69}}> when 'true' ->
				do  %% Line 617
				    apply 'add_verbose'/3
					(Opts, [97|[32|[126|[116|[115|[126|[110]]]]]]], [NameInArchive|[]])
				    let <Header> =
					apply %% Line 618
					      'fileinfo_to_header'/3
					    (%% Line 618
					     NameInArchive, %% Line 618
							    Fi, %% Line 618
								'false')
				    in  %% Line 619
					case apply 'add_header'/3
						 (Reader, Header, Opts) of
					  <{'ok',Reader2}> when 'true' ->
					      %% Line 620
					      ( case Header of
						  ( <( {'tar_header',_70,_71,_72,_73,_rec26,_74,_75,_76,_77,_78,_79,_80,_81,_82}
						       -| ['compiler_generated'] )> when 'true' ->
							%% Line 621
							case apply 'do_copy'/3
								 (Reader2, FullName, Opts) of
							  <{'ok',_84,Reader3}>
							      when call 'erlang':'=:='
								    (_84,
								     _rec26) ->
							      let <Padding> =
								  apply %% Line 622
									'skip_padding'/1
								      (_rec26)
							      in  let <Pad> =
								      #{#<%% Line 623
									  0>(%% Line 623
									     Padding,8,'integer',['unsigned'|['big']])}#
								  in  %% Line 624
								      apply 'do_write'/2
									  (Reader3, Pad)
							  ( <_14> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_14})
							    -| ['compiler_generated'] )
							end
						    -| ['compiler_generated'] )
						  ( <_83> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','tar_header'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  ( <_10> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_10})
					    -| ['compiler_generated'] )
					end
			    %% Line 625
			    <{'ok',Fi = {'file_info',_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97}}> when 'true' ->
				do  %% Line 626
				    apply 'add_verbose'/3
					(Opts, [97|[32|[126|[116|[115|[126|[110]]]]]]], [NameInArchive|[]])
				    let <Header> =
					apply %% Line 627
					      'fileinfo_to_header'/3
					    (%% Line 627
					     NameInArchive, %% Line 627
							    Fi, %% Line 627
								'false')
				    in  %% Line 628
					apply 'add_header'/3
					    (Reader, Header, Opts)
			    ( <_18> when 'true' ->
				  %% Line 606
				  primop 'match_fail'
				      ({'case_clause',_18})
			      -| ['compiler_generated'] )
			  end
		      in  %% Line 630
			  case _19 of
			    %% Line 631
			    <'ok'> when 'true' ->
				apply 'add_files'/5
				    (Reader, Rest, Dir, DirInArchive, Opts)
			    %% Line 632
			    <{'ok',ReaderNext}> when 'true' ->
				apply 'add_files'/5
				    (ReaderNext, Rest, Dir, DirInArchive, Opts)
			    %% Line 633
			    <Err = {'error',_98}> when 'true' ->
				Err
			    ( <_21> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_21})
			      -| ['compiler_generated'] )
			  end
	  ( <_26,_25,_24,_23,_22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_26,_25,_24,_23,_22})
		  -| [{'function_name',{'add_files',5}}] )
	    -| ['compiler_generated'] )
	end
'format_string'/2 =
    %% Line 636
    fun (_0,_1) ->
	case <_0,_1> of
	  <String,Size>
	      when try
		    let <_2> =
			call 'erlang':'length'
			    (String)
		    in  call 'erlang':'>'
			    (_2, Size)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 637
	      call 'erlang':'throw'
		  ({'error',{'write_string','field_too_long'}})
	  %% Line 638
	  <String,Size> when 'true' ->
	      let <Ascii> =
		  apply %% Line 639
			'to_ascii'/1
		      (%% Line 639
		       String)
	      in  %% Line 640
		  case <> of
		    <>
			when try
			      let <_4> =
				  call 'erlang':'byte_size'
				      (Ascii)
			      in  call 'erlang':'<'
				      (_4, Size)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			%% Line 641
			[Ascii|[0]]
		    %% Line 642
		    <> when 'true' ->
			%% Line 643
			Ascii
		  end
	end
'format_octal'/1 =
    %% Line 646
    fun (_0) ->
	let <_1> =
	    call %% Line 647
		 'io_lib':%% Line 647
			  'fwrite'
		(%% Line 647
		 [126|[46|[56|[66]]]], %% Line 647
				       [_0|[]])
	in  %% Line 647
	    call 'erlang':'iolist_to_binary'
		(_1)
'add_header'/3 =
    %% Line 649
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Reader = {'reader',_7,_8,_9,_10},Header = {'tar_header',_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24},Opts> when 'true' ->
	      %% Line 650
	      case apply 'build_header'/2
		       (Header, Opts) of
		<{'ok',Iodata}> when 'true' ->
		    %% Line 651
		    apply 'do_write'/2
			(Reader, Iodata)
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'add_header',3}}] )
	    -| ['compiler_generated'] )
	end
'write_to_block'/3 =
    %% Line 653
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Block,IoData,Start>
	      when call 'erlang':'is_list'
		    (IoData) ->
	      let <_3> =
		  call %% Line 654
		       'erlang':%% Line 654
				'iolist_to_binary'
		      (%% Line 654
		       IoData)
	      in  %% Line 654
		  apply 'write_to_block'/3
		      (Block, _3, Start)
	  %% Line 655
	  <Block,Bin,Start>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      let <Size> =
		  call %% Line 656
		       'erlang':%% Line 656
				'byte_size'
		      (%% Line 656
		       Bin)
	      in  %% Line 657
		  case Block of
		    <#{#<Head>(Start,8,'integer',['unsigned'|['big']]),
		       #<_9>(Size,8,'integer',['unsigned'|['big']]),
		       #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			%% Line 658
			#{#<Head>(Start,8,'integer',['unsigned'|['big']]),
			  #<Bin>('all',8,'binary',['unsigned'|['big']]),
			  #<Rest>('all',8,'binary',['unsigned'|['big']])}#
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5})
		      -| ['compiler_generated'] )
		  end
	  ( <_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7,_6})
		  -| [{'function_name',{'write_to_block',3}}] )
	    -| ['compiler_generated'] )
	end
'build_header'/2 =
    %% Line 660
    fun (_0,_1) ->
	case <_0,_1> of
	  <Header = {'tar_header',_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41},Opts> when 'true' ->
	      %% Line 673
	      case Header of
		<{'tar_header',Name,Mode,Uid,Gid,Size,_42,Type,Linkname,Uname,Gname,Devmaj,Devmin,_43,_44}> when 'true' ->
		    %% Line 674
		    ( case Header of
			( <( {'tar_header',_45,_46,_47,_48,_49,_rec27,_50,_51,_52,_53,_54,_55,_56,_57}
			     -| ['compiler_generated'] )> when 'true' ->
			      %% Line 677
			      case apply 'write_string'/6
				       (#{#<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']]),
					  #<0>(8,1,'integer',['unsigned'|['big']])}#, 0, 100, Name, #{#<112>(8,1,'integer',['unsigned'|['big']]),
												      #<97>(8,1,'integer',['unsigned'|['big']]),
												      #<116>(8,1,'integer',['unsigned'|['big']]),
												      #<104>(8,1,'integer',['unsigned'|['big']])}#, ~{}~) of
				<{Block1,Pax0}> when 'true' ->
				    let <Block2> =
					apply %% Line 678
					      'write_octal'/4
					    (%% Line 678
					     Block1, %% Line 678
						     100, %% Line 678
							  8, %% Line 678
							     Mode)
				    in  %% Line 679
					case apply 'write_numeric'/6
						 (Block2, 108, 8, Uid, #{#<117>(8,1,'integer',['unsigned'|['big']]),
									 #<105>(8,1,'integer',['unsigned'|['big']]),
									 #<100>(8,1,'integer',['unsigned'|['big']])}#, Pax0) of
					  <{Block3,Pax1}> when 'true' ->
					      %% Line 680
					      case apply 'write_numeric'/6
						       (Block3, 116, 8, Gid, #{#<103>(8,1,'integer',['unsigned'|['big']]),
									       #<105>(8,1,'integer',['unsigned'|['big']]),
									       #<100>(8,1,'integer',['unsigned'|['big']])}#, Pax1) of
						<{Block4,Pax2}> when 'true' ->
						    %% Line 681
						    case apply 'write_numeric'/6
							     (Block4, 124, 12, Size, #{#<115>(8,1,'integer',['unsigned'|['big']]),
										       #<105>(8,1,'integer',['unsigned'|['big']]),
										       #<122>(8,1,'integer',['unsigned'|['big']]),
										       #<101>(8,1,'integer',['unsigned'|['big']])}#, Pax2) of
						      <{Block5,Pax3}> when 'true' ->
							  %% Line 682
							  case apply 'write_numeric'/6
								   (Block5, 136, 12, _rec27, #{}#, Pax3) of
							    <{Block6,Pax4}> when 'true' ->
								let <_13> =
								    #{#<%% Line 683
									Type>(%% Line 683
									      8,1,'integer',['unsigned'|['big']])}#
								in  %% Line 683
								    case apply 'write_string'/6
									     (Block6, 156, 1, _13, #{}#, Pax4) of
								      <{Block7,Pax5}> when 'true' ->
									  %% Line 684
									  case apply 'write_string'/6
										   (Block7, 157, 100, %% Line 685
												      Linkname, %% Line 685
														#{#<108>(8,1,'integer',['unsigned'|['big']]),
														  #<105>(8,1,'integer',['unsigned'|['big']]),
														  #<110>(8,1,'integer',['unsigned'|['big']]),
														  #<107>(8,1,'integer',['unsigned'|['big']]),
														  #<112>(8,1,'integer',['unsigned'|['big']]),
														  #<97>(8,1,'integer',['unsigned'|['big']]),
														  #<116>(8,1,'integer',['unsigned'|['big']]),
														  #<104>(8,1,'integer',['unsigned'|['big']])}#, %% Line 685
																				Pax5) of
									    <{Block8,Pax6}> when 'true' ->
										%% Line 686
										case apply 'write_string'/6
											 (Block8, 265, 32, %% Line 687
													   Uname, %% Line 687
														  #{#<117>(8,1,'integer',['unsigned'|['big']]),
														    #<110>(8,1,'integer',['unsigned'|['big']]),
														    #<97>(8,1,'integer',['unsigned'|['big']]),
														    #<109>(8,1,'integer',['unsigned'|['big']]),
														    #<101>(8,1,'integer',['unsigned'|['big']])}#, %% Line 687
																				  Pax6) of
										  <{Block9,Pax7}> when 'true' ->
										      %% Line 688
										      case apply 'write_string'/6
											       (Block9, 297, 32, %% Line 689
														 Gname, %% Line 689
															#{#<103>(8,1,'integer',['unsigned'|['big']]),
															  #<110>(8,1,'integer',['unsigned'|['big']]),
															  #<97>(8,1,'integer',['unsigned'|['big']]),
															  #<109>(8,1,'integer',['unsigned'|['big']]),
															  #<101>(8,1,'integer',['unsigned'|['big']])}#, %% Line 689
																					Pax7) of
											<{Block10,Pax8}> when 'true' ->
											    %% Line 690
											    case apply 'write_numeric'/6
												     (Block10, 329, 8, %% Line 691
														       Devmaj, %% Line 691
															       #{}#, %% Line 691
																     Pax8) of
											      <{Block11,Pax9}> when 'true' ->
												  %% Line 692
												  case apply 'write_numeric'/6
													   (Block11, 337, 8, %% Line 693
															     Devmin, %% Line 693
																     #{}#, %% Line 693
																	   Pax9) of
												    <{Block12,Pax10}> when 'true' ->
													%% Line 694
													case apply 'set_path'/2
														 (Block12, Pax10) of
													  <{Block13,Pax11}> when 'true' ->
													      let <_22> =
														  case %% Line 695
														       call 'maps':'size'
															   (Pax11) of
														    %% Line 696
														    <0> when 'true' ->
															[]
														    %% Line 697
														    <_59> when 'true' ->
															apply 'build_pax_entry'/3
															    (Header, Pax11, Opts)
														  end
													      in  let <Block14> =
														      apply %% Line 699
															    'set_format'/2
															  (%% Line 699
															   Block13, %% Line 699
																    4)
														  in  let <Block15> =
															  apply %% Line 700
																'set_checksum'/1
															      (%% Line 700
															       Block14)
														      in  %% Line 701
															  {'ok',[_22|[Block15|[]]]}
													  ( <_20> when 'true' ->
														primop 'match_fail'
														    ({'badmatch',_20})
													    -| ['compiler_generated'] )
													end
												    ( <_19> when 'true' ->
													  primop 'match_fail'
													      ({'badmatch',_19})
												      -| ['compiler_generated'] )
												  end
											      ( <_18> when 'true' ->
												    primop 'match_fail'
													({'badmatch',_18})
												-| ['compiler_generated'] )
											    end
											( <_17> when 'true' ->
											      primop 'match_fail'
												  ({'badmatch',_17})
											  -| ['compiler_generated'] )
										      end
										  ( <_16> when 'true' ->
											primop 'match_fail'
											    ({'badmatch',_16})
										    -| ['compiler_generated'] )
										end
									    ( <_15> when 'true' ->
										  primop 'match_fail'
										      ({'badmatch',_15})
									      -| ['compiler_generated'] )
									  end
								      ( <_14> when 'true' ->
									    primop 'match_fail'
										({'badmatch',_14})
									-| ['compiler_generated'] )
								    end
							    ( <_12> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_12})
							      -| ['compiler_generated'] )
							  end
						      ( <_11> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_11})
							-| ['compiler_generated'] )
						    end
						( <_10> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_10})
						  -| ['compiler_generated'] )
					      end
					  ( <_9> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_9})
					    -| ['compiler_generated'] )
					end
				( <_7> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_7})
				  -| ['compiler_generated'] )
			      end
			  -| ['compiler_generated'] )
			( <_58> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','tar_header'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_27,_26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_27,_26})
		  -| [{'function_name',{'build_header',2}}] )
	    -| ['compiler_generated'] )
	end
'set_path'/2 =
    %% Line 703
    fun (_0,_1) ->
	%% Line 705
	case call 'maps':'get'
		 (#{#<112>(8,1,'integer',['unsigned'|['big']]),
		    #<97>(8,1,'integer',['unsigned'|['big']]),
		    #<116>(8,1,'integer',['unsigned'|['big']]),
		    #<104>(8,1,'integer',['unsigned'|['big']])}#, _1, 'nil') of
	  %% Line 706
	  <'nil'> when 'true' ->
	      %% Line 707
	      {_0,_1}
	  %% Line 708
	  <PaxPath> when 'true' ->
	      %% Line 709
	      case apply 'split_ustar_path'/1
		       (PaxPath) of
		%% Line 710
		<{'ok',UstarName,UstarPrefix}> when 'true' ->
		    %% Line 711
		    case apply 'write_string'/6
			     (_0, 0, 100, %% Line 712
					  UstarName, %% Line 712
						     #{}#, %% Line 712
							   ~{}~) of
		      <{Block1,_9}> when 'true' ->
			  %% Line 713
			  case apply 'write_string'/6
				   (Block1, 345, 155, %% Line 714
						      UstarPrefix, %% Line 714
								   #{}#, %% Line 714
									 ~{}~) of
			    <{Block2,_10}> when 'true' ->
				let <_4> =
				    call %% Line 715
					 'maps':%% Line 715
						'remove'
					(%% Line 715
					 #{#<112>(8,1,'integer',['unsigned'|['big']]),
					   #<97>(8,1,'integer',['unsigned'|['big']]),
					   #<116>(8,1,'integer',['unsigned'|['big']]),
					   #<104>(8,1,'integer',['unsigned'|['big']])}#, _1)
				in  %% Line 715
				    {Block2,_4}
			    ( <_3> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_3})
			      -| ['compiler_generated'] )
			  end
		      ( <_2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_2})
			-| ['compiler_generated'] )
		    end
		%% Line 716
		<'false'> when 'true' ->
		    %% Line 717
		    {_0,_1}
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	end
'set_format'/2 =
    %% Line 721
    fun (_0,_1) ->
	case <_0,_1> of
	  <Block0,Format>
	      when let <_2> =
		    call %% Line 722
			 'erlang':%% Line 722
				  '=:='
			(%% Line 722
			 Format, %% Line 722
				 4)
		in  let <_3> =
			call %% Line 722
			     'erlang':%% Line 722
				      '=:='
			    (%% Line 722
			     Format, %% Line 722
				     5)
		    in  %% Line 722
			call 'erlang':'or'
			    (_2, _3) ->
	      let <Block1> =
		  apply %% Line 723
			'write_to_block'/3
		      (%% Line 723
		       Block0, %% Line 723
			       #{#<117>(8,1,'integer',['unsigned'|['big']]),
				 #<115>(8,1,'integer',['unsigned'|['big']]),
				 #<116>(8,1,'integer',['unsigned'|['big']]),
				 #<97>(8,1,'integer',['unsigned'|['big']]),
				 #<114>(8,1,'integer',['unsigned'|['big']]),
				 #<0>(8,1,'integer',['unsigned'|['big']])}#, %% Line 723
									     257)
	      in  %% Line 724
		  apply 'write_to_block'/3
		      (Block1, #{#<48>(8,1,'integer',['unsigned'|['big']]),
				 #<48>(8,1,'integer',['unsigned'|['big']])}#, 263)
	  %% Line 725
	  <_X_Block,Format> when 'true' ->
	      %% Line 726
	      call 'erlang':'throw'
		  ({'error',{'invalid_format',Format}})
	end
'set_checksum'/1 =
    %% Line 728
    fun (_0) ->
	let <Checksum> =
	    apply %% Line 729
		  'compute_checksum'/1
		(_0)
	in  %% Line 730
	    apply 'write_octal'/4
		(_0, 148, 8, Checksum)
'build_pax_entry'/3 =
    %% Line 732
    fun (_0,_1,_2) ->
	%% Line 733
	( case _0 of
	    ( <( {'tar_header',_rec28,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Filename> =
		      call %% Line 734
			   'filename':%% Line 734
				      'basename'
			  (_rec28)
		  in  let <Dir> =
			  call %% Line 735
			       'filename':%% Line 735
					  'dirname'
			      (_rec28)
		      in  let <Path2> =
			      call %% Line 736
				   'filename':%% Line 736
					      'join'
				  (%% Line 736
				   [Dir|[[80|[97|[120|[72|[101|[97|[100|[101|[114|[115|[46|[48]]]]]]]]]]]]|[Filename|[]]]])
			  in  let <AsciiPath> =
				  apply %% Line 737
					'to_ascii'/1
				      (%% Line 737
				       Path2)
			      in  let <_12> =
				      case <> of
					%% Line 738
					<>
					    when try
						  let <_10> =
						      call 'erlang':'byte_size'
							  (AsciiPath)
						  in  call 'erlang':'>'
							  (_10, 100)
					      of <Try> ->
						  Try
					      catch <T,R> ->
						  'false' ->
					    %% Line 739
					    call 'erlang':'binary_part'
						(AsciiPath, 0, 99)
					%% Line 740
					<> when 'true' ->
					    %% Line 741
					    AsciiPath
				      end
				  in  let <Keys> =
					  call %% Line 743
					       'maps':%% Line 743
						      'keys'
					      (_1)
				      in  let <SortedKeys> =
					      call %% Line 744
						   'lists':%% Line 744
							   'sort'
						  (%% Line 744
						   Keys)
					  in  let <PaxFile> =
						  apply %% Line 745
							'build_pax_file'/2
						      (%% Line 745
						       SortedKeys, _1)
					      in  let <Size> =
						      call %% Line 746
							   'erlang':%% Line 746
								    'byte_size'
							  (%% Line 746
							   PaxFile)
						  in  let <_18> =
							  call %% Line 748
							       'erlang':%% Line 748
									'byte_size'
							      (%% Line 748
							       PaxFile)
						      in  let <_19> =
							      call %% Line 748
								   'erlang':%% Line 748
									    'rem'
								  (_18, %% Line 748
									512)
							  in  let <_20> =
								  call %% Line 747
								       'erlang':%% Line 747
										'-'
								      (%% Line 747
								       512, _19)
							      in  let <Padding> =
								      call %% Line 748
									   'erlang':%% Line 748
										    'rem'
									  (_20, %% Line 748
										512)
								  in  let <Pad> =
									  #{#<%% Line 749
									      0>(%% Line 749
										 Padding,8,'integer',['unsigned'|['big']])}#
								      in  let <_29> =
									      call %% Line 751
										   'unicode':%% Line 751
											     'characters_to_list'
										  (_12)
									  in  %% Line 753
									      ( case _0 of
										  ( <( {'tar_header',_49,_50,_51,_52,_53,_rec29,_54,_55,_56,_57,_58,_59,_60,_61}
										       -| ['compiler_generated'] )> when 'true' ->
											%% Line 754
											( case _0 of
											    ( <( {'tar_header',_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_rec30,_75}
												 -| ['compiler_generated'] )> when 'true' ->
												  %% Line 755
												  ( case _0 of
												      ( <( {'tar_header',_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_rec31}
													   -| ['compiler_generated'] )> when 'true' ->
													    let <PaxHeader> =
														{'tar_header',_29,33188,0,0,Size,_rec29,%% Line 756
																			120,[],[],[],0,0,_rec30,_rec31}
													    in  %% Line 758
														case apply 'build_header'/2
															 (PaxHeader, _2) of
														  <{'ok',PaxHeaderData}> when 'true' ->
														      %% Line 759
														      [PaxHeaderData|[PaxFile|[Pad|[]]]]
														  ( <_31> when 'true' ->
															primop 'match_fail'
															    ({'badmatch',_31})
														    -| ['compiler_generated'] )
														end
													-| ['compiler_generated'] )
												      ( <_90> when 'true' ->
													    ( call ( 'erlang'
														     -| ['compiler_generated'] ):( 'error'
																		   -| ['compiler_generated'] )
														  (( {'badrecord','tar_header'}
														     -| ['compiler_generated'] ))
													      -| ['compiler_generated'] )
													-| ['compiler_generated'] )
												    end
												    -| ['compiler_generated'] )
											      -| ['compiler_generated'] )
											    ( <_76> when 'true' ->
												  ( call ( 'erlang'
													   -| ['compiler_generated'] ):( 'error'
																	 -| ['compiler_generated'] )
													(( {'badrecord','tar_header'}
													   -| ['compiler_generated'] ))
												    -| ['compiler_generated'] )
											      -| ['compiler_generated'] )
											  end
											  -| ['compiler_generated'] )
										    -| ['compiler_generated'] )
										  ( <_62> when 'true' ->
											( call ( 'erlang'
												 -| ['compiler_generated'] ):( 'error'
															       -| ['compiler_generated'] )
											      (( {'badrecord','tar_header'}
												 -| ['compiler_generated'] ))
											  -| ['compiler_generated'] )
										    -| ['compiler_generated'] )
										end
										-| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_48> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','tar_header'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'build_pax_file'/2 =
    %% Line 761
    fun (_0,_1) ->
	%% Line 762
	apply 'build_pax_file'/3
	    (_0, _1, [])
'build_pax_file'/3 =
    %% Line 763
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[],_20,Acc> when 'true' ->
	      %% Line 764
	      call 'unicode':'characters_to_binary'
		  (Acc)
	  %% Line 765
	  <[K|Rest],Attrs,Acc> when 'true' ->
	      let <V> =
		  call %% Line 766
		       'maps':%% Line 766
			      'get'
		      (%% Line 766
		       K, %% Line 766
			  Attrs)
	      in  let <_5> =
		      apply %% Line 767
			    'sizeof'/1
			  (%% Line 767
			   K)
		  in  let <_4> =
			  apply %% Line 767
				'sizeof'/1
			      (%% Line 767
			       V)
		      in  let <_6> =
			      call %% Line 767
				   'erlang':%% Line 767
					    '+'
				  (_5, _4)
			  in  let <Size> =
				  call %% Line 767
				       'erlang':%% Line 767
						'+'
				      (_6, %% Line 767
					   3)
			      in  let <_8> =
				      apply %% Line 768
					    'sizeof'/1
					  (%% Line 768
					   Size)
				  in  let <Size2> =
					  call %% Line 768
					       'erlang':%% Line 768
							'+'
					      (_8, %% Line 768
						   Size)
				      in  let <Key> =
					      apply %% Line 769
						    'to_string'/1
						  (%% Line 769
						   K)
					  in  let <Value> =
						  apply %% Line 770
							'to_string'/1
						      (%% Line 770
						       V)
					      in  let <_12> =
						      call %% Line 771
							   'io_lib':%% Line 771
								    'format'
							  (%% Line 771
							   [126|[66|[32|[126|[116|[115|[61|[126|[116|[115|[10]]]]]]]]]]], %% Line 771
															  [Size2|[Key|[Value|[]]]])
						  in  let <Record> =
							  call %% Line 771
							       'unicode':%% Line 771
									 'characters_to_binary'
							      (_12)
						      in  %% Line 772
							  case <> of
							    <>
								when try
								      let <_14> =
									  call 'erlang':'byte_size'
									      (Record)
								      in  call 'erlang':'=/='
									      (_14, Size2)
								  of <Try> ->
								      Try
								  catch <T,R> ->
								      'false' ->
								let <Size3> =
								    call %% Line 773
									 'erlang':%% Line 773
										  'byte_size'
									(%% Line 773
									 Record)
								in  let <Record2> =
									call %% Line 774
									     'io_lib':%% Line 774
										      'format'
									    (%% Line 774
									     [126|[66|[32|[126|[116|[115|[61|[126|[116|[115|[10]]]]]]]]]]], %% Line 774
																	    [Size3|[Key|[Value|[]]]])
								    in  %% Line 775
									apply 'build_pax_file'/3
									    (Rest, Attrs, [Acc|[Record2|[]]])
							    %% Line 776
							    <> when 'true' ->
								%% Line 777
								apply 'build_pax_file'/3
								    (Rest, Attrs, [Acc|[Record|[]]])
							  end
	  ( <_19,_18,_17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_19,_18,_17})
		  -| [{'function_name',{'build_pax_file',3}}] )
	    -| ['compiler_generated'] )
	end
'sizeof'/1 =
    %% Line 780
    fun (_0) ->
	case _0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      %% Line 781
	      call 'erlang':'byte_size'
		  (Bin)
	  %% Line 782
	  <List>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 783
	      call 'erlang':'length'
		  (List)
	  %% Line 784
	  <N>
	      when call 'erlang':'is_integer'
		    (_0) ->
	      let <_1> =
		  call %% Line 785
		       'erlang':%% Line 785
				'integer_to_binary'
		      (%% Line 785
		       N)
	      in  %% Line 785
		  call 'erlang':'byte_size'
		      (_1)
	  %% Line 786
	  <N>
	      when call 'erlang':'is_float'
		    (_0) ->
	      let <_2> =
		  call %% Line 787
		       'erlang':%% Line 787
				'float_to_binary'
		      (%% Line 787
		       N)
	      in  %% Line 787
		  call 'erlang':'byte_size'
		      (_2)
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'sizeof',1}}] )
	    -| ['compiler_generated'] )
	end
'to_string'/1 =
    %% Line 789
    fun (_0) ->
	case _0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      %% Line 790
	      call 'unicode':'characters_to_list'
		  (Bin)
	  %% Line 791
	  <List>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 792
	      List
	  %% Line 793
	  <N>
	      when call 'erlang':'is_integer'
		    (_0) ->
	      %% Line 794
	      call 'erlang':'integer_to_list'
		  (N)
	  %% Line 795
	  <N>
	      when call 'erlang':'is_float'
		    (_0) ->
	      %% Line 796
	      call 'erlang':'float_to_list'
		  (N)
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'to_string',1}}] )
	    -| ['compiler_generated'] )
	end
'split_ustar_path'/1 =
    %% Line 798
    fun (_0) ->
	let <Len> =
	    call %% Line 799
		 'erlang':%% Line 799
			  'length'
		(_0)
	in  let <_2> =
		apply %% Line 800
		      'is_ascii'/1
		    (_0)
	    in  let <NotAscii> =
		    call %% Line 800
			 'erlang':%% Line 800
				  'not'
			(_2)
		in  %% Line 801
		    case <> of
		      <>
			  when let <_4> =
				call 'erlang':'=<'
				    (Len, 100)
			    in  call 'erlang':'or'
				    (_4, NotAscii) ->
			  %% Line 802
			  'false'
		      %% Line 803
		      <> when 'true' ->
			  let <PathBin> =
			      call %% Line 804
				   'binary':%% Line 804
					    'list_to_bin'
				  (_0)
			  in  %% Line 805
			      case call 'binary':'split'
				       (PathBin, [#{#<47>(8,1,'integer',['unsigned'|['big']])}#], ['global'|['trim_all']]) of
				%% Line 806
				<[Part|[]]>
				    when try
					  let <_7> =
					      call 'erlang':'byte_size'
						  (Part)
					  in  call 'erlang':'>='
						  (_7, 100)
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false' ->
				    %% Line 807
				    'false'
				%% Line 808
				<Parts> when 'true' ->
				    %% Line 809
				    case call 'lists':'last'
					     (Parts) of
				      %% Line 810
				      <Name>
					  when try
						let <_8> =
						    call 'erlang':'byte_size'
							(Name)
						in  call 'erlang':'>='
							(_8, 100)
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  %% Line 811
					  'false'
				      %% Line 812
				      <Name> when 'true' ->
					  let <_9> =
					      call %% Line 813
						   'erlang':%% Line 813
							    'length'
						  (%% Line 813
						   Parts)
					  in  let <_10> =
						  call %% Line 813
						       'erlang':%% Line 813
								'-'
						      (_9, %% Line 813
							   1)
					      in  let <Parts2> =
						      call %% Line 813
							   'lists':%% Line 813
								   'sublist'
							  (%% Line 813
							   Parts, _10)
						  in  %% Line 814
						      apply 'join_split_ustar_path'/2
							  (Parts2, {'ok',Name,'nil'})
				    end
			      end
		    end
'join_split_ustar_path'/2 =
    %% Line 819
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],Acc> when 'true' ->
	      %% Line 820
	      Acc
	  %% Line 821
	  <[Part|_9],{'ok',_10,'nil'}>
	      when %% Line 822
		try
		    let <_2> =
			call 'erlang':'byte_size'
			    (Part)
		    in  call 'erlang':'>'
			    (_2, 155)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 823
	      'false'
	  %% Line 824
	  <[Part|_11],{'ok',_X_Name,Acc}>
	      when %% Line 825
		try
		    let <_4> =
			call 'erlang':'byte_size'
			    (Part)
		    in  let <_3> =
			    call 'erlang':'byte_size'
				(Acc)
			in  let <_5> =
				call 'erlang':'+'
				    (_4, _3)
			    in  call 'erlang':'>'
				    (_5, 155)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 826
	      'false'
	  %% Line 827
	  <[Part|Rest],{'ok',Name,'nil'}> when 'true' ->
	      %% Line 828
	      apply 'join_split_ustar_path'/2
		  (Rest, {'ok',Name,Part})
	  %% Line 829
	  <[Part|Rest],{'ok',Name,Acc}> when 'true' ->
	      let <_6> =
		  #{#<%% Line 830
		      Acc>(%% Line 830
			   'all',8,'binary',['unsigned'|['big']]),
		    #<%% Line 830
		      47>(%% Line 830
			  8,1,'integer',['unsigned'|['big']]),
		    #<%% Line 830
		      Part>(%% Line 830
			    'all',8,'binary',['unsigned'|['big']])}#
	      in  %% Line 830
		  apply 'join_split_ustar_path'/2
		      (Rest, {'ok',Name,_6})
	  ( <_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7})
		  -| [{'function_name',{'join_split_ustar_path',2}}] )
	    -| ['compiler_generated'] )
	end
'write_octal'/4 =
    %% Line 832
    fun (_0,_1,_2,_3) ->
	let <_5> =
	    apply %% Line 833
		  'format_octal'/1
		(_3)
	in  let <_4> =
		call %% Line 833
		     'erlang':%% Line 833
			      '-'
		    (_2, %% Line 833
			 1)
	    in  let <Octal> =
		    apply %% Line 833
			  'zero_pad'/2
			(_5, _4)
		in  %% Line 834
		    case <> of
		      <>
			  when try
				let <_7> =
				    call 'erlang':'byte_size'
					(Octal)
				in  call 'erlang':'<'
					(_7, _2)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false' ->
			  %% Line 835
			  apply 'write_to_block'/3
			      (_0, Octal, _1)
		      %% Line 836
		      <> when 'true' ->
			  %% Line 837
			  call 'erlang':'throw'
			      ({'error',{'write_failed','octal_field_too_long'}})
		    end
'write_string'/6 =
    %% Line 840
    fun (_0,_1,_2,_3,_4,_5) ->
	let <_6> =
	    apply %% Line 841
		  'is_ascii'/1
		(_3)
	in  let <NotAscii> =
		call %% Line 841
		     'erlang':%% Line 841
			      'not'
		    (_6)
	    in  %% Line 842
		case <> of
		  <>
		      when try
			    ( let <_13> =
				  case call 'erlang':'=/='
					   (_4, #{}#) of
				    ( <( 'true'
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_10> =
					      call 'erlang':'length'
						  (_3)
					  in  ( case call 'erlang':'>'
							 (_10, _2) of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							'true'
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							NotAscii
						    -| ['compiler_generated'] )
						  ( <_9> when 'true' ->
							_9
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <( 'false'
					 -| ['compiler_generated'] )> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				    ( <_8> when 'true' ->
					  _8
				      -| ['compiler_generated'] )
				  end
			      in  ( call 'erlang':'=:='
					(( _13
					   -| ['compiler_generated'] ), 'true')
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false' ->
		      let <Pax1> =
			  call %% Line 843
			       'maps':%% Line 843
				      'put'
			      (_4, _3, _5)
		      in  %% Line 844
			  {_0,Pax1}
		  %% Line 845
		  <> when 'true' ->
		      let <Formatted> =
			  apply %% Line 846
				'format_string'/2
			      (_3, _2)
		      in  let <_16> =
			      apply %% Line 847
				    'write_to_block'/3
				  (_0, %% Line 847
				       Formatted, _1)
			  in  %% Line 847
			      {_16,_5}
		end
'write_numeric'/6 =
    %% Line 849
    fun (_0,_1,_2,_3,_4,_5) ->
	let <_7> =
	    apply %% Line 851
		  'format_octal'/1
		(_3)
	in  let <_6> =
		call %% Line 851
		     'erlang':%% Line 851
			      '-'
		    (_2, %% Line 851
			 1)
	    in  let <Octal> =
		    apply %% Line 851
			  'zero_pad'/2
			(_7, _6)
		in  %% Line 852
		    case <> of
		      <>
			  when try
				let <_9> =
				    call 'erlang':'byte_size'
					(Octal)
				in  call 'erlang':'<'
					(_9, _2)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false' ->
			  let <_10> =
			      apply %% Line 853
				    'write_to_block'/3
				  (_0, %% Line 853
				       [Octal|[0]], _1)
			  in  %% Line 853
			      {_10,_5}
		      %% Line 854
		      <>
			  when call 'erlang':'=/='
				(_4,
				 #{}#) ->
			  let <Pax1> =
			      call %% Line 855
				   'maps':%% Line 855
					  'put'
				  (_4, _3, _5)
			  in  %% Line 856
			      {_0,Pax1}
		      %% Line 857
		      <> when 'true' ->
			  %% Line 858
			  call 'erlang':'throw'
			      ({'error',{'write_failed','numeric_field_too_long'}})
		    end
'zero_pad'/2 =
    %% Line 861
    fun (_0,_1) ->
	case <_0,_1> of
	  <Str,Size>
	      when try
		    let <_2> =
			call 'erlang':'byte_size'
			    (Str)
		    in  call 'erlang':'>='
			    (_2, Size)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 862
	      Str
	  %% Line 863
	  <Str,Size> when 'true' ->
	      let <_3> =
		  call %% Line 864
		       'erlang':%% Line 864
				'byte_size'
		      (%% Line 864
		       Str)
	      in  let <Padding> =
		      call %% Line 864
			   'erlang':%% Line 864
				    '-'
			  (%% Line 864
			   Size, _3)
		  in  let <Pad> =
			  call %% Line 865
			       'binary':%% Line 865
					'copy'
			      (%% Line 865
			       #{#<48>(8,1,'integer',['unsigned'|['big']])}#, %% Line 865
									      Padding)
		      in  %% Line 866
			  #{#<Pad>('all',8,'binary',['unsigned'|['big']]),
			    #<Str>('all',8,'binary',['unsigned'|['big']])}#
	end
'read_block'/1 =
    %% Line 872
    fun (_0) ->
	%% Line 873
	case apply 'do_read'/2
		 (_0, 512) of
	  %% Line 874
	  <'eof'> when 'true' ->
	      %% Line 875
	      call 'erlang':'throw'
		  ({'error','eof'})
	  %% Line 877
	  <{'ok',#{#<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']])}#,Reader1}> when 'true' ->
	      %% Line 878
	      case apply 'do_read'/2
		       (Reader1, 512) of
		%% Line 879
		<'eof'> when 'true' ->
		    %% Line 883
		    'eof'
		%% Line 884
		<{'ok',#{#<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']])}#,_X_Reader2}> when 'true' ->
		    %% Line 885
		    'eof'
		%% Line 886
		<{'ok',_X_Block,_X_Reader2}> when 'true' ->
		    %% Line 887
		    call 'erlang':'throw'
			({'error','invalid_end_of_archive'})
		%% Line 888
		<Err = {'error',_4}> when 'true' ->
		    %% Line 889
		    call 'erlang':'throw'
			(Err)
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 891
	  <_@r0 = {'ok',Block,Reader1}>
	      when call 'erlang':'is_binary'
		    (Block) ->
	      %% Line 892
	      _@r0
	  %% Line 893
	  <Err = {'error',_5}> when 'true' ->
	      %% Line 894
	      call 'erlang':'throw'
		  (Err)
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_2})
	    -| ['compiler_generated'] )
	end
'get_header'/1 =
    %% Line 897
    fun (_0) ->
	case _0 of
	  <Reader = {'reader',_3,_4,_5,_6}> when 'true' ->
	      %% Line 898
	      case apply 'read_block'/1
		       (Reader) of
		%% Line 899
		<'eof'> when 'true' ->
		    %% Line 900
		    'eof'
		%% Line 901
		<{'ok',Block,Reader1}> when 'true' ->
		    %% Line 902
		    apply 'convert_header'/2
			(Block, Reader1)
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_1})
		  -| ['compiler_generated'] )
	      end
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'get_header',1}}] )
	    -| ['compiler_generated'] )
	end
'to_v7'/1 =
    %% Line 906
    fun (_0) ->
	case _0 of
	  <Bin>
	      when try
		    let <_1> =
			call 'erlang':'is_binary'
			    (_0)
		    in  let <_2> =
			    call 'erlang':'byte_size'
				(_0)
			in  let <_3> =
				call 'erlang':'=:='
				    (_2, 512)
			    in  call 'erlang':'and'
				    (_1, _3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_12> =
		  call %% Line 908
		       'erlang':%% Line 908
				'binary_part'
		      (%% Line 908
		       Bin, %% Line 908
			    0, %% Line 908
			       100)
	      in  let <_11> =
		      call %% Line 909
			   'erlang':%% Line 909
				    'binary_part'
			  (%% Line 909
			   Bin, %% Line 909
				100, %% Line 909
				     8)
		  in  let <_10> =
			  call %% Line 910
			       'erlang':%% Line 910
					'binary_part'
			      (%% Line 910
			       Bin, %% Line 910
				    108, %% Line 910
					 8)
		      in  let <_9> =
			      call %% Line 911
				   'erlang':%% Line 911
					    'binary_part'
				  (%% Line 911
				   Bin, %% Line 911
					116, %% Line 911
					     8)
			  in  let <_8> =
				  call %% Line 912
				       'erlang':%% Line 912
						'binary_part'
				      (%% Line 912
				       Bin, %% Line 912
					    124, %% Line 912
						 12)
			      in  let <_7> =
				      call %% Line 913
					   'erlang':%% Line 913
						    'binary_part'
					  (%% Line 913
					   Bin, %% Line 913
						136, %% Line 913
						     12)
				  in  let <_6> =
					  call %% Line 914
					       'erlang':%% Line 914
							'binary_part'
					      (%% Line 914
					       Bin, %% Line 914
						    148, %% Line 914
							 8)
				      in  let <_5> =
					      call %% Line 915
						   'binary':%% Line 915
							    'at'
						  (%% Line 915
						   Bin, %% Line 915
							156)
					  in  let <_4> =
						  call %% Line 916
						       'erlang':%% Line 916
								'binary_part'
						      (%% Line 916
						       Bin, %% Line 916
							    157, %% Line 916
								 100)
					      in  %% Line 907
						  {'header_v7',_12,_11,_10,_9,_8,_7,_6,_5,_4}
	  %% Line 918
	  <_14> when 'true' ->
	      %% Line 919
	      {'error','header_block_too_small'}
	end
'to_gnu'/2 =
    %% Line 921
    fun (_0,_1) ->
	case <_0,_1> of
	  <V7 = {'header_v7',_20,_21,_22,_23,_24,_25,_26,_27,_28},Bin>
	      when %% Line 922
		try
		    let <_2> =
			call 'erlang':'is_binary'
			    (Bin)
		    in  let <_3> =
			    call 'erlang':'byte_size'
				(Bin)
			in  let <_4> =
				call 'erlang':'=:='
				    (_3, 512)
			    in  call 'erlang':'and'
				    (_2, _4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_17> =
		  call %% Line 925
		       'erlang':%% Line 925
				'binary_part'
		      (%% Line 925
		       Bin, %% Line 925
			    257, %% Line 925
				 6)
	      in  let <_16> =
		      call %% Line 926
			   'erlang':%% Line 926
				    'binary_part'
			  (%% Line 926
			   Bin, %% Line 926
				263, %% Line 926
				     2)
		  in  let <_15> =
			  call %% Line 927
			       'erlang':%% Line 927
					'binary_part'
			      (%% Line 927
			       Bin, %% Line 927
				    265, %% Line 927
					 32)
		      in  let <_14> =
			      call %% Line 928
				   'erlang':%% Line 928
					    'binary_part'
				  (%% Line 928
				   Bin, %% Line 928
					297, %% Line 928
					     32)
			  in  let <_13> =
				  call %% Line 929
				       'erlang':%% Line 929
						'binary_part'
				      (%% Line 929
				       Bin, %% Line 929
					    329, %% Line 929
						 8)
			      in  let <_12> =
				      call %% Line 930
					   'erlang':%% Line 930
						    'binary_part'
					  (%% Line 930
					   Bin, %% Line 930
						337, %% Line 930
						     8)
				  in  let <_11> =
					  call %% Line 931
					       'erlang':%% Line 931
							'binary_part'
					      (%% Line 931
					       Bin, %% Line 931
						    345, %% Line 931
							 12)
				      in  let <_10> =
					      call %% Line 932
						   'erlang':%% Line 932
							    'binary_part'
						  (%% Line 932
						   Bin, %% Line 932
							357, %% Line 932
							     12)
					  in  let <_8> =
						  call %% Line 933
						       'erlang':%% Line 933
								'binary_part'
						      (%% Line 933
						       Bin, %% Line 933
							    386, %% Line 933
								 97)
					      in  let <_9> =
						      apply %% Line 933
							    'to_sparse_array'/1
							  (_8)
						  in  let <_5> =
							  call %% Line 934
							       'erlang':%% Line 934
									'binary_part'
							      (%% Line 934
							       Bin, %% Line 934
								    483, %% Line 934
									 12)
						      in  %% Line 923
							  {'header_gnu',%% Line 924
									V7,_17,_16,_15,_14,_13,_12,_11,_10,_9,_5}
	  ( <_19,_18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_19,_18})
		  -| [{'function_name',{'to_gnu',2}}] )
	    -| ['compiler_generated'] )
	end
'to_star'/2 =
    %% Line 937
    fun (_0,_1) ->
	case <_0,_1> of
	  <V7 = {'header_v7',_17,_18,_19,_20,_21,_22,_23,_24,_25},Bin>
	      when %% Line 938
		try
		    let <_2> =
			call 'erlang':'is_binary'
			    (Bin)
		    in  let <_3> =
			    call 'erlang':'byte_size'
				(Bin)
			in  let <_4> =
				call 'erlang':'=:='
				    (_3, 512)
			    in  call 'erlang':'and'
				    (_2, _4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_14> =
		  call %% Line 941
		       'erlang':%% Line 941
				'binary_part'
		      (%% Line 941
		       Bin, %% Line 941
			    257, %% Line 941
				 6)
	      in  let <_13> =
		      call %% Line 942
			   'erlang':%% Line 942
				    'binary_part'
			  (%% Line 942
			   Bin, %% Line 942
				263, %% Line 942
				     2)
		  in  let <_12> =
			  call %% Line 943
			       'erlang':%% Line 943
					'binary_part'
			      (%% Line 943
			       Bin, %% Line 943
				    265, %% Line 943
					 32)
		      in  let <_11> =
			      call %% Line 944
				   'erlang':%% Line 944
					    'binary_part'
				  (%% Line 944
				   Bin, %% Line 944
					297, %% Line 944
					     32)
			  in  let <_10> =
				  call %% Line 945
				       'erlang':%% Line 945
						'binary_part'
				      (%% Line 945
				       Bin, %% Line 945
					    329, %% Line 945
						 8)
			      in  let <_9> =
				      call %% Line 946
					   'erlang':%% Line 946
						    'binary_part'
					  (%% Line 946
					   Bin, %% Line 946
						337, %% Line 946
						     8)
				  in  let <_8> =
					  call %% Line 947
					       'erlang':%% Line 947
							'binary_part'
					      (%% Line 947
					       Bin, %% Line 947
						    345, %% Line 947
							 131)
				      in  let <_7> =
					      call %% Line 948
						   'erlang':%% Line 948
							    'binary_part'
						  (%% Line 948
						   Bin, %% Line 948
							476, %% Line 948
							     12)
					  in  let <_6> =
						  call %% Line 949
						       'erlang':%% Line 949
								'binary_part'
						      (%% Line 949
						       Bin, %% Line 949
							    488, %% Line 949
								 12)
					      in  let <_5> =
						      call %% Line 950
							   'erlang':%% Line 950
								    'binary_part'
							  (%% Line 950
							   Bin, %% Line 950
								508, %% Line 950
								     4)
						  in  %% Line 939
						      {'header_star',%% Line 940
								     V7,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5}
	  ( <_16,_15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15})
		  -| [{'function_name',{'to_star',2}}] )
	    -| ['compiler_generated'] )
	end
'to_ustar'/2 =
    %% Line 953
    fun (_0,_1) ->
	case <_0,_1> of
	  <V7 = {'header_v7',_14,_15,_16,_17,_18,_19,_20,_21,_22},Bin>
	      when %% Line 954
		try
		    let <_2> =
			call 'erlang':'is_binary'
			    (Bin)
		    in  let <_3> =
			    call 'erlang':'byte_size'
				(Bin)
			in  let <_4> =
				call 'erlang':'=:='
				    (_3, 512)
			    in  call 'erlang':'and'
				    (_2, _4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_11> =
		  call %% Line 957
		       'erlang':%% Line 957
				'binary_part'
		      (%% Line 957
		       Bin, %% Line 957
			    257, %% Line 957
				 6)
	      in  let <_10> =
		      call %% Line 958
			   'erlang':%% Line 958
				    'binary_part'
			  (%% Line 958
			   Bin, %% Line 958
				263, %% Line 958
				     2)
		  in  let <_9> =
			  call %% Line 959
			       'erlang':%% Line 959
					'binary_part'
			      (%% Line 959
			       Bin, %% Line 959
				    265, %% Line 959
					 32)
		      in  let <_8> =
			      call %% Line 960
				   'erlang':%% Line 960
					    'binary_part'
				  (%% Line 960
				   Bin, %% Line 960
					297, %% Line 960
					     32)
			  in  let <_7> =
				  call %% Line 961
				       'erlang':%% Line 961
						'binary_part'
				      (%% Line 961
				       Bin, %% Line 961
					    329, %% Line 961
						 8)
			      in  let <_6> =
				      call %% Line 962
					   'erlang':%% Line 962
						    'binary_part'
					  (%% Line 962
					   Bin, %% Line 962
						337, %% Line 962
						     8)
				  in  let <_5> =
					  call %% Line 963
					       'erlang':%% Line 963
							'binary_part'
					      (%% Line 963
					       Bin, %% Line 963
						    345, %% Line 963
							 155)
				      in  %% Line 955
					  {'header_ustar',%% Line 956
							  V7,_11,_10,_9,_8,_7,_6,_5}
	  ( <_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12})
		  -| [{'function_name',{'to_ustar',2}}] )
	    -| ['compiler_generated'] )
	end
'to_sparse_array'/1 =
    %% Line 966
    fun (_0) ->
	case _0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      let <_1> =
		  call %% Line 967
		       'erlang':%% Line 967
				'byte_size'
		      (%% Line 967
		       Bin)
	      in  let <MaxEntries> =
		      call %% Line 967
			   'erlang':%% Line 967
				    'div'
			  (_1, %% Line 967
			       24)
		  in  let <_3> =
			  call %% Line 968
			       'erlang':%% Line 968
					'*'
			      (%% Line 968
			       24, %% Line 968
				   MaxEntries)
		      in  let <_4> =
			      call %% Line 968
				   'binary':%% Line 968
					    'at'
				  (%% Line 968
				   Bin, _3)
			  in  let <IsExtended> =
				  call %% Line 968
				       'erlang':%% Line 968
						'=:='
				      (%% Line 968
				       1, _4)
			      in  let <_6> =
				      call %% Line 969
					   'erlang':%% Line 969
						    '-'
					  (%% Line 969
					   MaxEntries, %% Line 969
						       1)
				  in  let <Entries> =
					  apply %% Line 969
						'parse_sparse_entries'/3
					      (%% Line 969
					       Bin, _6, %% Line 969
							[])
				      in  %% Line 970
					  {'sparse_array',%% Line 971
							  Entries,%% Line 973
								  IsExtended,%% Line 972
									     MaxEntries}
	  ( <_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8})
		  -| [{'function_name',{'to_sparse_array',1}}] )
	    -| ['compiler_generated'] )
	end
'parse_sparse_entries'/3 =
    %% Line 976
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <#{}#,_11,Acc> when 'true' ->
	      %% Line 977
	      Acc
	  %% Line 978
	  <_12,-1,Acc> when 'true' ->
	      %% Line 979
	      Acc
	  %% Line 980
	  <Bin,N,Acc> when 'true' ->
	      let <_3> =
		  call %% Line 981
		       'erlang':%% Line 981
				'*'
		      (%% Line 981
		       N, %% Line 981
			  24)
	      in  let <_4> =
		      call %% Line 981
			   'erlang':%% Line 981
				    'binary_part'
			  (%% Line 981
			   Bin, _3, %% Line 981
				    24)
		  in  %% Line 981
		      case apply 'to_sparse_entry'/1
			       (_4) of
			%% Line 982
			<'nil'> when 'true' ->
			    let <_5> =
				call %% Line 983
				     'erlang':%% Line 983
					      '-'
				    (%% Line 983
				     N, %% Line 983
					1)
			    in  %% Line 983
				apply 'parse_sparse_entries'/3
				    (Bin, _5, Acc)
			%% Line 984
			<Entry = {'sparse_entry',_13,_14}> when 'true' ->
			    let <_6> =
				call %% Line 985
				     'erlang':%% Line 985
					      '-'
				    (%% Line 985
				     N, %% Line 985
					1)
			    in  %% Line 985
				apply 'parse_sparse_entries'/3
				    (Bin, _6, [Entry|Acc])
			( <_7> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_7})
			  -| ['compiler_generated'] )
		      end
	end
'to_sparse_entry'/1 =
    %% Line 989
    fun (_0) ->
	case _0 of
	  <Bin>
	      when try
		    let <_1> =
			call 'erlang':'is_binary'
			    (_0)
		    in  let <_2> =
			    call 'erlang':'byte_size'
				(_0)
			in  let <_3> =
				call 'erlang':'=:='
				    (_2, 24)
			    in  call 'erlang':'and'
				    (_1, _3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <OffsetBin> =
		  call %% Line 990
		       'erlang':%% Line 990
				'binary_part'
		      (%% Line 990
		       Bin, %% Line 990
			    0, %% Line 990
			       12)
	      in  let <NumBytesBin> =
		      call %% Line 991
			   'erlang':%% Line 991
				    'binary_part'
			  (%% Line 991
			   Bin, %% Line 991
				12, %% Line 991
				    12)
		  in  %% Line 992
		      case <OffsetBin,NumBytesBin> of
			%% Line 993
			<( #{( #<( 0
				   -| ['compiler_generated'] )>(( 8
								  -| ['compiler_generated'] ),( 1
												-| ['compiler_generated'] ),( 'integer'
															      -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			    -| ['compiler_generated'] ))
			       -| ['compiler_generated'] ),
			     ( #<( 0
				   -| ['compiler_generated'] )>(( 8
								  -| ['compiler_generated'] ),( 1
												-| ['compiler_generated'] ),( 'integer'
															      -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			    -| ['compiler_generated'] ))
			       -| ['compiler_generated'] ),
			     ( #<( 0
				   -| ['compiler_generated'] )>(( 8
								  -| ['compiler_generated'] ),( 1
												-| ['compiler_generated'] ),( 'integer'
															      -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			    -| ['compiler_generated'] ))
			       -| ['compiler_generated'] ),
			     ( #<( 0
				   -| ['compiler_generated'] )>(( 8
								  -| ['compiler_generated'] ),( 1
												-| ['compiler_generated'] ),( 'integer'
															      -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			    -| ['compiler_generated'] ))
			       -| ['compiler_generated'] ),
			     ( #<( 0
				   -| ['compiler_generated'] )>(( 8
								  -| ['compiler_generated'] ),( 1
												-| ['compiler_generated'] ),( 'integer'
															      -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			    -| ['compiler_generated'] ))
			       -| ['compiler_generated'] ),
			     ( #<( 0
				   -| ['compiler_generated'] )>(( 8
								  -| ['compiler_generated'] ),( 1
												-| ['compiler_generated'] ),( 'integer'
															      -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			    -| ['compiler_generated'] ))
			       -| ['compiler_generated'] ),
			     ( #<( 0
				   -| ['compiler_generated'] )>(( 8
								  -| ['compiler_generated'] ),( 1
												-| ['compiler_generated'] ),( 'integer'
															      -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			    -| ['compiler_generated'] ))
			       -| ['compiler_generated'] ),
			     ( #<( 0
				   -| ['compiler_generated'] )>(( 8
								  -| ['compiler_generated'] ),( 1
												-| ['compiler_generated'] ),( 'integer'
															      -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			    -| ['compiler_generated'] ))
			       -| ['compiler_generated'] ),
			     ( #<( 0
				   -| ['compiler_generated'] )>(( 8
								  -| ['compiler_generated'] ),( 1
												-| ['compiler_generated'] ),( 'integer'
															      -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			    -| ['compiler_generated'] ))
			       -| ['compiler_generated'] ),
			     ( #<( 0
				   -| ['compiler_generated'] )>(( 8
								  -| ['compiler_generated'] ),( 1
												-| ['compiler_generated'] ),( 'integer'
															      -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			    -| ['compiler_generated'] ))
			       -| ['compiler_generated'] ),
			     ( #<( 0
				   -| ['compiler_generated'] )>(( 8
								  -| ['compiler_generated'] ),( 1
												-| ['compiler_generated'] ),( 'integer'
															      -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			    -| ['compiler_generated'] ))
			       -| ['compiler_generated'] ),
			     ( #<( 0
				   -| ['compiler_generated'] )>(( 8
								  -| ['compiler_generated'] ),( 1
												-| ['compiler_generated'] ),( 'integer'
															      -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			    -| ['compiler_generated'] ))
			       -| ['compiler_generated'] )}#
			   -| ['compiler_generated'] ),( #{( #<( 0
								 -| ['compiler_generated'] )>(( 8
												-| ['compiler_generated'] ),( 1
															      -| ['compiler_generated'] ),( 'integer'
																			    -| ['compiler_generated'] ),( ['unsigned'|['big']]
																							  -| ['compiler_generated'] ))
							     -| ['compiler_generated'] ),
							   ( #<( 0
								 -| ['compiler_generated'] )>(( 8
												-| ['compiler_generated'] ),( 1
															      -| ['compiler_generated'] ),( 'integer'
																			    -| ['compiler_generated'] ),( ['unsigned'|['big']]
																							  -| ['compiler_generated'] ))
							     -| ['compiler_generated'] ),
							   ( #<( 0
								 -| ['compiler_generated'] )>(( 8
												-| ['compiler_generated'] ),( 1
															      -| ['compiler_generated'] ),( 'integer'
																			    -| ['compiler_generated'] ),( ['unsigned'|['big']]
																							  -| ['compiler_generated'] ))
							     -| ['compiler_generated'] ),
							   ( #<( 0
								 -| ['compiler_generated'] )>(( 8
												-| ['compiler_generated'] ),( 1
															      -| ['compiler_generated'] ),( 'integer'
																			    -| ['compiler_generated'] ),( ['unsigned'|['big']]
																							  -| ['compiler_generated'] ))
							     -| ['compiler_generated'] ),
							   ( #<( 0
								 -| ['compiler_generated'] )>(( 8
												-| ['compiler_generated'] ),( 1
															      -| ['compiler_generated'] ),( 'integer'
																			    -| ['compiler_generated'] ),( ['unsigned'|['big']]
																							  -| ['compiler_generated'] ))
							     -| ['compiler_generated'] ),
							   ( #<( 0
								 -| ['compiler_generated'] )>(( 8
												-| ['compiler_generated'] ),( 1
															      -| ['compiler_generated'] ),( 'integer'
																			    -| ['compiler_generated'] ),( ['unsigned'|['big']]
																							  -| ['compiler_generated'] ))
							     -| ['compiler_generated'] ),
							   ( #<( 0
								 -| ['compiler_generated'] )>(( 8
												-| ['compiler_generated'] ),( 1
															      -| ['compiler_generated'] ),( 'integer'
																			    -| ['compiler_generated'] ),( ['unsigned'|['big']]
																							  -| ['compiler_generated'] ))
							     -| ['compiler_generated'] ),
							   ( #<( 0
								 -| ['compiler_generated'] )>(( 8
												-| ['compiler_generated'] ),( 1
															      -| ['compiler_generated'] ),( 'integer'
																			    -| ['compiler_generated'] ),( ['unsigned'|['big']]
																							  -| ['compiler_generated'] ))
							     -| ['compiler_generated'] ),
							   ( #<( 0
								 -| ['compiler_generated'] )>(( 8
												-| ['compiler_generated'] ),( 1
															      -| ['compiler_generated'] ),( 'integer'
																			    -| ['compiler_generated'] ),( ['unsigned'|['big']]
																							  -| ['compiler_generated'] ))
							     -| ['compiler_generated'] ),
							   ( #<( 0
								 -| ['compiler_generated'] )>(( 8
												-| ['compiler_generated'] ),( 1
															      -| ['compiler_generated'] ),( 'integer'
																			    -| ['compiler_generated'] ),( ['unsigned'|['big']]
																							  -| ['compiler_generated'] ))
							     -| ['compiler_generated'] ),
							   ( #<( 0
								 -| ['compiler_generated'] )>(( 8
												-| ['compiler_generated'] ),( 1
															      -| ['compiler_generated'] ),( 'integer'
																			    -| ['compiler_generated'] ),( ['unsigned'|['big']]
																							  -| ['compiler_generated'] ))
							     -| ['compiler_generated'] ),
							   ( #<( 0
								 -| ['compiler_generated'] )>(( 8
												-| ['compiler_generated'] ),( 1
															      -| ['compiler_generated'] ),( 'integer'
																			    -| ['compiler_generated'] ),( ['unsigned'|['big']]
																							  -| ['compiler_generated'] ))
							     -| ['compiler_generated'] )}#
							 -| ['compiler_generated'] )> when 'true' ->
			    %% Line 994
			    'nil'
			%% Line 995
			<( _11
			   -| ['compiler_generated'] ),( _12
							 -| ['compiler_generated'] )> when 'true' ->
			    let <_7> =
				apply %% Line 997
				      'parse_numeric'/1
				    (%% Line 997
				     OffsetBin)
			    in  let <_6> =
				    apply %% Line 998
					  'parse_numeric'/1
					(%% Line 998
					 NumBytesBin)
				in  %% Line 996
				    {'sparse_entry',_7,_6}
		      end
	  ( <_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9})
		  -| [{'function_name',{'to_sparse_entry',1}}] )
	    -| ['compiler_generated'] )
	end
'get_format'/1 =
    %% Line 1004
    fun (_0) ->
	case _0 of
	  <Bin>
	      when try
		    let <_1> =
			call 'erlang':'is_binary'
			    (_0)
		    in  let <_2> =
			    call 'erlang':'byte_size'
				(_0)
			in  let <_3> =
				call 'erlang':'=:='
				    (_2, 512)
			    in  call 'erlang':'and'
				    (_1, _3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_4> =
		  apply %% Line 1005
			'to_v7'/1
		      (%% Line 1005
		       Bin)
	      in  %% Line 1005
		  apply 'do_get_format'/2
		      (_4, Bin)
	  ( <_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5})
		  -| [{'function_name',{'get_format',1}}] )
	    -| ['compiler_generated'] )
	end
'do_get_format'/2 =
    %% Line 1007
    fun (_0,_1) ->
	case <_0,_1> of
	  <Err = {'error',_32},_X_Bin> when 'true' ->
	      %% Line 1008
	      Err
	  %% Line 1009
	  <V7 = {'header_v7',_33,_34,_35,_36,_37,_38,_39,_40,_41},Bin>
	      when %% Line 1010
		try
		    let <_2> =
			call 'erlang':'is_binary'
			    (Bin)
		    in  let <_3> =
			    call 'erlang':'byte_size'
				(Bin)
			in  let <_4> =
				call 'erlang':'=:='
				    (_3, 512)
			    in  call 'erlang':'and'
				    (_2, _4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1011
	      ( case V7 of
		  ( <( {'header_v7',_42,_43,_44,_45,_46,_47,_rec32,_48,_49}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Checksum> =
			    apply 'parse_octal'/1
				(_rec32)
			in  let <Chk1> =
				apply %% Line 1012
				      'compute_checksum'/1
				    (%% Line 1012
				     Bin)
			    in  let <Chk2> =
				    apply %% Line 1013
					  'compute_signed_checksum'/1
					(%% Line 1013
					 Bin)
				in  %% Line 1014
				    case <> of
				      <>
					  when try
						( let <_12> =
						      case call 'erlang':'=/='
							       (Checksum, Chk1) of
							( <( 'true'
							     -| ['compiler_generated'] )> when 'true' ->
							      call 'erlang':'=/='
								  (Checksum, Chk2)
							  -| ['compiler_generated'] )
							( <( 'false'
							     -| ['compiler_generated'] )> when 'true' ->
							      'false'
							  -| ['compiler_generated'] )
							( <_10> when 'true' ->
							      _10
							  -| ['compiler_generated'] )
						      end
						  in  ( call 'erlang':'=:='
							    (( _12
							       -| ['compiler_generated'] ), 'true')
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  %% Line 1015
					  0
				      %% Line 1016
				      <> when 'true' ->
					  let <Ustar> =
					      apply %% Line 1018
						    'to_ustar'/2
						  (%% Line 1018
						   V7, %% Line 1018
						       Bin)
					  in  let <Star> =
						  apply %% Line 1019
							'to_star'/2
						      (%% Line 1019
						       V7, %% Line 1019
							   Bin)
					      in  %% Line 1020
						  ( case Ustar of
						      ( <( {'header_ustar',_51,_rec33,_52,_53,_54,_55,_56,_57}
							   -| ['compiler_generated'] )> when 'true' ->
							    %% Line 1021
							    ( case Ustar of
								( <( {'header_ustar',_59,_60,_rec34,_61,_62,_63,_64,_65}
								     -| ['compiler_generated'] )> when 'true' ->
								      %% Line 1022
								      ( case Star of
									  ( <( {'header_star',_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_rec35}
									       -| ['compiler_generated'] )> when 'true' ->
										let <_28> =
										    case <> of
										      %% Line 1024
										      <>
											  when let <_24> =
												call 'erlang':'=:='
												    (_rec33, #{#<117>(8,1,'integer',['unsigned'|['big']]),
													       #<115>(8,1,'integer',['unsigned'|['big']]),
													       #<116>(8,1,'integer',['unsigned'|['big']]),
													       #<97>(8,1,'integer',['unsigned'|['big']]),
													       #<114>(8,1,'integer',['unsigned'|['big']]),
													       #<0>(8,1,'integer',['unsigned'|['big']])}#)
											    in  let <_25> =
												    call 'erlang':'=:='
													(_rec35, #{#<116>(8,1,'integer',['unsigned'|['big']]),
														   #<97>(8,1,'integer',['unsigned'|['big']]),
														   #<114>(8,1,'integer',['unsigned'|['big']]),
														   #<0>(8,1,'integer',['unsigned'|['big']])}#)
												in  call 'erlang':'and'
													(_24, _25) ->
											  %% Line 1025
											  3
										      %% Line 1026
										      <>
											  when call 'erlang':'=:='
												(_rec33,
												 #{#<117>(8,1,'integer',['unsigned'|['big']]),
												   #<115>(8,1,'integer',['unsigned'|['big']]),
												   #<116>(8,1,'integer',['unsigned'|['big']]),
												   #<97>(8,1,'integer',['unsigned'|['big']]),
												   #<114>(8,1,'integer',['unsigned'|['big']]),
												   #<0>(8,1,'integer',['unsigned'|['big']])}#) ->
											  %% Line 1027
											  4
										      %% Line 1028
										      <>
											  when let <_26> =
												call 'erlang':'=:='
												    (_rec33, #{#<117>(8,1,'integer',['unsigned'|['big']]),
													       #<115>(8,1,'integer',['unsigned'|['big']]),
													       #<116>(8,1,'integer',['unsigned'|['big']]),
													       #<97>(8,1,'integer',['unsigned'|['big']]),
													       #<114>(8,1,'integer',['unsigned'|['big']]),
													       #<32>(8,1,'integer',['unsigned'|['big']])}#)
											    in  let <_27> =
												    call 'erlang':'=:='
													(_rec34, #{#<32>(8,1,'integer',['unsigned'|['big']]),
														   #<0>(8,1,'integer',['unsigned'|['big']])}#)
												in  call 'erlang':'and'
													(_26, _27) ->
											  %% Line 1029
											  2
										      %% Line 1030
										      <> when 'true' ->
											  %% Line 1031
											  1
										    end
										in  %% Line 1033
										    {'ok',_28,V7}
									    -| ['compiler_generated'] )
									  ( <_77> when 'true' ->
										( call ( 'erlang'
											 -| ['compiler_generated'] ):( 'error'
														       -| ['compiler_generated'] )
										      (( {'badrecord','header_star'}
											 -| ['compiler_generated'] ))
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									end
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
								( <_66> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','header_ustar'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						      ( <_58> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','header_ustar'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
				    end
		    -| ['compiler_generated'] )
		  ( <_50> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','header_v7'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_31,_30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_31,_30})
		  -| [{'function_name',{'do_get_format',2}}] )
	    -| ['compiler_generated'] )
	end
'unpack_format'/4 =
    %% Line 1036
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Format,V7 = {'header_v7',_66,_67,_68,_69,_70,_71,_72,_73,_74},Bin,Reader>
	      when %% Line 1037
		try
		    let <_4> =
			call 'erlang':'is_binary'
			    (Bin)
		    in  let <_5> =
			    call 'erlang':'byte_size'
				(Bin)
			in  let <_6> =
				call 'erlang':'=:='
				    (_5, 512)
			    in  call 'erlang':'and'
				    (_4, _6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1038
	      ( case V7 of
		  ( <( {'header_v7',_75,_76,_77,_78,_79,_rec36,_80,_81,_82}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Mtime> =
			    apply 'parse_numeric'/1
				(_rec36)
			in  %% Line 1040
			    ( case V7 of
				( <( {'header_v7',_rec37,_84,_85,_86,_87,_88,_89,_90,_91}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_29> =
					  apply 'parse_string'/1
					      (_rec37)
				      in  %% Line 1041
					  ( case V7 of
					      ( <( {'header_v7',_93,_rec38,_94,_95,_96,_97,_98,_99,_100}
						   -| ['compiler_generated'] )> when 'true' ->
						    let <_26> =
							apply 'parse_numeric'/1
							    (_rec38)
						    in  %% Line 1042
							( case V7 of
							    ( <( {'header_v7',_102,_103,_rec39,_104,_105,_106,_107,_108,_109}
								 -| ['compiler_generated'] )> when 'true' ->
								  let <_23> =
								      apply 'parse_numeric'/1
									  (_rec39)
								  in  %% Line 1043
								      ( case V7 of
									  ( <( {'header_v7',_111,_112,_113,_rec40,_114,_115,_116,_117,_118}
									       -| ['compiler_generated'] )> when 'true' ->
										let <_20> =
										    apply 'parse_numeric'/1
											(_rec40)
										in  %% Line 1044
										    ( case V7 of
											( <( {'header_v7',_120,_121,_122,_123,_rec41,_124,_125,_126,_127}
											     -| ['compiler_generated'] )> when 'true' ->
											      let <_17> =
												  apply 'parse_numeric'/1
												      (_rec41)
											      in  %% Line 1048
												  ( case V7 of
												      ( <( {'header_v7',_129,_130,_131,_132,_133,_134,_135,_rec42,_136}
													   -| ['compiler_generated'] )> when 'true' ->
													    %% Line 1049
													    ( case V7 of
														( <( {'header_v7',_138,_139,_140,_141,_142,_143,_144,_145,_rec43}
														     -| ['compiler_generated'] )> when 'true' ->
														      let <_12> =
															  apply 'parse_string'/1
															      (_rec43)
														      in  let <Header0> =
															      {'tar_header',_29,_26,_23,_20,_17,Mtime,_rec42,_12,[],[],0,0,Mtime,Mtime}
															  in  let <_40> =
																  case <> of
																    %% Line 1052
																    <>
																	when call 'erlang':'>'
																	      (Format,
																	       1) ->
																	%% Line 1053
																	apply 'unpack_modern'/4
																	    (Format, V7, Bin, Header0)
																    %% Line 1054
																    <> when 'true' ->
																	let <_rec46> =
																	    apply %% Line 1056
																		  'safe_join_path'/2
																		(%% Line 1056
																		 [], _29)
																	in  %% Line 1056
																	    call 'erlang':'setelement'
																		(2, Header0, _rec46)
																  end
															      in  let <HeaderOnly> =
																      apply %% Line 1058
																	    'is_header_only_type'/1
																	  (_rec42)
																  in  let <_45> =
																	  case <> of
																	    %% Line 1059
																	    <>
																		when ( call 'erlang':'=:='
																			(HeaderOnly,
																			 'true')
																		    -| ['compiler_generated'] ) ->
																		%% Line 1060
																		case _40 of
																		  <{'tar_header',_190,_191,_192,_193,_194,_195,_196,_197,_198,_199,_200,_201,_202,_203}> when 'true' ->
																		      call 'erlang':'setelement'
																			  (6, _40, 0)
																		  ( <_204> when 'true' ->
																			( call ( 'erlang'
																				 -| ['compiler_generated'] ):( 'error'
																							       -| ['compiler_generated'] )
																			      (( {'badrecord','tar_header'}
																				 -| ['compiler_generated'] ))
																			  -| ['compiler_generated'] )
																		    -| ['compiler_generated'] )
																		end
																	    %% Line 1061
																	    <> when 'true' ->
																		_40
																	  end
																      in  %% Line 1064
																	  case <> of
																	    <>
																		when call 'erlang':'=:='
																		      (_rec42,
																		       83) ->
																		let <Gnu> =
																		    apply %% Line 1065
																			  'to_gnu'/2
																			(%% Line 1065
																			 V7, %% Line 1065
																			     Bin)
																		in  %% Line 1066
																		    ( case Gnu of
																			( <( {'header_gnu',_205,_206,_207,_208,_209,_210,_211,_212,_213,_214,_rec49}
																			     -| ['compiler_generated'] )> when 'true' ->
																			      let <RealSize> =
																				  apply 'parse_numeric'/1
																				      (_rec49)
																			      in  %% Line 1067
																				  case apply 'parse_sparse_map'/2
																					   (Gnu, Reader) of
																				    <{Sparsemap,Reader2}> when 'true' ->
																					%% Line 1068
																					case _45 of
																					  <{'tar_header',_216,_217,_218,_219,_220,_221,_222,_223,_224,_225,_226,_227,_228,_229}> when 'true' ->
																					      let <_54> =
																						  call 'erlang':'setelement'
																						      (6, _45, RealSize)
																					      in  let <_56> =
																						      apply %% Line 1069
																							    'new_sparse_file_reader'/3
																							  (%% Line 1069
																							   Reader2, %% Line 1069
																								    Sparsemap, %% Line 1069
																									       RealSize)
																						  in  %% Line 1069
																						      {_54,_56}
																					  ( <_230> when 'true' ->
																						( call ( 'erlang'
																							 -| ['compiler_generated'] ):( 'error'
																										       -| ['compiler_generated'] )
																						      (( {'badrecord','tar_header'}
																							 -| ['compiler_generated'] ))
																						  -| ['compiler_generated'] )
																					    -| ['compiler_generated'] )
																					end
																				    ( <_51> when 'true' ->
																					  primop 'match_fail'
																					      ({'badmatch',_51})
																				      -| ['compiler_generated'] )
																				  end
																			  -| ['compiler_generated'] )
																			( <_215> when 'true' ->
																			      ( call ( 'erlang'
																				       -| ['compiler_generated'] ):( 'error'
																								     -| ['compiler_generated'] )
																				    (( {'badrecord','header_gnu'}
																				       -| ['compiler_generated'] ))
																				-| ['compiler_generated'] )
																			  -| ['compiler_generated'] )
																		      end
																		      -| ['compiler_generated'] )
																	    %% Line 1070
																	    <> when 'true' ->
																		%% Line 1073
																		( case _45 of
																		    ( <( {'tar_header',_231,_232,_233,_234,_rec51,_235,_236,_237,_238,_239,_240,_241,_242,_243}
																			 -| ['compiler_generated'] )> when 'true' ->
																			  %% Line 1074
																			  ( case _45 of
																			      ( <( {'tar_header',_245,_246,_247,_248,_rec52,_249,_250,_251,_252,_253,_254,_255,_256,_257}
																				   -| ['compiler_generated'] )> when 'true' ->
																				    let <FileReader> =
																					{'reg_file_reader',Reader,_rec51,%% Line 1075
																									 0,_rec52}
																				    in  %% Line 1077
																					{_45,FileReader}
																				-| ['compiler_generated'] )
																			      ( <_258> when 'true' ->
																				    ( call ( 'erlang'
																					     -| ['compiler_generated'] ):( 'error'
																									   -| ['compiler_generated'] )
																					  (( {'badrecord','tar_header'}
																					     -| ['compiler_generated'] ))
																				      -| ['compiler_generated'] )
																				-| ['compiler_generated'] )
																			    end
																			    -| ['compiler_generated'] )
																		      -| ['compiler_generated'] )
																		    ( <_244> when 'true' ->
																			  ( call ( 'erlang'
																				   -| ['compiler_generated'] ):( 'error'
																								 -| ['compiler_generated'] )
																				(( {'badrecord','tar_header'}
																				   -| ['compiler_generated'] ))
																			    -| ['compiler_generated'] )
																		      -| ['compiler_generated'] )
																		  end
																		  -| ['compiler_generated'] )
																	  end
														  -| ['compiler_generated'] )
														( <_146> when 'true' ->
														      ( call ( 'erlang'
															       -| ['compiler_generated'] ):( 'error'
																			     -| ['compiler_generated'] )
															    (( {'badrecord','header_v7'}
															       -| ['compiler_generated'] ))
															-| ['compiler_generated'] )
														  -| ['compiler_generated'] )
													      end
													      -| ['compiler_generated'] )
													-| ['compiler_generated'] )
												      ( <_137> when 'true' ->
													    ( call ( 'erlang'
														     -| ['compiler_generated'] ):( 'error'
																		   -| ['compiler_generated'] )
														  (( {'badrecord','header_v7'}
														     -| ['compiler_generated'] ))
													      -| ['compiler_generated'] )
													-| ['compiler_generated'] )
												    end
												    -| ['compiler_generated'] )
											  -| ['compiler_generated'] )
											( <_128> when 'true' ->
											      ( call ( 'erlang'
												       -| ['compiler_generated'] ):( 'error'
																     -| ['compiler_generated'] )
												    (( {'badrecord','header_v7'}
												       -| ['compiler_generated'] ))
												-| ['compiler_generated'] )
											  -| ['compiler_generated'] )
										      end
										      -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									  ( <_119> when 'true' ->
										( call ( 'erlang'
											 -| ['compiler_generated'] ):( 'error'
														       -| ['compiler_generated'] )
										      (( {'badrecord','header_v7'}
											 -| ['compiler_generated'] ))
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									end
									-| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							    ( <_110> when 'true' ->
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'error'
													 -| ['compiler_generated'] )
									(( {'badrecord','header_v7'}
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <_101> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','header_v7'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_92> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','header_v7'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_83> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','header_v7'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_65,_64,_63,_62> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_65,_64,_63,_62})
		  -| [{'function_name',{'unpack_format',4}}] )
	    -| ['compiler_generated'] )
	end
'unpack_modern'/4 =
    %% Line 1080
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Format,V7 = {'header_v7',_65,_66,_67,_68,_69,_70,_71,_72,_73},Bin,Header0 = {'tar_header',_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87}>
	      when %% Line 1081
		call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 1082
	      ( case Header0 of
		  ( <( {'tar_header',_88,_89,_90,_91,_92,_93,_rec53,_94,_95,_96,_97,_98,_99,_100}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Ustar> =
			    apply %% Line 1083
				  'to_ustar'/2
				(%% Line 1083
				 V7, %% Line 1083
				     Bin)
			in  %% Line 1085
			    ( case Ustar of
				( <( {'header_ustar',_102,_103,_104,_rec57,_105,_106,_107,_108}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_rec54> =
					  apply 'parse_string'/1
					      (_rec57)
				      in  %% Line 1086
					  ( case Ustar of
					      ( <( {'header_ustar',_110,_111,_112,_113,_rec58,_114,_115,_116}
						   -| ['compiler_generated'] )> when 'true' ->
						    let <_rec55> =
							apply 'parse_string'/1
							    (_rec58)
						    in  case Header0 of
							  <{'tar_header',_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131}> when 'true' ->
							      let <_15> =
								  call 'erlang':'setelement'
								      (11, Header0, _rec55)
							      in  let <_17> =
								      call 'erlang':'setelement'
									  (10, _15, _rec54)
								  in  let <_31> =
									  case <> of
									    %% Line 1088
									    <>
										when try
										      ( let <_21> =
											    case call 'erlang':'=:='
												     (_rec53, 51) of
											      ( <( 'true'
												   -| ['compiler_generated'] )> when 'true' ->
												    'true'
												-| ['compiler_generated'] )
											      ( <( 'false'
												   -| ['compiler_generated'] )> when 'true' ->
												    call 'erlang':'=:='
													(_rec53, 52)
												-| ['compiler_generated'] )
											      ( <_19> when 'true' ->
												    _19
												-| ['compiler_generated'] )
											    end
											in  ( call 'erlang':'=:='
												  (( _21
												     -| ['compiler_generated'] ), 'true')
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										  of <Try> ->
										      Try
										  catch <T,R> ->
										      'false' ->
										%% Line 1089
										( case Ustar of
										    ( <( {'header_ustar',_133,_134,_135,_136,_137,_rec59,_138,_139}
											 -| ['compiler_generated'] )> when 'true' ->
											  let <Ma> =
											      apply 'parse_numeric'/1
												  (_rec59)
											  in  %% Line 1090
											      ( case Ustar of
												  ( <( {'header_ustar',_141,_142,_143,_144,_145,_146,_rec60,_147}
												       -| ['compiler_generated'] )> when 'true' ->
													let <Mi> =
													    apply 'parse_numeric'/1
														(_rec60)
													in  %% Line 1092
													    case _17 of
													      <{'tar_header',_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162}> when 'true' ->
														  let <_29> =
														      call %% Line 1093
															   'erlang':%% Line 1093
																    'setelement'
															  (%% Line 1093
															   13, _17, %% Line 1093
																    Mi)
														  in  call 'erlang':'setelement'
															  (12, _29, Ma)
													      ( <_163> when 'true' ->
														    ( call ( 'erlang'
															     -| ['compiler_generated'] ):( 'error'
																			   -| ['compiler_generated'] )
															  (( {'badrecord','tar_header'}
															     -| ['compiler_generated'] ))
														      -| ['compiler_generated'] )
														-| ['compiler_generated'] )
													    end
												    -| ['compiler_generated'] )
												  ( <_148> when 'true' ->
													( call ( 'erlang'
														 -| ['compiler_generated'] ):( 'error'
																	       -| ['compiler_generated'] )
													      (( {'badrecord','header_ustar'}
														 -| ['compiler_generated'] ))
													  -| ['compiler_generated'] )
												    -| ['compiler_generated'] )
												end
												-| ['compiler_generated'] )
										      -| ['compiler_generated'] )
										    ( <_140> when 'true' ->
											  ( call ( 'erlang'
												   -| ['compiler_generated'] ):( 'error'
																 -| ['compiler_generated'] )
												(( {'badrecord','header_ustar'}
												   -| ['compiler_generated'] ))
											    -| ['compiler_generated'] )
										      -| ['compiler_generated'] )
										  end
										  -| ['compiler_generated'] )
									    %% Line 1095
									    <> when 'true' ->
										_17
									  end
								      in  let <_250,_251> =
									      case %% Line 1098
										   Format of
										%% Line 1099
										<4> when 'true' ->
										    %% Line 1100
										    ( case Ustar of
											( <( {'header_ustar',_164,_165,_166,_167,_168,_169,_170,_rec62}
											     -| ['compiler_generated'] )> when 'true' ->
											      let <_35> =
												  apply 'parse_string'/1
												      (_rec62)
											      in  <_35,_31>
											  -| ['compiler_generated'] )
											( <_171> when 'true' ->
											      ( call ( 'erlang'
												       -| ['compiler_generated'] ):( 'error'
																     -| ['compiler_generated'] )
												    (( {'badrecord','header_ustar'}
												       -| ['compiler_generated'] ))
												-| ['compiler_generated'] )
											  -| ['compiler_generated'] )
										      end
										      -| ['compiler_generated'] )
										%% Line 1101
										<3> when 'true' ->
										    let <Star> =
											apply %% Line 1102
											      'to_star'/2
											    (%% Line 1102
											     V7, %% Line 1102
												 Bin)
										    in  %% Line 1103
											( case Star of
											    ( <( {'header_star',_172,_173,_174,_175,_176,_177,_178,_rec63,_179,_180,_181}
												 -| ['compiler_generated'] )> when 'true' ->
												  let <Prefix0> =
												      apply 'parse_string'/1
													  (_rec63)
												  in  %% Line 1104
												      ( case Star of
													  ( <( {'header_star',_183,_184,_185,_186,_187,_188,_189,_190,_rec64,_191,_192}
													       -| ['compiler_generated'] )> when 'true' ->
														let <Atime> =
														    apply %% Line 1105
															  'parse_numeric'/1
															(_rec64)
														in  %% Line 1106
														    ( case Star of
															( <( {'header_star',_194,_195,_196,_197,_198,_199,_200,_201,_202,_rec65,_203}
															     -| ['compiler_generated'] )> when 'true' ->
															      let <Ctime> =
																  apply %% Line 1107
																	'parse_numeric'/1
																      (_rec65)
															      in  %% Line 1109
																  case _31 of
																    <{'tar_header',_205,_206,_207,_208,_209,_210,_211,_212,_213,_214,_215,_216,_217,_218}> when 'true' ->
																	let <_49> =
																	    call %% Line 1110
																		 'erlang':%% Line 1110
																			  'setelement'
																		(%% Line 1110
																		 15, _31, %% Line 1110
																			  Ctime)
																	in  let <_51> =
																		call 'erlang':'setelement'
																		    (14, _49, Atime)
																	    in  <Prefix0,_51>
																    ( <_219> when 'true' ->
																	  ( call ( 'erlang'
																		   -| ['compiler_generated'] ):( 'error'
																						 -| ['compiler_generated'] )
																		(( {'badrecord','tar_header'}
																		   -| ['compiler_generated'] ))
																	    -| ['compiler_generated'] )
																      -| ['compiler_generated'] )
																  end
															  -| ['compiler_generated'] )
															( <_204> when 'true' ->
															      ( call ( 'erlang'
																       -| ['compiler_generated'] ):( 'error'
																				     -| ['compiler_generated'] )
																    (( {'badrecord','header_star'}
																       -| ['compiler_generated'] ))
																-| ['compiler_generated'] )
															  -| ['compiler_generated'] )
														      end
														      -| ['compiler_generated'] )
													    -| ['compiler_generated'] )
													  ( <_193> when 'true' ->
														( call ( 'erlang'
															 -| ['compiler_generated'] ):( 'error'
																		       -| ['compiler_generated'] )
														      (( {'badrecord','header_star'}
															 -| ['compiler_generated'] ))
														  -| ['compiler_generated'] )
													    -| ['compiler_generated'] )
													end
													-| ['compiler_generated'] )
											      -| ['compiler_generated'] )
											    ( <_182> when 'true' ->
												  ( call ( 'erlang'
													   -| ['compiler_generated'] ):( 'error'
																	 -| ['compiler_generated'] )
													(( {'badrecord','header_star'}
													   -| ['compiler_generated'] ))
												    -| ['compiler_generated'] )
											      -| ['compiler_generated'] )
											  end
											  -| ['compiler_generated'] )
										%% Line 1112
										<_220> when 'true' ->
										    %% Line 1113
										    <[],_31>
									      end
									  in  %% Line 1115
									      ( case ( _251
										       -| ['compiler_generated'] ) of
										  ( <( {'tar_header',_rec67,_221,_222,_223,_224,_225,_226,_227,_228,_229,_230,_231,_232,_233}
										       -| ['compiler_generated'] )> when 'true' ->
											let <_rec68> =
											    apply %% Line 1116
												  'safe_join_path'/2
												(( _250
												   -| ['compiler_generated'] ), _rec67)
											in  %% Line 1116
											    case ( _251
												   -| ['compiler_generated'] ) of
											      <{'tar_header',_235,_236,_237,_238,_239,_240,_241,_242,_243,_244,_245,_246,_247,_248}> when 'true' ->
												  call 'erlang':'setelement'
												      (2, ( _251
													    -| ['compiler_generated'] ), _rec68)
											      ( <_249> when 'true' ->
												    ( call ( 'erlang'
													     -| ['compiler_generated'] ):( 'error'
																	   -| ['compiler_generated'] )
													  (( {'badrecord','tar_header'}
													     -| ['compiler_generated'] ))
												      -| ['compiler_generated'] )
												-| ['compiler_generated'] )
											    end
										    -| ['compiler_generated'] )
										  ( <_234> when 'true' ->
											( call ( 'erlang'
												 -| ['compiler_generated'] ):( 'error'
															       -| ['compiler_generated'] )
											      (( {'badrecord','tar_header'}
												 -| ['compiler_generated'] ))
											  -| ['compiler_generated'] )
										    -| ['compiler_generated'] )
										end
										-| ['compiler_generated'] )
							  ( <_132> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','tar_header'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
						-| ['compiler_generated'] )
					      ( <_117> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','header_ustar'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_109> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','header_ustar'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_101> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','tar_header'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_64,_63,_62,_61> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_64,_63,_62,_61})
		  -| [{'function_name',{'unpack_modern',4}}] )
	    -| ['compiler_generated'] )
	end
'safe_join_path'/2 =
    %% Line 1119
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],Name> when 'true' ->
	      %% Line 1120
	      call 'filename':'join'
		  ([Name|[]])
	  %% Line 1121
	  <Prefix,[]> when 'true' ->
	      %% Line 1122
	      call 'filename':'join'
		  ([Prefix|[]])
	  %% Line 1123
	  <Prefix,Name> when 'true' ->
	      %% Line 1124
	      call 'filename':'join'
		  (Prefix, Name)
	end
'new_sparse_file_reader'/3 =
    %% Line 1126
    fun (_0,_1,_2) ->
	%% Line 1127
	case apply 'validate_sparse_entries'/2
		 (_1, _2) of
	  <'true'> when 'true' ->
	      %% Line 1128
	      {'sparse_file_reader',_0,_2,%% Line 1131
					  0,_2,_1}
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_3})
	    -| ['compiler_generated'] )
	end
'validate_sparse_entries'/2 =
    %% Line 1135
    fun (_0,_1) ->
	%% Line 1136
	apply 'validate_sparse_entries'/4
	    (_0, _1, 0, 0)
'validate_sparse_entries'/4 =
    %% Line 1137
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[],_X_RealSize,_X_I,_X_LastOffset> when 'true' ->
	      %% Line 1138
	      'true'
	  %% Line 1139
	  <[Entry = {'sparse_entry',_23,_24}|Rest],RealSize,I,LastOffset> when 'true' ->
	      %% Line 1140
	      ( case Entry of
		  ( <( {'sparse_entry',_rec70,_25}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1141
			( case Entry of
			    ( <( {'sparse_entry',_27,_rec71}
				 -| ['compiler_generated'] )> when 'true' ->
				  do  %% Line 1142
				      case <> of
					%% Line 1143
					<>
					    when try
						  let <_12> =
						      call 'erlang':'-'
							  (9223372036854775807, _rec71)
						  in  call 'erlang':'>'
							  (_rec70, _12)
					      of <Try> ->
						  Try
					      catch <T,R> ->
						  'false' ->
					    %% Line 1144
					    call 'erlang':'throw'
						({'error',{'invalid_sparse_map_entry','offset_too_large'}})
					%% Line 1145
					<>
					    when try
						  let <_13> =
						      call 'erlang':'+'
							  (_rec70, _rec71)
						  in  call 'erlang':'>'
							  (_13, RealSize)
					      of <Try> ->
						  Try
					      catch <T,R> ->
						  'false' ->
					    %% Line 1146
					    call 'erlang':'throw'
						({'error',{'invalid_sparse_map_entry','offset_too_large'}})
					%% Line 1147
					<>
					    when try
						  ( let <_16> =
							case call 'erlang':'>'
								 (I, 0) of
							  ( <( 'true'
							       -| ['compiler_generated'] )> when 'true' ->
								call 'erlang':'>'
								    (LastOffset, _rec70)
							    -| ['compiler_generated'] )
							  ( <( 'false'
							       -| ['compiler_generated'] )> when 'true' ->
								'false'
							    -| ['compiler_generated'] )
							  ( <_14> when 'true' ->
								_14
							    -| ['compiler_generated'] )
							end
						    in  ( call 'erlang':'=:='
							      (( _16
								 -| ['compiler_generated'] ), 'true')
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      of <Try> ->
						  Try
					      catch <T,R> ->
						  'false' ->
					    %% Line 1148
					    call 'erlang':'throw'
						({'error',{'invalid_sparse_map_entry','overlapping_offsets'}})
					%% Line 1149
					<> when 'true' ->
					    'ok'
				      end
				      let <_18> =
					  call %% Line 1152
					       'erlang':%% Line 1152
							'+'
					      (%% Line 1152
					       I, %% Line 1152
						  1)
				      in  let <_17> =
					      call %% Line 1152
						   'erlang':%% Line 1152
							    '+'
						  (_rec70, _rec71)
					  in  %% Line 1152
					      apply 'validate_sparse_entries'/4
						  (Rest, RealSize, _18, _17)
			      -| ['compiler_generated'] )
			    ( <_28> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','sparse_entry'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_26> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','sparse_entry'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_22,_21,_20,_19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_22,_21,_20,_19})
		  -| [{'function_name',{'validate_sparse_entries',4}}] )
	    -| ['compiler_generated'] )
	end
'parse_sparse_map'/2 =
    %% Line 1157
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'header_gnu',_12,_13,_14,_15,_16,_17,_18,_19,_20,Sparse = {'sparse_array',_21,_22,_23},_24},Reader>
	      when %% Line 1158
		( try
		      let <_6> =
			  call 'erlang':'element'
			      (3, Sparse)
		      in  ( call 'erlang':'=:='
				(_6, 'true')
			    -| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 1159
	      apply 'parse_sparse_map'/3
		  (Sparse, Reader, [])
	  %% Line 1160
	  <{'header_gnu',_25,_26,_27,_28,_29,_30,_31,_32,_33,Sparse,_34},Reader> when 'true' ->
	      %% Line 1161
	      ( case Sparse of
		  ( <( {'sparse_array',_rec72,_35,_36}
		       -| ['compiler_generated'] )> when 'true' ->
			{_rec72,Reader}
		    -| ['compiler_generated'] )
		  ( <_37> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','sparse_array'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10})
		  -| [{'function_name',{'parse_sparse_map',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_sparse_map'/3 =
    %% Line 1162
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{'sparse_array',Entries,'true',_16},Reader,Acc> when 'true' ->
	      %% Line 1163
	      case apply 'read_block'/1
		       (Reader) of
		%% Line 1164
		<'eof'> when 'true' ->
		    %% Line 1165
		    call 'erlang':'throw'
			({'error','eof'})
		%% Line 1166
		<{'ok',Block,Reader2}> when 'true' ->
		    let <Sparse2> =
			apply %% Line 1167
			      'to_sparse_array'/1
			    (%% Line 1167
			     Block)
		    in  let <_4> =
			    call %% Line 1168
				 'erlang':%% Line 1168
					  '++'
				(%% Line 1168
				 Entries, %% Line 1168
					  Acc)
			in  %% Line 1168
			    apply 'parse_sparse_map'/3
				(Sparse2, Reader2, _4)
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1170
	  <{'sparse_array',Entries,_17,_18},Reader,Acc> when 'true' ->
	      let <_11> =
		  fun (_8,_7) ->
		      %% Line 1171
		      case <_8,_7> of
			<{'sparse_entry',A,_19},{'sparse_entry',B,_20}> when 'true' ->
			    %% Line 1172
			    call 'erlang':'=<'
				(A, B)
			( <_10,_9> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_10,_9})
				-| [{'function_name',{'-parse_sparse_map/3-fun-0-',2}}] )
			  -| ['compiler_generated'] )
		      end
	      in  let <_6> =
		      call %% Line 1173
			   'erlang':%% Line 1173
				    '++'
			  (%% Line 1173
			   Entries, %% Line 1173
				    Acc)
		  in  let <Sorted> =
			  call %% Line 1171
			       'lists':%% Line 1171
				       'sort'
			      (_11, _6)
		      in  %% Line 1174
			  {Sorted,Reader}
	  ( <_15,_14,_13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_15,_14,_13})
		  -| [{'function_name',{'parse_sparse_map',3}}] )
	    -| ['compiler_generated'] )
	end
'compute_checksum'/1 =
    %% Line 1178
    fun (_0) ->
	case _0 of
	  <#{#<H1>(148,8,'binary',['unsigned'|['big']]),
	     %% Line 1179
	     #<H2>(8,8,'binary',['unsigned'|['big']]),
	     %% Line 1180
	     #<Rest>(356,8,'binary',['unsigned'|['big']]),
	     %% Line 1181
	     #<_7>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_3> =
		  apply %% Line 1182
			'checksum'/1
		      (%% Line 1182
		       H1)
	      in  let <_1> =
		      call %% Line 1182
			   'erlang':%% Line 1182
				    'byte_size'
			  (%% Line 1182
			   H2)
		  in  let <_2> =
			  call %% Line 1182
			       'erlang':%% Line 1182
					'*'
			      (_1, %% Line 1182
				   32)
		      in  let <C0> =
			      call %% Line 1182
				   'erlang':%% Line 1182
					    '+'
				  (_3, _2)
			  in  let <C1> =
				  apply %% Line 1183
					'checksum'/1
				      (%% Line 1183
				       Rest)
			      in  %% Line 1184
				  call 'erlang':'+'
				      (C0, C1)
	  ( <_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6})
		  -| [{'function_name',{'compute_checksum',1}}] )
	    -| ['compiler_generated'] )
	end
'compute_signed_checksum'/1 =
    %% Line 1186
    fun (_0) ->
	case _0 of
	  <#{#<H1>(148,8,'binary',['unsigned'|['big']]),
	     %% Line 1187
	     #<H2>(8,8,'binary',['unsigned'|['big']]),
	     %% Line 1188
	     #<Rest>(356,8,'binary',['unsigned'|['big']]),
	     %% Line 1189
	     #<_7>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_3> =
		  apply %% Line 1190
			'signed_checksum'/1
		      (%% Line 1190
		       H1)
	      in  let <_1> =
		      call %% Line 1190
			   'erlang':%% Line 1190
				    'byte_size'
			  (%% Line 1190
			   H2)
		  in  let <_2> =
			  call %% Line 1190
			       'erlang':%% Line 1190
					'*'
			      (_1, %% Line 1190
				   32)
		      in  let <C0> =
			      call %% Line 1190
				   'erlang':%% Line 1190
					    '+'
				  (_3, _2)
			  in  let <C1> =
				  apply %% Line 1191
					'signed_checksum'/1
				      (%% Line 1191
				       Rest)
			      in  %% Line 1192
				  call 'erlang':'+'
				      (C0, C1)
	  ( <_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6})
		  -| [{'function_name',{'compute_signed_checksum',1}}] )
	    -| ['compiler_generated'] )
	end
'checksum'/1 =
    %% Line 1195
    fun (_0) ->
	apply 'checksum'/2
	    (_0, 0)
'checksum'/2 =
    %% Line 1196
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{#<A>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Sum> when 'true' ->
	      let <_2> =
		  call %% Line 1197
		       'erlang':%% Line 1197
				'+'
		      (%% Line 1197
		       Sum, %% Line 1197
			    A)
	      in  %% Line 1197
		  apply 'checksum'/2
		      (Rest, _2)
	  %% Line 1198
	  <#{}#,Sum> when 'true' ->
	      Sum
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'checksum',2}}] )
	    -| ['compiler_generated'] )
	end
'signed_checksum'/1 =
    %% Line 1200
    fun (_0) ->
	apply 'signed_checksum'/2
	    (_0, 0)
'signed_checksum'/2 =
    %% Line 1201
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{#<A>(8,1,'integer',['signed'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Sum> when 'true' ->
	      let <_2> =
		  call %% Line 1202
		       'erlang':%% Line 1202
				'+'
		      (%% Line 1202
		       Sum, %% Line 1202
			    A)
	      in  %% Line 1202
		  apply 'signed_checksum'/2
		      (Rest, _2)
	  %% Line 1203
	  <#{}#,Sum> when 'true' ->
	      Sum
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'signed_checksum',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_numeric'/1 =
    %% Line 1206
    fun (_0) ->
	case _0 of
	  <#{}#> when 'true' ->
	      %% Line 1207
	      0
	  %% Line 1208
	  <Bin = #{#<First>(8,1,'integer',['unsigned'|['big']]),
		   #<_22>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1212
	      case <> of
		%% Line 1213
		<>
		    when try
			  let <_1> =
			      call 'erlang':'band'
				  (First, 128)
			  in  call 'erlang':'=/='
				  (_1, 0)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_3> =
			case <> of
			  %% Line 1218
			  <>
			      when try
				    let <_2> =
					call 'erlang':'band'
					    (First, 64)
				    in  call 'erlang':'=/='
					    (_2, 0)
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false' ->
			      0
			  %% Line 1218
			  <> when 'true' ->
			      255
			end
		    in  let <Bytes> =
			    call %% Line 1219
				 'binary':%% Line 1219
					  'bin_to_list'
				(%% Line 1219
				 Bin)
			in  let <Reducer> =
				fun (_14,_13) ->
				    %% Line 1220
				    case <_14,_13> of
				      <C,{I,X}> when 'true' ->
					  let <C1> =
					      call %% Line 1221
						   'erlang':%% Line 1221
							    'bxor'
						  (%% Line 1221
						   C, _3)
					  in  let <_7> =
						  case <> of
						    %% Line 1222
						    <>
							when call 'erlang':'=:='
							      (I,
							       0) ->
							call 'erlang':'band'
							    (C1, 127)
						    %% Line 1222
						    <> when 'true' ->
							C1
						  end
					      in  %% Line 1223
						  case <> of
						    <>
							when try
							      let <_9> =
								  call 'erlang':'bsr'
								      (X, 56)
							      in  call 'erlang':'>'
								      (_9, 0)
							  of <Try> ->
							      Try
							  catch <T,R> ->
							      'false' ->
							%% Line 1224
							call 'erlang':'throw'
							    ({'error','integer_overflow'})
						    %% Line 1225
						    <> when 'true' ->
							let <_12> =
							    call %% Line 1226
								 'erlang':%% Line 1226
									  '+'
								(%% Line 1226
								 I, %% Line 1226
								    1)
							in  let <_10> =
								call %% Line 1226
								     'erlang':%% Line 1226
									      'bsl'
								    (%% Line 1226
								     X, %% Line 1226
									8)
							    in  let <_11> =
								    call %% Line 1226
									 'erlang':%% Line 1226
										  'bor'
									(_10, _7)
								in  %% Line 1226
								    {_12,_11}
						  end
				      ( <_16,_15> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_16,_15})
					      -| [{'function_name',{'-parse_numeric/1-fun-0-',2}}] )
					-| ['compiler_generated'] )
				    end
			    in  %% Line 1229
				case call 'lists':'foldl'
					 (Reducer, {0,0}, Bytes) of
				  <{_23,N}> when 'true' ->
				      %% Line 1230
				      case <> of
					<>
					    when try
						  let <_19> =
						      call 'erlang':'bsr'
							  (N, 63)
						  in  call 'erlang':'>'
							  (_19, 0)
					      of <Try> ->
						  Try
					      catch <T,R> ->
						  'false' ->
					    %% Line 1231
					    call 'erlang':'throw'
						({'error','integer_overflow'})
					%% Line 1232
					<> when 'true' ->
					    %% Line 1233
					    case <> of
					      <>
						  when call 'erlang':'=:='
							(_3,
							 255) ->
						  %% Line 1234
						  call 'erlang':'bxor'
						      (-1, N)
					      %% Line 1235
					      <> when 'true' ->
						  %% Line 1236
						  N
					    end
				      end
				  ( <_18> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_18})
				    -| ['compiler_generated'] )
				end
		%% Line 1239
		<> when 'true' ->
		    %% Line 1241
		    apply 'parse_octal'/1
			(Bin)
	      end
	  ( <_21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_21})
		  -| [{'function_name',{'parse_numeric',1}}] )
	    -| ['compiler_generated'] )
	end
'parse_octal'/1 =
    %% Line 1244
    fun (_0) ->
	case _0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      %% Line 1246
	      apply 'do_parse_octal'/2
		  (Bin, #{}#)
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'parse_octal',1}}] )
	    -| ['compiler_generated'] )
	end
'do_parse_octal'/2 =
    %% Line 1247
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{}#,#{}#> when 'true' ->
	      %% Line 1248
	      0
	  %% Line 1249
	  <#{}#,Acc> when 'true' ->
	      let <_2> =
		  call %% Line 1250
		       'binary':%% Line 1250
				'bin_to_list'
		      (%% Line 1250
		       Acc)
	      in  %% Line 1250
		  case call 'io_lib':'fread'
			   ([126|[56|[117]]], _2) of
		    %% Line 1251
		    <{'error',_7}> when 'true' ->
			call 'erlang':'throw'
			    ({'error','invalid_tar_checksum'})
		    %% Line 1252
		    <{'ok',[Octal|[]],[]}> when 'true' ->
			Octal
		    %% Line 1253
		    <{'ok',_8,_9}> when 'true' ->
			call 'erlang':'throw'
			    ({'error','invalid_tar_checksum'})
		    ( <_3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1255
	  <#{#<32>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      %% Line 1256
	      apply 'do_parse_octal'/2
		  (Rest, Acc)
	  %% Line 1257
	  <#{#<0>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      %% Line 1258
	      apply 'do_parse_octal'/2
		  (Rest, Acc)
	  %% Line 1259
	  <#{#<C>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      let <_4> =
		  #{#<%% Line 1260
		      Acc>(%% Line 1260
			   'all',8,'binary',['unsigned'|['big']]),
		    #<%% Line 1260
		      C>(%% Line 1260
			 8,1,'integer',['unsigned'|['big']])}#
	      in  %% Line 1260
		  apply 'do_parse_octal'/2
		      (Rest, _4)
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'do_parse_octal',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_string'/1 =
    %% Line 1262
    fun (_0) ->
	case _0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      %% Line 1263
	      apply 'do_parse_string'/2
		  (Bin, #{}#)
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'parse_string',1}}] )
	    -| ['compiler_generated'] )
	end
'do_parse_string'/2 =
    %% Line 1264
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{}#,Acc> when 'true' ->
	      %% Line 1265
	      case call 'unicode':'characters_to_list'
		       (Acc) of
		%% Line 1266
		<Str>
		    when call 'erlang':'is_list'
			  (Str) ->
		    %% Line 1267
		    Str
		%% Line 1268
		<{'incomplete',_X_Str,_X_Rest}> when 'true' ->
		    %% Line 1269
		    call 'binary':'bin_to_list'
			(Acc)
		%% Line 1270
		<{'error',_X_Str,_X_Rest}> when 'true' ->
		    %% Line 1271
		    call 'erlang':'throw'
			({'error',{'bad_header','invalid_string'}})
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1273
	  <#{#<0>(8,1,'integer',['unsigned'|['big']]),
	     #<_6>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      %% Line 1274
	      apply 'do_parse_string'/2
		  (#{}#, Acc)
	  %% Line 1275
	  <#{#<C>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      let <_3> =
		  #{#<%% Line 1276
		      Acc>(%% Line 1276
			   'all',8,'binary',['unsigned'|['big']]),
		    #<%% Line 1276
		      C>(%% Line 1276
			 8,1,'integer',['unsigned'|['big']])}#
	      in  %% Line 1276
		  apply 'do_parse_string'/2
		      (Rest, _3)
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'do_parse_string',2}}] )
	    -| ['compiler_generated'] )
	end
'convert_header'/2 =
    %% Line 1278
    fun (_0,_1) ->
	case <_0,_1> of
	  <Bin,Reader = {'reader',_11,_12,Pos,_13}>
	      when %% Line 1279
		try
		    let <_2> =
			call 'erlang':'byte_size'
			    (Bin)
		    in  let <_3> =
			    call 'erlang':'=:='
				(_2, 512)
			in  let <_4> =
				call 'erlang':'rem'
				    (Pos, 512)
			    in  let <_5> =
				    call 'erlang':'=:='
					(_4, 0)
				in  call 'erlang':'and'
					(_3, _5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1280
	      case apply 'get_format'/1
		       (Bin) of
		%% Line 1281
		<0> when 'true' ->
		    %% Line 1282
		    call 'erlang':'throw'
			({'error','bad_header'})
		%% Line 1283
		<{'ok',Format,V7}> when 'true' ->
		    %% Line 1284
		    apply 'unpack_format'/4
			(Format, V7, Bin, Reader)
		%% Line 1285
		<{'error',Reason}> when 'true' ->
		    %% Line 1286
		    call 'erlang':'throw'
			({'error',{'bad_header',Reason}})
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1288
	  <Bin,{'reader',_14,_15,Pos,_16}>
	      when try
		    let <_7> =
			call 'erlang':'byte_size'
			    (Bin)
		    in  call 'erlang':'=:='
			    (_7, 512)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1289
	      call 'erlang':'throw'
		  ({'error','misaligned_read',Pos})
	  %% Line 1290
	  <Bin,_X_Reader>
	      when try
		    let <_8> =
			call 'erlang':'byte_size'
			    (Bin)
		    in  call 'erlang':'=:='
			    (_8, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1291
	      'eof'
	  %% Line 1292
	  <_X_Bin,_X_Reader> when 'true' ->
	      %% Line 1293
	      call 'erlang':'throw'
		  ({'error','eof'})
	end
'fileinfo_to_header'/3 =
    %% Line 1299
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Name,Fi = {'file_info',_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31},Link>
	      when call 'erlang':'is_list'
		    (Name) ->
	      %% Line 1304
	      ( case Fi of
		  ( <( {'file_info',_32,_33,_34,_35,_36,_37,_rec73,_38,_39,_40,_41,_42,_43}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1305
			( case Fi of
			    ( <( {'file_info',_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_rec74,_56}
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 1306
				  ( case Fi of
				      ( <( {'file_info',_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_rec75}
					   -| ['compiler_generated'] )> when 'true' ->
					    ( case Fi of
						( <( {'file_info',_71,_72,_73,_74,_rec76,_75,_76,_77,_78,_79,_80,_81,_82}
						     -| ['compiler_generated'] )> when 'true' ->
						      ( case Fi of
							  ( <( {'file_info',_84,_85,_86,_rec77,_87,_88,_89,_90,_91,_92,_93,_94,_95}
							       -| ['compiler_generated'] )> when 'true' ->
								( case Fi of
								    ( <( {'file_info',_97,_98,_99,_100,_101,_rec78,_102,_103,_104,_105,_106,_107,_108}
									 -| ['compiler_generated'] )> when 'true' ->
									  let <BaseHeader> =
									      {'tar_header',Name,_rec73,_rec74,_rec75,0,_rec76,%% Line 1307
															       48,[],[],[],0,0,_rec77,_rec78}
									  in  %% Line 1308
									      apply 'do_fileinfo_to_header'/3
										  (BaseHeader, Fi, Link)
								      -| ['compiler_generated'] )
								    ( <_109> when 'true' ->
									  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'error'
														 -| ['compiler_generated'] )
										(( {'badrecord','file_info'}
										   -| ['compiler_generated'] ))
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								  end
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							  ( <_96> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','file_info'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <_83> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','file_info'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <_70> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','file_info'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_57> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','file_info'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_44> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','file_info'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_18,_17,_16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_18,_17,_16})
		  -| [{'function_name',{'fileinfo_to_header',3}}] )
	    -| ['compiler_generated'] )
	end
'do_fileinfo_to_header'/3 =
    %% Line 1310
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Header,{'file_info',Size,'regular',_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53},_X_Link> when 'true' ->
	      %% Line 1311
	      case Header of
		<{'tar_header',_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67}> when 'true' ->
		    let <_4> =
			call 'erlang':'setelement'
			    (8, Header, 48)
		    in  call 'erlang':'setelement'
			    (6, _4, Size)
		( <_68> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','tar_header'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1312
	  <Header = {'tar_header',Name,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81},%% Line 1313
											    {'file_info',_82,'directory',_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93},%% Line 1313
																				      _X_Link> when 'true' ->
	      let <_rec80> =
		  call %% Line 1314
		       'erlang':%% Line 1314
				'++'
		      (%% Line 1314
		       Name, %% Line 1314
			     [47])
	      in  %% Line 1314
		  case Header of
		    <{'tar_header',_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107}> when 'true' ->
			let <_8> =
			    call 'erlang':'setelement'
				(8, Header, 53)
			in  call 'erlang':'setelement'
				(2, _8, _rec80)
		    ( <_108> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','tar_header'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1315
	  <Header,{'file_info',_109,'symlink',_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120},Link> when 'true' ->
	      %% Line 1316
	      case Header of
		<{'tar_header',_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134}> when 'true' ->
		    let <_11> =
			call 'erlang':'setelement'
			    (9, Header, Link)
		    in  call 'erlang':'setelement'
			    (8, _11, 50)
		( <_135> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','tar_header'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1317
	  <Header,Fi = {'file_info',_136,'device',_137,_138,_139,_140,Mode,_141,_142,_143,_144,_145,_146},_X_Link>
	      when %% Line 1318
		try
		    let <_13> =
			call 'erlang':'band'
			    (Mode, 61440)
		    in  call 'erlang':'=:='
			    (_13, 8192)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1320
	      ( case Fi of
		  ( <( {'file_info',_147,_148,_149,_150,_151,_152,_153,_154,_rec86,_155,_156,_157,_158}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1321
			( case Fi of
			    ( <( {'file_info',_160,_161,_162,_163,_164,_165,_166,_167,_168,_rec87,_169,_170,_171}
				 -| ['compiler_generated'] )> when 'true' ->
				  case Header of
				    <{'tar_header',_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183,_184,_185,_186}> when 'true' ->
					let <_21> =
					    call 'erlang':'setelement'
						(13, Header, _rec87)
					in  let <_22> =
						call 'erlang':'setelement'
						    (12, _21, _rec86)
					    in  call 'erlang':'setelement'
						    (8, _22, 51)
				    ( <_187> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','tar_header'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_172> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','file_info'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_159> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','file_info'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1322
	  <Header,Fi = {'file_info',_188,'device',_189,_190,_191,_192,Mode,_193,_194,_195,_196,_197,_198},_X_Link>
	      when %% Line 1323
		try
		    let <_24> =
			call 'erlang':'band'
			    (Mode, 61440)
		    in  call 'erlang':'=:='
			    (_24, 24576)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1325
	      ( case Fi of
		  ( <( {'file_info',_199,_200,_201,_202,_203,_204,_205,_206,_rec91,_207,_208,_209,_210}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1326
			( case Fi of
			    ( <( {'file_info',_212,_213,_214,_215,_216,_217,_218,_219,_220,_rec92,_221,_222,_223}
				 -| ['compiler_generated'] )> when 'true' ->
				  case Header of
				    <{'tar_header',_225,_226,_227,_228,_229,_230,_231,_232,_233,_234,_235,_236,_237,_238}> when 'true' ->
					let <_32> =
					    call 'erlang':'setelement'
						(13, Header, _rec92)
					in  let <_33> =
						call 'erlang':'setelement'
						    (12, _32, _rec91)
					    in  call 'erlang':'setelement'
						    (8, _33, 52)
				    ( <_239> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','tar_header'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_224> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','file_info'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_211> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','file_info'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1327
	  <Header,{'file_info',_240,'other',_241,_242,_243,_244,Mode,_245,_246,_247,_248,_249,_250},_X_Link>
	      when %% Line 1328
		try
		    let <_35> =
			call 'erlang':'band'
			    (Mode, 61440)
		    in  call 'erlang':'=:='
			    (_35, 4096)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1329
	      case Header of
		<{'tar_header',_251,_252,_253,_254,_255,_256,_257,_258,_259,_260,_261,_262,_263,_264}> when 'true' ->
		    call 'erlang':'setelement'
			(8, Header, 54)
		( <_265> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','tar_header'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1330
	  <Header,Fi,_X_Link> when 'true' ->
	      %% Line 1331
	      ( case Header of
		  ( <( {'tar_header',_rec94,_266,_267,_268,_269,_270,_271,_272,_273,_274,_275,_276,_277,_278}
		       -| ['compiler_generated'] )> when 'true' ->
			{'error',{'invalid_file_type',_rec94,Fi}}
		    -| ['compiler_generated'] )
		  ( <_279> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','tar_header'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'is_ascii'/1 =
    %% Line 1333
    fun (_0) ->
	case _0 of
	  <Str>
	      when call 'erlang':'is_list'
		    (_0) ->
	      let <_3> =
		  fun (_1) ->
		      %% Line 1334
		      call 'erlang':'>='
			  (_1, 128)
	      in  let <_4> =
		      call %% Line 1334
			   'lists':%% Line 1334
				   'any'
			  (_3, %% Line 1334
			       Str)
		  in  %% Line 1334
		      call 'erlang':'not'
			  (_4)
	  %% Line 1335
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      %% Line 1336
	      apply 'is_ascii1'/1
		  (Bin)
	  ( <_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5})
		  -| [{'function_name',{'is_ascii',1}}] )
	    -| ['compiler_generated'] )
	end
'is_ascii1'/1 =
    %% Line 1338
    fun (_0) ->
	case _0 of
	  <#{}#> when 'true' ->
	      %% Line 1339
	      'true'
	  %% Line 1340
	  <#{#<C>(8,1,'integer',['unsigned'|['big']]),
	     #<_X_Rest>('all',8,'binary',['unsigned'|['big']])}#>
	      when call 'erlang':'>='
		    (C,
		     128) ->
	      %% Line 1341
	      'false'
	  %% Line 1342
	  <#{#<_2>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1343
	      apply 'is_ascii1'/1
		  (Rest)
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'is_ascii1',1}}] )
	    -| ['compiler_generated'] )
	end
'to_ascii'/1 =
    %% Line 1345
    fun (_0) ->
	case _0 of
	  <Str>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 1346
	      case apply 'is_ascii'/1
		       (Str) of
		%% Line 1347
		<'true'> when 'true' ->
		    %% Line 1348
		    call 'unicode':'characters_to_binary'
			(Str)
		%% Line 1349
		<'false'> when 'true' ->
		    let <_3> =
			fun (_1) ->
			    %% Line 1350
			    call 'erlang':'<'
				(_1, 128)
		    in  let <Chars> =
			    call %% Line 1350
				 'lists':%% Line 1350
					 'filter'
				(_3, %% Line 1350
				     Str)
			in  %% Line 1351
			    call 'unicode':'characters_to_binary'
				(Chars)
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1353
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      %% Line 1354
	      apply 'to_ascii'/2
		  (Bin, #{}#)
	  ( <_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6})
		  -| [{'function_name',{'to_ascii',1}}] )
	    -| ['compiler_generated'] )
	end
'to_ascii'/2 =
    %% Line 1355
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{}#,Acc> when 'true' ->
	      %% Line 1356
	      Acc
	  %% Line 1357
	  <#{#<C>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc>
	      when call 'erlang':'<'
		    (C,
		     128) ->
	      let <_2> =
		  #{#<%% Line 1358
		      Acc>(%% Line 1358
			   'all',8,'binary',['unsigned'|['big']]),
		    #<%% Line 1358
		      C>(%% Line 1358
			 8,1,'integer',['unsigned'|['big']])}#
	      in  %% Line 1358
		  apply 'to_ascii'/2
		      (Rest, _2)
	  %% Line 1359
	  <#{#<_5>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      %% Line 1360
	      apply 'to_ascii'/2
		  (Rest, Acc)
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'to_ascii',2}}] )
	    -| ['compiler_generated'] )
	end
'is_header_only_type'/1 =
    %% Line 1362
    fun (_0) ->
	case _0 of
	  <50> when 'true' ->
	      'true'
	  %% Line 1363
	  <49> when 'true' ->
	      'true'
	  %% Line 1364
	  <53> when 'true' ->
	      'true'
	  %% Line 1365
	  <_2> when 'true' ->
	      'false'
	end
'foldl_read'/4 =
    %% Line 1367
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Reader = {'reader',_21,'read',_22,_23},Fun,Accu,Opts = {'read_opts',_24,_25,_26,_27,_28,_29}>
	      when %% Line 1368
		call 'erlang':'is_function'
		    (Fun,
		     4) ->
	      %% Line 1369
	      case apply 'foldl_read0'/4
		       (Reader, Fun, Accu, Opts) of
		%% Line 1370
		<{'ok',Result,_X_Reader2}> when 'true' ->
		    %% Line 1371
		    Result
		%% Line 1372
		<Err = {'error',_30}> when 'true' ->
		    %% Line 1373
		    Err
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1375
	  <{'reader',_31,Access,_32,_33},_X_Fun,_X_Accu,_X_Opts> when 'true' ->
	      %% Line 1376
	      {'error',{'read_mode_expected',Access}}
	  %% Line 1377
	  <TarName,Fun,Accu,Opts = {'read_opts',_34,_35,_36,_37,_38,_39}>
	      when %% Line 1378
		call 'erlang':'is_function'
		    (Fun,
		     4) ->
	      %% Line 1379
	      try
		  ( case Opts of
		      ( <( {'read_opts',_40,_41,_42,_43,_rec95,_44}
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'open'/2
				(TarName, ['read'|_rec95])
			-| ['compiler_generated'] )
		      ( <_45> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','read_opts'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      of <_7> ->
		  case _7 of
		    %% Line 1380
		    <{'ok',Reader = {'reader',_46,'read',_47,_48}}> when 'true' ->
			%% Line 1381
			letrec
			    'after$^0'/0 =
				fun () ->
				    %% Line 1384
				    apply 'close'/1
					(Reader)
			in  try
				%% Line 1382
				apply 'foldl_read'/4
				    (Reader, Fun, Accu, Opts)
			    of <_9> ->
				do  ( apply 'after$^0'/0
					  ()
				      -| ['compiler_generated'] )
				    _9
			    catch <_12,_11,_10> ->
				do  ( apply 'after$^0'/0
					  ()
				      -| ['compiler_generated'] )
				    primop 'raise'
					(_10, _11)
		    %% Line 1386
		    <Err = {'error',_49}> when 'true' ->
			%% Line 1387
			Err
		    ( <_13> when 'true' ->
			  primop 'match_fail'
			      ({'try_clause',_13})
		      -| ['compiler_generated'] )
		  end
	      catch <_16,_15,_14> ->
		  %% Line 1389
		  case <_16,_15,_14> of
		    <( 'throw'
		       -| ['compiler_generated'] ),Err,_50> when 'true' ->
			%% Line 1390
			Err
		    ( <_57,_58,_59> when 'true' ->
			  primop 'raise'
			      (_59, _58)
		      -| ['compiler_generated'] )
		  end
	  ( <_20,_19,_18,_17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_20,_19,_18,_17})
		  -| [{'function_name',{'foldl_read',4}}] )
	    -| ['compiler_generated'] )
	end
'foldl_read0'/4 =
    %% Line 1393
    fun (_0,_1,_2,_3) ->
	%% Line 1394
	try
	    apply 'foldl_read1'/5
		(_1, _2, _0, _3, ~{}~)
	of <_4> ->
	    case _4 of
	      %% Line 1395
	      <Ok = {'ok',_13,_14}> when 'true' ->
		  %% Line 1396
		  Ok
	      ( <_5> when 'true' ->
		    primop 'match_fail'
			({'try_clause',_5})
		-| ['compiler_generated'] )
	    end
	catch <_8,_7,_6> ->
	    %% Line 1398
	    case <_8,_7,_6> of
	      <( 'throw'
		 -| ['compiler_generated'] ),( {( 'error'
						  -| ['compiler_generated'] ),( {Reason,Format,Args}
										-| ['compiler_generated'] )}
					       -| ['compiler_generated'] ),_15> when 'true' ->
		  do  %% Line 1399
		      apply 'read_verbose'/3
			  (_3, Format, Args)
		      %% Line 1400
		      {'error',Reason}
	      %% Line 1401
	      <( 'throw'
		 -| ['compiler_generated'] ),Err,_16> when 'true' ->
		  %% Line 1402
		  Err
	      ( <_17,_18,_19> when 'true' ->
		    primop 'raise'
			(_19, _18)
		-| ['compiler_generated'] )
	    end
'foldl_read1'/5 =
    %% Line 1405
    fun (_0,_1,_2,_3,_4) ->
	%% Line 1406
	case apply 'skip_unread'/1
		 (_2) of
	  <{'ok',Reader1}> when 'true' ->
	      %% Line 1407
	      case apply 'get_header'/1
		       (Reader1) of
		%% Line 1408
		<'eof'> when 'true' ->
		    %% Line 1409
		    apply _0
			('eof', Reader1, _3, _1)
		%% Line 1410
		<{Header,Reader2}> when 'true' ->
		    %% Line 1411
		    ( case Header of
			( <( {'tar_header',_25,_26,_27,_28,_29,_30,_rec96,_31,_32,_33,_34,_35,_36,_37}
			     -| ['compiler_generated'] )> when 'true' ->
			      case _rec96 of
				%% Line 1412
				<120> when 'true' ->
				    %% Line 1413
				    case apply 'parse_pax'/1
					     (Reader2) of
				      <{ExtraHeaders2,Reader3}> when 'true' ->
					  let <ExtraHeaders3> =
					      call %% Line 1414
						   'maps':%% Line 1414
							  'merge'
						  (_4, %% Line 1414
						       ExtraHeaders2)
					  in  %% Line 1415
					      apply 'foldl_read1'/5
						  (_0, _1, Reader3, _3, ExtraHeaders3)
				      ( <_8> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_8})
					-| ['compiler_generated'] )
				    end
				%% Line 1416
				<76> when 'true' ->
				    %% Line 1417
				    case apply 'get_real_name'/1
					     (Reader2) of
				      <{RealName,Reader3}> when 'true' ->
					  let <_11> =
					      apply %% Line 1419
						    'parse_string'/1
						  (%% Line 1419
						   RealName)
					  in  let <ExtraHeaders2> =
						  call %% Line 1418
						       'maps':%% Line 1418
							      'put'
						      (%% Line 1418
						       #{#<112>(8,1,'integer',['unsigned'|['big']]),
							 #<97>(8,1,'integer',['unsigned'|['big']]),
							 #<116>(8,1,'integer',['unsigned'|['big']]),
							 #<104>(8,1,'integer',['unsigned'|['big']])}#, _11, _4)
					      in  %% Line 1420
						  apply 'foldl_read1'/5
						      (_0, _1, Reader3, _3, ExtraHeaders2)
				      ( <_10> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_10})
					-| ['compiler_generated'] )
				    end
				%% Line 1421
				<75> when 'true' ->
				    %% Line 1422
				    case apply 'get_real_name'/1
					     (Reader2) of
				      <{RealName,Reader3}> when 'true' ->
					  let <_14> =
					      apply %% Line 1424
						    'parse_string'/1
						  (%% Line 1424
						   RealName)
					  in  let <ExtraHeaders2> =
						  call %% Line 1423
						       'maps':%% Line 1423
							      'put'
						      (%% Line 1423
						       #{#<108>(8,1,'integer',['unsigned'|['big']]),
							 #<105>(8,1,'integer',['unsigned'|['big']]),
							 #<110>(8,1,'integer',['unsigned'|['big']]),
							 #<107>(8,1,'integer',['unsigned'|['big']]),
							 #<112>(8,1,'integer',['unsigned'|['big']]),
							 #<97>(8,1,'integer',['unsigned'|['big']]),
							 #<116>(8,1,'integer',['unsigned'|['big']]),
							 #<104>(8,1,'integer',['unsigned'|['big']])}#, _14, _4)
					      in  %% Line 1425
						  apply 'foldl_read1'/5
						      (_0, _1, Reader3, _3, ExtraHeaders2)
				      ( <_13> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_13})
					-| ['compiler_generated'] )
				    end
				%% Line 1426
				<_39> when 'true' ->
				    let <Header1> =
					apply %% Line 1427
					      'merge_pax'/2
					    (%% Line 1427
					     Header, _4)
				    in  %% Line 1428
					case apply _0
						 (Header1, Reader2, _3, _1) of
					  <{'ok',NewAccu,Reader3}> when 'true' ->
					      %% Line 1429
					      apply 'foldl_read1'/5
						  (_0, NewAccu, Reader3, _3, ~{}~)
					  ( <_17> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_17})
					    -| ['compiler_generated'] )
					end
			      end
			  -| ['compiler_generated'] )
			( <_38> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','tar_header'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_19> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_19})
		  -| ['compiler_generated'] )
	      end
	  ( <_5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_5})
	    -| ['compiler_generated'] )
	end
'merge_pax'/2 =
    %% Line 1435
    fun (_0,_1) ->
	case <_0,_1> of
	  <Header,ExtraHeaders>
	      when call 'erlang':'is_map'
		    (ExtraHeaders) ->
	      let <_2> =
		  call %% Line 1436
		       'maps':%% Line 1436
			      'to_list'
		      (%% Line 1436
		       ExtraHeaders)
	      in  %% Line 1436
		  apply 'do_merge_pax'/2
		      (Header, _2)
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'merge_pax',2}}] )
	    -| ['compiler_generated'] )
	end
'do_merge_pax'/2 =
    %% Line 1438
    fun (_0,_1) ->
	case <_0,_1> of
	  <Header,[]> when 'true' ->
	      %% Line 1439
	      Header
	  %% Line 1440
	  <Header,[{#{#<112>(8,1,'integer',['unsigned'|['big']]),
		      #<97>(8,1,'integer',['unsigned'|['big']]),
		      #<116>(8,1,'integer',['unsigned'|['big']]),
		      #<104>(8,1,'integer',['unsigned'|['big']])}#,Path}|Rest]> when 'true' ->
	      let <_rec97> =
		  call %% Line 1441
		       'unicode':%% Line 1441
				 'characters_to_list'
		      (%% Line 1441
		       Path)
	      in  %% Line 1441
		  case Header of
		    <{'tar_header',_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57}> when 'true' ->
			let <_5> =
			    call 'erlang':'setelement'
				(2, Header, _rec97)
			in  apply 'do_merge_pax'/2
				(_5, Rest)
		    ( <_58> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','tar_header'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1442
	  <Header,[{#{#<108>(8,1,'integer',['unsigned'|['big']]),
		      #<105>(8,1,'integer',['unsigned'|['big']]),
		      #<110>(8,1,'integer',['unsigned'|['big']]),
		      #<107>(8,1,'integer',['unsigned'|['big']]),
		      #<112>(8,1,'integer',['unsigned'|['big']]),
		      #<97>(8,1,'integer',['unsigned'|['big']]),
		      #<116>(8,1,'integer',['unsigned'|['big']]),
		      #<104>(8,1,'integer',['unsigned'|['big']])}#,LinkPath}|Rest]> when 'true' ->
	      let <_rec99> =
		  call %% Line 1443
		       'unicode':%% Line 1443
				 'characters_to_list'
		      (%% Line 1443
		       LinkPath)
	      in  %% Line 1443
		  case Header of
		    <{'tar_header',_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72}> when 'true' ->
			let <_9> =
			    call 'erlang':'setelement'
				(9, Header, _rec99)
			in  apply 'do_merge_pax'/2
				(_9, Rest)
		    ( <_73> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','tar_header'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1444
	  <Header,[{#{#<103>(8,1,'integer',['unsigned'|['big']]),
		      #<110>(8,1,'integer',['unsigned'|['big']]),
		      #<97>(8,1,'integer',['unsigned'|['big']]),
		      #<109>(8,1,'integer',['unsigned'|['big']]),
		      #<101>(8,1,'integer',['unsigned'|['big']])}#,Gname}|Rest]> when 'true' ->
	      let <_rec101> =
		  call %% Line 1445
		       'unicode':%% Line 1445
				 'characters_to_list'
		      (%% Line 1445
		       Gname)
	      in  %% Line 1445
		  case Header of
		    <{'tar_header',_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87}> when 'true' ->
			let <_13> =
			    call 'erlang':'setelement'
				(11, Header, _rec101)
			in  apply 'do_merge_pax'/2
				(_13, Rest)
		    ( <_88> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','tar_header'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1446
	  <Header,[{#{#<117>(8,1,'integer',['unsigned'|['big']]),
		      #<110>(8,1,'integer',['unsigned'|['big']]),
		      #<97>(8,1,'integer',['unsigned'|['big']]),
		      #<109>(8,1,'integer',['unsigned'|['big']]),
		      #<101>(8,1,'integer',['unsigned'|['big']])}#,Uname}|Rest]> when 'true' ->
	      let <_rec103> =
		  call %% Line 1447
		       'unicode':%% Line 1447
				 'characters_to_list'
		      (%% Line 1447
		       Uname)
	      in  %% Line 1447
		  case Header of
		    <{'tar_header',_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102}> when 'true' ->
			let <_17> =
			    call 'erlang':'setelement'
				(10, Header, _rec103)
			in  apply 'do_merge_pax'/2
				(_17, Rest)
		    ( <_103> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','tar_header'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1448
	  <Header,[{#{#<117>(8,1,'integer',['unsigned'|['big']]),
		      #<105>(8,1,'integer',['unsigned'|['big']]),
		      #<100>(8,1,'integer',['unsigned'|['big']])}#,Uid}|Rest]> when 'true' ->
	      let <Uid2> =
		  call %% Line 1449
		       'erlang':%% Line 1449
				'binary_to_integer'
		      (%% Line 1449
		       Uid)
	      in  %% Line 1450
		  case Header of
		    <{'tar_header',_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117}> when 'true' ->
			let <_21> =
			    call 'erlang':'setelement'
				(4, Header, Uid2)
			in  apply 'do_merge_pax'/2
				(_21, Rest)
		    ( <_118> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','tar_header'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1451
	  <Header,[{#{#<103>(8,1,'integer',['unsigned'|['big']]),
		      #<105>(8,1,'integer',['unsigned'|['big']]),
		      #<100>(8,1,'integer',['unsigned'|['big']])}#,Gid}|Rest]> when 'true' ->
	      let <Gid2> =
		  call %% Line 1452
		       'erlang':%% Line 1452
				'binary_to_integer'
		      (%% Line 1452
		       Gid)
	      in  %% Line 1453
		  case Header of
		    <{'tar_header',_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132}> when 'true' ->
			let <_25> =
			    call 'erlang':'setelement'
				(5, Header, Gid2)
			in  apply 'do_merge_pax'/2
				(_25, Rest)
		    ( <_133> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','tar_header'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1454
	  <Header,[{#{#<97>(8,1,'integer',['unsigned'|['big']]),
		      #<116>(8,1,'integer',['unsigned'|['big']]),
		      #<105>(8,1,'integer',['unsigned'|['big']]),
		      #<109>(8,1,'integer',['unsigned'|['big']]),
		      #<101>(8,1,'integer',['unsigned'|['big']])}#,Atime}|Rest]> when 'true' ->
	      let <Atime2> =
		  apply %% Line 1455
			'parse_pax_time'/1
		      (%% Line 1455
		       Atime)
	      in  %% Line 1456
		  case Header of
		    <{'tar_header',_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147}> when 'true' ->
			let <_29> =
			    call 'erlang':'setelement'
				(14, Header, Atime2)
			in  apply 'do_merge_pax'/2
				(_29, Rest)
		    ( <_148> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','tar_header'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1457
	  <Header,[{#{#<109>(8,1,'integer',['unsigned'|['big']]),
		      #<116>(8,1,'integer',['unsigned'|['big']]),
		      #<105>(8,1,'integer',['unsigned'|['big']]),
		      #<109>(8,1,'integer',['unsigned'|['big']]),
		      #<101>(8,1,'integer',['unsigned'|['big']])}#,Mtime}|Rest]> when 'true' ->
	      let <Mtime2> =
		  apply %% Line 1458
			'parse_pax_time'/1
		      (%% Line 1458
		       Mtime)
	      in  %% Line 1459
		  case Header of
		    <{'tar_header',_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162}> when 'true' ->
			let <_33> =
			    call 'erlang':'setelement'
				(7, Header, Mtime2)
			in  apply 'do_merge_pax'/2
				(_33, Rest)
		    ( <_163> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','tar_header'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1460
	  <Header,[{#{#<99>(8,1,'integer',['unsigned'|['big']]),
		      #<116>(8,1,'integer',['unsigned'|['big']]),
		      #<105>(8,1,'integer',['unsigned'|['big']]),
		      #<109>(8,1,'integer',['unsigned'|['big']]),
		      #<101>(8,1,'integer',['unsigned'|['big']])}#,Ctime}|Rest]> when 'true' ->
	      let <Ctime2> =
		  apply %% Line 1461
			'parse_pax_time'/1
		      (%% Line 1461
		       Ctime)
	      in  %% Line 1462
		  case Header of
		    <{'tar_header',_164,_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177}> when 'true' ->
			let <_37> =
			    call 'erlang':'setelement'
				(15, Header, Ctime2)
			in  apply 'do_merge_pax'/2
				(_37, Rest)
		    ( <_178> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','tar_header'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1463
	  <Header,[{#{#<115>(8,1,'integer',['unsigned'|['big']]),
		      #<105>(8,1,'integer',['unsigned'|['big']]),
		      #<122>(8,1,'integer',['unsigned'|['big']]),
		      #<101>(8,1,'integer',['unsigned'|['big']])}#,Size}|Rest]> when 'true' ->
	      let <Size2> =
		  call %% Line 1464
		       'erlang':%% Line 1464
				'binary_to_integer'
		      (%% Line 1464
		       Size)
	      in  %% Line 1465
		  case Header of
		    <{'tar_header',_179,_180,_181,_182,_183,_184,_185,_186,_187,_188,_189,_190,_191,_192}> when 'true' ->
			let <_41> =
			    call 'erlang':'setelement'
				(6, Header, Size2)
			in  apply 'do_merge_pax'/2
				(_41, Rest)
		    ( <_193> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','tar_header'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1466
	  <Header,[{#{#<83>(8,1,'integer',['unsigned'|['big']]),
		      #<67>(8,1,'integer',['unsigned'|['big']]),
		      #<72>(8,1,'integer',['unsigned'|['big']]),
		      #<73>(8,1,'integer',['unsigned'|['big']]),
		      #<76>(8,1,'integer',['unsigned'|['big']]),
		      #<89>(8,1,'integer',['unsigned'|['big']]),
		      #<46>(8,1,'integer',['unsigned'|['big']]),
		      #<120>(8,1,'integer',['unsigned'|['big']]),
		      #<97>(8,1,'integer',['unsigned'|['big']]),
		      #<116>(8,1,'integer',['unsigned'|['big']]),
		      #<116>(8,1,'integer',['unsigned'|['big']]),
		      #<114>(8,1,'integer',['unsigned'|['big']]),
		      #<46>(8,1,'integer',['unsigned'|['big']]),
		      #<_X_Key>('all',8,'binary',['unsigned'|['big']])}#,_X_Value}|Rest]> when 'true' ->
	      %% Line 1467
	      apply 'do_merge_pax'/2
		  (Header, Rest)
	  %% Line 1468
	  <Header,[_X_Ignore|Rest]> when 'true' ->
	      %% Line 1469
	      apply 'do_merge_pax'/2
		  (Header, Rest)
	  ( <_43,_42> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_43,_42})
		  -| [{'function_name',{'do_merge_pax',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_pax_time'/1 =
    %% Line 1473
    fun (_0) ->
	case _0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      let <_17> =
		  case %% Line 1474
		       call 'binary':'split'
			   (Bin, [#{#<46>(8,1,'integer',['unsigned'|['big']])}#]) of
		    %% Line 1475
		    <[SecondsStr|[NanoStr0|[]]]> when 'true' ->
			let <Seconds> =
			    call %% Line 1476
				 'erlang':%% Line 1476
					  'binary_to_integer'
				(%% Line 1476
				 SecondsStr)
			in  %% Line 1477
			    case <> of
			      <>
				  when try
					let <_2> =
					    call 'erlang':'byte_size'
						(NanoStr0)
					in  call 'erlang':'<'
						(_2, 9)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  let <_3> =
				      call %% Line 1479
					   'erlang':%% Line 1479
						    'byte_size'
					  (%% Line 1479
					   NanoStr0)
				  in  let <PaddingN> =
					  call %% Line 1479
					       'erlang':%% Line 1479
							'-'
					      (%% Line 1479
					       9, _3)
				      in  let <Padding> =
					      call %% Line 1480
						   'binary':%% Line 1480
							    'copy'
						  (%% Line 1480
						   #{#<48>(8,1,'integer',['unsigned'|['big']])}#, %% Line 1480
												  PaddingN)
					  in  let <NanoStr1> =
						  #{#<%% Line 1481
						      NanoStr0>(%% Line 1481
								'all',8,'binary',['unsigned'|['big']]),
						    #<%% Line 1481
						      Padding>(%% Line 1481
							       'all',8,'binary',['unsigned'|['big']])}#
					      in  let <Nano> =
						      call %% Line 1482
							   'erlang':%% Line 1482
								    'binary_to_integer'
							  (%% Line 1482
							   NanoStr1)
						  in  let <_8> =
							  call %% Line 1483
							       'erlang':%% Line 1483
									'*'
							      (%% Line 1483
							       Seconds, %% Line 1483
									1000000000)
						      in  %% Line 1483
							  call 'erlang':'+'
							      (_8, Nano)
			      %% Line 1484
			      <>
				  when try
					let <_9> =
					    call 'erlang':'byte_size'
						(NanoStr0)
					in  call 'erlang':'>'
						(_9, 9)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  let <NanoStr1> =
				      call %% Line 1486
					   'erlang':%% Line 1486
						    'binary_part'
					  (%% Line 1486
					   NanoStr0, %% Line 1486
						     0, %% Line 1486
							9)
				  in  let <Nano> =
					  call %% Line 1487
					       'erlang':%% Line 1487
							'binary_to_integer'
					      (%% Line 1487
					       NanoStr1)
				      in  let <_12> =
					      call %% Line 1488
						   'erlang':%% Line 1488
							    '*'
						  (%% Line 1488
						   Seconds, %% Line 1488
							    1000000000)
					  in  %% Line 1488
					      call 'erlang':'+'
						  (_12, Nano)
			      %% Line 1489
			      <> when 'true' ->
				  let <_14> =
				      call %% Line 1490
					   'erlang':%% Line 1490
						    '*'
					  (%% Line 1490
					   Seconds, %% Line 1490
						    1000000000)
				  in  let <_13> =
					  call %% Line 1490
					       'erlang':%% Line 1490
							'binary_to_integer'
					      (%% Line 1490
					       NanoStr0)
				      in  %% Line 1490
					  call 'erlang':'+'
					      (_14, _13)
			    end
		    %% Line 1492
		    <[SecondsStr|[]]> when 'true' ->
			let <_15> =
			    call %% Line 1493
				 'erlang':%% Line 1493
					  'binary_to_integer'
				(%% Line 1493
				 SecondsStr)
			in  %% Line 1493
			    call 'erlang':'*'
				(_15, 1000000000)
		    ( <_16> when 'true' ->
			  %% Line 1474
			  primop 'match_fail'
			      ({'case_clause',_16})
		      -| ['compiler_generated'] )
		  end
	      in  let <Micro> =
		      call %% Line 1496
			   'erlang':%% Line 1496
				    'div'
			  (_17, %% Line 1496
				1000)
		  in  let <Mega> =
			  call %% Line 1497
			       'erlang':%% Line 1497
					'div'
			      (%% Line 1497
			       Micro, %% Line 1497
				      1000000000000)
		      in  let <_22> =
			      call %% Line 1498
				   'erlang':%% Line 1498
					    'div'
				  (%% Line 1498
				   Micro, %% Line 1498
					  1000000)
			  in  let <_21> =
				  call %% Line 1498
				       'erlang':%% Line 1498
						'*'
				      (%% Line 1498
				       Mega, %% Line 1498
					     1000000)
			      in  %% Line 1498
				  call 'erlang':'-'
				      (_22, _21)
	  ( <_24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_24})
		  -| [{'function_name',{'parse_pax_time',1}}] )
	    -| ['compiler_generated'] )
	end
'parse_pax'/1 =
    %% Line 1503
    fun (_0) ->
	case _0 of
	  <{'reg_file_reader',Handle,0,_3,_4}> when 'true' ->
	      %% Line 1504
	      {~{}~,Handle}
	  %% Line 1505
	  <{'reg_file_reader',Handle0,NumBytes,_5,_6}> when 'true' ->
	      %% Line 1506
	      case apply 'do_read'/2
		       (Handle0, NumBytes) of
		%% Line 1507
		<{'ok',Bytes,Handle1}> when 'true' ->
		    %% Line 1508
		    apply 'do_parse_pax'/3
			(Handle1, Bytes, ~{}~)
		%% Line 1509
		<Err = {'error',_7}> when 'true' ->
		    %% Line 1510
		    call 'erlang':'throw'
			(Err)
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_1})
		  -| ['compiler_generated'] )
	      end
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'parse_pax',1}}] )
	    -| ['compiler_generated'] )
	end
'do_parse_pax'/3 =
    %% Line 1513
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Reader,#{}#,Headers> when 'true' ->
	      %% Line 1514
	      {Headers,Reader}
	  %% Line 1515
	  <Reader,Bin,Headers> when 'true' ->
	      %% Line 1516
	      case apply 'parse_pax_record'/1
		       (Bin) of
		<{Key,Value,Residual}> when 'true' ->
		    let <NewHeaders> =
			call %% Line 1517
			     'maps':%% Line 1517
				    'put'
			    (%% Line 1517
			     Key, %% Line 1517
				  Value, %% Line 1517
					 Headers)
		    in  %% Line 1518
			apply 'do_parse_pax'/3
			    (Reader, Residual, NewHeaders)
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	end
'parse_pax_record'/1 =
    %% Line 1521
    fun (_0) ->
	case _0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      %% Line 1522
	      case call 'binary':'split'
		       (Bin, [#{#<10>(8,1,'integer',['unsigned'|['big']])}#]) of
		%% Line 1523
		<[Record|[Residual|[]]]> when 'true' ->
		    %% Line 1524
		    case call 'binary':'split'
			     (Record, [#{#<32>(8,1,'integer',['unsigned'|['big']])}#], ['trim_all']) of
		      %% Line 1525
		      <[_X_Len|[Record1|[]]]> when 'true' ->
			  %% Line 1526
			  case call 'binary':'split'
				   (Record1, [#{#<61>(8,1,'integer',['unsigned'|['big']])}#], ['trim_all']) of
			    %% Line 1527
			    <[AttrName|[AttrValue|[]]]> when 'true' ->
				%% Line 1528
				{AttrName,AttrValue,Residual}
			    %% Line 1529
			    <_X_Other> when 'true' ->
				%% Line 1530
				call 'erlang':'throw'
				    ({'error','malformed_pax_record'})
			  end
		      %% Line 1532
		      <_X_Other> when 'true' ->
			  %% Line 1533
			  call 'erlang':'throw'
			      ({'error','malformed_pax_record'})
		    end
		%% Line 1535
		<_X_Other> when 'true' ->
		    %% Line 1536
		    call 'erlang':'throw'
			({'error','malformed_pax_record'})
	      end
	  ( <_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4})
		  -| [{'function_name',{'parse_pax_record',1}}] )
	    -| ['compiler_generated'] )
	end
'get_real_name'/1 =
    %% Line 1539
    fun (_0) ->
	case _0 of
	  <{'reg_file_reader',Handle,0,_4,_5}> when 'true' ->
	      %% Line 1540
	      {[],Handle}
	  %% Line 1541
	  <{'reg_file_reader',Handle0,NumBytes,_6,_7}> when 'true' ->
	      %% Line 1542
	      case apply 'do_read'/2
		       (Handle0, NumBytes) of
		%% Line 1543
		<{'ok',RealName,Handle1}> when 'true' ->
		    %% Line 1544
		    {RealName,Handle1}
		%% Line 1545
		<Err = {'error',_8}> when 'true' ->
		    %% Line 1546
		    call 'erlang':'throw'
			(Err)
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1548
	  <Reader0 = {'sparse_file_reader',_9,NumBytes,_10,_11,_12}> when 'true' ->
	      %% Line 1549
	      case apply 'do_read'/2
		       (Reader0, NumBytes) of
		%% Line 1550
		<{'ok',RealName,Reader1}> when 'true' ->
		    %% Line 1551
		    {RealName,Reader1}
		%% Line 1552
		<Err = {'error',_13}> when 'true' ->
		    %% Line 1553
		    call 'erlang':'throw'
			(Err)
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'get_real_name',1}}] )
	    -| ['compiler_generated'] )
	end
'skip_file'/1 =
    %% Line 1557
    fun (_0) ->
	case _0 of
	  <Reader = {'reg_file_reader',Handle0,_13,Pos,Size}> when 'true' ->
	      let <Padding> =
		  apply %% Line 1558
			'skip_padding'/1
		      (%% Line 1558
		       Size)
	      in  %% Line 1559
		  ( case Handle0 of
		      ( <( {'reader',_14,_15,_rec111,_16}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_2> =
				call 'erlang':'-'
				    (Size, Pos)
			    in  let <_5> =
				    call 'erlang':'+'
					(_rec111, _2)
				in  let <AbsPos> =
					call 'erlang':'+'
					    (_5, Padding)
				    in  %% Line 1560
					case apply 'do_position'/2
						 (Handle0, AbsPos) of
					  %% Line 1561
					  <{'ok',_18,Handle1}> when 'true' ->
					      %% Line 1562
					      case Reader of
						<{'reg_file_reader',_rec113,_rec114,_rec115,_rec116}> when 'true' ->
						    {'reg_file_reader',Handle1,0,Size,_rec116}
						( <_19> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','reg_file_reader'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					  %% Line 1563
					  <Err> when 'true' ->
					      %% Line 1564
					      call 'erlang':'throw'
						  (Err)
					end
			-| ['compiler_generated'] )
		      ( <_17> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','reader'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 1566
	  <Reader = {'sparse_file_reader',_20,_21,Pos,Size,_22}> when 'true' ->
	      let <_10> =
		  call %% Line 1567
		       'erlang':%% Line 1567
				'-'
		      (%% Line 1567
		       Size, %% Line 1567
			     Pos)
	      in  %% Line 1567
		  case apply 'do_read'/2
			   (Reader, _10) of
		    %% Line 1568
		    <{'ok',_23,Reader2}> when 'true' ->
			%% Line 1569
			Reader2
		    %% Line 1570
		    <Err> when 'true' ->
			%% Line 1571
			call 'erlang':'throw'
			    (Err)
		  end
	  ( <_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12})
		  -| [{'function_name',{'skip_file',1}}] )
	    -| ['compiler_generated'] )
	end
'skip_padding'/1 =
    %% Line 1574
    fun (_0) ->
	case _0 of
	  <0> when 'true' ->
	      %% Line 1575
	      0
	  %% Line 1576
	  <Size>
	      when try
		    let <_1> =
			call 'erlang':'rem'
			    (_0, 512)
		    in  call 'erlang':'=:='
			    (_1, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1577
	      0
	  %% Line 1578
	  <Size>
	      when call 'erlang':'=<'
		    (_0,
		     512) ->
	      %% Line 1579
	      call 'erlang':'-'
		  (512, Size)
	  %% Line 1580
	  <Size> when 'true' ->
	      let <_2> =
		  call %% Line 1581
		       'erlang':%% Line 1581
				'rem'
		      (%% Line 1581
		       Size, %% Line 1581
			     512)
	      in  %% Line 1581
		  call 'erlang':'-'
		      (512, _2)
	end
'skip_unread'/1 =
    %% Line 1583
    fun (_0) ->
	case _0 of
	  <Reader0 = {'reader',_9,_10,Pos,_11}>
	      when try
		    let <_1> =
			call 'erlang':'rem'
			    (Pos, 512)
		    in  call 'erlang':'>'
			    (_1, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_2> =
		  call %% Line 1584
		       'erlang':%% Line 1584
				'+'
		      (%% Line 1584
		       Pos, %% Line 1584
			    512)
	      in  let <Padding> =
		      apply %% Line 1584
			    'skip_padding'/1
			  (_2)
		  in  let <AbsPos> =
			  call %% Line 1585
			       'erlang':%% Line 1585
					'+'
			      (%% Line 1585
			       Pos, %% Line 1585
				    Padding)
		      in  %% Line 1586
			  case apply 'do_position'/2
				   (Reader0, AbsPos) of
			    %% Line 1587
			    <{'ok',_12,Reader1}> when 'true' ->
				%% Line 1588
				{'ok',Reader1}
			    %% Line 1589
			    <Err> when 'true' ->
				%% Line 1590
				call 'erlang':'throw'
				    (Err)
			  end
	  %% Line 1592
	  <Reader = {'reader',_13,_14,_15,_16}> when 'true' ->
	      %% Line 1593
	      {'ok',Reader}
	  %% Line 1594
	  <{'reg_file_reader',Handle,0,_17,_18}> when 'true' ->
	      %% Line 1595
	      apply 'skip_unread'/1
		  (Handle)
	  %% Line 1596
	  <Reader = {'reg_file_reader',_19,_20,_21,_22}> when 'true' ->
	      %% Line 1597
	      case apply 'skip_file'/1
		       (Reader) of
		<{'reg_file_reader',Handle,_23,_24,_25}> when 'true' ->
		    %% Line 1598
		    {'ok',Handle}
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1599
	  <{'sparse_file_reader',Handle,0,_26,_27,_28}> when 'true' ->
	      %% Line 1600
	      apply 'skip_unread'/1
		  (Handle)
	  %% Line 1601
	  <Reader = {'sparse_file_reader',_29,_30,_31,_32,_33}> when 'true' ->
	      %% Line 1602
	      case apply 'skip_file'/1
		       (Reader) of
		<{'sparse_file_reader',Handle,_34,_35,_36,_37}> when 'true' ->
		    %% Line 1603
		    {'ok',Handle}
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_7})
		  -| ['compiler_generated'] )
	      end
	  ( <_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8})
		  -| [{'function_name',{'skip_unread',1}}] )
	    -| ['compiler_generated'] )
	end
'write_extracted_element'/3 =
    %% Line 1605
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{'tar_header',Name,_18,_19,_20,_21,_22,Type,_23,_24,_25,_26,_27,_28,_29},%% Line 1606
										    Bin,%% Line 1607
											Opts = %% Line 1607
											       {'read_opts',_30,_31,_32,'memory',_33,_34}> when 'true' ->
	      %% Line 1608
	      case apply 'typeflag'/1
		       (Type) of
		%% Line 1609
		<'regular'> when 'true' ->
		    do  %% Line 1610
			apply 'read_verbose'/3
			    (Opts, [120|[32|[126|[116|[115|[126|[110]]]]]]], [Name|[]])
			%% Line 1611
			{'ok',{Name,Bin}}
		%% Line 1612
		<_35> when 'true' ->
		    %% Line 1613
		    'ok'
	      end
	  %% Line 1615
	  <Header = {'tar_header',Name0,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48},Bin,Opts> when 'true' ->
	      let <Name1> =
		  apply %% Line 1616
			'make_safe_path'/2
		      (%% Line 1616
		       Name0, %% Line 1616
			      Opts)
	      in  %% Line 1618
		  ( case Header of
		      ( <( {'tar_header',_49,_50,_51,_52,_53,_54,_rec117,_55,_56,_57,_58,_59,_60,_61}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_12> =
				case apply 'typeflag'/1
					 (_rec117) of
				  %% Line 1619
				  <'regular'> when 'true' ->
				      %% Line 1620
				      apply 'create_regular'/4
					  (Name1, Name0, Bin, Opts)
				  %% Line 1621
				  <'directory'> when 'true' ->
				      do  %% Line 1622
					  apply 'read_verbose'/3
					      (Opts, [120|[32|[126|[116|[115|[126|[110]]]]]]], [Name0|[]])
					  %% Line 1623
					  apply 'create_extracted_dir'/2
					      (Name1, Opts)
				  %% Line 1624
				  <'symlink'> when 'true' ->
				      do  %% Line 1625
					  apply 'read_verbose'/3
					      (Opts, [120|[32|[126|[116|[115|[126|[110]]]]]]], [Name0|[]])
					  let <LinkName> =
					      apply %% Line 1626
						    'safe_link_name'/2
						  (%% Line 1626
						   Header, %% Line 1626
							   Opts)
					  in  %% Line 1627
					      apply 'create_symlink'/3
						  (Name1, LinkName, Opts)
				  %% Line 1628
				  <Device>
				      when try
					    ( let <_10> =
						  case call 'erlang':'=:='
							   (Device, 'char') of
						    ( <( 'true'
							 -| ['compiler_generated'] )> when 'true' ->
							  'true'
						      -| ['compiler_generated'] )
						    ( <( 'false'
							 -| ['compiler_generated'] )> when 'true' ->
							  call 'erlang':'=:='
							      (Device, 'block')
						      -| ['compiler_generated'] )
						    ( <_8> when 'true' ->
							  _8
						      -| ['compiler_generated'] )
						  end
					      in  ( call 'erlang':'=:='
							(( _10
							   -| ['compiler_generated'] ), 'true')
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false' ->
				      %% Line 1631
				      apply 'create_regular'/4
					  (Name1, Name0, #{}#, Opts)
				  %% Line 1632
				  <'fifo'> when 'true' ->
				      %% Line 1634
				      apply 'create_regular'/4
					  (Name1, Name0, #{}#, Opts)
				  %% Line 1635
				  <Other> when 'true' ->
				      do  %% Line 1636
					  apply 'read_verbose'/3
					      (Opts, [120|[32|[126|[116|[115|[32|[45|[32|[117|[110|[115|[117|[112|[112|[111|[114|[116|[101|[100|[32|[116|[121|[112|[101|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1637
																											      [Name0|[Other|[]]])
					  %% Line 1638
					  'not_written'
				end
			    in  %% Line 1640
				case _12 of
				  %% Line 1641
				  <'ok'> when 'true' ->
				      apply 'set_extracted_file_info'/2
					  (Name1, Header)
				  %% Line 1642
				  <'not_written'> when 'true' ->
				      'ok'
				  ( <_14> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_14})
				    -| ['compiler_generated'] )
				end
			-| ['compiler_generated'] )
		      ( <_62> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','tar_header'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_17,_16,_15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_17,_16,_15})
		  -| [{'function_name',{'write_extracted_element',3}}] )
	    -| ['compiler_generated'] )
	end
'make_safe_path'/2 =
    %% Line 1645
    fun (_0,_1) ->
	case <_0,_1> of
	  <[47|Path],Opts> when 'true' ->
	      %% Line 1646
	      apply 'make_safe_path'/2
		  (Path, Opts)
	  %% Line 1647
	  <Path0,{'read_opts',Cwd,_5,_6,_7,_8,_9}> when 'true' ->
	      %% Line 1648
	      case call 'filelib':'safe_relative_path'
		       (Path0, Cwd) of
		%% Line 1649
		<'unsafe'> when 'true' ->
		    call 'erlang':'throw'
			({'error',{Path0,'unsafe_path'}})
		%% Line 1650
		<Path> when 'true' ->
		    call 'filename':'absname'
			(Path, Cwd)
	      end
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'make_safe_path',2}}] )
	    -| ['compiler_generated'] )
	end
'safe_link_name'/2 =
    %% Line 1653
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'tar_header',_5,_6,_7,_8,_9,_10,_11,Path0,_12,_13,_14,_15,_16,_17},{'read_opts',Cwd,_18,_19,_20,_21,_22}> when 'true' ->
	      %% Line 1654
	      case call 'filelib':'safe_relative_path'
		       (Path0, Cwd) of
		%% Line 1655
		<'unsafe'> when 'true' ->
		    call 'erlang':'throw'
			({'error',{Path0,'unsafe_symlink'}})
		%% Line 1656
		<Path> when 'true' ->
		    Path
	      end
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'safe_link_name',2}}] )
	    -| ['compiler_generated'] )
	end
'create_regular'/4 =
    %% Line 1659
    fun (_0,_1,_2,_3) ->
	%% Line 1660
	case apply 'write_extracted_file'/3
		 (_0, _2, _3) of
	  %% Line 1661
	  <'not_written'> when 'true' ->
	      do  %% Line 1662
		  apply 'read_verbose'/3
		      (_3, [120|[32|[126|[116|[115|[32|[45|[32|[101|[120|[105|[115|[116|[115|[44|[32|[110|[111|[116|[32|[99|[114|[101|[97|[116|[101|[100|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_1|[]])
		  %% Line 1663
		  'not_written'
	  %% Line 1664
	  <Ok> when 'true' ->
	      do  %% Line 1665
		  apply 'read_verbose'/3
		      (_3, [120|[32|[126|[116|[115|[126|[110]]]]]]], [_1|[]])
		  %% Line 1666
		  Ok
	end
'create_extracted_dir'/2 =
    %% Line 1669
    fun (_0,_1) ->
	%% Line 1670
	case call 'file':'make_dir'
		 (_0) of
	  %% Line 1671
	  <'ok'> when 'true' ->
	      'ok'
	  %% Line 1672
	  <{'error','enotsup'}> when 'true' ->
	      'not_written'
	  %% Line 1673
	  <{'error','eexist'}> when 'true' ->
	      'not_written'
	  %% Line 1674
	  <{'error','enoent'}> when 'true' ->
	      apply 'make_dirs'/2
		  (_0, 'dir')
	  %% Line 1675
	  <_@r0 = {'error',Reason}> when 'true' ->
	      call 'erlang':'throw'
		  (_@r0)
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_2})
	    -| ['compiler_generated'] )
	end
'create_symlink'/3 =
    %% Line 1678
    fun (_0,_1,_2) ->
	%% Line 1679
	case call 'file':'make_symlink'
		 (_1, _0) of
	  %% Line 1680
	  <'ok'> when 'true' ->
	      'ok'
	  %% Line 1681
	  <{'error','enoent'}> when 'true' ->
	      %% Line 1682
	      case apply 'make_dirs'/2
		       (_0, 'file') of
		<'ok'> when 'true' ->
		    %% Line 1683
		    apply 'create_symlink'/3
			(_0, _1, _2)
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1684
	  <{'error','eexist'}> when 'true' ->
	      'not_written'
	  %% Line 1685
	  <{'error','enotsup'}> when 'true' ->
	      do  %% Line 1686
		  apply 'read_verbose'/3
		      (_2, [120|[32|[126|[116|[115|[32|[45|[32|[115|[121|[109|[98|[111|[108|[105|[99|[32|[108|[105|[110|[107|[115|[32|[110|[111|[116|[32|[115|[117|[112|[112|[111|[114|[116|[101|[100|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_0|[]])
		  %% Line 1687
		  'not_written'
	  %% Line 1688
	  <_@r0 = {'error',Reason}> when 'true' ->
	      call 'erlang':'throw'
		  (_@r0)
	  ( <_4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_4})
	    -| ['compiler_generated'] )
	end
'write_extracted_file'/3 =
    %% Line 1691
    fun (_0,_1,_2) ->
	%% Line 1693
	( case _2 of
	    ( <( {'read_opts',_13,_rec118,_14,_15,_16,_17}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_7> =
		      case _rec118 of
			%% Line 1694
			<'true'> when 'true' ->
			    %% Line 1695
			    case call 'file':'read_file_info'
				     (_0) of
			      %% Line 1696
			      <{'ok',_19}> when 'true' ->
				  'false'
			      %% Line 1697
			      <_20> when 'true' ->
				  'true'
			    end
			%% Line 1699
			<'false'> when 'true' ->
			    'true'
			( <_6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_6})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 1701
		      case _7 of
			%% Line 1702
			<'true'> when 'true' ->
			    apply 'write_file'/2
				(_0, _1)
			%% Line 1703
			<'false'> when 'true' ->
			    'not_written'
			( <_9> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_9})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_18> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','read_opts'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'write_file'/2 =
    %% Line 1706
    fun (_0,_1) ->
	%% Line 1707
	case call 'file':'write_file'
		 (_0, _1) of
	  %% Line 1708
	  <'ok'> when 'true' ->
	      'ok'
	  %% Line 1709
	  <{'error','enoent'}> when 'true' ->
	      %% Line 1710
	      case apply 'make_dirs'/2
		       (_0, 'file') of
		%% Line 1711
		<'ok'> when 'true' ->
		    %% Line 1712
		    apply 'write_file'/2
			(_0, _1)
		%% Line 1713
		<_@r0 = {'error',Reason}> when 'true' ->
		    %% Line 1714
		    call 'erlang':'throw'
			(_@r0)
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1716
	  <_@r1 = {'error',Reason}> when 'true' ->
	      %% Line 1717
	      call 'erlang':'throw'
		  (_@r1)
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_3})
	    -| ['compiler_generated'] )
	end
'set_extracted_file_info'/2 =
    %% Line 1720
    fun (_0,_1) ->
	case <_0,_1> of
	  <_5,{'tar_header',_6,_7,_8,_9,_10,_11,50,_12,_13,_14,_15,_16,_17,_18}> when 'true' ->
	      'ok'
	  %% Line 1721
	  <_19,{'tar_header',_20,_21,_22,_23,_24,_25,49,_26,_27,_28,_29,_30,_31,_32}> when 'true' ->
	      'ok'
	  %% Line 1722
	  <Name,Header = {'tar_header',_33,_34,_35,_36,_37,_38,51,_39,_40,_41,_42,_43,_44,_45}> when 'true' ->
	      %% Line 1723
	      apply 'set_device_info'/2
		  (Name, Header)
	  %% Line 1724
	  <Name,Header = {'tar_header',_46,_47,_48,_49,_50,_51,52,_52,_53,_54,_55,_56,_57,_58}> when 'true' ->
	      %% Line 1725
	      apply 'set_device_info'/2
		  (Name, Header)
	  %% Line 1726
	  <Name,{'tar_header',_59,Mode,_60,_61,_62,Mtime,_63,_64,_65,_66,_67,_68,_69,_70}> when 'true' ->
	      let <Info> =
		  {%% Line 1727
		   'file_info','undefined','undefined','undefined','undefined',%% Line 1727
									       Mtime,'undefined',%% Line 1727
												 Mode,'undefined','undefined','undefined','undefined','undefined','undefined'}
	      in  %% Line 1728
		  call 'file':'write_file_info'
		      (Name, Info, [{'time','posix'}])
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'set_extracted_file_info',2}}] )
	    -| ['compiler_generated'] )
	end
'set_device_info'/2 =
    %% Line 1730
    fun (_0,_1) ->
	case <_0,_1> of
	  <Name,Header = {'tar_header',_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30}> when 'true' ->
	      %% Line 1731
	      ( case Header of
		  ( <( {'tar_header',_31,_32,_33,_34,_35,_rec119,_36,_37,_38,_39,_40,_41,_42,_43}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1732
			( case Header of
			    ( <( {'tar_header',_45,_rec120,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57}
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 1733
				  ( case Header of
				      ( <( {'tar_header',_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_rec121,_69,_70,_71}
					   -| ['compiler_generated'] )> when 'true' ->
					    %% Line 1734
					    ( case Header of
						( <( {'tar_header',_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_rec122,_84,_85}
						     -| ['compiler_generated'] )> when 'true' ->
						      let <Info> =
							  {%% Line 1735
							   'file_info','undefined','undefined','undefined','undefined',_rec119,'undefined',_rec120,'undefined',_rec121,_rec122,'undefined','undefined','undefined'}
						      in  %% Line 1741
							  call 'file':'write_file_info'
							      (Name, Info)
						  -| ['compiler_generated'] )
						( <_86> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','tar_header'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <_72> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','tar_header'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_58> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','tar_header'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_44> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','tar_header'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_16,_15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15})
		  -| [{'function_name',{'set_device_info',2}}] )
	    -| ['compiler_generated'] )
	end
'make_dirs'/2 =
    %% Line 1745
    fun (_0,_1) ->
	case <_0,_1> of
	  <Name,'file'> when 'true' ->
	      %% Line 1746
	      call 'filelib':'ensure_dir'
		  (Name)
	  %% Line 1747
	  <Name,'dir'> when 'true' ->
	      let <_2> =
		  call %% Line 1748
		       'filename':%% Line 1748
				  'join'
		      (%% Line 1748
		       Name, %% Line 1748
			     [42])
	      in  %% Line 1748
		  call 'filelib':'ensure_dir'
		      (_2)
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'make_dirs',2}}] )
	    -| ['compiler_generated'] )
	end
'read_verbose'/3 =
    %% Line 1751
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{'read_opts',_6,_7,_8,_9,_10,'true'},Format,Args> when 'true' ->
	      %% Line 1752
	      call 'io':'format'
		  (Format, Args)
	  %% Line 1753
	  <_11,_12,_13> when 'true' ->
	      %% Line 1754
	      'ok'
	end
'add_verbose'/3 =
    %% Line 1757
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{'add_opts',_6,_7,'true',_8,_9,_10,_11,_12},Format,Args> when 'true' ->
	      %% Line 1758
	      call 'io':'format'
		  (Format, Args)
	  %% Line 1759
	  <_13,_14,_15> when 'true' ->
	      %% Line 1760
	      'ok'
	end
'do_write'/2 =
    %% Line 1766
    fun (_0,_1) ->
	case <_0,_1> of
	  <Reader0 = {'reader',Handle,_9,_10,Fun},Data>
	      when %% Line 1767
		call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 1768
	      case apply Fun
		       ('write', {Handle,Data}) of
		%% Line 1769
		<'ok'> when 'true' ->
		    %% Line 1770
		    case apply 'do_position'/2
			     (Reader0, {'cur',0}) of
		      <{'ok',Pos,Reader1}> when 'true' ->
			  %% Line 1771
			  case Reader1 of
			    <{'reader',_11,_12,_13,_14}> when 'true' ->
				let <_5> =
				    call 'erlang':'setelement'
					(4, Reader1, Pos)
				in  {'ok',_5}
			    ( <_15> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','reader'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      ( <_2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_2})
			-| ['compiler_generated'] )
		    end
		%% Line 1772
		<Err = {'error',_16}> when 'true' ->
		    %% Line 1773
		    Err
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_6})
		  -| ['compiler_generated'] )
	      end
	  ( <_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7})
		  -| [{'function_name',{'do_write',2}}] )
	    -| ['compiler_generated'] )
	end
'do_copy'/3 =
    %% Line 1776
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Reader = {'reader',_13,_14,_15,Fun},Source,Opts = {'add_opts',_16,0,_17,_18,_19,_20,_21,_22}>
	      when %% Line 1777
		call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 1778
	      case Opts of
		<{'add_opts',_23,_24,_25,_26,_27,_28,_29,_30}> when 'true' ->
		    let <_5> =
			call 'erlang':'setelement'
			    (3, Opts, 65536)
		    in  apply 'do_copy'/3
			    (Reader, Source, _5)
		( <_31> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','add_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1779
	  <Reader = {'reader',_32,_33,_34,Fun},Source,{'add_opts',_35,ChunkSize,_36,_37,_38,_39,_40,_41}>
	      when %% Line 1780
		call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 1781
	      case call 'file':'open'
		       (Source, ['read'|['binary']]) of
		%% Line 1782
		<{'ok',SourceFd}> when 'true' ->
		    %% Line 1783
		    case apply 'copy_chunked'/4
			     (Reader, SourceFd, ChunkSize, 0) of
		      %% Line 1784
		      <Ok = {'ok',_X_Copied,_X_Reader2}> when 'true' ->
			  do  %% Line 1785
			      ( call ( 'file'
				       -| ['result_not_wanted'] ):( 'close'
								    -| ['result_not_wanted'] )
				    (SourceFd)
				-| ['result_not_wanted'] )
			      %% Line 1786
			      Ok
		      %% Line 1787
		      <Err> when 'true' ->
			  do  %% Line 1788
			      ( call ( 'file'
				       -| ['result_not_wanted'] ):( 'close'
								    -| ['result_not_wanted'] )
				    (SourceFd)
				-| ['result_not_wanted'] )
			      %% Line 1789
			      call 'erlang':'throw'
				  (Err)
		    end
		%% Line 1791
		<Err> when 'true' ->
		    %% Line 1792
		    call 'erlang':'throw'
			(Err)
	      end
	  ( <_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11,_10})
		  -| [{'function_name',{'do_copy',3}}] )
	    -| ['compiler_generated'] )
	end
'copy_chunked'/4 =
    %% Line 1795
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Reader = {'reader',_12,_13,_14,_15},Source,ChunkSize,Copied> when 'true' ->
	      %% Line 1796
	      case call 'file':'read'
		       (Source, ChunkSize) of
		%% Line 1797
		<{'ok',Bin}> when 'true' ->
		    %% Line 1798
		    case apply 'do_write'/2
			     (Reader, Bin) of
		      <{'ok',Reader2}> when 'true' ->
			  let <_5> =
			      call %% Line 1799
				   'erlang':%% Line 1799
					    'byte_size'
				  (%% Line 1799
				   Bin)
			  in  let <_6> =
				  call %% Line 1799
				       'erlang':%% Line 1799
						'+'
				      (%% Line 1799
				       Copied, _5)
			      in  %% Line 1799
				  apply 'copy_chunked'/4
				      (Reader2, Source, ChunkSize, _6)
		      ( <_4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_4})
			-| ['compiler_generated'] )
		    end
		%% Line 1800
		<'eof'> when 'true' ->
		    %% Line 1801
		    {'ok',Copied,Reader}
		%% Line 1802
		<Other> when 'true' ->
		    %% Line 1803
		    Other
	      end
	  ( <_11,_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8})
		  -| [{'function_name',{'copy_chunked',4}}] )
	    -| ['compiler_generated'] )
	end
'do_position'/2 =
    %% Line 1807
    fun (_0,_1) ->
	case <_0,_1> of
	  <Reader = {'reader',Handle,_9,_10,Fun},Pos>
	      when %% Line 1808
		call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 1809
	      case apply Fun
		       ('position', {Handle,Pos}) of
		%% Line 1810
		<{'ok',NewPos}> when 'true' ->
		    %% Line 1813
		    case apply Fun
			     ('position', {Handle,{'cur',0}}) of
		      <{'ok',AbsPos}> when 'true' ->
			  %% Line 1814
			  case Reader of
			    <{'reader',_11,_12,_13,_14}> when 'true' ->
				let <_5> =
				    call 'erlang':'setelement'
					(4, Reader, AbsPos)
				in  {'ok',NewPos,_5}
			    ( <_15> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','reader'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      ( <_2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_2})
			-| ['compiler_generated'] )
		    end
		%% Line 1815
		<Other> when 'true' ->
		    %% Line 1816
		    Other
	      end
	  ( <_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7})
		  -| [{'function_name',{'do_position',2}}] )
	    -| ['compiler_generated'] )
	end
'do_read'/2 =
    %% Line 1819
    fun (_0,_1) ->
	case <_0,_1> of
	  <Reader = {'reg_file_reader',Handle,_27,Pos,Size},Len> when 'true' ->
	      let <NumBytes> =
		  call %% Line 1820
		       'erlang':%% Line 1820
				'-'
		      (%% Line 1820
		       Size, %% Line 1820
			     Pos)
	      in  let <_4> =
		      case <> of
			%% Line 1821
			<>
			    when try
				  let <_3> =
				      call 'erlang':'-'
					  (NumBytes, Len)
				  in  call 'erlang':'<'
					  (_3, 0)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    NumBytes
			%% Line 1821
			<> when 'true' ->
			    Len
		      end
		  in  %% Line 1822
		      case apply 'do_read'/2
			       (Handle, _4) of
			%% Line 1823
			<{'ok',Bin,Handle2}> when 'true' ->
			    let <NewPos> =
				call %% Line 1824
				     'erlang':%% Line 1824
					      '+'
				    (%% Line 1824
				     Pos, _4)
			    in  let <NumBytes2> =
				    call %% Line 1825
					 'erlang':%% Line 1825
						  '-'
					(%% Line 1825
					 Size, %% Line 1825
					       NewPos)
				in  %% Line 1829
				    case Reader of
				      <{'reg_file_reader',_rec127,_rec128,_rec129,_rec130}> when 'true' ->
					  let <_10> =
					      {'reg_file_reader',Handle2,NumBytes2,NewPos,_rec130}
					  in  %% Line 1830
					      {'ok',Bin,_10}
				      ( <_28> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','reg_file_reader'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
			%% Line 1831
			<Other> when 'true' ->
			    %% Line 1832
			    Other
		      end
	  %% Line 1834
	  <Reader = {'sparse_file_reader',_29,_30,_31,_32,_33},Len> when 'true' ->
	      %% Line 1835
	      apply 'do_sparse_read'/2
		  (Reader, Len)
	  %% Line 1836
	  <Reader = {'reader',Handle,_34,Pos,Fun},Len>
	      when %% Line 1837
		call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 1839
	      case apply Fun
		       ('read2', {Handle,Len}) of
		%% Line 1840
		<{'ok',List}>
		    when call 'erlang':'is_list'
			  (List) ->
		    let <Bin> =
			call %% Line 1841
			     'erlang':%% Line 1841
				      'list_to_binary'
			    (%% Line 1841
			     List)
		    in  let <_14> =
			    call %% Line 1842
				 'erlang':%% Line 1842
					  'byte_size'
				(%% Line 1842
				 Bin)
			in  let <NewPos> =
				call %% Line 1842
				     'erlang':%% Line 1842
					      '+'
				    (%% Line 1842
				     Pos, _14)
			    in  %% Line 1843
				case Reader of
				  <{'reader',_35,_36,_37,_38}> when 'true' ->
				      let <_18> =
					  call 'erlang':'setelement'
					      (4, Reader, NewPos)
				      in  {'ok',Bin,_18}
				  ( <_39> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','reader'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
		%% Line 1844
		<{'ok',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_19> =
			call %% Line 1845
			     'erlang':%% Line 1845
				      'byte_size'
			    (%% Line 1845
			     Bin)
		    in  let <NewPos> =
			    call %% Line 1845
				 'erlang':%% Line 1845
					  '+'
				(%% Line 1845
				 Pos, _19)
			in  %% Line 1846
			    case Reader of
			      <{'reader',_40,_41,_42,_43}> when 'true' ->
				  let <_23> =
				      call 'erlang':'setelement'
					  (4, Reader, NewPos)
				  in  {'ok',Bin,_23}
			      ( <_44> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','reader'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
		%% Line 1847
		<Other> when 'true' ->
		    %% Line 1848
		    Other
	      end
	  ( <_26,_25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_26,_25})
		  -| [{'function_name',{'do_read',2}}] )
	    -| ['compiler_generated'] )
	end
'do_sparse_read'/2 =
    %% Line 1852
    fun (_0,_1) ->
	%% Line 1853
	apply 'do_sparse_read'/3
	    (_0, _1, #{}#)
'do_sparse_read'/3 =
    %% Line 1855
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <%% Line 1856
	   Reader0 = {'sparse_file_reader',_47,_48,_49,_50,[{'sparse_entry',_51,0}|Entries]},%% Line 1856
											     Len,%% Line 1856
												 Acc> when 'true' ->
	      %% Line 1858
	      case Reader0 of
		<{'sparse_file_reader',_52,_53,_54,_55,_56}> when 'true' ->
		    let <_5> =
			call 'erlang':'setelement'
			    (6, Reader0, Entries)
		    in  %% Line 1859
			apply 'do_sparse_read'/3
			    (_5, Len, Acc)
		( <_57> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','sparse_file_reader'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1860
	  <%% Line 1861
	   Reader0 = {'sparse_file_reader',_58,_59,%% Line 1861
						   Pos,%% Line 1861
						       Size,[]},%% Line 1861
								Len,%% Line 1861
								    Acc>
	      when %% Line 1862
		call 'erlang':'<'
		    (Pos,
		     Size) ->
	      %% Line 1866
	      case apply 'read_sparse_hole'/3
		       (Reader0, Size, Len) of
		<{'ok',Bin,Reader1}> when 'true' ->
		    let <_9> =
			call %% Line 1867
			     'erlang':%% Line 1867
				      'byte_size'
			    (%% Line 1867
			     Bin)
		    in  let <_10> =
			    call %% Line 1867
				 'erlang':%% Line 1867
					  '-'
				(%% Line 1867
				 Len, _9)
			in  let <_8> =
				#{#<%% Line 1867
				    Acc>(%% Line 1867
					 'all',8,'binary',['unsigned'|['big']]),
				  #<%% Line 1867
				    Bin>(%% Line 1867
					 'all',8,'binary',['unsigned'|['big']])}#
			    in  %% Line 1867
				apply 'do_sparse_read'/3
				    (Reader1, _10, _8)
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1868
	  <Reader = {'sparse_file_reader',_60,_61,_62,_63,[]},_X_Len,Acc> when 'true' ->
	      %% Line 1869
	      {'ok',Acc,Reader}
	  %% Line 1870
	  <Reader = {'sparse_file_reader',_64,_65,_66,_67,_68},0,Acc> when 'true' ->
	      %% Line 1871
	      {'ok',Acc,Reader}
	  %% Line 1872
	  <%% Line 1873
	   Reader0 = {'sparse_file_reader',_69,_70,%% Line 1873
						   Pos,_71,[{'sparse_entry',Offset,_72}|_73]},%% Line 1873
											      Len,%% Line 1873
												  Acc>
	      when %% Line 1874
		call 'erlang':'<'
		    (Pos,
		     Offset) ->
	      let <_11> =
		  call %% Line 1875
		       'erlang':%% Line 1875
				'-'
		      (%% Line 1875
		       Offset, %% Line 1875
			       Pos)
	      in  %% Line 1875
		  case apply 'read_sparse_hole'/3
			   (Reader0, Offset, _11) of
		    <{'ok',Bin,Reader1}> when 'true' ->
			let <_14> =
			    call %% Line 1876
				 'erlang':%% Line 1876
					  'byte_size'
				(%% Line 1876
				 Bin)
			in  let <_15> =
				call %% Line 1876
				     'erlang':%% Line 1876
					      '-'
				    (%% Line 1876
				     Len, _14)
			    in  let <_13> =
				    #{#<%% Line 1876
					Acc>(%% Line 1876
					     'all',8,'binary',['unsigned'|['big']]),
				      #<%% Line 1876
					Bin>(%% Line 1876
					     'all',8,'binary',['unsigned'|['big']])}#
				in  %% Line 1876
				    apply 'do_sparse_read'/3
					(Reader1, _15, _13)
		    ( <_12> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_12})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1877
	  <%% Line 1878
	   Reader0 = {'sparse_file_reader',_74,_75,%% Line 1878
						   Pos,_76,[Entry|Entries]},%% Line 1878
									    Len,%% Line 1878
										Acc> when 'true' ->
	      %% Line 1881
	      ( case Entry of
		  ( <( {'sparse_entry',_rec134,_77}
		       -| ['compiler_generated'] )> when 'true' ->
			( case Entry of
			    ( <( {'sparse_entry',_79,_rec135}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <EndPos> =
				      call 'erlang':'+'
					  (_rec134, _rec135)
				  in  let <NumBytes> =
					  call %% Line 1883
					       'erlang':%% Line 1883
							'-'
					      (%% Line 1883
					       EndPos, %% Line 1883
						       Pos)
				      in  let <_22> =
					      case <> of
						%% Line 1884
						<>
						    when call 'erlang':'>'
							  (Len,
							   NumBytes) ->
						    NumBytes
						%% Line 1884
						<> when 'true' ->
						    Len
					      end
					  in  %% Line 1885
					      ( case Reader0 of
						  ( <( {'sparse_file_reader',_rec136,_81,_82,_83,_84}
						       -| ['compiler_generated'] )> when 'true' ->
							case apply 'do_read'/2
								 (_rec136, _22) of
							  %% Line 1886
							  <{'ok',Bin,Handle}> when 'true' ->
							      let <BytesRead> =
								  call %% Line 1887
								       'erlang':%% Line 1887
										'byte_size'
								      (%% Line 1887
								       Bin)
							      in  let <ActualEndPos> =
								      call %% Line 1888
									   'erlang':%% Line 1888
										    '+'
									  (%% Line 1888
									   Pos, %% Line 1888
										BytesRead)
								  in  let <_30> =
									  case <> of
									    %% Line 1889
									    <>
										when call 'erlang':'=:='
										      (ActualEndPos,
										       EndPos) ->
										%% Line 1890
										case Reader0 of
										  <{'sparse_file_reader',_86,_87,_88,_89,_90}> when 'true' ->
										      call 'erlang':'setelement'
											  (6, Reader0, Entries)
										  ( <_91> when 'true' ->
											( call ( 'erlang'
												 -| ['compiler_generated'] ):( 'error'
															       -| ['compiler_generated'] )
											      (( {'badrecord','sparse_file_reader'}
												 -| ['compiler_generated'] ))
											  -| ['compiler_generated'] )
										    -| ['compiler_generated'] )
										end
									    %% Line 1891
									    <> when 'true' ->
										%% Line 1892
										Reader0
									  end
								      in  %% Line 1894
									  ( case _30 of
									      ( <( {'sparse_file_reader',_92,_93,_94,_rec138,_95}
										   -| ['compiler_generated'] )> when 'true' ->
										    let <NumBytes2> =
											call %% Line 1895
											     'erlang':%% Line 1895
												      '-'
											    (_rec138, %% Line 1895
												      ActualEndPos)
										    in  %% Line 1899
											case _30 of
											  <{'sparse_file_reader',_rec140,_rec141,_rec142,_rec143,_rec144}> when 'true' ->
											      let <_38> =
												  {'sparse_file_reader',Handle,NumBytes2,ActualEndPos,_rec143,_rec144}
											      in  let <_41> =
												      call %% Line 1900
													   'erlang':%% Line 1900
														    'byte_size'
													  (%% Line 1900
													   Bin)
												  in  let <_42> =
													  call %% Line 1900
													       'erlang':%% Line 1900
															'-'
													      (%% Line 1900
													       Len, _41)
												      in  let <_40> =
													      #{#<%% Line 1900
														  Acc>(%% Line 1900
														       'all',8,'binary',['unsigned'|['big']]),
														#<%% Line 1900
														  Bin>(%% Line 1900
														       'all',8,'binary',['unsigned'|['big']])}#
													  in  %% Line 1900
													      apply 'do_sparse_read'/3
														  (_38, _42, _40)
											  ( <_97> when 'true' ->
												( call ( 'erlang'
													 -| ['compiler_generated'] ):( 'error'
																       -| ['compiler_generated'] )
												      (( {'badrecord','sparse_file_reader'}
													 -| ['compiler_generated'] ))
												  -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
											end
										-| ['compiler_generated'] )
									      ( <_96> when 'true' ->
										    ( call ( 'erlang'
											     -| ['compiler_generated'] ):( 'error'
															   -| ['compiler_generated'] )
											  (( {'badrecord','sparse_file_reader'}
											     -| ['compiler_generated'] ))
										      -| ['compiler_generated'] )
										-| ['compiler_generated'] )
									    end
									    -| ['compiler_generated'] )
							  %% Line 1901
							  <Other> when 'true' ->
							      %% Line 1902
							      Other
							end
						    -| ['compiler_generated'] )
						  ( <_85> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','sparse_file_reader'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_80> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','sparse_entry'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_78> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','sparse_entry'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_46,_45,_44> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_46,_45,_44})
		  -| [{'function_name',{'do_sparse_read',3}}] )
	    -| ['compiler_generated'] )
	end
'read_sparse_hole'/3 =
    %% Line 1906
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Reader = {'sparse_file_reader',_19,_20,Pos,_21,_22},Offset,Len> when 'true' ->
	      let <N> =
		  call %% Line 1907
		       'erlang':%% Line 1907
				'-'
		      (%% Line 1907
		       Offset, %% Line 1907
			       Pos)
	      in  let <_4> =
		      case <> of
			%% Line 1908
			<>
			    when call 'erlang':'>'
				  (N,
				   Len) ->
			    %% Line 1909
			    Len
			%% Line 1910
			<> when 'true' ->
			    %% Line 1911
			    N
		      end
		  in  let <Bin> =
			  #{#<%% Line 1913
			      0>(_4,8,'integer',['unsigned'|['big']])}#
		      in  %% Line 1914
			  ( case Reader of
			      ( <( {'sparse_file_reader',_23,_24,_25,_rec145,_26}
				   -| ['compiler_generated'] )> when 'true' ->
				    let <_7> =
					call 'erlang':'+'
					    (Pos, _4)
				    in  let <NumBytes> =
					    call 'erlang':'-'
						(_rec145, _7)
					in  let <_rec146> =
						call %% Line 1917
						     'erlang':%% Line 1917
							      '+'
						    (%% Line 1917
						     Pos, _4)
					    in  %% Line 1916
						case Reader of
						  <{'sparse_file_reader',_28,_29,_30,_31,_32}> when 'true' ->
						      let <_13> =
							  call %% Line 1917
							       'erlang':%% Line 1917
									'setelement'
							      (%% Line 1917
							       4, Reader, %% Line 1917
									  _rec146)
						      in  let <_15> =
							      call 'erlang':'setelement'
								  (3, _13, NumBytes)
							  in  {'ok',Bin,_15}
						  ( <_33> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','sparse_file_reader'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
				-| ['compiler_generated'] )
			      ( <_27> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','sparse_file_reader'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
	  ( <_18,_17,_16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_18,_17,_16})
		  -| [{'function_name',{'read_sparse_hole',3}}] )
	    -| ['compiler_generated'] )
	end
'do_close'/1 =
    %% Line 1920
    fun (_0) ->
	case _0 of
	  <{'reader',Handle,_2,_3,Fun}>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 1921
	      apply Fun
		  ('close', Handle)
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'do_close',1}}] )
	    -| ['compiler_generated'] )
	end
'extract_opts'/1 =
    %% Line 1927
    fun (_0) ->
	let <_1> =
	    apply %% Line 1928
		  'default_options'/0
		()
	in  %% Line 1928
	    apply 'extract_opts'/2
		(_0, _1)
'table_opts'/1 =
    %% Line 1930
    fun (_0) ->
	let <_1> =
	    apply %% Line 1931
		  'default_options'/0
		()
	in  %% Line 1931
	    apply 'read_opts'/2
		(_0, _1)
'default_options'/0 =
    %% Line 1933
    fun () ->
	%% Line 1934
	case call 'file':'get_cwd'
		 () of
	  <{'ok',Cwd}> when 'true' ->
	      %% Line 1935
	      {'read_opts',Cwd,'false','all','file',[],'false'}
	  ( <_0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_0})
	    -| ['compiler_generated'] )
	end
'extract_opts'/2 =
    %% Line 1937
    fun (_0,_1) ->
	case <_0,_1> of
	  <['keep_old_files'|Rest],Opts> when 'true' ->
	      %% Line 1938
	      case Opts of
		<{'read_opts',_29,_30,_31,_32,_33,_34}> when 'true' ->
		    let <_4> =
			call 'erlang':'setelement'
			    (3, Opts, 'true')
		    in  apply 'extract_opts'/2
			    (Rest, _4)
		( <_35> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','read_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1939
	  <[{'cwd',Cwd}|Rest],Opts> when 'true' ->
	      %% Line 1940
	      case Opts of
		<{'read_opts',_36,_37,_38,_39,_40,_41}> when 'true' ->
		    let <_7> =
			call 'erlang':'setelement'
			    (2, Opts, Cwd)
		    in  apply 'extract_opts'/2
			    (Rest, _7)
		( <_42> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','read_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1941
	  <[{'files',Files}|Rest],Opts> when 'true' ->
	      let <Set> =
		  call %% Line 1942
		       'ordsets':%% Line 1942
				 'from_list'
		      (%% Line 1942
		       Files)
	      in  %% Line 1943
		  case Opts of
		    <{'read_opts',_43,_44,_45,_46,_47,_48}> when 'true' ->
			let <_11> =
			    call 'erlang':'setelement'
				(4, Opts, Set)
			in  apply 'extract_opts'/2
				(Rest, _11)
		    ( <_49> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','read_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1944
	  <['memory'|Rest],Opts> when 'true' ->
	      %% Line 1945
	      case Opts of
		<{'read_opts',_50,_51,_52,_53,_54,_55}> when 'true' ->
		    let <_14> =
			call 'erlang':'setelement'
			    (5, Opts, 'memory')
		    in  apply 'extract_opts'/2
			    (Rest, _14)
		( <_56> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','read_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1946
	  <['compressed'|Rest],Opts = {'read_opts',_57,_58,_59,_60,OpenMode,_61}> when 'true' ->
	      let <_rec152> =
		  [%% Line 1947
		   'compressed'|%% Line 1947
				OpenMode]
	      in  %% Line 1947
		  case Opts of
		    <{'read_opts',_62,_63,_64,_65,_66,_67}> when 'true' ->
			let <_18> =
			    call 'erlang':'setelement'
				(6, Opts, _rec152)
			in  apply 'extract_opts'/2
				(Rest, _18)
		    ( <_68> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','read_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1948
	  <['cooked'|Rest],Opts = {'read_opts',_69,_70,_71,_72,OpenMode,_73}> when 'true' ->
	      let <_rec154> =
		  [%% Line 1949
		   'cooked'|%% Line 1949
			    OpenMode]
	      in  %% Line 1949
		  case Opts of
		    <{'read_opts',_74,_75,_76,_77,_78,_79}> when 'true' ->
			let <_22> =
			    call 'erlang':'setelement'
				(6, Opts, _rec154)
			in  apply 'extract_opts'/2
				(Rest, _22)
		    ( <_80> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','read_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1950
	  <['verbose'|Rest],Opts> when 'true' ->
	      %% Line 1951
	      case Opts of
		<{'read_opts',_81,_82,_83,_84,_85,_86}> when 'true' ->
		    let <_25> =
			call 'erlang':'setelement'
			    (7, Opts, 'true')
		    in  apply 'extract_opts'/2
			    (Rest, _25)
		( <_87> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','read_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1952
	  <[Other|Rest],Opts> when 'true' ->
	      let <_26> =
		  apply %% Line 1953
			'read_opts'/2
		      (%% Line 1953
		       [Other|[]], %% Line 1953
				   Opts)
	      in  %% Line 1953
		  apply 'extract_opts'/2
		      (Rest, _26)
	  %% Line 1954
	  <[],Opts> when 'true' ->
	      %% Line 1955
	      Opts
	  ( <_28,_27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_28,_27})
		  -| [{'function_name',{'extract_opts',2}}] )
	    -| ['compiler_generated'] )
	end
'read_opts'/2 =
    %% Line 1957
    fun (_0,_1) ->
	case <_0,_1> of
	  <['compressed'|Rest],Opts = {'read_opts',_15,_16,_17,_18,OpenMode,_19}> when 'true' ->
	      let <_rec157> =
		  [%% Line 1958
		   'compressed'|%% Line 1958
				OpenMode]
	      in  %% Line 1958
		  case Opts of
		    <{'read_opts',_20,_21,_22,_23,_24,_25}> when 'true' ->
			let <_5> =
			    call 'erlang':'setelement'
				(6, Opts, _rec157)
			in  apply 'read_opts'/2
				(Rest, _5)
		    ( <_26> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','read_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1959
	  <['cooked'|Rest],Opts = {'read_opts',_27,_28,_29,_30,OpenMode,_31}> when 'true' ->
	      let <_rec159> =
		  [%% Line 1960
		   'cooked'|%% Line 1960
			    OpenMode]
	      in  %% Line 1960
		  case Opts of
		    <{'read_opts',_32,_33,_34,_35,_36,_37}> when 'true' ->
			let <_9> =
			    call 'erlang':'setelement'
				(6, Opts, _rec159)
			in  apply 'read_opts'/2
				(Rest, _9)
		    ( <_38> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','read_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1961
	  <['verbose'|Rest],Opts> when 'true' ->
	      %% Line 1962
	      case Opts of
		<{'read_opts',_39,_40,_41,_42,_43,_44}> when 'true' ->
		    let <_12> =
			call 'erlang':'setelement'
			    (7, Opts, 'true')
		    in  apply 'read_opts'/2
			    (Rest, _12)
		( <_45> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','read_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1963
	  <[_46|Rest],Opts> when 'true' ->
	      %% Line 1964
	      apply 'read_opts'/2
		  (Rest, Opts)
	  %% Line 1965
	  <[],Opts> when 'true' ->
	      %% Line 1966
	      Opts
	  ( <_14,_13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13})
		  -| [{'function_name',{'read_opts',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('erl_tar')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('erl_tar', _0)
end