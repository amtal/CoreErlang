module 'file_sorter' ['check'/1,
		      'check'/2,
		      'keycheck'/2,
		      'keycheck'/3,
		      'keymerge'/3,
		      'keymerge'/4,
		      'keysort'/2,
		      'keysort'/3,
		      'keysort'/4,
		      'merge'/2,
		      'merge'/3,
		      'module_info'/0,
		      'module_info'/1,
		      'sort'/1,
		      'sort'/2,
		      'sort'/3]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[102|[105|[108|[101|[95|[115|[111|[114|[116|[101|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]],1}],
		%% Line 23
		'compile' =
		    %% Line 23
		    [{'no_auto_import',[{'error',2}]}],
		%% Line 31
		'dialyzer' =
		    %% Line 31
		    ['no_improper_lists'],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[47|[117|[115|[114|[47|[108|[111|[99|[97|[108|[47|[67|[101|[108|[108|[97|[114|[47|[101|[114|[108|[97|[110|[103|[47|[50|[50|[46|[50|[47|[108|[105|[98|[47|[101|[114|[108|[97|[110|[103|[47|[108|[105|[98|[47|[107|[101|[114|[110|[101|[108|[45|[54|[46|[53|[46|[49|[47|[105|[110|[99|[108|[117|[100|[101|[47|[102|[105|[108|[101|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 25
		'record' =
		    %% Line 25
		    [{'file_info',[{'typed_record_field',{'record_field',26,{'atom',26,'size'}},{'type',26,'union',[{'type',26,'non_neg_integer',[]}|[{'atom',26,'undefined'}]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'type'}},{'type',27,'union',[{'atom',27,'device'}|[{'atom',27,'directory'}|[{'atom',27,'other'}|[{'atom',27,'regular'}|[{'atom',27,'symlink'}|[{'atom',28,'undefined'}]]]]]]}}|[{'typed_record_field',{'record_field',29,{'atom',29,'access'}},{'type',29,'union',[{'atom',29,'read'}|[{'atom',29,'write'}|[{'atom',29,'read_write'}|[{'atom',29,'none'}|[{'atom',29,'undefined'}]]]]]}}|[{'typed_record_field',{'record_field',30,{'atom',30,'atime'}},{'type',30,'union',[{'remote_type',30,[{'atom',30,'file'}|[{'atom',30,'date_time'}|[[]]]]}|[{'type',30,'non_neg_integer',[]}|[{'atom',30,'undefined'}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'mtime'}},{'type',34,'union',[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}|[{'atom',34,'undefined'}]]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'ctime'}},{'type',36,'union',[{'remote_type',36,[{'atom',36,'file'}|[{'atom',36,'date_time'}|[[]]]]}|[{'type',36,'non_neg_integer',[]}|[{'atom',36,'undefined'}]]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'mode'}},{'type',42,'union',[{'type',42,'non_neg_integer',[]}|[{'atom',42,'undefined'}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'links'}},{'type',46,'union',[{'type',46,'non_neg_integer',[]}|[{'atom',46,'undefined'}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'major_device'}},{'type',49,'union',[{'type',49,'non_neg_integer',[]}|[{'atom',49,'undefined'}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'minor_device'}},{'type',55,'union',[{'type',55,'non_neg_integer',[]}|[{'atom',55,'undefined'}]]}}|[{'typed_record_field',{'record_field',57,{'atom',57,'inode'}},{'type',57,'union',[{'type',57,'non_neg_integer',[]}|[{'atom',57,'undefined'}]]}}|[{'typed_record_field',{'record_field',58,{'atom',58,'uid'}},{'type',58,'union',[{'type',58,'non_neg_integer',[]}|[{'atom',58,'undefined'}]]}}|[{'typed_record_field',{'record_field',59,{'atom',59,'gid'}},{'type',59,'union',[{'type',59,'non_neg_integer',[]}|[{'atom',59,'undefined'}]]}}]]]]]]]]]]]]]}],
		%% Line 62
		'record' =
		    %% Line 62
		    [{'file_descriptor',[{'typed_record_field',{'record_field',63,{'atom',63,'module'}},{'type',63,'module',[]}}|[{'typed_record_field',{'record_field',64,{'atom',64,'data'}},{'type',64,'term',[]}}]]}],
		%% Line 34
		'file' =
		    %% Line 34
		    [{[115|[114|[99|[47|[102|[105|[108|[101|[95|[115|[111|[114|[116|[101|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]],34}],
		%% Line 42
		'record' =
		    %% Line 42
		    [{'w',[{'record_field',42,{'atom',42,'keypos'}}|[{'record_field',42,{'atom',42,'runs'},{'cons',42,{'nil',42},{'nil',42}}}|[{'record_field',42,{'atom',42,'seq'},{'integer',42,1}}|[{'record_field',42,{'atom',42,'in'}}|[{'record_field',42,{'atom',42,'out'}}|[{'record_field',42,{'atom',42,'fun_out'}}|[{'record_field',42,{'atom',42,'prefix'}}|[{'record_field',42,{'atom',42,'temp'},{'nil',42}}|[{'record_field',43,{'atom',43,'format'}}|[{'record_field',43,{'atom',43,'runsize'}}|[{'record_field',43,{'atom',43,'no_files'}}|[{'record_field',43,{'atom',43,'order'}}|[{'record_field',43,{'atom',43,'chunksize'}}|[{'record_field',43,{'atom',43,'wfd'}}|[{'record_field',43,{'atom',43,'ref'}}|[{'record_field',43,{'atom',43,'z'}}|[{'record_field',43,{'atom',43,'unique'}}|[{'record_field',44,{'atom',44,'hdlen'}}|[{'record_field',44,{'atom',44,'inout_value'}}]]]]]]]]]]]]]]]]]]]}],
		%% Line 46
		'record' =
		    %% Line 46
		    [{'opts',[{'record_field',46,{'atom',46,'format'},{'call',46,{'atom',46,'binary_term_fun'},[]}}|[{'record_field',46,{'atom',46,'size'},{'integer',46,524288}}|[{'record_field',47,{'atom',47,'no_files'},{'integer',47,16}}|[{'record_field',47,{'atom',47,'tmpdir'},{'atom',47,'default'}}|[{'record_field',47,{'atom',47,'order'},{'atom',47,'ascending'}}|[{'record_field',48,{'atom',48,'compressed'},{'atom',48,'false'}}|[{'record_field',48,{'atom',48,'unique'},{'atom',48,'false'}}|[{'record_field',48,{'atom',48,'header'},{'integer',48,4}}]]]]]]]]}],
		%% Line 50
		'compile' =
		    %% Line 50
		    [{'inline',[{'badarg',2}|[{'make_key',2}|[{'make_stable_key',3}|[{'cfun',3}]]]]}],
		%% Line 56
		'export_type' =
		    %% Line 56
		    [{'reason',0}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'file_name',{'remote_type',58,[{'atom',58,'file'}|[{'atom',58,'name'}|[[]]]]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'file_names',{'type',59,'list',[{'remote_type',59,[{'atom',59,'file'}|[{'atom',59,'name'}|[[]]]]}]},[]}],
		%% Line 60
		'type' =
		    %% Line 60
		    [{'i_command',{'type',60,'union',[{'atom',60,'read'}|[{'atom',60,'close'}]]},[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{'i_reply',{'type',61,'union',[{'atom',61,'end_of_input'}|[{'type',61,'tuple',[{'atom',61,'end_of_input'}|[{'user_type',61,'value',[]}]]}|[{'type',62,'tuple',[{'type',62,'list',[{'user_type',62,'object',[]}]}|[{'user_type',62,'infun',[]}]]}|[{'user_type',62,'input_reply',[]}]]]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'infun',{'type',63,'fun',[{'type',63,'product',[{'user_type',63,'i_command',[]}]}|[{'user_type',63,'i_reply',[]}]]},[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{'input',{'type',64,'union',[{'user_type',64,'file_names',[]}|[{'user_type',64,'infun',[]}]]},[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{'input_reply',{'type',65,'term',[]},[]}],
		%% Line 66
		'type' =
		    %% Line 66
		    [{'o_command',{'type',66,'union',[{'type',66,'tuple',[{'atom',66,'value'}|[{'user_type',66,'value',[]}]]}|[{'type',66,'list',[{'user_type',66,'object',[]}]}|[{'atom',66,'close'}]]]},[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{'o_reply',{'type',67,'union',[{'user_type',67,'outfun',[]}|[{'user_type',67,'output_reply',[]}]]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'object',{'type',68,'union',[{'type',68,'term',[]}|[{'type',68,'binary',[]}]]},[]}],
		%% Line 69
		'type' =
		    %% Line 69
		    [{'outfun',{'type',69,'fun',[{'type',69,'product',[{'user_type',69,'o_command',[]}]}|[{'user_type',69,'o_reply',[]}]]},[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{'output',{'type',70,'union',[{'user_type',70,'file_name',[]}|[{'user_type',70,'outfun',[]}]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'output_reply',{'type',71,'term',[]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'value',{'type',72,'term',[]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'options',{'type',74,'union',[{'type',74,'list',[{'user_type',74,'option',[]}]}|[{'user_type',74,'option',[]}]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'option',{'type',75,'union',[{'type',75,'tuple',[{'atom',75,'compressed'}|[{'type',75,'boolean',[]}]]}|[{'type',76,'tuple',[{'atom',76,'header'}|[{'user_type',76,'header_length',[]}]]}|[{'type',77,'tuple',[{'atom',77,'format'}|[{'user_type',77,'format',[]}]]}|[{'type',78,'tuple',[{'atom',78,'no_files'}|[{'user_type',78,'no_files',[]}]]}|[{'type',79,'tuple',[{'atom',79,'order'}|[{'user_type',79,'order',[]}]]}|[{'type',80,'tuple',[{'atom',80,'size'}|[{'user_type',80,'size',[]}]]}|[{'type',81,'tuple',[{'atom',81,'tmpdir'}|[{'user_type',81,'tmp_directory',[]}]]}|[{'type',82,'tuple',[{'atom',82,'unique'}|[{'type',82,'boolean',[]}]]}]]]]]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'format',{'type',83,'union',[{'atom',83,'binary_term'}|[{'atom',83,'term'}|[{'atom',83,'binary'}|[{'user_type',83,'format_fun',[]}]]]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'format_fun',{'type',84,'fun',[{'type',84,'product',[{'type',84,'binary',[]}]}|[{'type',84,'term',[]}]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'header_length',{'type',85,'pos_integer',[]},[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{'key_pos',{'type',86,'union',[{'type',86,'pos_integer',[]}|[{'type',86,'list',[{'type',86,'pos_integer',[]}]}]]},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'no_files',{'type',87,'pos_integer',[]},[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{'order',{'type',88,'union',[{'atom',88,'ascending'}|[{'atom',88,'descending'}|[{'user_type',88,'order_fun',[]}]]]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{'order_fun',{'type',89,'fun',[{'type',89,'product',[{'type',89,'term',[]}|[{'type',89,'term',[]}]]}|[{'type',89,'boolean',[]}]]},[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{'size',{'type',90,'non_neg_integer',[]},[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{'tmp_directory',{'type',91,'union',[{'type',91,'nil',[]}|[{'remote_type',91,[{'atom',91,'file'}|[{'atom',91,'name'}|[[]]]]}]]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{'reason',{'type',93,'union',[{'atom',93,'bad_object'}|[{'type',94,'tuple',[{'atom',94,'bad_object'}|[{'user_type',94,'file_name',[]}]]}|[{'type',95,'tuple',[{'atom',95,'bad_term'}|[{'user_type',95,'file_name',[]}]]}|[{'type',96,'tuple',[{'atom',96,'file_error'}|[{'user_type',96,'file_name',[]}|[{'type',97,'union',[{'remote_type',97,[{'atom',97,'file'}|[{'atom',97,'posix'}|[[]]]]}|[{'atom',97,'badarg'}|[{'atom',97,'system_limit'}]]]}]]]}|[{'type',98,'tuple',[{'atom',98,'premature_eof'}|[{'user_type',98,'file_name',[]}]]}]]]]]},[]}],
		%% Line 100
		'spec' =
		    %% Line 100
		    [{{'sort',1},[{'type',100,'bounded_fun',[{'type',100,'fun',[{'type',100,'product',[{'var',100,'FileName'}]}|[{'var',100,'Reply'}]]}|[[{'type',101,'constraint',[{'atom',101,'is_subtype'}|[[{'var',101,'FileName'}|[{'user_type',101,'file_name',[]}]]]]}|[{'type',102,'constraint',[{'atom',102,'is_subtype'}|[[{'var',102,'Reply'}|[{'type',102,'union',[{'atom',102,'ok'}|[{'type',102,'tuple',[{'atom',102,'error'}|[{'user_type',102,'reason',[]}]]}|[{'user_type',102,'input_reply',[]}|[{'user_type',102,'output_reply',[]}]]]]}]]]]}]]]]}]}],
		%% Line 106
		'spec' =
		    %% Line 106
		    [{{'sort',2},[{'type',106,'bounded_fun',[{'type',106,'fun',[{'type',106,'product',[{'var',106,'Input'}|[{'var',106,'Output'}]]}|[{'var',106,'Reply'}]]}|[[{'type',107,'constraint',[{'atom',107,'is_subtype'}|[[{'var',107,'Input'}|[{'user_type',107,'input',[]}]]]]}|[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'Output'}|[{'user_type',108,'output',[]}]]]]}|[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'Reply'}|[{'type',109,'union',[{'atom',109,'ok'}|[{'type',109,'tuple',[{'atom',109,'error'}|[{'user_type',109,'reason',[]}]]}|[{'user_type',109,'input_reply',[]}|[{'user_type',109,'output_reply',[]}]]]]}]]]]}]]]]]}]}],
		%% Line 113
		'spec' =
		    %% Line 113
		    [{{'sort',3},[{'type',113,'bounded_fun',[{'type',113,'fun',[{'type',113,'product',[{'var',113,'Input'}|[{'var',113,'Output'}|[{'var',113,'Options'}]]]}|[{'var',113,'Reply'}]]}|[[{'type',114,'constraint',[{'atom',114,'is_subtype'}|[[{'var',114,'Input'}|[{'user_type',114,'input',[]}]]]]}|[{'type',115,'constraint',[{'atom',115,'is_subtype'}|[[{'var',115,'Output'}|[{'user_type',115,'output',[]}]]]]}|[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'Options'}|[{'user_type',116,'options',[]}]]]]}|[{'type',117,'constraint',[{'atom',117,'is_subtype'}|[[{'var',117,'Reply'}|[{'type',117,'union',[{'atom',117,'ok'}|[{'type',117,'tuple',[{'atom',117,'error'}|[{'user_type',117,'reason',[]}]]}|[{'user_type',117,'input_reply',[]}|[{'user_type',117,'output_reply',[]}]]]]}]]]]}]]]]]]}]}],
		%% Line 126
		'spec' =
		    %% Line 126
		    [{{'keysort',2},[{'type',126,'bounded_fun',[{'type',126,'fun',[{'type',126,'product',[{'var',126,'KeyPos'}|[{'var',126,'FileName'}]]}|[{'var',126,'Reply'}]]}|[[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'KeyPos'}|[{'user_type',127,'key_pos',[]}]]]]}|[{'type',128,'constraint',[{'atom',128,'is_subtype'}|[[{'var',128,'FileName'}|[{'user_type',128,'file_name',[]}]]]]}|[{'type',129,'constraint',[{'atom',129,'is_subtype'}|[[{'var',129,'Reply'}|[{'type',129,'union',[{'atom',129,'ok'}|[{'type',129,'tuple',[{'atom',129,'error'}|[{'user_type',129,'reason',[]}]]}|[{'user_type',129,'input_reply',[]}|[{'user_type',129,'output_reply',[]}]]]]}]]]]}]]]]]}]}],
		%% Line 133
		'spec' =
		    %% Line 133
		    [{{'keysort',3},[{'type',133,'bounded_fun',[{'type',133,'fun',[{'type',133,'product',[{'var',133,'KeyPos'}|[{'var',133,'Input'}|[{'var',133,'Output'}]]]}|[{'var',133,'Reply'}]]}|[[{'type',134,'constraint',[{'atom',134,'is_subtype'}|[[{'var',134,'KeyPos'}|[{'user_type',134,'key_pos',[]}]]]]}|[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'Input'}|[{'user_type',135,'input',[]}]]]]}|[{'type',136,'constraint',[{'atom',136,'is_subtype'}|[[{'var',136,'Output'}|[{'user_type',136,'output',[]}]]]]}|[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'Reply'}|[{'type',137,'union',[{'atom',137,'ok'}|[{'type',137,'tuple',[{'atom',137,'error'}|[{'user_type',137,'reason',[]}]]}|[{'user_type',137,'input_reply',[]}|[{'user_type',137,'output_reply',[]}]]]]}]]]]}]]]]]]}]}],
		%% Line 141
		'spec' =
		    %% Line 141
		    [{{'keysort',4},[{'type',141,'bounded_fun',[{'type',141,'fun',[{'type',141,'product',[{'var',141,'KeyPos'}|[{'var',141,'Input'}|[{'var',141,'Output'}|[{'var',141,'Options'}]]]]}|[{'var',141,'Reply'}]]}|[[{'type',142,'constraint',[{'atom',142,'is_subtype'}|[[{'var',142,'KeyPos'}|[{'user_type',142,'key_pos',[]}]]]]}|[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'Input'}|[{'user_type',143,'input',[]}]]]]}|[{'type',144,'constraint',[{'atom',144,'is_subtype'}|[[{'var',144,'Output'}|[{'user_type',144,'output',[]}]]]]}|[{'type',145,'constraint',[{'atom',145,'is_subtype'}|[[{'var',145,'Options'}|[{'user_type',145,'options',[]}]]]]}|[{'type',146,'constraint',[{'atom',146,'is_subtype'}|[[{'var',146,'Reply'}|[{'type',146,'union',[{'atom',146,'ok'}|[{'type',146,'tuple',[{'atom',146,'error'}|[{'user_type',146,'reason',[]}]]}|[{'user_type',146,'input_reply',[]}|[{'user_type',146,'output_reply',[]}]]]]}]]]]}]]]]]]]}]}],
		%% Line 166
		'spec' =
		    %% Line 166
		    [{{'merge',2},[{'type',166,'bounded_fun',[{'type',166,'fun',[{'type',166,'product',[{'var',166,'FileNames'}|[{'var',166,'Output'}]]}|[{'var',166,'Reply'}]]}|[[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'FileNames'}|[{'user_type',167,'file_names',[]}]]]]}|[{'type',168,'constraint',[{'atom',168,'is_subtype'}|[[{'var',168,'Output'}|[{'user_type',168,'output',[]}]]]]}|[{'type',169,'constraint',[{'atom',169,'is_subtype'}|[[{'var',169,'Reply'}|[{'type',169,'union',[{'atom',169,'ok'}|[{'type',169,'tuple',[{'atom',169,'error'}|[{'user_type',169,'reason',[]}]]}|[{'user_type',169,'output_reply',[]}]]]}]]]]}]]]]]}]}],
		%% Line 173
		'spec' =
		    %% Line 173
		    [{{'merge',3},[{'type',173,'bounded_fun',[{'type',173,'fun',[{'type',173,'product',[{'var',173,'FileNames'}|[{'var',173,'Output'}|[{'var',173,'Options'}]]]}|[{'var',173,'Reply'}]]}|[[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'FileNames'}|[{'user_type',174,'file_names',[]}]]]]}|[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'Output'}|[{'user_type',175,'output',[]}]]]]}|[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'Options'}|[{'user_type',176,'options',[]}]]]]}|[{'type',177,'constraint',[{'atom',177,'is_subtype'}|[[{'var',177,'Reply'}|[{'type',177,'union',[{'atom',177,'ok'}|[{'type',177,'tuple',[{'atom',177,'error'}|[{'user_type',177,'reason',[]}]]}|[{'user_type',177,'output_reply',[]}]]]}]]]]}]]]]]]}]}],
		%% Line 187
		'spec' =
		    %% Line 187
		    [{{'keymerge',3},[{'type',187,'bounded_fun',[{'type',187,'fun',[{'type',187,'product',[{'var',187,'KeyPos'}|[{'var',187,'FileNames'}|[{'var',187,'Output'}]]]}|[{'var',187,'Reply'}]]}|[[{'type',188,'constraint',[{'atom',188,'is_subtype'}|[[{'var',188,'KeyPos'}|[{'user_type',188,'key_pos',[]}]]]]}|[{'type',189,'constraint',[{'atom',189,'is_subtype'}|[[{'var',189,'FileNames'}|[{'user_type',189,'file_names',[]}]]]]}|[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'Output'}|[{'user_type',190,'output',[]}]]]]}|[{'type',191,'constraint',[{'atom',191,'is_subtype'}|[[{'var',191,'Reply'}|[{'type',191,'union',[{'atom',191,'ok'}|[{'type',191,'tuple',[{'atom',191,'error'}|[{'user_type',191,'reason',[]}]]}|[{'user_type',191,'output_reply',[]}]]]}]]]]}]]]]]]}]}],
		%% Line 195
		'spec' =
		    %% Line 195
		    [{{'keymerge',4},[{'type',195,'bounded_fun',[{'type',195,'fun',[{'type',195,'product',[{'var',195,'KeyPos'}|[{'var',195,'FileNames'}|[{'var',195,'Output'}|[{'var',195,'Options'}]]]]}|[{'var',195,'Reply'}]]}|[[{'type',196,'constraint',[{'atom',196,'is_subtype'}|[[{'var',196,'KeyPos'}|[{'user_type',196,'key_pos',[]}]]]]}|[{'type',197,'constraint',[{'atom',197,'is_subtype'}|[[{'var',197,'FileNames'}|[{'user_type',197,'file_names',[]}]]]]}|[{'type',198,'constraint',[{'atom',198,'is_subtype'}|[[{'var',198,'Output'}|[{'user_type',198,'output',[]}]]]]}|[{'type',199,'constraint',[{'atom',199,'is_subtype'}|[[{'var',199,'Options'}|[{'user_type',199,'options',[]}]]]]}|[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'Reply'}|[{'type',200,'union',[{'atom',200,'ok'}|[{'type',200,'tuple',[{'atom',200,'error'}|[{'user_type',200,'reason',[]}]]}|[{'user_type',200,'output_reply',[]}]]]}]]]]}]]]]]]]}]}],
		%% Line 220
		'spec' =
		    %% Line 220
		    [{{'check',1},[{'type',220,'bounded_fun',[{'type',220,'fun',[{'type',220,'product',[{'var',220,'FileName'}]}|[{'var',220,'Reply'}]]}|[[{'type',221,'constraint',[{'atom',221,'is_subtype'}|[[{'var',221,'FileName'}|[{'user_type',221,'file_name',[]}]]]]}|[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'Reply'}|[{'type',222,'union',[{'type',222,'tuple',[{'atom',222,'ok'}|[{'type',222,'list',[{'var',222,'Result'}]}]]}|[{'type',222,'tuple',[{'atom',222,'error'}|[{'user_type',222,'reason',[]}]]}]]}]]]]}|[{'type',223,'constraint',[{'atom',223,'is_subtype'}|[[{'var',223,'Result'}|[{'type',223,'tuple',[{'var',223,'FileName'}|[{'var',223,'TermPosition'}|[{'type',223,'term',[]}]]]}]]]]}|[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'TermPosition'}|[{'type',224,'pos_integer',[]}]]]]}]]]]]]}]}],
		%% Line 228
		'spec' =
		    %% Line 228
		    [{{'check',2},[{'type',228,'bounded_fun',[{'type',228,'fun',[{'type',228,'product',[{'var',228,'FileNames'}|[{'var',228,'Options'}]]}|[{'var',228,'Reply'}]]}|[[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'FileNames'}|[{'user_type',229,'file_names',[]}]]]]}|[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'Options'}|[{'user_type',230,'options',[]}]]]]}|[{'type',231,'constraint',[{'atom',231,'is_subtype'}|[[{'var',231,'Reply'}|[{'type',231,'union',[{'type',231,'tuple',[{'atom',231,'ok'}|[{'type',231,'list',[{'var',231,'Result'}]}]]}|[{'type',231,'tuple',[{'atom',231,'error'}|[{'user_type',231,'reason',[]}]]}]]}]]]]}|[{'type',232,'constraint',[{'atom',232,'is_subtype'}|[[{'var',232,'Result'}|[{'type',232,'tuple',[{'var',232,'FileName'}|[{'var',232,'TermPosition'}|[{'type',232,'term',[]}]]]}]]]]}|[{'type',233,'constraint',[{'atom',233,'is_subtype'}|[[{'var',233,'FileName'}|[{'user_type',233,'file_name',[]}]]]]}|[{'type',234,'constraint',[{'atom',234,'is_subtype'}|[[{'var',234,'TermPosition'}|[{'type',234,'pos_integer',[]}]]]]}]]]]]]]]}]}],
		%% Line 243
		'spec' =
		    %% Line 243
		    [{{'keycheck',2},[{'type',243,'bounded_fun',[{'type',243,'fun',[{'type',243,'product',[{'var',243,'KeyPos'}|[{'var',243,'FileName'}]]}|[{'var',243,'Reply'}]]}|[[{'type',244,'constraint',[{'atom',244,'is_subtype'}|[[{'var',244,'KeyPos'}|[{'user_type',244,'key_pos',[]}]]]]}|[{'type',245,'constraint',[{'atom',245,'is_subtype'}|[[{'var',245,'FileName'}|[{'user_type',245,'file_name',[]}]]]]}|[{'type',246,'constraint',[{'atom',246,'is_subtype'}|[[{'var',246,'Reply'}|[{'type',246,'union',[{'type',246,'tuple',[{'atom',246,'ok'}|[{'type',246,'list',[{'var',246,'Result'}]}]]}|[{'type',246,'tuple',[{'atom',246,'error'}|[{'user_type',246,'reason',[]}]]}]]}]]]]}|[{'type',247,'constraint',[{'atom',247,'is_subtype'}|[[{'var',247,'Result'}|[{'type',247,'tuple',[{'var',247,'FileName'}|[{'var',247,'TermPosition'}|[{'type',247,'term',[]}]]]}]]]]}|[{'type',248,'constraint',[{'atom',248,'is_subtype'}|[[{'var',248,'TermPosition'}|[{'type',248,'pos_integer',[]}]]]]}]]]]]]]}]}],
		%% Line 252
		'spec' =
		    %% Line 252
		    [{{'keycheck',3},[{'type',252,'bounded_fun',[{'type',252,'fun',[{'type',252,'product',[{'var',252,'KeyPos'}|[{'var',252,'FileNames'}|[{'var',252,'Options'}]]]}|[{'var',252,'Reply'}]]}|[[{'type',253,'constraint',[{'atom',253,'is_subtype'}|[[{'var',253,'KeyPos'}|[{'user_type',253,'key_pos',[]}]]]]}|[{'type',254,'constraint',[{'atom',254,'is_subtype'}|[[{'var',254,'FileNames'}|[{'user_type',254,'file_names',[]}]]]]}|[{'type',255,'constraint',[{'atom',255,'is_subtype'}|[[{'var',255,'Options'}|[{'user_type',255,'options',[]}]]]]}|[{'type',256,'constraint',[{'atom',256,'is_subtype'}|[[{'var',256,'Reply'}|[{'type',256,'union',[{'type',256,'tuple',[{'atom',256,'ok'}|[{'type',256,'list',[{'var',256,'Result'}]}]]}|[{'type',256,'tuple',[{'atom',256,'error'}|[{'user_type',256,'reason',[]}]]}]]}]]]]}|[{'type',257,'constraint',[{'atom',257,'is_subtype'}|[[{'var',257,'Result'}|[{'type',257,'tuple',[{'var',257,'FileName'}|[{'var',257,'TermPosition'}|[{'type',257,'term',[]}]]]}]]]]}|[{'type',258,'constraint',[{'atom',258,'is_subtype'}|[[{'var',258,'FileName'}|[{'user_type',258,'file_name',[]}]]]]}|[{'type',259,'constraint',[{'atom',259,'is_subtype'}|[[{'var',259,'TermPosition'}|[{'type',259,'pos_integer',[]}]]]]}]]]]]]]]]}]}],
		%% Line 1471
		'spec' =
		    %% Line 1471
		    [{{'file_error',3},[{'type',1471,'fun',[{'type',1471,'product',[{'var',1471,'_'}|[{'type',1471,'tuple',[{'atom',1471,'error'}|[{'type',1471,'atom',[]}]]}|[{'type',1471,'record',[{'atom',1471,'w'}]}]]]}|[{'type',1471,'no_return',[]}]]}]}]]
'sort'/1 =
    %% Line 103
    fun (_0) ->
	%% Line 104
	apply 'sort'/2
	    ([_0|[]], _0)
'sort'/2 =
    %% Line 110
    fun (_0,_1) ->
	%% Line 111
	apply 'sort'/3
	    (_0, _1, [])
'sort'/3 =
    %% Line 118
    fun (_0,_1,_2) ->
	let <_5> =
	    apply %% Line 119
		  'is_input'/1
		(_0)
	in  let <_4> =
		apply %% Line 119
		      'maybe_output'/1
		    (_1)
	    in  let <_3> =
		    apply %% Line 119
			  'options'/1
			(_2)
		in  %% Line 119
		    case <_5,_4,_3> of
		      %% Line 120
		      <( {( 'true'
			    -| ['compiler_generated'] ),Input}
			 -| ['compiler_generated'] ),( {( 'true'
							  -| ['compiler_generated'] ),Output}
						       -| ['compiler_generated'] ),Opts = ( {( 'opts'
											       -| ['compiler_generated'] ),_12,_13,_14,_15,_16,_17,_18,_19}
											    -| ['compiler_generated'] )> when 'true' ->
			  %% Line 121
			  apply 'do_sort'/5
			      (0, Input, Output, Opts, 'sort')
		      %% Line 122
		      <( _20
			 -| ['compiler_generated'] ),( _21
						       -| ['compiler_generated'] ),( _22
										     -| ['compiler_generated'] )> when 'true' ->
			  let <T> = {( _20
				 -| ['compiler_generated'] ),( _21
							       -| ['compiler_generated'] ),( _22
											     -| ['compiler_generated'] )}
			  in  let <_6> =
				  call %% Line 123
				       'erlang':%% Line 123
						'tuple_to_list'
				      (%% Line 123
				       T)
			      in  let <_7> =
				      apply %% Line 123
					    'culprit'/1
					  (_6)
				  in  let <_27> =
					  [_0|%% Line 123
					      ( [_1|( [_2|( []
							    -| ['compiler_generated'] )]
						      -| ['compiler_generated'] )]
						-| ['compiler_generated'] )]
				      in  %% Line 298
					  ( case <_7,_27> of
					      ( <( E = ( {( 'error'
							    -| ['compiler_generated'] ),_28}
							 -| ['compiler_generated'] )
						   -| ['compiler_generated'] ),_X_Args> when ( 'true'
											       -| ['compiler_generated'] ) ->
						    %% Line 299
						    E
						-| ['compiler_generated'] )
					      %% Line 300
					      ( <( B = ( {( 'badarg'
							    -| ['compiler_generated'] ),_29}
							 -| ['compiler_generated'] )
						   -| ['compiler_generated'] ),Args> when ( 'true'
											    -| ['compiler_generated'] ) ->
						    %% Line 301
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (B, Args)
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <_30,_31> when ( 'true'
								 -| ['compiler_generated'] ) ->
						    ( primop ( 'match_fail'
							       -| ['compiler_generated'] )
							  (( {( 'function_clause'
								-| ['compiler_generated'] ),_30,_31}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
		    end
'keysort'/2 =
    %% Line 130
    fun (_0,_1) ->
	%% Line 131
	apply 'keysort'/3
	    (_0, [_1|[]], _1)
'keysort'/3 =
    %% Line 138
    fun (_0,_1,_2) ->
	%% Line 139
	apply 'keysort'/4
	    (_0, _1, _2, [])
'keysort'/4 =
    %% Line 147
    fun (_0,_1,_2,_3) ->
	let <_7> =
	    apply %% Line 148
		  'is_keypos'/1
		(_0)
	in  let <_6> =
		apply %% Line 148
		      'is_input'/1
		    (_1)
	    in  let <_5> =
		    apply %% Line 149
			  'maybe_output'/1
			(_2)
		in  let <_4> =
			apply %% Line 149
			      'options'/1
			    (_3)
		    in  let <_74,_75,_76> =
			    case <_7,_6,_5,_4> of
			      %% Line 150
			      <_18,_19,_20,( {( 'opts'
						-| ['compiler_generated'] ),( 'binary'
									      -| ['compiler_generated'] ),_21,_22,_23,_24,_25,_26,_27}
					     -| ['compiler_generated'] )> when 'true' ->
				  %% Line 151
				  <_1,_2,[{'badarg','format'}]>
			      %% Line 152
			      <_28,_29,_30,( {( 'opts'
						-| ['compiler_generated'] ),_31,_32,_33,_34,Order,_35,_36,_37}
					     -| ['compiler_generated'] )>
				  when call 'erlang':'is_function'
					(Order) ->
				  %% Line 153
				  <_1,_2,[{'badarg','order'}]>
			      %% Line 154
			      <( 'true'
				 -| ['compiler_generated'] ),( {( 'true'
								  -| ['compiler_generated'] ),In}
							       -| ['compiler_generated'] ),( {( 'true'
												-| ['compiler_generated'] ),Out}
											     -| ['compiler_generated'] ),Opts = ( {( 'opts'
																     -| ['compiler_generated'] ),_38,_39,_40,_41,_42,_43,_44,_45}
																  -| ['compiler_generated'] )> when 'true' ->
				  %% Line 155
				  <In,Out,Opts>
			      %% Line 156
			      <( _56
				 -| ['compiler_generated'] ),( _57
							       -| ['compiler_generated'] ),( _58
											     -| ['compiler_generated'] ),( _59
															   -| ['compiler_generated'] )> when 'true' ->
				  let <T> =
				      {( _56
					 -| ['compiler_generated'] ),( _57
								       -| ['compiler_generated'] ),( _58
												     -| ['compiler_generated'] ),( _59
																   -| ['compiler_generated'] )}
				  in  let <_8> =
					  call %% Line 157
					       'erlang':%% Line 157
							'tuple_to_list'
					      (%% Line 157
					       T)
				      in  %% Line 157
					  <_1,_2,_8>
			    end
			in  %% Line 159
			    case ( <( _74
				      -| ['compiler_generated'] ),( _75
								    -| ['compiler_generated'] ),( _76
												  -| ['compiler_generated'] )>
				   -| ['compiler_generated'] ) of
			      %% Line 160
			      <Input,Output,O = ( {( 'opts'
						     -| ['compiler_generated'] ),_46,_47,_48,_49,_50,_51,_52,_53}
						  -| ['compiler_generated'] )> when 'true' ->
				  %% Line 161
				  apply 'do_sort'/5
				      (_0, Input, Output, O, 'sort')
			      %% Line 162
			      <_54,_55,O> when 'true' ->
				  let <_12> =
				      apply %% Line 163
					    'culprit'/1
					  (%% Line 163
					   O)
				  in  let <_65> =
					  [_0|%% Line 163
					      ( [_1|( [_2|( [_3|( []
								  -| ['compiler_generated'] )]
							    -| ['compiler_generated'] )]
						      -| ['compiler_generated'] )]
						-| ['compiler_generated'] )]
				      in  %% Line 298
					  ( case <_12,_65> of
					      ( <( E = ( {( 'error'
							    -| ['compiler_generated'] ),_66}
							 -| ['compiler_generated'] )
						   -| ['compiler_generated'] ),_X_Args> when ( 'true'
											       -| ['compiler_generated'] ) ->
						    %% Line 299
						    E
						-| ['compiler_generated'] )
					      %% Line 300
					      ( <( B = ( {( 'badarg'
							    -| ['compiler_generated'] ),_67}
							 -| ['compiler_generated'] )
						   -| ['compiler_generated'] ),Args> when ( 'true'
											    -| ['compiler_generated'] ) ->
						    %% Line 301
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (B, Args)
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <_68,_69> when ( 'true'
								 -| ['compiler_generated'] ) ->
						    ( primop ( 'match_fail'
							       -| ['compiler_generated'] )
							  (( {( 'function_clause'
								-| ['compiler_generated'] ),_68,_69}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
			    end
'merge'/2 =
    %% Line 170
    fun (_0,_1) ->
	%% Line 171
	apply 'merge'/3
	    (_0, _1, [])
'merge'/3 =
    %% Line 178
    fun (_0,_1,_2) ->
	let <_5> =
	    apply %% Line 179
		  'is_files'/1
		(_0)
	in  let <_4> =
		apply %% Line 179
		      'maybe_output'/1
		    (_1)
	    in  let <_3> =
		    apply %% Line 179
			  'options'/1
			(_2)
		in  %% Line 179
		    case <_5,_4,_3> of
		      %% Line 181
		      <( {( 'true'
			    -| ['compiler_generated'] ),Files}
			 -| ['compiler_generated'] ),( {( 'true'
							  -| ['compiler_generated'] ),Output}
						       -| ['compiler_generated'] ),Opts = ( {( 'opts'
											       -| ['compiler_generated'] ),_12,_13,_14,_15,_16,_17,_18,_19}
											    -| ['compiler_generated'] )> when 'true' ->
			  %% Line 182
			  apply 'do_sort'/5
			      (0, Files, Output, Opts, 'merge')
		      %% Line 183
		      <( _20
			 -| ['compiler_generated'] ),( _21
						       -| ['compiler_generated'] ),( _22
										     -| ['compiler_generated'] )> when 'true' ->
			  let <T> = {( _20
				 -| ['compiler_generated'] ),( _21
							       -| ['compiler_generated'] ),( _22
											     -| ['compiler_generated'] )}
			  in  let <_6> =
				  call %% Line 184
				       'erlang':%% Line 184
						'tuple_to_list'
				      (%% Line 184
				       T)
			      in  let <_7> =
				      apply %% Line 184
					    'culprit'/1
					  (_6)
				  in  let <_27> =
					  [_0|%% Line 184
					      ( [_1|( [_2|( []
							    -| ['compiler_generated'] )]
						      -| ['compiler_generated'] )]
						-| ['compiler_generated'] )]
				      in  %% Line 298
					  ( case <_7,_27> of
					      ( <( E = ( {( 'error'
							    -| ['compiler_generated'] ),_28}
							 -| ['compiler_generated'] )
						   -| ['compiler_generated'] ),_X_Args> when ( 'true'
											       -| ['compiler_generated'] ) ->
						    %% Line 299
						    E
						-| ['compiler_generated'] )
					      %% Line 300
					      ( <( B = ( {( 'badarg'
							    -| ['compiler_generated'] ),_29}
							 -| ['compiler_generated'] )
						   -| ['compiler_generated'] ),Args> when ( 'true'
											    -| ['compiler_generated'] ) ->
						    %% Line 301
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (B, Args)
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <_30,_31> when ( 'true'
								 -| ['compiler_generated'] ) ->
						    ( primop ( 'match_fail'
							       -| ['compiler_generated'] )
							  (( {( 'function_clause'
								-| ['compiler_generated'] ),_30,_31}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
		    end
'keymerge'/3 =
    %% Line 192
    fun (_0,_1,_2) ->
	%% Line 193
	apply 'keymerge'/4
	    (_0, _1, _2, [])
'keymerge'/4 =
    %% Line 201
    fun (_0,_1,_2,_3) ->
	let <_7> =
	    apply %% Line 202
		  'is_keypos'/1
		(_0)
	in  let <_6> =
		apply %% Line 202
		      'is_files'/1
		    (_1)
	    in  let <_5> =
		    apply %% Line 203
			  'maybe_output'/1
			(_2)
		in  let <_4> =
			apply %% Line 203
			      'options'/1
			    (_3)
		    in  let <_74,_75,_76> =
			    case <_7,_6,_5,_4> of
			      %% Line 204
			      <_18,_19,_20,( {( 'opts'
						-| ['compiler_generated'] ),( 'binary'
									      -| ['compiler_generated'] ),_21,_22,_23,_24,_25,_26,_27}
					     -| ['compiler_generated'] )> when 'true' ->
				  %% Line 205
				  <_1,_2,[{'badarg','format'}]>
			      %% Line 206
			      <_28,_29,_30,( {( 'opts'
						-| ['compiler_generated'] ),_31,_32,_33,_34,Order,_35,_36,_37}
					     -| ['compiler_generated'] )>
				  when call 'erlang':'is_function'
					(Order) ->
				  %% Line 207
				  <_1,_2,[{'badarg','order'}]>
			      %% Line 208
			      <( 'true'
				 -| ['compiler_generated'] ),( {( 'true'
								  -| ['compiler_generated'] ),Fs}
							       -| ['compiler_generated'] ),( {( 'true'
												-| ['compiler_generated'] ),Out}
											     -| ['compiler_generated'] ),Opts = ( {( 'opts'
																     -| ['compiler_generated'] ),_38,_39,_40,_41,_42,_43,_44,_45}
																  -| ['compiler_generated'] )> when 'true' ->
				  %% Line 209
				  <Fs,Out,Opts>
			      %% Line 210
			      <( _56
				 -| ['compiler_generated'] ),( _57
							       -| ['compiler_generated'] ),( _58
											     -| ['compiler_generated'] ),( _59
															   -| ['compiler_generated'] )> when 'true' ->
				  let <T> =
				      {( _56
					 -| ['compiler_generated'] ),( _57
								       -| ['compiler_generated'] ),( _58
												     -| ['compiler_generated'] ),( _59
																   -| ['compiler_generated'] )}
				  in  let <_8> =
					  call %% Line 211
					       'erlang':%% Line 211
							'tuple_to_list'
					      (%% Line 211
					       T)
				      in  %% Line 211
					  <_1,_2,_8>
			    end
			in  %% Line 213
			    case ( <( _74
				      -| ['compiler_generated'] ),( _75
								    -| ['compiler_generated'] ),( _76
												  -| ['compiler_generated'] )>
				   -| ['compiler_generated'] ) of
			      %% Line 214
			      <Files,Output,O = ( {( 'opts'
						     -| ['compiler_generated'] ),_46,_47,_48,_49,_50,_51,_52,_53}
						  -| ['compiler_generated'] )> when 'true' ->
				  %% Line 215
				  apply 'do_sort'/5
				      (_0, Files, Output, O, 'merge')
			      %% Line 216
			      <_54,_55,O> when 'true' ->
				  let <_12> =
				      apply %% Line 217
					    'culprit'/1
					  (%% Line 217
					   O)
				  in  let <_65> =
					  [_0|%% Line 217
					      ( [_1|( [_2|( [_3|( []
								  -| ['compiler_generated'] )]
							    -| ['compiler_generated'] )]
						      -| ['compiler_generated'] )]
						-| ['compiler_generated'] )]
				      in  %% Line 298
					  ( case <_12,_65> of
					      ( <( E = ( {( 'error'
							    -| ['compiler_generated'] ),_66}
							 -| ['compiler_generated'] )
						   -| ['compiler_generated'] ),_X_Args> when ( 'true'
											       -| ['compiler_generated'] ) ->
						    %% Line 299
						    E
						-| ['compiler_generated'] )
					      %% Line 300
					      ( <( B = ( {( 'badarg'
							    -| ['compiler_generated'] ),_67}
							 -| ['compiler_generated'] )
						   -| ['compiler_generated'] ),Args> when ( 'true'
											    -| ['compiler_generated'] ) ->
						    %% Line 301
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (B, Args)
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <_68,_69> when ( 'true'
								 -| ['compiler_generated'] ) ->
						    ( primop ( 'match_fail'
							       -| ['compiler_generated'] )
							  (( {( 'function_clause'
								-| ['compiler_generated'] ),_68,_69}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
			    end
'check'/1 =
    %% Line 225
    fun (_0) ->
	%% Line 226
	apply 'check'/2
	    ([_0|[]], [])
'check'/2 =
    %% Line 235
    fun (_0,_1) ->
	let <_3> =
	    apply %% Line 236
		  'is_files'/1
		(_0)
	in  let <_2> =
		apply %% Line 236
		      'options'/1
		    (_1)
	    in  %% Line 236
		case <_3,_2> of
		  %% Line 237
		  <( {( 'true'
			-| ['compiler_generated'] ),Files}
		     -| ['compiler_generated'] ),Opts = ( {( 'opts'
							     -| ['compiler_generated'] ),_9,_10,_11,_12,_13,_14,_15,_16}
							  -| ['compiler_generated'] )> when 'true' ->
		      %% Line 238
		      apply 'do_sort'/5
			  (0, Files, 'undefined', Opts, 'check')
		  %% Line 239
		  <( _17
		     -| ['compiler_generated'] ),( _18
						   -| ['compiler_generated'] )> when 'true' ->
		      let <T> = {( _17
			     -| ['compiler_generated'] ),( _18
							   -| ['compiler_generated'] )}
		      in  let <_4> =
			      call %% Line 240
				   'erlang':%% Line 240
					    'tuple_to_list'
				  (%% Line 240
				   T)
			  in  let <_5> =
				  apply %% Line 240
					'culprit'/1
				      (_4)
			      in  let <_22> =
				      [_0|%% Line 240
					  ( [_1|( []
						  -| ['compiler_generated'] )]
					    -| ['compiler_generated'] )]
				  in  %% Line 298
				      ( case <_5,_22> of
					  ( <( E = ( {( 'error'
							-| ['compiler_generated'] ),_23}
						     -| ['compiler_generated'] )
					       -| ['compiler_generated'] ),_X_Args> when ( 'true'
											   -| ['compiler_generated'] ) ->
						%% Line 299
						E
					    -| ['compiler_generated'] )
					  %% Line 300
					  ( <( B = ( {( 'badarg'
							-| ['compiler_generated'] ),_24}
						     -| ['compiler_generated'] )
					       -| ['compiler_generated'] ),Args> when ( 'true'
											-| ['compiler_generated'] ) ->
						%% Line 301
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (B, Args)
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_25,_26> when ( 'true'
							     -| ['compiler_generated'] ) ->
						( primop ( 'match_fail'
							   -| ['compiler_generated'] )
						      (( {( 'function_clause'
							    -| ['compiler_generated'] ),_25,_26}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
		end
'keycheck'/2 =
    %% Line 249
    fun (_0,_1) ->
	%% Line 250
	apply 'keycheck'/3
	    (_0, [_1|[]], [])
'keycheck'/3 =
    %% Line 260
    fun (_0,_1,_2) ->
	let <_5> =
	    apply %% Line 261
		  'is_keypos'/1
		(_0)
	in  let <_4> =
		apply %% Line 261
		      'is_files'/1
		    (_1)
	    in  let <_3> =
		    apply %% Line 261
			  'options'/1
			(_2)
		in  let <_65,_66> =
			case <_5,_4,_3> of
			  %% Line 262
			  <_15,_16,( {( 'opts'
					-| ['compiler_generated'] ),( 'binary'
								      -| ['compiler_generated'] ),_17,_18,_19,_20,_21,_22,_23}
				     -| ['compiler_generated'] )> when 'true' ->
			      %% Line 263
			      <_1,[{'badarg','format'}]>
			  %% Line 264
			  <_24,_25,( {( 'opts'
					-| ['compiler_generated'] ),_26,_27,_28,_29,Order,_30,_31,_32}
				     -| ['compiler_generated'] )>
			      when call 'erlang':'is_function'
				    (Order) ->
			      %% Line 265
			      <_1,[{'badarg','order'}]>
			  %% Line 266
			  <( 'true'
			     -| ['compiler_generated'] ),( {( 'true'
							      -| ['compiler_generated'] ),Fs}
							   -| ['compiler_generated'] ),Opts = ( {( 'opts'
												   -| ['compiler_generated'] ),_33,_34,_35,_36,_37,_38,_39,_40}
												-| ['compiler_generated'] )> when 'true' ->
			      %% Line 267
			      <Fs,Opts>
			  %% Line 268
			  <( _50
			     -| ['compiler_generated'] ),( _51
							   -| ['compiler_generated'] ),( _52
											 -| ['compiler_generated'] )> when 'true' ->
			      let <T> = {( _50
				     -| ['compiler_generated'] ),( _51
								   -| ['compiler_generated'] ),( _52
												 -| ['compiler_generated'] )}
			      in  let <_6> =
				      call %% Line 269
					   'erlang':%% Line 269
						    'tuple_to_list'
					  (%% Line 269
					   T)
				  in  %% Line 269
				      <_1,_6>
			end
		    in  %% Line 271
			case ( <( _65
				  -| ['compiler_generated'] ),( _66
								-| ['compiler_generated'] )>
			       -| ['compiler_generated'] ) of
			  %% Line 272
			  <Files,O = ( {( 'opts'
					  -| ['compiler_generated'] ),_41,_42,_43,_44,_45,_46,_47,_48}
				       -| ['compiler_generated'] )> when 'true' ->
			      %% Line 273
			      apply 'do_sort'/5
				  (_0, Files, 'undefined', O, 'check')
			  %% Line 274
			  <_49,O> when 'true' ->
			      let <_10> =
				  apply %% Line 275
					'culprit'/1
				      (%% Line 275
				       O)
			      in  let <_57> =
				      [_0|%% Line 275
					  ( [_1|( [_2|( []
							-| ['compiler_generated'] )]
						  -| ['compiler_generated'] )]
					    -| ['compiler_generated'] )]
				  in  %% Line 298
				      ( case <_10,_57> of
					  ( <( E = ( {( 'error'
							-| ['compiler_generated'] ),_58}
						     -| ['compiler_generated'] )
					       -| ['compiler_generated'] ),_X_Args> when ( 'true'
											   -| ['compiler_generated'] ) ->
						%% Line 299
						E
					    -| ['compiler_generated'] )
					  %% Line 300
					  ( <( B = ( {( 'badarg'
							-| ['compiler_generated'] ),_59}
						     -| ['compiler_generated'] )
					       -| ['compiler_generated'] ),Args> when ( 'true'
											-| ['compiler_generated'] ) ->
						%% Line 301
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (B, Args)
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_60,_61> when ( 'true'
							     -| ['compiler_generated'] ) ->
						( primop ( 'match_fail'
							   -| ['compiler_generated'] )
						      (( {( 'function_clause'
							    -| ['compiler_generated'] ),_60,_61}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
			end
'culprit'/1 =
    %% Line 290
    fun (_0) ->
	case _0 of
	  <[E = {'error',_2}|_3]> when 'true' ->
	      %% Line 291
	      E
	  %% Line 292
	  <[B = {'badarg',_4}|_5]> when 'true' ->
	      %% Line 293
	      B
	  %% Line 294
	  <[_6|B]> when 'true' ->
	      %% Line 295
	      apply 'culprit'/1
		  (B)
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'culprit',1}}] )
	    -| ['compiler_generated'] )
	end
'badarg'/2 =
    %% Line 298
    fun (_0,_1) ->
	case <_0,_1> of
	  <E = {'error',_4},_X_Args> when 'true' ->
	      %% Line 299
	      E
	  %% Line 300
	  <B = {'badarg',_5},Args> when 'true' ->
	      %% Line 301
	      call 'erlang':'error'
		  (B, Args)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'badarg',2}}] )
	    -| ['compiler_generated'] )
	end
'options'/1 =
    %% Line 303
    fun (_0) ->
	case _0 of
	  <Options>
	      when call 'erlang':'is_list'
		    (_0) ->
	      let <_1> =
		  apply 'binary_term_fun'/0
		      ()
	      in  %% Line 304
		  apply 'options'/2
		      (Options, {'opts',_1,524288,16,'default','ascending','false','false',4})
	  %% Line 305
	  <Option> when 'true' ->
	      %% Line 306
	      apply 'options'/1
		  ([Option|[]])
	end
'options'/2 =
    %% Line 308
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{'format',Format}|L],Opts>
	      when let <_2> =
		    call 'erlang':'=:='
			(Format, 'binary')
		in  let <_3> =
			call %% Line 309
			     'erlang':%% Line 309
				      '=:='
			    (%% Line 309
			     Format, %% Line 309
				     'term')
		    in  let <_4> =
			    call %% Line 310
				 'erlang':%% Line 310
					  'is_function'
				(%% Line 310
				 Format, %% Line 310
					 1)
			in  let <_5> =
				call %% Line 309
				     'erlang':%% Line 309
					      'or'
				    (_3, _4)
			    in  call 'erlang':'or'
				    (_2, _5) ->
	      %% Line 311
	      case Opts of
		<{'opts',_66,_67,_68,_69,_70,_71,_72,_73}> when 'true' ->
		    let <_8> =
			call 'erlang':'setelement'
			    (2, Opts, Format)
		    in  apply 'options'/2
			    (L, _8)
		( <_74> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 312
	  <[{'format','binary_term'}|L],Opts> when 'true' ->
	      let <_rec1> =
		  apply %% Line 313
			'binary_term_fun'/0
		      ()
	      in  %% Line 313
		  case Opts of
		    <{'opts',_75,_76,_77,_78,_79,_80,_81,_82}> when 'true' ->
			let <_12> =
			    call 'erlang':'setelement'
				(2, Opts, _rec1)
			in  apply 'options'/2
				(L, _12)
		    ( <_83> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 314
	  <[{'size',Size}|L],Opts>
	      when let <_13> =
		    call 'erlang':'is_integer'
			(Size)
		in  let <_14> =
			call 'erlang':'>='
			    (Size, 0)
		    in  call 'erlang':'and'
			    (_13, _14) ->
	      let <_rec3> =
		  call %% Line 315
		       'erlang':%% Line 315
				'max'
		      (%% Line 315
		       Size, %% Line 315
			     1)
	      in  %% Line 315
		  case Opts of
		    <{'opts',_84,_85,_86,_87,_88,_89,_90,_91}> when 'true' ->
			let <_18> =
			    call 'erlang':'setelement'
				(3, Opts, _rec3)
			in  apply 'options'/2
				(L, _18)
		    ( <_92> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 316
	  <[{'no_files',NoFiles}|L],Opts>
	      when let <_19> =
		    call 'erlang':'is_integer'
			(NoFiles)
		in  let <_20> =
			call %% Line 317
			     'erlang':%% Line 317
				      '>'
			    (%% Line 317
			     NoFiles, %% Line 317
				      1)
		    in  call 'erlang':'and'
			    (_19, _20) ->
	      %% Line 318
	      case Opts of
		<{'opts',_93,_94,_95,_96,_97,_98,_99,_100}> when 'true' ->
		    let <_23> =
			call 'erlang':'setelement'
			    (4, Opts, NoFiles)
		    in  apply 'options'/2
			    (L, _23)
		( <_101> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 319
	  <[{'tmpdir',[]}|L],Opts> when 'true' ->
	      %% Line 320
	      case Opts of
		<{'opts',_102,_103,_104,_105,_106,_107,_108,_109}> when 'true' ->
		    let <_26> =
			call 'erlang':'setelement'
			    (5, Opts, 'default')
		    in  apply 'options'/2
			    (L, _26)
		( <_110> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 321
	  <[{'tmpdir',Dir}|L],Opts> when 'true' ->
	      let <_27> =
		  catch
		      %% Line 322
		      call 'filename':'absname'
			  (Dir)
	      in  %% Line 322
		  case _27 of
		    %% Line 323
		    <{'EXIT',_111}> when 'true' ->
			%% Line 324
			{'badarg',Dir}
		    %% Line 325
		    <FileName> when 'true' ->
			let <_rec7> = {%% Line 326
			     'dir',%% Line 326
				   FileName}
			in  %% Line 326
			    case Opts of
			      <{'opts',_112,_113,_114,_115,_116,_117,_118,_119}> when 'true' ->
				  let <_31> =
				      call 'erlang':'setelement'
					  (5, Opts, _rec7)
				  in  apply 'options'/2
					  (L, _31)
			      ( <_120> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','opts'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
		  end
	  %% Line 328
	  <[{'order',Fun}|L],Opts>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 329
	      case Opts of
		<{'opts',_121,_122,_123,_124,_125,_126,_127,_128}> when 'true' ->
		    let <_35> =
			call 'erlang':'setelement'
			    (6, Opts, Fun)
		    in  apply 'options'/2
			    (L, _35)
		( <_129> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 330
	  <[{'order',Order}|L],Opts>
	      when let <_36> =
		    call 'erlang':'=:='
			(Order, 'ascending')
		in  let <_37> =
			call %% Line 331
			     'erlang':%% Line 331
				      '=:='
			    (%% Line 331
			     Order, %% Line 331
				    'descending')
		    in  call 'erlang':'or'
			    (_36, _37) ->
	      %% Line 332
	      case Opts of
		<{'opts',_130,_131,_132,_133,_134,_135,_136,_137}> when 'true' ->
		    let <_40> =
			call 'erlang':'setelement'
			    (6, Opts, Order)
		    in  apply 'options'/2
			    (L, _40)
		( <_138> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 333
	  <[{'compressed',Bool}|L],Opts>
	      when call 'erlang':'is_boolean'
		    (Bool) ->
	      %% Line 334
	      case Opts of
		<{'opts',_139,_140,_141,_142,_143,_144,_145,_146}> when 'true' ->
		    let <_43> =
			call 'erlang':'setelement'
			    (7, Opts, Bool)
		    in  apply 'options'/2
			    (L, _43)
		( <_147> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 335
	  <[{'unique',Bool}|L],Opts>
	      when call 'erlang':'is_boolean'
		    (Bool) ->
	      %% Line 336
	      case Opts of
		<{'opts',_148,_149,_150,_151,_152,_153,_154,_155}> when 'true' ->
		    let <_46> =
			call 'erlang':'setelement'
			    (8, Opts, Bool)
		    in  apply 'options'/2
			    (L, _46)
		( <_156> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 337
	  <[{'header',Len}|L],Opts>
	      when %% Line 338
		try
		    let <_47> =
			call 'erlang':'is_integer'
			    (Len)
		    in  let <_48> =
			    call 'erlang':'>'
				(Len, 0)
			in  let <_50> =
				call 'erlang':'<'
				    (Len, 2147483648)
			    in  let <_51> =
				    call 'erlang':'and'
					(_48, _50)
				in  call 'erlang':'and'
					(_47, _51)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 339
	      case Opts of
		<{'opts',_157,_158,_159,_160,_161,_162,_163,_164}> when 'true' ->
		    let <_54> =
			call 'erlang':'setelement'
			    (9, Opts, Len)
		    in  apply 'options'/2
			    (L, _54)
		( <_165> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 340
	  <[],Opts> when 'true' ->
	      %% Line 341
	      case <> of
		%% Line 342
		<>
		    when ( try
			    ( let <_57> =
				  case ( call ( 'erlang'
						-| ['compiler_generated'] ):( 'is_record'
									      -| ['compiler_generated'] )
					     (Opts, ( 'opts'
						      -| ['compiler_generated'] ), ( 9
										     -| ['compiler_generated'] ))
					 -| ['compiler_generated'] ) of
				    ( <( 'true'
					 -| ['compiler_generated'] )> when 'true' ->
					  ( 'true'
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <( 'false'
					 -| ['compiler_generated'] )> when 'true' ->
					  ( 'fail'
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <( _55
					 -| ['compiler_generated'] )> when 'true' ->
					  ( _55
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      in  let <_58> =
				      call 'erlang':'=:='
					  (( _57
					     -| ['compiler_generated'] ), 'true')
				  in  let <_59> =
					  call 'erlang':'element'
					      (2, Opts)
				      in  let <_60> =
					      call 'erlang':'=:='
						  (_59, 'term')
					  in  let <_61> =
						  call ( 'erlang'
							 -| ['compiler_generated'] ):( 'and'
										       -| ['compiler_generated'] )
						      (_58, _60)
					      in  let <_62> =
						      call 'erlang':'element'
							  (9, Opts)
						  in  let <_63> =
							  call 'erlang':'=/='
							      (_62, 4)
						      in  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'and'
												 -| ['compiler_generated'] )
								(_61, _63)
							    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
			-| ['compiler_generated'] ) ->
		    %% Line 343
		    {'badarg','header'}
		%% Line 344
		<> when 'true' ->
		    %% Line 345
		    Opts
	      end
	  %% Line 347
	  <[Bad|_166],_X_Opts> when 'true' ->
	      %% Line 348
	      {'badarg',Bad}
	  %% Line 349
	  <Bad,_X_Opts> when 'true' ->
	      %% Line 350
	      {'badarg',Bad}
	end
'do_sort'/5 =
    %% Line 355
    fun (_0,_1,_2,_3,_4) ->
	%% Line 358
	case _3 of
	  <{'opts',Format0,Size,NoFiles,TmpDir,Order,Compressed,Unique,HdLen}> when 'true' ->
	      let <Prefix> =
		  apply %% Line 359
			'tmp_prefix'/2
		      (_2, %% Line 359
			   TmpDir)
	      in  let <Ref> =
		      call %% Line 361
			   'erlang':%% Line 361
				    'make_ref'
			  ()
		  in  let <_10> =
			  case _0 of
			    %% Line 362
			    <[Kp|[]]> when 'true' ->
				Kp
			    %% Line 362
			    <_26> when 'true' ->
				_0
			  end
		      in  %% Line 363
			  case apply 'wrap_input'/3
				   (Format0, _4, _1) of
			    <{Format,Input}> when 'true' ->
				let <_13> =
				    case <> of
				      %% Line 364
				      <>
					  when ( call 'erlang':'=:='
						  (Compressed,
						   'true')
					      -| ['compiler_generated'] ) ->
					  ['compressed']
				      %% Line 364
				      <> when 'true' ->
					  []
				    end
				in  %% Line 365
				    case apply 'wrap_output_terms'/3
					     (Format0, _2, _13) of
				      <{Output,FunOut}> when 'true' ->
					  let <W> =
					      {%% Line 366
					       'w',_10,[[]],1,'undefined',%% Line 366
									  Output,%% Line 366
										 FunOut,%% Line 367
											Prefix,[],%% Line 367
												  Format,%% Line 367
													 Size,%% Line 368
													      NoFiles,%% Line 368
														      Order,16384,'undefined',%% Line 369
																	      Ref,_13,%% Line 369
																		      Unique,%% Line 369
																			     HdLen,%% Line 370
																				   'no_value'}
					  in  %% Line 371
					      try
						  %% Line 372
						  apply 'doit'/3
						      (_4, Input, W)
					      of <_17> ->
						  _17
					      catch <_20,_19,_18> ->
						  %% Line 373
						  case <_20,_19,_18> of
						    <( 'throw'
						       -| ['compiler_generated'] ),( {_27,Error}
										     -| ['compiler_generated'] ),_28>
							when call 'erlang':'=:='
							      (_27,
							       Ref) ->
							%% Line 374
							Error
						    ( <_29,_30,_31> when 'true' ->
							  primop 'raise'
							      (_31, _30)
						      -| ['compiler_generated'] )
						  end
				      ( <_15> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_15})
					-| ['compiler_generated'] )
				    end
			    ( <_12> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_12})
			      -| ['compiler_generated'] )
			  end
	  ( <_5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_5})
	    -| ['compiler_generated'] )
	end
'doit'/3 =
    %% Line 377
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <'sort',Input,W> when 'true' ->
	      %% Line 378
	      apply 'files'/5
		  (1, [], 0, W, Input)
	  %% Line 379
	  <'merge',Input,W> when 'true' ->
	      %% Line 380
	      apply 'last_merge'/2
		  (Input, W)
	  %% Line 381
	  <'check',Input,W> when 'true' ->
	      %% Line 382
	      apply 'check_files'/3
		  (Input, W, [])
	  ( <_5,_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4,_3})
		  -| [{'function_name',{'doit',3}}] )
	    -| ['compiler_generated'] )
	end
'wrap_input'/3 =
    %% Line 384
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <'term','check',Files> when 'true' ->
	      let <Fun> =
		  fun (_5) ->
		      let <_3> =
			  apply %% Line 386
				'file_rterms'/2
			      (%% Line 386
			       'no_file', %% Line 386
					  [_5|[]])
		      in  let <Fn> =
			      apply %% Line 386
				    'merge_terms_fun'/1
				  (_3)
			  in  %% Line 387
			      {'fn',Fn,_5}
	      in  let <_14> =
		      apply %% Line 389
			    'binary_term_fun'/0
			  ()
		  in  let <_13> =
			  letrec
			      'lc$^1'/1 =
				  %% Line 389
				  fun (_10) ->
				      case _10 of
					<[F|_9]> when 'true' ->
					    let <_11> =
						apply Fun
						    (F)
					    in  let <_12> =
						    apply 'lc$^1'/1
							(_9)
						in  ( [_11|_12]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_42> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_42})
						-| [{'function_name',{'lc$^1',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  %% Line 389
			      apply 'lc$^1'/1
				  (Files)
		      in  %% Line 389
			  {_14,_13}
	  %% Line 390
	  <Format,'check',Files> when 'true' ->
	      %% Line 391
	      {Format,Files}
	  %% Line 392
	  <'term','merge',Files> when 'true' ->
	      let <Fun> =
		  fun (_16) ->
		      let <_15> =
			  apply %% Line 393
				'file_rterms'/2
			      (%% Line 393
			       'no_file', %% Line 393
					  [_16|[]])
		      in  %% Line 393
			  apply 'merge_terms_fun'/1
			      (_15)
	      in  let <_24> =
		      letrec
			  'lc$^3'/1 =
			      %% Line 394
			      fun (_21) ->
				  case _21 of
				    <[F|_20]> when 'true' ->
					let <_22> =
					    apply Fun
						(F)
					in  let <_23> =
						apply 'lc$^3'/1
						    (_20)
					    in  ( [_22|_23]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_44> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_44})
					    -| [{'function_name',{'lc$^3',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  %% Line 394
			  apply 'lc$^3'/1
			      (Files)
		  in  let <Input> =
			  call %% Line 394
			       'lists':%% Line 394
				       'reverse'
			      (_24)
		      in  let <_26> =
			      apply %% Line 395
				    'binary_term_fun'/0
				  ()
			  in  %% Line 395
			      {_26,Input}
	  %% Line 396
	  <Format,'merge',Files> when 'true' ->
	      let <_32> =
		  letrec
		      'lc$^4'/1 =
			  %% Line 397
			  fun (_29) ->
			      case _29 of
				<[F|_28]> when 'true' ->
				    let <_30> =
					apply 'merge_bins_fun'/1
					    (F)
				    in  let <_31> =
					    apply 'lc$^4'/1
						(_28)
					in  ( [_30|_31]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_45> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_45})
					-| [{'function_name',{'lc$^4',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  %% Line 397
		      apply 'lc$^4'/1
			  (Files)
	      in  let <Input> =
		      call %% Line 397
			   'lists':%% Line 397
				   'reverse'
			  (_32)
		  in  %% Line 398
		      {Format,Input}
	  %% Line 399
	  <'term','sort',InFun>
	      when call 'erlang':'is_function'
		    (InFun,
		     1) ->
	      let <_35> =
		  apply %% Line 400
			'binary_term_fun'/0
		      ()
	      in  let <_34> =
		      apply %% Line 400
			    'fun_rterms'/1
			  (%% Line 400
			   InFun)
		  in  %% Line 400
		      {_35,_34}
	  %% Line 401
	  <'term','sort',Files> when 'true' ->
	      let <_37> =
		  apply %% Line 402
			'binary_term_fun'/0
		      ()
	      in  let <_36> =
		      apply %% Line 402
			    'file_rterms'/2
			  (%% Line 402
			   'no_file', %% Line 402
				      Files)
		  in  %% Line 402
		      {_37,_36}
	  %% Line 403
	  <Format,'sort',Input> when 'true' ->
	      %% Line 404
	      {Format,Input}
	  ( <_40,_39,_38> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_40,_39,_38})
		  -| [{'function_name',{'wrap_input',3}}] )
	    -| ['compiler_generated'] )
	end
'merge_terms_fun'/1 =
    %% Line 406
    fun (_0) ->
	%% Line 407
	( fun (_5) ->
	      case _5 of
		<'close'> when 'true' ->
		    %% Line 408
		    apply _0
			('close')
		%% Line 409
		<{I,[],_X_LSz,W}> when 'true' ->
		    %% Line 410
		    case apply _0
			     ('read') of
		      %% Line 411
		      <'end_of_input'> when 'true' ->
			  %% Line 412
			  'eof'
		      %% Line 413
		      <{Objs,NRFun}>
			  when call 'erlang':'is_function'
				(NRFun,
				 1) ->
			  %% Line 414
			  case apply 'fun_objs'/6
				   (Objs, [], 0, 2147483648, I, W) of
			    <{_8,[],Ts,_9}> when 'true' ->
				let <_3> =
				    apply %% Line 415
					  'merge_terms_fun'/1
					(%% Line 415
					 NRFun)
				in  %% Line 415
				    {{I,Ts,16384},_3}
			    ( <_2> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_2})
			      -| ['compiler_generated'] )
			  end
		      %% Line 416
		      <Error> when 'true' ->
			  %% Line 417
			  apply 'error'/2
			      (Error, W)
		    end
		( <_6> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_6})
			-| [{'function_name',{'-merge_terms_fun/1-fun-0-',1}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-merge_terms_fun/1-fun-0-'}}] )
'merge_bins_fun'/1 =
    %% Line 421
    fun (_0) ->
	%% Line 422
	( fun (_2) ->
	      case _2 of
		<'close'> when 'true' ->
		    %% Line 423
		    'ok'
		%% Line 424
		<A = {_X_I,_X_L,_X_LSz,W}> when 'true' ->
		    let <Fun> =
			apply %% Line 425
			      'read_fun'/3
			    (_0, %% Line 425
				 'user', %% Line 425
					 W)
		    in  %% Line 426
			apply Fun
			    (A)
		( <_3> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_3})
			-| [{'function_name',{'-merge_bins_fun/1-fun-0-',1}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-merge_bins_fun/1-fun-0-'}}] )
'wrap_output_terms'/3 =
    %% Line 429
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <'term',OutFun,_X_Z>
	      when call 'erlang':'is_function'
		    (OutFun,
		     1) ->
	      let <_3> =
		  apply %% Line 430
			'fun_wterms'/1
		      (%% Line 430
		       OutFun)
	      in  %% Line 430
		  {_3,'true'}
	  %% Line 431
	  <'term',File,Z>
	      when call 'erlang':'=/='
		    (File,
		     'undefined') ->
	      let <_4> =
		  call %% Line 432
		       'erlang':%% Line 432
				'++'
		      (%% Line 432
		       Z, %% Line 432
			  ['write'])
	      in  let <_5> =
		      apply %% Line 432
			    'file_wterms'/3
			  (%% Line 432
			   'name', %% Line 432
				   File, _4)
		  in  %% Line 432
		      {_5,'false'}
	  %% Line 433
	  <_X_Format,Output,_X_Z> when 'true' ->
	      let <_6> =
		  call %% Line 434
		       'erlang':%% Line 434
				'is_function'
		      (%% Line 434
		       Output, %% Line 434
			       1)
	      in  %% Line 434
		  {Output,_6}
	end
'binary_term_fun'/0 =
    %% Line 436
    fun () ->
	%% Line 437
	( fun (_0) ->
	      call 'erlang':'binary_to_term'
		  (_0)
	  -| [{'id',{0,0,'-binary_term_fun/0-fun-0-'}}] )
'check_files'/3 =
    %% Line 439
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[],_X_W,L> when 'true' ->
	      let <_3> =
		  call %% Line 440
		       'lists':%% Line 440
			       'reverse'
		      (%% Line 440
		       L)
	      in  %% Line 440
		  {'ok',_3}
	  %% Line 441
	  <[FN|FNs],W,L> when 'true' ->
	      let <_35,_36> =
		  case %% Line 443
		       FN of
		    %% Line 444
		    <{'fn',Fun,File}> when 'true' ->
			%% Line 445
			<Fun,File>
		    %% Line 446
		    <File> when 'true' ->
			let <_4> =
			    apply %% Line 447
				  'read_fun'/3
				(%% Line 447
				 File, %% Line 447
				       'user', %% Line 447
					       W)
			in  <_4,%% Line 447
				File>
		  end
	      in  %% Line 449
		  case W of
		    <{'w',_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33}> when 'true' ->
			let <_10> =
			    call 'erlang':'setelement'
				(5, W, ( _35
					 -| ['compiler_generated'] ))
			in  %% Line 450
			    apply 'check_run'/7
				(( _35
				   -| ['compiler_generated'] ), ( _36
								  -| ['compiler_generated'] ), FNs, _10, L, 2, 'nolast')
		    ( <_34> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','w'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  ( <_14,_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13,_12})
		  -| [{'function_name',{'check_files',3}}] )
	    -| ['compiler_generated'] )
	end
'check_run'/7 =
    %% Line 452
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	%% Line 453
	case apply _0
		 ({{'merge',_5},[],0,_3}) of
	  %% Line 454
	  <{{_X_I,Objs,_X_LSz},IFun1}> when 'true' ->
	      %% Line 455
	      case _3 of
		<{'w',_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42}> when 'true' ->
		    let <_9> =
			call 'erlang':'setelement'
			    (5, _3, IFun1)
		    in  let <_11> =
			    call %% Line 456
				 'lists':%% Line 456
					 'reverse'
				(%% Line 456
				 Objs)
			in  %% Line 456
			    apply 'check_objs0'/8
				(IFun1, _1, _2, _9, _4, _5, _6, _11)
		( <_43> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','w'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 457
	  <'eof'> when 'true' ->
	      %% Line 458
	      case _3 of
		<{'w',_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62}> when 'true' ->
		    let <_14> =
			call 'erlang':'setelement'
			    (5, _3, 'undefined')
		    in  %% Line 459
			apply 'check_files'/3
			    (_2, _14, _4)
		( <_63> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','w'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  ( <_16> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_16})
	    -| ['compiler_generated'] )
	end
'check_objs0'/8 =
    %% Line 462
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <IFun,F,FNs,W,L,I,'nolast',[{T,_X_BT}|Os]> when 'true' ->
	      %% Line 463
	      apply 'check_objs1'/8
		  (IFun, F, FNs, W, L, I, T, Os)
	  %% Line 464
	  <IFun,F,FNs,W,L,I,Last,[]> when 'true' ->
	      %% Line 465
	      apply 'check_run'/7
		  (IFun, F, FNs, W, L, I, Last)
	  %% Line 466
	  <IFun,F,FNs,W,L,I,{'last',Last},Os> when 'true' ->
	      %% Line 467
	      apply 'check_objs1'/8
		  (IFun, F, FNs, W, L, I, Last, Os)
	  ( <_15,_14,_13,_12,_11,_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_15,_14,_13,_12,_11,_10,_9,_8})
		  -| [{'function_name',{'check_objs0',8}}] )
	    -| ['compiler_generated'] )
	end
'check_objs1'/8 =
    %% Line 469
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	%% Line 470
	case _3 of
	  %% Line 471
	  <{'w',_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,'ascending',_28,_29,_30,_31,'true',_32,_33}> when 'true' ->
	      %% Line 472
	      apply 'ucheck_objs'/8
		  (_0, _1, _2, _3, _4, _5, _6, _7)
	  %% Line 473
	  <{'w',_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,'ascending',_45,_46,_47,_48,'false',_49,_50}> when 'true' ->
	      %% Line 474
	      apply 'check_objs'/8
		  (_0, _1, _2, _3, _4, _5, _6, _7)
	  %% Line 475
	  <{'w',_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,'descending',_62,_63,_64,_65,'true',_66,_67}> when 'true' ->
	      %% Line 476
	      apply 'rucheck_objs'/8
		  (_0, _1, _2, _3, _4, _5, _6, _7)
	  %% Line 477
	  <{'w',_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,'descending',_79,_80,_81,_82,'false',_83,_84}> when 'true' ->
	      %% Line 478
	      apply 'rcheck_objs'/8
		  (_0, _1, _2, _3, _4, _5, _6, _7)
	  %% Line 479
	  <{'w',_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,CF,_96,_97,_98,_99,'true',_100,_101}> when 'true' ->
	      %% Line 480
	      apply 'uccheck_objs'/9
		  (_0, _1, _2, _3, _4, _5, _6, _7, CF)
	  %% Line 481
	  <{'w',_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,CF,_113,_114,_115,_116,'false',_117,_118}> when 'true' ->
	      %% Line 482
	      apply 'ccheck_objs'/9
		  (_0, _1, _2, _3, _4, _5, _6, _7, CF)
	  ( <_8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_8})
	    -| ['compiler_generated'] )
	end
'check_objs'/8 =
    %% Line 485
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <IFun,F,FNs,W,L,I,Last,[{T,_X_BT}|Os]>
	      when call 'erlang':'>='
		    (T,
		     Last) ->
	      let <_8> =
		  call %% Line 486
		       'erlang':%% Line 486
				'+'
		      (%% Line 486
		       I, %% Line 486
			  1)
	      in  %% Line 486
		  apply 'check_objs'/8
		      (IFun, F, FNs, W, L, _8, T, Os)
	  %% Line 487
	  <IFun,F,FNs,W,L,I,_X_Last,[{_X_T,BT}|_17]> when 'true' ->
	      %% Line 488
	      apply 'culprit_found'/7
		  (IFun, F, FNs, W, L, I, BT)
	  %% Line 489
	  <IFun,F,FNs,W,L,I,Last,[]> when 'true' ->
	      %% Line 490
	      apply 'check_run'/7
		  (IFun, F, FNs, W, L, I, {'last',Last})
	  ( <_16,_15,_14,_13,_12,_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15,_14,_13,_12,_11,_10,_9})
		  -| [{'function_name',{'check_objs',8}}] )
	    -| ['compiler_generated'] )
	end
'rcheck_objs'/8 =
    %% Line 492
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <IFun,F,FNs,W,L,I,Last,[{T,_X_BT}|Os]>
	      when call 'erlang':'=<'
		    (T,
		     Last) ->
	      let <_8> =
		  call %% Line 493
		       'erlang':%% Line 493
				'+'
		      (%% Line 493
		       I, %% Line 493
			  1)
	      in  %% Line 493
		  apply 'rcheck_objs'/8
		      (IFun, F, FNs, W, L, _8, T, Os)
	  %% Line 494
	  <IFun,F,FNs,W,L,I,_X_Last,[{_X_T,BT}|_17]> when 'true' ->
	      %% Line 495
	      apply 'culprit_found'/7
		  (IFun, F, FNs, W, L, I, BT)
	  %% Line 496
	  <IFun,F,FNs,W,L,I,Last,[]> when 'true' ->
	      %% Line 497
	      apply 'check_run'/7
		  (IFun, F, FNs, W, L, I, {'last',Last})
	  ( <_16,_15,_14,_13,_12,_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15,_14,_13,_12,_11,_10,_9})
		  -| [{'function_name',{'rcheck_objs',8}}] )
	    -| ['compiler_generated'] )
	end
'ucheck_objs'/8 =
    %% Line 499
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <IFun,F,FNs,W,L,I,LT,[{T,_X_BT}|Os]>
	      when call 'erlang':'>'
		    (T,
		     LT) ->
	      let <_8> =
		  call %% Line 500
		       'erlang':%% Line 500
				'+'
		      (%% Line 500
		       I, %% Line 500
			  1)
	      in  %% Line 500
		  apply 'ucheck_objs'/8
		      (IFun, F, FNs, W, L, _8, T, Os)
	  %% Line 501
	  <IFun,F,FNs,W,L,I,_X_LT,[{_X_T,BT}|_17]> when 'true' ->
	      %% Line 502
	      apply 'culprit_found'/7
		  (IFun, F, FNs, W, L, I, BT)
	  %% Line 503
	  <IFun,F,FNs,W,L,I,LT,[]> when 'true' ->
	      %% Line 504
	      apply 'check_run'/7
		  (IFun, F, FNs, W, L, I, {'last',LT})
	  ( <_16,_15,_14,_13,_12,_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15,_14,_13,_12,_11,_10,_9})
		  -| [{'function_name',{'ucheck_objs',8}}] )
	    -| ['compiler_generated'] )
	end
'rucheck_objs'/8 =
    %% Line 506
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <IFun,F,FNs,W,L,I,LT,[{T,_X_BT}|Os]>
	      when call 'erlang':'<'
		    (T,
		     LT) ->
	      let <_8> =
		  call %% Line 507
		       'erlang':%% Line 507
				'+'
		      (%% Line 507
		       I, %% Line 507
			  1)
	      in  %% Line 507
		  apply 'rucheck_objs'/8
		      (IFun, F, FNs, W, L, _8, T, Os)
	  %% Line 508
	  <IFun,F,FNs,W,L,I,_X_LT,[{_X_T,BT}|_17]> when 'true' ->
	      %% Line 509
	      apply 'culprit_found'/7
		  (IFun, F, FNs, W, L, I, BT)
	  %% Line 510
	  <IFun,F,FNs,W,L,I,LT,[]> when 'true' ->
	      %% Line 511
	      apply 'check_run'/7
		  (IFun, F, FNs, W, L, I, {'last',LT})
	  ( <_16,_15,_14,_13,_12,_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15,_14,_13,_12,_11,_10,_9})
		  -| [{'function_name',{'rucheck_objs',8}}] )
	    -| ['compiler_generated'] )
	end
'ccheck_objs'/9 =
    %% Line 513
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <IFun,F,FNs,W,L,I,LT,[{T,BT}|Os],CF> when 'true' ->
	      %% Line 514
	      case apply CF
		       (LT, T) of
		%% Line 515
		<'true'> when 'true' ->
		    let <_9> =
			call %% Line 516
			     'erlang':%% Line 516
				      '+'
			    (%% Line 516
			     I, %% Line 516
				1)
		    in  %% Line 516
			apply 'ccheck_objs'/9
			    (IFun, F, FNs, W, L, _9, T, Os, CF)
		%% Line 517
		<'false'> when 'true' ->
		    %% Line 518
		    apply 'culprit_found'/7
			(IFun, F, FNs, W, L, I, BT)
		( <_10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 520
	  <IFun,F,FNs,W,L,I,LT,[],_X_CF> when 'true' ->
	      %% Line 521
	      apply 'check_run'/7
		  (IFun, F, FNs, W, L, I, {'last',LT})
	  ( <_19,_18,_17,_16,_15,_14,_13,_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_19,_18,_17,_16,_15,_14,_13,_12,_11})
		  -| [{'function_name',{'ccheck_objs',9}}] )
	    -| ['compiler_generated'] )
	end
'uccheck_objs'/9 =
    %% Line 523
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <IFun,F,FNs,W,L,I,LT,[{T,BT}|Os],CF> when 'true' ->
	      %% Line 524
	      case apply CF
		       (LT, T) of
		%% Line 525
		<'true'> when 'true' ->
		    %% Line 526
		    case apply CF
			     (T, LT) of
		      %% Line 527
		      <'true'> when 'true' ->
			  %% Line 528
			  apply 'culprit_found'/7
			      (IFun, F, FNs, W, L, I, BT)
		      %% Line 529
		      <'false'> when 'true' ->
			  let <_9> =
			      call %% Line 530
				   'erlang':%% Line 530
					    '+'
				  (%% Line 530
				   I, %% Line 530
				      1)
			  in  %% Line 530
			      apply 'uccheck_objs'/9
				  (IFun, F, FNs, W, L, _9, T, Os, CF)
		      ( <_10> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_10})
			-| ['compiler_generated'] )
		    end
		%% Line 532
		<'false'> when 'true' ->
		    %% Line 533
		    apply 'culprit_found'/7
			(IFun, F, FNs, W, L, I, BT)
		( <_11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 535
	  <IFun,F,FNs,W,L,I,LT,[],_X_CF> when 'true' ->
	      %% Line 536
	      apply 'check_run'/7
		  (IFun, F, FNs, W, L, I, {'last',LT})
	  ( <_20,_19,_18,_17,_16,_15,_14,_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_20,_19,_18,_17,_16,_15,_14,_13,_12})
		  -| [{'function_name',{'uccheck_objs',9}}] )
	    -| ['compiler_generated'] )
	end
'culprit_found'/7 =
    %% Line 538
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <IFun,F,FNs,W,L,I,[_X_Size|BT]> when 'true' ->
	      do  %% Line 539
		  apply IFun
		      ('close')
		  let <_7> =
		      call %% Line 540
			   'erlang':%% Line 540
				    'binary_to_term'
			  (%% Line 540
			   BT)
		  in  %% Line 540
		      apply 'check_files'/3
			  (FNs, W, [{F,I,_7}|L])
	  ( <_14,_13,_12,_11,_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13,_12,_11,_10,_9,_8})
		  -| [{'function_name',{'culprit_found',7}}] )
	    -| ['compiler_generated'] )
	end
'files'/5 =
    %% Line 542
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <_X_I,L,_X_LSz,W = {'w',_29,_30,1,_31,Out,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45},[]> when 'true' ->
	      %% Line 544
	      case Out of
		%% Line 545
		<Fun>
		    when call 'erlang':'is_function'
			  (Out) ->
		    let <SL> =
			apply %% Line 546
			      'internal_sort'/2
			    (%% Line 546
			     L, %% Line 546
				W)
		    in  let <_6> =
			    apply %% Line 547
				  'binterm_objects'/2
				(%% Line 547
				 SL, %% Line 547
				     [])
			in  let <W1> =
				apply %% Line 547
				      'outfun'/2
				    (_6, %% Line 547
					 W)
			    in  let <NW> =
				    apply %% Line 548
					  'close_input'/1
					(%% Line 548
					 W1)
				in  %% Line 549
				    apply 'outfun'/2
					('close', NW)
		%% Line 550
		<_46> when 'true' ->
		    do  %% Line 551
			apply 'write_run'/3
			    (L, W, Out)
			%% Line 552
			'ok'
	      end
	  %% Line 554
	  <_X_I,L,_X_LSz,W,[]> when 'true' ->
	      let <W1> =
		  apply %% Line 555
			'write_run'/2
		      (%% Line 555
		       L, %% Line 555
			  W)
	      in  %% Line 556
		  ( case W1 of
		      ( <( {'w',_47,_rec18,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_14> =
				call 'lists':'append'
				    (_rec18)
			    in  apply 'last_merge'/2
				    (_14, W1)
			-| ['compiler_generated'] )
		      ( <_65> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','w'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 557
	  <I,L,LSz,W,Fun>
	      when call 'erlang':'is_function'
		    (Fun) ->
	      %% Line 558
	      case W of
		<{'w',_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84}> when 'true' ->
		    let <_17> =
			call 'erlang':'setelement'
			    (5, W, Fun)
		    in  %% Line 559
			apply 'fun_run'/5
			    (I, L, LSz, _17, [])
		( <_85> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','w'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 560
	  <I,L,LSz,W,[FileName|FileNames]> when 'true' ->
	      let <InFun> =
		  apply %% Line 561
			'read_fun'/3
		      (%% Line 561
		       FileName, %% Line 561
				 'user', %% Line 561
					 W)
	      in  %% Line 562
		  case W of
		    <{'w',_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104}> when 'true' ->
			let <_22> =
			    call 'erlang':'setelement'
				(5, W, InFun)
			in  %% Line 563
			    apply 'file_run'/6
				(InFun, FileNames, I, L, LSz, _22)
		    ( <_105> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','w'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  ( <_28,_27,_26,_25,_24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_28,_27,_26,_25,_24})
		  -| [{'function_name',{'files',5}}] )
	    -| ['compiler_generated'] )
	end
'file_run'/6 =
    %% Line 565
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <InFun,FileNames,I,L,LSz,W = {'w',_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46}>
	      when ( try
		      let <_10> =
			  call 'erlang':'element'
			      (11, W)
		      in  call 'erlang':'<'
			      (LSz, _10)
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 566
	      case apply InFun
		       ({I,L,LSz,W}) of
		%% Line 567
		<{{I1,L1,LSz1},InFun1}> when 'true' ->
		    %% Line 568
		    case W of
		      <{'w',_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65}> when 'true' ->
			  let <_14> =
			      call 'erlang':'setelement'
				  (5, W, InFun1)
			  in  %% Line 569
			      apply 'file_run'/6
				  (InFun1, FileNames, I1, L1, LSz1, _14)
		      ( <_66> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','w'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 570
		<'eof'> when 'true' ->
		    %% Line 571
		    case W of
		      <{'w',_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85}> when 'true' ->
			  let <_18> =
			      call 'erlang':'setelement'
				  (5, W, 'undefined')
			  in  %% Line 572
			      apply 'files'/5
				  (I, L, LSz, _18, FileNames)
		      ( <_86> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','w'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		( <_20> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_20})
		  -| ['compiler_generated'] )
	      end
	  %% Line 574
	  <InFun,FileNames,I,L,_X_LSz,W> when 'true' ->
	      let <NW> =
		  apply %% Line 575
			'write_run'/2
		      (%% Line 575
		       L, %% Line 575
			  W)
	      in  %% Line 576
		  apply 'file_run'/6
		      (InFun, FileNames, I, [], 0, NW)
	end
'fun_run'/5 =
    %% Line 578
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <I,L,LSz,W,[]> when 'true' ->
	      %% Line 579
	      case apply 'infun'/1
		       (W) of
		%% Line 580
		<{'end_of_input',NW}> when 'true' ->
		    %% Line 581
		    apply 'files'/5
			(I, L, LSz, NW, [])
		%% Line 582
		<{'cont',NW,Objs}> when 'true' ->
		    %% Line 583
		    apply 'fun_run'/5
			(I, L, LSz, NW, Objs)
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 585
	  <I,L,LSz,W = {'w',_13,_14,_15,_16,_17,_18,_19,_20,_21,Runsize,_22,_23,_24,_25,_26,_27,_28,_29,_30},Objs>
	      when call 'erlang':'<'
		    (LSz,
		     Runsize) ->
	      %% Line 586
	      case apply 'fun_objs'/6
		       (Objs, L, LSz, Runsize, I, W) of
		<{NI,NObjs,NL,NLSz}> when 'true' ->
		    %% Line 587
		    apply 'fun_run'/5
			(NI, NL, NLSz, W, NObjs)
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 588
	  <I,L,_X_LSz,W,Objs> when 'true' ->
	      let <NW> =
		  apply %% Line 589
			'write_run'/2
		      (%% Line 589
		       L, %% Line 589
			  W)
	      in  %% Line 590
		  apply 'fun_run'/5
		      (I, [], 0, NW, Objs)
	end
'write_run'/2 =
    %% Line 592
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],W> when 'true' ->
	      %% Line 593
	      W
	  %% Line 594
	  <L,W> when 'true' ->
	      %% Line 595
	      case apply 'next_temp'/1
		       (W) of
		<{W1,Temp}> when 'true' ->
		    let <NW> =
			apply %% Line 596
			      'write_run'/3
			    (%% Line 596
			     L, %% Line 596
				W1, %% Line 596
				    Temp)
		    in  %% Line 597
			( case NW of
			    ( <( {'w',_9,_rec23,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26}
				 -| ['compiler_generated'] )> when 'true' ->
				  case _rec23 of
				    <[R|Rs]> when 'true' ->
					%% Line 598
					apply 'merge_runs'/3
					    ([[Temp|R]|Rs], [], NW)
				    ( <_6> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_6})
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_27> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','w'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	end
'write_run'/3 =
    %% Line 600
    fun (_0,_1,_2) ->
	let <SL> =
	    apply %% Line 601
		  'internal_sort'/2
		(_0, _1)
	in  let <BTs> =
		apply %% Line 602
		      'binterms'/2
		    (%% Line 602
		     SL, %% Line 602
			 [])
	    in  %% Line 603
		case apply 'open_file'/2
			 (_2, _1) of
		  <{Fd,W1}> when 'true' ->
		      do  %% Line 604
			  apply 'write'/4
			      (Fd, _2, BTs, W1)
			  %% Line 605
			  apply 'close_file'/2
			      (Fd, W1)
		  ( <_5> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_5})
		    -| ['compiler_generated'] )
		end
'internal_sort'/2 =
    %% Line 608
    fun (_0,_1) ->
	case <_0,_1> of
	  <L = [],_X_W> when 'true' ->
	      %% Line 609
	      L
	  %% Line 610
	  <L,{'w',_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,CFun,_28,_29,_30,_31,Unique,_32,_33}>
	      when call 'erlang':'is_function'
		    (CFun) ->
	      let <Fun> =
		  fun (_3,_2) ->
		      %% Line 611
		      case <_3,_2> of
			<{T1,_34},{T2,_35}> when 'true' ->
			    apply CFun
				(T1, T2)
			( <_5,_4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_5,_4})
				-| [{'function_name',{'-internal_sort/2-fun-0-',2}}] )
			  -| ['compiler_generated'] )
		      end
	      in  let <RL> =
		      call %% Line 612
			   'lists':%% Line 612
				   'reverse'
			  (%% Line 612
			   L)
		  in  let <_8> =
			  case <> of
			    %% Line 614
			    <>
				when ( call 'erlang':'=:='
					(Unique,
					 'true')
				    -| ['compiler_generated'] ) ->
				%% Line 615
				call 'lists':'usort'
				    (Fun, RL)
			    %% Line 616
			    <> when 'true' ->
				%% Line 617
				call 'lists':'sort'
				    (Fun, RL)
			  end
		      in  %% Line 613
			  call 'lists':'reverse'
			      (_8)
	  %% Line 619
	  <L,W = {'w',0,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,'true',_51,_52}> when 'true' ->
	      let <_9> =
		  call %% Line 620
		       'lists':%% Line 620
			       'usort'
		      (%% Line 620
		       L)
	      in  %% Line 620
		  apply 'rev'/2
		      (_9, W)
	  %% Line 621
	  <L,W = {'w',0,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,'false',_68,_69}> when 'true' ->
	      let <_10> =
		  call %% Line 622
		       'lists':%% Line 622
			       'sort'
		      (%% Line 622
		       L)
	      in  %% Line 622
		  apply 'rev'/2
		      (_10, W)
	  %% Line 623
	  <L,W = {'w',_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,'true',_86,_87}> when 'true' ->
	      let <_11> =
		  call %% Line 624
		       'lists':%% Line 624
			       'reverse'
		      (%% Line 624
		       L)
	      in  let <_12> =
		      call %% Line 624
			   'lists':%% Line 624
				   'ukeysort'
			  (%% Line 624
			   1, _11)
		  in  %% Line 624
		      apply 'rev'/2
			  (_12, W)
	  %% Line 625
	  <L,W = {'w',_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,'false',_104,_105}> when 'true' ->
	      let <_13> =
		  call %% Line 626
		       'lists':%% Line 626
			       'reverse'
		      (%% Line 626
		       L)
	      in  let <_14> =
		      call %% Line 626
			   'lists':%% Line 626
				   'keysort'
			  (%% Line 626
			   1, _13)
		  in  %% Line 626
		      apply 'rev'/2
			  (_14, W)
	  ( <_16,_15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15})
		  -| [{'function_name',{'internal_sort',2}}] )
	    -| ['compiler_generated'] )
	end
'rev'/2 =
    %% Line 628
    fun (_0,_1) ->
	case <_0,_1> of
	  <L,{'w',_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,'ascending',_15,_16,_17,_18,_19,_20,_21}> when 'true' ->
	      %% Line 629
	      call 'lists':'reverse'
		  (L)
	  %% Line 630
	  <L,{'w',_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,'descending',_33,_34,_35,_36,_37,_38,_39}> when 'true' ->
	      %% Line 631
	      L
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'rev',2}}] )
	    -| ['compiler_generated'] )
	end
'last_merge'/2 =
    %% Line 633
    fun (_0,_1) ->
	case <_0,_1> of
	  <R,W = {'w',_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44}>
	      when ( try
		      let <_7> =
			  call 'erlang':'length'
			      (R)
		      in  let <_6> =
			      call 'erlang':'element'
				  (12, W)
			  in  call 'erlang':'=<'
				  (_7, _6)
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 634
	      ( case W of
		  ( <( {'w',_45,_46,_47,_48,_rec24,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec24 of
			  %% Line 635
			  <Fun>
			      when call 'erlang':'is_function'
				    (_rec24) ->
			      let <_11> =
				  call %% Line 636
				       'lists':%% Line 636
					       'reverse'
				      (%% Line 636
				       R)
			      in  %% Line 636
				  case apply 'init_merge'/4
					   (_11, 1, [], W) of
				    <{Fs,W1}> when 'true' ->
					let <W2> =
					    apply %% Line 638
						  'merge_files'/5
						(%% Line 638
						 Fs, %% Line 638
						     [], %% Line 638
							 0, %% Line 638
							    'nolast', %% Line 638
								      W1)
					in  let <NW> =
						apply %% Line 639
						      'close_input'/1
						    (%% Line 639
						     W2)
					    in  %% Line 640
						apply 'outfun'/2
						    ('close', NW)
				    ( <_12> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_12})
				      -| ['compiler_generated'] )
				  end
			  %% Line 641
			  <Out> when 'true' ->
			      do  %% Line 642
				  apply 'merge_files'/3
				      (R, W, Out)
				  %% Line 643
				  'ok'
			end
		    -| ['compiler_generated'] )
		  ( <_63> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','w'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 645
	  <R,W> when 'true' ->
	      %% Line 646
	      ( case W of
		  ( <( {'w',_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_rec25,_74,_75,_76,_77,_78,_79,_80,_81}
		       -| ['compiler_generated'] )> when 'true' ->
			let <L> =
			    call 'lists':'sublist'
				(R, _rec25)
			in  %% Line 647
			    case apply 'merge_files'/2
				     (L, W) of
			      <{M,NW}> when 'true' ->
				  %% Line 648
				  ( case W of
				      ( <( {'w',_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_rec26,_93,_94,_95,_96,_97,_98,_99,_100}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_23> =
						call 'lists':'nthtail'
						    (_rec26, R)
					    in  apply 'last_merge'/2
						    ([M|_23], NW)
					-| ['compiler_generated'] )
				      ( <_101> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','w'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      ( <_20> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_20})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_82> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','w'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'merge_runs'/3 =
    %% Line 650
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <_@r0 = [R|Rs],NRs0,W = {'w',_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41}>
	      when ( try
		      let <_8> =
			  call 'erlang':'length'
			      (R)
		      in  let <_7> =
			      call 'erlang':'element'
				  (12, W)
			  in  call 'erlang':'<'
				  (_8, _7)
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      let <_10> =
		  call %% Line 651
		       'lists':%% Line 651
			       'reverse'
		      (%% Line 651
		       NRs0)
	      in  let <NRs> =
		      call %% Line 651
			   'erlang':%% Line 651
				    '++'
			  (_10, %% Line 651
				_@r0)
		  in  %% Line 652
		      case W of
			<{'w',_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60}> when 'true' ->
			    call 'erlang':'setelement'
				(3, W, NRs)
			( <_61> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','w'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 653
	  <[R|[]],NRs0,W> when 'true' ->
	      %% Line 654
	      case apply 'merge_files'/2
		       (R, W) of
		<{M,NW}> when 'true' ->
		    let <_15> =
			call %% Line 655
			     'lists':%% Line 655
				     'reverse'
			    (%% Line 655
			     [[M|[]]|NRs0])
		    in  let <NRs> =
			    [%% Line 655
			     []|_15]
			in  %% Line 656
			    case NW of
			      <{'w',_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80}> when 'true' ->
				  call 'erlang':'setelement'
				      (3, NW, NRs)
			      ( <_81> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','w'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
		( <_14> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 657
	  <[R|[R1|Rs]],NRs0,W> when 'true' ->
	      %% Line 658
	      case apply 'merge_files'/2
		       (R, W) of
		<{M,NW}> when 'true' ->
		    %% Line 659
		    apply 'merge_runs'/3
			([[M|R1]|Rs], [[]|NRs0], NW)
		( <_19> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_19})
		  -| ['compiler_generated'] )
	      end
	  ( <_22,_21,_20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_22,_21,_20})
		  -| [{'function_name',{'merge_runs',3}}] )
	    -| ['compiler_generated'] )
	end
'merge_files'/2 =
    %% Line 661
    fun (_0,_1) ->
	%% Line 662
	case apply 'next_temp'/1
		 (_1) of
	  <{W1,Temp}> when 'true' ->
	      let <_3> =
		  apply %% Line 664
			'merge_files'/3
		      (_0, %% Line 664
			   W1, %% Line 664
			       Temp)
	      in  %% Line 664
		  {Temp,_3}
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_2})
	    -| ['compiler_generated'] )
	end
'merge_files'/3 =
    %% Line 666
    fun (_0,_1,_2) ->
	let <_3> =
	    call %% Line 667
		 'lists':%% Line 667
			 'reverse'
		(_0)
	in  %% Line 667
	    case apply 'init_merge'/4
		     (_3, 1, [], _1) of
	      <{Fs,W1}> when 'true' ->
		  %% Line 668
		  case apply 'open_file'/2
			   (_2, W1) of
		    <{Fd,W2}> when 'true' ->
			let <_rec29> = {%% Line 669
			     Fd,_2}
			in  %% Line 669
			    case W2 of
			      <{'w',_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37}> when 'true' ->
				  let <_9> =
				      call 'erlang':'setelement'
					  (15, W2, _rec29)
				  in  let <W4> =
					  apply %% Line 670
						'merge_files'/5
					      (%% Line 670
					       Fs, %% Line 670
						   [], %% Line 670
						       0, %% Line 670
							  'nolast', _9)
				      in  %% Line 671
					  case W4 of
					    <{'w',_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57}> when 'true' ->
						let <_14> =
						    call 'erlang':'setelement'
							(15, W4, 'undefined')
						in  %% Line 672
						    apply 'close_file'/2
							(Fd, _14)
					    ( <_58> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','w'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
			      ( <_38> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','w'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5})
		      -| ['compiler_generated'] )
		  end
	      ( <_4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_4})
		-| ['compiler_generated'] )
	    end
'init_merge'/4 =
    %% Line 675
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[FN|FNs],I,Fs,W> when 'true' ->
	      let <_5> =
		  case %% Line 676
		       FN of
		    %% Line 677
		    <_31>
			when call 'erlang':'is_function'
			      (FN) ->
			%% Line 679
			FN
		    %% Line 680
		    <_32> when 'true' ->
			%% Line 681
			apply 'read_fun'/3
			    (FN, 'fsort', W)
		  end
	      in  %% Line 683
		  ( case W of
		      ( <( {'w',_33,_34,_35,_36,_37,_38,_39,_rec34,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_9> =
				call 'lists':'delete'
				    (FN, _rec34)
			    in  let <_rec32> =
				    [_5|_9]
				in  case W of
				      <{'w',_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70}> when 'true' ->
					  let <_13> =
					      call 'erlang':'setelement'
						  (9, W, _rec32)
					  in  %% Line 684
					      case apply 'read_more'/4
						       (_5, I, 0, _13) of
						%% Line 685
						<{Ts,_X_LSz,NIFun,NW}> when 'true' ->
						    let <InEtc> = {%% Line 686
							 I,%% Line 686
							   NIFun}
						    in  let <_16> =
							    call %% Line 687
								 'erlang':%% Line 687
									  '+'
								(%% Line 687
								 I, %% Line 687
								    1)
							in  %% Line 687
							    apply 'init_merge'/4
								(FNs, _16, [[Ts|InEtc]|Fs], NW)
						%% Line 688
						<{'eof',NW}> when 'true' ->
						    let <_17> =
							call %% Line 689
							     'erlang':%% Line 689
								      '+'
							    (%% Line 689
							     I, %% Line 689
								1)
						    in  %% Line 689
							apply 'init_merge'/4
							    (FNs, _17, Fs, NW)
						( <_18> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_18})
						  -| ['compiler_generated'] )
					      end
				      ( <_71> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','w'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
			-| ['compiler_generated'] )
		      ( <_51> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','w'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 691
	  <[],_X_I,Fs0,W = {'w',_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,'ascending',_83,_84,_85,_86,_87,_88,_89}> when 'true' ->
	      let <_19> =
		  call %% Line 692
		       'lists':%% Line 692
			       'sort'
		      (%% Line 692
		       Fs0)
	      in  %% Line 692
		  {_19,W}
	  %% Line 693
	  <[],_X_I,Fs0,W = {'w',_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,'descending',_101,_102,_103,_104,_105,_106,_107}> when 'true' ->
	      let <_20> =
		  call %% Line 694
		       'lists':%% Line 694
			       'sort'
		      (%% Line 694
		       Fs0)
	      in  let <_21> =
		      call %% Line 694
			   'lists':%% Line 694
				   'reverse'
			  (_20)
		  in  %% Line 694
		      {_21,W}
	  %% Line 695
	  <[],_X_I,Fs0,W = {'w',_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,Order,_119,_120,_121,_122,_123,_124,_125}>
	      when call 'erlang':'is_function'
		    (Order) ->
	      %% Line 696
	      ( case W of
		  ( <( {'w',_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_rec35,_137,_138,_139,_140,_141,_142,_143}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_25> =
			    apply 'cfun_files'/1
				(_rec35)
			in  let <_22> =
				call 'lists':'reverse'
				    (Fs0)
			    in  let <_26> =
				    call 'lists':'sort'
					(_25, _22)
				in  {_26,W}
		    -| ['compiler_generated'] )
		  ( <_144> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','w'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_30,_29,_28,_27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_30,_29,_28,_27})
		  -| [{'function_name',{'init_merge',4}}] )
	    -| ['compiler_generated'] )
	end
'cfun_files'/1 =
    %% Line 698
    fun (_0) ->
	%% Line 699
	( fun (_4,_3) ->
	      %% Line 700
	      case _4 of
		<[[{T1,_8}|_9]|_10]> when 'true' ->
		    %% Line 701
		    case _3 of
		      <[[{T2,_11}|_12]|_13]> when 'true' ->
			  %% Line 702
			  apply _0
			      (T1, T2)
		      ( <_2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_2})
			-| ['compiler_generated'] )
		    end
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_1})
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-cfun_files/1-fun-0-'}}] )
'merge_files'/5 =
    %% Line 711
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <[F1|[F2|Fs]],L0,LSz,Last0,W>
	      when call 'erlang':'<'
		    (LSz,
		     16384) ->
	      %% Line 712
	      case F1 of
		<[Ts0|InEtc]> when 'true' ->
		    let <Kind> =
			apply %% Line 713
			      'merge_kind'/1
			    (%% Line 713
			     W)
		    in  let <_39,_40,_41> =
			    case %% Line 714
				 <Last0,Kind> of
			      %% Line 715
			      <( {( 'last'
				    -| ['compiler_generated'] ),Lst}
				 -| ['compiler_generated'] ),_32>
				  when call 'erlang':'=:='
					(_32,
					 Kind) ->
				  %% Line 716
				  <Lst,L0,Ts0>
			      %% Line 717
			      <( 'nolast'
				 -| ['compiler_generated'] ),( {( 'ukmerge'
								  -| ['compiler_generated'] ),_X_Kp}
							       -| ['compiler_generated'] )> when 'true' ->
				  %% Line 718
				  case Ts0 of
				    <[{[T|_X_I],BT}|Ts1]> when 'true' ->
					%% Line 719
					<T,[BT|[]],Ts1>
				    ( <_7> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_7})
				      -| ['compiler_generated'] )
				  end
			      %% Line 720
			      <( 'nolast'
				 -| ['compiler_generated'] ),( {( 'rukmerge'
								  -| ['compiler_generated'] ),_X_Kp}
							       -| ['compiler_generated'] )> when 'true' ->
				  %% Line 721
				  case Ts0 of
				    <[{[T|_X_I],BT}|Ts1]> when 'true' ->
					%% Line 722
					<{T,BT},[],Ts1>
				    ( <_8> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_8})
				      -| ['compiler_generated'] )
				  end
			      %% Line 723
			      <( 'nolast'
				 -| ['compiler_generated'] ),_33> when 'true' ->
				  %% Line 724
				  case Ts0 of
				    <[{T,BT}|Ts1]> when 'true' ->
					%% Line 725
					<T,[BT|[]],Ts1>
				    ( <_9> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_9})
				      -| ['compiler_generated'] )
				  end
			      ( <( _42
				   -| ['compiler_generated'] ),( _43
								 -| ['compiler_generated'] )> when 'true' ->
				    %% Line 714
				    let <_10> = {( _42
					   -| ['compiler_generated'] ),( _43
									 -| ['compiler_generated'] )}
				    in  primop 'match_fail'
					    ({'case_clause',_10})
				-| ['compiler_generated'] )
			    end
			in  %% Line 727
			    case F2 of
			      <[Ts2 = [{T2,BT2}|Ts2T]|InEtc2]> when 'true' ->
				  let <_20> =
				      case %% Line 729
					   Kind of
					%% Line 730
					<'umerge'> when 'true' ->
					    %% Line 731
					    apply 'umerge_files'/9
						(( _40
						   -| ['compiler_generated'] ), F2, Fs, InEtc2, Ts2, ( _41
												       -| ['compiler_generated'] ), InEtc, T2, ( _39
																		 -| ['compiler_generated'] ))
					%% Line 732
					<{'ukmerge',Kp}> when 'true' ->
					    %% Line 733
					    apply 'ukmerge_files'/10
						(( _40
						   -| ['compiler_generated'] ), F2, Fs, InEtc2, Ts2, ( _41
												       -| ['compiler_generated'] ), InEtc, T2, Kp, ( _39
																		     -| ['compiler_generated'] ))
					%% Line 734
					<'merge'> when 'true' ->
					    %% Line 735
					    apply 'merge_files'/9
						(( _40
						   -| ['compiler_generated'] ), F2, Fs, InEtc2, BT2, Ts2T, ( _41
													     -| ['compiler_generated'] ), InEtc, T2)
					%% Line 736
					<'rumerge'> when 'true' ->
					    %% Line 737
					    apply 'rumerge_files'/9
						(( _40
						   -| ['compiler_generated'] ), F2, Fs, InEtc2, Ts2, ( _41
												       -| ['compiler_generated'] ), InEtc, T2, ( _39
																		 -| ['compiler_generated'] ))
					%% Line 738
					<{'rukmerge',Kp}> when 'true' ->
					    %% Line 739
					    case ( _39
						   -| ['compiler_generated'] ) of
					      <{Lt,LtBT}> when 'true' ->
						  %% Line 740
						  apply 'rukmerge_files'/11
						      (( _40
							 -| ['compiler_generated'] ), F2, Fs, InEtc2, Ts2, ( _41
													     -| ['compiler_generated'] ), InEtc, T2, Kp, %% Line 741
																			 Lt, %% Line 741
																			     LtBT)
					      ( <_14> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_14})
						-| ['compiler_generated'] )
					    end
					%% Line 742
					<'rmerge'> when 'true' ->
					    %% Line 743
					    apply 'rmerge_files'/9
						(( _40
						   -| ['compiler_generated'] ), F2, Fs, InEtc2, BT2, Ts2T, ( _41
													     -| ['compiler_generated'] ), InEtc, T2)
					%% Line 744
					<{'ucmerge',CF}> when 'true' ->
					    %% Line 745
					    case InEtc2 of
					      <{I2,_34}> when 'true' ->
						  %% Line 746
						  case InEtc of
						    <{I,_35}> when 'true' ->
							%% Line 747
							apply 'ucmerge_files'/12
							    (( _40
							       -| ['compiler_generated'] ), F2, Fs, InEtc2, Ts2, I2, ( _41
														       -| ['compiler_generated'] ), I, InEtc, T2, CF, ( _39
																					-| ['compiler_generated'] ))
						    ( <_16> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_16})
						      -| ['compiler_generated'] )
						  end
					      ( <_15> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_15})
						-| ['compiler_generated'] )
					    end
					%% Line 749
					<{'cmerge',CF}> when 'true' ->
					    %% Line 750
					    case InEtc2 of
					      <{I2,_36}> when 'true' ->
						  %% Line 751
						  case InEtc of
						    <{I,_37}> when 'true' ->
							%% Line 752
							apply 'cmerge_files'/12
							    (( _40
							       -| ['compiler_generated'] ), F2, Fs, InEtc2, BT2, Ts2T, I2, ( _41
															     -| ['compiler_generated'] ), I, InEtc, T2, %% Line 753
																					CF)
						    ( <_18> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_18})
						      -| ['compiler_generated'] )
						  end
					      ( <_17> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_17})
						-| ['compiler_generated'] )
					    end
					( <_19> when 'true' ->
					      %% Line 729
					      primop 'match_fail'
						  ({'case_clause',_19})
					  -| ['compiler_generated'] )
				      end
				  in  %% Line 728
				      case _20 of
					<{NInEtc,NFs,NL,NLast}> when 'true' ->
					    %% Line 755
					    apply 'read_chunk'/6
						(NInEtc, NFs, NL, LSz, NLast, W)
					( <_21> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_21})
					  -| ['compiler_generated'] )
				      end
			      ( <_13> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_13})
				-| ['compiler_generated'] )
			    end
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 756
	  <[F1|[]],L,LSz,Last,W>
	      when call 'erlang':'<'
		    (LSz,
		     16384) ->
	      %% Line 757
	      case F1 of
		<[Ts|InEtc]> when 'true' ->
		    let <_23> =
			apply %% Line 758
			      'merge_kind'/1
			    (%% Line 758
			     W)
		    in  let <NL> =
			    apply %% Line 758
				  'last_file'/5
				(%% Line 758
				 Ts, %% Line 758
				     L, %% Line 758
					Last, _23, %% Line 758
						   W)
			in  %% Line 759
			    apply 'read_chunk'/6
				(InEtc, [], NL, LSz, 'nolast', W)
		( <_22> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_22})
		  -| ['compiler_generated'] )
	      end
	  %% Line 760
	  <[],[],0,'nolast',W> when 'true' ->
	      %% Line 763
	      apply 'merge_write'/2
		  (W, [])
	  %% Line 764
	  <[],L,_X_LSz,Last,W> when 'true' ->
	      %% Line 765
	      case <> of
		<>
		    when call 'erlang':'=:='
			  (( 'nolast'
			     -| ['compiler_generated'] ),
			   Last) ->
		    %% Line 766
		    apply 'merge_write'/2
			(W, L)
		( <> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch','nolast'})
		  -| ['compiler_generated'] )
	      end
	  %% Line 767
	  <Fs,L,_X_LSz,Last,W> when 'true' ->
	      let <NW> =
		  apply %% Line 768
			'merge_write'/2
		      (%% Line 768
		       W, %% Line 768
			  L)
	      in  %% Line 769
		  apply 'merge_files'/5
		      (Fs, [], 0, Last, NW)
	end
'merge_kind'/1 =
    %% Line 771
    fun (_0) ->
	case _0 of
	  <{'w',0,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,'ascending',_12,_13,_14,_15,'true',_16,_17}> when 'true' ->
	      %% Line 772
	      'umerge'
	  %% Line 773
	  <{'w',Kp,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,'ascending',_28,_29,_30,_31,'true',_32,_33}> when 'true' ->
	      %% Line 774
	      {'ukmerge',Kp}
	  %% Line 775
	  <{'w',_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,'ascending',_45,_46,_47,_48,'false',_49,_50}> when 'true' ->
	      %% Line 776
	      'merge'
	  %% Line 777
	  <{'w',0,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,'descending',_61,_62,_63,_64,'true',_65,_66}> when 'true' ->
	      %% Line 778
	      'rumerge'
	  %% Line 779
	  <{'w',Kp,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,'descending',_77,_78,_79,_80,'true',_81,_82}> when 'true' ->
	      %% Line 780
	      {'rukmerge',Kp}
	  %% Line 781
	  <{'w',_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,'descending',_94,_95,_96,_97,'false',_98,_99}> when 'true' ->
	      %% Line 782
	      'rmerge'
	  %% Line 783
	  <{'w',_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,CF,_111,_112,_113,_114,'true',_115,_116}> when 'true' ->
	      %% Line 784
	      {'ucmerge',CF}
	  %% Line 785
	  <{'w',_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,CF,_128,_129,_130,_131,'false',_132,_133}> when 'true' ->
	      %% Line 786
	      {'cmerge',CF}
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'merge_kind',1}}] )
	    -| ['compiler_generated'] )
	end
'merge_write'/2 =
    %% Line 788
    fun (_0,_1) ->
	%% Line 789
	( case _0 of
	    ( <( {'w',_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_rec36,_24,_25,_26,_27,_28}
		 -| ['compiler_generated'] )> when 'true' ->
		  ( case _0 of
		      ( <( {'w',_30,_31,_32,_33,_rec37,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47}
			   -| ['compiler_generated'] )> when 'true' ->
			    case <_rec36,_rec37> of
			      %% Line 790
			      <( 'undefined'
				 -| ['compiler_generated'] ),Fun>
				  when call 'erlang':'is_function'
					(Fun) ->
				  let <_6> =
				      apply %% Line 791
					    'objects'/2
					  (_1, %% Line 791
					       [])
				  in  %% Line 791
				      apply 'outfun'/2
					  (_6, _0)
			      %% Line 792
			      <( {Fd,FileName}
				 -| ['compiler_generated'] ),_49> when 'true' ->
				  let <_7> =
				      call %% Line 793
					   'lists':%% Line 793
						   'reverse'
					  (_1)
				  in  do  %% Line 793
					  apply 'write'/4
					      (Fd, FileName, _7, _0)
					  _0
			      ( <( _50
				   -| ['compiler_generated'] ),( _51
								 -| ['compiler_generated'] )> when 'true' ->
				    let <_8> = {( _50
					   -| ['compiler_generated'] ),( _51
									 -| ['compiler_generated'] )}
				    in  primop 'match_fail'
					    ({'case_clause',_8})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_48> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','w'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_29> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','w'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'umerge_files'/9 =
    %% Line 797
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <L,F2,Fs,InEtc2,Ts2,[{T,_X_BT}|Ts],InEtc,T2,Last>
	      when %% Line 798
		call 'erlang':'=='
		    (T,
		     Last) ->
	      %% Line 799
	      apply 'umerge_files'/9
		  (L, F2, Fs, InEtc2, Ts2, Ts, InEtc, T2, Last)
	  %% Line 800
	  <L,F2,Fs,InEtc2,Ts2,[{T,BT}|Ts],InEtc,T2,_X_Last>
	      when %% Line 801
		call 'erlang':'=<'
		    (T,
		     T2) ->
	      %% Line 802
	      apply 'umerge_files'/9
		  ([BT|L], F2, Fs, InEtc2, Ts2, Ts, InEtc, T2, T)
	  %% Line 803
	  <L,F2,Fs,_X_InEtc2,_X_Ts2,[],InEtc,_X_T2,Last> when 'true' ->
	      %% Line 804
	      {InEtc,[F2|Fs],L,{'last',Last}}
	  %% Line 805
	  <L,_X_F2,Fs,InEtc2,Ts2,Ts,InEtc,_X_T2,Last> when 'true' ->
	      %% Line 806
	      case apply 'insert'/2
		       ([Ts|InEtc], Fs) of
		<[F3|NFs]> when 'true' ->
		    %% Line 807
		    case F3 of
		      <[Ts3 = [{T3,_X_BT3}|_20]|InEtc3]> when 'true' ->
			  %% Line 808
			  apply 'umerge_files'/9
			      (L, F3, NFs, InEtc3, Ts3, Ts2, InEtc2, T3, Last)
		      ( <_10> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_10})
			-| ['compiler_generated'] )
		    end
		( <_9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_9})
		  -| ['compiler_generated'] )
	      end
	end
'rumerge_files'/9 =
    %% Line 810
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <L,F2,Fs,InEtc2,Ts2,[{T,_X_BT}|Ts],InEtc,T2,Last>
	      when %% Line 811
		call 'erlang':'=='
		    (T,
		     Last) ->
	      %% Line 812
	      apply 'rumerge_files'/9
		  (L, F2, Fs, InEtc2, Ts2, Ts, InEtc, T2, Last)
	  %% Line 813
	  <L,F2,Fs,InEtc2,Ts2,[{T,BT}|Ts],InEtc,T2,_X_Last>
	      when %% Line 814
		call 'erlang':'>='
		    (T,
		     T2) ->
	      %% Line 815
	      apply 'rumerge_files'/9
		  ([BT|L], F2, Fs, InEtc2, Ts2, Ts, InEtc, T2, T)
	  %% Line 816
	  <L,F2,Fs,_X_InEtc2,_X_Ts2,[],InEtc,_X_T2,Last> when 'true' ->
	      %% Line 817
	      {InEtc,[F2|Fs],L,{'last',Last}}
	  %% Line 818
	  <L,_X_F2,Fs,InEtc2,Ts2,Ts,InEtc,_X_T2,Last> when 'true' ->
	      %% Line 819
	      case apply 'rinsert'/2
		       ([Ts|InEtc], Fs) of
		<[F3|NFs]> when 'true' ->
		    %% Line 820
		    case F3 of
		      <[Ts3 = [{T3,_X_BT3}|_20]|InEtc3]> when 'true' ->
			  %% Line 821
			  apply 'rumerge_files'/9
			      (L, F3, NFs, InEtc3, Ts3, Ts2, InEtc2, T3, Last)
		      ( <_10> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_10})
			-| ['compiler_generated'] )
		    end
		( <_9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_9})
		  -| ['compiler_generated'] )
	      end
	end
'merge_files'/9 =
    %% Line 823
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <L,F2,Fs,InEtc2,BT2,Ts2,[{T,BT}|Ts],InEtc,T2>
	      when %% Line 824
		call 'erlang':'=<'
		    (T,
		     T2) ->
	      %% Line 825
	      apply 'merge_files'/9
		  ([BT|L], F2, Fs, InEtc2, BT2, Ts2, Ts, InEtc, T2)
	  %% Line 826
	  <L,F2,Fs,_X_InEtc2,_X_BT2,_X_Ts2,[],InEtc,_X_T2> when 'true' ->
	      %% Line 827
	      {InEtc,[F2|Fs],L,{'last','foo'}}
	  %% Line 828
	  <L,_X_F2,Fs,InEtc2,BT2,Ts2,Ts,InEtc,_X_T2> when 'true' ->
	      let <L1> =
		  [%% Line 829
		   BT2|%% Line 829
		       L]
	      in  %% Line 830
		  case apply 'insert'/2
			   ([Ts|InEtc], Fs) of
		    <[F3|NFs]> when 'true' ->
			%% Line 831
			case F3 of
			  <[[{T3,BT3}|Ts3]|InEtc3]> when 'true' ->
			      %% Line 832
			      apply 'merge_files'/9
				  (L1, F3, NFs, InEtc3, BT3, Ts3, Ts2, InEtc2, T3)
			  ( <_11> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_11})
			    -| ['compiler_generated'] )
			end
		    ( <_10> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_10})
		      -| ['compiler_generated'] )
		  end
	end
'rmerge_files'/9 =
    %% Line 834
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <L,F2,Fs,InEtc2,BT2,Ts2,[{T,BT}|Ts],InEtc,T2>
	      when %% Line 835
		call 'erlang':'>='
		    (T,
		     T2) ->
	      %% Line 836
	      apply 'rmerge_files'/9
		  ([BT|L], F2, Fs, InEtc2, BT2, Ts2, Ts, InEtc, T2)
	  %% Line 837
	  <L,F2,Fs,_X_InEtc2,_X_BT2,_X_Ts2,[],InEtc,_X_T2> when 'true' ->
	      %% Line 838
	      {InEtc,[F2|Fs],L,{'last','foo'}}
	  %% Line 839
	  <L,_X_F2,Fs,InEtc2,BT2,Ts2,Ts,InEtc,_X_T2> when 'true' ->
	      let <L1> =
		  [%% Line 840
		   BT2|%% Line 840
		       L]
	      in  %% Line 841
		  case apply 'rinsert'/2
			   ([Ts|InEtc], Fs) of
		    <[F3|NFs]> when 'true' ->
			%% Line 842
			case F3 of
			  <[[{T3,BT3}|Ts3]|InEtc3]> when 'true' ->
			      %% Line 843
			      apply 'rmerge_files'/9
				  (L1, F3, NFs, InEtc3, BT3, Ts3, Ts2, InEtc2, T3)
			  ( <_11> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_11})
			    -| ['compiler_generated'] )
			end
		    ( <_10> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_10})
		      -| ['compiler_generated'] )
		  end
	end
'ukmerge_files'/10 =
    %% Line 845
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9> of
	  <L,F2,Fs,InEtc2,Ts2,[{[T|_X_I],_X_BT}|Ts],InEtc,%% Line 846
							  T2,%% Line 846
							     Kp,%% Line 846
								Last>
	      when %% Line 846
		call 'erlang':'=='
		    (T,
		     Last) ->
	      %% Line 847
	      apply 'ukmerge_files'/10
		  (L, F2, Fs, InEtc2, Ts2, Ts, InEtc, T2, Kp, Last)
	  %% Line 848
	  <L,F2,Fs,InEtc2,Ts2,[{T = [T0|_X_I],BT}|Ts],InEtc,%% Line 849
							    T2,%% Line 849
							       Kp,%% Line 849
								  _X_Last>
	      when %% Line 849
		call 'erlang':'=<'
		    (T,
		     T2) ->
	      %% Line 850
	      apply 'ukmerge_files'/10
		  ([BT|L], F2, Fs, InEtc2, Ts2, Ts, InEtc, T2, Kp, T0)
	  %% Line 851
	  <L,F2,Fs,_X_InEtc2,_X_Ts2,[],InEtc,_X_T2,_X_Kp,Last> when 'true' ->
	      %% Line 852
	      {InEtc,[F2|Fs],L,{'last',Last}}
	  %% Line 853
	  <L,_X_F2,Fs,InEtc2,Ts2,Ts,InEtc,_X_T2,Kp,Last> when 'true' ->
	      %% Line 854
	      case apply 'insert'/2
		       ([Ts|InEtc], Fs) of
		<[F3|NFs]> when 'true' ->
		    %% Line 855
		    case F3 of
		      <[Ts3 = [{T3,_X_BT3}|_22]|InEtc3]> when 'true' ->
			  %% Line 856
			  apply 'ukmerge_files'/10
			      (L, F3, NFs, InEtc3, Ts3, Ts2, InEtc2, T3, Kp, Last)
		      ( <_11> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_11})
			-| ['compiler_generated'] )
		    end
		( <_10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_10})
		  -| ['compiler_generated'] )
	      end
	end
'rukmerge_files'/11 =
    %% Line 858
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10> of
	  <L,F2,Fs,InEtc2,Ts2,[{[T|_X_I],BT}|Ts],InEtc,%% Line 859
						       T2,%% Line 859
							  Kp,%% Line 859
							     Last,%% Line 859
								  _X_LastBT>
	      when %% Line 859
		call 'erlang':'=='
		    (T,
		     Last) ->
	      %% Line 860
	      apply 'rukmerge_files'/11
		  (L, F2, Fs, InEtc2, Ts2, Ts, InEtc, T2, Kp, T, BT)
	  %% Line 861
	  <L,F2,Fs,InEtc2,Ts2,[{T = [T0|_X_I],BT}|Ts],InEtc,%% Line 862
							    T2,%% Line 862
							       Kp,%% Line 862
								  _X_Last,%% Line 862
									  LastBT>
	      when %% Line 862
		call 'erlang':'>='
		    (T,
		     T2) ->
	      %% Line 863
	      apply 'rukmerge_files'/11
		  ([LastBT|L], F2, Fs, InEtc2, Ts2, Ts, InEtc, T2, Kp, T0, BT)
	  %% Line 864
	  <L,F2,Fs,_X_InEtc2,_X_Ts2,[],InEtc,_X_T2,_X_Kp,Last,LastBT> when 'true' ->
	      %% Line 865
	      {InEtc,[F2|Fs],L,{'last',{Last,LastBT}}}
	  %% Line 866
	  <L,_X_F2,Fs,InEtc2,Ts2,Ts,InEtc,_X_T2,Kp,Last,LastBT> when 'true' ->
	      %% Line 867
	      case apply 'rinsert'/2
		       ([Ts|InEtc], Fs) of
		<[F3|NFs]> when 'true' ->
		    %% Line 868
		    case F3 of
		      <[Ts3 = [{T3,_X_BT3}|_24]|InEtc3]> when 'true' ->
			  %% Line 869
			  apply 'rukmerge_files'/11
			      (L, F3, NFs, InEtc3, Ts3, Ts2, InEtc2, T3, Kp, Last, LastBT)
		      ( <_12> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_12})
			-| ['compiler_generated'] )
		    end
		( <_11> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_11})
		  -| ['compiler_generated'] )
	      end
	end
'ucmerge_files'/12 =
    %% Line 871
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11> of
	  <L,F2,Fs,InEtc2,Ts2,I2,Ts0 = [{T,BT}|Ts],I,%% Line 872
						     InEtc,%% Line 872
							   T2,%% Line 872
							      CF,%% Line 872
								 Last>
	      when %% Line 872
		call 'erlang':'<'
		    (I,
		     I2) ->
	      %% Line 873
	      case apply CF
		       (T, T2) of
		%% Line 874
		<'true'> when 'true' ->
		    %% Line 875
		    case apply CF
			     (T, Last) of
		      %% Line 876
		      <'true'> when 'true' ->
			  %% Line 877
			  apply 'ucmerge_files'/12
			      (L, F2, Fs, InEtc2, Ts2, I2, Ts, I, InEtc, T2, %% Line 878
									     CF, %% Line 878
										 Last)
		      %% Line 879
		      <'false'> when 'true' ->
			  %% Line 880
			  apply 'ucmerge_files'/12
			      ([BT|L], F2, Fs, InEtc2, Ts2, I2, Ts, I, %% Line 881
								       InEtc, %% Line 881
									      T2, %% Line 881
										  CF, %% Line 881
										      T)
		      ( <_12> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_12})
			-| ['compiler_generated'] )
		    end
		%% Line 883
		<'false'> when 'true' ->
		    %% Line 884
		    case apply 'cinsert'/3
			     ([Ts0|InEtc], Fs, CF) of
		      <[F3|NFs]> when 'true' ->
			  %% Line 885
			  case F3 of
			    <[Ts3 = [{T3,_X_BT3}|_32]|InEtc3 = {I3,_33}]> when 'true' ->
				%% Line 886
				apply 'ucmerge_files'/12
				    (L, F3, NFs, InEtc3, Ts3, I3, Ts2, I2, InEtc2, T3, CF, Last)
			    ( <_14> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_14})
			      -| ['compiler_generated'] )
			  end
		      ( <_13> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_13})
			-| ['compiler_generated'] )
		    end
		( <_15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 888
	  <L,F2,Fs,InEtc2,Ts2,I2,Ts0 = [{T,BT}|Ts],I,%% Line 889
						     InEtc,%% Line 889
							   T2,%% Line 889
							      CF,%% Line 889
								 Last> when 'true' ->
	      %% Line 890
	      case apply CF
		       (T2, T) of
		%% Line 891
		<'true'> when 'true' ->
		    %% Line 892
		    case apply 'cinsert'/3
			     ([Ts0|InEtc], Fs, CF) of
		      <[F3|NFs]> when 'true' ->
			  %% Line 893
			  case F3 of
			    <[Ts3 = [{T3,_X_BT3}|_34]|InEtc3 = {I3,_35}]> when 'true' ->
				%% Line 894
				apply 'ucmerge_files'/12
				    (L, F3, NFs, InEtc3, Ts3, I3, Ts2, I2, InEtc2, T3, %% Line 895
										       CF, %% Line 895
											   Last)
			    ( <_17> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_17})
			      -| ['compiler_generated'] )
			  end
		      ( <_16> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_16})
			-| ['compiler_generated'] )
		    end
		%% Line 896
		<'false'> when 'true' ->
		    %% Line 897
		    case apply CF
			     (T, Last) of
		      %% Line 898
		      <'true'> when 'true' ->
			  %% Line 899
			  apply 'ucmerge_files'/12
			      (L, F2, Fs, InEtc2, Ts2, I2, Ts, I, InEtc, T2, %% Line 900
									     CF, %% Line 900
										 Last)
		      %% Line 901
		      <'false'> when 'true' ->
			  %% Line 902
			  apply 'ucmerge_files'/12
			      ([BT|L], F2, Fs, InEtc2, Ts2, I2, Ts, I, %% Line 903
								       InEtc, %% Line 903
									      T2, %% Line 903
										  CF, %% Line 903
										      T)
		      ( <_18> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_18})
			-| ['compiler_generated'] )
		    end
		( <_19> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_19})
		  -| ['compiler_generated'] )
	      end
	  %% Line 906
	  <L,F2,Fs,_X_InEtc2,_X_Ts2,_X_I2,[],_X_I,InEtc,_X_T2,_X_CF,Last> when 'true' ->
	      %% Line 907
	      {InEtc,[F2|Fs],L,{'last',Last}}
	  ( <_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20})
		  -| [{'function_name',{'ucmerge_files',12}}] )
	    -| ['compiler_generated'] )
	end
'cmerge_files'/12 =
    %% Line 909
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11> of
	  <L,F2,Fs,InEtc2,BT2,Ts2,I2,Ts0 = [{T,BT}|Ts],I,%% Line 910
							 InEtc,%% Line 910
							       T2,%% Line 910
								  CF>
	      when %% Line 910
		call 'erlang':'<'
		    (I,
		     I2) ->
	      %% Line 911
	      case apply CF
		       (T, T2) of
		%% Line 912
		<'true'> when 'true' ->
		    %% Line 913
		    apply 'cmerge_files'/12
			([BT|L], F2, Fs, InEtc2, BT2, Ts2, I2, Ts, I, InEtc, T2, CF)
		%% Line 914
		<'false'> when 'true' ->
		    let <L1> =
			[%% Line 915
			 BT2|%% Line 915
			     L]
		    in  %% Line 916
			case apply 'cinsert'/3
				 ([Ts0|InEtc], Fs, CF) of
			  <[F3|NFs]> when 'true' ->
			      %% Line 917
			      case F3 of
				<[[{T3,BT3}|Ts3]|InEtc3 = {I3,_32}]> when 'true' ->
				    %% Line 918
				    apply 'cmerge_files'/12
					(L1, F3, NFs, InEtc3, BT3, Ts3, I3, Ts2, I2, InEtc2, T3, CF)
				( <_14> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_14})
				  -| ['compiler_generated'] )
			      end
			  ( <_13> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_13})
			    -| ['compiler_generated'] )
			end
		( <_15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 920
	  <L,F2,Fs,InEtc2,BT2,Ts2,I2,Ts0 = [{T,BT}|Ts],I,%% Line 921
							 InEtc,%% Line 921
							       T2,%% Line 921
								  CF> when 'true' ->
	      %% Line 922
	      case apply CF
		       (T2, T) of
		%% Line 923
		<'true'> when 'true' ->
		    let <L1> =
			[%% Line 924
			 BT2|%% Line 924
			     L]
		    in  %% Line 925
			case apply 'cinsert'/3
				 ([Ts0|InEtc], Fs, CF) of
			  <[F3|NFs]> when 'true' ->
			      %% Line 926
			      case F3 of
				<[[{T3,BT3}|Ts3]|InEtc3 = {I3,_33}]> when 'true' ->
				    %% Line 927
				    apply 'cmerge_files'/12
					(L1, F3, NFs, InEtc3, BT3, Ts3, I3, Ts2, I2, InEtc2, T3, CF)
				( <_18> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_18})
				  -| ['compiler_generated'] )
			      end
			  ( <_17> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_17})
			    -| ['compiler_generated'] )
			end
		%% Line 928
		<'false'> when 'true' ->
		    %% Line 929
		    apply 'cmerge_files'/12
			([BT|L], F2, Fs, InEtc2, BT2, Ts2, I2, Ts, I, InEtc, T2, CF)
		( <_19> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_19})
		  -| ['compiler_generated'] )
	      end
	  %% Line 931
	  <L,F2,Fs,_X_InEtc2,_X_BT2,_X_Ts2,_X_I2,[],_X_I,InEtc,_X_T2,_X_CF> when 'true' ->
	      %% Line 932
	      {InEtc,[F2|Fs],L,{'last','foo'}}
	  ( <_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20})
		  -| [{'function_name',{'cmerge_files',12}}] )
	    -| ['compiler_generated'] )
	end
'last_file'/5 =
    %% Line 934
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <Ts,L,{'last',T},{'ukmerge',_10},_X_W> when 'true' ->
	      %% Line 935
	      apply 'kulast_file'/3
		  (Ts, T, L)
	  %% Line 936
	  <Ts,L,{'last',{T,BT}},{'rukmerge',_11},_X_W> when 'true' ->
	      %% Line 937
	      apply 'ruklast_file'/4
		  (Ts, T, BT, L)
	  %% Line 938
	  <Ts,L,{'last',T},{'ucmerge',CF},_X_W> when 'true' ->
	      %% Line 939
	      apply 'uclast_file'/4
		  (Ts, T, CF, L)
	  %% Line 940
	  <Ts,L,{'last',T},_X_Kind,{'w',_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,'true',_28,_29}> when 'true' ->
	      %% Line 941
	      apply 'ulast_file'/3
		  (Ts, T, L)
	  %% Line 942
	  <Ts,L,_X_Last,_X_Kind,_X_W> when 'true' ->
	      %% Line 943
	      apply 'last_file'/2
		  (Ts, L)
	end
'ulast_file'/3 =
    %% Line 945
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[{T,_X_BT}|Ts],Last,L>
	      when call 'erlang':'=='
		    (Last,
		     T) ->
	      %% Line 946
	      apply 'last_file'/2
		  (Ts, L)
	  %% Line 947
	  <Ts,_X_Last,L> when 'true' ->
	      %% Line 948
	      apply 'last_file'/2
		  (Ts, L)
	end
'kulast_file'/3 =
    %% Line 950
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[{[T|_X_I],_X_BT}|Ts],Last,L>
	      when call 'erlang':'=='
		    (Last,
		     T) ->
	      %% Line 951
	      apply 'last_file'/2
		  (Ts, L)
	  %% Line 952
	  <Ts,_X_Last,L> when 'true' ->
	      %% Line 953
	      apply 'last_file'/2
		  (Ts, L)
	end
'ruklast_file'/4 =
    %% Line 955
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[{[T|_X_I],BT}|Ts],Last,_X_LastBT,L>
	      when call 'erlang':'=='
		    (Last,
		     T) ->
	      %% Line 956
	      apply 'last_file'/2
		  (Ts, [BT|L])
	  %% Line 957
	  <Ts,_X_Last,LastBT,L> when 'true' ->
	      %% Line 958
	      apply 'last_file'/2
		  (Ts, [LastBT|L])
	end
'uclast_file'/4 =
    %% Line 960
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[{T,BT}|Ts],Last,CF,L> when 'true' ->
	      %% Line 961
	      case apply CF
		       (T, Last) of
		%% Line 962
		<'true'> when 'true' ->
		    %% Line 963
		    apply 'last_file'/2
			(Ts, L)
		%% Line 964
		<'false'> when 'true' ->
		    %% Line 965
		    apply 'last_file'/2
			(Ts, [BT|L])
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
	  ( <_8,_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7,_6,_5})
		  -| [{'function_name',{'uclast_file',4}}] )
	    -| ['compiler_generated'] )
	end
'last_file'/2 =
    %% Line 968
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{_X_Ta,BTa}|[{_X_Tb,BTb}|Ts]],L> when 'true' ->
	      %% Line 969
	      apply 'last_file'/2
		  (Ts, [BTb|[BTa|L]])
	  %% Line 970
	  <[{_X_T,BT}|Ts],L> when 'true' ->
	      %% Line 971
	      apply 'last_file'/2
		  (Ts, [BT|L])
	  %% Line 972
	  <[],L> when 'true' ->
	      %% Line 973
	      L
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'last_file',2}}] )
	    -| ['compiler_generated'] )
	end
'insert'/2 =
    %% Line 976
    fun (_0,_1) ->
	case <_0,_1> of
	  <A,[X1|[X2|[X3|[X4|Xs]]]]>
	      when call 'erlang':'>'
		    (A,
		     X4) ->
	      let <_2> =
		  apply %% Line 977
			'insert'/2
		      (%% Line 977
		       A, %% Line 977
			  Xs)
	      in  %% Line 977
		  [X1|[X2|[X3|[X4|_2]]]]
	  %% Line 978
	  <A,[X1|[X2|[X3|T]]]>
	      when call 'erlang':'>'
		    (A,
		     X3) ->
	      %% Line 979
	      [X1|[X2|[X3|[A|T]]]]
	  %% Line 980
	  <A,[X1|[X2|Xs]]>
	      when call 'erlang':'>'
		    (A,
		     X2) ->
	      %% Line 981
	      [X1|[X2|[A|Xs]]]
	  %% Line 982
	  <A,[X1|T]>
	      when call 'erlang':'>'
		    (A,
		     X1) ->
	      %% Line 983
	      [X1|[A|T]]
	  %% Line 984
	  <A,Xs> when 'true' ->
	      %% Line 985
	      [A|Xs]
	end
'rinsert'/2 =
    %% Line 987
    fun (_0,_1) ->
	case <_0,_1> of
	  <A,[X1|[X2|[X3|[X4|Xs]]]]>
	      when call 'erlang':'<'
		    (A,
		     X4) ->
	      let <_2> =
		  apply %% Line 988
			'rinsert'/2
		      (%% Line 988
		       A, %% Line 988
			  Xs)
	      in  %% Line 988
		  [X1|[X2|[X3|[X4|_2]]]]
	  %% Line 989
	  <A,[X1|[X2|[X3|T]]]>
	      when call 'erlang':'<'
		    (A,
		     X3) ->
	      %% Line 990
	      [X1|[X2|[X3|[A|T]]]]
	  %% Line 991
	  <A,[X1|[X2|Xs]]>
	      when call 'erlang':'<'
		    (A,
		     X2) ->
	      %% Line 992
	      [X1|[X2|[A|Xs]]]
	  %% Line 993
	  <A,[X1|T]>
	      when call 'erlang':'<'
		    (A,
		     X1) ->
	      %% Line 994
	      [X1|[A|T]]
	  %% Line 995
	  <A,Xs> when 'true' ->
	      %% Line 996
	      [A|Xs]
	end
'cinsert'/3 =
    %% Line 1004
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <A,T1 = [F1|T2 = [F2|T3 = [F3|T4 = [F4|Fs]]]],CF> when 'true' ->
	      %% Line 1025
	      ( case F4 of
		  ( <( [( [( {_23,_9}
			     -| ['compiler_generated'] )|_10]
			  -| ['compiler_generated'] )|( {I1,_11}
							-| ['compiler_generated'] )]
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			%% Line 1026
			( case A of
			    ( <( [( [( {_24,_12}
				       -| ['compiler_generated'] )|_13]
				    -| ['compiler_generated'] )|( {I2,_14}
								  -| ['compiler_generated'] )]
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  case %% Line 1027
				       ( case <> of
					   %% Line 1028
					   ( <>
						 when ( call ( 'erlang'
							    -| ['compiler_generated'] ):( '<'
											  -| ['compiler_generated'] )
							 (I1,
							  I2)
						     -| ['compiler_generated'] ) ->
						 %% Line 1029
						 ( apply CF
						       (_23, _24)
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					   %% Line 1030
					   ( <> when ( 'true'
						       -| ['compiler_generated'] ) ->
						 ( let <_5> =
						       apply CF
							   (_24, _23)
						   in  %% Line 1031
						       ( call ( 'erlang'
								-| ['compiler_generated'] ):( 'not'
											      -| ['compiler_generated'] )
							     (_5)
							 -| ['compiler_generated'] )
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					 end
					 -| ['compiler_generated'] ) of
				    <'true'> when 'true' ->
					let <_3> =
					    apply 'cinsert'/3
						(A, Fs, CF)
					in  [F1|[F2|[F3|[F4|_3]]]]
				    <'false'> when 'true' ->
					( case F2 of
					    ( <( [( [( {_34,_90}
						       -| ['compiler_generated'] )|_91]
						    -| ['compiler_generated'] )|( {_92,_93}
										  -| ['compiler_generated'] )]
						 -| ['compiler_generated'] )> when ( 'true'
										     -| ['compiler_generated'] ) ->
						  ( case A of
						      ( <( [( [( {_35,_109}
								 -| ['compiler_generated'] )|_110]
							      -| ['compiler_generated'] )|( {_111,_112}
											    -| ['compiler_generated'] )]
							   -| ['compiler_generated'] )> when ( 'true'
											       -| ['compiler_generated'] ) ->
							    case %% Line 1027
								 ( case <> of
								     %% Line 1028
								     ( <>
									   when ( call ( 'erlang'
										      -| ['compiler_generated'] ):( '<'
														    -| ['compiler_generated'] )
										   (_92,
										    _111)
									       -| ['compiler_generated'] ) ->
									   %% Line 1029
									   ( apply CF
										 (_34, _35)
									     -| ['compiler_generated'] )
								       -| ['compiler_generated'] )
								     %% Line 1030
								     ( <> when ( 'true'
										 -| ['compiler_generated'] ) ->
									   ( let <_5> =
										 apply CF
										     (_35, _34)
									     in  %% Line 1031
										 ( call ( 'erlang'
											  -| ['compiler_generated'] ):( 'not'
															-| ['compiler_generated'] )
										       (_5)
										   -| ['compiler_generated'] )
									     -| ['compiler_generated'] )
								       -| ['compiler_generated'] )
								   end
								   -| ['compiler_generated'] ) of
							      <'true'> when 'true' ->
								  ( case F3 of
								      ( <( [( [( {_45,_94}
										 -| ['compiler_generated'] )|_95]
									      -| ['compiler_generated'] )|( {_96,_97}
													    -| ['compiler_generated'] )]
									   -| ['compiler_generated'] )> when ( 'true'
													       -| ['compiler_generated'] ) ->
									    ( case A of
										( <( [( [( {_46,_113}
											   -| ['compiler_generated'] )|_114]
											-| ['compiler_generated'] )|( {_115,_116}
														      -| ['compiler_generated'] )]
										     -| ['compiler_generated'] )> when ( 'true'
															 -| ['compiler_generated'] ) ->
										      let <_5> =
											  case %% Line 1027
											       ( case <> of
												   %% Line 1028
												   ( <>
													 when ( call ( 'erlang'
														    -| ['compiler_generated'] ):( '<'
																		  -| ['compiler_generated'] )
														 (_96,
														  _115)
													     -| ['compiler_generated'] ) ->
													 %% Line 1029
													 ( apply CF
													       (_45, _46)
													   -| ['compiler_generated'] )
												     -| ['compiler_generated'] )
												   %% Line 1030
												   ( <> when ( 'true'
													       -| ['compiler_generated'] ) ->
													 ( let <_5> =
													       apply CF
														   (_46, _45)
													   in  %% Line 1031
													       ( call ( 'erlang'
															-| ['compiler_generated'] ):( 'not'
																		      -| ['compiler_generated'] )
														     (_5)
														 -| ['compiler_generated'] )
													   -| ['compiler_generated'] )
												     -| ['compiler_generated'] )
												 end
												 -| ['compiler_generated'] ) of
											    <'true'> when 'true' ->
												[F3|[A|T4]]
											    <'false'> when 'true' ->
												[A|T3]
											    ( <_4> when 'true' ->
												  primop 'match_fail'
												      ({'case_clause',_4})
											      -| ['compiler_generated'] )
											  end
										      in  [F1|[F2|_5]]
										  -| ['compiler_generated'] )
										( <_4> when ( 'true'
											      -| ['compiler_generated'] ) ->
										      ( primop ( 'match_fail'
												 -| ['compiler_generated'] )
											    (( {( 'badmatch'
												  -| ['compiler_generated'] ),_4}
											       -| ['compiler_generated'] ))
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									      end
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								      ( <_3> when ( 'true'
										    -| ['compiler_generated'] ) ->
									    ( primop ( 'match_fail'
										       -| ['compiler_generated'] )
										  (( {( 'badmatch'
											-| ['compiler_generated'] ),_3}
										     -| ['compiler_generated'] ))
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								    end
								    -| ['compiler_generated'] )
							      <'false'> when 'true' ->
								  ( case F1 of
								      ( <( [( [( {_56,_98}
										 -| ['compiler_generated'] )|_99]
									      -| ['compiler_generated'] )|( {_100,_101}
													    -| ['compiler_generated'] )]
									   -| ['compiler_generated'] )> when ( 'true'
													       -| ['compiler_generated'] ) ->
									    ( case A of
										( <( [( [( {_57,_117}
											   -| ['compiler_generated'] )|_118]
											-| ['compiler_generated'] )|( {_119,_120}
														      -| ['compiler_generated'] )]
										     -| ['compiler_generated'] )> when ( 'true'
															 -| ['compiler_generated'] ) ->
										      case %% Line 1027
											   ( case <> of
											       %% Line 1028
											       ( <>
												     when ( call ( 'erlang'
														-| ['compiler_generated'] ):( '<'
																	      -| ['compiler_generated'] )
													     (_100,
													      _119)
													 -| ['compiler_generated'] ) ->
												     %% Line 1029
												     ( apply CF
													   (_56, _57)
												       -| ['compiler_generated'] )
												 -| ['compiler_generated'] )
											       %% Line 1030
											       ( <> when ( 'true'
													   -| ['compiler_generated'] ) ->
												     ( let <_5> =
													   apply CF
													       (_57, _56)
												       in  %% Line 1031
													   ( call ( 'erlang'
														    -| ['compiler_generated'] ):( 'not'
																		  -| ['compiler_generated'] )
														 (_5)
													     -| ['compiler_generated'] )
												       -| ['compiler_generated'] )
												 -| ['compiler_generated'] )
											     end
											     -| ['compiler_generated'] ) of
											<'true'> when 'true' ->
											    [F1|[A|T2]]
											<'false'> when 'true' ->
											    [A|T1]
											( <_6> when 'true' ->
											      primop 'match_fail'
												  ({'case_clause',_6})
											  -| ['compiler_generated'] )
										      end
										  -| ['compiler_generated'] )
										( <_4> when ( 'true'
											      -| ['compiler_generated'] ) ->
										      ( primop ( 'match_fail'
												 -| ['compiler_generated'] )
											    (( {( 'badmatch'
												  -| ['compiler_generated'] ),_4}
											       -| ['compiler_generated'] ))
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									      end
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								      ( <_3> when ( 'true'
										    -| ['compiler_generated'] ) ->
									    ( primop ( 'match_fail'
										       -| ['compiler_generated'] )
										  (( {( 'badmatch'
											-| ['compiler_generated'] ),_3}
										     -| ['compiler_generated'] ))
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								    end
								    -| ['compiler_generated'] )
							      ( <_7> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_7})
								-| ['compiler_generated'] )
							    end
							-| ['compiler_generated'] )
						      ( <_4> when ( 'true'
								    -| ['compiler_generated'] ) ->
							    ( primop ( 'match_fail'
								       -| ['compiler_generated'] )
								  (( {( 'badmatch'
									-| ['compiler_generated'] ),_4}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_3> when ( 'true'
							  -| ['compiler_generated'] ) ->
						  ( primop ( 'match_fail'
							     -| ['compiler_generated'] )
							(( {( 'badmatch'
							      -| ['compiler_generated'] ),_3}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    ( <_8> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_8})
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_4> when ( 'true'
					  -| ['compiler_generated'] ) ->
				  ( primop ( 'match_fail'
					     -| ['compiler_generated'] )
					(( {( 'badmatch'
					      -| ['compiler_generated'] ),_4}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_3> when ( 'true'
				-| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'badmatch'
				    -| ['compiler_generated'] ),_3}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1013
	  <A,T1 = [F1|T2 = [F2|Fs]],CF> when 'true' ->
	      %% Line 1025
	      ( case F2 of
		  ( <( [( [( {_67,_9}
			     -| ['compiler_generated'] )|_10]
			  -| ['compiler_generated'] )|( {I1,_11}
							-| ['compiler_generated'] )]
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			%% Line 1026
			( case A of
			    ( <( [( [( {_68,_12}
				       -| ['compiler_generated'] )|_13]
				    -| ['compiler_generated'] )|( {I2,_14}
								  -| ['compiler_generated'] )]
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  case %% Line 1027
				       ( case <> of
					   %% Line 1028
					   ( <>
						 when ( call ( 'erlang'
							    -| ['compiler_generated'] ):( '<'
											  -| ['compiler_generated'] )
							 (I1,
							  I2)
						     -| ['compiler_generated'] ) ->
						 %% Line 1029
						 ( apply CF
						       (_67, _68)
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					   %% Line 1030
					   ( <> when ( 'true'
						       -| ['compiler_generated'] ) ->
						 ( let <_5> =
						       apply CF
							   (_68, _67)
						   in  %% Line 1031
						       ( call ( 'erlang'
								-| ['compiler_generated'] ):( 'not'
											      -| ['compiler_generated'] )
							     (_5)
							 -| ['compiler_generated'] )
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					 end
					 -| ['compiler_generated'] ) of
				    <'true'> when 'true' ->
					let <_102> =
					    apply 'cinsert'/3
						(A, Fs, CF)
					in  [F1|[F2|_102]]
				    <'false'> when 'true' ->
					( case F1 of
					    ( <( [( [( {_78,_103}
						       -| ['compiler_generated'] )|_104]
						    -| ['compiler_generated'] )|( {_105,_106}
										  -| ['compiler_generated'] )]
						 -| ['compiler_generated'] )> when ( 'true'
										     -| ['compiler_generated'] ) ->
						  ( case A of
						      ( <( [( [( {_79,_121}
								 -| ['compiler_generated'] )|_122]
							      -| ['compiler_generated'] )|( {_123,_124}
											    -| ['compiler_generated'] )]
							   -| ['compiler_generated'] )> when ( 'true'
											       -| ['compiler_generated'] ) ->
							    case %% Line 1027
								 ( case <> of
								     %% Line 1028
								     ( <>
									   when ( call ( 'erlang'
										      -| ['compiler_generated'] ):( '<'
														    -| ['compiler_generated'] )
										   (_105,
										    _123)
									       -| ['compiler_generated'] ) ->
									   %% Line 1029
									   ( apply CF
										 (_78, _79)
									     -| ['compiler_generated'] )
								       -| ['compiler_generated'] )
								     %% Line 1030
								     ( <> when ( 'true'
										 -| ['compiler_generated'] ) ->
									   ( let <_5> =
										 apply CF
										     (_79, _78)
									     in  %% Line 1031
										 ( call ( 'erlang'
											  -| ['compiler_generated'] ):( 'not'
															-| ['compiler_generated'] )
										       (_5)
										   -| ['compiler_generated'] )
									     -| ['compiler_generated'] )
								       -| ['compiler_generated'] )
								   end
								   -| ['compiler_generated'] ) of
							      <'true'> when 'true' ->
								  [F1|[A|T2]]
							      <'false'> when 'true' ->
								  [A|T1]
							      ( <_107> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_107})
								-| ['compiler_generated'] )
							    end
							-| ['compiler_generated'] )
						      ( <_4> when ( 'true'
								    -| ['compiler_generated'] ) ->
							    ( primop ( 'match_fail'
								       -| ['compiler_generated'] )
								  (( {( 'badmatch'
									-| ['compiler_generated'] ),_4}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_3> when ( 'true'
							  -| ['compiler_generated'] ) ->
						  ( primop ( 'match_fail'
							     -| ['compiler_generated'] )
							(( {( 'badmatch'
							      -| ['compiler_generated'] ),_3}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    ( <_108> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_108})
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_4> when ( 'true'
					  -| ['compiler_generated'] ) ->
				  ( primop ( 'match_fail'
					     -| ['compiler_generated'] )
					(( {( 'badmatch'
					      -| ['compiler_generated'] ),_4}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_3> when ( 'true'
				-| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'badmatch'
				    -| ['compiler_generated'] ),_3}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1018
	  <A,T = [F|Fs],CF> when 'true' ->
	      %% Line 1025
	      ( case F of
		  ( <( [( [( {T1,_9}
			     -| ['compiler_generated'] )|_10]
			  -| ['compiler_generated'] )|( {I1,_11}
							-| ['compiler_generated'] )]
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			%% Line 1026
			( case A of
			    ( <( [( [( {T2,_12}
				       -| ['compiler_generated'] )|_13]
				    -| ['compiler_generated'] )|( {I2,_14}
								  -| ['compiler_generated'] )]
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  case %% Line 1027
				       ( case <> of
					   %% Line 1028
					   ( <>
						 when ( call ( 'erlang'
							    -| ['compiler_generated'] ):( '<'
											  -| ['compiler_generated'] )
							 (I1,
							  I2)
						     -| ['compiler_generated'] ) ->
						 %% Line 1029
						 ( apply CF
						       (T1, T2)
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					   %% Line 1030
					   ( <> when ( 'true'
						       -| ['compiler_generated'] ) ->
						 ( let <_5> =
						       apply CF
							   (%% Line 1031
							    T2, %% Line 1031
								T1)
						   in  %% Line 1031
						       ( call ( 'erlang'
								-| ['compiler_generated'] ):( 'not'
											      -| ['compiler_generated'] )
							     (_5)
							 -| ['compiler_generated'] )
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					 end
					 -| ['compiler_generated'] ) of
				    <'true'> when 'true' ->
					[F|[A|Fs]]
				    <'false'> when 'true' ->
					[A|T]
				    ( <_125> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_125})
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_4> when ( 'true'
					  -| ['compiler_generated'] ) ->
				  ( primop ( 'match_fail'
					     -| ['compiler_generated'] )
					(( {( 'badmatch'
					      -| ['compiler_generated'] ),_4}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_3> when ( 'true'
				-| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'badmatch'
				    -| ['compiler_generated'] ),_3}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1020
	  <A,_16,_X_CF> when 'true' ->
	      %% Line 1021
	      [A|[]]
	end
'cfun'/3 =
    %% Line 1024
    fun (_0,_1,_2) ->
	%% Line 1025
	case _1 of
	  <[[{T1,_9}|_10]|{I1,_11}]> when 'true' ->
	      %% Line 1026
	      case _2 of
		<[[{T2,_12}|_13]|{I2,_14}]> when 'true' ->
		    %% Line 1027
		    case <> of
		      %% Line 1028
		      <>
			  when call 'erlang':'<'
				(I1,
				 I2) ->
			  %% Line 1029
			  apply _0
			      (T1, T2)
		      %% Line 1030
		      <> when 'true' ->
			  let <_5> =
			      apply _0
				  (%% Line 1031
				   T2, %% Line 1031
				       T1)
			  in  %% Line 1031
			      call 'erlang':'not'
				  (_5)
		    end
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_3})
	    -| ['compiler_generated'] )
	end
'binterm_objects'/2 =
    %% Line 1034
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{_X_T,[_X_Sz|BT]}|Ts],L> when 'true' ->
	      %% Line 1035
	      apply 'binterm_objects'/2
		  (Ts, [BT|L])
	  %% Line 1036
	  <[],L> when 'true' ->
	      %% Line 1037
	      L
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'binterm_objects',2}}] )
	    -| ['compiler_generated'] )
	end
'objects'/2 =
    %% Line 1039
    fun (_0,_1) ->
	case <_0,_1> of
	  <[[_X_Sz|BT]|Ts],L> when 'true' ->
	      %% Line 1040
	      apply 'objects'/2
		  (Ts, [BT|L])
	  %% Line 1041
	  <[],L> when 'true' ->
	      %% Line 1042
	      L
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'objects',2}}] )
	    -| ['compiler_generated'] )
	end
'binterms'/2 =
    %% Line 1044
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{_X_T1,BT1}|[{_X_T2,BT2}|Ts]],L> when 'true' ->
	      %% Line 1045
	      apply 'binterms'/2
		  (Ts, [BT2|[BT1|L]])
	  %% Line 1046
	  <[{_X_T,BT}|Ts],L> when 'true' ->
	      %% Line 1047
	      apply 'binterms'/2
		  (Ts, [BT|L])
	  %% Line 1048
	  <[],L> when 'true' ->
	      %% Line 1049
	      L
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'binterms',2}}] )
	    -| ['compiler_generated'] )
	end
'read_chunk'/6 =
    %% Line 1051
    fun (_0,_1,_2,_3,_4,_5) ->
	%% Line 1052
	case _0 of
	  <{I,IFun}> when 'true' ->
	      %% Line 1053
	      case apply 'read_more'/4
		       (IFun, I, _3, _5) of
		%% Line 1054
		<{Ts,NLSz,NIFun,NW = {'w',_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,'ascending',_33,_34,_35,_36,_37,_38,_39}}> when 'true' ->
		    let <NInEtc> = {%% Line 1055
			 I,%% Line 1055
			   NIFun}
		    in  let <NFs> =
			    apply %% Line 1056
				  'insert'/2
				(%% Line 1056
				 [Ts|NInEtc], _1)
			in  %% Line 1057
			    apply 'merge_files'/5
				(NFs, _2, NLSz, _4, NW)
		%% Line 1058
		<{Ts,NLSz,NIFun,NW = {'w',_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,'descending',_51,_52,_53,_54,_55,_56,_57}}> when 'true' ->
		    let <NInEtc> = {%% Line 1059
			 I,%% Line 1059
			   NIFun}
		    in  let <NFs> =
			    apply %% Line 1060
				  'rinsert'/2
				(%% Line 1060
				 [Ts|NInEtc], _1)
			in  %% Line 1061
			    apply 'merge_files'/5
				(NFs, _2, NLSz, _4, NW)
		%% Line 1062
		<{Ts,NLSz,NIFun,NW}> when 'true' ->
		    let <NInEtc> = {%% Line 1063
			 I,%% Line 1063
			   NIFun}
		    in  %% Line 1064
			( case NW of
			    ( <( {'w',_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_rec38,_69,_70,_71,_72,_73,_74,_75}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <NFs> =
				      apply 'cinsert'/3
					  ([Ts|NInEtc], _1, _rec38)
				  in  %% Line 1065
				      apply 'merge_files'/5
					  (NFs, _2, NLSz, _4, NW)
			      -| ['compiler_generated'] )
			    ( <_76> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','w'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		%% Line 1066
		<{'eof',NW}> when 'true' ->
		    %% Line 1067
		    apply 'merge_files'/5
			(_1, _2, _3, _4, NW)
		( <_15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_15})
		  -| ['compiler_generated'] )
	      end
	  ( <_6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_6})
	    -| ['compiler_generated'] )
	end
'read_more'/4 =
    %% Line 1071
    fun (_0,_1,_2,_3) ->
	%% Line 1072
	case apply _0
		 ({{'merge',_1},[],_2,_3}) of
	  %% Line 1073
	  <{{_28,[],NLSz},NIFun}> when 'true' ->
	      %% Line 1074
	      apply 'read_more'/4
		  (NIFun, _1, NLSz, _3)
	  %% Line 1075
	  <{{_29,L,NLSz},NInFun}> when 'true' ->
	      %% Line 1076
	      ( case _3 of
		  ( <( {'w',_30,_31,_32,_33,_34,_35,_36,_rec39,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_13> =
			    case call 'lists':'member'
				     (_0, _rec39) of
			      %% Line 1077
			      <'true'> when 'true' ->
				  %% Line 1079
				  ( case _3 of
				      ( <( {'w',_49,_50,_51,_52,_53,_54,_55,_rec42,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_8> =
						call 'lists':'delete'
						    (_0, _rec42)
					    in  let <_rec40> =
						    [NInFun|_8]
						in  case _3 of
						      <{'w',_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86}> when 'true' ->
							  call 'erlang':'setelement'
							      (9, _3, _rec40)
						      ( <_87> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','w'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
					-| ['compiler_generated'] )
				      ( <_67> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','w'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 1080
			      <'false'> when 'true' ->
				  _3
			      ( <_12> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_12})
				-| ['compiler_generated'] )
			    end
			in  let <_15> =
				call %% Line 1084
				     'lists':%% Line 1084
					     'reverse'
				    (%% Line 1084
				     L)
			    in  %% Line 1084
				{_15,NLSz,NInFun,_13}
		    -| ['compiler_generated'] )
		  ( <_48> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','w'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1085
	  <'eof'> when 'true' ->
	      %% Line 1087
	      ( case _3 of
		  ( <( {'w',_88,_89,_90,_91,_92,_93,_94,_rec45,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec43> =
			    call 'lists':'delete'
				(_0, _rec45)
			in  case _3 of
			      <{'w',_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125}> when 'true' ->
				  let <_21> =
				      call 'erlang':'setelement'
					  (9, _3, _rec43)
				  in  %% Line 1088
				      {'eof',_21}
			      ( <_126> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','w'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_106> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','w'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_23> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_23})
	    -| ['compiler_generated'] )
	end
'read_fun'/3 =
    %% Line 1091
    fun (_0,_1,_2) ->
	%% Line 1092
	case call 'file':'open'
		 (_0, ['raw'|['binary'|['read'|['compressed']]]]) of
	  %% Line 1093
	  <{'ok',Fd}> when 'true' ->
	      %% Line 1094
	      apply 'read_fun2'/5
		  (Fd, #{}#, 0, _0, _1)
	  %% Line 1095
	  <Error> when 'true' ->
	      %% Line 1096
	      apply 'file_error'/3
		  (_0, Error, _2)
	end
'read_fun2'/5 =
    %% Line 1099
    fun (_0,_1,_2,_3,_4) ->
	%% Line 1100
	( fun (_7) ->
	      case _7 of
		<'close'> when 'true' ->
		    %% Line 1101
		    apply 'close_read_fun'/3
			(_0, _3, _4)
		%% Line 1102
		<{I,L,LSz,W}> when 'true' ->
		    %% Line 1103
		    case apply 'read_objs'/8
			     (_0, _3, I, L, _1, _2, LSz, W) of
		      %% Line 1104
		      <{{I1,L1,Bin1,Size1},LSz1}> when 'true' ->
			  let <NIFun> =
			      apply %% Line 1105
				    'read_fun2'/5
				  (_0, %% Line 1105
				       Bin1, %% Line 1105
					     Size1, _3, _4)
			  in  %% Line 1106
			      {{I1,L1,LSz1},NIFun}
		      %% Line 1107
		      <'eof'> when 'true' ->
			  do  %% Line 1108
			      apply 'close_read_fun'/3
				  (_0, _3, _4)
			      %% Line 1109
			      'eof'
		      ( <_6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_6})
			-| ['compiler_generated'] )
		    end
		( <_8> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_8})
			-| [{'function_name',{'-read_fun2/5-fun-0-',1}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-read_fun2/5-fun-0-'}}] )
'close_read_fun'/3 =
    %% Line 1113
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Fd,_X_FileName,'user'> when 'true' ->
	      do  %% Line 1114
		  ( call ( 'file'
			   -| ['result_not_wanted'] ):( 'close'
							-| ['result_not_wanted'] )
			(Fd)
		    -| ['result_not_wanted'] )
		  %% Line 1115
		  'ok'
	  %% Line 1116
	  <Fd,FileName,'fsort'> when 'true' ->
	      do  %% Line 1117
		  ( call ( 'file'
			   -| ['result_not_wanted'] ):( 'close'
							-| ['result_not_wanted'] )
			(Fd)
		    -| ['result_not_wanted'] )
		  do  %% Line 1118
		      ( call ( 'file'
			       -| ['result_not_wanted'] ):( 'delete'
							    -| ['result_not_wanted'] )
			    (FileName)
			-| ['result_not_wanted'] )
		      %% Line 1119
		      'ok'
	  ( <_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7,_6})
		  -| [{'function_name',{'close_read_fun',3}}] )
	    -| ['compiler_generated'] )
	end
'read_objs'/8 =
    %% Line 1121
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	let <Max> =
	    call %% Line 1122
		 'erlang':%% Line 1122
			  'max'
		(_5, %% Line 1122
		     16384)
	in  let <BSz0> =
		call %% Line 1123
		     'erlang':%% Line 1123
			      'byte_size'
		    (_4)
	    in  let <_12> =
		    call %% Line 1124
			 'erlang':%% Line 1124
				  '-'
			(_5, %% Line 1124
			     BSz0)
		in  %% Line 1124
		    ( case _7 of
			( <( {'w',_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_rec46,_46}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <Min> =
				  call 'erlang':'+'
				      (_12, _rec46)
			      in  let <NoBytes> =
				      call %% Line 1125
					   'erlang':%% Line 1125
						    'max'
					  (%% Line 1125
					   Min, %% Line 1125
						Max)
				  in  %% Line 1126
				      case apply 'read'/4
					       (_0, _1, NoBytes, _7) of
					%% Line 1127
					<{'ok',Bin}> when 'true' ->
					    let <BSz> =
						call %% Line 1128
						     'erlang':%% Line 1128
							      'byte_size'
						    (%% Line 1128
						     Bin)
					    in  let <NLSz> =
						    call %% Line 1129
							 'erlang':%% Line 1129
								  '+'
							(_6, %% Line 1129
							     BSz)
						in  let <_17> =
							catch
							    %% Line 1130
							    apply 'file_loop'/9
								(_3, _2, _4, Bin, _5, BSz0, BSz, Min, _7)
						    in  %% Line 1130
							case _17 of
							  %% Line 1132
							  <{'EXIT',_X_R}> when 'true' ->
							      %% Line 1133
							      apply 'error'/2
								  ({'error',{'bad_object',_1}}, _7)
							  %% Line 1134
							  <Reply> when 'true' ->
							      %% Line 1135
							      {Reply,NLSz}
							end
					%% Line 1137
					<'eof'>
					    when try
						  let <_19> =
						      call 'erlang':'byte_size'
							  (_4)
						  in  call 'erlang':'=:='
							  (_19, 0)
					      of <Try> ->
						  Try
					      catch <T,R> ->
						  'false' ->
					    %% Line 1138
					    'eof'
					%% Line 1139
					<'eof'> when 'true' ->
					    %% Line 1140
					    apply 'error'/2
						({'error',{'premature_eof',_1}}, _7)
					( <_20> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_20})
					  -| ['compiler_generated'] )
				      end
			  -| ['compiler_generated'] )
			( <_47> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','w'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
'file_loop'/9 =
    %% Line 1143
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <L,I,_X_B1,B2,Sz,0,_X_B2Sz,_X_Min,W> when 'true' ->
	      %% Line 1144
	      apply 'file_loop'/5
		  (L, I, B2, Sz, W)
	  %% Line 1145
	  <L,I,B1,B2,Sz,_X_B1Sz,B2Sz,Min,W>
	      when call 'erlang':'>'
		    (B2Sz,
		     Min) ->
	      %% Line 1146
	      case call 'erlang':'split_binary'
		       (B2, Min) of
		<{B3,B4}> when 'true' ->
		    let <_10> =
			call %% Line 1147
			     'erlang':%% Line 1147
				      'list_to_binary'
			    (%% Line 1147
			     [B1|[B3|[]]])
		    in  %% Line 1147
			case apply 'file_loop'/5
				 (L, I, _10, Sz, W) of
			  <{I1,L1,#{}#,Sz1}> when 'true' ->
			      %% Line 1148
			      apply 'file_loop'/5
				  (L1, I1, B4, Sz1, W)
			  ( <_11> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_11})
			    -| ['compiler_generated'] )
			end
		( <_9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1149
	  <L,I,B1,B2,Sz,_X_B1Sz,_X_B2Sz,_X_Min,W> when 'true' ->
	      let <_12> =
		  call %% Line 1150
		       'erlang':%% Line 1150
				'list_to_binary'
		      (%% Line 1150
		       [B1|[B2|[]]])
	      in  %% Line 1150
		  apply 'file_loop'/5
		      (L, I, _12, Sz, W)
	end
'file_loop'/5 =
    %% Line 1152
    fun (_0,_1,_2,_3,_4) ->
	%% Line 1153
	case _4 of
	  <{'w',Kp,_11,_12,_13,_14,_15,_16,_17,Format,_18,_19,_20,_21,_22,_23,_24,_25,HdLen,_26}> when 'true' ->
	      %% Line 1154
	      apply 'file_loop1'/7
		  (_0, _1, _2, _3, Kp, Format, HdLen)
	  ( <_5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_5})
	    -| ['compiler_generated'] )
	end
'file_loop1'/7 =
    %% Line 1156
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <L,I,HB,0,Kp,F,HdLen> when 'true' ->
	      %% Line 1157
	      case HB of
		<#{#<Size>(HdLen,8,'integer',['unsigned'|['big']]),
		   #<B>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_8> =
			#{#<%% Line 1158
			    Size>(%% Line 1158
				  HdLen,8,'integer',['unsigned'|['big']])}#
		    in  %% Line 1158
			apply 'file_loop2'/8
			    (L, I, B, Size, _8, Kp, F, HdLen)
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1159
	  <L,I,B,Sz,Kp,F,HdLen> when 'true' ->
	      let <_9> =
		  #{#<%% Line 1160
		      Sz>(%% Line 1160
			  HdLen,8,'integer',['unsigned'|['big']])}#
	      in  %% Line 1160
		  apply 'file_loop2'/8
		      (L, I, B, Sz, _9, Kp, F, HdLen)
	end
'file_loop2'/8 =
    %% Line 1162
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <L,_X_I,B,Sz,SzB,0,'binary',HdLen> when 'true' ->
	      %% Line 1163
	      case apply 'file_binloop'/5
		       (L, Sz, SzB, B, HdLen) of
		<{NL,NB,NSz,NSzB}> when 'true' ->
		    %% Line 1164
		    case <> of
		      %% Line 1165
		      <>
			  when try
				let <_9> =
				    call 'erlang':'byte_size'
					(NB)
				in  call 'erlang':'=:='
					(_9, NSz)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false' ->
			  %% Line 1166
			  case NB of
			    <#{#<Bin>(NSz,8,'binary',['unsigned'|['big']])}#> when 'true' ->
				%% Line 1167
				{0,[{Bin,[NSzB|Bin]}|NL],#{}#,0}
			    ( <_10> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_10})
			      -| ['compiler_generated'] )
			  end
		      %% Line 1168
		      <> when 'true' ->
			  %% Line 1169
			  {0,NL,NB,NSz}
		    end
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1171
	  <L,_X_I,B,Sz,SzB,0,Fun,HdLen> when 'true' ->
	      %% Line 1172
	      apply 'file_binterm_loop'/6
		  (L, Sz, SzB, B, Fun, HdLen)
	  %% Line 1173
	  <L,{'merge',I},B,Sz,SzB,Kp,Fun,HdLen> when 'true' ->
	      %% Line 1174
	      apply 'merge_loop'/8
		  (Kp, I, L, Sz, SzB, B, Fun, HdLen)
	  %% Line 1175
	  <L,I,B,Sz,SzB,Kp,Fun,HdLen>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 1176
	      apply 'key_loop'/8
		  (Kp, I, L, Sz, SzB, B, Fun, HdLen)
	  ( <_18,_17,_16,_15,_14,_13,_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_18,_17,_16,_15,_14,_13,_12,_11})
		  -| [{'function_name',{'file_loop2',8}}] )
	    -| ['compiler_generated'] )
	end
'file_binloop'/5 =
    %% Line 1178
    fun (_0,_1,_2,_3,_4) ->
	%% Line 1179
	case _3 of
	  %% Line 1180
	  <#{#<Bin>(_1,8,'binary',['unsigned'|['big']]),
	     #<NSizeB>(_4,8,'binary',['unsigned'|['big']]),
	     #<R>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1181
	      case NSizeB of
		<#{#<NSize>(_4,8,'integer',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 1182
		    apply 'file_binloop'/5
			([{Bin,[_2|Bin]}|_0], NSize, NSizeB, R, _4)
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1183
	  <_12> when 'true' ->
	      %% Line 1184
	      {_0,_3,_1,_2}
	end
'file_binterm_loop'/6 =
    %% Line 1187
    fun (_0,_1,_2,_3,_4,_5) ->
	%% Line 1188
	case _3 of
	  %% Line 1189
	  <#{#<BinTerm>(_1,8,'binary',['unsigned'|['big']]),
	     #<NSizeB>(_5,8,'binary',['unsigned'|['big']]),
	     #<R>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1190
	      case NSizeB of
		<#{#<NSize>(_5,8,'integer',['unsigned'|['big']])}#> when 'true' ->
		    let <BT> =
			[_2|%% Line 1191
			    BinTerm]
		    in  let <Term> =
			    apply _4
				(%% Line 1192
				 BinTerm)
			in  %% Line 1193
			    apply 'file_binterm_loop'/6
				([{Term,BT}|_0], NSize, NSizeB, R, _4, _5)
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1194
	  <#{#<BinTerm>(_1,8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <Term> =
		  apply _4
		      (%% Line 1195
		       BinTerm)
	      in  let <NL> =
		      [%% Line 1196
		       {Term,[_2|BinTerm]}|_0]
		  in  %% Line 1197
		      {0,NL,#{}#,0}
	  %% Line 1198
	  <_18> when 'true' ->
	      %% Line 1199
	      {0,_0,_3,_1}
	end
'key_loop'/8 =
    %% Line 1202
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	%% Line 1203
	case _5 of
	  %% Line 1204
	  <#{#<BinTerm>(_3,8,'binary',['unsigned'|['big']]),
	     #<NSizeB>(_7,8,'binary',['unsigned'|['big']]),
	     #<R>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1205
	      case NSizeB of
		<#{#<NSize>(_7,8,'integer',['unsigned'|['big']])}#> when 'true' ->
		    let <BT> =
			[_4|%% Line 1206
			    BinTerm]
		    in  let <_10> =
			    apply _6
				(%% Line 1207
				 BinTerm)
			in  let <UniqueKey> =
				case <_0,_10> of
				  %% Line 1283
				  ( <Kp,T>
					when ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'is_integer'
										 -| ['compiler_generated'] )
						(Kp)
					    -| ['compiler_generated'] ) ->
					%% Line 1284
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'element'
									       -| ['compiler_generated'] )
					      (Kp, T)
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  %% Line 1285
				  ( <( [Kp1|( [Kp2|( []
						     -| ['compiler_generated'] )]
					      -| ['compiler_generated'] )]
				       -| ['compiler_generated'] ),T> when ( 'true'
									     -| ['compiler_generated'] ) ->
					( let <_30> =
					      call %% Line 1286
						   ( 'erlang'
						     -| ['compiler_generated'] ):%% Line 1286
										 ( 'element'
										   -| ['compiler_generated'] )
						  (%% Line 1286
						   Kp1, %% Line 1286
							T)
					  in  ( let <_31> =
						    call %% Line 1286
							 ( 'erlang'
							   -| ['compiler_generated'] ):%% Line 1286
										       ( 'element'
											 -| ['compiler_generated'] )
							(%% Line 1286
							 Kp2, %% Line 1286
							      T)
						in  %% Line 1286
						    ( [_30|( [_31|( []
								    -| ['compiler_generated'] )]
							     -| ['compiler_generated'] )]
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  %% Line 1287
				  ( <( [Kp1|( [Kp2|Kps]
					      -| ['compiler_generated'] )]
				       -| ['compiler_generated'] ),T> when ( 'true'
									     -| ['compiler_generated'] ) ->
					( let <_32> =
					      call %% Line 1288
						   ( 'erlang'
						     -| ['compiler_generated'] ):%% Line 1288
										 ( 'element'
										   -| ['compiler_generated'] )
						  (%% Line 1288
						   Kp1, %% Line 1288
							T)
					  in  ( let <_33> =
						    call %% Line 1288
							 ( 'erlang'
							   -| ['compiler_generated'] ):%% Line 1288
										       ( 'element'
											 -| ['compiler_generated'] )
							(%% Line 1288
							 Kp2, %% Line 1288
							      T)
						in  ( let <_34> =
							  apply %% Line 1288
								'make_key2'/2
							      (%% Line 1288
							       Kps, %% Line 1288
								    T)
						      in  %% Line 1288
							  ( [_32|( [_33|_34]
								   -| ['compiler_generated'] )]
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <_8,_35> when ( 'true'
						    -| ['compiler_generated'] ) ->
					%% Line 1283
					( primop ( 'match_fail'
						   -| ['compiler_generated'] )
					      (( {( 'function_clause'
						    -| ['compiler_generated'] ),_8,_35}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			    in  let <E> = {%% Line 1208
				     UniqueKey,%% Line 1208
					       BT}
				in  let <_13> =
					call %% Line 1209
					     'erlang':%% Line 1209
						      '+'
					    (_1, %% Line 1209
						 1)
				    in  %% Line 1209
					apply 'key_loop'/8
					    (_0, _13, [E|_2], NSize, NSizeB, R, _6, _7)
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1210
	  <#{#<BinTerm>(_3,8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_14> =
		  apply _6
		      (%% Line 1211
		       BinTerm)
	      in  let <UniqueKey> =
		      case <_0,_14> of
			%% Line 1283
			( <Kp,T>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'is_integer'
								       -| ['compiler_generated'] )
				      (Kp)
				  -| ['compiler_generated'] ) ->
			      %% Line 1284
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'element'
								     -| ['compiler_generated'] )
				    (Kp, T)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 1285
			( <( [Kp1|( [Kp2|( []
					   -| ['compiler_generated'] )]
				    -| ['compiler_generated'] )]
			     -| ['compiler_generated'] ),T> when ( 'true'
								   -| ['compiler_generated'] ) ->
			      ( let <_38> =
				    call %% Line 1286
					 ( 'erlang'
					   -| ['compiler_generated'] ):%% Line 1286
								       ( 'element'
									 -| ['compiler_generated'] )
					(%% Line 1286
					 Kp1, %% Line 1286
					      T)
				in  ( let <_39> =
					  call %% Line 1286
					       ( 'erlang'
						 -| ['compiler_generated'] ):%% Line 1286
									     ( 'element'
									       -| ['compiler_generated'] )
					      (%% Line 1286
					       Kp2, %% Line 1286
						    T)
				      in  %% Line 1286
					  ( [_38|( [_39|( []
							  -| ['compiler_generated'] )]
						   -| ['compiler_generated'] )]
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 1287
			( <( [Kp1|( [Kp2|Kps]
				    -| ['compiler_generated'] )]
			     -| ['compiler_generated'] ),T> when ( 'true'
								   -| ['compiler_generated'] ) ->
			      ( let <_40> =
				    call %% Line 1288
					 ( 'erlang'
					   -| ['compiler_generated'] ):%% Line 1288
								       ( 'element'
									 -| ['compiler_generated'] )
					(%% Line 1288
					 Kp1, %% Line 1288
					      T)
				in  ( let <_41> =
					  call %% Line 1288
					       ( 'erlang'
						 -| ['compiler_generated'] ):%% Line 1288
									     ( 'element'
									       -| ['compiler_generated'] )
					      (%% Line 1288
					       Kp2, %% Line 1288
						    T)
				      in  ( let <_42> =
						apply %% Line 1288
						      'make_key2'/2
						    (%% Line 1288
						     Kps, %% Line 1288
							  T)
					    in  %% Line 1288
						( [_40|( [_41|_42]
							 -| ['compiler_generated'] )]
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			( <_8,_43> when ( 'true'
					  -| ['compiler_generated'] ) ->
			      %% Line 1283
			      ( primop ( 'match_fail'
					 -| ['compiler_generated'] )
				    (( {( 'function_clause'
					  -| ['compiler_generated'] ),_8,_43}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		  in  let <NL> =
			  [%% Line 1212
			   {UniqueKey,[_4|BinTerm]}|_2]
		      in  let <_17> =
			      call %% Line 1213
				   'erlang':%% Line 1213
					    '+'
				  (_1, %% Line 1213
				       1)
			  in  %% Line 1213
			      {_17,NL,#{}#,0}
	  %% Line 1214
	  <_27> when 'true' ->
	      %% Line 1215
	      {_1,_2,_5,_3}
	end
'merge_loop'/8 =
    %% Line 1218
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	%% Line 1219
	case _5 of
	  %% Line 1220
	  <#{#<BinTerm>(_3,8,'binary',['unsigned'|['big']]),
	     #<NSizeB>(_7,8,'binary',['unsigned'|['big']]),
	     #<R>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1221
	      case NSizeB of
		<#{#<NSize>(_7,8,'integer',['unsigned'|['big']])}#> when 'true' ->
		    let <BT> =
			[_4|%% Line 1222
			    BinTerm]
		    in  let <_10> =
			    apply _6
				(%% Line 1223
				 BinTerm)
			in  let <UniqueKey> =
				case <_0,_1,_10> of
				  %% Line 1293
				  ( <Kp,_29,T>
					when ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'is_integer'
										 -| ['compiler_generated'] )
						(Kp)
					    -| ['compiler_generated'] ) ->
					( let <_30> =
					      call %% Line 1294
						   ( 'erlang'
						     -| ['compiler_generated'] ):%% Line 1294
										 ( 'element'
										   -| ['compiler_generated'] )
						  (%% Line 1294
						   Kp, %% Line 1294
						       T)
					  in  %% Line 1294
					      ( [_30|_29]
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  %% Line 1295
				  ( <( [Kp1|( [Kp2|( []
						     -| ['compiler_generated'] )]
					      -| ['compiler_generated'] )]
				       -| ['compiler_generated'] ),_31,T> when ( 'true'
										 -| ['compiler_generated'] ) ->
					( let <_32> =
					      call %% Line 1296
						   ( 'erlang'
						     -| ['compiler_generated'] ):%% Line 1296
										 ( 'element'
										   -| ['compiler_generated'] )
						  (%% Line 1296
						   Kp1, %% Line 1296
							T)
					  in  ( let <_33> =
						    call %% Line 1296
							 ( 'erlang'
							   -| ['compiler_generated'] ):%% Line 1296
										       ( 'element'
											 -| ['compiler_generated'] )
							(%% Line 1296
							 Kp2, %% Line 1296
							      T)
						in  %% Line 1296
						    ( [( [_32|_33]
							 -| ['compiler_generated'] )|_31]
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  %% Line 1297
				  ( <( [Kp1|( [Kp2|Kps]
					      -| ['compiler_generated'] )]
				       -| ['compiler_generated'] ),_34,T> when ( 'true'
										 -| ['compiler_generated'] ) ->
					( let <_35> =
					      call %% Line 1298
						   ( 'erlang'
						     -| ['compiler_generated'] ):%% Line 1298
										 ( 'element'
										   -| ['compiler_generated'] )
						  (%% Line 1298
						   Kp1, %% Line 1298
							T)
					  in  ( let <_36> =
						    call %% Line 1298
							 ( 'erlang'
							   -| ['compiler_generated'] ):%% Line 1298
										       ( 'element'
											 -| ['compiler_generated'] )
							(%% Line 1298
							 Kp2, %% Line 1298
							      T)
						in  ( let <_8> =
							  apply %% Line 1298
								'make_key2'/2
							      (%% Line 1298
							       Kps, %% Line 1298
								    T)
						      in  %% Line 1298
							  ( [( [_35|( [_36|_8]
								      -| ['compiler_generated'] )]
							       -| ['compiler_generated'] )|_34]
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <_11,_37,_9> when ( 'true'
							-| ['compiler_generated'] ) ->
					%% Line 1293
					( primop ( 'match_fail'
						   -| ['compiler_generated'] )
					      (( {( 'function_clause'
						    -| ['compiler_generated'] ),_11,_37,_9}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			    in  let <E> = {%% Line 1224
				     UniqueKey,%% Line 1224
					       BT}
				in  %% Line 1225
				    apply 'merge_loop'/8
					(_0, _1, [E|_2], NSize, NSizeB, R, _6, _7)
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1226
	  <#{#<BinTerm>(_3,8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_13> =
		  apply _6
		      (%% Line 1227
		       BinTerm)
	      in  let <UniqueKey> =
		      case <_0,_1,_13> of
			%% Line 1293
			( <Kp,_41,T>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'is_integer'
								       -| ['compiler_generated'] )
				      (Kp)
				  -| ['compiler_generated'] ) ->
			      ( let <_42> =
				    call %% Line 1294
					 ( 'erlang'
					   -| ['compiler_generated'] ):%% Line 1294
								       ( 'element'
									 -| ['compiler_generated'] )
					(%% Line 1294
					 Kp, %% Line 1294
					     T)
				in  %% Line 1294
				    ( [_42|_41]
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 1295
			( <( [Kp1|( [Kp2|( []
					   -| ['compiler_generated'] )]
				    -| ['compiler_generated'] )]
			     -| ['compiler_generated'] ),_43,T> when ( 'true'
								       -| ['compiler_generated'] ) ->
			      ( let <_44> =
				    call %% Line 1296
					 ( 'erlang'
					   -| ['compiler_generated'] ):%% Line 1296
								       ( 'element'
									 -| ['compiler_generated'] )
					(%% Line 1296
					 Kp1, %% Line 1296
					      T)
				in  ( let <_45> =
					  call %% Line 1296
					       ( 'erlang'
						 -| ['compiler_generated'] ):%% Line 1296
									     ( 'element'
									       -| ['compiler_generated'] )
					      (%% Line 1296
					       Kp2, %% Line 1296
						    T)
				      in  %% Line 1296
					  ( [( [_44|_45]
					       -| ['compiler_generated'] )|_43]
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 1297
			( <( [Kp1|( [Kp2|Kps]
				    -| ['compiler_generated'] )]
			     -| ['compiler_generated'] ),_46,T> when ( 'true'
								       -| ['compiler_generated'] ) ->
			      ( let <_47> =
				    call %% Line 1298
					 ( 'erlang'
					   -| ['compiler_generated'] ):%% Line 1298
								       ( 'element'
									 -| ['compiler_generated'] )
					(%% Line 1298
					 Kp1, %% Line 1298
					      T)
				in  ( let <_48> =
					  call %% Line 1298
					       ( 'erlang'
						 -| ['compiler_generated'] ):%% Line 1298
									     ( 'element'
									       -| ['compiler_generated'] )
					      (%% Line 1298
					       Kp2, %% Line 1298
						    T)
				      in  ( let <_8> =
						apply %% Line 1298
						      'make_key2'/2
						    (%% Line 1298
						     Kps, %% Line 1298
							  T)
					    in  %% Line 1298
						( [( [_47|( [_48|_8]
							    -| ['compiler_generated'] )]
						     -| ['compiler_generated'] )|_46]
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			( <_11,_10,_9> when ( 'true'
					      -| ['compiler_generated'] ) ->
			      %% Line 1293
			      ( primop ( 'match_fail'
					 -| ['compiler_generated'] )
				    (( {( 'function_clause'
					  -| ['compiler_generated'] ),_11,_10,_9}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		  in  let <NL> =
			  [%% Line 1228
			   {UniqueKey,[_4|BinTerm]}|_2]
		      in  %% Line 1229
			  {{'merge',_1},NL,#{}#,0}
	  %% Line 1230
	  <_25> when 'true' ->
	      %% Line 1231
	      {{'merge',_1},_2,_5,_3}
	end
'fun_objs'/6 =
    %% Line 1234
    fun (_0,_1,_2,_3,_4,_5) ->
	%% Line 1235
	case _5 of
	  <{'w',Keypos,_15,_16,_17,_18,_19,_20,_21,Format,_22,_23,_24,_25,_26,_27,_28,_29,HL,_30}> when 'true' ->
	      let <_7> =
		  catch
		      %% Line 1236
		      apply 'fun_loop'/8
			  (_0, _1, _2, _3, _4, Keypos, Format, HL)
	      in  %% Line 1236
		  case _7 of
		    %% Line 1237
		    <{'EXIT',_X_R}> when 'true' ->
			%% Line 1238
			apply 'error'/2
			    ({'error','bad_object'}, _5)
		    %% Line 1239
		    <Reply> when 'true' ->
			%% Line 1240
			Reply
		  end
	  ( <_6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_6})
	    -| ['compiler_generated'] )
	end
'fun_loop'/8 =
    %% Line 1243
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <Objs,L,LSz,RunSize,_X_I,0,'binary',HdLen> when 'true' ->
	      %% Line 1244
	      apply 'fun_binloop'/5
		  (Objs, L, LSz, RunSize, HdLen)
	  %% Line 1245
	  <Objs,L,LSz,RunSize,_X_I,0,Fun,HdLen> when 'true' ->
	      %% Line 1246
	      apply 'fun_loop'/6
		  (Objs, L, LSz, RunSize, Fun, HdLen)
	  %% Line 1247
	  <Objs,L,LSz,RunSize,{'merge',I},Keypos,Fun,HdLen> when 'true' ->
	      %% Line 1248
	      apply 'fun_mergeloop'/8
		  (Objs, L, LSz, RunSize, I, Keypos, Fun, HdLen)
	  %% Line 1249
	  <Objs,L,LSz,RunSize,I,Keypos,Fun,HdLen>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 1250
	      apply 'fun_keyloop'/8
		  (Objs, L, LSz, RunSize, I, Keypos, Fun, HdLen)
	  ( <_15,_14,_13,_12,_11,_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_15,_14,_13,_12,_11,_10,_9,_8})
		  -| [{'function_name',{'fun_loop',8}}] )
	    -| ['compiler_generated'] )
	end
'fun_binloop'/5 =
    %% Line 1252
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <[B|Bs],L,LSz,RunSize,HL>
	      when call 'erlang':'<'
		    (LSz,
		     RunSize) ->
	      let <Size> =
		  call %% Line 1253
		       'erlang':%% Line 1253
				'byte_size'
		      (%% Line 1253
		       B)
	      in  let <_6> =
		      #{#<%% Line 1254
			  Size>(%% Line 1254
				HL,8,'integer',['unsigned'|['big']])}#
		  in  let <Obj> =
			  {%% Line 1254
			   B,%% Line 1254
			     [_6|B]}
		      in  let <_8> =
			      call %% Line 1255
				   'erlang':%% Line 1255
					    '+'
				  (%% Line 1255
				   LSz, %% Line 1255
					Size)
			  in  %% Line 1255
			      apply 'fun_binloop'/5
				  (Bs, [Obj|L], _8, RunSize, HL)
	  %% Line 1256
	  <Bs,L,LSz,_X_RunSize,_X_HL> when 'true' ->
	      %% Line 1257
	      {0,Bs,L,LSz}
	end
'fun_loop'/6 =
    %% Line 1259
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <[B|Bs],L,LSz,RunSize,Fun,HL>
	      when call 'erlang':'<'
		    (LSz,
		     RunSize) ->
	      let <Size> =
		  call %% Line 1260
		       'erlang':%% Line 1260
				'byte_size'
		      (%% Line 1260
		       B)
	      in  let <_8> =
		      apply %% Line 1261
			    Fun
			  (%% Line 1261
			   B)
		  in  let <_7> =
			  #{#<%% Line 1261
			      Size>(%% Line 1261
				    HL,8,'integer',['unsigned'|['big']])}#
		      in  let <Obj> =
			      {_8,%% Line 1261
				  [_7|B]}
			  in  let <_10> =
				  call %% Line 1262
				       'erlang':%% Line 1262
						'+'
				      (%% Line 1262
				       LSz, %% Line 1262
					    Size)
			      in  %% Line 1262
				  apply 'fun_loop'/6
				      (Bs, [Obj|L], _10, RunSize, Fun, HL)
	  %% Line 1263
	  <Bs,L,LSz,_X_RunSize,_X_Fun,_X_HL> when 'true' ->
	      %% Line 1264
	      {0,Bs,L,LSz}
	end
'fun_keyloop'/8 =
    %% Line 1266
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <[B|Bs],L,LSz,RunSize,I,Kp,Fun,HL>
	      when call 'erlang':'<'
		    (LSz,
		     RunSize) ->
	      let <Size> =
		  call %% Line 1267
		       'erlang':%% Line 1267
				'byte_size'
		      (%% Line 1267
		       B)
	      in  let <_9> =
		      apply %% Line 1268
			    Fun
			  (%% Line 1268
			   B)
		  in  let <UniqueKey> =
			  case %% Line 1268
			       <Kp,_9> of
			    %% Line 1283
			    ( <_25,T>
				  when ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'is_integer'
									   -| ['compiler_generated'] )
					  (_25)
				      -| ['compiler_generated'] ) ->
				  %% Line 1284
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'element'
									 -| ['compiler_generated'] )
					(_25, T)
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 1285
			    ( <( [Kp1|( [Kp2|( []
					       -| ['compiler_generated'] )]
					-| ['compiler_generated'] )]
				 -| ['compiler_generated'] ),T> when ( 'true'
								       -| ['compiler_generated'] ) ->
				  ( let <_26> =
					call %% Line 1286
					     ( 'erlang'
					       -| ['compiler_generated'] ):%% Line 1286
									   ( 'element'
									     -| ['compiler_generated'] )
					    (%% Line 1286
					     Kp1, %% Line 1286
						  T)
				    in  ( let <_27> =
					      call %% Line 1286
						   ( 'erlang'
						     -| ['compiler_generated'] ):%% Line 1286
										 ( 'element'
										   -| ['compiler_generated'] )
						  (%% Line 1286
						   Kp2, %% Line 1286
							T)
					  in  %% Line 1286
					      ( [_26|( [_27|( []
							      -| ['compiler_generated'] )]
						       -| ['compiler_generated'] )]
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 1287
			    ( <( [Kp1|( [Kp2|Kps]
					-| ['compiler_generated'] )]
				 -| ['compiler_generated'] ),T> when ( 'true'
								       -| ['compiler_generated'] ) ->
				  ( let <_28> =
					call %% Line 1288
					     ( 'erlang'
					       -| ['compiler_generated'] ):%% Line 1288
									   ( 'element'
									     -| ['compiler_generated'] )
					    (%% Line 1288
					     Kp1, %% Line 1288
						  T)
				    in  ( let <_29> =
					      call %% Line 1288
						   ( 'erlang'
						     -| ['compiler_generated'] ):%% Line 1288
										 ( 'element'
										   -| ['compiler_generated'] )
						  (%% Line 1288
						   Kp2, %% Line 1288
							T)
					  in  ( let <_30> =
						    apply %% Line 1288
							  'make_key2'/2
							(%% Line 1288
							 Kps, %% Line 1288
							      T)
						in  %% Line 1288
						    ( [_28|( [_29|_30]
							     -| ['compiler_generated'] )]
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_8,_31> when ( 'true'
					      -| ['compiler_generated'] ) ->
				  %% Line 1283
				  ( primop ( 'match_fail'
					     -| ['compiler_generated'] )
					(( {( 'function_clause'
					      -| ['compiler_generated'] ),_8,_31}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      in  let <_11> =
			      #{#<%% Line 1269
				  Size>(%% Line 1269
					HL,8,'integer',['unsigned'|['big']])}#
			  in  let <E> =
				  {%% Line 1269
				   UniqueKey,%% Line 1269
					     [_11|B]}
			      in  let <_14> =
				      call %% Line 1270
					   'erlang':%% Line 1270
						    '+'
					  (%% Line 1270
					   LSz, %% Line 1270
						Size)
				  in  let <_13> =
					  call %% Line 1270
					       'erlang':%% Line 1270
							'+'
					      (%% Line 1270
					       I, %% Line 1270
						  1)
				      in  %% Line 1270
					  apply 'fun_keyloop'/8
					      (Bs, [E|L], _14, RunSize, _13, Kp, Fun, HL)
	  %% Line 1271
	  <Bs,L,LSz,_X_RunSize,I,_X_Kp,_X_Fun,_X_HL> when 'true' ->
	      %% Line 1272
	      {I,Bs,L,LSz}
	end
'fun_mergeloop'/8 =
    %% Line 1274
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <[B|Bs],L,LSz,RunSize,I,Kp,Fun,HL>
	      when call 'erlang':'<'
		    (LSz,
		     RunSize) ->
	      let <Size> =
		  call %% Line 1275
		       'erlang':%% Line 1275
				'byte_size'
		      (%% Line 1275
		       B)
	      in  let <_9> =
		      apply %% Line 1276
			    Fun
			  (%% Line 1276
			   B)
		  in  let <UniqueKey> =
			  case %% Line 1276
			       <Kp,I,_9> of
			    %% Line 1293
			    ( <_25,_26,T>
				  when ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'is_integer'
									   -| ['compiler_generated'] )
					  (_25)
				      -| ['compiler_generated'] ) ->
				  ( let <_27> =
					call %% Line 1294
					     ( 'erlang'
					       -| ['compiler_generated'] ):%% Line 1294
									   ( 'element'
									     -| ['compiler_generated'] )
					    (_25, %% Line 1294
						  T)
				    in  %% Line 1294
					( [_27|_26]
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 1295
			    ( <( [Kp1|( [Kp2|( []
					       -| ['compiler_generated'] )]
					-| ['compiler_generated'] )]
				 -| ['compiler_generated'] ),_28,T> when ( 'true'
									   -| ['compiler_generated'] ) ->
				  ( let <_29> =
					call %% Line 1296
					     ( 'erlang'
					       -| ['compiler_generated'] ):%% Line 1296
									   ( 'element'
									     -| ['compiler_generated'] )
					    (%% Line 1296
					     Kp1, %% Line 1296
						  T)
				    in  ( let <_30> =
					      call %% Line 1296
						   ( 'erlang'
						     -| ['compiler_generated'] ):%% Line 1296
										 ( 'element'
										   -| ['compiler_generated'] )
						  (%% Line 1296
						   Kp2, %% Line 1296
							T)
					  in  %% Line 1296
					      ( [( [_29|_30]
						   -| ['compiler_generated'] )|_28]
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 1297
			    ( <( [Kp1|( [Kp2|Kps]
					-| ['compiler_generated'] )]
				 -| ['compiler_generated'] ),_31,T> when ( 'true'
									   -| ['compiler_generated'] ) ->
				  ( let <_32> =
					call %% Line 1298
					     ( 'erlang'
					       -| ['compiler_generated'] ):%% Line 1298
									   ( 'element'
									     -| ['compiler_generated'] )
					    (%% Line 1298
					     Kp1, %% Line 1298
						  T)
				    in  ( let <_33> =
					      call %% Line 1298
						   ( 'erlang'
						     -| ['compiler_generated'] ):%% Line 1298
										 ( 'element'
										   -| ['compiler_generated'] )
						  (%% Line 1298
						   Kp2, %% Line 1298
							T)
					  in  ( let <_8> =
						    apply %% Line 1298
							  'make_key2'/2
							(%% Line 1298
							 Kps, %% Line 1298
							      T)
						in  %% Line 1298
						    ( [( [_32|( [_33|_8]
								-| ['compiler_generated'] )]
							 -| ['compiler_generated'] )|_31]
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_11,_10,_34> when ( 'true'
						   -| ['compiler_generated'] ) ->
				  %% Line 1293
				  ( primop ( 'match_fail'
					     -| ['compiler_generated'] )
					(( {( 'function_clause'
					      -| ['compiler_generated'] ),_11,_10,_34}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      in  let <_11> =
			      #{#<%% Line 1277
				  Size>(%% Line 1277
					HL,8,'integer',['unsigned'|['big']])}#
			  in  let <E> =
				  {%% Line 1277
				   UniqueKey,%% Line 1277
					     [_11|B]}
			      in  let <_13> =
				      call %% Line 1278
					   'erlang':%% Line 1278
						    '+'
					  (%% Line 1278
					   LSz, %% Line 1278
						Size)
				  in  %% Line 1278
				      apply 'fun_mergeloop'/8
					  (Bs, [E|L], _13, RunSize, I, Kp, Fun, HL)
	  %% Line 1279
	  <Bs,L,LSz,_X_RunSize,I,_X_Kp,_X_Fun,_X_HL> when 'true' ->
	      %% Line 1280
	      {{'merge',I},Bs,L,LSz}
	end
'make_key'/2 =
    %% Line 1283
    fun (_0,_1) ->
	case <_0,_1> of
	  <Kp,T>
	      when call 'erlang':'is_integer'
		    (Kp) ->
	      %% Line 1284
	      call 'erlang':'element'
		  (Kp, T)
	  %% Line 1285
	  <[Kp1|[Kp2|[]]],T> when 'true' ->
	      let <_2> =
		  call %% Line 1286
		       'erlang':%% Line 1286
				'element'
		      (%% Line 1286
		       Kp1, %% Line 1286
			    T)
	      in  let <_3> =
		      call %% Line 1286
			   'erlang':%% Line 1286
				    'element'
			  (%% Line 1286
			   Kp2, %% Line 1286
				T)
		  in  %% Line 1286
		      [_2|[_3|[]]]
	  %% Line 1287
	  <[Kp1|[Kp2|Kps]],T> when 'true' ->
	      let <_4> =
		  call %% Line 1288
		       'erlang':%% Line 1288
				'element'
		      (%% Line 1288
		       Kp1, %% Line 1288
			    T)
	      in  let <_5> =
		      call %% Line 1288
			   'erlang':%% Line 1288
				    'element'
			  (%% Line 1288
			   Kp2, %% Line 1288
				T)
		  in  let <_6> =
			  apply %% Line 1288
				'make_key2'/2
			      (%% Line 1288
			       Kps, %% Line 1288
				    T)
		      in  %% Line 1288
			  [_4|[_5|_6]]
	  ( <_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7})
		  -| [{'function_name',{'make_key',2}}] )
	    -| ['compiler_generated'] )
	end
'make_stable_key'/3 =
    %% Line 1293
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Kp,I,T>
	      when call 'erlang':'is_integer'
		    (Kp) ->
	      let <_3> =
		  call %% Line 1294
		       'erlang':%% Line 1294
				'element'
		      (%% Line 1294
		       Kp, %% Line 1294
			   T)
	      in  %% Line 1294
		  [_3|I]
	  %% Line 1295
	  <[Kp1|[Kp2|[]]],I,T> when 'true' ->
	      let <_4> =
		  call %% Line 1296
		       'erlang':%% Line 1296
				'element'
		      (%% Line 1296
		       Kp1, %% Line 1296
			    T)
	      in  let <_5> =
		      call %% Line 1296
			   'erlang':%% Line 1296
				    'element'
			  (%% Line 1296
			   Kp2, %% Line 1296
				T)
		  in  %% Line 1296
		      [[_4|_5]|I]
	  %% Line 1297
	  <[Kp1|[Kp2|Kps]],I,T> when 'true' ->
	      let <_6> =
		  call %% Line 1298
		       'erlang':%% Line 1298
				'element'
		      (%% Line 1298
		       Kp1, %% Line 1298
			    T)
	      in  let <_7> =
		      call %% Line 1298
			   'erlang':%% Line 1298
				    'element'
			  (%% Line 1298
			   Kp2, %% Line 1298
				T)
		  in  let <_8> =
			  apply %% Line 1298
				'make_key2'/2
			      (%% Line 1298
			       Kps, %% Line 1298
				    T)
		      in  %% Line 1298
			  [[_6|[_7|_8]]|I]
	  ( <_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9})
		  -| [{'function_name',{'make_stable_key',3}}] )
	    -| ['compiler_generated'] )
	end
'make_key2'/2 =
    %% Line 1300
    fun (_0,_1) ->
	case <_0,_1> of
	  <[Kp|[]],T> when 'true' ->
	      let <_2> =
		  call %% Line 1301
		       'erlang':%% Line 1301
				'element'
		      (%% Line 1301
		       Kp, %% Line 1301
			   T)
	      in  %% Line 1301
		  [_2|[]]
	  %% Line 1302
	  <[Kp|Kps],T> when 'true' ->
	      let <_3> =
		  call %% Line 1303
		       'erlang':%% Line 1303
				'element'
		      (%% Line 1303
		       Kp, %% Line 1303
			   T)
	      in  let <_4> =
		      apply %% Line 1303
			    'make_key2'/2
			  (%% Line 1303
			   Kps, %% Line 1303
				T)
		  in  %% Line 1303
		      [_3|_4]
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'make_key2',2}}] )
	    -| ['compiler_generated'] )
	end
'infun'/1 =
    %% Line 1305
    fun (_0) ->
	%% Line 1306
	case _0 of
	  <{'w',_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40}> when 'true' ->
	      let <_3> =
		  call 'erlang':'setelement'
		      (5, _0, 'undefined')
	      in  %% Line 1307
		  try
		      ( case _0 of
			  ( <( {'w',_42,_43,_44,_rec48,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59}
			       -| ['compiler_generated'] )> when 'true' ->
				apply _rec48
				    ('read')
			    -| ['compiler_generated'] )
			  ( <_60> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','w'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  of <_7> ->
		      case _7 of
			%% Line 1308
			<'end_of_input'> when 'true' ->
			    %% Line 1309
			    {'end_of_input',_3}
			%% Line 1310
			<{'end_of_input',Value}> when 'true' ->
			    let <_rec49> = {%% Line 1311
				 'value',%% Line 1311
					 Value}
			    in  %% Line 1311
				case _3 of
				  <{'w',_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79}> when 'true' ->
				      let <_11> =
					  call 'erlang':'setelement'
					      (20, _3, _rec49)
				      in  {'end_of_input',_11}
				  ( <_80> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','w'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			%% Line 1312
			<{Objs,NFun}>
			    when try
				  let <_12> =
				      call 'erlang':'is_function'
					  (NFun, 1)
				  in  let <_13> =
					  call %% Line 1313
					       'erlang':%% Line 1313
							'is_list'
					      (%% Line 1313
					       Objs)
				      in  call 'erlang':'and'
					      (_12, _13)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    %% Line 1314
			    case _0 of
			      <{'w',_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99}> when 'true' ->
				  let <_16> =
				      call 'erlang':'setelement'
					  (5, _0, NFun)
				  in  {'cont',_16,Objs}
			      ( <_100> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','w'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			%% Line 1315
			<Error> when 'true' ->
			    %% Line 1316
			    apply 'error'/2
				(Error, _3)
		      end
		  catch <_20,_19,_18> ->
		      do  %% Line 1318
			  apply 'cleanup'/1
			      (_3)
			  primop 'raw_raise'
			      (_20, _19, _18)
	  ( <_41> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','w'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'outfun'/2 =
    %% Line 1322
    fun (_0,_1) ->
	case <_0,_1> of
	  <A,W = {'w',_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,Val}>
	      when call 'erlang':'=/='
		    (Val,
		     'no_value') ->
	      %% Line 1323
	      case W of
		<{'w',_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65}> when 'true' ->
		    let <_4> =
			call 'erlang':'setelement'
			    (20, W, 'no_value')
		    in  let <_12> =
			    case <> of
			      %% Line 1325
			      <>
				  when ( try
					  ( let <_8> =
						case ( call ( 'erlang'
							      -| ['compiler_generated'] ):( 'is_record'
											    -| ['compiler_generated'] )
							   (_4, ( 'w'
								  -| ['compiler_generated'] ), ( 20
												 -| ['compiler_generated'] ))
						       -| ['compiler_generated'] ) of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							( 'true'
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							( 'fail'
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( _6
						       -| ['compiler_generated'] )> when 'true' ->
							( _6
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					    in  let <_9> =
						    call 'erlang':'=:='
							(( _8
							   -| ['compiler_generated'] ), 'true')
						in  let <_10> =
							call 'erlang':'element'
							    (7, _4)
						    in  let <_11> =
							    call 'erlang':'=:='
								(_10, 'true')
							in  ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'and'
												   -| ['compiler_generated'] )
								  (_9, _11)
							      -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false'
				      -| ['compiler_generated'] ) ->
				  %% Line 1326
				  apply 'outfun'/2
				      (Val, _4)
			      %% Line 1327
			      <> when 'true' ->
				  _4
			    end
			in  %% Line 1329
			    apply 'outfun'/2
				(A, _12)
		( <_66> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','w'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1330
	  <A,W> when 'true' ->
	      %% Line 1331
	      case W of
		<{'w',_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85}> when 'true' ->
		    let <_16> =
			call 'erlang':'setelement'
			    (6, W, 'undefined')
		    in  %% Line 1332
			try
			    ( case W of
				( <( {'w',_87,_88,_89,_90,_rec54,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104}
				     -| ['compiler_generated'] )> when 'true' ->
				      apply _rec54
					  (A)
				  -| ['compiler_generated'] )
				( <_105> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','w'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			of <_20> ->
			    case _20 of
			      %% Line 1333
			      <Reply>
				  when call 'erlang':'=:='
					(A,
					 'close') ->
				  %% Line 1334
				  Reply
			      %% Line 1335
			      <NF>
				  when call 'erlang':'is_function'
					(_20,
					 1) ->
				  %% Line 1336
				  case W of
				    <{'w',_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124}> when 'true' ->
					call 'erlang':'setelement'
					    (6, W, NF)
				    ( <_125> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','w'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      %% Line 1337
			      <Error> when 'true' ->
				  %% Line 1338
				  apply 'error'/2
				      (Error, _16)
			    end
			catch <_26,_25,_24> ->
			    do  %% Line 1340
				apply 'cleanup'/1
				    (_16)
				primop 'raw_raise'
				    (_26, _25, _24)
		( <_86> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','w'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	end
'is_keypos'/1 =
    %% Line 1344
    fun (_0) ->
	case _0 of
	  <Keypos>
	      when let <_1> =
		    call 'erlang':'is_integer'
			(_0)
		in  let <_2> =
			call 'erlang':'>'
			    (_0, 0)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 1345
	      'true'
	  %% Line 1346
	  <[]> when 'true' ->
	      %% Line 1347
	      {'badarg',[]}
	  %% Line 1348
	  <L> when 'true' ->
	      %% Line 1349
	      apply 'is_keyposs'/1
		  (L)
	end
'is_keyposs'/1 =
    %% Line 1351
    fun (_0) ->
	case _0 of
	  <[Kp|Kps]>
	      when let <_1> =
		    call 'erlang':'is_integer'
			(Kp)
		in  let <_2> =
			call 'erlang':'>'
			    (Kp, 0)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 1352
	      apply 'is_keyposs'/1
		  (Kps)
	  %% Line 1353
	  <[]> when 'true' ->
	      %% Line 1354
	      'true'
	  %% Line 1355
	  <[Bad|_4]> when 'true' ->
	      %% Line 1356
	      {'badarg',Bad}
	  %% Line 1357
	  <Bad> when 'true' ->
	      %% Line 1358
	      {'badarg',Bad}
	end
'is_input'/1 =
    %% Line 1360
    fun (_0) ->
	case _0 of
	  <Fun>
	      when call 'erlang':'is_function'
		    (_0,
		     1) ->
	      %% Line 1361
	      {'true',Fun}
	  %% Line 1362
	  <Files> when 'true' ->
	      %% Line 1363
	      apply 'is_files'/1
		  (Files)
	end
'is_files'/1 =
    %% Line 1365
    fun (_0) ->
	%% Line 1366
	apply 'is_files'/2
	    (_0, [])
'is_files'/2 =
    %% Line 1368
    fun (_0,_1) ->
	case <_0,_1> of
	  <[F|Fs],L> when 'true' ->
	      %% Line 1369
	      case apply 'read_file_info'/1
		       (F) of
		%% Line 1370
		<{'ok',File,_X_FI}> when 'true' ->
		    %% Line 1371
		    apply 'is_files'/2
			(Fs, [File|L])
		%% Line 1372
		<Error> when 'true' ->
		    %% Line 1373
		    Error
	      end
	  %% Line 1375
	  <[],L> when 'true' ->
	      let <_3> =
		  call %% Line 1376
		       'lists':%% Line 1376
			       'reverse'
		      (%% Line 1376
		       L)
	      in  %% Line 1376
		  {'true',_3}
	  %% Line 1377
	  <Bad,_X_L> when 'true' ->
	      %% Line 1378
	      {'badarg',Bad}
	end
'maybe_output'/1 =
    %% Line 1380
    fun (_0) ->
	case _0 of
	  <Fun>
	      when call 'erlang':'is_function'
		    (_0,
		     1) ->
	      %% Line 1381
	      {'true',Fun}
	  %% Line 1382
	  <File> when 'true' ->
	      %% Line 1383
	      case apply 'read_file_info'/1
		       (File) of
		%% Line 1384
		<Badarg = {'badarg',_X_File}> when 'true' ->
		    %% Line 1385
		    Badarg
		%% Line 1386
		<{'ok',FileName,_X_FileInfo}> when 'true' ->
		    %% Line 1387
		    {'true',FileName}
		%% Line 1388
		<{'error',{'file_error',FileName,_X_Reason}}> when 'true' ->
		    %% Line 1389
		    {'true',FileName}
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_1})
		  -| ['compiler_generated'] )
	      end
	end
'read_file_info'/1 =
    %% Line 1392
    fun (_0) ->
	let <_1> =
	    catch
		%% Line 1394
		call 'filename':'absname'
		    (_0)
	in  %% Line 1394
	    case _1 of
	      %% Line 1395
	      <{'EXIT',_5}> when 'true' ->
		  %% Line 1396
		  {'badarg',_0}
	      %% Line 1397
	      <FileName> when 'true' ->
		  %% Line 1398
		  case call 'file':'read_file_info'
			   (FileName) of
		    %% Line 1399
		    <{'ok',FileInfo}> when 'true' ->
			%% Line 1400
			{'ok',FileName,FileInfo}
		    %% Line 1401
		    <{'error','einval'}> when 'true' ->
			%% Line 1402
			{'badarg',_0}
		    %% Line 1403
		    <{'error',Reason}> when 'true' ->
			%% Line 1404
			{'error',{'file_error',FileName,Reason}}
		    ( <_2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_2})
		      -| ['compiler_generated'] )
		  end
	    end
'next_temp'/1 =
    %% Line 1409
    fun (_0) ->
	%% Line 1410
	( case _0 of
	    ( <( {'w',_13,_14,_rec56,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec57> =
		      call %% Line 1411
			   'erlang':%% Line 1411
				    '+'
			  (_rec56, %% Line 1411
				   1)
		  in  %% Line 1411
		      case _0 of
			<{'w',_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50}> when 'true' ->
			    let <_7> =
				call 'erlang':'setelement'
				    (4, _0, _rec57)
			    in  %% Line 1412
				( case _0 of
				    ( <( {'w',_52,_53,_54,_55,_56,_57,_rec59,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <Temp> =
					      call 'lists':'concat'
						  ([_rec59|[_rec56|[]]])
					  in  %% Line 1413
					      {_7,Temp}
				      -| ['compiler_generated'] )
				    ( <_70> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','w'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			( <_51> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','w'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_31> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','w'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'tmp_prefix'/2 =
    %% Line 1417
    fun (_0,_1) ->
	case <_0,_1> of
	  <F,TmpDirOpt>
	      when let <_2> =
		    call 'erlang':'is_function'
			(F)
		in  let <_3> =
			call 'erlang':'=:='
			    (F, 'undefined')
		    in  call 'erlang':'or'
			    (_2, _3) ->
	      %% Line 1418
	      case call 'file':'get_cwd'
		       () of
		<{'ok',CurDir}> when 'true' ->
		    %% Line 1419
		    apply 'tmp_prefix1'/2
			(CurDir, TmpDirOpt)
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1420
	  <OutFile,TmpDirOpt> when 'true' ->
	      let <Dir> =
		  call %% Line 1421
		       'filename':%% Line 1421
				  'dirname'
		      (%% Line 1421
		       OutFile)
	      in  %% Line 1422
		  apply 'tmp_prefix1'/2
		      (Dir, TmpDirOpt)
	end
'tmp_prefix1'/2 =
    %% Line 1424
    fun (_0,_1) ->
	let <Node> =
	    call %% Line 1426
		 'erlang':%% Line 1426
			  'node'
		()
	in  let <Pid> =
		call %% Line 1427
		     'os':%% Line 1427
			  'getpid'
		    ()
	    in  let <Unique> =
		    call %% Line 1428
			 'erlang':%% Line 1428
				  'unique_integer'
			(%% Line 1428
			 ['positive'])
		in  let <F> =
			call %% Line 1429
			     'lists':%% Line 1429
				     'concat'
			    (%% Line 1429
			     [[102|[115|[95]]]|[Node|[[95]|[Pid|[[95]|[Unique|[[46]]]]]]]])
		    in  let <_8> =
			    case _1 of
			      %% Line 1431
			      <'default'> when 'true' ->
				  _0
			      %% Line 1433
			      <{'dir',TDir}> when 'true' ->
				  %% Line 1434
				  TDir
			      ( <_7> when 'true' ->
				    %% Line 1430
				    primop 'match_fail'
					({'case_clause',_7})
				-| ['compiler_generated'] )
			    end
			in  let <_10> =
				call %% Line 1436
				     'filename':%% Line 1436
						'absname'
				    (_8)
			    in  %% Line 1436
				call 'filename':'join'
				    (_10, F)
'open_file'/2 =
    %% Line 1439
    fun (_0,_1) ->
	%% Line 1440
	( case _1 of
	    ( <( {'w',_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_rec60,_29,_30,_31}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_4> =
		      call 'erlang':'++'
			  (_rec60, ['raw'|['binary'|['write']]])
		  in  case call 'file':'open'
			       (_0, _4) of
			%% Line 1441
			<{'ok',Fd}> when 'true' ->
			    %% Line 1442
			    ( case _1 of
				( <( {'w',_33,_34,_35,_36,_37,_38,_39,_rec63,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_rec61> =
					  [{Fd,_0}|_rec63]
				      in  case _1 of
					    <{'w',_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70}> when 'true' ->
						let <_10> =
						    call 'erlang':'setelement'
							(9, _1, _rec61)
						in  {Fd,_10}
					    ( <_71> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','w'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				  -| ['compiler_generated'] )
				( <_51> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','w'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			%% Line 1443
			<Error> when 'true' ->
			    %% Line 1444
			    apply 'file_error'/3
				(_0, Error, _1)
		      end
	      -| ['compiler_generated'] )
	    ( <_32> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','w'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'read'/4 =
    %% Line 1447
    fun (_0,_1,_2,_3) ->
	%% Line 1448
	case call 'file':'read'
		 (_0, _2) of
	  %% Line 1449
	  <_@r0 = {'ok',Bin}> when 'true' ->
	      %% Line 1450
	      _@r0
	  %% Line 1451
	  <'eof'> when 'true' ->
	      %% Line 1452
	      'eof'
	  %% Line 1453
	  <{'error','enomem'}> when 'true' ->
	      %% Line 1455
	      apply 'error'/2
		  ({'error',{'bad_object',_1}}, _3)
	  %% Line 1456
	  <{'error','einval'}> when 'true' ->
	      %% Line 1458
	      apply 'error'/2
		  ({'error',{'bad_object',_1}}, _3)
	  %% Line 1459
	  <Error> when 'true' ->
	      %% Line 1460
	      apply 'file_error'/3
		  (_1, Error, _3)
	end
'write'/4 =
    %% Line 1463
    fun (_0,_1,_2,_3) ->
	%% Line 1464
	case call 'file':'write'
		 (_0, _2) of
	  %% Line 1465
	  <'ok'> when 'true' ->
	      %% Line 1466
	      'ok'
	  %% Line 1467
	  <Error> when 'true' ->
	      %% Line 1468
	      apply 'file_error'/3
		  (_1, Error, _3)
	end
'file_error'/3 =
    %% Line 1473
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <File,{'error',Reason},W> when 'true' ->
	      %% Line 1474
	      apply 'error'/2
		  ({'error',{'file_error',File,Reason}}, W)
	  ( <_5,_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4,_3})
		  -| [{'function_name',{'file_error',3}}] )
	    -| ['compiler_generated'] )
	end
'error'/2 =
    %% Line 1476
    fun (_0,_1) ->
	do  %% Line 1477
	    apply 'cleanup'/1
		(_1)
	    %% Line 1478
	    ( case _1 of
		( <( {'w',_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_rec64,_20,_21,_22,_23}
		     -| ['compiler_generated'] )> when 'true' ->
		      call 'erlang':'throw'
			  ({_rec64,_0})
		  -| ['compiler_generated'] )
		( <_24> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','w'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'cleanup'/1 =
    %% Line 1480
    fun (_0) ->
	do  %% Line 1481
	    apply 'close_out'/1
		(_0)
	    let <W1> =
		apply %% Line 1482
		      'close_input'/1
		    (_0)
	    in  let <F> =
		    fun (_5) ->
			%% Line 1483
			case _5 of
			  <IFun>
			      when call 'erlang':'is_function'
				    (_5) ->
			      %% Line 1484
			      apply IFun
				  ('close')
			  %% Line 1485
			  <{Fd,FileName}> when 'true' ->
			      do  %% Line 1486
				  ( call ( 'file'
					   -| ['result_not_wanted'] ):( 'close'
									-| ['result_not_wanted'] )
					(Fd)
				    -| ['result_not_wanted'] )
				  %% Line 1487
				  ( call ( 'file'
					   -| ['result_not_wanted'] ):( 'delete'
									-| ['result_not_wanted'] )
					(FileName)
				    -| ['result_not_wanted'] )
			  %% Line 1488
			  <FileName> when 'true' ->
			      %% Line 1489
			      ( call ( 'file'
				       -| ['result_not_wanted'] ):( 'delete'
								    -| ['result_not_wanted'] )
				    (FileName)
				-| ['result_not_wanted'] )
			end
		in  %% Line 1491
		    ( case W1 of
			( <( {'w',_13,_14,_15,_16,_17,_18,_19,_rec65,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30}
			     -| ['compiler_generated'] )> when 'true' ->
			      call 'lists':'foreach'
				  (F, _rec65)
			  -| ['compiler_generated'] )
			( <_31> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','w'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
'close_input'/1 =
    %% Line 1493
    fun (_0) ->
	case _0 of
	  <W = {'w',_4,_5,_6,In,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21}>
	      when call 'erlang':'is_function'
		    (In) ->
	      do  try
		      %% Line 1494
		      apply In
			  ('close')
		  of <_catch_value> ->
		      _catch_value
		  catch <Class,Reason,Stk> ->
		      'ok'
		  %% Line 1495
		  case W of
		    <{'w',_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40}> when 'true' ->
			call 'erlang':'setelement'
			    (5, W, 'undefined')
		    ( <_41> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','w'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1496
	  <W = {'w',_42,_43,_44,'undefined',_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59}> when 'true' ->
	      %% Line 1497
	      W
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'close_input',1}}] )
	    -| ['compiler_generated'] )
	end
'close_out'/1 =
    %% Line 1499
    fun (_0) ->
	case _0 of
	  <{'w',_2,_3,_4,_5,Out,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19}>
	      when call 'erlang':'is_function'
		    (Out) ->
	      catch
		  %% Line 1500
		  apply Out
		      ('close')
	  %% Line 1501
	  <_20> when 'true' ->
	      %% Line 1502
	      'ok'
	end
'close_file'/2 =
    %% Line 1504
    fun (_0,_1) ->
	%% Line 1505
	( case _1 of
	    ( <( {'w',_14,_15,_16,_17,_18,_19,_20,_rec67,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'lists':'keyfind'
			   (_0, 1, _rec67) of
		    <{_33,FileName}>
			when call 'erlang':'=:='
			      (_33,
			       _0) ->
			%% Line 1507
			case call 'file':'close'
				 (_0) of
			  %% Line 1508
			  <'ok'> when 'true' ->
			      %% Line 1509
			      ( case _1 of
				  ( <( {'w',_34,_35,_36,_37,_38,_39,_40,_rec70,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_7> =
					    call 'lists':'keydelete'
						(_0, 1, _rec70)
					in  let <_rec68> =
						[FileName|_7]
					    in  case _1 of
						  <{'w',_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71}> when 'true' ->
						      call 'erlang':'setelement'
							  (9, _1, _rec68)
						  ( <_72> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','w'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
				    -| ['compiler_generated'] )
				  ( <_52> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','w'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 1510
			  <Error> when 'true' ->
			      %% Line 1511
			      apply 'file_error'/3
				  (FileName, Error, _1)
			end
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_32> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','w'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'file_rterms'/2 =
    %% Line 1518
    fun (_0,_1) ->
	case <_0,_1> of
	  <'no_file',Files> when 'true' ->
	      %% Line 1519
	      ( fun (_4) ->
		    case _4 of
		      <'close'> when 'true' ->
			  %% Line 1520
			  'ok'
		      %% Line 1521
		      <'read'>
			  when call 'erlang':'=:='
				(Files,
				 []) ->
			  %% Line 1522
			  'end_of_input'
		      %% Line 1523
		      <'read'> when 'true' ->
			  %% Line 1524
			  case Files of
			    <[F|Fs]> when 'true' ->
				%% Line 1525
				case call 'file':'open'
					 (F, ['read'|['compressed']]) of
				  %% Line 1526
				  <{'ok',Fd}> when 'true' ->
				      %% Line 1527
				      apply 'file_rterms2'/5
					  (Fd, [], 0, F, Fs)
				  %% Line 1528
				  <{'error',Reason}> when 'true' ->
				      %% Line 1529
				      {'error',{'file_error',F,Reason}}
				  ( <_3> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_3})
				    -| ['compiler_generated'] )
				end
			    ( <_2> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_2})
			      -| ['compiler_generated'] )
			  end
		      ( <_5> when 'true' ->
			    ( primop 'match_fail'
				  ({'function_clause',_5})
			      -| [{'function_name',{'-file_rterms/2-fun-0-',1}}] )
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-file_rterms/2-fun-0-'}}] )
	  %% Line 1532
	  <{Fd,FileName},Files> when 'true' ->
	      %% Line 1533
	      ( fun (_6) ->
		    case _6 of
		      <'close'> when 'true' ->
			  %% Line 1534
			  call 'file':'close'
			      (Fd)
		      %% Line 1535
		      <'read'> when 'true' ->
			  %% Line 1536
			  apply 'file_rterms2'/5
			      (Fd, [], 0, FileName, Files)
		      ( <_7> when 'true' ->
			    ( primop 'match_fail'
				  ({'function_clause',_7})
			      -| [{'function_name',{'-file_rterms/2-fun-1-',1}}] )
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-file_rterms/2-fun-1-'}}] )
	  ( <_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8})
		  -| [{'function_name',{'file_rterms',2}}] )
	    -| ['compiler_generated'] )
	end
'file_rterms2'/5 =
    %% Line 1539
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <Fd,L,LSz,FileName,Files>
	      when call 'erlang':'<'
		    (LSz,
		     16384) ->
	      %% Line 1540
	      case call 'io':'read'
		       (Fd, '') of
		%% Line 1541
		<{'ok',Term}> when 'true' ->
		    let <B> =
			call %% Line 1542
			     'erlang':%% Line 1542
				      'term_to_binary'
			    (%% Line 1542
			     Term)
		    in  let <_6> =
			    call %% Line 1543
				 'erlang':%% Line 1543
					  'byte_size'
				(%% Line 1543
				 B)
			in  let <_7> =
				call %% Line 1543
				     'erlang':%% Line 1543
					      '+'
				    (%% Line 1543
				     LSz, _6)
			    in  %% Line 1543
				apply 'file_rterms2'/5
				    (Fd, [B|L], _7, FileName, Files)
		%% Line 1544
		<'eof'> when 'true' ->
		    do  %% Line 1545
			( call ( 'file'
				 -| ['result_not_wanted'] ):( 'close'
							      -| ['result_not_wanted'] )
			      (Fd)
			  -| ['result_not_wanted'] )
			let <_10> =
			    call %% Line 1546
				 'lists':%% Line 1546
					 'reverse'
				(%% Line 1546
				 L)
			in  let <_9> =
				apply %% Line 1546
				      'file_rterms'/2
				    (%% Line 1546
				     'no_file', %% Line 1546
						Files)
			    in  %% Line 1546
				{_10,_9}
		%% Line 1547
		<_X_Error> when 'true' ->
		    do  %% Line 1548
			( call ( 'file'
				 -| ['result_not_wanted'] ):( 'close'
							      -| ['result_not_wanted'] )
			      (Fd)
			  -| ['result_not_wanted'] )
			%% Line 1549
			{'error',{'bad_term',FileName}}
	      end
	  %% Line 1551
	  <Fd,L,_X_LSz,FileName,Files> when 'true' ->
	      let <_14> =
		  call %% Line 1552
		       'lists':%% Line 1552
			       'reverse'
		      (%% Line 1552
		       L)
	      in  let <_13> =
		      apply %% Line 1552
			    'file_rterms'/2
			  (%% Line 1552
			   {Fd,FileName}, %% Line 1552
					  Files)
		  in  %% Line 1552
		      {_14,_13}
	end
'file_wterms'/3 =
    %% Line 1554
    fun (_0,_1,_2) ->
	%% Line 1555
	( fun (_6) ->
	      case _6 of
		<'close'>
		    when call 'erlang':'=:='
			  (_0,
			   'name') ->
		    %% Line 1556
		    'ok'
		%% Line 1557
		<'close'> when 'true' ->
		    %% Line 1558
		    case _0 of
		      <{'fd',Fd}> when 'true' ->
			  %% Line 1559
			  call 'file':'close'
			      (Fd)
		      ( <_3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_3})
			-| ['compiler_generated'] )
		    end
		%% Line 1560
		<L>
		    when call 'erlang':'=:='
			  (_0,
			   'name') ->
		    %% Line 1561
		    case call 'file':'open'
			     (_1, _2) of
		      %% Line 1562
		      <{'ok',Fd}> when 'true' ->
			  %% Line 1563
			  apply 'write_terms'/4
			      (Fd, _1, L, _2)
		      %% Line 1564
		      <{'error',Reason}> when 'true' ->
			  %% Line 1565
			  {'error',{'file_error',_1,Reason}}
		      ( <_4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_4})
			-| ['compiler_generated'] )
		    end
		%% Line 1567
		<L> when 'true' ->
		    %% Line 1568
		    case _0 of
		      <{'fd',Fd}> when 'true' ->
			  %% Line 1569
			  apply 'write_terms'/4
			      (Fd, _1, L, _2)
		      ( <_5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_5})
			-| ['compiler_generated'] )
		    end
	      end
	  -| [{'id',{0,0,'-file_wterms/3-fun-0-'}}] )
'write_terms'/4 =
    %% Line 1572
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Fd,F,[B|Bs],Args> when 'true' ->
	      let <_4> =
		  call %% Line 1573
		       'erlang':%% Line 1573
				'binary_to_term'
		      (%% Line 1573
		       B)
	      in  %% Line 1573
		  case call 'io':'request'
			   (Fd, {'format',[126|[112|[46|[126|[110]]]]],[_4|[]]}) of
		    %% Line 1574
		    <'ok'> when 'true' ->
			%% Line 1575
			apply 'write_terms'/4
			    (Fd, F, Bs, Args)
		    %% Line 1576
		    <{'error',Reason}> when 'true' ->
			do  %% Line 1577
			    ( call ( 'file'
				     -| ['result_not_wanted'] ):( 'close'
								  -| ['result_not_wanted'] )
				  (Fd)
			      -| ['result_not_wanted'] )
			    %% Line 1578
			    {'error',{'file_error',F,Reason}}
		    ( <_6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1580
	  <Fd,F,[],Args> when 'true' ->
	      %% Line 1581
	      apply 'file_wterms'/3
		  ({'fd',Fd}, F, Args)
	  ( <_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8,_7})
		  -| [{'function_name',{'write_terms',4}}] )
	    -| ['compiler_generated'] )
	end
'fun_rterms'/1 =
    %% Line 1583
    fun (_0) ->
	%% Line 1584
	( fun (_6) ->
	      case _6 of
		<'close'> when 'true' ->
		    %% Line 1585
		    apply _0
			('close')
		%% Line 1586
		<'read'> when 'true' ->
		    %% Line 1587
		    case apply _0
			     ('read') of
		      %% Line 1588
		      <{Ts,NInFun}>
			  when try
				let <_1> =
				    call 'erlang':'is_list'
					(Ts)
				in  let <_2> =
					call %% Line 1589
					     'erlang':%% Line 1589
						      'is_function'
					    (%% Line 1589
					     NInFun, %% Line 1589
						     1)
				    in  call 'erlang':'and'
					    (_1, _2)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false' ->
			  let <_4> =
			      apply %% Line 1590
				    'to_bin'/2
				  (%% Line 1590
				   Ts, %% Line 1590
				       [])
			  in  let <_3> =
				  apply %% Line 1590
					'fun_rterms'/1
				      (%% Line 1590
				       NInFun)
			      in  %% Line 1590
				  {_4,_3}
		      %% Line 1591
		      <Else> when 'true' ->
			  %% Line 1592
			  Else
		    end
		( <_7> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_7})
			-| [{'function_name',{'-fun_rterms/1-fun-0-',1}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-fun_rterms/1-fun-0-'}}] )
'fun_wterms'/1 =
    %% Line 1596
    fun (_0) ->
	%% Line 1597
	( fun (_3) ->
	      case _3 of
		<'close'> when 'true' ->
		    %% Line 1598
		    apply _0
			('close')
		%% Line 1599
		<L> when 'true' ->
		    let <_1> =
			apply %% Line 1600
			      'wterms_arg'/1
			    (%% Line 1600
			     L)
		    in  %% Line 1600
			case apply _0
				 (_1) of
			  %% Line 1601
			  <NOutFun>
			      when call 'erlang':'is_function'
				    (NOutFun,
				     1) ->
			      %% Line 1602
			      apply 'fun_wterms'/1
				  (NOutFun)
			  %% Line 1603
			  <Else> when 'true' ->
			      %% Line 1604
			      Else
			end
	      end
	  -| [{'id',{0,0,'-fun_wterms/1-fun-0-'}}] )
'to_bin'/2 =
    %% Line 1608
    fun (_0,_1) ->
	case <_0,_1> of
	  <[E|Es],L> when 'true' ->
	      let <_2> =
		  call %% Line 1609
		       'erlang':%% Line 1609
				'term_to_binary'
		      (%% Line 1609
		       E)
	      in  %% Line 1609
		  apply 'to_bin'/2
		      (Es, [_2|L])
	  %% Line 1610
	  <[],L> when 'true' ->
	      %% Line 1611
	      call 'lists':'reverse'
		  (L)
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'to_bin',2}}] )
	    -| ['compiler_generated'] )
	end
'wterms_arg'/1 =
    %% Line 1613
    fun (_0) ->
	case _0 of
	  <L>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 1614
	      apply 'to_term'/2
		  (L, [])
	  %% Line 1615
	  <Value> when 'true' ->
	      %% Line 1616
	      Value
	end
'to_term'/2 =
    %% Line 1618
    fun (_0,_1) ->
	case <_0,_1> of
	  <[B|Bs],L> when 'true' ->
	      let <_2> =
		  call %% Line 1619
		       'erlang':%% Line 1619
				'binary_to_term'
		      (%% Line 1619
		       B)
	      in  %% Line 1619
		  apply 'to_term'/2
		      (Bs, [_2|L])
	  %% Line 1620
	  <[],L> when 'true' ->
	      %% Line 1621
	      call 'lists':'reverse'
		  (L)
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'to_term',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('file_sorter')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('file_sorter', _0)
end