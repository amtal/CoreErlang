module 'supervisor_bridge' ['behaviour_info'/1,
			    'code_change'/3,
			    'format_log'/1,
			    'format_log'/2,
			    'handle_call'/3,
			    'handle_cast'/2,
			    'handle_info'/2,
			    'init'/1,
			    'module_info'/0,
			    'module_info'/1,
			    'start_link'/2,
			    'start_link'/3,
			    'terminate'/2]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[95|[98|[114|[105|[100|[103|[101|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 22
		'behaviour' =
		    %% Line 22
		    ['gen_server'],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[47|[85|[115|[101|[114|[115|[47|[102|[101|[110|[103|[108|[101|[101|[47|[72|[97|[109|[108|[101|[114|[47|[111|[116|[112|[45|[79|[84|[80|[45|[50|[51|[46|[48|[45|[114|[99|[49|[47|[108|[105|[98|[47|[115|[116|[100|[108|[105|[98|[47|[46|[46|[47|[107|[101|[114|[110|[101|[108|[47|[105|[110|[99|[108|[117|[100|[101|[47|[108|[111|[103|[103|[101|[114|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 25
		'file' =
		    %% Line 25
		    [{[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[95|[98|[114|[105|[100|[103|[101|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]],25}],
		%% Line 34
		'callback' =
		    %% Line 34
		    [{{'init',1},[{'type',34,'fun',[{'type',34,'product',[{'ann_type',34,[{'var',34,'Args'}|[{'type',34,'term',[]}]]}]}|[{'type',35,'union',[{'type',35,'tuple',[{'atom',35,'ok'}|[{'ann_type',35,[{'var',35,'Pid'}|[{'type',35,'pid',[]}]]}|[{'ann_type',35,[{'var',35,'State'}|[{'type',35,'term',[]}]]}]]]}|[{'atom',35,'ignore'}|[{'type',35,'tuple',[{'atom',35,'error'}|[{'ann_type',35,[{'var',35,'Error'}|[{'type',35,'term',[]}]]}]]}]]]}]]}]}],
		%% Line 36
		'callback' =
		    %% Line 36
		    [{{'terminate',2},[{'type',36,'fun',[{'type',36,'product',[{'ann_type',36,[{'var',36,'Reason'}|[{'type',36,'union',[{'atom',36,'shutdown'}|[{'type',36,'term',[]}]]}]]}|[{'ann_type',36,[{'var',36,'State'}|[{'type',36,'term',[]}]]}]]}|[{'ann_type',37,[{'var',37,'Ignored'}|[{'type',37,'term',[]}]]}]]}]}],
		%% Line 54
		'record' =
		    %% Line 54
		    [{'state',[{'record_field',54,{'atom',54,'mod'}}|[{'record_field',54,{'atom',54,'pid'}}|[{'record_field',54,{'atom',54,'child_state'}}|[{'record_field',54,{'atom',54,'name'}}]]]]}],
		%% Line 56
		'spec' =
		    %% Line 56
		    [{{'start_link',2},[{'type',56,'bounded_fun',[{'type',56,'fun',[{'type',56,'product',[{'var',56,'Module'}|[{'var',56,'Args'}]]}|[{'var',56,'Result'}]]}|[[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'Module'}|[{'type',57,'module',[]}]]]]}|[{'type',58,'constraint',[{'atom',58,'is_subtype'}|[[{'var',58,'Args'}|[{'type',58,'term',[]}]]]]}|[{'type',59,'constraint',[{'atom',59,'is_subtype'}|[[{'var',59,'Result'}|[{'type',59,'union',[{'type',59,'tuple',[{'atom',59,'ok'}|[{'var',59,'Pid'}]]}|[{'atom',59,'ignore'}|[{'type',59,'tuple',[{'atom',59,'error'}|[{'var',59,'Error'}]]}]]]}]]]]}|[{'type',60,'constraint',[{'atom',60,'is_subtype'}|[[{'var',60,'Error'}|[{'type',60,'union',[{'type',60,'tuple',[{'atom',60,'already_started'}|[{'var',60,'Pid'}]]}|[{'type',60,'term',[]}]]}]]]]}|[{'type',61,'constraint',[{'atom',61,'is_subtype'}|[[{'var',61,'Pid'}|[{'type',61,'pid',[]}]]]]}]]]]]]]}]}],
		%% Line 66
		'spec' =
		    %% Line 66
		    [{{'start_link',3},[{'type',66,'bounded_fun',[{'type',66,'fun',[{'type',66,'product',[{'var',66,'SupBridgeName'}|[{'var',66,'Module'}|[{'var',66,'Args'}]]]}|[{'var',66,'Result'}]]}|[[{'type',67,'constraint',[{'atom',67,'is_subtype'}|[[{'var',67,'SupBridgeName'}|[{'type',67,'union',[{'type',67,'tuple',[{'atom',67,'local'}|[{'var',67,'Name'}]]}|[{'type',67,'tuple',[{'atom',67,'global'}|[{'var',67,'Name'}]]}]]}]]]]}|[{'type',68,'constraint',[{'atom',68,'is_subtype'}|[[{'var',68,'Name'}|[{'type',68,'atom',[]}]]]]}|[{'type',69,'constraint',[{'atom',69,'is_subtype'}|[[{'var',69,'Module'}|[{'type',69,'module',[]}]]]]}|[{'type',70,'constraint',[{'atom',70,'is_subtype'}|[[{'var',70,'Args'}|[{'type',70,'term',[]}]]]]}|[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'Result'}|[{'type',71,'union',[{'type',71,'tuple',[{'atom',71,'ok'}|[{'var',71,'Pid'}]]}|[{'atom',71,'ignore'}|[{'type',71,'tuple',[{'atom',71,'error'}|[{'var',71,'Error'}]]}]]]}]]]]}|[{'type',72,'constraint',[{'atom',72,'is_subtype'}|[[{'var',72,'Error'}|[{'type',72,'union',[{'type',72,'tuple',[{'atom',72,'already_started'}|[{'var',72,'Pid'}]]}|[{'type',72,'term',[]}]]}]]]]}|[{'type',73,'constraint',[{'atom',73,'is_subtype'}|[[{'var',73,'Pid'}|[{'type',73,'pid',[]}]]]]}]]]]]]]]]}]}]]
'start_link'/2 =
    %% Line 63
    fun (_0,_1) ->
	%% Line 64
	call 'gen_server':'start_link'
	    ('supervisor_bridge', [_0|[_1|['self']]], [])
'start_link'/3 =
    %% Line 75
    fun (_0,_1,_2) ->
	%% Line 76
	call 'gen_server':'start_link'
	    (_0, 'supervisor_bridge', [_1|[_2|[_0|[]]]], [])
'init'/1 =
    %% Line 81
    fun (_0) ->
	case _0 of
	  <[Mod|[StartArgs|[Name0|[]]]]> when 'true' ->
	      do  %% Line 82
		  call 'erlang':'process_flag'
		      ('trap_exit', 'true')
		  let <Name> =
		      apply %% Line 83
			    'supname'/2
			  (%% Line 83
			   Name0, %% Line 83
				  Mod)
		  in  %% Line 84
		      case call Mod:'init'
			       (StartArgs) of
			%% Line 85
			<{'ok',Pid,ChildState}>
			    when call 'erlang':'is_pid'
				  (Pid) ->
			    do  %% Line 86
				call 'erlang':'link'
				    (Pid)
				do  %% Line 87
				    apply 'report_progress'/4
					(Pid, Mod, StartArgs, Name)
				    %% Line 88
				    {'ok',{'state',Mod,Pid,%% Line 89
							   ChildState,%% Line 89
								      Name}}
			%% Line 90
			<'ignore'> when 'true' ->
			    %% Line 91
			    'ignore'
			%% Line 92
			<{'error',Reason}> when 'true' ->
			    %% Line 93
			    {'stop',Reason}
			( <_2> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_2})
			  -| ['compiler_generated'] )
		      end
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'supname'/2 =
    %% Line 96
    fun (_0,_1) ->
	case <_0,_1> of
	  <'self',Mod> when 'true' ->
	      let <_2> =
		  call 'erlang':'self'
		      ()
	      in  {_2,Mod}
	  %% Line 97
	  <N,_5> when 'true' ->
	      N
	end
'handle_call'/3 =
    %% Line 100
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <'which_children',_X_From,State> when 'true' ->
	      %% Line 101
	      {'reply',[],State}
	  %% Line 102
	  <_X_Req,_X_From,State> when 'true' ->
	      %% Line 103
	      {'reply',{'error','badcall'},State}
	end
'handle_cast'/2 =
    %% Line 105
    fun (_0,_1) ->
	%% Line 106
	{'noreply',_1}
'handle_info'/2 =
    %% Line 108
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'EXIT',Pid,Reason},State = {'state',_14,_15,_16,_17}>
	      when ( try
		      let <_6> =
			  call 'erlang':'element'
			      (3, State)
		      in  call 'erlang':'=:='
			      (_6, Pid)
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      do  %% Line 109
		  case Reason of
		    %% Line 110
		    <'normal'> when 'true' ->
			'ok'
		    %% Line 112
		    <'shutdown'> when 'true' ->
			'ok'
		    %% Line 114
		    <{'shutdown',_X_Term}> when 'true' ->
			'ok'
		    %% Line 116
		    <_18> when 'true' ->
			%% Line 117
			apply 'report_error'/3
			    ('child_terminated', Reason, State)
		  end
		  %% Line 119
		  case State of
		    <{'state',_19,_20,_21,_22}> when 'true' ->
			let <_11> =
			    call 'erlang':'setelement'
				(3, State, 'undefined')
			in  {'stop',Reason,_11}
		    ( <_23> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 120
	  <_24,State> when 'true' ->
	      %% Line 121
	      {'noreply',State}
	end
'terminate'/2 =
    %% Line 123
    fun (_0,_1) ->
	case <_0,_1> of
	  <_X_Reason,{'state',_4,'undefined',_5,_6}> when 'true' ->
	      %% Line 124
	      'ok'
	  %% Line 125
	  <Reason,State> when 'true' ->
	      %% Line 126
	      apply 'terminate_pid'/2
		  (Reason, State)
	end
'code_change'/3 =
    %% Line 128
    fun (_0,_1,_2) ->
	%% Line 129
	{'ok',_1}
'terminate_pid'/2 =
    %% Line 132
    fun (_0,_1) ->
	case <_0,_1> of
	  <Reason,{'state',Mod,_4,ChildState,_5}> when 'true' ->
	      %% Line 133
	      call Mod:'terminate'
		  (Reason, ChildState)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'terminate_pid',2}}] )
	    -| ['compiler_generated'] )
	end
'report_progress'/4 =
    %% Line 135
    fun (_0,_1,_2,_3) ->
	%% Line 136
	case call 'logger':'allow'
		 ('info', 'supervisor_bridge') of
	  <'true'> when 'true' ->
	      let <_4> =
		  ~{%% Line 137
		   'report'=>[{'supervisor',_3}|%% Line 138
					      [{'started',[{'pid',_0}|%% Line 139
								      [{'mfa',{_1,'init',[_2|[]]}}|[]]]}|%% Line 139
													 []]]|~{'label'=>{'supervisor','progress'}}~}~
	      in  call 'logger':'macro_log'
		      (~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[95|[98|[114|[105|[100|[103|[101|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]],'line'=>136,'mfa'=>{'supervisor_bridge','report_progress',4}}~, 'info', _4, ~{'domain'=>['otp'|['sasl']],'error_logger'=>~{'report_cb'=>fun 'supervisor_bridge':'format_log'/1,'tag'=>'info_report','type'=>'progress'}~,'logger_formatter'=>~{'title'=>[80|[82|[79|[71|[82|[69|[83|[83|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]]]}~,'report_cb'=>fun 'supervisor_bridge':'format_log'/2}~)
	  %% Line 146
	  <'false'> when 'true' ->
	      'ok'
	  ( <_9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_9})
	    -| ['compiler_generated'] )
	end
'report_error'/3 =
    %% Line 148
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Error,Reason,{'state',Mod,Pid,_12,Name}> when 'true' ->
	      %% Line 149
	      case call 'logger':'allow'
		       ('error', 'supervisor_bridge') of
		<'true'> when 'true' ->
		    let <_3> =
			~{%% Line 150
			 'report'=>[{'supervisor',Name}|%% Line 151
						      [{'errorContext',Error}|%% Line 152
									      [{'reason',Reason}|%% Line 153
												 [{'offender',[{'pid',Pid}|[{'mod',Mod}|[]]]}|[]]]]]|~{'label'=>{'supervisor','error'}}~}~
		    in  call 'logger':'macro_log'
			    (~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[95|[98|[114|[105|[100|[103|[101|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]],'line'=>149,'mfa'=>{'supervisor_bridge','report_error',3}}~, 'error', _3, ~{'domain'=>['otp'|['sasl']],'error_logger'=>~{'report_cb'=>fun 'supervisor_bridge':'format_log'/1,'tag'=>'error_report','type'=>'supervisor_report'}~,'logger_formatter'=>~{'title'=>[83|[85|[80|[69|[82|[86|[73|[83|[79|[82|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]]]]]}~,'report_cb'=>fun 'supervisor_bridge':'format_log'/2}~)
		%% Line 160
		<'false'> when 'true' ->
		    'ok'
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_8})
		  -| ['compiler_generated'] )
	      end
	  ( <_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9})
		  -| [{'function_name',{'report_error',3}}] )
	    -| ['compiler_generated'] )
	end
'format_log'/1 =
    %% Line 167
    fun (_0) ->
	let <Depth> =
	    call %% Line 168
		 'error_logger':%% Line 168
				'get_format_depth'
		()
	in  let <FormatOpts> =
		~{%% Line 170
		 'depth'=>Depth,%% Line 171
				'single_line'=>'false',%% Line 172
						       'encoding'=>'utf8'|%% Line 169
		 ~{'chars_limit'=>'unlimited'}~}~
	    in  let <_3> =
		    apply %% Line 173
			  'limit_report'/2
			(_0, %% Line 173
			     Depth)
		in  %% Line 173
		    apply 'format_log_multi'/2
			(_3, FormatOpts)
'limit_report'/2 =
    %% Line 175
    fun (_0,_1) ->
	case <_0,_1> of
	  <LogReport,'unlimited'> when 'true' ->
	      %% Line 176
	      LogReport
	  %% Line 177
	  <%% Line 178
	   LogReport = ~{%% Line 178
			'report':=[Supervisor = {'supervisor',_8}|[{'started',Child}|[]]],'label':={'supervisor','progress'}}~,%% Line 179
															       Depth> when 'true' ->
	      let <_2> =
		  apply %% Line 181
			'limit_child_report'/2
		      (%% Line 181
		       Child, %% Line 181
			      Depth)
	      in  %% Line 180
		  case <> of
		    ( <>
			  when call 'erlang':'is_map'
				(LogReport) ->
			  ~{'report'=>[Supervisor|%% Line 181
					       [{'started',_2}|[]]]|LogReport}~
		      -| ['compiler_generated'] )
		    ( <> when 'true' ->
			  ( primop 'match_fail'
				({'badmap',LogReport})
			    -| [{'eval_failure','badmap'}] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 182
	  <%% Line 184
	   LogReport = ~{%% Line 183
			'report':=[Supervisor = {'supervisor',_9}|[{'errorContext',Ctxt}|%% Line 184
										       [{'reason',Reason}|[{'offender',Child}|[]]]]],'label':={'supervisor','error'}}~,%% Line 185
																				       Depth> when 'true' ->
	      let <_3> =
		  call %% Line 187
		       'io_lib':%% Line 187
				'limit_term'
		      (%% Line 187
		       Ctxt, %% Line 187
			     Depth)
	      in  let <_4> =
		      call %% Line 188
			   'io_lib':%% Line 188
				    'limit_term'
			  (%% Line 188
			   Reason, %% Line 188
				   Depth)
		  in  let <_5> =
			  call %% Line 189
			       'io_lib':%% Line 189
					'limit_term'
			      (%% Line 189
			       Child, %% Line 189
				      Depth)
		      in  %% Line 186
			  case <> of
			    ( <>
				  when call 'erlang':'is_map'
					(LogReport) ->
				  ~{'report'=>[Supervisor|%% Line 187
						       [{'errorContext',_3}|%% Line 188
									    [{'reason',_4}|%% Line 189
											   [{'offender',_5}|[]]]]]|LogReport}~
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  ( primop 'match_fail'
					({'badmap',LogReport})
				    -| [{'eval_failure','badmap'}] )
			      -| ['compiler_generated'] )
			  end
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'limit_report',2}}] )
	    -| ['compiler_generated'] )
	end
'limit_child_report'/2 =
    %% Line 191
    fun (_0,_1) ->
	%% Line 192
	case call 'lists':'keyfind'
		 ('mfa', 1, _0) of
	  <{'mfa',{M,F,[As|[]]}}> when 'true' ->
	      let <_3> =
		  call %% Line 193
		       'io_lib':%% Line 193
				'limit_term'
		      (%% Line 193
		       As, _1)
	      in  let <NewMFAs> =
		      {%% Line 193
		       M,%% Line 193
			 F,%% Line 193
			   [_3|[]]}
		  in  %% Line 194
		      call 'lists':'keyreplace'
			  ('mfa', 1, _0, {'mfa',NewMFAs})
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_2})
	    -| ['compiler_generated'] )
	end
'format_log'/2 =
    %% Line 198
    fun (_0,_1) ->
	let <FormatOpts> =
	    call %% Line 203
		 'maps':%% Line 203
			'merge'
		(%% Line 199
		 ~{'chars_limit'=>'unlimited','depth'=>'unlimited','encoding'=>'utf8','single_line'=>'false'}~, _1)
	in  let <_5> =
		case %% Line 205
		     FormatOpts of
		  %% Line 206
		  <~{'chars_limit':='unlimited'}~> when 'true' ->
		      %% Line 207
		      []
		  %% Line 208
		  <~{'chars_limit':=Limit}~> when 'true' ->
		      %% Line 209
		      [{'chars_limit',Limit}|[]]
		  ( <_4> when 'true' ->
			%% Line 205
			primop 'match_fail'
			    ({'case_clause',_4})
		    -| ['compiler_generated'] )
		end
	    in  %% Line 211
		case apply 'format_log_single'/2
			 (_0, FormatOpts) of
		  <{Format,Args}> when 'true' ->
		      %% Line 212
		      call 'io_lib':'format'
			  (Format, Args, _5)
		  ( <_7> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_7})
		    -| ['compiler_generated'] )
		end
'format_log_single'/2 =
    %% Line 214
    fun (_0,_1) ->
	case <_0,_1> of
	  <~{%% Line 215
	    'report':=[{'supervisor',SupName}|[{'started',Child}|[]]],'label':={'supervisor','progress'}}~,%% Line 216
													   FormatOpts = %% Line 216
															~{'depth':=Depth,'single_line':='true'}~> when 'true' ->
	      let <P> =
		  apply %% Line 217
			'p'/1
		      (%% Line 217
		       FormatOpts)
	      in  %% Line 218
		  case %% Line 219
		       apply 'format_child_log_progress_single'/3
			   (Child, [83|[116|[97|[114|[116|[101|[100|[58]]]]]]]], FormatOpts) of
		    <{ChildFormat,ChildArgs}> when 'true' ->
			let <_4> =
			    call %% Line 220
				 'erlang':%% Line 220
					  '++'
				(%% Line 220
				 P, %% Line 220
				    [46])
			in  let <Format> =
				call %% Line 220
				     'erlang':%% Line 220
					      '++'
				    (%% Line 220
				     [83|[117|[112|[101|[114|[118|[105|[115|[111|[114|[58|[32]]]]]]]]]]]], _4)
			    in  let <_7> =
				    case %% Line 222
					 Depth of
				      %% Line 223
				      <'unlimited'> when 'true' ->
					  %% Line 224
					  [SupName|[]]
				      %% Line 225
				      <_21> when 'true' ->
					  %% Line 226
					  [SupName|[Depth|[]]]
				    end
				in  let <_10> =
					call %% Line 228
					     'erlang':%% Line 228
						      '++'
					    (%% Line 228
					     Format, %% Line 228
						     ChildFormat)
				    in  let <_9> =
					    call %% Line 228
						 'erlang':%% Line 228
							  '++'
						(_7, %% Line 228
						     ChildArgs)
					in  %% Line 228
					    {_10,_9}
		    ( <_3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 229
	  <~{%% Line 230
	    'report':=[{'supervisor',SupName}|%% Line 231
					    [{'errorContext',Ctxt}|%% Line 232
								   [{'reason',Reason}|%% Line 233
										      [{'offender',Child}|[]]]]],'label':={'supervisor',_X_Error}}~,%% Line 234
																		    FormatOpts = %% Line 234
																				 ~{'depth':=Depth,'single_line':='true'}~> when 'true' ->
	      let <P> =
		  apply %% Line 235
			'p'/1
		      (%% Line 235
		       FormatOpts)
	      in  let <Format> =
		      call %% Line 236
			   'lists':%% Line 236
				   'append'
			  (%% Line 236
			   [[83|[117|[112|[101|[114|[118|[105|[115|[111|[114|[58|[32]]]]]]]]]]]]|[P|[[46|[32|[67|[111|[110|[116|[101|[120|[116|[58|[32]]]]]]]]]]]|[P|%% Line 237
																				     [[46|[32|[82|[101|[97|[115|[111|[110|[58|[32]]]]]]]]]]|[P|[[46]]]]]]]])
		  in  %% Line 238
		      case %% Line 239
			   apply 'format_child_log_error_single'/2
			       (Child, [79|[102|[102|[101|[110|[100|[101|[114|[58]]]]]]]]]) of
			<{ChildFormat,ChildArgs}> when 'true' ->
			    let <_15> =
				case %% Line 241
				     Depth of
				  %% Line 242
				  <'unlimited'> when 'true' ->
				      %% Line 243
				      [SupName|[Ctxt|[Reason|[]]]]
				  %% Line 244
				  <_22> when 'true' ->
				      %% Line 245
				      [SupName|[Depth|[Ctxt|[Depth|[Reason|[Depth|[]]]]]]]
				end
			    in  let <_18> =
				    call %% Line 247
					 'erlang':%% Line 247
						  '++'
					(%% Line 247
					 Format, %% Line 247
						 ChildFormat)
				in  let <_17> =
					call %% Line 247
					     'erlang':%% Line 247
						      '++'
					    (_15, %% Line 247
						  ChildArgs)
				    in  %% Line 247
					{_18,_17}
			( <_13> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_13})
			  -| ['compiler_generated'] )
		      end
	  %% Line 248
	  <Report,FormatOpts> when 'true' ->
	      %% Line 249
	      apply 'format_log_multi'/2
		  (Report, FormatOpts)
	end
'format_log_multi'/2 =
    %% Line 251
    fun (_0,_1) ->
	case <_0,_1> of
	  <~{%% Line 252
	    'report':=[{'supervisor',SupName}|%% Line 253
					    [{'started',Child}|[]]],'label':={'supervisor','progress'}}~,%% Line 254
													 FormatOpts = %% Line 254
														      ~{'depth':=Depth}~> when 'true' ->
	      let <P> =
		  apply %% Line 255
			'p'/1
		      (%% Line 255
		       FormatOpts)
	      in  let <Format> =
		      call %% Line 257
			   'lists':%% Line 257
				   'append'
			  (%% Line 258
			   [[32|[32|[32|[32|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[58|[32]]]]]]]]]]]]]]]]|[P|[[126|[110]]|%% Line 259
																      [[32|[32|[32|[32|[115|[116|[97|[114|[116|[101|[100|[58|[32]]]]]]]]]]]]]|[P|[[126|[110]]]]]]]])
		  in  let <_5> =
			  case %% Line 261
			       Depth of
			    %% Line 262
			    <'unlimited'> when 'true' ->
				%% Line 263
				[SupName|[Child|[]]]
			    %% Line 264
			    <_14> when 'true' ->
				%% Line 265
				[SupName|[Depth|[Child|[Depth|[]]]]]
			  end
		      in  %% Line 267
			  {Format,_5}
	  %% Line 268
	  <~{%% Line 269
	    'report':=[{'supervisor',SupName}|%% Line 270
					    [{'errorContext',Ctxt}|%% Line 271
								   [{'reason',Reason}|%% Line 272
										      [{'offender',Child}|[]]]]],'label':={'supervisor',_X_Error}}~,%% Line 273
																		    FormatOpts = %% Line 273
																				 ~{'depth':=Depth}~> when 'true' ->
	      let <P> =
		  apply %% Line 274
			'p'/1
		      (%% Line 274
		       FormatOpts)
	      in  let <Format> =
		      call %% Line 276
			   'lists':%% Line 276
				   'append'
			  (%% Line 277
			   [[32|[32|[32|[32|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[58|[32]]]]]]]]]]]]]]]]|[P|[[126|[110]]|%% Line 278
																      [[32|[32|[32|[32|[101|[114|[114|[111|[114|[67|[111|[110|[116|[101|[120|[116|[58|[32]]]]]]]]]]]]]]]]]]|[P|[[126|[110]]|%% Line 279
																															    [[32|[32|[32|[32|[114|[101|[97|[115|[111|[110|[58|[32]]]]]]]]]]]]|[P|[[126|[110]]|%% Line 280
																																									      [[32|[32|[32|[32|[111|[102|[102|[101|[110|[100|[101|[114|[58|[32]]]]]]]]]]]]]]|[P|[[126|[110]]]]]]]]]]]]]])
		  in  let <_10> =
			  case %% Line 282
			       Depth of
			    %% Line 283
			    <'unlimited'> when 'true' ->
				%% Line 284
				[SupName|[Ctxt|[Reason|[Child|[]]]]]
			    %% Line 285
			    <_15> when 'true' ->
				%% Line 286
				[SupName|[Depth|[Ctxt|[Depth|[Reason|[Depth|[Child|[Depth|[]]]]]]]]]
			  end
		      in  %% Line 288
			  {Format,_10}
	  ( <_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12})
		  -| [{'function_name',{'format_log_multi',2}}] )
	    -| ['compiler_generated'] )
	end
'format_child_log_progress_single'/3 =
    %% Line 290
    fun (_0,_1,_2) ->
	%% Line 291
	case call 'lists':'keyfind'
		 ('pid', 1, _0) of
	  <{'pid',Pid}> when 'true' ->
	      %% Line 292
	      case call 'lists':'keyfind'
		       ('mfa', 1, _0) of
		<{'mfa',MFAs}> when 'true' ->
		    let <_6> =
			case %% Line 294
			     call 'maps':'get'
				 ('depth', _2) of
			  %% Line 295
			  <'unlimited'> when 'true' ->
			      %% Line 296
			      [MFAs|[]]
			  %% Line 297
			  <Depth> when 'true' ->
			      %% Line 298
			      [MFAs|[Depth|[]]]
			end
		    in  let <_9> =
			    apply %% Line 300
				  'p'/1
				(_2)
			in  let <_10> =
				call %% Line 300
				     'erlang':%% Line 300
					      '++'
				    (_9, %% Line 300
					 [46])
			    in  let <_11> =
				    call %% Line 300
					 'erlang':%% Line 300
						  '++'
					(%% Line 300
					 [32|[126|[115|[32|[112|[105|[100|[61|[126|[119|[44|[109|[102|[97|[61]]]]]]]]]]]]]]], _10)
				in  let <_8> =
					[_1|%% Line 300
					    [Pid|_6]]
				    in  %% Line 300
					{_11,_8}
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_3})
	    -| ['compiler_generated'] )
	end
'format_child_log_error_single'/2 =
    %% Line 302
    fun (_0,_1) ->
	%% Line 303
	case call 'lists':'keyfind'
		 ('pid', 1, _0) of
	  <{'pid',Pid}> when 'true' ->
	      %% Line 304
	      case call 'lists':'keyfind'
		       ('mod', 1, _0) of
		<{'mod',Mod}> when 'true' ->
		    %% Line 305
		    {[32|[126|[115|[32|[112|[105|[100|[61|[126|[119|[44|[109|[111|[100|[61|[126|[119|[46]]]]]]]]]]]]]]]]]],[_1|[Pid|[Mod|[]]]]}
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_2})
	    -| ['compiler_generated'] )
	end
'p'/1 =
    %% Line 307
    fun (_0) ->
	case _0 of
	  <~{'depth':=Depth,'encoding':=Enc,'single_line':=Single}~> when 'true' ->
	      let <_4> =
		  apply %% Line 308
			'single'/1
		      (%% Line 308
		       Single)
	      in  let <_2> =
		      apply %% Line 308
			    'mod'/1
			  (%% Line 308
			   Enc)
		  in  let <_1> =
			  apply %% Line 308
				'p'/1
			      (%% Line 308
			       Depth)
		      in  let <_3> =
			      call %% Line 308
				   'erlang':%% Line 308
					    '++'
				  (_2, _1)
			  in  let <_5> =
				  call %% Line 308
				       'erlang':%% Line 308
						'++'
				      (_4, _3)
			      in  %% Line 308
				  [126|_5]
	  %% Line 309
	  <'unlimited'> when 'true' ->
	      %% Line 310
	      [112]
	  %% Line 311
	  <_X_Depth> when 'true' ->
	      %% Line 312
	      [80]
	end
'single'/1 =
    %% Line 314
    fun (_0) ->
	case _0 of
	  <'true'> when 'true' ->
	      [48]
	  %% Line 315
	  <'false'> when 'true' ->
	      []
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'single',1}}] )
	    -| ['compiler_generated'] )
	end
'mod'/1 =
    %% Line 317
    fun (_0) ->
	case _0 of
	  <'latin1'> when 'true' ->
	      []
	  %% Line 318
	  <_2> when 'true' ->
	      [116]
	end
'behaviour_info'/1 =
    fun (_0) ->
	case _0 of
	  <'callbacks'> when 'true' ->
	      [{'init',1}|[{'terminate',2}]]
	  <'optional_callbacks'> when 'true' ->
	      []
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'behaviour_info',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('supervisor_bridge')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('supervisor_bridge', _0)
end