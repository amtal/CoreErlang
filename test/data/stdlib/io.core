module 'io' ['columns'/0,
	     'columns'/1,
	     'format'/1,
	     'format'/2,
	     'format'/3,
	     'fread'/2,
	     'fread'/3,
	     'fwrite'/1,
	     'fwrite'/2,
	     'fwrite'/3,
	     'get_chars'/2,
	     'get_chars'/3,
	     'get_line'/1,
	     'get_line'/2,
	     'get_password'/0,
	     'get_password'/1,
	     'getopts'/0,
	     'getopts'/1,
	     'module_info'/0,
	     'module_info'/1,
	     'nl'/0,
	     'nl'/1,
	     'parse_erl_exprs'/1,
	     'parse_erl_exprs'/2,
	     'parse_erl_exprs'/3,
	     'parse_erl_exprs'/4,
	     'parse_erl_form'/1,
	     'parse_erl_form'/2,
	     'parse_erl_form'/3,
	     'parse_erl_form'/4,
	     'printable_range'/0,
	     'put_chars'/1,
	     'put_chars'/2,
	     'read'/1,
	     'read'/2,
	     'read'/3,
	     'read'/4,
	     'request'/1,
	     'request'/2,
	     'requests'/1,
	     'requests'/2,
	     'rows'/0,
	     'rows'/1,
	     'scan_erl_exprs'/1,
	     'scan_erl_exprs'/2,
	     'scan_erl_exprs'/3,
	     'scan_erl_exprs'/4,
	     'scan_erl_form'/1,
	     'scan_erl_form'/2,
	     'scan_erl_form'/3,
	     'scan_erl_form'/4,
	     'setopts'/1,
	     'setopts'/2,
	     'write'/1,
	     'write'/2]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[105|[111|[46|[101|[114|[108]]]]]]]]]],1}],
		%% Line 39
		'export_type' =
		    %% Line 39
		    [{'device',0}|[{'format',0}|[{'server_no_data',0}]]],
		%% Line 43
		'type' =
		    %% Line 43
		    [{'device',{'type',43,'union',[{'type',43,'atom',[]}|[{'type',43,'pid',[]}]]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{'prompt',{'type',44,'union',[{'type',44,'atom',[]}|[{'remote_type',44,[{'atom',44,'unicode'}|[{'atom',44,'chardata'}|[[]]]]}]]},[]}],
		%% Line 47
		'type' =
		    %% Line 47
		    [{'server_no_data',{'type',47,'union',[{'type',47,'tuple',[{'atom',47,'error'}|[{'ann_type',47,[{'var',47,'ErrorDescription'}|[{'type',47,'term',[]}]]}]]}|[{'atom',47,'eof'}]]},[]}],
		%% Line 49
		'type' =
		    %% Line 49
		    [{'location',{'remote_type',49,[{'atom',49,'erl_anno'}|[{'atom',49,'location'}|[[]]]]},[]}],
		%% Line 73
		'spec' =
		    %% Line 73
		    [{{'printable_range',0},[{'type',73,'fun',[{'type',73,'product',[]}|[{'type',73,'union',[{'atom',73,'unicode'}|[{'atom',73,'latin1'}]]}]]}]}],
		%% Line 78
		'spec' =
		    %% Line 78
		    [{{'put_chars',1},[{'type',78,'bounded_fun',[{'type',78,'fun',[{'type',78,'product',[{'var',78,'CharData'}]}|[{'atom',78,'ok'}]]}|[[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'CharData'}|[{'remote_type',79,[{'atom',79,'unicode'}|[{'atom',79,'chardata'}|[[]]]]}]]]]}]]]}]}],
		%% Line 84
		'spec' =
		    %% Line 84
		    [{{'put_chars',2},[{'type',84,'bounded_fun',[{'type',84,'fun',[{'type',84,'product',[{'var',84,'IoDevice'}|[{'var',84,'CharData'}]]}|[{'atom',84,'ok'}]]}|[[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'IoDevice'}|[{'user_type',85,'device',[]}]]]]}|[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'CharData'}|[{'remote_type',86,[{'atom',86,'unicode'}|[{'atom',86,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 93
		'spec' =
		    %% Line 93
		    [{{'put_chars',3},[{'type',93,'bounded_fun',[{'type',93,'fun',[{'type',93,'product',[{'var',93,'IoDevice'}|[{'var',93,'Encoding'}|[{'var',93,'CharData'}]]]}|[{'atom',93,'ok'}]]}|[[{'type',94,'constraint',[{'atom',94,'is_subtype'}|[[{'var',94,'IoDevice'}|[{'user_type',94,'device',[]}]]]]}|[{'type',95,'constraint',[{'atom',95,'is_subtype'}|[[{'var',95,'Encoding'}|[{'atom',95,'unicode'}]]]]}|[{'type',96,'constraint',[{'atom',96,'is_subtype'}|[[{'var',96,'CharData'}|[{'remote_type',96,[{'atom',96,'unicode'}|[{'atom',96,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 100
		'spec' =
		    %% Line 100
		    [{{'nl',0},[{'type',100,'fun',[{'type',100,'product',[]}|[{'atom',100,'ok'}]]}]}],
		%% Line 105
		'spec' =
		    %% Line 105
		    [{{'nl',1},[{'type',105,'bounded_fun',[{'type',105,'fun',[{'type',105,'product',[{'var',105,'IoDevice'}]}|[{'atom',105,'ok'}]]}|[[{'type',106,'constraint',[{'atom',106,'is_subtype'}|[[{'var',106,'IoDevice'}|[{'user_type',106,'device',[]}]]]]}]]]}]}],
		%% Line 111
		'spec' =
		    %% Line 111
		    [{{'columns',0},[{'type',111,'fun',[{'type',111,'product',[]}|[{'type',111,'union',[{'type',111,'tuple',[{'atom',111,'ok'}|[{'type',111,'pos_integer',[]}]]}|[{'type',111,'tuple',[{'atom',111,'error'}|[{'atom',111,'enotsup'}]]}]]}]]}]}],
		%% Line 116
		'spec' =
		    %% Line 116
		    [{{'columns',1},[{'type',116,'bounded_fun',[{'type',116,'fun',[{'type',116,'product',[{'var',116,'IoDevice'}]}|[{'type',116,'union',[{'type',116,'tuple',[{'atom',116,'ok'}|[{'type',116,'pos_integer',[]}]]}|[{'type',116,'tuple',[{'atom',116,'error'}|[{'atom',116,'enotsup'}]]}]]}]]}|[[{'type',117,'constraint',[{'atom',117,'is_subtype'}|[[{'var',117,'IoDevice'}|[{'user_type',117,'device',[]}]]]]}]]]}]}],
		%% Line 127
		'spec' =
		    %% Line 127
		    [{{'rows',0},[{'type',127,'fun',[{'type',127,'product',[]}|[{'type',127,'union',[{'type',127,'tuple',[{'atom',127,'ok'}|[{'type',127,'pos_integer',[]}]]}|[{'type',127,'tuple',[{'atom',127,'error'}|[{'atom',127,'enotsup'}]]}]]}]]}]}],
		%% Line 132
		'spec' =
		    %% Line 132
		    [{{'rows',1},[{'type',132,'bounded_fun',[{'type',132,'fun',[{'type',132,'product',[{'var',132,'IoDevice'}]}|[{'type',132,'union',[{'type',132,'tuple',[{'atom',132,'ok'}|[{'type',132,'pos_integer',[]}]]}|[{'type',132,'tuple',[{'atom',132,'error'}|[{'atom',132,'enotsup'}]]}]]}]]}|[[{'type',133,'constraint',[{'atom',133,'is_subtype'}|[[{'var',133,'IoDevice'}|[{'user_type',133,'device',[]}]]]]}]]]}]}],
		%% Line 143
		'spec' =
		    %% Line 143
		    [{{'get_chars',2},[{'type',143,'bounded_fun',[{'type',143,'fun',[{'type',143,'product',[{'var',143,'Prompt'}|[{'var',143,'Count'}]]}|[{'type',143,'union',[{'var',143,'Data'}|[{'user_type',143,'server_no_data',[]}]]}]]}|[[{'type',144,'constraint',[{'atom',144,'is_subtype'}|[[{'var',144,'Prompt'}|[{'user_type',144,'prompt',[]}]]]]}|[{'type',145,'constraint',[{'atom',145,'is_subtype'}|[[{'var',145,'Count'}|[{'type',145,'non_neg_integer',[]}]]]]}|[{'type',146,'constraint',[{'atom',146,'is_subtype'}|[[{'var',146,'Data'}|[{'type',146,'union',[{'type',146,'string',[]}|[{'remote_type',146,[{'atom',146,'unicode'}|[{'atom',146,'unicode_binary'}|[[]]]]}]]}]]]]}]]]]]}]}],
		%% Line 151
		'spec' =
		    %% Line 151
		    [{{'get_chars',3},[{'type',151,'bounded_fun',[{'type',151,'fun',[{'type',151,'product',[{'var',151,'IoDevice'}|[{'var',151,'Prompt'}|[{'var',151,'Count'}]]]}|[{'type',151,'union',[{'var',151,'Data'}|[{'user_type',151,'server_no_data',[]}]]}]]}|[[{'type',152,'constraint',[{'atom',152,'is_subtype'}|[[{'var',152,'IoDevice'}|[{'user_type',152,'device',[]}]]]]}|[{'type',153,'constraint',[{'atom',153,'is_subtype'}|[[{'var',153,'Prompt'}|[{'user_type',153,'prompt',[]}]]]]}|[{'type',154,'constraint',[{'atom',154,'is_subtype'}|[[{'var',154,'Count'}|[{'type',154,'non_neg_integer',[]}]]]]}|[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'Data'}|[{'type',155,'union',[{'type',155,'string',[]}|[{'remote_type',155,[{'atom',155,'unicode'}|[{'atom',155,'unicode_binary'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 160
		'spec' =
		    %% Line 160
		    [{{'get_line',1},[{'type',160,'bounded_fun',[{'type',160,'fun',[{'type',160,'product',[{'var',160,'Prompt'}]}|[{'type',160,'union',[{'var',160,'Data'}|[{'user_type',160,'server_no_data',[]}]]}]]}|[[{'type',161,'constraint',[{'atom',161,'is_subtype'}|[[{'var',161,'Prompt'}|[{'user_type',161,'prompt',[]}]]]]}|[{'type',162,'constraint',[{'atom',162,'is_subtype'}|[[{'var',162,'Data'}|[{'type',162,'union',[{'type',162,'string',[]}|[{'remote_type',162,[{'atom',162,'unicode'}|[{'atom',162,'unicode_binary'}|[[]]]]}]]}]]]]}]]]]}]}],
		%% Line 167
		'spec' =
		    %% Line 167
		    [{{'get_line',2},[{'type',167,'bounded_fun',[{'type',167,'fun',[{'type',167,'product',[{'var',167,'IoDevice'}|[{'var',167,'Prompt'}]]}|[{'type',167,'union',[{'var',167,'Data'}|[{'user_type',167,'server_no_data',[]}]]}]]}|[[{'type',168,'constraint',[{'atom',168,'is_subtype'}|[[{'var',168,'IoDevice'}|[{'user_type',168,'device',[]}]]]]}|[{'type',169,'constraint',[{'atom',169,'is_subtype'}|[[{'var',169,'Prompt'}|[{'user_type',169,'prompt',[]}]]]]}|[{'type',170,'constraint',[{'atom',170,'is_subtype'}|[[{'var',170,'Data'}|[{'type',170,'union',[{'type',170,'string',[]}|[{'remote_type',170,[{'atom',170,'unicode'}|[{'atom',170,'unicode_binary'}|[[]]]]}]]}]]]]}]]]]]}]}],
		%% Line 181
		'type' =
		    %% Line 181
		    [{'encoding',{'type',181,'union',[{'atom',181,'latin1'}|[{'atom',181,'unicode'}|[{'atom',181,'utf8'}|[{'atom',181,'utf16'}|[{'atom',181,'utf32'}|[{'type',182,'tuple',[{'atom',182,'utf16'}|[{'type',182,'union',[{'atom',182,'big'}|[{'atom',182,'little'}]]}]]}|[{'type',182,'tuple',[{'atom',182,'utf32'}|[{'type',182,'union',[{'atom',182,'big'}|[{'atom',182,'little'}]]}]]}]]]]]]]},[]}],
		%% Line 183
		'type' =
		    %% Line 183
		    [{'expand_fun',{'type',183,'fun',[{'type',183,'product',[{'type',183,'term',[]}]}|[{'type',183,'tuple',[{'type',183,'union',[{'atom',183,'yes'}|[{'atom',183,'no'}]]}|[{'type',183,'string',[]}|[{'type',183,'nonempty_list',[{'type',183,'string',[]}]}]]]}]]},[]}],
		%% Line 184
		'type' =
		    %% Line 184
		    [{'opt_pair',{'type',184,'union',[{'type',184,'tuple',[{'atom',184,'binary'}|[{'type',184,'boolean',[]}]]}|[{'type',185,'tuple',[{'atom',185,'echo'}|[{'type',185,'boolean',[]}]]}|[{'type',186,'tuple',[{'atom',186,'expand_fun'}|[{'user_type',186,'expand_fun',[]}]]}|[{'type',187,'tuple',[{'atom',187,'encoding'}|[{'user_type',187,'encoding',[]}]]}]]]]},[]}],
		%% Line 189
		'spec' =
		    %% Line 189
		    [{{'getopts',0},[{'type',189,'bounded_fun',[{'type',189,'fun',[{'type',189,'product',[]}|[{'type',189,'union',[{'type',189,'list',[{'user_type',189,'opt_pair',[]}]}|[{'type',189,'tuple',[{'atom',189,'error'}|[{'var',189,'Reason'}]]}]]}]]}|[[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'Reason'}|[{'type',190,'term',[]}]]]]}]]]}]}],
		%% Line 195
		'spec' =
		    %% Line 195
		    [{{'getopts',1},[{'type',195,'bounded_fun',[{'type',195,'fun',[{'type',195,'product',[{'var',195,'IoDevice'}]}|[{'type',195,'union',[{'type',195,'list',[{'user_type',195,'opt_pair',[]}]}|[{'type',195,'tuple',[{'atom',195,'error'}|[{'var',195,'Reason'}]]}]]}]]}|[[{'type',196,'constraint',[{'atom',196,'is_subtype'}|[[{'var',196,'IoDevice'}|[{'user_type',196,'device',[]}]]]]}|[{'type',197,'constraint',[{'atom',197,'is_subtype'}|[[{'var',197,'Reason'}|[{'type',197,'term',[]}]]]]}]]]]}]}],
		%% Line 202
		'type' =
		    %% Line 202
		    [{'setopt',{'type',202,'union',[{'atom',202,'binary'}|[{'atom',202,'list'}|[{'user_type',202,'opt_pair',[]}]]]},[]}],
		%% Line 204
		'spec' =
		    %% Line 204
		    [{{'setopts',1},[{'type',204,'bounded_fun',[{'type',204,'fun',[{'type',204,'product',[{'var',204,'Opts'}]}|[{'type',204,'union',[{'atom',204,'ok'}|[{'type',204,'tuple',[{'atom',204,'error'}|[{'var',204,'Reason'}]]}]]}]]}|[[{'type',205,'constraint',[{'atom',205,'is_subtype'}|[[{'var',205,'Opts'}|[{'type',205,'list',[{'user_type',205,'setopt',[]}]}]]]]}|[{'type',206,'constraint',[{'atom',206,'is_subtype'}|[[{'var',206,'Reason'}|[{'type',206,'term',[]}]]]]}]]]]}]}],
		%% Line 211
		'spec' =
		    %% Line 211
		    [{{'setopts',2},[{'type',211,'bounded_fun',[{'type',211,'fun',[{'type',211,'product',[{'var',211,'IoDevice'}|[{'var',211,'Opts'}]]}|[{'type',211,'union',[{'atom',211,'ok'}|[{'type',211,'tuple',[{'atom',211,'error'}|[{'var',211,'Reason'}]]}]]}]]}|[[{'type',212,'constraint',[{'atom',212,'is_subtype'}|[[{'var',212,'IoDevice'}|[{'user_type',212,'device',[]}]]]]}|[{'type',213,'constraint',[{'atom',213,'is_subtype'}|[[{'var',213,'Opts'}|[{'type',213,'list',[{'user_type',213,'setopt',[]}]}]]]]}|[{'type',214,'constraint',[{'atom',214,'is_subtype'}|[[{'var',214,'Reason'}|[{'type',214,'term',[]}]]]]}]]]]]}]}],
		%% Line 221
		'spec' =
		    %% Line 221
		    [{{'write',1},[{'type',221,'bounded_fun',[{'type',221,'fun',[{'type',221,'product',[{'var',221,'Term'}]}|[{'atom',221,'ok'}]]}|[[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'Term'}|[{'type',222,'term',[]}]]]]}]]]}]}],
		%% Line 227
		'spec' =
		    %% Line 227
		    [{{'write',2},[{'type',227,'bounded_fun',[{'type',227,'fun',[{'type',227,'product',[{'var',227,'IoDevice'}|[{'var',227,'Term'}]]}|[{'atom',227,'ok'}]]}|[[{'type',228,'constraint',[{'atom',228,'is_subtype'}|[[{'var',228,'IoDevice'}|[{'user_type',228,'device',[]}]]]]}|[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'Term'}|[{'type',229,'term',[]}]]]]}]]]]}]}],
		%% Line 235
		'spec' =
		    %% Line 235
		    [{{'read',1},[{'type',235,'bounded_fun',[{'type',235,'fun',[{'type',235,'product',[{'var',235,'Prompt'}]}|[{'var',235,'Result'}]]}|[[{'type',236,'constraint',[{'atom',236,'is_subtype'}|[[{'var',236,'Prompt'}|[{'user_type',236,'prompt',[]}]]]]}|[{'type',237,'constraint',[{'atom',237,'is_subtype'}|[[{'var',237,'Result'}|[{'type',237,'union',[{'type',237,'tuple',[{'atom',237,'ok'}|[{'ann_type',237,[{'var',237,'Term'}|[{'type',237,'term',[]}]]}]]}|[{'user_type',238,'server_no_data',[]}|[{'type',239,'tuple',[{'atom',239,'error'}|[{'var',239,'ErrorInfo'}]]}]]]}]]]]}|[{'type',240,'constraint',[{'atom',240,'is_subtype'}|[[{'var',240,'ErrorInfo'}|[{'type',240,'union',[{'remote_type',240,[{'atom',240,'erl_scan'}|[{'atom',240,'error_info'}|[[]]]]}|[{'remote_type',240,[{'atom',240,'erl_parse'}|[{'atom',240,'error_info'}|[[]]]]}]]}]]]]}]]]]]}]}],
		%% Line 245
		'spec' =
		    %% Line 245
		    [{{'read',2},[{'type',245,'bounded_fun',[{'type',245,'fun',[{'type',245,'product',[{'var',245,'IoDevice'}|[{'var',245,'Prompt'}]]}|[{'var',245,'Result'}]]}|[[{'type',246,'constraint',[{'atom',246,'is_subtype'}|[[{'var',246,'IoDevice'}|[{'user_type',246,'device',[]}]]]]}|[{'type',247,'constraint',[{'atom',247,'is_subtype'}|[[{'var',247,'Prompt'}|[{'user_type',247,'prompt',[]}]]]]}|[{'type',248,'constraint',[{'atom',248,'is_subtype'}|[[{'var',248,'Result'}|[{'type',248,'union',[{'type',248,'tuple',[{'atom',248,'ok'}|[{'ann_type',248,[{'var',248,'Term'}|[{'type',248,'term',[]}]]}]]}|[{'user_type',249,'server_no_data',[]}|[{'type',250,'tuple',[{'atom',250,'error'}|[{'var',250,'ErrorInfo'}]]}]]]}]]]]}|[{'type',251,'constraint',[{'atom',251,'is_subtype'}|[[{'var',251,'ErrorInfo'}|[{'type',251,'union',[{'remote_type',251,[{'atom',251,'erl_scan'}|[{'atom',251,'error_info'}|[[]]]]}|[{'remote_type',251,[{'atom',251,'erl_parse'}|[{'atom',251,'error_info'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 265
		'spec' =
		    %% Line 265
		    [{{'read',3},[{'type',265,'bounded_fun',[{'type',265,'fun',[{'type',265,'product',[{'var',265,'IoDevice'}|[{'var',265,'Prompt'}|[{'var',265,'StartLocation'}]]]}|[{'var',265,'Result'}]]}|[[{'type',266,'constraint',[{'atom',266,'is_subtype'}|[[{'var',266,'IoDevice'}|[{'user_type',266,'device',[]}]]]]}|[{'type',267,'constraint',[{'atom',267,'is_subtype'}|[[{'var',267,'Prompt'}|[{'user_type',267,'prompt',[]}]]]]}|[{'type',268,'constraint',[{'atom',268,'is_subtype'}|[[{'var',268,'StartLocation'}|[{'user_type',268,'location',[]}]]]]}|[{'type',269,'constraint',[{'atom',269,'is_subtype'}|[[{'var',269,'Result'}|[{'type',269,'union',[{'type',269,'tuple',[{'atom',269,'ok'}|[{'ann_type',269,[{'var',269,'Term'}|[{'type',269,'term',[]}]]}|[{'ann_type',269,[{'var',269,'EndLocation'}|[{'user_type',269,'location',[]}]]}]]]}|[{'type',270,'tuple',[{'atom',270,'eof'}|[{'ann_type',270,[{'var',270,'EndLocation'}|[{'user_type',270,'location',[]}]]}]]}|[{'user_type',271,'server_no_data',[]}|[{'type',272,'tuple',[{'atom',272,'error'}|[{'var',272,'ErrorInfo'}|[{'ann_type',272,[{'var',272,'ErrorLocation'}|[{'user_type',272,'location',[]}]]}]]]}]]]]}]]]]}|[{'type',273,'constraint',[{'atom',273,'is_subtype'}|[[{'var',273,'ErrorInfo'}|[{'type',273,'union',[{'remote_type',273,[{'atom',273,'erl_scan'}|[{'atom',273,'error_info'}|[[]]]]}|[{'remote_type',273,[{'atom',273,'erl_parse'}|[{'atom',273,'error_info'}|[[]]]]}]]}]]]]}]]]]]]]}]}],
		%% Line 278
		'spec' =
		    %% Line 278
		    [{{'read',4},[{'type',278,'bounded_fun',[{'type',278,'fun',[{'type',278,'product',[{'var',278,'IoDevice'}|[{'var',278,'Prompt'}|[{'var',278,'StartLocation'}|[{'var',278,'Options'}]]]]}|[{'var',278,'Result'}]]}|[[{'type',279,'constraint',[{'atom',279,'is_subtype'}|[[{'var',279,'IoDevice'}|[{'user_type',279,'device',[]}]]]]}|[{'type',280,'constraint',[{'atom',280,'is_subtype'}|[[{'var',280,'Prompt'}|[{'user_type',280,'prompt',[]}]]]]}|[{'type',281,'constraint',[{'atom',281,'is_subtype'}|[[{'var',281,'StartLocation'}|[{'user_type',281,'location',[]}]]]]}|[{'type',282,'constraint',[{'atom',282,'is_subtype'}|[[{'var',282,'Options'}|[{'remote_type',282,[{'atom',282,'erl_scan'}|[{'atom',282,'options'}|[[]]]]}]]]]}|[{'type',283,'constraint',[{'atom',283,'is_subtype'}|[[{'var',283,'Result'}|[{'type',283,'union',[{'type',283,'tuple',[{'atom',283,'ok'}|[{'ann_type',283,[{'var',283,'Term'}|[{'type',283,'term',[]}]]}|[{'ann_type',283,[{'var',283,'EndLocation'}|[{'user_type',283,'location',[]}]]}]]]}|[{'type',284,'tuple',[{'atom',284,'eof'}|[{'ann_type',284,[{'var',284,'EndLocation'}|[{'user_type',284,'location',[]}]]}]]}|[{'user_type',285,'server_no_data',[]}|[{'type',286,'tuple',[{'atom',286,'error'}|[{'var',286,'ErrorInfo'}|[{'ann_type',286,[{'var',286,'ErrorLocation'}|[{'user_type',286,'location',[]}]]}]]]}]]]]}]]]]}|[{'type',287,'constraint',[{'atom',287,'is_subtype'}|[[{'var',287,'ErrorInfo'}|[{'type',287,'union',[{'remote_type',287,[{'atom',287,'erl_scan'}|[{'atom',287,'error_info'}|[[]]]]}|[{'remote_type',287,[{'atom',287,'erl_parse'}|[{'atom',287,'error_info'}|[[]]]]}]]}]]]]}]]]]]]]]}]}],
		%% Line 312
		'type' =
		    %% Line 312
		    [{'format',{'type',312,'union',[{'type',312,'atom',[]}|[{'type',312,'string',[]}|[{'type',312,'binary',[]}]]]},[]}],
		%% Line 314
		'spec' =
		    %% Line 314
		    [{{'fwrite',1},[{'type',314,'bounded_fun',[{'type',314,'fun',[{'type',314,'product',[{'var',314,'Format'}]}|[{'atom',314,'ok'}]]}|[[{'type',315,'constraint',[{'atom',315,'is_subtype'}|[[{'var',315,'Format'}|[{'user_type',315,'format',[]}]]]]}]]]}]}],
		%% Line 320
		'spec' =
		    %% Line 320
		    [{{'fwrite',2},[{'type',320,'bounded_fun',[{'type',320,'fun',[{'type',320,'product',[{'var',320,'Format'}|[{'var',320,'Data'}]]}|[{'atom',320,'ok'}]]}|[[{'type',321,'constraint',[{'atom',321,'is_subtype'}|[[{'var',321,'Format'}|[{'user_type',321,'format',[]}]]]]}|[{'type',322,'constraint',[{'atom',322,'is_subtype'}|[[{'var',322,'Data'}|[{'type',322,'list',[{'type',322,'term',[]}]}]]]]}]]]]}]}],
		%% Line 327
		'spec' =
		    %% Line 327
		    [{{'fwrite',3},[{'type',327,'bounded_fun',[{'type',327,'fun',[{'type',327,'product',[{'var',327,'IoDevice'}|[{'var',327,'Format'}|[{'var',327,'Data'}]]]}|[{'atom',327,'ok'}]]}|[[{'type',328,'constraint',[{'atom',328,'is_subtype'}|[[{'var',328,'IoDevice'}|[{'user_type',328,'device',[]}]]]]}|[{'type',329,'constraint',[{'atom',329,'is_subtype'}|[[{'var',329,'Format'}|[{'user_type',329,'format',[]}]]]]}|[{'type',330,'constraint',[{'atom',330,'is_subtype'}|[[{'var',330,'Data'}|[{'type',330,'list',[{'type',330,'term',[]}]}]]]]}]]]]]}]}],
		%% Line 335
		'spec' =
		    %% Line 335
		    [{{'fread',2},[{'type',335,'bounded_fun',[{'type',335,'fun',[{'type',335,'product',[{'var',335,'Prompt'}|[{'var',335,'Format'}]]}|[{'var',335,'Result'}]]}|[[{'type',336,'constraint',[{'atom',336,'is_subtype'}|[[{'var',336,'Prompt'}|[{'user_type',336,'prompt',[]}]]]]}|[{'type',337,'constraint',[{'atom',337,'is_subtype'}|[[{'var',337,'Format'}|[{'user_type',337,'format',[]}]]]]}|[{'type',338,'constraint',[{'atom',338,'is_subtype'}|[[{'var',338,'Result'}|[{'type',338,'union',[{'type',338,'tuple',[{'atom',338,'ok'}|[{'ann_type',338,[{'var',338,'Terms'}|[{'type',338,'list',[{'type',338,'term',[]}]}]]}]]}|[{'atom',338,'eof'}|[{'type',338,'tuple',[{'atom',338,'error'}|[{'ann_type',338,[{'var',338,'What'}|[{'type',338,'term',[]}]]}]]}]]]}]]]]}]]]]]}]}],
		%% Line 343
		'spec' =
		    %% Line 343
		    [{{'fread',3},[{'type',343,'bounded_fun',[{'type',343,'fun',[{'type',343,'product',[{'var',343,'IoDevice'}|[{'var',343,'Prompt'}|[{'var',343,'Format'}]]]}|[{'var',343,'Result'}]]}|[[{'type',344,'constraint',[{'atom',344,'is_subtype'}|[[{'var',344,'IoDevice'}|[{'user_type',344,'device',[]}]]]]}|[{'type',345,'constraint',[{'atom',345,'is_subtype'}|[[{'var',345,'Prompt'}|[{'user_type',345,'prompt',[]}]]]]}|[{'type',346,'constraint',[{'atom',346,'is_subtype'}|[[{'var',346,'Format'}|[{'user_type',346,'format',[]}]]]]}|[{'type',347,'constraint',[{'atom',347,'is_subtype'}|[[{'var',347,'Result'}|[{'type',347,'union',[{'type',347,'tuple',[{'atom',347,'ok'}|[{'ann_type',347,[{'var',347,'Terms'}|[{'type',347,'list',[{'type',347,'term',[]}]}]]}]]}|[{'type',348,'tuple',[{'atom',348,'error'}|[{'type',348,'tuple',[{'atom',348,'fread'}|[{'ann_type',348,[{'var',348,'FreadError'}|[{'remote_type',348,[{'atom',348,'io_lib'}|[{'atom',348,'fread_error'}|[[]]]]}]]}]]}]]}|[{'user_type',349,'server_no_data',[]}]]]}]]]]}]]]]]]}]}],
		%% Line 354
		'spec' =
		    %% Line 354
		    [{{'format',1},[{'type',354,'bounded_fun',[{'type',354,'fun',[{'type',354,'product',[{'var',354,'Format'}]}|[{'atom',354,'ok'}]]}|[[{'type',355,'constraint',[{'atom',355,'is_subtype'}|[[{'var',355,'Format'}|[{'user_type',355,'format',[]}]]]]}]]]}]}],
		%% Line 360
		'spec' =
		    %% Line 360
		    [{{'format',2},[{'type',360,'bounded_fun',[{'type',360,'fun',[{'type',360,'product',[{'var',360,'Format'}|[{'var',360,'Data'}]]}|[{'atom',360,'ok'}]]}|[[{'type',361,'constraint',[{'atom',361,'is_subtype'}|[[{'var',361,'Format'}|[{'user_type',361,'format',[]}]]]]}|[{'type',362,'constraint',[{'atom',362,'is_subtype'}|[[{'var',362,'Data'}|[{'type',362,'list',[{'type',362,'term',[]}]}]]]]}]]]]}]}],
		%% Line 367
		'spec' =
		    %% Line 367
		    [{{'format',3},[{'type',367,'bounded_fun',[{'type',367,'fun',[{'type',367,'product',[{'var',367,'IoDevice'}|[{'var',367,'Format'}|[{'var',367,'Data'}]]]}|[{'atom',367,'ok'}]]}|[[{'type',368,'constraint',[{'atom',368,'is_subtype'}|[[{'var',368,'IoDevice'}|[{'user_type',368,'device',[]}]]]]}|[{'type',369,'constraint',[{'atom',369,'is_subtype'}|[[{'var',369,'Format'}|[{'user_type',369,'format',[]}]]]]}|[{'type',370,'constraint',[{'atom',370,'is_subtype'}|[[{'var',370,'Data'}|[{'type',370,'list',[{'type',370,'term',[]}]}]]]]}]]]]]}]}],
		%% Line 377
		'spec' =
		    %% Line 377
		    [{{'scan_erl_exprs',1},[{'type',377,'bounded_fun',[{'type',377,'fun',[{'type',377,'product',[{'var',377,'Prompt'}]}|[{'var',377,'Result'}]]}|[[{'type',378,'constraint',[{'atom',378,'is_subtype'}|[[{'var',378,'Prompt'}|[{'user_type',378,'prompt',[]}]]]]}|[{'type',379,'constraint',[{'atom',379,'is_subtype'}|[[{'var',379,'Result'}|[{'type',379,'union',[{'remote_type',379,[{'atom',379,'erl_scan'}|[{'atom',379,'tokens_result'}|[[]]]]}|[{'user_type',379,'server_no_data',[]}]]}]]]]}]]]]}]}],
		%% Line 384
		'spec' =
		    %% Line 384
		    [{{'scan_erl_exprs',2},[{'type',384,'bounded_fun',[{'type',384,'fun',[{'type',384,'product',[{'var',384,'Device'}|[{'var',384,'Prompt'}]]}|[{'var',384,'Result'}]]}|[[{'type',385,'constraint',[{'atom',385,'is_subtype'}|[[{'var',385,'Device'}|[{'user_type',385,'device',[]}]]]]}|[{'type',386,'constraint',[{'atom',386,'is_subtype'}|[[{'var',386,'Prompt'}|[{'user_type',386,'prompt',[]}]]]]}|[{'type',387,'constraint',[{'atom',387,'is_subtype'}|[[{'var',387,'Result'}|[{'type',387,'union',[{'remote_type',387,[{'atom',387,'erl_scan'}|[{'atom',387,'tokens_result'}|[[]]]]}|[{'user_type',387,'server_no_data',[]}]]}]]]]}]]]]]}]}],
		%% Line 392
		'spec' =
		    %% Line 392
		    [{{'scan_erl_exprs',3},[{'type',392,'bounded_fun',[{'type',392,'fun',[{'type',392,'product',[{'var',392,'Device'}|[{'var',392,'Prompt'}|[{'var',392,'StartLocation'}]]]}|[{'var',392,'Result'}]]}|[[{'type',393,'constraint',[{'atom',393,'is_subtype'}|[[{'var',393,'Device'}|[{'user_type',393,'device',[]}]]]]}|[{'type',394,'constraint',[{'atom',394,'is_subtype'}|[[{'var',394,'Prompt'}|[{'user_type',394,'prompt',[]}]]]]}|[{'type',395,'constraint',[{'atom',395,'is_subtype'}|[[{'var',395,'StartLocation'}|[{'user_type',395,'location',[]}]]]]}|[{'type',396,'constraint',[{'atom',396,'is_subtype'}|[[{'var',396,'Result'}|[{'type',396,'union',[{'remote_type',396,[{'atom',396,'erl_scan'}|[{'atom',396,'tokens_result'}|[[]]]]}|[{'user_type',396,'server_no_data',[]}]]}]]]]}]]]]]]}]}],
		%% Line 401
		'spec' =
		    %% Line 401
		    [{{'scan_erl_exprs',4},[{'type',401,'bounded_fun',[{'type',401,'fun',[{'type',401,'product',[{'var',401,'Device'}|[{'var',401,'Prompt'}|[{'var',401,'StartLocation'}|[{'var',401,'Options'}]]]]}|[{'var',401,'Result'}]]}|[[{'type',402,'constraint',[{'atom',402,'is_subtype'}|[[{'var',402,'Device'}|[{'user_type',402,'device',[]}]]]]}|[{'type',403,'constraint',[{'atom',403,'is_subtype'}|[[{'var',403,'Prompt'}|[{'user_type',403,'prompt',[]}]]]]}|[{'type',404,'constraint',[{'atom',404,'is_subtype'}|[[{'var',404,'StartLocation'}|[{'user_type',404,'location',[]}]]]]}|[{'type',405,'constraint',[{'atom',405,'is_subtype'}|[[{'var',405,'Options'}|[{'remote_type',405,[{'atom',405,'erl_scan'}|[{'atom',405,'options'}|[[]]]]}]]]]}|[{'type',406,'constraint',[{'atom',406,'is_subtype'}|[[{'var',406,'Result'}|[{'type',406,'union',[{'remote_type',406,[{'atom',406,'erl_scan'}|[{'atom',406,'tokens_result'}|[[]]]]}|[{'user_type',406,'server_no_data',[]}]]}]]]]}]]]]]]]}]}],
		%% Line 411
		'spec' =
		    %% Line 411
		    [{{'scan_erl_form',1},[{'type',411,'bounded_fun',[{'type',411,'fun',[{'type',411,'product',[{'var',411,'Prompt'}]}|[{'var',411,'Result'}]]}|[[{'type',412,'constraint',[{'atom',412,'is_subtype'}|[[{'var',412,'Prompt'}|[{'user_type',412,'prompt',[]}]]]]}|[{'type',413,'constraint',[{'atom',413,'is_subtype'}|[[{'var',413,'Result'}|[{'type',413,'union',[{'remote_type',413,[{'atom',413,'erl_scan'}|[{'atom',413,'tokens_result'}|[[]]]]}|[{'user_type',413,'server_no_data',[]}]]}]]]]}]]]]}]}],
		%% Line 418
		'spec' =
		    %% Line 418
		    [{{'scan_erl_form',2},[{'type',418,'bounded_fun',[{'type',418,'fun',[{'type',418,'product',[{'var',418,'IoDevice'}|[{'var',418,'Prompt'}]]}|[{'var',418,'Result'}]]}|[[{'type',419,'constraint',[{'atom',419,'is_subtype'}|[[{'var',419,'IoDevice'}|[{'user_type',419,'device',[]}]]]]}|[{'type',420,'constraint',[{'atom',420,'is_subtype'}|[[{'var',420,'Prompt'}|[{'user_type',420,'prompt',[]}]]]]}|[{'type',421,'constraint',[{'atom',421,'is_subtype'}|[[{'var',421,'Result'}|[{'type',421,'union',[{'remote_type',421,[{'atom',421,'erl_scan'}|[{'atom',421,'tokens_result'}|[[]]]]}|[{'user_type',421,'server_no_data',[]}]]}]]]]}]]]]]}]}],
		%% Line 426
		'spec' =
		    %% Line 426
		    [{{'scan_erl_form',3},[{'type',426,'bounded_fun',[{'type',426,'fun',[{'type',426,'product',[{'var',426,'IoDevice'}|[{'var',426,'Prompt'}|[{'var',426,'StartLocation'}]]]}|[{'var',426,'Result'}]]}|[[{'type',427,'constraint',[{'atom',427,'is_subtype'}|[[{'var',427,'IoDevice'}|[{'user_type',427,'device',[]}]]]]}|[{'type',428,'constraint',[{'atom',428,'is_subtype'}|[[{'var',428,'Prompt'}|[{'user_type',428,'prompt',[]}]]]]}|[{'type',429,'constraint',[{'atom',429,'is_subtype'}|[[{'var',429,'StartLocation'}|[{'user_type',429,'location',[]}]]]]}|[{'type',430,'constraint',[{'atom',430,'is_subtype'}|[[{'var',430,'Result'}|[{'type',430,'union',[{'remote_type',430,[{'atom',430,'erl_scan'}|[{'atom',430,'tokens_result'}|[[]]]]}|[{'user_type',430,'server_no_data',[]}]]}]]]]}]]]]]]}]}],
		%% Line 435
		'spec' =
		    %% Line 435
		    [{{'scan_erl_form',4},[{'type',435,'bounded_fun',[{'type',435,'fun',[{'type',435,'product',[{'var',435,'IoDevice'}|[{'var',435,'Prompt'}|[{'var',435,'StartLocation'}|[{'var',435,'Options'}]]]]}|[{'var',435,'Result'}]]}|[[{'type',436,'constraint',[{'atom',436,'is_subtype'}|[[{'var',436,'IoDevice'}|[{'user_type',436,'device',[]}]]]]}|[{'type',437,'constraint',[{'atom',437,'is_subtype'}|[[{'var',437,'Prompt'}|[{'user_type',437,'prompt',[]}]]]]}|[{'type',438,'constraint',[{'atom',438,'is_subtype'}|[[{'var',438,'StartLocation'}|[{'user_type',438,'location',[]}]]]]}|[{'type',439,'constraint',[{'atom',439,'is_subtype'}|[[{'var',439,'Options'}|[{'remote_type',439,[{'atom',439,'erl_scan'}|[{'atom',439,'options'}|[[]]]]}]]]]}|[{'type',440,'constraint',[{'atom',440,'is_subtype'}|[[{'var',440,'Result'}|[{'type',440,'union',[{'remote_type',440,[{'atom',440,'erl_scan'}|[{'atom',440,'tokens_result'}|[[]]]]}|[{'user_type',440,'server_no_data',[]}]]}]]]]}]]]]]]]}]}],
		%% Line 447
		'type' =
		    %% Line 447
		    [{'parse_ret',{'type',447,'union',[{'type',447,'tuple',[{'atom',447,'ok'}|[{'ann_type',448,[{'var',448,'ExprList'}|[{'type',448,'list',[{'remote_type',448,[{'atom',448,'erl_parse'}|[{'atom',448,'abstract_expr'}|[[]]]]}]}]]}|[{'ann_type',449,[{'var',449,'EndLocation'}|[{'user_type',449,'location',[]}]]}]]]}|[{'type',450,'tuple',[{'atom',450,'eof'}|[{'ann_type',450,[{'var',450,'EndLocation'}|[{'user_type',450,'location',[]}]]}]]}|[{'type',451,'tuple',[{'atom',451,'error'}|[{'ann_type',452,[{'var',452,'ErrorInfo'}|[{'type',452,'union',[{'remote_type',452,[{'atom',452,'erl_scan'}|[{'atom',452,'error_info'}|[[]]]]}|[{'remote_type',453,[{'atom',453,'erl_parse'}|[{'atom',453,'error_info'}|[[]]]]}]]}]]}|[{'ann_type',454,[{'var',454,'ErrorLocation'}|[{'user_type',454,'location',[]}]]}]]]}|[{'user_type',455,'server_no_data',[]}]]]]},[]}],
		%% Line 457
		'spec' =
		    %% Line 457
		    [{{'parse_erl_exprs',1},[{'type',457,'bounded_fun',[{'type',457,'fun',[{'type',457,'product',[{'var',457,'Prompt'}]}|[{'var',457,'Result'}]]}|[[{'type',458,'constraint',[{'atom',458,'is_subtype'}|[[{'var',458,'Prompt'}|[{'user_type',458,'prompt',[]}]]]]}|[{'type',459,'constraint',[{'atom',459,'is_subtype'}|[[{'var',459,'Result'}|[{'user_type',459,'parse_ret',[]}]]]]}]]]]}]}],
		%% Line 464
		'spec' =
		    %% Line 464
		    [{{'parse_erl_exprs',2},[{'type',464,'bounded_fun',[{'type',464,'fun',[{'type',464,'product',[{'var',464,'IoDevice'}|[{'var',464,'Prompt'}]]}|[{'var',464,'Result'}]]}|[[{'type',465,'constraint',[{'atom',465,'is_subtype'}|[[{'var',465,'IoDevice'}|[{'user_type',465,'device',[]}]]]]}|[{'type',466,'constraint',[{'atom',466,'is_subtype'}|[[{'var',466,'Prompt'}|[{'user_type',466,'prompt',[]}]]]]}|[{'type',467,'constraint',[{'atom',467,'is_subtype'}|[[{'var',467,'Result'}|[{'user_type',467,'parse_ret',[]}]]]]}]]]]]}]}],
		%% Line 472
		'spec' =
		    %% Line 472
		    [{{'parse_erl_exprs',3},[{'type',472,'bounded_fun',[{'type',472,'fun',[{'type',472,'product',[{'var',472,'IoDevice'}|[{'var',472,'Prompt'}|[{'var',472,'StartLocation'}]]]}|[{'var',472,'Result'}]]}|[[{'type',473,'constraint',[{'atom',473,'is_subtype'}|[[{'var',473,'IoDevice'}|[{'user_type',473,'device',[]}]]]]}|[{'type',474,'constraint',[{'atom',474,'is_subtype'}|[[{'var',474,'Prompt'}|[{'user_type',474,'prompt',[]}]]]]}|[{'type',475,'constraint',[{'atom',475,'is_subtype'}|[[{'var',475,'StartLocation'}|[{'user_type',475,'location',[]}]]]]}|[{'type',476,'constraint',[{'atom',476,'is_subtype'}|[[{'var',476,'Result'}|[{'user_type',476,'parse_ret',[]}]]]]}]]]]]]}]}],
		%% Line 481
		'spec' =
		    %% Line 481
		    [{{'parse_erl_exprs',4},[{'type',481,'bounded_fun',[{'type',481,'fun',[{'type',481,'product',[{'var',481,'IoDevice'}|[{'var',481,'Prompt'}|[{'var',481,'StartLocation'}|[{'var',481,'Options'}]]]]}|[{'var',481,'Result'}]]}|[[{'type',482,'constraint',[{'atom',482,'is_subtype'}|[[{'var',482,'IoDevice'}|[{'user_type',482,'device',[]}]]]]}|[{'type',483,'constraint',[{'atom',483,'is_subtype'}|[[{'var',483,'Prompt'}|[{'user_type',483,'prompt',[]}]]]]}|[{'type',484,'constraint',[{'atom',484,'is_subtype'}|[[{'var',484,'StartLocation'}|[{'user_type',484,'location',[]}]]]]}|[{'type',485,'constraint',[{'atom',485,'is_subtype'}|[[{'var',485,'Options'}|[{'remote_type',485,[{'atom',485,'erl_scan'}|[{'atom',485,'options'}|[[]]]]}]]]]}|[{'type',486,'constraint',[{'atom',486,'is_subtype'}|[[{'var',486,'Result'}|[{'user_type',486,'parse_ret',[]}]]]]}]]]]]]]}]}],
		%% Line 499
		'type' =
		    %% Line 499
		    [{'parse_form_ret',{'type',499,'union',[{'type',499,'tuple',[{'atom',499,'ok'}|[{'ann_type',500,[{'var',500,'AbsForm'}|[{'remote_type',500,[{'atom',500,'erl_parse'}|[{'atom',500,'abstract_form'}|[[]]]]}]]}|[{'ann_type',501,[{'var',501,'EndLocation'}|[{'user_type',501,'location',[]}]]}]]]}|[{'type',502,'tuple',[{'atom',502,'eof'}|[{'ann_type',502,[{'var',502,'EndLocation'}|[{'user_type',502,'location',[]}]]}]]}|[{'type',503,'tuple',[{'atom',503,'error'}|[{'ann_type',504,[{'var',504,'ErrorInfo'}|[{'type',504,'union',[{'remote_type',504,[{'atom',504,'erl_scan'}|[{'atom',504,'error_info'}|[[]]]]}|[{'remote_type',505,[{'atom',505,'erl_parse'}|[{'atom',505,'error_info'}|[[]]]]}]]}]]}|[{'ann_type',506,[{'var',506,'ErrorLocation'}|[{'user_type',506,'location',[]}]]}]]]}|[{'user_type',507,'server_no_data',[]}]]]]},[]}],
		%% Line 509
		'spec' =
		    %% Line 509
		    [{{'parse_erl_form',1},[{'type',509,'bounded_fun',[{'type',509,'fun',[{'type',509,'product',[{'var',509,'Prompt'}]}|[{'var',509,'Result'}]]}|[[{'type',510,'constraint',[{'atom',510,'is_subtype'}|[[{'var',510,'Prompt'}|[{'user_type',510,'prompt',[]}]]]]}|[{'type',511,'constraint',[{'atom',511,'is_subtype'}|[[{'var',511,'Result'}|[{'user_type',511,'parse_form_ret',[]}]]]]}]]]]}]}],
		%% Line 516
		'spec' =
		    %% Line 516
		    [{{'parse_erl_form',2},[{'type',516,'bounded_fun',[{'type',516,'fun',[{'type',516,'product',[{'var',516,'IoDevice'}|[{'var',516,'Prompt'}]]}|[{'var',516,'Result'}]]}|[[{'type',517,'constraint',[{'atom',517,'is_subtype'}|[[{'var',517,'IoDevice'}|[{'user_type',517,'device',[]}]]]]}|[{'type',518,'constraint',[{'atom',518,'is_subtype'}|[[{'var',518,'Prompt'}|[{'user_type',518,'prompt',[]}]]]]}|[{'type',519,'constraint',[{'atom',519,'is_subtype'}|[[{'var',519,'Result'}|[{'user_type',519,'parse_form_ret',[]}]]]]}]]]]]}]}],
		%% Line 524
		'spec' =
		    %% Line 524
		    [{{'parse_erl_form',3},[{'type',524,'bounded_fun',[{'type',524,'fun',[{'type',524,'product',[{'var',524,'IoDevice'}|[{'var',524,'Prompt'}|[{'var',524,'StartLocation'}]]]}|[{'var',524,'Result'}]]}|[[{'type',525,'constraint',[{'atom',525,'is_subtype'}|[[{'var',525,'IoDevice'}|[{'user_type',525,'device',[]}]]]]}|[{'type',526,'constraint',[{'atom',526,'is_subtype'}|[[{'var',526,'Prompt'}|[{'user_type',526,'prompt',[]}]]]]}|[{'type',527,'constraint',[{'atom',527,'is_subtype'}|[[{'var',527,'StartLocation'}|[{'user_type',527,'location',[]}]]]]}|[{'type',528,'constraint',[{'atom',528,'is_subtype'}|[[{'var',528,'Result'}|[{'user_type',528,'parse_form_ret',[]}]]]]}]]]]]]}]}],
		%% Line 533
		'spec' =
		    %% Line 533
		    [{{'parse_erl_form',4},[{'type',533,'bounded_fun',[{'type',533,'fun',[{'type',533,'product',[{'var',533,'IoDevice'}|[{'var',533,'Prompt'}|[{'var',533,'StartLocation'}|[{'var',533,'Options'}]]]]}|[{'var',533,'Result'}]]}|[[{'type',534,'constraint',[{'atom',534,'is_subtype'}|[[{'var',534,'IoDevice'}|[{'user_type',534,'device',[]}]]]]}|[{'type',535,'constraint',[{'atom',535,'is_subtype'}|[[{'var',535,'Prompt'}|[{'user_type',535,'prompt',[]}]]]]}|[{'type',536,'constraint',[{'atom',536,'is_subtype'}|[[{'var',536,'StartLocation'}|[{'user_type',536,'location',[]}]]]]}|[{'type',537,'constraint',[{'atom',537,'is_subtype'}|[[{'var',537,'Options'}|[{'remote_type',537,[{'atom',537,'erl_scan'}|[{'atom',537,'options'}|[[]]]]}]]]]}|[{'type',538,'constraint',[{'atom',538,'is_subtype'}|[[{'var',538,'Result'}|[{'user_type',538,'parse_form_ret',[]}]]]]}]]]]]]]}]}]]
'to_tuple'/1 =
    %% Line 59
    fun (_0) ->
	case _0 of
	  <T>
	      when call 'erlang':'is_tuple'
		    (_0) ->
	      T
	  %% Line 60
	  <T> when 'true' ->
	      {T}
	end
'o_request'/3 =
    %% Line 62
    fun (_0,_1,_2) ->
	%% Line 63
	case apply 'request'/2
		 (_0, _1) of
	  %% Line 64
	  <{'error',Reason}> when 'true' ->
	      let <_3> =
		  apply %% Line 65
			'to_tuple'/1
		      (_1)
	      in  %% Line 65
		  case call 'erlang':'tuple_to_list'
			   (_3) of
		    <[_X_Name|Args]> when 'true' ->
			let <_5> =
			    catch
				%% Line 66
				call 'erlang':'error'
				    ('get_stacktrace')
			in  %% Line 66
			    case _5 of
			      <{'EXIT',{'get_stacktrace',[_X_Current|Mfas]}}> when 'true' ->
				  let <_7> =
				      apply %% Line 67
					    'conv_reason'/2
					  (_2, %% Line 67
					       Reason)
				  in  %% Line 67
				      call 'erlang':'raise'
					  ('error', _7, [{'io',_2,[_0|Args]}|Mfas])
			      ( <_6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_6})
				-| ['compiler_generated'] )
			    end
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 68
	  <Other> when 'true' ->
	      %% Line 69
	      Other
	end
'printable_range'/0 =
    %% Line 74
    fun () ->
	%% Line 75
	call 'erlang':'nif_error'
	    ('undefined')
'put_chars'/1 =
    %% Line 81
    fun (_0) ->
	let <_1> =
	    apply %% Line 82
		  'default_output'/0
		()
	in  %% Line 82
	    apply 'put_chars'/2
		(_1, _0)
'put_chars'/2 =
    %% Line 88
    fun (_0,_1) ->
	%% Line 89
	apply 'put_chars'/3
	    (_0, 'unicode', _1)
'put_chars'/3 =
    %% Line 97
    fun (_0,_1,_2) ->
	%% Line 98
	apply 'o_request'/3
	    (_0, {'put_chars',_1,_2}, 'put_chars')
'nl'/0 =
    %% Line 102
    fun () ->
	let <_0> =
	    apply %% Line 103
		  'default_output'/0
		()
	in  %% Line 103
	    apply 'nl'/1
		(_0)
'nl'/1 =
    %% Line 108
    fun (_0) ->
	%% Line 109
	apply 'o_request'/3
	    (_0, 'nl', 'nl')
'columns'/0 =
    %% Line 113
    fun () ->
	let <_0> =
	    apply %% Line 114
		  'default_output'/0
		()
	in  %% Line 114
	    apply 'columns'/1
		(_0)
'columns'/1 =
    %% Line 119
    fun (_0) ->
	%% Line 120
	case apply 'request'/2
		 (_0, {'get_geometry','columns'}) of
	  %% Line 121
	  <N>
	      when let <_1> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_2> =
			call 'erlang':'>'
			    (N, 0)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 122
	      {'ok',N}
	  %% Line 123
	  <_5> when 'true' ->
	      %% Line 124
	      {'error','enotsup'}
	end
'rows'/0 =
    %% Line 129
    fun () ->
	let <_0> =
	    apply %% Line 130
		  'default_output'/0
		()
	in  %% Line 130
	    apply 'rows'/1
		(_0)
'rows'/1 =
    %% Line 135
    fun (_0) ->
	%% Line 136
	case apply 'request'/2
		 (_0, {'get_geometry','rows'}) of
	  %% Line 137
	  <N>
	      when let <_1> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_2> =
			call 'erlang':'>'
			    (N, 0)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 138
	      {'ok',N}
	  %% Line 139
	  <_5> when 'true' ->
	      %% Line 140
	      {'error','enotsup'}
	end
'get_chars'/2 =
    %% Line 148
    fun (_0,_1) ->
	let <_2> =
	    apply %% Line 149
		  'default_input'/0
		()
	in  %% Line 149
	    apply 'get_chars'/3
		(_2, _0, _1)
'get_chars'/3 =
    %% Line 157
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Io,Prompt,N>
	      when let <_3> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_4> =
			call 'erlang':'>='
			    (N, 0)
		    in  call 'erlang':'and'
			    (_3, _4) ->
	      %% Line 158
	      apply 'request'/2
		  (Io, {'get_chars','unicode',Prompt,N})
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'get_chars',3}}] )
	    -| ['compiler_generated'] )
	end
'get_line'/1 =
    %% Line 164
    fun (_0) ->
	let <_1> =
	    apply %% Line 165
		  'default_input'/0
		()
	in  %% Line 165
	    apply 'get_line'/2
		(_1, _0)
'get_line'/2 =
    %% Line 172
    fun (_0,_1) ->
	%% Line 173
	apply 'request'/2
	    (_0, {'get_line','unicode',_1})
'get_password'/0 =
    %% Line 175
    fun () ->
	let <_0> =
	    apply %% Line 176
		  'default_input'/0
		()
	in  %% Line 176
	    apply 'get_password'/1
		(_0)
'get_password'/1 =
    %% Line 178
    fun (_0) ->
	%% Line 179
	apply 'request'/2
	    (_0, {'get_password','unicode'})
'getopts'/0 =
    %% Line 192
    fun () ->
	let <_0> =
	    apply %% Line 193
		  'default_input'/0
		()
	in  %% Line 193
	    apply 'getopts'/1
		(_0)
'getopts'/1 =
    %% Line 199
    fun (_0) ->
	%% Line 200
	apply 'request'/2
	    (_0, 'getopts')
'setopts'/1 =
    %% Line 208
    fun (_0) ->
	let <_1> =
	    apply %% Line 209
		  'default_input'/0
		()
	in  %% Line 209
	    apply 'setopts'/2
		(_1, _0)
'setopts'/2 =
    %% Line 216
    fun (_0,_1) ->
	%% Line 217
	apply 'request'/2
	    (_0, {'setopts',_1})
'write'/1 =
    %% Line 224
    fun (_0) ->
	let <_1> =
	    apply %% Line 225
		  'default_output'/0
		()
	in  %% Line 225
	    apply 'write'/2
		(_1, _0)
'write'/2 =
    %% Line 231
    fun (_0,_1) ->
	%% Line 232
	apply 'o_request'/3
	    (_0, {'write',_1}, 'write')
'read'/1 =
    %% Line 242
    fun (_0) ->
	let <_1> =
	    apply %% Line 243
		  'default_input'/0
		()
	in  %% Line 243
	    apply 'read'/2
		(_1, _0)
'read'/2 =
    %% Line 253
    fun (_0,_1) ->
	%% Line 254
	case apply 'request'/2
		 (_0, {'get_until','unicode',_1,'erl_scan','tokens',[1]}) of
	  %% Line 255
	  <{'ok',Toks,_X_EndLine}> when 'true' ->
	      %% Line 256
	      call 'erl_parse':'parse_term'
		  (Toks)
	  %% Line 257
	  <{'error',E,_X_EndLine}> when 'true' ->
	      %% Line 258
	      {'error',E}
	  %% Line 259
	  <{'eof',_X_EndLine}> when 'true' ->
	      %% Line 260
	      'eof'
	  %% Line 261
	  <Other> when 'true' ->
	      %% Line 262
	      Other
	end
'read'/3 =
    %% Line 275
    fun (_0,_1,_2) ->
	%% Line 276
	apply 'read'/4
	    (_0, _1, _2, [])
'read'/4 =
    %% Line 289
    fun (_0,_1,_2,_3) ->
	let <Args> =
	    [_2|%% Line 290
		[_3|[]]]
	in  %% Line 291
	    case apply 'request'/2
		     (_0, {'get_until','unicode',_1,'erl_scan','tokens',Args}) of
	      %% Line 292
	      <{'ok',Toks,EndLocation}> when 'true' ->
		  %% Line 293
		  case call 'erl_parse':'parse_term'
			   (Toks) of
		    %% Line 294
		    <{'ok',Term}> when 'true' ->
			{'ok',Term,EndLocation}
		    %% Line 295
		    <{'error',ErrorInfo}> when 'true' ->
			{'error',ErrorInfo,EndLocation}
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_5})
		      -| ['compiler_generated'] )
		  end
	      %% Line 297
	      <Error = {'error',_X_E,_X_EndLocation}> when 'true' ->
		  %% Line 298
		  Error
	      %% Line 299
	      <Eof = {'eof',_X_EndLocation}> when 'true' ->
		  %% Line 300
		  Eof
	      %% Line 301
	      <Other> when 'true' ->
		  %% Line 302
		  Other
	    end
'conv_reason'/2 =
    %% Line 307
    fun (_0,_1) ->
	case <_0,_1> of
	  <_4,'arguments'> when 'true' ->
	      'badarg'
	  %% Line 308
	  <_5,'terminated'> when 'true' ->
	      'terminated'
	  %% Line 309
	  <_6,{'no_translation',_7,_8}> when 'true' ->
	      'no_translation'
	  %% Line 310
	  <_9,_X_Reason> when 'true' ->
	      'badarg'
	end
'fwrite'/1 =
    %% Line 317
    fun (_0) ->
	%% Line 318
	apply 'format'/1
	    (_0)
'fwrite'/2 =
    %% Line 324
    fun (_0,_1) ->
	%% Line 325
	apply 'format'/2
	    (_0, _1)
'fwrite'/3 =
    %% Line 332
    fun (_0,_1,_2) ->
	%% Line 333
	apply 'format'/3
	    (_0, _1, _2)
'fread'/2 =
    %% Line 340
    fun (_0,_1) ->
	let <_2> =
	    apply %% Line 341
		  'default_input'/0
		()
	in  %% Line 341
	    apply 'fread'/3
		(_2, _0, _1)
'fread'/3 =
    %% Line 351
    fun (_0,_1,_2) ->
	%% Line 352
	apply 'request'/2
	    (_0, {'fread',_1,_2})
'format'/1 =
    %% Line 357
    fun (_0) ->
	%% Line 358
	apply 'format'/2
	    (_0, [])
'format'/2 =
    %% Line 364
    fun (_0,_1) ->
	let <_2> =
	    apply %% Line 365
		  'default_output'/0
		()
	in  %% Line 365
	    apply 'format'/3
		(_2, _0, _1)
'format'/3 =
    %% Line 372
    fun (_0,_1,_2) ->
	%% Line 373
	apply 'o_request'/3
	    (_0, {'format',_1,_2}, 'format')
'scan_erl_exprs'/1 =
    %% Line 381
    fun (_0) ->
	let <_1> =
	    apply %% Line 382
		  'default_input'/0
		()
	in  %% Line 382
	    apply 'scan_erl_exprs'/3
		(_1, _0, 1)
'scan_erl_exprs'/2 =
    %% Line 389
    fun (_0,_1) ->
	%% Line 390
	apply 'scan_erl_exprs'/3
	    (_0, _1, 1)
'scan_erl_exprs'/3 =
    %% Line 398
    fun (_0,_1,_2) ->
	%% Line 399
	apply 'scan_erl_exprs'/4
	    (_0, _1, _2, [])
'scan_erl_exprs'/4 =
    %% Line 408
    fun (_0,_1,_2,_3) ->
	%% Line 409
	apply 'request'/2
	    (_0, {'get_until','unicode',_1,'erl_scan','tokens',[_2|[_3|[]]]})
'scan_erl_form'/1 =
    %% Line 415
    fun (_0) ->
	let <_1> =
	    apply %% Line 416
		  'default_input'/0
		()
	in  %% Line 416
	    apply 'scan_erl_form'/3
		(_1, _0, 1)
'scan_erl_form'/2 =
    %% Line 423
    fun (_0,_1) ->
	%% Line 424
	apply 'scan_erl_form'/3
	    (_0, _1, 1)
'scan_erl_form'/3 =
    %% Line 432
    fun (_0,_1,_2) ->
	%% Line 433
	apply 'scan_erl_form'/4
	    (_0, _1, _2, [])
'scan_erl_form'/4 =
    %% Line 442
    fun (_0,_1,_2,_3) ->
	%% Line 443
	apply 'request'/2
	    (_0, {'get_until','unicode',_1,'erl_scan','tokens',[_2|[_3|[]]]})
'parse_erl_exprs'/1 =
    %% Line 461
    fun (_0) ->
	let <_1> =
	    apply %% Line 462
		  'default_input'/0
		()
	in  %% Line 462
	    apply 'parse_erl_exprs'/3
		(_1, _0, 1)
'parse_erl_exprs'/2 =
    %% Line 469
    fun (_0,_1) ->
	%% Line 470
	apply 'parse_erl_exprs'/3
	    (_0, _1, 1)
'parse_erl_exprs'/3 =
    %% Line 478
    fun (_0,_1,_2) ->
	%% Line 479
	apply 'parse_erl_exprs'/4
	    (_0, _1, _2, [])
'parse_erl_exprs'/4 =
    %% Line 488
    fun (_0,_1,_2,_3) ->
	%% Line 489
	case apply 'request'/2
		 (_0, {'get_until','unicode',_1,'erl_scan','tokens',[_2|[_3|[]]]}) of
	  %% Line 490
	  <{'ok',Toks,EndPos}> when 'true' ->
	      %% Line 491
	      case call 'erl_parse':'parse_exprs'
		       (Toks) of
		%% Line 492
		<{'ok',Exprs}> when 'true' ->
		    {'ok',Exprs,EndPos}
		%% Line 493
		<{'error',E}> when 'true' ->
		    {'error',E,EndPos}
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 495
	  <Other> when 'true' ->
	      %% Line 496
	      Other
	end
'parse_erl_form'/1 =
    %% Line 513
    fun (_0) ->
	let <_1> =
	    apply %% Line 514
		  'default_input'/0
		()
	in  %% Line 514
	    apply 'parse_erl_form'/3
		(_1, _0, 1)
'parse_erl_form'/2 =
    %% Line 521
    fun (_0,_1) ->
	%% Line 522
	apply 'parse_erl_form'/3
	    (_0, _1, 1)
'parse_erl_form'/3 =
    %% Line 530
    fun (_0,_1,_2) ->
	%% Line 531
	apply 'parse_erl_form'/4
	    (_0, _1, _2, [])
'parse_erl_form'/4 =
    %% Line 540
    fun (_0,_1,_2,_3) ->
	let <Args> =
	    [_2|%% Line 541
		[_3|[]]]
	in  %% Line 542
	    case apply 'request'/2
		     (_0, {'get_until','unicode',_1,'erl_scan','tokens',Args}) of
	      %% Line 543
	      <{'ok',Toks,EndPos}> when 'true' ->
		  %% Line 544
		  case call 'erl_parse':'parse_form'
			   (Toks) of
		    %% Line 545
		    <{'ok',Exprs}> when 'true' ->
			{'ok',Exprs,EndPos}
		    %% Line 546
		    <{'error',E}> when 'true' ->
			{'error',E,EndPos}
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_5})
		      -| ['compiler_generated'] )
		  end
	      %% Line 548
	      <Other> when 'true' ->
		  %% Line 549
		  Other
	    end
'request'/1 =
    %% Line 554
    fun (_0) ->
	let <_1> =
	    apply %% Line 555
		  'default_output'/0
		()
	in  %% Line 555
	    apply 'request'/2
		(_1, _0)
'request'/2 =
    %% Line 557
    fun (_0,_1) ->
	case <_0,_1> of
	  <'standard_io',Request> when 'true' ->
	      let <_2> =
		  call %% Line 558
		       'erlang':%% Line 558
				'group_leader'
		      ()
	      in  %% Line 558
		  apply 'request'/2
		      (_2, Request)
	  %% Line 559
	  <Pid,Request>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      let <_3> =
		  apply %% Line 560
			'io_request'/2
		      (%% Line 560
		       Pid, %% Line 560
			    Request)
	      in  %% Line 560
		  apply 'execute_request'/2
		      (Pid, _3)
	  %% Line 561
	  <Name,Request>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      %% Line 562
	      case call 'erlang':'whereis'
		       (Name) of
		%% Line 563
		<'undefined'> when 'true' ->
		    %% Line 564
		    {'error','arguments'}
		%% Line 565
		<Pid> when 'true' ->
		    %% Line 566
		    apply 'request'/2
			(Pid, Request)
	      end
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'request',2}}] )
	    -| ['compiler_generated'] )
	end
'execute_request'/2 =
    %% Line 569
    fun (_0,_1) ->
	case <_0,_1> of
	  <Pid,{Convert,Converted}> when 'true' ->
	      let <Mref> =
		  call %% Line 570
		       'erlang':%% Line 570
				'monitor'
		      (%% Line 570
		       'process', %% Line 570
				  Pid)
	      in  let <_3> =
		      call %% Line 571
			   'erlang':%% Line 571
				    'self'
			  ()
		  in  do  %% Line 571
			  call 'erlang':'!'
			      (Pid, {'io_request',_3,Mref,Converted})
			  %% Line 573
			  receive
			    %% Line 574
			    <{'io_reply',_6,Reply}>
				when call 'erlang':'=:='
				      (_6,
				       Mref) ->
				do  %% Line 575
				    call 'erlang':'demonitor'
					(Mref, ['flush'])
				    %% Line 576
				    case <> of
				      %% Line 577
				      <>
					  when ( call 'erlang':'=:='
						  (Convert,
						   'true')
					      -| ['compiler_generated'] ) ->
					  %% Line 578
					  apply 'convert_binaries'/1
					      (Reply)
				      %% Line 579
				      <> when 'true' ->
					  %% Line 580
					  Reply
				    end
			    %% Line 582
			    <{'DOWN',_7,_8,_9,_10}>
				when call 'erlang':'=:='
				      (_7,
				       Mref) ->
				do  %% Line 583
				    receive
				      %% Line 584
				      <{'EXIT',_11,_X_What}>
					  when call 'erlang':'=:='
						(_11,
						 Pid) ->
					  'ok'
				    after %% Line 585
					  0 ->
				      'ok'
				    %% Line 587
				    {'error','terminated'}
			  after 'infinity' ->
			    'true'
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'execute_request',2}}] )
	    -| ['compiler_generated'] )
	end
'requests'/1 =
    %% Line 590
    fun (_0) ->
	let <_1> =
	    apply %% Line 591
		  'default_output'/0
		()
	in  %% Line 591
	    apply 'requests'/2
		(_1, _0)
'requests'/2 =
    %% Line 593
    fun (_0,_1) ->
	case <_0,_1> of
	  <'standard_io',Requests> when 'true' ->
	      let <_2> =
		  call %% Line 594
		       'erlang':%% Line 594
				'group_leader'
		      ()
	      in  %% Line 594
		  apply 'requests'/2
		      (_2, Requests)
	  %% Line 595
	  <Pid,Requests>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      %% Line 596
	      case apply 'io_requests'/2
		       (Pid, Requests) of
		<{Convert,Converted}> when 'true' ->
		    %% Line 597
		    apply 'execute_request'/2
			(Pid, {Convert,{'requests',Converted}})
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 598
	  <Name,Requests>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      %% Line 599
	      case call 'erlang':'whereis'
		       (Name) of
		%% Line 600
		<'undefined'> when 'true' ->
		    %% Line 601
		    {'error','arguments'}
		%% Line 602
		<Pid> when 'true' ->
		    %% Line 603
		    apply 'requests'/2
			(Pid, Requests)
	      end
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'requests',2}}] )
	    -| ['compiler_generated'] )
	end
'default_input'/0 =
    %% Line 607
    fun () ->
	%% Line 608
	call 'erlang':'group_leader'
	    ()
'default_output'/0 =
    %% Line 610
    fun () ->
	%% Line 611
	call 'erlang':'group_leader'
	    ()
'io_requests'/2 =
    %% Line 618
    fun (_0,_1) ->
	%% Line 619
	apply 'io_requests'/4
	    (_0, _1, [], [])
'io_requests'/4 =
    %% Line 621
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Pid,[{'requests',Rs1}|Rs],Cont,Tail> when 'true' ->
	      %% Line 622
	      apply 'io_requests'/4
		  (Pid, Rs1, [Rs|Cont], Tail)
	  %% Line 623
	  <Pid,[R|[]],[],_X_Tail> when 'true' ->
	      %% Line 624
	      case apply 'io_request'/2
		       (Pid, R) of
		<{Conv,Request}> when 'true' ->
		    %% Line 625
		    {Conv,[Request|[]]}
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 626
	  <Pid,[R|Rs],Cont,Tail> when 'true' ->
	      %% Line 627
	      case apply 'io_request'/2
		       (Pid, R) of
		<{_11,Request}> when 'true' ->
		    %% Line 628
		    case apply 'io_requests'/4
			     (Pid, Rs, Cont, Tail) of
		      <{Conv,Requests}> when 'true' ->
			  %% Line 629
			  {Conv,[Request|Requests]}
		      ( <_6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_6})
			-| ['compiler_generated'] )
		    end
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 630
	  <Pid,[],[Rs|Cont],Tail> when 'true' ->
	      %% Line 631
	      apply 'io_requests'/4
		  (Pid, Rs, Cont, Tail)
	  %% Line 632
	  <_X_Pid,[],[],_X_Tail> when 'true' ->
	      %% Line 633
	      {'false',[]}
	  ( <_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8,_7})
		  -| [{'function_name',{'io_requests',4}}] )
	    -| ['compiler_generated'] )
	end
'bc_req'/3 =
    %% Line 635
    fun (_0,_1,_2) ->
	%% Line 636
	case call 'net_kernel':'dflag_unicode_io'
		 (_0) of
	  %% Line 637
	  <'true'> when 'true' ->
	      %% Line 639
	      {'false',_1}
	  %% Line 640
	  <'false'> when 'true' ->
	      %% Line 642
	      case call 'erlang':'tuple_to_list'
		       (_1) of
		%% Line 643
		<[Op|[_X_Enc|[]]]> when 'true' ->
		    %% Line 644
		    {_2,Op}
		%% Line 645
		<[Op|[_X_Enc|T]]> when 'true' ->
		    let <Req> =
			call %% Line 646
			     'erlang':%% Line 646
				      'list_to_tuple'
			    (%% Line 646
			     [Op|T])
		    in  %% Line 647
			{_2,Req}
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
	  ( <_5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_5})
	    -| ['compiler_generated'] )
	end
'io_request'/2 =
    %% Line 651
    fun (_0,_1) ->
	case <_0,_1> of
	  <Pid,{'write',Term}> when 'true' ->
	      %% Line 652
	      apply 'bc_req'/3
		  (Pid, {'put_chars','unicode','io_lib','write',[Term|[]]}, 'false')
	  %% Line 653
	  <Pid,{'format',Format,Args}> when 'true' ->
	      %% Line 654
	      apply 'bc_req'/3
		  (Pid, {'put_chars','unicode','io_lib','format',[Format|[Args|[]]]}, 'false')
	  %% Line 655
	  <Pid,{'fwrite',Format,Args}> when 'true' ->
	      %% Line 656
	      apply 'bc_req'/3
		  (Pid, {'put_chars','unicode','io_lib','fwrite',[Format|[Args|[]]]}, 'false')
	  %% Line 657
	  <Pid,'nl'> when 'true' ->
	      let <_2> =
		  call %% Line 658
		       'io_lib':%% Line 658
				'nl'
		      ()
	      in  %% Line 658
		  apply 'bc_req'/3
		      (Pid, {'put_chars','unicode',_2}, 'false')
	  %% Line 659
	  <Pid,Request0 = {'put_chars',Enc,Chars}>
	      when %% Line 660
		try
		    let <_3> =
			call 'erlang':'is_list'
			    (Chars)
		    in  let <_5> =
			    call 'erlang':'node'
				(Pid)
			in  let <_4> =
				call 'erlang':'node'
				    ()
			    in  let <_6> =
				    call 'erlang':'=:='
					(_5, _4)
				in  call 'erlang':'and'
					(_3, _6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_7> =
		  catch
		      %% Line 663
		      call 'unicode':'characters_to_binary'
			  (Chars, Enc)
	      in  let <_9> =
		      case _7 of
			%% Line 664
			<Binary>
			    when call 'erlang':'is_binary'
				  (_7) ->
			    %% Line 665
			    {'put_chars',Enc,Binary}
			%% Line 666
			<_18> when 'true' ->
			    %% Line 667
			    Request0
		      end
		  in  %% Line 669
		      {'false',_9}
	  %% Line 670
	  <Pid,Request0 = {'put_chars',Enc,Chars}>
	      when %% Line 671
		call 'erlang':'is_list'
		    (Chars) ->
	      %% Line 672
	      case call 'net_kernel':'dflag_unicode_io'
		       (Pid) of
		%% Line 673
		<'true'> when 'true' ->
		    let <_11> =
			catch
			    %% Line 674
			    call 'unicode':'characters_to_binary'
				(Chars, Enc, 'unicode')
		    in  %% Line 674
			case _11 of
			  %% Line 675
			  <Binary>
			      when call 'erlang':'is_binary'
				    (_11) ->
			      %% Line 676
			      {'false',{'put_chars','unicode',Binary}}
			  %% Line 677
			  <_19> when 'true' ->
			      %% Line 678
			      {'false',Request0}
			end
		%% Line 680
		<'false'> when 'true' ->
		    let <_13> =
			catch
			    %% Line 682
			    call 'unicode':'characters_to_binary'
				(Chars, Enc, 'latin1')
		    in  %% Line 682
			case _13 of
			  %% Line 683
			  <Binary>
			      when call 'erlang':'is_binary'
				    (_13) ->
			      %% Line 684
			      {'false',{'put_chars',Binary}}
			  %% Line 685
			  <_20> when 'true' ->
			      %% Line 686
			      {'false',{'put_chars',Chars}}
			end
		( <_15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 689
	  <Pid,{'fread',Prompt,Format}> when 'true' ->
	      %% Line 690
	      apply 'bc_req'/3
		  (Pid, {'get_until','unicode',Prompt,'io_lib','fread',[Format|[]]}, 'true')
	  %% Line 691
	  <Pid,_@r0 = {'get_until',Enc,Prompt,M,F,A}> when 'true' ->
	      %% Line 692
	      apply 'bc_req'/3
		  (Pid, _@r0, 'true')
	  %% Line 693
	  <Pid,_@r1 = {'get_chars',Enc,Prompt,N}> when 'true' ->
	      %% Line 694
	      apply 'bc_req'/3
		  (Pid, _@r1, 'true')
	  %% Line 695
	  <Pid,_@r2 = {'get_line',Enc,Prompt}> when 'true' ->
	      %% Line 696
	      apply 'bc_req'/3
		  (Pid, _@r2, 'true')
	  %% Line 697
	  <Pid,_@r3 = {'get_password',Enc}> when 'true' ->
	      %% Line 698
	      apply 'bc_req'/3
		  (Pid, _@r3, 'true')
	  %% Line 699
	  <_X_Pid,R> when 'true' ->
	      %% Line 700
	      {'false',R}
	end
'convert_binaries'/1 =
    %% Line 702
    fun (_0) ->
	case _0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      %% Line 703
	      call 'unicode':'characters_to_binary'
		  (Bin, 'latin1', 'unicode')
	  %% Line 704
	  <Else> when 'true' ->
	      %% Line 705
	      Else
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('io')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('io', _0)
end