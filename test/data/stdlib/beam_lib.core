module 'beam_lib' ['all_chunks'/1,
		   'build_module'/1,
		   'chunks'/2,
		   'chunks'/3,
		   'clear_crypto_key_fun'/0,
		   'cmp'/2,
		   'cmp_dirs'/2,
		   'code_change'/3,
		   'crypto_key_fun'/1,
		   'diff_dirs'/2,
		   'format_error'/1,
		   'get_crypto_key'/1,
		   'handle_call'/3,
		   'handle_cast'/2,
		   'handle_info'/2,
		   'info'/1,
		   'init'/1,
		   'make_crypto_key'/2,
		   'md5'/1,
		   'module_info'/0,
		   'module_info'/1,
		   'significant_chunks'/0,
		   'strip'/1,
		   'strip'/2,
		   'strip_files'/1,
		   'strip_files'/2,
		   'strip_release'/1,
		   'strip_release'/2,
		   'terminate'/2,
		   'version'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[98|[101|[97|[109|[95|[108|[105|[98|[46|[101|[114|[108]]]]]]]]]]]]]]]],1}],
		%% Line 21
		'behaviour' =
		    %% Line 21
		    ['gen_server'],
		%% Line 22
		'compile' =
		    %% Line 22
		    [{'nowarn_deprecated_function',{'crypto','block_decrypt',4}}],
		%% Line 25
		'compile' =
		    %% Line 25
		    [{'no_auto_import',[{'error',1}]}],
		%% Line 27
		'compile' =
		    %% Line 27
		    [{'no_auto_import',[{'error',2}]}],
		%% Line 54
		'export_type' =
		    %% Line 54
		    [{'attrib_entry',0}|[{'compinfo_entry',0}|[{'labeled_entry',0}|[{'label',0}]]]],
		%% Line 61
		'type' =
		    %% Line 61
		    [{'beam',{'type',61,'union',[{'remote_type',61,[{'atom',61,'file'}|[{'atom',61,'filename'}|[[]]]]}|[{'type',61,'binary',[]}]]},[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{'debug_info',{'type',62,'union',[{'type',62,'tuple',[{'ann_type',62,[{'var',62,'DbgiVersion'}|[{'type',62,'atom',[]}]]}|[{'ann_type',62,[{'var',62,'Backend'}|[{'type',62,'module',[]}]]}|[{'ann_type',62,[{'var',62,'Data'}|[{'type',62,'term',[]}]]}]]]}|[{'atom',62,'no_debug_info'}]]},[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{'forms',{'type',64,'list',[{'type',64,'union',[{'remote_type',64,[{'atom',64,'erl_parse'}|[{'atom',64,'abstract_form'}|[[]]]]}|[{'remote_type',64,[{'atom',64,'erl_parse'}|[{'atom',64,'form_info'}|[[]]]]}]]}]},[]}],
		%% Line 66
		'type' =
		    %% Line 66
		    [{'abst_code',{'type',66,'union',[{'type',66,'tuple',[{'ann_type',66,[{'var',66,'AbstVersion'}|[{'type',66,'atom',[]}]]}|[{'user_type',66,'forms',[]}]]}|[{'atom',66,'no_abstract_code'}]]},[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{'dataB',{'type',67,'binary',[]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'index',{'type',68,'non_neg_integer',[]},[]}],
		%% Line 69
		'type' =
		    %% Line 69
		    [{'label',{'type',69,'integer',[]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'chunkid',{'type',71,'nonempty_string',[]},[]}],
		%% Line 73
		'type' =
		    %% Line 73
		    [{'chunkname',{'type',73,'union',[{'atom',73,'abstract_code'}|[{'atom',73,'debug_info'}|[{'atom',74,'attributes'}|[{'atom',74,'compile_info'}|[{'atom',75,'exports'}|[{'atom',75,'labeled_exports'}|[{'atom',76,'imports'}|[{'atom',76,'indexed_imports'}|[{'atom',77,'locals'}|[{'atom',77,'labeled_locals'}|[{'atom',78,'atoms'}]]]]]]]]]]]},[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{'chunkref',{'type',79,'union',[{'user_type',79,'chunkname',[]}|[{'user_type',79,'chunkid',[]}]]},[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{'attrib_entry',{'type',81,'tuple',[{'ann_type',81,[{'var',81,'Attribute'}|[{'type',81,'atom',[]}]]}|[{'type',81,'list',[{'ann_type',81,[{'var',81,'AttributeValue'}|[{'type',81,'term',[]}]]}]}]]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'compinfo_entry',{'type',82,'tuple',[{'ann_type',82,[{'var',82,'InfoKey'}|[{'type',82,'atom',[]}]]}|[{'type',82,'term',[]}]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'labeled_entry',{'type',83,'tuple',[{'ann_type',83,[{'var',83,'Function'}|[{'type',83,'atom',[]}]]}|[{'type',83,'arity',[]}|[{'user_type',83,'label',[]}]]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'chunkdata',{'type',85,'union',[{'type',85,'tuple',[{'user_type',85,'chunkid',[]}|[{'user_type',85,'dataB',[]}]]}|[{'type',86,'tuple',[{'atom',86,'abstract_code'}|[{'user_type',86,'abst_code',[]}]]}|[{'type',87,'tuple',[{'atom',87,'debug_info'}|[{'user_type',87,'debug_info',[]}]]}|[{'type',88,'tuple',[{'atom',88,'attributes'}|[{'type',88,'list',[{'user_type',88,'attrib_entry',[]}]}]]}|[{'type',89,'tuple',[{'atom',89,'compile_info'}|[{'type',89,'list',[{'user_type',89,'compinfo_entry',[]}]}]]}|[{'type',90,'tuple',[{'atom',90,'exports'}|[{'type',90,'list',[{'type',90,'tuple',[{'type',90,'atom',[]}|[{'type',90,'arity',[]}]]}]}]]}|[{'type',91,'tuple',[{'atom',91,'labeled_exports'}|[{'type',91,'list',[{'user_type',91,'labeled_entry',[]}]}]]}|[{'type',92,'tuple',[{'atom',92,'imports'}|[{'type',92,'list',[{'type',92,'mfa',[]}]}]]}|[{'type',93,'tuple',[{'atom',93,'indexed_imports'}|[{'type',93,'list',[{'type',93,'tuple',[{'user_type',93,'index',[]}|[{'type',93,'module',[]}|[{'ann_type',93,[{'var',93,'Function'}|[{'type',93,'atom',[]}]]}|[{'type',93,'arity',[]}]]]]}]}]]}|[{'type',94,'tuple',[{'atom',94,'locals'}|[{'type',94,'list',[{'type',94,'tuple',[{'type',94,'atom',[]}|[{'type',94,'arity',[]}]]}]}]]}|[{'type',95,'tuple',[{'atom',95,'labeled_locals'}|[{'type',95,'list',[{'user_type',95,'labeled_entry',[]}]}]]}|[{'type',96,'tuple',[{'atom',96,'atoms'}|[{'type',96,'list',[{'type',96,'tuple',[{'type',96,'integer',[]}|[{'type',96,'atom',[]}]]}]}]]}]]]]]]]]]]]]},[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{'info_rsn',{'type',99,'union',[{'type',99,'tuple',[{'atom',99,'chunk_too_big'}|[{'remote_type',99,[{'atom',99,'file'}|[{'atom',99,'filename'}|[[]]]]}|[{'user_type',100,'chunkid',[]}|[{'ann_type',100,[{'var',100,'ChunkSize'}|[{'type',100,'non_neg_integer',[]}]]}|[{'ann_type',101,[{'var',101,'FileSize'}|[{'type',101,'non_neg_integer',[]}]]}]]]]]}|[{'type',102,'tuple',[{'atom',102,'invalid_beam_file'}|[{'remote_type',102,[{'atom',102,'file'}|[{'atom',102,'filename'}|[[]]]]}|[{'ann_type',103,[{'var',103,'Position'}|[{'type',103,'non_neg_integer',[]}]]}]]]}|[{'type',104,'tuple',[{'atom',104,'invalid_chunk'}|[{'remote_type',104,[{'atom',104,'file'}|[{'atom',104,'filename'}|[[]]]]}|[{'user_type',104,'chunkid',[]}]]]}|[{'type',105,'tuple',[{'atom',105,'missing_chunk'}|[{'remote_type',105,[{'atom',105,'file'}|[{'atom',105,'filename'}|[[]]]]}|[{'user_type',105,'chunkid',[]}]]]}|[{'type',106,'tuple',[{'atom',106,'not_a_beam_file'}|[{'remote_type',106,[{'atom',106,'file'}|[{'atom',106,'filename'}|[[]]]]}]]}|[{'type',107,'tuple',[{'atom',107,'file_error'}|[{'remote_type',107,[{'atom',107,'file'}|[{'atom',107,'filename'}|[[]]]]}|[{'remote_type',107,[{'atom',107,'file'}|[{'atom',107,'posix'}|[[]]]]}]]]}]]]]]]},[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'chnk_rsn',{'type',108,'union',[{'type',108,'tuple',[{'atom',108,'unknown_chunk'}|[{'remote_type',108,[{'atom',108,'file'}|[{'atom',108,'filename'}|[[]]]]}|[{'type',108,'atom',[]}]]]}|[{'type',109,'tuple',[{'atom',109,'key_missing_or_invalid'}|[{'remote_type',109,[{'atom',109,'file'}|[{'atom',109,'filename'}|[[]]]]}|[{'type',110,'union',[{'atom',110,'abstract_code'}|[{'atom',110,'debug_info'}]]}]]]}|[{'user_type',111,'info_rsn',[]}]]]},[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{'cmp_rsn',{'type',112,'union',[{'type',112,'tuple',[{'atom',112,'modules_different'}|[{'type',112,'module',[]}|[{'type',112,'module',[]}]]]}|[{'type',113,'tuple',[{'atom',113,'chunks_different'}|[{'user_type',113,'chunkid',[]}]]}|[{'atom',114,'different_chunks'}|[{'user_type',115,'info_rsn',[]}]]]]},[]}],
		%% Line 123
		'spec' =
		    %% Line 123
		    [{{'info',1},[{'type',123,'bounded_fun',[{'type',123,'fun',[{'type',123,'product',[{'var',123,'Beam'}]}|[{'type',123,'union',[{'type',123,'list',[{'var',123,'InfoPair'}]}|[{'type',123,'tuple',[{'atom',123,'error'}|[{'atom',123,'beam_lib'}|[{'user_type',123,'info_rsn',[]}]]]}]]}]]}|[[{'type',124,'constraint',[{'atom',124,'is_subtype'}|[[{'var',124,'Beam'}|[{'user_type',124,'beam',[]}]]]]}|[{'type',125,'constraint',[{'atom',125,'is_subtype'}|[[{'var',125,'InfoPair'}|[{'type',125,'union',[{'type',125,'tuple',[{'atom',125,'file'}|[{'ann_type',125,[{'var',125,'Filename'}|[{'remote_type',125,[{'atom',125,'file'}|[{'atom',125,'filename'}|[[]]]]}]]}]]}|[{'type',126,'tuple',[{'atom',126,'binary'}|[{'ann_type',126,[{'var',126,'Binary'}|[{'type',126,'binary',[]}]]}]]}|[{'type',127,'tuple',[{'atom',127,'module'}|[{'ann_type',127,[{'var',127,'Module'}|[{'type',127,'module',[]}]]}]]}|[{'type',128,'tuple',[{'atom',128,'chunks'}|[{'type',128,'list',[{'type',128,'tuple',[{'ann_type',128,[{'var',128,'ChunkId'}|[{'user_type',128,'chunkid',[]}]]}|[{'ann_type',129,[{'var',129,'Pos'}|[{'type',129,'non_neg_integer',[]}]]}|[{'ann_type',130,[{'var',130,'Size'}|[{'type',130,'non_neg_integer',[]}]]}]]]}]}]]}]]]]}]]]]}]]]]}]}],
		%% Line 135
		'spec' =
		    %% Line 135
		    [{{'chunks',2},[{'type',135,'bounded_fun',[{'type',135,'fun',[{'type',135,'product',[{'var',135,'Beam'}|[{'var',135,'ChunkRefs'}]]}|[{'type',136,'union',[{'type',136,'tuple',[{'atom',136,'ok'}|[{'type',136,'tuple',[{'type',136,'module',[]}|[{'type',136,'list',[{'user_type',136,'chunkdata',[]}]}]]}]]}|[{'type',137,'tuple',[{'atom',137,'error'}|[{'atom',137,'beam_lib'}|[{'user_type',137,'chnk_rsn',[]}]]]}]]}]]}|[[{'type',138,'constraint',[{'atom',138,'is_subtype'}|[[{'var',138,'Beam'}|[{'user_type',138,'beam',[]}]]]]}|[{'type',139,'constraint',[{'atom',139,'is_subtype'}|[[{'var',139,'ChunkRefs'}|[{'type',139,'list',[{'user_type',139,'chunkref',[]}]}]]]]}]]]]}]}],
		%% Line 144
		'spec' =
		    %% Line 144
		    [{{'chunks',3},[{'type',144,'bounded_fun',[{'type',144,'fun',[{'type',144,'product',[{'var',144,'Beam'}|[{'var',144,'ChunkRefs'}|[{'var',144,'Options'}]]]}|[{'type',145,'union',[{'type',145,'tuple',[{'atom',145,'ok'}|[{'type',145,'tuple',[{'type',145,'module',[]}|[{'type',145,'list',[{'var',145,'ChunkResult'}]}]]}]]}|[{'type',146,'tuple',[{'atom',146,'error'}|[{'atom',146,'beam_lib'}|[{'user_type',146,'chnk_rsn',[]}]]]}]]}]]}|[[{'type',147,'constraint',[{'atom',147,'is_subtype'}|[[{'var',147,'Beam'}|[{'user_type',147,'beam',[]}]]]]}|[{'type',148,'constraint',[{'atom',148,'is_subtype'}|[[{'var',148,'ChunkRefs'}|[{'type',148,'list',[{'user_type',148,'chunkref',[]}]}]]]]}|[{'type',149,'constraint',[{'atom',149,'is_subtype'}|[[{'var',149,'Options'}|[{'type',149,'list',[{'atom',149,'allow_missing_chunks'}]}]]]]}|[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'ChunkResult'}|[{'type',150,'union',[{'user_type',150,'chunkdata',[]}|[{'type',150,'tuple',[{'ann_type',150,[{'var',150,'ChunkRef'}|[{'user_type',150,'chunkref',[]}]]}|[{'atom',150,'missing_chunk'}]]}]]}]]]]}]]]]]]}]}],
		%% Line 156
		'spec' =
		    %% Line 156
		    [{{'all_chunks',1},[{'type',156,'fun',[{'type',156,'product',[{'user_type',156,'beam',[]}]}|[{'type',157,'union',[{'type',157,'tuple',[{'atom',157,'ok'}|[{'atom',157,'beam_lib'}|[{'type',157,'list',[{'type',157,'tuple',[{'user_type',157,'chunkid',[]}|[{'user_type',157,'dataB',[]}]]}]}]]]}|[{'type',157,'tuple',[{'atom',157,'error'}|[{'atom',157,'beam_lib'}|[{'user_type',157,'info_rsn',[]}]]]}]]}]]}]}],
		%% Line 162
		'spec' =
		    %% Line 162
		    [{{'cmp',2},[{'type',162,'bounded_fun',[{'type',162,'fun',[{'type',162,'product',[{'var',162,'Beam1'}|[{'var',162,'Beam2'}]]}|[{'type',162,'union',[{'atom',162,'ok'}|[{'type',162,'tuple',[{'atom',162,'error'}|[{'atom',162,'beam_lib'}|[{'user_type',162,'cmp_rsn',[]}]]]}]]}]]}|[[{'type',163,'constraint',[{'atom',163,'is_subtype'}|[[{'var',163,'Beam1'}|[{'user_type',163,'beam',[]}]]]]}|[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'Beam2'}|[{'user_type',164,'beam',[]}]]]]}]]]]}]}],
		%% Line 170
		'spec' =
		    %% Line 170
		    [{{'cmp_dirs',2},[{'type',170,'bounded_fun',[{'type',170,'fun',[{'type',170,'product',[{'var',170,'Dir1'}|[{'var',170,'Dir2'}]]}|[{'type',171,'union',[{'type',171,'tuple',[{'var',171,'Only1'}|[{'var',171,'Only2'}|[{'var',171,'Different'}]]]}|[{'type',171,'tuple',[{'atom',171,'error'}|[{'atom',171,'beam_lib'}|[{'var',171,'Reason'}]]]}]]}]]}|[[{'type',172,'constraint',[{'atom',172,'is_subtype'}|[[{'var',172,'Dir1'}|[{'type',172,'union',[{'type',172,'atom',[]}|[{'remote_type',172,[{'atom',172,'file'}|[{'atom',172,'filename'}|[[]]]]}]]}]]]]}|[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'Dir2'}|[{'type',173,'union',[{'type',173,'atom',[]}|[{'remote_type',173,[{'atom',173,'file'}|[{'atom',173,'filename'}|[[]]]]}]]}]]]]}|[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'Only1'}|[{'type',174,'list',[{'remote_type',174,[{'atom',174,'file'}|[{'atom',174,'filename'}|[[]]]]}]}]]]]}|[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'Only2'}|[{'type',175,'list',[{'remote_type',175,[{'atom',175,'file'}|[{'atom',175,'filename'}|[[]]]]}]}]]]]}|[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'Different'}|[{'type',176,'list',[{'type',176,'tuple',[{'ann_type',176,[{'var',176,'Filename1'}|[{'remote_type',176,[{'atom',176,'file'}|[{'atom',176,'filename'}|[[]]]]}]]}|[{'ann_type',176,[{'var',176,'Filename2'}|[{'remote_type',176,[{'atom',176,'file'}|[{'atom',176,'filename'}|[[]]]]}]]}]]}]}]]]]}|[{'type',177,'constraint',[{'atom',177,'is_subtype'}|[[{'var',177,'Reason'}|[{'type',177,'union',[{'type',177,'tuple',[{'atom',177,'not_a_directory'}|[{'type',177,'term',[]}]]}|[{'user_type',177,'info_rsn',[]}]]}]]]]}]]]]]]]]}]}],
		%% Line 182
		'spec' =
		    %% Line 182
		    [{{'diff_dirs',2},[{'type',182,'bounded_fun',[{'type',182,'fun',[{'type',182,'product',[{'var',182,'Dir1'}|[{'var',182,'Dir2'}]]}|[{'type',182,'union',[{'atom',182,'ok'}|[{'type',182,'tuple',[{'atom',182,'error'}|[{'atom',182,'beam_lib'}|[{'var',182,'Reason'}]]]}]]}]]}|[[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'Dir1'}|[{'type',183,'union',[{'type',183,'atom',[]}|[{'remote_type',183,[{'atom',183,'file'}|[{'atom',183,'filename'}|[[]]]]}]]}]]]]}|[{'type',184,'constraint',[{'atom',184,'is_subtype'}|[[{'var',184,'Dir2'}|[{'type',184,'union',[{'type',184,'atom',[]}|[{'remote_type',184,[{'atom',184,'file'}|[{'atom',184,'filename'}|[[]]]]}]]}]]]]}|[{'type',185,'constraint',[{'atom',185,'is_subtype'}|[[{'var',185,'Reason'}|[{'type',185,'union',[{'type',185,'tuple',[{'atom',185,'not_a_directory'}|[{'type',185,'term',[]}]]}|[{'user_type',185,'info_rsn',[]}]]}]]]]}]]]]]}]}],
		%% Line 190
		'spec' =
		    %% Line 190
		    [{{'strip',1},[{'type',190,'bounded_fun',[{'type',190,'fun',[{'type',190,'product',[{'var',190,'Beam1'}]}|[{'type',191,'union',[{'type',191,'tuple',[{'atom',191,'ok'}|[{'type',191,'tuple',[{'type',191,'module',[]}|[{'var',191,'Beam2'}]]}]]}|[{'type',191,'tuple',[{'atom',191,'error'}|[{'atom',191,'beam_lib'}|[{'user_type',191,'info_rsn',[]}]]]}]]}]]}|[[{'type',192,'constraint',[{'atom',192,'is_subtype'}|[[{'var',192,'Beam1'}|[{'user_type',192,'beam',[]}]]]]}|[{'type',193,'constraint',[{'atom',193,'is_subtype'}|[[{'var',193,'Beam2'}|[{'user_type',193,'beam',[]}]]]]}]]]]}]}],
		%% Line 198
		'spec' =
		    %% Line 198
		    [{{'strip',2},[{'type',198,'bounded_fun',[{'type',198,'fun',[{'type',198,'product',[{'var',198,'Beam1'}|[{'var',198,'AdditionalChunks'}]]}|[{'type',199,'union',[{'type',199,'tuple',[{'atom',199,'ok'}|[{'type',199,'tuple',[{'type',199,'module',[]}|[{'var',199,'Beam2'}]]}]]}|[{'type',199,'tuple',[{'atom',199,'error'}|[{'atom',199,'beam_lib'}|[{'user_type',199,'info_rsn',[]}]]]}]]}]]}|[[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'Beam1'}|[{'user_type',200,'beam',[]}]]]]}|[{'type',201,'constraint',[{'atom',201,'is_subtype'}|[[{'var',201,'AdditionalChunks'}|[{'type',201,'list',[{'user_type',201,'chunkid',[]}]}]]]]}|[{'type',202,'constraint',[{'atom',202,'is_subtype'}|[[{'var',202,'Beam2'}|[{'user_type',202,'beam',[]}]]]]}]]]]]}]}],
		%% Line 208
		'spec' =
		    %% Line 208
		    [{{'strip_files',1},[{'type',208,'bounded_fun',[{'type',208,'fun',[{'type',208,'product',[{'var',208,'Files'}]}|[{'type',209,'union',[{'type',209,'tuple',[{'atom',209,'ok'}|[{'type',209,'list',[{'type',209,'tuple',[{'type',209,'module',[]}|[{'var',209,'Beam'}]]}]}]]}|[{'type',209,'tuple',[{'atom',209,'error'}|[{'atom',209,'beam_lib'}|[{'user_type',209,'info_rsn',[]}]]]}]]}]]}|[[{'type',210,'constraint',[{'atom',210,'is_subtype'}|[[{'var',210,'Files'}|[{'type',210,'list',[{'user_type',210,'beam',[]}]}]]]]}|[{'type',211,'constraint',[{'atom',211,'is_subtype'}|[[{'var',211,'Beam'}|[{'user_type',211,'beam',[]}]]]]}]]]]}]}],
		%% Line 216
		'spec' =
		    %% Line 216
		    [{{'strip_files',2},[{'type',216,'bounded_fun',[{'type',216,'fun',[{'type',216,'product',[{'var',216,'Files'}|[{'var',216,'AdditionalChunks'}]]}|[{'type',217,'union',[{'type',217,'tuple',[{'atom',217,'ok'}|[{'type',217,'list',[{'type',217,'tuple',[{'type',217,'module',[]}|[{'var',217,'Beam'}]]}]}]]}|[{'type',217,'tuple',[{'atom',217,'error'}|[{'atom',217,'beam_lib'}|[{'user_type',217,'info_rsn',[]}]]]}]]}]]}|[[{'type',218,'constraint',[{'atom',218,'is_subtype'}|[[{'var',218,'Files'}|[{'type',218,'list',[{'user_type',218,'beam',[]}]}]]]]}|[{'type',219,'constraint',[{'atom',219,'is_subtype'}|[[{'var',219,'AdditionalChunks'}|[{'type',219,'list',[{'user_type',219,'chunkid',[]}]}]]]]}|[{'type',220,'constraint',[{'atom',220,'is_subtype'}|[[{'var',220,'Beam'}|[{'user_type',220,'beam',[]}]]]]}]]]]]}]}],
		%% Line 226
		'spec' =
		    %% Line 226
		    [{{'strip_release',1},[{'type',226,'bounded_fun',[{'type',226,'fun',[{'type',226,'product',[{'var',226,'Dir'}]}|[{'type',227,'union',[{'type',227,'tuple',[{'atom',227,'ok'}|[{'type',227,'list',[{'type',227,'tuple',[{'type',227,'module',[]}|[{'remote_type',227,[{'atom',227,'file'}|[{'atom',227,'filename'}|[[]]]]}]]}]}]]}|[{'type',228,'tuple',[{'atom',228,'error'}|[{'atom',228,'beam_lib'}|[{'var',228,'Reason'}]]]}]]}]]}|[[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'Dir'}|[{'type',229,'union',[{'type',229,'atom',[]}|[{'remote_type',229,[{'atom',229,'file'}|[{'atom',229,'filename'}|[[]]]]}]]}]]]]}|[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'Reason'}|[{'type',230,'union',[{'type',230,'tuple',[{'atom',230,'not_a_directory'}|[{'type',230,'term',[]}]]}|[{'user_type',230,'info_rsn',[]}]]}]]]]}]]]]}]}],
		%% Line 235
		'spec' =
		    %% Line 235
		    [{{'strip_release',2},[{'type',235,'bounded_fun',[{'type',235,'fun',[{'type',235,'product',[{'var',235,'Dir'}|[{'var',235,'AdditionalChunks'}]]}|[{'type',236,'union',[{'type',236,'tuple',[{'atom',236,'ok'}|[{'type',236,'list',[{'type',236,'tuple',[{'type',236,'module',[]}|[{'remote_type',236,[{'atom',236,'file'}|[{'atom',236,'filename'}|[[]]]]}]]}]}]]}|[{'type',237,'tuple',[{'atom',237,'error'}|[{'atom',237,'beam_lib'}|[{'var',237,'Reason'}]]]}]]}]]}|[[{'type',238,'constraint',[{'atom',238,'is_subtype'}|[[{'var',238,'Dir'}|[{'type',238,'union',[{'type',238,'atom',[]}|[{'remote_type',238,[{'atom',238,'file'}|[{'atom',238,'filename'}|[[]]]]}]]}]]]]}|[{'type',239,'constraint',[{'atom',239,'is_subtype'}|[[{'var',239,'AdditionalChunks'}|[{'type',239,'list',[{'user_type',239,'chunkid',[]}]}]]]]}|[{'type',240,'constraint',[{'atom',240,'is_subtype'}|[[{'var',240,'Reason'}|[{'type',240,'union',[{'type',240,'tuple',[{'atom',240,'not_a_directory'}|[{'type',240,'term',[]}]]}|[{'user_type',240,'info_rsn',[]}]]}]]]]}]]]]]}]}],
		%% Line 245
		'spec' =
		    %% Line 245
		    [{{'version',1},[{'type',245,'bounded_fun',[{'type',245,'fun',[{'type',245,'product',[{'var',245,'Beam'}]}|[{'type',246,'union',[{'type',246,'tuple',[{'atom',246,'ok'}|[{'type',246,'tuple',[{'type',246,'module',[]}|[{'type',246,'list',[{'ann_type',246,[{'var',246,'Version'}|[{'type',246,'term',[]}]]}]}]]}]]}|[{'type',247,'tuple',[{'atom',247,'error'}|[{'atom',247,'beam_lib'}|[{'user_type',247,'chnk_rsn',[]}]]]}]]}]]}|[[{'type',248,'constraint',[{'atom',248,'is_subtype'}|[[{'var',248,'Beam'}|[{'user_type',248,'beam',[]}]]]]}]]]}]}],
		%% Line 259
		'spec' =
		    %% Line 259
		    [{{'md5',1},[{'type',259,'bounded_fun',[{'type',259,'fun',[{'type',259,'product',[{'var',259,'Beam'}]}|[{'type',260,'union',[{'type',260,'tuple',[{'atom',260,'ok'}|[{'type',260,'tuple',[{'type',260,'module',[]}|[{'var',260,'MD5'}]]}]]}|[{'type',260,'tuple',[{'atom',260,'error'}|[{'atom',260,'beam_lib'}|[{'user_type',260,'chnk_rsn',[]}]]]}]]}]]}|[[{'type',261,'constraint',[{'atom',261,'is_subtype'}|[[{'var',261,'Beam'}|[{'user_type',261,'beam',[]}]]]]}|[{'type',262,'constraint',[{'atom',262,'is_subtype'}|[[{'var',262,'MD5'}|[{'type',262,'binary',[]}]]]]}]]]]}]}],
		%% Line 273
		'spec' =
		    %% Line 273
		    [{{'format_error',1},[{'type',273,'bounded_fun',[{'type',273,'fun',[{'type',273,'product',[{'var',273,'Reason'}]}|[{'remote_type',273,[{'atom',273,'io_lib'}|[{'atom',273,'chars'}|[[]]]]}]]}|[[{'type',274,'constraint',[{'atom',274,'is_subtype'}|[[{'var',274,'Reason'}|[{'type',274,'term',[]}]]]]}]]]}]}],
		%% Line 321
		'type' =
		    %% Line 321
		    [{'mode',{'atom',321,'des3_cbc'},[]}],
		%% Line 322
		'type' =
		    %% Line 322
		    [{'crypto_fun_arg',{'type',322,'union',[{'atom',322,'init'}|[{'atom',323,'clear'}|[{'type',324,'tuple',[{'atom',324,'debug_info'}|[{'user_type',324,'mode',[]}|[{'type',324,'module',[]}|[{'remote_type',324,[{'atom',324,'file'}|[{'atom',324,'filename'}|[[]]]]}]]]]}]]]},[]}],
		%% Line 325
		'type' =
		    %% Line 325
		    [{'crypto_fun',{'type',325,'fun',[{'type',325,'product',[{'user_type',325,'crypto_fun_arg',[]}]}|[{'type',325,'term',[]}]]},[]}],
		%% Line 327
		'spec' =
		    %% Line 327
		    [{{'crypto_key_fun',1},[{'type',327,'bounded_fun',[{'type',327,'fun',[{'type',327,'product',[{'var',327,'CryptoKeyFun'}]}|[{'type',327,'union',[{'atom',327,'ok'}|[{'type',327,'tuple',[{'atom',327,'error'}|[{'var',327,'Reason'}]]}]]}]]}|[[{'type',328,'constraint',[{'atom',328,'is_subtype'}|[[{'var',328,'CryptoKeyFun'}|[{'user_type',328,'crypto_fun',[]}]]]]}|[{'type',329,'constraint',[{'atom',329,'is_subtype'}|[[{'var',329,'Reason'}|[{'type',329,'union',[{'atom',329,'badfun'}|[{'atom',329,'exists'}|[{'type',329,'term',[]}]]]}]]]]}]]]]}]}],
		%% Line 334
		'spec' =
		    %% Line 334
		    [{{'clear_crypto_key_fun',0},[{'type',334,'bounded_fun',[{'type',334,'fun',[{'type',334,'product',[]}|[{'type',334,'union',[{'atom',334,'undefined'}|[{'type',334,'tuple',[{'atom',334,'ok'}|[{'var',334,'Result'}]]}]]}]]}|[[{'type',335,'constraint',[{'atom',335,'is_subtype'}|[[{'var',335,'Result'}|[{'type',335,'union',[{'atom',335,'undefined'}|[{'type',335,'term',[]}]]}]]]]}]]]}]}],
		%% Line 340
		'spec' =
		    %% Line 340
		    [{{'make_crypto_key',2},[{'type',340,'fun',[{'type',340,'product',[{'user_type',340,'mode',[]}|[{'type',340,'string',[]}]]}|[{'type',341,'tuple',[{'user_type',341,'mode',[]}|[{'type',341,'list',[{'type',341,'binary',[]}]}|[{'type',341,'binary',[]}|[{'type',341,'integer',[]}]]]]}]]}]}],
		%% Line 348
		'spec' =
		    %% Line 348
		    [{{'build_module',1},[{'type',348,'bounded_fun',[{'type',348,'fun',[{'type',348,'product',[{'var',348,'Chunks'}]}|[{'type',348,'tuple',[{'atom',348,'ok'}|[{'var',348,'Binary'}]]}]]}|[[{'type',349,'constraint',[{'atom',349,'is_subtype'}|[[{'var',349,'Chunks'}|[{'type',349,'list',[{'type',349,'tuple',[{'user_type',349,'chunkid',[]}|[{'user_type',349,'dataB',[]}]]}]}]]]]}|[{'type',350,'constraint',[{'atom',350,'is_subtype'}|[[{'var',350,'Binary'}|[{'type',350,'binary',[]}]]]]}]]]]}]}],
		%% Line 856
		'record' =
		    %% Line 856
		    [{'bb',[{'typed_record_field',{'record_field',856,{'atom',856,'pos'},{'integer',856,0}},{'type',856,'integer',[]}}|[{'typed_record_field',{'record_field',857,{'atom',857,'bin'}},{'type',857,'binary',[]}}|[{'typed_record_field',{'record_field',858,{'atom',858,'source'}},{'type',858,'union',[{'type',858,'binary',[]}|[{'type',858,'string',[]}]]}}]]]}],
		%% Line 933
		'spec' =
		    %% Line 933
		    [{{'file_error',2},[{'type',933,'fun',[{'type',933,'product',[{'remote_type',933,[{'atom',933,'file'}|[{'atom',933,'filename'}|[[]]]]}|[{'type',933,'tuple',[{'atom',933,'error'}|[{'type',933,'atom',[]}]]}]]}|[{'type',933,'no_return',[]}]]}]}],
		%% Line 938
		'spec' =
		    %% Line 938
		    [{{'error',1},[{'type',938,'fun',[{'type',938,'product',[{'type',938,'term',[]}]}|[{'type',938,'no_return',[]}]]}]}],
		%% Line 968
		'record' =
		    %% Line 968
		    [{'state',[{'typed_record_field',{'record_field',968,{'atom',968,'crypto_key_f'}},{'type',968,'union',[{'user_type',968,'crypto_fun',[]}|[{'atom',968,'undefined'}]]}}]}],
		%% Line 1043
		'spec' =
		    %% Line 1043
		    [{{'init',1},[{'type',1043,'fun',[{'type',1043,'product',[{'type',1043,'nil',[]}]}|[{'type',1043,'tuple',[{'atom',1043,'ok'}|[{'type',1043,'record',[{'atom',1043,'state'}]}]]}]]}]}],
		%% Line 1048
		'type' =
		    %% Line 1048
		    [{'calls',{'type',1048,'union',[{'atom',1048,'clear_crypto_key_fun'}|[{'type',1049,'tuple',[{'atom',1049,'crypto_key_fun'}|[{'var',1049,'_'}]]}|[{'type',1050,'tuple',[{'atom',1050,'get_crypto_key'}|[{'var',1050,'_'}]]}]]]},[]}],
		%% Line 1052
		'spec' =
		    %% Line 1052
		    [{{'handle_call',3},[{'type',1052,'fun',[{'type',1052,'product',[{'user_type',1052,'calls',[]}|[{'type',1052,'tuple',[{'type',1052,'pid',[]}|[{'type',1052,'term',[]}]]}|[{'type',1052,'record',[{'atom',1052,'state'}]}]]]}|[{'type',1053,'union',[{'type',1053,'tuple',[{'atom',1053,'noreply'}|[{'type',1053,'record',[{'atom',1053,'state'}]}]]}|[{'type',1054,'tuple',[{'atom',1054,'reply'}|[{'type',1054,'union',[{'atom',1054,'error'}|[{'type',1054,'tuple',[{'atom',1054,'error'}|[{'type',1054,'union',[{'atom',1054,'badfun'}|[{'atom',1054,'exists'}]]}]]}]]}|[{'type',1054,'record',[{'atom',1054,'state'}]}]]]}|[{'type',1055,'tuple',[{'atom',1055,'stop'}|[{'atom',1055,'normal'}|[{'type',1055,'union',[{'atom',1055,'undefined'}|[{'type',1055,'tuple',[{'atom',1055,'ok'}|[{'type',1055,'term',[]}]]}]]}|[{'type',1055,'record',[{'atom',1055,'state'}]}]]]]}]]]}]]}]}],
		%% Line 1122
		'spec' =
		    %% Line 1122
		    [{{'handle_cast',2},[{'type',1122,'fun',[{'type',1122,'product',[{'type',1122,'term',[]}|[{'type',1122,'record',[{'atom',1122,'state'}]}]]}|[{'type',1122,'tuple',[{'atom',1122,'noreply'}|[{'type',1122,'record',[{'atom',1122,'state'}]}]]}]]}]}],
		%% Line 1127
		'spec' =
		    %% Line 1127
		    [{{'handle_info',2},[{'type',1127,'fun',[{'type',1127,'product',[{'type',1127,'term',[]}|[{'type',1127,'record',[{'atom',1127,'state'}]}]]}|[{'type',1127,'tuple',[{'atom',1127,'noreply'}|[{'type',1127,'record',[{'atom',1127,'state'}]}]]}]]}]}],
		%% Line 1132
		'spec' =
		    %% Line 1132
		    [{{'code_change',3},[{'type',1132,'fun',[{'type',1132,'product',[{'type',1132,'term',[]}|[{'type',1132,'record',[{'atom',1132,'state'}]}|[{'type',1132,'term',[]}]]]}|[{'type',1132,'tuple',[{'atom',1132,'ok'}|[{'type',1132,'record',[{'atom',1132,'state'}]}]]}]]}]}],
		%% Line 1137
		'spec' =
		    %% Line 1137
		    [{{'terminate',2},[{'type',1137,'fun',[{'type',1137,'product',[{'type',1137,'term',[]}|[{'type',1137,'record',[{'atom',1137,'state'}]}]]}|[{'atom',1137,'ok'}]]}]}]]
'info'/1 =
    %% Line 132
    fun (_0) ->
	let <_1> =
	    apply %% Line 133
		  'beam_filename'/1
		(_0)
	in  %% Line 133
	    apply 'read_info'/1
		(_1)
'chunks'/2 =
    %% Line 141
    fun (_0,_1) ->
	%% Line 142
	apply 'read_chunk_data'/2
	    (_0, _1)
'chunks'/3 =
    %% Line 152
    fun (_0,_1,_2) ->
	%% Line 153
	try
	    apply 'read_chunk_data'/3
		(_0, _1, _2)
	of <_3> ->
	    _3
	catch <_6,_5,_4> ->
	    %% Line 154
	    case <_6,_5,_4> of
	      <( 'throw'
		 -| ['compiler_generated'] ),Error,_10> when 'true' ->
		  Error
	      ( <_11,_12,_13> when 'true' ->
		    primop 'raise'
			(_13, _12)
		-| ['compiler_generated'] )
	    end
'all_chunks'/1 =
    %% Line 159
    fun (_0) ->
	%% Line 160
	apply 'read_all_chunks'/1
	    (_0)
'cmp'/2 =
    %% Line 166
    fun (_0,_1) ->
	%% Line 167
	try
	    apply 'cmp_files'/2
		(_0, _1)
	of <_2> ->
	    _2
	catch <_5,_4,_3> ->
	    %% Line 168
	    case <_5,_4,_3> of
	      <( 'throw'
		 -| ['compiler_generated'] ),Error,_8> when 'true' ->
		  Error
	      ( <_9,_10,_11> when 'true' ->
		    primop 'raise'
			(_11, _10)
		-| ['compiler_generated'] )
	    end
'cmp_dirs'/2 =
    %% Line 179
    fun (_0,_1) ->
	catch
	    %% Line 180
	    apply 'compare_dirs'/2
		(_0, _1)
'diff_dirs'/2 =
    %% Line 187
    fun (_0,_1) ->
	catch
	    %% Line 188
	    apply 'diff_directories'/2
		(_0, _1)
'strip'/1 =
    %% Line 195
    fun (_0) ->
	%% Line 196
	apply 'strip'/2
	    (_0, [])
'strip'/2 =
    %% Line 204
    fun (_0,_1) ->
	%% Line 205
	try
	    apply 'strip_file'/2
		(_0, _1)
	of <_2> ->
	    _2
	catch <_5,_4,_3> ->
	    %% Line 206
	    case <_5,_4,_3> of
	      <( 'throw'
		 -| ['compiler_generated'] ),Error,_8> when 'true' ->
		  Error
	      ( <_9,_10,_11> when 'true' ->
		    primop 'raise'
			(_11, _10)
		-| ['compiler_generated'] )
	    end
'strip_files'/1 =
    %% Line 213
    fun (_0) ->
	%% Line 214
	apply 'strip_files'/2
	    (_0, [])
'strip_files'/2 =
    %% Line 222
    fun (_0,_1) ->
	case <_0,_1> of
	  <Files,AdditionalChunks>
	      when call 'erlang':'is_list'
		    (Files) ->
	      %% Line 223
	      try
		  apply 'strip_fils'/2
		      (Files, AdditionalChunks)
	      of <_2> ->
		  _2
	      catch <_5,_4,_3> ->
		  %% Line 224
		  case <_5,_4,_3> of
		    <( 'throw'
		       -| ['compiler_generated'] ),Error,_8> when 'true' ->
			Error
		    ( <_9,_10,_11> when 'true' ->
			  primop 'raise'
			      (_11, _10)
		      -| ['compiler_generated'] )
		  end
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'strip_files',2}}] )
	    -| ['compiler_generated'] )
	end
'strip_release'/1 =
    %% Line 232
    fun (_0) ->
	%% Line 233
	apply 'strip_release'/2
	    (_0, [])
'strip_release'/2 =
    %% Line 242
    fun (_0,_1) ->
	catch
	    %% Line 243
	    apply 'strip_rel'/2
		(_0, _1)
'version'/1 =
    %% Line 250
    fun (_0) ->
	let <_1> =
	    catch
		%% Line 251
		apply 'read_chunk_data'/2
		    (_0, ['attributes'])
	in  %% Line 251
	    case _1 of
	      %% Line 252
	      <{'ok',{Module,[{'attributes',Attrs}|[]]}}> when 'true' ->
		  %% Line 253
		  case call 'lists':'keyfind'
			   ('vsn', 1, Attrs) of
		    <{'vsn',Version}> when 'true' ->
			%% Line 254
			{'ok',{Module,Version}}
		    ( <_2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_2})
		      -| ['compiler_generated'] )
		  end
	      %% Line 255
	      <Error> when 'true' ->
		  %% Line 256
		  Error
	    end
'md5'/1 =
    %% Line 264
    fun (_0) ->
	let <_2> =
	    catch
		let <_1> =
		    apply %% Line 265
			  'md5_chunks'/0
			()
		in  %% Line 265
		    apply 'read_significant_chunks'/2
			(_0, _1)
	in  %% Line 265
	    case _2 of
	      %% Line 266
	      <{'ok',{Module,Chunks0}}> when 'true' ->
		  let <Chunks> =
		      apply %% Line 267
			    'filter_funtab'/1
			  (%% Line 267
			   Chunks0)
		  in  let <_8> =
			  letrec
			      'lc$^0'/1 =
				  %% Line 268
				  fun (_6) ->
				      case _6 of
					<[{_X_Id,C}|_5]> when 'true' ->
					    let <_7> =
						apply 'lc$^0'/1
						    (_5)
					    in  ( [C|_7]
						  -| ['compiler_generated'] )
					( <[_4|_5]> when 'true' ->
					      apply 'lc$^0'/1
						  (_5)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_12> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_12})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  %% Line 268
			      apply 'lc$^0'/1
				  (Chunks)
		      in  let <_9> =
			      call %% Line 268
				   'erlang':%% Line 268
					    'md5'
				  (_8)
			  in  %% Line 268
			      {'ok',{Module,_9}}
	      %% Line 269
	      <Error> when 'true' ->
		  %% Line 270
		  Error
	    end
'format_error'/1 =
    %% Line 276
    fun (_0) ->
	case _0 of
	  <{'error',Error}> when 'true' ->
	      %% Line 277
	      apply 'format_error'/1
		  (Error)
	  %% Line 278
	  <{'error',Module,Error}> when 'true' ->
	      %% Line 279
	      call Module:'format_error'
		  (Error)
	  %% Line 280
	  <{'unknown_chunk',File,ChunkName}> when 'true' ->
	      %% Line 281
	      call 'io_lib':'format'
		  ([126|[116|[112|[58|[32|[67|[97|[110|[110|[111|[116|[32|[102|[105|[110|[100|[32|[99|[104|[117|[110|[107|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]], [File|[ChunkName|[]]])
	  %% Line 282
	  <{'invalid_chunk',File,ChunkId}> when 'true' ->
	      %% Line 283
	      call 'io_lib':'format'
		  ([126|[116|[112|[58|[32|[73|[110|[118|[97|[108|[105|[100|[32|[99|[111|[110|[116|[101|[110|[116|[115|[32|[111|[102|[32|[99|[104|[117|[110|[107|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [File|[ChunkId|[]]])
	  %% Line 284
	  <{'not_a_beam_file',File}> when 'true' ->
	      %% Line 285
	      call 'io_lib':'format'
		  ([126|[116|[112|[58|[32|[78|[111|[116|[32|[97|[32|[66|[69|[65|[77|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]], [File|[]])
	  %% Line 286
	  <{'file_error',File,Reason}> when 'true' ->
	      let <_1> =
		  call %% Line 287
		       'file':%% Line 287
			      'format_error'
		      (%% Line 287
		       Reason)
	      in  %% Line 287
		  call 'io_lib':'format'
		      ([126|[116|[112|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]], [File|[_1|[]]])
	  %% Line 288
	  <{'missing_chunk',File,ChunkId}> when 'true' ->
	      %% Line 289
	      call 'io_lib':'format'
		  ([126|[116|[112|[58|[32|[78|[111|[116|[32|[97|[32|[66|[69|[65|[77|[32|[102|[105|[108|[101|[58|[32|[110|[111|[32|[73|[70|[70|[32|[34|[126|[115|[34|[32|[99|[104|[117|[110|[107|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 290
																														    [File|[ChunkId|[]]])
	  %% Line 291
	  <{'invalid_beam_file',File,Pos}> when 'true' ->
	      %% Line 292
	      call 'io_lib':'format'
		  ([126|[116|[112|[58|[32|[73|[110|[118|[97|[108|[105|[100|[32|[102|[111|[114|[109|[97|[116|[32|[111|[102|[32|[66|[69|[65|[77|[32|[102|[105|[108|[101|[32|[110|[101|[97|[114|[32|[98|[121|[116|[101|[32|[110|[117|[109|[98|[101|[114|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 293
																																								    [File|[Pos|[]]])
	  %% Line 294
	  <{'chunk_too_big',File,ChunkId,Size,Len}> when 'true' ->
	      %% Line 295
	      call 'io_lib':'format'
		  ([126|[116|[112|[58|[32|[83|[105|[122|[101|[32|[111|[102|[32|[99|[104|[117|[110|[107|[32|[34|[126|[115|[34|[32|[105|[115|[32|[126|[112|[32|[98|[121|[116|[101|[115|[44|[32|[98|[117|[116|[32|[111|[110|[108|[121|[32|[126|[112|[32|[98|[121|[116|[101|[115|[32|[99|[111|[117|[108|[100|[32|[98|[101|[32|[114|[101|[97|[100|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 297
																																																			      [File|[ChunkId|[Size|[Len|[]]]]])
	  %% Line 298
	  <{'chunks_different',Id}> when 'true' ->
	      %% Line 299
	      call 'io_lib':'format'
		  ([67|[104|[117|[110|[107|[32|[34|[126|[115|[34|[32|[100|[105|[102|[102|[101|[114|[115|[32|[105|[110|[32|[116|[104|[101|[32|[116|[119|[111|[32|[102|[105|[108|[101|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Id|[]])
	  %% Line 300
	  <'different_chunks'> when 'true' ->
	      %% Line 301
	      [84|[104|[101|[32|[116|[119|[111|[32|[102|[105|[108|[101|[115|[32|[104|[97|[118|[101|[32|[100|[105|[102|[102|[101|[114|[101|[110|[116|[32|[99|[104|[117|[110|[107|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 302
	  <{'modules_different',Module1,Module2}> when 'true' ->
	      %% Line 303
	      call 'io_lib':'format'
		  ([77|[111|[100|[117|[108|[101|[32|[110|[97|[109|[101|[115|[32|[126|[112|[32|[97|[110|[100|[32|[126|[112|[32|[100|[105|[102|[102|[101|[114|[32|[105|[110|[32|[116|[104|[101|[32|[116|[119|[111|[32|[102|[105|[108|[101|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 304
																																					[Module1|[Module2|[]]])
	  %% Line 305
	  <{'not_a_directory',Name}> when 'true' ->
	      %% Line 306
	      call 'io_lib':'format'
		  ([126|[116|[112|[58|[32|[78|[111|[116|[32|[97|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[126|[110]]]]]]]]]]]]]]]]]]]]]], [Name|[]])
	  %% Line 307
	  <{'key_missing_or_invalid',File,ChunkId}> when 'true' ->
	      %% Line 308
	      call 'io_lib':'format'
		  ([126|[116|[112|[58|[32|[67|[97|[110|[110|[111|[116|[32|[100|[101|[99|[114|[121|[112|[116|[32|[126|[116|[115|[32|[98|[101|[99|[97|[117|[115|[101|[32|[107|[101|[121|[32|[105|[115|[32|[109|[105|[115|[115|[105|[110|[103|[32|[111|[114|[32|[105|[110|[118|[97|[108|[105|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 309
																																											 [File|[ChunkId|[]]])
	  %% Line 310
	  <'badfun'> when 'true' ->
	      %% Line 311
	      [110|[111|[116|[32|[97|[32|[102|[117|[110|[32|[111|[114|[32|[116|[104|[101|[32|[102|[117|[110|[32|[104|[97|[115|[32|[116|[104|[101|[32|[119|[114|[111|[110|[103|[32|[97|[114|[105|[116|[121]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 312
	  <'exists'> when 'true' ->
	      %% Line 313
	      [97|[32|[102|[117|[110|[32|[104|[97|[115|[32|[97|[108|[114|[101|[97|[100|[121|[32|[98|[101|[101|[110|[32|[105|[110|[115|[116|[97|[108|[108|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 314
	  <E> when 'true' ->
	      %% Line 315
	      call 'io_lib':'format'
		  ([126|[116|[112|[126|[110]]]]], [E|[]])
	end
'crypto_key_fun'/1 =
    %% Line 331
    fun (_0) ->
	%% Line 332
	apply 'call_crypto_server'/1
	    ({'crypto_key_fun',_0})
'clear_crypto_key_fun'/0 =
    %% Line 337
    fun () ->
	%% Line 338
	apply 'call_crypto_server'/1
	    ('clear_crypto_key_fun')
'make_crypto_key'/2 =
    %% Line 343
    fun (_0,_1) ->
	case <_0,_1> of
	  <Type = 'des3_cbc',String> when 'true' ->
	      %% Line 344
	      case call 'erlang':'md5'
		       (String) of
		<First = #{#<K1>(8,8,'binary',['unsigned'|['big']]),
			   #<K2>(8,8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_3> =
			call %% Line 345
			     'lists':%% Line 345
				     'reverse'
			    (%% Line 345
			     String)
		    in  %% Line 345
			case call 'erlang':'md5'
				 ([First|_3]) of
			  <#{#<K3>(8,8,'binary',['unsigned'|['big']]),
			     #<IVec>(8,8,'binary',['unsigned'|['big']])}#> when 'true' ->
			      %% Line 346
			      {Type,[K1|[K2|[K3|[]]]],IVec,8}
			  ( <_4> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_4})
			    -| ['compiler_generated'] )
			end
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'make_crypto_key',2}}] )
	    -| ['compiler_generated'] )
	end
'build_module'/1 =
    %% Line 352
    fun (_0) ->
	let <_1> =
	    apply %% Line 353
		  'build_chunks'/1
		(_0)
	in  let <Chunks> =
		call %% Line 353
		     'erlang':%% Line 353
			      'list_to_binary'
		    (_1)
	    in  let <Size> =
		    call %% Line 354
			 'erlang':%% Line 354
				  'byte_size'
			(%% Line 354
			 Chunks)
		in  %% Line 355
		    case call 'erlang':'rem'
			     (Size, 4) of
		      <0> when 'true' ->
			  let <_5> =
			      call %% Line 356
				   'erlang':%% Line 356
					    '+'
				  (%% Line 356
				   Size, %% Line 356
					 4)
			  in  let <_6> =
				  #{#<%% Line 356
				      1179603505>(%% Line 356
						  32,1,'integer',['unsigned'|['big']]),
				    #<_5>(%% Line 356
					  32,1,'integer',['unsigned'|['big']]),
				    #<%% Line 356
				      1111834957>(%% Line 356
						  32,1,'integer',['unsigned'|['big']]),
				    #<%% Line 356
				      Chunks>(%% Line 356
					      'all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 356
				  {'ok',_6}
		      ( <_4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_4})
			-| ['compiler_generated'] )
		    end
'read_info'/1 =
    %% Line 363
    fun (_0) ->
	%% Line 364
	try
	    %% Line 365
	    case apply 'scan_beam'/2
		     (_0, 'info') of
	      <{'ok',Module,Data}> when 'true' ->
		  let <_2> =
		      case <> of
			%% Line 367
			<>
			    when call 'erlang':'is_binary'
				  (_0) ->
			    {'binary',_0}
			%% Line 368
			<> when 'true' ->
			    {'file',_0}
		      end
		  in  %% Line 366
		      [_2|%% Line 369
			  [{'module',Module}|[{'chunks',Data}|[]]]]
	      ( <_1> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_1})
		-| ['compiler_generated'] )
	    end
	of <_3> ->
	    _3
	catch <_6,_5,_4> ->
	    %% Line 370
	    case <_6,_5,_4> of
	      <( 'throw'
		 -| ['compiler_generated'] ),Error,_8> when 'true' ->
		  Error
	      ( <_9,_10,_11> when 'true' ->
		    primop 'raise'
			(_11, _10)
		-| ['compiler_generated'] )
	    end
'diff_directories'/2 =
    %% Line 372
    fun (_0,_1) ->
	%% Line 373
	case apply 'compare_dirs'/2
		 (_0, _1) of
	  <{OnlyDir1,OnlyDir2,Diff}> when 'true' ->
	      do  %% Line 374
		  apply 'diff_only'/2
		      (_0, OnlyDir1)
		  do  %% Line 375
		      apply 'diff_only'/2
			  (_1, OnlyDir2)
		      let <_5> =
			  fun (_3) ->
			      %% Line 376
			      call 'io':'format'
				  ([42|[42|[32|[100|[105|[102|[102|[101|[114|[101|[110|[116|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]], [_3|[]])
		      in  do  %% Line 376
			      call 'lists':'foreach'
				  (_5, Diff)
			      %% Line 377
			      'ok'
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_2})
	    -| ['compiler_generated'] )
	end
'diff_only'/2 =
    %% Line 379
    fun (_0,_1) ->
	case <_0,_1> of
	  <_X_Dir,[]> when 'true' ->
	      %% Line 380
	      'ok'
	  %% Line 381
	  <Dir,Only> when 'true' ->
	      %% Line 382
	      call 'io':'format'
		  ([79|[110|[108|[121|[32|[105|[110|[32|[126|[116|[112|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]], [Dir|[Only|[]]])
	end
'compare_dirs'/2 =
    %% Line 385
    fun (_0,_1) ->
	let <_2> =
	    apply %% Line 386
		  'beam_files'/1
		(_0)
	in  let <R1> =
		call %% Line 386
		     'sofs':%% Line 386
			    'relation'
		    (_2)
	    in  let <_4> =
		    apply %% Line 387
			  'beam_files'/1
			(_1)
		in  let <R2> =
			call %% Line 387
			     'sofs':%% Line 387
				    'relation'
			    (_4)
		    in  let <F1> =
			    call %% Line 388
				 'sofs':%% Line 388
					'domain'
				(%% Line 388
				 R1)
			in  let <F2> =
				call %% Line 389
				     'sofs':%% Line 389
					    'domain'
				    (%% Line 389
				     R2)
			    in  %% Line 390
				case call 'sofs':'symmetric_partition'
					 (F1, F2) of
				  <{O1,Both,O2}> when 'true' ->
				      let <OnlyL1> =
					  call %% Line 391
					       'sofs':%% Line 391
						      'image'
					      (%% Line 391
					       R1, %% Line 391
						   O1)
				      in  let <OnlyL2> =
					      call %% Line 392
						   'sofs':%% Line 392
							  'image'
						  (%% Line 392
						   R2, %% Line 392
						       O2)
					  in  let <_11> =
						  call %% Line 393
						       'sofs':%% Line 393
							      'restriction'
						      (%% Line 393
						       R1, %% Line 393
							   Both)
					      in  let <B1> =
						      call %% Line 393
							   'sofs':%% Line 393
								  'to_external'
							  (_11)
						  in  let <_13> =
							  call %% Line 394
							       'sofs':%% Line 394
								      'restriction'
							      (%% Line 394
							       R2, %% Line 394
								   Both)
						      in  let <B2> =
							      call %% Line 394
								   'sofs':%% Line 394
									  'to_external'
								  (_13)
							  in  let <Diff> =
								  apply %% Line 395
									'compare_files'/3
								      (%% Line 395
								       B1, %% Line 395
									   B2, %% Line 395
									       [])
							      in  let <_17> =
								      call %% Line 396
									   'sofs':%% Line 396
										  'to_external'
									  (%% Line 396
									   OnlyL1)
								  in  let <_16> =
									  call %% Line 396
									       'sofs':%% Line 396
										      'to_external'
									      (%% Line 396
									       OnlyL2)
								      in  %% Line 396
									  {_17,_16,Diff}
				  ( <_8> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_8})
				    -| ['compiler_generated'] )
				end
'compare_files'/3 =
    %% Line 398
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[],[],Acc> when 'true' ->
	      %% Line 399
	      call 'lists':'reverse'
		  (Acc)
	  %% Line 400
	  <[{_10,F1}|R1],[{_11,F2}|R2],Acc> when 'true' ->
	      let <_3> =
		  catch
		      %% Line 401
		      apply 'cmp_files'/2
			  (F1, F2)
	      in  let <_5> =
		      case _3 of
			%% Line 402
			<{'error',_X_Mod,_X_Reason}> when 'true' ->
			    %% Line 403
			    [{F1,F2}|Acc]
			%% Line 404
			<'ok'> when 'true' ->
			    %% Line 405
			    Acc
			( <_4> when 'true' ->
			      %% Line 401
			      primop 'match_fail'
				  ({'case_clause',_4})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 407
		      apply 'compare_files'/3
			  (R1, R2, _5)
	  ( <_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7})
		  -| [{'function_name',{'compare_files',3}}] )
	    -| ['compiler_generated'] )
	end
'beam_files'/1 =
    %% Line 409
    fun (_0) ->
	%% Line 410
	case apply 'assert_directory'/1
		 (_0) of
	  <'ok'> when 'true' ->
	      let <_2> =
		  call %% Line 411
		       'filename':%% Line 411
				  'join'
		      (_0, %% Line 411
			   [42|[46|[98|[101|[97|[109]]]]]])
	      in  let <L> =
		      call %% Line 411
			   'filelib':%% Line 411
				     'wildcard'
			  (_2)
		  in  %% Line 412
		      ( letrec
			    'lc$^0'/1 =
				fun (_6) ->
				    case _6 of
				      <[Path|_5]> when 'true' ->
					  let <_7> =
					      call 'filename':'basename'
						  (Path)
					  in  let <_8> =
						  apply 'lc$^0'/1
						      (_5)
					      in  ( [{_7,Path}|_8]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_10> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_10})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(L)
			-| ['list_comprehension'] )
	  ( <_1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_1})
	    -| ['compiler_generated'] )
	end
'cmp_files'/2 =
    %% Line 415
    fun (_0,_1) ->
	%% Line 416
	case apply 'read_all_but_useless_chunks'/1
		 (_0) of
	  <{'ok',{M1,L1}}> when 'true' ->
	      %% Line 417
	      case apply 'read_all_but_useless_chunks'/1
		       (_1) of
		<{'ok',{M2,L2}}> when 'true' ->
		    %% Line 418
		    case <> of
		      %% Line 419
		      <>
			  when call 'erlang':'=:='
				(M1,
				 M2) ->
			  %% Line 420
			  apply 'cmp_lists'/2
			      (L1, L2)
		      %% Line 421
		      <> when 'true' ->
			  %% Line 422
			  apply 'error'/1
			      ({'modules_different',M1,M2})
		    end
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_2})
	    -| ['compiler_generated'] )
	end
'cmp_lists'/2 =
    %% Line 425
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],[]> when 'true' ->
	      %% Line 426
	      'ok'
	  %% Line 427
	  <[{Id,C1}|R1],[{_4,C2}|R2]>
	      when call 'erlang':'=:='
		    (_4,
		     Id) ->
	      %% Line 428
	      case <> of
		%% Line 429
		<>
		    when call 'erlang':'=:='
			  (C1,
			   C2) ->
		    %% Line 430
		    apply 'cmp_lists'/2
			(R1, R2)
		%% Line 431
		<> when 'true' ->
		    %% Line 432
		    apply 'error'/1
			({'chunks_different',Id})
	      end
	  %% Line 434
	  <_5,_6> when 'true' ->
	      %% Line 435
	      apply 'error'/1
		  ('different_chunks')
	end
'strip_rel'/2 =
    %% Line 437
    fun (_0,_1) ->
	%% Line 438
	case apply 'assert_directory'/1
		 (_0) of
	  <'ok'> when 'true' ->
	      let <_3> =
		  call %% Line 439
		       'filename':%% Line 439
				  'join'
		      (_0, %% Line 439
			   [108|[105|[98|[47|[42|[47|[101|[98|[105|[110|[47|[42|[46|[98|[101|[97|[109]]]]]]]]]]]]]]]]])
	      in  let <_4> =
		      call %% Line 439
			   'filelib':%% Line 439
				     'wildcard'
			  (_3)
		  in  %% Line 439
		      apply 'strip_fils'/2
			  (_4, _1)
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_2})
	    -| ['compiler_generated'] )
	end
'strip_fils'/2 =
    %% Line 442
    fun (_0,_1) ->
	let <_7> =
	    letrec
		'lc$^0'/1 =
		    %% Line 443
		    fun (_4) ->
			case _4 of
			  <[F|_3]> when 'true' ->
			      case apply 'strip_file'/2
				       (F, _1) of
				<{'ok',Reply}> when 'true' ->
				    let <_6> =
					apply 'lc$^0'/1
					    (_3)
				    in  ( [Reply|_6]
					  -| ['compiler_generated'] )
				( <_5> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_5})
				  -| ['compiler_generated'] )
			      end
			  <[]> when 'true' ->
			      []
			  ( <_10> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_10})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 443
		apply 'lc$^0'/1
		    (_0)
	in  %% Line 443
	    {'ok',_7}
'strip_file'/2 =
    %% Line 446
    fun (_0,_1) ->
	let <_2> =
	    apply %% Line 447
		  'significant_chunks'/0
		()
	in  let <_3> =
		call %% Line 447
		     'erlang':%% Line 447
			      '++'
		    (_1, _2)
	    in  %% Line 447
		case apply 'read_significant_chunks'/2
			 (_0, _3) of
		  <{'ok',{Mod,Chunks}}> when 'true' ->
		      %% Line 448
		      case apply 'build_module'/1
			       (Chunks) of
			<{'ok',Stripped0}> when 'true' ->
			    let <Stripped> =
				apply %% Line 449
				      'compress'/1
				    (%% Line 449
				     Stripped0)
			    in  %% Line 450
				case _0 of
				  %% Line 451
				  <_15>
				      when call 'erlang':'is_binary'
					    (_0) ->
				      %% Line 452
				      {'ok',{Mod,Stripped}}
				  %% Line 453
				  <_16> when 'true' ->
				      let <FileName> =
					  apply %% Line 454
						'beam_filename'/1
					      (_0)
				      in  %% Line 455
					  case call 'file':'open'
						   (FileName, ['raw'|['binary'|['write']]]) of
					    %% Line 456
					    <{'ok',Fd}> when 'true' ->
						%% Line 457
						case call 'file':'write'
							 (Fd, Stripped) of
						  %% Line 458
						  <'ok'> when 'true' ->
						      %% Line 459
						      case call 'file':'close'
							       (Fd) of
							<'ok'> when 'true' ->
							    %% Line 460
							    {'ok',{Mod,FileName}}
							( <_8> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_8})
							  -| ['compiler_generated'] )
						      end
						  %% Line 461
						  <Error> when 'true' ->
						      %% Line 462
						      case call 'file':'close'
							       (Fd) of
							<'ok'> when 'true' ->
							    %% Line 463
							    apply 'file_error'/2
								(FileName, Error)
							( <_9> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_9})
							  -| ['compiler_generated'] )
						      end
						end
					    %% Line 465
					    <Error> when 'true' ->
						%% Line 466
						apply 'file_error'/2
						    (FileName, Error)
					  end
				end
			( <_5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_5})
			  -| ['compiler_generated'] )
		      end
		  ( <_4> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_4})
		    -| ['compiler_generated'] )
		end
'build_chunks'/1 =
    %% Line 470
    fun (_0) ->
	case _0 of
	  <[{Id,Data}|Chunks]> when 'true' ->
	      let <BId> =
		  call %% Line 471
		       'erlang':%% Line 471
				'list_to_binary'
		      (%% Line 471
		       Id)
	      in  let <Size> =
		      call %% Line 472
			   'erlang':%% Line 472
				    'byte_size'
			  (%% Line 472
			   Data)
		  in  let <_3> =
			  #{#<%% Line 473
			      BId>(%% Line 473
				   'all',8,'binary',['unsigned'|['big']]),
			    #<%% Line 473
			      Size>(%% Line 473
				    32,1,'integer',['unsigned'|['big']])}#
		      in  let <_4> =
			      apply %% Line 473
				    'pad'/1
				  (%% Line 473
				   Size)
			  in  let <Chunk> =
				  [_3|%% Line 473
				      [Data|_4]]
			      in  let <_6> =
				      apply %% Line 474
					    'build_chunks'/1
					  (%% Line 474
					   Chunks)
				  in  %% Line 474
				      [Chunk|_6]
	  %% Line 475
	  <[]> when 'true' ->
	      %% Line 476
	      []
	  ( <_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7})
		  -| [{'function_name',{'build_chunks',1}}] )
	    -| ['compiler_generated'] )
	end
'pad'/1 =
    %% Line 478
    fun (_0) ->
	%% Line 479
	case call 'erlang':'rem'
		 (_0, 4) of
	  %% Line 480
	  <0> when 'true' ->
	      []
	  %% Line 481
	  <Rem> when 'true' ->
	      let <_1> =
		  call 'erlang':'-'
		      (4, Rem)
	      in  call 'lists':'duplicate'
		      (_1, 0)
	end
'read_all_but_useless_chunks'/1 =
    %% Line 485
    fun (_0) ->
	case _0 of
	  <File0>
	      when let <_1> =
		    call 'erlang':'is_atom'
			(_0)
		in  let <_2> =
			call %% Line 486
			     'erlang':%% Line 486
				      'is_list'
			    (_0)
		    in  let <_3> =
			    call %% Line 487
				 'erlang':%% Line 487
					  'is_binary'
				(_0)
			in  let <_4> =
				call %% Line 486
				     'erlang':%% Line 486
					      'or'
				    (_2, _3)
			    in  call 'erlang':'or'
				    (_1, _4) ->
	      let <File> =
		  apply %% Line 488
			'beam_filename'/1
		      (%% Line 488
		       File0)
	      in  %% Line 489
		  case apply 'scan_beam'/2
			   (File, 'info') of
		    <{'ok',Module,ChunkIds0}> when 'true' ->
			let <_13> =
			    letrec
				'lc$^0'/1 =
				    %% Line 490
				    fun (_10) ->
					case _10 of
					  <[{Name,_18,_19}|_8]> when 'true' ->
					      %% Line 491
					      ( case apply 'is_useless_chunk'/1
							 (Name) of
						  <'false'> when 'true' ->
						      let <_11> =
							  apply 'lc$^0'/1
							      (_8)
						      in  ( [Name|_11]
							    -| ['compiler_generated'] )
						  ( <'true'> when 'true' ->
							apply 'lc$^0'/1
							    (_8)
						    -| ['compiler_generated'] )
						  ( <_cor_variable> when 'true' ->
							call 'erlang':'error'
							    ('badarg')
						    -| ['compiler_generated'] )
						end
						-| ['list_comprehension'] )
					  ( <[_7|_8]> when 'true' ->
						apply 'lc$^0'/1
						    (_8)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_21> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_21})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  %% Line 490
				apply 'lc$^0'/1
				    (ChunkIds0)
			in  %% Line 492
			    case apply 'scan_beam'/2
				     (File, _13) of
			      <{'ok',_20,Chunks}>
				  when call 'erlang':'=:='
					(_20,
					 Module) ->
				  let <_16> =
				      call %% Line 493
					   'lists':%% Line 493
						   'reverse'
					  (%% Line 493
					   Chunks)
				  in  %% Line 493
				      {'ok',{Module,_16}}
			      ( <_15> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_15})
				-| ['compiler_generated'] )
			    end
		    ( <_6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_6})
		      -| ['compiler_generated'] )
		  end
	  ( <_17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_17})
		  -| [{'function_name',{'read_all_but_useless_chunks',1}}] )
	    -| ['compiler_generated'] )
	end
'is_useless_chunk'/1 =
    %% Line 495
    fun (_0) ->
	case _0 of
	  <[67|[73|[110|[102]]]]> when 'true' ->
	      'true'
	  %% Line 496
	  <_2> when 'true' ->
	      'false'
	end
'read_significant_chunks'/2 =
    %% Line 499
    fun (_0,_1) ->
	%% Line 500
	case apply 'read_chunk_data'/3
		 (_0, _1, ['allow_missing_chunks']) of
	  %% Line 501
	  <{'ok',{Module,Chunks0}}> when 'true' ->
	      let <Mandatory> =
		  apply %% Line 502
			'mandatory_chunks'/0
		      ()
	      in  let <Chunks> =
		      apply %% Line 503
			    'filter_significant_chunks'/4
			  (%% Line 503
			   Chunks0, %% Line 503
				    Mandatory, _0, %% Line 503
						   Module)
		  in  %% Line 504
		      {'ok',{Module,Chunks}}
	  ( <_4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_4})
	    -| ['compiler_generated'] )
	end
'filter_significant_chunks'/4 =
    %% Line 507
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[Pair = {_10,Data}|Cs],Mandatory,File,Mod>
	      when %% Line 508
		call 'erlang':'is_binary'
		    (Data) ->
	      let <_4> =
		  apply %% Line 509
			'filter_significant_chunks'/4
		      (%% Line 509
		       Cs, %% Line 509
			   Mandatory, %% Line 509
				      File, %% Line 509
					    Mod)
	      in  %% Line 509
		  [Pair|_4]
	  %% Line 510
	  <[{Id,'missing_chunk'}|Cs],Mandatory,File,Mod> when 'true' ->
	      %% Line 511
	      case call 'lists':'member'
		       (Id, Mandatory) of
		%% Line 512
		<'false'> when 'true' ->
		    %% Line 513
		    apply 'filter_significant_chunks'/4
			(Cs, Mandatory, File, Mod)
		%% Line 514
		<'true'> when 'true' ->
		    %% Line 515
		    apply 'error'/1
			({'missing_chunk',File,Id})
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 517
	  <[],_11,_12,_13> when 'true' ->
	      []
	  ( <_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6})
		  -| [{'function_name',{'filter_significant_chunks',4}}] )
	    -| ['compiler_generated'] )
	end
'filter_funtab'/1 =
    %% Line 519
    fun (_0) ->
	case _0 of
	  <[{Tag = [70|[117|[110|[84]]]],#{#<L>(4,8,'binary',['unsigned'|['big']]),
					   #<Data0>('all',8,'binary',['unsigned'|['big']])}#}|Cs]> when 'true' ->
	      let <Data> =
		  apply %% Line 520
			'filter_funtab_1'/2
		      (%% Line 520
		       Data0, %% Line 520
			      #{#<0>(8,1,'integer',['unsigned'|['big']]),
				#<0>(8,1,'integer',['unsigned'|['big']]),
				#<0>(8,1,'integer',['unsigned'|['big']]),
				#<0>(8,1,'integer',['unsigned'|['big']])}#)
	      in  let <_2> =
		      call %% Line 521
			   'erlang':%% Line 521
				    'iolist_to_binary'
			  (%% Line 521
			   Data)
		  in  let <Funtab> =
			  #{#<%% Line 521
			      L>(%% Line 521
				 'all',8,'binary',['unsigned'|['big']]),
			    #<_2>(%% Line 521
				  'all',8,'binary',['unsigned'|['big']])}#
		      in  let <_4> =
			      apply %% Line 522
				    'filter_funtab'/1
				  (%% Line 522
				   Cs)
			  in  %% Line 522
			      [{Tag,Funtab}|_4]
	  %% Line 523
	  <[H|T]> when 'true' ->
	      let <_5> =
		  apply %% Line 524
			'filter_funtab'/1
		      (%% Line 524
		       T)
	      in  %% Line 524
		  [H|_5]
	  %% Line 525
	  <[]> when 'true' ->
	      []
	  ( <_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6})
		  -| [{'function_name',{'filter_funtab',1}}] )
	    -| ['compiler_generated'] )
	end
'filter_funtab_1'/2 =
    %% Line 527
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{#<Important>(20,8,'binary',['unsigned'|['big']]),
	     #<_X_OldUniq>(4,8,'binary',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Zero> when 'true' ->
	      let <_2> =
		  apply %% Line 528
			'filter_funtab_1'/2
		      (%% Line 528
		       T, %% Line 528
			  Zero)
	      in  %% Line 528
		  [Important|[Zero|_2]]
	  %% Line 529
	  <Tail,_5>
	      when call 'erlang':'is_binary'
		    (Tail) ->
	      [Tail|[]]
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'filter_funtab_1',2}}] )
	    -| ['compiler_generated'] )
	end
'read_all_chunks'/1 =
    %% Line 531
    fun (_0) ->
	case _0 of
	  <File0>
	      when let <_1> =
		    call 'erlang':'is_atom'
			(_0)
		in  let <_2> =
			call %% Line 532
			     'erlang':%% Line 532
				      'is_list'
			    (_0)
		    in  let <_3> =
			    call %% Line 533
				 'erlang':%% Line 533
					  'is_binary'
				(_0)
			in  let <_4> =
				call %% Line 532
				     'erlang':%% Line 532
					      'or'
				    (_2, _3)
			    in  call 'erlang':'or'
				    (_1, _4) ->
	      %% Line 534
	      try
		  let <File> =
		      apply %% Line 535
			    'beam_filename'/1
			  (%% Line 535
			   File0)
		  in  %% Line 536
		      case apply 'scan_beam'/2
			       (File, 'info') of
			<{'ok',Module,ChunkIds0}> when 'true' ->
			    let <_11> =
				letrec
				    'lc$^0'/1 =
					%% Line 537
					fun (_9) ->
					    case _9 of
					      <[{Name,_20,_21}|_8]> when 'true' ->
						  let <_10> =
						      apply 'lc$^0'/1
							  (_8)
						  in  ( [Name|_10]
							-| ['compiler_generated'] )
					      ( <[_7|_8]> when 'true' ->
						    apply 'lc$^0'/1
							(_8)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_24> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_24})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  %% Line 537
				    apply 'lc$^0'/1
					(ChunkIds0)
			    in  %% Line 538
				case apply 'scan_beam'/2
					 (File, _11) of
				  <{'ok',_22,Chunks}>
				      when call 'erlang':'=:='
					    (_22,
					     Module) ->
				      let <_14> =
					  call %% Line 539
					       'lists':%% Line 539
						       'reverse'
					      (%% Line 539
					       Chunks)
				      in  %% Line 539
					  {'ok',Module,_14}
				  ( <_13> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_13})
				    -| ['compiler_generated'] )
				end
			( <_6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_6})
			  -| ['compiler_generated'] )
		      end
	      of <_15> ->
		  _15
	      catch <_18,_17,_16> ->
		  %% Line 540
		  case <_18,_17,_16> of
		    <( 'throw'
		       -| ['compiler_generated'] ),Error,_23> when 'true' ->
			Error
		    ( <_25,_26,_27> when 'true' ->
			  primop 'raise'
			      (_27, _26)
		      -| ['compiler_generated'] )
		  end
	  ( <_19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_19})
		  -| [{'function_name',{'read_all_chunks',1}}] )
	    -| ['compiler_generated'] )
	end
'read_chunk_data'/2 =
    %% Line 542
    fun (_0,_1) ->
	%% Line 543
	try
	    apply 'read_chunk_data'/3
		(_0, _1, [])
	of <_2> ->
	    _2
	catch <_5,_4,_3> ->
	    %% Line 544
	    case <_5,_4,_3> of
	      <( 'throw'
		 -| ['compiler_generated'] ),Error,_8> when 'true' ->
		  Error
	      ( <_9,_10,_11> when 'true' ->
		    primop 'raise'
			(_11, _10)
		-| ['compiler_generated'] )
	    end
'read_chunk_data'/3 =
    %% Line 547
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <File0,ChunkNames0,Options>
	      when let <_3> =
		    call %% Line 548
			 'erlang':%% Line 548
				  'is_atom'
			(%% Line 548
			 File0)
		in  let <_4> =
			call %% Line 548
			     'erlang':%% Line 548
				      'is_list'
			    (%% Line 548
			     File0)
		    in  let <_5> =
			    call %% Line 548
				 'erlang':%% Line 548
					  'is_binary'
				(%% Line 548
				 File0)
			in  let <_6> =
				call %% Line 548
				     'erlang':%% Line 548
					      'or'
				    (_4, _5)
			    in  %% Line 548
				call 'erlang':'or'
				    (_3, _6) ->
	      let <File> =
		  apply %% Line 549
			'beam_filename'/1
		      (%% Line 549
		       File0)
	      in  %% Line 550
		  case apply 'check_chunks'/5
			   (ChunkNames0, File, [], [], []) of
		    <{ChunkIds,Names,Optional}> when 'true' ->
			let <AllowMissingChunks> =
			    call %% Line 551
				 'lists':%% Line 551
					 'member'
				(%% Line 551
				 'allow_missing_chunks', %% Line 551
							 Options)
			in  %% Line 552
			    case apply 'scan_beam'/4
				     (File, ChunkIds, AllowMissingChunks, Optional) of
			      <{'ok',Module,Chunks}> when 'true' ->
				  let <AT> =
				      call %% Line 553
					   'ets':%% Line 553
						 'new'
					  (%% Line 553
					   'beam_symbols', %% Line 553
							   [])
				  in  let <T> = {%% Line 554
					   'empty',%% Line 554
						   AT}
				      in  %% Line 555
					  letrec
					      'after$^0'/0 =
						  fun () ->
						      %% Line 556
						      call 'ets':'delete'
							  (AT)
					  in  try
						  apply 'chunks_to_data'/7
						      (Names, Chunks, File, Chunks, Module, T, [])
					      of <_13> ->
						  do  ( apply 'after$^0'/0
							    ()
							-| ['compiler_generated'] )
						      _13
					      catch <_16,_15,_14> ->
						  do  ( apply 'after$^0'/0
							    ()
							-| ['compiler_generated'] )
						      primop 'raise'
							  (_14, _15)
			      ( <_10> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_10})
				-| ['compiler_generated'] )
			    end
		    ( <_8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_8})
		      -| ['compiler_generated'] )
		  end
	  ( <_19,_18,_17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_19,_18,_17})
		  -| [{'function_name',{'read_chunk_data',3}}] )
	    -| ['compiler_generated'] )
	end
'check_chunks'/5 =
    %% Line 560
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <['atoms'|Ids],File,IL,L,O> when 'true' ->
	      %% Line 561
	      apply 'check_chunks'/5
		  (Ids, File, [[65|[116|[111|[109]]]]|[[65|[116|[85|[56]]]]|IL]], %% Line 562
										  [{'atom_chunk','atoms'}|L], %% Line 562
													      [[65|[116|[111|[109]]]]|[[65|[116|[85|[56]]]]|O]])
	  %% Line 563
	  <['abstract_code'|Ids],File,IL,L,O> when 'true' ->
	      %% Line 564
	      apply 'check_chunks'/5
		  (Ids, File, [[65|[98|[115|[116]]]]|[[68|[98|[103|[105]]]]|IL]], %% Line 565
										  [{'abst_chunk','abstract_code'}|L], %% Line 565
														      [[65|[98|[115|[116]]]]|[[68|[98|[103|[105]]]]|O]])
	  %% Line 566
	  <[ChunkName|Ids],File,IL,L,O>
	      when call 'erlang':'is_atom'
		    (ChunkName) ->
	      let <ChunkId> =
		  apply %% Line 567
			'chunk_name_to_id'/2
		      (%% Line 567
		       ChunkName, %% Line 567
				  File)
	      in  %% Line 568
		  apply 'check_chunks'/5
		      (Ids, File, [ChunkId|IL], [{ChunkId,ChunkName}|L], O)
	  %% Line 569
	  <[ChunkId|Ids],File,IL,L,O> when 'true' ->
	      %% Line 570
	      apply 'check_chunks'/5
		  (Ids, File, [ChunkId|IL], [{ChunkId,ChunkId}|L], O)
	  %% Line 571
	  <[],_X_File,IL,L,O> when 'true' ->
	      let <_7> =
		  call %% Line 572
		       'lists':%% Line 572
			       'usort'
		      (%% Line 572
		       IL)
	      in  let <_6> =
		      call %% Line 572
			   'lists':%% Line 572
				   'reverse'
			  (%% Line 572
			   L)
		  in  %% Line 572
		      {_7,_6,O}
	  ( <_12,_11,_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11,_10,_9,_8})
		  -| [{'function_name',{'check_chunks',5}}] )
	    -| ['compiler_generated'] )
	end
'scan_beam'/2 =
    %% Line 575
    fun (_0,_1) ->
	%% Line 576
	apply 'scan_beam'/4
	    (_0, _1, 'false', [])
'scan_beam'/4 =
    %% Line 579
    fun (_0,_1,_2,_3) ->
	%% Line 580
	case apply 'scan_beam1'/2
		 (_0, _1) of
	  %% Line 581
	  <{'missing',_X_FD,Mod,Data,What}>
	      when ( call 'erlang':'=:='
		      (_2,
		       'true')
		  -| ['compiler_generated'] ) ->
	      let <_8> =
		  letrec
		      'lc$^0'/1 =
			  %% Line 582
			  fun (_6) ->
			      case _6 of
				<[Id|_5]> when 'true' ->
				    let <_7> =
					apply 'lc$^0'/1
					    (_5)
				    in  ( [{Id,'missing_chunk'}|_7]
					  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    Data
				( <_17> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_17})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  %% Line 582
		      apply 'lc$^0'/1
			  (What)
	      in  %% Line 582
		  {'ok',Mod,_8}
	  %% Line 583
	  <{'missing',FD,Mod,Data,What}> when 'true' ->
	      %% Line 584
	      case call 'erlang':'--'
		       (What, _3) of
		%% Line 585
		<[]> when 'true' ->
		    {'ok',Mod,Data}
		%% Line 586
		<[Missing|_16]> when 'true' ->
		    let <_9> =
			apply 'filename'/1
			    (FD)
		    in  apply 'error'/1
			    ({'missing_chunk',_9,Missing})
		( <_10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 588
	  <R> when 'true' ->
	      %% Line 589
	      R
	end
'scan_beam1'/2 =
    %% Line 593
    fun (_0,_1) ->
	let <FD> =
	    apply %% Line 594
		  'open_file'/1
		(_0)
	in  let <_3> =
		catch
		    %% Line 595
		    apply 'scan_beam2'/2
			(FD, _1)
	    in  %% Line 595
		case _3 of
		  %% Line 596
		  <Error>
		      when try
			    let <_4> =
				call 'erlang':'element'
				    (1, _3)
			    in  call 'erlang':'=:='
				    ('error', _4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false' ->
		      %% Line 597
		      call 'erlang':'throw'
			  (Error)
		  %% Line 598
		  <R> when 'true' ->
		      %% Line 599
		      R
		end
'scan_beam2'/2 =
    %% Line 602
    fun (_0,_1) ->
	%% Line 603
	case apply 'pread'/3
		 (_0, 0, 12) of
	  %% Line 604
	  <{NFD,{'ok',#{#<70>(8,1,'integer',['unsigned'|['big']]),
			#<79>(8,1,'integer',['unsigned'|['big']]),
			#<82>(8,1,'integer',['unsigned'|['big']]),
			#<49>(8,1,'integer',['unsigned'|['big']]),
			#<_X_Size>(32,1,'integer',['unsigned'|['big']]),
			#<66>(8,1,'integer',['unsigned'|['big']]),
			#<69>(8,1,'integer',['unsigned'|['big']]),
			#<65>(8,1,'integer',['unsigned'|['big']]),
			#<77>(8,1,'integer',['unsigned'|['big']])}#}}> when 'true' ->
	      %% Line 606
	      apply 'scan_beam'/5
		  (NFD, 12, _1, 17, [])
	  %% Line 607
	  <_X_Error> when 'true' ->
	      let <_3> =
		  apply %% Line 608
			'filename'/1
		      (_0)
	      in  %% Line 608
		  apply 'error'/1
		      ({'not_a_beam_file',_3})
	end
'scan_beam'/5 =
    %% Line 611
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <_X_FD,_X_Pos,[],Mod,Data>
	      when call 'erlang':'=/='
		    (Mod,
		     17) ->
	      %% Line 612
	      {'ok',Mod,Data}
	  %% Line 613
	  <FD,Pos,What,Mod,Data> when 'true' ->
	      %% Line 614
	      case apply 'pread'/3
		       (FD, Pos, 8) of
		%% Line 615
		<{_X_NFD,'eof'}>
		    when call 'erlang':'=:='
			  (Mod,
			   17) ->
		    let <_5> =
			apply %% Line 616
			      'filename'/1
			    (%% Line 616
			     FD)
		    in  %% Line 616
			apply 'error'/1
			    ({'missing_chunk',_5,[65|[116|[111|[109]]]]})
		%% Line 617
		<{_X_NFD,'eof'}>
		    when call 'erlang':'=:='
			  (What,
			   'info') ->
		    let <_6> =
			call %% Line 618
			     'lists':%% Line 618
				     'reverse'
			    (%% Line 618
			     Data)
		    in  %% Line 618
			{'ok',Mod,_6}
		%% Line 619
		<{NFD,'eof'}> when 'true' ->
		    %% Line 620
		    {'missing',NFD,Mod,Data,What}
		%% Line 621
		<{NFD,{'ok',#{#<IdL>(4,8,'binary',['unsigned'|['big']]),
			      #<Sz>(32,1,'integer',['unsigned'|['big']])}#}}> when 'true' ->
		    let <Id> =
			call %% Line 622
			     'erlang':%% Line 622
				      'binary_to_list'
			    (%% Line 622
			     IdL)
		    in  let <Pos1> =
			    call %% Line 623
				 'erlang':%% Line 623
					  '+'
				(%% Line 623
				 Pos, %% Line 623
				      8)
			in  let <_9> =
				call %% Line 624
				     'erlang':%% Line 624
					      '+'
				    (%% Line 624
				     Sz, %% Line 624
					 3)
			    in  let <_10> =
				    call %% Line 624
					 'erlang':%% Line 624
						  '/'
					(_9, %% Line 624
					     4)
				in  let <_11> =
					call %% Line 624
					     'erlang':%% Line 624
						      'trunc'
					    (_10)
				    in  let <_12> =
					    call %% Line 624
						 'erlang':%% Line 624
							  '*'
						(%% Line 624
						 4, _11)
					in  let <Pos2> =
						call %% Line 624
						     'erlang':%% Line 624
							      '+'
						    (_12, %% Line 624
							  Pos1)
					    in  %% Line 625
						apply 'get_data'/8
						    (What, Id, NFD, Sz, Pos1, Pos2, Mod, Data)
		%% Line 626
		<{_X_NFD,{'ok',_X_ChunkHead}}> when 'true' ->
		    let <_14> =
			apply %% Line 627
			      'filename'/1
			    (%% Line 627
			     FD)
		    in  %% Line 627
			apply 'error'/1
			    ({'invalid_beam_file',_14,Pos})
		( <_15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_15})
		  -| ['compiler_generated'] )
	      end
	end
'get_atom_data'/8 =
    %% Line 630
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	let <NewCs> =
	    apply %% Line 631
		  'del_chunk'/2
		(_1, _0)
	in  %% Line 632
	    case apply 'get_chunk'/4
		     (_1, _4, _3, _2) of
	      <{NFD,Chunk}> when 'true' ->
		  %% Line 633
		  case Chunk of
		    <#{#<_X_Num>(32,1,'integer',['unsigned'|['big']]),
		       #<Chunk2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			%% Line 634
			case apply 'extract_atom'/2
				 (Chunk2, _7) of
			  <{Module,_23}> when 'true' ->
			      let <_13> =
				  case _0 of
				    %% Line 636
				    <'info'> when 'true' ->
					%% Line 637
					{_1,_4,_3}
				    %% Line 638
				    <_24> when 'true' ->
					%% Line 639
					{_1,Chunk}
				  end
			      in  %% Line 641
				  apply 'scan_beam'/5
				      (NFD, _5, NewCs, Module, [_13|_6])
			  ( <_11> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_11})
			    -| ['compiler_generated'] )
			end
		    ( <_10> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_10})
		      -| ['compiler_generated'] )
		  end
	      ( <_9> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_9})
		-| ['compiler_generated'] )
	    end
'get_data'/8 =
    %% Line 643
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <Cs,Id = [65|[116|[111|[109]]]],FD,Size,Pos,Pos2,_X_Mod,Data> when 'true' ->
	      %% Line 644
	      apply 'get_atom_data'/8
		  (Cs, Id, FD, Size, Pos, Pos2, Data, 'latin1')
	  %% Line 645
	  <Cs,Id = [65|[116|[85|[56]]]],FD,Size,Pos,Pos2,_X_Mod,Data> when 'true' ->
	      %% Line 646
	      apply 'get_atom_data'/8
		  (Cs, Id, FD, Size, Pos, Pos2, Data, 'utf8')
	  %% Line 647
	  <'info',Id,FD,Size,Pos,Pos2,Mod,Data> when 'true' ->
	      %% Line 648
	      apply 'scan_beam'/5
		  (FD, Pos2, 'info', Mod, [{Id,Pos,Size}|Data])
	  %% Line 649
	  <Chunks,Id,FD,Size,Pos,Pos2,Mod,Data> when 'true' ->
	      let <_21,_22> =
		  case %% Line 650
		       call 'lists':'member'
			   (Id, Chunks) of
		    %% Line 651
		    <'true'> when 'true' ->
			%% Line 652
			case apply 'get_chunk'/4
				 (Id, Pos, Size, FD) of
			  <{FD1,Chunk}> when 'true' ->
			      %% Line 653
			      <FD1,[{Id,Chunk}|Data]>
			  ( <_8> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_8})
			    -| ['compiler_generated'] )
			end
		    %% Line 654
		    <'false'> when 'true' ->
			%% Line 655
			<FD,Data>
		    ( <_9> when 'true' ->
			  %% Line 650
			  primop 'match_fail'
			      ({'case_clause',_9})
		      -| ['compiler_generated'] )
		  end
	      in  let <NewChunks> =
		      apply %% Line 657
			    'del_chunk'/2
			  (%% Line 657
			   Id, %% Line 657
			       Chunks)
		  in  %% Line 658
		      apply 'scan_beam'/5
			  (( _21
			     -| ['compiler_generated'] ), Pos2, NewChunks, Mod, ( _22
										  -| ['compiler_generated'] ))
	end
'del_chunk'/2 =
    %% Line 660
    fun (_0,_1) ->
	case <_0,_1> of
	  <_X_Id,'info'> when 'true' ->
	      %% Line 661
	      'info'
	  %% Line 662
	  <Id,Chunks> when 'true' ->
	      %% Line 663
	      call 'lists':'delete'
		  (Id, Chunks)
	end
'get_chunk'/4 =
    %% Line 666
    fun (_0,_1,_2,_3) ->
	%% Line 667
	case apply 'pread'/3
		 (_3, _1, _2) of
	  %% Line 668
	  <{NFD,'eof'}>
	      when call 'erlang':'=:='
		    (_2,
		     0) ->
	      %% Line 669
	      {NFD,#{}#}
	  %% Line 670
	  <{_X_NFD,'eof'}>
	      when call 'erlang':'>'
		    (_2,
		     0) ->
	      let <_4> =
		  apply %% Line 671
			'filename'/1
		      (_3)
	      in  %% Line 671
		  apply 'error'/1
		      ({'chunk_too_big',_4,_0,_2,0})
	  %% Line 672
	  <{_X_NFD,{'ok',Chunk}}>
	      when try
		    let <_5> =
			call 'erlang':'byte_size'
			    (Chunk)
		    in  call 'erlang':'>'
			    (_2, _5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_7> =
		  apply %% Line 673
			'filename'/1
		      (_3)
	      in  let <_6> =
		      call %% Line 673
			   'erlang':%% Line 673
				    'byte_size'
			  (%% Line 673
			   Chunk)
		  in  %% Line 673
		      apply 'error'/1
			  ({'chunk_too_big',_7,_0,_2,_6})
	  %% Line 674
	  <{NFD,{'ok',Chunk}}> when 'true' ->
	      %% Line 675
	      {NFD,Chunk}
	  ( <_8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_8})
	    -| ['compiler_generated'] )
	end
'chunks_to_data'/7 =
    %% Line 678
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <[{'atom_chunk',Name}|CNs],Chunks,File,Cs,Module,Atoms,L> when 'true' ->
	      %% Line 679
	      case apply 'chunk_to_data'/6
		       (Name, #{}#, File, Cs, Atoms, Module) of
		<{NewAtoms,Ret}> when 'true' ->
		    %% Line 680
		    apply 'chunks_to_data'/7
			(CNs, Chunks, File, Cs, Module, NewAtoms, [Ret|L])
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 681
	  <[{'abst_chunk',Name}|CNs],Chunks,File,Cs,Module,Atoms,L> when 'true' ->
	      let <DbgiChunk> =
		  call %% Line 682
		       'proplists':%% Line 682
				   'get_value'
		      (%% Line 682
		       [68|[98|[103|[105]]]], %% Line 682
					      Chunks, %% Line 682
						      #{}#)
	      in  let <_9> =
		      catch
			  %% Line 684
			  apply 'chunk_to_data'/6
			      ('debug_info', DbgiChunk, File, Cs, Atoms, Module)
		  in  let <_13> =
			  case _9 of
			    %% Line 685
			    <{DbgiAtoms,{'debug_info',{'debug_info_v1',Backend,Metadata}}}> when 'true' ->
				%% Line 686
				case call Backend:'debug_info'
					 ('erlang_v1', Module, Metadata, []) of
				  %% Line 687
				  <{'ok',Code}> when 'true' ->
				      {DbgiAtoms,{'abstract_code',{'raw_abstract_v1',Code}}}
				  %% Line 688
				  <{'error',_25}> when 'true' ->
				      {DbgiAtoms,{'abstract_code','no_abstract_code'}}
				  ( <_10> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_10})
				    -| ['compiler_generated'] )
				end
			    %% Line 690
			    <{'error','beam_lib',{'key_missing_or_invalid',Path,'debug_info'}}> when 'true' ->
				%% Line 691
				apply 'error'/1
				    ({'key_missing_or_invalid',Path,'abstract_code'})
			    %% Line 692
			    <_26> when 'true' ->
				let <AbstChunk> =
				    call %% Line 693
					 'proplists':%% Line 693
						     'get_value'
					(%% Line 693
					 [65|[98|[115|[116]]]], %% Line 693
								Chunks, %% Line 693
									#{}#)
				in  %% Line 694
				    apply 'chunk_to_data'/6
					(Name, AbstChunk, File, Cs, Atoms, Module)
			  end
		      in  %% Line 683
			  case _13 of
			    <{NewAtoms,Ret}> when 'true' ->
				%% Line 696
				apply 'chunks_to_data'/7
				    (CNs, Chunks, File, Cs, Module, NewAtoms, [Ret|L])
			    ( <_14> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_14})
			      -| ['compiler_generated'] )
			  end
	  %% Line 697
	  <[{Id,Name}|CNs],Chunks,File,Cs,Module,Atoms,L> when 'true' ->
	      %% Line 698
	      case call 'lists':'keyfind'
		       (Id, 1, Chunks) of
		<{_X_Id,Chunk}> when 'true' ->
		    %% Line 699
		    case apply 'chunk_to_data'/6
			     (Name, Chunk, File, Cs, Atoms, Module) of
		      <{NewAtoms,Ret}> when 'true' ->
			  %% Line 700
			  apply 'chunks_to_data'/7
			      (CNs, Chunks, File, Cs, Module, NewAtoms, [Ret|L])
		      ( <_16> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_16})
			-| ['compiler_generated'] )
		    end
		( <_15> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 701
	  <[],_X_Chunks,_X_File,_X_Cs,Module,_X_Atoms,L> when 'true' ->
	      let <_17> =
		  call %% Line 702
		       'lists':%% Line 702
			       'reverse'
		      (%% Line 702
		       L)
	      in  %% Line 702
		  {'ok',{Module,_17}}
	  ( <_24,_23,_22,_21,_20,_19,_18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_24,_23,_22,_21,_20,_19,_18})
		  -| [{'function_name',{'chunks_to_data',7}}] )
	    -| ['compiler_generated'] )
	end
'chunk_to_data'/6 =
    %% Line 704
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <Id = 'attributes',Chunk,File,_X_Cs,AtomTable,_X_Mod> when 'true' ->
	      %% Line 705
	      try
		  let <Term> =
		      call %% Line 706
			   'erlang':%% Line 706
				    'binary_to_term'
			  (%% Line 706
			   Chunk)
		  in  let <_7> =
			  apply %% Line 707
				'attributes'/1
			      (%% Line 707
			       Term)
		      in  %% Line 707
			  {AtomTable,{Id,_7}}
	      of <_8> ->
		  _8
	      catch <_11,_10,_9> ->
		  %% Line 709
		  case <_11,_10,_9> of
		    <( 'error'
		       -| ['compiler_generated'] ),( 'badarg'
						     -| ['compiler_generated'] ),_52> when 'true' ->
			let <_12> =
			    apply %% Line 710
				  'chunk_name_to_id'/2
				(%% Line 710
				 Id, %% Line 710
				     File)
			in  %% Line 710
			    apply 'error'/1
				({'invalid_chunk',File,_12})
		    ( <_62,_63,_64> when 'true' ->
			  primop 'raise'
			      (_64, _63)
		      -| ['compiler_generated'] )
		  end
	  %% Line 712
	  <Id = 'compile_info',Chunk,File,_X_Cs,AtomTable,_X_Mod> when 'true' ->
	      %% Line 713
	      try
		  let <_13> =
		      call %% Line 714
			   'erlang':%% Line 714
				    'binary_to_term'
			  (%% Line 714
			   Chunk)
		  in  %% Line 714
		      {AtomTable,{Id,_13}}
	      of <_14> ->
		  _14
	      catch <_17,_16,_15> ->
		  %% Line 716
		  case <_17,_16,_15> of
		    <( 'error'
		       -| ['compiler_generated'] ),( 'badarg'
						     -| ['compiler_generated'] ),_53> when 'true' ->
			let <_18> =
			    apply %% Line 717
				  'chunk_name_to_id'/2
				(%% Line 717
				 Id, %% Line 717
				     File)
			in  %% Line 717
			    apply 'error'/1
				({'invalid_chunk',File,_18})
		    ( <_65,_66,_67> when 'true' ->
			  primop 'raise'
			      (_67, _66)
		      -| ['compiler_generated'] )
		  end
	  %% Line 719
	  <Id = 'debug_info',Chunk,File,_X_Cs,AtomTable,Mod> when 'true' ->
	      %% Line 720
	      case Chunk of
		%% Line 721
		<#{}#> when 'true' ->
		    %% Line 722
		    {AtomTable,{Id,'no_debug_info'}}
		%% Line 723
		<#{#<0>(8,1,'integer',['unsigned'|['big']]),
		   #<N>(8,1,'integer',['unsigned'|['big']]),
		   #<Mode0>(N,8,'binary',['unsigned'|['big']]),
		   #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <Mode> =
			call %% Line 724
			     'erlang':%% Line 724
				      'binary_to_atom'
			    (%% Line 724
			     Mode0, %% Line 724
				    'utf8')
		    in  let <Term> =
			    apply %% Line 725
				  'decrypt_chunk'/5
				(%% Line 725
				 Mode, %% Line 725
				       Mod, %% Line 725
					    File, %% Line 725
						  Id, %% Line 725
						      Rest)
			in  let <_21> =
				apply %% Line 726
				      'anno_from_term'/1
				    (%% Line 726
				     Term)
			    in  %% Line 726
				{AtomTable,{Id,_21}}
		%% Line 727
		<_54> when 'true' ->
		    let <_22> =
			catch
			    %% Line 728
			    call 'erlang':'binary_to_term'
				(Chunk)
		    in  %% Line 728
			case _22 of
			  %% Line 729
			  <{'EXIT',_55}> when 'true' ->
			      let <_23> =
				  apply %% Line 730
					'chunk_name_to_id'/2
				      (%% Line 730
				       Id, %% Line 730
					   File)
			      in  %% Line 730
				  apply 'error'/1
				      ({'invalid_chunk',File,_23})
			  %% Line 731
			  <Term> when 'true' ->
			      let <_24> =
				  apply %% Line 732
					'anno_from_term'/1
				      (%% Line 732
				       Term)
			      in  %% Line 732
				  {AtomTable,{Id,_24}}
			end
	      end
	  %% Line 735
	  <Id = 'abstract_code',Chunk,File,_X_Cs,AtomTable,Mod> when 'true' ->
	      %% Line 737
	      case Chunk of
		%% Line 738
		<#{}#> when 'true' ->
		    %% Line 739
		    {AtomTable,{Id,'no_abstract_code'}}
		%% Line 740
		<#{#<0>(8,1,'integer',['unsigned'|['big']]),
		   #<N>(8,1,'integer',['unsigned'|['big']]),
		   #<Mode0>(N,8,'binary',['unsigned'|['big']]),
		   #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <Mode> =
			call %% Line 741
			     'erlang':%% Line 741
				      'binary_to_atom'
			    (%% Line 741
			     Mode0, %% Line 741
				    'utf8')
		    in  let <Term> =
			    apply %% Line 742
				  'decrypt_chunk'/5
				(%% Line 742
				 Mode, %% Line 742
				       Mod, %% Line 742
					    File, %% Line 742
						  Id, %% Line 742
						      Rest)
			in  let <_29> =
				apply %% Line 743
				      'old_anno_from_term'/1
				    (%% Line 743
				     Term)
			    in  %% Line 743
				{AtomTable,{Id,_29}}
		%% Line 744
		<_56> when 'true' ->
		    let <_30> =
			catch
			    %% Line 745
			    call 'erlang':'binary_to_term'
				(Chunk)
		    in  %% Line 745
			case _30 of
			  %% Line 746
			  <{'EXIT',_57}> when 'true' ->
			      let <_31> =
				  apply %% Line 747
					'chunk_name_to_id'/2
				      (%% Line 747
				       Id, %% Line 747
					   File)
			      in  %% Line 747
				  apply 'error'/1
				      ({'invalid_chunk',File,_31})
			  %% Line 748
			  <Term> when 'true' ->
			      %% Line 749
			      try
				  let <_32> =
				      apply %% Line 750
					    'old_anno_from_term'/1
					  (%% Line 750
					   Term)
				  in  %% Line 750
				      {AtomTable,{Id,_32}}
			      of <_33> ->
				  _33
			      catch <_36,_35,_34> ->
				  let <_37> =
				      apply %% Line 754
					    'chunk_name_to_id'/2
					  (%% Line 754
					   Id, %% Line 754
					       File)
				  in  %% Line 753
				      apply 'error'/1
					  ({'invalid_chunk',File,_37})
			end
	      end
	  %% Line 758
	  <Id = 'atoms',_X_Chunk,_X_File,Cs,AtomTable0,_X_Mod> when 'true' ->
	      let <AtomTable> =
		  apply %% Line 759
			'ensure_atoms'/2
		      (%% Line 759
		       AtomTable0, %% Line 759
				   Cs)
	      in  let <Atoms> =
		      call %% Line 760
			   'ets':%% Line 760
				 'tab2list'
			  (%% Line 760
			   AtomTable)
		  in  let <_42> =
			  call %% Line 761
			       'lists':%% Line 761
				       'sort'
			      (%% Line 761
			       Atoms)
		      in  %% Line 761
			  {AtomTable,{Id,_42}}
	  %% Line 762
	  <ChunkName,Chunk,File,%% Line 763
				Cs,%% Line 763
				   AtomTable,%% Line 763
					     _X_Mod>
	      when %% Line 763
		call 'erlang':'is_atom'
		    (ChunkName) ->
	      let <_43> =
		  catch
		      %% Line 764
		      apply 'symbols'/4
			  (Chunk, AtomTable, Cs, ChunkName)
	      in  %% Line 764
		  case _43 of
		    %% Line 765
		    <{'ok',NewAtomTable,S}> when 'true' ->
			%% Line 766
			{NewAtomTable,{ChunkName,S}}
		    %% Line 767
		    <{'EXIT',_61}> when 'true' ->
			let <_44> =
			    apply %% Line 768
				  'chunk_name_to_id'/2
				(%% Line 768
				 ChunkName, %% Line 768
					    File)
			in  %% Line 768
			    apply 'error'/1
				({'invalid_chunk',File,_44})
		    ( <_45> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_45})
		      -| ['compiler_generated'] )
		  end
	  %% Line 770
	  <ChunkId,Chunk,_X_File,%% Line 771
				 _X_Cs,%% Line 771
				       AtomTable,%% Line 771
						 _X_Module>
	      when %% Line 771
		call 'erlang':'is_list'
		    (ChunkId) ->
	      %% Line 772
	      {AtomTable,{ChunkId,Chunk}}
	  ( <_51,_50,_49,_48,_47,_46> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_51,_50,_49,_48,_47,_46})
		  -| [{'function_name',{'chunk_to_data',6}}] )
	    -| ['compiler_generated'] )
	end
'chunk_name_to_id'/2 =
    %% Line 774
    fun (_0,_1) ->
	case <_0,_1> of
	  <'indexed_imports',_4> when 'true' ->
	      [73|[109|[112|[84]]]]
	  %% Line 775
	  <'imports',_5> when 'true' ->
	      [73|[109|[112|[84]]]]
	  %% Line 776
	  <'exports',_6> when 'true' ->
	      [69|[120|[112|[84]]]]
	  %% Line 777
	  <'labeled_exports',_7> when 'true' ->
	      [69|[120|[112|[84]]]]
	  %% Line 778
	  <'locals',_8> when 'true' ->
	      [76|[111|[99|[84]]]]
	  %% Line 779
	  <'labeled_locals',_9> when 'true' ->
	      [76|[111|[99|[84]]]]
	  %% Line 780
	  <'attributes',_10> when 'true' ->
	      [65|[116|[116|[114]]]]
	  %% Line 781
	  <'abstract_code',_11> when 'true' ->
	      [65|[98|[115|[116]]]]
	  %% Line 782
	  <'debug_info',_12> when 'true' ->
	      [68|[98|[103|[105]]]]
	  %% Line 783
	  <'compile_info',_13> when 'true' ->
	      [67|[73|[110|[102]]]]
	  %% Line 784
	  <Other,File> when 'true' ->
	      %% Line 785
	      apply 'error'/1
		  ({'unknown_chunk',File,Other})
	end
'attributes'/1 =
    %% Line 789
    fun (_0) ->
	let <_1> =
	    call %% Line 790
		 'lists':%% Line 790
			 'keysort'
		(%% Line 790
		 1, _0)
	in  %% Line 790
	    apply 'attributes'/2
		(_1, [])
'attributes'/2 =
    %% Line 792
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],R> when 'true' ->
	      %% Line 793
	      call 'lists':'reverse'
		  (R)
	  %% Line 794
	  <L,R> when 'true' ->
	      let <_2> =
		  call %% Line 795
		       'erlang':%% Line 795
				'hd'
		      (%% Line 795
		       L)
	      in  let <K> =
		      call %% Line 795
			   'erlang':%% Line 795
				    'element'
			  (%% Line 795
			   1, _2)
		  in  let <_7> =
			  fun (_5) ->
			      let <_4> =
				  call %% Line 796
				       'erlang':%% Line 796
						'element'
				      (%% Line 796
				       1, %% Line 796
					  _5)
			      in  %% Line 796
				  call 'erlang':'=:='
				      (_4, K)
		      in  %% Line 796
			  case call 'lists':'splitwith'
				   (_7, L) of
			    <{L1,L2}> when 'true' ->
				let <_13> =
				    letrec
					'lc$^1'/1 =
					    %% Line 797
					    fun (_11) ->
						case _11 of
						  <[{_17,A}|_10]> when 'true' ->
						      let <_12> =
							  apply 'lc$^1'/1
							      (_10)
						      in  ( [A|_12]
							    -| ['compiler_generated'] )
						  ( <[_9|_10]> when 'true' ->
							apply 'lc$^1'/1
							    (_10)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_19> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_19})
							  -| [{'function_name',{'lc$^1',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  %% Line 797
					apply 'lc$^1'/1
					    (L1)
				in  let <V> =
					call %% Line 797
					     'lists':%% Line 797
						     'append'
					    (_13)
				    in  %% Line 798
					apply 'attributes'/2
					    (L2, [{K,V}|R])
			    ( <_8> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_8})
			      -| ['compiler_generated'] )
			  end
	end
'symbols'/4 =
    %% Line 802
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <#{#<_X_Num>(32,1,'integer',['unsigned'|['big']]),
	     #<B>('all',8,'binary',['unsigned'|['big']])}#,AT0,Cs,Name> when 'true' ->
	      let <AT> =
		  apply %% Line 803
			'ensure_atoms'/2
		      (%% Line 803
		       AT0, %% Line 803
			    Cs)
	      in  %% Line 804
		  apply 'symbols1'/5
		      (B, AT, Name, [], 1)
	  ( <_8,_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7,_6,_5})
		  -| [{'function_name',{'symbols',4}}] )
	    -| ['compiler_generated'] )
	end
'symbols1'/5 =
    %% Line 806
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <#{#<I1>(32,1,'integer',['unsigned'|['big']]),
	     #<I2>(32,1,'integer',['unsigned'|['big']]),
	     #<I3>(32,1,'integer',['unsigned'|['big']]),
	     #<B>('all',8,'binary',['unsigned'|['big']])}#,AT,Name,S,Cnt> when 'true' ->
	      let <Symbol> =
		  apply %% Line 807
			'symbol'/6
		      (%% Line 807
		       Name, %% Line 807
			     AT, %% Line 807
				 I1, %% Line 807
				     I2, %% Line 807
					 I3, %% Line 807
					     Cnt)
	      in  let <_6> =
		      call %% Line 808
			   'erlang':%% Line 808
				    '+'
			  (%% Line 808
			   Cnt, %% Line 808
				1)
		  in  %% Line 808
		      apply 'symbols1'/5
			  (B, AT, Name, [Symbol|S], _6)
	  %% Line 809
	  <#{}#,AT,_X_Name,S,_X_Cnt> when 'true' ->
	      let <_7> =
		  call %% Line 810
		       'lists':%% Line 810
			       'sort'
		      (%% Line 810
		       S)
	      in  %% Line 810
		  {'ok',AT,_7}
	  ( <_12,_11,_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11,_10,_9,_8})
		  -| [{'function_name',{'symbols1',5}}] )
	    -| ['compiler_generated'] )
	end
'symbol'/6 =
    %% Line 812
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <'indexed_imports',AT,I1,I2,I3,Cnt> when 'true' ->
	      let <_7> =
		  apply %% Line 813
			'atm'/2
		      (%% Line 813
		       AT, %% Line 813
			   I1)
	      in  let <_6> =
		      apply %% Line 813
			    'atm'/2
			  (%% Line 813
			   AT, %% Line 813
			       I2)
		  in  %% Line 813
		      {Cnt,_7,_6,I3}
	  %% Line 814
	  <'imports',AT,I1,I2,I3,_X_Cnt> when 'true' ->
	      let <_9> =
		  apply %% Line 815
			'atm'/2
		      (%% Line 815
		       AT, %% Line 815
			   I1)
	      in  let <_8> =
		      apply %% Line 815
			    'atm'/2
			  (%% Line 815
			   AT, %% Line 815
			       I2)
		  in  %% Line 815
		      {_9,_8,I3}
	  %% Line 816
	  <'labeled_exports',AT,I1,I2,I3,_X_Cnt> when 'true' ->
	      let <_10> =
		  apply %% Line 817
			'atm'/2
		      (%% Line 817
		       AT, %% Line 817
			   I1)
	      in  %% Line 817
		  {_10,I2,I3}
	  %% Line 818
	  <'labeled_locals',AT,I1,I2,I3,_X_Cnt> when 'true' ->
	      let <_11> =
		  apply %% Line 819
			'atm'/2
		      (%% Line 819
		       AT, %% Line 819
			   I1)
	      in  %% Line 819
		  {_11,I2,I3}
	  %% Line 820
	  <_19,AT,I1,I2,_X_I3,_X_Cnt> when 'true' ->
	      let <_12> =
		  apply %% Line 821
			'atm'/2
		      (%% Line 821
		       AT, %% Line 821
			   I1)
	      in  %% Line 821
		  {_12,I2}
	end
'atm'/2 =
    %% Line 823
    fun (_0,_1) ->
	%% Line 824
	case call 'ets':'lookup'
		 (_0, _1) of
	  <[{_X_N,S}|[]]> when 'true' ->
	      %% Line 825
	      S
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_2})
	    -| ['compiler_generated'] )
	end
'ensure_atoms'/2 =
    %% Line 828
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'empty',AT},Cs> when 'true' ->
	      do  %% Line 829
		  case call 'lists':'keyfind'
			   ([65|[116|[85|[56]]]], 1, Cs) of
		    %% Line 830
		    <{_X_Id,AtomChunk}>
			when call 'erlang':'is_binary'
			      (AtomChunk) ->
			%% Line 831
			apply 'extract_atoms'/3
			    (AtomChunk, AT, 'utf8')
		    %% Line 832
		    <_6> when 'true' ->
			%% Line 833
			case call 'lists':'keyfind'
				 ([65|[116|[111|[109]]]], 1, Cs) of
			  <{_X_Id,AtomChunk}> when 'true' ->
			      %% Line 834
			      apply 'extract_atoms'/3
				  (AtomChunk, AT, 'latin1')
			  ( <_2> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_2})
			    -| ['compiler_generated'] )
			end
		  end
		  %% Line 836
		  AT
	  %% Line 837
	  <AT,_X_Cs> when 'true' ->
	      %% Line 838
	      AT
	end
'extract_atoms'/3 =
    %% Line 840
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <#{#<_X_Num>(32,1,'integer',['unsigned'|['big']]),
	     #<B>('all',8,'binary',['unsigned'|['big']])}#,AT,Encoding> when 'true' ->
	      %% Line 841
	      apply 'extract_atoms'/4
		  (B, 1, AT, Encoding)
	  ( <_5,_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4,_3})
		  -| [{'function_name',{'extract_atoms',3}}] )
	    -| ['compiler_generated'] )
	end
'extract_atoms'/4 =
    %% Line 843
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <#{}#,_X_I,_X_AT,_X_Encoding> when 'true' ->
	      %% Line 844
	      'true'
	  %% Line 845
	  <B,I,AT,Encoding> when 'true' ->
	      %% Line 846
	      case apply 'extract_atom'/2
		       (B, Encoding) of
		<{Atom,B1}> when 'true' ->
		    %% Line 847
		    case call 'ets':'insert'
			     (AT, {I,Atom}) of
		      <'true'> when 'true' ->
			  let <_6> =
			      call %% Line 848
				   'erlang':%% Line 848
					    '+'
				  (%% Line 848
				   I, %% Line 848
				      1)
			  in  %% Line 848
			      apply 'extract_atoms'/4
				  (B1, _6, AT, Encoding)
		      ( <_5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_5})
			-| ['compiler_generated'] )
		    end
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	end
'extract_atom'/2 =
    %% Line 850
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{#<Len>(8,1,'integer',['unsigned'|['big']]),
	     #<B>('all',8,'binary',['unsigned'|['big']])}#,Encoding> when 'true' ->
	      %% Line 851
	      case B of
		<#{#<SB>(Len,8,'binary',['unsigned'|['big']]),
		   #<Tail>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_3> =
			call %% Line 852
			     'erlang':%% Line 852
				      'binary_to_atom'
			    (%% Line 852
			     SB, %% Line 852
				 Encoding)
		    in  %% Line 852
			{_3,Tail}
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'extract_atom',2}}] )
	    -| ['compiler_generated'] )
	end
'open_file'/1 =
    %% Line 860
    fun (_0) ->
	case _0 of
	  <Binary = #{#<70>(8,1,'integer',['unsigned'|['big']]),
		      #<79>(8,1,'integer',['unsigned'|['big']]),
		      #<82>(8,1,'integer',['unsigned'|['big']]),
		      #<49>(8,1,'integer',['unsigned'|['big']]),
		      #<_4>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 861
	      {'bb',0,Binary,Binary}
	  %% Line 862
	  <Binary0>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      let <Binary> =
		  apply %% Line 863
			'uncompress'/1
		      (%% Line 863
		       Binary0)
	      in  %% Line 864
		  {'bb',0,Binary,Binary}
	  %% Line 865
	  <FileName> when 'true' ->
	      %% Line 866
	      case call 'file':'open'
		       (FileName, ['read'|['raw'|['binary']]]) of
		%% Line 867
		<{'ok',Fd}> when 'true' ->
		    %% Line 868
		    apply 'read_all'/3
			(Fd, FileName, [])
		%% Line 869
		<Error> when 'true' ->
		    %% Line 870
		    apply 'file_error'/2
			(FileName, Error)
	      end
	end
'read_all'/3 =
    %% Line 873
    fun (_0,_1,_2) ->
	%% Line 874
	case call 'file':'read'
		 (_0, 262144) of
	  %% Line 875
	  <{'ok',Bin}> when 'true' ->
	      %% Line 876
	      apply 'read_all'/3
		  (_0, _1, [Bin|_2])
	  %% Line 877
	  <'eof'> when 'true' ->
	      %% Line 878
	      case call 'file':'close'
		       (_0) of
		<'ok'> when 'true' ->
		    let <_5> =
			call %% Line 879
			     'lists':%% Line 879
				     'reverse'
			    (_2)
		    in  let <_6> =
			    apply %% Line 879
				  'uncompress'/1
				(_5)
			in  %% Line 879
			    {'bb',0,_6,_1}
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 880
	  <Error> when 'true' ->
	      %% Line 881
	      case call 'file':'close'
		       (_0) of
		<'ok'> when 'true' ->
		    %% Line 882
		    apply 'file_error'/2
			(_1, Error)
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_7})
		  -| ['compiler_generated'] )
	      end
	end
'pread'/3 =
    %% Line 885
    fun (_0,_1,_2) ->
	%% Line 886
	case _0 of
	  <{'bb',Pos,Binary,_21}> when 'true' ->
	      let <Skip> =
		  call %% Line 887
		       'erlang':%% Line 887
				'-'
		      (_1, %% Line 887
			   Pos)
	      in  %% Line 888
		  case Binary of
		    %% Line 889
		    <#{#<_22>(Skip,8,'binary',['unsigned'|['big']]),
		       #<B>(_2,8,'binary',['unsigned'|['big']]),
		       #<Bin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <_rec0> =
			    call %% Line 890
				 'erlang':%% Line 890
					  '+'
				(_1, _2)
			in  %% Line 890
			    case _0 of
			      <{'bb',_rec2,_rec3,_rec4}> when 'true' ->
				  let <_8> =
				      {'bb',_rec0,Bin,_rec4}
				  in  %% Line 891
				      {_8,{'ok',B}}
			      ( <_23> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','bb'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
		    %% Line 892
		    <#{#<_24>(Skip,8,'binary',['unsigned'|['big']]),
		       #<Bin>('all',8,'binary',['unsigned'|['big']])}#>
			when try
			      let <_10> =
				  call 'erlang':'byte_size'
				      (Bin)
			      in  call 'erlang':'>'
				      (_10, 0)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			let <_11> =
			    call %% Line 893
				 'erlang':%% Line 893
					  'byte_size'
				(%% Line 893
				 Bin)
			in  let <_rec5> =
				call %% Line 893
				     'erlang':%% Line 893
					      '+'
				    (_1, _11)
			    in  %% Line 893
				case _0 of
				  <{'bb',_rec7,_rec8,_rec9}> when 'true' ->
				      let <_15> =
					  {'bb',_rec5,#{}#,_rec9}
				      in  %% Line 894
					  {_15,{'ok',Bin}}
				  ( <_25> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','bb'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
		    %% Line 895
		    <_26> when 'true' ->
			%% Line 896
			{_0,'eof'}
		  end
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_3})
	    -| ['compiler_generated'] )
	end
'filename'/1 =
    %% Line 899
    fun (_0) ->
	case _0 of
	  <BB = {'bb',_11,_12,_13}>
	      when ( try
		      let <_5> =
			  call 'erlang':'element'
			      (4, BB)
		      in  call 'erlang':'is_binary'
			      (_5)
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 900
	      ( case BB of
		  ( <( {'bb',_14,_15,_rec10}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec10
		    -| ['compiler_generated'] )
		  ( <_16> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','bb'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 901
	  <BB> when 'true' ->
	      %% Line 902
	      ( case BB of
		  ( <( {'bb',_17,_18,_rec11}
		       -| ['compiler_generated'] )> when 'true' ->
			call 'erlang':'list_to_atom'
			    (_rec11)
		    -| ['compiler_generated'] )
		  ( <_19> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','bb'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'beam_filename'/1 =
    %% Line 904
    fun (_0) ->
	case _0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      %% Line 905
	      Bin
	  %% Line 906
	  <File> when 'true' ->
	      let <_1> =
		  call %% Line 907
		       'filename':%% Line 907
				  'rootname'
		      (%% Line 907
		       File, %% Line 907
			     [46|[98|[101|[97|[109]]]]])
	      in  %% Line 907
		  call 'erlang':'++'
		      (_1, [46|[98|[101|[97|[109]]]]])
	end
'uncompress'/1 =
    %% Line 910
    fun (_0) ->
	%% Line 911
	case call 'ram_file':'open'
		 (_0, ['write'|['binary']]) of
	  <{'ok',Fd}> when 'true' ->
	      %% Line 912
	      case call 'ram_file':'uncompress'
		       (Fd) of
		<{'ok',_6}> when 'true' ->
		    %% Line 913
		    case call 'ram_file':'get_file'
			     (Fd) of
		      <{'ok',Binary}> when 'true' ->
			  %% Line 914
			  case call 'ram_file':'close'
				   (Fd) of
			    <'ok'> when 'true' ->
				%% Line 915
				Binary
			    ( <_4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_4})
			      -| ['compiler_generated'] )
			  end
		      ( <_3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_3})
			-| ['compiler_generated'] )
		    end
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_1})
	    -| ['compiler_generated'] )
	end
'compress'/1 =
    %% Line 917
    fun (_0) ->
	%% Line 918
	case call 'ram_file':'open'
		 (_0, ['write'|['binary']]) of
	  <{'ok',Fd}> when 'true' ->
	      %% Line 919
	      case call 'ram_file':'compress'
		       (Fd) of
		<{'ok',_6}> when 'true' ->
		    %% Line 920
		    case call 'ram_file':'get_file'
			     (Fd) of
		      <{'ok',Binary}> when 'true' ->
			  %% Line 921
			  case call 'ram_file':'close'
				   (Fd) of
			    <'ok'> when 'true' ->
				%% Line 922
				Binary
			    ( <_4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_4})
			      -| ['compiler_generated'] )
			  end
		      ( <_3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_3})
			-| ['compiler_generated'] )
		    end
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_1})
	    -| ['compiler_generated'] )
	end
'assert_directory'/1 =
    %% Line 925
    fun (_0) ->
	%% Line 926
	case call 'filelib':'is_dir'
		 (_0) of
	  %% Line 927
	  <'true'> when 'true' ->
	      %% Line 928
	      'ok'
	  %% Line 929
	  <'false'> when 'true' ->
	      %% Line 930
	      apply 'error'/1
		  ({'not_a_directory',_0})
	  ( <_1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_1})
	    -| ['compiler_generated'] )
	end
'file_error'/2 =
    %% Line 935
    fun (_0,_1) ->
	case <_0,_1> of
	  <FileName,{'error',Reason}> when 'true' ->
	      %% Line 936
	      apply 'error'/1
		  ({'file_error',FileName,Reason})
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'file_error',2}}] )
	    -| ['compiler_generated'] )
	end
'error'/1 =
    %% Line 940
    fun (_0) ->
	%% Line 941
	call 'erlang':'throw'
	    ({'error','beam_lib',_0})
'significant_chunks'/0 =
    %% Line 945
    fun () ->
	let <_0> =
	    apply %% Line 946
		  'md5_chunks'/0
		()
	in  %% Line 946
	    [[76|[105|[110|[101]]]]|_0]
'md5_chunks'/0 =
    %% Line 951
    fun () ->
	%% Line 952
	[[65|[116|[111|[109]]]]|[[65|[116|[85|[56]]]]|[[67|[111|[100|[101]]]]|[[83|[116|[114|[84]]]]|[[73|[109|[112|[84]]]]|[[69|[120|[112|[84]]]]|[[70|[117|[110|[84]]]]|[[76|[105|[116|[84]]]]]]]]]]]]
'mandatory_chunks'/0 =
    %% Line 956
    fun () ->
	%% Line 957
	[[67|[111|[100|[101]]]]|[[69|[120|[112|[84]]]]|[[73|[109|[112|[84]]]]|[[83|[116|[114|[84]]]]]]]]
'decrypt_chunk'/5 =
    %% Line 972
    fun (_0,_1,_2,_3,_4) ->
	%% Line 973
	try
	    let <KeyString> =
		apply %% Line 974
		      'get_crypto_key'/1
		    (%% Line 974
		     {'debug_info',_0,_1,_2})
	    in  %% Line 975
		case apply 'make_crypto_key'/2
			 (_0, KeyString) of
		  <{_18,Key,IVec,_X_BlockSize}>
		      when call 'erlang':'=:='
			    (_18,
			     _0) ->
		      %% Line 976
		      case apply 'start_crypto'/0
			       () of
			<'ok'> when 'true' ->
			    let <NewBin> =
				call %% Line 977
				     'crypto':%% Line 977
					      'block_decrypt'
				    (_0, %% Line 977
					 Key, %% Line 977
					      IVec, _4)
			    in  %% Line 978
				call 'erlang':'binary_to_term'
				    (NewBin)
			( <_7> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_7})
			  -| ['compiler_generated'] )
		      end
		  ( <_6> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_6})
		    -| ['compiler_generated'] )
		end
	of <_9> ->
	    _9
	catch <_12,_11,_10> ->
	    %% Line 981
	    apply 'error'/1
		({'key_missing_or_invalid',_2,_3})
'old_anno_from_term'/1 =
    %% Line 984
    fun (_0) ->
	case _0 of
	  <{'raw_abstract_v1',Forms}> when 'true' ->
	      let <_1> =
		  apply %% Line 985
			'anno_from_forms'/1
		      (%% Line 985
		       Forms)
	      in  %% Line 985
		  {'raw_abstract_v1',_1}
	  %% Line 986
	  <_@r0 = {Tag,Forms}>
	      when let <_2> =
		    call 'erlang':'=:='
			(Tag, 'abstract_v1')
		in  let <_3> =
			call %% Line 987
			     'erlang':%% Line 987
				      '=:='
			    (%% Line 987
			     Tag, %% Line 987
				  'abstract_v2')
		    in  call 'erlang':'or'
			    (_2, _3) ->
	      %% Line 988
	      try
		  let <_4> =
		      apply 'anno_from_forms'/1
			  (Forms)
		  in  {Tag,_4}
	      of <_5> ->
		  _5
	      catch <_8,_7,_6> ->
		  %% Line 991
		  _@r0
	  %% Line 993
	  <T> when 'true' ->
	      %% Line 994
	      T
	end
'anno_from_term'/1 =
    %% Line 996
    fun (_0) ->
	case _0 of
	  <_@r0 = {Tag1 = 'debug_info_v1',Tag2 = 'erl_abstract_code',{Forms,Opts}}> when 'true' ->
	      %% Line 997
	      try
		  let <_1> =
		      apply 'anno_from_forms'/1
			  (Forms)
		  in  {Tag1,Tag2,{_1,Opts}}
	      of <_2> ->
		  _2
	      catch <_5,_4,_3> ->
		  %% Line 1000
		  _@r0
	  %% Line 1002
	  <T> when 'true' ->
	      %% Line 1003
	      T
	end
'anno_from_forms'/1 =
    %% Line 1005
    fun (_0) ->
	let <Forms> =
	    call %% Line 1009
		 'epp':%% Line 1009
		       'restore_typed_record_fields'
		(_0)
	in  %% Line 1010
	    ( letrec
		  'lc$^0'/1 =
		      fun (_4) ->
			  case _4 of
			    <[Form|_3]> when 'true' ->
				let <_5> =
				    call 'erl_parse':'anno_from_term'
					(Form)
				in  let <_6> =
					apply 'lc$^0'/1
					    (_3)
				    in  ( [_5|_6]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_8> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_8})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Forms)
	      -| ['list_comprehension'] )
'start_crypto'/0 =
    %% Line 1012
    fun () ->
	%% Line 1013
	case call 'crypto':'start'
		 () of
	  %% Line 1014
	  <{'error',{'already_started',_1}}> when 'true' ->
	      %% Line 1015
	      'ok'
	  %% Line 1016
	  <'ok'> when 'true' ->
	      %% Line 1017
	      'ok'
	  ( <_0> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_0})
	    -| ['compiler_generated'] )
	end
'get_crypto_key'/1 =
    %% Line 1020
    fun (_0) ->
	%% Line 1021
	apply 'call_crypto_server'/1
	    ({'get_crypto_key',_0})
'call_crypto_server'/1 =
    %% Line 1023
    fun (_0) ->
	%% Line 1024
	try
	    %% Line 1025
	    call 'gen_server':'call'
		('beam_lib__crypto_key_server', _0, 'infinity')
	of <_1> ->
	    _1
	catch <_4,_3,_2> ->
	    %% Line 1027
	    case <_4,_3,_2> of
	      <( 'exit'
		 -| ['compiler_generated'] ),( {( 'noproc'
						  -| ['compiler_generated'] ),_6}
					       -| ['compiler_generated'] ),_7> when 'true' ->
		  %% Line 1029
		  apply 'call_crypto_server_1'/1
		      (_0)
	      %% Line 1030
	      <( 'exit'
		 -| ['compiler_generated'] ),( {( 'normal'
						  -| ['compiler_generated'] ),_8}
					       -| ['compiler_generated'] ),_9> when 'true' ->
		  %% Line 1032
		  apply 'call_crypto_server_1'/1
		      (_0)
	      ( <_10,_11,_12> when 'true' ->
		    primop 'raise'
			(_12, _11)
		-| ['compiler_generated'] )
	    end
'call_crypto_server_1'/1 =
    %% Line 1035
    fun (_0) ->
	do  %% Line 1036
	    case call 'gen_server':'start'
		     ({'local','beam_lib__crypto_key_server'}, 'beam_lib', [], []) of
	      %% Line 1037
	      <{'ok',_3}> when 'true' ->
		  'ok'
	      %% Line 1038
	      <{'error',{'already_started',_4}}> when 'true' ->
		  'ok'
	      ( <_1> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_1})
		-| ['compiler_generated'] )
	    end
	    do  %% Line 1040
		call 'erlang':'yield'
		    ()
		%% Line 1041
		apply 'call_crypto_server'/1
		    (_0)
'init'/1 =
    %% Line 1045
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      %% Line 1046
	      {'ok',{'state','undefined'}}
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_call'/3 =
    %% Line 1057
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <R = {'get_crypto_key',_32},From,S = {'state','undefined'}> when 'true' ->
	      %% Line 1058
	      case apply 'crypto_key_fun_from_file'/0
		       () of
		%% Line 1059
		<'error'> when 'true' ->
		    %% Line 1060
		    {'reply','error',S}
		%% Line 1061
		<F>
		    when call 'erlang':'is_function'
			  (F) ->
		    %% Line 1063
		    case S of
		      <{'state',_rec13}> when 'true' ->
			  let <_5> = {'state',F}
			  in  apply 'handle_call'/3
				  (R, From, _5)
		      ( <_33> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1065
	  <{'get_crypto_key',What},From,S = {'state',F}> when 'true' ->
	      %% Line 1066
	      try
		  let <Result> =
		      apply %% Line 1067
			    F
			  (%% Line 1067
			   What)
		  in  do  %% Line 1070
			  call 'gen_server':'reply'
			      (From, Result)
			  do  %% Line 1071
			      call 'erlang':'garbage_collect'
				  ()
			      %% Line 1072
			      {'noreply',S}
	      of <_8> ->
		  _8
	      catch <_11,_10,_9> ->
		  %% Line 1075
		  {'reply','error',S}
	  %% Line 1077
	  <{'crypto_key_fun',F},From = {_37,_38},S> when 'true' ->
	      %% Line 1078
	      ( case S of
		  ( <( {'state',_rec14}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec14 of
			  %% Line 1079
			  <'undefined'> when 'true' ->
			      %% Line 1080
			      case <> of
				<>
				    when call 'erlang':'is_function'
					  (F,
					   1) ->
				    let <_14> =
					catch
					    %% Line 1082
					    apply F
						('init')
				    in  let <_45,_46,_47> =
					    case _14 of
					      %% Line 1083
					      <'ok'> when 'true' ->
						  %% Line 1084
						  <'true',F,'ok'>
					      %% Line 1085
					      <{'ok',F1}>
						  when call 'erlang':'is_function'
							(F1) ->
						  %% Line 1086
						  case <> of
						    %% Line 1087
						    <>
							when call 'erlang':'is_function'
							      (F1,
							       1) ->
							%% Line 1088
							<'true',F1,'ok'>
						    %% Line 1089
						    <> when 'true' ->
							<'false','undefined',{'error','badfun'}>
						  end
					      %% Line 1093
					      <_@r0 = {'error',Reason}> when 'true' ->
						  %% Line 1094
						  <'false','undefined',_@r0>
					      %% Line 1095
					      <{'EXIT',Reason}> when 'true' ->
						  %% Line 1096
						  <'false','undefined',{'error',Reason}>
					      ( <_15> when 'true' ->
						    %% Line 1082
						    primop 'match_fail'
							({'case_clause',_15})
						-| ['compiler_generated'] )
					    end
					in  do  %% Line 1098
						call 'gen_server':'reply'
						    (From, ( _47
							     -| ['compiler_generated'] ))
						do  %% Line 1099
						    call 'erlang':'garbage_collect'
							()
						    let <_21> =
							case ( _45
							       -| ['compiler_generated'] ) of
							  %% Line 1101
							  <'true'> when 'true' ->
							      %% Line 1102
							      case S of
								<{'state',_rec16}> when 'true' ->
								    {'state',( _46
									       -| ['compiler_generated'] )}
								( <_40> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','state'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							  %% Line 1103
							  <'false'> when 'true' ->
							      %% Line 1104
							      S
							  ( <_20> when 'true' ->
								%% Line 1100
								primop 'match_fail'
								    ({'case_clause',_20})
							    -| ['compiler_generated'] )
							end
						    in  %% Line 1106
							{'noreply',_21}
				%% Line 1107
				<> when 'true' ->
				    %% Line 1108
				    {'reply',{'error','badfun'},S}
			      end
			  %% Line 1110
			  <OtherF>
			      when call 'erlang':'is_function'
				    (_rec14) ->
			      %% Line 1111
			      {'reply',{'error','exists'},S}
			  ( <_23> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_23})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_39> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1113
	  <'clear_crypto_key_fun',_X_From,S> when 'true' ->
	      %% Line 1114
	      ( case S of
		  ( <( {'state',_rec17}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec17 of
			  %% Line 1115
			  <'undefined'> when 'true' ->
			      %% Line 1116
			      {'stop','normal','undefined',S}
			  %% Line 1117
			  <F> when 'true' ->
			      let <_26> =
				  catch
				      %% Line 1118
				      apply F
					  ('clear')
			      in  %% Line 1119
				  {'stop','normal',{'ok',_26},S}
			end
		    -| ['compiler_generated'] )
		  ( <_41> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_31,_30,_29> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_31,_30,_29})
		  -| [{'function_name',{'handle_call',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_cast'/2 =
    %% Line 1124
    fun (_0,_1) ->
	%% Line 1125
	{'noreply',_1}
'handle_info'/2 =
    %% Line 1129
    fun (_0,_1) ->
	%% Line 1130
	{'noreply',_1}
'code_change'/3 =
    %% Line 1134
    fun (_0,_1,_2) ->
	%% Line 1135
	{'ok',_1}
'terminate'/2 =
    %% Line 1139
    fun (_0,_1) ->
	%% Line 1140
	'ok'
'crypto_key_fun_from_file'/0 =
    %% Line 1142
    fun () ->
	%% Line 1143
	case call 'init':'get_argument'
		 ('home') of
	  %% Line 1144
	  <{'ok',[_@r0 = [Home|[]]|[]]}> when 'true' ->
	      %% Line 1145
	      apply 'crypto_key_fun_from_file_1'/1
		  ([[46]|_@r0])
	  %% Line 1146
	  <_1> when 'true' ->
	      %% Line 1147
	      apply 'crypto_key_fun_from_file_1'/1
		  ([[46]])
	end
'crypto_key_fun_from_file_1'/1 =
    %% Line 1150
    fun (_0) ->
	%% Line 1151
	case apply 'f_p_s'/2
		 (_0, [46|[101|[114|[108|[97|[110|[103|[46|[99|[114|[121|[112|[116]]]]]]]]]]]]]) of
	  %% Line 1152
	  <{'ok',KeyInfo,_3}> when 'true' ->
	      %% Line 1153
	      apply 'try_load_crypto_fun'/1
		  (KeyInfo)
	  %% Line 1154
	  <_4> when 'true' ->
	      %% Line 1155
	      'error'
	end
'f_p_s'/2 =
    %% Line 1158
    fun (_0,_1) ->
	%% Line 1159
	case call 'file':'path_script'
		 (_0, _1) of
	  %% Line 1160
	  <{'error','enoent'}> when 'true' ->
	      %% Line 1161
	      {'error','enoent'}
	  %% Line 1162
	  <{'error',E = {Line,_X_Mod,_X_Term}}> when 'true' ->
	      let <_2> =
		  call %% Line 1164
		       'file':%% Line 1164
			      'format_error'
		      (%% Line 1164
		       E)
	      in  do  %% Line 1163
		      apply 'error'/2
			  ([102|[105|[108|[101|[58|[112|[97|[116|[104|[95|[115|[99|[114|[105|[112|[116|[40|[126|[116|[112|[44|[126|[116|[112|[41|[58|[32|[101|[114|[114|[111|[114|[32|[111|[110|[32|[108|[105|[110|[101|[32|[126|[112|[58|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1164
																																							  [_0|[_1|[Line|[_2|[]]]]])
		      %% Line 1165
		      'ok'
	  %% Line 1166
	  <{'error',E}>
	      when call 'erlang':'is_atom'
		    (E) ->
	      let <_3> =
		  call %% Line 1168
		       'file':%% Line 1168
			      'format_error'
		      (%% Line 1168
		       E)
	      in  do  %% Line 1167
		      apply 'error'/2
			  ([102|[105|[108|[101|[58|[112|[97|[116|[104|[95|[115|[99|[114|[105|[112|[116|[40|[126|[116|[112|[44|[126|[116|[112|[41|[58|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1168
																										   [_0|[_1|[_3|[]]]])
		      %% Line 1169
		      'ok'
	  %% Line 1170
	  <Other> when 'true' ->
	      %% Line 1171
	      Other
	end
'try_load_crypto_fun'/1 =
    %% Line 1174
    fun (_0) ->
	case _0 of
	  <KeyInfo>
	      when call 'erlang':'is_list'
		    (_0) ->
	      let <T> =
		  call %% Line 1175
		       'ets':%% Line 1175
			     'new'
		      (%% Line 1175
		       'keys', %% Line 1175
			       ['private'|['set']])
	      in  let <_4> =
		      fun (_2) ->
			  %% Line 1177
			  case _2 of
			    <{'debug_info',Mode,M,Key}>
				when call 'erlang':'is_atom'
				      (M) ->
				%% Line 1178
				call 'ets':'insert'
				    (T, {{'debug_info',Mode,M,[]},Key})
			    %% Line 1179
			    <{'debug_info',Mode,[],Key}> when 'true' ->
				%% Line 1180
				call 'ets':'insert'
				    (T, {{'debug_info',Mode,[],[]},Key})
			    %% Line 1181
			    <Other> when 'true' ->
				%% Line 1182
				apply 'error'/2
				    ([117|[110|[107|[110|[111|[119|[110|[32|[107|[101|[121|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]], [Other|[]])
			  end
		  in  do  %% Line 1176
			  call 'lists':'foreach'
			      (_4, %% Line 1183
				   KeyInfo)
			  %% Line 1184
			  ( fun (_5) ->
				case _5 of
				  <_@r0 = {'debug_info',Mode,M,F}> when 'true' ->
				      %% Line 1185
				      apply 'alt_lookup_key'/2
					  (%% Line 1186
					   [_@r0|%% Line 1187
						 [{'debug_info',Mode,M,[]}|%% Line 1188
									   [{'debug_info',Mode,[],[]}|[]]]], %% Line 1188
													     T)
				  %% Line 1189
				  <'clear'> when 'true' ->
				      %% Line 1190
				      call 'ets':'delete'
					  (T)
				  %% Line 1191
				  <_8> when 'true' ->
				      %% Line 1192
				      'error'
				end
			    -| [{'id',{0,0,'-try_load_crypto_fun/1-fun-1-'}}] )
	  %% Line 1194
	  <KeyInfo> when 'true' ->
	      %% Line 1195
	      apply 'error'/2
		  ([117|[110|[114|[101|[99|[111|[103|[110|[105|[122|[101|[100|[32|[99|[114|[121|[112|[116|[111|[32|[107|[101|[121|[32|[105|[110|[102|[111|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [KeyInfo|[]])
	end
'alt_lookup_key'/2 =
    %% Line 1197
    fun (_0,_1) ->
	case <_0,_1> of
	  <[H|T],Tab> when 'true' ->
	      %% Line 1198
	      case call 'ets':'lookup'
		       (Tab, H) of
		%% Line 1199
		<[]> when 'true' ->
		    %% Line 1200
		    apply 'alt_lookup_key'/2
			(T, Tab)
		%% Line 1201
		<[{_5,Val}|[]]> when 'true' ->
		    %% Line 1202
		    Val
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1204
	  <[],_6> when 'true' ->
	      %% Line 1205
	      'error'
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'alt_lookup_key',2}}] )
	    -| ['compiler_generated'] )
	end
'error'/2 =
    %% Line 1207
    fun (_0,_1) ->
	do  %% Line 1208
	    call 'error_logger':'error_msg'
		(_0, _1)
	    %% Line 1209
	    'error'
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('beam_lib')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('beam_lib', _0)
end