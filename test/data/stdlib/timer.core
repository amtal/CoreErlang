module 'timer' ['apply_after'/4,
		'apply_interval'/4,
		'cancel'/1,
		'code_change'/3,
		'exit_after'/2,
		'exit_after'/3,
		'get_status'/0,
		'handle_call'/3,
		'handle_cast'/2,
		'handle_info'/2,
		'hms'/3,
		'hours'/1,
		'init'/1,
		'kill_after'/1,
		'kill_after'/2,
		'minutes'/1,
		'module_info'/0,
		'module_info'/1,
		'now_diff'/2,
		'seconds'/1,
		'send_after'/2,
		'send_after'/3,
		'send_interval'/2,
		'send_interval'/3,
		'sleep'/1,
		'start'/0,
		'start_link'/0,
		'tc'/1,
		'tc'/2,
		'tc'/3,
		'terminate'/2]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[116|[105|[109|[101|[114|[46|[101|[114|[108]]]]]]]]]]]]],1}],
		%% Line 38
		'export_type' =
		    %% Line 38
		    [{'tref',0}],
		%% Line 48
		'opaque' =
		    %% Line 48
		    [{'tref',{'type',48,'tuple',[{'type',48,'integer',[]}|[{'type',48,'reference',[]}]]},[]}],
		%% Line 49
		'type' =
		    %% Line 49
		    [{'time',{'type',49,'non_neg_integer',[]},[]}],
		%% Line 54
		'spec' =
		    %% Line 54
		    [{{'apply_after',4},[{'type',54,'bounded_fun',[{'type',54,'fun',[{'type',54,'product',[{'var',54,'Time'}|[{'var',54,'Module'}|[{'var',54,'Function'}|[{'var',54,'Arguments'}]]]]}|[{'type',55,'union',[{'type',55,'tuple',[{'atom',55,'ok'}|[{'var',55,'TRef'}]]}|[{'type',55,'tuple',[{'atom',55,'error'}|[{'var',55,'Reason'}]]}]]}]]}|[[{'type',56,'constraint',[{'atom',56,'is_subtype'}|[[{'var',56,'Time'}|[{'user_type',56,'time',[]}]]]]}|[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'Module'}|[{'type',57,'module',[]}]]]]}|[{'type',58,'constraint',[{'atom',58,'is_subtype'}|[[{'var',58,'Function'}|[{'type',58,'atom',[]}]]]]}|[{'type',59,'constraint',[{'atom',59,'is_subtype'}|[[{'var',59,'Arguments'}|[{'type',59,'list',[{'type',59,'term',[]}]}]]]]}|[{'type',60,'constraint',[{'atom',60,'is_subtype'}|[[{'var',60,'TRef'}|[{'user_type',60,'tref',[]}]]]]}|[{'type',61,'constraint',[{'atom',61,'is_subtype'}|[[{'var',61,'Reason'}|[{'type',61,'term',[]}]]]]}]]]]]]]]}]}],
		%% Line 66
		'spec' =
		    %% Line 66
		    [{{'send_after',3},[{'type',66,'bounded_fun',[{'type',66,'fun',[{'type',66,'product',[{'var',66,'Time'}|[{'var',66,'Pid'}|[{'var',66,'Message'}]]]}|[{'type',66,'union',[{'type',66,'tuple',[{'atom',66,'ok'}|[{'var',66,'TRef'}]]}|[{'type',66,'tuple',[{'atom',66,'error'}|[{'var',66,'Reason'}]]}]]}]]}|[[{'type',67,'constraint',[{'atom',67,'is_subtype'}|[[{'var',67,'Time'}|[{'user_type',67,'time',[]}]]]]}|[{'type',68,'constraint',[{'atom',68,'is_subtype'}|[[{'var',68,'Pid'}|[{'type',68,'union',[{'type',68,'pid',[]}|[{'ann_type',68,[{'var',68,'RegName'}|[{'type',68,'atom',[]}]]}]]}]]]]}|[{'type',69,'constraint',[{'atom',69,'is_subtype'}|[[{'var',69,'Message'}|[{'type',69,'term',[]}]]]]}|[{'type',70,'constraint',[{'atom',70,'is_subtype'}|[[{'var',70,'TRef'}|[{'user_type',70,'tref',[]}]]]]}|[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'Reason'}|[{'type',71,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 75
		'spec' =
		    %% Line 75
		    [{{'send_after',2},[{'type',75,'bounded_fun',[{'type',75,'fun',[{'type',75,'product',[{'var',75,'Time'}|[{'var',75,'Message'}]]}|[{'type',75,'union',[{'type',75,'tuple',[{'atom',75,'ok'}|[{'var',75,'TRef'}]]}|[{'type',75,'tuple',[{'atom',75,'error'}|[{'var',75,'Reason'}]]}]]}]]}|[[{'type',76,'constraint',[{'atom',76,'is_subtype'}|[[{'var',76,'Time'}|[{'user_type',76,'time',[]}]]]]}|[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'Message'}|[{'type',77,'term',[]}]]]]}|[{'type',78,'constraint',[{'atom',78,'is_subtype'}|[[{'var',78,'TRef'}|[{'user_type',78,'tref',[]}]]]]}|[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'Reason'}|[{'type',79,'term',[]}]]]]}]]]]]]}]}],
		%% Line 83
		'spec' =
		    %% Line 83
		    [{{'exit_after',3},[{'type',83,'bounded_fun',[{'type',83,'fun',[{'type',83,'product',[{'var',83,'Time'}|[{'var',83,'Pid'}|[{'var',83,'Reason1'}]]]}|[{'type',83,'union',[{'type',83,'tuple',[{'atom',83,'ok'}|[{'var',83,'TRef'}]]}|[{'type',83,'tuple',[{'atom',83,'error'}|[{'var',83,'Reason2'}]]}]]}]]}|[[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'Time'}|[{'user_type',84,'time',[]}]]]]}|[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'Pid'}|[{'type',85,'union',[{'type',85,'pid',[]}|[{'ann_type',85,[{'var',85,'RegName'}|[{'type',85,'atom',[]}]]}]]}]]]]}|[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'TRef'}|[{'user_type',86,'tref',[]}]]]]}|[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'Reason1'}|[{'type',87,'term',[]}]]]]}|[{'type',88,'constraint',[{'atom',88,'is_subtype'}|[[{'var',88,'Reason2'}|[{'type',88,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 92
		'spec' =
		    %% Line 92
		    [{{'exit_after',2},[{'type',92,'bounded_fun',[{'type',92,'fun',[{'type',92,'product',[{'var',92,'Time'}|[{'var',92,'Reason1'}]]}|[{'type',92,'union',[{'type',92,'tuple',[{'atom',92,'ok'}|[{'var',92,'TRef'}]]}|[{'type',92,'tuple',[{'atom',92,'error'}|[{'var',92,'Reason2'}]]}]]}]]}|[[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'Time'}|[{'user_type',93,'time',[]}]]]]}|[{'type',94,'constraint',[{'atom',94,'is_subtype'}|[[{'var',94,'TRef'}|[{'user_type',94,'tref',[]}]]]]}|[{'type',95,'constraint',[{'atom',95,'is_subtype'}|[[{'var',95,'Reason1'}|[{'type',95,'term',[]}]]]]}|[{'type',96,'constraint',[{'atom',96,'is_subtype'}|[[{'var',96,'Reason2'}|[{'type',96,'term',[]}]]]]}]]]]]]}]}],
		%% Line 100
		'spec' =
		    %% Line 100
		    [{{'kill_after',2},[{'type',100,'bounded_fun',[{'type',100,'fun',[{'type',100,'product',[{'var',100,'Time'}|[{'var',100,'Pid'}]]}|[{'type',100,'union',[{'type',100,'tuple',[{'atom',100,'ok'}|[{'var',100,'TRef'}]]}|[{'type',100,'tuple',[{'atom',100,'error'}|[{'var',100,'Reason2'}]]}]]}]]}|[[{'type',101,'constraint',[{'atom',101,'is_subtype'}|[[{'var',101,'Time'}|[{'user_type',101,'time',[]}]]]]}|[{'type',102,'constraint',[{'atom',102,'is_subtype'}|[[{'var',102,'Pid'}|[{'type',102,'union',[{'type',102,'pid',[]}|[{'ann_type',102,[{'var',102,'RegName'}|[{'type',102,'atom',[]}]]}]]}]]]]}|[{'type',103,'constraint',[{'atom',103,'is_subtype'}|[[{'var',103,'TRef'}|[{'user_type',103,'tref',[]}]]]]}|[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'Reason2'}|[{'type',104,'term',[]}]]]]}]]]]]]}]}],
		%% Line 108
		'spec' =
		    %% Line 108
		    [{{'kill_after',1},[{'type',108,'bounded_fun',[{'type',108,'fun',[{'type',108,'product',[{'var',108,'Time'}]}|[{'type',108,'union',[{'type',108,'tuple',[{'atom',108,'ok'}|[{'var',108,'TRef'}]]}|[{'type',108,'tuple',[{'atom',108,'error'}|[{'var',108,'Reason2'}]]}]]}]]}|[[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'Time'}|[{'user_type',109,'time',[]}]]]]}|[{'type',110,'constraint',[{'atom',110,'is_subtype'}|[[{'var',110,'TRef'}|[{'user_type',110,'tref',[]}]]]]}|[{'type',111,'constraint',[{'atom',111,'is_subtype'}|[[{'var',111,'Reason2'}|[{'type',111,'term',[]}]]]]}]]]]]}]}],
		%% Line 115
		'spec' =
		    %% Line 115
		    [{{'apply_interval',4},[{'type',115,'bounded_fun',[{'type',115,'fun',[{'type',115,'product',[{'var',115,'Time'}|[{'var',115,'Module'}|[{'var',115,'Function'}|[{'var',115,'Arguments'}]]]]}|[{'type',116,'union',[{'type',116,'tuple',[{'atom',116,'ok'}|[{'var',116,'TRef'}]]}|[{'type',116,'tuple',[{'atom',116,'error'}|[{'var',116,'Reason'}]]}]]}]]}|[[{'type',117,'constraint',[{'atom',117,'is_subtype'}|[[{'var',117,'Time'}|[{'user_type',117,'time',[]}]]]]}|[{'type',118,'constraint',[{'atom',118,'is_subtype'}|[[{'var',118,'Module'}|[{'type',118,'module',[]}]]]]}|[{'type',119,'constraint',[{'atom',119,'is_subtype'}|[[{'var',119,'Function'}|[{'type',119,'atom',[]}]]]]}|[{'type',120,'constraint',[{'atom',120,'is_subtype'}|[[{'var',120,'Arguments'}|[{'type',120,'list',[{'type',120,'term',[]}]}]]]]}|[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'TRef'}|[{'user_type',121,'tref',[]}]]]]}|[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'Reason'}|[{'type',122,'term',[]}]]]]}]]]]]]]]}]}],
		%% Line 126
		'spec' =
		    %% Line 126
		    [{{'send_interval',3},[{'type',126,'bounded_fun',[{'type',126,'fun',[{'type',126,'product',[{'var',126,'Time'}|[{'var',126,'Pid'}|[{'var',126,'Message'}]]]}|[{'type',127,'union',[{'type',127,'tuple',[{'atom',127,'ok'}|[{'var',127,'TRef'}]]}|[{'type',127,'tuple',[{'atom',127,'error'}|[{'var',127,'Reason'}]]}]]}]]}|[[{'type',128,'constraint',[{'atom',128,'is_subtype'}|[[{'var',128,'Time'}|[{'user_type',128,'time',[]}]]]]}|[{'type',129,'constraint',[{'atom',129,'is_subtype'}|[[{'var',129,'Pid'}|[{'type',129,'union',[{'type',129,'pid',[]}|[{'ann_type',129,[{'var',129,'RegName'}|[{'type',129,'atom',[]}]]}]]}]]]]}|[{'type',130,'constraint',[{'atom',130,'is_subtype'}|[[{'var',130,'Message'}|[{'type',130,'term',[]}]]]]}|[{'type',131,'constraint',[{'atom',131,'is_subtype'}|[[{'var',131,'TRef'}|[{'user_type',131,'tref',[]}]]]]}|[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'Reason'}|[{'type',132,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 136
		'spec' =
		    %% Line 136
		    [{{'send_interval',2},[{'type',136,'bounded_fun',[{'type',136,'fun',[{'type',136,'product',[{'var',136,'Time'}|[{'var',136,'Message'}]]}|[{'type',136,'union',[{'type',136,'tuple',[{'atom',136,'ok'}|[{'var',136,'TRef'}]]}|[{'type',136,'tuple',[{'atom',136,'error'}|[{'var',136,'Reason'}]]}]]}]]}|[[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'Time'}|[{'user_type',137,'time',[]}]]]]}|[{'type',138,'constraint',[{'atom',138,'is_subtype'}|[[{'var',138,'Message'}|[{'type',138,'term',[]}]]]]}|[{'type',139,'constraint',[{'atom',139,'is_subtype'}|[[{'var',139,'TRef'}|[{'user_type',139,'tref',[]}]]]]}|[{'type',140,'constraint',[{'atom',140,'is_subtype'}|[[{'var',140,'Reason'}|[{'type',140,'term',[]}]]]]}]]]]]]}]}],
		%% Line 144
		'spec' =
		    %% Line 144
		    [{{'cancel',1},[{'type',144,'bounded_fun',[{'type',144,'fun',[{'type',144,'product',[{'var',144,'TRef'}]}|[{'type',144,'union',[{'type',144,'tuple',[{'atom',144,'ok'}|[{'atom',144,'cancel'}]]}|[{'type',144,'tuple',[{'atom',144,'error'}|[{'var',144,'Reason'}]]}]]}]]}|[[{'type',145,'constraint',[{'atom',145,'is_subtype'}|[[{'var',145,'TRef'}|[{'user_type',145,'tref',[]}]]]]}|[{'type',146,'constraint',[{'atom',146,'is_subtype'}|[[{'var',146,'Reason'}|[{'type',146,'term',[]}]]]]}]]]]}]}],
		%% Line 150
		'spec' =
		    %% Line 150
		    [{{'sleep',1},[{'type',150,'bounded_fun',[{'type',150,'fun',[{'type',150,'product',[{'var',150,'Time'}]}|[{'atom',150,'ok'}]]}|[[{'type',151,'constraint',[{'atom',151,'is_subtype'}|[[{'var',151,'Time'}|[{'type',151,'timeout',[]}]]]]}]]]}]}],
		%% Line 160
		'spec' =
		    %% Line 160
		    [{{'tc',1},[{'type',160,'bounded_fun',[{'type',160,'fun',[{'type',160,'product',[{'var',160,'Fun'}]}|[{'type',160,'tuple',[{'var',160,'Time'}|[{'var',160,'Value'}]]}]]}|[[{'type',161,'constraint',[{'atom',161,'is_subtype'}|[[{'var',161,'Fun'}|[{'type',161,'function',[]}]]]]}|[{'type',162,'constraint',[{'atom',162,'is_subtype'}|[[{'var',162,'Time'}|[{'type',162,'integer',[]}]]]]}|[{'type',163,'constraint',[{'atom',163,'is_subtype'}|[[{'var',163,'Value'}|[{'type',163,'term',[]}]]]]}]]]]]}]}],
		%% Line 174
		'spec' =
		    %% Line 174
		    [{{'tc',2},[{'type',174,'bounded_fun',[{'type',174,'fun',[{'type',174,'product',[{'var',174,'Fun'}|[{'var',174,'Arguments'}]]}|[{'type',174,'tuple',[{'var',174,'Time'}|[{'var',174,'Value'}]]}]]}|[[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'Fun'}|[{'type',175,'function',[]}]]]]}|[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'Arguments'}|[{'type',176,'list',[{'type',176,'term',[]}]}]]]]}|[{'type',177,'constraint',[{'atom',177,'is_subtype'}|[[{'var',177,'Time'}|[{'type',177,'integer',[]}]]]]}|[{'type',178,'constraint',[{'atom',178,'is_subtype'}|[[{'var',178,'Value'}|[{'type',178,'term',[]}]]]]}]]]]]]}]}],
		%% Line 189
		'spec' =
		    %% Line 189
		    [{{'tc',3},[{'type',189,'bounded_fun',[{'type',189,'fun',[{'type',189,'product',[{'var',189,'Module'}|[{'var',189,'Function'}|[{'var',189,'Arguments'}]]]}|[{'type',189,'tuple',[{'var',189,'Time'}|[{'var',189,'Value'}]]}]]}|[[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'Module'}|[{'type',190,'module',[]}]]]]}|[{'type',191,'constraint',[{'atom',191,'is_subtype'}|[[{'var',191,'Function'}|[{'type',191,'atom',[]}]]]]}|[{'type',192,'constraint',[{'atom',192,'is_subtype'}|[[{'var',192,'Arguments'}|[{'type',192,'list',[{'type',192,'term',[]}]}]]]]}|[{'type',193,'constraint',[{'atom',193,'is_subtype'}|[[{'var',193,'Time'}|[{'type',193,'integer',[]}]]]]}|[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'Value'}|[{'type',194,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 206
		'spec' =
		    %% Line 206
		    [{{'now_diff',2},[{'type',206,'bounded_fun',[{'type',206,'fun',[{'type',206,'product',[{'var',206,'T2'}|[{'var',206,'T1'}]]}|[{'var',206,'Tdiff'}]]}|[[{'type',207,'constraint',[{'atom',207,'is_subtype'}|[[{'var',207,'T1'}|[{'remote_type',207,[{'atom',207,'erlang'}|[{'atom',207,'timestamp'}|[[]]]]}]]]]}|[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'T2'}|[{'remote_type',208,[{'atom',208,'erlang'}|[{'atom',208,'timestamp'}|[[]]]]}]]]]}|[{'type',209,'constraint',[{'atom',209,'is_subtype'}|[[{'var',209,'Tdiff'}|[{'type',209,'integer',[]}]]]]}]]]]]}]}],
		%% Line 216
		'spec' =
		    %% Line 216
		    [{{'seconds',1},[{'type',216,'bounded_fun',[{'type',216,'fun',[{'type',216,'product',[{'var',216,'Seconds'}]}|[{'var',216,'MilliSeconds'}]]}|[[{'type',217,'constraint',[{'atom',217,'is_subtype'}|[[{'var',217,'Seconds'}|[{'type',217,'non_neg_integer',[]}]]]]}|[{'type',218,'constraint',[{'atom',218,'is_subtype'}|[[{'var',218,'MilliSeconds'}|[{'type',218,'non_neg_integer',[]}]]]]}]]]]}]}],
		%% Line 221
		'spec' =
		    %% Line 221
		    [{{'minutes',1},[{'type',221,'bounded_fun',[{'type',221,'fun',[{'type',221,'product',[{'var',221,'Minutes'}]}|[{'var',221,'MilliSeconds'}]]}|[[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'Minutes'}|[{'type',222,'non_neg_integer',[]}]]]]}|[{'type',223,'constraint',[{'atom',223,'is_subtype'}|[[{'var',223,'MilliSeconds'}|[{'type',223,'non_neg_integer',[]}]]]]}]]]]}]}],
		%% Line 226
		'spec' =
		    %% Line 226
		    [{{'hours',1},[{'type',226,'bounded_fun',[{'type',226,'fun',[{'type',226,'product',[{'var',226,'Hours'}]}|[{'var',226,'MilliSeconds'}]]}|[[{'type',227,'constraint',[{'atom',227,'is_subtype'}|[[{'var',227,'Hours'}|[{'type',227,'non_neg_integer',[]}]]]]}|[{'type',228,'constraint',[{'atom',228,'is_subtype'}|[[{'var',228,'MilliSeconds'}|[{'type',228,'non_neg_integer',[]}]]]]}]]]]}]}],
		%% Line 231
		'spec' =
		    %% Line 231
		    [{{'hms',3},[{'type',231,'bounded_fun',[{'type',231,'fun',[{'type',231,'product',[{'var',231,'Hours'}|[{'var',231,'Minutes'}|[{'var',231,'Seconds'}]]]}|[{'var',231,'MilliSeconds'}]]}|[[{'type',232,'constraint',[{'atom',232,'is_subtype'}|[[{'var',232,'Hours'}|[{'type',232,'non_neg_integer',[]}]]]]}|[{'type',233,'constraint',[{'atom',233,'is_subtype'}|[[{'var',233,'Minutes'}|[{'type',233,'non_neg_integer',[]}]]]]}|[{'type',234,'constraint',[{'atom',234,'is_subtype'}|[[{'var',234,'Seconds'}|[{'type',234,'non_neg_integer',[]}]]]]}|[{'type',235,'constraint',[{'atom',235,'is_subtype'}|[[{'var',235,'MilliSeconds'}|[{'type',235,'non_neg_integer',[]}]]]]}]]]]]]}]}],
		%% Line 244
		'spec' =
		    %% Line 244
		    [{{'start',0},[{'type',244,'fun',[{'type',244,'product',[]}|[{'atom',244,'ok'}]]}]}],
		%% Line 248
		'spec' =
		    %% Line 248
		    [{{'start_link',0},[{'type',248,'fun',[{'type',248,'product',[]}|[{'type',248,'union',[{'type',248,'tuple',[{'atom',248,'ok'}|[{'type',248,'pid',[]}]]}|[{'type',248,'tuple',[{'atom',248,'error'}|[{'type',248,'term',[]}]]}]]}]]}]}],
		%% Line 252
		'spec' =
		    %% Line 252
		    [{{'init',1},[{'type',252,'fun',[{'type',252,'product',[{'type',252,'nil',[]}]}|[{'type',252,'tuple',[{'atom',252,'ok'}|[{'type',252,'nil',[]}|[{'atom',252,'infinity'}]]]}]]}]}],
		%% Line 259
		'spec' =
		    %% Line 259
		    [{{'ensure_started',0},[{'type',259,'fun',[{'type',259,'product',[]}|[{'atom',259,'ok'}]]}]}],
		%% Line 283
		'type' =
		    %% Line 283
		    [{'timers',{'type',283,'term',[]},[]}],
		%% Line 285
		'spec' =
		    %% Line 285
		    [{{'handle_call',3},[{'type',285,'fun',[{'type',285,'product',[{'type',285,'term',[]}|[{'type',285,'term',[]}|[{'user_type',285,'timers',[]}]]]}|[{'type',286,'union',[{'type',286,'tuple',[{'atom',286,'reply'}|[{'type',286,'term',[]}|[{'user_type',286,'timers',[]}|[{'type',286,'timeout',[]}]]]]}|[{'type',286,'tuple',[{'atom',286,'noreply'}|[{'user_type',286,'timers',[]}|[{'type',286,'timeout',[]}]]]}]]}]]}]}],
		%% Line 326
		'spec' =
		    %% Line 326
		    [{{'handle_info',2},[{'type',326,'fun',[{'type',326,'product',[{'type',326,'term',[]}|[{'user_type',326,'timers',[]}]]}|[{'type',326,'tuple',[{'atom',326,'noreply'}|[{'user_type',326,'timers',[]}|[{'type',326,'timeout',[]}]]]}]]}]}],
		%% Line 336
		'spec' =
		    %% Line 336
		    [{{'handle_cast',2},[{'type',336,'fun',[{'type',336,'product',[{'type',336,'term',[]}|[{'user_type',336,'timers',[]}]]}|[{'type',336,'tuple',[{'atom',336,'noreply'}|[{'user_type',336,'timers',[]}|[{'type',336,'timeout',[]}]]]}]]}]}],
		%% Line 340
		'spec' =
		    %% Line 340
		    [{{'terminate',2},[{'type',340,'fun',[{'type',340,'product',[{'type',340,'term',[]}|[{'var',340,'_State'}]]}|[{'atom',340,'ok'}]]}]}],
		%% Line 344
		'spec' =
		    %% Line 344
		    [{{'code_change',3},[{'type',344,'fun',[{'type',344,'product',[{'type',344,'term',[]}|[{'var',344,'State'}|[{'type',344,'term',[]}]]]}|[{'type',344,'tuple',[{'atom',344,'ok'}|[{'var',344,'State'}]]}]]}]}],
		%% Line 400
		'spec' =
		    %% Line 400
		    [{{'pid_delete',1},[{'type',400,'fun',[{'type',400,'product',[{'type',400,'pid',[]}]}|[{'atom',400,'ok'}]]}]}],
		%% Line 415
		'spec' =
		    %% Line 415
		    [{{'next_timeout',0},[{'type',415,'fun',[{'type',415,'product',[]}|[{'type',415,'timeout',[]}]]}]}],
		%% Line 468
		'spec' =
		    %% Line 468
		    [{{'get_status',0},[{'type',468,'fun',[{'type',468,'product',[]}|[{'type',469,'tuple',[{'type',469,'tuple',[{'atom',469,'timer_tab'}|[{'type',469,'non_neg_integer',[]}]]}|[{'type',469,'tuple',[{'atom',469,'timer_interval_tab'}|[{'type',469,'non_neg_integer',[]}]]}]]}]]}]}]]
'apply_after'/4 =
    %% Line 63
    fun (_0,_1,_2,_3) ->
	%% Line 64
	apply 'req'/2
	    ('apply_after', {_0,{_1,_2,_3}})
'send_after'/3 =
    %% Line 72
    fun (_0,_1,_2) ->
	%% Line 73
	apply 'req'/2
	    ('apply_after', {_0,{'timer','send',[_1|[_2|[]]]}})
'send_after'/2 =
    %% Line 80
    fun (_0,_1) ->
	let <_2> =
	    call %% Line 81
		 'erlang':%% Line 81
			  'self'
		()
	in  %% Line 81
	    apply 'send_after'/3
		(_0, _2, _1)
'exit_after'/3 =
    %% Line 89
    fun (_0,_1,_2) ->
	%% Line 90
	apply 'req'/2
	    ('apply_after', {_0,{'erlang','exit',[_1|[_2|[]]]}})
'exit_after'/2 =
    %% Line 97
    fun (_0,_1) ->
	let <_2> =
	    call %% Line 98
		 'erlang':%% Line 98
			  'self'
		()
	in  %% Line 98
	    apply 'exit_after'/3
		(_0, _2, _1)
'kill_after'/2 =
    %% Line 105
    fun (_0,_1) ->
	%% Line 106
	apply 'exit_after'/3
	    (_0, _1, 'kill')
'kill_after'/1 =
    %% Line 112
    fun (_0) ->
	let <_1> =
	    call %% Line 113
		 'erlang':%% Line 113
			  'self'
		()
	in  %% Line 113
	    apply 'exit_after'/3
		(_0, _1, 'kill')
'apply_interval'/4 =
    %% Line 123
    fun (_0,_1,_2,_3) ->
	let <_4> =
	    call %% Line 124
		 'erlang':%% Line 124
			  'self'
		()
	in  %% Line 124
	    apply 'req'/2
		('apply_interval', {_0,_4,{_1,_2,_3}})
'send_interval'/3 =
    %% Line 133
    fun (_0,_1,_2) ->
	%% Line 134
	apply 'req'/2
	    ('apply_interval', {_0,_1,{'timer','send',[_1|[_2|[]]]}})
'send_interval'/2 =
    %% Line 141
    fun (_0,_1) ->
	let <_2> =
	    call %% Line 142
		 'erlang':%% Line 142
			  'self'
		()
	in  %% Line 142
	    apply 'send_interval'/3
		(_0, _2, _1)
'cancel'/1 =
    %% Line 147
    fun (_0) ->
	%% Line 148
	apply 'req'/2
	    ('cancel', _0)
'sleep'/1 =
    %% Line 152
    fun (_0) ->
	%% Line 153
	receive
	  
	after _0 ->
	  %% Line 154
	  'ok'
'tc'/1 =
    %% Line 164
    fun (_0) ->
	let <T1> =
	    call %% Line 165
		 'erlang':%% Line 165
			  'monotonic_time'
		()
	in  let <Val> =
		apply _0
		    ()
	    in  let <T2> =
		    call %% Line 167
			 'erlang':%% Line 167
				  'monotonic_time'
			()
		in  let <_4> =
			call %% Line 168
			     'erlang':%% Line 168
				      '-'
			    (%% Line 168
			     T2, %% Line 168
				 T1)
		    in  let <Time> =
			    call %% Line 168
				 'erlang':%% Line 168
					  'convert_time_unit'
				(_4, %% Line 168
				     'native', %% Line 168
					       'microsecond')
			in  %% Line 169
			    {Time,Val}
'tc'/2 =
    %% Line 179
    fun (_0,_1) ->
	let <T1> =
	    call %% Line 180
		 'erlang':%% Line 180
			  'monotonic_time'
		()
	in  let <Val> =
		call %% Line 181
		     'erlang':%% Line 181
			      'apply'
		    (_0, _1)
	    in  let <T2> =
		    call %% Line 182
			 'erlang':%% Line 182
				  'monotonic_time'
			()
		in  let <_5> =
			call %% Line 183
			     'erlang':%% Line 183
				      '-'
			    (%% Line 183
			     T2, %% Line 183
				 T1)
		    in  let <Time> =
			    call %% Line 183
				 'erlang':%% Line 183
					  'convert_time_unit'
				(_5, %% Line 183
				     'native', %% Line 183
					       'microsecond')
			in  %% Line 184
			    {Time,Val}
'tc'/3 =
    %% Line 195
    fun (_0,_1,_2) ->
	let <T1> =
	    call %% Line 196
		 'erlang':%% Line 196
			  'monotonic_time'
		()
	in  let <Val> =
		call %% Line 197
		     'erlang':%% Line 197
			      'apply'
		    (_0, _1, _2)
	    in  let <T2> =
		    call %% Line 198
			 'erlang':%% Line 198
				  'monotonic_time'
			()
		in  let <_6> =
			call %% Line 199
			     'erlang':%% Line 199
				      '-'
			    (%% Line 199
			     T2, %% Line 199
				 T1)
		    in  let <Time> =
			    call %% Line 199
				 'erlang':%% Line 199
					  'convert_time_unit'
				(_6, %% Line 199
				     'native', %% Line 199
					       'microsecond')
			in  %% Line 200
			    {Time,Val}
'now_diff'/2 =
    %% Line 210
    fun (_0,_1) ->
	case <_0,_1> of
	  <{A2,B2,C2},{A1,B1,C1}> when 'true' ->
	      let <_2> =
		  call %% Line 211
		       'erlang':%% Line 211
				'-'
		      (%% Line 211
		       A2, %% Line 211
			   A1)
	      in  let <_3> =
		      call %% Line 211
			   'erlang':%% Line 211
				    '*'
			  (_2, %% Line 211
			       1000000)
		  in  let <_4> =
			  call %% Line 211
			       'erlang':%% Line 211
					'+'
			      (_3, %% Line 211
				   B2)
		      in  let <_5> =
			      call %% Line 211
				   'erlang':%% Line 211
					    '-'
				  (_4, %% Line 211
				       B1)
			  in  let <_6> =
				  call %% Line 211
				       'erlang':%% Line 211
						'*'
				      (_5, %% Line 211
					   1000000)
			      in  let <_7> =
				      call %% Line 211
					   'erlang':%% Line 211
						    '+'
					  (_6, %% Line 211
					       C2)
				  in  %% Line 211
				      call 'erlang':'-'
					  (_7, C1)
	  ( <_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8})
		  -| [{'function_name',{'now_diff',2}}] )
	    -| ['compiler_generated'] )
	end
'seconds'/1 =
    %% Line 219
    fun (_0) ->
	%% Line 220
	call 'erlang':'*'
	    (1000, _0)
'minutes'/1 =
    %% Line 224
    fun (_0) ->
	%% Line 225
	call 'erlang':'*'
	    (60000, _0)
'hours'/1 =
    %% Line 229
    fun (_0) ->
	%% Line 230
	call 'erlang':'*'
	    (3600000, _0)
'hms'/3 =
    %% Line 236
    fun (_0,_1,_2) ->
	let <_5> =
	    apply %% Line 237
		  'hours'/1
		(_0)
	in  let <_4> =
		apply %% Line 237
		      'minutes'/1
		    (_1)
	    in  let <_6> =
		    call %% Line 237
			 'erlang':%% Line 237
				  '+'
			(_5, _4)
		in  let <_3> =
			apply %% Line 237
			      'seconds'/1
			    (_2)
		    in  %% Line 237
			call 'erlang':'+'
			    (_6, _3)
'start'/0 =
    %% Line 245
    fun () ->
	%% Line 246
	apply 'ensure_started'/0
	    ()
'start_link'/0 =
    %% Line 249
    fun () ->
	%% Line 250
	call 'gen_server':'start_link'
	    ({'local','timer_server'}, 'timer', [], [])
'init'/1 =
    %% Line 253
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      do  %% Line 254
		  call 'erlang':'process_flag'
		      ('trap_exit', 'true')
		  %% Line 255
		  case call 'ets':'new'
			   ('timer_tab', ['named_table'|['ordered_set'|['protected']]]) of
		    <'timer_tab'> when 'true' ->
			%% Line 256
			case call 'ets':'new'
				 ('timer_interval_tab', ['named_table'|['protected']]) of
			  <'timer_interval_tab'> when 'true' ->
			      %% Line 257
			      {'ok',[],'infinity'}
			  ( <_2> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_2})
			    -| ['compiler_generated'] )
			end
		    ( <_1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_1})
		      -| ['compiler_generated'] )
		  end
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'ensure_started'/0 =
    %% Line 260
    fun () ->
	%% Line 261
	case call 'erlang':'whereis'
		 ('timer_server') of
	  %% Line 262
	  <'undefined'> when 'true' ->
	      do  %% Line 265
		  ( call ( 'supervisor'
			   -| ['result_not_wanted'] ):( 'start_child'
							-| ['result_not_wanted'] )
			(( 'kernel_safe_sup'
			   -| ['result_not_wanted'] ), {'timer_server',{'timer','start_link',[]},'permanent',1000,'worker',['timer']})
		    -| ['result_not_wanted'] )
		  %% Line 266
		  'ok'
	  %% Line 267
	  <_3> when 'true' ->
	      'ok'
	end
'req'/2 =
    %% Line 272
    fun (_0,_1) ->
	let <SysTime> =
	    apply %% Line 273
		  'system_time'/0
		()
	in  do  %% Line 274
		apply 'ensure_started'/0
		    ()
		%% Line 275
		call 'gen_server':'call'
		    ('timer_server', {_0,_1,SysTime}, 'infinity')
'handle_call'/3 =
    %% Line 287
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{'apply_after',{Time,Op},Started},_X_From,_X_Ts>
	      when let <_3> =
		    call %% Line 288
			 'erlang':%% Line 288
				  'is_integer'
			(%% Line 288
			 Time)
		in  let <_4> =
			call %% Line 288
			     'erlang':%% Line 288
				      '>='
			    (%% Line 288
			     Time, %% Line 288
				   0)
		    in  %% Line 288
			call 'erlang':'and'
			    (_3, _4) ->
	      let <_6> =
		  call %% Line 289
		       'erlang':%% Line 289
				'*'
		      (%% Line 289
		       1000, %% Line 289
			     Time)
	      in  let <_7> =
		      call %% Line 289
			   'erlang':%% Line 289
				    '+'
			  (%% Line 289
			   Started, _6)
		  in  let <_5> =
			  call %% Line 289
			       'erlang':%% Line 289
					'make_ref'
			      ()
		      in  let <BRef> = {_7,_5}
			  in  let <Timer> = {%% Line 290
				   BRef,%% Line 290
					'timeout',%% Line 290
						  Op}
			      in  do  %% Line 291
				      call 'ets':'insert'
					  ('timer_tab', Timer)
				      let <_10> =
					  apply %% Line 292
						'system_time'/0
					      ()
				      in  let <Timeout> =
					      apply %% Line 292
						    'timer_timeout'/1
						  (_10)
					  in  %% Line 293
					      {'reply',{'ok',BRef},[],Timeout}
	  %% Line 294
	  <{'apply_interval',{Time,To,MFA},Started},_X_From,_X_Ts>
	      when let <_12> =
		    call %% Line 295
			 'erlang':%% Line 295
				  'is_integer'
			(%% Line 295
			 Time)
		in  let <_13> =
			call %% Line 295
			     'erlang':%% Line 295
				      '>='
			    (%% Line 295
			     Time, %% Line 295
				   0)
		    in  %% Line 295
			call 'erlang':'and'
			    (_12, _13) ->
	      %% Line 297
	      case apply 'get_pid'/1
		       (To) of
		%% Line 298
		<Pid>
		    when call 'erlang':'is_pid'
			  (Pid) ->
		    do  try
			    %% Line 299
			    call 'erlang':'link'
				(Pid)
			of <_catch_value> ->
			    _catch_value
			catch <Class,Reason,Stk> ->
			    'ok'
			let <SysTime> =
			    apply %% Line 300
				  'system_time'/0
				()
			in  let <Ref> =
				call %% Line 301
				     'erlang':%% Line 301
					      'make_ref'
				    ()
			    in  let <BRef1> = {%% Line 302
				     'interval',%% Line 302
						Ref}
				in  let <Interval> =
					call %% Line 303
					     'erlang':%% Line 303
						      '*'
					    (%% Line 303
					     Time, %% Line 303
						   1000)
				    in  let <_18> =
					    call %% Line 304
						 'erlang':%% Line 304
							  '+'
						(%% Line 304
						 Started, %% Line 304
							  Interval)
					in  let <BRef2> = {_18,%% Line 304
						     Ref}
					    in  let <Timer> = {%% Line 305
						     BRef2,%% Line 305
							   {'repeat',Interval,Pid},%% Line 305
										   MFA}
						in  do  %% Line 306
							call 'ets':'insert'
							    ('timer_interval_tab', {BRef1,BRef2,Pid})
							do  %% Line 307
							    call 'ets':'insert'
								('timer_tab', Timer)
							    let <Timeout> =
								apply %% Line 308
								      'timer_timeout'/1
								    (%% Line 308
								     SysTime)
							    in  %% Line 309
								{'reply',{'ok',BRef1},[],Timeout}
		%% Line 310
		<_32> when 'true' ->
		    let <_22> =
			apply %% Line 311
			      'next_timeout'/0
			    ()
		    in  %% Line 311
			{'reply',{'error','badarg'},[],_22}
	      end
	  %% Line 313
	  <{'cancel',BRef = {_X_Time,Ref},_33},_X_From,Ts>
	      when %% Line 314
		call 'erlang':'is_reference'
		    (Ref) ->
	      do  %% Line 315
		  apply 'delete_ref'/1
		      (BRef)
		  let <_24> =
		      apply %% Line 316
			    'next_timeout'/0
			  ()
		  in  %% Line 316
		      {'reply',{'ok','cancel'},Ts,_24}
	  %% Line 317
	  <{'cancel',_X_BRef,_34},_X_From,Ts> when 'true' ->
	      let <_25> =
		  apply %% Line 318
			'next_timeout'/0
		      ()
	      in  %% Line 318
		  {'reply',{'error','badarg'},Ts,_25}
	  %% Line 319
	  <{'apply_after',_35,_36},_X_From,Ts> when 'true' ->
	      let <_26> =
		  apply %% Line 320
			'next_timeout'/0
		      ()
	      in  %% Line 320
		  {'reply',{'error','badarg'},Ts,_26}
	  %% Line 321
	  <{'apply_interval',_37,_38},_X_From,Ts> when 'true' ->
	      let <_27> =
		  apply %% Line 322
			'next_timeout'/0
		      ()
	      in  %% Line 322
		  {'reply',{'error','badarg'},Ts,_27}
	  %% Line 323
	  <_X_Else,_X_From,Ts> when 'true' ->
	      let <_28> =
		  apply %% Line 324
			'next_timeout'/0
		      ()
	      in  %% Line 324
		  {'noreply',Ts,_28}
	end
'handle_info'/2 =
    %% Line 327
    fun (_0,_1) ->
	case <_0,_1> of
	  <'timeout',Ts> when 'true' ->
	      let <_2> =
		  apply %% Line 328
			'system_time'/0
		      ()
	      in  let <Timeout> =
		      apply %% Line 328
			    'timer_timeout'/1
			  (_2)
		  in  %% Line 329
		      {'noreply',Ts,Timeout}
	  %% Line 330
	  <{'EXIT',Pid,_X_Reason},Ts> when 'true' ->
	      do  %% Line 331
		  apply 'pid_delete'/1
		      (Pid)
		  let <_4> =
		      apply %% Line 332
			    'next_timeout'/0
			  ()
		  in  %% Line 332
		      {'noreply',Ts,_4}
	  %% Line 333
	  <_X_OtherMsg,Ts> when 'true' ->
	      let <_5> =
		  apply %% Line 334
			'next_timeout'/0
		      ()
	      in  %% Line 334
		  {'noreply',Ts,_5}
	end
'handle_cast'/2 =
    %% Line 337
    fun (_0,_1) ->
	let <_2> =
	    apply %% Line 338
		  'next_timeout'/0
		()
	in  %% Line 338
	    {'noreply',_1,_2}
'terminate'/2 =
    %% Line 341
    fun (_0,_1) ->
	%% Line 342
	'ok'
'code_change'/3 =
    %% Line 345
    fun (_0,_1,_2) ->
	%% Line 347
	{'ok',_1}
'timer_timeout'/1 =
    %% Line 356
    fun (_0) ->
	%% Line 357
	case call 'ets':'first'
		 ('timer_tab') of
	  %% Line 358
	  <'$end_of_table'> when 'true' ->
	      %% Line 359
	      'infinity'
	  %% Line 360
	  <{Time,_X_Ref}>
	      when call 'erlang':'>'
		    (Time,
		     _0) ->
	      let <_1> =
		  call %% Line 361
		       'erlang':%% Line 361
				'-'
		      (%% Line 361
		       Time, _0)
	      in  let <_2> =
		      call %% Line 361
			   'erlang':%% Line 361
				    '+'
			  (_1, %% Line 361
			       999)
		  in  let <Timeout> =
			  call %% Line 361
			       'erlang':%% Line 361
					'div'
			      (_2, %% Line 361
				   1000)
		      in  %% Line 363
			  call 'erlang':'min'
			      (Timeout, 8388608)
	  %% Line 364
	  <Key> when 'true' ->
	      %% Line 365
	      case call 'ets':'lookup'
		       ('timer_tab', Key) of
		%% Line 366
		<[{_8,'timeout',MFA}|[]]>
		    when call 'erlang':'=:='
			  (_8,
			   Key) ->
		    do  %% Line 367
			call 'ets':'delete'
			    ('timer_tab', Key)
			do  %% Line 368
			    apply 'do_apply'/1
				(MFA)
			    %% Line 369
			    apply 'timer_timeout'/1
				(_0)
		%% Line 370
		<[{{Time,Ref},Repeat = {'repeat',Interv,To},MFA}|[]]> when 'true' ->
		    do  %% Line 371
			call 'ets':'delete'
			    ('timer_tab', Key)
			let <NewTime> =
			    call %% Line 372
				 'erlang':%% Line 372
					  '+'
				(%% Line 372
				 Time, %% Line 372
				       Interv)
			in  do  %% Line 374
				call 'ets':'insert'
				    ('timer_interval_tab', {{'interval',Ref},{NewTime,Ref},To})
				do  %% Line 375
				    apply 'do_apply'/1
					(MFA)
				    do  %% Line 376
					call 'ets':'insert'
					    ('timer_tab', {{NewTime,Ref},Repeat,MFA})
					%% Line 377
					apply 'timer_timeout'/1
					    (_0)
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	end
'delete_ref'/1 =
    %% Line 385
    fun (_0) ->
	case _0 of
	  <BRef = {'interval',_3}> when 'true' ->
	      %% Line 386
	      case call 'ets':'lookup'
		       ('timer_interval_tab', BRef) of
		%% Line 387
		<[{_4,BRef2,_X_Pid}|[]]> when 'true' ->
		    do  %% Line 388
			call 'ets':'delete'
			    ('timer_interval_tab', BRef)
			%% Line 389
			call 'ets':'delete'
			    ('timer_tab', BRef2)
		%% Line 390
		<_5> when 'true' ->
		    %% Line 391
		    'ok'
	      end
	  %% Line 393
	  <BRef> when 'true' ->
	      %% Line 394
	      call 'ets':'delete'
		  ('timer_tab', BRef)
	end
'pid_delete'/1 =
    %% Line 401
    fun (_0) ->
	let <IntervalTimerList> =
	    call %% Line 403
		 'ets':%% Line 403
		       'select'
		(%% Line 403
		 'timer_interval_tab', %% Line 404
				       [{{'_','_','$1'},%% Line 405
							[{'==','$1',_0}|[]],%% Line 406
									    ['$_']}|%% Line 406
										    []])
	in  let <_4> =
		fun (_2) ->
		    %% Line 407
		    case _2 of
		      <{IntKey,TimerKey,_6}> when 'true' ->
			  do  %% Line 408
			      call 'ets':'delete'
				  ('timer_interval_tab', IntKey)
			      %% Line 409
			      call 'ets':'delete'
				  ('timer_tab', TimerKey)
		      ( <_3> when 'true' ->
			    ( primop 'match_fail'
				  ({'function_clause',_3})
			      -| [{'function_name',{'-pid_delete/1-fun-0-',1}}] )
			-| ['compiler_generated'] )
		    end
	    in  %% Line 407
		call 'lists':'foreach'
		    (_4, %% Line 410
			 IntervalTimerList)
'next_timeout'/0 =
    %% Line 416
    fun () ->
	%% Line 417
	case call 'ets':'first'
		 ('timer_tab') of
	  %% Line 418
	  <'$end_of_table'> when 'true' ->
	      %% Line 419
	      'infinity'
	  %% Line 420
	  <{Time,_6}> when 'true' ->
	      let <_0> =
		  apply %% Line 421
			'system_time'/0
		      ()
	      in  let <_1> =
		      call %% Line 421
			   'erlang':%% Line 421
				    '-'
			  (%% Line 421
			   Time, _0)
		  in  let <_2> =
			  call %% Line 421
			       'erlang':%% Line 421
					'+'
			      (_1, %% Line 421
				   999)
		      in  let <_3> =
			      call %% Line 421
				   'erlang':%% Line 421
					    'div'
				  (_2, %% Line 421
				       1000)
			  in  let <_4> =
				  apply %% Line 421
					'positive'/1
				      (_3)
			      in  %% Line 421
				  call 'erlang':'min'
				      (_4, 8388608)
	  ( <_5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_5})
	    -| ['compiler_generated'] )
	end
'do_apply'/1 =
    %% Line 425
    fun (_0) ->
	case _0 of
	  <{M,F,A}> when 'true' ->
	      %% Line 426
	      case <M,F,A> of
		%% Line 427
		<( 'timer'
		   -| ['compiler_generated'] ),( 'send'
						 -| ['compiler_generated'] ),_4>
		    when call 'erlang':'=:='
			  (_4,
			   A) ->
		    catch
			%% Line 429
			apply 'send'/1
			    (A)
		%% Line 430
		<( 'erlang'
		   -| ['compiler_generated'] ),( 'exit'
						 -| ['compiler_generated'] ),( [Name|( [Reason|( []
												 -| ['compiler_generated'] )]
										       -| ['compiler_generated'] )]
									       -| ['compiler_generated'] )> when 'true' ->
		    catch
			let <_1> =
			    apply %% Line 431
				  'get_pid'/1
				(%% Line 431
				 Name)
			in  %% Line 431
			    call 'erlang':'exit'
				(_1, Reason)
		%% Line 432
		<( _6
		   -| ['compiler_generated'] ),( _7
						 -| ['compiler_generated'] ),( _8
									       -| ['compiler_generated'] )> when 'true' ->
		    catch
			%% Line 434
			call 'erlang':'spawn'
			    (M, F, A)
	      end
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'do_apply',1}}] )
	    -| ['compiler_generated'] )
	end
'positive'/1 =
    %% Line 437
    fun (_0) ->
	%% Line 438
	call 'erlang':'max'
	    (_0, 0)
'system_time'/0 =
    %% Line 444
    fun () ->
	%% Line 445
	call 'erlang':'monotonic_time'
	    (1000000)
'send'/1 =
    %% Line 447
    fun (_0) ->
	case _0 of
	  <[Pid|[Msg|[]]]> when 'true' ->
	      %% Line 448
	      call 'erlang':'!'
		  (Pid, Msg)
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'send',1}}] )
	    -| ['compiler_generated'] )
	end
'get_pid'/1 =
    %% Line 450
    fun (_0) ->
	case _0 of
	  <Name>
	      when call 'erlang':'is_pid'
		    (_0) ->
	      %% Line 451
	      Name
	  %% Line 452
	  <'undefined'> when 'true' ->
	      %% Line 453
	      'undefined'
	  %% Line 454
	  <Name>
	      when call 'erlang':'is_atom'
		    (_0) ->
	      let <_1> =
		  call %% Line 455
		       'erlang':%% Line 455
				'whereis'
		      (%% Line 455
		       Name)
	      in  %% Line 455
		  apply 'get_pid'/1
		      (_1)
	  %% Line 456
	  <_3> when 'true' ->
	      %% Line 457
	      'undefined'
	end
'get_status'/0 =
    %% Line 471
    fun () ->
	let <Info1> =
	    call %% Line 472
		 'ets':%% Line 472
		       'info'
		(%% Line 472
		 'timer_tab')
	in  %% Line 473
	    case call 'lists':'keyfind'
		     ('size', 1, Info1) of
	      <{'size',TotalNumTimers}> when 'true' ->
		  let <Info2> =
		      call %% Line 474
			   'ets':%% Line 474
				 'info'
			  (%% Line 474
			   'timer_interval_tab')
		  in  %% Line 475
		      case call 'lists':'keyfind'
			       ('size', 1, Info2) of
			<{'size',NumIntervalTimers}> when 'true' ->
			    %% Line 476
			    {{'timer_tab',TotalNumTimers},{'timer_interval_tab',NumIntervalTimers}}
			( <_3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_3})
			  -| ['compiler_generated'] )
		      end
	      ( <_1> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_1})
		-| ['compiler_generated'] )
	    end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('timer')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('timer', _0)
end