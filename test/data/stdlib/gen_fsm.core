module 'gen_fsm' ['behaviour_info'/1,
		  'cancel_timer'/1,
		  'enter_loop'/4,
		  'enter_loop'/5,
		  'enter_loop'/6,
		  'format_log'/1,
		  'format_log'/2,
		  'format_status'/2,
		  'init_it'/6,
		  'module_info'/0,
		  'module_info'/1,
		  'reply'/2,
		  'send_all_state_event'/2,
		  'send_event'/2,
		  'send_event_after'/2,
		  'start'/3,
		  'start'/4,
		  'start_link'/3,
		  'start_link'/4,
		  'start_timer'/2,
		  'stop'/1,
		  'stop'/3,
		  'sync_send_all_state_event'/2,
		  'sync_send_all_state_event'/3,
		  'sync_send_event'/2,
		  'sync_send_event'/3,
		  'system_code_change'/4,
		  'system_continue'/3,
		  'system_get_state'/1,
		  'system_replace_state'/2,
		  'system_terminate'/4,
		  'wake_hib'/7]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[103|[101|[110|[95|[102|[115|[109|[46|[101|[114|[108]]]]]]]]]]]]]]],1}],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[47|[85|[115|[101|[114|[115|[47|[102|[101|[110|[103|[108|[101|[101|[47|[72|[97|[109|[108|[101|[114|[47|[111|[116|[112|[45|[79|[84|[80|[45|[50|[51|[46|[48|[45|[114|[99|[49|[47|[108|[105|[98|[47|[115|[116|[100|[108|[105|[98|[47|[46|[46|[47|[107|[101|[114|[110|[101|[108|[47|[105|[110|[99|[108|[117|[100|[101|[47|[108|[111|[103|[103|[101|[114|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 109
		'file' =
		    %% Line 109
		    [{[115|[114|[99|[47|[103|[101|[110|[95|[102|[115|[109|[46|[101|[114|[108]]]]]]]]]]]]]]],109}],
		%% Line 136
		'callback' =
		    %% Line 136
		    [{{'init',1},[{'type',136,'fun',[{'type',136,'product',[{'ann_type',136,[{'var',136,'Args'}|[{'type',136,'term',[]}]]}]}|[{'type',137,'union',[{'type',137,'tuple',[{'atom',137,'ok'}|[{'ann_type',137,[{'var',137,'StateName'}|[{'type',137,'atom',[]}]]}|[{'ann_type',137,[{'var',137,'StateData'}|[{'type',137,'term',[]}]]}]]]}|[{'type',138,'tuple',[{'atom',138,'ok'}|[{'ann_type',138,[{'var',138,'StateName'}|[{'type',138,'atom',[]}]]}|[{'ann_type',138,[{'var',138,'StateData'}|[{'type',138,'term',[]}]]}|[{'type',138,'union',[{'type',138,'timeout',[]}|[{'atom',138,'hibernate'}]]}]]]]}|[{'type',139,'tuple',[{'atom',139,'stop'}|[{'ann_type',139,[{'var',139,'Reason'}|[{'type',139,'term',[]}]]}]]}|[{'atom',139,'ignore'}]]]]}]]}]}],
		%% Line 140
		'callback' =
		    %% Line 140
		    [{{'handle_event',3},[{'type',140,'fun',[{'type',140,'product',[{'ann_type',140,[{'var',140,'Event'}|[{'type',140,'term',[]}]]}|[{'ann_type',140,[{'var',140,'StateName'}|[{'type',140,'atom',[]}]]}|[{'ann_type',141,[{'var',141,'StateData'}|[{'type',141,'term',[]}]]}]]]}|[{'type',142,'union',[{'type',142,'tuple',[{'atom',142,'next_state'}|[{'ann_type',142,[{'var',142,'NextStateName'}|[{'type',142,'atom',[]}]]}|[{'ann_type',142,[{'var',142,'NewStateData'}|[{'type',142,'term',[]}]]}]]]}|[{'type',143,'tuple',[{'atom',143,'next_state'}|[{'ann_type',143,[{'var',143,'NextStateName'}|[{'type',143,'atom',[]}]]}|[{'ann_type',143,[{'var',143,'NewStateData'}|[{'type',143,'term',[]}]]}|[{'type',144,'union',[{'type',144,'timeout',[]}|[{'atom',144,'hibernate'}]]}]]]]}|[{'type',145,'tuple',[{'atom',145,'stop'}|[{'ann_type',145,[{'var',145,'Reason'}|[{'type',145,'term',[]}]]}|[{'ann_type',145,[{'var',145,'NewStateData'}|[{'type',145,'term',[]}]]}]]]}]]]}]]}]}],
		%% Line 146
		'callback' =
		    %% Line 146
		    [{{'handle_sync_event',4},[{'type',146,'fun',[{'type',146,'product',[{'ann_type',146,[{'var',146,'Event'}|[{'type',146,'term',[]}]]}|[{'ann_type',146,[{'var',146,'From'}|[{'type',146,'tuple',[{'type',146,'pid',[]}|[{'ann_type',146,[{'var',146,'Tag'}|[{'type',146,'term',[]}]]}]]}]]}|[{'ann_type',147,[{'var',147,'StateName'}|[{'type',147,'atom',[]}]]}|[{'ann_type',147,[{'var',147,'StateData'}|[{'type',147,'term',[]}]]}]]]]}|[{'type',148,'union',[{'type',148,'tuple',[{'atom',148,'reply'}|[{'ann_type',148,[{'var',148,'Reply'}|[{'type',148,'term',[]}]]}|[{'ann_type',148,[{'var',148,'NextStateName'}|[{'type',148,'atom',[]}]]}|[{'ann_type',148,[{'var',148,'NewStateData'}|[{'type',148,'term',[]}]]}]]]]}|[{'type',149,'tuple',[{'atom',149,'reply'}|[{'ann_type',149,[{'var',149,'Reply'}|[{'type',149,'term',[]}]]}|[{'ann_type',149,[{'var',149,'NextStateName'}|[{'type',149,'atom',[]}]]}|[{'ann_type',149,[{'var',149,'NewStateData'}|[{'type',149,'term',[]}]]}|[{'type',150,'union',[{'type',150,'timeout',[]}|[{'atom',150,'hibernate'}]]}]]]]]}|[{'type',151,'tuple',[{'atom',151,'next_state'}|[{'ann_type',151,[{'var',151,'NextStateName'}|[{'type',151,'atom',[]}]]}|[{'ann_type',151,[{'var',151,'NewStateData'}|[{'type',151,'term',[]}]]}]]]}|[{'type',152,'tuple',[{'atom',152,'next_state'}|[{'ann_type',152,[{'var',152,'NextStateName'}|[{'type',152,'atom',[]}]]}|[{'ann_type',152,[{'var',152,'NewStateData'}|[{'type',152,'term',[]}]]}|[{'type',153,'union',[{'type',153,'timeout',[]}|[{'atom',153,'hibernate'}]]}]]]]}|[{'type',154,'tuple',[{'atom',154,'stop'}|[{'ann_type',154,[{'var',154,'Reason'}|[{'type',154,'term',[]}]]}|[{'ann_type',154,[{'var',154,'Reply'}|[{'type',154,'term',[]}]]}|[{'ann_type',154,[{'var',154,'NewStateData'}|[{'type',154,'term',[]}]]}]]]]}|[{'type',155,'tuple',[{'atom',155,'stop'}|[{'ann_type',155,[{'var',155,'Reason'}|[{'type',155,'term',[]}]]}|[{'ann_type',155,[{'var',155,'NewStateData'}|[{'type',155,'term',[]}]]}]]]}]]]]]]}]]}]}],
		%% Line 156
		'callback' =
		    %% Line 156
		    [{{'handle_info',3},[{'type',156,'fun',[{'type',156,'product',[{'ann_type',156,[{'var',156,'Info'}|[{'type',156,'term',[]}]]}|[{'ann_type',156,[{'var',156,'StateName'}|[{'type',156,'atom',[]}]]}|[{'ann_type',157,[{'var',157,'StateData'}|[{'type',157,'term',[]}]]}]]]}|[{'type',158,'union',[{'type',158,'tuple',[{'atom',158,'next_state'}|[{'ann_type',158,[{'var',158,'NextStateName'}|[{'type',158,'atom',[]}]]}|[{'ann_type',158,[{'var',158,'NewStateData'}|[{'type',158,'term',[]}]]}]]]}|[{'type',159,'tuple',[{'atom',159,'next_state'}|[{'ann_type',159,[{'var',159,'NextStateName'}|[{'type',159,'atom',[]}]]}|[{'ann_type',159,[{'var',159,'NewStateData'}|[{'type',159,'term',[]}]]}|[{'type',160,'union',[{'type',160,'timeout',[]}|[{'atom',160,'hibernate'}]]}]]]]}|[{'type',161,'tuple',[{'atom',161,'stop'}|[{'ann_type',161,[{'var',161,'Reason'}|[{'type',161,'union',[{'atom',161,'normal'}|[{'type',161,'term',[]}]]}]]}|[{'ann_type',161,[{'var',161,'NewStateData'}|[{'type',161,'term',[]}]]}]]]}]]]}]]}]}],
		%% Line 162
		'callback' =
		    %% Line 162
		    [{{'terminate',3},[{'type',162,'fun',[{'type',162,'product',[{'ann_type',162,[{'var',162,'Reason'}|[{'type',162,'union',[{'atom',162,'normal'}|[{'atom',162,'shutdown'}|[{'type',162,'tuple',[{'atom',162,'shutdown'}|[{'type',162,'term',[]}]]}|[{'type',163,'term',[]}]]]]}]]}|[{'ann_type',163,[{'var',163,'StateName'}|[{'type',163,'atom',[]}]]}|[{'ann_type',163,[{'var',163,'StateData'}|[{'type',163,'term',[]}]]}]]]}|[{'type',164,'term',[]}]]}]}],
		%% Line 165
		'callback' =
		    %% Line 165
		    [{{'code_change',4},[{'type',165,'fun',[{'type',165,'product',[{'ann_type',165,[{'var',165,'OldVsn'}|[{'type',165,'union',[{'type',165,'term',[]}|[{'type',165,'tuple',[{'atom',165,'down'}|[{'type',165,'term',[]}]]}]]}]]}|[{'ann_type',165,[{'var',165,'StateName'}|[{'type',165,'atom',[]}]]}|[{'ann_type',166,[{'var',166,'StateData'}|[{'type',166,'term',[]}]]}|[{'ann_type',166,[{'var',166,'Extra'}|[{'type',166,'term',[]}]]}]]]]}|[{'type',167,'tuple',[{'atom',167,'ok'}|[{'ann_type',167,[{'var',167,'NextStateName'}|[{'type',167,'atom',[]}]]}|[{'ann_type',167,[{'var',167,'NewStateData'}|[{'type',167,'term',[]}]]}]]]}]]}]}],
		%% Line 168
		'callback' =
		    %% Line 168
		    [{{'format_status',2},[{'type',168,'bounded_fun',[{'type',168,'fun',[{'type',168,'product',[{'var',168,'Opt'}|[{'var',168,'StatusData'}]]}|[{'var',168,'Status'}]]}|[[{'type',169,'constraint',[{'atom',169,'is_subtype'}|[[{'var',169,'Opt'}|[{'type',169,'union',[{'atom',169,'normal'}|[{'atom',169,'terminate'}]]}]]]]}|[{'type',170,'constraint',[{'atom',170,'is_subtype'}|[[{'var',170,'StatusData'}|[{'type',170,'list',[{'type',170,'union',[{'var',170,'PDict'}|[{'var',170,'State'}]]}]}]]]]}|[{'type',171,'constraint',[{'atom',171,'is_subtype'}|[[{'var',171,'PDict'}|[{'type',171,'list',[{'type',171,'tuple',[{'ann_type',171,[{'var',171,'Key'}|[{'type',171,'term',[]}]]}|[{'ann_type',171,[{'var',171,'Value'}|[{'type',171,'term',[]}]]}]]}]}]]]]}|[{'type',172,'constraint',[{'atom',172,'is_subtype'}|[[{'var',172,'State'}|[{'type',172,'term',[]}]]]]}|[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'Status'}|[{'type',173,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 175
		'optional_callbacks' =
		    %% Line 175
		    [{'handle_info',3}|[{'terminate',3}|[{'code_change',4}|[{'format_status',2}]]]],
		%% Line 411
		'spec' =
		    %% Line 411
		    [{{'system_terminate',4},[{'type',411,'fun',[{'type',411,'product',[{'type',411,'term',[]}|[{'var',411,'_'}|[{'var',411,'_'}|[{'type',411,'nonempty_list',[{'type',411,'term',[]}]}]]]]}|[{'type',411,'no_return',[]}]]}]}],
		%% Line 577
		'spec' =
		    %% Line 577
		    [{{'terminate',8},[{'type',577,'fun',[{'type',577,'product',[{'type',577,'term',[]}|[{'var',577,'_'}|[{'var',577,'_'}|[{'var',577,'_'}|[{'type',577,'atom',[]}|[{'var',577,'_'}|[{'var',577,'_'}|[{'var',577,'_'}]]]]]]]]}|[{'type',577,'no_return',[]}]]}]}]]
'start'/3 =
    %% Line 194
    fun (_0,_1,_2) ->
	%% Line 195
	call 'gen':'start'
	    ('gen_fsm', 'nolink', _0, _1, _2)
'start'/4 =
    %% Line 197
    fun (_0,_1,_2,_3) ->
	%% Line 198
	call 'gen':'start'
	    ('gen_fsm', 'nolink', _0, _1, _2, _3)
'start_link'/3 =
    %% Line 200
    fun (_0,_1,_2) ->
	%% Line 201
	call 'gen':'start'
	    ('gen_fsm', 'link', _0, _1, _2)
'start_link'/4 =
    %% Line 203
    fun (_0,_1,_2,_3) ->
	%% Line 204
	call 'gen':'start'
	    ('gen_fsm', 'link', _0, _1, _2, _3)
'stop'/1 =
    %% Line 206
    fun (_0) ->
	%% Line 207
	call 'gen':'stop'
	    (_0)
'stop'/3 =
    %% Line 209
    fun (_0,_1,_2) ->
	%% Line 210
	call 'gen':'stop'
	    (_0, _1, _2)
'send_event'/2 =
    %% Line 212
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'global',Name},Event> when 'true' ->
	      do  try
		      %% Line 213
		      call 'global':'send'
			  (Name, {'$gen_event',Event})
		  of <_catch_value> ->
		      _catch_value
		  catch <Class,Reason,Stk> ->
		      'ok'
		  %% Line 214
		  'ok'
	  %% Line 215
	  <{'via',Mod,Name},Event> when 'true' ->
	      do  try
		      %% Line 216
		      call Mod:'send'
			  (Name, {'$gen_event',Event})
		  of <_catch_value> ->
		      _catch_value
		  catch <Class,Reason,Stk> ->
		      'ok'
		  %% Line 217
		  'ok'
	  %% Line 218
	  <Name,Event> when 'true' ->
	      do  %% Line 219
		  call 'erlang':'!'
		      (Name, {'$gen_event',Event})
		  %% Line 220
		  'ok'
	end
'sync_send_event'/2 =
    %% Line 222
    fun (_0,_1) ->
	let <_2> =
	    catch
		%% Line 223
		call 'gen':'call'
		    (_0, '$gen_sync_event', _1)
	in  %% Line 223
	    case _2 of
	      %% Line 224
	      <{'ok',Res}> when 'true' ->
		  %% Line 225
		  Res
	      %% Line 226
	      <{'EXIT',Reason}> when 'true' ->
		  %% Line 227
		  call 'erlang':'exit'
		      ({Reason,{'gen_fsm','sync_send_event',[_0|[_1|[]]]}})
	      ( <_3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_3})
		-| ['compiler_generated'] )
	    end
'sync_send_event'/3 =
    %% Line 230
    fun (_0,_1,_2) ->
	let <_3> =
	    catch
		%% Line 231
		call 'gen':'call'
		    (_0, '$gen_sync_event', _1, _2)
	in  %% Line 231
	    case _3 of
	      %% Line 232
	      <{'ok',Res}> when 'true' ->
		  %% Line 233
		  Res
	      %% Line 234
	      <{'EXIT',Reason}> when 'true' ->
		  %% Line 235
		  call 'erlang':'exit'
		      ({Reason,{'gen_fsm','sync_send_event',[_0|[_1|[_2|[]]]]}})
	      ( <_4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_4})
		-| ['compiler_generated'] )
	    end
'send_all_state_event'/2 =
    %% Line 238
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'global',Name},Event> when 'true' ->
	      do  try
		      %% Line 239
		      call 'global':'send'
			  (Name, {'$gen_all_state_event',Event})
		  of <_catch_value> ->
		      _catch_value
		  catch <Class,Reason,Stk> ->
		      'ok'
		  %% Line 240
		  'ok'
	  %% Line 241
	  <{'via',Mod,Name},Event> when 'true' ->
	      do  try
		      %% Line 242
		      call Mod:'send'
			  (Name, {'$gen_all_state_event',Event})
		  of <_catch_value> ->
		      _catch_value
		  catch <Class,Reason,Stk> ->
		      'ok'
		  %% Line 243
		  'ok'
	  %% Line 244
	  <Name,Event> when 'true' ->
	      do  %% Line 245
		  call 'erlang':'!'
		      (Name, {'$gen_all_state_event',Event})
		  %% Line 246
		  'ok'
	end
'sync_send_all_state_event'/2 =
    %% Line 248
    fun (_0,_1) ->
	let <_2> =
	    catch
		%% Line 249
		call 'gen':'call'
		    (_0, '$gen_sync_all_state_event', _1)
	in  %% Line 249
	    case _2 of
	      %% Line 250
	      <{'ok',Res}> when 'true' ->
		  %% Line 251
		  Res
	      %% Line 252
	      <{'EXIT',Reason}> when 'true' ->
		  %% Line 253
		  call 'erlang':'exit'
		      ({Reason,{'gen_fsm','sync_send_all_state_event',[_0|[_1|[]]]}})
	      ( <_3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_3})
		-| ['compiler_generated'] )
	    end
'sync_send_all_state_event'/3 =
    %% Line 256
    fun (_0,_1,_2) ->
	let <_3> =
	    catch
		%% Line 257
		call 'gen':'call'
		    (_0, '$gen_sync_all_state_event', _1, _2)
	in  %% Line 257
	    case _3 of
	      %% Line 258
	      <{'ok',Res}> when 'true' ->
		  %% Line 259
		  Res
	      %% Line 260
	      <{'EXIT',Reason}> when 'true' ->
		  %% Line 261
		  call 'erlang':'exit'
		      ({Reason,{'gen_fsm','sync_send_all_state_event',%% Line 262
								      [_0|[_1|[_2|[]]]]}})
	      ( <_4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_4})
		-| ['compiler_generated'] )
	    end
'start_timer'/2 =
    %% Line 273
    fun (_0,_1) ->
	let <_2> =
	    call %% Line 274
		 'erlang':%% Line 274
			  'self'
		()
	in  %% Line 274
	    call 'erlang':'start_timer'
		(_0, _2, {'$gen_timer',_1})
'send_event_after'/2 =
    %% Line 277
    fun (_0,_1) ->
	let <_2> =
	    call %% Line 278
		 'erlang':%% Line 278
			  'self'
		()
	in  %% Line 278
	    call 'erlang':'start_timer'
		(_0, _2, {'$gen_event',_1})
'cancel_timer'/1 =
    %% Line 282
    fun (_0) ->
	%% Line 283
	case call 'erlang':'cancel_timer'
		 (_0) of
	  %% Line 284
	  <'false'> when 'true' ->
	      %% Line 285
	      receive
		<{'timeout',_3,_4}>
		    when call 'erlang':'=:='
			  (_3,
			   _0) ->
		    0
	      after %% Line 286
		    0 ->
		%% Line 286
		'false'
	  %% Line 288
	  <RemainingTime> when 'true' ->
	      %% Line 289
	      RemainingTime
	end
'enter_loop'/4 =
    %% Line 300
    fun (_0,_1,_2,_3) ->
	let <_4> =
	    call %% Line 301
		 'erlang':%% Line 301
			  'self'
		()
	in  %% Line 301
	    apply 'enter_loop'/6
		(_0, _1, _2, _3, _4, 'infinity')
'enter_loop'/5 =
    %% Line 303
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <Mod,Options,StateName,StateData,ServerName = {Scope,_13}>
	      when let <_5> =
		    call %% Line 304
			 'erlang':%% Line 304
				  '=:='
			(%% Line 304
			 Scope, %% Line 304
				'local')
		in  let <_6> =
			call %% Line 304
			     'erlang':%% Line 304
				      '=:='
			    (%% Line 304
			     Scope, %% Line 304
				    'global')
		    in  %% Line 304
			call 'erlang':'or'
			    (_5, _6) ->
	      %% Line 305
	      apply 'enter_loop'/6
		  (Mod, Options, StateName, StateData, ServerName, 'infinity')
	  %% Line 306
	  <Mod,Options,StateName,StateData,ServerName = {'via',_14,_15}> when 'true' ->
	      %% Line 307
	      apply 'enter_loop'/6
		  (Mod, Options, StateName, StateData, ServerName, 'infinity')
	  %% Line 308
	  <Mod,Options,StateName,StateData,Timeout> when 'true' ->
	      let <_7> =
		  call %% Line 309
		       'erlang':%% Line 309
				'self'
		      ()
	      in  %% Line 309
		  apply 'enter_loop'/6
		      (Mod, Options, StateName, StateData, _7, Timeout)
	end
'enter_loop'/6 =
    %% Line 311
    fun (_0,_1,_2,_3,_4,_5) ->
	let <Name> =
	    call %% Line 312
		 'gen':%% Line 312
		       'get_proc_name'
		(_4)
	in  let <Parent> =
		call %% Line 313
		     'gen':%% Line 313
			   'get_parent'
		    ()
	    in  let <Debug> =
		    call %% Line 314
			 'gen':%% Line 314
			       'debug_options'
			(%% Line 314
			 Name, _1)
		in  let <HibernateAfterTimeout> =
			call %% Line 315
			     'gen':%% Line 315
				   'hibernate_after'
			    (_1)
		    in  %% Line 316
			apply 'loop'/8
			    (Parent, Name, _2, _3, _0, _5, HibernateAfterTimeout, Debug)
'init_it'/6 =
    %% Line 325
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <Starter,'self',Name,Mod,Args,Options> when 'true' ->
	      let <_6> =
		  call %% Line 326
		       'erlang':%% Line 326
				'self'
		      ()
	      in  %% Line 326
		  apply 'init_it'/6
		      (Starter, _6, Name, Mod, Args, Options)
	  %% Line 327
	  <Starter,Parent,Name0,Mod,Args,Options> when 'true' ->
	      let <Name> =
		  call %% Line 328
		       'gen':%% Line 328
			     'name'
		      (%% Line 328
		       Name0)
	      in  let <Debug> =
		      call %% Line 329
			   'gen':%% Line 329
				 'debug_options'
			  (%% Line 329
			   Name, %% Line 329
				 Options)
		  in  let <HibernateAfterTimeout> =
			  call %% Line 330
			       'gen':%% Line 330
				     'hibernate_after'
			      (%% Line 330
			       Options)
		      in  let <_10> =
			      catch
				  %% Line 331
				  call Mod:'init'
				      (Args)
			  in  %% Line 331
			      case _10 of
				%% Line 332
				<{'ok',StateName,StateData}> when 'true' ->
				    let <_11> =
					call %% Line 333
					     'erlang':%% Line 333
						      'self'
					    ()
				    in  do  %% Line 333
					    call 'proc_lib':'init_ack'
						(Starter, {'ok',_11})
					    %% Line 334
					    apply 'loop'/8
						(Parent, Name, StateName, StateData, Mod, 'infinity', HibernateAfterTimeout, Debug)
				%% Line 335
				<{'ok',StateName,StateData,Timeout}> when 'true' ->
				    let <_12> =
					call %% Line 336
					     'erlang':%% Line 336
						      'self'
					    ()
				    in  do  %% Line 336
					    call 'proc_lib':'init_ack'
						(Starter, {'ok',_12})
					    %% Line 337
					    apply 'loop'/8
						(Parent, Name, StateName, StateData, Mod, Timeout, HibernateAfterTimeout, Debug)
				%% Line 338
				<{'stop',Reason}> when 'true' ->
				    do  %% Line 339
					call 'gen':'unregister_name'
					    (Name0)
					do  %% Line 340
					    call 'proc_lib':'init_ack'
						(Starter, {'error',Reason})
					    %% Line 341
					    call 'erlang':'exit'
						(Reason)
				%% Line 342
				<'ignore'> when 'true' ->
				    do  %% Line 343
					call 'gen':'unregister_name'
					    (Name0)
					do  %% Line 344
					    call 'proc_lib':'init_ack'
						(Starter, 'ignore')
					    %% Line 345
					    call 'erlang':'exit'
						('normal')
				%% Line 346
				<{'EXIT',Reason}> when 'true' ->
				    do  %% Line 347
					call 'gen':'unregister_name'
					    (Name0)
					do  %% Line 348
					    call 'proc_lib':'init_ack'
						(Starter, {'error',Reason})
					    %% Line 349
					    call 'erlang':'exit'
						(Reason)
				%% Line 350
				<Else> when 'true' ->
				    let <Error> = {%% Line 351
					 'bad_return_value',%% Line 351
							    Else}
				    in  do  %% Line 352
					    call 'proc_lib':'init_ack'
						(Starter, {'error',Error})
					    %% Line 353
					    call 'erlang':'exit'
						(Error)
			      end
	end
'loop'/8 =
    %% Line 359
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <Parent,Name,StateName,StateData,Mod,'hibernate',HibernateAfterTimeout,Debug> when 'true' ->
	      %% Line 360
	      call 'proc_lib':'hibernate'
		  ('gen_fsm', 'wake_hib', %% Line 361
					  [Parent|[Name|[StateName|[StateData|[Mod|[HibernateAfterTimeout|%% Line 362
													  [Debug|[]]]]]]]])
	  %% Line 364
	  <Parent,Name,StateName,StateData,Mod,'infinity',HibernateAfterTimeout,Debug> when 'true' ->
	      %% Line 365
	      receive
		%% Line 366
		<Msg> when 'true' ->
		    %% Line 367
		    apply 'decode_msg'/10
			(Msg, Parent, Name, StateName, StateData, Mod, 'infinity', HibernateAfterTimeout, Debug, 'false')
	      after %% Line 368
		    HibernateAfterTimeout ->
		%% Line 369
		apply 'loop'/8
		    (Parent, Name, StateName, StateData, Mod, 'hibernate', HibernateAfterTimeout, Debug)
	  %% Line 372
	  <Parent,Name,StateName,StateData,Mod,Time,HibernateAfterTimeout,Debug> when 'true' ->
	      let <_8> =
		  receive
		    %% Line 374
		    <Input> when 'true' ->
			%% Line 375
			Input
		  after %% Line 376
			Time ->
		    %% Line 377
		    {'$gen_event','timeout'}
	      in  %% Line 379
		  apply 'decode_msg'/10
		      (_8, Parent, Name, StateName, StateData, Mod, Time, HibernateAfterTimeout, Debug, 'false')
	end
'wake_hib'/7 =
    %% Line 381
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	let <_7> =
	    receive
	      %% Line 383
	      <Input> when 'true' ->
		  %% Line 384
		  Input
	    after 'infinity' ->
	      'true'
	in  %% Line 386
	    apply 'decode_msg'/10
		(_7, _0, _1, _2, _3, _4, 'hibernate', _5, _6, 'true')
'decode_msg'/10 =
    %% Line 388
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) ->
	%% Line 389
	case _0 of
	  %% Line 390
	  <{'system',From,Req}> when 'true' ->
	      %% Line 391
	      call 'sys':'handle_system_msg'
		  (Req, From, _1, 'gen_fsm', _8, %% Line 392
						 [_2|[_3|[_4|[_5|[_6|[_7|[]]]]]]], _9)
	  %% Line 393
	  <{'EXIT',_23,Reason}>
	      when call 'erlang':'=:='
		    (_23,
		     _1) ->
	      %% Line 394
	      apply 'terminate'/8
		  (%% Line 395
		   Reason, _2, %% Line 395
			       'undefined', _0, _5, _3, _4, _8)
	  %% Line 396
	  <_X_Msg>
	      when call 'erlang':'=:='
		    (_8,
		     []) ->
	      %% Line 397
	      apply 'handle_msg'/8
		  (_0, _1, _2, _3, _4, _5, _6, _7)
	  %% Line 398
	  <_X_Msg> when 'true' ->
	      let <_10> = 'print_event'/3
	      in  let <Debug1> =
		      call %% Line 399
			   'sys':%% Line 399
				 'handle_debug'
			  (_8, _10, _2, %% Line 400
					{'in',_0,_3})
		  in  %% Line 401
		      apply 'handle_msg'/9
			  (_0, _1, _2, _3, _4, _5, _6, _7, %% Line 402
							   Debug1)
	end
'system_continue'/3 =
    %% Line 408
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Parent,Debug,[Name|[StateName|[StateData|[Mod|[Time|[HibernateAfterTimeout|[]]]]]]]> when 'true' ->
	      %% Line 409
	      apply 'loop'/8
		  (Parent, Name, StateName, StateData, Mod, Time, HibernateAfterTimeout, Debug)
	  ( <_5,_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4,_3})
		  -| [{'function_name',{'system_continue',3}}] )
	    -| ['compiler_generated'] )
	end
'system_terminate'/4 =
    %% Line 413
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Reason,_X_Parent,Debug,%% Line 414
				  [Name|[StateName|[StateData|[Mod|[_X_Time|[_X_HibernateAfterTimeout|[]]]]]]]> when 'true' ->
	      %% Line 415
	      apply 'terminate'/8
		  (Reason, Name, 'undefined', [], Mod, StateName, StateData, Debug)
	  ( <_7,_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5,_4})
		  -| [{'function_name',{'system_terminate',4}}] )
	    -| ['compiler_generated'] )
	end
'system_code_change'/4 =
    %% Line 417
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[Name|[StateName|[StateData|_@r0 = [Mod|[Time|[HibernateAfterTimeout|[]]]]]]],%% Line 418
											 _X_Module,%% Line 418
												   OldVsn,%% Line 418
													  Extra> when 'true' ->
	      let <_4> =
		  catch
		      %% Line 419
		      call Mod:'code_change'
			  (OldVsn, StateName, StateData, Extra)
	      in  %% Line 419
		  case _4 of
		    %% Line 420
		    <{'ok',NewStateName,NewStateData}> when 'true' ->
			%% Line 421
			{'ok',[Name|[NewStateName|[NewStateData|_@r0]]]}
		    %% Line 422
		    <Else> when 'true' ->
			Else
		  end
	  ( <_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6})
		  -| [{'function_name',{'system_code_change',4}}] )
	    -| ['compiler_generated'] )
	end
'system_get_state'/1 =
    %% Line 425
    fun (_0) ->
	case _0 of
	  <[_X_Name|[StateName|[StateData|[_X_Mod|[_X_Time|[_X_HibernateAfterTimeout|[]]]]]]]> when 'true' ->
	      %% Line 426
	      {'ok',{StateName,StateData}}
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'system_get_state',1}}] )
	    -| ['compiler_generated'] )
	end
'system_replace_state'/2 =
    %% Line 428
    fun (_0,_1) ->
	case <_0,_1> of
	  <StateFun,[Name|[StateName|[StateData|_@r0 = [Mod|[Time|[HibernateAfterTimeout|[]]]]]]]> when 'true' ->
	      %% Line 429
	      case apply StateFun
		       ({StateName,StateData}) of
		<Result = {NStateName,NStateData}> when 'true' ->
		    %% Line 430
		    {'ok',Result,[Name|[NStateName|[NStateData|_@r0]]]}
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'system_replace_state',2}}] )
	    -| ['compiler_generated'] )
	end
'print_event'/3 =
    %% Line 436
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Dev,{'in',Msg,StateName},Name> when 'true' ->
	      %% Line 437
	      case Msg of
		%% Line 438
		<{'$gen_event',Event}> when 'true' ->
		    %% Line 439
		    call 'io':'format'
			(Dev, [42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[103|[111|[116|[32|[101|[118|[101|[110|[116|[32|[126|[116|[112|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 440
																														      [Name|[Event|[StateName|[]]]])
		%% Line 441
		<{'$gen_all_state_event',Event}> when 'true' ->
		    %% Line 442
		    call 'io':'format'
			(Dev, %% Line 443
			      [42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[103|[111|[116|[32|[97|[108|[108|[95|[115|[116|[97|[116|[101|[95|[101|[118|[101|[110|[116|[32|[126|[116|[112|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 444
																																					      [Name|[Event|[StateName|[]]]])
		%% Line 445
		<{'$gen_sync_event',{From,_X_Tag},Event}> when 'true' ->
		    %% Line 446
		    call 'io':'format'
			(Dev, %% Line 447
			      [42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[103|[111|[116|[32|[115|[121|[110|[99|[95|[101|[118|[101|[110|[116|[32|[126|[116|[112|[32|[102|[114|[111|[109|[32|[126|[116|[119|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 449
																																								      [Name|[Event|[From|[StateName|[]]]]])
		%% Line 450
		<{'$gen_sync_all_state_event',{From,_X_Tag},Event}> when 'true' ->
		    %% Line 451
		    call 'io':'format'
			(Dev, %% Line 452
			      [42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[103|[111|[116|[32|[115|[121|[110|[99|[95|[97|[108|[108|[95|[115|[116|[97|[116|[101|[95|[101|[118|[101|[110|[116|[32|[126|[116|[112|[32|[102|[114|[111|[109|[32|[126|[116|[119|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 454
																																															      [Name|[Event|[From|[StateName|[]]]]])
		%% Line 455
		<{'timeout',Ref,{'$gen_timer',Message}}> when 'true' ->
		    %% Line 456
		    call 'io':'format'
			(Dev, %% Line 457
			      [42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[103|[111|[116|[32|[116|[105|[109|[101|[114|[32|[126|[116|[112|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 458
																														      [Name|[{'timeout',Ref,Message}|[StateName|[]]]])
		%% Line 459
		<{'timeout',_X_Ref,{'$gen_event',Event}}> when 'true' ->
		    %% Line 460
		    call 'io':'format'
			(Dev, %% Line 461
			      [42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[103|[111|[116|[32|[116|[105|[109|[101|[114|[32|[126|[116|[112|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 462
																														      [Name|[Event|[StateName|[]]]])
		%% Line 463
		<_7> when 'true' ->
		    %% Line 464
		    call 'io':'format'
			(Dev, [42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[103|[111|[116|[32|[126|[116|[112|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 465
																										   [Name|[Msg|[StateName|[]]]])
	      end
	  %% Line 467
	  <Dev,{'out',Msg,{To,_X_Tag},StateName},Name> when 'true' ->
	      %% Line 468
	      call 'io':'format'
		  (Dev, [42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[115|[101|[110|[116|[32|[126|[116|[112|[32|[116|[111|[32|[126|[116|[119|[126|[110|[32|[32|[32|[32|[32|[32|[97|[110|[100|[32|[115|[119|[105|[116|[99|[104|[101|[100|[32|[116|[111|[32|[115|[116|[97|[116|[101|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 470
																																													  [Name|[Msg|[To|[StateName|[]]]]])
	  %% Line 471
	  <Dev,{'noreply',StateName},Name> when 'true' ->
	      %% Line 472
	      call 'io':'format'
		  (Dev, [42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[115|[119|[105|[116|[99|[104|[101|[100|[32|[116|[111|[32|[115|[116|[97|[116|[101|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 473
																										   [Name|[StateName|[]]])
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'print_event',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_msg'/8 =
    %% Line 475
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	let <From> =
	    apply %% Line 476
		  'from'/1
		(_0)
	in  let <_9> =
		catch
		    %% Line 477
		    apply 'dispatch'/4
			(_0, _5, _3, _4)
	    in  %% Line 477
		case _9 of
		  %% Line 478
		  <{'next_state',NStateName,NStateData}> when 'true' ->
		      %% Line 479
		      apply 'loop'/8
			  (_1, _2, NStateName, NStateData, _5, 'infinity', _7, [])
		  %% Line 480
		  <{'next_state',NStateName,NStateData,Time1}> when 'true' ->
		      %% Line 481
		      apply 'loop'/8
			  (_1, _2, NStateName, NStateData, _5, Time1, _7, [])
		  %% Line 482
		  <{'reply',Reply,NStateName,NStateData}>
		      when call 'erlang':'=/='
			    (From,
			     'undefined') ->
		      do  %% Line 483
			  apply 'reply'/2
			      (From, Reply)
			  %% Line 484
			  apply 'loop'/8
			      (_1, _2, NStateName, NStateData, _5, 'infinity', _7, [])
		  %% Line 485
		  <{'reply',Reply,NStateName,NStateData,Time1}>
		      when call 'erlang':'=/='
			    (From,
			     'undefined') ->
		      do  %% Line 486
			  apply 'reply'/2
			      (From, Reply)
			  %% Line 487
			  apply 'loop'/8
			      (_1, _2, NStateName, NStateData, _5, Time1, _7, [])
		  %% Line 488
		  <{'stop',Reason,NStateData}> when 'true' ->
		      %% Line 489
		      apply 'terminate'/8
			  (Reason, _2, From, _0, _5, _3, NStateData, [])
		  %% Line 490
		  <{'stop',Reason,Reply,NStateData}>
		      when call 'erlang':'=/='
			    (From,
			     'undefined') ->
		      let <_10> =
			  catch
			      %% Line 491
			      apply 'terminate'/8
				  (Reason, _2, From, _0, _5, _3, %% Line 492
								 NStateData, %% Line 492
									     [])
		      in  %% Line 491
			  case _10 of
			    <{'EXIT',R}> when 'true' ->
				do  %% Line 493
				    apply 'reply'/2
					(From, Reply)
				    %% Line 494
				    call 'erlang':'exit'
					(R)
			    ( <_11> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_11})
			      -| ['compiler_generated'] )
			  end
		  %% Line 495
		  <{'EXIT',{'undef',[{_27,'handle_info',[_28|[_29|[_30|[]]]],_31}|_32]}}>
		      when call 'erlang':'=:='
			    (_27,
			     _5) ->
		      do  %% Line 496
			  case call 'logger':'allow'
				   ('warning', 'gen_fsm') of
			    <'true'> when 'true' ->
				let <_12> =
				    ~{%% Line 497
				     'module'=>_5,%% Line 498
						  'message'=>_0|~{'label'=>{'gen_fsm','no_handle_info'}}~}~
				in  call 'logger':'macro_log'
					(~{'file'=>[115|[114|[99|[47|[103|[101|[110|[95|[102|[115|[109|[46|[101|[114|[108]]]]]]]]]]]]]]],'line'=>496,'mfa'=>{'gen_fsm','handle_msg',8}}~, 'warning', _12, ~{'domain'=>['otp'],'error_logger'=>~{'report_cb'=>fun 'gen_fsm':'format_log'/1,'tag'=>'warning_msg'}~,'report_cb'=>fun 'gen_fsm':'format_log'/2}~)
			    %% Line 503
			    <'false'> when 'true' ->
				'ok'
			    ( <_17> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_17})
			      -| ['compiler_generated'] )
			  end
			  %% Line 504
			  apply 'loop'/8
			      (_1, _2, _3, _4, _5, 'infinity', _7, [])
		  %% Line 505
		  <{'EXIT',What}> when 'true' ->
		      %% Line 506
		      apply 'terminate'/8
			  (What, _2, From, _0, _5, _3, _4, [])
		  %% Line 507
		  <Reply> when 'true' ->
		      %% Line 508
		      apply 'terminate'/8
			  ({'bad_return_value',Reply}, _2, %% Line 509
							   From, _0, _5, _3, _4, %% Line 509
										 [])
		end
'handle_msg'/9 =
    %% Line 512
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	let <From> =
	    apply %% Line 513
		  'from'/1
		(_0)
	in  let <_10> =
		catch
		    %% Line 514
		    apply 'dispatch'/4
			(_0, _5, _3, _4)
	    in  %% Line 514
		case _10 of
		  %% Line 515
		  <{'next_state',NStateName,NStateData}> when 'true' ->
		      let <_11> = 'print_event'/3
		      in  let <Debug1> =
			      call %% Line 516
				   'sys':%% Line 516
					 'handle_debug'
				  (_8, _11, _2, %% Line 517
						{'noreply',NStateName})
			  in  %% Line 518
			      apply 'loop'/8
				  (_1, _2, NStateName, NStateData, _5, 'infinity', _7, Debug1)
		  %% Line 519
		  <{'next_state',NStateName,NStateData,Time1}> when 'true' ->
		      let <_13> = 'print_event'/3
		      in  let <Debug1> =
			      call %% Line 520
				   'sys':%% Line 520
					 'handle_debug'
				  (_8, _13, _2, %% Line 521
						{'noreply',NStateName})
			  in  %% Line 522
			      apply 'loop'/8
				  (_1, _2, NStateName, NStateData, _5, Time1, _7, Debug1)
		  %% Line 523
		  <{'reply',Reply,NStateName,NStateData}>
		      when call 'erlang':'=/='
			    (From,
			     'undefined') ->
		      let <Debug1> =
			  apply %% Line 524
				'reply'/5
			      (_2, %% Line 524
				   From, %% Line 524
					 Reply, _8, %% Line 524
						    NStateName)
		      in  %% Line 525
			  apply 'loop'/8
			      (_1, _2, NStateName, NStateData, _5, 'infinity', _7, Debug1)
		  %% Line 526
		  <{'reply',Reply,NStateName,NStateData,Time1}>
		      when call 'erlang':'=/='
			    (From,
			     'undefined') ->
		      let <Debug1> =
			  apply %% Line 527
				'reply'/5
			      (_2, %% Line 527
				   From, %% Line 527
					 Reply, _8, %% Line 527
						    NStateName)
		      in  %% Line 528
			  apply 'loop'/8
			      (_1, _2, NStateName, NStateData, _5, Time1, _7, Debug1)
		  %% Line 529
		  <{'stop',Reason,NStateData}> when 'true' ->
		      %% Line 530
		      apply 'terminate'/8
			  (%% Line 531
			   Reason, _2, %% Line 531
				       From, _0, _5, _3, %% Line 531
							 NStateData, _8)
		  %% Line 532
		  <{'stop',Reason,Reply,NStateData}>
		      when call 'erlang':'=/='
			    (From,
			     'undefined') ->
		      let <_17> =
			  catch
			      %% Line 533
			      apply 'terminate'/8
				  (Reason, _2, From, _0, _5, _3, %% Line 534
								 NStateData, _8)
		      in  %% Line 533
			  case _17 of
			    <{'EXIT',R}> when 'true' ->
				do  %% Line 535
				    apply 'reply'/5
					(_2, From, Reply, _8, _3)
				    %% Line 536
				    call 'erlang':'exit'
					(R)
			    ( <_18> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_18})
			      -| ['compiler_generated'] )
			  end
		  %% Line 537
		  <{'EXIT',What}> when 'true' ->
		      %% Line 538
		      apply 'terminate'/8
			  (What, _2, From, _0, _5, _3, _4, _8)
		  %% Line 539
		  <Reply> when 'true' ->
		      %% Line 540
		      apply 'terminate'/8
			  ({'bad_return_value',Reply}, _2, %% Line 541
							   From, _0, _5, _3, _4, _8)
		end
'dispatch'/4 =
    %% Line 544
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <{'$gen_event',Event},Mod,StateName,StateData> when 'true' ->
	      %% Line 545
	      call Mod:StateName
		  (Event, StateData)
	  %% Line 546
	  <{'$gen_all_state_event',Event},Mod,StateName,StateData> when 'true' ->
	      %% Line 547
	      call Mod:'handle_event'
		  (Event, StateName, StateData)
	  %% Line 548
	  <{'$gen_sync_event',From,Event},Mod,StateName,StateData> when 'true' ->
	      %% Line 549
	      call Mod:StateName
		  (Event, From, StateData)
	  %% Line 550
	  <{'$gen_sync_all_state_event',From,Event},%% Line 551
						    Mod,%% Line 551
							StateName,%% Line 551
								  StateData> when 'true' ->
	      %% Line 552
	      call Mod:'handle_sync_event'
		  (Event, From, StateName, StateData)
	  %% Line 553
	  <{'timeout',Ref,{'$gen_timer',Msg}},Mod,StateName,StateData> when 'true' ->
	      %% Line 554
	      call Mod:StateName
		  ({'timeout',Ref,Msg}, StateData)
	  %% Line 555
	  <{'timeout',_X_Ref,{'$gen_event',Event}},Mod,StateName,StateData> when 'true' ->
	      %% Line 556
	      call Mod:StateName
		  (Event, StateData)
	  %% Line 557
	  <Info,Mod,StateName,StateData> when 'true' ->
	      %% Line 558
	      call Mod:'handle_info'
		  (Info, StateName, StateData)
	end
'from'/1 =
    %% Line 560
    fun (_0) ->
	case _0 of
	  <{'$gen_sync_event',From,_X_Event}> when 'true' ->
	      From
	  %% Line 561
	  <{'$gen_sync_all_state_event',From,_X_Event}> when 'true' ->
	      From
	  %% Line 562
	  <_2> when 'true' ->
	      'undefined'
	end
'reply'/2 =
    %% Line 565
    fun (_0,_1) ->
	case <_0,_1> of
	  <{To,Tag},Reply> when 'true' ->
	      catch
		  %% Line 566
		  call 'erlang':'!'
		      (To, {Tag,Reply})
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'reply',2}}] )
	    -| ['compiler_generated'] )
	end
'reply'/5 =
    %% Line 568
    fun (_0,_1,_2,_3,_4) ->
	do  %% Line 569
	    apply 'reply'/2
		(_1, _2)
	    let <_5> = 'print_event'/3
	    in  %% Line 570
		call 'sys':'handle_debug'
		    (_3, _5, _0, %% Line 571
				 {'out',_2,_1,_4})
'terminate'/8 =
    %% Line 579
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	do  %% Line 580
	    case call 'erlang':'function_exported'
		     (_4, 'terminate', 3) of
	      %% Line 581
	      <'true'> when 'true' ->
		  let <_8> =
		      catch
			  %% Line 582
			  call _4:'terminate'
			      (_0, _5, _6)
		  in  %% Line 582
		      case _8 of
			%% Line 583
			<{'EXIT',R}> when 'true' ->
			    let <_9> =
				call %% Line 584
				     'erlang':%% Line 584
					      'get'
				    ()
			    in  let <FmtStateData> =
				    apply %% Line 584
					  'format_status'/4
					(%% Line 584
					 'terminate', _4, _9, _6)
				in  do  %% Line 585
					apply 'error_info'/7
					    (%% Line 586
					     R, _1, _2, _3, _5, %% Line 586
								FmtStateData, _7)
					%% Line 587
					call 'erlang':'exit'
					    (R)
			%% Line 588
			<_24> when 'true' ->
			    'ok'
		      end
	      %% Line 591
	      <'false'> when 'true' ->
		  'ok'
	      ( <_12> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_12})
		-| ['compiler_generated'] )
	    end
	    %% Line 594
	    case _0 of
	      %% Line 595
	      <'normal'> when 'true' ->
		  %% Line 596
		  call 'erlang':'exit'
		      ('normal')
	      %% Line 597
	      <'shutdown'> when 'true' ->
		  %% Line 598
		  call 'erlang':'exit'
		      ('shutdown')
	      %% Line 599
	      <Shutdown = {'shutdown',_25}> when 'true' ->
		  %% Line 600
		  call 'erlang':'exit'
		      (Shutdown)
	      %% Line 601
	      <_26> when 'true' ->
		  let <_13> =
		      call %% Line 602
			   'erlang':%% Line 602
				    'get'
			  ()
		  in  let <FmtStateData1> =
			  apply %% Line 602
				'format_status'/4
			      (%% Line 602
			       'terminate', _4, _13, _6)
		      in  do  %% Line 603
			      apply 'error_info'/7
				  (_0, _1, _2, _3, _5, %% Line 604
						       FmtStateData1, _7)
			      %% Line 605
			      call 'erlang':'exit'
				  (_0)
	    end
'error_info'/7 =
    %% Line 608
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	let <Log> =
	    call %% Line 609
		 'sys':%% Line 609
		       'get_log'
		(_6)
	in  do  %% Line 610
		case call 'logger':'allow'
			 ('error', 'gen_fsm') of
		  <'true'> when 'true' ->
		      let <_8> =
			  apply %% Line 617
				'client_stacktrace'/1
			      (_2)
		      in  let <_9> =
			      ~{%% Line 611
			       'name'=>_1,%% Line 612
					  'last_message'=>_3,%% Line 613
							     'state_name'=>_4,%% Line 614
									      'state_data'=>_5,%% Line 615
											       'log'=>Log,%% Line 616
													  'reason'=>_0,%% Line 617
														       'client_info'=>_8|~{'label'=>{'gen_fsm','terminate'}}~}~
			  in  call 'logger':'macro_log'
				  (~{'file'=>[115|[114|[99|[47|[103|[101|[110|[95|[102|[115|[109|[46|[101|[114|[108]]]]]]]]]]]]]]],'line'=>610,'mfa'=>{'gen_fsm','error_info',7}}~, 'error', _9, ~{'domain'=>['otp'],'error_logger'=>~{'report_cb'=>fun 'gen_fsm':'format_log'/1,'tag'=>'error'}~,'report_cb'=>fun 'gen_fsm':'format_log'/2}~)
		  %% Line 621
		  <'false'> when 'true' ->
		      'ok'
		  ( <_14> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_14})
		    -| ['compiler_generated'] )
		end
		%% Line 622
		'ok'
'client_stacktrace'/1 =
    %% Line 624
    fun (_0) ->
	case _0 of
	  <'undefined'> when 'true' ->
	      %% Line 625
	      'undefined'
	  %% Line 626
	  <{Pid,_X_Tag}> when 'true' ->
	      %% Line 627
	      apply 'client_stacktrace'/1
		  (Pid)
	  %% Line 628
	  <Pid>
	      when try
		    let <_1> =
			call 'erlang':'is_pid'
			    (_0)
		    in  let <_3> =
			    call 'erlang':'node'
				(_0)
			in  let <_2> =
				call 'erlang':'node'
				    ()
			    in  let <_4> =
				    call 'erlang':'=:='
					(_3, _2)
				in  call 'erlang':'and'
					(_1, _4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 629
	      case call 'erlang':'process_info'
		       (Pid, ['current_stacktrace'|['registered_name']]) of
		%% Line 630
		<'undefined'> when 'true' ->
		    %% Line 631
		    {Pid,'dead'}
		%% Line 632
		<[{'current_stacktrace',Stacktrace}|[{'registered_name',[]}]]> when 'true' ->
		    %% Line 633
		    {Pid,{Pid,Stacktrace}}
		%% Line 634
		<[{'current_stacktrace',Stacktrace}|[{'registered_name',Name}|[]]]> when 'true' ->
		    %% Line 635
		    {Pid,{Name,Stacktrace}}
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 637
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_0) ->
	      %% Line 638
	      {Pid,'remote'}
	  ( <_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6})
		  -| [{'function_name',{'client_stacktrace',1}}] )
	    -| ['compiler_generated'] )
	end
'format_log'/1 =
    %% Line 646
    fun (_0) ->
	let <Depth> =
	    call %% Line 647
		 'error_logger':%% Line 647
				'get_format_depth'
		()
	in  let <FormatOpts> =
		~{%% Line 649
		 'depth'=>Depth,%% Line 650
				'single_line'=>'false',%% Line 651
						       'encoding'=>'utf8'|%% Line 648
		 ~{'chars_limit'=>'unlimited'}~}~
	    in  let <_3> =
		    apply %% Line 652
			  'limit_report'/2
			(_0, %% Line 652
			     Depth)
		in  %% Line 652
		    apply 'format_log_multi'/2
			(_3, FormatOpts)
'limit_report'/2 =
    %% Line 654
    fun (_0,_1) ->
	case <_0,_1> of
	  <Report,'unlimited'> when 'true' ->
	      %% Line 655
	      Report
	  %% Line 656
	  <%% Line 661
	   Report = ~{%% Line 660
		     'reason':=Reason,%% Line 658
				      'state_data':=StateData,%% Line 659
							      'log':=Log,'label':={'gen_fsm','terminate'},%% Line 661
													  'client_info':=ClientInfo,%% Line 657
																    'last_message':=Msg}~,%% Line 662
																			  Depth> when 'true' ->
	      let <_2> =
		  call %% Line 663
		       'io_lib':%% Line 663
				'limit_term'
		      (%% Line 663
		       Msg, %% Line 663
			    Depth)
	      in  let <_3> =
		      call %% Line 664
			   'io_lib':%% Line 664
				    'limit_term'
			  (%% Line 664
			   StateData, %% Line 664
				      Depth)
		  in  let <_9> =
			  letrec
			      'lc$^0'/1 =
				  %% Line 665
				  fun (_6) ->
				      case _6 of
					<[L|_5]> when 'true' ->
					    let <_7> =
						call 'io_lib':'limit_term'
						    (L, Depth)
					    in  let <_8> =
						    apply 'lc$^0'/1
							(_5)
						in  ( [_7|_8]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_15> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_15})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  %% Line 665
			      apply 'lc$^0'/1
				  (Log)
		      in  let <_10> =
			      call %% Line 666
				   'io_lib':%% Line 666
					    'limit_term'
				  (%% Line 666
				   Reason, %% Line 666
					   Depth)
			  in  let <_11> =
				  apply %% Line 667
					'limit_client_report'/2
				      (%% Line 667
				       ClientInfo, %% Line 667
						   Depth)
			      in  %% Line 663
				  case <> of
				    ( <>
					  when call 'erlang':'is_map'
						(Report) ->
					  ~{'last_message'=>_2,%% Line 664
							      'state_data'=>_3,%% Line 665
									       'log'=>_9,%% Line 666
											 'reason'=>_10,%% Line 667
												       'client_info'=>_11|Report}~
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  ( primop 'match_fail'
						({'badmap',Report})
					    -| [{'eval_failure','badmap'}] )
				      -| ['compiler_generated'] )
				  end
	  %% Line 668
	  <%% Line 669
	   Report = ~{'label':={'gen_fsm','no_handle_info'},%% Line 669
							   'message':=Msg}~,%% Line 669
									    Depth> when 'true' ->
	      let <_12> =
		  call %% Line 670
		       'io_lib':%% Line 670
				'limit_term'
		      (%% Line 670
		       Msg, %% Line 670
			    Depth)
	      in  %% Line 670
		  case <> of
		    ( <>
			  when call 'erlang':'is_map'
				(Report) ->
			  ~{'message'=>_12|Report}~
		      -| ['compiler_generated'] )
		    ( <> when 'true' ->
			  ( primop 'match_fail'
				({'badmap',Report})
			    -| [{'eval_failure','badmap'}] )
		      -| ['compiler_generated'] )
		  end
	  ( <_14,_13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13})
		  -| [{'function_name',{'limit_report',2}}] )
	    -| ['compiler_generated'] )
	end
'limit_client_report'/2 =
    %% Line 672
    fun (_0,_1) ->
	case <_0,_1> of
	  <{From,{Name,Stacktrace}},Depth> when 'true' ->
	      let <_2> =
		  call %% Line 673
		       'io_lib':%% Line 673
				'limit_term'
		      (%% Line 673
		       Stacktrace, %% Line 673
				   Depth)
	      in  %% Line 673
		  {From,{Name,_2}}
	  %% Line 674
	  <Client,_5> when 'true' ->
	      %% Line 675
	      Client
	end
'format_log'/2 =
    %% Line 679
    fun (_0,_1) ->
	let <FormatOpts> =
	    call %% Line 684
		 'maps':%% Line 684
			'merge'
		(%% Line 680
		 ~{'chars_limit'=>'unlimited','depth'=>'unlimited','encoding'=>'utf8','single_line'=>'false'}~, _1)
	in  let <_5> =
		case %% Line 686
		     FormatOpts of
		  %% Line 687
		  <~{'chars_limit':='unlimited'}~> when 'true' ->
		      %% Line 688
		      []
		  %% Line 689
		  <~{'chars_limit':=Limit}~> when 'true' ->
		      %% Line 690
		      [{'chars_limit',Limit}|[]]
		  ( <_4> when 'true' ->
			%% Line 686
			primop 'match_fail'
			    ({'case_clause',_4})
		    -| ['compiler_generated'] )
		end
	    in  %% Line 692
		case apply 'format_log_single'/2
			 (_0, FormatOpts) of
		  <{Format,Args}> when 'true' ->
		      %% Line 693
		      call 'io_lib':'format'
			  (Format, Args, _5)
		  ( <_7> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_7})
		    -| ['compiler_generated'] )
		end
'format_log_single'/2 =
    %% Line 695
    fun (_0,_1) ->
	case <_0,_1> of
	  <~{%% Line 701
	    'reason':=Reason,%% Line 699
			     'state_data':=StateData,%% Line 700
						     'log':=Log,'label':={'gen_fsm','terminate'},%% Line 702
												 'client_info':=ClientInfo,%% Line 698
															   'state_name':=StateName,%% Line 697
																		   'last_message':=Msg,%% Line 696
																				       'name':=Name}~,%% Line 703
																						      FormatOpts = %% Line 703
																								   ~{'depth':=Depth,'single_line':='true'}~> when 'true' ->
	      let <P> =
		  apply %% Line 704
			'p'/1
		      (%% Line 704
		       FormatOpts)
	      in  let <FixedReason> =
		      apply %% Line 705
			    'fix_reason'/1
			  (%% Line 705
			   Reason)
		  in  %% Line 706
		      case apply 'format_client_log_single'/3
			       (ClientInfo, P, Depth) of
			<{ClientFmt,ClientArgs}> when 'true' ->
			    let <_6> =
				case %% Line 713
				     Log of
				  %% Line 714
				  <[]> when 'true' ->
				      []
				  %% Line 715
				  <_27> when 'true' ->
				      call 'erlang':'++'
					  ([46|[32|[76|[111|[103|[58|[32]]]]]]], P)
				end
			    in  let <Format> =
				    call %% Line 708
					 'lists':%% Line 708
						 'append'
					(%% Line 709
					 [[83|[116|[97|[116|[101|[32|[109|[97|[99|[104|[105|[110|[101|[32]]]]]]]]]]]]]]|[P|[[32|[116|[101|[114|[109|[105|[110|[97|[116|[105|[110|[103|[46|[32|[82|[101|[97|[115|[111|[110|[58|[32]]]]]]]]]]]]]]]]]]]]]]|[P|%% Line 710
																															   [[46|[32|[76|[97|[115|[116|[32|[101|[118|[101|[110|[116|[58|[32]]]]]]]]]]]]]]|[P|%% Line 711
																																									    [[46|[32|[83|[116|[97|[116|[101|[58|[32]]]]]]]]]|[P|%% Line 712
																																																[[46|[32|[68|[97|[116|[97|[58|[32]]]]]]]]|[P|%% Line 713
																																																					     [_6|%% Line 717
																																																						 [[46]]]]]]]]]]]]])
				in  let <_10> =
					apply %% Line 719
					      'get_msg'/1
					    (%% Line 719
					     Msg)
				    in  let <_9> =
					    case %% Line 720
						 Log of
					      %% Line 721
					      <[]> when 'true' ->
						  []
					      %% Line 722
					      <_28> when 'true' ->
						  [Log|[]]
					    end
					in  let <Args0> =
						[%% Line 719
						 Name|%% Line 719
						      [FixedReason|[_10|[StateName|[StateData|_9]]]]]
					    in  let <_16> =
						    case %% Line 724
							 Depth of
						      %% Line 725
						      <'unlimited'> when 'true' ->
							  %% Line 726
							  Args0
						      %% Line 727
						      <_29> when 'true' ->
							  let <_14> =
							      fun (_12) ->
								  %% Line 728
								  [_12|[Depth|[]]]
							  in  %% Line 728
							      call 'lists':'flatmap'
								  (_14, Args0)
						    end
						in  let <_19> =
							call %% Line 730
							     'erlang':%% Line 730
								      '++'
							    (%% Line 730
							     Format, %% Line 730
								     ClientFmt)
						    in  let <_18> =
							    call %% Line 730
								 'erlang':%% Line 730
									  '++'
								(_16, %% Line 730
								      ClientArgs)
							in  %% Line 730
							    {_19,_18}
			( <_4> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_4})
			  -| ['compiler_generated'] )
		      end
	  %% Line 731
	  <~{'label':={'gen_fsm','no_handle_info'},%% Line 733
						  'message':=Msg,%% Line 732
								 'module':=Mod}~,%% Line 734
										 FormatOpts = %% Line 734
											      ~{'depth':=Depth,'single_line':='true'}~> when 'true' ->
	      let <P> =
		  apply %% Line 735
			'p'/1
		      (%% Line 735
		       FormatOpts)
	      in  let <Format> =
		      call %% Line 736
			   'lists':%% Line 736
				   'append'
			  (%% Line 736
			   [[85|[110|[100|[101|[102|[105|[110|[101|[100|[32|[104|[97|[110|[100|[108|[101|[95|[105|[110|[102|[111|[32|[105|[110|[32]]]]]]]]]]]]]]]]]]]]]]]]]|[P|%% Line 737
																					       [[46|[32|[85|[110|[104|[97|[110|[100|[108|[101|[100|[32|[109|[101|[115|[115|[97|[103|[101|[58|[32]]]]]]]]]]]]]]]]]]]]]|[P|[[46]]]]]])
		  in  let <_23> =
			  case %% Line 739
			       Depth of
			    %% Line 740
			    <'unlimited'> when 'true' ->
				%% Line 741
				[Mod|[Msg|[]]]
			    %% Line 742
			    <_30> when 'true' ->
				%% Line 743
				[Mod|[Depth|[Msg|[Depth|[]]]]]
			  end
		      in  %% Line 745
			  {Format,_23}
	  %% Line 746
	  <Report,FormatOpts> when 'true' ->
	      %% Line 747
	      apply 'format_log_multi'/2
		  (Report, FormatOpts)
	end
'format_log_multi'/2 =
    %% Line 749
    fun (_0,_1) ->
	case <_0,_1> of
	  <~{%% Line 755
	    'reason':=Reason,%% Line 753
			     'state_data':=StateData,%% Line 754
						     'log':=Log,'label':={'gen_fsm','terminate'},%% Line 756
												 'client_info':=ClientInfo,%% Line 752
															   'state_name':=StateName,%% Line 751
																		   'last_message':=Msg,%% Line 750
																				       'name':=Name}~,%% Line 757
																						      FormatOpts = %% Line 757
																								   ~{'depth':=Depth}~> when 'true' ->
	      let <P> =
		  apply %% Line 758
			'p'/1
		      (%% Line 758
		       FormatOpts)
	      in  let <FixedReason> =
		      apply %% Line 759
			    'fix_reason'/1
			  (%% Line 759
			   Reason)
		  in  %% Line 760
		      case apply 'format_client_log'/3
			       (ClientInfo, P, Depth) of
			<{ClientFmt,ClientArgs}> when 'true' ->
			    let <_5> =
				apply %% Line 764
				      'get_msg_str'/2
				    (%% Line 764
				     Msg, %% Line 764
					  P)
			    in  let <_6> =
				    call %% Line 764
					 'erlang':%% Line 764
						  '++'
					(_5, %% Line 765
					     [42|[42|[32|[87|[104|[101|[110|[32|[83|[116|[97|[116|[101|[32|[61|[61|[32]]]]]]]]]]]]]]]]])
				in  let <_7> =
					call %% Line 763
					     'erlang':%% Line 763
						      '++'
					    (%% Line 763
					     [32|[116|[101|[114|[109|[105|[110|[97|[116|[105|[110|[103|[32|[10]]]]]]]]]]]]]], _6)
				    in  let <_10> =
					    case %% Line 768
						 Log of
					      %% Line 769
					      <[]> when 'true' ->
						  []
					      %% Line 770
					      <_32> when 'true' ->
						  let <_8> =
						      call 'erlang':'++'
							  (P, [126|[110]])
						  in  call 'erlang':'++'
							  ([42|[42|[32|[76|[111|[103|[32|[61|[61|[126|[110|[42|[42]]]]]]]]]]]]], _8)
					    end
					in  let <Format> =
						call %% Line 762
						     'lists':%% Line 762
							     'append'
						    (%% Line 763
						     [[42|[42|[32|[83|[116|[97|[116|[101|[32|[109|[97|[99|[104|[105|[110|[101|[32]]]]]]]]]]]]]]]]]|[P|[_7|%% Line 765
																			  [P|[[126|[110]]|%% Line 766
																					  [[42|[42|[32|[32|[32|[32|[32|[32|[68|[97|[116|[97|[32|[32|[61|[61|[32]]]]]]]]]]]]]]]]]|[P|[[126|[110]]|%% Line 767
																																		 [[42|[42|[32|[82|[101|[97|[115|[111|[110|[32|[102|[111|[114|[32|[116|[101|[114|[109|[105|[110|[97|[116|[105|[111|[110|[32|[61|[61|[126|[110|[42|[42|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[P|[[126|[110]]|%% Line 768
																																																											  [_10|%% Line 771
																																																											       []]]]]]]]]]]]])
					    in  let <_14> =
						    apply %% Line 773
							  'get_msg'/1
							(%% Line 773
							 Msg)
						in  let <_13> =
							case %% Line 775
							     Log of
							  %% Line 776
							  <[]> when 'true' ->
							      []
							  %% Line 777
							  <_33> when 'true' ->
							      [Log|[]]
							end
						    in  let <Args0> =
							    [%% Line 773
							     Name|%% Line 773
								  call 'erlang':'++'
								      (_14, %% Line 774
									    [StateName|[StateData|[FixedReason|_13]]])]
							in  let <_20> =
								case %% Line 779
								     Depth of
								  %% Line 780
								  <'unlimited'> when 'true' ->
								      %% Line 781
								      Args0
								  %% Line 782
								  <_34> when 'true' ->
								      let <_18> =
									  fun (_16) ->
									      %% Line 783
									      [_16|[Depth|[]]]
								      in  %% Line 783
									  call 'lists':'flatmap'
									      (_18, Args0)
								end
							    in  let <_23> =
								    call %% Line 785
									 'erlang':%% Line 785
										  '++'
									(%% Line 785
									 Format, %% Line 785
										 ClientFmt)
								in  let <_22> =
									call %% Line 785
									     'erlang':%% Line 785
										      '++'
									    (_20, %% Line 785
										  ClientArgs)
								    in  %% Line 785
									{_23,_22}
			( <_4> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_4})
			  -| ['compiler_generated'] )
		      end
	  %% Line 786
	  <~{'label':={'gen_fsm','no_handle_info'},%% Line 788
						  'message':=Msg,%% Line 787
								 'module':=Mod}~,%% Line 789
										 FormatOpts = %% Line 789
											      ~{'depth':=Depth}~> when 'true' ->
	      let <P> =
		  apply %% Line 790
			'p'/1
		      (%% Line 790
		       FormatOpts)
	      in  let <_25> =
		      call %% Line 793
			   'erlang':%% Line 793
				    '++'
			  (%% Line 793
			   P, %% Line 793
			      [126|[110]])
		  in  let <Format> =
			  call %% Line 793
			       'erlang':%% Line 793
					'++'
			      (%% Line 792
			       [42|[42|[32|[85|[110|[100|[101|[102|[105|[110|[101|[100|[32|[104|[97|[110|[100|[108|[101|[95|[105|[110|[102|[111|[32|[105|[110|[32|[126|[112|[126|[110|[42|[42|[32|[85|[110|[104|[97|[110|[100|[108|[101|[100|[32|[109|[101|[115|[115|[97|[103|[101|[58|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], _25)
		      in  let <_28> =
			      case %% Line 795
				   Depth of
				%% Line 796
				<'unlimited'> when 'true' ->
				    %% Line 797
				    [Mod|[Msg|[]]]
				%% Line 798
				<_35> when 'true' ->
				    %% Line 799
				    [Mod|[Msg|[Depth|[]]]]
			      end
			  in  %% Line 801
			      {Format,_28}
	  ( <_31,_30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_31,_30})
		  -| [{'function_name',{'format_log_multi',2}}] )
	    -| ['compiler_generated'] )
	end
'fix_reason'/1 =
    %% Line 803
    fun (_0) ->
	case _0 of
	  <Reason = {'undef',_@r0 = [{M,F,A,L}|MFAs]}> when 'true' ->
	      %% Line 804
	      case call 'code':'is_loaded'
		       (M) of
		%% Line 805
		<'false'> when 'true' ->
		    %% Line 806
		    {'module could not be loaded',_@r0}
		%% Line 807
		<_5> when 'true' ->
		    let <_1> =
			call %% Line 808
			     'erlang':%% Line 808
				      'length'
			    (%% Line 808
			     A)
		    in  %% Line 808
			case call 'erlang':'function_exported'
				 (M, F, _1) of
			  %% Line 809
			  <'true'> when 'true' ->
			      %% Line 810
			      Reason
			  %% Line 811
			  <'false'> when 'true' ->
			      %% Line 812
			      {'function not exported',_@r0}
			  ( <_2> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_2})
			    -| ['compiler_generated'] )
			end
	      end
	  %% Line 815
	  <Reason> when 'true' ->
	      %% Line 816
	      Reason
	end
'get_msg_str'/2 =
    %% Line 818
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'$gen_event',_X_Event},P> when 'true' ->
	      let <_2> =
		  call %% Line 819
		       'erlang':%% Line 819
				'++'
		      (%% Line 819
		       P, %% Line 819
			  [126|[110]])
	      in  %% Line 819
		  call 'erlang':'++'
		      ([42|[42|[32|[76|[97|[115|[116|[32|[101|[118|[101|[110|[116|[32|[105|[110|[32|[119|[97|[115|[32]]]]]]]]]]]]]]]]]]]]], _2)
	  %% Line 820
	  <{'$gen_sync_event',_X_From,_X_Event},P> when 'true' ->
	      let <_3> =
		  call %% Line 821
		       'erlang':%% Line 821
				'++'
		      (%% Line 821
		       P, %% Line 821
			  [32|[102|[114|[111|[109|[32|[126|[116|[119|[126|[110]]]]]]]]]]])
	      in  %% Line 821
		  call 'erlang':'++'
		      ([42|[42|[32|[76|[97|[115|[116|[32|[115|[121|[110|[99|[32|[101|[118|[101|[110|[116|[32|[105|[110|[32|[119|[97|[115|[32]]]]]]]]]]]]]]]]]]]]]]]]]], _3)
	  %% Line 822
	  <{'$gen_all_state_event',_X_Event},P> when 'true' ->
	      let <_4> =
		  call %% Line 823
		       'erlang':%% Line 823
				'++'
		      (%% Line 823
		       P, %% Line 823
			  [32|[40|[102|[111|[114|[32|[97|[108|[108|[32|[115|[116|[97|[116|[101|[115|[41|[126|[110]]]]]]]]]]]]]]]]]]])
	      in  %% Line 823
		  call 'erlang':'++'
		      ([42|[42|[32|[76|[97|[115|[116|[32|[101|[118|[101|[110|[116|[32|[105|[110|[32|[119|[97|[115|[32]]]]]]]]]]]]]]]]]]]]], _4)
	  %% Line 824
	  <{'$gen_sync_all_state_event',_X_From,_X_Event},P> when 'true' ->
	      let <_5> =
		  call %% Line 825
		       'erlang':%% Line 825
				'++'
		      (%% Line 825
		       P, %% Line 825
			  [126|[110]])
	      in  let <_6> =
		      call %% Line 825
			   'erlang':%% Line 825
				    '++'
			  (%% Line 825
			   [32|[40|[102|[111|[114|[32|[97|[108|[108|[32|[115|[116|[97|[116|[101|[115|[41|[32|[102|[114|[111|[109|[32]]]]]]]]]]]]]]]]]]]]]]], _5)
		  in  let <_7> =
			  call %% Line 825
			       'erlang':%% Line 825
					'++'
			      (%% Line 825
			       P, _6)
		      in  %% Line 825
			  call 'erlang':'++'
			      ([42|[42|[32|[76|[97|[115|[116|[32|[115|[121|[110|[99|[32|[101|[118|[101|[110|[116|[32|[105|[110|[32|[119|[97|[115|[32]]]]]]]]]]]]]]]]]]]]]]]]]], _7)
	  %% Line 826
	  <{'timeout',_X_Ref,{'$gen_timer',_X_Msg}},P> when 'true' ->
	      let <_8> =
		  call %% Line 827
		       'erlang':%% Line 827
				'++'
		      (%% Line 827
		       P, %% Line 827
			  [126|[110]])
	      in  %% Line 827
		  call 'erlang':'++'
		      ([42|[42|[32|[76|[97|[115|[116|[32|[116|[105|[109|[101|[114|[32|[101|[118|[101|[110|[116|[32|[105|[110|[32|[119|[97|[115|[32]]]]]]]]]]]]]]]]]]]]]]]]]]], _8)
	  %% Line 828
	  <{'timeout',_X_Ref,{'$gen_event',_X_Msg}},P> when 'true' ->
	      let <_9> =
		  call %% Line 829
		       'erlang':%% Line 829
				'++'
		      (%% Line 829
		       P, %% Line 829
			  [126|[110]])
	      in  %% Line 829
		  call 'erlang':'++'
		      ([42|[42|[32|[76|[97|[115|[116|[32|[116|[105|[109|[101|[114|[32|[101|[118|[101|[110|[116|[32|[105|[110|[32|[119|[97|[115|[32]]]]]]]]]]]]]]]]]]]]]]]]]]], _9)
	  %% Line 830
	  <_X_Msg,P> when 'true' ->
	      let <_10> =
		  call %% Line 831
		       'erlang':%% Line 831
				'++'
		      (%% Line 831
		       P, %% Line 831
			  [126|[110]])
	      in  %% Line 831
		  call 'erlang':'++'
		      ([42|[42|[32|[76|[97|[115|[116|[32|[109|[101|[115|[115|[97|[103|[101|[32|[105|[110|[32|[119|[97|[115|[32]]]]]]]]]]]]]]]]]]]]]]], _10)
	end
'get_msg'/1 =
    %% Line 833
    fun (_0) ->
	case _0 of
	  <{'$gen_event',Event}> when 'true' ->
	      [Event|[]]
	  %% Line 834
	  <{'$gen_sync_event',{From,_X_Tag},Event}> when 'true' ->
	      [Event|[From|[]]]
	  %% Line 835
	  <{'$gen_all_state_event',Event}> when 'true' ->
	      [Event|[]]
	  %% Line 836
	  <{'$gen_sync_all_state_event',{From,_X_Tag},Event}> when 'true' ->
	      [Event|[From|[]]]
	  %% Line 837
	  <{'timeout',Ref,{'$gen_timer',Msg}}> when 'true' ->
	      [{'timeout',Ref,Msg}|[]]
	  %% Line 838
	  <{'timeout',_X_Ref,{'$gen_event',Event}}> when 'true' ->
	      [Event|[]]
	  %% Line 839
	  <Msg> when 'true' ->
	      [Msg|[]]
	end
'format_client_log_single'/3 =
    %% Line 841
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <'undefined',_12,_13> when 'true' ->
	      %% Line 842
	      {[],[]}
	  %% Line 843
	  <{Pid,'dead'},_14,_15> when 'true' ->
	      %% Line 844
	      {[32|[67|[108|[105|[101|[110|[116|[32|[126|[48|[112|[32|[105|[115|[32|[100|[101|[97|[100|[46]]]]]]]]]]]]]]]]]]]],[Pid|[]]}
	  %% Line 845
	  <{Pid,'remote'},_16,_17> when 'true' ->
	      let <_3> =
		  call %% Line 846
		       'erlang':%% Line 846
				'node'
		      (%% Line 846
		       Pid)
	      in  %% Line 846
		  {[32|[67|[108|[105|[101|[110|[116|[32|[126|[48|[112|[32|[105|[115|[32|[114|[101|[109|[111|[116|[101|[32|[111|[110|[32|[110|[111|[100|[101|[32|[126|[48|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Pid|[_3|[]]]}
	  %% Line 847
	  <{_X_Pid,{Name,Stacktrace0}},P,Depth> when 'true' ->
	      let <Stacktrace> =
		  call %% Line 850
		       'lists':%% Line 850
			       'sublist'
		      (%% Line 850
		       Stacktrace0, %% Line 850
				    4)
	      in  let <Format> =
		      call %% Line 851
			   'lists':%% Line 851
				   'append'
			  (%% Line 851
			   [[32|[67|[108|[105|[101|[110|[116|[32]]]]]]]]|[P|[[32|[115|[116|[97|[99|[107|[116|[114|[97|[99|[101|[58|[32]]]]]]]]]]]]]|[P|[[46]]]]]])
		  in  let <_7> =
			  case %% Line 852
			       Depth of
			    %% Line 853
			    <'unlimited'> when 'true' ->
				%% Line 854
				[Name|[Stacktrace|[]]]
			    %% Line 855
			    <_18> when 'true' ->
				%% Line 856
				[Name|[Depth|[Stacktrace|[Depth|[]]]]]
			  end
		      in  %% Line 858
			  {Format,_7}
	  ( <_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9})
		  -| [{'function_name',{'format_client_log_single',3}}] )
	    -| ['compiler_generated'] )
	end
'format_client_log'/3 =
    %% Line 860
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <'undefined',_11,_12> when 'true' ->
	      %% Line 861
	      {[],[]}
	  %% Line 862
	  <{Pid,'dead'},_13,_14> when 'true' ->
	      %% Line 863
	      {[42|[42|[32|[67|[108|[105|[101|[110|[116|[32|[126|[112|[32|[105|[115|[32|[100|[101|[97|[100|[126|[110]]]]]]]]]]]]]]]]]]]]]],[Pid|[]]}
	  %% Line 864
	  <{Pid,'remote'},_15,_16> when 'true' ->
	      let <_3> =
		  call %% Line 865
		       'erlang':%% Line 865
				'node'
		      (%% Line 865
		       Pid)
	      in  %% Line 865
		  {[42|[42|[32|[67|[108|[105|[101|[110|[116|[32|[126|[112|[32|[105|[115|[32|[114|[101|[109|[111|[116|[101|[32|[111|[110|[32|[110|[111|[100|[101|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Pid|[_3|[]]]}
	  %% Line 866
	  <{_X_Pid,{Name,Stacktrace}},P,Depth> when 'true' ->
	      let <Format> =
		  call %% Line 867
		       'lists':%% Line 867
			       'append'
		      (%% Line 867
		       [[42|[42|[32|[67|[108|[105|[101|[110|[116|[32]]]]]]]]]]|[P|[[32|[115|[116|[97|[99|[107|[116|[114|[97|[99|[101|[126|[110|[42|[42|[32]]]]]]]]]]]]]]]]|[P|[[126|[110]]]]]]])
	      in  let <_6> =
		      case %% Line 868
			   Depth of
			%% Line 869
			<'unlimited'> when 'true' ->
			    %% Line 870
			    [Name|[Stacktrace|[]]]
			%% Line 871
			<_17> when 'true' ->
			    %% Line 872
			    [Name|[Depth|[Stacktrace|[Depth|[]]]]]
		      end
		  in  %% Line 874
		      {Format,_6}
	  ( <_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8})
		  -| [{'function_name',{'format_client_log',3}}] )
	    -| ['compiler_generated'] )
	end
'p'/1 =
    %% Line 876
    fun (_0) ->
	case _0 of
	  <~{'depth':=Depth,'encoding':=Enc,'single_line':=Single}~> when 'true' ->
	      let <_4> =
		  apply %% Line 877
			'single'/1
		      (%% Line 877
		       Single)
	      in  let <_2> =
		      apply %% Line 877
			    'mod'/1
			  (%% Line 877
			   Enc)
		  in  let <_1> =
			  apply %% Line 877
				'p'/1
			      (%% Line 877
			       Depth)
		      in  let <_3> =
			      call %% Line 877
				   'erlang':%% Line 877
					    '++'
				  (_2, _1)
			  in  let <_5> =
				  call %% Line 877
				       'erlang':%% Line 877
						'++'
				      (_4, _3)
			      in  %% Line 877
				  [126|_5]
	  %% Line 878
	  <'unlimited'> when 'true' ->
	      %% Line 879
	      [112]
	  %% Line 880
	  <_X_Depth> when 'true' ->
	      %% Line 881
	      [80]
	end
'single'/1 =
    %% Line 883
    fun (_0) ->
	case _0 of
	  <'true'> when 'true' ->
	      [48]
	  %% Line 884
	  <'false'> when 'true' ->
	      []
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'single',1}}] )
	    -| ['compiler_generated'] )
	end
'mod'/1 =
    %% Line 886
    fun (_0) ->
	case _0 of
	  <'latin1'> when 'true' ->
	      []
	  %% Line 887
	  <_2> when 'true' ->
	      [116]
	end
'format_status'/2 =
    %% Line 892
    fun (_0,_1) ->
	%% Line 893
	case _1 of
	  <[PDict|[SysState|[Parent|[Debug|[[Name|[StateName|[StateData|[Mod|[_X_Time|[_X_HibernateAfterTimeout|[]]]]]]]|[]]]]]]> when 'true' ->
	      let <Header> =
		  call %% Line 895
		       'gen':%% Line 895
			     'format_status_header'
		      (%% Line 895
		       [83|[116|[97|[116|[117|[115|[32|[102|[111|[114|[32|[115|[116|[97|[116|[101|[32|[109|[97|[99|[104|[105|[110|[101]]]]]]]]]]]]]]]]]]]]]]]], %% Line 896
																				Name)
	      in  let <Log> =
		      call %% Line 897
			   'sys':%% Line 897
				 'get_log'
			  (%% Line 897
			   Debug)
		  in  let <_6> =
			  case %% Line 899
			       apply 'format_status'/4
				   (_0, Mod, PDict, StateData) of
			    %% Line 900
			    <S>
				when call 'erlang':'is_list'
				      (S) ->
				S
			    %% Line 901
			    <S> when 'true' ->
				[S|[]]
			  end
		      in  %% Line 903
			  [{'header',Header}|%% Line 904
					     [{'data',[{[83|[116|[97|[116|[117|[115]]]]]],SysState}|%% Line 905
												    [{[80|[97|[114|[101|[110|[116]]]]]],Parent}|%% Line 906
																		[{[76|[111|[103|[103|[101|[100|[32|[101|[118|[101|[110|[116|[115]]]]]]]]]]]]],Log}|%% Line 907
																												   [{[83|[116|[97|[116|[101|[78|[97|[109|[101]]]]]]]]],StateName}|[]]]]]}|_6]]
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_2})
	    -| ['compiler_generated'] )
	end
'format_status'/4 =
    %% Line 910
    fun (_0,_1,_2,_3) ->
	let <_5> =
	    case _0 of
	      %% Line 912
	      <'terminate'> when 'true' ->
		  _3
	      %% Line 913
	      <_14> when 'true' ->
		  [{'data',[{[83|[116|[97|[116|[101|[68|[97|[116|[97]]]]]]]]],_3}|[]]}|[]]
	    end
	in  %% Line 915
	    case call 'erlang':'function_exported'
		     (_1, 'format_status', 2) of
	      %% Line 916
	      <'true'> when 'true' ->
		  let <_7> =
		      catch
			  %% Line 917
			  call _1:'format_status'
			      (_0, [_2|[_3|[]]])
		  in  %% Line 917
		      case _7 of
			%% Line 918
			<{'EXIT',_15}> when 'true' ->
			    _5
			%% Line 919
			<Else> when 'true' ->
			    Else
		      end
	      %% Line 921
	      <_16> when 'true' ->
		  _5
	    end
'behaviour_info'/1 =
    fun (_0) ->
	case _0 of
	  <'callbacks'> when 'true' ->
	      [{'init',1}|[{'handle_event',3}|[{'handle_sync_event',4}|[{'handle_info',3}|[{'terminate',3}|[{'code_change',4}|[{'format_status',2}]]]]]]]
	  <'optional_callbacks'> when 'true' ->
	      [{'handle_info',3}|[{'terminate',3}|[{'code_change',4}|[{'format_status',2}]]]]
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'behaviour_info',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('gen_fsm')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('gen_fsm', _0)
end