module 'erl_lint' ['bool_option'/4,
		   'exprs'/2,
		   'exprs_opt'/3,
		   'format_error'/1,
		   'is_guard_expr'/1,
		   'is_guard_test'/1,
		   'is_guard_test'/2,
		   'is_guard_test'/3,
		   'is_pattern_expr'/1,
		   'module'/1,
		   'module'/2,
		   'module'/3,
		   'module_info'/0,
		   'module_info'/1,
		   'used_vars'/2,
		   'value_option'/3,
		   'value_option'/7]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[101|[114|[108|[95|[108|[105|[110|[116|[46|[101|[114|[108]]]]]]]]]]]]]]]],1}],
		%% Line 38
		'removed' =
		    %% Line 38
		    [{'modify_line',2,[117|[115|[101|[32|[101|[114|[108|[95|[112|[97|[114|[115|[101|[58|[109|[97|[112|[95|[97|[110|[110|[111|[47|[50|[32|[105|[110|[115|[116|[101|[97|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}],
		%% Line 46
		'spec' =
		    %% Line 46
		    [{{'bool_option',4},[{'type',46,'fun',[{'type',46,'product',[{'type',46,'atom',[]}|[{'type',46,'atom',[]}|[{'type',46,'boolean',[]}|[{'type',46,'list',[{'remote_type',46,[{'atom',46,'compile'}|[{'atom',46,'option'}|[[]]]]}]}]]]]}|[{'type',46,'boolean',[]}]]}]}],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[47|[117|[115|[114|[47|[108|[111|[99|[97|[108|[47|[67|[101|[108|[108|[97|[114|[47|[101|[114|[108|[97|[110|[103|[47|[50|[50|[46|[50|[47|[108|[105|[98|[47|[101|[114|[108|[97|[110|[103|[47|[108|[105|[98|[47|[115|[116|[100|[108|[105|[98|[45|[51|[46|[49|[49|[47|[105|[110|[99|[108|[117|[100|[101|[47|[101|[114|[108|[95|[98|[105|[116|[115|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 23
		'type' =
		    %% Line 23
		    [{'bt_endian',{'type',23,'union',[{'atom',23,'big'}|[{'atom',23,'little'}|[{'atom',23,'native'}]]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'bt_sign',{'type',24,'union',[{'atom',24,'signed'}|[{'atom',24,'unsigned'}]]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'bt_type',{'type',25,'union',[{'atom',25,'integer'}|[{'atom',25,'float'}|[{'atom',25,'binary'}|[{'atom',25,'utf8'}|[{'atom',25,'utf16'}|[{'atom',25,'utf32'}]]]]]]},[]}],
		%% Line 26
		'type' =
		    %% Line 26
		    [{'bt_unit',{'type',26,'range',[{'integer',26,1}|[{'integer',26,256}]]},[]}],
		%% Line 28
		'record' =
		    %% Line 28
		    [{'bittype',[{'typed_record_field',{'record_field',29,{'atom',29,'type'}},{'type',29,'union',[{'user_type',29,'bt_type',[]}|[{'atom',29,'undefined'}]]}}|[{'typed_record_field',{'record_field',30,{'atom',30,'unit'}},{'type',30,'union',[{'user_type',30,'bt_unit',[]}|[{'atom',30,'undefined'}]]}}|[{'typed_record_field',{'record_field',31,{'atom',31,'sign'}},{'type',31,'union',[{'user_type',31,'bt_sign',[]}|[{'atom',31,'undefined'}]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'endian'}},{'type',32,'union',[{'user_type',32,'bt_endian',[]}|[{'atom',32,'undefined'}]]}}]]]]}],
		%% Line 35
		'record' =
		    %% Line 35
		    [{'bitdefault',[{'record_field',36,{'atom',36,'integer'}}|[{'record_field',37,{'atom',37,'float'}}|[{'record_field',38,{'atom',38,'binary'}}]]]}],
		%% Line 78
		'file' =
		    %% Line 78
		    [{[115|[114|[99|[47|[101|[114|[108|[95|[108|[105|[110|[116|[46|[101|[114|[108]]]]]]]]]]]]]]]],78}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'line',{'remote_type',82,[{'atom',82,'erl_anno'}|[{'atom',82,'anno'}|[[]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'fa',{'type',83,'tuple',[{'type',83,'atom',[]}|[{'type',83,'arity',[]}]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'ta',{'type',84,'tuple',[{'type',84,'atom',[]}|[{'type',84,'arity',[]}]]},[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{'module_or_mfa',{'type',86,'union',[{'type',86,'module',[]}|[{'type',86,'mfa',[]}]]},[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{'gexpr_context',{'type',88,'union',[{'atom',88,'guard'}|[{'atom',88,'bin_seg_size'}|[{'atom',88,'map_key'}]]]},[]}],
		%% Line 90
		'record' =
		    %% Line 90
		    [{'typeinfo',[{'record_field',90,{'atom',90,'attr'}}|[{'record_field',90,{'atom',90,'line'}}]]}],
		%% Line 94
		'record' =
		    %% Line 94
		    [{'usage',[{'record_field',95,{'atom',95,'calls'},{'call',95,{'remote',95,{'atom',95,'maps'},{'atom',95,'new'}},[]}}|[{'record_field',96,{'atom',96,'imported'},{'nil',96}}|[{'typed_record_field',{'record_field',97,{'atom',97,'used_records'},{'call',97,{'remote',97,{'atom',97,'gb_sets'},{'atom',97,'new'}},[]}},{'remote_type',98,[{'atom',98,'gb_sets'}|[{'atom',98,'set'}|[[{'type',98,'atom',[]}]]]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'used_types'},{'call',99,{'remote',99,{'atom',99,'maps'},{'atom',99,'new'}},[]}},{'type',100,'map',[{'type',100,'map_field_exact',[{'user_type',100,'ta',[]}|[{'user_type',100,'line',[]}]]}]}}]]]]}],
		%% Line 107
		'record' =
		    %% Line 107
		    [{'lint',[{'typed_record_field',{'record_field',107,{'atom',107,'state'},{'atom',107,'start'}},{'type',107,'union',[{'atom',107,'start'}|[{'atom',107,'attribute'}|[{'atom',107,'function'}]]]}}|[{'record_field',108,{'atom',108,'module'},{'atom',108,''}}|[{'record_field',109,{'atom',109,'behaviour'},{'nil',109}}|[{'typed_record_field',{'record_field',110,{'atom',110,'exports'},{'call',110,{'remote',110,{'atom',110,'gb_sets'},{'atom',110,'empty'}},[]}},{'remote_type',110,[{'atom',110,'gb_sets'}|[{'atom',110,'set'}|[[{'user_type',110,'fa',[]}]]]]}}|[{'typed_record_field',{'record_field',111,{'atom',111,'imports'},{'nil',111}},{'remote_type',111,[{'atom',111,'orddict'}|[{'atom',111,'orddict'}|[[{'user_type',111,'fa',[]}|[{'type',111,'module',[]}]]]]]}}|[{'record_field',112,{'atom',112,'compile'},{'nil',112}}|[{'typed_record_field',{'record_field',113,{'atom',113,'records'},{'call',113,{'remote',113,{'atom',113,'maps'},{'atom',113,'new'}},[]}},{'type',114,'map',[{'type',114,'map_field_assoc',[{'type',114,'atom',[]}|[{'type',114,'tuple',[{'user_type',114,'line',[]}|[{'ann_type',114,[{'var',114,'Fields'}|[{'type',114,'term',[]}]]}]]}]]}]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'locals'},{'call',115,{'remote',115,{'atom',115,'gb_sets'},{'atom',115,'empty'}},[]}},{'remote_type',116,[{'atom',116,'gb_sets'}|[{'atom',116,'set'}|[[{'user_type',116,'fa',[]}]]]]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'no_auto'},{'call',117,{'remote',117,{'atom',117,'gb_sets'},{'atom',117,'empty'}},[]}},{'type',118,'union',[{'remote_type',118,[{'atom',118,'gb_sets'}|[{'atom',118,'set'}|[[{'user_type',118,'fa',[]}]]]]}|[{'atom',118,'all'}]]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'defined'},{'call',119,{'remote',119,{'atom',119,'gb_sets'},{'atom',119,'empty'}},[]}},{'remote_type',120,[{'atom',120,'gb_sets'}|[{'atom',120,'set'}|[[{'user_type',120,'fa',[]}]]]]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'on_load'},{'nil',121}},{'type',121,'list',[{'user_type',121,'fa',[]}]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'on_load_line'},{'call',122,{'remote',122,{'atom',122,'erl_anno'},{'atom',122,'new'}},[{'integer',122,0}]}},{'remote_type',123,[{'atom',123,'erl_anno'}|[{'atom',123,'anno'}|[[]]]]}}|[{'record_field',124,{'atom',124,'clashes'},{'nil',124}}|[{'record_field',125,{'atom',125,'not_deprecated'},{'nil',125}}|[{'typed_record_field',{'record_field',126,{'atom',126,'not_removed'},{'call',126,{'remote',126,{'atom',126,'gb_sets'},{'atom',126,'empty'}},[]}},{'remote_type',127,[{'atom',127,'gb_sets'}|[{'atom',127,'set'}|[[{'user_type',127,'module_or_mfa',[]}]]]]}}|[{'record_field',128,{'atom',128,'func'},{'nil',128}}|[{'record_field',129,{'atom',129,'warn_format'},{'integer',129,0}}|[{'record_field',130,{'atom',130,'enabled_warnings'},{'nil',130}}|[{'record_field',131,{'atom',131,'nowarn_bif_clash'},{'nil',131}}|[{'record_field',132,{'atom',132,'errors'},{'nil',132}}|[{'record_field',133,{'atom',133,'warnings'},{'nil',133}}|[{'typed_record_field',{'record_field',134,{'atom',134,'file'},{'string',134,[]}},{'type',134,'string',[]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'recdef_top'},{'atom',135,'false'}},{'type',135,'boolean',[]}}|[{'typed_record_field',{'record_field',137,{'atom',137,'xqlc'},{'atom',137,'false'}},{'type',137,'boolean',[]}}|[{'typed_record_field',{'record_field',138,{'atom',138,'called'},{'nil',138}},{'type',138,'list',[{'type',138,'tuple',[{'user_type',138,'fa',[]}|[{'user_type',138,'line',[]}]]}]}}|[{'typed_record_field',{'record_field',139,{'atom',139,'usage'},{'record',139,'usage',[]}},{'type',139,'record',[{'atom',139,'usage'}]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'specs'},{'call',140,{'remote',140,{'atom',140,'maps'},{'atom',140,'new'}},[]}},{'type',141,'map',[{'type',141,'map_field_assoc',[{'type',141,'mfa',[]}|[{'user_type',141,'line',[]}]]}]}}|[{'typed_record_field',{'record_field',142,{'atom',142,'callbacks'},{'call',142,{'remote',142,{'atom',142,'maps'},{'atom',142,'new'}},[]}},{'type',143,'map',[{'type',143,'map_field_assoc',[{'type',143,'mfa',[]}|[{'user_type',143,'line',[]}]]}]}}|[{'typed_record_field',{'record_field',144,{'atom',144,'optional_callbacks'},{'call',144,{'remote',144,{'atom',144,'maps'},{'atom',144,'new'}},[]}},{'type',145,'map',[{'type',145,'map_field_assoc',[{'type',145,'mfa',[]}|[{'user_type',145,'line',[]}]]}]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'types'},{'call',146,{'remote',146,{'atom',146,'maps'},{'atom',146,'new'}},[]}},{'type',147,'map',[{'type',147,'map_field_assoc',[{'user_type',147,'ta',[]}|[{'type',147,'record',[{'atom',147,'typeinfo'}]}]]}]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'exp_types'},{'call',148,{'remote',148,{'atom',148,'gb_sets'},{'atom',148,'empty'}},[]}},{'remote_type',149,[{'atom',149,'gb_sets'}|[{'atom',149,'set'}|[[{'user_type',149,'ta',[]}]]]]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'in_try_head'},{'atom',150,'false'}},{'type',150,'boolean',[]}}|[{'typed_record_field',{'record_field',151,{'atom',151,'bvt'},{'atom',151,'none'}},{'type',151,'union',[{'atom',151,'none'}|[{'type',151,'list',[{'type',151,'any',[]}]}]]}}|[{'typed_record_field',{'record_field',152,{'atom',152,'gexpr_context'},{'atom',152,'guard'}},{'user_type',153,'gexpr_context',[]}}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}],
		%% Line 156
		'type' =
		    %% Line 156
		    [{'lint_state',{'type',156,'record',[{'atom',156,'lint'}]},[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'error_description',{'type',157,'term',[]},[]}],
		%% Line 158
		'type' =
		    %% Line 158
		    [{'error_info',{'type',158,'tuple',[{'remote_type',158,[{'atom',158,'erl_anno'}|[{'atom',158,'line'}|[[]]]]}|[{'type',158,'module',[]}|[{'user_type',158,'error_description',[]}]]]},[]}],
		%% Line 163
		'spec' =
		    %% Line 163
		    [{{'format_error',1},[{'type',163,'bounded_fun',[{'type',163,'fun',[{'type',163,'product',[{'var',163,'ErrorDescriptor'}]}|[{'remote_type',163,[{'atom',163,'io_lib'}|[{'atom',163,'chars'}|[[]]]]}]]}|[[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'ErrorDescriptor'}|[{'user_type',164,'error_description',[]}]]]]}]]]}]}],
		%% Line 514
		'spec' =
		    %% Line 514
		    [{{'module',1},[{'type',514,'bounded_fun',[{'type',514,'fun',[{'type',514,'product',[{'var',514,'AbsForms'}]}|[{'type',514,'union',[{'type',514,'tuple',[{'atom',514,'ok'}|[{'var',514,'Warnings'}]]}|[{'type',514,'tuple',[{'atom',514,'error'}|[{'var',514,'Errors'}|[{'var',514,'Warnings'}]]]}]]}]]}|[[{'type',515,'constraint',[{'atom',515,'is_subtype'}|[[{'var',515,'AbsForms'}|[{'type',515,'list',[{'type',515,'union',[{'remote_type',515,[{'atom',515,'erl_parse'}|[{'atom',515,'abstract_form'}|[[]]]]}|[{'remote_type',515,[{'atom',515,'erl_parse'}|[{'atom',515,'form_info'}|[[]]]]}]]}]}]]]]}|[{'type',516,'constraint',[{'atom',516,'is_subtype'}|[[{'var',516,'Warnings'}|[{'type',516,'list',[{'type',516,'tuple',[{'remote_type',516,[{'atom',516,'file'}|[{'atom',516,'filename'}|[[]]]]}|[{'type',516,'list',[{'var',516,'ErrorInfo'}]}]]}]}]]]]}|[{'type',517,'constraint',[{'atom',517,'is_subtype'}|[[{'var',517,'Errors'}|[{'type',517,'list',[{'type',517,'tuple',[{'ann_type',517,[{'var',517,'FileName2'}|[{'remote_type',517,[{'atom',517,'file'}|[{'atom',517,'filename'}|[[]]]]}]]}|[{'type',517,'list',[{'var',517,'ErrorInfo'}]}]]}]}]]]]}|[{'type',518,'constraint',[{'atom',518,'is_subtype'}|[[{'var',518,'ErrorInfo'}|[{'user_type',518,'error_info',[]}]]]]}]]]]]]}]}],
		%% Line 525
		'spec' =
		    %% Line 525
		    [{{'module',2},[{'type',525,'bounded_fun',[{'type',525,'fun',[{'type',525,'product',[{'var',525,'AbsForms'}|[{'var',525,'FileName'}]]}|[{'type',526,'union',[{'type',526,'tuple',[{'atom',526,'ok'}|[{'var',526,'Warnings'}]]}|[{'type',526,'tuple',[{'atom',526,'error'}|[{'var',526,'Errors'}|[{'var',526,'Warnings'}]]]}]]}]]}|[[{'type',527,'constraint',[{'atom',527,'is_subtype'}|[[{'var',527,'AbsForms'}|[{'type',527,'list',[{'type',527,'union',[{'remote_type',527,[{'atom',527,'erl_parse'}|[{'atom',527,'abstract_form'}|[[]]]]}|[{'remote_type',527,[{'atom',527,'erl_parse'}|[{'atom',527,'form_info'}|[[]]]]}]]}]}]]]]}|[{'type',528,'constraint',[{'atom',528,'is_subtype'}|[[{'var',528,'FileName'}|[{'type',528,'union',[{'type',528,'atom',[]}|[{'type',528,'string',[]}]]}]]]]}|[{'type',529,'constraint',[{'atom',529,'is_subtype'}|[[{'var',529,'Warnings'}|[{'type',529,'list',[{'type',529,'tuple',[{'remote_type',529,[{'atom',529,'file'}|[{'atom',529,'filename'}|[[]]]]}|[{'type',529,'list',[{'var',529,'ErrorInfo'}]}]]}]}]]]]}|[{'type',530,'constraint',[{'atom',530,'is_subtype'}|[[{'var',530,'Errors'}|[{'type',530,'list',[{'type',530,'tuple',[{'ann_type',530,[{'var',530,'FileName2'}|[{'remote_type',530,[{'atom',530,'file'}|[{'atom',530,'filename'}|[[]]]]}]]}|[{'type',530,'list',[{'var',530,'ErrorInfo'}]}]]}]}]]]]}|[{'type',531,'constraint',[{'atom',531,'is_subtype'}|[[{'var',531,'ErrorInfo'}|[{'user_type',531,'error_info',[]}]]]]}]]]]]]]}]}],
		%% Line 538
		'spec' =
		    %% Line 538
		    [{{'module',3},[{'type',538,'bounded_fun',[{'type',538,'fun',[{'type',538,'product',[{'var',538,'AbsForms'}|[{'var',538,'FileName'}|[{'var',538,'CompileOptions'}]]]}|[{'type',539,'union',[{'type',539,'tuple',[{'atom',539,'ok'}|[{'var',539,'Warnings'}]]}|[{'type',539,'tuple',[{'atom',539,'error'}|[{'var',539,'Errors'}|[{'var',539,'Warnings'}]]]}]]}]]}|[[{'type',540,'constraint',[{'atom',540,'is_subtype'}|[[{'var',540,'AbsForms'}|[{'type',540,'list',[{'type',540,'union',[{'remote_type',540,[{'atom',540,'erl_parse'}|[{'atom',540,'abstract_form'}|[[]]]]}|[{'remote_type',540,[{'atom',540,'erl_parse'}|[{'atom',540,'form_info'}|[[]]]]}]]}]}]]]]}|[{'type',541,'constraint',[{'atom',541,'is_subtype'}|[[{'var',541,'FileName'}|[{'type',541,'union',[{'type',541,'atom',[]}|[{'type',541,'string',[]}]]}]]]]}|[{'type',542,'constraint',[{'atom',542,'is_subtype'}|[[{'var',542,'CompileOptions'}|[{'type',542,'list',[{'remote_type',542,[{'atom',542,'compile'}|[{'atom',542,'option'}|[[]]]]}]}]]]]}|[{'type',543,'constraint',[{'atom',543,'is_subtype'}|[[{'var',543,'Warnings'}|[{'type',543,'list',[{'type',543,'tuple',[{'remote_type',543,[{'atom',543,'file'}|[{'atom',543,'filename'}|[[]]]]}|[{'type',543,'list',[{'var',543,'ErrorInfo'}]}]]}]}]]]]}|[{'type',544,'constraint',[{'atom',544,'is_subtype'}|[[{'var',544,'Errors'}|[{'type',544,'list',[{'type',544,'tuple',[{'ann_type',544,[{'var',544,'FileName2'}|[{'remote_type',544,[{'atom',544,'file'}|[{'atom',544,'filename'}|[[]]]]}]]}|[{'type',544,'list',[{'var',544,'ErrorInfo'}]}]]}]}]]]]}|[{'type',545,'constraint',[{'atom',545,'is_subtype'}|[[{'var',545,'ErrorInfo'}|[{'user_type',545,'error_info',[]}]]]]}]]]]]]]]}]}],
		%% Line 1376
		'spec' =
		    %% Line 1376
		    [{{'export',3},[{'type',1376,'fun',[{'type',1376,'product',[{'user_type',1376,'line',[]}|[{'type',1376,'list',[{'user_type',1376,'fa',[]}]}|[{'user_type',1376,'lint_state',[]}]]]}|[{'user_type',1376,'lint_state',[]}]]}]}],
		%% Line 1394
		'spec' =
		    %% Line 1394
		    [{{'export_type',3},[{'type',1394,'fun',[{'type',1394,'product',[{'user_type',1394,'line',[]}|[{'type',1394,'list',[{'user_type',1394,'ta',[]}]}|[{'user_type',1394,'lint_state',[]}]]]}|[{'user_type',1394,'lint_state',[]}]]}]}],
		%% Line 1417
		'spec' =
		    %% Line 1417
		    [{{'exports',1},[{'type',1417,'fun',[{'type',1417,'product',[{'user_type',1417,'lint_state',[]}]}|[{'remote_type',1417,[{'atom',1417,'gb_sets'}|[{'atom',1417,'set'}|[[{'user_type',1417,'fa',[]}]]]]}]]}]}],
		%% Line 1425
		'type' =
		    %% Line 1425
		    [{'import',{'type',1425,'union',[{'type',1425,'tuple',[{'type',1425,'module',[]}|[{'type',1425,'list',[{'user_type',1425,'fa',[]}]}]]}|[{'type',1425,'module',[]}]]},[]}],
		%% Line 1426
		'spec' =
		    %% Line 1426
		    [{{'import',3},[{'type',1426,'fun',[{'type',1426,'product',[{'user_type',1426,'line',[]}|[{'user_type',1426,'import',[]}|[{'user_type',1426,'lint_state',[]}]]]}|[{'user_type',1426,'lint_state',[]}]]}]}],
		%% Line 1489
		'spec' =
		    %% Line 1489
		    [{{'imported',3},[{'type',1489,'fun',[{'type',1489,'product',[{'type',1489,'atom',[]}|[{'type',1489,'arity',[]}|[{'user_type',1489,'lint_state',[]}]]]}|[{'type',1489,'union',[{'type',1489,'tuple',[{'atom',1489,'yes'}|[{'type',1489,'module',[]}]]}|[{'atom',1489,'no'}]]}]]}]}],
		%% Line 1497
		'spec' =
		    %% Line 1497
		    [{{'on_load',3},[{'type',1497,'fun',[{'type',1497,'product',[{'remote_type',1497,[{'atom',1497,'erl_anno'}|[{'atom',1497,'anno'}|[[]]]]}|[{'user_type',1497,'fa',[]}|[{'user_type',1497,'lint_state',[]}]]]}|[{'user_type',1497,'lint_state',[]}]]}]}],
		%% Line 1529
		'spec' =
		    %% Line 1529
		    [{{'call_function',4},[{'type',1529,'fun',[{'type',1529,'product',[{'user_type',1529,'line',[]}|[{'type',1529,'atom',[]}|[{'type',1529,'arity',[]}|[{'user_type',1529,'lint_state',[]}]]]]}|[{'user_type',1529,'lint_state',[]}]]}]}],
		%% Line 1549
		'spec' =
		    %% Line 1549
		    [{{'define_function',4},[{'type',1549,'fun',[{'type',1549,'product',[{'user_type',1549,'line',[]}|[{'type',1549,'atom',[]}|[{'type',1549,'arity',[]}|[{'user_type',1549,'lint_state',[]}]]]]}|[{'user_type',1549,'lint_state',[]}]]}]}],
		%% Line 2187
		'spec' =
		    %% Line 2187
		    [{{'is_guard_test',1},[{'type',2187,'bounded_fun',[{'type',2187,'fun',[{'type',2187,'product',[{'var',2187,'Expr'}]}|[{'type',2187,'boolean',[]}]]}|[[{'type',2188,'constraint',[{'atom',2188,'is_subtype'}|[[{'var',2188,'Expr'}|[{'remote_type',2188,[{'atom',2188,'erl_parse'}|[{'atom',2188,'abstract_expr'}|[[]]]]}]]]]}]]]}]}],
		%% Line 2208
		'spec' =
		    %% Line 2208
		    [{{'is_guard_test',3},[{'type',2208,'bounded_fun',[{'type',2208,'fun',[{'type',2208,'product',[{'var',2208,'Expr'}|[{'var',2208,'Forms'}|[{'var',2208,'IsOverridden'}]]]}|[{'type',2208,'boolean',[]}]]}|[[{'type',2209,'constraint',[{'atom',2209,'is_subtype'}|[[{'var',2209,'Expr'}|[{'remote_type',2209,[{'atom',2209,'erl_parse'}|[{'atom',2209,'abstract_expr'}|[[]]]]}]]]]}|[{'type',2210,'constraint',[{'atom',2210,'is_subtype'}|[[{'var',2210,'Forms'}|[{'type',2210,'list',[{'type',2210,'union',[{'remote_type',2210,[{'atom',2210,'erl_parse'}|[{'atom',2210,'abstract_form'}|[[]]]]}|[{'remote_type',2210,[{'atom',2210,'erl_parse'}|[{'atom',2210,'form_info'}|[[]]]]}]]}]}]]]]}|[{'type',2211,'constraint',[{'atom',2211,'is_subtype'}|[[{'var',2211,'IsOverridden'}|[{'type',2211,'fun',[{'type',2211,'product',[{'user_type',2211,'fa',[]}]}|[{'type',2211,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 2849
		'dialyzer' =
		    %% Line 2849
		    [{'no_match',{'type_def',6}}],
		%% Line 3867
		'dialyzer' =
		    %% Line 3867
		    [{'no_match',{'deprecated_function',5}}],
		%% Line 3907
		'dialyzer' =
		    %% Line 3907
		    [{'no_match',{'deprecated_type',5}}]]
'bool_option'/4 =
    %% Line 48
    fun (_0,_1,_2,_3) ->
	let <_8> =
	    fun (_5,_4) ->
		%% Line 49
		case <_5,_4> of
		  <Opt,_X_Def>
		      when call 'erlang':'=:='
			    (Opt,
			     _0) ->
		      'true'
		  %% Line 50
		  <Opt,_X_Def>
		      when call 'erlang':'=:='
			    (Opt,
			     _1) ->
		      'false'
		  %% Line 51
		  <_X_Opt,Def> when 'true' ->
		      Def
		end
	in  %% Line 49
	    call 'lists':'foldl'
		(_8, _2, _3)
'value_option'/3 =
    %% Line 54
    fun (_0,_1,_2) ->
	let <_7> =
	    fun (_4,_3) ->
		%% Line 55
		case <_4,_3> of
		  <{Opt,Val},_X_Def>
		      when call 'erlang':'=:='
			    (Opt,
			     _0) ->
		      Val
		  %% Line 56
		  <_X_Opt,Def> when 'true' ->
		      Def
		end
	in  %% Line 55
	    call 'lists':'foldl'
		(_7, _1, _2)
'value_option'/7 =
    %% Line 59
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	let <_11> =
	    fun (_8,_7) ->
		%% Line 60
		case <_8,_7> of
		  <{Opt,Val},_X_Def>
		      when call 'erlang':'=:='
			    (Opt,
			     _0) ->
		      Val
		  %% Line 61
		  <Opt,_X_Def>
		      when call 'erlang':'=:='
			    (Opt,
			     _2) ->
		      _3
		  %% Line 62
		  <Opt,_X_Def>
		      when call 'erlang':'=:='
			    (Opt,
			     _4) ->
		      _5
		  %% Line 63
		  <_X_Opt,Def> when 'true' ->
		      Def
		end
	in  %% Line 60
	    call 'lists':'foldl'
		(_11, _1, _6)
'format_error'/1 =
    %% Line 166
    fun (_0) ->
	case _0 of
	  <'undefined_module'> when 'true' ->
	      %% Line 167
	      [110|[111|[32|[109|[111|[100|[117|[108|[101|[32|[100|[101|[102|[105|[110|[105|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]
	  %% Line 168
	  <'redefine_module'> when 'true' ->
	      %% Line 169
	      [114|[101|[100|[101|[102|[105|[110|[105|[110|[103|[32|[109|[111|[100|[117|[108|[101]]]]]]]]]]]]]]]]]
	  %% Line 170
	  <'pmod_unsupported'> when 'true' ->
	      %% Line 171
	      [112|[97|[114|[97|[109|[101|[116|[101|[114|[105|[122|[101|[100|[32|[109|[111|[100|[117|[108|[101|[115|[32|[97|[114|[101|[32|[110|[111|[32|[108|[111|[110|[103|[101|[114|[32|[115|[117|[112|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 174
	  <'non_latin1_module_unsupported'> when 'true' ->
	      %% Line 175
	      [109|[111|[100|[117|[108|[101|[32|[110|[97|[109|[101|[115|[32|[119|[105|[116|[104|[32|[110|[111|[110|[45|[108|[97|[116|[105|[110|[49|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114|[115|[32|[97|[114|[101|[32|[110|[111|[116|[32|[115|[117|[112|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 177
	  <'invalid_call'> when 'true' ->
	      %% Line 178
	      [105|[110|[118|[97|[108|[105|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[99|[97|[108|[108]]]]]]]]]]]]]]]]]]]]]
	  %% Line 179
	  <'invalid_record'> when 'true' ->
	      %% Line 180
	      [105|[110|[118|[97|[108|[105|[100|[32|[114|[101|[99|[111|[114|[100|[32|[101|[120|[112|[114|[101|[115|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 182
	  <{'attribute',A}> when 'true' ->
	      %% Line 183
	      call 'io_lib':'format'
		  ([97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[126|[116|[119|[32|[97|[102|[116|[101|[114|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[100|[101|[102|[105|[110|[105|[116|[105|[111|[110|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [A|[]])
	  %% Line 184
	  <{'missing_qlc_hrl',A}> when 'true' ->
	      %% Line 185
	      call 'io_lib':'format'
		  ([113|[108|[99|[58|[113|[47|[126|[119|[32|[99|[97|[108|[108|[101|[100|[44|[32|[98|[117|[116|[32|[34|[113|[108|[99|[46|[104|[114|[108|[34|[32|[110|[111|[116|[32|[105|[110|[99|[108|[117|[100|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [A|[]])
	  %% Line 186
	  <{'redefine_import',{{F,A},M}}> when 'true' ->
	      %% Line 187
	      call 'io_lib':'format'
		  ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[105|[109|[112|[111|[114|[116|[101|[100|[32|[102|[114|[111|[109|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[M|[]]]])
	  %% Line 188
	  <{'bad_inline',{F,A}}> when 'true' ->
	      %% Line 189
	      call 'io_lib':'format'
		  ([105|[110|[108|[105|[110|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 190
	  <{'invalid_deprecated',D}> when 'true' ->
	      %% Line 191
	      call 'io_lib':'format'
		  ([98|[97|[100|[108|[121|[32|[102|[111|[114|[109|[101|[100|[32|[100|[101|[112|[114|[101|[99|[97|[116|[101|[100|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [D|[]])
	  %% Line 192
	  <{'bad_deprecated',{F,A}}> when 'true' ->
	      %% Line 193
	      call 'io_lib':'format'
		  ([100|[101|[112|[114|[101|[99|[97|[116|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100|[32|[111|[114|[32|[110|[111|[116|[32|[101|[120|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 194
																																								  [F|[A|[]]])
	  %% Line 195
	  <{'invalid_removed',D}> when 'true' ->
	      %% Line 196
	      call 'io_lib':'format'
		  ([98|[97|[100|[108|[121|[32|[102|[111|[114|[109|[101|[100|[32|[114|[101|[109|[111|[118|[101|[100|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [D|[]])
	  %% Line 197
	  <{'bad_removed',{F,A}}>
	      when let <_1> =
		    call 'erlang':'=:='
			(F, '_')
		in  let <_2> =
			call 'erlang':'=:='
			    (A, '_')
		    in  call 'erlang':'or'
			    (_1, _2) ->
	      %% Line 198
	      call 'io_lib':'format'
		  ([97|[116|[32|[108|[101|[97|[115|[116|[32|[111|[110|[101|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[109|[97|[116|[99|[104|[105|[110|[103|[32|[126|[116|[119|[47|[126|[119|[32|[105|[115|[32|[115|[116|[105|[108|[108|[32|[101|[120|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 199
																																										[F|[A|[]]])
	  %% Line 200
	  <{'bad_removed',{F,A}}> when 'true' ->
	      %% Line 201
	      call 'io_lib':'format'
		  ([114|[101|[109|[111|[118|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[105|[115|[32|[115|[116|[105|[108|[108|[32|[101|[120|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 202
																																   [F|[A|[]]])
	  %% Line 203
	  <{'bad_nowarn_unused_function',{F,A}}> when 'true' ->
	      %% Line 204
	      call 'io_lib':'format'
		  ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 205
	  <{'bad_nowarn_bif_clash',{F,A}}> when 'true' ->
	      %% Line 206
	      call 'io_lib':'format'
		  ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 207
	  <'disallowed_nowarn_bif_clash'> when 'true' ->
	      %% Line 208
	      call 'io_lib':'format'
		  ([99|[111|[109|[112|[105|[108|[101|[32|[100|[105|[114|[101|[99|[116|[105|[118|[101|[32|[110|[111|[119|[97|[114|[110|[95|[98|[105|[102|[95|[99|[108|[97|[115|[104|[32|[105|[115|[32|[110|[111|[32|[108|[111|[110|[103|[101|[114|[32|[97|[108|[108|[111|[119|[101|[100|[44|[126|[110|[32|[45|[32|[117|[115|[101|[32|[101|[120|[112|[108|[105|[99|[105|[116|[32|[109|[111|[100|[117|[108|[101|[32|[110|[97|[109|[101|[115|[32|[111|[114|[32|[45|[99|[111|[109|[112|[105|[108|[101|[40|[123|[110|[111|[95|[97|[117|[116|[111|[95|[105|[109|[112|[111|[114|[116|[44|[32|[91|[70|[47|[65|[93|[125|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 209
																																																																																									      [])
	  %% Line 210
	  <{'bad_on_load',Term}> when 'true' ->
	      %% Line 211
	      call 'io_lib':'format'
		  ([98|[97|[100|[108|[121|[32|[102|[111|[114|[109|[101|[100|[32|[111|[110|[95|[108|[111|[97|[100|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[58|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Term|[]])
	  %% Line 212
	  <'multiple_on_loads'> when 'true' ->
	      %% Line 213
	      [109|[111|[114|[101|[32|[116|[104|[97|[110|[32|[111|[110|[101|[32|[111|[110|[95|[108|[111|[97|[100|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 214
	  <{'bad_on_load_arity',{F,A}}> when 'true' ->
	      %% Line 215
	      call 'io_lib':'format'
		  ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[104|[97|[115|[32|[119|[114|[111|[110|[103|[32|[97|[114|[105|[116|[121|[32|[40|[109|[117|[115|[116|[32|[98|[101|[32|[48|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 216
	  <{'undefined_on_load',{F,A}}> when 'true' ->
	      %% Line 217
	      call 'io_lib':'format'
		  ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 219
	  <'export_all'> when 'true' ->
	      %% Line 220
	      [101|[120|[112|[111|[114|[116|[95|[97|[108|[108|[32|[102|[108|[97|[103|[32|[101|[110|[97|[98|[108|[101|[100|[32|[45|[32|[97|[108|[108|[32|[102|[117|[110|[99|[116|[105|[111|[110|[115|[32|[119|[105|[108|[108|[32|[98|[101|[32|[101|[120|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 221
	  <{'duplicated_export',{F,A}}> when 'true' ->
	      %% Line 222
	      call 'io_lib':'format'
		  ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[101|[120|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 223
	  <{'unused_import',{{F,A},M}}> when 'true' ->
	      %% Line 224
	      call 'io_lib':'format'
		  ([105|[109|[112|[111|[114|[116|[32|[126|[119|[58|[126|[116|[119|[47|[126|[119|[32|[105|[115|[32|[117|[110|[117|[115|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]], [M|[F|[A|[]]]])
	  %% Line 225
	  <{'undefined_function',{F,A}}> when 'true' ->
	      %% Line 226
	      call 'io_lib':'format'
		  ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 227
	  <{'redefine_function',{F,A}}> when 'true' ->
	      %% Line 228
	      call 'io_lib':'format'
		  ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 229
	  <{'define_import',{F,A}}> when 'true' ->
	      %% Line 230
	      call 'io_lib':'format'
		  ([100|[101|[102|[105|[110|[105|[110|[103|[32|[105|[109|[112|[111|[114|[116|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 231
	  <{'unused_function',{F,A}}> when 'true' ->
	      %% Line 232
	      call 'io_lib':'format'
		  ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[105|[115|[32|[117|[110|[117|[115|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 233
	  <{'call_to_redefined_bif',{F,A}}> when 'true' ->
	      %% Line 234
	      call 'io_lib':'format'
		  ([97|[109|[98|[105|[103|[117|[111|[117|[115|[32|[99|[97|[108|[108|[32|[111|[102|[32|[111|[118|[101|[114|[114|[105|[100|[100|[101|[110|[32|[97|[117|[116|[111|[45|[105|[109|[112|[111|[114|[116|[101|[100|[32|[66|[73|[70|[32|[126|[119|[47|[126|[119|[126|[110|[32|[45|[32|[117|[115|[101|[32|[101|[114|[108|[97|[110|[103|[58|[126|[119|[47|[126|[119|[32|[111|[114|[32|[34|[45|[99|[111|[109|[112|[105|[108|[101|[40|[123|[110|[111|[95|[97|[117|[116|[111|[95|[105|[109|[112|[111|[114|[116|[44|[91|[126|[119|[47|[126|[119|[93|[125|[41|[46|[34|[32|[116|[111|[32|[114|[101|[115|[111|[108|[118|[101|[32|[110|[97|[109|[101|[32|[99|[108|[97|[115|[104]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 236
																																																																																																		      [F|[A|[F|[A|[F|[A|[]]]]]]])
	  %% Line 237
	  <{'call_to_redefined_old_bif',{F,A}}> when 'true' ->
	      %% Line 238
	      call 'io_lib':'format'
		  ([97|[109|[98|[105|[103|[117|[111|[117|[115|[32|[99|[97|[108|[108|[32|[111|[102|[32|[111|[118|[101|[114|[114|[105|[100|[100|[101|[110|[32|[112|[114|[101|[32|[82|[49|[52|[32|[97|[117|[116|[111|[45|[105|[109|[112|[111|[114|[116|[101|[100|[32|[66|[73|[70|[32|[126|[119|[47|[126|[119|[126|[110|[32|[45|[32|[117|[115|[101|[32|[101|[114|[108|[97|[110|[103|[58|[126|[119|[47|[126|[119|[32|[111|[114|[32|[34|[45|[99|[111|[109|[112|[105|[108|[101|[40|[123|[110|[111|[95|[97|[117|[116|[111|[95|[105|[109|[112|[111|[114|[116|[44|[91|[126|[119|[47|[126|[119|[93|[125|[41|[46|[34|[32|[116|[111|[32|[114|[101|[115|[111|[108|[118|[101|[32|[110|[97|[109|[101|[32|[99|[108|[97|[115|[104]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 240
																																																																																																								 [F|[A|[F|[A|[F|[A|[]]]]]]])
	  %% Line 241
	  <{'redefine_old_bif_import',{F,A}}> when 'true' ->
	      %% Line 242
	      call 'io_lib':'format'
		  ([105|[109|[112|[111|[114|[116|[32|[100|[105|[114|[101|[99|[116|[105|[118|[101|[32|[111|[118|[101|[114|[114|[105|[100|[101|[115|[32|[112|[114|[101|[32|[82|[49|[52|[32|[97|[117|[116|[111|[45|[105|[109|[112|[111|[114|[116|[101|[100|[32|[66|[73|[70|[32|[126|[119|[47|[126|[119|[126|[110|[32|[45|[32|[117|[115|[101|[32|[34|[45|[99|[111|[109|[112|[105|[108|[101|[40|[123|[110|[111|[95|[97|[117|[116|[111|[95|[105|[109|[112|[111|[114|[116|[44|[91|[126|[119|[47|[126|[119|[93|[125|[41|[46|[34|[32|[116|[111|[32|[114|[101|[115|[111|[108|[118|[101|[32|[110|[97|[109|[101|[32|[99|[108|[97|[115|[104]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 244
																																																																																											      [F|[A|[F|[A|[]]]]])
	  %% Line 245
	  <{'redefine_bif_import',{F,A}}> when 'true' ->
	      %% Line 246
	      call 'io_lib':'format'
		  ([105|[109|[112|[111|[114|[116|[32|[100|[105|[114|[101|[99|[116|[105|[118|[101|[32|[111|[118|[101|[114|[114|[105|[100|[101|[115|[32|[97|[117|[116|[111|[45|[105|[109|[112|[111|[114|[116|[101|[100|[32|[66|[73|[70|[32|[126|[119|[47|[126|[119|[126|[110|[32|[45|[32|[117|[115|[101|[32|[34|[45|[99|[111|[109|[112|[105|[108|[101|[40|[123|[110|[111|[95|[97|[117|[116|[111|[95|[105|[109|[112|[111|[114|[116|[44|[91|[126|[119|[47|[126|[119|[93|[125|[41|[46|[34|[32|[116|[111|[32|[114|[101|[115|[111|[108|[118|[101|[32|[110|[97|[109|[101|[32|[99|[108|[97|[115|[104]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 247
																																																																																						   [F|[A|[F|[A|[]]]]])
	  %% Line 248
	  <{'deprecated',MFA,ReplacementMFA,Rel}> when 'true' ->
	      let <_3> =
		  apply %% Line 250
			'format_mfa'/1
		      (%% Line 250
		       MFA)
	      in  let <_4> =
		      apply %% Line 250
			    'format_mfa'/1
			  (%% Line 250
			   ReplacementMFA)
		  in  %% Line 249
		      call 'io_lib':'format'
			  ([126|[115|[32|[105|[115|[32|[100|[101|[112|[114|[101|[99|[97|[116|[101|[100|[32|[97|[110|[100|[32|[119|[105|[108|[108|[32|[98|[101|[32|[114|[101|[109|[111|[118|[101|[100|[32|[105|[110|[32|[126|[115|[59|[32|[117|[115|[101|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 250
																																							 [_3|[Rel|[_4|[]]]])
	  %% Line 251
	  <{'deprecated',MFA,String}>
	      when call 'erlang':'is_list'
		    (String) ->
	      let <_5> =
		  apply %% Line 252
			'format_mfa'/1
		      (%% Line 252
		       MFA)
	      in  %% Line 252
		  call 'io_lib':'format'
		      ([126|[115|[32|[105|[115|[32|[100|[101|[112|[114|[101|[99|[97|[116|[101|[100|[59|[32|[126|[115]]]]]]]]]]]]]]]]]]]], [_5|[String|[]]])
	  %% Line 253
	  <{'deprecated_type',{M1,F1,A1},String}>
	      when call 'erlang':'is_list'
		    (String) ->
	      let <_6> =
		  apply %% Line 255
			'gen_type_paren'/1
		      (%% Line 255
		       A1)
	      in  %% Line 254
		  call 'io_lib':'format'
		      ([116|[104|[101|[32|[116|[121|[112|[101|[32|[126|[112|[58|[126|[112|[126|[115|[32|[105|[115|[32|[100|[101|[112|[114|[101|[99|[97|[116|[101|[100|[59|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 255
																											   [M1|[F1|[_6|[String|[]]]]])
	  %% Line 256
	  <{'removed',MFA,ReplacementMFA,Rel}> when 'true' ->
	      let <_7> =
		  apply %% Line 258
			'format_mfa'/1
		      (%% Line 258
		       MFA)
	      in  let <_8> =
		      apply %% Line 258
			    'format_mfa'/1
			  (%% Line 258
			   ReplacementMFA)
		  in  %% Line 257
		      call 'io_lib':'format'
			  ([99|[97|[108|[108|[32|[116|[111|[32|[126|[115|[32|[119|[105|[108|[108|[32|[102|[97|[105|[108|[44|[32|[115|[105|[110|[99|[101|[32|[105|[116|[32|[119|[97|[115|[32|[114|[101|[109|[111|[118|[101|[100|[32|[105|[110|[32|[126|[115|[59|[32|[117|[115|[101|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 258
																																											 [_7|[Rel|[_8|[]]]])
	  %% Line 259
	  <{'removed',MFA,String}>
	      when call 'erlang':'is_list'
		    (String) ->
	      let <_9> =
		  apply %% Line 260
			'format_mfa'/1
		      (%% Line 260
		       MFA)
	      in  %% Line 260
		  call 'io_lib':'format'
		      ([126|[115|[32|[105|[115|[32|[114|[101|[109|[111|[118|[101|[100|[59|[32|[126|[115]]]]]]]]]]]]]]]]], [_9|[String|[]]])
	  %% Line 261
	  <{'removed_type',MNA,String}> when 'true' ->
	      let <_10> =
		  apply %% Line 262
			'format_mna'/1
		      (%% Line 262
		       MNA)
	      in  %% Line 262
		  call 'io_lib':'format'
		      ([116|[104|[101|[32|[116|[121|[112|[101|[32|[126|[115|[32|[105|[115|[32|[114|[101|[109|[111|[118|[101|[100|[59|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]], [_10|[String|[]]])
	  %% Line 263
	  <{'obsolete_guard',{F,A}}> when 'true' ->
	      %% Line 264
	      call 'io_lib':'format'
		  ([126|[112|[47|[126|[112|[32|[111|[98|[115|[111|[108|[101|[116|[101|[32|[40|[117|[115|[101|[32|[105|[115|[95|[126|[112|[47|[126|[112|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[F|[A|[]]]]])
	  %% Line 265
	  <{'obsolete_guard_overridden',Test}> when 'true' ->
	      %% Line 266
	      call 'io_lib':'format'
		  ([111|[98|[115|[111|[108|[101|[116|[101|[32|[126|[115|[47|[49|[32|[40|[109|[101|[97|[110|[105|[110|[103|[32|[105|[115|[95|[126|[115|[47|[49|[41|[32|[105|[115|[32|[105|[108|[108|[101|[103|[97|[108|[32|[119|[104|[101|[110|[32|[116|[104|[101|[114|[101|[32|[105|[115|[32|[97|[32|[108|[111|[99|[97|[108|[47|[105|[109|[112|[111|[114|[116|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[110|[97|[109|[101|[100|[32|[105|[115|[95|[126|[112|[47|[49|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 268
																																																																							 [Test|[Test|[Test|[]]]])
	  %% Line 269
	  <{'too_many_arguments',Arity}> when 'true' ->
	      %% Line 270
	      call 'io_lib':'format'
		  ([116|[111|[111|[32|[109|[97|[110|[121|[32|[97|[114|[103|[117|[109|[101|[110|[116|[115|[32|[40|[126|[119|[41|[32|[45|[32|[109|[97|[120|[105|[109|[117|[109|[32|[97|[108|[108|[111|[119|[101|[100|[32|[105|[115|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 271
																																			       [Arity|[255]])
	  %% Line 273
	  <'illegal_pattern'> when 'true' ->
	      [105|[108|[108|[101|[103|[97|[108|[32|[112|[97|[116|[116|[101|[114|[110]]]]]]]]]]]]]]]
	  %% Line 274
	  <'illegal_map_key'> when 'true' ->
	      [105|[108|[108|[101|[103|[97|[108|[32|[109|[97|[112|[32|[107|[101|[121|[32|[105|[110|[32|[112|[97|[116|[116|[101|[114|[110]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 275
	  <'illegal_bin_pattern'> when 'true' ->
	      %% Line 276
	      [98|[105|[110|[97|[114|[121|[32|[112|[97|[116|[116|[101|[114|[110|[115|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[109|[97|[116|[99|[104|[101|[100|[32|[105|[110|[32|[112|[97|[114|[97|[108|[108|[101|[108|[32|[117|[115|[105|[110|[103|[32|[39|[61|[39]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 277
	  <'illegal_expr'> when 'true' ->
	      [105|[108|[108|[101|[103|[97|[108|[32|[101|[120|[112|[114|[101|[115|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]
	  %% Line 278
	  <{'illegal_guard_local_call',{F,A}}> when 'true' ->
	      %% Line 279
	      call 'io_lib':'format'
		  ([99|[97|[108|[108|[32|[116|[111|[32|[108|[111|[99|[97|[108|[47|[105|[109|[112|[111|[114|[116|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[105|[115|[32|[105|[108|[108|[101|[103|[97|[108|[32|[105|[110|[32|[103|[117|[97|[114|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 280
																																											       [F|[A|[]]])
	  %% Line 281
	  <'illegal_guard_expr'> when 'true' ->
	      [105|[108|[108|[101|[103|[97|[108|[32|[103|[117|[97|[114|[100|[32|[101|[120|[112|[114|[101|[115|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 283
	  <'illegal_map_construction'> when 'true' ->
	      %% Line 284
	      [111|[110|[108|[121|[32|[97|[115|[115|[111|[99|[105|[97|[116|[105|[111|[110|[32|[111|[112|[101|[114|[97|[116|[111|[114|[115|[32|[39|[61|[62|[39|[32|[97|[114|[101|[32|[97|[108|[108|[111|[119|[101|[100|[32|[105|[110|[32|[109|[97|[112|[32|[99|[111|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 286
	  <{'undefined_record',T}> when 'true' ->
	      %% Line 287
	      call 'io_lib':'format'
		  ([114|[101|[99|[111|[114|[100|[32|[126|[116|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]], [T|[]])
	  %% Line 288
	  <{'redefine_record',T}> when 'true' ->
	      %% Line 289
	      call 'io_lib':'format'
		  ([114|[101|[99|[111|[114|[100|[32|[126|[116|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]], [T|[]])
	  %% Line 290
	  <{'redefine_field',T,F}> when 'true' ->
	      %% Line 291
	      call 'io_lib':'format'
		  ([102|[105|[101|[108|[100|[32|[126|[116|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[T|[]]])
	  %% Line 292
	  <{'undefined_field',T,F}> when 'true' ->
	      %% Line 293
	      call 'io_lib':'format'
		  ([102|[105|[101|[108|[100|[32|[126|[116|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[T|[]]])
	  %% Line 294
	  <'illegal_record_info'> when 'true' ->
	      %% Line 295
	      [105|[108|[108|[101|[103|[97|[108|[32|[114|[101|[99|[111|[114|[100|[32|[105|[110|[102|[111]]]]]]]]]]]]]]]]]]]
	  %% Line 296
	  <{'field_name_is_variable',T,F}> when 'true' ->
	      %% Line 297
	      call 'io_lib':'format'
		  ([102|[105|[101|[108|[100|[32|[126|[116|[119|[32|[105|[115|[32|[110|[111|[116|[32|[97|[110|[32|[97|[116|[111|[109|[32|[111|[114|[32|[95|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[T|[]]])
	  %% Line 298
	  <{'wildcard_in_update',T}> when 'true' ->
	      %% Line 299
	      call 'io_lib':'format'
		  ([109|[101|[97|[110|[105|[110|[103|[108|[101|[115|[115|[32|[117|[115|[101|[32|[111|[102|[32|[95|[32|[105|[110|[32|[117|[112|[100|[97|[116|[101|[32|[111|[102|[32|[114|[101|[99|[111|[114|[100|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [T|[]])
	  %% Line 300
	  <{'unused_record',T}> when 'true' ->
	      %% Line 301
	      call 'io_lib':'format'
		  ([114|[101|[99|[111|[114|[100|[32|[126|[116|[119|[32|[105|[115|[32|[117|[110|[117|[115|[101|[100]]]]]]]]]]]]]]]]]]]], [T|[]])
	  %% Line 302
	  <{'untyped_record',T}> when 'true' ->
	      %% Line 303
	      call 'io_lib':'format'
		  ([114|[101|[99|[111|[114|[100|[32|[126|[116|[119|[32|[104|[97|[115|[32|[102|[105|[101|[108|[100|[40|[115|[41|[32|[119|[105|[116|[104|[111|[117|[116|[32|[116|[121|[112|[101|[32|[105|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [T|[]])
	  %% Line 305
	  <{'unbound_var',V}> when 'true' ->
	      %% Line 306
	      call 'io_lib':'format'
		  ([118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[105|[115|[32|[117|[110|[98|[111|[117|[110|[100]]]]]]]]]]]]]]]]]]]]]], [V|[]])
	  %% Line 307
	  <{'unsafe_var',V,{What,Where}}> when 'true' ->
	      let <_11> =
		  apply %% Line 309
			'format_where'/1
		      (%% Line 309
		       Where)
	      in  %% Line 308
		  call 'io_lib':'format'
		      ([118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[117|[110|[115|[97|[102|[101|[32|[105|[110|[32|[126|[119|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 309
																						 [V|[What|[_11|[]]]])
	  %% Line 310
	  <{'exported_var',V,{What,Where}}> when 'true' ->
	      let <_12> =
		  apply %% Line 312
			'format_where'/1
		      (%% Line 312
		       Where)
	      in  %% Line 311
		  call 'io_lib':'format'
		      ([118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[101|[120|[112|[111|[114|[116|[101|[100|[32|[102|[114|[111|[109|[32|[126|[119|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 312
																									  [V|[What|[_12|[]]]])
	  %% Line 313
	  <{'shadowed_var',V,In}> when 'true' ->
	      %% Line 314
	      call 'io_lib':'format'
		  ([118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[115|[104|[97|[100|[111|[119|[101|[100|[32|[105|[110|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]], [V|[In|[]]])
	  %% Line 315
	  <{'unused_var',V}> when 'true' ->
	      %% Line 316
	      call 'io_lib':'format'
		  ([118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[105|[115|[32|[117|[110|[117|[115|[101|[100]]]]]]]]]]]]]]]]]]]]], [V|[]])
	  %% Line 317
	  <{'variable_in_record_def',V}> when 'true' ->
	      %% Line 318
	      call 'io_lib':'format'
		  ([118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[100|[101|[102|[105|[110|[105|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [V|[]])
	  %% Line 319
	  <{'stacktrace_guard',V}> when 'true' ->
	      %% Line 320
	      call 'io_lib':'format'
		  ([115|[116|[97|[99|[107|[116|[114|[97|[99|[101|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[109|[117|[115|[116|[32|[110|[111|[116|[32|[98|[101|[32|[117|[115|[101|[100|[32|[105|[110|[32|[97|[32|[103|[117|[97|[114|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [V|[]])
	  %% Line 321
	  <{'stacktrace_bound',V}> when 'true' ->
	      %% Line 322
	      call 'io_lib':'format'
		  ([115|[116|[97|[99|[107|[116|[114|[97|[99|[101|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[109|[117|[115|[116|[32|[110|[111|[116|[32|[98|[101|[32|[112|[114|[101|[118|[105|[111|[117|[115|[108|[121|[32|[98|[111|[117|[110|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [V|[]])
	  %% Line 324
	  <{'undefined_bittype',Type}> when 'true' ->
	      %% Line 325
	      call 'io_lib':'format'
		  ([98|[105|[116|[32|[116|[121|[112|[101|[32|[126|[116|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]], [Type|[]])
	  %% Line 326
	  <{'bittype_mismatch',Val1,Val2,What}> when 'true' ->
	      %% Line 327
	      call 'io_lib':'format'
		  ([99|[111|[110|[102|[108|[105|[99|[116|[32|[105|[110|[32|[126|[115|[32|[115|[112|[101|[99|[105|[102|[105|[99|[97|[116|[105|[111|[110|[32|[102|[111|[114|[32|[98|[105|[116|[32|[102|[105|[101|[108|[100|[58|[32|[39|[126|[112|[39|[32|[97|[110|[100|[32|[39|[126|[112|[39]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 328
																																										     [What|[Val1|[Val2|[]]]])
	  %% Line 329
	  <'bittype_unit'> when 'true' ->
	      %% Line 330
	      [97|[32|[98|[105|[116|[32|[117|[110|[105|[116|[32|[115|[105|[122|[101|[32|[109|[117|[115|[116|[32|[110|[111|[116|[32|[98|[101|[32|[115|[112|[101|[99|[105|[102|[105|[101|[100|[32|[117|[110|[108|[101|[115|[115|[32|[97|[32|[115|[105|[122|[101|[32|[105|[115|[32|[115|[112|[101|[99|[105|[102|[105|[101|[100|[32|[116|[111|[111]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 331
	  <'illegal_bitsize'> when 'true' ->
	      %% Line 332
	      [105|[108|[108|[101|[103|[97|[108|[32|[98|[105|[116|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]
	  %% Line 333
	  <{'illegal_bitsize_local_call',{F,A}}> when 'true' ->
	      %% Line 334
	      call 'io_lib':'format'
		  ([99|[97|[108|[108|[32|[116|[111|[32|[108|[111|[99|[97|[108|[47|[105|[109|[112|[111|[114|[116|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[105|[115|[32|[105|[108|[108|[101|[103|[97|[108|[32|[105|[110|[32|[97|[32|[115|[105|[122|[101|[32|[101|[120|[112|[114|[101|[115|[115|[105|[111|[110|[32|[102|[111|[114|[32|[97|[32|[98|[105|[110|[97|[114|[121|[32|[115|[101|[103|[109|[101|[110|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 336
																																																																			    [F|[A|[]]])
	  %% Line 337
	  <'non_integer_bitsize'> when 'true' ->
	      %% Line 338
	      [97|[32|[115|[105|[122|[101|[32|[101|[120|[112|[114|[101|[115|[115|[105|[111|[110|[32|[105|[110|[32|[97|[32|[112|[97|[116|[116|[101|[114|[110|[32|[101|[118|[97|[108|[117|[97|[116|[101|[115|[32|[116|[111|[32|[97|[32|[110|[111|[110|[45|[105|[110|[116|[101|[103|[101|[114|[32|[118|[97|[108|[117|[101|[59|[32|[116|[104|[105|[115|[32|[112|[97|[116|[116|[101|[114|[110|[32|[99|[97|[110|[110|[111|[116|[32|[112|[111|[115|[115|[105|[98|[108|[121|[32|[109|[97|[116|[99|[104]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 340
	  <'unsized_binary_not_at_end'> when 'true' ->
	      %% Line 341
	      [97|[32|[98|[105|[110|[97|[114|[121|[32|[102|[105|[101|[108|[100|[32|[119|[105|[116|[104|[111|[117|[116|[32|[115|[105|[122|[101|[32|[105|[115|[32|[111|[110|[108|[121|[32|[97|[108|[108|[111|[119|[101|[100|[32|[97|[116|[32|[116|[104|[101|[32|[101|[110|[100|[32|[111|[102|[32|[97|[32|[98|[105|[110|[97|[114|[121|[32|[112|[97|[116|[116|[101|[114|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 342
	  <'typed_literal_string'> when 'true' ->
	      %% Line 343
	      [97|[32|[108|[105|[116|[101|[114|[97|[108|[32|[115|[116|[114|[105|[110|[103|[32|[105|[110|[32|[97|[32|[98|[105|[110|[97|[114|[121|[32|[112|[97|[116|[116|[101|[114|[110|[32|[109|[117|[115|[116|[32|[110|[111|[116|[32|[104|[97|[118|[101|[32|[97|[32|[116|[121|[112|[101|[32|[111|[114|[32|[97|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 344
	  <'utf_bittype_size_or_unit'> when 'true' ->
	      %% Line 345
	      [110|[101|[105|[116|[104|[101|[114|[32|[115|[105|[122|[101|[32|[110|[111|[114|[32|[117|[110|[105|[116|[32|[109|[117|[115|[116|[32|[98|[101|[32|[103|[105|[118|[101|[110|[32|[102|[111|[114|[32|[115|[101|[103|[109|[101|[110|[116|[115|[32|[111|[102|[32|[116|[121|[112|[101|[32|[117|[116|[102|[56|[47|[117|[116|[102|[49|[54|[47|[117|[116|[102|[51|[50]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 346
	  <{'bad_bitsize',Type}> when 'true' ->
	      %% Line 347
	      call 'io_lib':'format'
		  ([98|[97|[100|[32|[126|[115|[32|[98|[105|[116|[32|[115|[105|[122|[101]]]]]]]]]]]]]]], [Type|[]])
	  %% Line 348
	  <'unsized_binary_in_bin_gen_pattern'> when 'true' ->
	      %% Line 349
	      [98|[105|[110|[97|[114|[121|[32|[102|[105|[101|[108|[100|[115|[32|[119|[105|[116|[104|[111|[117|[116|[32|[115|[105|[122|[101|[32|[97|[114|[101|[32|[110|[111|[116|[32|[97|[108|[108|[111|[119|[101|[100|[32|[105|[110|[32|[112|[97|[116|[116|[101|[114|[110|[115|[32|[111|[102|[32|[98|[105|[116|[32|[115|[116|[114|[105|[110|[103|[32|[103|[101|[110|[101|[114|[97|[116|[111|[114|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 351
	  <{'conflicting_behaviours',{Name,Arity},B,FirstL,FirstB}> when 'true' ->
	      let <_13> =
		  apply %% Line 353
			'format_where'/1
		      (%% Line 353
		       FirstL)
	      in  %% Line 352
		  call 'io_lib':'format'
		      ([99|[111|[110|[102|[108|[105|[99|[116|[105|[110|[103|[32|[98|[101|[104|[97|[118|[105|[111|[117|[114|[115|[32|[45|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[126|[116|[119|[47|[126|[119|[32|[114|[101|[113|[117|[105|[114|[101|[100|[32|[98|[121|[32|[98|[111|[116|[104|[32|[39|[126|[112|[39|[32|[97|[110|[100|[32|[39|[126|[112|[39|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 353
																																																						       [Name|[Arity|[B|[FirstB|[_13|[]]]]]])
	  %% Line 354
	  <{'undefined_behaviour_func',{Func,Arity},Behaviour}> when 'true' ->
	      %% Line 355
	      call 'io_lib':'format'
		  ([117|[110|[100|[101|[102|[105|[110|[101|[100|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[40|[98|[101|[104|[97|[118|[105|[111|[117|[114|[32|[39|[126|[119|[39|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 356
																																						    [Func|[Arity|[Behaviour|[]]]])
	  %% Line 357
	  <{'undefined_behaviour',Behaviour}> when 'true' ->
	      %% Line 358
	      call 'io_lib':'format'
		  ([98|[101|[104|[97|[118|[105|[111|[117|[114|[32|[126|[116|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]], [Behaviour|[]])
	  %% Line 359
	  <{'undefined_behaviour_callbacks',Behaviour}> when 'true' ->
	      %% Line 360
	      call 'io_lib':'format'
		  ([98|[101|[104|[97|[118|[105|[111|[117|[114|[32|[126|[119|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[102|[117|[110|[99|[116|[105|[111|[110|[115|[32|[97|[114|[101|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 361
																																		    [Behaviour|[]])
	  %% Line 362
	  <{'ill_defined_behaviour_callbacks',Behaviour}> when 'true' ->
	      %% Line 363
	      call 'io_lib':'format'
		  ([98|[101|[104|[97|[118|[105|[111|[117|[114|[32|[126|[119|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[102|[117|[110|[99|[116|[105|[111|[110|[115|[32|[101|[114|[114|[111|[110|[101|[111|[117|[115|[108|[121|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 364
																																							 [Behaviour|[]])
	  %% Line 365
	  <{'ill_defined_optional_callbacks',Behaviour}> when 'true' ->
	      %% Line 366
	      call 'io_lib':'format'
		  ([98|[101|[104|[97|[118|[105|[111|[117|[114|[32|[126|[119|[32|[111|[112|[116|[105|[111|[110|[97|[108|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[102|[117|[110|[99|[116|[105|[111|[110|[115|[32|[101|[114|[114|[111|[110|[101|[111|[117|[115|[108|[121|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 367
																																													     [Behaviour|[]])
	  %% Line 368
	  <{'behaviour_info',{_X_M,F,A}}> when 'true' ->
	      %% Line 369
	      call 'io_lib':'format'
		  ([99|[97|[110|[110|[111|[116|[32|[100|[101|[102|[105|[110|[101|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[97|[116|[116|[105|[98|[117|[116|[101|[32|[102|[111|[114|[32|[126|[116|[119|[47|[126|[119|[32|[119|[104|[101|[110|[32|[98|[101|[104|[97|[118|[105|[111|[117|[114|[95|[105|[110|[102|[111|[32|[105|[115|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 370
																																																						    [F|[A|[]]])
	  %% Line 371
	  <{'redefine_optional_callback',{F,A}}> when 'true' ->
	      %% Line 372
	      call 'io_lib':'format'
		  ([111|[112|[116|[105|[111|[110|[97|[108|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[126|[116|[119|[47|[126|[119|[32|[100|[117|[112|[108|[105|[99|[97|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 373
	  <{'undefined_callback',{_X_M,F,A}}> when 'true' ->
	      %% Line 374
	      call 'io_lib':'format'
		  ([99|[97|[108|[108|[98|[97|[99|[107|[32|[126|[116|[119|[47|[126|[119|[32|[105|[115|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 376
	  <{'singleton_typevar',Name}> when 'true' ->
	      %% Line 377
	      call 'io_lib':'format'
		  ([116|[121|[112|[101|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[105|[115|[32|[111|[110|[108|[121|[32|[117|[115|[101|[100|[32|[111|[110|[99|[101|[32|[40|[105|[115|[32|[117|[110|[98|[111|[117|[110|[100|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[]])
	  %% Line 378
	  <{'bad_export_type',_X_ETs}> when 'true' ->
	      %% Line 379
	      call 'io_lib':'format'
		  ([98|[97|[100|[32|[101|[120|[112|[111|[114|[116|[95|[116|[121|[112|[101|[32|[100|[101|[99|[108|[97|[114|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 380
	  <{'duplicated_export_type',{T,A}}> when 'true' ->
	      %% Line 381
	      call 'io_lib':'format'
		  ([116|[121|[112|[101|[32|[126|[116|[119|[47|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[101|[120|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]], [T|[A|[]]])
	  %% Line 382
	  <{'undefined_type',{TypeName,Arity}}> when 'true' ->
	      let <_14> =
		  apply %% Line 383
			'gen_type_paren'/1
		      (%% Line 383
		       Arity)
	      in  %% Line 383
		  call 'io_lib':'format'
		      ([116|[121|[112|[101|[32|[126|[116|[119|[126|[115|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]], [TypeName|[_14|[]]])
	  %% Line 384
	  <{'unused_type',{TypeName,Arity}}> when 'true' ->
	      let <_15> =
		  apply %% Line 385
			'gen_type_paren'/1
		      (%% Line 385
		       Arity)
	      in  %% Line 385
		  call 'io_lib':'format'
		      ([116|[121|[112|[101|[32|[126|[116|[119|[126|[115|[32|[105|[115|[32|[117|[110|[117|[115|[101|[100]]]]]]]]]]]]]]]]]]]], [TypeName|[_15|[]]])
	  %% Line 386
	  <{'new_builtin_type',{TypeName,Arity}}> when 'true' ->
	      let <_16> =
		  apply %% Line 389
			'gen_type_paren'/1
		      (%% Line 389
		       Arity)
	      in  %% Line 387
		  call 'io_lib':'format'
		      ([116|[121|[112|[101|[32|[126|[119|[126|[115|[32|[105|[115|[32|[97|[32|[110|[101|[119|[32|[98|[117|[105|[108|[116|[105|[110|[32|[116|[121|[112|[101|[59|[32|[105|[116|[115|[32|[40|[114|[101|[41|[100|[101|[102|[105|[110|[105|[116|[105|[111|[110|[32|[105|[115|[32|[97|[108|[108|[111|[119|[101|[100|[32|[111|[110|[108|[121|[32|[117|[110|[116|[105|[108|[32|[116|[104|[101|[32|[110|[101|[120|[116|[32|[114|[101|[108|[101|[97|[115|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 389
																																																																			      [TypeName|[_16|[]]])
	  %% Line 390
	  <{'builtin_type',{TypeName,Arity}}> when 'true' ->
	      let <_17> =
		  apply %% Line 392
			'gen_type_paren'/1
		      (%% Line 392
		       Arity)
	      in  %% Line 391
		  call 'io_lib':'format'
		      ([116|[121|[112|[101|[32|[126|[119|[126|[115|[32|[105|[115|[32|[97|[32|[98|[117|[105|[108|[116|[105|[110|[32|[116|[121|[112|[101|[59|[32|[105|[116|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[114|[101|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 392
																																							   [TypeName|[_17|[]]])
	  %% Line 393
	  <{'renamed_type',OldName,NewName}> when 'true' ->
	      %% Line 394
	      call 'io_lib':'format'
		  ([116|[121|[112|[101|[32|[126|[119|[40|[41|[32|[105|[115|[32|[110|[111|[119|[32|[99|[97|[108|[108|[101|[100|[32|[126|[119|[40|[41|[59|[32|[112|[108|[101|[97|[115|[101|[32|[117|[115|[101|[32|[116|[104|[101|[32|[110|[101|[119|[32|[110|[97|[109|[101|[32|[105|[110|[115|[116|[101|[97|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 395
																																													     [OldName|[NewName|[]]])
	  %% Line 396
	  <{'redefine_type',{TypeName,Arity}}> when 'true' ->
	      let <_18> =
		  apply %% Line 398
			'gen_type_paren'/1
		      (%% Line 398
		       Arity)
	      in  %% Line 397
		  call 'io_lib':'format'
		      ([116|[121|[112|[101|[32|[126|[116|[119|[126|[115|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 398
																					       [TypeName|[_18|[]]])
	  %% Line 399
	  <{'type_syntax',Constr}> when 'true' ->
	      %% Line 400
	      call 'io_lib':'format'
		  ([98|[97|[100|[32|[126|[116|[119|[32|[116|[121|[112|[101]]]]]]]]]]]], [Constr|[]])
	  %% Line 401
	  <'old_abstract_code'> when 'true' ->
	      %% Line 402
	      call 'io_lib':'format'
		  ([97|[98|[115|[116|[114|[97|[99|[116|[32|[99|[111|[100|[101|[32|[103|[101|[110|[101|[114|[97|[116|[101|[100|[32|[98|[101|[102|[111|[114|[101|[32|[69|[114|[108|[97|[110|[103|[47|[79|[84|[80|[32|[49|[57|[46|[48|[32|[97|[110|[100|[32|[104|[97|[118|[105|[110|[103|[32|[116|[121|[112|[101|[100|[32|[114|[101|[99|[111|[114|[100|[32|[102|[105|[101|[108|[100|[115|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[99|[111|[109|[112|[105|[108|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 403
																																																																					       [])
	  %% Line 404
	  <{'redefine_spec',{M,F,A}}> when 'true' ->
	      %% Line 405
	      call 'io_lib':'format'
		  ([115|[112|[101|[99|[32|[102|[111|[114|[32|[126|[116|[119|[58|[126|[116|[119|[47|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [M|[F|[A|[]]]])
	  %% Line 406
	  <{'redefine_spec',{F,A}}> when 'true' ->
	      %% Line 407
	      call 'io_lib':'format'
		  ([115|[112|[101|[99|[32|[102|[111|[114|[32|[126|[116|[119|[47|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 408
	  <{'redefine_callback',{F,A}}> when 'true' ->
	      %% Line 409
	      call 'io_lib':'format'
		  ([99|[97|[108|[108|[98|[97|[99|[107|[32|[126|[116|[119|[47|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 410
	  <{'bad_callback',{M,F,A}}> when 'true' ->
	      %% Line 411
	      call 'io_lib':'format'
		  ([101|[120|[112|[108|[105|[99|[105|[116|[32|[109|[111|[100|[117|[108|[101|[32|[110|[111|[116|[32|[97|[108|[108|[111|[119|[101|[100|[32|[102|[111|[114|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[126|[116|[119|[58|[126|[116|[119|[47|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 412
																																						       [M|[F|[A|[]]]])
	  %% Line 413
	  <{'bad_module',{M,F,A}}> when 'true' ->
	      %% Line 414
	      call 'io_lib':'format'
		  ([115|[112|[101|[99|[32|[102|[111|[114|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[58|[126|[116|[119|[47|[126|[119|[32|[102|[114|[111|[109|[32|[111|[116|[104|[101|[114|[32|[109|[111|[100|[117|[108|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [M|[F|[A|[]]]])
	  %% Line 415
	  <{'spec_fun_undefined',{F,A}}> when 'true' ->
	      %% Line 416
	      call 'io_lib':'format'
		  ([115|[112|[101|[99|[32|[102|[111|[114|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 417
	  <{'missing_spec',{F,A}}> when 'true' ->
	      %% Line 418
	      call 'io_lib':'format'
		  ([109|[105|[115|[115|[105|[110|[103|[32|[115|[112|[101|[99|[105|[102|[105|[99|[97|[116|[105|[111|[110|[32|[102|[111|[114|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 419
	  <'spec_wrong_arity'> when 'true' ->
	      %% Line 420
	      [115|[112|[101|[99|[32|[104|[97|[115|[32|[119|[114|[111|[110|[103|[32|[97|[114|[105|[116|[121]]]]]]]]]]]]]]]]]]]]
	  %% Line 421
	  <'callback_wrong_arity'> when 'true' ->
	      %% Line 422
	      [99|[97|[108|[108|[98|[97|[99|[107|[32|[104|[97|[115|[32|[119|[114|[111|[110|[103|[32|[97|[114|[105|[116|[121]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 423
	  <{'deprecated_builtin_type',{Name,Arity},%% Line 424
						   Replacement,%% Line 424
							       Rel}> when 'true' ->
	      let <_20> =
		  case %% Line 425
		       Replacement of
		    %% Line 426
		    <{Mod,NewName}> when 'true' ->
			%% Line 427
			call 'io_lib':'format'
			    ([117|[115|[101|[32|[126|[119|[58|[126|[119|[47|[126|[119]]]]]]]]]]]], [Mod|[NewName|[Arity|[]]]])
		    %% Line 428
		    <{Mod,NewName,NewArity}> when 'true' ->
			%% Line 429
			call 'io_lib':'format'
			    ([117|[115|[101|[32|[126|[119|[58|[126|[119|[47|[126|[119|[32|[111|[114|[32|[112|[114|[101|[102|[101|[114|[97|[98|[108|[121|[32|[126|[119|[58|[126|[119|[47|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 430
																												      [Mod|[NewName|[Arity|%% Line 431
																															   [Mod|[NewName|[NewArity|[]]]]]]])
		    ( <_19> when 'true' ->
			  %% Line 425
			  primop 'match_fail'
			      ({'case_clause',_19})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 433
		  call 'io_lib':'format'
		      ([116|[121|[112|[101|[32|[126|[119|[47|[126|[119|[32|[105|[115|[32|[100|[101|[112|[114|[101|[99|[97|[116|[101|[100|[32|[97|[110|[100|[32|[119|[105|[108|[108|[32|[98|[101|[32|[114|[101|[109|[111|[118|[101|[100|[32|[105|[110|[32|[126|[115|[59|[32|[117|[115|[101|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 435
																																												   [Name|[Arity|[Rel|[_20|[]]]]])
	  %% Line 436
	  <{'not_exported_opaque',{TypeName,Arity}}> when 'true' ->
	      let <_22> =
		  apply %% Line 438
			'gen_type_paren'/1
		      (%% Line 438
		       Arity)
	      in  %% Line 437
		  call 'io_lib':'format'
		      ([111|[112|[97|[113|[117|[101|[32|[116|[121|[112|[101|[32|[126|[116|[119|[126|[115|[32|[105|[115|[32|[110|[111|[116|[32|[101|[120|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 438
																											[TypeName|[_22|[]]])
	  %% Line 439
	  <{'underspecified_opaque',{TypeName,Arity}}> when 'true' ->
	      let <_23> =
		  apply %% Line 441
			'gen_type_paren'/1
		      (%% Line 441
		       Arity)
	      in  %% Line 440
		  call 'io_lib':'format'
		      ([111|[112|[97|[113|[117|[101|[32|[116|[121|[112|[101|[32|[126|[116|[119|[126|[115|[32|[105|[115|[32|[117|[110|[100|[101|[114|[115|[112|[101|[99|[105|[102|[105|[101|[100|[32|[97|[110|[100|[32|[116|[104|[101|[114|[101|[102|[111|[114|[101|[32|[109|[101|[97|[110|[105|[110|[103|[108|[101|[115|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 441
																																															   [TypeName|[_23|[]]])
	  %% Line 442
	  <{'bad_dialyzer_attribute',Term}> when 'true' ->
	      %% Line 443
	      call 'io_lib':'format'
		  ([98|[97|[100|[108|[121|[32|[102|[111|[114|[109|[101|[100|[32|[100|[105|[97|[108|[121|[122|[101|[114|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[58|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Term|[]])
	  %% Line 444
	  <{'bad_dialyzer_option',Term}> when 'true' ->
	      %% Line 445
	      call 'io_lib':'format'
		  ([117|[110|[107|[110|[111|[119|[110|[32|[100|[105|[97|[108|[121|[122|[101|[114|[32|[119|[97|[114|[110|[105|[110|[103|[32|[111|[112|[116|[105|[111|[110|[58|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Term|[]])
	  %% Line 447
	  <{'format_error',{Fmt,Args}}> when 'true' ->
	      %% Line 448
	      call 'io_lib':'format'
		  (Fmt, Args)
	  ( <_24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_24})
		  -| [{'function_name',{'format_error',1}}] )
	    -| ['compiler_generated'] )
	end
'gen_type_paren'/1 =
    %% Line 450
    fun (_0) ->
	case _0 of
	  <Arity>
	      when let <_1> =
		    call 'erlang':'is_integer'
			(_0)
		in  let <_2> =
			call 'erlang':'>='
			    (_0, 0)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 451
	      apply 'gen_type_paren_1'/2
		  (Arity, [41])
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'gen_type_paren',1}}] )
	    -| ['compiler_generated'] )
	end
'gen_type_paren_1'/2 =
    %% Line 453
    fun (_0,_1) ->
	case <_0,_1> of
	  <0,Acc> when 'true' ->
	      [40|Acc]
	  %% Line 454
	  <1,Acc> when 'true' ->
	      [40|[95|Acc]]
	  %% Line 455
	  <N,Acc> when 'true' ->
	      let <_3> =
		  call 'erlang':'-'
		      (N, 1)
	      in  let <_2> =
		      [44|[95|Acc]]
		  in  apply 'gen_type_paren_1'/2
			  (_3, _2)
	end
'format_mfa'/1 =
    %% Line 457
    fun (_0) ->
	case _0 of
	  <{M,F,As = [_10|_11]}> when 'true' ->
	      let <_6> =
		  letrec
		      'lc$^0'/1 =
			  %% Line 458
			  fun (_3) ->
			      case _3 of
				<[A|_2]> when 'true' ->
				    let <_4> =
					call 'erlang':'integer_to_list'
					    (A)
				    in  let <_5> =
					    apply 'lc$^0'/1
						(_2)
					in  ( [[44|_4]|_5]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_12> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_12})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  %% Line 458
		      apply 'lc$^0'/1
			  (As)
	      in  %% Line 458
		  case call 'lists':'append'
			   (_6) of
		    <[44|ArityString]> when 'true' ->
			%% Line 459
			apply 'format_mf'/3
			    (M, F, ArityString)
		    ( <_7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_7})
		      -| ['compiler_generated'] )
		  end
	  %% Line 460
	  <{M,F,A}>
	      when call 'erlang':'is_integer'
		    (A) ->
	      let <_8> =
		  call %% Line 461
		       'erlang':%% Line 461
				'integer_to_list'
		      (%% Line 461
		       A)
	      in  %% Line 461
		  apply 'format_mf'/3
		      (M, F, _8)
	  ( <_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9})
		  -| [{'function_name',{'format_mfa',1}}] )
	    -| ['compiler_generated'] )
	end
'format_mf'/3 =
    %% Line 463
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <M,F,ArityString>
	      when let <_3> =
		    call 'erlang':'is_atom'
			(M)
		in  let <_4> =
			call 'erlang':'is_atom'
			    (F)
		    in  call 'erlang':'and'
			    (_3, _4) ->
	      let <_9> =
		  call %% Line 464
		       'erlang':%% Line 464
				'atom_to_list'
		      (%% Line 464
		       M)
	      in  let <_6> =
		      call %% Line 464
			   'erlang':%% Line 464
				    'atom_to_list'
			  (%% Line 464
			   F)
		  in  let <_5> =
			  [47|%% Line 464
			      ArityString]
		      in  let <_7> =
			      call %% Line 464
				   'erlang':%% Line 464
					    '++'
				  (_6, _5)
			  in  let <_8> =
				  [58|_7]
			      in  %% Line 464
				  call 'erlang':'++'
				      (_9, _8)
	  ( <_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11,_10})
		  -| [{'function_name',{'format_mf',3}}] )
	    -| ['compiler_generated'] )
	end
'format_mna'/1 =
    %% Line 466
    fun (_0) ->
	case _0 of
	  <{M,N,A}>
	      when call 'erlang':'is_integer'
		    (A) ->
	      let <_5> =
		  call %% Line 467
		       'erlang':%% Line 467
				'atom_to_list'
		      (%% Line 467
		       M)
	      in  let <_2> =
		      call %% Line 467
			   'erlang':%% Line 467
				    'atom_to_list'
			  (%% Line 467
			   N)
		  in  let <_1> =
			  apply %% Line 467
				'gen_type_paren'/1
			      (%% Line 467
			       A)
		      in  let <_3> =
			      call %% Line 467
				   'erlang':%% Line 467
					    '++'
				  (_2, _1)
			  in  let <_4> =
				  [58|_3]
			      in  %% Line 467
				  call 'erlang':'++'
				      (_5, _4)
	  ( <_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6})
		  -| [{'function_name',{'format_mna',1}}] )
	    -| ['compiler_generated'] )
	end
'format_where'/1 =
    %% Line 469
    fun (_0) ->
	case _0 of
	  <L>
	      when call 'erlang':'is_integer'
		    (_0) ->
	      %% Line 470
	      call 'io_lib':'format'
		  ([40|[108|[105|[110|[101|[32|[126|[112|[41]]]]]]]]], [L|[]])
	  %% Line 471
	  <{L,C}>
	      when let <_1> =
		    call 'erlang':'is_integer'
			(L)
		in  let <_2> =
			call 'erlang':'is_integer'
			    (C)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 472
	      call 'io_lib':'format'
		  ([40|[108|[105|[110|[101|[32|[126|[112|[44|[32|[99|[111|[108|[117|[109|[110|[32|[126|[112|[41]]]]]]]]]]]]]]]]]]]], [L|[C|[]]])
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'format_where',1}}] )
	    -| ['compiler_generated'] )
	end
'pseudolocals'/0 =
    %% Line 476
    fun () ->
	%% Line 477
	[{'module_info',0}|[{'module_info',1}|[{'record_info',2}]]]
'exprs'/2 =
    %% Line 482
    fun (_0,_1) ->
	%% Line 483
	apply 'exprs_opt'/3
	    (_0, _1, [])
'exprs_opt'/3 =
    %% Line 485
    fun (_0,_1,_2) ->
	let <_10> =
	    fun (_7,_6) ->
		%% Line 486
		case <_7,_6> of
		  <{{'record',_X_SequenceNumber,_X_Name},Attr0},{St1,Vs1}> when 'true' ->
		      let <Attr> =
			  apply %% Line 487
				'set_file'/2
			      (%% Line 487
			       Attr0, %% Line 487
				      [110|[111|[110|[101]]]])
		      in  let <_5> =
			      apply %% Line 488
				    'attribute_state'/2
				  (%% Line 488
				   Attr, %% Line 488
					 St1)
			  in  %% Line 488
			      {_5,Vs1}
		  %% Line 489
		  <{V,_18},{St1,Vs1}> when 'true' ->
		      %% Line 490
		      {St1,[{V,{'bound','unused',[]}}|Vs1]}
		  ( <_9,_8> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_9,_8})
			  -| [{'function_name',{'-exprs_opt/3-fun-0-',2}}] )
		    -| ['compiler_generated'] )
		end
	in  let <_3> =
		apply %% Line 491
		      'start'/2
		    (%% Line 491
		     [110|[111|[102|[105|[108|[101]]]]]], _2)
	    in  %% Line 486
		case call 'lists':'foldl'
			 (_10, %% Line 491
			       {_3,[]}, _1) of
		  <{St0,Vs}> when 'true' ->
		      let <Vt> =
			  call %% Line 492
			       'orddict':%% Line 492
					 'from_list'
			      (%% Line 492
			       Vs)
		      in  let <_13> =
			      apply %% Line 493
				    'set_file'/2
				  (_0, %% Line 493
				       [110|[111|[102|[105|[108|[101]]]]]])
			  in  %% Line 493
			      case apply 'exprs'/3
				       (_13, Vt, St0) of
				<{_X_Evt,St}> when 'true' ->
				    %% Line 494
				    apply 'return_status'/1
					(St)
				( <_14> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_14})
				  -| ['compiler_generated'] )
			      end
		  ( <_11> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_11})
		    -| ['compiler_generated'] )
		end
'used_vars'/2 =
    %% Line 496
    fun (_0,_1) ->
	let <_6> =
	    fun (_3,_2) ->
		%% Line 497
		case <_3,_2> of
		  <{{'record',_X_SequenceNumber,_X_Name},_X_Attr},Vs0> when 'true' ->
		      Vs0
		  %% Line 498
		  <{V,_X_Val},Vs0> when 'true' ->
		      [{V,{'bound','unused',[]}}|Vs0]
		  ( <_5,_4> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_5,_4})
			  -| [{'function_name',{'-used_vars/2-fun-0-',2}}] )
		    -| ['compiler_generated'] )
		end
	in  let <Vs> =
		call %% Line 497
		     'lists':%% Line 497
			     'foldl'
		    (_6, %% Line 499
			 [], _1)
	    in  let <Vt> =
		    call %% Line 500
			 'orddict':%% Line 500
				   'from_list'
			(%% Line 500
			 Vs)
		in  let <_10> =
			apply %% Line 501
			      'set_file'/2
			    (_0, %% Line 501
				 [110|[111|[102|[105|[108|[101]]]]]])
		    in  let <_9> =
			    apply %% Line 501
				  'start'/0
				()
			in  %% Line 501
			    case apply 'exprs'/3
				     (_10, Vt, _9) of
			      <{Evt,_X_St}> when 'true' ->
				  let <_16> =
				      fun (_13,_12) ->
					  %% Line 502
					  case <_13,_12> of
					    <{V,{_20,'used',_21}},L> when 'true' ->
						[V|L]
					    %% Line 503
					    <_22,L> when 'true' ->
						L
					  end
				  in  let <_17> =
					  call %% Line 502
					       'lists':%% Line 502
						       'foldl'
					      (_16, %% Line 504
						    [], %% Line 504
							Evt)
				      in  %% Line 502
					  {'ok',_17}
			      ( <_11> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_11})
				-| ['compiler_generated'] )
			    end
'module'/1 =
    %% Line 520
    fun (_0) ->
	let <Opts> =
	    apply %% Line 521
		  'compiler_options'/1
		(_0)
	in  let <_2> =
		apply %% Line 522
		      'start'/2
		    (%% Line 522
		     [110|[111|[102|[105|[108|[101]]]]]], %% Line 522
							  Opts)
	    in  let <St> =
		    apply %% Line 522
			  'forms'/2
			(_0, _2)
		in  %% Line 523
		    apply 'return_status'/1
			(St)
'module'/2 =
    %% Line 533
    fun (_0,_1) ->
	let <Opts> =
	    apply %% Line 534
		  'compiler_options'/1
		(_0)
	in  let <_3> =
		apply %% Line 535
		      'start'/2
		    (_1, %% Line 535
			 Opts)
	    in  let <St> =
		    apply %% Line 535
			  'forms'/2
			(_0, _3)
		in  %% Line 536
		    apply 'return_status'/1
			(St)
'module'/3 =
    %% Line 547
    fun (_0,_1,_2) ->
	let <_3> =
	    apply %% Line 550
		  'compiler_options'/1
		(_0)
	in  let <Opts> =
		call %% Line 550
		     'erlang':%% Line 550
			      '++'
		    (_3, _2)
	    in  let <_5> =
		    apply %% Line 551
			  'start'/2
			(_1, %% Line 551
			     Opts)
		in  let <St> =
			apply %% Line 551
			      'forms'/2
			    (_0, _5)
		    in  %% Line 552
			apply 'return_status'/1
			    (St)
'compiler_options'/1 =
    %% Line 554
    fun (_0) ->
	let <_5> =
	    letrec
		'lc$^0'/1 =
		    %% Line 555
		    fun (_3) ->
			case _3 of
			  <[{'attribute',_7,'compile',C}|_2]> when 'true' ->
			      let <_4> =
				  apply 'lc$^0'/1
				      (_2)
			      in  ( [C|_4]
				    -| ['compiler_generated'] )
			  ( <[_1|_2]> when 'true' ->
				apply 'lc$^0'/1
				    (_2)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_8> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_8})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 555
		apply 'lc$^0'/1
		    (_0)
	in  %% Line 555
	    call 'lists':'flatten'
		(_5)
'start'/0 =
    %% Line 560
    fun () ->
	%% Line 561
	apply 'start'/2
	    ([110|[111|[102|[105|[108|[101]]]]]], [])
'start'/2 =
    %% Line 563
    fun (_0,_1) ->
	let <_2> =
	    apply %% Line 566
		  'bool_option'/4
		(%% Line 566
		 'warn_unused_vars', %% Line 566
				     'nowarn_unused_vars', %% Line 567
							   'true', _1)
	in  let <_3> =
		apply %% Line 569
		      'bool_option'/4
		    (%% Line 569
		     'warn_export_all', %% Line 569
					'nowarn_export_all', %% Line 570
							     'true', _1)
	    in  let <_4> =
		    apply %% Line 572
			  'bool_option'/4
			(%% Line 572
			 'warn_export_vars', %% Line 572
					     'nowarn_export_vars', %% Line 573
								   'false', _1)
		in  let <_5> =
			apply %% Line 575
			      'bool_option'/4
			    (%% Line 575
			     'warn_shadow_vars', %% Line 575
						 'nowarn_shadow_vars', %% Line 576
								       'true', _1)
		    in  let <_6> =
			    apply %% Line 578
				  'bool_option'/4
				(%% Line 578
				 'warn_unused_import', %% Line 578
						       'nowarn_unused_import', %% Line 579
									       'false', _1)
			in  let <_7> =
				apply %% Line 581
				      'bool_option'/4
				    (%% Line 581
				     'warn_unused_function', %% Line 581
							     'nowarn_unused_function', %% Line 582
										       'true', _1)
			    in  let <_8> =
				    apply %% Line 584
					  'bool_option'/4
					(%% Line 584
					 'warn_unused_type', %% Line 584
							     'nowarn_unused_type', %% Line 585
										   'true', _1)
				in  let <_9> =
					apply %% Line 587
					      'bool_option'/4
					    (%% Line 587
					     'warn_bif_clash', %% Line 587
							       'nowarn_bif_clash', %% Line 588
										   'true', _1)
				    in  let <_10> =
					    apply %% Line 590
						  'bool_option'/4
						(%% Line 590
						 'warn_unused_record', %% Line 590
								       'nowarn_unused_record', %% Line 591
											       'true', _1)
					in  let <_11> =
						apply %% Line 593
						      'bool_option'/4
						    (%% Line 593
						     'warn_deprecated_function', %% Line 593
										 'nowarn_deprecated_function', %% Line 594
													       'true', _1)
					    in  let <_12> =
						    apply %% Line 596
							  'bool_option'/4
							(%% Line 596
							 'warn_deprecated_type', %% Line 596
										 'nowarn_deprecated_type', %% Line 597
													   'true', _1)
						in  let <_13> =
							apply %% Line 599
							      'bool_option'/4
							    (%% Line 599
							     'warn_obsolete_guard', %% Line 599
										    'nowarn_obsolete_guard', %% Line 600
													     'true', _1)
						    in  let <_14> =
							    apply %% Line 602
								  'bool_option'/4
								(%% Line 602
								 'warn_untyped_record', %% Line 602
											'nowarn_untyped_record', %% Line 603
														 'false', _1)
							in  let <_15> =
								apply %% Line 605
								      'bool_option'/4
								    (%% Line 605
								     'warn_missing_spec', %% Line 605
											  'nowarn_missing_spec', %% Line 606
														 'false', _1)
							    in  let <_16> =
								    apply %% Line 608
									  'bool_option'/4
									(%% Line 608
									 'warn_missing_spec_all', %% Line 608
												  'nowarn_missing_spec_all', %% Line 609
															     'false', _1)
								in  let <_17> =
									apply %% Line 611
									      'bool_option'/4
									    (%% Line 611
									     'warn_removed', %% Line 611
											     'nowarn_removed', %% Line 612
													       'true', _1)
								    in  let <Enabled0> =
									    [%% Line 565
									     {'unused_vars',_2}|%% Line 568
												[{'export_all',_3}|%% Line 571
														   [{'export_vars',_4}|%% Line 574
																       [{'shadow_vars',_5}|%% Line 577
																			   [{'unused_import',_6}|%% Line 580
																						 [{'unused_function',_7}|%% Line 583
																									 [{'unused_type',_8}|%% Line 586
																											     [{'bif_clash',_9}|%% Line 589
																													       [{'unused_record',_10}|%% Line 592
																																      [{'deprecated_function',_11}|%% Line 595
																																				   [{'deprecated_type',_12}|%% Line 598
																																							    [{'obsolete_guard',_13}|%% Line 601
																																										    [{'untyped_record',_14}|%% Line 604
																																													    [{'missing_spec',_15}|%% Line 607
																																																  [{'missing_spec_all',_16}|%% Line 610
																																																			    [{'removed',_17}|%% Line 613
																																																					     []]]]]]]]]]]]]]]]]
									in  let <_23> =
										letrec
										    'lc$^0'/1 =
											%% Line 614
											fun (_21) ->
											    case _21 of
											      <[{Category,'true'}|_20]> when 'true' ->
												  let <_22> =
												      apply 'lc$^0'/1
													  (_20)
												  in  ( [Category|_22]
													-| ['compiler_generated'] )
											      ( <[_19|_20]> when 'true' ->
												    apply 'lc$^0'/1
													(_20)
												-| ['compiler_generated'] )
											      <[]> when 'true' ->
												  []
											      ( <_55> when 'true' ->
												    ( primop 'match_fail'
													  ({'function_clause',_55})
												      -| [{'function_name',{'lc$^0',1}}] )
												-| ['compiler_generated'] )
											    end
										in  %% Line 614
										    apply 'lc$^0'/1
											(Enabled0)
									    in  let <Enabled> =
										    call %% Line 615
											 'ordsets':%% Line 615
												   'from_list'
											(_23)
										in  let <_28> =
											case %% Line 616
											     call 'ordsets':'is_element'
												 ('unused_function', Enabled) of
											  %% Line 617
											  <'true'> when 'true' ->
											      let <_26> =
												  apply %% Line 618
													'pseudolocals'/0
												      ()
											      in  %% Line 618
												  call 'maps':'from_list'
												      ([{{'module_info',1},_26}|[]])
											  %% Line 619
											  <'false'> when 'true' ->
											      %% Line 620
											      'undefined'
											  ( <_27> when 'true' ->
												%% Line 616
												primop 'match_fail'
												    ({'case_clause',_27})
											    -| ['compiler_generated'] )
											end
										    in  let <_52> =
											    call %% Line 623
												 'gb_sets':%% Line 623
													   'from_list'
												(%% Line 623
												 [{'module_info',0}|[{'module_info',1}]])
											in  let <_51> =
												call 'maps':'new'
												    ()
											    in  let <_50> =
												    call 'gb_sets':'empty'
													()
												in  let <_49> =
													call 'gb_sets':'empty'
													    ()
												    in  let <_47> =
													    apply %% Line 626
														  'pseudolocals'/0
														()
													in  let <_48> =
														call %% Line 626
														     'gb_sets':%% Line 626
															       'from_list'
														    (_47)
													    in  let <_46> =
														    call 'erl_anno':'new'
															(0)
														in  let <_45> =
															call 'gb_sets':'empty'
															    ()
														    in  let <_44> =
															    apply %% Line 629
																  'value_option'/7
																(%% Line 629
																 'warn_format', %% Line 629
																		1, %% Line 629
																		   'warn_format', %% Line 629
																				  1, %% Line 630
																				     'nowarn_format', %% Line 630
																						      0, _1)
															in  let <_43> =
																apply %% Line 632
																      'nowarn_function'/2
																    (%% Line 632
																     'nowarn_bif_clash', _1)
															    in  let <_42> =
																    letrec
																	'lc$^1'/1 =
																	    %% Line 627
																	    fun (_40) ->
																		case _40 of
																		  <[F|_38]> when 'true' ->
																		      let <_41> =
																			  apply 'lc$^1'/1
																			      (_38)
																		      in  ( [{F,0}|_41]
																			    -| ['compiler_generated'] )
																		  <[]> when 'true' ->
																		      []
																		  ( <_56> when 'true' ->
																			( primop 'match_fail'
																			      ({'function_clause',_56})
																			  -| [{'function_name',{'lc$^1',1}}] )
																		    -| ['compiler_generated'] )
																		end
																    in  let <_39> =
																	    apply %% Line 627
																		  'pseudolocals'/0
																		()
																	in  %% Line 627
																	    apply 'lc$^1'/1
																		(_39)
																in  let <_36> =
																	call 'gb_sets':'new'
																	    ()
																    in  let <_35> =
																	    call 'maps':'new'
																		()
																	in  let <_34> =
																		call 'maps':'new'
																		    ()
																	    in  let <_33> =
																		    call 'maps':'new'
																			()
																		in  let <_32> =
																			call 'maps':'new'
																			    ()
																		    in  let <_31> =
																			    call 'maps':'new'
																				()
																			in  let <_30> =
																				call 'gb_sets':'empty'
																				    ()
																			    in  %% Line 622
																				{'lint','start','',[],_52,[],_1,_51,_50,_49,_48,[],_46,[],[],_45,[],_44,%% Line 631
																													Enabled,_43,[],[],_0,'false','false',_42,%% Line 628
																																		 {'usage',_28,[],_36,_35},_34,_33,_32,_31,_30,'false','none','guard'}
'is_warn_enabled'/2 =
    %% Line 638
    fun (_0,_1) ->
	case <_0,_1> of
	  <Type,{'lint',_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,Enabled,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36}> when 'true' ->
	      %% Line 639
	      call 'ordsets':'is_element'
		  (Type, Enabled)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'is_warn_enabled',2}}] )
	    -| ['compiler_generated'] )
	end
'return_status'/1 =
    %% Line 645
    fun (_0) ->
	%% Line 646
	( case _0 of
	    ( <( {'lint',_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_rec0,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Ws> =
		      apply 'pack_warnings'/1
			  (_rec0)
		  in  %% Line 647
		      ( case _0 of
			  ( <( {'lint',_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_rec1,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74}
			       -| ['compiler_generated'] )> when 'true' ->
				case apply 'pack_errors'/1
					 (_rec1) of
				  %% Line 648
				  <[]> when 'true' ->
				      {'ok',Ws}
				  %% Line 649
				  <Es> when 'true' ->
				      {'error',Es,Ws}
				end
			    -| ['compiler_generated'] )
			  ( <_75> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','lint'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_41> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'pack_errors'/1 =
    %% Line 655
    fun (_0) ->
	let <_7> =
	    fun (_4,_3) ->
		%% Line 656
		case <_4,_3> of
		  <{File,E},I> when 'true' ->
		      let <_2> =
			  call 'erlang':'-'
			      (I, 1)
		      in  {{File,{I,E}},_2}
		  ( <_6,_5> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_6,_5})
			  -| [{'function_name',{'-pack_errors/1-fun-0-',2}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 656
	    case call 'lists':'mapfoldl'
		     (_7, -1, _0) of
	      <{Es1,_18}> when 'true' ->
		  let <_16> =
		      fun (_14) ->
			  %% Line 657
			  case _14 of
			    <{File,EIs}> when 'true' ->
				let <_12> =
				    fun (_10) ->
					case _10 of
					  <{_X_I,E}> when 'true' ->
					      E
					  ( <_11> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_11})
						  -| [{'function_name',{'-pack_errors/1-fun-1-',1}}] )
					    -| ['compiler_generated'] )
					end
				in  let <_13> =
					call 'lists':'map'
					    (_12, EIs)
				    in  {File,_13}
			    ( <_15> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_15})
				    -| [{'function_name',{'-pack_errors/1-fun-2-',1}}] )
			      -| ['compiler_generated'] )
			  end
		  in  let <_9> =
			  apply %% Line 658
				'pack_warnings'/1
			      (%% Line 658
			       Es1)
		      in  %% Line 657
			  call 'lists':'map'
			      (_16, _9)
	      ( <_8> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_8})
		-| ['compiler_generated'] )
	    end
'pack_warnings'/1 =
    %% Line 663
    fun (_0) ->
	%% Line 665
	( letrec
	      'lc$^1'/1 =
		  fun (_9) ->
		      case _9 of
			<[File|_2]> when 'true' ->
			    let <_14> =
				letrec
				    'lc$^2'/1 =
					fun (_12) ->
					    case _12 of
					      <[{F,W}|_11]>
						  when call 'erlang':'=:='
							(F,
							 File) ->
						  let <_13> =
						      apply 'lc$^2'/1
							  (_11)
						  in  ( [W|_13]
							-| ['compiler_generated'] )
					      ( <[_10|_11]> when 'true' ->
						    apply 'lc$^2'/1
							(_11)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_19> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_19})
						      -| [{'function_name',{'lc$^2',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^2'/1
					(_0)
			    in  let <_15> =
				    call 'lists':'sort'
					(_14)
				in  let <_16> =
					apply 'lc$^1'/1
					    (_2)
				    in  ( [{File,_15}|_16]
					  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_20> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_20})
				-| [{'function_name',{'lc$^1',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_7> =
		  letrec
		      'lc$^0'/1 =
			  fun (_5) ->
			      case _5 of
				<[{F,_18}|_4]> when 'true' ->
				    let <_6> =
					apply 'lc$^0'/1
					    (_4)
				    in  ( [F|_6]
					  -| ['compiler_generated'] )
				( <[_3|_4]> when 'true' ->
				      apply 'lc$^0'/1
					  (_4)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_21> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_21})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_0)
	      in  let <_8> =
		      call 'lists':'usort'
			  (_7)
		  in  apply 'lc$^1'/1
			  (_8)
	  -| ['list_comprehension'] )
'add_error'/2 =
    %% Line 672
    fun (_0,_1) ->
	( case _1 of
	    ( <( {'lint',_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_rec2,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'add_lint_error'/3
		      (_0, _rec2, _1)
	      -| ['compiler_generated'] )
	    ( <_39> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_error'/3 =
    %% Line 674
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Anno,E0,St = {'lint',_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,Context}> when 'true' ->
	      let <_4> =
		  case %% Line 675
		       <E0,Context> of
		    %% Line 676
		    <'illegal_guard_expr','bin_seg_size'> when 'true' ->
			%% Line 677
			'illegal_bitsize'
		    %% Line 678
		    <( {( 'illegal_guard_local_call'
			  -| ['compiler_generated'] ),FA}
		       -| ['compiler_generated'] ),( 'bin_seg_size'
						     -| ['compiler_generated'] )> when 'true' ->
			%% Line 679
			{'illegal_bitsize_local_call',FA}
		    %% Line 680
		    <_43,_44> when 'true' ->
			E0
		  end
	      in  %% Line 682
		  case apply 'loc'/2
			   (Anno, St) of
		    <{File,Location}> when 'true' ->
			%% Line 683
			apply 'add_lint_error'/3
			    ({Location,'erl_lint',_4}, File, St)
		    ( <_6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_6})
		      -| ['compiler_generated'] )
		  end
	  ( <_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7})
		  -| [{'function_name',{'add_error',3}}] )
	    -| ['compiler_generated'] )
	end
'add_lint_error'/3 =
    %% Line 685
    fun (_0,_1,_2) ->
	%% Line 686
	( case _2 of
	    ( <( {'lint',_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_rec5,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec3> =
		      [{_1,_0}|_rec5]
		  in  case _2 of
			<{'lint',_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78}> when 'true' ->
			    call 'erlang':'setelement'
				(21, _2, _rec3)
			( <_79> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','lint'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_44> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_warning'/2 =
    %% Line 688
    fun (_0,_1) ->
	( case _1 of
	    ( <( {'lint',_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_rec6,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'add_lint_warning'/3
		      (_0, _rec6, _1)
	      -| ['compiler_generated'] )
	    ( <_39> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_warning'/3 =
    %% Line 690
    fun (_0,_1,_2) ->
	%% Line 691
	case apply 'loc'/2
		 (_0, _2) of
	  <{File,Location}> when 'true' ->
	      %% Line 692
	      apply 'add_lint_warning'/3
		  ({Location,'erl_lint',_1}, File, _2)
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_3})
	    -| ['compiler_generated'] )
	end
'add_lint_warning'/3 =
    %% Line 694
    fun (_0,_1,_2) ->
	%% Line 695
	( case _2 of
	    ( <( {'lint',_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_rec9,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec7> =
		      [{_1,_0}|_rec9]
		  in  case _2 of
			<{'lint',_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78}> when 'true' ->
			    call 'erlang':'setelement'
				(22, _2, _rec7)
			( <_79> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','lint'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_44> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'loc'/2 =
    %% Line 697
    fun (_0,_1) ->
	let <Location> =
	    call %% Line 698
		 'erl_anno':%% Line 698
			    'location'
		(_0)
	in  %% Line 699
	    case call 'erl_anno':'file'
		     (_0) of
	      %% Line 700
	      <'undefined'> when 'true' ->
		  ( case _1 of
		      ( <( {'lint',_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_rec10,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40}
			   -| ['compiler_generated'] )> when 'true' ->
			    {_rec10,Location}
			-| ['compiler_generated'] )
		      ( <_41> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','lint'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 701
	      <File> when 'true' ->
		  {File,Location}
	    end
'forms'/2 =
    %% Line 706
    fun (_0,_1) ->
	let <Forms> =
	    apply %% Line 707
		  'eval_file_attribute'/2
		(_0, _1)
	in  let <Locals> =
		apply %% Line 709
		      'local_functions'/1
		    (%% Line 709
		     Forms)
	    in  %% Line 710
		( case _1 of
		    ( <( {'lint',_21,_22,_23,_24,_25,_rec11,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53}
			 -| ['compiler_generated'] )> when 'true' ->
			  let <AutoImportSuppressed> =
			      apply 'auto_import_suppressed'/1
				  (_rec11)
			  in  let <StDeprecated> =
				  apply %% Line 711
					'disallowed_compile_flags'/2
				      (%% Line 711
				       Forms, _1)
			      in  %% Line 712
				  case StDeprecated of
				    <{'lint',_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88}> when 'true' ->
					let <_9> =
					    call %% Line 713
						 'erlang':%% Line 713
							  'setelement'
						(%% Line 713
						 10, StDeprecated, %% Line 713
								   AutoImportSuppressed)
					in  let <_11> =
						call 'erlang':'setelement'
						    (9, _9, Locals)
					    in  let <St1> =
						    apply 'includes_qlc_hrl'/2
							(Forms, _11)
						in  let <St2> =
							apply %% Line 714
							      'bif_clashes'/2
							    (%% Line 714
							     Forms, %% Line 714
								    St1)
						    in  let <St3> =
							    apply %% Line 715
								  'not_deprecated'/2
								(%% Line 715
								 Forms, %% Line 715
									St2)
							in  let <St4> =
								apply %% Line 716
								      'not_removed'/2
								    (%% Line 716
								     Forms, %% Line 716
									    St3)
							    in  let <_17> = 'form'/2
								in  let <_16> =
									apply %% Line 717
									      'pre_scan'/2
									    (%% Line 717
									     Forms, %% Line 717
										    St4)
								    in  let <St5> =
									    call %% Line 717
										 'lists':%% Line 717
											 'foldl'
										(_17, _16, %% Line 717
											   Forms)
									in  %% Line 718
									    apply 'post_traversal_check'/2
										(Forms, St5)
				    ( <_89> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','lint'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
		      -| ['compiler_generated'] )
		    ( <_54> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','lint'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
'pre_scan'/2 =
    %% Line 720
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{'attribute',L,'compile',C}|Fs],St> when 'true' ->
	      let <_5> =
		  case %% Line 721
		       apply 'is_warn_enabled'/2
			   ('export_all', St) of
		    %% Line 721
		    ( <( 'true'
			 -| ['compiler_generated'] )> when 'true' ->
			  let <_3> =
			      call %% Line 722
				   'lists':%% Line 722
					   'flatten'
				  (%% Line 722
				   [C|[]])
			  in  %% Line 722
			      call 'lists':'member'
				  ('export_all', _3)
		      -| ['compiler_generated'] )
		    %% Line 721
		    ( <( 'false'
			 -| ['compiler_generated'] )> when 'true' ->
			  'false'
		      -| ['compiler_generated'] )
		    %% Line 721
		    ( <_2> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {( 'badarg'
				      -| ['compiler_generated'] ),_2}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 721
		  case _5 of
		    %% Line 723
		    <'true'> when 'true' ->
			let <_6> =
			    apply %% Line 724
				  'add_warning'/3
				(%% Line 724
				 L, %% Line 724
				    'export_all', %% Line 724
						  St)
			in  %% Line 724
			    apply 'pre_scan'/2
				(Fs, _6)
		    %% Line 725
		    <'false'> when 'true' ->
			%% Line 726
			apply 'pre_scan'/2
			    (Fs, St)
		    ( <_7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_7})
		      -| ['compiler_generated'] )
		  end
	  %% Line 728
	  <[_10|Fs],St> when 'true' ->
	      %% Line 729
	      apply 'pre_scan'/2
		  (Fs, St)
	  %% Line 730
	  <[],St> when 'true' ->
	      %% Line 731
	      St
	  ( <_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8})
		  -| [{'function_name',{'pre_scan',2}}] )
	    -| ['compiler_generated'] )
	end
'includes_qlc_hrl'/2 =
    %% Line 733
    fun (_0,_1) ->
	let <_8> =
	    letrec
		'lc$^0'/1 =
		    %% Line 736
		    fun (_5) ->
			case _5 of
			  <[{'attribute',_15,'file',{File,_X_line}}|_3]> when 'true' ->
			      let <_4> =
				  call %% Line 737
				       'filename':%% Line 737
						  'basename'
				      (%% Line 737
				       File)
			      in  %% Line 737
				  ( case <> of
				      <>
					  when call 'erlang':'=:='
						(_4,
						 [113|[108|[99|[46|[104|[114|[108]]]]]]]) ->
					  let <_6> =
					      apply 'lc$^0'/1
						  (_3)
					  in  ( [File|_6]
						-| ['compiler_generated'] )
				      ( <> when 'true' ->
					    apply 'lc$^0'/1
						(_3)
					-| ['compiler_generated'] )
				    end
				    -| ['list_comprehension'] )
			  ( <[_2|_3]> when 'true' ->
				apply 'lc$^0'/1
				    (_3)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_51> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_51})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 736
		apply 'lc$^0'/1
		    (_0)
	in  let <_rec13> =
		call %% Line 738
		     'erlang':%% Line 738
			      '=/='
		    (_8, %% Line 738
			 [])
	    in  %% Line 738
		case _1 of
		  <{'lint',_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49}> when 'true' ->
		      call 'erlang':'setelement'
			  (25, _1, _rec13)
		  ( <_50> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','lint'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
'eval_file_attribute'/2 =
    %% Line 740
    fun (_0,_1) ->
	%% Line 741
	( case _1 of
	    ( <( {'lint',_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_rec15,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'eval_file_attr'/2
		      (_0, _rec15)
	      -| ['compiler_generated'] )
	    ( <_39> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'eval_file_attr'/2 =
    %% Line 743
    fun (_0,_1) ->
	case <_0,_1> of
	  <[Form = {'attribute',_X_L,'file',{File,_X_Line}}|Forms],_X_File> when 'true' ->
	      let <_2> =
		  apply %% Line 744
			'eval_file_attr'/2
		      (%% Line 744
		       Forms, %% Line 744
			      File)
	      in  %% Line 744
		  [Form|_2]
	  %% Line 745
	  <[Form0|Forms],File> when 'true' ->
	      let <Form> =
		  apply %% Line 746
			'set_form_file'/2
		      (%% Line 746
		       Form0, %% Line 746
			      File)
	      in  let <_4> =
		      apply %% Line 747
			    'eval_file_attr'/2
			  (%% Line 747
			   Forms, %% Line 747
				  File)
		  in  %% Line 747
		      [Form|_4]
	  %% Line 748
	  <[],_X_File> when 'true' ->
	      %% Line 749
	      []
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'eval_file_attr',2}}] )
	    -| ['compiler_generated'] )
	end
'set_form_file'/2 =
    %% Line 754
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'attribute',L,K,V},File> when 'true' ->
	      let <_2> =
		  call %% Line 755
		       'erl_anno':%% Line 755
				  'set_file'
		      (%% Line 755
		       File, %% Line 755
			     L)
	      in  %% Line 755
		  {'attribute',_2,K,V}
	  %% Line 756
	  <{'function',L,N,A,C},File> when 'true' ->
	      let <_3> =
		  call %% Line 757
		       'erl_anno':%% Line 757
				  'set_file'
		      (%% Line 757
		       File, %% Line 757
			     L)
	      in  %% Line 757
		  {'function',_3,N,A,C}
	  %% Line 758
	  <Form,_X_File> when 'true' ->
	      %% Line 759
	      Form
	end
'set_file'/2 =
    %% Line 761
    fun (_0,_1) ->
	case <_0,_1> of
	  <Ts,File>
	      when call 'erlang':'is_list'
		    (Ts) ->
	      %% Line 762
	      ( letrec
		    'lc$^0'/1 =
			fun (_4) ->
			    case _4 of
			      <[T|_3]> when 'true' ->
				  let <_5> =
				      apply 'anno_set_file'/2
					  (T, File)
				  in  let <_6> =
					  apply 'lc$^0'/1
					      (_3)
				      in  ( [_5|_6]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_9> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_9})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(Ts)
		-| ['list_comprehension'] )
	  %% Line 763
	  <T,File> when 'true' ->
	      %% Line 764
	      apply 'anno_set_file'/2
		  (T, File)
	end
'anno_set_file'/2 =
    %% Line 766
    fun (_0,_1) ->
	let <F> =
	    fun (_2) ->
		%% Line 767
		call 'erl_anno':'set_file'
		    (_1, _2)
	in  %% Line 768
	    call 'erl_parse':'map_anno'
		(F, _0)
'form'/2 =
    %% Line 773
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'error',E},St> when 'true' ->
	      apply 'add_error'/2
		  (E, St)
	  %% Line 774
	  <{'warning',W},St> when 'true' ->
	      apply 'add_warning'/2
		  (W, St)
	  %% Line 775
	  <{'attribute',_X_L,'file',{File,_X_Line}},St> when 'true' ->
	      %% Line 776
	      case St of
		<{'lint',_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40}> when 'true' ->
		    call 'erlang':'setelement'
			(23, St, File)
		( <_41> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','lint'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 777
	  <{'attribute',_X_L,'compile',_42},St> when 'true' ->
	      %% Line 778
	      St
	  %% Line 779
	  <Form,St = {'lint',State,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75}> when 'true' ->
	      %% Line 780
	      case State of
		%% Line 781
		<'start'> when 'true' ->
		    apply 'start_state'/2
			(Form, St)
		%% Line 782
		<'attribute'> when 'true' ->
		    apply 'attribute_state'/2
			(Form, St)
		%% Line 783
		<'function'> when 'true' ->
		    apply 'function_state'/2
			(Form, St)
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'form',2}}] )
	    -| ['compiler_generated'] )
	end
'start_state'/2 =
    %% Line 788
    fun (_0,_1) ->
	case <_0,_1> of
	  <Form = {'attribute',Line,'module',{_23,_24}},St0> when 'true' ->
	      let <St1> =
		  apply %% Line 789
			'add_error'/3
		      (%% Line 789
		       Line, %% Line 789
			     'pmod_unsupported', %% Line 789
						 St0)
	      in  %% Line 790
		  case St1 of
		    <{'lint',_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58}> when 'true' ->
			let <_5> =
			    call 'erlang':'setelement'
				(2, St1, 'attribute')
			in  apply 'attribute_state'/2
				(Form, _5)
		    ( <_59> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','lint'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 791
	  <{'attribute',Line,'module',M},St0> when 'true' ->
	      %% Line 792
	      case St0 of
		<{'lint',_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93}> when 'true' ->
		    let <_8> =
			call 'erlang':'setelement'
			    (3, St0, M)
		    in  %% Line 793
			case _8 of
			  <{'lint',_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128}> when 'true' ->
			      let <_12> =
				  call 'erlang':'setelement'
				      (2, _8, 'attribute')
			      in  %% Line 794
				  apply 'check_module_name'/3
				      (M, Line, _12)
			  ( <_129> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','lint'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		( <_94> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','lint'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 795
	  <Form,St> when 'true' ->
	      let <_15> =
		  case %% Line 796
		       Form of
		    %% Line 797
		    <{'eof',L}> when 'true' ->
			call 'erl_anno':'new'
			    (L)
		    %% Line 799
		    <_130> when 'true' ->
			call 'erlang':'element'
			    (2, Form)
		  end
	      in  let <St1> =
		      apply %% Line 801
			    'add_error'/3
			  (_15, %% Line 801
				'undefined_module', %% Line 801
						    St)
		  in  %% Line 802
		      case St1 of
			<{'lint',_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164}> when 'true' ->
			    let <_20> =
				call 'erlang':'setelement'
				    (2, St1, 'attribute')
			    in  apply 'attribute_state'/2
				    (Form, _20)
			( <_165> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','lint'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	end
'attribute_state'/2 =
    %% Line 807
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'attribute',_X_L,'module',_X_M},St = {'lint',_17,'',_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49}> when 'true' ->
	      %% Line 808
	      St
	  %% Line 809
	  <{'attribute',L,'module',_X_M},St> when 'true' ->
	      %% Line 810
	      apply 'add_error'/3
		  (L, 'redefine_module', St)
	  %% Line 811
	  <{'attribute',L,'export',Es},St> when 'true' ->
	      %% Line 812
	      apply 'export'/3
		  (L, Es, St)
	  %% Line 813
	  <{'attribute',L,'export_type',Es},St> when 'true' ->
	      %% Line 814
	      apply 'export_type'/3
		  (L, Es, St)
	  %% Line 815
	  <{'attribute',L,'import',Is},St> when 'true' ->
	      %% Line 816
	      apply 'import'/3
		  (L, Is, St)
	  %% Line 817
	  <{'attribute',L,'record',{Name,Fields}},St> when 'true' ->
	      %% Line 818
	      apply 'record_def'/4
		  (L, Name, Fields, St)
	  %% Line 819
	  <{'attribute',La,'behaviour',Behaviour},St> when 'true' ->
	      %% Line 820
	      ( case St of
		  ( <( {'lint',_50,_51,_rec23,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec21> =
			    call 'erlang':'++'
				(_rec23, [{La,Behaviour}|[]])
			in  case St of
			      <{'lint',_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117}> when 'true' ->
				  call 'erlang':'setelement'
				      (4, St, _rec21)
			      ( <_118> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','lint'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_83> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','lint'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 821
	  <{'attribute',La,'behavior',Behaviour},St> when 'true' ->
	      %% Line 822
	      ( case St of
		  ( <( {'lint',_119,_120,_rec26,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec24> =
			    call 'erlang':'++'
				(_rec26, [{La,Behaviour}|[]])
			in  case St of
			      <{'lint',_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183,_184,_185,_186}> when 'true' ->
				  call 'erlang':'setelement'
				      (4, St, _rec24)
			      ( <_187> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','lint'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_152> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','lint'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 823
	  <{'attribute',L,'type',{TypeName,TypeDef,Args}},St> when 'true' ->
	      %% Line 824
	      apply 'type_def'/6
		  ('type', L, TypeName, TypeDef, Args, St)
	  %% Line 825
	  <{'attribute',L,'opaque',{TypeName,TypeDef,Args}},St> when 'true' ->
	      %% Line 826
	      apply 'type_def'/6
		  ('opaque', L, TypeName, TypeDef, Args, St)
	  %% Line 827
	  <{'attribute',L,'spec',{Fun,Types}},St> when 'true' ->
	      %% Line 828
	      apply 'spec_decl'/4
		  (L, Fun, Types, St)
	  %% Line 829
	  <{'attribute',L,'callback',{Fun,Types}},St> when 'true' ->
	      %% Line 830
	      apply 'callback_decl'/4
		  (L, Fun, Types, St)
	  %% Line 831
	  <{'attribute',L,'optional_callbacks',Es},St> when 'true' ->
	      %% Line 832
	      apply 'optional_callbacks'/3
		  (L, Es, St)
	  %% Line 833
	  <{'attribute',L,'on_load',Val},St> when 'true' ->
	      %% Line 834
	      apply 'on_load'/3
		  (L, Val, St)
	  %% Line 835
	  <{'attribute',_X_L,_X_Other,_X_Val},St> when 'true' ->
	      %% Line 836
	      St
	  %% Line 837
	  <Form,St> when 'true' ->
	      %% Line 838
	      case St of
		<{'lint',_188,_189,_190,_191,_192,_193,_194,_195,_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208,_209,_210,_211,_212,_213,_214,_215,_216,_217,_218,_219,_220,_221}> when 'true' ->
		    let <_14> =
			call 'erlang':'setelement'
			    (2, St, 'function')
		    in  apply 'function_state'/2
			    (Form, _14)
		( <_222> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','lint'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	end
'function_state'/2 =
    %% Line 846
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'attribute',L,'record',{Name,Fields}},St> when 'true' ->
	      %% Line 847
	      apply 'record_def'/4
		  (L, Name, Fields, St)
	  %% Line 848
	  <{'attribute',L,'type',{TypeName,TypeDef,Args}},St> when 'true' ->
	      %% Line 849
	      apply 'type_def'/6
		  ('type', L, TypeName, TypeDef, Args, St)
	  %% Line 850
	  <{'attribute',L,'opaque',{TypeName,TypeDef,Args}},St> when 'true' ->
	      %% Line 851
	      apply 'type_def'/6
		  ('opaque', L, TypeName, TypeDef, Args, St)
	  %% Line 852
	  <{'attribute',L,'spec',{Fun,Types}},St> when 'true' ->
	      %% Line 853
	      apply 'spec_decl'/4
		  (L, Fun, Types, St)
	  %% Line 854
	  <{'attribute',_X_L,'dialyzer',_X_Val},St> when 'true' ->
	      %% Line 855
	      St
	  %% Line 856
	  <{'attribute',La,Attr,_X_Val},St> when 'true' ->
	      %% Line 857
	      apply 'add_error'/3
		  (La, {'attribute',Attr}, St)
	  %% Line 858
	  <{'function',L,N,A,Cs},St> when 'true' ->
	      %% Line 859
	      apply 'function'/5
		  (L, N, A, Cs, St)
	  %% Line 860
	  <{'eof',L},St> when 'true' ->
	      apply 'eof'/2
		  (L, St)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'function_state',2}}] )
	    -| ['compiler_generated'] )
	end
'eof'/2 =
    %% Line 865
    fun (_0,_1) ->
	_1
'bif_clashes'/2 =
    %% Line 870
    fun (_0,_1) ->
	case <_0,_1> of
	  <Forms,St = {'lint',_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,Nowarn,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47}> when 'true' ->
	      let <_7> =
		  letrec
		      'lc$^0'/1 =
			  %% Line 871
			  fun (_4) ->
			      case _4 of
				<[{'function',_X_L,Name,Arity,_X_Cs}|_3]> when 'true' ->
				    %% Line 872
				    ( case call 'erl_internal':'bif'
					       (Name, Arity) of
					<'true'> when 'true' ->
					    let <_5> =
						apply 'lc$^0'/1
						    (_3)
					    in  ( [{Name,Arity}|_5]
						  -| ['compiler_generated'] )
					( <'false'> when 'true' ->
					      apply 'lc$^0'/1
						  (_3)
					  -| ['compiler_generated'] )
					( <_6> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_6})
					  -| ['compiler_generated'] )
				      end
				      -| ['list_comprehension'] )
				( <[_2|_3]> when 'true' ->
				      apply 'lc$^0'/1
					  (_3)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_83> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_83})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  %% Line 871
		      apply 'lc$^0'/1
			  (Forms)
	      in  let <_9> =
		      call %% Line 873
			   'ordsets':%% Line 873
				     'from_list'
			  (_7)
		  in  let <Clashes> =
			  call %% Line 873
			       'ordsets':%% Line 873
					 'subtract'
			      (_9, %% Line 873
				   Nowarn)
		      in  %% Line 874
			  case St of
			    <{'lint',_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81}> when 'true' ->
				call 'erlang':'setelement'
				    (14, St, Clashes)
			    ( <_82> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','lint'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
	  ( <_14,_13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13})
		  -| [{'function_name',{'bif_clashes',2}}] )
	    -| ['compiler_generated'] )
	end
'not_deprecated'/2 =
    %% Line 878
    fun (_0,_1) ->
	case <_0,_1> of
	  <Forms,St0 = {'lint',_43,_44,_45,_46,_47,Opts,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75}> when 'true' ->
	      let <_14> =
		  letrec
		      'lc$^0'/1 =
			  %% Line 881
			  fun (_10) ->
			      case _10 of
				<[{'attribute',L,'compile',Args}|_3]> when 'true' ->
				    %% Line 882
				    ( letrec
					  'lc$^1'/1 =
					      fun (_11) ->
						  case _11 of
						    <[{'nowarn_deprecated_function',MFAs0}|_5]> when 'true' ->
							%% Line 883
							( letrec
							      'lc$^2'/1 =
								  fun (_12) ->
								      case _12 of
									<[MFA|_8]> when 'true' ->
									    let <_13> =
										apply 'lc$^2'/1
										    (_8)
									    in  ( [{MFA,L}|_13]
										  -| ['compiler_generated'] )
									<[]> when 'true' ->
									    apply 'lc$^1'/1
										(_5)
									( <_111> when 'true' ->
									      ( primop 'match_fail'
										    ({'function_clause',_111})
										-| [{'function_name',{'lc$^2',1}}] )
									  -| ['compiler_generated'] )
								      end
							  in  let <_9> =
								  call 'lists':'flatten'
								      ([MFAs0|[]])
							      in  apply 'lc$^2'/1
								      (_9)
							  -| ['list_comprehension'] )
						    ( <[_4|_5]> when 'true' ->
							  apply 'lc$^1'/1
							      (_5)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							apply 'lc$^0'/1
							    (_3)
						    ( <_112> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_112})
							    -| [{'function_name',{'lc$^1',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  let <_6> =
					      call 'lists':'flatten'
						  ([Args|[]])
					  in  apply 'lc$^1'/1
						  (_6)
				      -| ['list_comprehension'] )
				( <[_2|_3]> when 'true' ->
				      apply 'lc$^0'/1
					  (_3)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_113> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_113})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  %% Line 881
		      apply 'lc$^0'/1
			  (Forms)
	      in  let <_24> =
		      letrec
			  'lc$^3'/1 =
			      %% Line 885
			      fun (_21) ->
				  case _21 of
				    <[{'nowarn_deprecated_function',MFAs0}|_17]> when 'true' ->
					%% Line 886
					( letrec
					      'lc$^4'/1 =
						  fun (_22) ->
						      case _22 of
							<[MFA|_19]> when 'true' ->
							    let <_23> =
								apply 'lc$^4'/1
								    (_19)
							    in  ( [MFA|_23]
								  -| ['compiler_generated'] )
							<[]> when 'true' ->
							    apply 'lc$^3'/1
								(_17)
							( <_114> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_114})
								-| [{'function_name',{'lc$^4',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  let <_20> =
						  call 'lists':'flatten'
						      ([MFAs0|[]])
					      in  apply 'lc$^4'/1
						      (_20)
					  -| ['list_comprehension'] )
				    ( <[_16|_17]> when 'true' ->
					  apply 'lc$^3'/1
					      (_17)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_115> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_115})
					    -| [{'function_name',{'lc$^3',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  %% Line 885
			  apply 'lc$^3'/1
			      (Opts)
		  in  let <_30> =
			  letrec
			      'lc$^5'/1 =
				  %% Line 887
				  fun (_28) ->
				      case _28 of
					<[{{M,_X_F,_X_A},L}|_27]>
					    when call 'erlang':'is_atom'
						  (M) ->
					    let <_29> =
						apply 'lc$^5'/1
						    (_27)
					    in  ( [{M,L}|_29]
						  -| ['compiler_generated'] )
					( <[_26|_27]> when 'true' ->
					      apply 'lc$^5'/1
						  (_27)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_116> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_116})
						-| [{'function_name',{'lc$^5',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  %% Line 887
			      apply 'lc$^5'/1
				  (_14)
		      in  let <_36> =
			      fun (_33,_32) ->
				  %% Line 888
				  case <_33,_32> of
				    <{M,L},St2> when 'true' ->
					%% Line 889
					apply 'check_module_name'/3
					    (M, L, St2)
				    ( <_35,_34> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_35,_34})
					    -| [{'function_name',{'-not_deprecated/2-fun-6-',2}}] )
				      -| ['compiler_generated'] )
				  end
			  in  let <St1> =
				  call %% Line 888
				       'lists':%% Line 888
					       'foldl'
				      (_36, %% Line 890
					    St0, _30)
			      in  let <_rec29> =
				      call %% Line 891
					   'ordsets':%% Line 891
						     'from_list'
					  (_24)
				  in  %% Line 891
				      case St1 of
					<{'lint',_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109}> when 'true' ->
					    call 'erlang':'setelement'
						(15, St1, _rec29)
					( <_110> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','lint'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
	  ( <_42,_41> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_42,_41})
		  -| [{'function_name',{'not_deprecated',2}}] )
	    -| ['compiler_generated'] )
	end
'not_removed'/2 =
    %% Line 895
    fun (_0,_1) ->
	case <_0,_1> of
	  <Forms,St0 = {'lint',_37,_38,_39,_40,_41,Opts,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69}> when 'true' ->
	      let <_14> =
		  letrec
		      'lc$^0'/1 =
			  %% Line 898
			  fun (_10) ->
			      case _10 of
				<[{'attribute',L,'compile',Args}|_3]> when 'true' ->
				    %% Line 899
				    ( letrec
					  'lc$^1'/1 =
					      fun (_11) ->
						  case _11 of
						    <[{'nowarn_removed',MFAs0}|_5]> when 'true' ->
							%% Line 900
							( letrec
							      'lc$^2'/1 =
								  fun (_12) ->
								      case _12 of
									<[MFA|_8]> when 'true' ->
									    let <_13> =
										apply 'lc$^2'/1
										    (_8)
									    in  ( [{MFA,L}|_13]
										  -| ['compiler_generated'] )
									<[]> when 'true' ->
									    apply 'lc$^1'/1
										(_5)
									( <_105> when 'true' ->
									      ( primop 'match_fail'
										    ({'function_clause',_105})
										-| [{'function_name',{'lc$^2',1}}] )
									  -| ['compiler_generated'] )
								      end
							  in  let <_9> =
								  call 'lists':'flatten'
								      ([MFAs0|[]])
							      in  apply 'lc$^2'/1
								      (_9)
							  -| ['list_comprehension'] )
						    ( <[_4|_5]> when 'true' ->
							  apply 'lc$^1'/1
							      (_5)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							apply 'lc$^0'/1
							    (_3)
						    ( <_106> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_106})
							    -| [{'function_name',{'lc$^1',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  let <_6> =
					      call 'lists':'flatten'
						  ([Args|[]])
					  in  apply 'lc$^1'/1
						  (_6)
				      -| ['list_comprehension'] )
				( <[_2|_3]> when 'true' ->
				      apply 'lc$^0'/1
					  (_3)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_107> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_107})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  %% Line 898
		      apply 'lc$^0'/1
			  (Forms)
	      in  let <_24> =
		      letrec
			  'lc$^3'/1 =
			      %% Line 902
			      fun (_21) ->
				  case _21 of
				    <[{'nowarn_removed',MFAs0}|_17]> when 'true' ->
					%% Line 903
					( letrec
					      'lc$^4'/1 =
						  fun (_22) ->
						      case _22 of
							<[MFA|_19]> when 'true' ->
							    let <_23> =
								apply 'lc$^4'/1
								    (_19)
							    in  ( [MFA|_23]
								  -| ['compiler_generated'] )
							<[]> when 'true' ->
							    apply 'lc$^3'/1
								(_17)
							( <_108> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_108})
								-| [{'function_name',{'lc$^4',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  let <_20> =
						  call 'lists':'flatten'
						      ([MFAs0|[]])
					      in  apply 'lc$^4'/1
						      (_20)
					  -| ['list_comprehension'] )
				    ( <[_16|_17]> when 'true' ->
					  apply 'lc$^3'/1
					      (_17)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_109> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_109})
					    -| [{'function_name',{'lc$^3',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  %% Line 902
			  apply 'lc$^3'/1
			      (Opts)
		  in  let <_30> =
			  fun (_27,_26) ->
			      %% Line 904
			      case <_27,_26> of
				<{{M,_X_F,_X_A},L},St2> when 'true' ->
				    %% Line 905
				    apply 'check_module_name'/3
					(M, L, St2)
				%% Line 906
				<{M,L},St2> when 'true' ->
				    %% Line 907
				    apply 'check_module_name'/3
					(M, L, St2)
				( <_29,_28> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_29,_28})
					-| [{'function_name',{'-not_removed/2-fun-5-',2}}] )
				  -| ['compiler_generated'] )
			      end
		      in  let <St1> =
			      call %% Line 904
				   'lists':%% Line 904
					   'foldl'
				  (_30, %% Line 908
					St0, _14)
			  in  let <_rec31> =
				  call %% Line 909
				       'gb_sets':%% Line 909
						 'from_list'
				      (_24)
			      in  %% Line 909
				  case St1 of
				    <{'lint',_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103}> when 'true' ->
					call 'erlang':'setelement'
					    (16, St1, _rec31)
				    ( <_104> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','lint'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
	  ( <_36,_35> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_36,_35})
		  -| [{'function_name',{'not_removed',2}}] )
	    -| ['compiler_generated'] )
	end
'disallowed_compile_flags'/2 =
    %% Line 912
    fun (_0,_1) ->
	let <_12> =
	    letrec
		'lc$^0'/1 =
		    %% Line 915
		    fun (_7) ->
			case _7 of
			  <[{'attribute',A,'compile','nowarn_bif_clash'}|_3]> when 'true' ->
			      %% Line 916
			      ( letrec
				    'lc$^1'/1 =
					fun (_8) ->
					    case _8 of
					      <[{_46,L}|_5]> when 'true' ->
						  ( case _1 of
						      ( <( {'lint',_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_rec33,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79}
							   -| ['compiler_generated'] )> when 'true' ->
							    let <_11> =
								apply 'lc$^1'/1
								    (_5)
							    in  ( [{_rec33,{L,'erl_lint','disallowed_nowarn_bif_clash'}}|_11]
								  -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						      ( <_80> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','lint'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      ( <[_4|_5]> when 'true' ->
						    apply 'lc$^1'/1
							(_5)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  apply 'lc$^0'/1
						      (_3)
					      ( <_289> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_289})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  let <_6> =
					apply 'loc'/2
					    (A, _1)
				    in  apply 'lc$^1'/1
					    ([_6|[]])
				-| ['list_comprehension'] )
			  ( <[_2|_3]> when 'true' ->
				apply 'lc$^0'/1
				    (_3)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_290> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_290})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 915
		apply 'lc$^0'/1
		    (_0)
	in  let <_24> =
		letrec
		    'lc$^2'/1 =
			%% Line 918
			fun (_19) ->
			    case _19 of
			      <[{'attribute',A,'compile',{'nowarn_bif_clash',{_81,_82}}}|_15]> when 'true' ->
				  %% Line 919
				  ( letrec
					'lc$^3'/1 =
					    fun (_20) ->
						case _20 of
						  <[{_83,L}|_17]> when 'true' ->
						      ( case _1 of
							  ( <( {'lint',_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_rec34,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116}
							       -| ['compiler_generated'] )> when 'true' ->
								let <_23> =
								    apply 'lc$^3'/1
									(_17)
								in  ( [{_rec34,{L,'erl_lint','disallowed_nowarn_bif_clash'}}|_23]
								      -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							  ( <_117> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','lint'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  ( <[_16|_17]> when 'true' ->
							apply 'lc$^3'/1
							    (_17)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      apply 'lc$^2'/1
							  (_15)
						  ( <_291> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_291})
							  -| [{'function_name',{'lc$^3',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  let <_18> =
					    apply 'loc'/2
						(A, _1)
					in  apply 'lc$^3'/1
						([_18|[]])
				    -| ['list_comprehension'] )
			      ( <[_14|_15]> when 'true' ->
				    apply 'lc$^2'/1
					(_15)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_292> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_292})
				      -| [{'function_name',{'lc$^2',1}}] )
				-| ['compiler_generated'] )
			    end
		in  %% Line 918
		    apply 'lc$^2'/1
			(_0)
	    in  let <_26> =
		    apply %% Line 920
			  'is_warn_enabled'/2
			(%% Line 920
			 'bif_clash', _1)
		in  let <Disabled> =
			call %% Line 920
			     'erlang':%% Line 920
				      'not'
			    (_26)
		    in  let <_40> =
			    case <> of
			      %% Line 922
			      <>
				  when try
					( let <_30> =
					      case Disabled of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      call 'erlang':'=:='
							  (_12, [])
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
						( <_28> when 'true' ->
						      _28
						  -| ['compiler_generated'] )
					      end
					  in  ( call 'erlang':'=:='
						    (( _30
						       -| ['compiler_generated'] ), 'true')
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  %% Line 923
				  ( case _1 of
				      ( <( {'lint',_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_rec35,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150}
					   -| ['compiler_generated'] )> when 'true' ->
					    ( case _1 of
						( <( {'lint',_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_rec36,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183,_184}
						     -| ['compiler_generated'] )> when 'true' ->
						      [{_rec35,{'erl_lint','disallowed_nowarn_bif_clash'}}|_rec36]
						  -| ['compiler_generated'] )
						( <_185> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','lint'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <_151> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','lint'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 924
			      <>
				  when Disabled ->
				  %% Line 925
				  ( case _1 of
				      ( <( {'lint',_186,_187,_188,_189,_190,_191,_192,_193,_194,_195,_196,_197,_198,_199,_200,_201,_202,_203,_204,_rec37,_205,_206,_207,_208,_209,_210,_211,_212,_213,_214,_215,_216,_217,_218}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_37> =
						call 'erlang':'++'
						    (_24, _rec37)
					    in  call 'erlang':'++'
						    (_12, _37)
					-| ['compiler_generated'] )
				      ( <_219> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','lint'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 926
			      <> when 'true' ->
				  %% Line 927
				  ( case _1 of
				      ( <( {'lint',_220,_221,_222,_223,_224,_225,_226,_227,_228,_229,_230,_231,_232,_233,_234,_235,_236,_237,_238,_rec38,_239,_240,_241,_242,_243,_244,_245,_246,_247,_248,_249,_250,_251,_252}
					   -| ['compiler_generated'] )> when 'true' ->
					    call 'erlang':'++'
						(_24, _rec38)
					-| ['compiler_generated'] )
				      ( <_253> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','lint'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			    end
			in  %% Line 929
			    case _1 of
			      <{'lint',_254,_255,_256,_257,_258,_259,_260,_261,_262,_263,_264,_265,_266,_267,_268,_269,_270,_271,_272,_273,_274,_275,_276,_277,_278,_279,_280,_281,_282,_283,_284,_285,_286,_287}> when 'true' ->
				  call 'erlang':'setelement'
				      (21, _1, _40)
			      ( <_288> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','lint'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
'post_traversal_check'/2 =
    %% Line 935
    fun (_0,_1) ->
	let <St1> =
	    apply %% Line 936
		  'check_behaviour'/1
		(_1)
	in  let <St2> =
		apply %% Line 937
		      'check_deprecated'/2
		    (_0, %% Line 937
			 St1)
	    in  let <St3> =
		    apply %% Line 938
			  'check_imports'/2
			(_0, %% Line 938
			     St2)
		in  let <St4> =
			apply %% Line 939
			      'check_inlines'/2
			    (_0, %% Line 939
				 St3)
		    in  let <St5> =
			    apply %% Line 940
				  'check_undefined_functions'/1
				(%% Line 940
				 St4)
			in  let <St6> =
				apply %% Line 941
				      'check_unused_functions'/2
				    (_0, %% Line 941
					 St5)
			    in  let <St7> =
				    apply %% Line 942
					  'check_bif_clashes'/2
					(_0, %% Line 942
					     St6)
				in  let <St8> =
					apply %% Line 943
					      'check_specs_without_function'/1
					    (%% Line 943
					     St7)
				    in  let <St9> =
					    apply %% Line 944
						  'check_functions_without_spec'/2
						(_0, %% Line 944
						     St8)
					in  let <StA> =
						apply %% Line 945
						      'check_undefined_types'/1
						    (%% Line 945
						     St9)
					    in  let <StB> =
						    apply %% Line 946
							  'check_unused_types'/2
							(_0, %% Line 946
							     StA)
						in  let <StC> =
							apply %% Line 947
							      'check_untyped_records'/2
							    (_0, %% Line 947
								 StB)
						    in  let <StD> =
							    apply %% Line 948
								  'check_on_load'/1
								(%% Line 948
								 StC)
							in  let <StE> =
								apply %% Line 949
								      'check_unused_records'/2
								    (_0, %% Line 949
									 StD)
							    in  let <StF> =
								    apply %% Line 950
									  'check_local_opaque_types'/1
									(%% Line 950
									 StE)
								in  let <StG> =
									apply %% Line 951
									      'check_dialyzer_attribute'/2
									    (_0, %% Line 951
										 StF)
								    in  let <StH> =
									    apply %% Line 952
										  'check_callback_information'/1
										(%% Line 952
										 StG)
									in  %% Line 953
									    apply 'check_removed'/2
										(_0, StH)
'check_behaviour'/1 =
    %% Line 958
    fun (_0) ->
	%% Line 959
	( case _0 of
	    ( <( {'lint',_4,_5,_rec40,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36}
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'behaviour_check'/2
		      (_rec40, _0)
	      -| ['compiler_generated'] )
	    ( <_37> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'behaviour_check'/2 =
    %% Line 964
    fun (_0,_1) ->
	%% Line 965
	case apply 'all_behaviour_callbacks'/3
		 (_0, [], _1) of
	  <{AllBfs0,St1}> when 'true' ->
	      let <St> =
		  apply %% Line 966
			'behaviour_missing_callbacks'/2
		      (%% Line 966
		       AllBfs0, %% Line 966
				St1)
	      in  let <Exports> =
		      apply %% Line 967
			    'exports'/1
			  (_1)
		  in  let <F> =
			  fun (_15,_14) ->
			      %% Line 969
			      ( letrec
				    'lc$^0'/1 =
					fun (_11) ->
					    case _11 of
					      <[B|_6]> when 'true' ->
						  let <_8> =
						      call %% Line 970
							   'lists':%% Line 970
								   'member'
							  (%% Line 970
							   B, _14)
						  in  let <_10> =
							  case _8 of
							    %% Line 971
							    ( <'false'> when 'true' ->
								  'true'
							      -| ['compiler_generated'] )
							    %% Line 971
							    ( <'true'> when 'true' ->
								  call 'gb_sets':'is_member'
								      (B, Exports)
							      -| ['compiler_generated'] )
							    ( <_cor_variable> when 'true' ->
								  %% Line 970
								  call 'erlang':'error'
								      ('badarg')
							      -| ['compiler_generated'] )
							  end
						      in  %% Line 971
							  ( case _10 of
							      <'true'> when 'true' ->
								  let <_12> =
								      apply 'lc$^0'/1
									  (_6)
								  in  ( [B|_12]
									-| ['compiler_generated'] )
							      ( <'false'> when 'true' ->
								    apply 'lc$^0'/1
									(_6)
								-| ['compiler_generated'] )
							      ( <_13> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_13})
								-| ['compiler_generated'] )
							    end
							    -| ['list_comprehension'] )
					      <[]> when 'true' ->
						  []
					      ( <_28> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_28})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^0'/1
					(_15)
				-| ['list_comprehension'] )
		      in  let <_24> =
			      letrec
				  'lc$^2'/1 =
				      %% Line 974
				      fun (_21) ->
					  case _21 of
					    <[{Item,Bfs0,OBfs0}|_20]> when 'true' ->
						let <_22> =
						    apply F
							(Bfs0, OBfs0)
						in  let <_23> =
							apply 'lc$^2'/1
							    (_20)
						    in  ( [{Item,_22}|_23]
							  -| ['compiler_generated'] )
					    ( <[_19|_20]> when 'true' ->
						  apply 'lc$^2'/1
						      (_20)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_31> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_31})
						    -| [{'function_name',{'lc$^2',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  %% Line 974
				  apply 'lc$^2'/1
				      (AllBfs0)
			  in  %% Line 975
			      apply 'behaviour_conflicting'/2
				  (_24, St)
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_2})
	    -| ['compiler_generated'] )
	end
'all_behaviour_callbacks'/3 =
    %% Line 977
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[_@r0 = {Line,B}|Bs],Acc,St0> when 'true' ->
	      %% Line 978
	      case apply 'behaviour_callbacks'/3
		       (Line, B, St0) of
		<{Bfs0,OBfs0,St}> when 'true' ->
		    %% Line 979
		    apply 'all_behaviour_callbacks'/3
			(Bs, [{_@r0,Bfs0,OBfs0}|Acc], St)
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 980
	  <[],Acc,St> when 'true' ->
	      let <_4> =
		  call 'lists':'reverse'
		      (Acc)
	      in  {_4,St}
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'all_behaviour_callbacks',3}}] )
	    -| ['compiler_generated'] )
	end
'behaviour_callbacks'/3 =
    %% Line 982
    fun (_0,_1,_2) ->
	%% Line 983
	try
	    call _1:'behaviour_info'
		('callbacks')
	of <_3> ->
	    case _3 of
	      %% Line 984
	      <'undefined'> when 'true' ->
		  let <St1> =
		      apply %% Line 985
			    'add_warning'/3
			  (_0, %% Line 985
			       {'undefined_behaviour_callbacks',_1}, _2)
		  in  %% Line 986
		      {[],[],St1}
	      %% Line 987
	      <Funcs> when 'true' ->
		  %% Line 988
		  case apply 'is_fa_list'/1
			   (Funcs) of
		    %% Line 989
		    <'true'> when 'true' ->
			%% Line 990
			try
			    call _1:'behaviour_info'
				('optional_callbacks')
			of <_5> ->
			    case _5 of
			      %% Line 991
			      <'undefined'> when 'true' ->
				  %% Line 992
				  {Funcs,[],_2}
			      %% Line 993
			      <OptFuncs> when 'true' ->
				  %% Line 996
				  case apply 'is_fa_list'/1
					   (OptFuncs) of
				    %% Line 997
				    <'true'> when 'true' ->
					%% Line 998
					{Funcs,OptFuncs,_2}
				    %% Line 999
				    <'false'> when 'true' ->
					let <W> = {%% Line 1000
					     'ill_defined_optional_callbacks',_1}
					in  let <St1> =
						apply %% Line 1001
						      'add_warning'/3
						    (_0, %% Line 1001
							 W, _2)
					    in  %% Line 1002
						{Funcs,[],St1}
				    ( <_8> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_8})
				      -| ['compiler_generated'] )
				  end
			    end
			catch <_12,_11,_10> ->
			    %% Line 1006
			    {Funcs,[],_2}
		    %% Line 1008
		    <'false'> when 'true' ->
			let <St1> =
			    apply %% Line 1009
				  'add_warning'/3
				(_0, %% Line 1010
				     {'ill_defined_behaviour_callbacks',_1}, _2)
			in  %% Line 1012
			    {[],[],St1}
		    ( <_14> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_14})
		      -| ['compiler_generated'] )
		  end
	    end
	catch <_18,_17,_16> ->
	    let <St1> =
		apply %% Line 1016
		      'add_warning'/3
		    (_0, %% Line 1016
			 {'undefined_behaviour',_1}, _2)
	    in  let <St2> =
		    apply %% Line 1017
			  'check_module_name'/3
			(_1, _0, %% Line 1017
				 St1)
		in  %% Line 1018
		    {[],[],St2}
'behaviour_missing_callbacks'/2 =
    %% Line 1021
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{{Line,B},Bfs0,OBfs}|T],St0> when 'true' ->
	      let <_3> =
		  call %% Line 1022
		       'ordsets':%% Line 1022
				 'from_list'
		      (%% Line 1022
		       Bfs0)
	      in  let <_2> =
		      call %% Line 1022
			   'ordsets':%% Line 1022
				     'from_list'
			  (%% Line 1022
			   OBfs)
		  in  let <Bfs> =
			  call %% Line 1022
			       'ordsets':%% Line 1022
					 'subtract'
			      (_3, _2)
		      in  let <_5> =
			      apply %% Line 1023
				    'exports'/1
				  (%% Line 1023
				   St0)
			  in  let <Exports> =
				  call %% Line 1023
				       'gb_sets':%% Line 1023
						 'to_list'
				      (_5)
			      in  let <Missing> =
				      call %% Line 1024
					   'ordsets':%% Line 1024
						     'subtract'
					  (%% Line 1024
					   Bfs, %% Line 1024
						Exports)
				  in  let <_14> =
					  fun (_11,_10) ->
					      %% Line 1026
					      case apply 'is_fa'/1
						       (_11) of
						%% Line 1027
						<'true'> when 'true' ->
						    let <M> = {%% Line 1028
							 'undefined_behaviour_func',_11,%% Line 1028
											B}
						    in  %% Line 1029
							apply 'add_warning'/3
							    (Line, M, _10)
						%% Line 1030
						<'false'> when 'true' ->
						    _10
						( <_9> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_9})
						  -| ['compiler_generated'] )
					      end
				      in  let <St> =
					      call %% Line 1025
						   'lists':%% Line 1025
							   'foldl'
						  (_14, %% Line 1033
							St0, %% Line 1033
							     Missing)
					  in  %% Line 1034
					      apply 'behaviour_missing_callbacks'/2
						  (T, St)
	  %% Line 1035
	  <[],St> when 'true' ->
	      St
	  ( <_17,_16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_17,_16})
		  -| [{'function_name',{'behaviour_missing_callbacks',2}}] )
	    -| ['compiler_generated'] )
	end
'behaviour_conflicting'/2 =
    %% Line 1037
    fun (_0,_1) ->
	let <R0> =
	    call %% Line 1038
		 'sofs':%% Line 1038
			'relation'
		(_0, %% Line 1038
		     [{'item',['callback']}])
	in  let <R1> =
		call %% Line 1039
		     'sofs':%% Line 1039
			    'family_to_relation'
		    (%% Line 1039
		     R0)
	    in  let <R2> =
		    call %% Line 1040
			 'sofs':%% Line 1040
				'converse'
			(%% Line 1040
			 R1)
		in  let <R3> =
			call %% Line 1041
			     'sofs':%% Line 1041
				    'relation_to_family'
			    (%% Line 1041
			     R2)
		    in  let <_9> =
			    fun (_7) ->
				let <_6> =
				    call %% Line 1042
					 'sofs':%% Line 1042
						'no_elements'
					(%% Line 1042
					 _7)
				in  %% Line 1042
				    call 'erlang':'>'
					(_6, 1)
			in  let <R4> =
				call %% Line 1042
				     'sofs':%% Line 1042
					    'family_specification'
				    (_9, %% Line 1042
					 R3)
			    in  let <R> =
				    call %% Line 1043
					 'sofs':%% Line 1043
						'to_external'
					(%% Line 1043
					 R4)
				in  %% Line 1044
				    apply 'behaviour_add_conflicts'/2
					(R, _1)
'behaviour_add_conflicts'/2 =
    %% Line 1046
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{Cb,[{FirstLoc,FirstB}|Cs]}|T],St0> when 'true' ->
	      let <_2> =
		  apply %% Line 1047
			'loc'/2
		      (%% Line 1047
		       FirstLoc, %% Line 1047
				 St0)
	      in  let <FirstL> =
		      call %% Line 1047
			   'erlang':%% Line 1047
				    'element'
			  (%% Line 1047
			   2, _2)
		  in  let <St> =
			  apply %% Line 1048
				'behaviour_add_conflict'/5
			      (%% Line 1048
			       Cs, %% Line 1048
				   Cb, %% Line 1048
				       FirstL, %% Line 1048
					       FirstB, %% Line 1048
						       St0)
		      in  %% Line 1049
			  apply 'behaviour_add_conflicts'/2
			      (T, St)
	  %% Line 1050
	  <[],St> when 'true' ->
	      St
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'behaviour_add_conflicts',2}}] )
	    -| ['compiler_generated'] )
	end
'behaviour_add_conflict'/5 =
    %% Line 1052
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <[{Line,B}|Cs],Cb,FirstL,FirstB,St0> when 'true' ->
	      let <St> =
		  apply %% Line 1053
			'add_warning'/3
		      (%% Line 1053
		       Line, %% Line 1053
			     {'conflicting_behaviours',Cb,B,FirstL,FirstB}, %% Line 1053
									    St0)
	      in  %% Line 1054
		  apply 'behaviour_add_conflict'/5
		      (Cs, Cb, FirstL, FirstB, St)
	  %% Line 1055
	  <[],_11,_12,_13,St> when 'true' ->
	      St
	  ( <_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8,_7,_6})
		  -| [{'function_name',{'behaviour_add_conflict',5}}] )
	    -| ['compiler_generated'] )
	end
'check_deprecated'/2 =
    %% Line 1059
    fun (_0,_1) ->
	%% Line 1061
	( case _1 of
	    ( <( {'lint',_33,_34,_35,_36,_37,_rec41,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_7> =
		      case call 'lists':'member'
			       ('export_all', _rec41) of
			%% Line 1062
			<'true'> when 'true' ->
			    ( case _1 of
				( <( {'lint',_67,_68,_69,_70,_71,_72,_73,_74,_75,_rec42,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99}
				     -| ['compiler_generated'] )> when 'true' ->
				      _rec42
				  -| ['compiler_generated'] )
				( <_100> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','lint'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			%% Line 1063
			<'false'> when 'true' ->
			    ( case _1 of
				( <( {'lint',_101,_102,_103,_rec43,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133}
				     -| ['compiler_generated'] )> when 'true' ->
				      _rec43
				  -| ['compiler_generated'] )
				( <_134> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','lint'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			( <_6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_6})
			  -| ['compiler_generated'] )
		      end
		  in  let <_9> =
			  call %% Line 1065
			       'gb_sets':%% Line 1065
					 'to_list'
			      (_7)
		      in  let <X> =
			      apply %% Line 1065
				    'ignore_predefined_funcs'/1
				  (_9)
			  in  %% Line 1066
			      case _1 of
				<{'lint',_135,Mod,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167}> when 'true' ->
				    let <_24> =
					letrec
					    'lc$^0'/1 =
						%% Line 1067
						fun (_20) ->
						    case _20 of
						      <[{'attribute',L,'deprecated',Depr}|_13]> when 'true' ->
							  %% Line 1068
							  ( letrec
								'lc$^1'/1 =
								    fun (_21) ->
									case _21 of
									  <[D|_15]> when 'true' ->
									      %% Line 1069
									      ( letrec
										    'lc$^2'/1 =
											fun (_22) ->
											    case _22 of
											      <[E|_18]> when 'true' ->
												  let <_23> =
												      apply 'lc$^2'/1
													  (_18)
												  in  ( [{E,L}|_23]
													-| ['compiler_generated'] )
											      <[]> when 'true' ->
												  apply 'lc$^1'/1
												      (_15)
											      ( <_168> when 'true' ->
												    ( primop 'match_fail'
													  ({'function_clause',_168})
												      -| [{'function_name',{'lc$^2',1}}] )
												-| ['compiler_generated'] )
											    end
										in  let <_19> =
											apply 'depr_cat'/3
											    (D, X, Mod)
										    in  apply 'lc$^2'/1
											    (_19)
										-| ['list_comprehension'] )
									  <[]> when 'true' ->
									      apply 'lc$^0'/1
										  (_13)
									  ( <_169> when 'true' ->
										( primop 'match_fail'
										      ({'function_clause',_169})
										  -| [{'function_name',{'lc$^1',1}}] )
									    -| ['compiler_generated'] )
									end
							    in  let <_16> =
								    call 'lists':'flatten'
									([Depr|[]])
								in  apply 'lc$^1'/1
									(_16)
							    -| ['list_comprehension'] )
						      ( <[_12|_13]> when 'true' ->
							    apply 'lc$^0'/1
								(_13)
							-| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_170> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_170})
							      -| [{'function_name',{'lc$^0',1}}] )
							-| ['compiler_generated'] )
						    end
					in  %% Line 1067
					    apply 'lc$^0'/1
						(_0)
				    in  let <_30> =
					    fun (_27,_26) ->
						%% Line 1070
						case <_27,_26> of
						  <{E,L},St1> when 'true' ->
						      %% Line 1071
						      apply 'add_error'/3
							  (L, E, St1)
						  ( <_29,_28> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_29,_28})
							  -| [{'function_name',{'-check_deprecated/2-fun-3-',2}}] )
						    -| ['compiler_generated'] )
						end
					in  %% Line 1070
					    call 'lists':'foldl'
						(_30, _1, _24)
				( <_11> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_11})
				  -| ['compiler_generated'] )
			      end
	      -| ['compiler_generated'] )
	    ( <_66> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'depr_cat'/3 =
    %% Line 1074
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <D = {F,A,Flg},X,Mod> when 'true' ->
	      %% Line 1075
	      case apply 'deprecated_flag'/1
		       (Flg) of
		%% Line 1076
		<'false'> when 'true' ->
		    [{'invalid_deprecated',D}|[]]
		%% Line 1077
		<'true'> when 'true' ->
		    apply 'depr_fa'/4
			(F, A, X, Mod)
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1079
	  <{F,A},X,Mod> when 'true' ->
	      %% Line 1080
	      apply 'depr_fa'/4
		  (F, A, X, Mod)
	  %% Line 1081
	  <'module',_X_X,_X_Mod> when 'true' ->
	      %% Line 1082
	      []
	  %% Line 1083
	  <D,_X_X,_X_Mod> when 'true' ->
	      %% Line 1084
	      [{'invalid_deprecated',D}|[]]
	end
'depr_fa'/4 =
    %% Line 1086
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <'_','_',_X_X,_X_Mod> when 'true' ->
	      %% Line 1087
	      []
	  %% Line 1088
	  <F,'_',X,_X_Mod>
	      when call 'erlang':'is_atom'
		    (F) ->
	      let <_6> =
		  fun (_4) ->
		      %% Line 1090
		      case _4 of
			<{F1,_18}> when 'true' ->
			    call 'erlang':'=:='
				(F1, F)
			( <_5> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_5})
				-| [{'function_name',{'-depr_fa/4-fun-0-',1}}] )
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 1090
		  case call 'lists':'filter'
			   (_6, X) of
		    %% Line 1091
		    <[]> when 'true' ->
			[{'bad_deprecated',{F,'_'}}|[]]
		    %% Line 1092
		    <_19> when 'true' ->
			[]
		  end
	  %% Line 1094
	  <F,A,X,Mod>
	      when try
		    let <_8> =
			call 'erlang':'is_atom'
			    (F)
		    in  let <_9> =
			    call 'erlang':'is_integer'
				(A)
			in  let <_10> =
				call 'erlang':'>='
				    (A, 0)
			    in  let <_11> =
				    call 'erlang':'and'
					(_9, _10)
				in  call 'erlang':'and'
					(_8, _11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1095
	      case call 'lists':'member'
		       ({F,A}, X) of
		%% Line 1096
		<'true'> when 'true' ->
		    []
		%% Line 1097
		<'false'> when 'true' ->
		    %% Line 1098
		    case call 'erlang':'is_builtin'
			     (Mod, F, A) of
		      %% Line 1099
		      <'true'> when 'true' ->
			  []
		      %% Line 1100
		      <'false'> when 'true' ->
			  [{'bad_deprecated',{F,A}}|[]]
		      ( <_12> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_12})
			-| ['compiler_generated'] )
		    end
		( <_13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1103
	  <F,A,_X_X,_X_Mod> when 'true' ->
	      %% Line 1104
	      [{'invalid_deprecated',{F,A}}|[]]
	end
'deprecated_flag'/1 =
    %% Line 1106
    fun (_0) ->
	case _0 of
	  <'next_version'> when 'true' ->
	      'true'
	  %% Line 1107
	  <'next_major_release'> when 'true' ->
	      'true'
	  %% Line 1108
	  <'eventually'> when 'true' ->
	      'true'
	  %% Line 1109
	  <String> when 'true' ->
	      apply 'deprecated_desc'/1
		  (String)
	end
'deprecated_desc'/1 =
    %% Line 1111
    fun (_0) ->
	case _0 of
	  <[Char|Str]>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      apply 'deprecated_desc'/1
		  (Str)
	  %% Line 1112
	  <[]> when 'true' ->
	      'true'
	  %% Line 1113
	  <_2> when 'true' ->
	      'false'
	end
'check_removed'/2 =
    %% Line 1117
    fun (_0,_1) ->
	%% Line 1119
	( case _1 of
	    ( <( {'lint',_33,_34,_35,_36,_37,_rec44,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_7> =
		      case call 'lists':'member'
			       ('export_all', _rec44) of
			%% Line 1120
			<'true'> when 'true' ->
			    ( case _1 of
				( <( {'lint',_67,_68,_69,_70,_71,_72,_73,_74,_75,_rec45,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99}
				     -| ['compiler_generated'] )> when 'true' ->
				      _rec45
				  -| ['compiler_generated'] )
				( <_100> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','lint'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			%% Line 1121
			<'false'> when 'true' ->
			    ( case _1 of
				( <( {'lint',_101,_102,_103,_rec46,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133}
				     -| ['compiler_generated'] )> when 'true' ->
				      _rec46
				  -| ['compiler_generated'] )
				( <_134> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','lint'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			( <_6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_6})
			  -| ['compiler_generated'] )
		      end
		  in  let <_9> =
			  call %% Line 1123
			       'gb_sets':%% Line 1123
					 'to_list'
			      (_7)
		      in  let <X> =
			      apply %% Line 1123
				    'ignore_predefined_funcs'/1
				  (_9)
			  in  %% Line 1124
			      case _1 of
				<{'lint',_135,Mod,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167}> when 'true' ->
				    let <_24> =
					letrec
					    'lc$^0'/1 =
						%% Line 1125
						fun (_20) ->
						    case _20 of
						      <[{'attribute',L,'removed',Removed}|_13]> when 'true' ->
							  %% Line 1126
							  ( letrec
								'lc$^1'/1 =
								    fun (_21) ->
									case _21 of
									  <[R|_15]> when 'true' ->
									      %% Line 1127
									      ( letrec
										    'lc$^2'/1 =
											fun (_22) ->
											    case _22 of
											      <[E|_18]> when 'true' ->
												  let <_23> =
												      apply 'lc$^2'/1
													  (_18)
												  in  ( [{E,L}|_23]
													-| ['compiler_generated'] )
											      <[]> when 'true' ->
												  apply 'lc$^1'/1
												      (_15)
											      ( <_168> when 'true' ->
												    ( primop 'match_fail'
													  ({'function_clause',_168})
												      -| [{'function_name',{'lc$^2',1}}] )
												-| ['compiler_generated'] )
											    end
										in  let <_19> =
											apply 'removed_cat'/3
											    (R, X, Mod)
										    in  apply 'lc$^2'/1
											    (_19)
										-| ['list_comprehension'] )
									  <[]> when 'true' ->
									      apply 'lc$^0'/1
										  (_13)
									  ( <_169> when 'true' ->
										( primop 'match_fail'
										      ({'function_clause',_169})
										  -| [{'function_name',{'lc$^1',1}}] )
									    -| ['compiler_generated'] )
									end
							    in  let <_16> =
								    call 'lists':'flatten'
									([Removed|[]])
								in  apply 'lc$^1'/1
									(_16)
							    -| ['list_comprehension'] )
						      ( <[_12|_13]> when 'true' ->
							    apply 'lc$^0'/1
								(_13)
							-| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_170> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_170})
							      -| [{'function_name',{'lc$^0',1}}] )
							-| ['compiler_generated'] )
						    end
					in  %% Line 1125
					    apply 'lc$^0'/1
						(_0)
				    in  let <_30> =
					    fun (_27,_26) ->
						%% Line 1128
						case <_27,_26> of
						  <{E,L},St1> when 'true' ->
						      %% Line 1129
						      apply 'add_error'/3
							  (L, E, St1)
						  ( <_29,_28> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_29,_28})
							  -| [{'function_name',{'-check_removed/2-fun-3-',2}}] )
						    -| ['compiler_generated'] )
						end
					in  %% Line 1128
					    call 'lists':'foldl'
						(_30, _1, _24)
				( <_11> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_11})
				  -| ['compiler_generated'] )
			      end
	      -| ['compiler_generated'] )
	    ( <_66> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'removed_cat'/3 =
    %% Line 1132
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <R = {F,A,Desc},X,Mod> when 'true' ->
	      %% Line 1133
	      case apply 'removed_desc'/1
		       (Desc) of
		%% Line 1134
		<'false'> when 'true' ->
		    [{'invalid_removed',R}|[]]
		%% Line 1135
		<'true'> when 'true' ->
		    apply 'removed_fa'/4
			(F, A, X, Mod)
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1137
	  <{F,A},X,Mod> when 'true' ->
	      %% Line 1138
	      apply 'removed_fa'/4
		  (F, A, X, Mod)
	  %% Line 1139
	  <'module',X,Mod> when 'true' ->
	      %% Line 1140
	      apply 'removed_fa'/4
		  ('_', '_', X, Mod)
	  %% Line 1141
	  <R,_X_X,_X_Mod> when 'true' ->
	      %% Line 1142
	      [{'invalid_removed',R}|[]]
	end
'removed_fa'/4 =
    %% Line 1144
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <'_','_',X,_X_Mod> when 'true' ->
	      %% Line 1145
	      case X of
		%% Line 1146
		<[_19|_20]> when 'true' ->
		    [{'bad_removed',{'_','_'}}]
		%% Line 1147
		<[]> when 'true' ->
		    []
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1149
	  <F,'_',X,_X_Mod>
	      when call 'erlang':'is_atom'
		    (F) ->
	      let <_7> =
		  fun (_5) ->
		      %% Line 1151
		      case _5 of
			<{F1,_21}> when 'true' ->
			    call 'erlang':'=:='
				(F1, F)
			( <_6> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_6})
				-| [{'function_name',{'-removed_fa/4-fun-0-',1}}] )
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 1151
		  case call 'lists':'filter'
			   (_7, X) of
		    %% Line 1152
		    <[_22|_23]> when 'true' ->
			[{'bad_removed',{F,'_'}}|[]]
		    %% Line 1153
		    <_24> when 'true' ->
			[]
		  end
	  %% Line 1155
	  <F,A,X,Mod>
	      when try
		    let <_9> =
			call 'erlang':'is_atom'
			    (F)
		    in  let <_10> =
			    call 'erlang':'is_integer'
				(A)
			in  let <_11> =
				call 'erlang':'>='
				    (A, 0)
			    in  let <_12> =
				    call 'erlang':'and'
					(_10, _11)
				in  call 'erlang':'and'
					(_9, _12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1156
	      case call 'lists':'member'
		       ({F,A}, X) of
		%% Line 1157
		<'true'> when 'true' ->
		    %% Line 1158
		    [{'bad_removed',{F,A}}|[]]
		%% Line 1159
		<'false'> when 'true' ->
		    %% Line 1160
		    case call 'erlang':'is_builtin'
			     (Mod, F, A) of
		      %% Line 1161
		      <'true'> when 'true' ->
			  [{'bad_removed',{F,A}}|[]]
		      %% Line 1162
		      <'false'> when 'true' ->
			  []
		      ( <_13> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_13})
			-| ['compiler_generated'] )
		    end
		( <_14> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1165
	  <F,A,_X_X,_X_Mod> when 'true' ->
	      %% Line 1166
	      [{'invalid_removed',{F,A}}|[]]
	end
'removed_desc'/1 =
    %% Line 1168
    fun (_0) ->
	case _0 of
	  <[Char|Str]>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      apply 'removed_desc'/1
		  (Str)
	  %% Line 1169
	  <[]> when 'true' ->
	      'true'
	  %% Line 1170
	  <_2> when 'true' ->
	      'false'
	end
'ignore_predefined_funcs'/1 =
    %% Line 1173
    fun (_0) ->
	case _0 of
	  <[{'behaviour_info',1}|Fs]> when 'true' ->
	      %% Line 1174
	      apply 'ignore_predefined_funcs'/1
		  (Fs)
	  %% Line 1175
	  <[{'module_info',0}|Fs]> when 'true' ->
	      %% Line 1176
	      apply 'ignore_predefined_funcs'/1
		  (Fs)
	  %% Line 1177
	  <[{'module_info',1}|Fs]> when 'true' ->
	      %% Line 1178
	      apply 'ignore_predefined_funcs'/1
		  (Fs)
	  %% Line 1179
	  <[Other|Fs]> when 'true' ->
	      let <_1> =
		  apply %% Line 1180
			'ignore_predefined_funcs'/1
		      (%% Line 1180
		       Fs)
	      in  %% Line 1180
		  [Other|_1]
	  %% Line 1181
	  <[]> when 'true' ->
	      %% Line 1182
	      []
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'ignore_predefined_funcs',1}}] )
	    -| ['compiler_generated'] )
	end
'check_imports'/2 =
    %% Line 1186
    fun (_0,_1) ->
	%% Line 1187
	case apply 'is_warn_enabled'/2
		 ('unused_import', _1) of
	  %% Line 1188
	  <'false'> when 'true' ->
	      _1
	  %% Line 1190
	  <'true'> when 'true' ->
	      %% Line 1191
	      ( case _1 of
		  ( <( {'lint',_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_rec47,_57,_58,_59,_60,_61,_62,_63,_64}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1192
			( case _1 of
			    ( <( {'lint',_66,_67,_68,_69,_rec48,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98}
				 -| ['compiler_generated'] )> when 'true' ->
				  ( case _rec47 of
				      ( <( {'usage',_100,_rec49,_101,_102}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <Unused> =
						call 'ordsets':'subtract'
						    (_rec48, _rec49)
					    in  let <_18> =
						    letrec
							'lc$^0'/1 =
							    %% Line 1194
							    fun (_15) ->
								case _15 of
								  <[{'attribute',L,'import',{Mod,Fs}}|_11]> when 'true' ->
								      %% Line 1195
								      ( letrec
									    'lc$^1'/1 =
										fun (_16) ->
										    case _16 of
										      <[FA|_13]> when 'true' ->
											  let <_17> =
											      apply 'lc$^1'/1
												  (_13)
											  in  ( [{{FA,Mod},L}|_17]
												-| ['compiler_generated'] )
										      <[]> when 'true' ->
											  apply 'lc$^0'/1
											      (_11)
										      ( <_104> when 'true' ->
											    ( primop 'match_fail'
												  ({'function_clause',_104})
											      -| [{'function_name',{'lc$^1',1}}] )
											-| ['compiler_generated'] )
										    end
									in  let <_14> =
										call 'lists':'usort'
										    (Fs)
									    in  apply 'lc$^1'/1
										    (_14)
									-| ['list_comprehension'] )
								  ( <[_10|_11]> when 'true' ->
									apply 'lc$^0'/1
									    (_11)
								    -| ['compiler_generated'] )
								  <[]> when 'true' ->
								      []
								  ( <_105> when 'true' ->
									( primop 'match_fail'
									      ({'function_clause',_105})
									  -| [{'function_name',{'lc$^0',1}}] )
								    -| ['compiler_generated'] )
								end
						    in  %% Line 1194
							apply 'lc$^0'/1
							    (_0)
						in  let <_27> =
							letrec
							    'lc$^2'/1 =
								%% Line 1196
								fun (_24) ->
								    case _24 of
								      <[FM|_21]> when 'true' ->
									  ( letrec
										'lc$^3'/1 =
										    fun (_25) ->
											case _25 of
											  <[{FM2,L}|_23]>
											      when call 'erlang':'=:='
												    (FM,
												     FM2) ->
											      let <_26> =
												  apply 'lc$^3'/1
												      (_23)
											      in  ( [{FM,L}|_26]
												    -| ['compiler_generated'] )
											  ( <[_22|_23]> when 'true' ->
												apply 'lc$^3'/1
												    (_23)
											    -| ['compiler_generated'] )
											  <[]> when 'true' ->
											      apply 'lc$^2'/1
												  (_21)
											  ( <_106> when 'true' ->
												( primop 'match_fail'
												      ({'function_clause',_106})
												  -| [{'function_name',{'lc$^3',1}}] )
											    -| ['compiler_generated'] )
											end
									    in  apply 'lc$^3'/1
										    (_18)
									    -| ['list_comprehension'] )
								      <[]> when 'true' ->
									  []
								      ( <_107> when 'true' ->
									    ( primop 'match_fail'
										  ({'function_clause',_107})
									      -| [{'function_name',{'lc$^2',1}}] )
									-| ['compiler_generated'] )
								    end
							in  %% Line 1196
							    apply 'lc$^2'/1
								(Unused)
						    in  %% Line 1197
							apply 'func_line_warning'/3
							    ('unused_import', _27, _1)
					-| ['compiler_generated'] )
				      ( <_103> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','usage'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_99> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','lint'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_65> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','lint'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_29> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_29})
	    -| ['compiler_generated'] )
	end
'check_inlines'/2 =
    %% Line 1202
    fun (_0,_1) ->
	%% Line 1203
	apply 'check_option_functions'/4
	    (_0, 'inline', 'bad_inline', _1)
'check_unused_functions'/2 =
    %% Line 1207
    fun (_0,_1) ->
	let <St1> =
	    apply %% Line 1208
		  'check_option_functions'/4
		(_0, %% Line 1208
		     'nowarn_unused_function', %% Line 1209
					       'bad_nowarn_unused_function', _1)
	in  %% Line 1210
	    ( case St1 of
		( <( {'lint',_41,_42,_43,_44,_45,_rec50,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_9> =
			  case %% Line 1211
			       call 'lists':'member'
				   ('export_all', _rec50) of
			    %% Line 1211
			    ( <( 'true'
				 -| ['compiler_generated'] )> when 'true' ->
				  'true'
			      -| ['compiler_generated'] )
			    %% Line 1211
			    ( <( 'false'
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_7> =
				      apply %% Line 1212
					    'is_warn_enabled'/2
					  (%% Line 1212
					   'unused_function', %% Line 1212
							      St1)
				  in  %% Line 1212
				      call 'erlang':'not'
					  (_7)
			      -| ['compiler_generated'] )
			    %% Line 1211
			    ( <_6> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {( 'badarg'
					      -| ['compiler_generated'] ),_6}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      in  %% Line 1211
			  case _9 of
			    %% Line 1213
			    <'true'> when 'true' ->
				%% Line 1214
				St1
			    %% Line 1215
			    <'false'> when 'true' ->
				let <Nowarn> =
				    apply %% Line 1216
					  'nowarn_function'/2
					(%% Line 1216
					 'nowarn_unused_function', _rec50)
				in  %% Line 1217
				    ( case St1 of
					( <( {'lint',_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_rec51,_100,_101,_102,_103,_104,_105,_106,_107}
					     -| ['compiler_generated'] )> when 'true' ->
					      let <_16> =
						  apply %% Line 1218
							'initially_reached'/1
						      (%% Line 1218
						       St1)
					      in  %% Line 1219
						  ( case _rec51 of
						      ( <( {'usage',_rec52,_109,_110,_111}
							   -| ['compiler_generated'] )> when 'true' ->
							    let <Used> =
								apply 'reached_functions'/2
								    (_16, _rec52)
							    in  let <UsedOrNowarn> =
								    call %% Line 1220
									 'ordsets':%% Line 1220
										   'union'
									(%% Line 1220
									 Used, %% Line 1220
									       Nowarn)
								in  %% Line 1221
								    ( case St1 of
									( <( {'lint',_113,_114,_115,_116,_117,_118,_119,_120,_121,_rec53,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145}
									     -| ['compiler_generated'] )> when 'true' ->
									      let <_21> =
										  call 'gb_sets':'to_list'
										      (_rec53)
									      in  let <Unused> =
										      call 'ordsets':'subtract'
											  (_21, %% Line 1222
												UsedOrNowarn)
										  in  let <_27> =
											  letrec
											      'lc$^0'/1 =
												  %% Line 1223
												  fun (_25) ->
												      case _25 of
													<[{'function',L,N,A,_147}|_24]> when 'true' ->
													    let <_26> =
														apply 'lc$^0'/1
														    (_24)
													    in  ( [{{N,A},L}|_26]
														  -| ['compiler_generated'] )
													( <[_23|_24]> when 'true' ->
													      apply 'lc$^0'/1
														  (_24)
													  -| ['compiler_generated'] )
													<[]> when 'true' ->
													    []
													( <_148> when 'true' ->
													      ( primop 'match_fail'
														    ({'function_clause',_148})
														-| [{'function_name',{'lc$^0',1}}] )
													  -| ['compiler_generated'] )
												      end
											  in  %% Line 1223
											      apply 'lc$^0'/1
												  (_0)
										      in  let <_36> =
											      letrec
												  'lc$^1'/1 =
												      %% Line 1224
												      fun (_33) ->
													  case _33 of
													    <[FA|_30]> when 'true' ->
														( letrec
														      'lc$^2'/1 =
															  fun (_34) ->
															      case _34 of
																<[{FA2,L}|_32]>
																    when call 'erlang':'=:='
																	  (FA,
																	   FA2) ->
																    let <_35> =
																	apply 'lc$^2'/1
																	    (_32)
																    in  ( [{FA,L}|_35]
																	  -| ['compiler_generated'] )
																( <[_31|_32]> when 'true' ->
																      apply 'lc$^2'/1
																	  (_32)
																  -| ['compiler_generated'] )
																<[]> when 'true' ->
																    apply 'lc$^1'/1
																	(_30)
																( <_149> when 'true' ->
																      ( primop 'match_fail'
																	    ({'function_clause',_149})
																	-| [{'function_name',{'lc$^2',1}}] )
																  -| ['compiler_generated'] )
															      end
														  in  apply 'lc$^2'/1
															  (_27)
														  -| ['list_comprehension'] )
													    <[]> when 'true' ->
														[]
													    ( <_150> when 'true' ->
														  ( primop 'match_fail'
															({'function_clause',_150})
														    -| [{'function_name',{'lc$^1',1}}] )
													      -| ['compiler_generated'] )
													  end
											      in  %% Line 1224
												  apply 'lc$^1'/1
												      (Unused)
											  in  %% Line 1225
											      apply 'func_line_warning'/3
												  ('unused_function', _36, St1)
									  -| ['compiler_generated'] )
									( <_146> when 'true' ->
									      ( call ( 'erlang'
										       -| ['compiler_generated'] ):( 'error'
														     -| ['compiler_generated'] )
										    (( {'badrecord','lint'}
										       -| ['compiler_generated'] ))
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								      end
								      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						      ( <_112> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','usage'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					( <_108> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','lint'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
			    ( <_38> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_38})
			      -| ['compiler_generated'] )
			  end
		  -| ['compiler_generated'] )
		( <_74> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','lint'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'initially_reached'/1 =
    %% Line 1228
    fun (_0) ->
	case _0 of
	  <{'lint',_3,_4,_5,Exp,_6,_7,_8,_9,_10,_11,OnLoad,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34}> when 'true' ->
	      let <_1> =
		  call %% Line 1229
		       'gb_sets':%% Line 1229
				 'to_list'
		      (%% Line 1229
		       Exp)
	      in  %% Line 1229
		  call 'erlang':'++'
		      (OnLoad, _1)
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'initially_reached',1}}] )
	    -| ['compiler_generated'] )
	end
'reached_functions'/2 =
    %% Line 1234
    fun (_0,_1) ->
	let <_2> =
	    call %% Line 1235
		 'gb_sets':%% Line 1235
			   'empty'
		()
	in  %% Line 1235
	    apply 'reached_functions'/4
		(_0, [], _1, _2)
'reached_functions'/4 =
    %% Line 1237
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[R|Rs],More0,Ref,Reached0> when 'true' ->
	      %% Line 1238
	      case call 'gb_sets':'is_element'
		       (R, Reached0) of
		%% Line 1239
		<'true'> when 'true' ->
		    apply 'reached_functions'/4
			(Rs, More0, Ref, Reached0)
		%% Line 1240
		<'false'> when 'true' ->
		    let <Reached> =
			call %% Line 1241
			     'gb_sets':%% Line 1241
				       'add_element'
			    (%% Line 1241
			     R, %% Line 1241
				Reached0)
		    in  %% Line 1242
			case call 'maps':'find'
				 (R, Ref) of
			  %% Line 1243
			  <{'ok',More}> when 'true' ->
			      apply 'reached_functions'/4
				  (Rs, [More|More0], Ref, Reached)
			  %% Line 1244
			  <'error'> when 'true' ->
			      apply 'reached_functions'/4
				  (Rs, More0, Ref, Reached)
			  ( <_5> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_5})
			    -| ['compiler_generated'] )
			end
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1247
	  <[],More = [_12|_13],Ref,Reached> when 'true' ->
	      let <_7> =
		  call %% Line 1248
		       'lists':%% Line 1248
			       'append'
		      (%% Line 1248
		       More)
	      in  %% Line 1248
		  apply 'reached_functions'/4
		      (_7, [], Ref, Reached)
	  %% Line 1249
	  <[],[],_X_Ref,Reached> when 'true' ->
	      call 'gb_sets':'to_list'
		  (Reached)
	  ( <_11,_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8})
		  -| [{'function_name',{'reached_functions',4}}] )
	    -| ['compiler_generated'] )
	end
'check_undefined_functions'/1 =
    %% Line 1253
    fun (_0) ->
	case _0 of
	  <St0 = {'lint',_12,_13,_14,_15,_16,_17,_18,_19,_20,Def0,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,Called0,_35,_36,_37,_38,_39,_40,_41,_42,_43}> when 'true' ->
	      let <Called> =
		  call %% Line 1254
		       'sofs':%% Line 1254
			      'relation'
		      (%% Line 1254
		       Called0, %% Line 1254
				[{'func','location'}])
	      in  let <_2> =
		      call %% Line 1255
			   'gb_sets':%% Line 1255
				     'to_list'
			  (%% Line 1255
			   Def0)
		  in  let <Def> =
			  call %% Line 1255
			       'sofs':%% Line 1255
				      'from_external'
			      (_2, %% Line 1255
				   ['func'])
		      in  let <_4> =
			      call %% Line 1256
				   'sofs':%% Line 1256
					  'drestriction'
				  (%% Line 1256
				   Called, %% Line 1256
					   Def)
			  in  let <Undef> =
				  call %% Line 1256
				       'sofs':%% Line 1256
					      'to_external'
				      (_4)
			      in  let <_10> =
				      fun (_7,_6) ->
					  %% Line 1257
					  case <_7,_6> of
					    <{NA,L},St> when 'true' ->
						%% Line 1258
						apply 'add_error'/3
						    (L, {'undefined_function',NA}, St)
					    ( <_9,_8> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_9,_8})
						    -| [{'function_name',{'-check_undefined_functions/1-fun-0-',2}}] )
					      -| ['compiler_generated'] )
					  end
				  in  %% Line 1257
				      call 'lists':'foldl'
					  (_10, %% Line 1259
						St0, %% Line 1259
						     Undef)
	  ( <_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11})
		  -| [{'function_name',{'check_undefined_functions',1}}] )
	    -| ['compiler_generated'] )
	end
'check_undefined_types'/1 =
    %% Line 1263
    fun (_0) ->
	case _0 of
	  <St0 = {'lint',_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,Usage,_47,_48,_49,Def,_50,_51,_52,_53}> when 'true' ->
	      %% Line 1264
	      ( case Usage of
		  ( <( {'usage',_54,_55,_56,_rec54}
		       -| ['compiler_generated'] )> when 'true' ->
			let <UTAs> =
			    call %% Line 1265
				 'maps':%% Line 1265
					'keys'
				(_rec54)
			in  let <_14> =
				letrec
				    'lc$^0'/1 =
					%% Line 1267
					fun (_10) ->
					    case _10 of
					      <[TA|_6]>
						  when %% Line 1268
						    try
							let <_7> =
							    call 'erlang':'is_map_key'
								(TA, Def)
							in  ( call 'erlang':'=:='
								  (_7, 'false')
							      -| ['compiler_generated'] )
						    of <Try> ->
							Try
						    catch <T,R> ->
							'false' ->
						  %% Line 1269
						  ( case apply 'is_default_type'/1
							     (TA) of
						      <'false'> when 'true' ->
							  let <_11> =
							      call 'erlang':'map_get'
								  (TA, _rec54)
							  in  let <_12> =
								  apply 'lc$^0'/1
								      (_6)
							      in  ( [{TA,_11}|_12]
								    -| ['compiler_generated'] )
						      ( <'true'> when 'true' ->
							    apply 'lc$^0'/1
								(_6)
							-| ['compiler_generated'] )
						      ( <_cor_variable> when 'true' ->
							    call 'erlang':'error'
								('badarg')
							-| ['compiler_generated'] )
						    end
						    -| ['list_comprehension'] )
					      ( <[TA|_6]> when 'true' ->
						    apply 'lc$^0'/1
							(_6)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_58> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_58})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  %% Line 1267
				    apply 'lc$^0'/1
					(UTAs)
			    in  let <_20> =
				    fun (_17,_16) ->
					%% Line 1270
					case <_17,_16> of
					  <{TA,L},St> when 'true' ->
					      %% Line 1271
					      apply 'add_error'/3
						  (L, {'undefined_type',TA}, St)
					  ( <_19,_18> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_19,_18})
						  -| [{'function_name',{'-check_undefined_types/1-fun-1-',2}}] )
					    -| ['compiler_generated'] )
					end
				in  %% Line 1270
				    call 'lists':'foldl'
					(_20, %% Line 1272
					      St0, _14)
		    -| ['compiler_generated'] )
		  ( <_57> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','usage'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_21})
		  -| [{'function_name',{'check_undefined_types',1}}] )
	    -| ['compiler_generated'] )
	end
'check_bif_clashes'/2 =
    %% Line 1276
    fun (_0,_1) ->
	%% Line 1278
	apply 'check_option_functions'/4
	    (_0, 'nowarn_bif_clash', %% Line 1279
				     'bad_nowarn_bif_clash', _1)
'check_option_functions'/4 =
    %% Line 1281
    fun (_0,_1,_2,_3) ->
	let <_16> =
	    letrec
		'lc$^0'/1 =
		    %% Line 1283
		    fun (_12) ->
			case _12 of
			  <[{'attribute',L,'compile',Args}|_5]> when 'true' ->
			      %% Line 1284
			      ( letrec
				    'lc$^1'/1 =
					fun (_13) ->
					    case _13 of
					      <[{Tag,FAs0}|_7]>
						  when %% Line 1285
						    call 'erlang':'=:='
							(_1,
							 Tag) ->
						  %% Line 1286
						  ( letrec
							'lc$^2'/1 =
							    fun (_14) ->
								case _14 of
								  <[FA|_10]> when 'true' ->
								      let <_15> =
									  apply 'lc$^2'/1
									      (_10)
								      in  ( [{FA,L}|_15]
									    -| ['compiler_generated'] )
								  <[]> when 'true' ->
								      apply 'lc$^1'/1
									  (_7)
								  ( <_113> when 'true' ->
									( primop 'match_fail'
									      ({'function_clause',_113})
									  -| [{'function_name',{'lc$^2',1}}] )
								    -| ['compiler_generated'] )
								end
						    in  let <_11> =
							    call 'lists':'flatten'
								([FAs0|[]])
							in  apply 'lc$^2'/1
								(_11)
						    -| ['list_comprehension'] )
					      ( <[_6|_7]> when 'true' ->
						    apply 'lc$^1'/1
							(_7)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  apply 'lc$^0'/1
						      (_5)
					      ( <_114> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_114})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  let <_8> =
					call 'lists':'flatten'
					    ([Args|[]])
				    in  apply 'lc$^1'/1
					    (_8)
				-| ['list_comprehension'] )
			  ( <[_4|_5]> when 'true' ->
				apply 'lc$^0'/1
				    (_5)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_115> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_115})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 1283
		apply 'lc$^0'/1
		    (_0)
	in  %% Line 1287
	    ( case _3 of
		( <( {'lint',_44,_45,_46,_47,_48,_49,_50,_51,_52,_rec55,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_29> =
			  call 'gb_sets':'to_list'
			      (_rec55)
		      in  let <_26> =
			      apply 'pseudolocals'/0
				  ()
			  in  let <_30> =
				  call 'erlang':'--'
				      (_29, _26)
			      in  let <_25> =
				      letrec
					  'lc$^3'/1 =
					      %% Line 1288
					      fun (_23) ->
						  case _23 of
						    <[{_@r0 = {F,A},_78}|_19]> when 'true' ->
							let <_24> =
							    apply 'lc$^3'/1
								(_19)
							in  ( [_@r0|_24]
							      -| ['compiler_generated'] )
						    ( <[_18|_19]> when 'true' ->
							  apply 'lc$^3'/1
							      (_19)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_116> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_116})
							    -| [{'function_name',{'lc$^3',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  %% Line 1288
					  ( case _3 of
					      ( <( {'lint',_79,_80,_81,_82,_rec56,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111}
						   -| ['compiler_generated'] )> when 'true' ->
						    let <_22> =
							call 'orddict':'to_list'
							    (_rec56)
						    in  apply 'lc$^3'/1
							    (_22)
						-| ['compiler_generated'] )
					      ( <_112> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','lint'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				  in  let <DefFunctions> =
					  call 'erlang':'++'
					      (_30, _25)
				      in  let <_38> =
					      letrec
						  'lc$^4'/1 =
						      %% Line 1289
						      fun (_35) ->
							  case _35 of
							    <[_@r1 = {FA,L}|_33]> when 'true' ->
								( case call 'lists':'member'
									   (FA, DefFunctions) of
								    <'false'> when 'true' ->
									let <_36> =
									    apply 'lc$^4'/1
										(_33)
									in  ( [_@r1|_36]
									      -| ['compiler_generated'] )
								    ( <'true'> when 'true' ->
									  apply 'lc$^4'/1
									      (_33)
								      -| ['compiler_generated'] )
								    ( <_cor_variable> when 'true' ->
									  call 'erlang':'error'
									      ('badarg')
								      -| ['compiler_generated'] )
								  end
								  -| ['list_comprehension'] )
							    ( <[_32|_33]> when 'true' ->
								  apply 'lc$^4'/1
								      (_33)
							      -| ['compiler_generated'] )
							    <[]> when 'true' ->
								[]
							    ( <_117> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_117})
								    -| [{'function_name',{'lc$^4',1}}] )
							      -| ['compiler_generated'] )
							  end
					      in  %% Line 1289
						  apply 'lc$^4'/1
						      (_16)
					  in  %% Line 1290
					      apply 'func_line_error'/3
						  (_2, _38, _3)
		  -| ['compiler_generated'] )
		( <_77> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','lint'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'nowarn_function'/2 =
    %% Line 1292
    fun (_0,_1) ->
	let <_10> =
	    letrec
		'lc$^0'/1 =
		    %% Line 1293
		    fun (_7) ->
			case _7 of
			  <[{Tag1,FAs}|_3]>
			      when %% Line 1294
				call 'erlang':'=:='
				    (Tag1,
				     _0) ->
			      %% Line 1295
			      ( letrec
				    'lc$^1'/1 =
					fun (_8) ->
					    case _8 of
					      <[FA|_5]> when 'true' ->
						  let <_9> =
						      apply 'lc$^1'/1
							  (_5)
						  in  ( [FA|_9]
							-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  apply 'lc$^0'/1
						      (_3)
					      ( <_13> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_13})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  let <_6> =
					call 'lists':'flatten'
					    ([FAs|[]])
				    in  apply 'lc$^1'/1
					    (_6)
				-| ['list_comprehension'] )
			  ( <[_2|_3]> when 'true' ->
				apply 'lc$^0'/1
				    (_3)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_14> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_14})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 1293
		apply 'lc$^0'/1
		    (_1)
	in  %% Line 1293
	    call 'ordsets':'from_list'
		(_10)
'func_line_warning'/3 =
    %% Line 1297
    fun (_0,_1,_2) ->
	let <_7> =
	    fun (_4,_3) ->
		%% Line 1298
		case <_4,_3> of
		  <{F,Line},St0> when 'true' ->
		      apply 'add_warning'/3
			  (Line, {_0,F}, St0)
		  ( <_6,_5> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_6,_5})
			  -| [{'function_name',{'-func_line_warning/3-fun-0-',2}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 1298
	    call 'lists':'foldl'
		(_7, _2, _1)
'func_line_error'/3 =
    %% Line 1300
    fun (_0,_1,_2) ->
	let <_7> =
	    fun (_4,_3) ->
		%% Line 1301
		case <_4,_3> of
		  <{F,Line},St0> when 'true' ->
		      apply 'add_error'/3
			  (Line, {_0,F}, St0)
		  ( <_6,_5> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_6,_5})
			  -| [{'function_name',{'-func_line_error/3-fun-0-',2}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 1301
	    call 'lists':'foldl'
		(_7, _2, _1)
'check_untyped_records'/2 =
    %% Line 1303
    fun (_0,_1) ->
	%% Line 1304
	case apply 'is_warn_enabled'/2
		 ('untyped_record', _1) of
	  %% Line 1305
	  <'true'> when 'true' ->
	      %% Line 1307
	      ( case _1 of
		  ( <( {'lint',_30,_31,_32,_33,_34,_35,_rec57,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62}
		       -| ['compiler_generated'] )> when 'true' ->
			let <RecNames> =
			    call 'maps':'keys'
				(_rec57)
			in  let <_13> =
				letrec
				    'lc$^1'/1 =
					%% Line 1310
					fun (_10) ->
					    case _10 of
					      <[{'attribute',_64,'record',{Name,Fields}}|_6]> when 'true' ->
						  let <_9> =
						      fun (_7) ->
							  %% Line 1311
							  case _7 of
							    <{'typed_record_field',_65,_66}> when 'true' ->
								'true'
							    %% Line 1312
							    <_67> when 'true' ->
								'false'
							  end
						  in  %% Line 1311
						      ( case call 'lists':'all'
								 (_9, %% Line 1313
								      Fields) of
							  <'true'> when 'true' ->
							      let <_11> =
								  apply 'lc$^1'/1
								      (_6)
							      in  ( [Name|_11]
								    -| ['compiler_generated'] )
							  ( <'false'> when 'true' ->
								apply 'lc$^1'/1
								    (_6)
							    -| ['compiler_generated'] )
							  ( <_12> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_12})
							    -| ['compiler_generated'] )
							end
							-| ['list_comprehension'] )
					      ( <[_5|_6]> when 'true' ->
						    apply 'lc$^1'/1
							(_6)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_104> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_104})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  %% Line 1310
				    apply 'lc$^1'/1
					(_0)
			    in  let <_26> =
				    fun (_23,_22) ->
					%% Line 1315
					( case _1 of
					    ( <( {'lint',_68,_69,_70,_71,_72,_73,_rec58,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100}
						 -| ['compiler_generated'] )> when 'true' ->
						  case call 'erlang':'map_get'
							   (_23, _rec58) of
						    <{L,Fields}> when 'true' ->
							%% Line 1316
							case Fields of
							  %% Line 1317
							  <[]> when 'true' ->
							      _22
							  %% Line 1318
							  <[_102|_103]> when 'true' ->
							      apply 'add_warning'/3
								  (L, {'untyped_record',_23}, _22)
							  ( <_21> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_21})
							    -| ['compiler_generated'] )
							end
						    ( <_20> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_20})
						      -| ['compiler_generated'] )
						  end
					      -| ['compiler_generated'] )
					    ( <_101> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','lint'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				in  let <_16> =
					call %% Line 1320
					     'ordsets':%% Line 1320
						       'from_list'
					    (%% Line 1320
					     RecNames)
				    in  let <_15> =
					    call %% Line 1321
						 'ordsets':%% Line 1321
							   'from_list'
						(_13)
					in  let <_17> =
						call %% Line 1320
						     'ordsets':%% Line 1320
							       'subtract'
						    (_16, _15)
					    in  %% Line 1314
						call 'lists':'foldl'
						    (_26, _1, _17)
		    -| ['compiler_generated'] )
		  ( <_63> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','lint'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1322
	  <'false'> when 'true' ->
	      _1
	  ( <_27> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_27})
	    -| ['compiler_generated'] )
	end
'check_unused_records'/2 =
    %% Line 1326
    fun (_0,_1) ->
	let <_6> =
	    letrec
		'lc$^0'/1 =
		    %% Line 1327
		    fun (_4) ->
			case _4 of
			  <[{'attribute',_X_L,'file',{File,_X_Line}}|_3]> when 'true' ->
			      let <_5> =
				  apply 'lc$^0'/1
				      (_3)
			      in  ( [File|_5]
				    -| ['compiler_generated'] )
			  ( <[_2|_3]> when 'true' ->
				apply 'lc$^0'/1
				    (_3)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_115> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_115})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 1327
		apply 'lc$^0'/1
		    (_0)
	in  let <_8> =
		apply %% Line 1328
		      'is_warn_enabled'/2
		    (%% Line 1328
		     'unused_record', _1)
	    in  %% Line 1328
		case <_8,_6> of
		  %% Line 1329
		  <( 'true'
		     -| ['compiler_generated'] ),( [FirstFile|_41]
						   -| ['compiler_generated'] )> when 'true' ->
		      %% Line 1332
		      ( case _1 of
			  ( <( {'lint',_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_rec59,_67,_68,_69,_70,_71,_72,_73,_74}
			       -| ['compiler_generated'] )> when 'true' ->
				%% Line 1333
				( case _rec59 of
				    ( <( {'usage',_76,_77,_rec60,_78}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_21> =
					      fun (_18,_17) ->
						  %% Line 1335
						  call 'maps':'remove'
						      (_18, _17)
					  in  %% Line 1336
					      ( case _1 of
						  ( <( {'lint',_80,_81,_82,_83,_84,_85,_rec61,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112}
						       -| ['compiler_generated'] )> when 'true' ->
							let <URecs> =
							    call 'gb_sets':'fold'
								(_21, _rec61, _rec60)
							in  let <_31> =
								letrec
								    'lc$^2'/1 =
									%% Line 1338
									fun (_28) ->
									    case _28 of
									      <[{Name,{FileLine,_X_Fields}}|_24]> when 'true' ->
										  let <_26> =
										      apply %% Line 1339
											    'loc'/2
											  (%% Line 1339
											   FileLine, _1)
										  in  let <_27> =
											  call %% Line 1339
											       'erlang':%% Line 1339
													'element'
											      (%% Line 1339
											       1, _26)
										      in  %% Line 1339
											  ( case <> of
											      <>
												  when call 'erlang':'=:='
													(_27,
													 FirstFile) ->
												  let <_29> =
												      apply 'lc$^2'/1
													  (_24)
												  in  ( [{Name,FileLine}|_29]
													-| ['compiler_generated'] )
											      ( <> when 'true' ->
												    apply 'lc$^2'/1
													(_24)
												-| ['compiler_generated'] )
											    end
											    -| ['list_comprehension'] )
									      ( <[_23|_24]> when 'true' ->
										    apply 'lc$^2'/1
											(_24)
										-| ['compiler_generated'] )
									      <[]> when 'true' ->
										  []
									      ( <_122> when 'true' ->
										    ( primop 'match_fail'
											  ({'function_clause',_122})
										      -| [{'function_name',{'lc$^2',1}}] )
										-| ['compiler_generated'] )
									    end
								in  let <_25> =
									call %% Line 1338
									     'maps':%% Line 1338
										    'to_list'
									    (%% Line 1338
									     URecs)
								    in  %% Line 1338
									apply 'lc$^2'/1
									    (_25)
							    in  let <_37> =
								    fun (_34,_33) ->
									%% Line 1340
									case <_34,_33> of
									  <{N,L},St> when 'true' ->
									      %% Line 1341
									      apply 'add_warning'/3
										  (L, {'unused_record',N}, St)
									  ( <_36,_35> when 'true' ->
										( primop 'match_fail'
										      ({'function_clause',_36,_35})
										  -| [{'function_name',{'-check_unused_records/2-fun-3-',2}}] )
									    -| ['compiler_generated'] )
									end
								in  %% Line 1340
								    call 'lists':'foldl'
									(_37, _1, _31)
						    -| ['compiler_generated'] )
						  ( <_113> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','lint'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <_79> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','usage'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <_75> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','lint'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  %% Line 1343
		  <( _116
		     -| ['compiler_generated'] ),( _117
						   -| ['compiler_generated'] )> when 'true' ->
		      _1
		end
'check_callback_information'/1 =
    %% Line 1347
    fun (_0) ->
	case _0 of
	  <%% Line 1349
	   St0 = {'lint',_20,_21,_22,_23,_24,_25,_26,_27,_28,%% Line 1349
							     Defined,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,Callbacks,%% Line 1348
																		   OptionalCbs,_46,_47,_48,_49,_50}> when 'true' ->
	      let <OptFun> =
		  fun (_4,_3,_2) ->
		      %% Line 1351
		      case call 'erlang':'is_map_key'
			       (_4, Callbacks) of
			%% Line 1352
			<'true'> when 'true' ->
			    _2
			%% Line 1354
			<'false'> when 'true' ->
			    %% Line 1355
			    apply 'add_error'/3
				(_3, {'undefined_callback',_4}, _2)
			( <_1> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_1})
			  -| ['compiler_generated'] )
		      end
	      in  let <St1> =
		      call %% Line 1358
			   'maps':%% Line 1358
				  'fold'
			  (%% Line 1358
			   OptFun, %% Line 1358
				   St0, %% Line 1358
					OptionalCbs)
		  in  %% Line 1359
		      case call 'gb_sets':'is_member'
			       ({'behaviour_info',1}, Defined) of
			%% Line 1360
			<'false'> when 'true' ->
			    St1
			%% Line 1361
			<'true'> when 'true' ->
			    %% Line 1362
			    case call 'erlang':'map_size'
				     (Callbacks) of
			      %% Line 1363
			      <0> when 'true' ->
				  St1
			      %% Line 1364
			      <_51> when 'true' ->
				  let <FoldFun> =
				      fun (_12,_11,_10) ->
					  %% Line 1367
					  apply 'add_error'/3
					      (_11, {'behaviour_info',_12}, _10)
				  in  %% Line 1369
				      call 'maps':'fold'
					  (FoldFun, St1, Callbacks)
			    end
			( <_18> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_18})
			  -| ['compiler_generated'] )
		      end
	  ( <_19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_19})
		  -| [{'function_name',{'check_callback_information',1}}] )
	    -| ['compiler_generated'] )
	end
'export'/3 =
    %% Line 1379
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Line,Es,St0 = {'lint',_20,_21,_22,Es0,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,Called,_43,_44,_45,_46,_47,_48,_49,_50,_51}> when 'true' ->
	      let <_12> =
		  fun (_9,_8) ->
		      %% Line 1381
		      case <_9,_8> of
			<NA,{E,C,St2}> when 'true' ->
			    let <_5> =
				case %% Line 1382
				     call 'gb_sets':'is_element'
					 (NA, E) of
				  %% Line 1383
				  <'true'> when 'true' ->
				      let <Warn> = {%% Line 1384
					   'duplicated_export',%% Line 1384
							       NA}
				      in  %% Line 1385
					  apply 'add_warning'/3
					      (Line, Warn, St2)
				  %% Line 1386
				  <'false'> when 'true' ->
				      %% Line 1387
				      St2
				  ( <_4> when 'true' ->
					%% Line 1382
					primop 'match_fail'
					    ({'case_clause',_4})
				    -| ['compiler_generated'] )
				end
			    in  let <_7> =
				    call %% Line 1389
					 'gb_sets':%% Line 1389
						   'add_element'
					(%% Line 1389
					 NA, %% Line 1389
					     E)
				in  %% Line 1389
				    {_7,[{NA,Line}|C],_5}
			( <_11,_10> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_11,_10})
				-| [{'function_name',{'-export/3-fun-0-',2}}] )
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 1380
		  case %% Line 1381
		       call 'lists':'foldl'
			   (_12, %% Line 1391
				 {Es0,Called,St0}, %% Line 1391
						   Es) of
		    <{Es1,C1,St1}> when 'true' ->
			%% Line 1392
			case St1 of
			  <{'lint',_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85}> when 'true' ->
			      let <_15> =
				  call 'erlang':'setelement'
				      (26, St1, C1)
			      in  call 'erlang':'setelement'
				      (5, _15, Es1)
			  ( <_86> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','lint'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    ( <_13> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_13})
		      -| ['compiler_generated'] )
		  end
	  ( <_19,_18,_17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_19,_18,_17})
		  -| [{'function_name',{'export',3}}] )
	    -| ['compiler_generated'] )
	end
'export_type'/3 =
    %% Line 1397
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Line,ETs,St0 = {'lint',_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,Usage,_59,_60,_61,_62,ETs0,_63,_64,_65}> when 'true' ->
	      %% Line 1398
	      ( case Usage of
		  ( <( {'usage',_66,_67,_68,_rec63}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1399
			try
			    let <_18> =
				fun (_15,_14) ->
				    case <_15,_14> of
				      <TA = {T,A},{E,U,St2}>
					  when let <_6> =
						call 'erlang':'is_atom'
						    (T)
					    in  let <_7> =
						    call 'erlang':'is_integer'
							(A)
						in  call 'erlang':'and'
							(_6, _7) ->
					  let <_10> =
					      case %% Line 1400
						   call 'gb_sets':'is_element'
						       (TA, E) of
						%% Line 1401
						<'true'> when 'true' ->
						    let <Warn> = {%% Line 1402
							 'duplicated_export_type',%% Line 1402
										  TA}
						    in  %% Line 1403
							apply 'add_warning'/3
							    (Line, Warn, St2)
						%% Line 1404
						<'false'> when 'true' ->
						    %% Line 1405
						    St2
						( <_9> when 'true' ->
						      %% Line 1400
						      primop 'match_fail'
							  ({'case_clause',_9})
						  -| ['compiler_generated'] )
					      end
					  in  let <_13> =
						  call %% Line 1407
						       'gb_sets':%% Line 1407
								 'add_element'
						      (%% Line 1407
						       TA, %% Line 1407
							   E)
					      in  let <_12> =
						      call %% Line 1407
							   'maps':%% Line 1407
								  'put'
							  (%% Line 1407
							   TA, %% Line 1407
							       Line, %% Line 1407
								     U)
						  in  %% Line 1407
						      {_13,_12,_10}
				      ( <_17,_16> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_17,_16})
					      -| [{'function_name',{'-export_type/3-fun-0-',2}}] )
					-| ['compiler_generated'] )
				    end
			    in  call 'lists':'foldl'
				    (_18, %% Line 1409
					  {ETs0,_rec63,St0}, %% Line 1409
							     ETs)
			of <_19> ->
			    case _19 of
			      %% Line 1410
			      <{ETs1,UTs1,St1}> when 'true' ->
				  %% Line 1411
				  case Usage of
				    <{'usage',_70,_71,_72,_73}> when 'true' ->
					let <_22> =
					    call 'erlang':'setelement'
						(5, Usage, UTs1)
					in  case St1 of
					      <{'lint',_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108}> when 'true' ->
						  let <_25> =
						      call 'erlang':'setelement'
							  (32, St1, ETs1)
						  in  call 'erlang':'setelement'
							  (27, _25, _22)
					      ( <_109> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','lint'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
				    ( <_74> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','usage'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      ( <_27> when 'true' ->
				    primop 'match_fail'
					({'try_clause',_27})
				-| ['compiler_generated'] )
			    end
			catch <_30,_29,_28> ->
			    %% Line 1413
			    case <_30,_29,_28> of
			      <( 'error'
				 -| ['compiler_generated'] ),_110,_111> when 'true' ->
				  %% Line 1414
				  apply 'add_error'/3
				      (Line, {'bad_export_type',ETs}, St0)
			      ( <_112,_113,_114> when 'true' ->
				    primop 'raise'
					(_114, _113)
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_69> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','usage'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_33,_32,_31> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_33,_32,_31})
		  -| [{'function_name',{'export_type',3}}] )
	    -| ['compiler_generated'] )
	end
'exports'/1 =
    %% Line 1419
    fun (_0) ->
	case _0 of
	  <{'lint',_3,_4,_5,Es,_6,Opts,_7,_8,_9,Defs,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33}> when 'true' ->
	      %% Line 1420
	      case call 'lists':'member'
		       ('export_all', Opts) of
		%% Line 1421
		<'true'> when 'true' ->
		    Defs
		%% Line 1422
		<'false'> when 'true' ->
		    Es
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_1})
		  -| ['compiler_generated'] )
	      end
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'exports',1}}] )
	    -| ['compiler_generated'] )
	end
'import'/3 =
    %% Line 1428
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Line,{Mod,Fs},St00> when 'true' ->
	      let <St> =
		  apply %% Line 1429
			'check_module_name'/3
		      (%% Line 1429
		       Mod, %% Line 1429
			    Line, %% Line 1429
				  St00)
	      in  let <Mfs> =
		      call %% Line 1430
			   'ordsets':%% Line 1430
				     'from_list'
			  (%% Line 1430
			   Fs)
		  in  %% Line 1431
		      ( case St of
			  ( <( {'lint',_45,_46,_47,_48,_rec67,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77}
			       -| ['compiler_generated'] )> when 'true' ->
				case apply 'check_imports'/3
					 (Line, Mfs, _rec67) of
				  %% Line 1432
				  <[]> when 'true' ->
				      %% Line 1434
				      ( case St of
					  ( <( {'lint',_79,_80,_81,_82,_rec70,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111}
					       -| ['compiler_generated'] )> when 'true' ->
						let <_rec68> =
						    apply 'add_imports'/3
							(Mod, Mfs, _rec70)
						in  case St of
						      <{'lint',_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146}> when 'true' ->
							  call 'erlang':'setelement'
							      (6, St, _rec68)
						      ( <_147> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','lint'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
					    -| ['compiler_generated'] )
					  ( <_112> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','lint'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  %% Line 1435
				  <Efs> when 'true' ->
				      let <_33> =
					  fun (_30,_29) ->
					      %% Line 1437
					      case <_30,_29> of
						<{'bif',_@r0 = {F,A},_148},{Err,St0}> when 'true' ->
						    let <_15> =
							case %% Line 1439
							     apply 'is_warn_enabled'/2
								 ('bif_clash', St0) of
							  %% Line 1439
							  ( <( 'true'
							       -| ['compiler_generated'] )> when 'true' ->
								let <_13> =
								    apply %% Line 1440
									  'bif_clash_specifically_disabled'/2
									(%% Line 1440
									 St0, %% Line 1440
									      _@r0)
								in  %% Line 1440
								    call 'erlang':'not'
									(_13)
							    -| ['compiler_generated'] )
							  %% Line 1439
							  ( <( 'false'
							       -| ['compiler_generated'] )> when 'true' ->
								'false'
							    -| ['compiler_generated'] )
							  %% Line 1439
							  ( <_12> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {( 'badarg'
									    -| ['compiler_generated'] ),_12}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
						    in  %% Line 1441
							( case St0 of
							    ( <( {'lint',_149,_150,_151,_152,_153,_154,_155,_156,_rec71,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181}
								 -| ['compiler_generated'] )> when 'true' ->
								  let <AutoImpSup> =
								      apply 'is_autoimport_suppressed'/2
									  (_rec71, _@r0)
								  in  let <OldBif> =
									  call %% Line 1442
									       'erl_internal':%% Line 1442
											      'old_bif'
									      (%% Line 1442
									       F, %% Line 1442
										  A)
								      in  let <_27> =
									      case <> of
										%% Line 1444
										<>
										    when try
											  let <_22> =
											      call 'erlang':'=:='
												  (AutoImpSup, 'false')
											  in  let <_23> =
												  call 'erlang':'and'
												      (_15, _22)
											      in  let <_24> =
												      call 'erlang':'=:='
													  (OldBif, 'true')
												  in  call 'erlang':'and'
													  (_23, _24)
										      of <Try> ->
											  Try
										      catch <T,R> ->
											  'false' ->
										    %% Line 1445
										    apply 'add_error'/3
											(%% Line 1446
											 Line, %% Line 1447
											       {'redefine_old_bif_import',_@r0}, %% Line 1448
																 St0)
										%% Line 1449
										<>
										    when try
											  let <_26> =
											      call 'erlang':'=:='
												  (AutoImpSup, 'false')
											  in  call 'erlang':'and'
												  (_15, _26)
										      of <Try> ->
											  Try
										      catch <T,R> ->
											  'false' ->
										    %% Line 1450
										    apply 'add_warning'/3
											(%% Line 1451
											 Line, %% Line 1452
											       {'redefine_bif_import',_@r0}, %% Line 1453
															     St0)
										%% Line 1454
										<> when 'true' ->
										    %% Line 1455
										    St0
									      end
									  in  %% Line 1443
									      {Err,_27}
							      -| ['compiler_generated'] )
							    ( <_182> when 'true' ->
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'error'
													 -| ['compiler_generated'] )
									(( {'badrecord','lint'}
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
						%% Line 1457
						<Ef,{_X_Err,St0}> when 'true' ->
						    let <_28> =
							apply %% Line 1458
							      'add_error'/3
							    (%% Line 1458
							     Line, %% Line 1459
								   {'redefine_import',Ef}, %% Line 1460
											   St0)
						    in  %% Line 1458
							{'true',_28}
						( <_32,_31> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_32,_31})
							-| [{'function_name',{'-import/3-fun-0-',2}}] )
						  -| ['compiler_generated'] )
					      end
				      in  %% Line 1436
					  case %% Line 1437
					       call 'lists':'foldl'
						   (_33, %% Line 1462
							 {'false',St}, %% Line 1462
								       Efs) of
					    <{Err,St1}> when 'true' ->
						%% Line 1463
						case <> of
						  %% Line 1464
						  <>
						      when ( call 'erlang':'=:='
							      (Err,
							       'false')
							  -| ['compiler_generated'] ) ->
						      %% Line 1466
						      ( case St of
							  ( <( {'lint',_183,_184,_185,_186,_rec74,_187,_188,_189,_190,_191,_192,_193,_194,_195,_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208,_209,_210,_211,_212,_213,_214,_215}
							       -| ['compiler_generated'] )> when 'true' ->
								let <_rec72> =
								    apply 'add_imports'/3
									(Mod, Mfs, _rec74)
								in  case St1 of
								      <{'lint',_217,_218,_219,_220,_221,_222,_223,_224,_225,_226,_227,_228,_229,_230,_231,_232,_233,_234,_235,_236,_237,_238,_239,_240,_241,_242,_243,_244,_245,_246,_247,_248,_249,_250}> when 'true' ->
									  call 'erlang':'setelement'
									      (6, St1, _rec72)
								      ( <_251> when 'true' ->
									    ( call ( 'erlang'
										     -| ['compiler_generated'] ):( 'error'
														   -| ['compiler_generated'] )
										  (( {'badrecord','lint'}
										     -| ['compiler_generated'] ))
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								    end
							    -| ['compiler_generated'] )
							  ( <_216> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','lint'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  %% Line 1467
						  <> when 'true' ->
						      %% Line 1468
						      St1
						end
					    ( <_34> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_34})
					      -| ['compiler_generated'] )
					  end
				end
			    -| ['compiler_generated'] )
			  ( <_78> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','lint'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  ( <_44,_43,_42> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_44,_43,_42})
		  -| [{'function_name',{'import',3}}] )
	    -| ['compiler_generated'] )
	end
'check_imports'/3 =
    %% Line 1472
    fun (_0,_1,_2) ->
	let <_10> =
	    fun (_7,_6) ->
		%% Line 1474
		case call 'orddict':'find'
			 (_7, _2) of
		  %% Line 1475
		  <{'ok',Mod}> when 'true' ->
		      [{_7,Mod}|_6]
		  %% Line 1476
		  <'error'> when 'true' ->
		      %% Line 1477
		      case _7 of
			<{N,A}> when 'true' ->
			    %% Line 1478
			    case call 'erl_internal':'bif'
				     (N, A) of
			      %% Line 1479
			      <'true'> when 'true' ->
				  %% Line 1480
				  [{'bif',_7,'erlang'}|_6]
			      %% Line 1481
			      <'false'> when 'true' ->
				  _6
			      ( <_4> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_4})
				-| ['compiler_generated'] )
			    end
			( <_3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_3})
			  -| ['compiler_generated'] )
		      end
		  ( <_5> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_5})
		    -| ['compiler_generated'] )
		end
	in  %% Line 1473
	    call 'lists':'foldl'
		(_10, %% Line 1484
		      [], _1)
'add_imports'/3 =
    %% Line 1486
    fun (_0,_1,_2) ->
	let <_7> =
	    fun (_4,_3) ->
		%% Line 1487
		call 'orddict':'store'
		    (_4, _0, _3)
	in  %% Line 1487
	    call 'lists':'foldl'
		(_7, _2, _1)
'imported'/3 =
    %% Line 1491
    fun (_0,_1,_2) ->
	%% Line 1492
	( case _2 of
	    ( <( {'lint',_9,_10,_11,_12,_rec75,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'orddict':'find'
			   ({_0,_1}, _rec75) of
		    %% Line 1493
		    <{'ok',Mod}> when 'true' ->
			{'yes',Mod}
		    %% Line 1494
		    <'error'> when 'true' ->
			'no'
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_5})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_42> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'on_load'/3 =
    %% Line 1500
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Line,Fa = {Name,Arity},St0 = {'lint',_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,OnLoad0,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47}>
	      when let <_3> =
		    call %% Line 1501
			 'erlang':%% Line 1501
				  'is_atom'
			(%% Line 1501
			 Name)
		in  let <_4> =
			call %% Line 1501
			     'erlang':%% Line 1501
				      'is_integer'
			    (%% Line 1501
			     Arity)
		    in  %% Line 1501
			call 'erlang':'and'
			    (_3, _4) ->
	      let <_rec76> =
		  [%% Line 1504
		   Fa|%% Line 1504
		      OnLoad0]
	      in  %% Line 1504
		  case St0 of
		    <{'lint',_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81}> when 'true' ->
			let <_7> =
			    call 'erlang':'setelement'
				(13, St0, Line)
			in  let <_9> =
				call 'erlang':'setelement'
				    (12, _7, _rec76)
			    in  %% Line 1505
				case _9 of
				  %% Line 1506
				  <{'lint',_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,[{_93,0}|[]],_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116}> when 'true' ->
				      _9
				  %% Line 1510
				  <{'lint',_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,[{_127,_128}|[]],_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151}> when 'true' ->
				      %% Line 1512
				      apply 'add_error'/3
					  (Line, {'bad_on_load_arity',Fa}, _9)
				  %% Line 1513
				  <{'lint',_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,[_162|[_163|_164]],_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183,_184,_185,_186,_187}> when 'true' ->
				      %% Line 1515
				      apply 'add_error'/3
					  (Line, 'multiple_on_loads', _9)
				  ( <_11> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_11})
				    -| ['compiler_generated'] )
				end
		    ( <_82> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','lint'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1517
	  <Line,Val,St> when 'true' ->
	      %% Line 1519
	      apply 'add_error'/3
		  (Line, {'bad_on_load',Val}, St)
	end
'check_on_load'/1 =
    %% Line 1521
    fun (_0) ->
	case _0 of
	  <%% Line 1522
	   St = {'lint',_3,_4,_5,_6,_7,_8,_9,_10,_11,Defined,[Fa = {_12,0}|[]],%% Line 1522
									       Line,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34}> when 'true' ->
	      %% Line 1523
	      case call 'gb_sets':'is_member'
		       (Fa, Defined) of
		%% Line 1524
		<'true'> when 'true' ->
		    St
		%% Line 1525
		<'false'> when 'true' ->
		    apply 'add_error'/3
			(Line, {'undefined_on_load',Fa}, St)
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1527
	  <St> when 'true' ->
	      St
	end
'call_function'/4 =
    %% Line 1532
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Line,F,A,St = {'lint',_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,Func,_36,_37,_38,_39,_40,File,_41,_42,Cd,Usage0,_43,_44,_45,_46,_47,_48,_49,_50}> when 'true' ->
	      %% Line 1533
	      case Usage0 of
		<{'usage',Cs,_51,_52,_53}> when 'true' ->
		    let <NA> = {%% Line 1534
			 F,%% Line 1534
			   A}
		    in  let <_10> =
			    case %% Line 1535
				 Cs of
			      %% Line 1536
			      <'undefined'> when 'true' ->
				  Usage0
			      %% Line 1537
			      <_54> when 'true' ->
				  let <_rec78> =
				      apply 'maps_prepend'/3
					  (Func, NA, Cs)
				  in  case Usage0 of
					<{'usage',_55,_56,_57,_58}> when 'true' ->
					    call 'erlang':'setelement'
						(2, Usage0, _rec78)
					( <_59> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','usage'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
			    end
			in  let <Anno> =
				call %% Line 1539
				     'erl_anno':%% Line 1539
						'set_file'
				    (%% Line 1539
				     File, %% Line 1539
					   Line)
			    in  let <_rec80> =
				    [%% Line 1540
				     {NA,Anno}|%% Line 1540
					       Cd]
				in  %% Line 1540
				    case St of
				      <{'lint',_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93}> when 'true' ->
					  let <_15> =
					      call 'erlang':'setelement'
						  (27, St, _10)
					  in  call 'erlang':'setelement'
						  (26, _15, _rec80)
				      ( <_94> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','lint'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  ( <_20,_19,_18,_17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_20,_19,_18,_17})
		  -| [{'function_name',{'call_function',4}}] )
	    -| ['compiler_generated'] )
	end
'function'/5 =
    %% Line 1544
    fun (_0,_1,_2,_3,_4) ->
	let <_rec82> = {_1,_2}
	in  %% Line 1545
	    case _4 of
	      <{'lint',_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49}> when 'true' ->
		  let <_8> =
		      call 'erlang':'setelement'
			  (17, _4, _rec82)
		  in  let <St2> =
			  apply %% Line 1546
				'define_function'/4
			      (_0, _1, _2, _8)
		      in  %% Line 1547
			  apply 'clauses'/2
			      (_3, St2)
	      ( <_50> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','lint'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
'define_function'/4 =
    %% Line 1551
    fun (_0,_1,_2,_3) ->
	let <St1> =
	    apply %% Line 1552
		  'keyword_warning'/3
		(_0, _1, _3)
	in  let <NA> = {_1,_2}
	    in  %% Line 1554
		( case St1 of
		    ( <( {'lint',_22,_23,_24,_25,_26,_27,_28,_29,_30,_rec84,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54}
			 -| ['compiler_generated'] )> when 'true' ->
			  case call 'gb_sets':'is_member'
				   (NA, _rec84) of
			    %% Line 1555
			    <'true'> when 'true' ->
				%% Line 1556
				apply 'add_error'/3
				    (_0, {'redefine_function',NA}, St1)
			    %% Line 1557
			    <'false'> when 'true' ->
				let <St2> =
				    apply %% Line 1558
					  'function_check_max_args'/3
					(_0, _2, %% Line 1558
						 St1)
				in  %% Line 1559
				    ( case St2 of
					( <( {'lint',_56,_57,_58,_59,_60,_61,_62,_63,_64,_rec87,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88}
					     -| ['compiler_generated'] )> when 'true' ->
					      let <_rec85> =
						  call 'gb_sets':'add_element'
						      (NA, _rec87)
					      in  case St2 of
						    <{'lint',_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123}> when 'true' ->
							let <_14> =
							    call 'erlang':'setelement'
								(11, St2, _rec85)
							in  %% Line 1560
							    case apply 'imported'/3
								     (_1, _2, _14) of
							      %% Line 1561
							      <{'yes',_X_M}> when 'true' ->
								  apply 'add_error'/3
								      (_0, {'define_import',NA}, _14)
							      %% Line 1562
							      <'no'> when 'true' ->
								  _14
							      ( <_16> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_16})
								-| ['compiler_generated'] )
							    end
						    ( <_124> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','lint'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
					  -| ['compiler_generated'] )
					( <_89> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','lint'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
			    ( <_17> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_17})
			      -| ['compiler_generated'] )
			  end
		      -| ['compiler_generated'] )
		    ( <_55> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','lint'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
'function_check_max_args'/3 =
    %% Line 1566
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Line,Arity,St>
	      when call 'erlang':'>'
		    (Arity,
		     255) ->
	      %% Line 1567
	      apply 'add_error'/3
		  (Line, {'too_many_arguments',Arity}, St)
	  %% Line 1568
	  <_6,_7,St> when 'true' ->
	      St
	end
'clauses'/2 =
    %% Line 1572
    fun (_0,_1) ->
	let <_7> =
	    fun (_4,_3) ->
		%% Line 1574
		case apply 'clause'/2
			 (_4, _3) of
		  <{_10,St1}> when 'true' ->
		      %% Line 1575
		      St1
		  ( <_2> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_2})
		    -| ['compiler_generated'] )
		end
	in  %% Line 1573
	    call 'lists':'foldl'
		(_7, _1, _0)
'clause'/2 =
    %% Line 1578
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'clause',_X_Line,H,G,B},St0> when 'true' ->
	      %% Line 1580
	      case apply 'head'/3
		       (H, [], St0) of
		<{Hvt,Binvt,St1}> when 'true' ->
		    let <_4> =
			apply %% Line 1582
			      'vtupdate'/2
			    (%% Line 1582
			     Binvt, [])
		    in  let <Vt1> =
			    apply %% Line 1582
				  'vtupdate'/2
				(%% Line 1582
				 Hvt, _4)
			in  %% Line 1583
			    case apply 'guard'/3
				     (G, Vt1, St1) of
			      <{Gvt,St2}> when 'true' ->
				  let <Vt2> =
				      apply %% Line 1584
					    'vtupdate'/2
					  (%% Line 1584
					   Gvt, %% Line 1584
						Vt1)
				  in  %% Line 1585
				      case apply 'exprs'/3
					       (B, Vt2, St2) of
					<{Bvt,St3}> when 'true' ->
					    let <Upd> =
						apply %% Line 1586
						      'vtupdate'/2
						    (%% Line 1586
						     Bvt, %% Line 1586
							  Vt2)
					    in  %% Line 1587
						apply 'check_unused_vars'/3
						    (Upd, [], St3)
					( <_8> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_8})
					  -| ['compiler_generated'] )
				      end
			      ( <_6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_6})
				-| ['compiler_generated'] )
			    end
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  ( <_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10})
		  -| [{'function_name',{'clause',2}}] )
	    -| ['compiler_generated'] )
	end
'head'/3 =
    %% Line 1594
    fun (_0,_1,_2) ->
	%% Line 1595
	apply 'head'/4
	    (_0, _1, _1, _2)
'head'/4 =
    %% Line 1597
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[P|Ps],Vt,Old,St0> when 'true' ->
	      %% Line 1598
	      case apply 'pattern'/5
		       (P, Vt, Old, [], St0) of
		<{Pvt,Bvt1,St1}> when 'true' ->
		    %% Line 1599
		    case apply 'head'/4
			     (Ps, Vt, Old, St1) of
		      <{Psvt,Bvt2,St2}> when 'true' ->
			  let <_7> =
			      apply %% Line 1600
				    'vtmerge_pat'/2
				  (%% Line 1600
				   Pvt, %% Line 1600
					Psvt)
			  in  let <_6> =
				  apply %% Line 1600
					'vtmerge_pat'/2
				      (%% Line 1600
				       Bvt1, %% Line 1600
					     Bvt2)
			      in  %% Line 1600
				  {_7,_6,St2}
		      ( <_5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_5})
			-| ['compiler_generated'] )
		    end
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1601
	  <[],_X_Vt,_X_Env,St> when 'true' ->
	      {[],[],St}
	  ( <_11,_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8})
		  -| [{'function_name',{'head',4}}] )
	    -| ['compiler_generated'] )
	end
'pattern'/3 =
    %% Line 1616
    fun (_0,_1,_2) ->
	%% Line 1617
	apply 'pattern'/5
	    (_0, _1, _1, [], _2)
'pattern'/5 =
    %% Line 1619
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <{'var',_X_Line,'_'},_X_Vt,_X_Old,_X_Bvt,St> when 'true' ->
	      %% Line 1620
	      {[],[],St}
	  %% Line 1621
	  <{'var',Line,V},_X_Vt,Old,Bvt,St> when 'true' ->
	      %% Line 1622
	      apply 'pat_var'/5
		  (V, Line, Old, Bvt, St)
	  %% Line 1623
	  <{'char',_X_Line,_X_C},_X_Vt,_X_Old,_X_Bvt,St> when 'true' ->
	      {[],[],St}
	  %% Line 1624
	  <{'integer',_X_Line,_X_I},_X_Vt,_X_Old,_X_Bvt,St> when 'true' ->
	      {[],[],St}
	  %% Line 1625
	  <{'float',_X_Line,_X_F},_X_Vt,_X_Old,_X_Bvt,St> when 'true' ->
	      {[],[],St}
	  %% Line 1626
	  <{'atom',Line,A},_X_Vt,_X_Old,_X_Bvt,St> when 'true' ->
	      let <_5> =
		  apply %% Line 1627
			'keyword_warning'/3
		      (%% Line 1627
		       Line, %% Line 1627
			     A, %% Line 1627
				St)
	      in  %% Line 1627
		  {[],[],_5}
	  %% Line 1628
	  <{'string',_X_Line,_X_S},_X_Vt,_X_Old,_X_Bvt,St> when 'true' ->
	      {[],[],St}
	  %% Line 1629
	  <{'nil',_X_Line},_X_Vt,_X_Old,_X_Bvt,St> when 'true' ->
	      {[],[],St}
	  %% Line 1630
	  <{'cons',_X_Line,H,T},Vt,Old,Bvt,St0> when 'true' ->
	      %% Line 1631
	      case apply 'pattern'/5
		       (H, Vt, Old, Bvt, St0) of
		<{Hvt,Bvt1,St1}> when 'true' ->
		    %% Line 1632
		    case apply 'pattern'/5
			     (T, Vt, Old, Bvt, St1) of
		      <{Tvt,Bvt2,St2}> when 'true' ->
			  let <_9> =
			      apply %% Line 1633
				    'vtmerge_pat'/2
				  (%% Line 1633
				   Hvt, %% Line 1633
					Tvt)
			  in  let <_8> =
				  apply %% Line 1633
					'vtmerge_pat'/2
				      (%% Line 1633
				       Bvt1, %% Line 1633
					     Bvt2)
			      in  %% Line 1633
				  {_9,_8,St2}
		      ( <_7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_7})
			-| ['compiler_generated'] )
		    end
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1634
	  <{'tuple',_X_Line,Ps},Vt,Old,Bvt,St> when 'true' ->
	      %% Line 1635
	      apply 'pattern_list'/5
		  (Ps, Vt, Old, Bvt, St)
	  %% Line 1636
	  <{'map',_X_Line,Ps},Vt,Old,Bvt,St> when 'true' ->
	      %% Line 1637
	      apply 'pattern_map'/5
		  (Ps, Vt, Old, Bvt, St)
	  %% Line 1640
	  <{'record_index',Line,Name,Field},_X_Vt,_X_Old,_X_Bvt,St> when 'true' ->
	      let <_14> =
		  fun (_11,_10) ->
		      %% Line 1644
		      apply 'pattern_field'/4
			  (Field, Name, _11, _10)
	      in  %% Line 1641
		  case %% Line 1642
		       apply 'check_record'/4
			   (Line, Name, St, _14) of
		    <{Vt1,St1}> when 'true' ->
			%% Line 1646
			{Vt1,[],St1}
		    ( <_15> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_15})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1647
	  <{'record',Line,Name,Pfs},Vt,Old,Bvt,St> when 'true' ->
	      %% Line 1648
	      ( case St of
		  ( <( {'lint',_34,_35,_36,_37,_38,_39,_rec88,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'maps':'find'
				 (Name, _rec88) of
			  %% Line 1649
			  <{'ok',{_X_Line,Fields}}> when 'true' ->
			      let <St1> =
				  apply %% Line 1650
					'used_record'/2
				      (%% Line 1650
				       Name, %% Line 1650
					     St)
			      in  %% Line 1651
				  apply 'pattern_fields'/7
				      (Pfs, Name, Fields, Vt, Old, Bvt, St1)
			  %% Line 1652
			  <'error'> when 'true' ->
			      let <_19> =
				  apply 'add_error'/3
				      (Line, {'undefined_record',Name}, St)
			      in  {[],[],_19}
			  ( <_20> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_20})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_67> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','lint'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1654
	  <{'bin',_68,Fs},Vt,Old,Bvt,St> when 'true' ->
	      %% Line 1655
	      apply 'pattern_bin'/5
		  (Fs, Vt, Old, Bvt, St)
	  %% Line 1656
	  <{'op',_X_Line,'++',{'nil',_69},R},Vt,Old,Bvt,St> when 'true' ->
	      %% Line 1657
	      apply 'pattern'/5
		  (R, Vt, Old, Bvt, St)
	  %% Line 1658
	  <{'op',_X_Line,'++',{'cons',Li,{'char',_X_L2,_X_C},T},R},Vt,Old,Bvt,St> when 'true' ->
	      %% Line 1659
	      apply 'pattern'/5
		  ({'op',Li,'++',T,R}, Vt, Old, Bvt, St)
	  %% Line 1660
	  <{'op',_X_Line,'++',{'cons',Li,{'integer',_X_L2,_X_I},T},R},Vt,Old,Bvt,St> when 'true' ->
	      %% Line 1661
	      apply 'pattern'/5
		  ({'op',Li,'++',T,R}, Vt, Old, Bvt, St)
	  %% Line 1662
	  <{'op',_X_Line,'++',{'string',_X_Li,_X_S},R},Vt,Old,Bvt,St> when 'true' ->
	      %% Line 1663
	      apply 'pattern'/5
		  (R, Vt, Old, Bvt, St)
	  %% Line 1664
	  <{'match',_X_Line,Pat1,Pat2},Vt,Old,Bvt,St0> when 'true' ->
	      %% Line 1665
	      case apply 'pattern'/5
		       (Pat1, Vt, Old, Bvt, St0) of
		<{Lvt,Bvt1,St1}> when 'true' ->
		    %% Line 1666
		    case apply 'pattern'/5
			     (Pat2, Vt, Old, Bvt, St1) of
		      <{Rvt,Bvt2,St2}> when 'true' ->
			  let <St3> =
			      apply %% Line 1667
				    'reject_invalid_alias'/4
				  (%% Line 1667
				   Pat1, %% Line 1667
					 Pat2, %% Line 1667
					       Vt, %% Line 1667
						   St2)
			  in  let <_25> =
				  apply %% Line 1668
					'vtmerge_pat'/2
				      (%% Line 1668
				       Lvt, %% Line 1668
					    Rvt)
			      in  let <_24> =
				      apply %% Line 1668
					    'vtmerge_pat'/2
					  (%% Line 1668
					   Bvt1, %% Line 1668
						 Bvt2)
				  in  %% Line 1668
				      {_25,_24,St3}
		      ( <_22> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_22})
			-| ['compiler_generated'] )
		    end
		( <_21> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_21})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1670
	  <Pat,_X_Vt,_X_Old,_X_Bvt,St> when 'true' ->
	      %% Line 1671
	      case apply 'is_pattern_expr'/1
		       (Pat) of
		%% Line 1672
		<'true'> when 'true' ->
		    {[],[],St}
		%% Line 1673
		<'false'> when 'true' ->
		    let <_26> =
			call 'erlang':'element'
			    (2, Pat)
		    in  let <_27> =
			    apply 'add_error'/3
				(_26, 'illegal_pattern', St)
			in  {[],[],_27}
		( <_28> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_28})
		  -| ['compiler_generated'] )
	      end
	end
'pattern_list'/5 =
    %% Line 1676
    fun (_0,_1,_2,_3,_4) ->
	let <_12> =
	    fun (_9,_8) ->
		%% Line 1677
		case <_9,_8> of
		  <P,{Psvt,Bvt,St0}> when 'true' ->
		      %% Line 1678
		      case apply 'pattern'/5
			       (P, _1, _2, _3, St0) of
			<{Pvt,Bvt1,St1}> when 'true' ->
			    let <_7> =
				apply %% Line 1679
				      'vtmerge_pat'/2
				    (%% Line 1679
				     Pvt, %% Line 1679
					  Psvt)
			    in  let <_6> =
				    apply %% Line 1679
					  'vtmerge_pat'/2
					(%% Line 1679
					 Bvt, %% Line 1679
					      Bvt1)
				in  %% Line 1679
				    {_7,_6,St1}
			( <_5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_5})
			  -| ['compiler_generated'] )
		      end
		  ( <_11,_10> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_11,_10})
			  -| [{'function_name',{'-pattern_list/5-fun-0-',2}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 1677
	    call 'lists':'foldl'
		(_12, %% Line 1680
		      {[],[],_4}, _0)
'reject_invalid_alias_expr'/4 =
    %% Line 1689
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <P = {'bin',_11,_12},{'match',_13,P0,E},Vt,St0> when 'true' ->
	      let <St> =
		  apply %% Line 1690
			'reject_invalid_alias'/4
		      (%% Line 1690
		       P, %% Line 1690
			  P0, %% Line 1690
			      Vt, %% Line 1690
				  St0)
	      in  %% Line 1691
		  apply 'reject_invalid_alias_expr'/4
		      (P, E, Vt, St)
	  %% Line 1692
	  <P = {'map',_14,_15},{'match',_16,P0,E},Vt,St0> when 'true' ->
	      let <St> =
		  apply %% Line 1693
			'reject_invalid_alias'/4
		      (%% Line 1693
		       P, %% Line 1693
			  P0, %% Line 1693
			      Vt, %% Line 1693
				  St0)
	      in  %% Line 1694
		  apply 'reject_invalid_alias_expr'/4
		      (P, E, Vt, St)
	  %% Line 1695
	  <P = {'match',_17,_18,_19},{'match',_20,P0,E},Vt,St0> when 'true' ->
	      let <St> =
		  apply %% Line 1696
			'reject_invalid_alias'/4
		      (%% Line 1696
		       P, %% Line 1696
			  P0, %% Line 1696
			      Vt, %% Line 1696
				  St0)
	      in  %% Line 1697
		  apply 'reject_invalid_alias_expr'/4
		      (P, E, Vt, St)
	  %% Line 1698
	  <_21,_22,_23,St> when 'true' ->
	      St
	end
'reject_invalid_alias'/4 =
    %% Line 1711
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <{'bin',Line,_18},{'bin',_19,_20},_21,St> when 'true' ->
	      %% Line 1712
	      apply 'add_error'/3
		  (Line, 'illegal_bin_pattern', St)
	  %% Line 1713
	  <{'map',_X_Line,Ps1},{'map',_22,Ps2},Vt,St0> when 'true' ->
	      let <Fun> =
		  fun (_6,_5) ->
		      %% Line 1714
		      case <_6,_5> of
			<{'map_field_exact',L,{'var',_23,K},_X_V},Sti> when 'true' ->
			    %% Line 1715
			    case apply 'is_var_bound'/2
				     (K, Vt) of
			      %% Line 1716
			      <'true'> when 'true' ->
				  %% Line 1717
				  Sti
			      %% Line 1718
			      <'false'> when 'true' ->
				  %% Line 1719
				  apply 'add_error'/3
				      (L, {'unbound_var',K}, Sti)
			      ( <_4> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_4})
				-| ['compiler_generated'] )
			    end
			%% Line 1721
			<{'map_field_exact',_X_L,_X_K,_X_V},Sti> when 'true' ->
			    %% Line 1722
			    Sti
			( <_8,_7> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_8,_7})
				-| [{'function_name',{'-reject_invalid_alias/4-fun-0-',2}}] )
			  -| ['compiler_generated'] )
		      end
	      in  let <_10> =
		      call %% Line 1724
			   'lists':%% Line 1724
				   'foldl'
			  (%% Line 1724
			   Fun, %% Line 1724
				St0, %% Line 1724
				     Ps1)
		  in  %% Line 1724
		      call 'lists':'foldl'
			  (Fun, _10, Ps2)
	  %% Line 1725
	  <{'cons',_24,H1,T1},{'cons',_25,H2,T2},Vt,St0> when 'true' ->
	      let <St> =
		  apply %% Line 1726
			'reject_invalid_alias'/4
		      (%% Line 1726
		       H1, %% Line 1726
			   H2, %% Line 1726
			       Vt, %% Line 1726
				   St0)
	      in  %% Line 1727
		  apply 'reject_invalid_alias'/4
		      (T1, T2, Vt, St)
	  %% Line 1728
	  <{'tuple',_26,Es1},{'tuple',_27,Es2},Vt,St> when 'true' ->
	      %% Line 1729
	      apply 'reject_invalid_alias_list'/4
		  (Es1, Es2, Vt, St)
	  %% Line 1730
	  <{'record',_28,Name1,Pfs1},{'record',_29,Name2,Pfs2},Vt,%% Line 1731
								  St = %% Line 1731
								       {'lint',_30,_31,_32,_33,_34,_35,Recs,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62}> when 'true' ->
	      %% Line 1732
	      case Recs of
		%% Line 1733
		<~{Name2:={_X_Line2,Fields2},Name1:={_X_Line1,Fields1}}~> when 'true' ->
		    %% Line 1734
		    apply 'reject_invalid_alias_rec'/6
			(Pfs1, Pfs2, Fields1, Fields2, Vt, St)
		%% Line 1735
		<~{}~> when 'true' ->
		    %% Line 1738
		    St
		( <_12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1740
	  <{'match',_63,P1,P2},P,Vt,St0> when 'true' ->
	      let <St> =
		  apply %% Line 1741
			'reject_invalid_alias'/4
		      (%% Line 1741
		       P1, %% Line 1741
			   P, %% Line 1741
			      Vt, %% Line 1741
				  St0)
	      in  %% Line 1742
		  apply 'reject_invalid_alias'/4
		      (P2, P, Vt, St)
	  %% Line 1743
	  <P,M = {'match',_64,_65,_66},Vt,St> when 'true' ->
	      %% Line 1744
	      apply 'reject_invalid_alias'/4
		  (M, P, Vt, St)
	  %% Line 1745
	  <_X_P1,_X_P2,_X_Vt,St> when 'true' ->
	      St
	end
'reject_invalid_alias_list'/4 =
    %% Line 1747
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[E1|Es1],[E2|Es2],Vt,St0> when 'true' ->
	      let <St> =
		  apply %% Line 1748
			'reject_invalid_alias'/4
		      (%% Line 1748
		       E1, %% Line 1748
			   E2, %% Line 1748
			       Vt, %% Line 1748
				   St0)
	      in  %% Line 1749
		  apply 'reject_invalid_alias_list'/4
		      (Es1, Es2, Vt, St)
	  %% Line 1750
	  <_9,_10,_11,St> when 'true' ->
	      St
	end
'reject_invalid_alias_rec'/6 =
    %% Line 1752
    fun (_0,_1,_2,_3,_4,_5) ->
	let <PfsA1> =
	    apply %% Line 1754
		  'rbia_field_vars'/1
		(_0)
	in  let <PfsB1> =
		apply %% Line 1755
		      'rbia_field_vars'/1
		    (_1)
	    in  let <_8> =
		    call %% Line 1756
			 'lists':%% Line 1756
				 'reverse'
			(_2)
		in  let <FieldsA1> =
			apply %% Line 1756
			      'rbia_fields'/3
			    (_8, %% Line 1756
				 0, %% Line 1756
				    [])
		    in  let <_10> =
			    call %% Line 1757
				 'lists':%% Line 1757
					 'reverse'
				(_3)
			in  let <FieldsB1> =
				apply %% Line 1757
				      'rbia_fields'/3
				    (_10, %% Line 1757
					  0, %% Line 1757
					     [])
			    in  let <FieldsA> =
				    call %% Line 1758
					 'sofs':%% Line 1758
						'relation'
					(%% Line 1758
					 FieldsA1)
				in  let <PfsA> =
					call %% Line 1759
					     'sofs':%% Line 1759
						    'relation'
					    (%% Line 1759
					     PfsA1)
				    in  let <A> =
					    call %% Line 1760
						 'sofs':%% Line 1760
							'join'
						(%% Line 1760
						 FieldsA, %% Line 1760
							  1, %% Line 1760
							     PfsA, %% Line 1760
								   1)
					in  let <FieldsB> =
						call %% Line 1761
						     'sofs':%% Line 1761
							    'relation'
						    (%% Line 1761
						     FieldsB1)
					    in  let <PfsB> =
						    call %% Line 1762
							 'sofs':%% Line 1762
								'relation'
							(%% Line 1762
							 PfsB1)
						in  let <B> =
							call %% Line 1763
							     'sofs':%% Line 1763
								    'join'
							    (%% Line 1763
							     FieldsB, %% Line 1763
								      1, %% Line 1763
									 PfsB, %% Line 1763
									       1)
						    in  let <C> =
							    call %% Line 1764
								 'sofs':%% Line 1764
									'join'
								(%% Line 1764
								 A, %% Line 1764
								    2, %% Line 1764
								       B, %% Line 1764
									  2)
							in  let <_21> =
								fun (_19) ->
								    %% Line 1765
								    case _19 of
								      <{_31,_32,P1,_33,P2}> when 'true' ->
									  {P1,P2}
								      ( <_20> when 'true' ->
									    ( primop 'match_fail'
										  ({'function_clause',_20})
									      -| [{'function_name',{'-reject_invalid_alias_rec/6-fun-0-',1}}] )
									-| ['compiler_generated'] )
								    end
							    in  let <D> =
								    call %% Line 1765
									 'sofs':%% Line 1765
										'projection'
									(%% Line 1765
									 {'external',_21}, %% Line 1765
											   C)
								in  let <E> =
									call %% Line 1766
									     'sofs':%% Line 1766
										    'to_external'
									    (%% Line 1766
									     D)
								    in  %% Line 1767
									case call 'lists':'unzip'
										 (E) of
									  <{Ps1,Ps2}> when 'true' ->
									      %% Line 1768
									      apply 'reject_invalid_alias_list'/4
										  (Ps1, Ps2, _4, _5)
									  ( <_24> when 'true' ->
										primop 'match_fail'
										    ({'badmatch',_24})
									    -| ['compiler_generated'] )
									end
'rbia_field_vars'/1 =
    %% Line 1770
    fun (_0) ->
	%% Line 1771
	( letrec
	      'lc$^0'/1 =
		  fun (_3) ->
		      case _3 of
			<[{'record_field',_6,{'atom',_7,Name},Pat}|_2]> when 'true' ->
			    let <_4> =
				apply 'lc$^0'/1
				    (_2)
			    in  ( [{Name,Pat}|_4]
				  -| ['compiler_generated'] )
			( <[_1|_2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_8> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_8})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_0)
	  -| ['list_comprehension'] )
'rbia_fields'/3 =
    %% Line 1773
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[{'record_field',_8,{'atom',_9,Name},_10}|Fs],I,Acc> when 'true' ->
	      let <_3> =
		  call %% Line 1774
		       'erlang':%% Line 1774
				'+'
		      (%% Line 1774
		       I, %% Line 1774
			  1)
	      in  %% Line 1774
		  apply 'rbia_fields'/3
		      (Fs, _3, [{Name,I}|Acc])
	  %% Line 1775
	  <[_11|Fs],I,Acc> when 'true' ->
	      let <_4> =
		  call %% Line 1776
		       'erlang':%% Line 1776
				'+'
		      (%% Line 1776
		       I, %% Line 1776
			  1)
	      in  %% Line 1776
		  apply 'rbia_fields'/3
		      (Fs, _4, Acc)
	  %% Line 1777
	  <[],_12,Acc> when 'true' ->
	      Acc
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'rbia_fields',3}}] )
	    -| ['compiler_generated'] )
	end
'is_pattern_expr'/1 =
    %% Line 1782
    fun (_0) ->
	%% Line 1783
	case apply 'is_pattern_expr_1'/1
		 (_0) of
	  %% Line 1784
	  <'false'> when 'true' ->
	      'false'
	  %% Line 1785
	  <'true'> when 'true' ->
	      %% Line 1788
	      case call 'erl_eval':'partial_eval'
		       (_0) of
		%% Line 1789
		<{'integer',_4,_5}> when 'true' ->
		    'true'
		%% Line 1790
		<{'char',_6,_7}> when 'true' ->
		    'true'
		%% Line 1791
		<{'float',_8,_9}> when 'true' ->
		    'true'
		%% Line 1792
		<{'atom',_10,_11}> when 'true' ->
		    'true'
		%% Line 1793
		<_12> when 'true' ->
		    'false'
	      end
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_2})
	    -| ['compiler_generated'] )
	end
'is_pattern_expr_1'/1 =
    %% Line 1797
    fun (_0) ->
	case _0 of
	  <{'char',_X_Line,_X_C}> when 'true' ->
	      'true'
	  %% Line 1798
	  <{'integer',_X_Line,_X_I}> when 'true' ->
	      'true'
	  %% Line 1799
	  <{'float',_X_Line,_X_F}> when 'true' ->
	      'true'
	  %% Line 1800
	  <{'atom',_X_Line,_X_A}> when 'true' ->
	      'true'
	  %% Line 1801
	  <{'tuple',_X_Line,Es}> when 'true' ->
	      let <_1> = 'is_pattern_expr'/1
	      in  %% Line 1802
		  call 'lists':'all'
		      (_1, Es)
	  %% Line 1803
	  <{'nil',_X_Line}> when 'true' ->
	      'true'
	  %% Line 1804
	  <{'cons',_X_Line,H,T}> when 'true' ->
	      %% Line 1805
	      ( case apply 'is_pattern_expr_1'/1
			 (H) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'is_pattern_expr_1'/1
			    (T)
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_2> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_2}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1806
	  <{'op',_X_Line,Op,A}> when 'true' ->
	      %% Line 1807
	      ( case call 'erl_internal':'arith_op'
			 (Op, 1) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'is_pattern_expr_1'/1
			    (A)
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_4> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_4}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1808
	  <{'op',_X_Line,Op,A1,A2}> when 'true' ->
	      %% Line 1809
	      ( case call 'erl_internal':'arith_op'
			 (Op, 2) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			let <_7> = 'is_pattern_expr'/1
			in  call 'lists':'all'
				(_7, [A1|[A2|[]]])
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_6> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_6}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1810
	  <_X_Other> when 'true' ->
	      'false'
	end
'pattern_map'/5 =
    %% Line 1812
    fun (_0,_1,_2,_3,_4) ->
	let <_19> =
	    fun (_16,_15) ->
		%% Line 1813
		case <_16,_15> of
		  <{'map_field_assoc',L,_25,_26},{Psvt,Bvt0,St0}> when 'true' ->
		      let <_5> =
			  apply %% Line 1814
				'add_error'/3
			      (%% Line 1814
			       L, %% Line 1814
				  'illegal_pattern', %% Line 1814
						     St0)
		      in  %% Line 1814
			  {Psvt,Bvt0,_5}
		  %% Line 1815
		  <{'map_field_exact',_X_L,K,V},{Psvt,Bvt0,St0}> when 'true' ->
		      %% Line 1816
		      case St0 of
			<{'lint',_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60}> when 'true' ->
			    let <_8> =
				call 'erlang':'setelement'
				    (35, St0, 'map_key')
			    in  %% Line 1817
				case apply 'gexpr'/3
					 (K, _1, _8) of
				  <{Kvt,St2}> when 'true' ->
				      %% Line 1818
				      case apply 'pattern'/5
					       (V, _1, _2, _3, St2) of
					<{Vvt,Bvt2,St3}> when 'true' ->
					    let <_13> =
						apply %% Line 1819
						      'vtmerge_pat'/2
						    (%% Line 1819
						     Kvt, %% Line 1819
							  Vvt)
					    in  let <_14> =
						    apply %% Line 1819
							  'vtmerge_pat'/2
							(_13, %% Line 1819
							      Psvt)
						in  let <_12> =
							apply %% Line 1820
							      'vtmerge_pat'/2
							    (%% Line 1820
							     Bvt0, %% Line 1820
								   Bvt2)
						    in  %% Line 1819
							{_14,_12,%% Line 1821
								 St3}
					( <_11> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_11})
					  -| ['compiler_generated'] )
				      end
				  ( <_10> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_10})
				    -| ['compiler_generated'] )
				end
			( <_61> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','lint'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		  ( <_18,_17> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_18,_17})
			  -| [{'function_name',{'-pattern_map/5-fun-0-',2}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 1813
	    call 'lists':'foldl'
		(_19, %% Line 1822
		      {[],[],_4}, _0)
'pattern_bin'/5 =
    %% Line 1828
    fun (_0,_1,_2,_3,_4) ->
	let <_9> =
	    fun (_6,_5) ->
		%% Line 1830
		apply 'pattern_element'/4
		    (_6, _1, _2, _5)
	in  %% Line 1829
	    case call 'lists':'foldl'
		     (_9, %% Line 1832
			  {0,[],_3,_4}, _0) of
	      <{_X_Sz,Esvt,Bvt,St1}> when 'true' ->
		  %% Line 1833
		  {Esvt,Bvt,St1}
	      ( <_10> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_10})
		-| ['compiler_generated'] )
	    end
'pattern_element'/4 =
    %% Line 1835
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Be = {'bin_element',Line,{'string',_10,_11},Size,Ts},Vt,%% Line 1836
								   Old,%% Line 1836
								       Acc = %% Line 1836
									     {Sz,Esvt,Bvt,St0}> when 'true' ->
	      %% Line 1837
	      case apply 'good_string_size_type'/2
		       (Size, Ts) of
		%% Line 1838
		<'true'> when 'true' ->
		    %% Line 1839
		    apply 'pattern_element_1'/4
			(Be, Vt, Old, Acc)
		%% Line 1840
		<'false'> when 'true' ->
		    let <St> =
			apply %% Line 1841
			      'add_error'/3
			    (%% Line 1841
			     Line, %% Line 1841
				   'typed_literal_string', %% Line 1841
							   St0)
		    in  %% Line 1842
			{Sz,Esvt,Bvt,St}
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1844
	  <Be,Vt,Old,Acc> when 'true' ->
	      %% Line 1845
	      apply 'pattern_element_1'/4
		  (Be, Vt, Old, Acc)
	end
'pattern_element_1'/4 =
    %% Line 1847
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <{'bin_element',Line,E,Sz0,Ts},Vt,Old,{Size0,Esvt,Bvt,St0}> when 'true' ->
	      %% Line 1848
	      case apply 'pat_bit_expr'/4
		       (E, Old, Bvt, St0) of
		<{Pevt,Bvt1,St1}> when 'true' ->
		    let <_5> =
			apply %% Line 1850
			      'vtmerge'/2
			    (%% Line 1850
			     Vt, %% Line 1850
				 Esvt)
		    in  %% Line 1850
			case apply 'pat_bit_size'/4
				 (Sz0, _5, Bvt, St1) of
			  <{Sz1,Szvt,Bvt2,St2}> when 'true' ->
			      %% Line 1851
			      case apply 'bit_type'/4
				       (Line, Sz1, Ts, St2) of
				<{Sz2,Bt,St3}> when 'true' ->
				    %% Line 1852
				    case apply 'bit_size_check'/4
					     (Line, Sz2, Bt, St3) of
				      <{Sz3,St4}> when 'true' ->
					  let <_11> =
					      case %% Line 1853
						   <E,Sz3> of
						%% Line 1854
						<( {( 'string'
						      -| ['compiler_generated'] ),_22,S}
						   -| ['compiler_generated'] ),( 'all'
										 -| ['compiler_generated'] )> when 'true' ->
						    let <_9> =
							call 'erlang':'length'
							    (S)
						    in  call 'erlang':'*'
							    (8, _9)
						%% Line 1855
						<_23,_24> when 'true' ->
						    Sz3
					      end
					  in  %% Line 1857
					      case apply 'add_bit_size'/5
						       (Line, _11, Size0, 'false', St4) of
						<{Size1,St5}> when 'true' ->
						    let <_16> =
							apply %% Line 1858
							      'vtmerge'/2
							    (%% Line 1858
							     Pevt, %% Line 1858
								   Esvt)
						    in  let <_17> =
							    apply %% Line 1858
								  'vtmerge'/2
								(%% Line 1858
								 Szvt, _16)
							in  let <_14> =
								apply %% Line 1859
								      'vtmerge'/2
								    (%% Line 1859
								     Bvt, %% Line 1859
									  Bvt1)
							    in  let <_15> =
								    apply %% Line 1859
									  'vtmerge'/2
									(%% Line 1859
									 Bvt2, _14)
								in  %% Line 1858
								    {Size1,_17,_15,%% Line 1859
										   St5}
						( <_13> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_13})
						  -| ['compiler_generated'] )
					      end
				      ( <_8> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_8})
					-| ['compiler_generated'] )
				    end
				( <_7> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_7})
				  -| ['compiler_generated'] )
			      end
			  ( <_6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_6})
			    -| ['compiler_generated'] )
			end
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  ( <_21,_20,_19,_18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_21,_20,_19,_18})
		  -| [{'function_name',{'pattern_element_1',4}}] )
	    -| ['compiler_generated'] )
	end
'good_string_size_type'/2 =
    %% Line 1861
    fun (_0,_1) ->
	case <_0,_1> of
	  <'default','default'> when 'true' ->
	      %% Line 1862
	      'true'
	  %% Line 1863
	  <'default',Ts> when 'true' ->
	      let <_4> =
		  fun (_2) ->
		      %% Line 1864
		      case _2 of
			<'utf8'> when 'true' ->
			    'true'
			%% Line 1865
			<'utf16'> when 'true' ->
			    'true'
			%% Line 1866
			<'utf32'> when 'true' ->
			    'true'
			%% Line 1867
			<_7> when 'true' ->
			    'false'
		      end
	      in  %% Line 1864
		  call 'lists':'any'
		      (_4, %% Line 1868
			   Ts)
	  %% Line 1869
	  <_8,_9> when 'true' ->
	      'false'
	end
'pat_bit_expr'/4 =
    %% Line 1875
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <{'var',_12,'_'},_X_Old,_X_Bvt,St> when 'true' ->
	      {[],[],St}
	  %% Line 1876
	  <{'var',Ln,V},Old,Bvt,St> when 'true' ->
	      apply 'pat_var'/5
		  (V, Ln, Old, Bvt, St)
	  %% Line 1877
	  <{'string',_13,_14},_X_Old,_X_Bvt,St> when 'true' ->
	      {[],[],St}
	  %% Line 1878
	  <{'bin',L,_15},_X_Old,_X_Bvt,St> when 'true' ->
	      let <_4> =
		  apply %% Line 1879
			'add_error'/3
		      (%% Line 1879
		       L, %% Line 1879
			  'illegal_pattern', %% Line 1879
					     St)
	      in  %% Line 1879
		  {[],[],_4}
	  %% Line 1880
	  <P,_X_Old,_X_Bvt,St> when 'true' ->
	      %% Line 1881
	      case apply 'is_pattern_expr'/1
		       (P) of
		%% Line 1882
		<'true'> when 'true' ->
		    {[],[],St}
		%% Line 1883
		<'false'> when 'true' ->
		    let <_5> =
			call 'erlang':'element'
			    (2, P)
		    in  let <_6> =
			    apply 'add_error'/3
				(_5, 'illegal_pattern', St)
			in  {[],[],_6}
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_7})
		  -| ['compiler_generated'] )
	      end
	end
'pat_bit_size'/4 =
    %% Line 1890
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <'default',_X_Vt,_X_Bvt,St> when 'true' ->
	      {'default',[],[],St}
	  %% Line 1891
	  <{'var',Lv,V},Vt0,Bvt0,St0> when 'true' ->
	      %% Line 1892
	      case apply 'pat_binsize_var'/5
		       (V, Lv, Vt0, Bvt0, St0) of
		<{Vt,Bvt,St1}> when 'true' ->
		    %% Line 1893
		    {'unknown',Vt,Bvt,St1}
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1894
	  <Size,Vt0,Bvt0,St0> when 'true' ->
	      let <Line> =
		  call %% Line 1895
		       'erlang':%% Line 1895
				'element'
		      (%% Line 1895
		       2, %% Line 1895
			  Size)
	      in  %% Line 1896
		  case call 'erl_eval':'partial_eval'
			   (Size) of
		    %% Line 1897
		    <{'integer',_28,I}>
			when call 'erlang':'=:='
			      (_28,
			       Line) ->
			{I,[],[],St0}
		    %% Line 1898
		    <Expr> when 'true' ->
			%% Line 1903
			case St0 of
			  <{'lint',_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62}> when 'true' ->
			      let <_7> =
				  call 'erlang':'setelement'
				      (35, St0, 'bin_seg_size')
			      in  let <_9> =
				      call 'erlang':'setelement'
					  (34, _7, Bvt0)
				  in  %% Line 1904
				      case apply 'gexpr'/3
					       (Size, Vt0, _9) of
					<{Vt,St2 = {'lint',_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,Bvt,_96}}> when 'true' ->
					    %% Line 1905
					    ( case St0 of
						( <( {'lint',_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_rec93}
						     -| ['compiler_generated'] )> when 'true' ->
						      case St2 of
							<{'lint',_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164}> when 'true' ->
							    let <_16> =
								call 'erlang':'setelement'
								    (35, St2, _rec93)
							    in  let <_18> =
								    call 'erlang':'setelement'
									(34, _16, 'none')
								in  let <_21> =
									case %% Line 1906
									     apply 'is_bit_size_illegal'/1
										 (Expr) of
									  %% Line 1907
									  <'true'> when 'true' ->
									      %% Line 1911
									      apply 'add_warning'/3
										  (Line, 'non_integer_bitsize', _18)
									  %% Line 1912
									  <'false'> when 'true' ->
									      _18
									  ( <_20> when 'true' ->
										%% Line 1906
										primop 'match_fail'
										    ({'case_clause',_20})
									    -| ['compiler_generated'] )
									end
								    in  %% Line 1914
									{'unknown',Vt,Bvt,_21}
							( <_165> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','lint'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						  -| ['compiler_generated'] )
						( <_130> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','lint'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					( <_11> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_11})
					  -| ['compiler_generated'] )
				      end
			  ( <_63> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','lint'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		  end
	end
'is_bit_size_illegal'/1 =
    %% Line 1917
    fun (_0) ->
	case _0 of
	  <{'atom',_2,_3}> when 'true' ->
	      'true'
	  %% Line 1918
	  <{'bin',_4,_5}> when 'true' ->
	      'true'
	  %% Line 1919
	  <{'cons',_6,_7,_8}> when 'true' ->
	      'true'
	  %% Line 1920
	  <{'float',_9,_10}> when 'true' ->
	      'true'
	  %% Line 1921
	  <{'map',_11,_12}> when 'true' ->
	      'true'
	  %% Line 1922
	  <{'nil',_13}> when 'true' ->
	      'true'
	  %% Line 1923
	  <{'tuple',_14,_15}> when 'true' ->
	      'true'
	  %% Line 1924
	  <_16> when 'true' ->
	      'false'
	end
'expr_bin'/4 =
    %% Line 1929
    fun (_0,_1,_2,_3) ->
	let <_8> =
	    fun (_5,_4) ->
		%% Line 1930
		apply 'bin_element'/4
		    (_5, _1, _4, _3)
	in  %% Line 1930
	    case call 'lists':'foldl'
		     (_8, %% Line 1931
			  {0,[],_2}, _0) of
	      <{_X_Sz,Esvt,St1}> when 'true' ->
		  %% Line 1932
		  {Esvt,St1}
	      ( <_9> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_9})
		-| ['compiler_generated'] )
	    end
'bin_element'/4 =
    %% Line 1934
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <{'bin_element',Line,E,Sz0,Ts},Vt,{Size0,Esvt,St0},Check> when 'true' ->
	      %% Line 1935
	      case apply Check
		       (E, Vt, St0) of
		<{Vt1,St1}> when 'true' ->
		    %% Line 1936
		    case apply 'bit_size'/4
			     (Sz0, Vt, St1, Check) of
		      <{Sz1,Vt2,St2}> when 'true' ->
			  %% Line 1937
			  case apply 'bit_type'/4
				   (Line, Sz1, Ts, St2) of
			    <{Sz2,Bt,St3}> when 'true' ->
				%% Line 1938
				case apply 'bit_size_check'/4
					 (Line, Sz2, Bt, St3) of
				  <{Sz3,St4}> when 'true' ->
				      %% Line 1939
				      case apply 'add_bit_size'/5
					       (Line, Sz3, Size0, 'true', St4) of
					<{Size1,St5}> when 'true' ->
					    let <_9> =
						apply %% Line 1940
						      'vtmerge'/1
						    (%% Line 1940
						     [Vt2|[Vt1|[Esvt|[]]]])
					    in  %% Line 1940
						{Size1,_9,St5}
					( <_8> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_8})
					  -| ['compiler_generated'] )
				      end
				  ( <_7> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_7})
				    -| ['compiler_generated'] )
				end
			    ( <_6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_6})
			      -| ['compiler_generated'] )
			  end
		      ( <_5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_5})
			-| ['compiler_generated'] )
		    end
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  ( <_13,_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12,_11,_10})
		  -| [{'function_name',{'bin_element',4}}] )
	    -| ['compiler_generated'] )
	end
'bit_size'/4 =
    %% Line 1942
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <'default',_X_Vt,St,_X_Check> when 'true' ->
	      {'default',[],St}
	  %% Line 1943
	  <{'atom',_X_Line,'all'},_X_Vt,St,_X_Check> when 'true' ->
	      {'all',[],St}
	  %% Line 1944
	  <Size,Vt,St,Check> when 'true' ->
	      let <Info> =
		  apply %% Line 1947
			'is_guard_test2_info'/1
		      (%% Line 1947
		       St)
	      in  %% Line 1948
		  case apply 'is_gexpr'/2
			   (Size, Info) of
		    %% Line 1949
		    <'true'> when 'true' ->
			%% Line 1950
			case call 'erl_eval':'partial_eval'
				 (Size) of
			  %% Line 1951
			  <{'integer',_X_ILn,I}> when 'true' ->
			      {I,[],St}
			  %% Line 1952
			  <_X_Other> when 'true' ->
			      %% Line 1953
			      case apply Check
				       (Size, Vt, St) of
				<{Evt,St1}> when 'true' ->
				    %% Line 1954
				    {'unknown',Evt,St1}
				( <_5> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_5})
				  -| ['compiler_generated'] )
			      end
			end
		    %% Line 1956
		    <'false'> when 'true' ->
			%% Line 1957
			case apply Check
				 (Size, Vt, St) of
			  <{Evt,St1}> when 'true' ->
			      %% Line 1958
			      {'unknown',Evt,St1}
			  ( <_7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_7})
			    -| ['compiler_generated'] )
			end
		    ( <_8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_8})
		      -| ['compiler_generated'] )
		  end
	end
'bit_type'/4 =
    %% Line 1964
    fun (_0,_1,_2,_3) ->
	%% Line 1965
	case call 'erl_bits':'set_bit_type'
		 (_1, _2) of
	  %% Line 1966
	  <{'ok',Size1,Bt}> when 'true' ->
	      {Size1,Bt,_3}
	  %% Line 1967
	  <{'error',What}> when 'true' ->
	      %% Line 1969
	      case call 'erl_bits':'set_bit_type'
		       ('default', []) of
		<{'ok',Size1,Bt}> when 'true' ->
		    let <_5> =
			apply %% Line 1970
			      'add_error'/3
			    (_0, %% Line 1970
				 What, _3)
		    in  %% Line 1970
			{Size1,Bt,_5}
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  ( <_6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_6})
	    -| ['compiler_generated'] )
	end
'bit_size_check'/4 =
    %% Line 1977
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <_X_Line,'unknown',_17,St> when 'true' ->
	      {'unknown',St}
	  %% Line 1978
	  <_X_Line,'undefined',{'bittype',Type,_18,_19,_20},St> when 'true' ->
	      let <_6> =
		  call %% Line 1979
		       'erlang':%% Line 1979
				'=:='
		      (%% Line 1979
		       Type, %% Line 1979
			     'utf8')
	      in  let <_5> =
		      call %% Line 1979
			   'erlang':%% Line 1979
				    '=:='
			  (%% Line 1979
			   Type, %% Line 1979
				 'utf16')
		  in  let <_7> =
			  call %% Line 1979
			       'erlang':%% Line 1979
					'or'
			      (_6, _5)
		      in  let <_4> =
			      call %% Line 1979
				   'erlang':%% Line 1979
					    '=:='
				  (%% Line 1979
				   Type, %% Line 1979
					 'utf32')
			  in  %% Line 1979
			      case call 'erlang':'or'
				       (_7, _4) of
				<'true'> when 'true' ->
				    %% Line 1980
				    {'undefined',St}
				( <_8> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_8})
				  -| ['compiler_generated'] )
			      end
	  %% Line 1981
	  <Line,'all',{'bittype',Type,_21,_22,_23},St> when 'true' ->
	      %% Line 1982
	      case Type of
		%% Line 1983
		<'binary'> when 'true' ->
		    {'all',St}
		%% Line 1984
		<_24> when 'true' ->
		    let <_9> =
			apply 'add_error'/3
			    (Line, 'illegal_bitsize', St)
		    in  {'unknown',_9}
	      end
	  %% Line 1986
	  <Line,Size,{'bittype',Type,Unit,_25,_26},St> when 'true' ->
	      let <Sz> =
		  call %% Line 1987
		       'erlang':%% Line 1987
				'*'
		      (%% Line 1987
		       Unit, %% Line 1987
			     Size)
	      in  let <St2> =
		      apply %% Line 1988
			    'elemtype_check'/4
			  (%% Line 1988
			   Line, %% Line 1988
				 Type, %% Line 1988
				       Sz, %% Line 1988
					   St)
		  in  %% Line 1989
		      {Sz,St2}
	  ( <_16,_15,_14,_13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15,_14,_13})
		  -| [{'function_name',{'bit_size_check',4}}] )
	    -| ['compiler_generated'] )
	end
'elemtype_check'/4 =
    %% Line 1991
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <_X_Line,'float',32,St> when 'true' ->
	      St
	  %% Line 1992
	  <_X_Line,'float',64,St> when 'true' ->
	      St
	  %% Line 1993
	  <Line,'float',_X_Size,St> when 'true' ->
	      %% Line 1994
	      apply 'add_warning'/3
		  (Line, {'bad_bitsize',[102|[108|[111|[97|[116]]]]]}, St)
	  %% Line 1995
	  <_X_Line,_X_Type,_X_Size,St> when 'true' ->
	      St
	end
'add_bit_size'/5 =
    %% Line 2001
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <Line,_X_Sz1,'all','false',St> when 'true' ->
	      let <_5> =
		  apply %% Line 2002
			'add_error'/3
		      (%% Line 2002
		       Line, %% Line 2002
			     'unsized_binary_not_at_end', %% Line 2002
							  St)
	      in  %% Line 2002
		  {'all',_5}
	  %% Line 2003
	  <_X_Line,_X_Sz1,'all','true',St> when 'true' ->
	      %% Line 2004
	      {'all',St}
	  %% Line 2005
	  <_X_Line,'all',_X_Sz2,_X_B,St> when 'true' ->
	      {'all',St}
	  %% Line 2006
	  <_X_Line,'undefined',_X_Sz2,_X_B,St> when 'true' ->
	      {'undefined',St}
	  %% Line 2007
	  <_X_Line,'unknown',_X_Sz2,_X_B,St> when 'true' ->
	      {'unknown',St}
	  %% Line 2008
	  <_X_Line,_X_Sz1,'undefined',_X_B,St> when 'true' ->
	      {'unknown',St}
	  %% Line 2009
	  <_X_Line,_X_Sz1,'unknown',_X_B,St> when 'true' ->
	      {'unknown',St}
	  %% Line 2010
	  <_X_Line,Sz1,Sz2,_X_B,St> when 'true' ->
	      let <_6> =
		  call 'erlang':'+'
		      (Sz1, Sz2)
	      in  {_6,St}
	end
'guard'/3 =
    %% Line 2017
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[L|R],Vt,St0>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 2018
	      case apply 'guard_tests'/3
		       (L, Vt, St0) of
		<{Gvt,St1}> when 'true' ->
		    let <_4> =
			apply %% Line 2019
			      'vtupdate'/2
			    (%% Line 2019
			     Gvt, %% Line 2019
				  Vt)
		    in  %% Line 2019
			case apply 'guard'/3
				 (R, _4, St1) of
			  <{Gsvt,St2}> when 'true' ->
			      let <_6> =
				  apply %% Line 2020
					'vtupdate'/2
				      (%% Line 2020
				       Gvt, %% Line 2020
					    Gsvt)
			      in  %% Line 2020
				  {_6,St2}
			  ( <_5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_5})
			    -| ['compiler_generated'] )
			end
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2021
	  <L,Vt,St0> when 'true' ->
	      %% Line 2022
	      apply 'guard_tests'/3
		  (L, Vt, St0)
	end
'guard_tests'/3 =
    %% Line 2025
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[G|Gs],Vt,St0> when 'true' ->
	      %% Line 2026
	      case apply 'guard_test'/3
		       (G, Vt, St0) of
		<{Gvt,St1}> when 'true' ->
		    let <_4> =
			apply %% Line 2027
			      'vtupdate'/2
			    (%% Line 2027
			     Gvt, %% Line 2027
				  Vt)
		    in  %% Line 2027
			case apply 'guard_tests'/3
				 (Gs, _4, St1) of
			  <{Gsvt,St2}> when 'true' ->
			      let <_6> =
				  apply %% Line 2028
					'vtupdate'/2
				      (%% Line 2028
				       Gvt, %% Line 2028
					    Gsvt)
			      in  %% Line 2028
				  {_6,St2}
			  ( <_5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_5})
			    -| ['compiler_generated'] )
			end
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2029
	  <[],_X_Vt,St> when 'true' ->
	      {[],St}
	  ( <_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7})
		  -| [{'function_name',{'guard_tests',3}}] )
	    -| ['compiler_generated'] )
	end
'guard_test'/3 =
    %% Line 2037
    fun (_0,_1,_2) ->
	let <St1> =
	    apply %% Line 2038
		  'obsolete_guard'/2
		(_0, _2)
	in  %% Line 2039
	    apply 'guard_test2'/3
		(_0, _1, St1)
'guard_test2'/3 =
    %% Line 2042
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{'call',Line,{'atom',Lr,'record'},_@r0 = [E|[A|[]]]},Vt,St0> when 'true' ->
	      %% Line 2043
	      apply 'gexpr'/3
		  ({'call',Line,{'atom',Lr,'is_record'},_@r0}, Vt, St0)
	  %% Line 2044
	  <G = {'call',Line,{'atom',_X_La,F},As},Vt,St0> when 'true' ->
	      %% Line 2045
	      case apply 'gexpr_list'/3
		       (As, Vt, St0) of
		<_@r1 = {Asvt,St1}> when 'true' ->
		    let <A> =
			call %% Line 2046
			     'erlang':%% Line 2046
				      'length'
			    (%% Line 2046
			     As)
		    in  %% Line 2047
			case call 'erl_internal':'type_test'
				 (F, A) of
			  %% Line 2048
			  <'true'>
			      when let <_5> =
				    call 'erlang':'=/='
					(F, 'is_record')
				in  let <_6> =
					call 'erlang':'=/='
					    (A, 2)
				    in  call 'erlang':'and'
					    (_5, _6) ->
			      %% Line 2049
			      case apply 'no_guard_bif_clash'/2
				       (St1, {F,A}) of
				%% Line 2050
				<'false'> when 'true' ->
				    let <_7> =
					apply %% Line 2051
					      'add_error'/3
					    (%% Line 2051
					     Line, %% Line 2051
						   {'illegal_guard_local_call',{F,A}}, %% Line 2051
										       St1)
				    in  %% Line 2051
					{Asvt,_7}
				%% Line 2052
				<'true'> when 'true' ->
				    %% Line 2053
				    _@r1
				( <_8> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_8})
				  -| ['compiler_generated'] )
			      end
			  %% Line 2055
			  <_13> when 'true' ->
			      %% Line 2056
			      apply 'gexpr'/3
				  (G, Vt, St0)
			end
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2058
	  <G,Vt,St> when 'true' ->
	      %% Line 2060
	      apply 'gexpr'/3
		  (G, Vt, St)
	end
'gexpr'/3 =
    %% Line 2066
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{'var',Line,V},Vt,St> when 'true' ->
	      %% Line 2067
	      apply 'expr_var'/4
		  (V, Line, Vt, St)
	  %% Line 2068
	  <{'char',_X_Line,_X_C},_X_Vt,St> when 'true' ->
	      {[],St}
	  %% Line 2069
	  <{'integer',_X_Line,_X_I},_X_Vt,St> when 'true' ->
	      {[],St}
	  %% Line 2070
	  <{'float',_X_Line,_X_F},_X_Vt,St> when 'true' ->
	      {[],St}
	  %% Line 2071
	  <{'atom',Line,A},_X_Vt,St> when 'true' ->
	      let <_3> =
		  apply %% Line 2072
			'keyword_warning'/3
		      (%% Line 2072
		       Line, %% Line 2072
			     A, %% Line 2072
				St)
	      in  %% Line 2072
		  {[],_3}
	  %% Line 2073
	  <{'string',_X_Line,_X_S},_X_Vt,St> when 'true' ->
	      {[],St}
	  %% Line 2074
	  <{'nil',_X_Line},_X_Vt,St> when 'true' ->
	      {[],St}
	  %% Line 2075
	  <{'cons',_X_Line,H,T},Vt,St> when 'true' ->
	      %% Line 2076
	      apply 'gexpr_list'/3
		  ([H|[T|[]]], Vt, St)
	  %% Line 2077
	  <{'tuple',_X_Line,Es},Vt,St> when 'true' ->
	      %% Line 2078
	      apply 'gexpr_list'/3
		  (Es, Vt, St)
	  %% Line 2079
	  <{'map',_X_Line,Es},Vt,St> when 'true' ->
	      let <_5> =
		  apply %% Line 2080
			'check_assoc_fields'/2
		      (%% Line 2080
		       Es, %% Line 2080
			   St)
	      in  let <_4> = 'gexpr_list'/3
		  in  %% Line 2080
		      apply 'map_fields'/4
			  (Es, Vt, _5, _4)
	  %% Line 2081
	  <{'map',_X_Line,Src,Es},Vt,St> when 'true' ->
	      %% Line 2082
	      case apply 'gexpr'/3
		       (Src, Vt, St) of
		<{Svt,St1}> when 'true' ->
		    let <_7> = 'gexpr_list'/3
		    in  %% Line 2083
			case apply 'map_fields'/4
				 (Es, Vt, St1, _7) of
			  <{Fvt,St2}> when 'true' ->
			      let <_9> =
				  apply %% Line 2084
					'vtmerge'/2
				      (%% Line 2084
				       Svt, %% Line 2084
					    Fvt)
			      in  %% Line 2084
				  {_9,St2}
			  ( <_8> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_8})
			    -| ['compiler_generated'] )
			end
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2085
	  <{'record_index',Line,Name,Field},_X_Vt,St> when 'true' ->
	      let <_14> =
		  fun (_11,_10) ->
		      %% Line 2087
		      apply 'record_field'/4
			  (Field, Name, _11, _10)
	      in  %% Line 2086
		  apply 'check_record'/4
		      (Line, Name, St, _14)
	  %% Line 2088
	  <{'record_field',Line,Rec,Name,Field},Vt,St0> when 'true' ->
	      %% Line 2089
	      case apply 'gexpr'/3
		       (Rec, Vt, St0) of
		<{Rvt,St1}> when 'true' ->
		    let <_20> =
			fun (_17,_16) ->
			    %% Line 2092
			    apply 'record_field'/4
				(Field, Name, _17, _16)
		    in  %% Line 2090
			case apply 'check_record'/4
				 (Line, Name, St1, _20) of
			  <{Fvt,St2}> when 'true' ->
			      let <_22> =
				  apply %% Line 2094
					'vtmerge'/2
				      (%% Line 2094
				       Rvt, %% Line 2094
					    Fvt)
			      in  %% Line 2094
				  {_22,St2}
			  ( <_21> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_21})
			    -| ['compiler_generated'] )
			end
		( <_15> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2095
	  <{'record',Line,Name,Inits},Vt,St> when 'true' ->
	      let <_27> =
		  fun (_24,_23) ->
		      %% Line 2098
		      apply 'ginit_fields'/6
			  (Inits, Line, Name, _24, Vt, _23)
	      in  %% Line 2096
		  apply 'check_record'/4
		      (Line, Name, St, _27)
	  %% Line 2100
	  <{'bin',_X_Line,Fs},Vt,St> when 'true' ->
	      let <_28> = 'gexpr'/3
	      in  %% Line 2101
		  apply 'expr_bin'/4
		      (Fs, Vt, St, _28)
	  %% Line 2102
	  <{'call',_X_Line,{'atom',_X_Lr,'is_record'},[E|[{'atom',Ln,Name}|[]]]},Vt,St0> when 'true' ->
	      %% Line 2103
	      case apply 'gexpr'/3
		       (E, Vt, St0) of
		<{Rvt,St1}> when 'true' ->
		    let <_30> =
			apply %% Line 2104
			      'exist_record'/3
			    (%% Line 2104
			     Ln, %% Line 2104
				 Name, %% Line 2104
				       St1)
		    in  %% Line 2104
			{Rvt,_30}
		( <_29> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_29})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2105
	  <{'call',Line,{'atom',_X_Lr,'is_record'},_@r0 = [E|[R|[]]]},Vt,St0> when 'true' ->
	      %% Line 2106
	      case apply 'gexpr_list'/3
		       (_@r0, Vt, St0) of
		<{Asvt,St1}> when 'true' ->
		    let <_32> =
			apply %% Line 2107
			      'add_error'/3
			    (%% Line 2107
			     Line, %% Line 2107
				   'illegal_guard_expr', %% Line 2107
							 St1)
		    in  %% Line 2107
			{Asvt,_32}
		( <_31> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_31})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2108
	  <{'call',Line,{'remote',_X_Lr,{'atom',_X_Lm,'erlang'},_@r1 = {'atom',Lf,'is_record'}},_@r2 = [E|[A|[]]]},%% Line 2109
														   Vt,%% Line 2109
														      St0> when 'true' ->
	      %% Line 2110
	      apply 'gexpr'/3
		  ({'call',Line,_@r1,_@r2}, Vt, St0)
	  %% Line 2111
	  <{'call',Line,{'atom',_X_Lr,'is_record'},[E0|[{'atom',_73,_X_Name}|[{'integer',_74,_75}|[]]]]},%% Line 2112
													 Vt,%% Line 2112
													    St0> when 'true' ->
	      %% Line 2113
	      case apply 'gexpr'/3
		       (E0, Vt, St0) of
		<_@r3 = {E,St1}> when 'true' ->
		    %% Line 2114
		    case apply 'no_guard_bif_clash'/2
			     (St0, {'is_record',3}) of
		      %% Line 2115
		      <'true'> when 'true' ->
			  %% Line 2116
			  _@r3
		      %% Line 2117
		      <'false'> when 'true' ->
			  let <_34> =
			      apply %% Line 2118
				    'add_error'/3
				  (%% Line 2118
				   Line, %% Line 2118
					 {'illegal_guard_local_call',{'is_record',3}}, %% Line 2118
										       St1)
			  in  %% Line 2118
			      {E,_34}
		      ( <_35> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_35})
			-| ['compiler_generated'] )
		    end
		( <_33> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_33})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2120
	  <{'call',Line,{'atom',_X_Lr,'is_record'},Asvt0 = [_76|[_77|[_78|[]]]]},Vt,St0> when 'true' ->
	      %% Line 2121
	      case apply 'gexpr_list'/3
		       (Asvt0, Vt, St0) of
		<{Asvt,St1}> when 'true' ->
		    let <_37> =
			apply %% Line 2122
			      'add_error'/3
			    (%% Line 2122
			     Line, %% Line 2122
				   'illegal_guard_expr', %% Line 2122
							 St1)
		    in  %% Line 2122
			{Asvt,_37}
		( <_36> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_36})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2123
	  <{'call',Line,{'remote',_79,{'atom',_80,'erlang'},Isr = {'atom',_81,'is_record'}},Args = [_82|[_83|[_84|[]]]]},%% Line 2124
															 Vt,%% Line 2124
															    St0> when 'true' ->
	      %% Line 2125
	      apply 'gexpr'/3
		  ({'call',Line,Isr,Args}, Vt, St0)
	  %% Line 2126
	  <{'call',Line,{'atom',_X_La,F},As},Vt,St0> when 'true' ->
	      %% Line 2127
	      case apply 'gexpr_list'/3
		       (As, Vt, St0) of
		<_@r4 = {Asvt,St1}> when 'true' ->
		    let <A> =
			call %% Line 2128
			     'erlang':%% Line 2128
				      'length'
			    (%% Line 2128
			     As)
		    in  let <_42> =
			    case %% Line 2130
				 call 'erl_internal':'guard_bif'
				     (F, A) of
			      %% Line 2130
			      ( <( 'true'
				   -| ['compiler_generated'] )> when 'true' ->
				    apply 'no_guard_bif_clash'/2
					(St1, {F,A})
				-| ['compiler_generated'] )
			      %% Line 2130
			      ( <( 'false'
				   -| ['compiler_generated'] )> when 'true' ->
				    'false'
				-| ['compiler_generated'] )
			      %% Line 2130
			      ( <_40> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {( 'badarg'
						-| ['compiler_generated'] ),_40}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			in  %% Line 2130
			    case _42 of
			      %% Line 2131
			      <'true'> when 'true' ->
				  %% Line 2133
				  case call 'erl_internal':'bif'
					   (F, A) of
				    <'true'> when 'true' ->
					%% Line 2134
					_@r4
				    ( <_43> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_43})
				      -| ['compiler_generated'] )
				  end
			      %% Line 2135
			      <'false'> when 'true' ->
				  %% Line 2136
				  ( case St1 of
				      ( <( {'lint',_85,_86,_87,_88,_89,_90,_91,_rec94,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_50> =
						case apply 'is_local_function'/2
							 (_rec94, {F,A}) of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							'true'
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							%% Line 2137
							( case St1 of
							    ( <( {'lint',_119,_120,_121,_122,_rec95,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151}
								 -| ['compiler_generated'] )> when 'true' ->
								  apply 'is_imported_function'/2
								      (_rec95, {F,A})
							      -| ['compiler_generated'] )
							    ( <_152> when 'true' ->
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'error'
													 -| ['compiler_generated'] )
									(( {'badrecord','lint'}
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <_44> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {( 'badarg'
								    -| ['compiler_generated'] ),_44}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					    in  case _50 of
						  %% Line 2138
						  <'true'> when 'true' ->
						      let <_51> =
							  apply %% Line 2139
								'add_error'/3
							      (%% Line 2139
							       Line, %% Line 2139
								     {'illegal_guard_local_call',{F,A}}, %% Line 2139
													 St1)
						      in  %% Line 2139
							  {Asvt,_51}
						  %% Line 2140
						  <_153> when 'true' ->
						      let <_52> =
							  apply %% Line 2141
								'add_error'/3
							      (%% Line 2141
							       Line, %% Line 2141
								     'illegal_guard_expr', %% Line 2141
											   St1)
						      in  %% Line 2141
							  {Asvt,_52}
						end
					-| ['compiler_generated'] )
				      ( <_118> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','lint'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      ( <_54> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_54})
				-| ['compiler_generated'] )
			    end
		( <_38> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_38})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2144
	  <{'call',Line,{'remote',_X_Lr,{'atom',_X_Lm,'erlang'},{'atom',_X_Lf,F}},As},Vt,St0> when 'true' ->
	      %% Line 2145
	      case apply 'gexpr_list'/3
		       (As, Vt, St0) of
		<_@r5 = {Asvt,St1}> when 'true' ->
		    let <A> =
			call %% Line 2146
			     'erlang':%% Line 2146
				      'length'
			    (%% Line 2146
			     As)
		    in  let <_59> =
			    case %% Line 2147
				 call 'erl_internal':'guard_bif'
				     (F, A) of
			      %% Line 2147
			      ( <( 'true'
				   -| ['compiler_generated'] )> when 'true' ->
				    'true'
				-| ['compiler_generated'] )
			      %% Line 2147
			      ( <( 'false'
				   -| ['compiler_generated'] )> when 'true' ->
				    apply 'is_gexpr_op'/2
					(F, A)
				-| ['compiler_generated'] )
			      %% Line 2147
			      ( <_57> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {( 'badarg'
						-| ['compiler_generated'] ),_57}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			in  %% Line 2147
			    case _59 of
			      %% Line 2148
			      <'true'> when 'true' ->
				  _@r5
			      %% Line 2149
			      <'false'> when 'true' ->
				  let <_60> =
				      apply 'add_error'/3
					  (Line, 'illegal_guard_expr', St1)
				  in  {Asvt,_60}
			      ( <_61> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_61})
				-| ['compiler_generated'] )
			    end
		( <_55> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_55})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2151
	  <{'op',Line,Op,A},Vt,St0> when 'true' ->
	      %% Line 2152
	      case apply 'gexpr'/3
		       (A, Vt, St0) of
		<_@r6 = {Avt,St1}> when 'true' ->
		    %% Line 2153
		    case apply 'is_gexpr_op'/2
			     (Op, 1) of
		      %% Line 2154
		      <'true'> when 'true' ->
			  _@r6
		      %% Line 2155
		      <'false'> when 'true' ->
			  let <_63> =
			      apply 'add_error'/3
				  (Line, 'illegal_guard_expr', St1)
			  in  {Avt,_63}
		      ( <_64> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_64})
			-| ['compiler_generated'] )
		    end
		( <_62> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_62})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2157
	  <{'op',_154,'andalso',L,R},Vt,St> when 'true' ->
	      %% Line 2158
	      apply 'gexpr_list'/3
		  ([L|[R|[]]], Vt, St)
	  %% Line 2159
	  <{'op',_155,'orelse',L,R},Vt,St> when 'true' ->
	      %% Line 2160
	      apply 'gexpr_list'/3
		  ([L|[R|[]]], Vt, St)
	  %% Line 2161
	  <{'op',Line,Op,L,R},Vt,St0> when 'true' ->
	      %% Line 2162
	      case apply 'gexpr_list'/3
		       ([L|[R|[]]], Vt, St0) of
		<_@r7 = {Avt,St1}> when 'true' ->
		    %% Line 2163
		    case apply 'is_gexpr_op'/2
			     (Op, 2) of
		      %% Line 2164
		      <'true'> when 'true' ->
			  _@r7
		      %% Line 2165
		      <'false'> when 'true' ->
			  let <_66> =
			      apply 'add_error'/3
				  (Line, 'illegal_guard_expr', St1)
			  in  {Avt,_66}
		      ( <_67> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_67})
			-| ['compiler_generated'] )
		    end
		( <_65> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_65})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2169
	  <E,_X_Vt,St> when 'true' ->
	      let <_68> =
		  call %% Line 2170
		       'erlang':%% Line 2170
				'element'
		      (%% Line 2170
		       2, %% Line 2170
			  E)
	      in  let <_69> =
		      apply %% Line 2170
			    'add_error'/3
			  (_68, %% Line 2170
				'illegal_guard_expr', %% Line 2170
						      St)
		  in  %% Line 2170
		      {[],_69}
	end
'gexpr_list'/3 =
    %% Line 2175
    fun (_0,_1,_2) ->
	let <_9> =
	    fun (_6,_5) ->
		%% Line 2176
		case <_6,_5> of
		  <E,{Esvt,St0}> when 'true' ->
		      %% Line 2177
		      case apply 'gexpr'/3
			       (E, _1, St0) of
			<{Evt,St1}> when 'true' ->
			    let <_4> =
				apply %% Line 2178
				      'vtmerge'/2
				    (%% Line 2178
				     Evt, %% Line 2178
					  Esvt)
			    in  %% Line 2178
				{_4,St1}
			( <_3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_3})
			  -| ['compiler_generated'] )
		      end
		  ( <_8,_7> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_8,_7})
			  -| [{'function_name',{'-gexpr_list/3-fun-0-',2}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 2176
	    call 'lists':'foldl'
		(_9, %% Line 2179
		     {[],_2}, _0)
'is_guard_test'/1 =
    %% Line 2190
    fun (_0) ->
	let <_4> =
	    call %% Line 2191
		 'maps':%% Line 2191
			'new'
		()
	in  let <_3> =
		fun (_1) ->
		    %% Line 2191
		    'false'
	    in  %% Line 2191
		apply 'is_guard_test2'/2
		    (_0, {_4,_3})
'is_guard_test'/2 =
    %% Line 2194
    fun (_0,_1) ->
	let <_4> =
	    fun (_2) ->
		%% Line 2195
		'false'
	in  %% Line 2195
	    apply 'is_guard_test'/3
		(_0, _1, _4)
'is_guard_test'/3 =
    %% Line 2213
    fun (_0,_1,_2) ->
	let <_7> =
	    letrec
		'lc$^0'/1 =
		    %% Line 2214
		    fun (_5) ->
			case _5 of
			  <[A = {'attribute',_23,'record',_X_D}|_4]> when 'true' ->
			      let <_6> =
				  apply 'lc$^0'/1
				      (_4)
			      in  ( [A|_6]
				    -| ['compiler_generated'] )
			  ( <[_3|_4]> when 'true' ->
				apply 'lc$^0'/1
				    (_4)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_58> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_58})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 2214
		apply 'lc$^0'/1
		    (_1)
	in  let <_15> =
		fun (_12,_11) ->
		    let <Attr> =
			apply %% Line 2216
			      'set_file'/2
			    (_12, %% Line 2216
				  [110|[111|[110|[101]]]])
		    in  %% Line 2217
			apply 'attribute_state'/2
			    (Attr, _11)
	    in  let <_9> =
		    apply %% Line 2218
			  'start'/0
			()
		in  let <St0> =
			call %% Line 2215
			     'lists':%% Line 2215
				     'foldl'
			    (_15, _9, _7)
		    in  let <_19> =
			    apply %% Line 2219
				  'set_file'/2
				(_0, %% Line 2219
				     [110|[111|[102|[105|[108|[101]]]]]])
			in  %% Line 2220
			    ( case St0 of
				( <( {'lint',_24,_25,_26,_27,_28,_29,_rec96,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56}
				     -| ['compiler_generated'] )> when 'true' ->
				      apply 'is_guard_test2'/2
					  (_19, {_rec96,_2})
				  -| ['compiler_generated'] )
				( <_57> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','lint'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
'is_guard_test2'/2 =
    %% Line 2223
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'call',Line,{'atom',Lr,'record'},_@r0 = [E|[A|[]]]},Info> when 'true' ->
	      %% Line 2224
	      apply 'is_gexpr'/2
		  ({'call',Line,{'atom',Lr,'is_record'},_@r0}, Info)
	  %% Line 2225
	  <Call = {'call',_X_Line,{'atom',_X_La,Test},As},Info = {_9,IsOverridden}> when 'true' ->
	      let <A> =
		  call %% Line 2226
		       'erlang':%% Line 2226
				'length'
		      (%% Line 2226
		       As)
	      in  %% Line 2227
		  ( case apply IsOverridden
			     ({Test,A}) of
		      ( <'false'> when 'true' ->
			    %% Line 2228
			    case call 'erl_internal':'type_test'
				     (Test, A) of
			      %% Line 2229
			      <'true'> when 'true' ->
				  apply 'is_gexpr_list'/2
				      (As, Info)
			      %% Line 2230
			      <'false'> when 'true' ->
				  apply 'is_gexpr'/2
				      (Call, Info)
			      ( <_5> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_5})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <'true'> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		      ( <_cor_variable> when 'true' ->
			    call 'erlang':'error'
				('badarg')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 2232
	  <G,Info> when 'true' ->
	      %% Line 2234
	      apply 'is_gexpr'/2
		  (G, Info)
	end
'is_guard_expr'/1 =
    %% Line 2239
    fun (_0) ->
	let <_3> =
	    fun (_1) ->
		case _1 of
		  <{_5,_6}> when 'true' ->
		      'false'
		  ( <_2> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_2})
			  -| [{'function_name',{'-is_guard_expr/1-fun-0-',1}}] )
		    -| ['compiler_generated'] )
		end
	in  apply 'is_gexpr'/2
		(_0, {[],_3})
'is_gexpr'/2 =
    %% Line 2241
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'var',_X_L,_X_V},_X_Info> when 'true' ->
	      'true'
	  %% Line 2242
	  <{'char',_X_L,_X_C},_X_Info> when 'true' ->
	      'true'
	  %% Line 2243
	  <{'integer',_X_L,_X_I},_X_Info> when 'true' ->
	      'true'
	  %% Line 2244
	  <{'float',_X_L,_X_F},_X_Info> when 'true' ->
	      'true'
	  %% Line 2245
	  <{'atom',_X_L,_X_A},_X_Info> when 'true' ->
	      'true'
	  %% Line 2246
	  <{'string',_X_L,_X_S},_X_Info> when 'true' ->
	      'true'
	  %% Line 2247
	  <{'nil',_X_L},_X_Info> when 'true' ->
	      'true'
	  %% Line 2248
	  <{'cons',_X_L,H,T},Info> when 'true' ->
	      apply 'is_gexpr_list'/2
		  ([H|[T|[]]], Info)
	  %% Line 2249
	  <{'tuple',_X_L,Es},Info> when 'true' ->
	      apply 'is_gexpr_list'/2
		  (Es, Info)
	  %% Line 2252
	  <{'map',_X_L,Es},Info> when 'true' ->
	      %% Line 2253
	      apply 'is_map_fields'/2
		  (Es, Info)
	  %% Line 2254
	  <{'map',_X_L,Src,Es},Info> when 'true' ->
	      %% Line 2255
	      ( case apply 'is_gexpr'/2
			 (Src, Info) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'is_map_fields'/2
			    (Es, Info)
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_2> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_2}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 2256
	  <{'record_index',_X_L,_X_Name,Field},Info> when 'true' ->
	      %% Line 2257
	      apply 'is_gexpr'/2
		  (Field, Info)
	  %% Line 2258
	  <{'record_field',_X_L,Rec,_X_Name,Field},Info> when 'true' ->
	      %% Line 2259
	      apply 'is_gexpr_list'/2
		  ([Rec|[Field|[]]], Info)
	  %% Line 2260
	  <{'record',L,Name,Inits},Info> when 'true' ->
	      %% Line 2261
	      apply 'is_gexpr_fields'/4
		  (Inits, L, Name, Info)
	  %% Line 2262
	  <{'bin',_X_L,Fs},Info> when 'true' ->
	      let <_10> =
		  fun (_8) ->
		      %% Line 2263
		      case _8 of
			<{'bin_element',_X_Line,E,Sz,_X_Ts}> when 'true' ->
			    let <_7> =
				apply %% Line 2264
				      'is_gexpr'/2
				    (%% Line 2264
				     E, %% Line 2264
					Info)
			    in  let <_6> =
				    case <> of
				      %% Line 2264
				      ( <>
					    when call 'erlang':'=:='
						  (Sz,
						   'default') ->
					    'true'
					-| ['compiler_generated'] )
				      %% Line 2264
				      ( <> when 'true' ->
					    apply 'is_gexpr'/2
						(Sz, Info)
					-| ['compiler_generated'] )
				    end
				in  %% Line 2264
				    call 'erlang':'and'
					(_7, _6)
			( <_9> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_9})
				-| [{'function_name',{'-is_gexpr/2-fun-0-',1}}] )
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 2263
		  call 'lists':'all'
		      (_10, %% Line 2265
			    Fs)
	  %% Line 2266
	  <{'call',_X_L,{'atom',_X_Lf,F},As},Info = {_29,IsOverridden}> when 'true' ->
	      let <A> =
		  call %% Line 2267
		       'erlang':%% Line 2267
				'length'
		      (%% Line 2267
		       As)
	      in  %% Line 2268
		  ( case apply IsOverridden
			     ({F,A}) of
		      ( <'false'> when 'true' ->
			    %% Line 2269
			    ( case call 'erl_internal':'guard_bif'
				       (F, A) of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      apply 'is_gexpr_list'/2
					  (As, Info)
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
				( <_14> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),_14}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <'true'> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		      ( <_cor_variable> when 'true' ->
			    call 'erlang':'error'
				('badarg')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 2270
	  <{'call',_X_L,{'remote',_X_Lr,{'atom',_X_Lm,'erlang'},{'atom',_X_Lf,F}},As},Info> when 'true' ->
	      let <A> =
		  call %% Line 2271
		       'erlang':%% Line 2271
				'length'
		      (%% Line 2271
		       As)
	      in  let <_21> =
		      case %% Line 2272
			   call 'erl_internal':'guard_bif'
			       (F, A) of
			%% Line 2272
			( <( 'true'
			     -| ['compiler_generated'] )> when 'true' ->
			      'true'
			  -| ['compiler_generated'] )
			%% Line 2272
			( <( 'false'
			     -| ['compiler_generated'] )> when 'true' ->
			      apply 'is_gexpr_op'/2
				  (F, A)
			  -| ['compiler_generated'] )
			%% Line 2272
			( <_19> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {( 'badarg'
					  -| ['compiler_generated'] ),_19}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 2273
		      ( case _21 of
			  ( <( 'true'
			       -| ['compiler_generated'] )> when 'true' ->
				apply 'is_gexpr_list'/2
				    (As, Info)
			    -| ['compiler_generated'] )
			  ( <( 'false'
			       -| ['compiler_generated'] )> when 'true' ->
				'false'
			    -| ['compiler_generated'] )
			  ( <_18> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {( 'badarg'
					    -| ['compiler_generated'] ),_18}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 2274
	  <{'call',L,{'tuple',Lt,[_@r0 = {'atom',Lm,'erlang'}|[_@r1 = {'atom',Lf,F}|[]]]},As},Info> when 'true' ->
	      %% Line 2275
	      apply 'is_gexpr'/2
		  ({'call',L,{'remote',Lt,_@r0,_@r1},As}, Info)
	  %% Line 2276
	  <{'op',_X_L,Op,A},Info> when 'true' ->
	      %% Line 2277
	      ( case apply 'is_gexpr_op'/2
			 (Op, 1) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'is_gexpr'/2
			    (A, Info)
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_23> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_23}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 2278
	  <{'op',_X_L,'andalso',A1,A2},Info> when 'true' ->
	      %% Line 2279
	      apply 'is_gexpr_list'/2
		  ([A1|[A2|[]]], Info)
	  %% Line 2280
	  <{'op',_X_L,'orelse',A1,A2},Info> when 'true' ->
	      %% Line 2281
	      apply 'is_gexpr_list'/2
		  ([A1|[A2|[]]], Info)
	  %% Line 2282
	  <{'op',_X_L,Op,A1,A2},Info> when 'true' ->
	      %% Line 2283
	      ( case apply 'is_gexpr_op'/2
			 (Op, 2) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'is_gexpr_list'/2
			    ([A1|[A2|[]]], Info)
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_25> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_25}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 2284
	  <_X_Other,_X_Info> when 'true' ->
	      'false'
	end
'is_gexpr_op'/2 =
    %% Line 2286
    fun (_0,_1) ->
	%% Line 2287
	try
	    call 'erl_internal':'op_type'
		(_0, _1)
	of <_2> ->
	    case _2 of
	      %% Line 2288
	      <'arith'> when 'true' ->
		  'true'
	      %% Line 2289
	      <'bool'> when 'true' ->
		  'true'
	      %% Line 2290
	      <'comp'> when 'true' ->
		  'true'
	      %% Line 2291
	      <'list'> when 'true' ->
		  'false'
	      %% Line 2292
	      <'send'> when 'true' ->
		  'false'
	      ( <_3> when 'true' ->
		    primop 'match_fail'
			({'try_clause',_3})
		-| ['compiler_generated'] )
	    end
	catch <_6,_5,_4> ->
	    %% Line 2293
	    'false'
'is_gexpr_list'/2 =
    %% Line 2296
    fun (_0,_1) ->
	let <_4> =
	    fun (_2) ->
		apply 'is_gexpr'/2
		    (_2, _1)
	in  call 'lists':'all'
		(_4, _0)
'is_map_fields'/2 =
    %% Line 2298
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{Tag,_10,K,V}|Fs],Info>
	      when let <_2> =
		    call 'erlang':'=:='
			(Tag, 'map_field_assoc')
		in  let <_3> =
			call %% Line 2299
			     'erlang':%% Line 2299
				      '=:='
			    (%% Line 2299
			     Tag, %% Line 2299
				  'map_field_exact')
		    in  call 'erlang':'or'
			    (_2, _3) ->
	      %% Line 2300
	      ( case apply 'is_gexpr'/2
			 (K, Info) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 2301
			( case apply 'is_gexpr'/2
				   (V, Info) of
			    ( <( 'true'
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 2302
				  apply 'is_map_fields'/2
				      (Fs, Info)
			      -| ['compiler_generated'] )
			    ( <( 'false'
				 -| ['compiler_generated'] )> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			    ( <_5> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {( 'badarg'
					      -| ['compiler_generated'] ),_5}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_4> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_4}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 2303
	  <[],_X_Info> when 'true' ->
	      'true'
	  %% Line 2304
	  <_X_T,_X_Info> when 'true' ->
	      'false'
	end
'is_gexpr_fields'/4 =
    %% Line 2306
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Fs,L,Name,Info = {RDs,_15}> when 'true' ->
	      let <_6> =
		  case %% Line 2307
		       call 'maps':'find'
			   (Name, RDs) of
		    %% Line 2308
		    <{'ok',{_X_Line,Fields}}> when 'true' ->
			let <_4> =
			    apply 'init_fields'/3
				(Fs, L, Fields)
			in  call 'erlang':'++'
				(Fs, _4)
		    %% Line 2309
		    <'error'> when 'true' ->
			Fs
		    ( <_5> when 'true' ->
			  %% Line 2307
			  primop 'match_fail'
			      ({'case_clause',_5})
		      -| ['compiler_generated'] )
		  end
	      in  let <_10> =
		      fun (_8) ->
			  %% Line 2311
			  case _8 of
			    <{'record_field',_X_Lf,_X_Name,V}> when 'true' ->
				apply 'is_gexpr'/2
				    (V, Info)
			    %% Line 2312
			    <_X_Other> when 'true' ->
				'false'
			  end
		  in  %% Line 2311
		      call 'lists':'all'
			  (_10, _6)
	  ( <_14,_13,_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13,_12,_11})
		  -| [{'function_name',{'is_gexpr_fields',4}}] )
	    -| ['compiler_generated'] )
	end
'exprs'/3 =
    %% Line 2318
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[E|Es],Vt,St0> when 'true' ->
	      %% Line 2319
	      case apply 'expr'/3
		       (E, Vt, St0) of
		<{Evt,St1}> when 'true' ->
		    let <_4> =
			apply %% Line 2320
			      'vtupdate'/2
			    (%% Line 2320
			     Evt, %% Line 2320
				  Vt)
		    in  %% Line 2320
			case apply 'exprs'/3
				 (Es, _4, St1) of
			  <{Esvt,St2}> when 'true' ->
			      let <_6> =
				  apply %% Line 2321
					'vtupdate'/2
				      (%% Line 2321
				       Evt, %% Line 2321
					    Esvt)
			      in  %% Line 2321
				  {_6,St2}
			  ( <_5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_5})
			    -| ['compiler_generated'] )
			end
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2322
	  <[],_X_Vt,St> when 'true' ->
	      {[],St}
	  ( <_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7})
		  -| [{'function_name',{'exprs',3}}] )
	    -| ['compiler_generated'] )
	end
'expr'/3 =
    %% Line 2330
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{'var',Line,V},Vt,St> when 'true' ->
	      %% Line 2331
	      apply 'expr_var'/4
		  (V, Line, Vt, St)
	  %% Line 2332
	  <{'char',_X_Line,_X_C},_X_Vt,St> when 'true' ->
	      {[],St}
	  %% Line 2333
	  <{'integer',_X_Line,_X_I},_X_Vt,St> when 'true' ->
	      {[],St}
	  %% Line 2334
	  <{'float',_X_Line,_X_F},_X_Vt,St> when 'true' ->
	      {[],St}
	  %% Line 2335
	  <{'atom',Line,A},_X_Vt,St> when 'true' ->
	      let <_3> =
		  apply %% Line 2336
			'keyword_warning'/3
		      (%% Line 2336
		       Line, %% Line 2336
			     A, %% Line 2336
				St)
	      in  %% Line 2336
		  {[],_3}
	  %% Line 2337
	  <{'string',_X_Line,_X_S},_X_Vt,St> when 'true' ->
	      {[],St}
	  %% Line 2338
	  <{'nil',_X_Line},_X_Vt,St> when 'true' ->
	      {[],St}
	  %% Line 2339
	  <{'cons',_X_Line,H,T},Vt,St> when 'true' ->
	      %% Line 2340
	      apply 'expr_list'/3
		  ([H|[T|[]]], Vt, St)
	  %% Line 2341
	  <{'lc',_X_Line,E,Qs},Vt,St> when 'true' ->
	      %% Line 2342
	      apply 'handle_comprehension'/4
		  (E, Qs, Vt, St)
	  %% Line 2343
	  <{'bc',_X_Line,E,Qs},Vt,St> when 'true' ->
	      %% Line 2344
	      apply 'handle_comprehension'/4
		  (E, Qs, Vt, St)
	  %% Line 2345
	  <{'tuple',_X_Line,Es},Vt,St> when 'true' ->
	      %% Line 2346
	      apply 'expr_list'/3
		  (Es, Vt, St)
	  %% Line 2347
	  <{'map',_X_Line,Es},Vt,St> when 'true' ->
	      let <_5> =
		  apply %% Line 2348
			'check_assoc_fields'/2
		      (%% Line 2348
		       Es, %% Line 2348
			   St)
	      in  let <_4> = 'expr_list'/3
		  in  %% Line 2348
		      apply 'map_fields'/4
			  (Es, Vt, _5, _4)
	  %% Line 2349
	  <{'map',_X_Line,Src,Es},Vt,St> when 'true' ->
	      %% Line 2350
	      case apply 'expr'/3
		       (Src, Vt, St) of
		<{Svt,St1}> when 'true' ->
		    let <_7> = 'expr_list'/3
		    in  %% Line 2351
			case apply 'map_fields'/4
				 (Es, Vt, St1, _7) of
			  <{Fvt,St2}> when 'true' ->
			      let <_9> =
				  apply %% Line 2352
					'vtupdate'/2
				      (%% Line 2352
				       Svt, %% Line 2352
					    Fvt)
			      in  %% Line 2352
				  {_9,St2}
			  ( <_8> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_8})
			    -| ['compiler_generated'] )
			end
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2353
	  <{'record_index',Line,Name,Field},_X_Vt,St> when 'true' ->
	      let <_14> =
		  fun (_11,_10) ->
		      %% Line 2355
		      apply 'record_field'/4
			  (Field, Name, _11, _10)
	      in  %% Line 2354
		  apply 'check_record'/4
		      (Line, Name, St, _14)
	  %% Line 2356
	  <{'record',Line,Name,Inits},Vt,St> when 'true' ->
	      let <_19> =
		  fun (_16,_15) ->
		      %% Line 2359
		      apply 'init_fields'/6
			  (Inits, Line, Name, _16, Vt, _15)
	      in  %% Line 2357
		  apply 'check_record'/4
		      (Line, Name, St, _19)
	  %% Line 2361
	  <{'record_field',Line,Rec,Name,Field},Vt,St0> when 'true' ->
	      %% Line 2362
	      case apply 'record_expr'/4
		       (Line, Rec, Vt, St0) of
		<{Rvt,St1}> when 'true' ->
		    let <_25> =
			fun (_22,_21) ->
			    %% Line 2365
			    apply 'record_field'/4
				(Field, Name, _22, _21)
		    in  %% Line 2363
			case apply 'check_record'/4
				 (Line, Name, St1, _25) of
			  <{Fvt,St2}> when 'true' ->
			      let <_27> =
				  apply %% Line 2367
					'vtmerge'/2
				      (%% Line 2367
				       Rvt, %% Line 2367
					    Fvt)
			      in  %% Line 2367
				  {_27,St2}
			  ( <_26> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_26})
			    -| ['compiler_generated'] )
			end
		( <_20> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_20})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2368
	  <{'record',Line,Rec,Name,Upds},Vt,St0> when 'true' ->
	      %% Line 2369
	      case apply 'record_expr'/4
		       (Line, Rec, Vt, St0) of
		<{Rvt,St1}> when 'true' ->
		    let <_33> =
			fun (_30,_29) ->
			    %% Line 2372
			    apply 'update_fields'/5
				(Upds, Name, _30, Vt, _29)
		    in  %% Line 2370
			case apply 'check_record'/4
				 (Line, Name, St1, _33) of
			  <{Usvt,St2}> when 'true' ->
			      %% Line 2374
			      case apply 'has_wildcard_field'/1
				       (Upds) of
				%% Line 2375
				<'true'> when 'true' ->
				    let <_35> =
					apply 'add_error'/3
					    (Line, {'wildcard_in_update',Name}, St2)
				    in  {[],_35}
				%% Line 2376
				<'false'> when 'true' ->
				    let <_36> =
					apply 'vtmerge'/2
					    (Rvt, Usvt)
				    in  {_36,St2}
				( <_37> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_37})
				  -| ['compiler_generated'] )
			      end
			  ( <_34> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_34})
			    -| ['compiler_generated'] )
			end
		( <_28> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_28})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2378
	  <{'bin',_X_Line,Fs},Vt,St> when 'true' ->
	      let <_38> = 'expr'/3
	      in  %% Line 2379
		  apply 'expr_bin'/4
		      (Fs, Vt, St, _38)
	  %% Line 2380
	  <{'block',_X_Line,Es},Vt,St> when 'true' ->
	      %% Line 2382
	      apply 'exprs'/3
		  (Es, Vt, St)
	  %% Line 2383
	  <{'if',Line,Cs},Vt,St> when 'true' ->
	      %% Line 2384
	      apply 'icrt_clauses'/4
		  (Cs, {'if',Line}, Vt, St)
	  %% Line 2385
	  <{'case',Line,E,Cs},Vt,St0> when 'true' ->
	      %% Line 2386
	      case apply 'expr'/3
		       (E, Vt, St0) of
		<{Evt,St1}> when 'true' ->
		    let <_40> =
			apply %% Line 2387
			      'vtupdate'/2
			    (%% Line 2387
			     Evt, %% Line 2387
				  Vt)
		    in  %% Line 2387
			case apply 'icrt_clauses'/4
				 (Cs, {'case',Line}, _40, St1) of
			  <{Cvt,St2}> when 'true' ->
			      let <_42> =
				  apply %% Line 2388
					'vtmerge'/2
				      (%% Line 2388
				       Evt, %% Line 2388
					    Cvt)
			      in  %% Line 2388
				  {_42,St2}
			  ( <_41> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_41})
			    -| ['compiler_generated'] )
			end
		( <_39> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_39})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2389
	  <{'receive',Line,Cs},Vt,St> when 'true' ->
	      %% Line 2390
	      apply 'icrt_clauses'/4
		  (Cs, {'receive',Line}, Vt, St)
	  %% Line 2391
	  <{'receive',Line,Cs,To,ToEs},Vt,St0> when 'true' ->
	      %% Line 2393
	      case apply 'expr'/3
		       (To, Vt, St0) of
		<{Tvt,St1}> when 'true' ->
		    %% Line 2394
		    case apply 'exprs'/3
			     (ToEs, Vt, St1) of
		      <{Tevt,St2}> when 'true' ->
			  %% Line 2395
			  case apply 'icrt_clauses'/3
				   (Cs, Vt, St2) of
			    <{Cvt,St3}> when 'true' ->
				let <Csvts> =
				    [%% Line 2397
				     Tevt|%% Line 2397
					  Cvt]
				in  let <Rvt> =
					apply %% Line 2398
					      'icrt_export'/4
					    (%% Line 2398
					     Csvts, %% Line 2398
						    Vt, %% Line 2398
							{'receive',Line}, %% Line 2398
									  St3)
				    in  let <_48> =
					    apply %% Line 2399
						  'vtmerge'/1
						(%% Line 2399
						 [Tvt|[Tevt|[Rvt|[]]]])
					in  %% Line 2399
					    {_48,St3}
			    ( <_45> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_45})
			      -| ['compiler_generated'] )
			  end
		      ( <_44> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_44})
			-| ['compiler_generated'] )
		    end
		( <_43> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_43})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2400
	  <{'fun',Line,Body},Vt,St> when 'true' ->
	      %% Line 2402
	      case Body of
		%% Line 2403
		<{'clauses',Cs}> when 'true' ->
		    %% Line 2404
		    apply 'fun_clauses'/3
			(Cs, Vt, St)
		%% Line 2405
		<{'function','record_info',2}> when 'true' ->
		    let <_49> =
			apply %% Line 2407
			      'add_error'/3
			    (%% Line 2407
			     Line, %% Line 2407
				   'illegal_record_info', %% Line 2407
							  St)
		    in  %% Line 2407
			{[],_49}
		%% Line 2408
		<{'function',F,A}> when 'true' ->
		    %% Line 2411
		    ( case St of
			( <( {'lint',_177,_178,_179,_180,_181,_182,_183,_rec97,_184,_185,_186,_187,_188,_189,_190,_191,_192,_193,_194,_195,_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208,_209}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_53> =
				  apply 'is_local_function'/2
				      (_rec97, {F,A})
			      in  let <_60> =
				      case _53 of
					( <'false'> when 'true' ->
					      %% Line 2412
					      ( case call 'erl_internal':'bif'
							 (F, A) of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							%% Line 2413
							( case St of
							    ( <( {'lint',_211,_212,_213,_214,_215,_216,_217,_218,_rec98,_219,_220,_221,_222,_223,_224,_225,_226,_227,_228,_229,_230,_231,_232,_233,_234,_235,_236,_237,_238,_239,_240,_241,_242,_243}
								 -| ['compiler_generated'] )> when 'true' ->
								  let <_57> =
								      apply 'is_autoimport_suppressed'/2
									  (_rec98, {F,A})
								  in  call 'erlang':'not'
									  (_57)
							      -| ['compiler_generated'] )
							    ( <_244> when 'true' ->
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'error'
													 -| ['compiler_generated'] )
									(( {'badrecord','lint'}
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							'false'
						    -| ['compiler_generated'] )
						  ( <_54> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {( 'badarg'
								    -| ['compiler_generated'] ),_54}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					( <'true'> when 'true' ->
					      'false'
					  -| ['compiler_generated'] )
					( <_cor_variable> when 'true' ->
					      call 'erlang':'error'
						  ('badarg')
					  -| ['compiler_generated'] )
				      end
				  in  case _60 of
					%% Line 2414
					<'true'> when 'true' ->
					    {[],St}
					%% Line 2415
					<'false'> when 'true' ->
					    let <_61> =
						apply 'call_function'/4
						    (Line, F, A, St)
					    in  {[],_61}
					( <_62> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_62})
					  -| ['compiler_generated'] )
				      end
			  -| ['compiler_generated'] )
			( <_210> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','lint'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2417
		<{'function',M,F,A}>
		    when try
			  let <_63> =
			      call 'erlang':'is_atom'
				  (M)
			  in  let <_64> =
				  call 'erlang':'is_atom'
				      (F)
			      in  let <_65> =
				      call 'erlang':'is_integer'
					  (A)
				  in  let <_66> =
					  call 'erlang':'and'
					      (_64, _65)
				      in  call 'erlang':'and'
					      (_63, _66)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 2419
		    {[],St}
		%% Line 2420
		<{'function',M,F,A}> when 'true' ->
		    %% Line 2422
		    apply 'expr_list'/3
			([M|[F|[A|[]]]], Vt, St)
		( <_67> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_67})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2424
	  <{'named_fun',_245,'_',Cs},Vt,St> when 'true' ->
	      %% Line 2425
	      apply 'fun_clauses'/3
		  (Cs, Vt, St)
	  %% Line 2426
	  <{'named_fun',Line,Name,Cs},Vt,St0> when 'true' ->
	      let <Nvt0> =
		  [%% Line 2427
		   {Name,{'bound','unused',[Line|[]]}}|%% Line 2427
						       []]
	      in  let <St1> =
		      apply %% Line 2428
			    'shadow_vars'/4
			  (%% Line 2428
			   Nvt0, %% Line 2428
				 Vt, %% Line 2428
				     'named fun', %% Line 2428
						  St0)
		  in  let <_70> =
			  apply %% Line 2429
				'vtsubtract'/2
			      (%% Line 2429
			       Vt, %% Line 2429
				   Nvt0)
		      in  let <Nvt1> =
			      apply %% Line 2429
				    'vtupdate'/2
				  (_70, %% Line 2429
					Nvt0)
			  in  %% Line 2430
			      case apply 'fun_clauses'/3
				       (Cs, Nvt1, St1) of
				<{Csvt,St2}> when 'true' ->
				    let <_73> =
					apply %% Line 2431
					      'vtupdate'/2
					    (%% Line 2431
					     Csvt, %% Line 2431
						   Nvt0)
				    in  %% Line 2431
					case apply 'check_unused_vars'/3
						 (_73, [], St2) of
					  <{_246,St3}> when 'true' ->
					      let <_75> =
						  apply %% Line 2432
							'vtold'/2
						      (%% Line 2432
						       Csvt, %% Line 2432
							     Vt)
					      in  %% Line 2432
						  {_75,St3}
					  ( <_74> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_74})
					    -| ['compiler_generated'] )
					end
				( <_72> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_72})
				  -| ['compiler_generated'] )
			      end
	  %% Line 2433
	  <{'call',_X_Line,{'atom',_X_Lr,'is_record'},[E|[{'atom',Ln,Name}|[]]]},Vt,St0> when 'true' ->
	      %% Line 2434
	      case apply 'expr'/3
		       (E, Vt, St0) of
		<{Rvt,St1}> when 'true' ->
		    let <_77> =
			apply %% Line 2435
			      'exist_record'/3
			    (%% Line 2435
			     Ln, %% Line 2435
				 Name, %% Line 2435
				       St1)
		    in  %% Line 2435
			{Rvt,_77}
		( <_76> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_76})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2436
	  <{'call',Line,{'remote',_X_Lr,{'atom',_X_Lm,'erlang'},_@r0 = {'atom',Lf,'is_record'}},_@r1 = [E|[A|[]]]},%% Line 2437
														   Vt,%% Line 2437
														      St0> when 'true' ->
	      %% Line 2438
	      apply 'expr'/3
		  ({'call',Line,_@r0,_@r1}, Vt, St0)
	  %% Line 2439
	  <{'call',L,{'tuple',Lt,[_@r2 = {'atom',Lm,'erlang'}|[_@r3 = {'atom',Lf,'is_record'}|[]]]},As},Vt,St> when 'true' ->
	      %% Line 2440
	      apply 'expr'/3
		  ({'call',L,{'remote',Lt,_@r2,_@r3},As}, Vt, St)
	  %% Line 2441
	  <{'call',Line,{'remote',_X_Lr,{'atom',_X_Lm,M},{'atom',Lf,F}},As},Vt,St0> when 'true' ->
	      let <St1> =
		  apply %% Line 2442
			'keyword_warning'/3
		      (%% Line 2442
		       Lf, %% Line 2442
			   F, %% Line 2442
			      St0)
	      in  let <St2> =
		      apply %% Line 2443
			    'check_remote_function'/5
			  (%% Line 2443
			   Line, %% Line 2443
				 M, %% Line 2443
				    F, %% Line 2443
				       As, %% Line 2443
					   St1)
		  in  let <St3> =
			  apply %% Line 2444
				'check_module_name'/3
			      (%% Line 2444
			       M, %% Line 2444
				  Line, %% Line 2444
					St2)
		      in  %% Line 2445
			  apply 'expr_list'/3
			      (As, Vt, St3)
	  %% Line 2446
	  <{'call',Line,{'remote',_X_Lr,M,F},As},Vt,St0> when 'true' ->
	      let <St1> =
		  apply %% Line 2447
			'keyword_warning'/3
		      (%% Line 2447
		       Line, %% Line 2447
			     M, %% Line 2447
				St0)
	      in  let <St2> =
		      apply %% Line 2448
			    'keyword_warning'/3
			  (%% Line 2448
			   Line, %% Line 2448
				 F, %% Line 2448
				    St1)
		  in  let <_84> =
			  case %% Line 2449
			       M of
			    %% Line 2450
			    <{'atom',Lm,Mod}> when 'true' ->
				%% Line 2451
				apply 'check_module_name'/3
				    (Mod, Lm, St2)
			    %% Line 2452
			    <_247> when 'true' ->
				%% Line 2453
				St2
			  end
		      in  %% Line 2455
			  apply 'expr_list'/3
			      ([M|[F|As]], Vt, _84)
	  %% Line 2456
	  <{'call',Line,{'atom',La,F},As},Vt,St0> when 'true' ->
	      let <St1> =
		  apply %% Line 2457
			'keyword_warning'/3
		      (%% Line 2457
		       La, %% Line 2457
			   F, %% Line 2457
			      St0)
	      in  %% Line 2458
		  case apply 'expr_list'/3
			   (As, Vt, St1) of
		    <{Asvt,St2}> when 'true' ->
			let <A> =
			    call %% Line 2459
				 'erlang':%% Line 2459
					  'length'
				(%% Line 2459
				 As)
			in  %% Line 2460
			    ( case St2 of
				( <( {'lint',_248,_249,_250,_251,_252,_253,_254,_rec99,_255,_256,_257,_258,_259,_260,_261,_262,_263,_264,_265,_266,_267,_268,_269,_270,_271,_272,_273,_274,_275,_276,_277,_278,_279,_280}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <IsLocal> =
					  apply 'is_local_function'/2
					      (_rec99, {F,A})
				      in  let <IsAutoBif> =
					      call %% Line 2461
						   'erl_internal':%% Line 2461
								  'bif'
						  (%% Line 2461
						   F, %% Line 2461
						      A)
					  in  %% Line 2462
					      ( case St2 of
						  ( <( {'lint',_282,_283,_284,_285,_286,_287,_288,_289,_rec100,_290,_291,_292,_293,_294,_295,_296,_297,_298,_299,_300,_301,_302,_303,_304,_305,_306,_307,_308,_309,_310,_311,_312,_313,_314}
						       -| ['compiler_generated'] )> when 'true' ->
							let <AutoSuppressed> =
							    apply 'is_autoimport_suppressed'/2
								(_rec100, {F,A})
							in  let <_98> =
								apply %% Line 2463
								      'is_warn_enabled'/2
								    (%% Line 2463
								     'bif_clash', %% Line 2463
										  St2)
							    in  let <_96> =
								    apply %% Line 2463
									  'bif_clash_specifically_disabled'/2
									(%% Line 2463
									 St2, %% Line 2463
									      {F,A})
								in  let <_97> =
									call %% Line 2463
									     'erlang':%% Line 2463
										      'not'
									    (_96)
								    in  let <Warn> =
									    call %% Line 2463
										 'erlang':%% Line 2463
											  'and'
										(_98, _97)
									in  let <Imported> =
										apply %% Line 2464
										      'imported'/3
										    (%% Line 2464
										     F, %% Line 2464
											A, %% Line 2464
											   St2)
									    in  let <_107> =
										    case %% Line 2465
											 IsLocal of
										      %% Line 2465
										      ( <'false'> when 'true' ->
											    ( case <> of
												( <>
												      when call 'erlang':'=:='
													    (Imported,
													     'no') ->
												      %% Line 2466
												      ( case IsAutoBif of
													  ( <( 'true'
													       -| ['compiler_generated'] )> when 'true' ->
														call 'erlang':'not'
														    (AutoSuppressed)
													    -| ['compiler_generated'] )
													  ( <( 'false'
													       -| ['compiler_generated'] )> when 'true' ->
														'false'
													    -| ['compiler_generated'] )
													  ( <_103> when 'true' ->
														( call ( 'erlang'
															 -| ['compiler_generated'] ):( 'error'
																		       -| ['compiler_generated'] )
														      (( {( 'badarg'
															    -| ['compiler_generated'] ),_103}
															 -| ['compiler_generated'] ))
														  -| ['compiler_generated'] )
													    -| ['compiler_generated'] )
													end
													-| ['compiler_generated'] )
												  -| ['compiler_generated'] )
												( <> when 'true' ->
												      'false'
												  -| ['compiler_generated'] )
											      end
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										      %% Line 2465
										      ( <'true'> when 'true' ->
											    'false'
											-| ['compiler_generated'] )
										      ( <_cor_variable> when 'true' ->
											    %% Line 2465
											    call 'erlang':'error'
												('badarg')
											-| ['compiler_generated'] )
										    end
										in  %% Line 2465
										    case _107 of
										      %% Line 2467
										      <'true'> when 'true' ->
											  let <St3> =
											      apply %% Line 2468
												    'deprecated_function'/5
												  (%% Line 2468
												   Line, %% Line 2468
													 'erlang', %% Line 2468
														   F, %% Line 2468
														      As, %% Line 2468
															  St2)
											  in  %% Line 2469
											      {Asvt,St3}
										      %% Line 2470
										      <'false'> when 'true' ->
											  let <_138> =
											      case %% Line 2471
												   Imported of
												%% Line 2472
												<{'yes',M}> when 'true' ->
												    let <St3> =
													apply %% Line 2473
													      'check_remote_function'/5
													    (%% Line 2473
													     Line, %% Line 2473
														   M, %% Line 2473
														      F, %% Line 2473
															 As, %% Line 2473
															     St2)
												    in  %% Line 2474
													( case St3 of
													    ( <( {'lint',_316,_317,_318,_319,_320,_321,_322,_323,_324,_325,_326,_327,_328,_329,_330,_331,_332,_333,_334,_335,_336,_337,_338,_339,_340,_rec101,_341,_342,_343,_344,_345,_346,_347,_348}
														 -| ['compiler_generated'] )> when 'true' ->
														  %% Line 2475
														  ( case _rec101 of
														      ( <( {'usage',_350,_rec102,_351,_352}
															   -| ['compiler_generated'] )> when 'true' ->
															    let <Imp> =
																call 'ordsets':'add_element'
																    ({{F,A},M}, _rec102)
															    in  %% Line 2476
																case _rec101 of
																  <{'usage',_354,_355,_356,_357}> when 'true' ->
																      let <_118> =
																	  call 'erlang':'setelement'
																	      (3, _rec101, Imp)
																      in  case St3 of
																	    <{'lint',_359,_360,_361,_362,_363,_364,_365,_366,_367,_368,_369,_370,_371,_372,_373,_374,_375,_376,_377,_378,_379,_380,_381,_382,_383,_384,_385,_386,_387,_388,_389,_390,_391,_392}> when 'true' ->
																		call 'erlang':'setelement'
																		    (27, St3, _118)
																	    ( <_393> when 'true' ->
																		  ( call ( 'erlang'
																			   -| ['compiler_generated'] ):( 'error'
																							 -| ['compiler_generated'] )
																			(( {'badrecord','lint'}
																			   -| ['compiler_generated'] ))
																		    -| ['compiler_generated'] )
																	      -| ['compiler_generated'] )
																	  end
																  ( <_358> when 'true' ->
																	( call ( 'erlang'
																		 -| ['compiler_generated'] ):( 'error'
																					       -| ['compiler_generated'] )
																	      (( {'badrecord','usage'}
																		 -| ['compiler_generated'] ))
																	  -| ['compiler_generated'] )
																    -| ['compiler_generated'] )
																end
															-| ['compiler_generated'] )
														      ( <_353> when 'true' ->
															    ( call ( 'erlang'
																     -| ['compiler_generated'] ):( 'error'
																				   -| ['compiler_generated'] )
																  (( {'badrecord','usage'}
																     -| ['compiler_generated'] ))
															      -| ['compiler_generated'] )
															-| ['compiler_generated'] )
														    end
														    -| ['compiler_generated'] )
													      -| ['compiler_generated'] )
													    ( <_349> when 'true' ->
														  ( call ( 'erlang'
															   -| ['compiler_generated'] ):( 'error'
																			 -| ['compiler_generated'] )
															(( {'badrecord','lint'}
															   -| ['compiler_generated'] ))
														    -| ['compiler_generated'] )
													      -| ['compiler_generated'] )
													  end
													  -| ['compiler_generated'] )
												%% Line 2477
												<'no'> when 'true' ->
												    %% Line 2478
												    case <F,A> of
												      %% Line 2479
												      <'record_info',2> when 'true' ->
													  %% Line 2480
													  apply 'check_record_info_call'/4
													      (Line, La, As, St2)
												      %% Line 2481
												      <( _402
													 -| ['compiler_generated'] ),( _403
																       -| ['compiler_generated'] )> when 'true' ->
													  let <N> = {( _402
														 -| ['compiler_generated'] ),( _403
																	       -| ['compiler_generated'] )}
													  in  let <_128> =
														  case <> of
														    %% Line 2485
														    <>
															when try
															      ( let <_126> =
																    case call 'erlang':'not'
																	     (AutoSuppressed) of
																      ( <( 'true'
																	   -| ['compiler_generated'] )> when 'true' ->
																	    ( case IsAutoBif of
																		( <( 'true'
																		     -| ['compiler_generated'] )> when 'true' ->
																		      Warn
																		  -| ['compiler_generated'] )
																		( <( 'false'
																		     -| ['compiler_generated'] )> when 'true' ->
																		      'false'
																		  -| ['compiler_generated'] )
																		( <_123> when 'true' ->
																		      _123
																		  -| ['compiler_generated'] )
																	      end
																	      -| ['compiler_generated'] )
																	-| ['compiler_generated'] )
																      ( <( 'false'
																	   -| ['compiler_generated'] )> when 'true' ->
																	    'false'
																	-| ['compiler_generated'] )
																      ( <_122> when 'true' ->
																	    _122
																	-| ['compiler_generated'] )
																    end
																in  ( call 'erlang':'=:='
																	  (( _126
																	     -| ['compiler_generated'] ), 'true')
																      -| ['compiler_generated'] )
																-| ['compiler_generated'] )
															  of <Try> ->
															      Try
															  catch <T,R> ->
															      'false' ->
															%% Line 2486
															case call 'erl_internal':'old_bif'
																 (F, A) of
															  %% Line 2487
															  <'true'> when 'true' ->
															      %% Line 2488
															      apply 'add_error'/3
																  (%% Line 2489
																   Line, %% Line 2490
																	 {'call_to_redefined_old_bif',{F,A}}, %% Line 2491
																					      St2)
															  %% Line 2492
															  <'false'> when 'true' ->
															      %% Line 2493
															      apply 'add_warning'/3
																  (%% Line 2494
																   Line, %% Line 2495
																	 {'call_to_redefined_bif',{F,A}}, %% Line 2496
																					  St2)
															  ( <_127> when 'true' ->
																primop 'match_fail'
																    ({'case_clause',_127})
															    -| ['compiler_generated'] )
															end
														    %% Line 2498
														    <> when 'true' ->
															%% Line 2499
															St2
														  end
													      in  %% Line 2502
														  case <> of
														    %% Line 2503
														    <>
															when ( try
																( let <_132> =
																      case ( call ( 'erlang'
																		    -| ['compiler_generated'] ):( 'is_record'
																						  -| ['compiler_generated'] )
																		 (_128, ( 'lint'
																			  -| ['compiler_generated'] ), ( 35
																							 -| ['compiler_generated'] ))
																	     -| ['compiler_generated'] ) of
																	( <( 'true'
																	     -| ['compiler_generated'] )> when 'true' ->
																	      ( 'true'
																		-| ['compiler_generated'] )
																	  -| ['compiler_generated'] )
																	( <( 'false'
																	     -| ['compiler_generated'] )> when 'true' ->
																	      ( 'fail'
																		-| ['compiler_generated'] )
																	  -| ['compiler_generated'] )
																	( <( _130
																	     -| ['compiler_generated'] )> when 'true' ->
																	      ( _130
																		-| ['compiler_generated'] )
																	  -| ['compiler_generated'] )
																      end
																  in  let <_133> =
																	  call 'erlang':'=:='
																	      (( _132
																		 -| ['compiler_generated'] ), 'true')
																      in  let <_134> =
																	      call 'erlang':'element'
																		  (17, _128)
																	  in  let <_135> =
																		  call 'erlang':'=:='
																		      (N, _134)
																	      in  ( call ( 'erlang'
																			   -| ['compiler_generated'] ):( 'and'
																							 -| ['compiler_generated'] )
																			(_133, _135)
																		    -| ['compiler_generated'] )
																  -| ['compiler_generated'] )
															    of <Try> ->
																Try
															    catch <T,R> ->
																'false'
															    -| ['compiler_generated'] ) ->
															_128
														    %% Line 2505
														    <> when 'true' ->
															%% Line 2506
															apply 'call_function'/4
															    (Line, F, A, _128)
														  end
												    end
												( <_137> when 'true' ->
												      %% Line 2471
												      primop 'match_fail'
													  ({'case_clause',_137})
												  -| ['compiler_generated'] )
											      end
											  in  %% Line 2471
											      {Asvt,_138}
										      ( <_139> when 'true' ->
											    primop 'match_fail'
												({'case_clause',_139})
											-| ['compiler_generated'] )
										    end
						    -| ['compiler_generated'] )
						  ( <_315> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','lint'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_281> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','lint'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    ( <_87> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_87})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2511
	  <{'call',Line,F,As},Vt,St0> when 'true' ->
	      let <St> =
		  apply %% Line 2512
			'warn_invalid_call'/3
		      (%% Line 2512
		       Line, %% Line 2512
			     F, %% Line 2512
				St0)
	      in  %% Line 2513
		  apply 'expr_list'/3
		      ([F|As], Vt, St)
	  %% Line 2514
	  <{'try',Line,Es,Scs,Ccs,As},Vt,St0> when 'true' ->
	      %% Line 2517
	      case apply 'exprs'/3
		       (Es, Vt, St0) of
		<{Evt0,St1}> when 'true' ->
		    let <TryLine> = {%% Line 2518
			 'try',%% Line 2518
			       Line}
		    in  let <Uvt> =
			    apply %% Line 2519
				  'vtunsafe'/3
				(%% Line 2519
				 TryLine, %% Line 2519
					  Evt0, %% Line 2519
						Vt)
			in  let <Evt1> =
				apply %% Line 2520
				      'vtupdate'/2
				    (%% Line 2520
				     Uvt, %% Line 2520
					  Evt0)
			    in  let <_145> =
				    apply %% Line 2522
					  'vtupdate'/2
					(%% Line 2522
					 Evt1, %% Line 2522
					       Vt)
				in  %% Line 2521
				    case apply 'try_clauses'/5
					     (Scs, Ccs, TryLine, _145, %% Line 2522
								       St1) of
				      <{Sccs,St2}> when 'true' ->
					  let <_148> =
					      apply %% Line 2524
						    'vtunsafe'/3
						  (%% Line 2524
						   TryLine, %% Line 2523
							    Sccs, %% Line 2524
								  Vt)
					  in  let <Rvt1> =
						  apply %% Line 2524
							'vtupdate'/2
						      (_148, %% Line 2523
							     Sccs)
					      in  let <Evt2> =
						      apply %% Line 2525
							    'vtmerge'/2
							  (%% Line 2525
							   Evt1, %% Line 2525
								 Rvt1)
						  in  let <_151> =
							  apply %% Line 2526
								'vtupdate'/2
							      (%% Line 2526
							       Evt2, %% Line 2526
								     Vt)
						      in  %% Line 2526
							  case apply 'exprs'/3
								   (As, _151, St2) of
							    <{Avt0,St}> when 'true' ->
								let <_153> =
								    apply %% Line 2527
									  'vtunsafe'/3
									(%% Line 2527
									 TryLine, %% Line 2527
										  Avt0, %% Line 2527
											Vt)
								in  let <Avt1> =
									apply %% Line 2527
									      'vtupdate'/2
									    (_153, %% Line 2527
										   Avt0)
								    in  let <Avt> =
									    apply %% Line 2528
										  'vtmerge'/2
										(%% Line 2528
										 Evt2, %% Line 2528
										       Avt1)
									in  %% Line 2529
									    {Avt,St}
							    ( <_152> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_152})
							      -| ['compiler_generated'] )
							  end
				      ( <_146> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_146})
					-| ['compiler_generated'] )
				    end
		( <_141> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_141})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2530
	  <{'catch',Line,E},Vt,St0> when 'true' ->
	      %% Line 2532
	      case apply 'expr'/3
		       (E, Vt, St0) of
		<{Evt,St}> when 'true' ->
		    let <_157> =
			apply %% Line 2533
			      'vtunsafe'/3
			    (%% Line 2533
			     {'catch',Line}, %% Line 2533
					     Evt, %% Line 2533
						  Vt)
		    in  let <_158> =
			    apply %% Line 2533
				  'vtupdate'/2
				(_157, %% Line 2533
				       Evt)
			in  %% Line 2533
			    {_158,St}
		( <_156> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_156})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2534
	  <{'match',_X_Line,P,E},Vt,St0> when 'true' ->
	      %% Line 2535
	      case apply 'expr'/3
		       (E, Vt, St0) of
		<{Evt,St1}> when 'true' ->
		    let <_160> =
			apply %% Line 2536
			      'vtupdate'/2
			    (%% Line 2536
			     Evt, %% Line 2536
				  Vt)
		    in  %% Line 2536
			case apply 'pattern'/3
				 (P, _160, St1) of
			  <{Pvt,Bvt,St2}> when 'true' ->
			      let <St> =
				  apply %% Line 2537
					'reject_invalid_alias_expr'/4
				      (%% Line 2537
				       P, %% Line 2537
					  E, %% Line 2537
					     Vt, %% Line 2537
						 St2)
			      in  let <_163> =
				      apply %% Line 2538
					    'vtmerge'/2
					  (%% Line 2538
					   Evt, %% Line 2538
						Pvt)
				  in  let <_164> =
					  apply %% Line 2538
						'vtupdate'/2
					      (%% Line 2538
					       Bvt, _163)
				      in  %% Line 2538
					  {_164,St}
			  ( <_161> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_161})
			    -| ['compiler_generated'] )
			end
		( <_159> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_159})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2540
	  <{'op',_X_Line,_X_Op,A},Vt,St> when 'true' ->
	      %% Line 2541
	      apply 'expr'/3
		  (A, Vt, St)
	  %% Line 2542
	  <{'op',Line,Op,L,R},Vt,St0>
	      when let <_165> =
		    call 'erlang':'=:='
			(Op, 'orelse')
		in  let <_166> =
			call 'erlang':'=:='
			    (Op, 'andalso')
		    in  call 'erlang':'or'
			    (_165, _166) ->
	      %% Line 2543
	      case apply 'expr'/3
		       (L, Vt, St0) of
		<{Evt1,St1}> when 'true' ->
		    let <Vt1> =
			apply %% Line 2544
			      'vtupdate'/2
			    (%% Line 2544
			     Evt1, %% Line 2544
				   Vt)
		    in  %% Line 2545
			case apply 'expr'/3
				 (R, Vt1, St1) of
			  <{Evt2,St2}> when 'true' ->
			      let <_170> =
				  apply %% Line 2546
					'vtunsafe'/3
				      (%% Line 2546
				       {Op,Line}, %% Line 2546
						  Evt2, %% Line 2546
							Vt1)
			      in  let <Evt3> =
				      apply %% Line 2546
					    'vtupdate'/2
					  (_170, %% Line 2546
						 Evt2)
				  in  let <_172> =
					  apply %% Line 2547
						'vtmerge'/2
					      (%% Line 2547
					       Evt1, %% Line 2547
						     Evt3)
				      in  %% Line 2547
					  {_172,St2}
			  ( <_169> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_169})
			    -| ['compiler_generated'] )
			end
		( <_167> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_167})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2548
	  <{'op',_X_Line,_X_Op,L,R},Vt,St> when 'true' ->
	      %% Line 2549
	      apply 'expr_list'/3
		  ([L|[R|[]]], Vt, St)
	  %% Line 2551
	  <{'remote',Line,_X_M,_X_F},_X_Vt,St> when 'true' ->
	      let <_173> =
		  apply %% Line 2552
			'add_error'/3
		      (%% Line 2552
		       Line, %% Line 2552
			     'illegal_expr', %% Line 2552
					     St)
	      in  %% Line 2552
		  {[],_173}
	  ( <_176,_175,_174> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_176,_175,_174})
		  -| [{'function_name',{'expr',3}}] )
	    -| ['compiler_generated'] )
	end
'expr_list'/3 =
    %% Line 2557
    fun (_0,_1,_2) ->
	let <_9> =
	    fun (_6,_5) ->
		%% Line 2558
		case <_6,_5> of
		  <E,{Esvt,St0}> when 'true' ->
		      %% Line 2559
		      case apply 'expr'/3
			       (E, _1, St0) of
			<{Evt,St1}> when 'true' ->
			    let <_4> =
				apply %% Line 2560
				      'vtmerge_pat'/2
				    (%% Line 2560
				     Evt, %% Line 2560
					  Esvt)
			    in  %% Line 2560
				{_4,St1}
			( <_3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_3})
			  -| ['compiler_generated'] )
		      end
		  ( <_8,_7> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_8,_7})
			  -| [{'function_name',{'-expr_list/3-fun-0-',2}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 2558
	    call 'lists':'foldl'
		(_9, %% Line 2561
		     {[],_2}, _0)
'record_expr'/4 =
    %% Line 2563
    fun (_0,_1,_2,_3) ->
	let <St1> =
	    apply %% Line 2564
		  'warn_invalid_record'/3
		(_0, _1, _3)
	in  %% Line 2565
	    apply 'expr'/3
		(_1, _2, St1)
'check_assoc_fields'/2 =
    %% Line 2567
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{'map_field_exact',Line,_5,_6}|Fs],St> when 'true' ->
	      let <_2> =
		  apply %% Line 2568
			'add_error'/3
		      (%% Line 2568
		       Line, %% Line 2568
			     'illegal_map_construction', %% Line 2568
							 St)
	      in  %% Line 2568
		  apply 'check_assoc_fields'/2
		      (Fs, _2)
	  %% Line 2569
	  <[{'map_field_assoc',_7,_8,_9}|Fs],St> when 'true' ->
	      %% Line 2570
	      apply 'check_assoc_fields'/2
		  (Fs, St)
	  %% Line 2571
	  <[],St> when 'true' ->
	      %% Line 2572
	      St
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'check_assoc_fields',2}}] )
	    -| ['compiler_generated'] )
	end
'map_fields'/4 =
    %% Line 2574
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[{Tag,_13,K,V}|Fs],Vt,St,F>
	      when let <_4> =
		    call 'erlang':'=:='
			(Tag, 'map_field_assoc')
		in  let <_5> =
			call %% Line 2575
			     'erlang':%% Line 2575
				      '=:='
			    (%% Line 2575
			     Tag, %% Line 2575
				  'map_field_exact')
		    in  call 'erlang':'or'
			    (_4, _5) ->
	      %% Line 2576
	      case apply F
		       ([K|[V|[]]], Vt, St) of
		<{Pvt,St2}> when 'true' ->
		    %% Line 2577
		    case apply 'map_fields'/4
			     (Fs, Vt, St2, F) of
		      <{Vts,St3}> when 'true' ->
			  let <_8> =
			      apply %% Line 2578
				    'vtupdate'/2
				  (%% Line 2578
				   Pvt, %% Line 2578
					Vts)
			  in  %% Line 2578
			      {_8,St3}
		      ( <_7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_7})
			-| ['compiler_generated'] )
		    end
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2579
	  <[],_14,St,_15> when 'true' ->
	      %% Line 2580
	      {[],St}
	  ( <_12,_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11,_10,_9})
		  -| [{'function_name',{'map_fields',4}}] )
	    -| ['compiler_generated'] )
	end
'warn_invalid_record'/3 =
    %% Line 2585
    fun (_0,_1,_2) ->
	%% Line 2586
	case apply 'is_valid_record'/1
		 (_1) of
	  %% Line 2587
	  <'true'> when 'true' ->
	      _2
	  %% Line 2588
	  <'false'> when 'true' ->
	      apply 'add_warning'/3
		  (_0, 'invalid_record', _2)
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_3})
	    -| ['compiler_generated'] )
	end
'is_valid_record'/1 =
    %% Line 2593
    fun (_0) ->
	%% Line 2594
	case _0 of
	  %% Line 2595
	  <{'char',_3,_4}> when 'true' ->
	      'false'
	  %% Line 2596
	  <{'integer',_5,_6}> when 'true' ->
	      'false'
	  %% Line 2597
	  <{'float',_7,_8}> when 'true' ->
	      'false'
	  %% Line 2598
	  <{'atom',_9,_10}> when 'true' ->
	      'false'
	  %% Line 2599
	  <{'string',_11,_12}> when 'true' ->
	      'false'
	  %% Line 2600
	  <{'cons',_13,_14,_15}> when 'true' ->
	      'false'
	  %% Line 2601
	  <{'nil',_16}> when 'true' ->
	      'false'
	  %% Line 2602
	  <{'lc',_17,_18,_19}> when 'true' ->
	      'false'
	  %% Line 2603
	  <{'record_index',_20,_21,_22}> when 'true' ->
	      'false'
	  %% Line 2604
	  <{'fun',_23,_24}> when 'true' ->
	      'false'
	  %% Line 2605
	  <{'named_fun',_25,_26,_27}> when 'true' ->
	      'false'
	  %% Line 2606
	  <_28> when 'true' ->
	      'true'
	end
'warn_invalid_call'/3 =
    %% Line 2612
    fun (_0,_1,_2) ->
	%% Line 2613
	case apply 'is_valid_call'/1
		 (_1) of
	  %% Line 2614
	  <'true'> when 'true' ->
	      _2
	  %% Line 2615
	  <'false'> when 'true' ->
	      apply 'add_warning'/3
		  (_0, 'invalid_call', _2)
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_3})
	    -| ['compiler_generated'] )
	end
'is_valid_call'/1 =
    %% Line 2620
    fun (_0) ->
	%% Line 2621
	case _0 of
	  %% Line 2622
	  <{'char',_4,_5}> when 'true' ->
	      'false'
	  %% Line 2623
	  <{'integer',_6,_7}> when 'true' ->
	      'false'
	  %% Line 2624
	  <{'float',_8,_9}> when 'true' ->
	      'false'
	  %% Line 2625
	  <{'string',_10,_11}> when 'true' ->
	      'false'
	  %% Line 2626
	  <{'cons',_12,_13,_14}> when 'true' ->
	      'false'
	  %% Line 2627
	  <{'nil',_15}> when 'true' ->
	      'false'
	  %% Line 2628
	  <{'lc',_16,_17,_18}> when 'true' ->
	      'false'
	  %% Line 2629
	  <{'record_index',_19,_20,_21}> when 'true' ->
	      'false'
	  %% Line 2630
	  <{'tuple',_22,Exprs}>
	      when try
		    let <_1> =
			call 'erlang':'length'
			    (Exprs)
		    in  call 'erlang':'=/='
			    (_1, 2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'false'
	  %% Line 2631
	  <_23> when 'true' ->
	      'true'
	end
'record_def'/4 =
    %% Line 2638
    fun (_0,_1,_2,_3) ->
	%% Line 2639
	( case _3 of
	    ( <( {'lint',_27,_28,_29,_30,_31,_32,_rec106,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'erlang':'is_map_key'
			   (_1, _rec106) of
		    %% Line 2640
		    <'true'> when 'true' ->
			apply 'add_error'/3
			    (_0, {'redefine_record',_1}, _3)
		    %% Line 2641
		    <'false'> when 'true' ->
			let <_6> =
			    apply %% Line 2642
				  'normalise_fields'/1
				(_2)
			in  %% Line 2642
			    case apply 'def_fields'/3
				     (_6, _1, _3) of
			      <{Fs1,St1}> when 'true' ->
				  %% Line 2644
				  ( case St1 of
				      ( <( {'lint',_61,_62,_63,_64,_65,_66,_rec109,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_rec107> =
						call 'maps':'put'
						    (_1, {_0,Fs1}, _rec109)
					    in  case St1 of
						  <{'lint',_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128}> when 'true' ->
						      let <_13> =
							  call 'erlang':'setelement'
							      (8, St1, _rec107)
						      in  let <_19> =
							      letrec
								  'lc$^0'/1 =
								      %% Line 2645
								      fun (_17) ->
									  case _17 of
									    <[{'typed_record_field',_130,T}|_16]> when 'true' ->
										let <_18> =
										    apply 'lc$^0'/1
											(_16)
										in  ( [T|_18]
										      -| ['compiler_generated'] )
									    ( <[_15|_16]> when 'true' ->
										  apply 'lc$^0'/1
										      (_16)
									      -| ['compiler_generated'] )
									    <[]> when 'true' ->
										[]
									    ( <_131> when 'true' ->
										  ( primop 'match_fail'
											({'function_clause',_131})
										    -| [{'function_name',{'lc$^0',1}}] )
									      -| ['compiler_generated'] )
									  end
							      in  %% Line 2645
								  apply 'lc$^0'/1
								      (_2)
							  in  let <_21> =
								  apply %% Line 2646
									'nowarn'/0
								      ()
							      in  %% Line 2646
								  apply 'check_type'/2
								      ({'type',_21,'product',_19}, _13)
						  ( <_129> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','lint'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					-| ['compiler_generated'] )
				      ( <_94> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','lint'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      ( <_7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_7})
				-| ['compiler_generated'] )
			    end
		    ( <_22> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_22})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_60> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'def_fields'/3 =
    %% Line 2653
    fun (_0,_1,_2) ->
	let <_37> =
	    fun (_34,_33) ->
		%% Line 2654
		case <_34,_33> of
		  <{'record_field',Lf,_@r0 = {'atom',La,F},V},{Fs,St}> when 'true' ->
		      %% Line 2655
		      case apply 'exist_field'/2
			       (F, Fs) of
			%% Line 2656
			<'true'> when 'true' ->
			    let <_3> =
				apply 'add_error'/3
				    (Lf, {'redefine_field',_1,F}, St)
			    in  {Fs,_3}
			%% Line 2657
			<'false'> when 'true' ->
			    %% Line 2658
			    case St of
			      <{'lint',_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74}> when 'true' ->
				  let <_6> =
				      call 'erlang':'setelement'
					  (24, St, 'true')
				  in  %% Line 2659
				      case apply 'expr'/3
					       (V, [], _6) of
					<{_76,St2}> when 'true' ->
					    %% Line 2662
					    ( case St2 of
						( <( {'lint',_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_rec115,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109}
						     -| ['compiler_generated'] )> when 'true' ->
						      %% Line 2663
						      ( case St2 of
							  ( <( {'lint',_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_rec116,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143}
							       -| ['compiler_generated'] )> when 'true' ->
								%% Line 2664
								( case St2 of
								    ( <( {'lint',_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_rec117,_169,_170,_171,_172,_173,_174,_175,_176,_177}
									 -| ['compiler_generated'] )> when 'true' ->
									  case _6 of
									    <{'lint',_179,_180,_181,_182,_183,_184,_185,_186,_187,_188,_189,_190,_191,_192,_193,_194,_195,_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208,_209,_210,_211,_212}> when 'true' ->
										let <_19> =
										    call 'erlang':'setelement'
											(26, _6, _rec117)
										in  let <_20> =
											call %% Line 2665
											     'erlang':%% Line 2665
												      'setelement'
											    (%% Line 2665
											     24, _19, %% Line 2665
												      'false')
										    in  let <_21> =
											    call 'erlang':'setelement'
												(22, _20, _rec115)
											in  let <_23> =
												call 'erlang':'setelement'
												    (21, _21, _rec116)
											    in  %% Line 2668
												( case St2 of
												    ( <( {'lint',_214,_215,_216,_217,_218,_219,_220,_221,_222,_223,_224,_225,_226,_227,_228,_229,_230,_231,_232,_rec118,_233,_234,_235,_236,_237,_238,_239,_240,_241,_242,_243,_244,_245,_246}
													 -| ['compiler_generated'] )> when 'true' ->
													  ( case _6 of
													      ( <( {'lint',_248,_249,_250,_251,_252,_253,_254,_255,_256,_257,_258,_259,_260,_261,_262,_263,_264,_265,_266,_rec119,_267,_268,_269,_270,_271,_272,_273,_274,_275,_276,_277,_278,_279,_280}
														   -| ['compiler_generated'] )> when 'true' ->
														    let <_30> =
															case <> of
															  %% Line 2669
															  <>
															      when call 'erlang':'=:='
																    (_rec118,
																     _rec119) ->
															      V
															  %% Line 2670
															  <> when 'true' ->
															      {'atom',La,'undefined'}
															end
														    in  %% Line 2672
															{[{'record_field',Lf,_@r0,_30}|Fs],_23}
														-| ['compiler_generated'] )
													      ( <_281> when 'true' ->
														    ( call ( 'erlang'
															     -| ['compiler_generated'] ):( 'error'
																			   -| ['compiler_generated'] )
															  (( {'badrecord','lint'}
															     -| ['compiler_generated'] ))
														      -| ['compiler_generated'] )
														-| ['compiler_generated'] )
													    end
													    -| ['compiler_generated'] )
												      -| ['compiler_generated'] )
												    ( <_247> when 'true' ->
													  ( call ( 'erlang'
														   -| ['compiler_generated'] ):( 'error'
																		 -| ['compiler_generated'] )
														(( {'badrecord','lint'}
														   -| ['compiler_generated'] ))
													    -| ['compiler_generated'] )
												      -| ['compiler_generated'] )
												  end
												  -| ['compiler_generated'] )
									    ( <_213> when 'true' ->
										  ( call ( 'erlang'
											   -| ['compiler_generated'] ):( 'error'
															 -| ['compiler_generated'] )
											(( {'badrecord','lint'}
											   -| ['compiler_generated'] ))
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									  end
								      -| ['compiler_generated'] )
								    ( <_178> when 'true' ->
									  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'error'
														 -| ['compiler_generated'] )
										(( {'badrecord','lint'}
										   -| ['compiler_generated'] ))
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								  end
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							  ( <_144> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','lint'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <_110> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','lint'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					( <_8> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_8})
					  -| ['compiler_generated'] )
				      end
			      ( <_75> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','lint'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			( <_32> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_32})
			  -| ['compiler_generated'] )
		      end
		  ( <_36,_35> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_36,_35})
			  -| [{'function_name',{'-def_fields/3-fun-0-',2}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 2654
	    call 'lists':'foldl'
		(_37, %% Line 2674
		      {[],_2}, _0)
'normalise_fields'/1 =
    %% Line 2681
    fun (_0) ->
	let <_3> =
	    fun (_1) ->
		%% Line 2682
		case _1 of
		  <{'record_field',Lf,Field}> when 'true' ->
		      %% Line 2683
		      {'record_field',Lf,Field,{'atom',Lf,'undefined'}}
		  %% Line 2684
		  <{'typed_record_field',{'record_field',Lf,Field},_X_Type}> when 'true' ->
		      %% Line 2685
		      {'record_field',Lf,Field,{'atom',Lf,'undefined'}}
		  %% Line 2686
		  <{'typed_record_field',Field,_X_Type}> when 'true' ->
		      %% Line 2687
		      Field
		  %% Line 2688
		  <F> when 'true' ->
		      F
		end
	in  %% Line 2682
	    call 'lists':'map'
		(_3, _0)
'exist_record'/3 =
    %% Line 2693
    fun (_0,_1,_2) ->
	%% Line 2694
	( case _2 of
	    ( <( {'lint',_9,_10,_11,_12,_13,_14,_rec120,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'erlang':'is_map_key'
			   (_1, _rec120) of
		    %% Line 2695
		    <'true'> when 'true' ->
			apply 'used_record'/2
			    (_1, _2)
		    %% Line 2696
		    <'false'> when 'true' ->
			apply 'add_error'/3
			    (_0, {'undefined_record',_1}, _2)
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_5})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_42> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'check_record'/4 =
    %% Line 2710
    fun (_0,_1,_2,_3) ->
	%% Line 2711
	( case _2 of
	    ( <( {'lint',_13,_14,_15,_16,_17,_18,_rec121,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'maps':'find'
			   (_1, _rec121) of
		    %% Line 2712
		    <{'ok',{_X_Line,Fields}}> when 'true' ->
			let <_6> =
			    apply 'used_record'/2
				(_1, _2)
			in  apply _3
				(Fields, _6)
		    %% Line 2713
		    <'error'> when 'true' ->
			let <_7> =
			    apply 'add_error'/3
				(_0, {'undefined_record',_1}, _2)
			in  {[],_7}
		    ( <_8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_8})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_46> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'used_record'/2 =
    %% Line 2716
    fun (_0,_1) ->
	case <_0,_1> of
	  <Name,St = {'lint',_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,Usage,_38,_39,_40,_41,_42,_43,_44,_45}> when 'true' ->
	      %% Line 2717
	      ( case Usage of
		  ( <( {'usage',_46,_47,_rec122,_48}
		       -| ['compiler_generated'] )> when 'true' ->
			let <UsedRecs> =
			    call 'gb_sets':'add_element'
				(Name, _rec122)
			in  %% Line 2718
			    case Usage of
			      <{'usage',_50,_51,_52,_53}> when 'true' ->
				  let <_7> =
				      call 'erlang':'setelement'
					  (4, Usage, UsedRecs)
				  in  case St of
					<{'lint',_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88}> when 'true' ->
					    call 'erlang':'setelement'
						(27, St, _7)
					( <_89> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','lint'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
			      ( <_54> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','usage'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_49> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','usage'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11})
		  -| [{'function_name',{'used_record',2}}] )
	    -| ['compiler_generated'] )
	end
'check_fields'/6 =
    %% Line 2725
    fun (_0,_1,_2,_3,_4,_5) ->
	let <_12> =
	    fun (_9,_8) ->
		%% Line 2727
		case <_9,_8> of
		  <Field,{Sfsa,Vta,Sta}> when 'true' ->
		      %% Line 2728
		      case apply 'check_field'/7
			       (Field, _1, _2, _3, %% Line 2729
						   Sta, %% Line 2729
							Sfsa, _5) of
			<{Sfsb,{Vtb,Stb}}> when 'true' ->
			    let <_7> =
				apply %% Line 2730
				      'vtmerge_pat'/2
				    (%% Line 2730
				     Vta, %% Line 2730
					  Vtb)
			    in  %% Line 2730
				{Sfsb,_7,Stb}
			( <_6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_6})
			  -| ['compiler_generated'] )
		      end
		  ( <_11,_10> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_11,_10})
			  -| [{'function_name',{'-check_fields/6-fun-0-',2}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 2726
	    case %% Line 2727
		 call 'lists':'foldl'
		     (_12, %% Line 2731
			   {[],[],_4}, _0) of
	      <{_X_SeenFields,Uvt,St1}> when 'true' ->
		  %% Line 2732
		  {Uvt,St1}
	      ( <_13> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_13})
		-| ['compiler_generated'] )
	    end
'check_field'/7 =
    %% Line 2734
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <{'record_field',Lf,{'atom',La,F},Val},Name,Fields,%% Line 2735
							     Vt,%% Line 2735
								St,%% Line 2735
								   Sfs,%% Line 2735
								       CheckFun> when 'true' ->
	      %% Line 2736
	      case call 'lists':'member'
		       (F, Sfs) of
		%% Line 2737
		<'true'> when 'true' ->
		    let <_7> =
			apply 'add_error'/3
			    (Lf, {'redefine_field',Name,F}, St)
		    in  {Sfs,{[],_7}}
		%% Line 2738
		<'false'> when 'true' ->
		    let <_10> =
			case %% Line 2740
			     apply 'find_field'/2
				 (F, Fields) of
			  %% Line 2741
			  <{'ok',_X_I}> when 'true' ->
			      apply CheckFun
				  (Val, Vt, St)
			  %% Line 2742
			  <'error'> when 'true' ->
			      let <_8> =
				  apply 'add_error'/3
				      (La, {'undefined_field',Name,F}, St)
			      in  {[],_8}
			  ( <_9> when 'true' ->
				%% Line 2740
				primop 'match_fail'
				    ({'case_clause',_9})
			    -| ['compiler_generated'] )
			end
		    in  %% Line 2739
			{[F|Sfs],_10}
		( <_11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2745
	  <{'record_field',_X_Lf,{'var',_X_La,'_'},Val},_X_Name,_X_Fields,%% Line 2746
									  Vt,%% Line 2746
									     St,%% Line 2746
										Sfs,%% Line 2746
										    CheckFun> when 'true' ->
	      let <_12> =
		  apply %% Line 2747
			CheckFun
		      (%% Line 2747
		       Val, %% Line 2747
			    Vt, %% Line 2747
				St)
	      in  %% Line 2747
		  {Sfs,_12}
	  %% Line 2748
	  <{'record_field',_X_Lf,{'var',La,V},_X_Val},Name,_X_Fields,%% Line 2749
								     Vt,%% Line 2749
									St,%% Line 2749
									   Sfs,%% Line 2749
									       _X_CheckFun> when 'true' ->
	      let <_13> =
		  apply %% Line 2750
			'add_error'/3
		      (%% Line 2750
		       La, %% Line 2750
			   {'field_name_is_variable',Name,V}, %% Line 2750
							      St)
	      in  %% Line 2750
		  {Sfs,{Vt,_13}}
	  ( <_20,_19,_18,_17,_16,_15,_14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_20,_19,_18,_17,_16,_15,_14})
		  -| [{'function_name',{'check_field',7}}] )
	    -| ['compiler_generated'] )
	end
'pattern_field'/4 =
    %% Line 2756
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <{'atom',La,F},Name,Fields,St> when 'true' ->
	      %% Line 2757
	      case apply 'find_field'/2
		       (F, Fields) of
		%% Line 2758
		<{'ok',_X_I}> when 'true' ->
		    {[],St}
		%% Line 2759
		<'error'> when 'true' ->
		    let <_4> =
			apply 'add_error'/3
			    (La, {'undefined_field',Name,F}, St)
		    in  {[],_4}
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  ( <_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6})
		  -| [{'function_name',{'pattern_field',4}}] )
	    -| ['compiler_generated'] )
	end
'pattern_fields'/7 =
    %% Line 2766
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	let <CheckFun> =
	    fun (_9,_8,_7) ->
		%% Line 2767
		apply 'pattern'/5
		    (_9, _8, _4, _5, _7)
	in  let <_22> =
		fun (_19,_18) ->
		    %% Line 2769
		    case <_19,_18> of
		      <Field,{Sfsa,Vta,Bvt1,Sta}> when 'true' ->
			  %% Line 2770
			  case apply 'check_field'/7
				   (Field, _1, _2, _3, %% Line 2771
						       Sta, %% Line 2771
							    Sfsa, %% Line 2771
								  CheckFun) of
			    %% Line 2772
			    <{Sfsb,{Vtb,Stb}}> when 'true' ->
				let <_14> =
				    apply %% Line 2773
					  'vtmerge_pat'/2
					(%% Line 2773
					 Vta, %% Line 2773
					      Vtb)
				in  %% Line 2773
				    {Sfsb,_14,[],Stb}
			    %% Line 2774
			    <{Sfsb,{Vtb,Bvt2,Stb}}> when 'true' ->
				let <_16> =
				    apply %% Line 2775
					  'vtmerge_pat'/2
					(%% Line 2775
					 Vta, %% Line 2775
					      Vtb)
				in  let <_15> =
					apply %% Line 2776
					      'vtmerge_pat'/2
					    (%% Line 2776
					     Bvt1, %% Line 2776
						   Bvt2)
				    in  %% Line 2775
					{Sfsb,_16,_15,%% Line 2776
						      Stb}
			    ( <_17> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_17})
			      -| ['compiler_generated'] )
			  end
		      ( <_21,_20> when 'true' ->
			    ( primop 'match_fail'
				  ({'function_clause',_21,_20})
			      -| [{'function_name',{'-pattern_fields/7-fun-1-',2}}] )
			-| ['compiler_generated'] )
		    end
	    in  %% Line 2768
		case %% Line 2769
		     call 'lists':'foldl'
			 (_22, %% Line 2778
			       {[],[],[],_6}, _0) of
		  <{_X_SeenFields,Uvt,Bvt1,St1}> when 'true' ->
		      %% Line 2779
		      {Uvt,Bvt1,St1}
		  ( <_23> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_23})
		    -| ['compiler_generated'] )
		end
'record_field'/4 =
    %% Line 2785
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <{'atom',La,F},Name,Fields,St> when 'true' ->
	      %% Line 2786
	      case apply 'find_field'/2
		       (F, Fields) of
		%% Line 2787
		<{'ok',_X_I}> when 'true' ->
		    {[],St}
		%% Line 2788
		<'error'> when 'true' ->
		    let <_4> =
			apply 'add_error'/3
			    (La, {'undefined_field',Name,F}, St)
		    in  {[],_4}
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  ( <_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6})
		  -| [{'function_name',{'record_field',4}}] )
	    -| ['compiler_generated'] )
	end
'init_fields'/6 =
    %% Line 2803
    fun (_0,_1,_2,_3,_4,_5) ->
	let <_6> = 'expr'/3
	in  %% Line 2804
	    case apply 'check_fields'/6
		     (_0, _2, _3, _4, _5, _6) of
	      <{Vt1,St1}> when 'true' ->
		  let <Defs> =
		      apply %% Line 2805
			    'init_fields'/3
			  (_0, _1, _3)
		  in  let <_9> = 'expr'/3
		      in  %% Line 2806
			  case apply 'check_fields'/6
				   (Defs, _2, _3, Vt1, St1, _9) of
			    <{_23,St2}> when 'true' ->
				%% Line 2807
				( case St2 of
				    ( <( {'lint',_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_rec128,_49,_50,_51,_52,_53,_54,_55,_56}
					 -| ['compiler_generated'] )> when 'true' ->
					  case St1 of
					    <{'lint',_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91}> when 'true' ->
						let <_16> =
						    call 'erlang':'setelement'
							(27, St1, _rec128)
						in  {Vt1,_16}
					    ( <_92> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','lint'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				      -| ['compiler_generated'] )
				    ( <_57> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','lint'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    ( <_10> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_10})
			      -| ['compiler_generated'] )
			  end
	      ( <_7> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_7})
		-| ['compiler_generated'] )
	    end
'ginit_fields'/6 =
    %% Line 2809
    fun (_0,_1,_2,_3,_4,_5) ->
	let <_6> = 'gexpr'/3
	in  %% Line 2810
	    case apply 'check_fields'/6
		     (_0, _2, _3, _4, _5, _6) of
	      <{Vt1,St1}> when 'true' ->
		  let <Defs> =
		      apply %% Line 2811
			    'init_fields'/3
			  (_0, _1, _3)
		  in  %% Line 2812
		      case St1 of
			<{'lint',_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69}> when 'true' ->
			    let <_11> =
				call 'erlang':'setelement'
				    (21, St1, [])
			    in  let <_13> = 'gexpr'/3
				in  %% Line 2813
				    case apply 'check_fields'/6
					     (Defs, _2, _3, Vt1, _11, _13) of
				      <{_71,St3}> when 'true' ->
					  %% Line 2814
					  case St3 of
					    <{'lint',_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,Errors,_91,_92,_93,_94,_95,Usage,_96,_97,_98,_99,_100,_101,_102,_103}> when 'true' ->
						let <_20> =
						    letrec
							'lc$^2'/1 =
							    %% Line 2815
							    fun (_18) ->
								case _18 of
								  <[E = {_X_File,{_X_Line,'erl_lint','illegal_guard_expr'}}|_17]> when 'true' ->
								      let <_19> =
									  apply 'lc$^2'/1
									      (_17)
								      in  ( [E|_19]
									    -| ['compiler_generated'] )
								  ( <[_16|_17]> when 'true' ->
									apply 'lc$^2'/1
									    (_17)
								    -| ['compiler_generated'] )
								  <[]> when 'true' ->
								      []
								  ( <_173> when 'true' ->
									( primop 'match_fail'
									      ({'function_clause',_173})
									  -| [{'function_name',{'lc$^2',1}}] )
								    -| ['compiler_generated'] )
								end
						    in  %% Line 2815
							apply 'lc$^2'/1
							    (Errors)
						in  %% Line 2816
						    ( case St1 of
							( <( {'lint',_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_rec132,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136}
							     -| ['compiler_generated'] )> when 'true' ->
							      let <_rec130> =
								  call 'erlang':'++'
								      (_20, _rec132)
							      in  case St1 of
								    <{'lint',_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_171}> when 'true' ->
									let <_26> =
									    call 'erlang':'setelement'
										(27, St1, Usage)
									in  let <_28> =
										call 'erlang':'setelement'
										    (21, _26, _rec130)
									    in  %% Line 2817
										{Vt1,_28}
								    ( <_172> when 'true' ->
									  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'error'
														 -| ['compiler_generated'] )
										(( {'badrecord','lint'}
										   -| ['compiler_generated'] ))
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								  end
							  -| ['compiler_generated'] )
							( <_137> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','lint'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
					    ( <_15> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_15})
					      -| ['compiler_generated'] )
					  end
				      ( <_14> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_14})
					-| ['compiler_generated'] )
				    end
			( <_70> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','lint'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	      ( <_7> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_7})
		-| ['compiler_generated'] )
	    end
'init_fields'/3 =
    %% Line 2820
    fun (_0,_1,_2) ->
	%% Line 2822
	( letrec
	      'lc$^0'/1 =
		  fun (_6) ->
		      case _6 of
			<[{'record_field',Lf,_@r0 = {'atom',La,F},Di}|_4]> when 'true' ->
			    %% Line 2823
			    ( case apply 'exist_field'/2
				       (F, _0) of
				<'false'> when 'true' ->
				    let <_7> =
					apply 'copy_expr'/2
					    (Di, _1)
				    in  let <_8> =
					    apply 'lc$^0'/1
						(_4)
					in  ( [{'record_field',Lf,_@r0,_7}|_8]
					      -| ['compiler_generated'] )
				( <'true'> when 'true' ->
				      apply 'lc$^0'/1
					  (_4)
				  -| ['compiler_generated'] )
				( <_cor_variable> when 'true' ->
				      call 'erlang':'error'
					  ('badarg')
				  -| ['compiler_generated'] )
			      end
			      -| ['list_comprehension'] )
			( <[_3|_4]> when 'true' ->
			      apply 'lc$^0'/1
				  (_4)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_13> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_13})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_2)
	  -| ['list_comprehension'] )
'update_fields'/5 =
    %% Line 2828
    fun (_0,_1,_2,_3,_4) ->
	let <_5> = 'expr'/3
	in  %% Line 2829
	    apply 'check_fields'/6
		(_0, _1, _2, _3, _4, _5)
'exist_field'/2 =
    %% Line 2834
    fun (_0,_1) ->
	case <_0,_1> of
	  <F,[{'record_field',_X_Lf,{'atom',_X_La,_4},_X_Val}|_X_Fs]>
	      when call 'erlang':'=:='
		    (_4,
		     F) ->
	      'true'
	  %% Line 2835
	  <F,[_5|Fs]> when 'true' ->
	      apply 'exist_field'/2
		  (F, Fs)
	  %% Line 2836
	  <_X_F,[]> when 'true' ->
	      'false'
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'exist_field',2}}] )
	    -| ['compiler_generated'] )
	end
'find_field'/2 =
    %% Line 2841
    fun (_0,_1) ->
	case <_0,_1> of
	  <_X_F,[{'record_field',_X_Lf,{'atom',_X_La,_4},Val}|_X_Fs]>
	      when call 'erlang':'=:='
		    (_4,
		     _X_F) ->
	      {'ok',Val}
	  %% Line 2842
	  <F,[_5|Fs]> when 'true' ->
	      apply 'find_field'/2
		  (F, Fs)
	  %% Line 2843
	  <_X_F,[]> when 'true' ->
	      'error'
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'find_field',2}}] )
	    -| ['compiler_generated'] )
	end
'type_def'/6 =
    %% Line 2851
    fun (_0,_1,_2,_3,_4,_5) ->
	%% Line 2852
	( case _5 of
	    ( <( {'lint',_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_rec133,_69,_70,_71,_72}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Arity> =
		      call %% Line 2853
			   'erlang':%% Line 2853
				    'length'
			  (_4)
		  in  let <TypePair> = {_2,%% Line 2854
			      Arity}
		      in  let <Info> = {%% Line 2855
			       'typeinfo',_0,_1}
			  in  let <StoreType> =
				  fun (_18) ->
				      let <NewDefs> =
					  call %% Line 2858
					       'maps':%% Line 2858
						      'put'
					      (%% Line 2858
					       TypePair, %% Line 2858
							 Info, _rec133)
				      in  let <_13> =
					      apply %% Line 2859
						    'nowarn'/0
						  ()
					  in  let <CheckType> =
						  {%% Line 2859
						   'type',_13,%% Line 2859
							      'product',%% Line 2859
									[_3|_4]}
					      in  %% Line 2860
						  case _18 of
						    <{'lint',_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107}> when 'true' ->
							let <_17> =
							    call 'erlang':'setelement'
								(31, _18, NewDefs)
							in  apply 'check_type'/2
								(CheckType, _17)
						    ( <_108> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','lint'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
			      in  %% Line 2862
				  case apply 'is_default_type'/1
					   (TypePair) of
				    %% Line 2863
				    <'true'> when 'true' ->
					%% Line 2864
					case apply 'is_obsolete_builtin_type'/1
						 (TypePair) of
					  %% Line 2865
					  <'true'> when 'true' ->
					      apply StoreType
						  (_5)
					  %% Line 2866
					  <'false'> when 'true' ->
					      %% Line 2867
					      case apply 'is_newly_introduced_builtin_type'/1
						       (TypePair) of
						%% Line 2869
						<'true'> when 'true' ->
						    let <Warn> = {%% Line 2870
							 'new_builtin_type',%% Line 2870
									    TypePair}
						    in  let <St1> =
							    apply %% Line 2871
								  'add_warning'/3
								(_1, %% Line 2871
								     Warn, _5)
							in  %% Line 2872
							    apply StoreType
								(St1)
						%% Line 2873
						<'false'> when 'true' ->
						    %% Line 2874
						    apply 'add_error'/3
							(_1, {'builtin_type',TypePair}, _5)
						( <_23> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_23})
						  -| ['compiler_generated'] )
					      end
					  ( <_24> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_24})
					    -| ['compiler_generated'] )
					end
				    %% Line 2877
				    <'false'> when 'true' ->
					%% Line 2878
					case call 'erlang':'is_map_key'
						 (TypePair, _rec133) of
					  %% Line 2879
					  <'true'> when 'true' ->
					      %% Line 2880
					      apply 'add_error'/3
						  (_1, {'redefine_type',TypePair}, _5)
					  %% Line 2881
					  <'false'> when 'true' ->
					      let <_27> =
						  case <> of
						    %% Line 2883
						    ( <>
							  when call 'erlang':'=:='
								(_0,
								 'opaque') ->
							  %% Line 2884
							  apply 'is_underspecified'/2
							      (_3, Arity)
						      -| ['compiler_generated'] )
						    %% Line 2883
						    ( <> when 'true' ->
							  'false'
						      -| ['compiler_generated'] )
						  end
					      in  let <_30> =
						      case _27 of
							%% Line 2886
							<'true'> when 'true' ->
							    let <Warn> = {%% Line 2887
								 'underspecified_opaque',%% Line 2887
											 TypePair}
							    in  %% Line 2888
								apply 'add_warning'/3
								    (_1, Warn, _5)
							%% Line 2889
							<'false'> when 'true' ->
							    _5
							( <_29> when 'true' ->
							      %% Line 2882
							      primop 'match_fail'
								  ({'case_clause',_29})
							  -| ['compiler_generated'] )
						      end
						  in  %% Line 2891
						      apply StoreType
							  (_30)
					  ( <_32> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_32})
					    -| ['compiler_generated'] )
					end
				    ( <_33> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_33})
				      -| ['compiler_generated'] )
				  end
	      -| ['compiler_generated'] )
	    ( <_73> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'is_underspecified'/2 =
    %% Line 2895
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'type',_4,'term',[]},0> when 'true' ->
	      'true'
	  %% Line 2896
	  <{'type',_5,'any',[]},0> when 'true' ->
	      'true'
	  %% Line 2897
	  <_X_ProtType,_X_Arity> when 'true' ->
	      'false'
	end
'check_type'/2 =
    %% Line 2899
    fun (_0,_1) ->
	let <_2> =
	    call %% Line 2900
		 'maps':%% Line 2900
			'new'
		()
	in  %% Line 2900
	    case apply 'check_type'/3
		     (_0, _2, _1) of
	      <{SeenVars,St1}> when 'true' ->
		  let <_11> =
		      fun (_7,_6,_5) ->
			  %% Line 2901
			  case <_7,_6,_5> of
			    <Var,{'seen_once',Line},AccSt> when 'true' ->
				%% Line 2902
				case call 'erlang':'atom_to_list'
					 (Var) of
				  %% Line 2903
				  <[95|_14]> when 'true' ->
				      AccSt
				  %% Line 2904
				  <_15> when 'true' ->
				      apply 'add_error'/3
					  (Line, {'singleton_typevar',Var}, AccSt)
				end
			    %% Line 2906
			    <_X_Var,'seen_multiple',AccSt> when 'true' ->
				%% Line 2907
				AccSt
			    ( <_10,_9,_8> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_10,_9,_8})
				    -| [{'function_name',{'-check_type/2-fun-0-',3}}] )
			      -| ['compiler_generated'] )
			  end
		  in  %% Line 2901
		      call 'maps':'fold'
			  (_11, %% Line 2908
				St1, %% Line 2908
				     SeenVars)
	      ( <_3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_3})
		-| ['compiler_generated'] )
	    end
'check_type'/3 =
    %% Line 2910
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{'ann_type',_X_L,[_X_Var|[Type|[]]]},SeenVars,St> when 'true' ->
	      %% Line 2911
	      apply 'check_type'/3
		  (Type, SeenVars, St)
	  %% Line 2912
	  <{'remote_type',L,[{'atom',_84,Mod}|[{'atom',_85,Name}|[Args|[]]]]},%% Line 2913
									      SeenVars,%% Line 2913
										       St00> when 'true' ->
	      let <St0> =
		  apply %% Line 2914
			'check_module_name'/3
		      (%% Line 2914
		       Mod, %% Line 2914
			    L, %% Line 2914
			       St00)
	      in  let <St> =
		      apply %% Line 2915
			    'deprecated_type'/5
			  (%% Line 2915
			   L, %% Line 2915
			      Mod, %% Line 2915
				   Name, %% Line 2915
					 Args, %% Line 2915
					       St0)
		  in  %% Line 2916
		      ( case St of
			  ( <( {'lint',_86,_rec135,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118}
			       -| ['compiler_generated'] )> when 'true' ->
				%% Line 2917
				case <> of
				  %% Line 2918
				  <>
				      when call 'erlang':'=:='
					    (Mod,
					     _rec135) ->
				      apply 'check_type'/3
					  ({'user_type',L,Name,Args}, SeenVars, St)
				  %% Line 2919
				  <> when 'true' ->
				      let <_12> =
					  fun (_9,_8) ->
					      %% Line 2920
					      case <_9,_8> of
						<T,{AccSeenVars,AccSt}> when 'true' ->
						    %% Line 2921
						    apply 'check_type'/3
							(T, AccSeenVars, AccSt)
						( <_11,_10> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_11,_10})
							-| [{'function_name',{'-check_type/3-fun-0-',2}}] )
						  -| ['compiler_generated'] )
					      end
				      in  %% Line 2920
					  call 'lists':'foldl'
					      (_12, %% Line 2922
						    {SeenVars,St}, %% Line 2922
								   Args)
				end
			    -| ['compiler_generated'] )
			  ( <_119> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','lint'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 2924
	  <{'integer',_X_L,_120},SeenVars,St> when 'true' ->
	      {SeenVars,St}
	  %% Line 2925
	  <{'atom',_X_L,_121},SeenVars,St> when 'true' ->
	      {SeenVars,St}
	  %% Line 2926
	  <{'var',_X_L,'_'},SeenVars,St> when 'true' ->
	      {SeenVars,St}
	  %% Line 2927
	  <{'var',L,Name},SeenVars,St> when 'true' ->
	      let <_15> =
		  case %% Line 2929
		       call 'maps':'find'
			   (Name, SeenVars) of
		    %% Line 2930
		    <{'ok',{'seen_once',_122}}> when 'true' ->
			call 'maps':'put'
			    (Name, 'seen_multiple', SeenVars)
		    %% Line 2931
		    <{'ok','seen_multiple'}> when 'true' ->
			SeenVars
		    %% Line 2932
		    <'error'> when 'true' ->
			call 'maps':'put'
			    (Name, {'seen_once',L}, SeenVars)
		    ( <_14> when 'true' ->
			  %% Line 2929
			  primop 'match_fail'
			      ({'case_clause',_14})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 2934
		  {_15,St}
	  %% Line 2935
	  <{'type',L,'bool',[]},SeenVars,St> when 'true' ->
	      let <_17> =
		  apply %% Line 2936
			'add_warning'/3
		      (%% Line 2936
		       L, %% Line 2936
			  {'renamed_type','bool','boolean'}, %% Line 2936
							     St)
	      in  %% Line 2936
		  {SeenVars,_17}
	  %% Line 2937
	  <{'type',L,'fun',_@r0 = [Dom|[Range|[]]]},SeenVars,St> when 'true' ->
	      let <_19> =
		  case %% Line 2939
		       Dom of
		    %% Line 2940
		    <{'type',_123,'product',_124}> when 'true' ->
			St
		    %% Line 2941
		    <{'type',_125,'any'}> when 'true' ->
			St
		    %% Line 2942
		    <_126> when 'true' ->
			apply 'add_error'/3
			    (L, {'type_syntax','fun'}, St)
		  end
	      in  let <_21> =
		      apply %% Line 2944
			    'nowarn'/0
			  ()
		  in  %% Line 2944
		      apply 'check_type'/3
			  ({'type',_21,'product',_@r0}, SeenVars, _19)
	  %% Line 2945
	  <{'type',L,'range',[From|[To|[]]]},SeenVars,St> when 'true' ->
	      let <_23> =
		  call %% Line 2947
		       'erl_eval':%% Line 2947
				  'partial_eval'
		      (%% Line 2947
		       From)
	      in  let <_22> =
		      call %% Line 2947
			   'erl_eval':%% Line 2947
				      'partial_eval'
			  (%% Line 2947
			   To)
		  in  let <_25> =
			  case <_23,_22> of
			    %% Line 2948
			    <( {( 'integer'
				  -| ['compiler_generated'] ),_127,X}
			       -| ['compiler_generated'] ),( {( 'integer'
								-| ['compiler_generated'] ),_128,Y}
							     -| ['compiler_generated'] )>
				when call 'erlang':'<'
				      (X,
				       Y) ->
				St
			    %% Line 2949
			    <( _171
			       -| ['compiler_generated'] ),( _172
							     -| ['compiler_generated'] )> when 'true' ->
				apply 'add_error'/3
				    (L, {'type_syntax','range'}, St)
			  end
		      in  %% Line 2951
			  {SeenVars,_25}
	  %% Line 2952
	  <{'type',_X_L,'map','any'},SeenVars,St> when 'true' ->
	      %% Line 2953
	      {SeenVars,St}
	  %% Line 2954
	  <{'type',_X_L,'map',Pairs},SeenVars,St> when 'true' ->
	      let <_31> =
		  fun (_28,_27) ->
		      %% Line 2955
		      case <_28,_27> of
			<Pair,{AccSeenVars,AccSt}> when 'true' ->
			    %% Line 2956
			    apply 'check_type'/3
				(Pair, AccSeenVars, AccSt)
			( <_30,_29> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_30,_29})
				-| [{'function_name',{'-check_type/3-fun-1-',2}}] )
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 2955
		  call 'lists':'foldl'
		      (_31, %% Line 2957
			    {SeenVars,St}, %% Line 2957
					   Pairs)
	  %% Line 2958
	  <{'type',_X_L,'map_field_assoc',_@r1 = [Dom|[Range|[]]]},SeenVars,St> when 'true' ->
	      let <_32> =
		  apply %% Line 2959
			'nowarn'/0
		      ()
	      in  %% Line 2959
		  apply 'check_type'/3
		      ({'type',_32,'product',_@r1}, SeenVars, St)
	  %% Line 2960
	  <{'type',_X_L,'tuple','any'},SeenVars,St> when 'true' ->
	      {SeenVars,St}
	  %% Line 2961
	  <{'type',_X_L,'any'},SeenVars,St> when 'true' ->
	      {SeenVars,St}
	  %% Line 2962
	  <{'type',L,'binary',[Base|[Unit|[]]]},SeenVars,St> when 'true' ->
	      let <_34> =
		  call %% Line 2964
		       'erl_eval':%% Line 2964
				  'partial_eval'
		      (%% Line 2964
		       Base)
	      in  let <_33> =
		      call %% Line 2964
			   'erl_eval':%% Line 2964
				      'partial_eval'
			  (%% Line 2964
			   Unit)
		  in  let <_38> =
			  case <_34,_33> of
			    %% Line 2965
			    <( {( 'integer'
				  -| ['compiler_generated'] ),_130,BaseVal}
			       -| ['compiler_generated'] ),( {( 'integer'
								-| ['compiler_generated'] ),_131,%% Line 2966
												 UnitVal}
							     -| ['compiler_generated'] )>
				when let <_35> =
				      call %% Line 2966
					   'erlang':%% Line 2966
						    '>='
					  (%% Line 2966
					   BaseVal, %% Line 2966
						    0)
				  in  let <_36> =
					  call %% Line 2966
					       'erlang':%% Line 2966
							'>='
					      (%% Line 2966
					       UnitVal, %% Line 2966
							0)
				      in  %% Line 2966
					  call 'erlang':'and'
					      (_35, _36) ->
				%% Line 2966
				St
			    %% Line 2967
			    <( _175
			       -| ['compiler_generated'] ),( _176
							     -| ['compiler_generated'] )> when 'true' ->
				apply 'add_error'/3
				    (L, {'type_syntax','binary'}, St)
			  end
		      in  %% Line 2969
			  {SeenVars,_38}
	  %% Line 2970
	  <{'type',L,'record',[Name|Fields]},SeenVars,St> when 'true' ->
	      %% Line 2971
	      case Name of
		%% Line 2972
		<{'atom',_133,Atom}> when 'true' ->
		    let <St1> =
			apply %% Line 2973
			      'used_record'/2
			    (%% Line 2973
			     Atom, %% Line 2973
				   St)
		    in  %% Line 2974
			apply 'check_record_types'/5
			    (L, Atom, Fields, SeenVars, St1)
		%% Line 2975
		<_134> when 'true' ->
		    let <_41> =
			apply 'add_error'/3
			    (L, {'type_syntax','record'}, St)
		    in  {SeenVars,_41}
	      end
	  %% Line 2977
	  <{'type',_X_L,Tag,Args},SeenVars,St>
	      when let <_43> =
		    call 'erlang':'=:='
			(Tag, 'product')
		in  let <_44> =
			call %% Line 2978
			     'erlang':%% Line 2978
				      '=:='
			    (%% Line 2978
			     Tag, %% Line 2978
				  'union')
		    in  let <_45> =
			    call %% Line 2979
				 'erlang':%% Line 2979
					  '=:='
				(%% Line 2979
				 Tag, %% Line 2979
				      'tuple')
			in  let <_46> =
				call %% Line 2978
				     'erlang':%% Line 2978
					      'or'
				    (_44, _45)
			    in  call 'erlang':'or'
				    (_43, _46) ->
	      let <_51> =
		  fun (_48,_47) ->
		      %% Line 2980
		      case <_48,_47> of
			<T,{AccSeenVars,AccSt}> when 'true' ->
			    %% Line 2981
			    apply 'check_type'/3
				(T, AccSeenVars, AccSt)
			( <_50,_49> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_50,_49})
				-| [{'function_name',{'-check_type/3-fun-2-',2}}] )
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 2980
		  call 'lists':'foldl'
		      (_51, %% Line 2982
			    {SeenVars,St}, %% Line 2982
					   Args)
	  %% Line 2983
	  <{'type',La,TypeName,Args},SeenVars,St> when 'true' ->
	      %% Line 2984
	      case St of
		<{'lint',_135,Module,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,Types,_163,_164,_165,_166}> when 'true' ->
		    let <Arity> =
			call %% Line 2985
			     'erlang':%% Line 2985
				      'length'
			    (%% Line 2985
			     Args)
		    in  let <TypePair> = {%% Line 2986
			     TypeName,%% Line 2986
				      Arity}
			in  let <_57> =
				case %% Line 2987
				     apply 'is_warn_enabled'/2
					 ('deprecated_type', St) of
				  %% Line 2988
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					apply 'obsolete_builtin_type'/1
					    (TypePair)
				    -| ['compiler_generated'] )
				  %% Line 2988
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				  %% Line 2988
				  ( <_55> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {( 'badarg'
						    -| ['compiler_generated'] ),_55}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			    in  let <_65> =
				    case _57 of
				      %% Line 2990
				      <{'deprecated',Repl,_167}>
					  when try
						let <_59> =
						    call 'erlang':'element'
							(1, Repl)
						in  call 'erlang':'=/='
							(_59, Module)
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  %% Line 2991
					  case call 'maps':'find'
						   (TypePair, Types) of
					    %% Line 2992
					    <{'ok',_168}> when 'true' ->
						%% Line 2993
						apply 'used_type'/3
						    (TypePair, La, St)
					    %% Line 2994
					    <'error'> when 'true' ->
						%% Line 2995
						case _57 of
						  <{'deprecated',Replacement,Rel}> when 'true' ->
						      let <W> =
							  {%% Line 2996
							   'deprecated_builtin_type',%% Line 2997
										     TypePair,%% Line 2997
											      Replacement,%% Line 2997
													  Rel}
						      in  %% Line 2998
							  apply 'add_warning'/3
							      (La, W, St)
						  ( <_60> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_60})
						    -| ['compiler_generated'] )
						end
					    ( <_63> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_63})
					      -| ['compiler_generated'] )
					  end
				      %% Line 3000
				      <_169> when 'true' ->
					  St
				    end
				in  let <_67> =
					apply %% Line 3002
					      'nowarn'/0
					    ()
				    in  %% Line 3002
					apply 'check_type'/3
					    ({'type',_67,'product',Args}, SeenVars, _65)
		( <_52> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_52})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3003
	  <{'user_type',L,TypeName,Args},SeenVars,St> when 'true' ->
	      let <Arity> =
		  call %% Line 3004
		       'erlang':%% Line 3004
				'length'
		      (%% Line 3004
		       Args)
	      in  let <TypePair> = {%% Line 3005
		       TypeName,%% Line 3005
				Arity}
		  in  let <St1> =
			  apply %% Line 3006
				'used_type'/3
			      (%% Line 3006
			       TypePair, %% Line 3006
					 L, %% Line 3006
					    St)
		      in  let <_75> =
			      fun (_72,_71) ->
				  %% Line 3007
				  case <_72,_71> of
				    <T,{AccSeenVars,AccSt}> when 'true' ->
					%% Line 3008
					apply 'check_type'/3
					    (T, AccSeenVars, AccSt)
				    ( <_74,_73> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_74,_73})
					    -| [{'function_name',{'-check_type/3-fun-3-',2}}] )
				      -| ['compiler_generated'] )
				  end
			  in  %% Line 3007
			      call 'lists':'foldl'
				  (_75, %% Line 3009
					{SeenVars,St1}, %% Line 3009
							Args)
	  %% Line 3010
	  <[{'typed_record_field',Field,_X_T}|_170],SeenVars,St> when 'true' ->
	      let <_76> =
		  call %% Line 3011
		       'erlang':%% Line 3011
				'element'
		      (%% Line 3011
		       2, %% Line 3011
			  Field)
	      in  let <_77> =
		      apply %% Line 3011
			    'add_error'/3
			  (_76, %% Line 3011
				'old_abstract_code', %% Line 3011
						     St)
		  in  %% Line 3011
		      {SeenVars,_77}
	  %% Line 3012
	  <I,SeenVars,St> when 'true' ->
	      %% Line 3013
	      case call 'erl_eval':'partial_eval'
		       (I) of
		%% Line 3014
		<{'integer',_X_ILn,_X_Integer}> when 'true' ->
		    {SeenVars,St}
		%% Line 3015
		<_X_Other> when 'true' ->
		    let <_78> =
			call %% Line 3016
			     'erlang':%% Line 3016
				      'element'
			    (%% Line 3016
			     2, %% Line 3016
				I)
		    in  let <_79> =
			    apply %% Line 3016
				  'add_error'/3
				(_78, %% Line 3016
				      {'type_syntax','integer'}, %% Line 3016
								 St)
			in  %% Line 3016
			    {SeenVars,_79}
	      end
	end
'check_record_types'/5 =
    %% Line 3019
    fun (_0,_1,_2,_3,_4) ->
	%% Line 3020
	( case _4 of
	    ( <( {'lint',_19,_20,_21,_22,_23,_24,_rec136,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'maps':'find'
			   (_1, _rec136) of
		    %% Line 3021
		    <{'ok',{_X_L,DefFields}}> when 'true' ->
			let <_9> =
			    fun (_7) ->
				%% Line 3022
				case _7 of
				  <{'type',_53,'field_type',_54}> when 'true' ->
				      'true'
				  %% Line 3023
				  <_55> when 'true' ->
				      'false'
				end
			in  %% Line 3022
			    case call 'lists':'all'
				     (_9, _2) of
			      %% Line 3025
			      <'true'> when 'true' ->
				  %% Line 3026
				  apply 'check_record_types'/6
				      (_2, _1, DefFields, _3, _4, [])
			      %% Line 3027
			      <'false'> when 'true' ->
				  let <_10> =
				      apply %% Line 3028
					    'add_error'/3
					  (_0, %% Line 3028
					       {'type_syntax','record'}, _4)
				  in  %% Line 3028
				      {_3,_10}
			      ( <_11> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_11})
				-| ['compiler_generated'] )
			    end
		    %% Line 3030
		    <'error'> when 'true' ->
			let <_12> =
			    apply %% Line 3031
				  'add_error'/3
				(_0, %% Line 3031
				     {'undefined_record',_1}, _4)
			in  %% Line 3031
			    {_3,_12}
		    ( <_13> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_13})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_52> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'check_record_types'/6 =
    %% Line 3034
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <[{'type',_20,'field_type',[{'atom',AL,FName}|[Type|[]]]}|Left],%% Line 3035
									  Name,%% Line 3035
									       DefFields,%% Line 3035
											 SeenVars,%% Line 3035
												  St,%% Line 3035
												     SeenFields> when 'true' ->
	      let <_7> =
		  case %% Line 3037
		       apply 'exist_field'/2
			   (FName, DefFields) of
		    %% Line 3038
		    <'true'> when 'true' ->
			St
		    %% Line 3039
		    <'false'> when 'true' ->
			apply 'add_error'/3
			    (AL, {'undefined_field',Name,FName}, St)
		    ( <_6> when 'true' ->
			  %% Line 3037
			  primop 'match_fail'
			      ({'case_clause',_6})
		      -| ['compiler_generated'] )
		  end
	      in  let <_10> =
		      case %% Line 3042
			   call 'ordsets':'is_element'
			       (FName, SeenFields) of
			%% Line 3043
			<'true'> when 'true' ->
			    apply 'add_error'/3
				(AL, {'redefine_field',Name,FName}, _7)
			%% Line 3044
			<'false'> when 'true' ->
			    _7
			( <_9> when 'true' ->
			      %% Line 3042
			      primop 'match_fail'
				  ({'case_clause',_9})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 3047
		      case apply 'check_type'/3
			       (Type, SeenVars, _10) of
			<{NewSeenVars,St3}> when 'true' ->
			    let <NewSeenFields> =
				call %% Line 3048
				     'ordsets':%% Line 3048
					       'add_element'
				    (%% Line 3048
				     FName, %% Line 3048
					    SeenFields)
			    in  %% Line 3049
				apply 'check_record_types'/6
				    (Left, Name, DefFields, NewSeenVars, St3, NewSeenFields)
			( <_12> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_12})
			  -| ['compiler_generated'] )
		      end
	  %% Line 3050
	  <[],_X_Name,_X_DefFields,SeenVars,St,_X_SeenFields> when 'true' ->
	      %% Line 3051
	      {SeenVars,St}
	  ( <_19,_18,_17,_16,_15,_14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_19,_18,_17,_16,_15,_14})
		  -| [{'function_name',{'check_record_types',6}}] )
	    -| ['compiler_generated'] )
	end
'used_type'/3 =
    %% Line 3053
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <TypePair,L,St = {'lint',_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,File,_38,_39,_40,Usage,_41,_42,_43,_44,_45,_46,_47,_48}> when 'true' ->
	      %% Line 3054
	      ( case Usage of
		  ( <( {'usage',_49,_50,_51,_rec137}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_6> =
			    call %% Line 3055
				 'erl_anno':%% Line 3055
					    'set_file'
				(%% Line 3055
				 File, %% Line 3055
				       L)
			in  let <UsedTypes> =
				call %% Line 3055
				     'maps':%% Line 3055
					    'put'
				    (%% Line 3055
				     TypePair, _6, _rec137)
			    in  %% Line 3056
				case Usage of
				  <{'usage',_53,_54,_55,_56}> when 'true' ->
				      let <_10> =
					  call 'erlang':'setelement'
					      (5, Usage, UsedTypes)
				      in  case St of
					    <{'lint',_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91}> when 'true' ->
						call 'erlang':'setelement'
						    (27, St, _10)
					    ( <_92> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','lint'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				  ( <_57> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','usage'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
		    -| ['compiler_generated'] )
		  ( <_52> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','usage'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_16,_15,_14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15,_14})
		  -| [{'function_name',{'used_type',3}}] )
	    -| ['compiler_generated'] )
	end
'is_default_type'/1 =
    %% Line 3058
    fun (_0) ->
	case _0 of
	  <{Name,NumberOfTypeVariables}> when 'true' ->
	      %% Line 3059
	      call 'erl_internal':'is_type'
		  (Name, NumberOfTypeVariables)
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'is_default_type',1}}] )
	    -| ['compiler_generated'] )
	end
'is_newly_introduced_builtin_type'/1 =
    %% Line 3061
    fun (_0) ->
	case _0 of
	  <{Name,_2}>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      'false'
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'is_newly_introduced_builtin_type',1}}] )
	    -| ['compiler_generated'] )
	end
'is_obsolete_builtin_type'/1 =
    %% Line 3063
    fun (_0) ->
	let <_1> =
	    apply %% Line 3064
		  'obsolete_builtin_type'/1
		(_0)
	in  %% Line 3064
	    call 'erlang':'=/='
		(_1, 'no')
'obsolete_builtin_type'/1 =
    %% Line 3067
    fun (_0) ->
	case _0 of
	  <{1,255}> when 'true' ->
	      %% Line 3068
	      {'deprecated',{2,255},[]}
	  %% Line 3069
	  <{Name,A}>
	      when let <_1> =
		    call 'erlang':'is_atom'
			(Name)
		in  let <_2> =
			call 'erlang':'is_integer'
			    (A)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      'no'
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'obsolete_builtin_type',1}}] )
	    -| ['compiler_generated'] )
	end
'spec_decl'/4 =
    %% Line 3073
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Line,MFA0,TypeSpecs,St00 = {'lint',_20,Mod,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,Specs,_45,_46,_47,_48,_49,_50,_51}> when 'true' ->
	      let <_5,Arity> =
		  case %% Line 3074
		       MFA0 of
		    %% Line 3075
		    <{F,Arity}> when 'true' ->
			<{Mod,F,Arity},Arity>
		    %% Line 3076
		    <{_X_M,_X_F,Arity}> when 'true' ->
			<MFA0,Arity>
		    ( <_4> when 'true' ->
			  %% Line 3074
			  primop 'match_fail'
			      ({'case_clause',_4})
		      -| ['compiler_generated'] )
		  end
	      in  let <_7> =
		      call %% Line 3078
			   'erlang':%% Line 3078
				    'element'
			  (%% Line 3078
			   1, _5)
		  in  let <St0> =
			  apply %% Line 3078
				'check_module_name'/3
			      (_7, %% Line 3078
				   Line, %% Line 3078
					 St00)
		      in  let <_rec141> =
			      call %% Line 3079
				   'maps':%% Line 3079
					  'put'
				  (_5, %% Line 3079
				       Line, %% Line 3079
					     Specs)
			  in  %% Line 3079
			      case St0 of
				<{'lint',_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85}> when 'true' ->
				    let <_12> =
					call 'erlang':'setelement'
					    (28, St0, _rec141)
				    in  %% Line 3080
					case call 'erlang':'is_map_key'
						 (_5, Specs) of
					  %% Line 3081
					  <'true'> when 'true' ->
					      apply 'add_error'/3
						  (Line, {'redefine_spec',MFA0}, _12)
					  %% Line 3082
					  <'false'> when 'true' ->
					      %% Line 3083
					      case _5 of
						%% Line 3084
						<{_87,_88,_89}>
						    when call 'erlang':'=:='
							  (_87,
							   Mod) ->
						    %% Line 3085
						    apply 'check_specs'/4
							(TypeSpecs, 'spec_wrong_arity', Arity, _12)
						%% Line 3086
						<_90> when 'true' ->
						    %% Line 3087
						    apply 'add_error'/3
							(Line, {'bad_module',_5}, _12)
					      end
					  ( <_15> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_15})
					    -| ['compiler_generated'] )
					end
				( <_86> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','lint'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
	  ( <_19,_18,_17,_16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_19,_18,_17,_16})
		  -| [{'function_name',{'spec_decl',4}}] )
	    -| ['compiler_generated'] )
	end
'callback_decl'/4 =
    %% Line 3093
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Line,MFA0,TypeSpecs,%% Line 3094
			       St0 = %% Line 3094
				     {'lint',_17,Mod,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,Callbacks,_43,_44,_45,_46,_47,_48}> when 'true' ->
	      %% Line 3095
	      case MFA0 of
		%% Line 3096
		<{M,_X_F,_X_A}> when 'true' ->
		    let <St1> =
			apply %% Line 3097
			      'check_module_name'/3
			    (%% Line 3097
			     M, %% Line 3097
				Line, %% Line 3097
				      St0)
		    in  %% Line 3098
			apply 'add_error'/3
			    (Line, {'bad_callback',MFA0}, St1)
		%% Line 3099
		<{F,Arity}> when 'true' ->
		    let <MFA> = {%% Line 3100
			 Mod,%% Line 3100
			     F,%% Line 3100
			       Arity}
		    in  let <_rec143> =
			    call %% Line 3101
				 'maps':%% Line 3101
					'put'
				(%% Line 3101
				 MFA, %% Line 3101
				      Line, %% Line 3101
					    Callbacks)
			in  %% Line 3101
			    case St0 of
			      <{'lint',_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82}> when 'true' ->
				  let <_9> =
				      call 'erlang':'setelement'
					  (29, St0, _rec143)
				  in  %% Line 3102
				      case call 'erlang':'is_map_key'
					       (MFA, Callbacks) of
					%% Line 3103
					<'true'> when 'true' ->
					    apply 'add_error'/3
						(Line, {'redefine_callback',MFA0}, _9)
					%% Line 3104
					<'false'> when 'true' ->
					    apply 'check_specs'/4
						(TypeSpecs, 'callback_wrong_arity', %% Line 3105
										    Arity, _9)
					( <_11> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_11})
					  -| ['compiler_generated'] )
				      end
			      ( <_83> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','lint'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
		( <_12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_12})
		  -| ['compiler_generated'] )
	      end
	  ( <_16,_15,_14,_13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15,_14,_13})
		  -| [{'function_name',{'callback_decl',4}}] )
	    -| ['compiler_generated'] )
	end
'optional_callbacks'/3 =
    %% Line 3111
    fun (_0,_1,_2) ->
	%% Line 3112
	try
	    case apply 'is_fa_list'/1
		     (_1) of
	      <'true'> when 'true' ->
		  _1
	      ( <_3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_3})
		-| ['compiler_generated'] )
	    end
	of <_4> ->
	    %% Line 3114
	    apply 'optional_cbs'/3
		(_0, _4, _2)
	catch <_8,_7,_6> ->
	    _2
'optional_cbs'/3 =
    %% Line 3120
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <_X_Line,[],St> when 'true' ->
	      %% Line 3121
	      St
	  %% Line 3122
	  <Line,[_@r0 = {F,A}|FAs],St0> when 'true' ->
	      %% Line 3123
	      case St0 of
		<{'lint',_16,Mod,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,OptionalCbs,_43,_44,_45,_46,_47}> when 'true' ->
		    let <MFA> = {%% Line 3124
			 Mod,%% Line 3124
			     F,%% Line 3124
			       A}
		    in  let <_rec145> =
			    call %% Line 3125
				 'maps':%% Line 3125
					'put'
				(%% Line 3125
				 MFA, %% Line 3125
				      Line, %% Line 3125
					    OptionalCbs)
			in  %% Line 3125
			    case St0 of
			      <{'lint',_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81}> when 'true' ->
				  let <_8> =
				      call 'erlang':'setelement'
					  (30, St0, _rec145)
				  in  let <_11> =
					  case %% Line 3126
					       call 'erlang':'is_map_key'
						   (MFA, OptionalCbs) of
					    %% Line 3127
					    <'true'> when 'true' ->
						%% Line 3128
						apply 'add_error'/3
						    (Line, {'redefine_optional_callback',_@r0}, _8)
					    %% Line 3129
					    <'false'> when 'true' ->
						_8
					    ( <_10> when 'true' ->
						  %% Line 3126
						  primop 'match_fail'
						      ({'case_clause',_10})
					      -| ['compiler_generated'] )
					  end
				      in  %% Line 3132
					  apply 'optional_cbs'/3
					      (Line, FAs, _11)
			      ( <_82> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','lint'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  ( <_15,_14,_13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_15,_14,_13})
		  -| [{'function_name',{'optional_cbs',3}}] )
	    -| ['compiler_generated'] )
	end
'is_fa_list'/1 =
    %% Line 3134
    fun (_0) ->
	case _0 of
	  <[E|L]> when 'true' ->
	      ( case apply 'is_fa'/1
			 (E) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'is_fa_list'/1
			    (L)
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_1> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_1}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 3135
	  <[]> when 'true' ->
	      'true'
	  %% Line 3136
	  <_4> when 'true' ->
	      'false'
	end
'is_fa'/1 =
    %% Line 3138
    fun (_0) ->
	case _0 of
	  <{FuncName,Arity}>
	      when %% Line 3139
		try
		    let <_1> =
			call 'erlang':'is_atom'
			    (FuncName)
		    in  let <_2> =
			    call 'erlang':'is_integer'
				(Arity)
			in  let <_3> =
				call 'erlang':'>='
				    (Arity, 0)
			    in  let <_4> =
				    call 'erlang':'and'
					(_2, _3)
				in  call 'erlang':'and'
					(_1, _4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 3139
	      'true'
	  %% Line 3140
	  <_6> when 'true' ->
	      'false'
	end
'check_module_name'/3 =
    %% Line 3142
    fun (_0,_1,_2) ->
	%% Line 3143
	case apply 'is_latin1_name'/1
		 (_0) of
	  %% Line 3144
	  <'true'> when 'true' ->
	      _2
	  %% Line 3145
	  <'false'> when 'true' ->
	      %% Line 3146
	      apply 'add_error'/3
		  (_1, 'non_latin1_module_unsupported', _2)
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_3})
	    -| ['compiler_generated'] )
	end
'is_latin1_name'/1 =
    %% Line 3149
    fun (_0) ->
	let <_1> =
	    call %% Line 3150
		 'erlang':%% Line 3150
			  'atom_to_list'
		(_0)
	in  %% Line 3150
	    call 'io_lib':'latin1_char_list'
		(_1)
'check_specs'/4 =
    %% Line 3152
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[FunType|Left],ETag,Arity,St0> when 'true' ->
	      let <_34,_35> =
		  case %% Line 3154
		       FunType of
		    %% Line 3155
		    <{'type',_25,'bounded_fun',[FT = {'type',_26,'fun',_27}|[Cs|[]]]}> when 'true' ->
			let <_8> =
			    letrec
				'lc$^0'/1 =
				    %% Line 3156
				    fun (_6) ->
					case _6 of
					  <[{'type',_28,'constraint',[_29|[T|[]]]}|_5]> when 'true' ->
					      let <_7> =
						  apply 'lc$^0'/1
						      (_5)
					      in  ( [T|_7]
						    -| ['compiler_generated'] )
					  ( <[_4|_5]> when 'true' ->
						apply 'lc$^0'/1
						    (_5)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_36> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_36})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  %% Line 3156
				apply 'lc$^0'/1
				    (Cs)
			in  let <_10> =
				call %% Line 3157
				     'lists':%% Line 3157
					     'append'
				    (_8)
			    in  %% Line 3157
				<FT,_10>
		    %% Line 3158
		    <FT = {'type',_30,'fun',_31}> when 'true' ->
			<FT,[]>
		    ( <_11> when 'true' ->
			  %% Line 3154
			  primop 'match_fail'
			      ({'case_clause',_11})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 3160
		  case ( _34
			 -| ['compiler_generated'] ) of
		    <{'type',L,'fun',[{'type',_32,'product',D}|[_33|[]]]}> when 'true' ->
			let <SpecArity> =
			    call %% Line 3161
				 'erlang':%% Line 3161
					  'length'
				(%% Line 3161
				 D)
			in  let <_17> =
				case <> of
				  %% Line 3163
				  <>
				      when call 'erlang':'=:='
					    (Arity,
					     SpecArity) ->
				      St0
				  %% Line 3164
				  <> when 'true' ->
				      %% Line 3165
				      apply 'add_error'/3
					  (L, ETag, St0)
				end
			    in  let <_19> =
				    apply %% Line 3167
					  'nowarn'/0
					()
				in  let <St2> =
					apply %% Line 3167
					      'check_type'/2
					    (%% Line 3167
					     {'type',_19,'product',[( _34
								      -| ['compiler_generated'] )|( _35
												    -| ['compiler_generated'] )]}, _17)
				    in  %% Line 3168
					apply 'check_specs'/4
					    (Left, ETag, Arity, St2)
		    ( <_14> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_14})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3169
	  <[],_X_ETag,_X_Arity,St> when 'true' ->
	      %% Line 3170
	      St
	  ( <_24,_23,_22,_21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_24,_23,_22,_21})
		  -| [{'function_name',{'check_specs',4}}] )
	    -| ['compiler_generated'] )
	end
'nowarn'/0 =
    %% Line 3172
    fun () ->
	let <A0> =
	    call %% Line 3173
		 'erl_anno':%% Line 3173
			    'new'
		(%% Line 3173
		 0)
	in  let <A1> =
		call %% Line 3174
		     'erl_anno':%% Line 3174
				'set_generated'
		    (%% Line 3174
		     'true', %% Line 3174
			     A0)
	    in  %% Line 3175
		call 'erl_anno':'set_file'
		    ([], A1)
'check_specs_without_function'/1 =
    %% Line 3177
    fun (_0) ->
	case _0 of
	  <St = {'lint',_11,Mod,_12,_13,_14,_15,_16,_17,_18,Funcs,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,Specs,_35,_36,_37,_38,_39,_40,_41}> when 'true' ->
	      let <Fun> =
		  fun (_5,_4,_3) ->
		      %% Line 3178
		      case <_5,_4,_3> of
			<{M,F,A},Line,AccSt>
			    when call 'erlang':'=:='
				  (M,
				   Mod) ->
			    let <FA> = {%% Line 3179
				 F,%% Line 3179
				   A}
			    in  %% Line 3180
				case call 'gb_sets':'is_element'
					 (FA, Funcs) of
				  %% Line 3181
				  <'true'> when 'true' ->
				      AccSt
				  %% Line 3182
				  <'false'> when 'true' ->
				      apply 'add_error'/3
					  (Line, {'spec_fun_undefined',FA}, AccSt)
				  ( <_2> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_2})
				    -| ['compiler_generated'] )
				end
			%% Line 3184
			<{_X_M,_X_F,_X_A},_X_Line,AccSt> when 'true' ->
			    AccSt
			( <_8,_7,_6> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_8,_7,_6})
				-| [{'function_name',{'-check_specs_without_function/1-fun-0-',3}}] )
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 3186
		  call 'maps':'fold'
		      (Fun, St, Specs)
	  ( <_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10})
		  -| [{'function_name',{'check_specs_without_function',1}}] )
	    -| ['compiler_generated'] )
	end
'check_functions_without_spec'/2 =
    %% Line 3190
    fun (_0,_1) ->
	%% Line 3191
	case apply 'is_warn_enabled'/2
		 ('missing_spec_all', _1) of
	  %% Line 3192
	  <'true'> when 'true' ->
	      %% Line 3193
	      apply 'add_missing_spec_warnings'/3
		  (_0, _1, 'all')
	  %% Line 3194
	  <'false'> when 'true' ->
	      %% Line 3195
	      case apply 'is_warn_enabled'/2
		       ('missing_spec', _1) of
		%% Line 3196
		<'true'> when 'true' ->
		    %% Line 3197
		    apply 'add_missing_spec_warnings'/3
			(_0, _1, 'exported')
		%% Line 3198
		<'false'> when 'true' ->
		    _1
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_3})
	    -| ['compiler_generated'] )
	end
'add_missing_spec_warnings'/3 =
    %% Line 3203
    fun (_0,_1,_2) ->
	let <_10> =
	    letrec
		'lc$^0'/1 =
		    %% Line 3204
		    fun (_8) ->
			case _8 of
			  <[{_X_M,F,A}|_4]> when 'true' ->
			      let <_9> =
				  apply 'lc$^0'/1
				      (_4)
			      in  ( [{F,A}|_9]
				    -| ['compiler_generated'] )
			  ( <[_3|_4]> when 'true' ->
				apply 'lc$^0'/1
				    (_4)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_114> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_114})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 3204
		( case _1 of
		    ( <( {'lint',_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_rec147,_70,_71,_72,_73,_74,_75,_76}
			 -| ['compiler_generated'] )> when 'true' ->
			  let <_7> =
			      call 'maps':'keys'
				  (_rec147)
			  in  apply 'lc$^0'/1
				  (_7)
		      -| ['compiler_generated'] )
		    ( <_77> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','lint'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
	in  let <_34> =
		case _2 of
		  %% Line 3207
		  <'all'> when 'true' ->
		      %% Line 3208
		      ( letrec
			    'lc$^1'/1 =
				fun (_17) ->
				    case _17 of
				      <[{'function',L,F,A,_78}|_13]> when 'true' ->
					  let <FA> = {%% Line 3209
					       ( F
						 -| ['compiler_generated'] ),%% Line 3209
									     ( A
									       -| ['compiler_generated'] )}
					  in  %% Line 3209
					      ( case call 'lists':'member'
							 (FA, _10) of
						  <'false'> when 'true' ->
						      let <_18> =
							  apply 'lc$^1'/1
							      (_13)
						      in  ( [{FA,L}|_18]
							    -| ['compiler_generated'] )
						  ( <'true'> when 'true' ->
							apply 'lc$^1'/1
							    (_13)
						    -| ['compiler_generated'] )
						  ( <_cor_variable> when 'true' ->
							call 'erlang':'error'
							    ('badarg')
						    -| ['compiler_generated'] )
						end
						-| ['list_comprehension'] )
				      ( <[_12|_13]> when 'true' ->
					    apply 'lc$^1'/1
						(_13)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_119> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_119})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				(_0)
			-| ['list_comprehension'] )
		  %% Line 3210
		  <'exported'> when 'true' ->
		      %% Line 3211
		      ( case _1 of
			  ( <( {'lint',_79,_80,_81,_rec148,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_23> =
				    call 'gb_sets':'to_list'
					(_rec148)
				in  let <_20> =
					apply 'pseudolocals'/0
					    ()
				    in  let <Exps0> =
					    call 'erlang':'--'
						(_23, _20)
					in  let <Exps> =
						call %% Line 3212
						     'erlang':%% Line 3212
							      '--'
						    (%% Line 3212
						     Exps0, _10)
					    in  %% Line 3213
						( letrec
						      'lc$^2'/1 =
							  fun (_30) ->
							      case _30 of
								<[{'function',L,F,A,_113}|_27]> when 'true' ->
								    %% Line 3214
								    ( let <FA> = {( F
									     -| ['compiler_generated'] ),( A
													   -| ['compiler_generated'] )}
								      in  ( case call 'lists':'member'
										     (FA, Exps) of
									      <'true'> when 'true' ->
										  let <_31> =
										      apply 'lc$^2'/1
											  (_27)
										  in  ( [{FA,L}|_31]
											-| ['compiler_generated'] )
									      ( <'false'> when 'true' ->
										    apply 'lc$^2'/1
											(_27)
										-| ['compiler_generated'] )
									      ( <_32> when 'true' ->
										    primop 'match_fail'
											({'case_clause',_32})
										-| ['compiler_generated'] )
									    end
									    -| ['list_comprehension'] )
								      -| ['list_comprehension'] )
								( <[_26|_27]> when 'true' ->
								      apply 'lc$^2'/1
									  (_27)
								  -| ['compiler_generated'] )
								<[]> when 'true' ->
								    []
								( <_124> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_124})
									-| [{'function_name',{'lc$^2',1}}] )
								  -| ['compiler_generated'] )
							      end
						  in  apply 'lc$^2'/1
							  (_0)
						  -| ['list_comprehension'] )
			    -| ['compiler_generated'] )
			  ( <_112> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','lint'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  ( <_33> when 'true' ->
			%% Line 3206
			primop 'match_fail'
			    ({'case_clause',_33})
		    -| ['compiler_generated'] )
		end
	    in  let <_40> =
		    fun (_37,_36) ->
			%% Line 3216
			case <_37,_36> of
			  <{FA,L},St> when 'true' ->
			      %% Line 3217
			      apply 'add_warning'/3
				  (L, {'missing_spec',FA}, St)
			  ( <_39,_38> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_39,_38})
				  -| [{'function_name',{'-add_missing_spec_warnings/3-fun-3-',2}}] )
			    -| ['compiler_generated'] )
			end
		in  %% Line 3216
		    call 'lists':'foldl'
			(_40, _1, _34)
'check_unused_types'/2 =
    %% Line 3220
    fun (_0,_1) ->
	%% Line 3221
	case apply 'is_warn_enabled'/2
		 ('unused_type', _1) of
	  %% Line 3222
	  <'true'> when 'true' ->
	      apply 'check_unused_types_1'/2
		  (_0, _1)
	  %% Line 3223
	  <'false'> when 'true' ->
	      _1
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_2})
	    -| ['compiler_generated'] )
	end
'check_unused_types_1'/2 =
    %% Line 3226
    fun (_0,_1) ->
	case <_0,_1> of
	  <Forms,St = {'lint',_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,Usage,_52,_53,_54,Ts,ExpTs,_55,_56,_57}> when 'true' ->
	      let <_6> =
		  letrec
		      'lc$^0'/1 =
			  %% Line 3227
			  fun (_4) ->
			      case _4 of
				<[{'attribute',_X_L,'file',{File,_X_Line}}|_3]> when 'true' ->
				    let <_5> =
					apply 'lc$^0'/1
					    (_3)
				    in  ( [File|_5]
					  -| ['compiler_generated'] )
				( <[_2|_3]> when 'true' ->
				      apply 'lc$^0'/1
					  (_3)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_69> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_69})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  %% Line 3227
		      apply 'lc$^0'/1
			  (Forms)
	      in  %% Line 3227
		  case _6 of
		    %% Line 3228
		    <[FirstFile|_58]> when 'true' ->
			%% Line 3229
			( case Usage of
			    ( <( {'usage',_59,_60,_61,_rec149}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_11> =
				      call %% Line 3230
					   'gb_sets':%% Line 3230
						     'to_list'
					  (%% Line 3230
					   ExpTs)
				  in  let <_10> =
					  call %% Line 3230
					       'maps':%% Line 3230
						      'keys'
					      (_rec149)
				      in  let <L> =
					      call %% Line 3230
						   'erlang':%% Line 3230
							    '++'
						  (_11, _10)
					  in  let <UsedTypes> =
						  call %% Line 3231
						       'gb_sets':%% Line 3231
								 'from_list'
						      (%% Line 3231
						       L)
					      in  let <FoldFun> =
						      fun (_19,_18,_17) ->
							  %% Line 3233
							  case <_19,_18,_17> of
							    <{_X_Type = {'record',_63},0},_64,AccSt> when 'true' ->
								%% Line 3234
								AccSt
							    %% Line 3235
							    <Type,{'typeinfo',_65,FileLine},AccSt> when 'true' ->
								%% Line 3236
								case apply 'loc'/2
									 (FileLine, AccSt) of
								  %% Line 3237
								  <{_66,_67}>
								      when call 'erlang':'=:='
									    (_66,
									     FirstFile) ->
								      %% Line 3238
								      case call 'gb_sets':'is_member'
									       (Type, UsedTypes) of
									%% Line 3239
									<'true'> when 'true' ->
									    AccSt
									%% Line 3240
									<'false'> when 'true' ->
									    let <Warn> = {%% Line 3241
										 'unused_type',%% Line 3241
											       Type}
									    in  %% Line 3242
										apply 'add_warning'/3
										    (FileLine, Warn, AccSt)
									( <_15> when 'true' ->
									      primop 'match_fail'
										  ({'case_clause',_15})
									  -| ['compiler_generated'] )
								      end
								  %% Line 3244
								  <_68> when 'true' ->
								      %% Line 3246
								      AccSt
								end
							    ( <_22,_21,_20> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_22,_21,_20})
								    -| [{'function_name',{'-check_unused_types_1/2-fun-1-',3}}] )
							      -| ['compiler_generated'] )
							  end
						  in  %% Line 3249
						      call 'maps':'fold'
							  (FoldFun, St, Ts)
			      -| ['compiler_generated'] )
			    ( <_62> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','usage'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 3250
		    <[]> when 'true' ->
			%% Line 3251
			St
		    ( <_24> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_24})
		      -| ['compiler_generated'] )
		  end
	  ( <_26,_25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_26,_25})
		  -| [{'function_name',{'check_unused_types_1',2}}] )
	    -| ['compiler_generated'] )
	end
'check_local_opaque_types'/1 =
    %% Line 3254
    fun (_0) ->
	%% Line 3255
	case _0 of
	  <{'lint',_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,Ts,ExpTs,_41,_42,_43}> when 'true' ->
	      let <FoldFun> =
		  fun (_6,_5,_4) ->
		      %% Line 3257
		      case <_6,_5,_4> of
			<_X_Type,{'typeinfo','type',_44},AccSt> when 'true' ->
			    %% Line 3258
			    AccSt
			%% Line 3259
			<Type,{'typeinfo','opaque',FileLine},AccSt> when 'true' ->
			    %% Line 3260
			    case call 'gb_sets':'is_element'
				     (Type, ExpTs) of
			      %% Line 3261
			      <'true'> when 'true' ->
				  AccSt
			      %% Line 3262
			      <'false'> when 'true' ->
				  let <Warn> = {%% Line 3263
				       'not_exported_opaque',%% Line 3263
							     Type}
				  in  %% Line 3264
				      apply 'add_warning'/3
					  (FileLine, Warn, AccSt)
			      ( <_3> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_3})
				-| ['compiler_generated'] )
			    end
			( <_9,_8,_7> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_9,_8,_7})
				-| [{'function_name',{'-check_local_opaque_types/1-fun-0-',3}}] )
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 3267
		  call 'maps':'fold'
		      (FoldFun, _0, Ts)
	  ( <_1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_1})
	    -| ['compiler_generated'] )
	end
'check_dialyzer_attribute'/2 =
    %% Line 3269
    fun (_0,_1) ->
	let <_24> =
	    letrec
		'lc$^2'/1 =
		    %% Line 3271
		    fun (_20) ->
			case _20 of
			  <[{'attribute',L,'dialyzer',Val}|_3]> when 'true' ->
			      %% Line 3272
			      ( letrec
				    'lc$^3'/1 =
					fun (_21) ->
					    case _21 of
					      <[V0|_5]> when 'true' ->
						  %% Line 3273
						  ( letrec
							'lc$^4'/1 =
							    fun (_22) ->
								case _22 of
								  <[V|_8]> when 'true' ->
								      let <_23> =
									  apply 'lc$^4'/1
									      (_8)
								      in  ( [{L,V}|_23]
									    -| ['compiler_generated'] )
								  <[]> when 'true' ->
								      apply 'lc$^3'/1
									  (_5)
								  ( <_88> when 'true' ->
									( primop 'match_fail'
									      ({'function_clause',_88})
									  -| [{'function_name',{'lc$^4',1}}] )
								    -| ['compiler_generated'] )
								end
						    in  let <_19> =
							    case V0 of
							      %% Line 3274
							      <{O,F}> when 'true' ->
								  %% Line 3276
								  ( letrec
									'lc$^0'/1 =
									    fun (_15) ->
										case _15 of
										  <[A|_10]> when 'true' ->
										      %% Line 3277
										      ( letrec
											    'lc$^1'/1 =
												fun (_16) ->
												    case _16 of
												      <[B|_13]> when 'true' ->
													  let <_17> =
													      apply 'lc$^1'/1
														  (_13)
													  in  ( [{A,B}|_17]
														-| ['compiler_generated'] )
												      <[]> when 'true' ->
													  apply 'lc$^0'/1
													      (_10)
												      ( <_89> when 'true' ->
													    ( primop 'match_fail'
														  ({'function_clause',_89})
													      -| [{'function_name',{'lc$^1',1}}] )
													-| ['compiler_generated'] )
												    end
											in  let <_14> =
												call 'lists':'flatten'
												    ([F|[]])
											    in  apply 'lc$^1'/1
												    (_14)
											-| ['list_comprehension'] )
										  <[]> when 'true' ->
										      []
										  ( <_90> when 'true' ->
											( primop 'match_fail'
											      ({'function_clause',_90})
											  -| [{'function_name',{'lc$^0',1}}] )
										    -| ['compiler_generated'] )
										end
								    in  let <_11> =
									    call 'lists':'flatten'
										([O|[]])
									in  apply 'lc$^0'/1
										(_11)
								    -| ['list_comprehension'] )
							      %% Line 3278
							      <T> when 'true' ->
								  [T|[]]
							    end
							in  apply 'lc$^4'/1
								(_19)
						    -| ['list_comprehension'] )
					      <[]> when 'true' ->
						  apply 'lc$^2'/1
						      (_3)
					      ( <_91> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_91})
						      -| [{'function_name',{'lc$^3',1}}] )
						-| ['compiler_generated'] )
					    end
				in  let <_6> =
					call 'lists':'flatten'
					    ([Val|[]])
				    in  apply 'lc$^3'/1
					    (_6)
				-| ['list_comprehension'] )
			  ( <[_2|_3]> when 'true' ->
				apply 'lc$^2'/1
				    (_3)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_92> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_92})
				  -| [{'function_name',{'lc$^2',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 3271
		apply 'lc$^2'/1
		    (_0)
	in  let <_28> =
		fun (_26) ->
		    %% Line 3281
		    case _26 of
		      <{_51,{Option,FA}}>
			  when call 'erlang':'is_atom'
				(Option) ->
			  %% Line 3282
			  apply 'is_fa'/1
			      (FA)
		      %% Line 3283
		      <{_52,Option}>
			  when call 'erlang':'is_atom'
				(Option) ->
			  'true'
		      %% Line 3284
		      <_53> when 'true' ->
			  'false'
		    end
	    in  %% Line 3280
		case %% Line 3281
		     call 'lists':'partition'
			 (_28, _24) of
		  <{Wellformed,Bad}> when 'true' ->
		      let <_34> =
			  fun (_31,_30) ->
			      %% Line 3286
			      case <_31,_30> of
				<{L,Term},St> when 'true' ->
				    %% Line 3287
				    apply 'add_error'/3
					(L, {'bad_dialyzer_attribute',Term}, St)
				( <_33,_32> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_33,_32})
					-| [{'function_name',{'-check_dialyzer_attribute/2-fun-6-',2}}] )
				  -| ['compiler_generated'] )
			      end
		      in  let <St1> =
			      call %% Line 3286
				   'lists':%% Line 3286
					   'foldl'
				  (_34, _1, %% Line 3288
					    Bad)
			  in  %% Line 3289
			      ( case _1 of
				  ( <( {'lint',_54,_55,_56,_57,_58,_59,_60,_61,_62,_rec150,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_39> =
					    call 'gb_sets':'to_list'
						(_rec150)
					in  let <_36> =
						apply 'pseudolocals'/0
						    ()
					    in  let <DefFunctions> =
						    call 'erlang':'--'
							(_39, _36)
						in  let <Fun> =
							fun (_45,_44) ->
							    %% Line 3290
							    case <_45,_44> of
							      <{L,{Option,FA}},St> when 'true' ->
								  %% Line 3291
								  case apply 'is_function_dialyzer_option'/1
									   (Option) of
								    %% Line 3292
								    <'true'> when 'true' ->
									%% Line 3293
									case call 'lists':'member'
										 (FA, DefFunctions) of
									  %% Line 3294
									  <'true'> when 'true' ->
									      St
									  %% Line 3295
									  <'false'> when 'true' ->
									      %% Line 3296
									      apply 'add_error'/3
										  (L, {'undefined_function',FA}, St)
									  ( <_41> when 'true' ->
										primop 'match_fail'
										    ({'case_clause',_41})
									    -| ['compiler_generated'] )
									end
								    %% Line 3298
								    <'false'> when 'true' ->
									%% Line 3299
									apply 'add_error'/3
									    (L, {'bad_dialyzer_option',Option}, St)
								    ( <_42> when 'true' ->
									  primop 'match_fail'
									      ({'case_clause',_42})
								      -| ['compiler_generated'] )
								  end
							      %% Line 3301
							      <{L,Option},St> when 'true' ->
								  %% Line 3302
								  case apply 'is_module_dialyzer_option'/1
									   (Option) of
								    %% Line 3303
								    <'true'> when 'true' ->
									St
								    %% Line 3304
								    <'false'> when 'true' ->
									%% Line 3305
									apply 'add_error'/3
									    (L, {'bad_dialyzer_option',Option}, St)
								    ( <_43> when 'true' ->
									  primop 'match_fail'
									      ({'case_clause',_43})
								      -| ['compiler_generated'] )
								  end
							      ( <_47,_46> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_47,_46})
								      -| [{'function_name',{'-check_dialyzer_attribute/2-fun-7-',2}}] )
								-| ['compiler_generated'] )
							    end
						    in  %% Line 3308
							call 'lists':'foldl'
							    (Fun, St1, Wellformed)
				    -| ['compiler_generated'] )
				  ( <_87> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','lint'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
		  ( <_29> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_29})
		    -| ['compiler_generated'] )
		end
'is_function_dialyzer_option'/1 =
    %% Line 3310
    fun (_0) ->
	case _0 of
	  <'nowarn_function'> when 'true' ->
	      'true'
	  %% Line 3311
	  <Option> when 'true' ->
	      %% Line 3312
	      apply 'is_module_dialyzer_option'/1
		  (Option)
	end
'is_module_dialyzer_option'/1 =
    %% Line 3314
    fun (_0) ->
	%% Line 3315
	call 'lists':'member'
	    (_0, %% Line 3316
		 ['no_return'|['no_unused'|['no_improper_lists'|['no_fun_app'|['no_match'|['no_opaque'|['no_fail_call'|['no_contracts'|['no_behaviours'|['no_undefined_callbacks'|['unmatched_returns'|['error_handling'|['race_conditions'|['no_missing_calls'|['specdiffs'|['overspecs'|['underspecs'|['unknown']]]]]]]]]]]]]]]]]])
'try_clauses'/5 =
    %% Line 3325
    fun (_0,_1,_2,_3,_4) ->
	%% Line 3326
	case apply 'icrt_clauses'/3
		 (_0, _3, _4) of
	  <{Csvt0,St1}> when 'true' ->
	      %% Line 3327
	      case St1 of
		<{'lint',_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54}> when 'true' ->
		    let <_8> =
			call 'erlang':'setelement'
			    (33, St1, 'true')
		    in  %% Line 3328
			case apply 'icrt_clauses'/3
				 (_1, _3, _8) of
			  <{Csvt1,St3}> when 'true' ->
			      let <Csvt> =
				  call %% Line 3329
				       'erlang':%% Line 3329
						'++'
				      (%% Line 3329
				       Csvt0, %% Line 3329
					      Csvt1)
			      in  let <UpdVt> =
				      apply %% Line 3330
					    'icrt_export'/4
					  (%% Line 3330
					   Csvt, _3, _2, %% Line 3330
							 St3)
				  in  %% Line 3331
				      case St3 of
					<{'lint',_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89}> when 'true' ->
					    let <_15> =
						call 'erlang':'setelement'
						    (33, St3, 'false')
					    in  {UpdVt,_15}
					( <_90> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','lint'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
			  ( <_10> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_10})
			    -| ['compiler_generated'] )
			end
		( <_55> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','lint'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  ( <_5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_5})
	    -| ['compiler_generated'] )
	end
'icrt_clauses'/4 =
    %% Line 3336
    fun (_0,_1,_2,_3) ->
	%% Line 3337
	case apply 'icrt_clauses'/3
		 (_0, _2, _3) of
	  <{Csvt,St1}> when 'true' ->
	      let <UpdVt> =
		  apply %% Line 3338
			'icrt_export'/4
		      (%% Line 3338
		       Csvt, _2, _1, %% Line 3338
				     St1)
	      in  %% Line 3339
		  {UpdVt,St1}
	  ( <_4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_4})
	    -| ['compiler_generated'] )
	end
'icrt_clauses'/3 =
    %% Line 3344
    fun (_0,_1,_2) ->
	let <_7> =
	    fun (_4,_3) ->
		%% Line 3345
		apply 'icrt_clause'/3
		    (_4, _1, _3)
	in  %% Line 3345
	    call 'lists':'mapfoldl'
		(_7, _2, _0)
'icrt_clause'/3 =
    %% Line 3347
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{'clause',_X_Line,H,G,B},Vt0,St0> when 'true' ->
	      let <Vt1> =
		  apply %% Line 3348
			'taint_stack_var'/3
		      (%% Line 3348
		       Vt0, %% Line 3348
			    H, %% Line 3348
			       St0)
	      in  %% Line 3349
		  case apply 'head'/3
			   (H, Vt1, St0) of
		    <{Hvt,Binvt,St1}> when 'true' ->
			let <Vt2> =
			    apply %% Line 3350
				  'vtupdate'/2
				(%% Line 3350
				 Hvt, %% Line 3350
				      Binvt)
			in  let <Vt3> =
				apply %% Line 3351
				      'taint_stack_var'/3
				    (%% Line 3351
				     Vt2, %% Line 3351
					  H, %% Line 3351
					     St0)
			    in  let <_10> =
				    apply %% Line 3352
					  'vtupdate'/2
					(%% Line 3352
					 Vt3, %% Line 3352
					      Vt0)
				in  %% Line 3352
				    case St1 of
				      <{'lint',_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52}> when 'true' ->
					  let <_9> =
					      call 'erlang':'setelement'
						  (33, St1, 'false')
					  in  case apply 'guard'/3
						       (G, _10, _9) of
						<{Gvt,St2}> when 'true' ->
						    let <Vt4> =
							apply %% Line 3353
							      'vtupdate'/2
							    (%% Line 3353
							     Gvt, %% Line 3353
								  Vt2)
						    in  let <_13> =
							    apply %% Line 3354
								  'vtupdate'/2
								(%% Line 3354
								 Vt4, %% Line 3354
								      Vt0)
							in  %% Line 3354
							    case apply 'exprs'/3
								     (B, _13, St2) of
							      <{Bvt,St3}> when 'true' ->
								  let <_15> =
								      apply %% Line 3355
									    'vtupdate'/2
									  (%% Line 3355
									   Bvt, %% Line 3355
										Vt4)
								  in  %% Line 3355
								      {_15,St3}
							      ( <_14> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_14})
								-| ['compiler_generated'] )
							    end
						( <_11> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_11})
						  -| ['compiler_generated'] )
					      end
				      ( <_53> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','lint'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4})
		      -| ['compiler_generated'] )
		  end
	  ( <_18,_17,_16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_18,_17,_16})
		  -| [{'function_name',{'icrt_clause',3}}] )
	    -| ['compiler_generated'] )
	end
'taint_stack_var'/3 =
    %% Line 3357
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Vt,Pat,{'lint',_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,'true',_42,_43}> when 'true' ->
	      %% Line 3358
	      case Pat of
		<[{'tuple',_44,[_45|[_46|[{'var',_47,Stk}|[]]]]}|[]]> when 'true' ->
		    %% Line 3359
		    case Stk of
		      %% Line 3360
		      <'_'> when 'true' ->
			  %% Line 3361
			  Vt
		      %% Line 3362
		      <_48> when 'true' ->
			  let <_6> =
			      fun (_4) ->
				  %% Line 3363
				  case _4 of
				    <{V,{'bound',Used,Lines}}>
					when call 'erlang':'=:='
					      (V,
					       Stk) ->
					%% Line 3364
					{V,{'stacktrace',Used,Lines}}
				    %% Line 3365
				    <B> when 'true' ->
					%% Line 3366
					B
				  end
			  in  %% Line 3363
			      call 'lists':'map'
				  (_6, %% Line 3367
				       Vt)
		    end
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3369
	  <Vt,_X_Pat,{'lint',_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,'false',_80,_81}> when 'true' ->
	      %% Line 3370
	      Vt
	  ( <_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8})
		  -| [{'function_name',{'taint_stack_var',3}}] )
	    -| ['compiler_generated'] )
	end
'icrt_export'/4 =
    %% Line 3372
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Vts,Vt,{Tag,Attrs},St> when 'true' ->
	      %% Line 3373
	      case apply 'loc'/2
		       (Attrs, St) of
		<{_X_File,Loc}> when 'true' ->
		    let <_6> =
			call %% Line 3374
			     'lists':%% Line 3374
				     'merge'
			    (%% Line 3374
			     Vts)
		    in  let <_5> =
			    call %% Line 3374
				 'erlang':%% Line 3374
					  'length'
				(%% Line 3374
				 Vts)
			in  %% Line 3374
			    apply 'icrt_export'/5
				(_6, Vt, {Tag,Loc}, _5, [])
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  ( <_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8,_7})
		  -| [{'function_name',{'icrt_export',4}}] )
	    -| ['compiler_generated'] )
	end
'icrt_export'/5 =
    %% Line 3376
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <[{V,{{'export',_47},_48,_49}}|Vs0],[{_50,{S0 = {'export',_51},_52,Ls}}|Vt],%% Line 3377
										      In,%% Line 3377
											 I,%% Line 3377
											   Acc>
	      when call 'erlang':'=:='
		    (_50,
		     V) ->
	      let <_7> =
		  fun (_5) ->
		      %% Line 3381
		      case _5 of
			<{K,_53}> when 'true' ->
			    call 'erlang':'=:='
				(K, V)
			( <_6> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_6})
				-| [{'function_name',{'-icrt_export/5-fun-0-',1}}] )
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 3381
		  case call 'lists':'partition'
			   (_7, Vs0) of
		    <{VVs,Vs}> when 'true' ->
			let <_13> =
			    fun (_10,_9) ->
				%% Line 3382
				case <_10,_9> of
				  <{_54,{S1,_55,_56}},AccS> when 'true' ->
				      apply 'merge_state'/2
					  (AccS, S1)
				  ( <_12,_11> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_12,_11})
					  -| [{'function_name',{'-icrt_export/5-fun-1-',2}}] )
				    -| ['compiler_generated'] )
				end
			in  let <S> =
				call %% Line 3382
				     'lists':%% Line 3382
					     'foldl'
				    (_13, %% Line 3382
					  S0, %% Line 3382
					      VVs)
			    in  %% Line 3383
				apply 'icrt_export'/5
				    (Vs, Vt, In, I, [{V,{S,'used',Ls}}|Acc])
		    ( <_8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_8})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3384
	  <[{V,_57}|Vs0],[{_58,{_59,_60,Ls}}|Vt],In,I,Acc>
	      when call 'erlang':'=:='
		    (_58,
		     V) ->
	      let <_17> =
		  fun (_15) ->
		      %% Line 3389
		      case _15 of
			<{K,_61}> when 'true' ->
			    call 'erlang':'=:='
				(K, V)
			( <_16> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_16})
				-| [{'function_name',{'-icrt_export/5-fun-2-',1}}] )
			  -| ['compiler_generated'] )
		      end
	      in  let <Vs> =
		      call %% Line 3389
			   'lists':%% Line 3389
				   'dropwhile'
			  (_17, %% Line 3389
				Vs0)
		  in  %% Line 3390
		      apply 'icrt_export'/5
			  (Vs, Vt, In, I, [{V,{'bound','used',Ls}}|Acc])
	  %% Line 3391
	  <Vs = [{V1,_62}|_63],[{V2,_64}|Vt],In,I,Acc>
	      when call 'erlang':'>'
		    (V1,
		     V2) ->
	      %% Line 3393
	      apply 'icrt_export'/5
		  (Vs, Vt, In, I, Acc)
	  %% Line 3394
	  <Vs0 = [{V,_65}|_66],Vt,In,I,Acc> when 'true' ->
	      let <_21> =
		  fun (_19) ->
		      %% Line 3396
		      case _19 of
			<{K,_67}> when 'true' ->
			    call 'erlang':'=:='
				(K, V)
			( <_20> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_20})
				-| [{'function_name',{'-icrt_export/5-fun-3-',1}}] )
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 3396
		  case call 'lists':'partition'
			   (_21, Vs0) of
		    <{VVs,Vs}> when 'true' ->
			let <F> =
			    fun (_31,_30) ->
				%% Line 3397
				case <_31,_30> of
				  <{_68,{S,U,Ls}},{AccI,AccS0,AccLs0}> when 'true' ->
				      let <_24> =
					  case %% Line 3398
					       <S,AccS0> of
					    %% Line 3399
					    <( {( 'unsafe'
						  -| ['compiler_generated'] ),_69}
					       -| ['compiler_generated'] ),( {( 'unsafe'
										-| ['compiler_generated'] ),_70}
									     -| ['compiler_generated'] )> when 'true' ->
						%% Line 3402
						{'unsafe',In}
					    %% Line 3403
					    <( {( 'unsafe'
						  -| ['compiler_generated'] ),_71}
					       -| ['compiler_generated'] ),_72> when 'true' ->
						%% Line 3407
						S
					    %% Line 3408
					    <( _80
					       -| ['compiler_generated'] ),( _81
									     -| ['compiler_generated'] )> when 'true' ->
						%% Line 3411
						AccS0
					  end
				      in  let <_27> =
					      case %% Line 3413
						   U of
						%% Line 3414
						<'used'> when 'true' ->
						    AccLs0
						%% Line 3415
						<'unused'> when 'true' ->
						    apply 'merge_lines'/2
							(AccLs0, Ls)
						( <_26> when 'true' ->
						      %% Line 3413
						      primop 'match_fail'
							  ({'case_clause',_26})
						  -| ['compiler_generated'] )
					      end
					  in  let <_29> =
						  call %% Line 3417
						       'erlang':%% Line 3417
								'+'
						      (%% Line 3417
						       AccI, %% Line 3417
							     1)
					      in  %% Line 3417
						  {_29,_24,_27}
				  ( <_33,_32> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_33,_32})
					  -| [{'function_name',{'-icrt_export/5-fun-4-',2}}] )
				    -| ['compiler_generated'] )
				end
			in  %% Line 3420
			    case call 'lists':'foldl'
				     (F, {0,{'export',In},[]}, VVs) of
			      <{Count,S1,Ls}> when 'true' ->
				  let <_37> =
				      case %% Line 3421
					   Count of
					%% Line 3422
					<_74>
					    when call 'erlang':'=:='
						  (Count,
						   I) ->
					    %% Line 3424
					    S1
					%% Line 3425
					<_75> when 'true' ->
					    %% Line 3427
					    {'unsafe',In}
				      end
				  in  let <_40> =
					  case %% Line 3429
					       Ls of
					    %% Line 3429
					    <[]> when 'true' ->
						'used'
					    %% Line 3429
					    <_76> when 'true' ->
						'unused'
					  end
				      in  %% Line 3430
					  apply 'icrt_export'/5
					      (Vs, Vt, In, I, [{V,{_37,_40,Ls}}|Acc])
			      ( <_35> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_35})
				-| ['compiler_generated'] )
			    end
		    ( <_22> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_22})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3431
	  <[],_77,_78,_79,Acc> when 'true' ->
	      %% Line 3432
	      call 'lists':'reverse'
		  (Acc)
	  ( <_46,_45,_44,_43,_42> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_46,_45,_44,_43,_42})
		  -| [{'function_name',{'icrt_export',5}}] )
	    -| ['compiler_generated'] )
	end
'handle_comprehension'/4 =
    %% Line 3434
    fun (_0,_1,_2,_3) ->
	%% Line 3435
	case apply 'lc_quals'/3
		 (_1, _2, _3) of
	  <{Vt1,Uvt,St1}> when 'true' ->
	      %% Line 3436
	      case apply 'expr'/3
		       (_0, Vt1, St1) of
		<{Evt,St2}> when 'true' ->
		    let <Vt2> =
			apply %% Line 3437
			      'vtupdate'/2
			    (%% Line 3437
			     Evt, %% Line 3437
				  Vt1)
		    in  %% Line 3439
			case apply 'check_old_unused_vars'/3
				 (Vt2, Uvt, St2) of
			  <{_19,St3}> when 'true' ->
			      %% Line 3441
			      case apply 'check_unused_vars'/3
				       (Uvt, _2, St3) of
				<{_20,St4}> when 'true' ->
				    %% Line 3443
				    case apply 'check_unused_vars'/3
					     (Vt2, _2, St4) of
				      <{_21,St}> when 'true' ->
					  let <_10> =
					      apply %% Line 3444
						    'vtsubtract'/2
						  (%% Line 3444
						   Vt2, %% Line 3444
							Uvt)
					  in  let <Vt3> =
						  apply %% Line 3444
							'vtmerge'/2
						      (_10, %% Line 3444
							    Uvt)
					      in  let <Vt4> =
						      apply %% Line 3446
							    'vtold'/2
							  (%% Line 3446
							   Vt3, _2)
						  in  let <_13> =
							  apply %% Line 3450
								'vt_no_unused'/1
							      (%% Line 3450
							       Vt4)
						      in  let <Vt> =
							      apply %% Line 3450
								    'vt_no_unsafe'/1
								  (_13)
							  in  %% Line 3451
							      {Vt,St}
				      ( <_9> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_9})
					-| ['compiler_generated'] )
				    end
				( <_8> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_8})
				  -| ['compiler_generated'] )
			      end
			  ( <_7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_7})
			    -| ['compiler_generated'] )
			end
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_5})
		  -| ['compiler_generated'] )
	      end
	  ( <_4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_4})
	    -| ['compiler_generated'] )
	end
'lc_quals'/3 =
    %% Line 3464
    fun (_0,_1,_2) ->
	%% Line 3465
	( case _2 of
	    ( <( {'lint',_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_rec154,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 3466
		  case _2 of
		    <{'lint',_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83}> when 'true' ->
			let <_8> =
			    call 'erlang':'setelement'
				(24, _2, 'false')
			in  case apply 'lc_quals'/4
				     (_0, _1, [], _8) of
			      <{Vt,Uvt,St}> when 'true' ->
				  %% Line 3467
				  case St of
				    <{'lint',_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118}> when 'true' ->
					let <_12> =
					    call 'erlang':'setelement'
						(24, St, _rec154)
					in  {Vt,Uvt,_12}
				    ( <_119> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','lint'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      ( <_9> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_9})
				-| ['compiler_generated'] )
			    end
		    ( <_84> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','lint'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_49> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'lc_quals'/4 =
    %% Line 3469
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[{'generate',_X_Line,P,E}|Qs],Vt0,Uvt0,St0> when 'true' ->
	      %% Line 3470
	      case apply 'handle_generator'/5
		       (P, E, Vt0, Uvt0, St0) of
		<{Vt,Uvt,St}> when 'true' ->
		    %% Line 3471
		    apply 'lc_quals'/4
			(Qs, Vt, Uvt, St)
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3472
	  <[{'b_generate',_X_Line,P,E}|Qs],Vt0,Uvt0,St0> when 'true' ->
	      let <St1> =
		  apply %% Line 3473
			'handle_bitstring_gen_pat'/2
		      (%% Line 3473
		       P, %% Line 3473
			  St0)
	      in  %% Line 3474
		  case apply 'handle_generator'/5
			   (P, E, Vt0, Uvt0, St1) of
		    <{Vt,Uvt,St}> when 'true' ->
			%% Line 3475
			apply 'lc_quals'/4
			    (Qs, Vt, Uvt, St)
		    ( <_6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3476
	  <[F|Qs],Vt,Uvt,St0> when 'true' ->
	      let <Info> =
		  apply %% Line 3477
			'is_guard_test2_info'/1
		      (%% Line 3477
		       St0)
	      in  let <_9> =
		      case %% Line 3478
			   apply 'is_guard_test2'/2
			       (F, Info) of
			%% Line 3479
			<'true'> when 'true' ->
			    apply 'guard_test'/3
				(F, Vt, St0)
			%% Line 3480
			<'false'> when 'true' ->
			    apply 'expr'/3
				(F, Vt, St0)
			( <_8> when 'true' ->
			      %% Line 3478
			      primop 'match_fail'
				  ({'case_clause',_8})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 3478
		      case _9 of
			<{Fvt,St1}> when 'true' ->
			    let <_11> =
				apply %% Line 3482
				      'vtupdate'/2
				    (%% Line 3482
				     Fvt, %% Line 3482
					  Vt)
			    in  %% Line 3482
				apply 'lc_quals'/4
				    (Qs, _11, Uvt, St1)
			( <_10> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_10})
			  -| ['compiler_generated'] )
		      end
	  %% Line 3483
	  <[],Vt,Uvt,St> when 'true' ->
	      %% Line 3484
	      {Vt,Uvt,St}
	  ( <_15,_14,_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_15,_14,_13,_12})
		  -| [{'function_name',{'lc_quals',4}}] )
	    -| ['compiler_generated'] )
	end
'is_guard_test2_info'/1 =
    %% Line 3486
    fun (_0) ->
	case _0 of
	  <{'lint',_7,_8,_9,_10,Imports,_11,RDs,Locals,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37}> when 'true' ->
	      let <_5> =
		  fun (_3) ->
		      %% Line 3488
		      ( case apply 'is_local_function'/2
				 (Locals, _3) of
			  ( <( 'true'
			       -| ['compiler_generated'] )> when 'true' ->
				'true'
			    -| ['compiler_generated'] )
			  ( <( 'false'
			       -| ['compiler_generated'] )> when 'true' ->
				%% Line 3489
				apply 'is_imported_function'/2
				    (Imports, _3)
			    -| ['compiler_generated'] )
			  ( <_1> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {( 'badarg'
					    -| ['compiler_generated'] ),_1}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      in  %% Line 3487
		  {RDs,_5}
	  ( <_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6})
		  -| [{'function_name',{'is_guard_test2_info',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_generator'/5 =
    %% Line 3492
    fun (_0,_1,_2,_3,_4) ->
	%% Line 3493
	case apply 'expr'/3
		 (_1, _2, _4) of
	  <{Evt,St1}> when 'true' ->
	      let <_6> =
		  apply %% Line 3495
			'vtold'/2
		      (%% Line 3495
		       Evt, _2)
	      in  let <Vt1> =
		      apply %% Line 3495
			    'vtupdate'/2
			  (_6, _2)
		  in  %% Line 3496
		      case apply 'check_unused_vars'/3
			       (Evt, _2, St1) of
			<{_23,St2}> when 'true' ->
			    %% Line 3497
			    case apply 'pattern'/5
				     (_0, Vt1, [], [], St2) of
			      <{Pvt,Binvt,St3}> when 'true' ->
				  let <Vt2> =
				      apply %% Line 3501
					    'vtupdate'/2
					  (%% Line 3501
					   Pvt, %% Line 3501
						Vt1)
				  in  let <St4> =
					  apply %% Line 3502
						'shadow_vars'/4
					      (%% Line 3502
					       Binvt, %% Line 3502
						      Vt1, %% Line 3502
							   'generate', %% Line 3502
								       St3)
				      in  let <Svt> =
					      apply %% Line 3503
						    'vtold'/2
						  (%% Line 3503
						   Vt2, %% Line 3503
							Binvt)
					  in  %% Line 3504
					      case apply 'check_old_unused_vars'/3
						       (Svt, _3, St4) of
						<{_24,St5}> when 'true' ->
						    let <_14> =
							apply %% Line 3505
							      'vtnew'/2
							    (%% Line 3505
							     Svt, _3)
						    in  let <NUvt> =
							    apply %% Line 3505
								  'vtupdate'/2
								(_14, _3)
							in  let <_16> =
								apply %% Line 3506
								      'vtsubtract'/2
								    (%% Line 3506
								     Vt2, %% Line 3506
									  Binvt)
							    in  let <Vt3> =
								    apply %% Line 3506
									  'vtupdate'/2
									(_16, %% Line 3506
									      Binvt)
								in  %% Line 3507
								    {Vt3,NUvt,St5}
						( <_13> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_13})
						  -| ['compiler_generated'] )
					      end
			      ( <_9> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_9})
				-| ['compiler_generated'] )
			    end
			( <_8> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_8})
			  -| ['compiler_generated'] )
		      end
	  ( <_5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_5})
	    -| ['compiler_generated'] )
	end
'handle_bitstring_gen_pat'/2 =
    %% Line 3509
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'bin',_13,Segments = [_14|_15]},St> when 'true' ->
	      %% Line 3510
	      case call 'lists':'last'
		       (Segments) of
		%% Line 3511
		<{'bin_element',Line,_16,'default',Flags}>
		    when call 'erlang':'is_list'
			  (Flags) ->
		    let <_8> =
			case %% Line 3512
			     call 'lists':'member'
				 ('binary', Flags) of
			  %% Line 3512
			  ( <( 'true'
			       -| ['compiler_generated'] )> when 'true' ->
				'true'
			    -| ['compiler_generated'] )
			  %% Line 3512
			  ( <( 'false'
			       -| ['compiler_generated'] )> when 'true' ->
				%% Line 3513
				( case call 'lists':'member'
					   ('bytes', Flags) of
				    ( <( 'true'
					 -| ['compiler_generated'] )> when 'true' ->
					  'true'
				      -| ['compiler_generated'] )
				    ( <( 'false'
					 -| ['compiler_generated'] )> when 'true' ->
					  ( case call 'lists':'member'
						     ('bits', Flags) of
					      ( <( 'true'
						   -| ['compiler_generated'] )> when 'true' ->
						    'true'
						-| ['compiler_generated'] )
					      ( <( 'false'
						   -| ['compiler_generated'] )> when 'true' ->
						    call 'lists':'member'
							('bitstring', Flags)
						-| ['compiler_generated'] )
					      ( <_4> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {( 'badarg'
								-| ['compiler_generated'] ),_4}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <_3> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {( 'badarg'
						      -| ['compiler_generated'] ),_3}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 3512
			  ( <_2> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {( 'badarg'
					    -| ['compiler_generated'] ),_2}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    in  %% Line 3512
			case _8 of
			  %% Line 3514
			  <'true'> when 'true' ->
			      %% Line 3515
			      apply 'add_error'/3
				  (Line, 'unsized_binary_in_bin_gen_pattern', St)
			  %% Line 3516
			  <'false'> when 'true' ->
			      %% Line 3517
			      St
			  ( <_9> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_9})
			    -| ['compiler_generated'] )
			end
		%% Line 3519
		<_17> when 'true' ->
		    %% Line 3520
		    St
	      end
	  %% Line 3522
	  <_18,St> when 'true' ->
	      %% Line 3523
	      St
	end
'fun_clauses'/3 =
    %% Line 3533
    fun (_0,_1,_2) ->
	%% Line 3534
	( case _2 of
	    ( <( {'lint',_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_rec157,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_15> =
		      fun (_12,_11) ->
			  %% Line 3535
			  case <_12,_11> of
			    <C,{Bvt0,St0}> when 'true' ->
				%% Line 3536
				case apply 'fun_clause'/3
					 (C, _1, St0) of
				  <{Cvt,St1}> when 'true' ->
				      let <_10> =
					  apply %% Line 3537
						'vtmerge'/2
					      (%% Line 3537
					       Cvt, %% Line 3537
						    Bvt0)
				      in  %% Line 3537
					  {_10,St1}
				  ( <_9> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_9})
				    -| ['compiler_generated'] )
				end
			    ( <_14,_13> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_14,_13})
				    -| [{'function_name',{'-fun_clauses/3-fun-0-',2}}] )
			      -| ['compiler_generated'] )
			  end
		  in  %% Line 3538
		      case _2 of
			<{'lint',_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93}> when 'true' ->
			    let <_8> =
				call 'erlang':'setelement'
				    (24, _2, 'false')
			    in  case call 'lists':'foldl'
					 (_15, {[],_8}, _0) of
				  <{Bvt,St2}> when 'true' ->
				      let <_17> =
					  apply %% Line 3539
						'vtold'/2
					      (%% Line 3539
					       Bvt, _1)
				      in  let <_18> =
					      apply %% Line 3539
						    'vt_no_unused'/1
						  (_17)
					  in  let <Uvt> =
						  apply %% Line 3539
							'vt_no_unsafe'/1
						      (_18)
					      in  %% Line 3540
						  case St2 of
						    <{'lint',_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128}> when 'true' ->
							let <_22> =
							    call 'erlang':'setelement'
								(24, St2, _rec157)
							in  {Uvt,_22}
						    ( <_129> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','lint'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
				  ( <_16> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_16})
				    -| ['compiler_generated'] )
				end
			( <_94> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','lint'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_59> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'fun_clause'/3 =
    %% Line 3542
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{'clause',_X_Line,H,G,B},Vt0,St0> when 'true' ->
	      %% Line 3543
	      case apply 'head'/4
		       (H, Vt0, [], St0) of
		<{Hvt,Binvt,St1}> when 'true' ->
		    let <Vt1> =
			apply %% Line 3544
			      'vtupdate'/2
			    (%% Line 3544
			     Hvt, %% Line 3544
				  Vt0)
		    in  let <St2> =
			    apply %% Line 3545
				  'shadow_vars'/4
				(%% Line 3545
				 Binvt, %% Line 3545
					Vt0, %% Line 3545
					     'fun', %% Line 3545
						    St1)
			in  let <_6> =
				apply %% Line 3546
				      'vtsubtract'/2
				    (%% Line 3546
				     Vt1, %% Line 3546
					  Binvt)
			    in  let <Vt2> =
				    apply %% Line 3546
					  'vtupdate'/2
					(_6, %% Line 3546
					     Binvt)
				in  %% Line 3547
				    case apply 'guard'/3
					     (G, Vt2, St2) of
				      <{Gvt,St3}> when 'true' ->
					  let <Vt3> =
					      apply %% Line 3548
						    'vtupdate'/2
						  (%% Line 3548
						   Gvt, %% Line 3548
							Vt2)
					  in  %% Line 3549
					      case apply 'exprs'/3
						       (B, Vt3, St3) of
						<{Bvt,St4}> when 'true' ->
						    let <Cvt> =
							apply %% Line 3550
							      'vtupdate'/2
							    (%% Line 3550
							     Bvt, %% Line 3550
								  Vt3)
						    in  %% Line 3552
							case apply 'check_unused_vars'/3
								 (Cvt, Vt0, St4) of
							  <{_21,St5}> when 'true' ->
							      let <Svt> =
								  apply %% Line 3554
									'vtold'/2
								      (%% Line 3554
								       Vt1, %% Line 3554
									    Binvt)
							      in  %% Line 3555
								  case apply 'check_old_unused_vars'/3
									   (Cvt, Svt, St5) of
								    <{_22,St6}> when 'true' ->
									let <_15> =
									    apply %% Line 3556
										  'vtsubtract'/2
										(%% Line 3556
										 Cvt, %% Line 3556
										      Svt)
									in  let <Vt4> =
										apply %% Line 3556
										      'vtmerge'/2
										    (%% Line 3556
										     Svt, _15)
									    in  let <_17> =
										    apply %% Line 3557
											  'vtold'/2
											(%% Line 3557
											 Vt4, %% Line 3557
											      Vt0)
										in  %% Line 3557
										    {_17,St6}
								    ( <_14> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_14})
								      -| ['compiler_generated'] )
								  end
							  ( <_12> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_12})
							    -| ['compiler_generated'] )
							end
						( <_10> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_10})
						  -| ['compiler_generated'] )
					      end
				      ( <_8> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_8})
					-| ['compiler_generated'] )
				    end
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  ( <_20,_19,_18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_20,_19,_18})
		  -| [{'function_name',{'fun_clause',3}}] )
	    -| ['compiler_generated'] )
	end
'pat_var'/5 =
    %% Line 3597
    fun (_0,_1,_2,_3,_4) ->
	%% Line 3598
	case call 'orddict':'find'
		 (_0, _3) of
	  %% Line 3599
	  <{'ok',{'bound',_X_Usage,Ls}}> when 'true' ->
	      %% Line 3600
	      {[],[{_0,{'bound','used',Ls}}|[]],_4}
	  %% Line 3601
	  <'error'> when 'true' ->
	      %% Line 3602
	      case call 'orddict':'find'
		       (_0, _2) of
		%% Line 3603
		<{'ok',{'bound',_X_Usage,Ls}}> when 'true' ->
		    %% Line 3604
		    {[{_0,{'bound','used',Ls}}|[]],[],_4}
		%% Line 3605
		<{'ok',{{'unsafe',In},_X_Usage,Ls}}> when 'true' ->
		    let <_5> =
			apply %% Line 3607
			      'add_error'/3
			    (_1, %% Line 3607
				 {'unsafe_var',_0,In}, _4)
		    in  %% Line 3606
			{[{_0,{'bound','used',Ls}}|[]],[],_5}
		%% Line 3608
		<{'ok',{{'export',From},_X_Usage,Ls}}> when 'true' ->
		    let <_6> =
			apply %% Line 3611
			      'add_warning'/3
			    (_1, %% Line 3611
				 {'exported_var',_0,From}, _4)
		    in  %% Line 3609
			{[{_0,{'bound','used',Ls}}|[]],[],_6}
		%% Line 3612
		<{'ok',{'stacktrace',_X_Usage,Ls}}> when 'true' ->
		    let <_7> =
			apply %% Line 3614
			      'add_error'/3
			    (_1, %% Line 3614
				 {'stacktrace_bound',_0}, _4)
		    in  %% Line 3613
			{[{_0,{'bound','used',Ls}}|[]],[],_7}
		%% Line 3615
		<'error'>
		    when ( try
			    ( let <_10> =
				  case ( call ( 'erlang'
						-| ['compiler_generated'] ):( 'is_record'
									      -| ['compiler_generated'] )
					     (_4, ( 'lint'
						    -| ['compiler_generated'] ), ( 35
										   -| ['compiler_generated'] ))
					 -| ['compiler_generated'] ) of
				    ( <( 'true'
					 -| ['compiler_generated'] )> when 'true' ->
					  ( 'true'
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <( 'false'
					 -| ['compiler_generated'] )> when 'true' ->
					  ( 'fail'
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <( _8
					 -| ['compiler_generated'] )> when 'true' ->
					  ( _8
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      in  let <_11> =
				      call 'erlang':'=:='
					  (( _10
					     -| ['compiler_generated'] ), 'true')
				  in  let <_12> =
					  call 'erlang':'element'
					      (24, _4)
				      in  let <_13> =
					      call 'erlang':'=:='
						  (_12, 'true')
					  in  ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_11, _13)
						-| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
			-| ['compiler_generated'] ) ->
		    let <_14> =
			apply %% Line 3617
			      'add_error'/3
			    (_1, %% Line 3617
				 {'variable_in_record_def',_0}, _4)
		    in  %% Line 3616
			{[],[{_0,{'bound','unused',[_1|[]]}}|[]],_14}
		%% Line 3618
		<'error'> when 'true' ->
		    {[],[{_0,{'bound','unused',[_1|[]]}}|[]],_4}
		( <_15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_15})
		  -| ['compiler_generated'] )
	      end
	  ( <_16> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_16})
	    -| ['compiler_generated'] )
	end
'pat_binsize_var'/5 =
    %% Line 3627
    fun (_0,_1,_2,_3,_4) ->
	%% Line 3628
	case call 'orddict':'find'
		 (_0, _3) of
	  %% Line 3629
	  <{'ok',{'bound',_X_Used,Ls}}> when 'true' ->
	      %% Line 3630
	      {[],[{_0,{'bound','used',Ls}}|[]],_4}
	  %% Line 3631
	  <'error'> when 'true' ->
	      %% Line 3632
	      case call 'orddict':'find'
		       (_0, _2) of
		%% Line 3633
		<{'ok',{'bound',_X_Used,Ls}}> when 'true' ->
		    %% Line 3634
		    {[{_0,{'bound','used',Ls}}|[]],[],_4}
		%% Line 3635
		<{'ok',{{'unsafe',In},_X_Used,Ls}}> when 'true' ->
		    let <_5> =
			apply %% Line 3637
			      'add_error'/3
			    (_1, %% Line 3637
				 {'unsafe_var',_0,In}, _4)
		    in  %% Line 3636
			{[{_0,{'bound','used',Ls}}|[]],[],_5}
		%% Line 3638
		<{'ok',{{'export',From},_X_Used,Ls}}> when 'true' ->
		    let <_6> =
			apply %% Line 3642
			      'exported_var'/4
			    (_1, _0, %% Line 3642
				     From, _4)
		    in  %% Line 3639
			{[{_0,{'bound','used',Ls}}|[]],[],_6}
		%% Line 3643
		<'error'> when 'true' ->
		    let <_7> =
			apply %% Line 3645
			      'add_error'/3
			    (_1, %% Line 3645
				 {'unbound_var',_0}, _4)
		    in  %% Line 3644
			{[{_0,{'bound','used',[_1|[]]}}|[]],[],_7}
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_8})
		  -| ['compiler_generated'] )
	      end
	  ( <_9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_9})
	    -| ['compiler_generated'] )
	end
'expr_var'/4 =
    %% Line 3657
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <V,Line,Vt,St = {'lint',_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,'none',_45}> when 'true' ->
	      %% Line 3658
	      apply 'do_expr_var'/4
		  (V, Line, Vt, St)
	  %% Line 3659
	  <V,Line,Vt0,St0 = {'lint',_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,Bvt0,_78}>
	      when call 'erlang':'is_list'
		    (Bvt0) ->
	      %% Line 3660
	      case apply 'pat_binsize_var'/5
		       (V, Line, Vt0, Bvt0, St0) of
		<{Vt,Bvt,St}> when 'true' ->
		    let <_rec160> =
			apply %% Line 3661
			      'vtmerge'/2
			    (%% Line 3661
			     Bvt0, %% Line 3661
				   Bvt)
		    in  %% Line 3661
			case St of
			  <{'lint',_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112}> when 'true' ->
			      let <_8> =
				  call 'erlang':'setelement'
				      (34, St, _rec160)
			      in  {Vt,_8}
			  ( <_113> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','lint'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  ( <_12,_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11,_10,_9})
		  -| [{'function_name',{'expr_var',4}}] )
	    -| ['compiler_generated'] )
	end
'do_expr_var'/4 =
    %% Line 3663
    fun (_0,_1,_2,_3) ->
	%% Line 3664
	case call 'orddict':'find'
		 (_0, _2) of
	  %% Line 3665
	  <{'ok',{'bound',_X_Usage,Ls}}> when 'true' ->
	      %% Line 3666
	      {[{_0,{'bound','used',Ls}}|[]],_3}
	  %% Line 3667
	  <{'ok',{{'unsafe',In},_X_Usage,Ls}}> when 'true' ->
	      let <_4> =
		  apply %% Line 3669
			'add_error'/3
		      (_1, %% Line 3669
			   {'unsafe_var',_0,In}, _3)
	      in  %% Line 3668
		  {[{_0,{'bound','used',Ls}}|[]],_4}
	  %% Line 3670
	  <{'ok',{_@r0 = {'export',From},_X_Usage,Ls}}> when 'true' ->
	      %% Line 3671
	      case apply 'is_warn_enabled'/2
		       ('export_vars', _3) of
		%% Line 3672
		<'true'> when 'true' ->
		    let <_5> =
			apply %% Line 3674
			      'add_warning'/3
			    (_1, %% Line 3674
				 {'exported_var',_0,From}, _3)
		    in  %% Line 3673
			{[{_0,{'bound','used',Ls}}|[]],_5}
		%% Line 3675
		<'false'> when 'true' ->
		    %% Line 3676
		    {[{_0,{_@r0,'used',Ls}}|[]],_3}
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3678
	  <{'ok',{'stacktrace',_X_Usage,Ls}}> when 'true' ->
	      let <_7> =
		  apply %% Line 3680
			'add_error'/3
		      (_1, %% Line 3680
			   {'stacktrace_guard',_0}, _3)
	      in  %% Line 3679
		  {[{_0,{'bound','used',Ls}}|[]],_7}
	  %% Line 3681
	  <'error'> when 'true' ->
	      let <_8> =
		  apply %% Line 3683
			'add_error'/3
		      (_1, %% Line 3683
			   {'unbound_var',_0}, _3)
	      in  %% Line 3682
		  {[{_0,{'bound','used',[_1|[]]}}|[]],_8}
	  ( <_9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_9})
	    -| ['compiler_generated'] )
	end
'exported_var'/4 =
    %% Line 3686
    fun (_0,_1,_2,_3) ->
	%% Line 3687
	case apply 'is_warn_enabled'/2
		 ('export_vars', _3) of
	  %% Line 3688
	  <'true'> when 'true' ->
	      apply 'add_warning'/3
		  (_0, {'exported_var',_1,_2}, _3)
	  %% Line 3689
	  <'false'> when 'true' ->
	      _3
	  ( <_4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_4})
	    -| ['compiler_generated'] )
	end
'shadow_vars'/4 =
    %% Line 3692
    fun (_0,_1,_2,_3) ->
	%% Line 3693
	case apply 'is_warn_enabled'/2
		 ('shadow_vars', _3) of
	  %% Line 3694
	  <'true'> when 'true' ->
	      let <_10> =
		  fun (_7,_6) ->
		      %% Line 3695
		      case <_7,_6> of
			<{V,{_16,_17,[L|_18]}},St> when 'true' ->
			    %% Line 3696
			    apply 'add_warning'/3
				(L, {'shadowed_var',V,_2}, St)
			%% Line 3697
			<_19,St> when 'true' ->
			    St
		      end
	      in  let <_4> =
		      apply %% Line 3698
			    'vt_no_unsafe'/1
			  (_1)
		  in  let <_5> =
			  apply %% Line 3698
				'vtold'/2
			      (_0, _4)
		      in  %% Line 3695
			  call 'lists':'foldl'
			      (_10, _3, _5)
	  %% Line 3699
	  <'false'> when 'true' ->
	      _3
	  ( <_11> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_11})
	    -| ['compiler_generated'] )
	end
'check_unused_vars'/3 =
    %% Line 3702
    fun (_0,_1,_2) ->
	let <U> =
	    apply %% Line 3703
		  'unused_vars'/3
		(_0, _1, _2)
	in  %% Line 3704
	    apply 'warn_unused_vars'/3
		(U, _0, _2)
'check_old_unused_vars'/3 =
    %% Line 3706
    fun (_0,_1,_2) ->
	let <_3> =
	    apply %% Line 3707
		  'vtold'/2
		(_0, _1)
	in  let <U> =
		apply %% Line 3707
		      'unused_vars'/3
		    (_3, %% Line 3707
			 [], _2)
	    in  %% Line 3708
		apply 'warn_unused_vars'/3
		    (U, _0, _2)
'unused_vars'/3 =
    %% Line 3710
    fun (_0,_1,_2) ->
	let <_8> =
	    fun (_5,_4) ->
		%% Line 3711
		case <_5,_4> of
		  <V,{_X_State,'unused',_X_Ls}> when 'true' ->
		      %% Line 3712
		      case call 'erlang':'atom_to_list'
			       (V) of
			%% Line 3713
			<[95|_13]> when 'true' ->
			    'false'
			%% Line 3714
			<_14> when 'true' ->
			    'true'
		      end
		  %% Line 3716
		  <_X_V,_X_How> when 'true' ->
		      'false'
		end
	in  let <U0> =
		call %% Line 3711
		     'orddict':%% Line 3711
			       'filter'
		    (_8, _0)
	    in  %% Line 3718
		apply 'vtnew'/2
		    (U0, _1)
'warn_unused_vars'/3 =
    %% Line 3720
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[],Vt,St0> when 'true' ->
	      %% Line 3721
	      {Vt,St0}
	  %% Line 3722
	  <U,Vt,St0> when 'true' ->
	      let <_14> =
		  case %% Line 3723
		       apply 'is_warn_enabled'/2
			   ('unused_vars', St0) of
		    %% Line 3724
		    <'false'> when 'true' ->
			St0
		    %% Line 3725
		    <'true'> when 'true' ->
			let <_12> =
			    fun (_9,_8) ->
				%% Line 3726
				case <_9,_8> of
				  <{V,{_24,'unused',Ls}},St> when 'true' ->
				      let <_7> =
					  fun (_4,_3) ->
					      %% Line 3728
					      apply 'add_warning'/3
						  (_4, {'unused_var',V}, _3)
				      in  %% Line 3727
					  call 'lists':'foldl'
					      (_7, %% Line 3730
						   St, %% Line 3730
						       Ls)
				  ( <_11,_10> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_11,_10})
					  -| [{'function_name',{'-warn_unused_vars/3-fun-1-',2}}] )
				    -| ['compiler_generated'] )
				end
			in  %% Line 3726
			    call 'lists':'foldl'
				(_12, %% Line 3731
				      St0, %% Line 3731
					   U)
		    ( <_13> when 'true' ->
			  %% Line 3723
			  primop 'match_fail'
			      ({'case_clause',_13})
		      -| ['compiler_generated'] )
		  end
	      in  let <_18> =
		      fun (_16) ->
			  %% Line 3734
			  case _16 of
			    <{V,{State,_25,Ls}}> when 'true' ->
				{V,{State,'used',Ls}}
			    ( <_17> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_17})
				    -| [{'function_name',{'-warn_unused_vars/3-fun-2-',1}}] )
			      -| ['compiler_generated'] )
			  end
		  in  let <UVt> =
			  call %% Line 3734
			       'lists':%% Line 3734
				       'map'
			      (_18, %% Line 3734
				    U)
		      in  let <_20> =
			      apply %% Line 3735
				    'vtmerge'/2
				  (%% Line 3735
				   Vt, %% Line 3735
				       UVt)
			  in  %% Line 3735
			      {_20,_14}
	end
'is_var_bound'/2 =
    %% Line 3738
    fun (_0,_1) ->
	%% Line 3739
	case call 'orddict':'find'
		 (_0, _1) of
	  %% Line 3740
	  <{'ok',{'bound',_X_Usage,_5}}> when 'true' ->
	      'true'
	  %% Line 3741
	  <_6> when 'true' ->
	      'false'
	end
'vtupdate'/2 =
    %% Line 3750
    fun (_0,_1) ->
	let <_10> =
	    fun (_6,_5,_4) ->
		%% Line 3751
		case <_6,_5,_4> of
		  <_X_V,{S,U1,L1},{_X_S,U2,L2}> when 'true' ->
		      let <_3> =
			  apply %% Line 3752
				'merge_used'/2
			      (%% Line 3752
			       U1, %% Line 3752
				   U2)
		      in  let <_2> =
			      apply %% Line 3752
				    'merge_lines'/2
				  (%% Line 3752
				   L1, %% Line 3752
				       L2)
			  in  %% Line 3752
			      {S,_3,_2}
		  ( <_9,_8,_7> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_9,_8,_7})
			  -| [{'function_name',{'-vtupdate/2-fun-0-',3}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 3751
	    call 'orddict':'merge'
		(_10, _0, _1)
'vtunsafe'/3 =
    %% Line 3758
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{Tag,FileLine},Uvt,Vt> when 'true' ->
	      let <Line> =
		  call %% Line 3759
		       'erl_anno':%% Line 3759
				  'location'
		      (%% Line 3759
		       FileLine)
	      in  %% Line 3760
		  ( letrec
			'lc$^0'/1 =
			    fun (_7) ->
				case _7 of
				  <[{V,{_12,U,Ls}}|_5]> when 'true' ->
				      let <_8> =
					  apply 'lc$^0'/1
					      (_5)
				      in  ( [{V,{{'unsafe',{Tag,Line}},U,Ls}}|_8]
					    -| ['compiler_generated'] )
				  ( <[_4|_5]> when 'true' ->
					apply 'lc$^0'/1
					    (_5)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_13> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_13})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_6> =
			    apply 'vtnew'/2
				(Uvt, Vt)
			in  apply 'lc$^0'/1
				(_6)
		    -| ['list_comprehension'] )
	  ( <_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9})
		  -| [{'function_name',{'vtunsafe',3}}] )
	    -| ['compiler_generated'] )
	end
'vtmerge'/2 =
    %% Line 3766
    fun (_0,_1) ->
	let <_11> =
	    fun (_7,_6,_5) ->
		%% Line 3767
		case <_7,_6,_5> of
		  <_X_V,{S1,U1,L1},{S2,U2,L2}> when 'true' ->
		      let <_4> =
			  apply %% Line 3768
				'merge_state'/2
			      (%% Line 3768
			       S1, %% Line 3768
				   S2)
		      in  let <_3> =
			      apply %% Line 3769
				    'merge_used'/2
				  (%% Line 3769
				   U1, %% Line 3769
				       U2)
			  in  let <_2> =
				  apply %% Line 3770
					'merge_lines'/2
				      (%% Line 3770
				       L1, %% Line 3770
					   L2)
			      in  %% Line 3768
				  {_4,_3,_2}
		  ( <_10,_9,_8> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_10,_9,_8})
			  -| [{'function_name',{'-vtmerge/2-fun-0-',3}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 3767
	    call 'orddict':'merge'
		(_11, _0, _1)
'vtmerge'/1 =
    %% Line 3773
    fun (_0) ->
	let <_5> =
	    fun (_2,_1) ->
		apply 'vtmerge'/2
		    (_2, _1)
	in  call 'lists':'foldl'
		(_5, [], _0)
'vtmerge_pat'/2 =
    %% Line 3775
    fun (_0,_1) ->
	let <_10> =
	    fun (_6,_5,_4) ->
		%% Line 3776
		case <_6,_5,_4> of
		  <_X_V,{S1,_X_Usage1,L1},{S2,_X_Usage2,L2}> when 'true' ->
		      let <_3> =
			  apply %% Line 3777
				'merge_state'/2
			      (%% Line 3777
			       S1, %% Line 3777
				   S2)
		      in  let <_2> =
			      apply %% Line 3777
				    'merge_lines'/2
				  (%% Line 3777
				   L1, %% Line 3777
				       L2)
			  in  %% Line 3777
			      {_3,'used',_2}
		  ( <_9,_8,_7> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_9,_8,_7})
			  -| [{'function_name',{'-vtmerge_pat/2-fun-0-',3}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 3776
	    call 'orddict':'merge'
		(_10, _0, _1)
'merge_lines'/2 =
    %% Line 3780
    fun (_0,_1) ->
	%% Line 3781
	call 'ordsets':'union'
	    (_0, _1)
'merge_state'/2 =
    %% Line 3783
    fun (_0,_1) ->
	case <_0,_1> of
	  <S1 = {'unsafe',_X_F1},_X_S2> when 'true' ->
	      S1
	  %% Line 3784
	  <_X_S1,S2 = {'unsafe',_X_F2}> when 'true' ->
	      S2
	  %% Line 3785
	  <'bound',S2> when 'true' ->
	      S2
	  %% Line 3786
	  <S1,'bound'> when 'true' ->
	      S1
	  %% Line 3787
	  <_@r0 = {'export',F1},{'export',_X_F2}> when 'true' ->
	      %% Line 3789
	      _@r0
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'merge_state',2}}] )
	    -| ['compiler_generated'] )
	end
'merge_used'/2 =
    %% Line 3791
    fun (_0,_1) ->
	case <_0,_1> of
	  <'used',_X_Usage2> when 'true' ->
	      'used'
	  %% Line 3792
	  <_X_Usage1,'used'> when 'true' ->
	      'used'
	  %% Line 3793
	  <'unused','unused'> when 'true' ->
	      'unused'
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'merge_used',2}}] )
	    -| ['compiler_generated'] )
	end
'vtnew'/2 =
    %% Line 3798
    fun (_0,_1) ->
	let <_7> =
	    fun (_4,_3) ->
		let <_2> =
		    call %% Line 3799
			 'orddict':%% Line 3799
				   'is_key'
			(_4, _1)
		in  %% Line 3799
		    call 'erlang':'not'
			(_2)
	in  %% Line 3799
	    call 'orddict':'filter'
		(_7, _0)
'vtsubtract'/2 =
    %% Line 3804
    fun (_0,_1) ->
	%% Line 3805
	apply 'vtnew'/2
	    (_0, _1)
'vtold'/2 =
    %% Line 3810
    fun (_0,_1) ->
	let <_6> =
	    fun (_3,_2) ->
		%% Line 3811
		call 'orddict':'is_key'
		    (_3, _1)
	in  %% Line 3811
	    call 'orddict':'filter'
		(_6, _0)
'vt_no_unsafe'/1 =
    %% Line 3813
    fun (_0) ->
	( letrec
	      'lc$^0'/1 =
		  fun (_5) ->
		      case _5 of
			<[V = {_9,{S,_X_U,_X_L}}|_2]> when 'true' ->
			    let <_4> =
				case %% Line 3814
				     S of
				  %% Line 3815
				  <{'unsafe',_10}> when 'true' ->
				      'false'
				  %% Line 3816
				  <_11> when 'true' ->
				      'true'
				end
			    in  %% Line 3814
				( case _4 of
				    <'true'> when 'true' ->
					let <_6> =
					    apply 'lc$^0'/1
						(_2)
					in  ( [V|_6]
					      -| ['compiler_generated'] )
				    ( <'false'> when 'true' ->
					  apply 'lc$^0'/1
					      (_2)
				      -| ['compiler_generated'] )
				    ( <_7> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_7})
				      -| ['compiler_generated'] )
				  end
				  -| ['list_comprehension'] )
			( <[_1|_2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_12> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_12})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_0)
	  -| ['list_comprehension'] )
'vt_no_unused'/1 =
    %% Line 3819
    fun (_0) ->
	( letrec
	      'lc$^0'/1 =
		  fun (_3) ->
		      case _3 of
			<[V = {_6,{_7,U,_X_L}}|_2]>
			    when call 'erlang':'=/='
				  (U,
				   'unused') ->
			    let <_4> =
				apply 'lc$^0'/1
				    (_2)
			    in  ( [V|_4]
				  -| ['compiler_generated'] )
			( <[_1|_2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_8> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_8})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_0)
	  -| ['list_comprehension'] )
'copy_expr'/2 =
    %% Line 3824
    fun (_0,_1) ->
	let <_4> =
	    fun (_2) ->
		_1
	in  %% Line 3825
	    call 'erl_parse':'map_anno'
		(_4, _0)
'check_record_info_call'/4 =
    %% Line 3830
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <_X_Line,La,[{'atom',Li,Info}|[{'atom',_X_Ln,Name}|[]]],St> when 'true' ->
	      %% Line 3831
	      case call 'lists':'member'
		       (Info, ['fields'|['size']]) of
		%% Line 3832
		<'true'> when 'true' ->
		    apply 'exist_record'/3
			(La, Name, St)
		%% Line 3833
		<'false'> when 'true' ->
		    apply 'add_error'/3
			(Li, 'illegal_record_info', St)
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3835
	  <Line,_X_La,_X_As,St> when 'true' ->
	      %% Line 3836
	      apply 'add_error'/3
		  (Line, 'illegal_record_info', St)
	end
'has_wildcard_field'/1 =
    %% Line 3838
    fun (_0) ->
	case _0 of
	  <[{'record_field',_X_Lf,{'var',_X_La,'_'},_X_Val}|_X_Fs]> when 'true' ->
	      'true'
	  %% Line 3839
	  <[_2|Fs]> when 'true' ->
	      apply 'has_wildcard_field'/1
		  (Fs)
	  %% Line 3840
	  <[]> when 'true' ->
	      'false'
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'has_wildcard_field',1}}] )
	    -| ['compiler_generated'] )
	end
'check_remote_function'/5 =
    %% Line 3845
    fun (_0,_1,_2,_3,_4) ->
	let <St1> =
	    apply %% Line 3846
		  'deprecated_function'/5
		(_0, _1, _2, _3, _4)
	in  let <St2> =
		apply %% Line 3847
		      'check_qlc_hrl'/5
		    (_0, _1, _2, _3, %% Line 3847
				     St1)
	    in  %% Line 3848
		apply 'format_function'/5
		    (_0, _1, _2, _3, St2)
'check_qlc_hrl'/5 =
    %% Line 3854
    fun (_0,_1,_2,_3,_4) ->
	let <Arity> =
	    call %% Line 3855
		 'erlang':%% Line 3855
			  'length'
		(_3)
	in  %% Line 3856
	    case _3 of
	      %% Line 3857
	      <[{'lc',_X_L,_X_E,_X_Qs}|_29]>
		  when try
			let <_6> =
			    call 'erlang':'=:='
				(_1, 'qlc')
			in  let <_7> =
				call 'erlang':'=:='
				    (_2, 'q')
			    in  let <_8> =
				    call %% Line 3858
					 'erlang':%% Line 3858
						  '<'
					(%% Line 3858
					 Arity, %% Line 3858
						3)
				in  ( let <_11> =
					  case %% Line 3858
					       ( call ( 'erlang'
							-| ['compiler_generated'] ):( 'is_record'
										      -| ['compiler_generated'] )
						     (_4, ( 'lint'
							    -| ['compiler_generated'] ), ( 35
											   -| ['compiler_generated'] ))
						 -| ['compiler_generated'] ) of
					    %% Line 3858
					    ( <( 'true'
						 -| ['compiler_generated'] )> when 'true' ->
						  ( 'true'
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 3858
					    ( <( 'false'
						 -| ['compiler_generated'] )> when 'true' ->
						  ( 'fail'
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 3858
					    ( <( _9
						 -| ['compiler_generated'] )> when 'true' ->
						  ( _9
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				      in  let <_12> =
					      call 'erlang':'=:='
						  (%% Line 3858
						   ( _11
						     -| ['compiler_generated'] ), 'true')
					  in  %% Line 3858
					      let <_13> =
						  call 'erlang':'element'
						      (25, _4)
					      in  let <_14> =
						      call 'erlang':'=:='
							  (_13, 'true')
						  in  let <_15> =
							  call ( 'erlang'
								 -| ['compiler_generated'] ):( 'and'
											       -| ['compiler_generated'] )
							      (_12, _14)
						      in  let <_16> =
							      call 'erlang':'not'
								  (_15)
							  in  let <_17> =
								  call 'erlang':'and'
								      (_8, _16)
							      in  let <_18> =
								      call 'erlang':'and'
									  (_7, _17)
								  in  let <_19> =
									  call 'erlang':'and'
									      (_6, _18)
								      in  let <_20> =
									      call 'erlang':'is_boolean'
										  (_13)
									  in  let <_21> =
										  call 'erlang':'and'
										      (_19, _20)
									      in  let <_22> =
										      call 'erlang':'is_boolean'
											  (_11)
										  in  ( call 'erlang':'and'
											    (_21, _22)
											-| ['compiler_generated'] )
				      -| ['compiler_generated'] )
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  %% Line 3859
		  apply 'add_warning'/3
		      (_0, {'missing_qlc_hrl',Arity}, _4)
	      %% Line 3860
	      <_30> when 'true' ->
		  _4
	    end
'deprecated_function'/5 =
    %% Line 3869
    fun (_0,_1,_2,_3,_4) ->
	let <Arity> =
	    call %% Line 3870
		 'erlang':%% Line 3870
			  'length'
		(_3)
	in  let <MFA> = {_1,_2,%% Line 3871
		       Arity}
	    in  %% Line 3872
		case call 'otp_internal':'obsolete'
			 (_1, _2, Arity) of
		  %% Line 3873
		  <{'deprecated',String}>
		      when call 'erlang':'is_list'
			    (String) ->
		      let <_8> =
			  apply %% Line 3874
				'is_warn_enabled'/2
			      (%% Line 3874
			       'deprecated_function', _4)
		      in  let <_12> =
			      case _8 of
				%% Line 3874
				( <'false'> when 'true' ->
				      'true'
				  -| ['compiler_generated'] )
				%% Line 3874
				( <'true'> when 'true' ->
				      %% Line 3875
				      ( case _4 of
					  ( <( {'lint',_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_rec162,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59}
					       -| ['compiler_generated'] )> when 'true' ->
						call 'ordsets':'is_element'
						    (MFA, _rec162)
					    -| ['compiler_generated'] )
					  ( <_60> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','lint'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_cor_variable> when 'true' ->
				      %% Line 3874
				      call 'erlang':'error'
					  ('badarg')
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 3874
			      case _12 of
				%% Line 3876
				<'true'> when 'true' ->
				    _4
				%% Line 3878
				<'false'> when 'true' ->
				    %% Line 3879
				    apply 'add_warning'/3
					(_0, {'deprecated',MFA,String}, _4)
				( <_13> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_13})
				  -| ['compiler_generated'] )
			      end
		  %% Line 3881
		  <{'deprecated',Replacement,Rel}> when 'true' ->
		      let <_15> =
			  apply %% Line 3882
				'is_warn_enabled'/2
			      (%% Line 3882
			       'deprecated_function', _4)
		      in  let <_19> =
			      case _15 of
				%% Line 3882
				( <'false'> when 'true' ->
				      'true'
				  -| ['compiler_generated'] )
				%% Line 3882
				( <'true'> when 'true' ->
				      %% Line 3883
				      ( case _4 of
					  ( <( {'lint',_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_rec163,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93}
					       -| ['compiler_generated'] )> when 'true' ->
						call 'ordsets':'is_element'
						    (MFA, _rec163)
					    -| ['compiler_generated'] )
					  ( <_94> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','lint'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_cor_variable> when 'true' ->
				      %% Line 3882
				      call 'erlang':'error'
					  ('badarg')
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 3882
			      case _19 of
				%% Line 3884
				<'true'> when 'true' ->
				    _4
				%% Line 3886
				<'false'> when 'true' ->
				    %% Line 3887
				    apply 'add_warning'/3
					(_0, {'deprecated',MFA,Replacement,Rel}, _4)
				( <_20> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_20})
				  -| ['compiler_generated'] )
			      end
		  %% Line 3889
		  <{'removed',String}>
		      when call 'erlang':'is_list'
			    (String) ->
		      %% Line 3890
		      apply 'add_removed_warning'/4
			  (_0, MFA, {'removed',MFA,String}, _4)
		  %% Line 3891
		  <{'removed',Replacement,Rel}> when 'true' ->
		      %% Line 3892
		      apply 'add_removed_warning'/4
			  (_0, MFA, {'removed',MFA,Replacement,Rel}, _4)
		  %% Line 3893
		  <'no'> when 'true' ->
		      _4
		  ( <_21> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_21})
		    -| ['compiler_generated'] )
		end
'add_removed_warning'/4 =
    %% Line 3897
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Line,MFA = {M,_16,_17},Warning,St = {'lint',_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,NotRemoved,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50}> when 'true' ->
	      let <_10> =
		  case %% Line 3898
		       apply 'is_warn_enabled'/2
			   ('removed', St) of
		    %% Line 3898
		    ( <( 'true'
			 -| ['compiler_generated'] )> when 'true' ->
			  %% Line 3899
			  ( case call 'gb_sets':'is_element'
				     (M, NotRemoved) of
			      ( <'false'> when 'true' ->
				    let <_7> =
					call %% Line 3900
					     'gb_sets':%% Line 3900
						       'is_element'
					    (%% Line 3900
					     MFA, %% Line 3900
						  NotRemoved)
				    in  %% Line 3900
					call 'erlang':'not'
					    (_7)
				-| ['compiler_generated'] )
			      ( <'true'> when 'true' ->
				    'false'
				-| ['compiler_generated'] )
			      ( <_cor_variable> when 'true' ->
				    call 'erlang':'error'
					('badarg')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		    %% Line 3898
		    ( <( 'false'
			 -| ['compiler_generated'] )> when 'true' ->
			  'false'
		      -| ['compiler_generated'] )
		    %% Line 3898
		    ( <_4> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {( 'badarg'
				      -| ['compiler_generated'] ),_4}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 3898
		  case _10 of
		    %% Line 3901
		    <'true'> when 'true' ->
			%% Line 3902
			apply 'add_warning'/3
			    (Line, Warning, St)
		    %% Line 3903
		    <'false'> when 'true' ->
			%% Line 3904
			St
		    ( <_11> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_11})
		      -| ['compiler_generated'] )
		  end
	  ( <_15,_14,_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_15,_14,_13,_12})
		  -| [{'function_name',{'add_removed_warning',4}}] )
	    -| ['compiler_generated'] )
	end
'deprecated_type'/5 =
    %% Line 3909
    fun (_0,_1,_2,_3,_4) ->
	let <NAs> =
	    call %% Line 3910
		 'erlang':%% Line 3910
			  'length'
		(_3)
	in  %% Line 3911
	    case call 'otp_internal':'obsolete_type'
		     (_1, _2, NAs) of
	      %% Line 3912
	      <{'deprecated',String}>
		  when call 'erlang':'is_list'
			(String) ->
		  %% Line 3913
		  case apply 'is_warn_enabled'/2
			   ('deprecated_type', _4) of
		    %% Line 3914
		    <'true'> when 'true' ->
			%% Line 3915
			apply 'add_warning'/3
			    (_0, {'deprecated_type',{_1,_2,NAs},String}, _4)
		    %% Line 3916
		    <'false'> when 'true' ->
			_4
		    ( <_6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_6})
		      -| ['compiler_generated'] )
		  end
	      %% Line 3919
	      <{'removed',String}> when 'true' ->
		  %% Line 3920
		  apply 'add_warning'/3
		      (_0, {'removed_type',{_1,_2,NAs},String}, _4)
	      %% Line 3921
	      <'no'> when 'true' ->
		  _4
	      ( <_7> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_7})
		-| ['compiler_generated'] )
	    end
'obsolete_guard'/2 =
    %% Line 3925
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'call',Line,{'atom',Lr,F},As},St0> when 'true' ->
	      let <Arity> =
		  call %% Line 3926
		       'erlang':%% Line 3926
				'length'
		      (%% Line 3926
		       As)
	      in  %% Line 3927
		  case call 'erl_internal':'old_type_test'
			   (F, Arity) of
		    %% Line 3928
		    <'false'> when 'true' ->
			%% Line 3929
			apply 'deprecated_function'/5
			    (Line, 'erlang', F, As, St0)
		    %% Line 3930
		    <'true'> when 'true' ->
			let <_4> =
			    case %% Line 3931
				 apply 'is_warn_enabled'/2
				     ('obsolete_guard', St0) of
			      %% Line 3932
			      <'true'> when 'true' ->
				  %% Line 3933
				  apply 'add_warning'/3
				      (Lr, {'obsolete_guard',{F,Arity}}, St0)
			      %% Line 3934
			      <'false'> when 'true' ->
				  %% Line 3935
				  St0
			      ( <_3> when 'true' ->
				    %% Line 3931
				    primop 'match_fail'
					({'case_clause',_3})
				-| ['compiler_generated'] )
			    end
			in  %% Line 3937
			    apply 'test_overriden_by_local'/4
				(Lr, F, Arity, _4)
		    ( <_6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3939
	  <_X_G,St> when 'true' ->
	      %% Line 3940
	      St
	end
'test_overriden_by_local'/4 =
    %% Line 3942
    fun (_0,_1,_2,_3) ->
	let <_4> =
	    call %% Line 3943
		 'erlang':%% Line 3943
			  'atom_to_list'
		(_1)
	in  let <_5> =
		[105|%% Line 3943
		     [115|[95|_4]]]
	    in  let <ModernTest> =
		    call %% Line 3943
			 'erlang':%% Line 3943
				  'list_to_atom'
			(_5)
		in  %% Line 3944
		    ( case _3 of
			( <( {'lint',_14,_15,_16,_17,_18,_19,_20,_rec164,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46}
			     -| ['compiler_generated'] )> when 'true' ->
			      case apply 'is_local_function'/2
				       (_rec164, {ModernTest,_2}) of
				%% Line 3945
				<'true'> when 'true' ->
				    %% Line 3946
				    apply 'add_error'/3
					(_0, {'obsolete_guard_overridden',_1}, _3)
				%% Line 3947
				<'false'> when 'true' ->
				    _3
				( <_9> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_9})
				  -| ['compiler_generated'] )
			      end
			  -| ['compiler_generated'] )
			( <_47> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','lint'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
'keyword_warning'/3 =
    %% Line 3954
    fun (_0,_1,_2) ->
	_2
'format_function'/5 =
    %% Line 3959
    fun (_0,_1,_2,_3,_4) ->
	%% Line 3960
	case apply 'is_format_function'/2
		 (_1, _2) of
	  %% Line 3961
	  <'true'> when 'true' ->
	      %% Line 3962
	      ( case _4 of
		  ( <( {'lint',_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_rec165,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec165 of
			  %% Line 3963
			  <Lev>
			      when call 'erlang':'>'
				    (_rec165,
				     0) ->
			      %% Line 3964
			      case apply 'check_format_1'/1
				       (_3) of
				%% Line 3965
				<{'warn',Level,Fmt,Fas}>
				    when call 'erlang':'=<'
					  (Level,
					   Lev) ->
				    %% Line 3966
				    apply 'add_warning'/3
					(_0, {'format_error',{Fmt,Fas}}, _4)
				%% Line 3967
				<_49> when 'true' ->
				    _4
			      end
			  %% Line 3969
			  <_X_Lev> when 'true' ->
			      _4
			end
		    -| ['compiler_generated'] )
		  ( <_48> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','lint'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 3971
	  <'false'> when 'true' ->
	      _4
	  ( <_9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_9})
	    -| ['compiler_generated'] )
	end
'is_format_function'/2 =
    %% Line 3974
    fun (_0,_1) ->
	case <_0,_1> of
	  <'io','fwrite'> when 'true' ->
	      'true'
	  %% Line 3975
	  <'io','format'> when 'true' ->
	      'true'
	  %% Line 3976
	  <'io_lib','fwrite'> when 'true' ->
	      'true'
	  %% Line 3977
	  <'io_lib','format'> when 'true' ->
	      'true'
	  %% Line 3978
	  <M,F>
	      when let <_2> =
		    call 'erlang':'is_atom'
			(M)
		in  let <_3> =
			call 'erlang':'is_atom'
			    (F)
		    in  call 'erlang':'and'
			    (_2, _3) ->
	      'false'
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'is_format_function',2}}] )
	    -| ['compiler_generated'] )
	end
'check_format_1'/1 =
    %% Line 3982
    fun (_0) ->
	case _0 of
	  <[Fmt|[]]> when 'true' ->
	      %% Line 3983
	      apply 'check_format_1'/1
		  ([Fmt|[{'nil',0}]])
	  %% Line 3984
	  <[Fmt|[As|[]]]> when 'true' ->
	      let <_1> =
		  apply %% Line 3985
			'canonicalize_string'/1
		      (%% Line 3985
		       As)
	      in  %% Line 3985
		  apply 'check_format_2'/2
		      (Fmt, _1)
	  %% Line 3986
	  <[_X_Dev|_@r0 = [Fmt|[As|[]]]]> when 'true' ->
	      %% Line 3987
	      apply 'check_format_1'/1
		  (_@r0)
	  %% Line 3988
	  <_X_As> when 'true' ->
	      %% Line 3989
	      {'warn',1,[102|[111|[114|[109|[97|[116|[32|[99|[97|[108|[108|[32|[119|[105|[116|[104|[32|[119|[114|[111|[110|[103|[32|[110|[117|[109|[98|[101|[114|[32|[111|[102|[32|[97|[114|[103|[117|[109|[101|[110|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}
	end
'canonicalize_string'/1 =
    %% Line 3991
    fun (_0) ->
	case _0 of
	  <{'string',Line,Cs}> when 'true' ->
	      let <_5> =
		  fun (_2,_1) ->
		      %% Line 3992
		      {'cons',Line,{'integer',Line,_2},_1}
	      in  %% Line 3992
		  call 'lists':'foldr'
		      (_5, {'nil',Line}, Cs)
	  %% Line 3993
	  <Term> when 'true' ->
	      %% Line 3994
	      Term
	end
'check_format_2'/2 =
    %% Line 3998
    fun (_0,_1) ->
	%% Line 3999
	case _0 of
	  %% Line 4000
	  <{'string',_X_L,S}> when 'true' ->
	      apply 'check_format_2a'/2
		  (S, _1)
	  %% Line 4001
	  <{'atom',_X_L,A}> when 'true' ->
	      let <_2> =
		  call 'erlang':'atom_to_list'
		      (A)
	      in  apply 'check_format_2a'/2
		      (_2, _1)
	  %% Line 4002
	  <_6> when 'true' ->
	      {'warn',2,[102|[111|[114|[109|[97|[116|[32|[115|[116|[114|[105|[110|[103|[32|[110|[111|[116|[32|[97|[32|[116|[101|[120|[116|[117|[97|[108|[32|[99|[111|[110|[115|[116|[97|[110|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}
	end
'check_format_2a'/2 =
    %% Line 4005
    fun (_0,_1) ->
	%% Line 4006
	case apply 'args_list'/1
		 (_1) of
	  %% Line 4007
	  <'true'> when 'true' ->
	      apply 'check_format_3'/2
		  (_0, _1)
	  %% Line 4008
	  <'false'> when 'true' ->
	      {'warn',1,[102|[111|[114|[109|[97|[116|[32|[97|[114|[103|[117|[109|[101|[110|[116|[115|[32|[110|[111|[116|[32|[97|[32|[108|[105|[115|[116]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}
	  %% Line 4009
	  <'maybe'> when 'true' ->
	      {'warn',2,[102|[111|[114|[109|[97|[116|[32|[97|[114|[103|[117|[109|[101|[110|[116|[115|[32|[112|[101|[114|[104|[97|[112|[115|[32|[110|[111|[116|[32|[97|[32|[108|[105|[115|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_2})
	    -| ['compiler_generated'] )
	end
'check_format_3'/2 =
    %% Line 4014
    fun (_0,_1) ->
	%% Line 4015
	case apply 'check_format_string'/1
		 (_0) of
	  %% Line 4016
	  <{'ok',Need}> when 'true' ->
	      %% Line 4017
	      case apply 'args_length'/1
		       (_1) of
		%% Line 4018
		<Len>
		    when try
			  let <_2> =
			      call 'erlang':'length'
				  (Need)
			  in  call 'erlang':'=:='
				  (_2, Len)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    'ok'
		%% Line 4019
		<_X_Len> when 'true' ->
		    {'warn',1,[119|[114|[111|[110|[103|[32|[110|[117|[109|[98|[101|[114|[32|[111|[102|[32|[97|[114|[103|[117|[109|[101|[110|[116|[115|[32|[105|[110|[32|[102|[111|[114|[109|[97|[116|[32|[99|[97|[108|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}
	      end
	  %% Line 4021
	  <{'error',S}> when 'true' ->
	      %% Line 4022
	      {'warn',1,[102|[111|[114|[109|[97|[116|[32|[115|[116|[114|[105|[110|[103|[32|[105|[110|[118|[97|[108|[105|[100|[32|[40|[126|[116|[115|[41]]]]]]]]]]]]]]]]]]]]]]]]]]],[S|[]]}
	  ( <_4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_4})
	    -| ['compiler_generated'] )
	end
'args_list'/1 =
    %% Line 4025
    fun (_0) ->
	case _0 of
	  <{'cons',_X_L,_X_H,T}> when 'true' ->
	      apply 'args_list'/1
		  (T)
	  %% Line 4028
	  <{'string',_X_L,_X_Cs}> when 'true' ->
	      'maybe'
	  %% Line 4029
	  <{'nil',_X_L}> when 'true' ->
	      'true'
	  %% Line 4030
	  <{'atom',_2,_3}> when 'true' ->
	      'false'
	  %% Line 4031
	  <{'integer',_4,_5}> when 'true' ->
	      'false'
	  %% Line 4032
	  <{'float',_6,_7}> when 'true' ->
	      'false'
	  %% Line 4033
	  <_X_Other> when 'true' ->
	      'maybe'
	end
'args_length'/1 =
    %% Line 4035
    fun (_0) ->
	case _0 of
	  <{'cons',_X_L,_X_H,T}> when 'true' ->
	      let <_1> =
		  apply 'args_length'/1
		      (T)
	      in  call 'erlang':'+'
		      (1, _1)
	  %% Line 4036
	  <{'nil',_X_L}> when 'true' ->
	      0
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'args_length',1}}] )
	    -| ['compiler_generated'] )
	end
'check_format_string'/1 =
    %% Line 4038
    fun (_0) ->
	%% Line 4039
	apply 'extract_sequences'/2
	    (_0, [])
'extract_sequences'/2 =
    %% Line 4041
    fun (_0,_1) ->
	%% Line 4042
	case call 'string':'find'
		 (_0, [126]) of
	  %% Line 4043
	  <'nomatch'> when 'true' ->
	      let <_2> =
		  call 'lists':'reverse'
		      (_1)
	      in  {'ok',_2}
	  %% Line 4044
	  <[126|Fmt1]> when 'true' ->
	      %% Line 4045
	      case apply 'extract_sequence'/3
		       (1, Fmt1, _1) of
		%% Line 4046
		<{'ok',Need1,Rest}> when 'true' ->
		    apply 'extract_sequences'/2
			(Rest, Need1)
		%% Line 4047
		<Error> when 'true' ->
		    Error
	      end
	  ( <_4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_4})
	    -| ['compiler_generated'] )
	end
'extract_sequence'/3 =
    %% Line 4051
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <1,[45|[C|Fmt]],Need>
	      when let <_3> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_4> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_3, _4) ->
	      %% Line 4052
	      apply 'extract_sequence_digits'/3
		  (1, Fmt, Need)
	  %% Line 4053
	  <1,[C|Fmt],Need>
	      when let <_5> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_6> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_5, _6) ->
	      %% Line 4054
	      apply 'extract_sequence_digits'/3
		  (1, Fmt, Need)
	  %% Line 4055
	  <1,[45|[42|Fmt]],Need> when 'true' ->
	      %% Line 4056
	      apply 'extract_sequence'/3
		  (2, Fmt, ['int'|Need])
	  %% Line 4057
	  <1,[42|Fmt],Need> when 'true' ->
	      %% Line 4058
	      apply 'extract_sequence'/3
		  (2, Fmt, ['int'|Need])
	  %% Line 4059
	  <1,Fmt,Need> when 'true' ->
	      %% Line 4060
	      apply 'extract_sequence'/3
		  (2, Fmt, Need)
	  %% Line 4061
	  <2,[46|[C|Fmt]],Need>
	      when let <_7> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_8> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_7, _8) ->
	      %% Line 4062
	      apply 'extract_sequence_digits'/3
		  (2, Fmt, Need)
	  %% Line 4063
	  <2,[46|[42|Fmt]],Need> when 'true' ->
	      %% Line 4064
	      apply 'extract_sequence'/3
		  (3, Fmt, ['int'|Need])
	  %% Line 4065
	  <2,[46|Fmt],Need> when 'true' ->
	      %% Line 4066
	      apply 'extract_sequence'/3
		  (3, Fmt, Need)
	  %% Line 4067
	  <2,Fmt,Need> when 'true' ->
	      %% Line 4068
	      apply 'extract_sequence'/3
		  (4, Fmt, Need)
	  %% Line 4069
	  <3,[46|[42|Fmt]],Need> when 'true' ->
	      %% Line 4070
	      apply 'extract_sequence'/3
		  (4, Fmt, ['int'|Need])
	  %% Line 4071
	  <3,[46|[_17|Fmt]],Need> when 'true' ->
	      %% Line 4072
	      apply 'extract_sequence'/3
		  (4, Fmt, Need)
	  %% Line 4073
	  <3,Fmt,Need> when 'true' ->
	      %% Line 4074
	      apply 'extract_sequence'/3
		  (4, Fmt, Need)
	  %% Line 4075
	  <4,[116|[108|Fmt]],Need> when 'true' ->
	      %% Line 4076
	      apply 'extract_sequence'/3
		  (4, [108|[116|Fmt]], Need)
	  %% Line 4077
	  <4,[116|_@r0 = [99|Fmt]],Need> when 'true' ->
	      %% Line 4078
	      apply 'extract_sequence'/3
		  (5, _@r0, Need)
	  %% Line 4079
	  <4,[116|_@r1 = [115|Fmt]],Need> when 'true' ->
	      %% Line 4080
	      apply 'extract_sequence'/3
		  (5, _@r1, Need)
	  %% Line 4081
	  <4,[116|_@r2 = [112|Fmt]],Need> when 'true' ->
	      %% Line 4082
	      apply 'extract_sequence'/3
		  (5, _@r2, Need)
	  %% Line 4083
	  <4,[116|_@r3 = [80|Fmt]],Need> when 'true' ->
	      %% Line 4084
	      apply 'extract_sequence'/3
		  (5, _@r3, Need)
	  %% Line 4085
	  <4,[116|_@r4 = [119|Fmt]],Need> when 'true' ->
	      %% Line 4086
	      apply 'extract_sequence'/3
		  (5, _@r4, Need)
	  %% Line 4087
	  <4,[116|_@r5 = [87|Fmt]],Need> when 'true' ->
	      %% Line 4088
	      apply 'extract_sequence'/3
		  (5, _@r5, Need)
	  %% Line 4089
	  <4,[116|[C|_X_Fmt]],_X_Need> when 'true' ->
	      let <_9> =
		  call %% Line 4090
		       'erlang':%% Line 4090
				'++'
		      (%% Line 4090
		       [105|[110|[118|[97|[108|[105|[100|[32|[99|[111|[110|[116|[114|[111|[108|[32|[126|[116]]]]]]]]]]]]]]]]]], %% Line 4090
																[C|[]])
	      in  %% Line 4090
		  {'error',_9}
	  %% Line 4091
	  <4,[108|_@r6 = [112|Fmt]],Need> when 'true' ->
	      %% Line 4092
	      apply 'extract_sequence'/3
		  (5, _@r6, Need)
	  %% Line 4093
	  <4,[108|[116|_@r7 = [112|Fmt]]],Need> when 'true' ->
	      %% Line 4094
	      apply 'extract_sequence'/3
		  (5, _@r7, Need)
	  %% Line 4095
	  <4,[108|_@r8 = [80|Fmt]],Need> when 'true' ->
	      %% Line 4096
	      apply 'extract_sequence'/3
		  (5, _@r8, Need)
	  %% Line 4097
	  <4,[108|[116|_@r9 = [80|Fmt]]],Need> when 'true' ->
	      %% Line 4098
	      apply 'extract_sequence'/3
		  (5, _@r9, Need)
	  %% Line 4099
	  <4,[108|[116|[C|_X_Fmt]]],_X_Need> when 'true' ->
	      let <_10> =
		  call %% Line 4100
		       'erlang':%% Line 4100
				'++'
		      (%% Line 4100
		       [105|[110|[118|[97|[108|[105|[100|[32|[99|[111|[110|[116|[114|[111|[108|[32|[126|[108|[116]]]]]]]]]]]]]]]]]]], %% Line 4100
																      [C|[]])
	      in  %% Line 4100
		  {'error',_10}
	  %% Line 4101
	  <4,[108|[C|_X_Fmt]],_X_Need> when 'true' ->
	      let <_11> =
		  call %% Line 4102
		       'erlang':%% Line 4102
				'++'
		      (%% Line 4102
		       [105|[110|[118|[97|[108|[105|[100|[32|[99|[111|[110|[116|[114|[111|[108|[32|[126|[108]]]]]]]]]]]]]]]]]], %% Line 4102
																[C|[]])
	      in  %% Line 4102
		  {'error',_11}
	  %% Line 4103
	  <4,Fmt,Need> when 'true' ->
	      %% Line 4104
	      apply 'extract_sequence'/3
		  (5, Fmt, Need)
	  %% Line 4105
	  <5,[C|Fmt],Need0> when 'true' ->
	      %% Line 4106
	      case apply 'control_type'/2
		       (C, Need0) of
		%% Line 4107
		<'error'> when 'true' ->
		    let <_12> =
			call 'erlang':'++'
			    ([105|[110|[118|[97|[108|[105|[100|[32|[99|[111|[110|[116|[114|[111|[108|[32|[126]]]]]]]]]]]]]]]]], [C|[]])
		    in  {'error',_12}
		%% Line 4108
		<Need1> when 'true' ->
		    {'ok',Need1,Fmt}
	      end
	  %% Line 4110
	  <_18,[],_X_Need> when 'true' ->
	      {'error',[116|[114|[117|[110|[99|[97|[116|[101|[100]]]]]]]]]}
	  ( <_16,_15,_14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15,_14})
		  -| [{'function_name',{'extract_sequence',3}}] )
	    -| ['compiler_generated'] )
	end
'extract_sequence_digits'/3 =
    %% Line 4112
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Fld,[C|Fmt],Need>
	      when let <_3> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_4> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_3, _4) ->
	      %% Line 4113
	      apply 'extract_sequence_digits'/3
		  (Fld, Fmt, Need)
	  %% Line 4114
	  <Fld,Fmt,Need> when 'true' ->
	      let <_5> =
		  call %% Line 4115
		       'erlang':%% Line 4115
				'+'
		      (%% Line 4115
		       Fld, %% Line 4115
			    1)
	      in  %% Line 4115
		  apply 'extract_sequence'/3
		      (_5, Fmt, Need)
	end
'control_type'/2 =
    %% Line 4117
    fun (_0,_1) ->
	case <_0,_1> of
	  <126,Need> when 'true' ->
	      Need
	  %% Line 4118
	  <99,Need> when 'true' ->
	      ['int'|Need]
	  %% Line 4119
	  <102,Need> when 'true' ->
	      ['float'|Need]
	  %% Line 4120
	  <101,Need> when 'true' ->
	      ['float'|Need]
	  %% Line 4121
	  <103,Need> when 'true' ->
	      ['float'|Need]
	  %% Line 4122
	  <115,Need> when 'true' ->
	      ['string'|Need]
	  %% Line 4123
	  <119,Need> when 'true' ->
	      ['term'|Need]
	  %% Line 4124
	  <112,Need> when 'true' ->
	      ['term'|Need]
	  %% Line 4125
	  <87,Need> when 'true' ->
	      ['int'|['term'|Need]]
	  %% Line 4126
	  <80,Need> when 'true' ->
	      ['int'|['term'|Need]]
	  %% Line 4127
	  <98,Need> when 'true' ->
	      ['term'|Need]
	  %% Line 4128
	  <66,Need> when 'true' ->
	      ['term'|Need]
	  %% Line 4129
	  <120,Need> when 'true' ->
	      ['string'|['term'|Need]]
	  %% Line 4130
	  <88,Need> when 'true' ->
	      ['string'|['term'|Need]]
	  %% Line 4131
	  <43,Need> when 'true' ->
	      ['term'|Need]
	  %% Line 4132
	  <35,Need> when 'true' ->
	      ['term'|Need]
	  %% Line 4133
	  <110,Need> when 'true' ->
	      Need
	  %% Line 4134
	  <105,Need> when 'true' ->
	      ['term'|Need]
	  %% Line 4135
	  <_X_C,_X_Need> when 'true' ->
	      'error'
	end
'local_functions'/1 =
    %% Line 4139
    fun (_0) ->
	let <_5> =
	    letrec
		'lc$^0'/1 =
		    %% Line 4140
		    fun (_3) ->
			case _3 of
			  <[{'function',_7,Func,Arity,_8}|_2]> when 'true' ->
			      let <_4> =
				  apply 'lc$^0'/1
				      (_2)
			      in  ( [{Func,Arity}|_4]
				    -| ['compiler_generated'] )
			  ( <[_1|_2]> when 'true' ->
				apply 'lc$^0'/1
				    (_2)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_9> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_9})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 4140
		apply 'lc$^0'/1
		    (_0)
	in  %% Line 4140
	    call 'gb_sets':'from_list'
		(_5)
'is_local_function'/2 =
    %% Line 4142
    fun (_0,_1) ->
	case <_0,_1> of
	  <LocalSet,_@r0 = {Func,Arity}> when 'true' ->
	      %% Line 4143
	      call 'gb_sets':'is_element'
		  (_@r0, LocalSet)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'is_local_function',2}}] )
	    -| ['compiler_generated'] )
	end
'is_imported_function'/2 =
    %% Line 4145
    fun (_0,_1) ->
	case <_0,_1> of
	  <ImportSet,_@r0 = {Func,Arity}> when 'true' ->
	      %% Line 4146
	      case call 'orddict':'find'
		       (_@r0, ImportSet) of
		%% Line 4147
		<{'ok',_X_Mod}> when 'true' ->
		    'true'
		%% Line 4148
		<'error'> when 'true' ->
		    'false'
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'is_imported_function',2}}] )
	    -| ['compiler_generated'] )
	end
'is_imported_from_erlang'/2 =
    %% Line 4151
    fun (_0,_1) ->
	case <_0,_1> of
	  <ImportSet,_@r0 = {Func,Arity}> when 'true' ->
	      %% Line 4152
	      case call 'orddict':'find'
		       (_@r0, ImportSet) of
		%% Line 4153
		<{'ok','erlang'}> when 'true' ->
		    'true'
		%% Line 4154
		<_5> when 'true' ->
		    'false'
	      end
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'is_imported_from_erlang',2}}] )
	    -| ['compiler_generated'] )
	end
'auto_import_suppressed'/1 =
    %% Line 4157
    fun (_0) ->
	%% Line 4158
	case call 'lists':'member'
		 ('no_auto_import', _0) of
	  %% Line 4159
	  <'true'> when 'true' ->
	      %% Line 4160
	      'all'
	  %% Line 4161
	  <'false'> when 'true' ->
	      let <_5> =
		  letrec
		      'lc$^0'/1 =
			  %% Line 4162
			  fun (_3) ->
			      case _3 of
				<[{'no_auto_import',X}|_2]> when 'true' ->
				    let <_4> =
					apply 'lc$^0'/1
					    (_2)
				    in  ( [X|_4]
					  -| ['compiler_generated'] )
				( <[_1|_2]> when 'true' ->
				      apply 'lc$^0'/1
					  (_2)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_18> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_18})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  %% Line 4162
		      apply 'lc$^0'/1
			  (_0)
	      in  let <_14> =
		      letrec
			  'lc$^1'/1 =
			      %% Line 4163
			      fun (_12) ->
				  case _12 of
				    <[_@r0 = {Y,Z}|_8]>
					when let <_9> =
					      call 'erlang':'is_atom'
						  (Y)
					  in  let <_10> =
						  call 'erlang':'is_integer'
						      (Z)
					      in  call 'erlang':'and'
						      (_9, _10) ->
					let <_13> =
					    apply 'lc$^1'/1
						(_8)
					in  ( [_@r0|_13]
					      -| ['compiler_generated'] )
				    ( <[_7|_8]> when 'true' ->
					  apply 'lc$^1'/1
					      (_8)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_19> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_19})
					    -| [{'function_name',{'lc$^1',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_11> =
			      call %% Line 4163
				   'lists':%% Line 4163
					   'flatten'
				  (_5)
			  in  %% Line 4163
			      apply 'lc$^1'/1
				  (_11)
		  in  %% Line 4164
		      call 'gb_sets':'from_list'
			  (_14)
	  ( <_16> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_16})
	    -| ['compiler_generated'] )
	end
'is_autoimport_suppressed'/2 =
    %% Line 4167
    fun (_0,_1) ->
	case <_0,_1> of
	  <'all',{_X_Func,_X_Arity}> when 'true' ->
	      %% Line 4168
	      'true'
	  %% Line 4169
	  <NoAutoSet,_@r0 = {Func,Arity}> when 'true' ->
	      %% Line 4170
	      call 'gb_sets':'is_element'
		  (_@r0, NoAutoSet)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'is_autoimport_suppressed',2}}] )
	    -| ['compiler_generated'] )
	end
'bif_clash_specifically_disabled'/2 =
    %% Line 4172
    fun (_0,_1) ->
	case <_0,_1> of
	  <St,_@r0 = {F,A}> when 'true' ->
	      %% Line 4173
	      ( case St of
		  ( <( {'lint',_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_rec166,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}
		       -| ['compiler_generated'] )> when 'true' ->
			call 'lists':'member'
			    (_@r0, _rec166)
		    -| ['compiler_generated'] )
		  ( <_39> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','lint'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'bif_clash_specifically_disabled',2}}] )
	    -| ['compiler_generated'] )
	end
'no_guard_bif_clash'/2 =
    %% Line 4181
    fun (_0,_1) ->
	case <_0,_1> of
	  <St,_@r0 = {F,A}> when 'true' ->
	      %% Line 4183
	      ( case St of
		  ( <( {'lint',_26,_27,_28,_29,_30,_31,_32,_rec167,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 4184
			( case apply 'is_local_function'/2
				   (_rec167, _@r0) of
			    ( <'false'> when 'true' ->
				  %% Line 4186
				  ( case St of
				      ( <( {'lint',_60,_61,_62,_63,_rec168,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_10> =
						apply 'is_imported_function'/2
						    (_rec168, _@r0)
					    in  let <_14> =
						    case _10 of
						      ( <'false'> when 'true' ->
							    'true'
							-| ['compiler_generated'] )
						      ( <'true'> when 'true' ->
							    %% Line 4187
							    ( case St of
								( <( {'lint',_94,_95,_96,_97,_rec169,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126}
								     -| ['compiler_generated'] )> when 'true' ->
								      apply 'is_imported_from_erlang'/2
									  (_rec169, _@r0)
								  -| ['compiler_generated'] )
								( <_127> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','lint'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						      ( <_cor_variable> when 'true' ->
							    call 'erlang':'error'
								('badarg')
							-| ['compiler_generated'] )
						    end
						in  %% Line 4189
						    ( case _14 of
							( <( 'true'
							     -| ['compiler_generated'] )> when 'true' ->
							      %% Line 4191
							      ( case St of
								  ( <( {'lint',_128,_129,_130,_131,_132,_133,_134,_135,_rec170,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160}
								       -| ['compiler_generated'] )> when 'true' ->
									( case apply 'is_autoimport_suppressed'/2
										   (_rec170, _@r0) of
									    ( <'false'> when 'true' ->
										  'true'
									      -| ['compiler_generated'] )
									    ( <'true'> when 'true' ->
										  %% Line 4192
										  ( case St of
										      ( <( {'lint',_162,_163,_164,_165,_rec171,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183,_184,_185,_186,_187,_188,_189,_190,_191,_192,_193,_194}
											   -| ['compiler_generated'] )> when 'true' ->
											    apply 'is_imported_from_erlang'/2
												(_rec171, _@r0)
											-| ['compiler_generated'] )
										      ( <_195> when 'true' ->
											    ( call ( 'erlang'
												     -| ['compiler_generated'] ):( 'error'
																   -| ['compiler_generated'] )
												  (( {'badrecord','lint'}
												     -| ['compiler_generated'] ))
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										    end
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									    ( <_cor_variable> when 'true' ->
										  call 'erlang':'error'
										      ('badarg')
									      -| ['compiler_generated'] )
									  end
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								  ( <_161> when 'true' ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','lint'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
							( <( 'false'
							     -| ['compiler_generated'] )> when 'true' ->
							      'false'
							  -| ['compiler_generated'] )
							( <_6> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {( 'badarg'
									  -| ['compiler_generated'] ),_6}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <_93> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','lint'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <'true'> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			    ( <_cor_variable> when 'true' ->
				  call 'erlang':'error'
				      ('badarg')
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_59> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','lint'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_25,_24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_25,_24})
		  -| [{'function_name',{'no_guard_bif_clash',2}}] )
	    -| ['compiler_generated'] )
	end
'maps_prepend'/3 =
    %% Line 4198
    fun (_0,_1,_2) ->
	%% Line 4199
	case call 'maps':'find'
		 (_0, _2) of
	  %% Line 4200
	  <{'ok',Values}> when 'true' ->
	      %% Line 4201
	      call 'maps':'put'
		  (_0, [_1|Values], _2)
	  %% Line 4202
	  <'error'> when 'true' ->
	      %% Line 4203
	      call 'maps':'put'
		  (_0, [_1|[]], _2)
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_3})
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('erl_lint')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('erl_lint', _0)
end