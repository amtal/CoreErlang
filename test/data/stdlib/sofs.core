module 'sofs' ['a_function'/1,
	       'a_function'/2,
	       'canonical_relation'/1,
	       'composite'/2,
	       'constant_function'/2,
	       'converse'/1,
	       'difference'/2,
	       'digraph_to_family'/1,
	       'digraph_to_family'/2,
	       'domain'/1,
	       'drestriction'/2,
	       'drestriction'/3,
	       'empty_set'/0,
	       'extension'/3,
	       'fam2rel'/1,
	       'family'/1,
	       'family'/2,
	       'family_difference'/2,
	       'family_domain'/1,
	       'family_field'/1,
	       'family_intersection'/1,
	       'family_intersection'/2,
	       'family_projection'/2,
	       'family_range'/1,
	       'family_specification'/2,
	       'family_to_digraph'/1,
	       'family_to_digraph'/2,
	       'family_to_relation'/1,
	       'family_union'/1,
	       'family_union'/2,
	       'field'/1,
	       'from_external'/2,
	       'from_sets'/1,
	       'from_term'/1,
	       'from_term'/2,
	       'image'/2,
	       'intersection'/1,
	       'intersection'/2,
	       'intersection_of_family'/1,
	       'inverse'/1,
	       'inverse_image'/2,
	       'is_a_function'/1,
	       'is_disjoint'/2,
	       'is_empty_set'/1,
	       'is_equal'/2,
	       'is_set'/1,
	       'is_sofs_set'/1,
	       'is_subset'/2,
	       'is_type'/1,
	       'join'/4,
	       'module_info'/0,
	       'module_info'/1,
	       'multiple_relative_product'/2,
	       'no_elements'/1,
	       'partition'/1,
	       'partition'/2,
	       'partition'/3,
	       'partition_family'/2,
	       'product'/1,
	       'product'/2,
	       'projection'/2,
	       'range'/1,
	       'rel2fam'/1,
	       'relation'/1,
	       'relation'/2,
	       'relation_to_family'/1,
	       'relative_product'/1,
	       'relative_product'/2,
	       'relative_product1'/2,
	       'restriction'/2,
	       'restriction'/3,
	       'set'/1,
	       'set'/2,
	       'specification'/2,
	       'strict_relation'/1,
	       'substitution'/2,
	       'symdiff'/2,
	       'symmetric_partition'/2,
	       'to_external'/1,
	       'to_sets'/1,
	       'type'/1,
	       'union'/1,
	       'union'/2,
	       'union_of_family'/1,
	       'weak_relation'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[115|[111|[102|[115|[46|[101|[114|[108]]]]]]]]]]]],1}],
		%% Line 62
		'compile' =
		    %% Line 62
		    [{'inline',[{'family_to_relation',1}|[{'relation_to_family',1}]]}],
		%% Line 64
		'compile' =
		    %% Line 64
		    [{'inline',[{'rel',2}|[{'a_func',2}|[{'fam',2}|[{'term2set',2}]]]]}],
		%% Line 66
		'compile' =
		    %% Line 66
		    [{'inline',[{'external_fun',1}|[{'element_type',1}]]}],
		%% Line 68
		'compile' =
		    %% Line 68
		    [{'inline',[{'unify_types',2}|[{'match_types',2}|[{'test_rel',3}|[{'symdiff',3}|[{'subst',3}]]]]]}],
		%% Line 73
		'compile' =
		    %% Line 73
		    [{'inline',[{'fam_binop',3}]}],
		%% Line 84
		'record' =
		    %% Line 84
		    [{'Set',[{'typed_record_field',{'record_field',84,{'atom',84,'data'},{'nil',84}},{'type',84,'list',[]}}|[{'typed_record_field',{'record_field',84,{'atom',84,'type'},{'atom',84,'type'}},{'type',84,'term',[]}}]]}],
		%% Line 85
		'record' =
		    %% Line 85
		    [{'OrdSet',[{'typed_record_field',{'record_field',85,{'atom',85,'orddata'},{'tuple',85,[]}},{'type',85,'union',[{'type',85,'tuple','any'}|[{'type',85,'atom',[]}]]}}|[{'typed_record_field',{'record_field',86,{'atom',86,'ordtype'},{'atom',86,'type'}},{'type',86,'term',[]}}]]}],
		%% Line 112
		'export_type' =
		    %% Line 112
		    [{'anyset',0}|[{'binary_relation',0}|[{'external_set',0}|[{'a_function',0}|[{'family',0}|[{'relation',0}|[{'set_of_sets',0}|[{'set_fun',0}|[{'spec_fun',0}|[{'type',0}]]]]]]]]]],
		%% Line 115
		'export_type' =
		    %% Line 115
		    [{'ordset',0}|[{'a_set',0}]],
		%% Line 117
		'type' =
		    %% Line 117
		    [{'anyset',{'type',117,'union',[{'user_type',117,'ordset',[]}|[{'user_type',117,'a_set',[]}]]},[]}],
		%% Line 118
		'type' =
		    %% Line 118
		    [{'binary_relation',{'user_type',118,'relation',[]},[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{'external_set',{'type',119,'term',[]},[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{'a_function',{'user_type',120,'relation',[]},[]}],
		%% Line 121
		'type' =
		    %% Line 121
		    [{'family',{'user_type',121,'a_function',[]},[]}],
		%% Line 122
		'opaque' =
		    %% Line 122
		    [{'ordset',{'type',122,'record',[{'atom',122,'OrdSet'}]},[]}],
		%% Line 123
		'type' =
		    %% Line 123
		    [{'relation',{'user_type',123,'a_set',[]},[]}],
		%% Line 124
		'opaque' =
		    %% Line 124
		    [{'a_set',{'type',124,'record',[{'atom',124,'Set'}]},[]}],
		%% Line 125
		'type' =
		    %% Line 125
		    [{'set_of_sets',{'user_type',125,'a_set',[]},[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{'set_fun',{'type',126,'union',[{'type',126,'pos_integer',[]}|[{'type',127,'tuple',[{'atom',127,'external'}|[{'type',127,'fun',[{'type',127,'product',[{'user_type',127,'external_set',[]}]}|[{'user_type',127,'external_set',[]}]]}]]}|[{'type',128,'fun',[{'type',128,'product',[{'user_type',128,'anyset',[]}]}|[{'user_type',128,'anyset',[]}]]}]]]},[]}],
		%% Line 129
		'type' =
		    %% Line 129
		    [{'spec_fun',{'type',129,'union',[{'type',129,'tuple',[{'atom',129,'external'}|[{'type',129,'fun',[{'type',129,'product',[{'user_type',129,'external_set',[]}]}|[{'type',129,'boolean',[]}]]}]]}|[{'type',130,'fun',[{'type',130,'product',[{'user_type',130,'anyset',[]}]}|[{'type',130,'boolean',[]}]]}]]},[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{'type',{'type',131,'term',[]},[]}],
		%% Line 133
		'type' =
		    %% Line 133
		    [{'tuple_of',{'type',133,'tuple','any'},[{'var',133,'_T'}]}],
		%% Line 143
		'spec' =
		    %% Line 143
		    [{{'from_term',1},[{'type',143,'bounded_fun',[{'type',143,'fun',[{'type',143,'product',[{'var',143,'Term'}]}|[{'var',143,'AnySet'}]]}|[[{'type',144,'constraint',[{'atom',144,'is_subtype'}|[[{'var',144,'AnySet'}|[{'user_type',144,'anyset',[]}]]]]}|[{'type',145,'constraint',[{'atom',145,'is_subtype'}|[[{'var',145,'Term'}|[{'type',145,'term',[]}]]]]}]]]]}]}],
		%% Line 155
		'spec' =
		    %% Line 155
		    [{{'from_term',2},[{'type',155,'bounded_fun',[{'type',155,'fun',[{'type',155,'product',[{'var',155,'Term'}|[{'var',155,'Type'}]]}|[{'var',155,'AnySet'}]]}|[[{'type',156,'constraint',[{'atom',156,'is_subtype'}|[[{'var',156,'AnySet'}|[{'user_type',156,'anyset',[]}]]]]}|[{'type',157,'constraint',[{'atom',157,'is_subtype'}|[[{'var',157,'Term'}|[{'type',157,'term',[]}]]]]}|[{'type',158,'constraint',[{'atom',158,'is_subtype'}|[[{'var',158,'Type'}|[{'user_type',158,'type',[]}]]]]}]]]]]}]}],
		%% Line 169
		'spec' =
		    %% Line 169
		    [{{'from_external',2},[{'type',169,'bounded_fun',[{'type',169,'fun',[{'type',169,'product',[{'var',169,'ExternalSet'}|[{'var',169,'Type'}]]}|[{'var',169,'AnySet'}]]}|[[{'type',170,'constraint',[{'atom',170,'is_subtype'}|[[{'var',170,'ExternalSet'}|[{'user_type',170,'external_set',[]}]]]]}|[{'type',171,'constraint',[{'atom',171,'is_subtype'}|[[{'var',171,'AnySet'}|[{'user_type',171,'anyset',[]}]]]]}|[{'type',172,'constraint',[{'atom',172,'is_subtype'}|[[{'var',172,'Type'}|[{'user_type',172,'type',[]}]]]]}]]]]]}]}],
		%% Line 178
		'spec' =
		    %% Line 178
		    [{{'empty_set',0},[{'type',178,'bounded_fun',[{'type',178,'fun',[{'type',178,'product',[]}|[{'var',178,'Set'}]]}|[[{'type',179,'constraint',[{'atom',179,'is_subtype'}|[[{'var',179,'Set'}|[{'user_type',179,'a_set',[]}]]]]}]]]}]}],
		%% Line 183
		'spec' =
		    %% Line 183
		    [{{'is_type',1},[{'type',183,'bounded_fun',[{'type',183,'fun',[{'type',183,'product',[{'var',183,'Term'}]}|[{'var',183,'Bool'}]]}|[[{'type',184,'constraint',[{'atom',184,'is_subtype'}|[[{'var',184,'Bool'}|[{'type',184,'boolean',[]}]]]]}|[{'type',185,'constraint',[{'atom',185,'is_subtype'}|[[{'var',185,'Term'}|[{'type',185,'term',[]}]]]]}]]]]}]}],
		%% Line 195
		'spec' =
		    %% Line 195
		    [{{'set',1},[{'type',195,'bounded_fun',[{'type',195,'fun',[{'type',195,'product',[{'var',195,'Terms'}]}|[{'var',195,'Set'}]]}|[[{'type',196,'constraint',[{'atom',196,'is_subtype'}|[[{'var',196,'Set'}|[{'user_type',196,'a_set',[]}]]]]}|[{'type',197,'constraint',[{'atom',197,'is_subtype'}|[[{'var',197,'Terms'}|[{'type',197,'list',[{'type',197,'term',[]}]}]]]]}]]]]}]}],
		%% Line 204
		'spec' =
		    %% Line 204
		    [{{'set',2},[{'type',204,'bounded_fun',[{'type',204,'fun',[{'type',204,'product',[{'var',204,'Terms'}|[{'var',204,'Type'}]]}|[{'var',204,'Set'}]]}|[[{'type',205,'constraint',[{'atom',205,'is_subtype'}|[[{'var',205,'Set'}|[{'user_type',205,'a_set',[]}]]]]}|[{'type',206,'constraint',[{'atom',206,'is_subtype'}|[[{'var',206,'Terms'}|[{'type',206,'list',[{'type',206,'term',[]}]}]]]]}|[{'type',207,'constraint',[{'atom',207,'is_subtype'}|[[{'var',207,'Type'}|[{'user_type',207,'type',[]}]]]]}]]]]]}]}],
		%% Line 220
		'spec' =
		    %% Line 220
		    [{{'from_sets',1},[{'type',220,'bounded_fun',[{'type',220,'fun',[{'type',220,'product',[{'var',220,'ListOfSets'}]}|[{'var',220,'Set'}]]}|[[{'type',221,'constraint',[{'atom',221,'is_subtype'}|[[{'var',221,'Set'}|[{'user_type',221,'a_set',[]}]]]]}|[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'ListOfSets'}|[{'type',222,'list',[{'user_type',222,'anyset',[]}]}]]]]}]]]]}|[{'type',223,'bounded_fun',[{'type',223,'fun',[{'type',223,'product',[{'var',223,'TupleOfSets'}]}|[{'var',223,'Ordset'}]]}|[[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'Ordset'}|[{'user_type',224,'ordset',[]}]]]]}|[{'type',225,'constraint',[{'atom',225,'is_subtype'}|[[{'var',225,'TupleOfSets'}|[{'user_type',225,'tuple_of',[{'user_type',225,'anyset',[]}]}]]]]}]]]]}]]}],
		%% Line 243
		'spec' =
		    %% Line 243
		    [{{'relation',1},[{'type',243,'bounded_fun',[{'type',243,'fun',[{'type',243,'product',[{'var',243,'Tuples'}]}|[{'var',243,'Relation'}]]}|[[{'type',244,'constraint',[{'atom',244,'is_subtype'}|[[{'var',244,'Relation'}|[{'user_type',244,'relation',[]}]]]]}|[{'type',245,'constraint',[{'atom',245,'is_subtype'}|[[{'var',245,'Tuples'}|[{'type',245,'list',[{'type',245,'tuple','any'}]}]]]]}]]]]}]}],
		%% Line 255
		'spec' =
		    %% Line 255
		    [{{'relation',2},[{'type',255,'bounded_fun',[{'type',255,'fun',[{'type',255,'product',[{'var',255,'Tuples'}|[{'var',255,'Type'}]]}|[{'var',255,'Relation'}]]}|[[{'type',256,'constraint',[{'atom',256,'is_subtype'}|[[{'var',256,'N'}|[{'type',256,'integer',[]}]]]]}|[{'type',257,'constraint',[{'atom',257,'is_subtype'}|[[{'var',257,'Type'}|[{'type',257,'union',[{'var',257,'N'}|[{'user_type',257,'type',[]}]]}]]]]}|[{'type',258,'constraint',[{'atom',258,'is_subtype'}|[[{'var',258,'Relation'}|[{'user_type',258,'relation',[]}]]]]}|[{'type',259,'constraint',[{'atom',259,'is_subtype'}|[[{'var',259,'Tuples'}|[{'type',259,'list',[{'type',259,'tuple','any'}]}]]]]}]]]]]]}]}],
		%% Line 265
		'spec' =
		    %% Line 265
		    [{{'a_function',1},[{'type',265,'bounded_fun',[{'type',265,'fun',[{'type',265,'product',[{'var',265,'Tuples'}]}|[{'var',265,'Function'}]]}|[[{'type',266,'constraint',[{'atom',266,'is_subtype'}|[[{'var',266,'Function'}|[{'user_type',266,'a_function',[]}]]]]}|[{'type',267,'constraint',[{'atom',267,'is_subtype'}|[[{'var',267,'Tuples'}|[{'type',267,'list',[{'type',267,'tuple','any'}]}]]]]}]]]]}]}],
		%% Line 277
		'spec' =
		    %% Line 277
		    [{{'a_function',2},[{'type',277,'bounded_fun',[{'type',277,'fun',[{'type',277,'product',[{'var',277,'Tuples'}|[{'var',277,'Type'}]]}|[{'var',277,'Function'}]]}|[[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'Function'}|[{'user_type',278,'a_function',[]}]]]]}|[{'type',279,'constraint',[{'atom',279,'is_subtype'}|[[{'var',279,'Tuples'}|[{'type',279,'list',[{'type',279,'tuple','any'}]}]]]]}|[{'type',280,'constraint',[{'atom',280,'is_subtype'}|[[{'var',280,'Type'}|[{'user_type',280,'type',[]}]]]]}]]]]]}]}],
		%% Line 290
		'spec' =
		    %% Line 290
		    [{{'family',1},[{'type',290,'bounded_fun',[{'type',290,'fun',[{'type',290,'product',[{'var',290,'Tuples'}]}|[{'var',290,'Family'}]]}|[[{'type',291,'constraint',[{'atom',291,'is_subtype'}|[[{'var',291,'Family'}|[{'user_type',291,'family',[]}]]]]}|[{'type',292,'constraint',[{'atom',292,'is_subtype'}|[[{'var',292,'Tuples'}|[{'type',292,'list',[{'type',292,'tuple','any'}]}]]]]}]]]]}]}],
		%% Line 302
		'spec' =
		    %% Line 302
		    [{{'family',2},[{'type',302,'bounded_fun',[{'type',302,'fun',[{'type',302,'product',[{'var',302,'Tuples'}|[{'var',302,'Type'}]]}|[{'var',302,'Family'}]]}|[[{'type',303,'constraint',[{'atom',303,'is_subtype'}|[[{'var',303,'Family'}|[{'user_type',303,'family',[]}]]]]}|[{'type',304,'constraint',[{'atom',304,'is_subtype'}|[[{'var',304,'Tuples'}|[{'type',304,'list',[{'type',304,'tuple','any'}]}]]]]}|[{'type',305,'constraint',[{'atom',305,'is_subtype'}|[[{'var',305,'Type'}|[{'user_type',305,'type',[]}]]]]}]]]]]}]}],
		%% Line 319
		'spec' =
		    %% Line 319
		    [{{'to_external',1},[{'type',319,'bounded_fun',[{'type',319,'fun',[{'type',319,'product',[{'var',319,'AnySet'}]}|[{'var',319,'ExternalSet'}]]}|[[{'type',320,'constraint',[{'atom',320,'is_subtype'}|[[{'var',320,'ExternalSet'}|[{'user_type',320,'external_set',[]}]]]]}|[{'type',321,'constraint',[{'atom',321,'is_subtype'}|[[{'var',321,'AnySet'}|[{'user_type',321,'anyset',[]}]]]]}]]]]}]}],
		%% Line 327
		'spec' =
		    %% Line 327
		    [{{'type',1},[{'type',327,'bounded_fun',[{'type',327,'fun',[{'type',327,'product',[{'var',327,'AnySet'}]}|[{'var',327,'Type'}]]}|[[{'type',328,'constraint',[{'atom',328,'is_subtype'}|[[{'var',328,'AnySet'}|[{'user_type',328,'anyset',[]}]]]]}|[{'type',329,'constraint',[{'atom',329,'is_subtype'}|[[{'var',329,'Type'}|[{'user_type',329,'type',[]}]]]]}]]]]}]}],
		%% Line 335
		'spec' =
		    %% Line 335
		    [{{'to_sets',1},[{'type',335,'bounded_fun',[{'type',335,'fun',[{'type',335,'product',[{'var',335,'ASet'}]}|[{'var',335,'Sets'}]]}|[[{'type',336,'constraint',[{'atom',336,'is_subtype'}|[[{'var',336,'ASet'}|[{'type',336,'union',[{'user_type',336,'a_set',[]}|[{'user_type',336,'ordset',[]}]]}]]]]}|[{'type',337,'constraint',[{'atom',337,'is_subtype'}|[[{'var',337,'Sets'}|[{'type',337,'union',[{'user_type',337,'tuple_of',[{'var',337,'AnySet'}]}|[{'type',337,'list',[{'var',337,'AnySet'}]}]]}]]]]}|[{'type',338,'constraint',[{'atom',338,'is_subtype'}|[[{'var',338,'AnySet'}|[{'user_type',338,'anyset',[]}]]]]}]]]]]}]}],
		%% Line 349
		'spec' =
		    %% Line 349
		    [{{'no_elements',1},[{'type',349,'bounded_fun',[{'type',349,'fun',[{'type',349,'product',[{'var',349,'ASet'}]}|[{'var',349,'NoElements'}]]}|[[{'type',350,'constraint',[{'atom',350,'is_subtype'}|[[{'var',350,'ASet'}|[{'type',350,'union',[{'user_type',350,'a_set',[]}|[{'user_type',350,'ordset',[]}]]}]]]]}|[{'type',351,'constraint',[{'atom',351,'is_subtype'}|[[{'var',351,'NoElements'}|[{'type',351,'non_neg_integer',[]}]]]]}]]]]}]}],
		%% Line 359
		'spec' =
		    %% Line 359
		    [{{'specification',2},[{'type',359,'bounded_fun',[{'type',359,'fun',[{'type',359,'product',[{'var',359,'Fun'}|[{'var',359,'Set1'}]]}|[{'var',359,'Set2'}]]}|[[{'type',360,'constraint',[{'atom',360,'is_subtype'}|[[{'var',360,'Fun'}|[{'user_type',360,'spec_fun',[]}]]]]}|[{'type',361,'constraint',[{'atom',361,'is_subtype'}|[[{'var',361,'Set1'}|[{'user_type',361,'a_set',[]}]]]]}|[{'type',362,'constraint',[{'atom',362,'is_subtype'}|[[{'var',362,'Set2'}|[{'user_type',362,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 378
		'spec' =
		    %% Line 378
		    [{{'union',2},[{'type',378,'bounded_fun',[{'type',378,'fun',[{'type',378,'product',[{'var',378,'Set1'}|[{'var',378,'Set2'}]]}|[{'var',378,'Set3'}]]}|[[{'type',379,'constraint',[{'atom',379,'is_subtype'}|[[{'var',379,'Set1'}|[{'user_type',379,'a_set',[]}]]]]}|[{'type',380,'constraint',[{'atom',380,'is_subtype'}|[[{'var',380,'Set2'}|[{'user_type',380,'a_set',[]}]]]]}|[{'type',381,'constraint',[{'atom',381,'is_subtype'}|[[{'var',381,'Set3'}|[{'user_type',381,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 388
		'spec' =
		    %% Line 388
		    [{{'intersection',2},[{'type',388,'bounded_fun',[{'type',388,'fun',[{'type',388,'product',[{'var',388,'Set1'}|[{'var',388,'Set2'}]]}|[{'var',388,'Set3'}]]}|[[{'type',389,'constraint',[{'atom',389,'is_subtype'}|[[{'var',389,'Set1'}|[{'user_type',389,'a_set',[]}]]]]}|[{'type',390,'constraint',[{'atom',390,'is_subtype'}|[[{'var',390,'Set2'}|[{'user_type',390,'a_set',[]}]]]]}|[{'type',391,'constraint',[{'atom',391,'is_subtype'}|[[{'var',391,'Set3'}|[{'user_type',391,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 398
		'spec' =
		    %% Line 398
		    [{{'difference',2},[{'type',398,'bounded_fun',[{'type',398,'fun',[{'type',398,'product',[{'var',398,'Set1'}|[{'var',398,'Set2'}]]}|[{'var',398,'Set3'}]]}|[[{'type',399,'constraint',[{'atom',399,'is_subtype'}|[[{'var',399,'Set1'}|[{'user_type',399,'a_set',[]}]]]]}|[{'type',400,'constraint',[{'atom',400,'is_subtype'}|[[{'var',400,'Set2'}|[{'user_type',400,'a_set',[]}]]]]}|[{'type',401,'constraint',[{'atom',401,'is_subtype'}|[[{'var',401,'Set3'}|[{'user_type',401,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 408
		'spec' =
		    %% Line 408
		    [{{'symdiff',2},[{'type',408,'bounded_fun',[{'type',408,'fun',[{'type',408,'product',[{'var',408,'Set1'}|[{'var',408,'Set2'}]]}|[{'var',408,'Set3'}]]}|[[{'type',409,'constraint',[{'atom',409,'is_subtype'}|[[{'var',409,'Set1'}|[{'user_type',409,'a_set',[]}]]]]}|[{'type',410,'constraint',[{'atom',410,'is_subtype'}|[[{'var',410,'Set2'}|[{'user_type',410,'a_set',[]}]]]]}|[{'type',411,'constraint',[{'atom',411,'is_subtype'}|[[{'var',411,'Set3'}|[{'user_type',411,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 418
		'spec' =
		    %% Line 418
		    [{{'symmetric_partition',2},[{'type',418,'bounded_fun',[{'type',418,'fun',[{'type',418,'product',[{'var',418,'Set1'}|[{'var',418,'Set2'}]]}|[{'type',418,'tuple',[{'var',418,'Set3'}|[{'var',418,'Set4'}|[{'var',418,'Set5'}]]]}]]}|[[{'type',419,'constraint',[{'atom',419,'is_subtype'}|[[{'var',419,'Set1'}|[{'user_type',419,'a_set',[]}]]]]}|[{'type',420,'constraint',[{'atom',420,'is_subtype'}|[[{'var',420,'Set2'}|[{'user_type',420,'a_set',[]}]]]]}|[{'type',421,'constraint',[{'atom',421,'is_subtype'}|[[{'var',421,'Set3'}|[{'user_type',421,'a_set',[]}]]]]}|[{'type',422,'constraint',[{'atom',422,'is_subtype'}|[[{'var',422,'Set4'}|[{'user_type',422,'a_set',[]}]]]]}|[{'type',423,'constraint',[{'atom',423,'is_subtype'}|[[{'var',423,'Set5'}|[{'user_type',423,'a_set',[]}]]]]}]]]]]]]}]}],
		%% Line 430
		'spec' =
		    %% Line 430
		    [{{'product',2},[{'type',430,'bounded_fun',[{'type',430,'fun',[{'type',430,'product',[{'var',430,'Set1'}|[{'var',430,'Set2'}]]}|[{'var',430,'BinRel'}]]}|[[{'type',431,'constraint',[{'atom',431,'is_subtype'}|[[{'var',431,'BinRel'}|[{'user_type',431,'binary_relation',[]}]]]]}|[{'type',432,'constraint',[{'atom',432,'is_subtype'}|[[{'var',432,'Set1'}|[{'user_type',432,'a_set',[]}]]]]}|[{'type',433,'constraint',[{'atom',433,'is_subtype'}|[[{'var',433,'Set2'}|[{'user_type',433,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 444
		'spec' =
		    %% Line 444
		    [{{'product',1},[{'type',444,'bounded_fun',[{'type',444,'fun',[{'type',444,'product',[{'var',444,'TupleOfSets'}]}|[{'var',444,'Relation'}]]}|[[{'type',445,'constraint',[{'atom',445,'is_subtype'}|[[{'var',445,'Relation'}|[{'user_type',445,'relation',[]}]]]]}|[{'type',446,'constraint',[{'atom',446,'is_subtype'}|[[{'var',446,'TupleOfSets'}|[{'user_type',446,'tuple_of',[{'user_type',446,'a_set',[]}]}]]]]}]]]]}]}],
		%% Line 465
		'spec' =
		    %% Line 465
		    [{{'constant_function',2},[{'type',465,'bounded_fun',[{'type',465,'fun',[{'type',465,'product',[{'var',465,'Set'}|[{'var',465,'AnySet'}]]}|[{'var',465,'Function'}]]}|[[{'type',466,'constraint',[{'atom',466,'is_subtype'}|[[{'var',466,'AnySet'}|[{'user_type',466,'anyset',[]}]]]]}|[{'type',467,'constraint',[{'atom',467,'is_subtype'}|[[{'var',467,'Function'}|[{'user_type',467,'a_function',[]}]]]]}|[{'type',468,'constraint',[{'atom',468,'is_subtype'}|[[{'var',468,'Set'}|[{'user_type',468,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 480
		'spec' =
		    %% Line 480
		    [{{'is_equal',2},[{'type',480,'bounded_fun',[{'type',480,'fun',[{'type',480,'product',[{'var',480,'AnySet1'}|[{'var',480,'AnySet2'}]]}|[{'var',480,'Bool'}]]}|[[{'type',481,'constraint',[{'atom',481,'is_subtype'}|[[{'var',481,'AnySet1'}|[{'user_type',481,'anyset',[]}]]]]}|[{'type',482,'constraint',[{'atom',482,'is_subtype'}|[[{'var',482,'AnySet2'}|[{'user_type',482,'anyset',[]}]]]]}|[{'type',483,'constraint',[{'atom',483,'is_subtype'}|[[{'var',483,'Bool'}|[{'type',483,'boolean',[]}]]]]}]]]]]}]}],
		%% Line 499
		'spec' =
		    %% Line 499
		    [{{'is_subset',2},[{'type',499,'bounded_fun',[{'type',499,'fun',[{'type',499,'product',[{'var',499,'Set1'}|[{'var',499,'Set2'}]]}|[{'var',499,'Bool'}]]}|[[{'type',500,'constraint',[{'atom',500,'is_subtype'}|[[{'var',500,'Bool'}|[{'type',500,'boolean',[]}]]]]}|[{'type',501,'constraint',[{'atom',501,'is_subtype'}|[[{'var',501,'Set1'}|[{'user_type',501,'a_set',[]}]]]]}|[{'type',502,'constraint',[{'atom',502,'is_subtype'}|[[{'var',502,'Set2'}|[{'user_type',502,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 509
		'spec' =
		    %% Line 509
		    [{{'is_sofs_set',1},[{'type',509,'bounded_fun',[{'type',509,'fun',[{'type',509,'product',[{'var',509,'Term'}]}|[{'var',509,'Bool'}]]}|[[{'type',510,'constraint',[{'atom',510,'is_subtype'}|[[{'var',510,'Bool'}|[{'type',510,'boolean',[]}]]]]}|[{'type',511,'constraint',[{'atom',511,'is_subtype'}|[[{'var',511,'Term'}|[{'type',511,'term',[]}]]]]}]]]]}]}],
		%% Line 519
		'spec' =
		    %% Line 519
		    [{{'is_set',1},[{'type',519,'bounded_fun',[{'type',519,'fun',[{'type',519,'product',[{'var',519,'AnySet'}]}|[{'var',519,'Bool'}]]}|[[{'type',520,'constraint',[{'atom',520,'is_subtype'}|[[{'var',520,'AnySet'}|[{'user_type',520,'anyset',[]}]]]]}|[{'type',521,'constraint',[{'atom',521,'is_subtype'}|[[{'var',521,'Bool'}|[{'type',521,'boolean',[]}]]]]}]]]]}]}],
		%% Line 527
		'spec' =
		    %% Line 527
		    [{{'is_empty_set',1},[{'type',527,'bounded_fun',[{'type',527,'fun',[{'type',527,'product',[{'var',527,'AnySet'}]}|[{'var',527,'Bool'}]]}|[[{'type',528,'constraint',[{'atom',528,'is_subtype'}|[[{'var',528,'AnySet'}|[{'user_type',528,'anyset',[]}]]]]}|[{'type',529,'constraint',[{'atom',529,'is_subtype'}|[[{'var',529,'Bool'}|[{'type',529,'boolean',[]}]]]]}]]]]}]}],
		%% Line 535
		'spec' =
		    %% Line 535
		    [{{'is_disjoint',2},[{'type',535,'bounded_fun',[{'type',535,'fun',[{'type',535,'product',[{'var',535,'Set1'}|[{'var',535,'Set2'}]]}|[{'var',535,'Bool'}]]}|[[{'type',536,'constraint',[{'atom',536,'is_subtype'}|[[{'var',536,'Bool'}|[{'type',536,'boolean',[]}]]]]}|[{'type',537,'constraint',[{'atom',537,'is_subtype'}|[[{'var',537,'Set1'}|[{'user_type',537,'a_set',[]}]]]]}|[{'type',538,'constraint',[{'atom',538,'is_subtype'}|[[{'var',538,'Set2'}|[{'user_type',538,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 553
		'spec' =
		    %% Line 553
		    [{{'union',1},[{'type',553,'bounded_fun',[{'type',553,'fun',[{'type',553,'product',[{'var',553,'SetOfSets'}]}|[{'var',553,'Set'}]]}|[[{'type',554,'constraint',[{'atom',554,'is_subtype'}|[[{'var',554,'Set'}|[{'user_type',554,'a_set',[]}]]]]}|[{'type',555,'constraint',[{'atom',555,'is_subtype'}|[[{'var',555,'SetOfSets'}|[{'user_type',555,'set_of_sets',[]}]]]]}]]]]}]}],
		%% Line 563
		'spec' =
		    %% Line 563
		    [{{'intersection',1},[{'type',563,'bounded_fun',[{'type',563,'fun',[{'type',563,'product',[{'var',563,'SetOfSets'}]}|[{'var',563,'Set'}]]}|[[{'type',564,'constraint',[{'atom',564,'is_subtype'}|[[{'var',564,'Set'}|[{'user_type',564,'a_set',[]}]]]]}|[{'type',565,'constraint',[{'atom',565,'is_subtype'}|[[{'var',565,'SetOfSets'}|[{'user_type',565,'set_of_sets',[]}]]]]}]]]]}]}],
		%% Line 577
		'spec' =
		    %% Line 577
		    [{{'canonical_relation',1},[{'type',577,'bounded_fun',[{'type',577,'fun',[{'type',577,'product',[{'var',577,'SetOfSets'}]}|[{'var',577,'BinRel'}]]}|[[{'type',578,'constraint',[{'atom',578,'is_subtype'}|[[{'var',578,'BinRel'}|[{'user_type',578,'binary_relation',[]}]]]]}|[{'type',579,'constraint',[{'atom',579,'is_subtype'}|[[{'var',579,'SetOfSets'}|[{'user_type',579,'set_of_sets',[]}]]]]}]]]]}]}],
		%% Line 594
		'spec' =
		    %% Line 594
		    [{{'rel2fam',1},[{'type',594,'bounded_fun',[{'type',594,'fun',[{'type',594,'product',[{'var',594,'BinRel'}]}|[{'var',594,'Family'}]]}|[[{'type',595,'constraint',[{'atom',595,'is_subtype'}|[[{'var',595,'Family'}|[{'user_type',595,'family',[]}]]]]}|[{'type',596,'constraint',[{'atom',596,'is_subtype'}|[[{'var',596,'BinRel'}|[{'user_type',596,'binary_relation',[]}]]]]}]]]]}]}],
		%% Line 600
		'spec' =
		    %% Line 600
		    [{{'relation_to_family',1},[{'type',600,'bounded_fun',[{'type',600,'fun',[{'type',600,'product',[{'var',600,'BinRel'}]}|[{'var',600,'Family'}]]}|[[{'type',601,'constraint',[{'atom',601,'is_subtype'}|[[{'var',601,'Family'}|[{'user_type',601,'family',[]}]]]]}|[{'type',602,'constraint',[{'atom',602,'is_subtype'}|[[{'var',602,'BinRel'}|[{'user_type',602,'binary_relation',[]}]]]]}]]]]}]}],
		%% Line 612
		'spec' =
		    %% Line 612
		    [{{'domain',1},[{'type',612,'bounded_fun',[{'type',612,'fun',[{'type',612,'product',[{'var',612,'BinRel'}]}|[{'var',612,'Set'}]]}|[[{'type',613,'constraint',[{'atom',613,'is_subtype'}|[[{'var',613,'BinRel'}|[{'user_type',613,'binary_relation',[]}]]]]}|[{'type',614,'constraint',[{'atom',614,'is_subtype'}|[[{'var',614,'Set'}|[{'user_type',614,'a_set',[]}]]]]}]]]]}]}],
		%% Line 622
		'spec' =
		    %% Line 622
		    [{{'range',1},[{'type',622,'bounded_fun',[{'type',622,'fun',[{'type',622,'product',[{'var',622,'BinRel'}]}|[{'var',622,'Set'}]]}|[[{'type',623,'constraint',[{'atom',623,'is_subtype'}|[[{'var',623,'BinRel'}|[{'user_type',623,'binary_relation',[]}]]]]}|[{'type',624,'constraint',[{'atom',624,'is_subtype'}|[[{'var',624,'Set'}|[{'user_type',624,'a_set',[]}]]]]}]]]]}]}],
		%% Line 632
		'spec' =
		    %% Line 632
		    [{{'field',1},[{'type',632,'bounded_fun',[{'type',632,'fun',[{'type',632,'product',[{'var',632,'BinRel'}]}|[{'var',632,'Set'}]]}|[[{'type',633,'constraint',[{'atom',633,'is_subtype'}|[[{'var',633,'BinRel'}|[{'user_type',633,'binary_relation',[]}]]]]}|[{'type',634,'constraint',[{'atom',634,'is_subtype'}|[[{'var',634,'Set'}|[{'user_type',634,'a_set',[]}]]]]}]]]]}]}],
		%% Line 641
		'spec' =
		    %% Line 641
		    [{{'relative_product',1},[{'type',641,'bounded_fun',[{'type',641,'fun',[{'type',641,'product',[{'var',641,'ListOfBinRels'}]}|[{'var',641,'BinRel2'}]]}|[[{'type',642,'constraint',[{'atom',642,'is_subtype'}|[[{'var',642,'ListOfBinRels'}|[{'type',642,'nonempty_list',[{'var',642,'BinRel'}]}]]]]}|[{'type',643,'constraint',[{'atom',643,'is_subtype'}|[[{'var',643,'BinRel'}|[{'user_type',643,'binary_relation',[]}]]]]}|[{'type',644,'constraint',[{'atom',644,'is_subtype'}|[[{'var',644,'BinRel2'}|[{'user_type',644,'binary_relation',[]}]]]]}]]]]]}]}],
		%% Line 657
		'spec' =
		    %% Line 657
		    [{{'relative_product',2},[{'type',657,'bounded_fun',[{'type',657,'fun',[{'type',657,'product',[{'var',657,'ListOfBinRels'}|[{'var',657,'BinRel1'}]]}|[{'var',657,'BinRel2'}]]}|[[{'type',658,'constraint',[{'atom',658,'is_subtype'}|[[{'var',658,'ListOfBinRels'}|[{'type',658,'nonempty_list',[{'var',658,'BinRel'}]}]]]]}|[{'type',659,'constraint',[{'atom',659,'is_subtype'}|[[{'var',659,'BinRel'}|[{'user_type',659,'binary_relation',[]}]]]]}|[{'type',660,'constraint',[{'atom',660,'is_subtype'}|[[{'var',660,'BinRel1'}|[{'user_type',660,'binary_relation',[]}]]]]}|[{'type',661,'constraint',[{'atom',661,'is_subtype'}|[[{'var',661,'BinRel2'}|[{'user_type',661,'binary_relation',[]}]]]]}]]]]]]}|[{'type',662,'bounded_fun',[{'type',662,'fun',[{'type',662,'product',[{'var',662,'BinRel1'}|[{'var',662,'BinRel2'}]]}|[{'var',662,'BinRel3'}]]}|[[{'type',663,'constraint',[{'atom',663,'is_subtype'}|[[{'var',663,'BinRel1'}|[{'user_type',663,'binary_relation',[]}]]]]}|[{'type',664,'constraint',[{'atom',664,'is_subtype'}|[[{'var',664,'BinRel2'}|[{'user_type',664,'binary_relation',[]}]]]]}|[{'type',665,'constraint',[{'atom',665,'is_subtype'}|[[{'var',665,'BinRel3'}|[{'user_type',665,'binary_relation',[]}]]]]}]]]]]}]]}],
		%% Line 685
		'spec' =
		    %% Line 685
		    [{{'relative_product1',2},[{'type',685,'bounded_fun',[{'type',685,'fun',[{'type',685,'product',[{'var',685,'BinRel1'}|[{'var',685,'BinRel2'}]]}|[{'var',685,'BinRel3'}]]}|[[{'type',686,'constraint',[{'atom',686,'is_subtype'}|[[{'var',686,'BinRel1'}|[{'user_type',686,'binary_relation',[]}]]]]}|[{'type',687,'constraint',[{'atom',687,'is_subtype'}|[[{'var',687,'BinRel2'}|[{'user_type',687,'binary_relation',[]}]]]]}|[{'type',688,'constraint',[{'atom',688,'is_subtype'}|[[{'var',688,'BinRel3'}|[{'user_type',688,'binary_relation',[]}]]]]}]]]]]}]}],
		%% Line 707
		'spec' =
		    %% Line 707
		    [{{'converse',1},[{'type',707,'bounded_fun',[{'type',707,'fun',[{'type',707,'product',[{'var',707,'BinRel1'}]}|[{'var',707,'BinRel2'}]]}|[[{'type',708,'constraint',[{'atom',708,'is_subtype'}|[[{'var',708,'BinRel1'}|[{'user_type',708,'binary_relation',[]}]]]]}|[{'type',709,'constraint',[{'atom',709,'is_subtype'}|[[{'var',709,'BinRel2'}|[{'user_type',709,'binary_relation',[]}]]]]}]]]]}]}],
		%% Line 717
		'spec' =
		    %% Line 717
		    [{{'image',2},[{'type',717,'bounded_fun',[{'type',717,'fun',[{'type',717,'product',[{'var',717,'BinRel'}|[{'var',717,'Set1'}]]}|[{'var',717,'Set2'}]]}|[[{'type',718,'constraint',[{'atom',718,'is_subtype'}|[[{'var',718,'BinRel'}|[{'user_type',718,'binary_relation',[]}]]]]}|[{'type',719,'constraint',[{'atom',719,'is_subtype'}|[[{'var',719,'Set1'}|[{'user_type',719,'a_set',[]}]]]]}|[{'type',720,'constraint',[{'atom',720,'is_subtype'}|[[{'var',720,'Set2'}|[{'user_type',720,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 734
		'spec' =
		    %% Line 734
		    [{{'inverse_image',2},[{'type',734,'bounded_fun',[{'type',734,'fun',[{'type',734,'product',[{'var',734,'BinRel'}|[{'var',734,'Set1'}]]}|[{'var',734,'Set2'}]]}|[[{'type',735,'constraint',[{'atom',735,'is_subtype'}|[[{'var',735,'BinRel'}|[{'user_type',735,'binary_relation',[]}]]]]}|[{'type',736,'constraint',[{'atom',736,'is_subtype'}|[[{'var',736,'Set1'}|[{'user_type',736,'a_set',[]}]]]]}|[{'type',737,'constraint',[{'atom',737,'is_subtype'}|[[{'var',737,'Set2'}|[{'user_type',737,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 752
		'spec' =
		    %% Line 752
		    [{{'strict_relation',1},[{'type',752,'bounded_fun',[{'type',752,'fun',[{'type',752,'product',[{'var',752,'BinRel1'}]}|[{'var',752,'BinRel2'}]]}|[[{'type',753,'constraint',[{'atom',753,'is_subtype'}|[[{'var',753,'BinRel1'}|[{'user_type',753,'binary_relation',[]}]]]]}|[{'type',754,'constraint',[{'atom',754,'is_subtype'}|[[{'var',754,'BinRel2'}|[{'user_type',754,'binary_relation',[]}]]]]}]]]]}]}],
		%% Line 763
		'spec' =
		    %% Line 763
		    [{{'weak_relation',1},[{'type',763,'bounded_fun',[{'type',763,'fun',[{'type',763,'product',[{'var',763,'BinRel1'}]}|[{'var',763,'BinRel2'}]]}|[[{'type',764,'constraint',[{'atom',764,'is_subtype'}|[[{'var',764,'BinRel1'}|[{'user_type',764,'binary_relation',[]}]]]]}|[{'type',765,'constraint',[{'atom',765,'is_subtype'}|[[{'var',765,'BinRel2'}|[{'user_type',765,'binary_relation',[]}]]]]}]]]]}]}],
		%% Line 779
		'spec' =
		    %% Line 779
		    [{{'extension',3},[{'type',779,'bounded_fun',[{'type',779,'fun',[{'type',779,'product',[{'var',779,'BinRel1'}|[{'var',779,'Set'}|[{'var',779,'AnySet'}]]]}|[{'var',779,'BinRel2'}]]}|[[{'type',780,'constraint',[{'atom',780,'is_subtype'}|[[{'var',780,'AnySet'}|[{'user_type',780,'anyset',[]}]]]]}|[{'type',781,'constraint',[{'atom',781,'is_subtype'}|[[{'var',781,'BinRel1'}|[{'user_type',781,'binary_relation',[]}]]]]}|[{'type',782,'constraint',[{'atom',782,'is_subtype'}|[[{'var',782,'BinRel2'}|[{'user_type',782,'binary_relation',[]}]]]]}|[{'type',783,'constraint',[{'atom',783,'is_subtype'}|[[{'var',783,'Set'}|[{'user_type',783,'a_set',[]}]]]]}]]]]]]}]}],
		%% Line 812
		'spec' =
		    %% Line 812
		    [{{'is_a_function',1},[{'type',812,'bounded_fun',[{'type',812,'fun',[{'type',812,'product',[{'var',812,'BinRel'}]}|[{'var',812,'Bool'}]]}|[[{'type',813,'constraint',[{'atom',813,'is_subtype'}|[[{'var',813,'Bool'}|[{'type',813,'boolean',[]}]]]]}|[{'type',814,'constraint',[{'atom',814,'is_subtype'}|[[{'var',814,'BinRel'}|[{'user_type',814,'binary_relation',[]}]]]]}]]]]}]}],
		%% Line 826
		'spec' =
		    %% Line 826
		    [{{'restriction',2},[{'type',826,'bounded_fun',[{'type',826,'fun',[{'type',826,'product',[{'var',826,'BinRel1'}|[{'var',826,'Set'}]]}|[{'var',826,'BinRel2'}]]}|[[{'type',827,'constraint',[{'atom',827,'is_subtype'}|[[{'var',827,'BinRel1'}|[{'user_type',827,'binary_relation',[]}]]]]}|[{'type',828,'constraint',[{'atom',828,'is_subtype'}|[[{'var',828,'BinRel2'}|[{'user_type',828,'binary_relation',[]}]]]]}|[{'type',829,'constraint',[{'atom',829,'is_subtype'}|[[{'var',829,'Set'}|[{'user_type',829,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 833
		'spec' =
		    %% Line 833
		    [{{'drestriction',2},[{'type',833,'bounded_fun',[{'type',833,'fun',[{'type',833,'product',[{'var',833,'BinRel1'}|[{'var',833,'Set'}]]}|[{'var',833,'BinRel2'}]]}|[[{'type',834,'constraint',[{'atom',834,'is_subtype'}|[[{'var',834,'BinRel1'}|[{'user_type',834,'binary_relation',[]}]]]]}|[{'type',835,'constraint',[{'atom',835,'is_subtype'}|[[{'var',835,'BinRel2'}|[{'user_type',835,'binary_relation',[]}]]]]}|[{'type',836,'constraint',[{'atom',836,'is_subtype'}|[[{'var',836,'Set'}|[{'user_type',836,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 844
		'spec' =
		    %% Line 844
		    [{{'composite',2},[{'type',844,'bounded_fun',[{'type',844,'fun',[{'type',844,'product',[{'var',844,'Function1'}|[{'var',844,'Function2'}]]}|[{'var',844,'Function3'}]]}|[[{'type',845,'constraint',[{'atom',845,'is_subtype'}|[[{'var',845,'Function1'}|[{'user_type',845,'a_function',[]}]]]]}|[{'type',846,'constraint',[{'atom',846,'is_subtype'}|[[{'var',846,'Function2'}|[{'user_type',846,'a_function',[]}]]]]}|[{'type',847,'constraint',[{'atom',847,'is_subtype'}|[[{'var',847,'Function3'}|[{'user_type',847,'a_function',[]}]]]]}]]]]]}]}],
		%% Line 872
		'spec' =
		    %% Line 872
		    [{{'inverse',1},[{'type',872,'bounded_fun',[{'type',872,'fun',[{'type',872,'product',[{'var',872,'Function1'}]}|[{'var',872,'Function2'}]]}|[[{'type',873,'constraint',[{'atom',873,'is_subtype'}|[[{'var',873,'Function1'}|[{'user_type',873,'a_function',[]}]]]]}|[{'type',874,'constraint',[{'atom',874,'is_subtype'}|[[{'var',874,'Function2'}|[{'user_type',874,'a_function',[]}]]]]}]]]]}]}],
		%% Line 892
		'spec' =
		    %% Line 892
		    [{{'restriction',3},[{'type',892,'bounded_fun',[{'type',892,'fun',[{'type',892,'product',[{'var',892,'SetFun'}|[{'var',892,'Set1'}|[{'var',892,'Set2'}]]]}|[{'var',892,'Set3'}]]}|[[{'type',893,'constraint',[{'atom',893,'is_subtype'}|[[{'var',893,'SetFun'}|[{'user_type',893,'set_fun',[]}]]]]}|[{'type',894,'constraint',[{'atom',894,'is_subtype'}|[[{'var',894,'Set1'}|[{'user_type',894,'a_set',[]}]]]]}|[{'type',895,'constraint',[{'atom',895,'is_subtype'}|[[{'var',895,'Set2'}|[{'user_type',895,'a_set',[]}]]]]}|[{'type',896,'constraint',[{'atom',896,'is_subtype'}|[[{'var',896,'Set3'}|[{'user_type',896,'a_set',[]}]]]]}]]]]]]}]}],
		%% Line 960
		'spec' =
		    %% Line 960
		    [{{'drestriction',3},[{'type',960,'bounded_fun',[{'type',960,'fun',[{'type',960,'product',[{'var',960,'SetFun'}|[{'var',960,'Set1'}|[{'var',960,'Set2'}]]]}|[{'var',960,'Set3'}]]}|[[{'type',961,'constraint',[{'atom',961,'is_subtype'}|[[{'var',961,'SetFun'}|[{'user_type',961,'set_fun',[]}]]]]}|[{'type',962,'constraint',[{'atom',962,'is_subtype'}|[[{'var',962,'Set1'}|[{'user_type',962,'a_set',[]}]]]]}|[{'type',963,'constraint',[{'atom',963,'is_subtype'}|[[{'var',963,'Set2'}|[{'user_type',963,'a_set',[]}]]]]}|[{'type',964,'constraint',[{'atom',964,'is_subtype'}|[[{'var',964,'Set3'}|[{'user_type',964,'a_set',[]}]]]]}]]]]]]}]}],
		%% Line 1029
		'spec' =
		    %% Line 1029
		    [{{'projection',2},[{'type',1029,'bounded_fun',[{'type',1029,'fun',[{'type',1029,'product',[{'var',1029,'SetFun'}|[{'var',1029,'Set1'}]]}|[{'var',1029,'Set2'}]]}|[[{'type',1030,'constraint',[{'atom',1030,'is_subtype'}|[[{'var',1030,'SetFun'}|[{'user_type',1030,'set_fun',[]}]]]]}|[{'type',1031,'constraint',[{'atom',1031,'is_subtype'}|[[{'var',1031,'Set1'}|[{'user_type',1031,'a_set',[]}]]]]}|[{'type',1032,'constraint',[{'atom',1032,'is_subtype'}|[[{'var',1032,'Set2'}|[{'user_type',1032,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 1048
		'spec' =
		    %% Line 1048
		    [{{'substitution',2},[{'type',1048,'bounded_fun',[{'type',1048,'fun',[{'type',1048,'product',[{'var',1048,'SetFun'}|[{'var',1048,'Set1'}]]}|[{'var',1048,'Set2'}]]}|[[{'type',1049,'constraint',[{'atom',1049,'is_subtype'}|[[{'var',1049,'SetFun'}|[{'user_type',1049,'set_fun',[]}]]]]}|[{'type',1050,'constraint',[{'atom',1050,'is_subtype'}|[[{'var',1050,'Set1'}|[{'user_type',1050,'a_set',[]}]]]]}|[{'type',1051,'constraint',[{'atom',1051,'is_subtype'}|[[{'var',1051,'Set2'}|[{'user_type',1051,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 1091
		'spec' =
		    %% Line 1091
		    [{{'partition',1},[{'type',1091,'bounded_fun',[{'type',1091,'fun',[{'type',1091,'product',[{'var',1091,'SetOfSets'}]}|[{'var',1091,'Partition'}]]}|[[{'type',1092,'constraint',[{'atom',1092,'is_subtype'}|[[{'var',1092,'SetOfSets'}|[{'user_type',1092,'set_of_sets',[]}]]]]}|[{'type',1093,'constraint',[{'atom',1093,'is_subtype'}|[[{'var',1093,'Partition'}|[{'user_type',1093,'a_set',[]}]]]]}]]]]}]}],
		%% Line 1099
		'spec' =
		    %% Line 1099
		    [{{'partition',2},[{'type',1099,'bounded_fun',[{'type',1099,'fun',[{'type',1099,'product',[{'var',1099,'SetFun'}|[{'var',1099,'Set'}]]}|[{'var',1099,'Partition'}]]}|[[{'type',1100,'constraint',[{'atom',1100,'is_subtype'}|[[{'var',1100,'SetFun'}|[{'user_type',1100,'set_fun',[]}]]]]}|[{'type',1101,'constraint',[{'atom',1101,'is_subtype'}|[[{'var',1101,'Partition'}|[{'user_type',1101,'a_set',[]}]]]]}|[{'type',1102,'constraint',[{'atom',1102,'is_subtype'}|[[{'var',1102,'Set'}|[{'user_type',1102,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 1118
		'spec' =
		    %% Line 1118
		    [{{'partition',3},[{'type',1118,'bounded_fun',[{'type',1118,'fun',[{'type',1118,'product',[{'var',1118,'SetFun'}|[{'var',1118,'Set1'}|[{'var',1118,'Set2'}]]]}|[{'type',1118,'tuple',[{'var',1118,'Set3'}|[{'var',1118,'Set4'}]]}]]}|[[{'type',1119,'constraint',[{'atom',1119,'is_subtype'}|[[{'var',1119,'SetFun'}|[{'user_type',1119,'set_fun',[]}]]]]}|[{'type',1120,'constraint',[{'atom',1120,'is_subtype'}|[[{'var',1120,'Set1'}|[{'user_type',1120,'a_set',[]}]]]]}|[{'type',1121,'constraint',[{'atom',1121,'is_subtype'}|[[{'var',1121,'Set2'}|[{'user_type',1121,'a_set',[]}]]]]}|[{'type',1122,'constraint',[{'atom',1122,'is_subtype'}|[[{'var',1122,'Set3'}|[{'user_type',1122,'a_set',[]}]]]]}|[{'type',1123,'constraint',[{'atom',1123,'is_subtype'}|[[{'var',1123,'Set4'}|[{'user_type',1123,'a_set',[]}]]]]}]]]]]]]}]}],
		%% Line 1190
		'spec' =
		    %% Line 1190
		    [{{'multiple_relative_product',2},[{'type',1190,'bounded_fun',[{'type',1190,'fun',[{'type',1190,'product',[{'var',1190,'TupleOfBinRels'}|[{'var',1190,'BinRel1'}]]}|[{'var',1190,'BinRel2'}]]}|[[{'type',1191,'constraint',[{'atom',1191,'is_subtype'}|[[{'var',1191,'TupleOfBinRels'}|[{'user_type',1191,'tuple_of',[{'var',1191,'BinRel'}]}]]]]}|[{'type',1192,'constraint',[{'atom',1192,'is_subtype'}|[[{'var',1192,'BinRel'}|[{'user_type',1192,'binary_relation',[]}]]]]}|[{'type',1193,'constraint',[{'atom',1193,'is_subtype'}|[[{'var',1193,'BinRel1'}|[{'user_type',1193,'binary_relation',[]}]]]]}|[{'type',1194,'constraint',[{'atom',1194,'is_subtype'}|[[{'var',1194,'BinRel2'}|[{'user_type',1194,'binary_relation',[]}]]]]}]]]]]]}]}],
		%% Line 1206
		'spec' =
		    %% Line 1206
		    [{{'join',4},[{'type',1206,'bounded_fun',[{'type',1206,'fun',[{'type',1206,'product',[{'var',1206,'Relation1'}|[{'var',1206,'I'}|[{'var',1206,'Relation2'}|[{'var',1206,'J'}]]]]}|[{'var',1206,'Relation3'}]]}|[[{'type',1207,'constraint',[{'atom',1207,'is_subtype'}|[[{'var',1207,'Relation1'}|[{'user_type',1207,'relation',[]}]]]]}|[{'type',1208,'constraint',[{'atom',1208,'is_subtype'}|[[{'var',1208,'Relation2'}|[{'user_type',1208,'relation',[]}]]]]}|[{'type',1209,'constraint',[{'atom',1209,'is_subtype'}|[[{'var',1209,'Relation3'}|[{'user_type',1209,'relation',[]}]]]]}|[{'type',1210,'constraint',[{'atom',1210,'is_subtype'}|[[{'var',1210,'I'}|[{'type',1210,'pos_integer',[]}]]]]}|[{'type',1211,'constraint',[{'atom',1211,'is_subtype'}|[[{'var',1211,'J'}|[{'type',1211,'pos_integer',[]}]]]]}]]]]]]]}]}],
		%% Line 1247
		'spec' =
		    %% Line 1247
		    [{{'fam2rel',1},[{'type',1247,'bounded_fun',[{'type',1247,'fun',[{'type',1247,'product',[{'var',1247,'Family'}]}|[{'var',1247,'BinRel'}]]}|[[{'type',1248,'constraint',[{'atom',1248,'is_subtype'}|[[{'var',1248,'Family'}|[{'user_type',1248,'family',[]}]]]]}|[{'type',1249,'constraint',[{'atom',1249,'is_subtype'}|[[{'var',1249,'BinRel'}|[{'user_type',1249,'binary_relation',[]}]]]]}]]]]}]}],
		%% Line 1253
		'spec' =
		    %% Line 1253
		    [{{'family_to_relation',1},[{'type',1253,'bounded_fun',[{'type',1253,'fun',[{'type',1253,'product',[{'var',1253,'Family'}]}|[{'var',1253,'BinRel'}]]}|[[{'type',1254,'constraint',[{'atom',1254,'is_subtype'}|[[{'var',1254,'Family'}|[{'user_type',1254,'family',[]}]]]]}|[{'type',1255,'constraint',[{'atom',1255,'is_subtype'}|[[{'var',1255,'BinRel'}|[{'user_type',1255,'binary_relation',[]}]]]]}]]]]}]}],
		%% Line 1265
		'spec' =
		    %% Line 1265
		    [{{'family_specification',2},[{'type',1265,'bounded_fun',[{'type',1265,'fun',[{'type',1265,'product',[{'var',1265,'Fun'}|[{'var',1265,'Family1'}]]}|[{'var',1265,'Family2'}]]}|[[{'type',1266,'constraint',[{'atom',1266,'is_subtype'}|[[{'var',1266,'Fun'}|[{'user_type',1266,'spec_fun',[]}]]]]}|[{'type',1267,'constraint',[{'atom',1267,'is_subtype'}|[[{'var',1267,'Family1'}|[{'user_type',1267,'family',[]}]]]]}|[{'type',1268,'constraint',[{'atom',1268,'is_subtype'}|[[{'var',1268,'Family2'}|[{'user_type',1268,'family',[]}]]]]}]]]]]}]}],
		%% Line 1288
		'spec' =
		    %% Line 1288
		    [{{'union_of_family',1},[{'type',1288,'bounded_fun',[{'type',1288,'fun',[{'type',1288,'product',[{'var',1288,'Family'}]}|[{'var',1288,'Set'}]]}|[[{'type',1289,'constraint',[{'atom',1289,'is_subtype'}|[[{'var',1289,'Family'}|[{'user_type',1289,'family',[]}]]]]}|[{'type',1290,'constraint',[{'atom',1290,'is_subtype'}|[[{'var',1290,'Set'}|[{'user_type',1290,'a_set',[]}]]]]}]]]]}]}],
		%% Line 1299
		'spec' =
		    %% Line 1299
		    [{{'intersection_of_family',1},[{'type',1299,'bounded_fun',[{'type',1299,'fun',[{'type',1299,'product',[{'var',1299,'Family'}]}|[{'var',1299,'Set'}]]}|[[{'type',1300,'constraint',[{'atom',1300,'is_subtype'}|[[{'var',1300,'Family'}|[{'user_type',1300,'family',[]}]]]]}|[{'type',1301,'constraint',[{'atom',1301,'is_subtype'}|[[{'var',1301,'Set'}|[{'user_type',1301,'a_set',[]}]]]]}]]]]}]}],
		%% Line 1314
		'spec' =
		    %% Line 1314
		    [{{'family_union',1},[{'type',1314,'bounded_fun',[{'type',1314,'fun',[{'type',1314,'product',[{'var',1314,'Family1'}]}|[{'var',1314,'Family2'}]]}|[[{'type',1315,'constraint',[{'atom',1315,'is_subtype'}|[[{'var',1315,'Family1'}|[{'user_type',1315,'family',[]}]]]]}|[{'type',1316,'constraint',[{'atom',1316,'is_subtype'}|[[{'var',1316,'Family2'}|[{'user_type',1316,'family',[]}]]]]}]]]]}]}],
		%% Line 1325
		'spec' =
		    %% Line 1325
		    [{{'family_intersection',1},[{'type',1325,'bounded_fun',[{'type',1325,'fun',[{'type',1325,'product',[{'var',1325,'Family1'}]}|[{'var',1325,'Family2'}]]}|[[{'type',1326,'constraint',[{'atom',1326,'is_subtype'}|[[{'var',1326,'Family1'}|[{'user_type',1326,'family',[]}]]]]}|[{'type',1327,'constraint',[{'atom',1327,'is_subtype'}|[[{'var',1327,'Family2'}|[{'user_type',1327,'family',[]}]]]]}]]]]}]}],
		%% Line 1341
		'spec' =
		    %% Line 1341
		    [{{'family_domain',1},[{'type',1341,'bounded_fun',[{'type',1341,'fun',[{'type',1341,'product',[{'var',1341,'Family1'}]}|[{'var',1341,'Family2'}]]}|[[{'type',1342,'constraint',[{'atom',1342,'is_subtype'}|[[{'var',1342,'Family1'}|[{'user_type',1342,'family',[]}]]]]}|[{'type',1343,'constraint',[{'atom',1343,'is_subtype'}|[[{'var',1343,'Family2'}|[{'user_type',1343,'family',[]}]]]]}]]]]}]}],
		%% Line 1353
		'spec' =
		    %% Line 1353
		    [{{'family_range',1},[{'type',1353,'bounded_fun',[{'type',1353,'fun',[{'type',1353,'product',[{'var',1353,'Family1'}]}|[{'var',1353,'Family2'}]]}|[[{'type',1354,'constraint',[{'atom',1354,'is_subtype'}|[[{'var',1354,'Family1'}|[{'user_type',1354,'family',[]}]]]]}|[{'type',1355,'constraint',[{'atom',1355,'is_subtype'}|[[{'var',1355,'Family2'}|[{'user_type',1355,'family',[]}]]]]}]]]]}]}],
		%% Line 1365
		'spec' =
		    %% Line 1365
		    [{{'family_field',1},[{'type',1365,'bounded_fun',[{'type',1365,'fun',[{'type',1365,'product',[{'var',1365,'Family1'}]}|[{'var',1365,'Family2'}]]}|[[{'type',1366,'constraint',[{'atom',1366,'is_subtype'}|[[{'var',1366,'Family1'}|[{'user_type',1366,'family',[]}]]]]}|[{'type',1367,'constraint',[{'atom',1367,'is_subtype'}|[[{'var',1367,'Family2'}|[{'user_type',1367,'family',[]}]]]]}]]]]}]}],
		%% Line 1371
		'spec' =
		    %% Line 1371
		    [{{'family_union',2},[{'type',1371,'bounded_fun',[{'type',1371,'fun',[{'type',1371,'product',[{'var',1371,'Family1'}|[{'var',1371,'Family2'}]]}|[{'var',1371,'Family3'}]]}|[[{'type',1372,'constraint',[{'atom',1372,'is_subtype'}|[[{'var',1372,'Family1'}|[{'user_type',1372,'family',[]}]]]]}|[{'type',1373,'constraint',[{'atom',1373,'is_subtype'}|[[{'var',1373,'Family2'}|[{'user_type',1373,'family',[]}]]]]}|[{'type',1374,'constraint',[{'atom',1374,'is_subtype'}|[[{'var',1374,'Family3'}|[{'user_type',1374,'family',[]}]]]]}]]]]]}]}],
		%% Line 1378
		'spec' =
		    %% Line 1378
		    [{{'family_intersection',2},[{'type',1378,'bounded_fun',[{'type',1378,'fun',[{'type',1378,'product',[{'var',1378,'Family1'}|[{'var',1378,'Family2'}]]}|[{'var',1378,'Family3'}]]}|[[{'type',1379,'constraint',[{'atom',1379,'is_subtype'}|[[{'var',1379,'Family1'}|[{'user_type',1379,'family',[]}]]]]}|[{'type',1380,'constraint',[{'atom',1380,'is_subtype'}|[[{'var',1380,'Family2'}|[{'user_type',1380,'family',[]}]]]]}|[{'type',1381,'constraint',[{'atom',1381,'is_subtype'}|[[{'var',1381,'Family3'}|[{'user_type',1381,'family',[]}]]]]}]]]]]}]}],
		%% Line 1385
		'spec' =
		    %% Line 1385
		    [{{'family_difference',2},[{'type',1385,'bounded_fun',[{'type',1385,'fun',[{'type',1385,'product',[{'var',1385,'Family1'}|[{'var',1385,'Family2'}]]}|[{'var',1385,'Family3'}]]}|[[{'type',1386,'constraint',[{'atom',1386,'is_subtype'}|[[{'var',1386,'Family1'}|[{'user_type',1386,'family',[]}]]]]}|[{'type',1387,'constraint',[{'atom',1387,'is_subtype'}|[[{'var',1387,'Family2'}|[{'user_type',1387,'family',[]}]]]]}|[{'type',1388,'constraint',[{'atom',1388,'is_subtype'}|[[{'var',1388,'Family3'}|[{'user_type',1388,'family',[]}]]]]}]]]]]}]}],
		%% Line 1404
		'spec' =
		    %% Line 1404
		    [{{'partition_family',2},[{'type',1404,'bounded_fun',[{'type',1404,'fun',[{'type',1404,'product',[{'var',1404,'SetFun'}|[{'var',1404,'Set'}]]}|[{'var',1404,'Family'}]]}|[[{'type',1405,'constraint',[{'atom',1405,'is_subtype'}|[[{'var',1405,'Family'}|[{'user_type',1405,'family',[]}]]]]}|[{'type',1406,'constraint',[{'atom',1406,'is_subtype'}|[[{'var',1406,'SetFun'}|[{'user_type',1406,'set_fun',[]}]]]]}|[{'type',1407,'constraint',[{'atom',1407,'is_subtype'}|[[{'var',1407,'Set'}|[{'user_type',1407,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 1451
		'spec' =
		    %% Line 1451
		    [{{'family_projection',2},[{'type',1451,'bounded_fun',[{'type',1451,'fun',[{'type',1451,'product',[{'var',1451,'SetFun'}|[{'var',1451,'Family1'}]]}|[{'var',1451,'Family2'}]]}|[[{'type',1452,'constraint',[{'atom',1452,'is_subtype'}|[[{'var',1452,'SetFun'}|[{'user_type',1452,'set_fun',[]}]]]]}|[{'type',1453,'constraint',[{'atom',1453,'is_subtype'}|[[{'var',1453,'Family1'}|[{'user_type',1453,'family',[]}]]]]}|[{'type',1454,'constraint',[{'atom',1454,'is_subtype'}|[[{'var',1454,'Family2'}|[{'user_type',1454,'family',[]}]]]]}]]]]]}]}],
		%% Line 1479
		'spec' =
		    %% Line 1479
		    [{{'family_to_digraph',1},[{'type',1479,'bounded_fun',[{'type',1479,'fun',[{'type',1479,'product',[{'var',1479,'Family'}]}|[{'var',1479,'Graph'}]]}|[[{'type',1480,'constraint',[{'atom',1480,'is_subtype'}|[[{'var',1480,'Graph'}|[{'remote_type',1480,[{'atom',1480,'digraph'}|[{'atom',1480,'graph'}|[[]]]]}]]]]}|[{'type',1481,'constraint',[{'atom',1481,'is_subtype'}|[[{'var',1481,'Family'}|[{'user_type',1481,'family',[]}]]]]}]]]]}]}],
		%% Line 1489
		'spec' =
		    %% Line 1489
		    [{{'family_to_digraph',2},[{'type',1489,'bounded_fun',[{'type',1489,'fun',[{'type',1489,'product',[{'var',1489,'Family'}|[{'var',1489,'GraphType'}]]}|[{'var',1489,'Graph'}]]}|[[{'type',1490,'constraint',[{'atom',1490,'is_subtype'}|[[{'var',1490,'Graph'}|[{'remote_type',1490,[{'atom',1490,'digraph'}|[{'atom',1490,'graph'}|[[]]]]}]]]]}|[{'type',1491,'constraint',[{'atom',1491,'is_subtype'}|[[{'var',1491,'Family'}|[{'user_type',1491,'family',[]}]]]]}|[{'type',1492,'constraint',[{'atom',1492,'is_subtype'}|[[{'var',1492,'GraphType'}|[{'type',1492,'list',[{'remote_type',1492,[{'atom',1492,'digraph'}|[{'atom',1492,'d_type'}|[[]]]]}]}]]]]}]]]]]}]}],
		%% Line 1511
		'spec' =
		    %% Line 1511
		    [{{'digraph_to_family',1},[{'type',1511,'bounded_fun',[{'type',1511,'fun',[{'type',1511,'product',[{'var',1511,'Graph'}]}|[{'var',1511,'Family'}]]}|[[{'type',1512,'constraint',[{'atom',1512,'is_subtype'}|[[{'var',1512,'Graph'}|[{'remote_type',1512,[{'atom',1512,'digraph'}|[{'atom',1512,'graph'}|[[]]]]}]]]]}|[{'type',1513,'constraint',[{'atom',1513,'is_subtype'}|[[{'var',1513,'Family'}|[{'user_type',1513,'family',[]}]]]]}]]]]}]}],
		%% Line 1520
		'spec' =
		    %% Line 1520
		    [{{'digraph_to_family',2},[{'type',1520,'bounded_fun',[{'type',1520,'fun',[{'type',1520,'product',[{'var',1520,'Graph'}|[{'var',1520,'Type'}]]}|[{'var',1520,'Family'}]]}|[[{'type',1521,'constraint',[{'atom',1521,'is_subtype'}|[[{'var',1521,'Graph'}|[{'remote_type',1521,[{'atom',1521,'digraph'}|[{'atom',1521,'graph'}|[[]]]]}]]]]}|[{'type',1522,'constraint',[{'atom',1522,'is_subtype'}|[[{'var',1522,'Family'}|[{'user_type',1522,'family',[]}]]]]}|[{'type',1523,'constraint',[{'atom',1523,'is_subtype'}|[[{'var',1523,'Type'}|[{'user_type',1523,'type',[]}]]]]}]]]]]}]}]]
'from_term'/1 =
    %% Line 146
    fun (_0) ->
	let <_2> =
	    case _0 of
	      %% Line 148
	      <_9>
		  when call 'erlang':'is_list'
			(_0) ->
		  ['_']
	      %% Line 149
	      <_10> when 'true' ->
		  '_'
	    end
	in  %% Line 151
	    try
		apply 'setify'/2
		    (_0, _2)
	    of <_4> ->
		_4
	    catch <_7,_6,_5> ->
		%% Line 152
		call 'erlang':'error'
		    ('badarg')
'from_term'/2 =
    %% Line 159
    fun (_0,_1) ->
	%% Line 160
	case apply 'is_type'/1
		 (_1) of
	  %% Line 161
	  <'true'> when 'true' ->
	      %% Line 162
	      try
		  apply 'setify'/2
		      (_0, _1)
	      of <_2> ->
		  _2
	      catch <_5,_4,_3> ->
		  %% Line 163
		  call 'erlang':'error'
		      ('badarg')
	  %% Line 165
	  <'false'> when 'true' ->
	      %% Line 166
	      call 'erlang':'error'
		  ('badarg')
	  ( <_6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_6})
	    -| ['compiler_generated'] )
	end
'from_external'/2 =
    %% Line 173
    fun (_0,_1) ->
	case <_0,_1> of
	  <L,[Type|[]]> when 'true' ->
	      %% Line 174
	      {'Set',L,Type}
	  %% Line 175
	  <T,Type> when 'true' ->
	      %% Line 176
	      {'OrdSet',T,Type}
	end
'empty_set'/0 =
    %% Line 180
    fun () ->
	%% Line 181
	{'Set',[],'_'}
'is_type'/1 =
    %% Line 186
    fun (_0) ->
	case _0 of
	  <Atom>
	      when let <_1> =
		    call 'erlang':'is_atom'
			(_0)
		in  let <_2> =
			call 'erlang':'=/='
			    (_0, '_')
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 187
	      'true'
	  %% Line 188
	  <[T|[]]> when 'true' ->
	      %% Line 189
	      apply 'is_element_type'/1
		  (T)
	  %% Line 190
	  <T>
	      when try
		    let <_3> =
			call 'erlang':'tuple_size'
			    (_0)
		    in  call 'erlang':'>'
			    (_3, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_4> =
		  call %% Line 191
		       'erlang':%% Line 191
				'tuple_size'
		      (%% Line 191
		       T)
	      in  %% Line 191
		  apply 'is_types'/2
		      (_4, T)
	  %% Line 192
	  <_X_T> when 'true' ->
	      %% Line 193
	      'false'
	end
'set'/1 =
    %% Line 198
    fun (_0) ->
	%% Line 199
	try
	    call 'lists':'usort'
		(_0)
	of <_1> ->
	    %% Line 200
	    {'Set',_1,'atom'}
	catch <_5,_4,_3> ->
	    %% Line 201
	    call 'erlang':'error'
		('badarg')
'set'/2 =
    %% Line 208
    fun (_0,_1) ->
	case <_0,_1> of
	  <L,[Type|[]]>
	      when let <_2> =
		    call 'erlang':'is_atom'
			(Type)
		in  let <_3> =
			call 'erlang':'=/='
			    (Type, '_')
		    in  call 'erlang':'and'
			    (_2, _3) ->
	      %% Line 209
	      try
		  call 'lists':'usort'
		      (L)
	      of <_4> ->
		  %% Line 210
		  {'Set',_4,Type}
	      catch <_8,_7,_6> ->
		  %% Line 211
		  call 'erlang':'error'
		      ('badarg')
	  %% Line 213
	  <L,T = [_18|[]]> when 'true' ->
	      %% Line 214
	      try
		  apply 'setify'/2
		      (L, T)
	      of <_9> ->
		  _9
	      catch <_12,_11,_10> ->
		  %% Line 215
		  call 'erlang':'error'
		      ('badarg')
	  %% Line 217
	  <_22,_23> when 'true' ->
	      %% Line 218
	      call 'erlang':'error'
		  ('badarg')
	end
'from_sets'/1 =
    %% Line 226
    fun (_0) ->
	case _0 of
	  <Ss>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 227
	      case apply 'set_of_sets'/3
		       (Ss, [], '_') of
		%% Line 228
		<{'error',Error}> when 'true' ->
		    %% Line 229
		    call 'erlang':'error'
			(Error)
		%% Line 230
		<Set> when 'true' ->
		    %% Line 231
		    Set
	      end
	  %% Line 233
	  <Tuple>
	      when call 'erlang':'is_tuple'
		    (_0) ->
	      let <_2> =
		  call %% Line 234
		       'erlang':%% Line 234
				'tuple_to_list'
		      (%% Line 234
		       Tuple)
	      in  %% Line 234
		  case apply 'ordset_of_sets'/3
			   (_2, [], []) of
		    %% Line 235
		    <'error'> when 'true' ->
			%% Line 236
			call 'erlang':'error'
			    ('badarg')
		    %% Line 237
		    <Set> when 'true' ->
			%% Line 238
			Set
		  end
	  %% Line 240
	  <_5> when 'true' ->
	      %% Line 241
	      call 'erlang':'error'
		  ('badarg')
	end
'relation'/1 =
    %% Line 246
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      %% Line 247
	      {'Set',[],{'atom','atom'}}
	  %% Line 248
	  <Ts = [T|_7]>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      %% Line 249
	      try
		  let <_1> =
		      call 'erlang':'tuple_size'
			  (T)
		  in  %% Line 1585
		      ( case <Ts,_1> of
			  ( <_14,( [Type|( []
					   -| ['compiler_generated'] )]
				   -| ['compiler_generated'] )> when ( 'true'
								       -| ['compiler_generated'] ) ->
				( let <_3> =
				      apply %% Line 1586
					    'is_type'/1
					  (%% Line 1586
					   Type)
				  in  ( let <_2> =
					    apply %% Line 1586
						  'atoms_only'/2
						(%% Line 1586
						 Type, %% Line 1586
						       ( 1
							 -| ['compiler_generated'] ))
					in  %% Line 1586
					    ( case ( call ( 'erlang'
							    -| ['compiler_generated'] ):( 'and'
											  -| ['compiler_generated'] )
							 (_3, _2)
						     -| ['compiler_generated'] ) of
						%% Line 1587
						( <( 'true'
						     -| ['compiler_generated'] )> when ( 'true'
											 -| ['compiler_generated'] ) ->
						      ( let <_4> =
							    call %% Line 1588
								 ( 'erlang'
								   -| ['compiler_generated'] ):%% Line 1588
											       ( 'tuple_size'
												 -| ['compiler_generated'] )
								(%% Line 1588
								 Type)
							in  %% Line 1588
							    ( apply 'rel'/3
								  (_14, _4, Type)
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						%% Line 1589
						( <( 'false'
						     -| ['compiler_generated'] )> when ( 'true'
											 -| ['compiler_generated'] ) ->
						      %% Line 1590
						      ( apply 'rel_type'/3
							    (_14, ( []
								    -| ['compiler_generated'] ), Type)
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1592
			  ( <_15,Sz> when ( 'true'
					    -| ['compiler_generated'] ) ->
				( let <_6> =
				      call %% Line 1593
					   ( 'erlang'
					     -| ['compiler_generated'] ):%% Line 1593
									 ( 'make_tuple'
									   -| ['compiler_generated'] )
					  (%% Line 1593
					   Sz, %% Line 1593
					       ( 'atom'
						 -| ['compiler_generated'] ))
				  in  %% Line 1593
				      ( apply 'rel'/3
					    (_15, Sz, _6)
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      of <_2> ->
		  _2
	      catch <_5,_4,_3> ->
		  %% Line 250
		  call 'erlang':'error'
		      ('badarg')
	  %% Line 252
	  <_11> when 'true' ->
	      %% Line 253
	      call 'erlang':'error'
		  ('badarg')
	end
'relation'/2 =
    %% Line 260
    fun (_0,_1) ->
	%% Line 261
	try
	    %% Line 1585
	    ( case <_0,_1> of
		( <_13,( [Type|( []
				 -| ['compiler_generated'] )]
			 -| ['compiler_generated'] )> when ( 'true'
							     -| ['compiler_generated'] ) ->
		      ( let <_3> =
			    apply %% Line 1586
				  'is_type'/1
				(%% Line 1586
				 Type)
			in  ( let <_2> =
				  apply %% Line 1586
					'atoms_only'/2
				      (%% Line 1586
				       Type, %% Line 1586
					     ( 1
					       -| ['compiler_generated'] ))
			      in  %% Line 1586
				  ( case ( call ( 'erlang'
						  -| ['compiler_generated'] ):( 'and'
										-| ['compiler_generated'] )
					       (_3, _2)
					   -| ['compiler_generated'] ) of
				      %% Line 1587
				      ( <( 'true'
					   -| ['compiler_generated'] )> when ( 'true'
									       -| ['compiler_generated'] ) ->
					    ( let <_4> =
						  call %% Line 1588
						       ( 'erlang'
							 -| ['compiler_generated'] ):%% Line 1588
										     ( 'tuple_size'
										       -| ['compiler_generated'] )
						      (%% Line 1588
						       Type)
					      in  %% Line 1588
						  ( apply 'rel'/3
							(_13, _4, Type)
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      %% Line 1589
				      ( <( 'false'
					   -| ['compiler_generated'] )> when ( 'true'
									       -| ['compiler_generated'] ) ->
					    %% Line 1590
					    ( apply 'rel_type'/3
						  (_13, ( []
							  -| ['compiler_generated'] ), Type)
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		%% Line 1592
		( <_14,Sz> when ( 'true'
				  -| ['compiler_generated'] ) ->
		      ( let <_6> =
			    call %% Line 1593
				 ( 'erlang'
				   -| ['compiler_generated'] ):%% Line 1593
							       ( 'make_tuple'
								 -| ['compiler_generated'] )
				(%% Line 1593
				 Sz, %% Line 1593
				     ( 'atom'
				       -| ['compiler_generated'] ))
			in  %% Line 1593
			    ( apply 'rel'/3
				  (_14, Sz, _6)
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
	of <_2> ->
	    _2
	catch <_5,_4,_3> ->
	    %% Line 262
	    call 'erlang':'error'
		('badarg')
'a_function'/1 =
    %% Line 268
    fun (_0) ->
	%% Line 269
	try
	    apply 'func'/2
		(_0, {'atom','atom'})
	of <_1> ->
	    case _1 of
	      %% Line 270
	      <Bad>
		  when call 'erlang':'is_atom'
			(_1) ->
		  %% Line 271
		  call 'erlang':'error'
		      (Bad)
	      %% Line 272
	      <Set> when 'true' ->
		  %% Line 273
		  Set
	    end
	catch <_5,_4,_3> ->
	    %% Line 274
	    call 'erlang':'error'
		('badarg')
'a_function'/2 =
    %% Line 281
    fun (_0,_1) ->
	%% Line 282
	try
	    ( let <_2> =
		  apply %% Line 1621
			'is_type'/1
		      (_1)
	      in  %% Line 1621
		  ( case <_1,_2> of
		      %% Line 1622
		      ( <( [( Type = ( {DT,RT}
				       -| ['compiler_generated'] )
			      -| ['compiler_generated'] )|( []
							    -| ['compiler_generated'] )]
			   -| ['compiler_generated'] ),( 'true'
							 -| ['compiler_generated'] )>
			    when ( let <_3> =
				    call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_atom'
									 -| ['compiler_generated'] )
					(DT)
				in  ( let <_4> =
					  call %% Line 1623
					       ( 'erlang'
						 -| ['compiler_generated'] ):%% Line 1623
									     ( 'is_atom'
									       -| ['compiler_generated'] )
					      (%% Line 1623
					       RT)
				      in  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(_3, _4)
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] ) ->
			    %% Line 1624
			    ( apply 'func'/2
				  (_0, Type)
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1625
		      ( <( [Type|( []
				   -| ['compiler_generated'] )]
			   -| ['compiler_generated'] ),( 'true'
							 -| ['compiler_generated'] )> when ( 'true'
											     -| ['compiler_generated'] ) ->
			    ( let <_7> =
				  fun (_5) ->
				      %% Line 1626
				      ( case _5 of
					  ( <( {_11,_12}
					       -| ['compiler_generated'] )> when ( 'true'
										   -| ['compiler_generated'] ) ->
						( 'true'
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_6> when ( 'true'
							-| ['compiler_generated'] ) ->
						( primop ( 'match_fail'
							   -| ['compiler_generated'] )
						      (( {( 'function_clause'
							    -| ['compiler_generated'] ),_6}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
			      in  %% Line 1626
				  ( apply 'func_type'/4
					(_0, ( []
					       -| ['compiler_generated'] ), Type, _7)
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <( _17
			   -| ['compiler_generated'] ),( _18
							 -| ['compiler_generated'] )> when ( 'true'
											     -| ['compiler_generated'] ) ->
			    ( let <_8> = {( _17
				     -| ['compiler_generated'] ),( _18
								   -| ['compiler_generated'] )}
			      in  ( primop ( 'match_fail'
					     -| ['compiler_generated'] )
					(( {( 'case_clause'
					      -| ['compiler_generated'] ),_8}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	of <_2> ->
	    case _2 of
	      %% Line 283
	      <Bad>
		  when call 'erlang':'is_atom'
			(_2) ->
		  %% Line 284
		  call 'erlang':'error'
		      (Bad)
	      %% Line 285
	      <Set> when 'true' ->
		  %% Line 286
		  Set
	    end
	catch <_6,_5,_4> ->
	    %% Line 287
	    call 'erlang':'error'
		('badarg')
'family'/1 =
    %% Line 293
    fun (_0) ->
	%% Line 294
	try
	    apply 'fam2'/2
		(_0, {'atom',['atom']})
	of <_1> ->
	    case _1 of
	      %% Line 295
	      <Bad>
		  when call 'erlang':'is_atom'
			(_1) ->
		  %% Line 296
		  call 'erlang':'error'
		      (Bad)
	      %% Line 297
	      <Set> when 'true' ->
		  %% Line 298
		  Set
	    end
	catch <_5,_4,_3> ->
	    %% Line 299
	    call 'erlang':'error'
		('badarg')
'family'/2 =
    %% Line 306
    fun (_0,_1) ->
	%% Line 307
	try
	    ( let <_2> =
		  apply %% Line 1642
			'is_type'/1
		      (_1)
	      in  %% Line 1642
		  ( case <_1,_2> of
		      %% Line 1643
		      ( <( [( Type = ( {DT,( [RT|( []
						   -| ['compiler_generated'] )]
					     -| ['compiler_generated'] )}
				       -| ['compiler_generated'] )
			      -| ['compiler_generated'] )|( []
							    -| ['compiler_generated'] )]
			   -| ['compiler_generated'] ),( 'true'
							 -| ['compiler_generated'] )>
			    when ( let <_3> =
				    call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_atom'
									 -| ['compiler_generated'] )
					(DT)
				in  ( let <_4> =
					  call %% Line 1644
					       ( 'erlang'
						 -| ['compiler_generated'] ):%% Line 1644
									     ( 'is_atom'
									       -| ['compiler_generated'] )
					      (%% Line 1644
					       RT)
				      in  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(_3, _4)
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] ) ->
			    %% Line 1645
			    ( apply 'fam2'/2
				  (_0, Type)
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1646
		      ( <( [Type|( []
				   -| ['compiler_generated'] )]
			   -| ['compiler_generated'] ),( 'true'
							 -| ['compiler_generated'] )> when ( 'true'
											     -| ['compiler_generated'] ) ->
			    ( let <_7> =
				  fun (_5) ->
				      %% Line 1647
				      ( case _5 of
					  ( <( {_11,( [_12|( []
							     -| ['compiler_generated'] )]
						      -| ['compiler_generated'] )}
					       -| ['compiler_generated'] )> when ( 'true'
										   -| ['compiler_generated'] ) ->
						( 'true'
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_6> when ( 'true'
							-| ['compiler_generated'] ) ->
						( primop ( 'match_fail'
							   -| ['compiler_generated'] )
						      (( {( 'function_clause'
							    -| ['compiler_generated'] ),_6}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
			      in  %% Line 1647
				  ( apply 'func_type'/4
					(_0, ( []
					       -| ['compiler_generated'] ), Type, _7)
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <( _17
			   -| ['compiler_generated'] ),( _18
							 -| ['compiler_generated'] )> when ( 'true'
											     -| ['compiler_generated'] ) ->
			    ( let <_8> = {( _17
				     -| ['compiler_generated'] ),( _18
								   -| ['compiler_generated'] )}
			      in  ( primop ( 'match_fail'
					     -| ['compiler_generated'] )
					(( {( 'case_clause'
					      -| ['compiler_generated'] ),_8}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	of <_2> ->
	    case _2 of
	      %% Line 308
	      <Bad>
		  when call 'erlang':'is_atom'
			(_2) ->
		  %% Line 309
		  call 'erlang':'error'
		      (Bad)
	      %% Line 310
	      <Set> when 'true' ->
		  %% Line 311
		  Set
	    end
	catch <_6,_5,_4> ->
	    %% Line 312
	    call 'erlang':'error'
		('badarg')
'to_external'/1 =
    %% Line 322
    fun (_0) ->
	case _0 of
	  <S = {'Set',_4,_5}> when ( 'true'
				     -| ['compiler_generated'] ) ->
	      %% Line 323
	      ( case S of
		  ( <( {'Set',_rec0,_6}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec0
		    -| ['compiler_generated'] )
		  ( <_7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 324
	  <S = {'OrdSet',_8,_9}> when ( 'true'
					-| ['compiler_generated'] ) ->
	      %% Line 325
	      ( case S of
		  ( <( {'OrdSet',_rec1,_10}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec1
		    -| ['compiler_generated'] )
		  ( <_11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','OrdSet'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'to_external',1}}] )
	    -| ['compiler_generated'] )
	end
'type'/1 =
    %% Line 330
    fun (_0) ->
	case _0 of
	  <S = {'Set',_5,_6}> when ( 'true'
				     -| ['compiler_generated'] ) ->
	      %% Line 331
	      ( case S of
		  ( <( {'Set',_7,_rec2}
		       -| ['compiler_generated'] )> when 'true' ->
			[_rec2|[]]
		    -| ['compiler_generated'] )
		  ( <_8> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 332
	  <S = {'OrdSet',_9,_10}> when ( 'true'
					 -| ['compiler_generated'] ) ->
	      %% Line 333
	      ( case S of
		  ( <( {'OrdSet',_11,_rec3}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec3
		    -| ['compiler_generated'] )
		  ( <_12> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','OrdSet'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4})
		  -| [{'function_name',{'type',1}}] )
	    -| ['compiler_generated'] )
	end
'to_sets'/1 =
    %% Line 339
    fun (_0) ->
	case _0 of
	  <S = {'Set',_22,_23}> when ( 'true'
				       -| ['compiler_generated'] ) ->
	      %% Line 340
	      ( case S of
		  ( <( {'Set',_24,_rec4}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec4 of
			  %% Line 341
			  <[Type|[]]> when 'true' ->
			      ( case S of
				  ( <( {'Set',_rec5,_26}
				       -| ['compiler_generated'] )> when 'true' ->
					apply 'list_of_sets'/3
					    (_rec5, Type, [])
				    -| ['compiler_generated'] )
				  ( <_27> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 342
			  <Type> when 'true' ->
			      ( case S of
				  ( <( {'Set',_rec6,_28}
				       -| ['compiler_generated'] )> when 'true' ->
					apply 'list_of_ordsets'/3
					    (_rec6, Type, [])
				    -| ['compiler_generated'] )
				  ( <_29> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_25> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 344
	  <S = {'OrdSet',_30,_31}>
	      when ( try
		      let <_12> =
			  call 'erlang':'element'
			      (3, S)
		      in  call 'erlang':'is_tuple'
			      (_12)
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 345
	      ( case S of
		  ( <( {'OrdSet',_rec7,_32}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_20> =
			    call 'erlang':'tuple_to_list'
				(_rec7)
			in  ( case S of
				( <( {'OrdSet',_34,_rec8}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_17> =
					  call 'erlang':'tuple_to_list'
					      (_rec8)
				      in  apply 'tuple_of_sets'/3
					      (_20, _17, [])
				  -| ['compiler_generated'] )
				( <_35> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','OrdSet'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_33> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','OrdSet'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 346
	  <S = {'OrdSet',_36,_37}> when ( 'true'
					  -| ['compiler_generated'] ) ->
	      %% Line 347
	      call 'erlang':'error'
		  ('badarg')
	  ( <_21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_21})
		  -| [{'function_name',{'to_sets',1}}] )
	    -| ['compiler_generated'] )
	end
'no_elements'/1 =
    %% Line 352
    fun (_0) ->
	case _0 of
	  <S = {'Set',_13,_14}> when ( 'true'
				       -| ['compiler_generated'] ) ->
	      %% Line 353
	      ( case S of
		  ( <( {'Set',_rec9,_15}
		       -| ['compiler_generated'] )> when 'true' ->
			call 'erlang':'length'
			    (_rec9)
		    -| ['compiler_generated'] )
		  ( <_16> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 354
	  <S = {'OrdSet',_17,_18}>
	      when ( try
		      let <_7> =
			  call 'erlang':'element'
			      (3, S)
		      in  call 'erlang':'is_tuple'
			      (_7)
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 355
	      ( case S of
		  ( <( {'OrdSet',_rec10,_19}
		       -| ['compiler_generated'] )> when 'true' ->
			call 'erlang':'tuple_size'
			    (_rec10)
		    -| ['compiler_generated'] )
		  ( <_20> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','OrdSet'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 356
	  <S = {'OrdSet',_21,_22}> when ( 'true'
					  -| ['compiler_generated'] ) ->
	      %% Line 357
	      call 'erlang':'error'
		  ('badarg')
	  ( <_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12})
		  -| [{'function_name',{'no_elements',1}}] )
	    -| ['compiler_generated'] )
	end
'specification'/2 =
    %% Line 363
    fun (_0,_1) ->
	case <_0,_1> of
	  <Fun,S = {'Set',_16,_17}> when ( 'true'
					   -| ['compiler_generated'] ) ->
	      %% Line 364
	      ( case S of
		  ( <( {'Set',_18,_rec11}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_11> =
			    case %% Line 2347
				 ( case Fun of
				     ( <( {( 'external'
					     -| ['compiler_generated'] ),Function}
					  -| ['compiler_generated'] )>
					   when ( call ( 'erlang'
						      -| ['compiler_generated'] ):( 'is_atom'
										    -| ['compiler_generated'] )
						   (Function)
					       -| ['compiler_generated'] ) ->
					   %% Line 2348
					   ( 'false'
					     -| ['compiler_generated'] )
				       -| ['compiler_generated'] )
				     %% Line 2349
				     ( <( {( 'external'
					     -| ['compiler_generated'] ),_25}
					  -| ['compiler_generated'] )> when ( 'true'
									      -| ['compiler_generated'] ) ->
					   _25
				       -| ['compiler_generated'] )
				     %% Line 2351
				     ( <_2> when ( 'true'
						   -| ['compiler_generated'] ) ->
					   %% Line 2352
					   ( 'false'
					     -| ['compiler_generated'] )
				       -| ['compiler_generated'] )
				   end
				   -| ['compiler_generated'] ) of
			      %% Line 366
			      <'false'> when 'true' ->
				  %% Line 367
				  ( case S of
				      ( <( {'Set',_rec12,_20}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_5> =
						case _rec11 of
						  %% Line 2355
						  ( <( [_27|( []
							      -| ['compiler_generated'] )]
						       -| ['compiler_generated'] )> when ( 'true'
											   -| ['compiler_generated'] ) ->
							_27
						    -| ['compiler_generated'] )
						  %% Line 2356
						  ( <_28> when ( 'true'
								 -| ['compiler_generated'] ) ->
							_28
						    -| ['compiler_generated'] )
						end
					    in  apply 'spec'/4
						    (_rec12, Fun, _5, [])
					-| ['compiler_generated'] )
				      ( <_21> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','Set'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 368
			      <XFun> when 'true' ->
				  %% Line 369
				  ( case S of
				      ( <( {'Set',_rec13,_22}
					   -| ['compiler_generated'] )> when 'true' ->
					    apply 'specification'/3
						(_rec13, XFun, [])
					-| ['compiler_generated'] )
				      ( <_23> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','Set'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			    end
			in  %% Line 371
			    case _11 of
			      %% Line 372
			      <SL>
				  when call 'erlang':'is_list'
					(_11) ->
				  %% Line 373
				  {'Set',SL,_rec11}
			      %% Line 374
			      <Bad> when 'true' ->
				  %% Line 375
				  call 'erlang':'error'
				      (Bad)
			    end
		    -| ['compiler_generated'] )
		  ( <_19> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_15,_14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_15,_14})
		  -| [{'function_name',{'specification',2}}] )
	    -| ['compiler_generated'] )
	end
'union'/2 =
    %% Line 382
    fun (_0,_1) ->
	case <_0,_1> of
	  <S1 = {'Set',_14,_15},S2 = {'Set',_16,_17}> when ( 'true'
							     -| ['compiler_generated'] ) ->
	      %% Line 383
	      ( case S1 of
		  ( <( {'Set',_18,_rec14}
		       -| ['compiler_generated'] )> when 'true' ->
			( case S2 of
			    ( <( {'Set',_20,_rec15}
				 -| ['compiler_generated'] )> when 'true' ->
				  case %% Line 2758
				       ( case <_rec14,_rec15> of
					   ( <T,_4>
						 when ( call ( 'erlang'
							    -| ['compiler_generated'] ):( '=:='
											  -| ['compiler_generated'] )
							 (_4,
							  T)
						     -| ['compiler_generated'] ) ->
						 T
					     -| ['compiler_generated'] )
					   %% Line 2759
					   ( <Type1,Type2> when ( 'true'
								  -| ['compiler_generated'] ) ->
						 ( catch
						       %% Line 2760
						       ( apply 'unify_types1'/2
							     (Type1, Type2)
							 -| ['compiler_generated'] )
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					 end
					 -| ['compiler_generated'] ) of
				    %% Line 384
				    <[]> when 'true' ->
					call 'erlang':'error'
					    ('type_mismatch')
				    %% Line 385
				    <Type> when 'true' ->
					( case S1 of
					    ( <( {'Set',_rec16,_22}
						 -| ['compiler_generated'] )> when 'true' ->
						  ( case S2 of
						      ( <( {'Set',_rec17,_24}
							   -| ['compiler_generated'] )> when 'true' ->
							    let <_10> =
								call 'lists':'umerge'
								    (_rec16, _rec17)
							    in  {'Set',_10,Type}
							-| ['compiler_generated'] )
						      ( <_25> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','Set'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_23> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','Set'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_21> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','Set'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_19> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12})
		  -| [{'function_name',{'union',2}}] )
	    -| ['compiler_generated'] )
	end
'intersection'/2 =
    %% Line 392
    fun (_0,_1) ->
	case <_0,_1> of
	  <S1 = {'Set',_14,_15},S2 = {'Set',_16,_17}> when ( 'true'
							     -| ['compiler_generated'] ) ->
	      %% Line 393
	      ( case S1 of
		  ( <( {'Set',_18,_rec18}
		       -| ['compiler_generated'] )> when 'true' ->
			( case S2 of
			    ( <( {'Set',_20,_rec19}
				 -| ['compiler_generated'] )> when 'true' ->
				  case %% Line 2758
				       ( case <_rec18,_rec19> of
					   ( <T,_4>
						 when ( call ( 'erlang'
							    -| ['compiler_generated'] ):( '=:='
											  -| ['compiler_generated'] )
							 (_4,
							  T)
						     -| ['compiler_generated'] ) ->
						 T
					     -| ['compiler_generated'] )
					   %% Line 2759
					   ( <Type1,Type2> when ( 'true'
								  -| ['compiler_generated'] ) ->
						 ( catch
						       %% Line 2760
						       ( apply 'unify_types1'/2
							     (Type1, Type2)
							 -| ['compiler_generated'] )
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					 end
					 -| ['compiler_generated'] ) of
				    %% Line 394
				    <[]> when 'true' ->
					call 'erlang':'error'
					    ('type_mismatch')
				    %% Line 395
				    <Type> when 'true' ->
					( case S1 of
					    ( <( {'Set',_rec20,_22}
						 -| ['compiler_generated'] )> when 'true' ->
						  ( case S2 of
						      ( <( {'Set',_rec21,_24}
							   -| ['compiler_generated'] )> when 'true' ->
							    let <_10> =
								apply 'intersection'/3
								    (_rec20, _rec21, [])
							    in  {'Set',_10,Type}
							-| ['compiler_generated'] )
						      ( <_25> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','Set'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_23> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','Set'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_21> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','Set'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_19> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12})
		  -| [{'function_name',{'intersection',2}}] )
	    -| ['compiler_generated'] )
	end
'difference'/2 =
    %% Line 402
    fun (_0,_1) ->
	case <_0,_1> of
	  <S1 = {'Set',_14,_15},S2 = {'Set',_16,_17}> when ( 'true'
							     -| ['compiler_generated'] ) ->
	      %% Line 403
	      ( case S1 of
		  ( <( {'Set',_18,_rec22}
		       -| ['compiler_generated'] )> when 'true' ->
			( case S2 of
			    ( <( {'Set',_20,_rec23}
				 -| ['compiler_generated'] )> when 'true' ->
				  case %% Line 2758
				       ( case <_rec22,_rec23> of
					   ( <T,_4>
						 when ( call ( 'erlang'
							    -| ['compiler_generated'] ):( '=:='
											  -| ['compiler_generated'] )
							 (_4,
							  T)
						     -| ['compiler_generated'] ) ->
						 T
					     -| ['compiler_generated'] )
					   %% Line 2759
					   ( <Type1,Type2> when ( 'true'
								  -| ['compiler_generated'] ) ->
						 ( catch
						       %% Line 2760
						       ( apply 'unify_types1'/2
							     (Type1, Type2)
							 -| ['compiler_generated'] )
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					 end
					 -| ['compiler_generated'] ) of
				    %% Line 404
				    <[]> when 'true' ->
					call 'erlang':'error'
					    ('type_mismatch')
				    %% Line 405
				    <Type> when 'true' ->
					( case S1 of
					    ( <( {'Set',_rec24,_22}
						 -| ['compiler_generated'] )> when 'true' ->
						  ( case S2 of
						      ( <( {'Set',_rec25,_24}
							   -| ['compiler_generated'] )> when 'true' ->
							    let <_10> =
								apply 'difference'/3
								    (_rec24, _rec25, [])
							    in  {'Set',_10,Type}
							-| ['compiler_generated'] )
						      ( <_25> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','Set'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_23> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','Set'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_21> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','Set'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_19> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12})
		  -| [{'function_name',{'difference',2}}] )
	    -| ['compiler_generated'] )
	end
'symdiff'/2 =
    %% Line 412
    fun (_0,_1) ->
	case <_0,_1> of
	  <S1 = {'Set',_14,_15},S2 = {'Set',_16,_17}> when ( 'true'
							     -| ['compiler_generated'] ) ->
	      %% Line 413
	      ( case S1 of
		  ( <( {'Set',_18,_rec26}
		       -| ['compiler_generated'] )> when 'true' ->
			( case S2 of
			    ( <( {'Set',_20,_rec27}
				 -| ['compiler_generated'] )> when 'true' ->
				  case %% Line 2758
				       ( case <_rec26,_rec27> of
					   ( <T,_4>
						 when ( call ( 'erlang'
							    -| ['compiler_generated'] ):( '=:='
											  -| ['compiler_generated'] )
							 (_4,
							  T)
						     -| ['compiler_generated'] ) ->
						 T
					     -| ['compiler_generated'] )
					   %% Line 2759
					   ( <Type1,Type2> when ( 'true'
								  -| ['compiler_generated'] ) ->
						 ( catch
						       %% Line 2760
						       ( apply 'unify_types1'/2
							     (Type1, Type2)
							 -| ['compiler_generated'] )
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					 end
					 -| ['compiler_generated'] ) of
				    %% Line 414
				    <[]> when 'true' ->
					call 'erlang':'error'
					    ('type_mismatch')
				    %% Line 415
				    <Type> when 'true' ->
					( case S1 of
					    ( <( {'Set',_rec28,_22}
						 -| ['compiler_generated'] )> when 'true' ->
						  ( case S2 of
						      ( <( {'Set',_rec29,_24}
							   -| ['compiler_generated'] )> when 'true' ->
							    let <_10> =
								case <_rec28,_rec29> of
								  %% Line 1866
								  ( <( [H1|T1]
								       -| ['compiler_generated'] ),T2> when ( 'true'
													      -| ['compiler_generated'] ) ->
									%% Line 1867
									( apply 'symdiff2'/4
									      (T1, T2, ( []
											 -| ['compiler_generated'] ), H1)
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								  %% Line 1868
								  ( <_6,T2> when ( 'true'
										   -| ['compiler_generated'] ) ->
									%% Line 1869
									( call ( 'lists'
										 -| ['compiler_generated'] ):( 'reverse'
													       -| ['compiler_generated'] )
									      (( []
										 -| ['compiler_generated'] ), T2)
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
							    in  {'Set',_10,Type}
							-| ['compiler_generated'] )
						      ( <_25> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','Set'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_23> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','Set'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_21> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','Set'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_19> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12})
		  -| [{'function_name',{'symdiff',2}}] )
	    -| ['compiler_generated'] )
	end
'symmetric_partition'/2 =
    %% Line 424
    fun (_0,_1) ->
	case <_0,_1> of
	  <S1 = {'Set',_13,_14},S2 = {'Set',_15,_16}> when ( 'true'
							     -| ['compiler_generated'] ) ->
	      %% Line 425
	      ( case S1 of
		  ( <( {'Set',_17,_rec30}
		       -| ['compiler_generated'] )> when 'true' ->
			( case S2 of
			    ( <( {'Set',_19,_rec31}
				 -| ['compiler_generated'] )> when 'true' ->
				  case %% Line 2758
				       ( case <_rec30,_rec31> of
					   ( <T,_4>
						 when ( call ( 'erlang'
							    -| ['compiler_generated'] ):( '=:='
											  -| ['compiler_generated'] )
							 (_4,
							  T)
						     -| ['compiler_generated'] ) ->
						 T
					     -| ['compiler_generated'] )
					   %% Line 2759
					   ( <Type1,Type2> when ( 'true'
								  -| ['compiler_generated'] ) ->
						 ( catch
						       %% Line 2760
						       ( apply 'unify_types1'/2
							     (Type1, Type2)
							 -| ['compiler_generated'] )
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					 end
					 -| ['compiler_generated'] ) of
				    %% Line 426
				    <[]> when 'true' ->
					call 'erlang':'error'
					    ('type_mismatch')
				    %% Line 427
				    <Type> when 'true' ->
					( case S1 of
					    ( <( {'Set',_rec32,_21}
						 -| ['compiler_generated'] )> when 'true' ->
						  ( case S2 of
						      ( <( {'Set',_rec33,_23}
							   -| ['compiler_generated'] )> when 'true' ->
							    apply 'sympart'/6
								(_rec32, _rec33, [], [], [], Type)
							-| ['compiler_generated'] )
						      ( <_24> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','Set'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_22> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','Set'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_20> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','Set'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_18> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11})
		  -| [{'function_name',{'symmetric_partition',2}}] )
	    -| ['compiler_generated'] )
	end
'product'/2 =
    %% Line 434
    fun (_0,_1) ->
	case <_0,_1> of
	  <S1 = {'Set',_31,_32},S2 = {'Set',_33,_34}> when ( 'true'
							     -| ['compiler_generated'] ) ->
	      %% Line 435
	      case <> of
		%% Line 436
		<>
		    when ( try
			    ( let <_4> =
				  case ( call ( 'erlang'
						-| ['compiler_generated'] ):( 'is_record'
									      -| ['compiler_generated'] )
					     (S1, ( 'Set'
						    -| ['compiler_generated'] ), ( 3
										   -| ['compiler_generated'] ))
					 -| ['compiler_generated'] ) of
				    ( <( 'true'
					 -| ['compiler_generated'] )> when 'true' ->
					  ( 'true'
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <( 'false'
					 -| ['compiler_generated'] )> when 'true' ->
					  ( 'fail'
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <( _2
					 -| ['compiler_generated'] )> when 'true' ->
					  ( _2
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      in  let <_5> =
				      call 'erlang':'=:='
					  (( _4
					     -| ['compiler_generated'] ), 'true')
				  in  let <_6> =
					  call 'erlang':'element'
					      (3, S1)
				      in  let <_7> =
					      call 'erlang':'=:='
						  (_6, '_')
					  in  ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_5, _7)
						-| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
			-| ['compiler_generated'] ) ->
		    S1
		%% Line 437
		<>
		    when ( try
			    ( let <_10> =
				  case ( call ( 'erlang'
						-| ['compiler_generated'] ):( 'is_record'
									      -| ['compiler_generated'] )
					     (S2, ( 'Set'
						    -| ['compiler_generated'] ), ( 3
										   -| ['compiler_generated'] ))
					 -| ['compiler_generated'] ) of
				    ( <( 'true'
					 -| ['compiler_generated'] )> when 'true' ->
					  ( 'true'
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <( 'false'
					 -| ['compiler_generated'] )> when 'true' ->
					  ( 'fail'
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <( _8
					 -| ['compiler_generated'] )> when 'true' ->
					  ( _8
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      in  let <_11> =
				      call 'erlang':'=:='
					  (( _10
					     -| ['compiler_generated'] ), 'true')
				  in  let <_12> =
					  call 'erlang':'element'
					      (3, S2)
				      in  let <_13> =
					      call 'erlang':'=:='
						  (_12, '_')
					  in  ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_11, _13)
						-| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
			-| ['compiler_generated'] ) ->
		    S2
		%% Line 438
		<> when 'true' ->
		    let <F> =
			fun (_14) ->
			    %% Line 439
			    {0,_14}
		    in  %% Line 440
			( case S1 of
			    ( <( {'Set',_35,_rec34}
				 -| ['compiler_generated'] )> when 'true' ->
				  ( case S2 of
				      ( <( {'Set',_37,_rec35}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <T> = {_rec34,_rec35}
					    in  %% Line 441
						( case S1 of
						    ( <( {'Set',_rec36,_39}
							 -| ['compiler_generated'] )> when 'true' ->
							  let <_27> =
							      call 'lists':'map'
								  (F, _rec36)
							  in  ( case S2 of
								  ( <( {'Set',_rec37,_41}
								       -| ['compiler_generated'] )> when 'true' ->
									let <_24> =
									    call 'lists':'map'
										(F, _rec37)
									in  let <_28> =
										apply 'relprod'/2
										    (_27, _24)
									    in  {'Set',_28,T}
								    -| ['compiler_generated'] )
								  ( <_42> when 'true' ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','Set'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <_40> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','Set'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <_38> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','Set'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_36> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','Set'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
	      end
	  ( <_30,_29> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_30,_29})
		  -| [{'function_name',{'product',2}}] )
	    -| ['compiler_generated'] )
	end
'product'/1 =
    %% Line 447
    fun (_0) ->
	case _0 of
	  <{S1,S2}> when 'true' ->
	      %% Line 448
	      apply 'product'/2
		  (S1, S2)
	  %% Line 449
	  <T>
	      when call 'erlang':'is_tuple'
		    (_0) ->
	      let <Ss> =
		  call %% Line 450
		       'erlang':%% Line 450
				'tuple_to_list'
		      (%% Line 450
		       T)
	      in  %% Line 451
		  try
		      apply 'sets_to_list'/1
			  (Ss)
		  of <_2> ->
		      case _2 of
			%% Line 452
			<[]> when 'true' ->
			    %% Line 453
			    call 'erlang':'error'
				('badarg')
			%% Line 454
			<L> when 'true' ->
			    let <Type> =
				apply %% Line 455
				      'types'/2
				    (%% Line 455
				     Ss, %% Line 455
					 [])
			    in  %% Line 456
				case call 'lists':'member'
					 ([], L) of
				  %% Line 457
				  <'true'> when 'true' ->
				      %% Line 458
				      apply 'empty_set'/0
					  ()
				  %% Line 459
				  <'false'> when 'true' ->
				      let <_4> =
					  apply %% Line 460
						'prod'/3
					      (%% Line 460
					       L, %% Line 460
						  [], %% Line 460
						      [])
				      in  let <_5> =
					      call %% Line 460
						   'lists':%% Line 460
							   'reverse'
						  (_4)
					  in  %% Line 460
					      {'Set',_5,Type}
				  ( <_6> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_6})
				    -| ['compiler_generated'] )
				end
		      end
		  catch <_10,_9,_8> ->
		      %% Line 462
		      call 'erlang':'error'
			  ('badarg')
	  ( <_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11})
		  -| [{'function_name',{'product',1}}] )
	    -| ['compiler_generated'] )
	end
'constant_function'/2 =
    %% Line 469
    fun (_0,_1) ->
	case <_0,_1> of
	  <S = {'Set',_14,_15},E> when ( 'true'
					 -| ['compiler_generated'] ) ->
	      %% Line 470
	      ( case S of
		  ( <( {'Set',_16,_rec38}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_2> =
			    apply 'is_sofs_set'/1
				(E)
			in  case <_rec38,_2> of
			      %% Line 471
			      <'_','true'> when 'true' ->
				  S
			      %% Line 472
			      <Type,( 'true'
				      -| ['compiler_generated'] )> when 'true' ->
				  let <_5> =
				      apply %% Line 473
					    'type'/1
					  (%% Line 473
					   E)
				  in  let <NType> = {%% Line 473
					   Type,_5}
				      in  %% Line 474
					  ( case S of
					      ( <( {'Set',_rec39,_18}
						   -| ['compiler_generated'] )> when 'true' ->
						    let <_7> =
							apply 'to_external'/1
							    (E)
						    in  let <_10> =
							    apply 'constant_function'/3
								(_rec39, _7, [])
							in  {'Set',_10,NType}
						-| ['compiler_generated'] )
					      ( <_19> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','Set'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
			      %% Line 475
			      <( _24
				 -| ['compiler_generated'] ),( _25
							       -| ['compiler_generated'] )> when 'true' ->
				  call 'erlang':'error'
				      ('badarg')
			    end
		    -| ['compiler_generated'] )
		  ( <_17> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 477
	  <S = {'OrdSet',_21,_22},_23> when ( 'true'
					      -| ['compiler_generated'] ) ->
	      %% Line 478
	      call 'erlang':'error'
		  ('badarg')
	  ( <_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12})
		  -| [{'function_name',{'constant_function',2}}] )
	    -| ['compiler_generated'] )
	end
'is_equal'/2 =
    %% Line 484
    fun (_0,_1) ->
	case <_0,_1> of
	  <S1 = {'Set',_22,_23},S2 = {'Set',_24,_25}> when ( 'true'
							     -| ['compiler_generated'] ) ->
	      %% Line 485
	      ( case S1 of
		  ( <( {'Set',_26,_rec40}
		       -| ['compiler_generated'] )> when 'true' ->
			( case S2 of
			    ( <( {'Set',_28,_rec41}
				 -| ['compiler_generated'] )> when 'true' ->
				  case %% Line 2782
				       ( case <_rec40,_rec41> of
					   ( <T,_4>
						 when ( call ( 'erlang'
							    -| ['compiler_generated'] ):( '=:='
											  -| ['compiler_generated'] )
							 (_4,
							  T)
						     -| ['compiler_generated'] ) ->
						 ( 'true'
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					   %% Line 2783
					   ( <Type1,Type2> when ( 'true'
								  -| ['compiler_generated'] ) ->
						 ( apply 'match_types1'/2
						       (Type1, Type2)
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					 end
					 -| ['compiler_generated'] ) of
				    %% Line 486
				    <'true'> when 'true' ->
					( case S1 of
					    ( <( {'Set',_rec42,_30}
						 -| ['compiler_generated'] )> when 'true' ->
						  ( case S2 of
						      ( <( {'Set',_rec43,_32}
							   -| ['compiler_generated'] )> when 'true' ->
							    call 'erlang':'=='
								(_rec42, _rec43)
							-| ['compiler_generated'] )
						      ( <_33> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','Set'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_31> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','Set'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    %% Line 487
				    <'false'> when 'true' ->
					call 'erlang':'error'
					    ('type_mismatch')
				    ( <_10> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_10})
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_29> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','Set'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_27> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 489
	  <S1 = {'OrdSet',_34,_35},S2 = {'OrdSet',_36,_37}> when ( 'true'
								   -| ['compiler_generated'] ) ->
	      %% Line 490
	      ( case S1 of
		  ( <( {'OrdSet',_38,_rec44}
		       -| ['compiler_generated'] )> when 'true' ->
			( case S2 of
			    ( <( {'OrdSet',_40,_rec45}
				 -| ['compiler_generated'] )> when 'true' ->
				  case %% Line 2782
				       ( case <_rec44,_rec45> of
					   ( <T,_4>
						 when ( call ( 'erlang'
							    -| ['compiler_generated'] ):( '=:='
											  -| ['compiler_generated'] )
							 (_4,
							  T)
						     -| ['compiler_generated'] ) ->
						 ( 'true'
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					   %% Line 2783
					   ( <Type1,Type2> when ( 'true'
								  -| ['compiler_generated'] ) ->
						 ( apply 'match_types1'/2
						       (Type1, Type2)
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					 end
					 -| ['compiler_generated'] ) of
				    %% Line 491
				    <'true'> when 'true' ->
					( case S1 of
					    ( <( {'OrdSet',_rec46,_42}
						 -| ['compiler_generated'] )> when 'true' ->
						  ( case S2 of
						      ( <( {'OrdSet',_rec47,_44}
							   -| ['compiler_generated'] )> when 'true' ->
							    call 'erlang':'=='
								(_rec46, _rec47)
							-| ['compiler_generated'] )
						      ( <_45> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','OrdSet'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_43> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','OrdSet'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    %% Line 492
				    <'false'> when 'true' ->
					call 'erlang':'error'
					    ('type_mismatch')
				    ( <_19> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_19})
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_41> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','OrdSet'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_39> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','OrdSet'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 494
	  <S1 = {'Set',_46,_47},S2 = {'OrdSet',_48,_49}> when ( 'true'
								-| ['compiler_generated'] ) ->
	      %% Line 495
	      call 'erlang':'error'
		  ('type_mismatch')
	  %% Line 496
	  <S1 = {'OrdSet',_50,_51},S2 = {'Set',_52,_53}> when ( 'true'
								-| ['compiler_generated'] ) ->
	      %% Line 497
	      call 'erlang':'error'
		  ('type_mismatch')
	  ( <_21,_20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_21,_20})
		  -| [{'function_name',{'is_equal',2}}] )
	    -| ['compiler_generated'] )
	end
'is_subset'/2 =
    %% Line 503
    fun (_0,_1) ->
	case <_0,_1> of
	  <S1 = {'Set',_13,_14},S2 = {'Set',_15,_16}> when ( 'true'
							     -| ['compiler_generated'] ) ->
	      %% Line 504
	      ( case S1 of
		  ( <( {'Set',_17,_rec48}
		       -| ['compiler_generated'] )> when 'true' ->
			( case S2 of
			    ( <( {'Set',_19,_rec49}
				 -| ['compiler_generated'] )> when 'true' ->
				  case %% Line 2782
				       ( case <_rec48,_rec49> of
					   ( <T,_4>
						 when ( call ( 'erlang'
							    -| ['compiler_generated'] ):( '=:='
											  -| ['compiler_generated'] )
							 (_4,
							  T)
						     -| ['compiler_generated'] ) ->
						 ( 'true'
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					   %% Line 2783
					   ( <Type1,Type2> when ( 'true'
								  -| ['compiler_generated'] ) ->
						 ( apply 'match_types1'/2
						       (Type1, Type2)
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					 end
					 -| ['compiler_generated'] ) of
				    %% Line 505
				    <'true'> when 'true' ->
					( case S1 of
					    ( <( {'Set',_rec50,_21}
						 -| ['compiler_generated'] )> when 'true' ->
						  ( case S2 of
						      ( <( {'Set',_rec51,_23}
							   -| ['compiler_generated'] )> when 'true' ->
							    apply 'subset'/2
								(_rec50, _rec51)
							-| ['compiler_generated'] )
						      ( <_24> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','Set'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_22> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','Set'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    %% Line 506
				    <'false'> when 'true' ->
					call 'erlang':'error'
					    ('type_mismatch')
				    ( <_10> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_10})
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_20> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','Set'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_18> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11})
		  -| [{'function_name',{'is_subset',2}}] )
	    -| ['compiler_generated'] )
	end
'is_sofs_set'/1 =
    %% Line 512
    fun (_0) ->
	case _0 of
	  <S = {'Set',_2,_3}> when ( 'true'
				     -| ['compiler_generated'] ) ->
	      %% Line 513
	      'true'
	  %% Line 514
	  <S = {'OrdSet',_4,_5}> when ( 'true'
					-| ['compiler_generated'] ) ->
	      %% Line 515
	      'true'
	  %% Line 516
	  <_X_S> when 'true' ->
	      %% Line 517
	      'false'
	end
'is_set'/1 =
    %% Line 522
    fun (_0) ->
	case _0 of
	  <S = {'Set',_2,_3}> when ( 'true'
				     -| ['compiler_generated'] ) ->
	      %% Line 523
	      'true'
	  %% Line 524
	  <S = {'OrdSet',_4,_5}> when ( 'true'
					-| ['compiler_generated'] ) ->
	      %% Line 525
	      'false'
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'is_set',1}}] )
	    -| ['compiler_generated'] )
	end
'is_empty_set'/1 =
    %% Line 530
    fun (_0) ->
	case _0 of
	  <S = {'Set',_4,_5}> when ( 'true'
				     -| ['compiler_generated'] ) ->
	      %% Line 531
	      ( case S of
		  ( <( {'Set',_rec52,_6}
		       -| ['compiler_generated'] )> when 'true' ->
			call 'erlang':'=:='
			    (_rec52, [])
		    -| ['compiler_generated'] )
		  ( <_7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 532
	  <S = {'OrdSet',_8,_9}> when ( 'true'
					-| ['compiler_generated'] ) ->
	      %% Line 533
	      'false'
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'is_empty_set',1}}] )
	    -| ['compiler_generated'] )
	end
'is_disjoint'/2 =
    %% Line 539
    fun (_0,_1) ->
	case <_0,_1> of
	  <S1 = {'Set',_14,_15},S2 = {'Set',_16,_17}> when ( 'true'
							     -| ['compiler_generated'] ) ->
	      %% Line 540
	      ( case S1 of
		  ( <( {'Set',_18,_rec53}
		       -| ['compiler_generated'] )> when 'true' ->
			( case S2 of
			    ( <( {'Set',_20,_rec54}
				 -| ['compiler_generated'] )> when 'true' ->
				  case %% Line 2782
				       ( case <_rec53,_rec54> of
					   ( <T,_4>
						 when ( call ( 'erlang'
							    -| ['compiler_generated'] ):( '=:='
											  -| ['compiler_generated'] )
							 (_4,
							  T)
						     -| ['compiler_generated'] ) ->
						 ( 'true'
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					   %% Line 2783
					   ( <Type1,Type2> when ( 'true'
								  -| ['compiler_generated'] ) ->
						 ( apply 'match_types1'/2
						       (Type1, Type2)
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					 end
					 -| ['compiler_generated'] ) of
				    %% Line 541
				    <'true'> when 'true' ->
					%% Line 542
					( case S1 of
					    ( <( {'Set',_rec55,_22}
						 -| ['compiler_generated'] )> when 'true' ->
						  case _rec55 of
						    %% Line 543
						    <[]> when 'true' ->
							'true'
						    %% Line 544
						    <[A|As]> when 'true' ->
							( case S2 of
							    ( <( {'Set',_rec56,_24}
								 -| ['compiler_generated'] )> when 'true' ->
								  apply 'disjoint'/3
								      (_rec56, A, As)
							      -| ['compiler_generated'] )
							    ( <_25> when 'true' ->
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'error'
													 -| ['compiler_generated'] )
									(( {'badrecord','Set'}
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
						    ( <_10> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_10})
						      -| ['compiler_generated'] )
						  end
					      -| ['compiler_generated'] )
					    ( <_23> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','Set'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    %% Line 546
				    <'false'> when 'true' ->
					call 'erlang':'error'
					    ('type_mismatch')
				    ( <_11> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_11})
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_21> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','Set'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_19> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12})
		  -| [{'function_name',{'is_disjoint',2}}] )
	    -| ['compiler_generated'] )
	end
'union'/1 =
    %% Line 556
    fun (_0) ->
	case _0 of
	  <Sets = {'Set',_8,_9}> when ( 'true'
					-| ['compiler_generated'] ) ->
	      %% Line 557
	      ( case Sets of
		  ( <( {'Set',_10,_rec57}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec57 of
			  %% Line 558
			  <[Type|[]]> when 'true' ->
			      ( case Sets of
				  ( <( {'Set',_rec58,_12}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_5> =
					    apply 'lunion'/1
						(_rec58)
					in  {'Set',_5,Type}
				    -| ['compiler_generated'] )
				  ( <_13> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 559
			  <'_'> when 'true' ->
			      Sets
			  %% Line 560
			  <_14> when 'true' ->
			      call 'erlang':'error'
				  ('badarg')
			end
		    -| ['compiler_generated'] )
		  ( <_11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7})
		  -| [{'function_name',{'union',1}}] )
	    -| ['compiler_generated'] )
	end
'intersection'/1 =
    %% Line 566
    fun (_0) ->
	case _0 of
	  <Sets = {'Set',_9,_10}> when ( 'true'
					 -| ['compiler_generated'] ) ->
	      %% Line 567
	      ( case Sets of
		  ( <( {'Set',_rec59,_11}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec59 of
			  %% Line 568
			  <[]> when 'true' ->
			      call 'erlang':'error'
				  ('badarg')
			  %% Line 569
			  <[L|Ls]> when 'true' ->
			      %% Line 570
			      ( case Sets of
				  ( <( {'Set',_13,_rec60}
				       -| ['compiler_generated'] )> when 'true' ->
					case _rec60 of
					  %% Line 571
					  <[Type|[]]> when 'true' ->
					      let <_5> =
						  apply %% Line 572
							'lintersection'/2
						      (%% Line 572
						       Ls, %% Line 572
							   L)
					      in  %% Line 572
						  {'Set',_5,Type}
					  %% Line 573
					  <_15> when 'true' ->
					      call 'erlang':'error'
						  ('badarg')
					end
				    -| ['compiler_generated'] )
				  ( <_14> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  ( <_7> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_7})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_12> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8})
		  -| [{'function_name',{'intersection',1}}] )
	    -| ['compiler_generated'] )
	end
'canonical_relation'/1 =
    %% Line 580
    fun (_0) ->
	case _0 of
	  <Sets = {'Set',_9,_10}> when ( 'true'
					 -| ['compiler_generated'] ) ->
	      %% Line 581
	      ( case Sets of
		  ( <( {'Set',_11,_rec61}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 582
			case _rec61 of
			  %% Line 583
			  <['_']> when 'true' ->
			      apply 'empty_set'/0
				  ()
			  %% Line 584
			  <[Type|[]]> when 'true' ->
			      %% Line 585
			      ( case Sets of
				  ( <( {'Set',_rec62,_13}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_6> =
					    apply 'can_rel'/2
						(_rec62, [])
					in  {'Set',_6,{Type,_rec61}}
				    -| ['compiler_generated'] )
				  ( <_14> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 586
			  <'_'> when 'true' ->
			      Sets
			  %% Line 587
			  <_15> when 'true' ->
			      call 'erlang':'error'
				  ('badarg')
			end
		    -| ['compiler_generated'] )
		  ( <_12> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8})
		  -| [{'function_name',{'canonical_relation',1}}] )
	    -| ['compiler_generated'] )
	end
'rel2fam'/1 =
    %% Line 597
    fun (_0) ->
	%% Line 604
	( case _0 of
	    ( <( _15 = ( {( 'Set'
			    -| ['compiler_generated'] ),_8,_9}
			 -| ['compiler_generated'] )
		 -| ['compiler_generated'] )> when ( 'true'
						     -| ['compiler_generated'] ) ->
		  %% Line 605
		  ( case _15 of
		      ( <( {( 'Set'
			      -| ['compiler_generated'] ),_10,_rec63}
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    ( case _rec63 of
				%% Line 606
				( <( {DT,RT}
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      %% Line 607
				      ( case _15 of
					  ( <( {( 'Set'
						  -| ['compiler_generated'] ),_rec64,_12}
					       -| ['compiler_generated'] )> when ( 'true'
										   -| ['compiler_generated'] ) ->
						( let <_5> =
						      apply 'rel2family'/1
							  (_rec64)
						  in  ( {( 'Set'
							   -| ['compiler_generated'] ),_5,( {DT,( [RT|( []
													-| ['compiler_generated'] )]
												  -| ['compiler_generated'] )}
											    -| ['compiler_generated'] )}
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_13> when ( 'true'
							 -| ['compiler_generated'] ) ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','Set'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 608
				( <( '_'
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      _15
				  -| ['compiler_generated'] )
				%% Line 609
				( <_X_Else> when ( 'true'
						   -| ['compiler_generated'] ) ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( 'badarg'
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_11> when ( 'true'
				     -| ['compiler_generated'] ) ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','Set'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_7> when ( 'true'
			  -| ['compiler_generated'] ) ->
		  ( primop ( 'match_fail'
			     -| ['compiler_generated'] )
			(( {( 'function_clause'
			      -| ['compiler_generated'] ),_7}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'relation_to_family'/1 =
    %% Line 604
    fun (_0) ->
	case _0 of
	  <R = {'Set',_8,_9}> when ( 'true'
				     -| ['compiler_generated'] ) ->
	      %% Line 605
	      ( case R of
		  ( <( {'Set',_10,_rec63}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec63 of
			  %% Line 606
			  <{DT,RT}> when 'true' ->
			      %% Line 607
			      ( case R of
				  ( <( {'Set',_rec64,_12}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_5> =
					    apply 'rel2family'/1
						(_rec64)
					in  {'Set',_5,{DT,[RT|[]]}}
				    -| ['compiler_generated'] )
				  ( <_13> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 608
			  <'_'> when 'true' ->
			      R
			  %% Line 609
			  <_X_Else> when 'true' ->
			      call 'erlang':'error'
				  ('badarg')
			end
		    -| ['compiler_generated'] )
		  ( <_11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7})
		  -| [{'function_name',{'relation_to_family',1}}] )
	    -| ['compiler_generated'] )
	end
'domain'/1 =
    %% Line 615
    fun (_0) ->
	case _0 of
	  <R = {'Set',_8,_9}> when ( 'true'
				     -| ['compiler_generated'] ) ->
	      %% Line 616
	      ( case R of
		  ( <( {'Set',_10,_rec65}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec65 of
			  %% Line 617
			  <{DT,_12}> when 'true' ->
			      ( case R of
				  ( <( {'Set',_rec66,_13}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_5> =
					    apply 'dom'/1
						(_rec66)
					in  {'Set',_5,DT}
				    -| ['compiler_generated'] )
				  ( <_14> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 618
			  <'_'> when 'true' ->
			      R
			  %% Line 619
			  <_X_Else> when 'true' ->
			      call 'erlang':'error'
				  ('badarg')
			end
		    -| ['compiler_generated'] )
		  ( <_11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7})
		  -| [{'function_name',{'domain',1}}] )
	    -| ['compiler_generated'] )
	end
'range'/1 =
    %% Line 625
    fun (_0) ->
	case _0 of
	  <R = {'Set',_8,_9}> when ( 'true'
				     -| ['compiler_generated'] ) ->
	      %% Line 626
	      ( case R of
		  ( <( {'Set',_10,_rec67}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec67 of
			  %% Line 627
			  <{_12,RT}> when 'true' ->
			      ( case R of
				  ( <( {'Set',_rec68,_13}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_5> =
					    apply 'ran'/2
						(_rec68, [])
					in  {'Set',_5,RT}
				    -| ['compiler_generated'] )
				  ( <_14> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 628
			  <'_'> when 'true' ->
			      R
			  %% Line 629
			  <_15> when 'true' ->
			      call 'erlang':'error'
				  ('badarg')
			end
		    -| ['compiler_generated'] )
		  ( <_11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7})
		  -| [{'function_name',{'range',1}}] )
	    -| ['compiler_generated'] )
	end
'field'/1 =
    %% Line 638
    fun (_0) ->
	let <_2> =
	    apply %% Line 639
		  'domain'/1
		(_0)
	in  let <_1> =
		apply %% Line 639
		      'range'/1
		    (_0)
	    in  %% Line 639
		apply 'union'/2
		    (_2, _1)
'relative_product'/1 =
    %% Line 647
    fun (_0) ->
	case _0 of
	  <RT>
	      when call 'erlang':'is_tuple'
		    (_0) ->
	      let <_1> =
		  call %% Line 648
		       'erlang':%% Line 648
				'tuple_to_list'
		      (%% Line 648
		       RT)
	      in  %% Line 648
		  apply 'relative_product'/1
		      (_1)
	  %% Line 649
	  <RL>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 650
	      case apply 'relprod_n'/4
		       (RL, 'foo', 'false', 'false') of
		%% Line 651
		<{'error',Reason}> when 'true' ->
		    %% Line 652
		    call 'erlang':'error'
			(Reason)
		%% Line 653
		<Reply> when 'true' ->
		    %% Line 654
		    Reply
	      end
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'relative_product',1}}] )
	    -| ['compiler_generated'] )
	end
'relative_product'/2 =
    %% Line 666
    fun (_0,_1) ->
	case <_0,_1> of
	  <R1 = {'Set',_16,_17},R2 = {'Set',_18,_19}> when ( 'true'
							     -| ['compiler_generated'] ) ->
	      let <_2> =
		  apply %% Line 667
			'converse'/1
		      (%% Line 667
		       R1)
	      in  %% Line 667
		  apply 'relative_product1'/2
		      (_2, R2)
	  %% Line 670
	  <RT,R = {'Set',_20,_21}>
	      when call 'erlang':'is_tuple'
		    (RT) ->
	      let <_4> =
		  call %% Line 671
		       'erlang':%% Line 671
				'tuple_to_list'
		      (%% Line 671
		       RT)
	      in  %% Line 671
		  apply 'relative_product'/2
		      (_4, R)
	  %% Line 672
	  <RL,R = {'Set',_22,_23}>
	      when call 'erlang':'is_list'
		    (RL) ->
	      %% Line 673
	      ( case R of
		  ( <( {'Set',_24,_rec69}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_11> =
			    case _rec69 of
			      %% Line 674
			      <{_26,_27}> when 'true' ->
				  ( case R of
				      ( <( {'Set',_rec70,_28}
					   -| ['compiler_generated'] )> when 'true' ->
					    call 'erlang':'=:='
						(_rec70, [])
					-| ['compiler_generated'] )
				      ( <_29> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','Set'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 675
			      <'_'> when 'true' ->
				  'true'
			      %% Line 676
			      <_30> when 'true' ->
				  call 'erlang':'error'
				      ('badarg')
			    end
			in  %% Line 678
			    case apply 'relprod_n'/4
				     (RL, R, _11, 'true') of
			      %% Line 679
			      <{'error',Reason}> when 'true' ->
				  %% Line 680
				  call 'erlang':'error'
				      (Reason)
			      %% Line 681
			      <Reply> when 'true' ->
				  %% Line 682
				  Reply
			    end
		    -| ['compiler_generated'] )
		  ( <_25> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_15,_14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_15,_14})
		  -| [{'function_name',{'relative_product',2}}] )
	    -| ['compiler_generated'] )
	end
'relative_product1'/2 =
    %% Line 689
    fun (_0,_1) ->
	case <_0,_1> of
	  <R1 = {'Set',_20,_21},R2 = {'Set',_22,_23}> when ( 'true'
							     -| ['compiler_generated'] ) ->
	      %% Line 690
	      ( case R1 of
		  ( <( {'Set',_24,_rec71}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_5> =
			    case _rec71 of
			      %% Line 691
			      <R1T = {_26,_27}> when 'true' ->
				  R1T
			      %% Line 692
			      <'_'> when 'true' ->
				  {'_','_'}
			      %% Line 693
			      <_28> when 'true' ->
				  call 'erlang':'error'
				      ('badarg')
			    end
			in  case _5 of
			      <{DTR1,RTR1}> when 'true' ->
				  %% Line 695
				  ( case R2 of
				      ( <( {'Set',_29,_rec72}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_10> =
						case _rec72 of
						  %% Line 696
						  <R2T = {_31,_32}> when 'true' ->
						      R2T
						  %% Line 697
						  <'_'> when 'true' ->
						      {'_','_'}
						  %% Line 698
						  <_33> when 'true' ->
						      call 'erlang':'error'
							  ('badarg')
						end
					    in  case _10 of
						  <{DTR2,RTR2}> when 'true' ->
						      %% Line 700
						      case %% Line 2782
							   ( case <DTR1,DTR2> of
							       ( <T,_4>
								     when ( call ( 'erlang'
										-| ['compiler_generated'] ):( '=:='
													      -| ['compiler_generated'] )
									     (_4,
									      T)
									 -| ['compiler_generated'] ) ->
								     ( 'true'
								       -| ['compiler_generated'] )
								 -| ['compiler_generated'] )
							       %% Line 2783
							       ( <Type1,Type2> when ( 'true'
										      -| ['compiler_generated'] ) ->
								     ( apply 'match_types1'/2
									   (Type1, Type2)
								       -| ['compiler_generated'] )
								 -| ['compiler_generated'] )
							     end
							     -| ['compiler_generated'] ) of
							%% Line 701
							<'true'>
							    when call 'erlang':'=:='
								  (DTR1,
								   '_') ->
							    R1
							%% Line 702
							<'true'>
							    when call 'erlang':'=:='
								  (DTR2,
								   '_') ->
							    R2
							%% Line 703
							<'true'> when 'true' ->
							    ( case R1 of
								( <( {'Set',_rec73,_34}
								     -| ['compiler_generated'] )> when 'true' ->
								      ( case R2 of
									  ( <( {'Set',_rec74,_36}
									       -| ['compiler_generated'] )> when 'true' ->
										let <_16> =
										    apply 'relprod'/2
											(_rec73, _rec74)
										in  {'Set',_16,{RTR1,RTR2}}
									    -| ['compiler_generated'] )
									  ( <_37> when 'true' ->
										( call ( 'erlang'
											 -| ['compiler_generated'] ):( 'error'
														       -| ['compiler_generated'] )
										      (( {'badrecord','Set'}
											 -| ['compiler_generated'] ))
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									end
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
								( <_35> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','Set'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
							%% Line 704
							<'false'> when 'true' ->
							    call 'erlang':'error'
								('type_mismatch')
							( <_17> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_17})
							  -| ['compiler_generated'] )
						      end
						  ( <_11> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_11})
						    -| ['compiler_generated'] )
						end
					-| ['compiler_generated'] )
				      ( <_30> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','Set'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      ( <_6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_6})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_25> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_19,_18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_19,_18})
		  -| [{'function_name',{'relative_product1',2}}] )
	    -| ['compiler_generated'] )
	end
'converse'/1 =
    %% Line 710
    fun (_0) ->
	case _0 of
	  <R = {'Set',_8,_9}> when ( 'true'
				     -| ['compiler_generated'] ) ->
	      %% Line 711
	      ( case R of
		  ( <( {'Set',_10,_rec75}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec75 of
			  %% Line 712
			  <{DT,RT}> when 'true' ->
			      ( case R of
				  ( <( {'Set',_rec76,_12}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_5> =
					    apply 'converse'/2
						(_rec76, [])
					in  {'Set',_5,{RT,DT}}
				    -| ['compiler_generated'] )
				  ( <_13> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 713
			  <'_'> when 'true' ->
			      R
			  %% Line 714
			  <_14> when 'true' ->
			      call 'erlang':'error'
				  ('badarg')
			end
		    -| ['compiler_generated'] )
		  ( <_11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7})
		  -| [{'function_name',{'converse',1}}] )
	    -| ['compiler_generated'] )
	end
'image'/2 =
    %% Line 721
    fun (_0,_1) ->
	case <_0,_1> of
	  <R = {'Set',_16,_17},S = {'Set',_18,_19}> when ( 'true'
							   -| ['compiler_generated'] ) ->
	      %% Line 722
	      ( case R of
		  ( <( {'Set',_20,_rec77}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec77 of
			  %% Line 723
			  <{DT,RT}> when 'true' ->
			      %% Line 724
			      ( case S of
				  ( <( {'Set',_22,_rec78}
				       -| ['compiler_generated'] )> when 'true' ->
					case %% Line 2782
					     ( case <DT,_rec78> of
						 ( <T,_4>
						       when ( call ( 'erlang'
								  -| ['compiler_generated'] ):( '=:='
												-| ['compiler_generated'] )
							       (_4,
								T)
							   -| ['compiler_generated'] ) ->
						       ( 'true'
							 -| ['compiler_generated'] )
						   -| ['compiler_generated'] )
						 %% Line 2783
						 ( <Type1,Type2> when ( 'true'
									-| ['compiler_generated'] ) ->
						       ( apply 'match_types1'/2
							     (Type1, Type2)
							 -| ['compiler_generated'] )
						   -| ['compiler_generated'] )
					       end
					       -| ['compiler_generated'] ) of
					  %% Line 725
					  <'true'> when 'true' ->
					      %% Line 726
					      ( case S of
						  ( <( {'Set',_rec79,_24}
						       -| ['compiler_generated'] )> when 'true' ->
							( case R of
							    ( <( {'Set',_rec80,_26}
								 -| ['compiler_generated'] )> when 'true' ->
								  let <_10> =
								      apply 'restrict'/2
									  (_rec79, _rec80)
								  in  let <_11> =
									  call 'lists':'usort'
									      (_10)
								      in  {'Set',_11,RT}
							      -| ['compiler_generated'] )
							    ( <_27> when 'true' ->
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'error'
													 -| ['compiler_generated'] )
									(( {'badrecord','Set'}
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <_25> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','Set'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  %% Line 727
					  <'false'> when 'true' ->
					      %% Line 728
					      call 'erlang':'error'
						  ('type_mismatch')
					  ( <_12> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_12})
					    -| ['compiler_generated'] )
					end
				    -| ['compiler_generated'] )
				  ( <_23> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 730
			  <'_'> when 'true' ->
			      R
			  %% Line 731
			  <_28> when 'true' ->
			      call 'erlang':'error'
				  ('badarg')
			end
		    -| ['compiler_generated'] )
		  ( <_21> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_15,_14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_15,_14})
		  -| [{'function_name',{'image',2}}] )
	    -| ['compiler_generated'] )
	end
'inverse_image'/2 =
    %% Line 738
    fun (_0,_1) ->
	case <_0,_1> of
	  <R = {'Set',_17,_18},S = {'Set',_19,_20}> when ( 'true'
							   -| ['compiler_generated'] ) ->
	      %% Line 739
	      ( case R of
		  ( <( {'Set',_21,_rec81}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec81 of
			  %% Line 740
			  <{DT,RT}> when 'true' ->
			      %% Line 741
			      ( case S of
				  ( <( {'Set',_23,_rec82}
				       -| ['compiler_generated'] )> when 'true' ->
					case %% Line 2782
					     ( case <RT,_rec82> of
						 ( <T,_4>
						       when ( call ( 'erlang'
								  -| ['compiler_generated'] ):( '=:='
												-| ['compiler_generated'] )
							       (_4,
								T)
							   -| ['compiler_generated'] ) ->
						       ( 'true'
							 -| ['compiler_generated'] )
						   -| ['compiler_generated'] )
						 %% Line 2783
						 ( <Type1,Type2> when ( 'true'
									-| ['compiler_generated'] ) ->
						       ( apply 'match_types1'/2
							     (Type1, Type2)
							 -| ['compiler_generated'] )
						   -| ['compiler_generated'] )
					       end
					       -| ['compiler_generated'] ) of
					  %% Line 742
					  <'true'> when 'true' ->
					      %% Line 743
					      ( case S of
						  ( <( {'Set',_rec83,_25}
						       -| ['compiler_generated'] )> when 'true' ->
							( case R of
							    ( <( {'Set',_rec84,_27}
								 -| ['compiler_generated'] )> when 'true' ->
								  let <_8> =
								      apply 'converse'/2
									  (_rec84, [])
								  in  let <NL> =
									  apply 'restrict'/2
									      (_rec83, _8)
								      in  let <_12> =
									      call %% Line 744
										   'lists':%% Line 744
											   'usort'
										  (%% Line 744
										   NL)
									  in  %% Line 744
									      {'Set',_12,DT}
							      -| ['compiler_generated'] )
							    ( <_28> when 'true' ->
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'error'
													 -| ['compiler_generated'] )
									(( {'badrecord','Set'}
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <_26> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','Set'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  %% Line 745
					  <'false'> when 'true' ->
					      %% Line 746
					      call 'erlang':'error'
						  ('type_mismatch')
					  ( <_13> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_13})
					    -| ['compiler_generated'] )
					end
				    -| ['compiler_generated'] )
				  ( <_24> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 748
			  <'_'> when 'true' ->
			      R
			  %% Line 749
			  <_29> when 'true' ->
			      call 'erlang':'error'
				  ('badarg')
			end
		    -| ['compiler_generated'] )
		  ( <_22> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_16,_15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15})
		  -| [{'function_name',{'inverse_image',2}}] )
	    -| ['compiler_generated'] )
	end
'strict_relation'/1 =
    %% Line 755
    fun (_0) ->
	case _0 of
	  <R = {'Set',_8,_9}> when ( 'true'
				     -| ['compiler_generated'] ) ->
	      %% Line 756
	      ( case R of
		  ( <( {'Set',_10,_rec85}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec85 of
			  %% Line 757
			  <Type = {_12,_13}> when 'true' ->
			      %% Line 758
			      ( case R of
				  ( <( {'Set',_rec86,_14}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_5> =
					    apply 'strict'/2
						(_rec86, [])
					in  {'Set',_5,Type}
				    -| ['compiler_generated'] )
				  ( <_15> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 759
			  <'_'> when 'true' ->
			      R
			  %% Line 760
			  <_16> when 'true' ->
			      call 'erlang':'error'
				  ('badarg')
			end
		    -| ['compiler_generated'] )
		  ( <_11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7})
		  -| [{'function_name',{'strict_relation',1}}] )
	    -| ['compiler_generated'] )
	end
'weak_relation'/1 =
    %% Line 766
    fun (_0) ->
	case _0 of
	  <R = {'Set',_9,_10}> when ( 'true'
				      -| ['compiler_generated'] ) ->
	      %% Line 767
	      ( case R of
		  ( <( {'Set',_11,_rec87}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec87 of
			  %% Line 768
			  <{DT,RT}> when 'true' ->
			      %% Line 769
			      case %% Line 2758
				   ( case <DT,RT> of
				       ( <T,_4>
					     when ( call ( 'erlang'
							-| ['compiler_generated'] ):( '=:='
										      -| ['compiler_generated'] )
						     (_4,
						      T)
						 -| ['compiler_generated'] ) ->
					     T
					 -| ['compiler_generated'] )
				       %% Line 2759
				       ( <Type1,Type2> when ( 'true'
							      -| ['compiler_generated'] ) ->
					     ( catch
						   %% Line 2760
						   ( apply 'unify_types1'/2
							 (Type1, Type2)
						     -| ['compiler_generated'] )
					       -| ['compiler_generated'] )
					 -| ['compiler_generated'] )
				     end
				     -| ['compiler_generated'] ) of
				%% Line 770
				<[]> when 'true' ->
				    %% Line 771
				    call 'erlang':'error'
					('badarg')
				%% Line 772
				<Type> when 'true' ->
				    %% Line 773
				    ( case R of
					( <( {'Set',_rec88,_13}
					     -| ['compiler_generated'] )> when 'true' ->
					      let <_5> =
						  apply 'weak'/1
						      (_rec88)
					      in  {'Set',_5,{Type,Type}}
					  -| ['compiler_generated'] )
					( <_14> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','Set'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
			      end
			  %% Line 775
			  <'_'> when 'true' ->
			      R
			  %% Line 776
			  <_15> when 'true' ->
			      call 'erlang':'error'
				  ('badarg')
			end
		    -| ['compiler_generated'] )
		  ( <_12> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8})
		  -| [{'function_name',{'weak_relation',1}}] )
	    -| ['compiler_generated'] )
	end
'extension'/3 =
    %% Line 784
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <R = {'Set',_26,_27},S = {'Set',_28,_29},E> when ( 'true'
							     -| ['compiler_generated'] ) ->
	      %% Line 785
	      ( case R of
		  ( <( {'Set',_30,_rec89}
		       -| ['compiler_generated'] )> when 'true' ->
			( case S of
			    ( <( {'Set',_32,_rec90}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_3> =
				      apply 'is_sofs_set'/1
					  (E)
				  in  case <_rec89,_rec90,_3> of
					%% Line 786
					<T = ( {DT,RT}
					       -| ['compiler_generated'] ),ST,( 'true'
										-| ['compiler_generated'] )> when 'true' ->
					    let <_10> =
						case %% Line 787
						     <DT,ST> of
						  %% Line 2782
						  ( <_45,_4>
							when ( call ( 'erlang'
								   -| ['compiler_generated'] ):( '=:='
												 -| ['compiler_generated'] )
								(_4,
								 _45)
							    -| ['compiler_generated'] ) ->
							( 'true'
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  %% Line 2783
						  ( <Type1,Type2> when ( 'true'
									 -| ['compiler_generated'] ) ->
							( apply 'match_types1'/2
							      (Type1, Type2)
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					    in  let <_8> =
						    apply %% Line 787
							  'type'/1
							(%% Line 787
							 E)
						in  let <_9> =
							case %% Line 787
							     <RT,_8> of
							  %% Line 2782
							  ( <_48,_4>
								when ( call ( 'erlang'
									   -| ['compiler_generated'] ):( '=:='
													 -| ['compiler_generated'] )
									(_4,
									 _48)
								    -| ['compiler_generated'] ) ->
								( 'true'
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							  %% Line 2783
							  ( <Type1,Type2> when ( 'true'
										 -| ['compiler_generated'] ) ->
								( apply 'match_types1'/2
								      (Type1, Type2)
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
						    in  %% Line 787
							case call 'erlang':'and'
								 (_10, _9) of
							  %% Line 788
							  <'false'> when 'true' ->
							      %% Line 789
							      call 'erlang':'error'
								  ('type_mismatch')
							  %% Line 790
							  <'true'> when 'true' ->
							      %% Line 791
							      ( case R of
								  ( <( {'Set',_rec91,_34}
								       -| ['compiler_generated'] )> when 'true' ->
									%% Line 792
									( case S of
									    ( <( {'Set',_rec92,_36}
										 -| ['compiler_generated'] )> when 'true' ->
										  let <_14> =
										      apply 'to_external'/1
											  (E)
										  in  case apply 'extc'/4
											       ([], _rec92, _14, _rec91) of
											%% Line 793
											<[]> when 'true' ->
											    %% Line 794
											    R
											%% Line 795
											<L> when 'true' ->
											    let <_17> =
												call %% Line 796
												     'lists':%% Line 796
													     'reverse'
												    (%% Line 796
												     L)
											    in  let <_18> =
												    call %% Line 796
													 'lists':%% Line 796
														 'merge'
													(_rec91, _17)
												in  %% Line 796
												    {'Set',_18,T}
										      end
									      -| ['compiler_generated'] )
									    ( <_37> when 'true' ->
										  ( call ( 'erlang'
											   -| ['compiler_generated'] ):( 'error'
															 -| ['compiler_generated'] )
											(( {'badrecord','Set'}
											   -| ['compiler_generated'] ))
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									  end
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								  ( <_35> when 'true' ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','Set'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
							end
					%% Line 799
					<'_','_','true'> when 'true' ->
					    %% Line 800
					    R
					%% Line 801
					<( '_'
					   -| ['compiler_generated'] ),ST,( 'true'
									    -| ['compiler_generated'] )> when 'true' ->
					    %% Line 802
					    case apply 'type'/1
						     (E) of
					      %% Line 803
					      <['_']> when 'true' ->
						  %% Line 804
						  R
					      %% Line 805
					      <ET> when 'true' ->
						  %% Line 806
						  {'Set',[],{ST,ET}}
					    end
					%% Line 808
					<_38,_39,( 'true'
						   -| ['compiler_generated'] )> when 'true' ->
					    %% Line 809
					    call 'erlang':'error'
						('badarg')
					( <( _40
					     -| ['compiler_generated'] ),( _41
									   -| ['compiler_generated'] ),( _42
													 -| ['compiler_generated'] )> when 'true' ->
					      let <_22> = {( _40
						     -| ['compiler_generated'] ),( _41
										   -| ['compiler_generated'] ),( _42
														 -| ['compiler_generated'] )}
					      in  primop 'match_fail'
						      ({'case_clause',_22})
					  -| ['compiler_generated'] )
				      end
			      -| ['compiler_generated'] )
			    ( <_33> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','Set'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_31> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_25,_24,_23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_25,_24,_23})
		  -| [{'function_name',{'extension',3}}] )
	    -| ['compiler_generated'] )
	end
'is_a_function'/1 =
    %% Line 815
    fun (_0) ->
	case _0 of
	  <R = {'Set',_8,_9}> when ( 'true'
				     -| ['compiler_generated'] ) ->
	      %% Line 816
	      ( case R of
		  ( <( {'Set',_10,_rec93}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec93 of
			  %% Line 817
			  <{_12,_13}> when 'true' ->
			      %% Line 818
			      ( case R of
				  ( <( {'Set',_rec94,_14}
				       -| ['compiler_generated'] )> when 'true' ->
					case _rec94 of
					  %% Line 819
					  <[]> when 'true' ->
					      'true'
					  %% Line 820
					  <[{V,_16}|Es]> when 'true' ->
					      apply 'is_a_func'/2
						  (Es, V)
					  ( <_5> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_5})
					    -| ['compiler_generated'] )
					end
				    -| ['compiler_generated'] )
				  ( <_15> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 822
			  <'_'> when 'true' ->
			      'true'
			  %% Line 823
			  <_17> when 'true' ->
			      call 'erlang':'error'
				  ('badarg')
			end
		    -| ['compiler_generated'] )
		  ( <_11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7})
		  -| [{'function_name',{'is_a_function',1}}] )
	    -| ['compiler_generated'] )
	end
'restriction'/2 =
    %% Line 830
    fun (_0,_1) ->
	%% Line 831
	apply 'restriction'/3
	    (1, _0, _1)
'drestriction'/2 =
    %% Line 837
    fun (_0,_1) ->
	%% Line 838
	apply 'drestriction'/3
	    (1, _0, _1)
'composite'/2 =
    %% Line 848
    fun (_0,_1) ->
	case <_0,_1> of
	  <Fn1 = {'Set',_21,_22},Fn2 = {'Set',_23,_24}> when ( 'true'
							       -| ['compiler_generated'] ) ->
	      %% Line 849
	      ( case Fn1 of
		  ( <( {'Set',_25,_rec95}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_5> =
			    case _rec95 of
			      %% Line 850
			      <F1T = {_27,_28}> when 'true' ->
				  F1T
			      %% Line 851
			      <'_'> when 'true' ->
				  {'_','_'}
			      %% Line 852
			      <_29> when 'true' ->
				  call 'erlang':'error'
				      ('badarg')
			    end
			in  case _5 of
			      <{DTF1,RTF1}> when 'true' ->
				  %% Line 854
				  ( case Fn2 of
				      ( <( {'Set',_30,_rec96}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_10> =
						case _rec96 of
						  %% Line 855
						  <F2T = {_32,_33}> when 'true' ->
						      F2T
						  %% Line 856
						  <'_'> when 'true' ->
						      {'_','_'}
						  %% Line 857
						  <_34> when 'true' ->
						      call 'erlang':'error'
							  ('badarg')
						end
					    in  case _10 of
						  <{DTF2,RTF2}> when 'true' ->
						      %% Line 859
						      case %% Line 2782
							   ( case <RTF1,DTF2> of
							       ( <T,_4>
								     when ( call ( 'erlang'
										-| ['compiler_generated'] ):( '=:='
													      -| ['compiler_generated'] )
									     (_4,
									      T)
									 -| ['compiler_generated'] ) ->
								     ( 'true'
								       -| ['compiler_generated'] )
								 -| ['compiler_generated'] )
							       %% Line 2783
							       ( <Type1,Type2> when ( 'true'
										      -| ['compiler_generated'] ) ->
								     ( apply 'match_types1'/2
									   (Type1, Type2)
								       -| ['compiler_generated'] )
								 -| ['compiler_generated'] )
							     end
							     -| ['compiler_generated'] ) of
							%% Line 860
							<'true'>
							    when call 'erlang':'=:='
								  (DTF1,
								   '_') ->
							    Fn1
							%% Line 861
							<'true'>
							    when call 'erlang':'=:='
								  (DTF2,
								   '_') ->
							    Fn2
							%% Line 862
							<'true'> when 'true' ->
							    %% Line 863
							    ( case Fn1 of
								( <( {'Set',_rec97,_35}
								     -| ['compiler_generated'] )> when 'true' ->
								      ( case Fn2 of
									  ( <( {'Set',_rec98,_37}
									       -| ['compiler_generated'] )> when 'true' ->
										case apply 'comp'/2
											 (_rec97, _rec98) of
										  %% Line 864
										  <SL>
										      when call 'erlang':'is_list'
											    (SL) ->
										      let <_16> =
											  call %% Line 865
											       'lists':%% Line 865
												       'sort'
											      (%% Line 865
											       SL)
										      in  %% Line 865
											  {'Set',_16,{DTF1,RTF2}}
										  %% Line 866
										  <Bad> when 'true' ->
										      %% Line 867
										      call 'erlang':'error'
											  (Bad)
										end
									    -| ['compiler_generated'] )
									  ( <_38> when 'true' ->
										( call ( 'erlang'
											 -| ['compiler_generated'] ):( 'error'
														       -| ['compiler_generated'] )
										      (( {'badrecord','Set'}
											 -| ['compiler_generated'] ))
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									end
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
								( <_36> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','Set'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
							%% Line 869
							<'false'> when 'true' ->
							    call 'erlang':'error'
								('type_mismatch')
							( <_18> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_18})
							  -| ['compiler_generated'] )
						      end
						  ( <_11> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_11})
						    -| ['compiler_generated'] )
						end
					-| ['compiler_generated'] )
				      ( <_31> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','Set'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      ( <_6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_6})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_26> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_20,_19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_20,_19})
		  -| [{'function_name',{'composite',2}}] )
	    -| ['compiler_generated'] )
	end
'inverse'/1 =
    %% Line 875
    fun (_0) ->
	case _0 of
	  <Fn = {'Set',_8,_9}> when ( 'true'
				      -| ['compiler_generated'] ) ->
	      %% Line 876
	      ( case Fn of
		  ( <( {'Set',_10,_rec99}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec99 of
			  %% Line 877
			  <{DT,RT}> when 'true' ->
			      %% Line 878
			      ( case Fn of
				  ( <( {'Set',_rec100,_12}
				       -| ['compiler_generated'] )> when 'true' ->
					case apply 'inverse1'/1
						 (_rec100) of
					  %% Line 879
					  <SL>
					      when call 'erlang':'is_list'
						    (SL) ->
					      %% Line 880
					      {'Set',SL,{RT,DT}}
					  %% Line 881
					  <Bad> when 'true' ->
					      %% Line 882
					      call 'erlang':'error'
						  (Bad)
					end
				    -| ['compiler_generated'] )
				  ( <_13> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 884
			  <'_'> when 'true' ->
			      Fn
			  %% Line 885
			  <_14> when 'true' ->
			      call 'erlang':'error'
				  ('badarg')
			end
		    -| ['compiler_generated'] )
		  ( <_11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7})
		  -| [{'function_name',{'inverse',1}}] )
	    -| ['compiler_generated'] )
	end
'restriction'/3 =
    %% Line 898
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <I,R = {'Set',_58,_59},S = {'Set',_60,_61}>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 899
	      ( case R of
		  ( <( {'Set',_62,_rec101}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 900
			( case S of
			    ( <( {'Set',_64,_rec102}
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 901
				  case apply 'check_for_sort'/2
					   (_rec101, I) of
				    %% Line 902
				    <'empty'> when 'true' ->
					%% Line 903
					R
				    %% Line 904
				    <'error'> when 'true' ->
					%% Line 905
					call 'erlang':'error'
					    ('badarg')
				    %% Line 906
				    <Sort> when 'true' ->
					%% Line 907
					( case R of
					    ( <( {'Set',_rec103,_66}
						 -| ['compiler_generated'] )> when 'true' ->
						  let <_16> =
						      call %% Line 908
							   'erlang':%% Line 908
								    'element'
							  (%% Line 908
							   I, _rec101)
						  in  let <_17> =
							  case <_16,_rec102> of
							    %% Line 2782
							    ( <T,_4>
								  when ( call ( 'erlang'
									     -| ['compiler_generated'] ):( '=:='
													   -| ['compiler_generated'] )
									  (_4,
									   T)
								      -| ['compiler_generated'] ) ->
								  ( 'true'
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							    %% Line 2783
							    ( <Type1,Type2> when ( 'true'
										   -| ['compiler_generated'] ) ->
								  ( apply 'match_types1'/2
									(Type1, Type2)
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
						      in  %% Line 908
							  ( case S of
							      ( <( {'Set',_rec104,_68}
								   -| ['compiler_generated'] )> when 'true' ->
								    case <_17,_rec104> of
								      %% Line 909
								      <( 'true'
									 -| ['compiler_generated'] ),_X_SL>
									  when call 'erlang':'=:='
										(_rec103,
										 []) ->
									  %% Line 910
									  R
								      %% Line 911
								      <'true',[]> when 'true' ->
									  %% Line 912
									  {'Set',[],_rec101}
								      %% Line 913
								      <( 'true'
									 -| ['compiler_generated'] ),( [E|Es]
												       -| ['compiler_generated'] )>
									  when call 'erlang':'=:='
										(Sort,
										 'false') ->
									  let <_18> =
									      apply %% Line 914
										    'restrict_n'/5
										  (%% Line 914
										   I, _rec103, %% Line 914
											       E, %% Line 914
												  Es, %% Line 914
												      [])
									  in  let <_19> =
										  call %% Line 914
										       'lists':%% Line 914
											       'reverse'
										      (_18)
									      in  %% Line 914
										  {'Set',_19,_rec101}
								      %% Line 915
								      <( 'true'
									 -| ['compiler_generated'] ),( [E|Es]
												       -| ['compiler_generated'] )> when 'true' ->
									  let <_20> =
									      call %% Line 916
										   'lists':%% Line 916
											   'keysort'
										  (%% Line 916
										   I, _rec103)
									  in  let <_21> =
										  apply %% Line 916
											'restrict_n'/5
										      (%% Line 916
										       I, _20, %% Line 916
											       E, %% Line 916
												  Es, %% Line 916
												      [])
									      in  let <_22> =
										      call %% Line 916
											   'lists':%% Line 916
												   'sort'
											  (_21)
										  in  %% Line 916
										      {'Set',_22,_rec101}
								      %% Line 917
								      <( 'false'
									 -| ['compiler_generated'] ),_X_SL> when 'true' ->
									  %% Line 918
									  call 'erlang':'error'
									      ('type_mismatch')
								      ( <( _90
									   -| ['compiler_generated'] ),( _91
													 -| ['compiler_generated'] )> when 'true' ->
									    let <_23> = {( _90
										   -| ['compiler_generated'] ),( _91
														 -| ['compiler_generated'] )}
									    in  primop 'match_fail'
										    ({'case_clause',_23})
									-| ['compiler_generated'] )
								    end
								-| ['compiler_generated'] )
							      ( <_69> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','Set'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_67> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','Set'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_65> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','Set'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_63> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 921
	  <SetFun,S1 = {'Set',_70,_71},S2 = {'Set',_72,_73}> when ( 'true'
								    -| ['compiler_generated'] ) ->
	      %% Line 922
	      ( case S1 of
		  ( <( {'Set',_74,_rec105}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 923
			( case S2 of
			    ( <( {'Set',_76,_rec106}
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 924
				  ( case S1 of
				      ( <( {'Set',_rec107,_78}
					   -| ['compiler_generated'] )> when 'true' ->
					    %% Line 925
					    case %% Line 2347
						 ( case SetFun of
						     ( <( {( 'external'
							     -| ['compiler_generated'] ),Function}
							  -| ['compiler_generated'] )>
							   when ( call ( 'erlang'
								      -| ['compiler_generated'] ):( 'is_atom'
												    -| ['compiler_generated'] )
								   (Function)
							       -| ['compiler_generated'] ) ->
							   %% Line 2348
							   ( 'false'
							     -| ['compiler_generated'] )
						       -| ['compiler_generated'] )
						     %% Line 2349
						     ( <( {( 'external'
							     -| ['compiler_generated'] ),Fun}
							  -| ['compiler_generated'] )> when ( 'true'
											      -| ['compiler_generated'] ) ->
							   %% Line 2350
							   Fun
						       -| ['compiler_generated'] )
						     %% Line 2351
						     ( <_93> when ( 'true'
								    -| ['compiler_generated'] ) ->
							   %% Line 2352
							   ( 'false'
							     -| ['compiler_generated'] )
						       -| ['compiler_generated'] )
						   end
						   -| ['compiler_generated'] ) of
					      %% Line 926
					      <'false'>
						  when call 'erlang':'=:='
							(_rec106,
							 '_') ->
						  %% Line 927
						  S2
					      %% Line 928
					      <'false'> when 'true' ->
						  let <_34> =
						      case _rec105 of
							%% Line 2355
							( <( [Type|( []
								     -| ['compiler_generated'] )]
							     -| ['compiler_generated'] )> when ( 'true'
												 -| ['compiler_generated'] ) ->
							      Type
							  -| ['compiler_generated'] )
							%% Line 2356
							( <Type> when ( 'true'
									-| ['compiler_generated'] ) ->
							      Type
							  -| ['compiler_generated'] )
						      end
						  in  %% Line 929
						      case %% Line 2359
							   ( apply 'subst'/5
								 (_rec107, SetFun, _34, ( '_'
											  -| ['compiler_generated'] ), ( []
															 -| ['compiler_generated'] ))
							     -| ['compiler_generated'] ) of
							%% Line 930
							<{NSL,NewType}> when 'true' ->
							    %% Line 931
							    case %% Line 2782
								 ( case <NewType,_rec106> of
								     ( <T,_4>
									   when ( call ( 'erlang'
										      -| ['compiler_generated'] ):( '=:='
														    -| ['compiler_generated'] )
										   (_4,
										    T)
									       -| ['compiler_generated'] ) ->
									   ( 'true'
									     -| ['compiler_generated'] )
								       -| ['compiler_generated'] )
								     %% Line 2783
								     ( <_103,_104> when ( 'true'
											  -| ['compiler_generated'] ) ->
									   ( apply 'match_types1'/2
										 (_103, _104)
									     -| ['compiler_generated'] )
								       -| ['compiler_generated'] )
								   end
								   -| ['compiler_generated'] ) of
							      %% Line 932
							      <'true'> when 'true' ->
								  %% Line 933
								  ( case S2 of
								      ( <( {'Set',_rec108,_80}
									   -| ['compiler_generated'] )> when 'true' ->
									    let <_35> =
										apply 'converse'/2
										    (NSL, [])
									    in  let <_38> =
										    apply 'restrict'/2
											(_rec108, _35)
										in  let <NL> =
											call 'lists':'sort'
											    (_38)
										    in  %% Line 934
											{'Set',NL,_rec105}
									-| ['compiler_generated'] )
								      ( <_81> when 'true' ->
									    ( call ( 'erlang'
										     -| ['compiler_generated'] ):( 'error'
														   -| ['compiler_generated'] )
										  (( {'badrecord','Set'}
										     -| ['compiler_generated'] ))
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								    end
								    -| ['compiler_generated'] )
							      %% Line 935
							      <'false'> when 'true' ->
								  %% Line 936
								  call 'erlang':'error'
								      ('type_mismatch')
							      ( <_40> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_40})
								-| ['compiler_generated'] )
							    end
							%% Line 938
							<Bad> when 'true' ->
							    %% Line 939
							    call 'erlang':'error'
								(Bad)
						      end
					      %% Line 941
					      <_82>
						  when call 'erlang':'=:='
							(_rec105,
							 '_') ->
						  %% Line 942
						  S1
					      %% Line 943
					      <_X_XFun>
						  when call 'erlang':'is_list'
							(_rec105) ->
						  %% Line 944
						  call 'erlang':'error'
						      ('badarg')
					      %% Line 945
					      <XFun> when 'true' ->
						  let <FunT> =
						      apply %% Line 946
							    XFun
							  (_rec105)
						  in  %% Line 947
						      try
							  apply 'check_fun'/3
							      (_rec105, XFun, FunT)
						      of <_43> ->
							  %% Line 949
							  case %% Line 2782
							       ( case <FunT,_rec106> of
								   ( <T,_4>
									 when ( call ( 'erlang'
										    -| ['compiler_generated'] ):( '=:='
														  -| ['compiler_generated'] )
										 (_4,
										  T)
									     -| ['compiler_generated'] ) ->
									 ( 'true'
									   -| ['compiler_generated'] )
								     -| ['compiler_generated'] )
								   %% Line 2783
								   ( <_107,_108> when ( 'true'
											-| ['compiler_generated'] ) ->
									 ( apply 'match_types1'/2
									       (_107, _108)
									   -| ['compiler_generated'] )
								     -| ['compiler_generated'] )
								 end
								 -| ['compiler_generated'] ) of
							    %% Line 950
							    <'true'> when 'true' ->
								let <R1> =
								    apply %% Line 951
									  'inverse_substitution'/3
									(_rec107, %% Line 951
										  XFun, _43)
								in  %% Line 952
								    ( case S2 of
									( <( {'Set',_rec109,_83}
									     -| ['compiler_generated'] )> when 'true' ->
									      let <_47> =
										  apply 'restrict'/2
										      (_rec109, R1)
									      in  let <_48> =
										      apply 'sort'/2
											  (_43, _47)
										  in  {'Set',_48,_rec105}
									  -| ['compiler_generated'] )
									( <_84> when 'true' ->
									      ( call ( 'erlang'
										       -| ['compiler_generated'] ):( 'error'
														     -| ['compiler_generated'] )
										    (( {'badrecord','Set'}
										       -| ['compiler_generated'] ))
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								      end
								      -| ['compiler_generated'] )
							    %% Line 953
							    <'false'> when 'true' ->
								%% Line 954
								call 'erlang':'error'
								    ('type_mismatch')
							    ( <_49> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_49})
							      -| ['compiler_generated'] )
							  end
						      catch <_53,_52,_51> ->
							  %% Line 956
							  call 'erlang':'error'
							      ('badarg')
					    end
					-| ['compiler_generated'] )
				      ( <_79> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','Set'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_77> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','Set'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_75> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_57,_56,_55> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_57,_56,_55})
		  -| [{'function_name',{'restriction',3}}] )
	    -| ['compiler_generated'] )
	end
'drestriction'/3 =
    %% Line 965
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <I,R = {'Set',_58,_59},S = {'Set',_60,_61}>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 966
	      ( case R of
		  ( <( {'Set',_62,_rec110}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 967
			( case S of
			    ( <( {'Set',_64,_rec111}
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 968
				  case apply 'check_for_sort'/2
					   (_rec110, I) of
				    %% Line 969
				    <'empty'> when 'true' ->
					%% Line 970
					R
				    %% Line 971
				    <'error'> when 'true' ->
					%% Line 972
					call 'erlang':'error'
					    ('badarg')
				    %% Line 973
				    <Sort> when 'true' ->
					%% Line 974
					( case R of
					    ( <( {'Set',_rec112,_66}
						 -| ['compiler_generated'] )> when 'true' ->
						  let <_16> =
						      call %% Line 975
							   'erlang':%% Line 975
								    'element'
							  (%% Line 975
							   I, _rec110)
						  in  let <_17> =
							  case <_16,_rec111> of
							    %% Line 2782
							    ( <T,_4>
								  when ( call ( 'erlang'
									     -| ['compiler_generated'] ):( '=:='
													   -| ['compiler_generated'] )
									  (_4,
									   T)
								      -| ['compiler_generated'] ) ->
								  ( 'true'
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							    %% Line 2783
							    ( <Type1,Type2> when ( 'true'
										   -| ['compiler_generated'] ) ->
								  ( apply 'match_types1'/2
									(Type1, Type2)
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
						      in  %% Line 975
							  ( case S of
							      ( <( {'Set',_rec113,_68}
								   -| ['compiler_generated'] )> when 'true' ->
								    case <_17,_rec113> of
								      %% Line 976
								      <'true',[]> when 'true' ->
									  %% Line 977
									  R
								      %% Line 978
								      <( 'true'
									 -| ['compiler_generated'] ),_X_SL>
									  when call 'erlang':'=:='
										(_rec112,
										 []) ->
									  %% Line 979
									  R
								      %% Line 980
								      <( 'true'
									 -| ['compiler_generated'] ),( [E|Es]
												       -| ['compiler_generated'] )>
									  when call 'erlang':'=:='
										(Sort,
										 'false') ->
									  let <_18> =
									      apply %% Line 981
										    'diff_restrict_n'/5
										  (%% Line 981
										   I, _rec112, %% Line 981
											       E, %% Line 981
												  Es, %% Line 981
												      [])
									  in  %% Line 981
									      {'Set',_18,_rec110}
								      %% Line 982
								      <( 'true'
									 -| ['compiler_generated'] ),( [E|Es]
												       -| ['compiler_generated'] )> when 'true' ->
									  let <_19> =
									      call %% Line 983
										   'lists':%% Line 983
											   'keysort'
										  (%% Line 983
										   I, _rec112)
									  in  let <_20> =
										  apply %% Line 983
											'diff_restrict_n'/5
										      (%% Line 983
										       I, _19, %% Line 983
											       E, %% Line 983
												  Es, %% Line 983
												      [])
									      in  %% Line 983
										  {'Set',_20,_rec110}
								      %% Line 984
								      <( 'false'
									 -| ['compiler_generated'] ),_X_SL> when 'true' ->
									  %% Line 985
									  call 'erlang':'error'
									      ('type_mismatch')
								      ( <( _90
									   -| ['compiler_generated'] ),( _91
													 -| ['compiler_generated'] )> when 'true' ->
									    let <_21> = {( _90
										   -| ['compiler_generated'] ),( _91
														 -| ['compiler_generated'] )}
									    in  primop 'match_fail'
										    ({'case_clause',_21})
									-| ['compiler_generated'] )
								    end
								-| ['compiler_generated'] )
							      ( <_69> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','Set'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_67> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','Set'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_65> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','Set'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_63> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 988
	  <SetFun,S1 = {'Set',_70,_71},S2 = {'Set',_72,_73}> when ( 'true'
								    -| ['compiler_generated'] ) ->
	      %% Line 989
	      ( case S1 of
		  ( <( {'Set',_74,_rec114}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 990
			( case S2 of
			    ( <( {'Set',_76,_rec115}
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 991
				  ( case S1 of
				      ( <( {'Set',_rec116,_78}
					   -| ['compiler_generated'] )> when 'true' ->
					    %% Line 992
					    case %% Line 2347
						 ( case SetFun of
						     ( <( {( 'external'
							     -| ['compiler_generated'] ),Function}
							  -| ['compiler_generated'] )>
							   when ( call ( 'erlang'
								      -| ['compiler_generated'] ):( 'is_atom'
												    -| ['compiler_generated'] )
								   (Function)
							       -| ['compiler_generated'] ) ->
							   %% Line 2348
							   ( 'false'
							     -| ['compiler_generated'] )
						       -| ['compiler_generated'] )
						     %% Line 2349
						     ( <( {( 'external'
							     -| ['compiler_generated'] ),Fun}
							  -| ['compiler_generated'] )> when ( 'true'
											      -| ['compiler_generated'] ) ->
							   %% Line 2350
							   Fun
						       -| ['compiler_generated'] )
						     %% Line 2351
						     ( <_93> when ( 'true'
								    -| ['compiler_generated'] ) ->
							   %% Line 2352
							   ( 'false'
							     -| ['compiler_generated'] )
						       -| ['compiler_generated'] )
						   end
						   -| ['compiler_generated'] ) of
					      %% Line 993
					      <'false'>
						  when call 'erlang':'=:='
							(_rec115,
							 '_') ->
						  %% Line 994
						  S1
					      %% Line 995
					      <'false'> when 'true' ->
						  let <_32> =
						      case _rec114 of
							%% Line 2355
							( <( [Type|( []
								     -| ['compiler_generated'] )]
							     -| ['compiler_generated'] )> when ( 'true'
												 -| ['compiler_generated'] ) ->
							      Type
							  -| ['compiler_generated'] )
							%% Line 2356
							( <Type> when ( 'true'
									-| ['compiler_generated'] ) ->
							      Type
							  -| ['compiler_generated'] )
						      end
						  in  %% Line 996
						      case %% Line 2359
							   ( apply 'subst'/5
								 (_rec116, SetFun, _32, ( '_'
											  -| ['compiler_generated'] ), ( []
															 -| ['compiler_generated'] ))
							     -| ['compiler_generated'] ) of
							%% Line 997
							<{NSL,NewType}> when 'true' ->
							    %% Line 998
							    case %% Line 2782
								 ( case <NewType,_rec115> of
								     ( <T,_4>
									   when ( call ( 'erlang'
										      -| ['compiler_generated'] ):( '=:='
														    -| ['compiler_generated'] )
										   (_4,
										    T)
									       -| ['compiler_generated'] ) ->
									   ( 'true'
									     -| ['compiler_generated'] )
								       -| ['compiler_generated'] )
								     %% Line 2783
								     ( <_103,_104> when ( 'true'
											  -| ['compiler_generated'] ) ->
									   ( apply 'match_types1'/2
										 (_103, _104)
									     -| ['compiler_generated'] )
								       -| ['compiler_generated'] )
								   end
								   -| ['compiler_generated'] ) of
							      %% Line 999
							      <'true'> when 'true' ->
								  %% Line 1000
								  ( case S2 of
								      ( <( {'Set',_rec117,_80}
									   -| ['compiler_generated'] )> when 'true' ->
									    let <_36> =
										apply %% Line 1001
										      'converse'/2
										    (%% Line 1001
										     NSL, %% Line 1001
											  [])
									    in  let <_37> =
										    apply %% Line 1001
											  'diff_restrict'/2
											(_rec117, _36)
										in  let <NL> =
											call %% Line 1001
											     'lists':%% Line 1001
												     'sort'
											    (_37)
										    in  %% Line 1002
											{'Set',NL,_rec114}
									-| ['compiler_generated'] )
								      ( <_81> when 'true' ->
									    ( call ( 'erlang'
										     -| ['compiler_generated'] ):( 'error'
														   -| ['compiler_generated'] )
										  (( {'badrecord','Set'}
										     -| ['compiler_generated'] ))
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								    end
								    -| ['compiler_generated'] )
							      %% Line 1003
							      <'false'> when 'true' ->
								  %% Line 1004
								  call 'erlang':'error'
								      ('type_mismatch')
							      ( <_39> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_39})
								-| ['compiler_generated'] )
							    end
							%% Line 1006
							<Bad> when 'true' ->
							    %% Line 1007
							    call 'erlang':'error'
								(Bad)
						      end
					      %% Line 1009
					      <_82>
						  when call 'erlang':'=:='
							(_rec114,
							 '_') ->
						  %% Line 1010
						  S1
					      %% Line 1011
					      <_X_XFun>
						  when call 'erlang':'is_list'
							(_rec114) ->
						  %% Line 1012
						  call 'erlang':'error'
						      ('badarg')
					      %% Line 1013
					      <XFun> when 'true' ->
						  let <FunT> =
						      apply %% Line 1014
							    XFun
							  (_rec114)
						  in  %% Line 1015
						      try
							  apply 'check_fun'/3
							      (_rec114, XFun, FunT)
						      of <_42> ->
							  %% Line 1017
							  case %% Line 2782
							       ( case <FunT,_rec115> of
								   ( <T,_4>
									 when ( call ( 'erlang'
										    -| ['compiler_generated'] ):( '=:='
														  -| ['compiler_generated'] )
										 (_4,
										  T)
									     -| ['compiler_generated'] ) ->
									 ( 'true'
									   -| ['compiler_generated'] )
								     -| ['compiler_generated'] )
								   %% Line 2783
								   ( <_107,_108> when ( 'true'
											-| ['compiler_generated'] ) ->
									 ( apply 'match_types1'/2
									       (_107, _108)
									   -| ['compiler_generated'] )
								     -| ['compiler_generated'] )
								 end
								 -| ['compiler_generated'] ) of
							    %% Line 1018
							    <'true'> when 'true' ->
								let <R1> =
								    apply %% Line 1019
									  'inverse_substitution'/3
									(_rec116, %% Line 1019
										  XFun, _42)
								in  %% Line 1020
								    ( case S2 of
									( <( {'Set',_rec118,_83}
									     -| ['compiler_generated'] )> when 'true' ->
									      let <_47> =
										  apply %% Line 1021
											'diff_restrict'/2
										      (_rec118, %% Line 1021
												R1)
									      in  let <_48> =
										      apply %% Line 1021
											    'sort'/2
											  (_42, _47)
										  in  %% Line 1021
										      {'Set',_48,_rec114}
									  -| ['compiler_generated'] )
									( <_84> when 'true' ->
									      ( call ( 'erlang'
										       -| ['compiler_generated'] ):( 'error'
														     -| ['compiler_generated'] )
										    (( {'badrecord','Set'}
										       -| ['compiler_generated'] ))
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								      end
								      -| ['compiler_generated'] )
							    %% Line 1022
							    <'false'> when 'true' ->
								%% Line 1023
								call 'erlang':'error'
								    ('type_mismatch')
							    ( <_49> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_49})
							      -| ['compiler_generated'] )
							  end
						      catch <_53,_52,_51> ->
							  %% Line 1025
							  call 'erlang':'error'
							      ('badarg')
					    end
					-| ['compiler_generated'] )
				      ( <_79> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','Set'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_77> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','Set'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_75> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_57,_56,_55> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_57,_56,_55})
		  -| [{'function_name',{'drestriction',3}}] )
	    -| ['compiler_generated'] )
	end
'projection'/2 =
    %% Line 1033
    fun (_0,_1) ->
	case <_0,_1> of
	  <I,Set = {'Set',_18,_19}>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 1034
	      ( case Set of
		  ( <( {'Set',_20,_rec119}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1035
			case apply 'check_for_sort'/2
				 (_rec119, I) of
			  %% Line 1036
			  <'empty'> when 'true' ->
			      %% Line 1037
			      Set
			  %% Line 1038
			  <'error'> when 'true' ->
			      %% Line 1039
			      call 'erlang':'error'
				  ('badarg')
			  %% Line 1040
			  <_22>
			      when call 'erlang':'=:='
				    (I,
				     1) ->
			      %% Line 1041
			      ( case Set of
				  ( <( {'Set',_rec120,_23}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_9> =
					    apply 'projection1'/1
						(_rec120)
					in  let <_6> =
						call 'erlang':'element'
						    (I, _rec119)
					    in  {'Set',_9,_6}
				    -| ['compiler_generated'] )
				  ( <_24> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 1042
			  <_25> when 'true' ->
			      %% Line 1043
			      ( case Set of
				  ( <( {'Set',_rec121,_26}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_13> =
					    apply 'projection_n'/3
						(_rec121, I, [])
					in  let <_10> =
						call 'erlang':'element'
						    (I, _rec119)
					    in  {'Set',_13,_10}
				    -| ['compiler_generated'] )
				  ( <_27> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_21> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1045
	  <Fun,Set> when 'true' ->
	      let <_15> =
		  apply %% Line 1046
			'substitution'/2
		      (%% Line 1046
		       Fun, %% Line 1046
			    Set)
	      in  %% Line 1046
		  apply 'range'/1
		      (_15)
	end
'substitution'/2 =
    %% Line 1052
    fun (_0,_1) ->
	case <_0,_1> of
	  <I,Set = {'Set',_30,_31}>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 1053
	      ( case Set of
		  ( <( {'Set',_32,_rec122}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1054
			case apply 'check_for_sort'/2
				 (_rec122, I) of
			  %% Line 1055
			  <'empty'> when 'true' ->
			      %% Line 1056
			      Set
			  %% Line 1057
			  <'error'> when 'true' ->
			      %% Line 1058
			      call 'erlang':'error'
				  ('badarg')
			  %% Line 1059
			  <_X_Sort> when 'true' ->
			      let <NType> =
				  call %% Line 1060
				       'erlang':%% Line 1060
						'element'
				      (%% Line 1060
				       I, _rec122)
			      in  %% Line 1061
				  ( case Set of
				      ( <( {'Set',_rec123,_34}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <NSL> =
						apply 'substitute_element'/3
						    (_rec123, I, [])
					    in  %% Line 1062
						{'Set',NSL,{_rec122,NType}}
					-| ['compiler_generated'] )
				      ( <_35> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','Set'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_33> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1064
	  <SetFun,Set = {'Set',_36,_37}> when ( 'true'
						-| ['compiler_generated'] ) ->
	      %% Line 1065
	      ( case Set of
		  ( <( {'Set',_38,_rec124}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1066
			( case Set of
			    ( <( {'Set',_rec125,_40}
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 1067
				  case %% Line 2347
				       ( case SetFun of
					   ( <( {( 'external'
						   -| ['compiler_generated'] ),Function}
						-| ['compiler_generated'] )>
						 when ( call ( 'erlang'
							    -| ['compiler_generated'] ):( 'is_atom'
											  -| ['compiler_generated'] )
							 (Function)
						     -| ['compiler_generated'] ) ->
						 %% Line 2348
						 ( 'false'
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					   %% Line 2349
					   ( <( {( 'external'
						   -| ['compiler_generated'] ),Fun}
						-| ['compiler_generated'] )> when ( 'true'
										    -| ['compiler_generated'] ) ->
						 %% Line 2350
						 Fun
					     -| ['compiler_generated'] )
					   %% Line 2351
					   ( <_2> when ( 'true'
							 -| ['compiler_generated'] ) ->
						 %% Line 2352
						 ( 'false'
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					 end
					 -| ['compiler_generated'] ) of
				    %% Line 1068
				    <'false'>
					when call 'erlang':'=/='
					      (_rec125,
					       []) ->
					let <_17> =
					    case _rec124 of
					      %% Line 2355
					      ( <( [_48|( []
							  -| ['compiler_generated'] )]
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    _48
						-| ['compiler_generated'] )
					      %% Line 2356
					      ( <_49> when ( 'true'
							     -| ['compiler_generated'] ) ->
						    _49
						-| ['compiler_generated'] )
					    end
					in  %% Line 1069
					    case %% Line 2359
						 ( apply 'subst'/5
						       (_rec125, SetFun, _17, ( '_'
										-| ['compiler_generated'] ), ( []
													       -| ['compiler_generated'] ))
						   -| ['compiler_generated'] ) of
					      %% Line 1070
					      <{SL,NewType}> when 'true' ->
						  let <_18> =
						      call %% Line 1071
							   'lists':%% Line 1071
								   'reverse'
							  (%% Line 1071
							   SL)
						  in  %% Line 1071
						      {'Set',_18,{_rec124,NewType}}
					      %% Line 1072
					      <Bad> when 'true' ->
						  %% Line 1073
						  call 'erlang':'error'
						      (Bad)
					    end
				    %% Line 1075
				    <'false'> when 'true' ->
					%% Line 1076
					apply 'empty_set'/0
					    ()
				    %% Line 1077
				    <_42>
					when call 'erlang':'=:='
					      (_rec124,
					       '_') ->
					%% Line 1078
					apply 'empty_set'/0
					    ()
				    %% Line 1079
				    <_X_XFun>
					when call 'erlang':'is_list'
					      (_rec124) ->
					%% Line 1080
					call 'erlang':'error'
					    ('badarg')
				    %% Line 1081
				    <XFun> when 'true' ->
					let <FunT> =
					    apply %% Line 1082
						  XFun
						(_rec124)
					in  %% Line 1083
					    try
						apply 'check_fun'/3
						    (_rec124, XFun, FunT)
					    of <_21> ->
						let <SL> =
						    apply %% Line 1085
							  'substitute'/3
							(_rec125, %% Line 1085
								  XFun, %% Line 1085
									[])
						in  %% Line 1086
						    {'Set',SL,{_rec124,FunT}}
					    catch <_26,_25,_24> ->
						%% Line 1087
						call 'erlang':'error'
						    ('badarg')
				  end
			      -| ['compiler_generated'] )
			    ( <_41> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','Set'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_39> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_29,_28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_29,_28})
		  -| [{'function_name',{'substitution',2}}] )
	    -| ['compiler_generated'] )
	end
'partition'/1 =
    %% Line 1094
    fun (_0) ->
	( case %% Line 1095
	       apply 'canonical_relation'/1
		   (_0) of
	    ( <( R = ( {( 'Set'
			  -| ['compiler_generated'] ),_8,_9}
		       -| ['compiler_generated'] )
		 -| ['compiler_generated'] )> when ( 'true'
						     -| ['compiler_generated'] ) ->
		  ( case R of
		      ( <( {( 'Set'
			      -| ['compiler_generated'] ),_10,_rec63}
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    let <F1> =
				case _rec63 of
				  ( <( {DT,RT}
				       -| ['compiler_generated'] )> when ( 'true'
									   -| ['compiler_generated'] ) ->
					( case R of
					    ( <( {( 'Set'
						    -| ['compiler_generated'] ),_rec64,_12}
						 -| ['compiler_generated'] )> when ( 'true'
										     -| ['compiler_generated'] ) ->
						  ( let <_5> =
							apply 'rel2family'/1
							    (_rec64)
						    in  ( {( 'Set'
							     -| ['compiler_generated'] ),_5,( {DT,( [RT|( []
													  -| ['compiler_generated'] )]
												    -| ['compiler_generated'] )}
											      -| ['compiler_generated'] )}
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_13> when ( 'true'
							   -| ['compiler_generated'] ) ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','Set'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <( '_'
				       -| ['compiler_generated'] )> when ( 'true'
									   -| ['compiler_generated'] ) ->
					R
				    -| ['compiler_generated'] )
				  ( <_X_Else> when ( 'true'
						     -| ['compiler_generated'] ) ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( 'badarg'
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			    in  ( case %% Line 1096
				       apply 'converse'/1
					   (F1) of
				    ( <( _20 = ( {( 'Set'
						    -| ['compiler_generated'] ),_21,_22}
						 -| ['compiler_generated'] )
					 -| ['compiler_generated'] )> when ( 'true'
									     -| ['compiler_generated'] ) ->
					  ( case _20 of
					      ( <( {( 'Set'
						      -| ['compiler_generated'] ),_23,_24}
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    let <F2> =
							case _24 of
							  ( <( {DT,RT}
							       -| ['compiler_generated'] )> when ( 'true'
												   -| ['compiler_generated'] ) ->
								( case _20 of
								    ( <( {( 'Set'
									    -| ['compiler_generated'] ),_rec64,_12}
									 -| ['compiler_generated'] )> when ( 'true'
													     -| ['compiler_generated'] ) ->
									  ( let <_5> =
										apply 'rel2family'/1
										    (_rec64)
									    in  ( {( 'Set'
										     -| ['compiler_generated'] ),_5,( {DT,( [RT|( []
																  -| ['compiler_generated'] )]
															    -| ['compiler_generated'] )}
														      -| ['compiler_generated'] )}
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								    ( <_13> when ( 'true'
										   -| ['compiler_generated'] ) ->
									  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'error'
														 -| ['compiler_generated'] )
										(( {'badrecord','Set'}
										   -| ['compiler_generated'] ))
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								  end
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							  ( <( '_'
							       -| ['compiler_generated'] )> when ( 'true'
												   -| ['compiler_generated'] ) ->
								_20
							    -| ['compiler_generated'] )
							  ( <_X_Else> when ( 'true'
									     -| ['compiler_generated'] ) ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( 'badarg'
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
						    in  %% Line 1097
							apply 'range'/1
							    (F2)
						-| ['compiler_generated'] )
					      ( <_11> when ( 'true'
							     -| ['compiler_generated'] ) ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','Set'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <_7> when ( 'true'
						  -| ['compiler_generated'] ) ->
					  ( primop ( 'match_fail'
						     -| ['compiler_generated'] )
						(( {( 'function_clause'
						      -| ['compiler_generated'] ),_7}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_11> when ( 'true'
				     -| ['compiler_generated'] ) ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','Set'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_7> when ( 'true'
			  -| ['compiler_generated'] ) ->
		  ( primop ( 'match_fail'
			     -| ['compiler_generated'] )
			(( {( 'function_clause'
			      -| ['compiler_generated'] ),_7}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'partition'/2 =
    %% Line 1103
    fun (_0,_1) ->
	case <_0,_1> of
	  <I,Set = {'Set',_17,_18}>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 1104
	      ( case Set of
		  ( <( {'Set',_19,_rec126}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1105
			case apply 'check_for_sort'/2
				 (_rec126, I) of
			  %% Line 1106
			  <'empty'> when 'true' ->
			      %% Line 1107
			      Set
			  %% Line 1108
			  <'error'> when 'true' ->
			      %% Line 1109
			      call 'erlang':'error'
				  ('badarg')
			  %% Line 1110
			  <'false'> when 'true' ->
			      %% Line 1111
			      ( case Set of
				  ( <( {'Set',_rec127,_21}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_8> =
					    apply 'partition_n'/2
						(I, _rec127)
					in  {'Set',_8,[_rec126|[]]}
				    -| ['compiler_generated'] )
				  ( <_22> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 1112
			  <'true'> when 'true' ->
			      %% Line 1113
			      ( case Set of
				  ( <( {'Set',_rec128,_23}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_11> =
					    call 'lists':'keysort'
						(I, _rec128)
					in  let <_12> =
						apply 'partition_n'/2
						    (I, _11)
					    in  {'Set',_12,[_rec126|[]]}
				    -| ['compiler_generated'] )
				  ( <_24> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  ( <_13> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_13})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_20> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1115
	  <Fun,Set> when 'true' ->
	      let <_14> =
		  apply %% Line 1116
			'partition_family'/2
		      (%% Line 1116
		       Fun, %% Line 1116
			    Set)
	      in  %% Line 1116
		  apply 'range'/1
		      (_14)
	end
'partition'/3 =
    %% Line 1124
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <I,R = {'Set',_58,_59},S = {'Set',_60,_61}>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 1125
	      ( case R of
		  ( <( {'Set',_62,_rec129}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1126
			( case S of
			    ( <( {'Set',_64,_rec130}
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 1127
				  case apply 'check_for_sort'/2
					   (_rec129, I) of
				    %% Line 1128
				    <'empty'> when 'true' ->
					%% Line 1129
					{R,R}
				    %% Line 1130
				    <'error'> when 'true' ->
					%% Line 1131
					call 'erlang':'error'
					    ('badarg')
				    %% Line 1132
				    <Sort> when 'true' ->
					%% Line 1133
					( case R of
					    ( <( {'Set',_rec131,_66}
						 -| ['compiler_generated'] )> when 'true' ->
						  let <_16> =
						      call %% Line 1134
							   'erlang':%% Line 1134
								    'element'
							  (%% Line 1134
							   I, _rec129)
						  in  let <_17> =
							  case <_16,_rec130> of
							    %% Line 2782
							    ( <T,_4>
								  when ( call ( 'erlang'
									     -| ['compiler_generated'] ):( '=:='
													   -| ['compiler_generated'] )
									  (_4,
									   T)
								      -| ['compiler_generated'] ) ->
								  ( 'true'
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							    %% Line 2783
							    ( <Type1,Type2> when ( 'true'
										   -| ['compiler_generated'] ) ->
								  ( apply 'match_types1'/2
									(Type1, Type2)
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
						      in  %% Line 1134
							  ( case S of
							      ( <( {'Set',_rec132,_68}
								   -| ['compiler_generated'] )> when 'true' ->
								    case <_17,_rec132> of
								      %% Line 1135
								      <( 'true'
									 -| ['compiler_generated'] ),_X_SL>
									  when call 'erlang':'=:='
										(_rec131,
										 []) ->
									  %% Line 1136
									  {R,R}
								      %% Line 1137
								      <'true',[]> when 'true' ->
									  %% Line 1138
									  {{'Set',[],_rec129},R}
								      %% Line 1139
								      <( 'true'
									 -| ['compiler_generated'] ),( [E|Es]
												       -| ['compiler_generated'] )>
									  when call 'erlang':'=:='
										(Sort,
										 'false') ->
									  %% Line 1140
									  case apply 'partition3_n'/6
										   (I, _rec131, E, Es, [], []) of
									    <[L1|L2]> when 'true' ->
										%% Line 1141
										{{'Set',L1,_rec129},{'Set',L2,_rec129}}
									    ( <_18> when 'true' ->
										  primop 'match_fail'
										      ({'badmatch',_18})
									      -| ['compiler_generated'] )
									  end
								      %% Line 1142
								      <( 'true'
									 -| ['compiler_generated'] ),( [E|Es]
												       -| ['compiler_generated'] )> when 'true' ->
									  let <_19> =
									      call %% Line 1143
										   'lists':%% Line 1143
											   'keysort'
										  (%% Line 1143
										   I, _rec131)
									  in  %% Line 1143
									      case apply 'partition3_n'/6
										       (I, _19, E, Es, [], []) of
										<[L1|L2]> when 'true' ->
										    %% Line 1144
										    {{'Set',L1,_rec129},{'Set',L2,_rec129}}
										( <_20> when 'true' ->
										      primop 'match_fail'
											  ({'badmatch',_20})
										  -| ['compiler_generated'] )
									      end
								      %% Line 1145
								      <( 'false'
									 -| ['compiler_generated'] ),_X_SL> when 'true' ->
									  %% Line 1146
									  call 'erlang':'error'
									      ('type_mismatch')
								      ( <( _90
									   -| ['compiler_generated'] ),( _91
													 -| ['compiler_generated'] )> when 'true' ->
									    let <_21> = {( _90
										   -| ['compiler_generated'] ),( _91
														 -| ['compiler_generated'] )}
									    in  primop 'match_fail'
										    ({'case_clause',_21})
									-| ['compiler_generated'] )
								    end
								-| ['compiler_generated'] )
							      ( <_69> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','Set'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_67> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','Set'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_65> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','Set'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_63> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1149
	  <SetFun,S1 = {'Set',_70,_71},S2 = {'Set',_72,_73}> when ( 'true'
								    -| ['compiler_generated'] ) ->
	      %% Line 1150
	      ( case S1 of
		  ( <( {'Set',_74,_rec133}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1151
			( case S2 of
			    ( <( {'Set',_76,_rec134}
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 1152
				  ( case S1 of
				      ( <( {'Set',_rec135,_78}
					   -| ['compiler_generated'] )> when 'true' ->
					    %% Line 1153
					    case %% Line 2347
						 ( case SetFun of
						     ( <( {( 'external'
							     -| ['compiler_generated'] ),Function}
							  -| ['compiler_generated'] )>
							   when ( call ( 'erlang'
								      -| ['compiler_generated'] ):( 'is_atom'
												    -| ['compiler_generated'] )
								   (Function)
							       -| ['compiler_generated'] ) ->
							   %% Line 2348
							   ( 'false'
							     -| ['compiler_generated'] )
						       -| ['compiler_generated'] )
						     %% Line 2349
						     ( <( {( 'external'
							     -| ['compiler_generated'] ),Fun}
							  -| ['compiler_generated'] )> when ( 'true'
											      -| ['compiler_generated'] ) ->
							   %% Line 2350
							   Fun
						       -| ['compiler_generated'] )
						     %% Line 2351
						     ( <_93> when ( 'true'
								    -| ['compiler_generated'] ) ->
							   %% Line 2352
							   ( 'false'
							     -| ['compiler_generated'] )
						       -| ['compiler_generated'] )
						   end
						   -| ['compiler_generated'] ) of
					      %% Line 1154
					      <'false'>
						  when call 'erlang':'=:='
							(_rec134,
							 '_') ->
						  %% Line 1155
						  {S2,S1}
					      %% Line 1156
					      <'false'> when 'true' ->
						  let <_32> =
						      case _rec133 of
							%% Line 2355
							( <( [Type|( []
								     -| ['compiler_generated'] )]
							     -| ['compiler_generated'] )> when ( 'true'
												 -| ['compiler_generated'] ) ->
							      Type
							  -| ['compiler_generated'] )
							%% Line 2356
							( <Type> when ( 'true'
									-| ['compiler_generated'] ) ->
							      Type
							  -| ['compiler_generated'] )
						      end
						  in  %% Line 1157
						      case %% Line 2359
							   ( apply 'subst'/5
								 (_rec135, SetFun, _32, ( '_'
											  -| ['compiler_generated'] ), ( []
															 -| ['compiler_generated'] ))
							     -| ['compiler_generated'] ) of
							%% Line 1158
							<{NSL,NewType}> when 'true' ->
							    %% Line 1159
							    case %% Line 2782
								 ( case <NewType,_rec134> of
								     ( <T,_4>
									   when ( call ( 'erlang'
										      -| ['compiler_generated'] ):( '=:='
														    -| ['compiler_generated'] )
										   (_4,
										    T)
									       -| ['compiler_generated'] ) ->
									   ( 'true'
									     -| ['compiler_generated'] )
								       -| ['compiler_generated'] )
								     %% Line 2783
								     ( <_103,_104> when ( 'true'
											  -| ['compiler_generated'] ) ->
									   ( apply 'match_types1'/2
										 (_103, _104)
									     -| ['compiler_generated'] )
								       -| ['compiler_generated'] )
								   end
								   -| ['compiler_generated'] ) of
							      %% Line 1160
							      <'true'> when 'true' ->
								  let <R1> =
								      apply %% Line 1161
									    'converse'/2
									  (%% Line 1161
									   NSL, %% Line 1161
										[])
								  in  %% Line 1162
								      ( case S2 of
									  ( <( {'Set',_rec136,_80}
									       -| ['compiler_generated'] )> when 'true' ->
										case apply 'partition3'/2
											 (_rec136, R1) of
										  <[L1|L2]> when 'true' ->
										      let <_38> =
											  call %% Line 1163
											       'lists':%% Line 1163
												       'sort'
											      (%% Line 1163
											       L1)
										      in  let <_37> =
											      call %% Line 1163
												   'lists':%% Line 1163
													   'sort'
												  (%% Line 1163
												   L2)
											  in  %% Line 1163
											      {{'Set',_38,_rec133},{'Set',_37,_rec133}}
										  ( <_36> when 'true' ->
											primop 'match_fail'
											    ({'badmatch',_36})
										    -| ['compiler_generated'] )
										end
									    -| ['compiler_generated'] )
									  ( <_81> when 'true' ->
										( call ( 'erlang'
											 -| ['compiler_generated'] ):( 'error'
														       -| ['compiler_generated'] )
										      (( {'badrecord','Set'}
											 -| ['compiler_generated'] ))
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									end
									-| ['compiler_generated'] )
							      %% Line 1164
							      <'false'> when 'true' ->
								  %% Line 1165
								  call 'erlang':'error'
								      ('type_mismatch')
							      ( <_39> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_39})
								-| ['compiler_generated'] )
							    end
							%% Line 1167
							<Bad> when 'true' ->
							    %% Line 1168
							    call 'erlang':'error'
								(Bad)
						      end
					      %% Line 1170
					      <_82>
						  when call 'erlang':'=:='
							(_rec133,
							 '_') ->
						  %% Line 1171
						  {S1,S1}
					      %% Line 1172
					      <_X_XFun>
						  when call 'erlang':'is_list'
							(_rec133) ->
						  %% Line 1173
						  call 'erlang':'error'
						      ('badarg')
					      %% Line 1174
					      <XFun> when 'true' ->
						  let <FunT> =
						      apply %% Line 1175
							    XFun
							  (_rec133)
						  in  %% Line 1176
						      try
							  apply 'check_fun'/3
							      (_rec133, XFun, FunT)
						      of <_42> ->
							  %% Line 1178
							  case %% Line 2782
							       ( case <FunT,_rec134> of
								   ( <T,_4>
									 when ( call ( 'erlang'
										    -| ['compiler_generated'] ):( '=:='
														  -| ['compiler_generated'] )
										 (_4,
										  T)
									     -| ['compiler_generated'] ) ->
									 ( 'true'
									   -| ['compiler_generated'] )
								     -| ['compiler_generated'] )
								   %% Line 2783
								   ( <_107,_108> when ( 'true'
											-| ['compiler_generated'] ) ->
									 ( apply 'match_types1'/2
									       (_107, _108)
									   -| ['compiler_generated'] )
								     -| ['compiler_generated'] )
								 end
								 -| ['compiler_generated'] ) of
							    %% Line 1179
							    <'true'> when 'true' ->
								let <R1> =
								    apply %% Line 1180
									  'inverse_substitution'/3
									(_rec135, %% Line 1180
										  XFun, _42)
								in  %% Line 1181
								    ( case S2 of
									( <( {'Set',_rec137,_83}
									     -| ['compiler_generated'] )> when 'true' ->
									      case apply 'partition3'/2
										       (_rec137, R1) of
										<[L1|L2]> when 'true' ->
										    let <_48> =
											call %% Line 1182
											     'lists':%% Line 1182
												     'sort'
											    (%% Line 1182
											     L1)
										    in  let <_47> =
											    call %% Line 1182
												 'lists':%% Line 1182
													 'sort'
												(%% Line 1182
												 L2)
											in  %% Line 1182
											    {{'Set',_48,_rec133},{'Set',_47,_rec133}}
										( <_46> when 'true' ->
										      primop 'match_fail'
											  ({'badmatch',_46})
										  -| ['compiler_generated'] )
									      end
									  -| ['compiler_generated'] )
									( <_84> when 'true' ->
									      ( call ( 'erlang'
										       -| ['compiler_generated'] ):( 'error'
														     -| ['compiler_generated'] )
										    (( {'badrecord','Set'}
										       -| ['compiler_generated'] ))
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								      end
								      -| ['compiler_generated'] )
							    %% Line 1183
							    <'false'> when 'true' ->
								%% Line 1184
								call 'erlang':'error'
								    ('type_mismatch')
							    ( <_49> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_49})
							      -| ['compiler_generated'] )
							  end
						      catch <_53,_52,_51> ->
							  %% Line 1186
							  call 'erlang':'error'
							      ('badarg')
					    end
					-| ['compiler_generated'] )
				      ( <_79> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','Set'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_77> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','Set'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_75> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_57,_56,_55> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_57,_56,_55})
		  -| [{'function_name',{'partition',3}}] )
	    -| ['compiler_generated'] )
	end
'multiple_relative_product'/2 =
    %% Line 1195
    fun (_0,_1) ->
	case <_0,_1> of
	  <T,R = {'Set',_15,_16}>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_3> =
		  call %% Line 1196
		       'erlang':%% Line 1196
				'tuple_size'
		      (%% Line 1196
		       T)
	      in  %% Line 1235
		  ( case R of
		      ( <( {( 'Set'
			      -| ['compiler_generated'] ),_21,_rec142}
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    case ( case _rec142 of
				     %% Line 1236
				     ( <Rel>
					   when ( try
						   ( let <_5> =
							 call ( 'erlang'
								-| ['compiler_generated'] ):( 'is_tuple'
											      -| ['compiler_generated'] )
							     (_rec142)
						     in  ( let <_7> =
							       call ( 'erlang'
								      -| ['compiler_generated'] ):( 'tuple_size'
												    -| ['compiler_generated'] )
								   (_rec142)
							   in  ( let <_8> =
								     call ( 'erlang'
									    -| ['compiler_generated'] ):( '=:='
													  -| ['compiler_generated'] )
									 (_3, _7)
								 in  ( call ( 'erlang'
									      -| ['compiler_generated'] ):( 'and'
													    -| ['compiler_generated'] )
									   (_5, _8)
								       -| ['compiler_generated'] )
								 -| ['compiler_generated'] )
							   -| ['compiler_generated'] )
						     -| ['compiler_generated'] )
					       of <Try> ->
						   Try
					       catch <T,R> ->
						   ( 'false'
						     -| ['compiler_generated'] )
					       -| ['compiler_generated'] ) ->
					   ( 'true'
					     -| ['compiler_generated'] )
				       -| ['compiler_generated'] )
				     %% Line 1239
				     ( <( '_'
					  -| ['compiler_generated'] )> when ( 'true'
									      -| ['compiler_generated'] ) ->
					   ( 'true'
					     -| ['compiler_generated'] )
				       -| ['compiler_generated'] )
				     %% Line 1240
				     ( <_23> when ( 'true'
						    -| ['compiler_generated'] ) ->
					   ( 'false'
					     -| ['compiler_generated'] )
				       -| ['compiler_generated'] )
				   end
				   -| ['compiler_generated'] ) of
			      <'true'>
				  when ( try
					  ( let <_6> =
						case ( call ( 'erlang'
							      -| ['compiler_generated'] ):( 'is_record'
											    -| ['compiler_generated'] )
							   (R, ( 'Set'
								 -| ['compiler_generated'] ), ( 3
												-| ['compiler_generated'] ))
						       -| ['compiler_generated'] ) of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							( 'true'
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							( 'fail'
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( _4
						       -| ['compiler_generated'] )> when 'true' ->
							( _4
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					    in  let <_7> =
						    call 'erlang':'=:='
							(( _6
							   -| ['compiler_generated'] ), 'true')
						in  let <_8> =
							call 'erlang':'element'
							    (3, R)
						    in  let <_9> =
							    call 'erlang':'=:='
								(_8, '_')
							in  ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'and'
												   -| ['compiler_generated'] )
								  (_7, _9)
							      -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false'
				      -| ['compiler_generated'] ) ->
				  apply 'empty_set'/0
				      ()
			      <'true'> when 'true' ->
				  let <_10> =
				      call 'erlang':'tuple_to_list'
					  (T)
				  in  let <MProd> =
					  apply 'mul_relprod'/3
					      (_10, 1, R)
				      in  apply 'relative_product'/1
					      (MProd)
			      <'false'> when 'true' ->
				  call 'erlang':'error'
				      ('badarg')
			      ( <_12> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_12})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_22> when ( 'true'
				     -| ['compiler_generated'] ) ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','Set'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_14,_13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13})
		  -| [{'function_name',{'multiple_relative_product',2}}] )
	    -| ['compiler_generated'] )
	end
'join'/4 =
    %% Line 1212
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <R1 = {'Set',_50,_51},I1,R2 = {'Set',_52,_53},I2>
	      when let <_4> =
		    call %% Line 1213
			 'erlang':%% Line 1213
				  'is_integer'
			(%% Line 1213
			 I1)
		in  let <_5> =
			call %% Line 1213
			     'erlang':%% Line 1213
				      'is_integer'
			    (%% Line 1213
			     I2)
		    in  %% Line 1213
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_4, _5)
			  -| ['compiler_generated'] ) ->
	      %% Line 1235
	      ( case R1 of
		  ( <( {( 'Set'
			  -| ['compiler_generated'] ),_21,_rec142}
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			let <_9> =
			    case _rec142 of
			      %% Line 1237
			      ( <Rel>
				    when ( try
					    ( let <_10> =
						  call ( 'erlang'
							 -| ['compiler_generated'] ):( 'is_tuple'
										       -| ['compiler_generated'] )
						      (_rec142)
					      in  ( let <_12> =
							call ( 'erlang'
							       -| ['compiler_generated'] ):( '>='
											     -| ['compiler_generated'] )
							    (I1, ( 1
								   -| ['compiler_generated'] ))
						    in  ( let <_13> =
							      call ( 'erlang'
								     -| ['compiler_generated'] ):( 'tuple_size'
												   -| ['compiler_generated'] )
								  (_rec142)
							  in  ( let <_14> =
								    call ( 'erlang'
									   -| ['compiler_generated'] ):( '=<'
													 -| ['compiler_generated'] )
									(I1, _13)
								in  ( let <_15> =
									  call ( 'erlang'
										 -| ['compiler_generated'] ):( 'and'
													       -| ['compiler_generated'] )
									      (_12, _14)
								      in  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'and'
														 -| ['compiler_generated'] )
										(_10, _15)
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					of <Try> ->
					    Try
					catch <T,R> ->
					    ( 'false'
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] ) ->
				    %% Line 1238
				    ( 'true'
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      %% Line 1239
			      ( <( '_'
				   -| ['compiler_generated'] )> when ( 'true'
								       -| ['compiler_generated'] ) ->
				    ( 'true'
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      %% Line 1240
			      ( <_23> when ( 'true'
					     -| ['compiler_generated'] ) ->
				    ( 'false'
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			in  ( case R2 of
				( <( {( 'Set'
					-| ['compiler_generated'] ),_77,_78}
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      let <_8> =
					  case _78 of
					    %% Line 1237
					    ( <Rel>
						  when ( try
							  ( let <_10> =
								call ( 'erlang'
								       -| ['compiler_generated'] ):( 'is_tuple'
												     -| ['compiler_generated'] )
								    (_78)
							    in  ( let <_12> =
								      call ( 'erlang'
									     -| ['compiler_generated'] ):( '>='
													   -| ['compiler_generated'] )
									  (I2, ( 1
										 -| ['compiler_generated'] ))
								  in  ( let <_13> =
									    call ( 'erlang'
										   -| ['compiler_generated'] ):( 'tuple_size'
														 -| ['compiler_generated'] )
										(_78)
									in  ( let <_14> =
										  call ( 'erlang'
											 -| ['compiler_generated'] ):( '=<'
														       -| ['compiler_generated'] )
										      (I2, _13)
									      in  ( let <_15> =
											call ( 'erlang'
											       -| ['compiler_generated'] ):( 'and'
															     -| ['compiler_generated'] )
											    (_12, _14)
										    in  ( call ( 'erlang'
												 -| ['compiler_generated'] ):( 'and'
															       -| ['compiler_generated'] )
											      (_10, _15)
											  -| ['compiler_generated'] )
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
						      of <Try> ->
							  Try
						      catch <T,R> ->
							  ( 'false'
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] ) ->
						  %% Line 1238
						  ( 'true'
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1239
					    ( <( '_'
						 -| ['compiler_generated'] )> when ( 'true'
										     -| ['compiler_generated'] ) ->
						  ( 'true'
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1240
					    ( <_23> when ( 'true'
							   -| ['compiler_generated'] ) ->
						  ( 'false'
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				      in  case call 'erlang':'and'
						   (_9, _8) of
					    <'false'> when 'true' ->
						call 'erlang':'error'
						    ('badarg')
					    <'true'>
						when ( try
							( let <_12> =
							      case ( call ( 'erlang'
									    -| ['compiler_generated'] ):( 'is_record'
													  -| ['compiler_generated'] )
									 (R1, ( 'Set'
										-| ['compiler_generated'] ), ( 3
													       -| ['compiler_generated'] ))
								     -| ['compiler_generated'] ) of
								( <( 'true'
								     -| ['compiler_generated'] )> when 'true' ->
								      ( 'true'
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
								( <( 'false'
								     -| ['compiler_generated'] )> when 'true' ->
								      ( 'fail'
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
								( <( _10
								     -| ['compiler_generated'] )> when 'true' ->
								      ( _10
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							  in  let <_13> =
								  call 'erlang':'=:='
								      (( _12
									 -| ['compiler_generated'] ), 'true')
							      in  let <_14> =
								      call 'erlang':'element'
									  (3, R1)
								  in  let <_15> =
									  call 'erlang':'=:='
									      (_14, '_')
								      in  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'and'
														 -| ['compiler_generated'] )
										(_13, _15)
									    -| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						    of <Try> ->
							Try
						    catch <T,R> ->
							'false'
						    -| ['compiler_generated'] ) ->
						R1
					    <'true'>
						when ( try
							( let <_18> =
							      case ( call ( 'erlang'
									    -| ['compiler_generated'] ):( 'is_record'
													  -| ['compiler_generated'] )
									 (R2, ( 'Set'
										-| ['compiler_generated'] ), ( 3
													       -| ['compiler_generated'] ))
								     -| ['compiler_generated'] ) of
								( <( 'true'
								     -| ['compiler_generated'] )> when 'true' ->
								      ( 'true'
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
								( <( 'false'
								     -| ['compiler_generated'] )> when 'true' ->
								      ( 'fail'
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
								( <( _16
								     -| ['compiler_generated'] )> when 'true' ->
								      ( _16
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							  in  let <_19> =
								  call 'erlang':'=:='
								      (( _18
									 -| ['compiler_generated'] ), 'true')
							      in  let <_20> =
								      call 'erlang':'element'
									  (3, R2)
								  in  let <_79> =
									  call 'erlang':'=:='
									      (_20, '_')
								      in  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'and'
														 -| ['compiler_generated'] )
										(_19, _79)
									    -| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						    of <Try> ->
							Try
						    catch <T,R> ->
							'false'
						    -| ['compiler_generated'] ) ->
						R2
					    <'true'> when 'true' ->
						( case apply 'raise_element'/2
							   (R1, I1) of
						    ( <( {'Set',_rec138,_54}
							 -| ['compiler_generated'] )> when 'true' ->
							  ( case apply 'raise_element'/2
								     (R2, I2) of
							      ( <( {'Set',_rec139,_56}
								   -| ['compiler_generated'] )> when 'true' ->
								    let <T> =
									apply 'relprod1'/2
									    (_rec138, _rec139)
								    in  let <_30> =
									    call 'erlang':'=:='
										(I1, 1)
									in  let <_29> =
										call 'erlang':'=:='
										    (I2, 1)
									    in  let <_37> =
										    case call 'erlang':'and'
											     (_30, _29) of
										      <'true'> when 'true' ->
											  ( fun (_31) ->
												case _31 of
												  <{X,Y}> when 'true' ->
												      apply 'join_element'/2
													  (X, Y)
												  ( <_32> when 'true' ->
													( primop 'match_fail'
													      ({'function_clause',_32})
													  -| [{'function_name',{'-join/4-fun-0-',1}}] )
												    -| ['compiler_generated'] )
												end
											    -| [{'id',{0,0,'-join/4-fun-0-'}}] )
										      <'false'> when 'true' ->
											  ( fun (_34) ->
												case _34 of
												  <{X,Y}> when 'true' ->
												      let <_33> =
													  apply 'join_element'/3
													      (X, Y, I2)
												      in  call 'erlang':'list_to_tuple'
													      (_33)
												  ( <_35> when 'true' ->
													( primop 'match_fail'
													      ({'function_clause',_35})
													  -| [{'function_name',{'-join/4-fun-1-',1}}] )
												    -| ['compiler_generated'] )
												end
											    -| [{'id',{0,0,'-join/4-fun-1-'}}] )
										    end
										in  let <_44> =
											apply 'replace'/3
											    (T, _37, [])
										    in  ( case R1 of
											    ( <( {'Set',_58,_rec140}
												 -| ['compiler_generated'] )> when 'true' ->
												  ( case R2 of
												      ( <( {'Set',_60,_rec141}
													   -| ['compiler_generated'] )> when 'true' ->
													    let <_43> =
														apply _37
														    ({_rec140,_rec141})
													    in  {'Set',_44,_43}
													-| ['compiler_generated'] )
												      ( <_61> when 'true' ->
													    ( call ( 'erlang'
														     -| ['compiler_generated'] ):( 'error'
																		   -| ['compiler_generated'] )
														  (( {'badrecord','Set'}
														     -| ['compiler_generated'] ))
													      -| ['compiler_generated'] )
													-| ['compiler_generated'] )
												    end
												    -| ['compiler_generated'] )
											      -| ['compiler_generated'] )
											    ( <_59> when 'true' ->
												  ( call ( 'erlang'
													   -| ['compiler_generated'] ):( 'error'
																	 -| ['compiler_generated'] )
													(( {'badrecord','Set'}
													   -| ['compiler_generated'] ))
												    -| ['compiler_generated'] )
											      -| ['compiler_generated'] )
											  end
											  -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      ( <_57> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','Set'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <_55> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','Set'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    ( <_45> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_45})
					      -| ['compiler_generated'] )
					  end
				  -| ['compiler_generated'] )
				( <_22> when ( 'true'
					       -| ['compiler_generated'] ) ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','Set'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_22> when ( 'true'
				 -| ['compiler_generated'] ) ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_49,_48,_47,_46> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_49,_48,_47,_46})
		  -| [{'function_name',{'join',4}}] )
	    -| ['compiler_generated'] )
	end
'test_rel'/3 =
    %% Line 1234
    fun (_0,_1,_2) ->
	%% Line 1235
	( case _0 of
	    ( <( {'Set',_21,_rec142}
		 -| ['compiler_generated'] )> when 'true' ->
		  case _rec142 of
		    %% Line 1236
		    <Rel>
			when try
			      let <_5> =
				  call 'erlang':'is_tuple'
				      (_rec142)
			      in  let <_6> =
				      call 'erlang':'=:='
					  (_2, 'eq')
				  in  let <_7> =
					  call 'erlang':'tuple_size'
					      (_rec142)
				      in  let <_8> =
					      call 'erlang':'=:='
						  (_1, _7)
					  in  let <_9> =
						  call 'erlang':'and'
						      (_6, _8)
					      in  call 'erlang':'and'
						      (_5, _9)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			'true'
		    %% Line 1237
		    <Rel>
			when try
			      let <_10> =
				  call 'erlang':'is_tuple'
				      (_rec142)
			      in  let <_11> =
				      call 'erlang':'=:='
					  (_2, 'lte')
				  in  let <_12> =
					  call 'erlang':'>='
					      (_1, 1)
				      in  let <_13> =
					      call 'erlang':'tuple_size'
						  (_rec142)
					  in  let <_14> =
						  call 'erlang':'=<'
						      (_1, _13)
					      in  let <_15> =
						      call 'erlang':'and'
							  (_12, _14)
						  in  let <_16> =
							  call 'erlang':'and'
							      (_11, _15)
						      in  call 'erlang':'and'
							      (_10, _16)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			%% Line 1238
			'true'
		    %% Line 1239
		    <'_'> when 'true' ->
			'true'
		    %% Line 1240
		    <_23> when 'true' ->
			'false'
		  end
	      -| ['compiler_generated'] )
	    ( <_22> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','Set'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'fam2rel'/1 =
    %% Line 1250
    fun (_0) ->
	%% Line 1257
	( case _0 of
	    ( <( _16 = ( {( 'Set'
			    -| ['compiler_generated'] ),_8,_9}
			 -| ['compiler_generated'] )
		 -| ['compiler_generated'] )> when ( 'true'
						     -| ['compiler_generated'] ) ->
		  %% Line 1258
		  ( case _16 of
		      ( <( {( 'Set'
			      -| ['compiler_generated'] ),_10,_rec143}
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    ( case _rec143 of
				%% Line 1259
				( <( {DT,( [RT|( []
						 -| ['compiler_generated'] )]
					   -| ['compiler_generated'] )}
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      %% Line 1260
				      ( case _16 of
					  ( <( {( 'Set'
						  -| ['compiler_generated'] ),_rec144,_12}
					       -| ['compiler_generated'] )> when ( 'true'
										   -| ['compiler_generated'] ) ->
						( let <_5> =
						      apply 'family2rel'/2
							  (_rec144, ( []
								      -| ['compiler_generated'] ))
						  in  ( {( 'Set'
							   -| ['compiler_generated'] ),_5,( {DT,RT}
											    -| ['compiler_generated'] )}
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_13> when ( 'true'
							 -| ['compiler_generated'] ) ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','Set'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1261
				( <( '_'
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      _16
				  -| ['compiler_generated'] )
				%% Line 1262
				( <_14> when ( 'true'
					       -| ['compiler_generated'] ) ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( 'badarg'
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_11> when ( 'true'
				     -| ['compiler_generated'] ) ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','Set'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_7> when ( 'true'
			  -| ['compiler_generated'] ) ->
		  ( primop ( 'match_fail'
			     -| ['compiler_generated'] )
			(( {( 'function_clause'
			      -| ['compiler_generated'] ),_7}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'family_to_relation'/1 =
    %% Line 1257
    fun (_0) ->
	case _0 of
	  <F = {'Set',_8,_9}> when ( 'true'
				     -| ['compiler_generated'] ) ->
	      %% Line 1258
	      ( case F of
		  ( <( {'Set',_10,_rec143}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec143 of
			  %% Line 1259
			  <{DT,[RT|[]]}> when 'true' ->
			      %% Line 1260
			      ( case F of
				  ( <( {'Set',_rec144,_12}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_5> =
					    apply 'family2rel'/2
						(_rec144, [])
					in  {'Set',_5,{DT,RT}}
				    -| ['compiler_generated'] )
				  ( <_13> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 1261
			  <'_'> when 'true' ->
			      F
			  %% Line 1262
			  <_14> when 'true' ->
			      call 'erlang':'error'
				  ('badarg')
			end
		    -| ['compiler_generated'] )
		  ( <_11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7})
		  -| [{'function_name',{'family_to_relation',1}}] )
	    -| ['compiler_generated'] )
	end
'family_specification'/2 =
    %% Line 1269
    fun (_0,_1) ->
	case <_0,_1> of
	  <Fun,F = {'Set',_15,_16}> when ( 'true'
					   -| ['compiler_generated'] ) ->
	      %% Line 1270
	      ( case F of
		  ( <( {'Set',_17,_rec145}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec145 of
			  %% Line 1271
			  <FType = {_X_DT,[Type|[]]}> when 'true' ->
			      let <_9> =
				  case %% Line 2347
				       ( case Fun of
					   ( <( {( 'external'
						   -| ['compiler_generated'] ),Function}
						-| ['compiler_generated'] )>
						 when ( call ( 'erlang'
							    -| ['compiler_generated'] ):( 'is_atom'
											  -| ['compiler_generated'] )
							 (Function)
						     -| ['compiler_generated'] ) ->
						 %% Line 2348
						 ( 'false'
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					   %% Line 2349
					   ( <( {( 'external'
						   -| ['compiler_generated'] ),_25}
						-| ['compiler_generated'] )> when ( 'true'
										    -| ['compiler_generated'] ) ->
						 _25
					     -| ['compiler_generated'] )
					   %% Line 2351
					   ( <_2> when ( 'true'
							 -| ['compiler_generated'] ) ->
						 %% Line 2352
						 ( 'false'
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					 end
					 -| ['compiler_generated'] ) of
				    %% Line 1273
				    <'false'> when 'true' ->
					%% Line 1274
					( case F of
					    ( <( {'Set',_rec146,_19}
						 -| ['compiler_generated'] )> when 'true' ->
						  apply 'fam_spec'/4
						      (_rec146, Fun, Type, [])
					      -| ['compiler_generated'] )
					    ( <_20> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','Set'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    %% Line 1275
				    <XFun> when 'true' ->
					%% Line 1276
					( case F of
					    ( <( {'Set',_rec147,_21}
						 -| ['compiler_generated'] )> when 'true' ->
						  apply 'fam_specification'/3
						      (_rec147, XFun, [])
					      -| ['compiler_generated'] )
					    ( <_22> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','Set'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				  end
			      in  %% Line 1278
				  case _9 of
				    %% Line 1279
				    <SL>
					when call 'erlang':'is_list'
					      (_9) ->
					%% Line 1280
					{'Set',SL,FType}
				    %% Line 1281
				    <Bad> when 'true' ->
					%% Line 1282
					call 'erlang':'error'
					    (Bad)
				  end
			  %% Line 1284
			  <'_'> when 'true' ->
			      F
			  %% Line 1285
			  <_23> when 'true' ->
			      call 'erlang':'error'
				  ('badarg')
			end
		    -| ['compiler_generated'] )
		  ( <_18> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_14,_13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13})
		  -| [{'function_name',{'family_specification',2}}] )
	    -| ['compiler_generated'] )
	end
'union_of_family'/1 =
    %% Line 1291
    fun (_0) ->
	case _0 of
	  <F = {'Set',_8,_9}> when ( 'true'
				     -| ['compiler_generated'] ) ->
	      %% Line 1292
	      ( case F of
		  ( <( {'Set',_10,_rec148}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec148 of
			  %% Line 1293
			  <{_X_DT,[Type|[]]}> when 'true' ->
			      %% Line 1294
			      ( case F of
				  ( <( {'Set',_rec149,_12}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_5> =
					    apply 'un_of_fam'/2
						(_rec149, [])
					in  {'Set',_5,Type}
				    -| ['compiler_generated'] )
				  ( <_13> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 1295
			  <'_'> when 'true' ->
			      F
			  %% Line 1296
			  <_14> when 'true' ->
			      call 'erlang':'error'
				  ('badarg')
			end
		    -| ['compiler_generated'] )
		  ( <_11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7})
		  -| [{'function_name',{'union_of_family',1}}] )
	    -| ['compiler_generated'] )
	end
'intersection_of_family'/1 =
    %% Line 1302
    fun (_0) ->
	case _0 of
	  <F = {'Set',_8,_9}> when ( 'true'
				     -| ['compiler_generated'] ) ->
	      %% Line 1303
	      ( case F of
		  ( <( {'Set',_10,_rec150}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec150 of
			  %% Line 1304
			  <{_X_DT,[Type|[]]}> when 'true' ->
			      %% Line 1305
			      ( case F of
				  ( <( {'Set',_rec151,_12}
				       -| ['compiler_generated'] )> when 'true' ->
					case apply 'int_of_fam'/1
						 (_rec151) of
					  %% Line 1306
					  <FU>
					      when call 'erlang':'is_list'
						    (FU) ->
					      %% Line 1307
					      {'Set',FU,Type}
					  %% Line 1308
					  <Bad> when 'true' ->
					      %% Line 1309
					      call 'erlang':'error'
						  (Bad)
					end
				    -| ['compiler_generated'] )
				  ( <_13> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 1311
			  <_14> when 'true' ->
			      call 'erlang':'error'
				  ('badarg')
			end
		    -| ['compiler_generated'] )
		  ( <_11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7})
		  -| [{'function_name',{'intersection_of_family',1}}] )
	    -| ['compiler_generated'] )
	end
'family_union'/1 =
    %% Line 1317
    fun (_0) ->
	case _0 of
	  <F = {'Set',_8,_9}> when ( 'true'
				     -| ['compiler_generated'] ) ->
	      %% Line 1318
	      ( case F of
		  ( <( {'Set',_10,_rec152}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec152 of
			  %% Line 1319
			  <{DT,[_@r0 = [Type|[]]|[]]}> when 'true' ->
			      %% Line 1320
			      ( case F of
				  ( <( {'Set',_rec153,_12}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_5> =
					    apply 'fam_un'/2
						(_rec153, [])
					in  {'Set',_5,{DT,_@r0}}
				    -| ['compiler_generated'] )
				  ( <_13> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 1321
			  <'_'> when 'true' ->
			      F
			  %% Line 1322
			  <_14> when 'true' ->
			      call 'erlang':'error'
				  ('badarg')
			end
		    -| ['compiler_generated'] )
		  ( <_11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7})
		  -| [{'function_name',{'family_union',1}}] )
	    -| ['compiler_generated'] )
	end
'family_intersection'/1 =
    %% Line 1328
    fun (_0) ->
	case _0 of
	  <F = {'Set',_8,_9}> when ( 'true'
				     -| ['compiler_generated'] ) ->
	      %% Line 1329
	      ( case F of
		  ( <( {'Set',_10,_rec154}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec154 of
			  %% Line 1330
			  <{DT,[_@r0 = [Type|[]]|[]]}> when 'true' ->
			      %% Line 1331
			      ( case F of
				  ( <( {'Set',_rec155,_12}
				       -| ['compiler_generated'] )> when 'true' ->
					case apply 'fam_int'/2
						 (_rec155, []) of
					  %% Line 1332
					  <FU>
					      when call 'erlang':'is_list'
						    (FU) ->
					      %% Line 1333
					      {'Set',FU,{DT,_@r0}}
					  %% Line 1334
					  <Bad> when 'true' ->
					      %% Line 1335
					      call 'erlang':'error'
						  (Bad)
					end
				    -| ['compiler_generated'] )
				  ( <_13> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 1337
			  <'_'> when 'true' ->
			      F
			  %% Line 1338
			  <_14> when 'true' ->
			      call 'erlang':'error'
				  ('badarg')
			end
		    -| ['compiler_generated'] )
		  ( <_11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7})
		  -| [{'function_name',{'family_intersection',1}}] )
	    -| ['compiler_generated'] )
	end
'family_domain'/1 =
    %% Line 1344
    fun (_0) ->
	case _0 of
	  <F = {'Set',_8,_9}> when ( 'true'
				     -| ['compiler_generated'] ) ->
	      %% Line 1345
	      ( case F of
		  ( <( {'Set',_10,_rec156}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec156 of
			  %% Line 1346
			  <{FDT,[{DT,_12}|[]]}> when 'true' ->
			      %% Line 1347
			      ( case F of
				  ( <( {'Set',_rec157,_13}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_5> =
					    apply 'fam_dom'/2
						(_rec157, [])
					in  {'Set',_5,{FDT,[DT|[]]}}
				    -| ['compiler_generated'] )
				  ( <_14> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 1348
			  <'_'> when 'true' ->
			      F
			  %% Line 1349
			  <{_15,['_']}> when 'true' ->
			      F
			  %% Line 1350
			  <_16> when 'true' ->
			      call 'erlang':'error'
				  ('badarg')
			end
		    -| ['compiler_generated'] )
		  ( <_11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7})
		  -| [{'function_name',{'family_domain',1}}] )
	    -| ['compiler_generated'] )
	end
'family_range'/1 =
    %% Line 1356
    fun (_0) ->
	case _0 of
	  <F = {'Set',_8,_9}> when ( 'true'
				     -| ['compiler_generated'] ) ->
	      %% Line 1357
	      ( case F of
		  ( <( {'Set',_10,_rec158}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec158 of
			  %% Line 1358
			  <{DT,[{_12,RT}|[]]}> when 'true' ->
			      %% Line 1359
			      ( case F of
				  ( <( {'Set',_rec159,_13}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_5> =
					    apply 'fam_ran'/2
						(_rec159, [])
					in  {'Set',_5,{DT,[RT|[]]}}
				    -| ['compiler_generated'] )
				  ( <_14> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 1360
			  <'_'> when 'true' ->
			      F
			  %% Line 1361
			  <{_15,['_']}> when 'true' ->
			      F
			  %% Line 1362
			  <_16> when 'true' ->
			      call 'erlang':'error'
				  ('badarg')
			end
		    -| ['compiler_generated'] )
		  ( <_11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7})
		  -| [{'function_name',{'family_range',1}}] )
	    -| ['compiler_generated'] )
	end
'family_field'/1 =
    %% Line 1368
    fun (_0) ->
	let <_2> =
	    apply %% Line 1369
		  'family_domain'/1
		(_0)
	in  let <_1> =
		apply %% Line 1369
		      'family_range'/1
		    (_0)
	    in  %% Line 1369
		apply 'family_union'/2
		    (_2, _1)
'family_union'/2 =
    %% Line 1375
    fun (_0,_1) ->
	let <_2> = 'fam_union'/3
	in  %% Line 1393
	    ( case <_0,_1,_2> of
		( <( _34 = ( {( 'Set'
				-| ['compiler_generated'] ),_16,_17}
			     -| ['compiler_generated'] )
		     -| ['compiler_generated'] ),( _35 = ( {( 'Set'
							      -| ['compiler_generated'] ),_18,_19}
							   -| ['compiler_generated'] )
						   -| ['compiler_generated'] ),FF> when ( 'true'
											  -| ['compiler_generated'] ) ->
		      %% Line 1394
		      ( case _34 of
			  ( <( {( 'Set'
				  -| ['compiler_generated'] ),_20,_rec160}
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( case _35 of
				    ( <( {( 'Set'
					    -| ['compiler_generated'] ),_22,_rec161}
					 -| ['compiler_generated'] )> when ( 'true'
									     -| ['compiler_generated'] ) ->
					  ( case %% Line 2758
						 ( case <_rec160,_rec161> of
						     ( <T,_38>
							   when ( call ( 'erlang'
								      -| ['compiler_generated'] ):( '=:='
												    -| ['compiler_generated'] )
								   (_38,
								    T)
							       -| ['compiler_generated'] ) ->
							   T
						       -| ['compiler_generated'] )
						     %% Line 2759
						     ( <Type1,Type2> when ( 'true'
									    -| ['compiler_generated'] ) ->
							   ( catch
								 %% Line 2760
								 ( apply 'unify_types1'/2
								       (Type1, Type2)
								   -| ['compiler_generated'] )
							     -| ['compiler_generated'] )
						       -| ['compiler_generated'] )
						   end
						   -| ['compiler_generated'] ) of
					      %% Line 1395
					      ( <( []
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    %% Line 1396
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( 'type_mismatch'
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      %% Line 1397
					      ( <( '_'
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    _34
						-| ['compiler_generated'] )
					      %% Line 1399
					      ( <( Type = ( {_24,( [_25|( []
									  -| ['compiler_generated'] )]
								   -| ['compiler_generated'] )}
							    -| ['compiler_generated'] )
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    %% Line 1400
						    ( case _34 of
							( <( {( 'Set'
								-| ['compiler_generated'] ),_rec162,_26}
							     -| ['compiler_generated'] )> when ( 'true'
												 -| ['compiler_generated'] ) ->
							      ( case _35 of
								  ( <( {( 'Set'
									  -| ['compiler_generated'] ),_rec163,_28}
								       -| ['compiler_generated'] )> when ( 'true'
													   -| ['compiler_generated'] ) ->
									( let <_11> =
									      apply FF
										  (_rec162, _rec163, ( []
												       -| ['compiler_generated'] ))
									  in  ( {( 'Set'
										   -| ['compiler_generated'] ),_11,Type}
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								  ( <_29> when ( 'true'
										 -| ['compiler_generated'] ) ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','Set'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
							( <_27> when ( 'true'
								       -| ['compiler_generated'] ) ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','Set'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      %% Line 1401
					      ( <_30> when ( 'true'
							     -| ['compiler_generated'] ) ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( 'badarg'
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <_23> when ( 'true'
						   -| ['compiler_generated'] ) ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','Set'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <_21> when ( 'true'
					 -| ['compiler_generated'] ) ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','Set'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <_15,_14,_13> when ( 'true'
				       -| ['compiler_generated'] ) ->
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'function_clause'
				  -| ['compiler_generated'] ),_15,_14,_13}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'family_intersection'/2 =
    %% Line 1382
    fun (_0,_1) ->
	let <_2> = 'fam_intersect'/3
	in  %% Line 1393
	    ( case <_0,_1,_2> of
		( <( _34 = ( {( 'Set'
				-| ['compiler_generated'] ),_16,_17}
			     -| ['compiler_generated'] )
		     -| ['compiler_generated'] ),( _35 = ( {( 'Set'
							      -| ['compiler_generated'] ),_18,_19}
							   -| ['compiler_generated'] )
						   -| ['compiler_generated'] ),FF> when ( 'true'
											  -| ['compiler_generated'] ) ->
		      %% Line 1394
		      ( case _34 of
			  ( <( {( 'Set'
				  -| ['compiler_generated'] ),_20,_rec160}
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( case _35 of
				    ( <( {( 'Set'
					    -| ['compiler_generated'] ),_22,_rec161}
					 -| ['compiler_generated'] )> when ( 'true'
									     -| ['compiler_generated'] ) ->
					  ( case %% Line 2758
						 ( case <_rec160,_rec161> of
						     ( <T,_38>
							   when ( call ( 'erlang'
								      -| ['compiler_generated'] ):( '=:='
												    -| ['compiler_generated'] )
								   (_38,
								    T)
							       -| ['compiler_generated'] ) ->
							   T
						       -| ['compiler_generated'] )
						     %% Line 2759
						     ( <Type1,Type2> when ( 'true'
									    -| ['compiler_generated'] ) ->
							   ( catch
								 %% Line 2760
								 ( apply 'unify_types1'/2
								       (Type1, Type2)
								   -| ['compiler_generated'] )
							     -| ['compiler_generated'] )
						       -| ['compiler_generated'] )
						   end
						   -| ['compiler_generated'] ) of
					      %% Line 1395
					      ( <( []
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    %% Line 1396
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( 'type_mismatch'
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      %% Line 1397
					      ( <( '_'
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    _34
						-| ['compiler_generated'] )
					      %% Line 1399
					      ( <( Type = ( {_24,( [_25|( []
									  -| ['compiler_generated'] )]
								   -| ['compiler_generated'] )}
							    -| ['compiler_generated'] )
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    %% Line 1400
						    ( case _34 of
							( <( {( 'Set'
								-| ['compiler_generated'] ),_rec162,_26}
							     -| ['compiler_generated'] )> when ( 'true'
												 -| ['compiler_generated'] ) ->
							      ( case _35 of
								  ( <( {( 'Set'
									  -| ['compiler_generated'] ),_rec163,_28}
								       -| ['compiler_generated'] )> when ( 'true'
													   -| ['compiler_generated'] ) ->
									( let <_11> =
									      apply FF
										  (_rec162, _rec163, ( []
												       -| ['compiler_generated'] ))
									  in  ( {( 'Set'
										   -| ['compiler_generated'] ),_11,Type}
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								  ( <_29> when ( 'true'
										 -| ['compiler_generated'] ) ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','Set'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
							( <_27> when ( 'true'
								       -| ['compiler_generated'] ) ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','Set'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      %% Line 1401
					      ( <_30> when ( 'true'
							     -| ['compiler_generated'] ) ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( 'badarg'
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <_23> when ( 'true'
						   -| ['compiler_generated'] ) ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','Set'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <_21> when ( 'true'
					 -| ['compiler_generated'] ) ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','Set'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <_15,_14,_13> when ( 'true'
				       -| ['compiler_generated'] ) ->
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'function_clause'
				  -| ['compiler_generated'] ),_15,_14,_13}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'family_difference'/2 =
    %% Line 1389
    fun (_0,_1) ->
	let <_2> = 'fam_difference'/3
	in  %% Line 1393
	    ( case <_0,_1,_2> of
		( <( _34 = ( {( 'Set'
				-| ['compiler_generated'] ),_16,_17}
			     -| ['compiler_generated'] )
		     -| ['compiler_generated'] ),( _35 = ( {( 'Set'
							      -| ['compiler_generated'] ),_18,_19}
							   -| ['compiler_generated'] )
						   -| ['compiler_generated'] ),FF> when ( 'true'
											  -| ['compiler_generated'] ) ->
		      %% Line 1394
		      ( case _34 of
			  ( <( {( 'Set'
				  -| ['compiler_generated'] ),_20,_rec160}
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( case _35 of
				    ( <( {( 'Set'
					    -| ['compiler_generated'] ),_22,_rec161}
					 -| ['compiler_generated'] )> when ( 'true'
									     -| ['compiler_generated'] ) ->
					  ( case %% Line 2758
						 ( case <_rec160,_rec161> of
						     ( <T,_38>
							   when ( call ( 'erlang'
								      -| ['compiler_generated'] ):( '=:='
												    -| ['compiler_generated'] )
								   (_38,
								    T)
							       -| ['compiler_generated'] ) ->
							   T
						       -| ['compiler_generated'] )
						     %% Line 2759
						     ( <Type1,Type2> when ( 'true'
									    -| ['compiler_generated'] ) ->
							   ( catch
								 %% Line 2760
								 ( apply 'unify_types1'/2
								       (Type1, Type2)
								   -| ['compiler_generated'] )
							     -| ['compiler_generated'] )
						       -| ['compiler_generated'] )
						   end
						   -| ['compiler_generated'] ) of
					      %% Line 1395
					      ( <( []
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    %% Line 1396
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( 'type_mismatch'
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      %% Line 1397
					      ( <( '_'
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    _34
						-| ['compiler_generated'] )
					      %% Line 1399
					      ( <( Type = ( {_24,( [_25|( []
									  -| ['compiler_generated'] )]
								   -| ['compiler_generated'] )}
							    -| ['compiler_generated'] )
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    %% Line 1400
						    ( case _34 of
							( <( {( 'Set'
								-| ['compiler_generated'] ),_rec162,_26}
							     -| ['compiler_generated'] )> when ( 'true'
												 -| ['compiler_generated'] ) ->
							      ( case _35 of
								  ( <( {( 'Set'
									  -| ['compiler_generated'] ),_rec163,_28}
								       -| ['compiler_generated'] )> when ( 'true'
													   -| ['compiler_generated'] ) ->
									( let <_11> =
									      apply FF
										  (_rec162, _rec163, ( []
												       -| ['compiler_generated'] ))
									  in  ( {( 'Set'
										   -| ['compiler_generated'] ),_11,Type}
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								  ( <_29> when ( 'true'
										 -| ['compiler_generated'] ) ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','Set'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
							( <_27> when ( 'true'
								       -| ['compiler_generated'] ) ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','Set'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      %% Line 1401
					      ( <_30> when ( 'true'
							     -| ['compiler_generated'] ) ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( 'badarg'
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <_23> when ( 'true'
						   -| ['compiler_generated'] ) ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','Set'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <_21> when ( 'true'
					 -| ['compiler_generated'] ) ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','Set'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <_15,_14,_13> when ( 'true'
				       -| ['compiler_generated'] ) ->
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'function_clause'
				  -| ['compiler_generated'] ),_15,_14,_13}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'fam_binop'/3 =
    %% Line 1393
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <F1 = {'Set',_16,_17},F2 = {'Set',_18,_19},FF> when ( 'true'
								-| ['compiler_generated'] ) ->
	      %% Line 1394
	      ( case F1 of
		  ( <( {'Set',_20,_rec160}
		       -| ['compiler_generated'] )> when 'true' ->
			( case F2 of
			    ( <( {'Set',_22,_rec161}
				 -| ['compiler_generated'] )> when 'true' ->
				  case %% Line 2758
				       ( case <_rec160,_rec161> of
					   ( <T,_33>
						 when ( call ( 'erlang'
							    -| ['compiler_generated'] ):( '=:='
											  -| ['compiler_generated'] )
							 (_33,
							  T)
						     -| ['compiler_generated'] ) ->
						 T
					     -| ['compiler_generated'] )
					   %% Line 2759
					   ( <Type1,Type2> when ( 'true'
								  -| ['compiler_generated'] ) ->
						 ( catch
						       %% Line 2760
						       ( apply 'unify_types1'/2
							     (Type1, Type2)
							 -| ['compiler_generated'] )
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					 end
					 -| ['compiler_generated'] ) of
				    %% Line 1395
				    <[]> when 'true' ->
					%% Line 1396
					call 'erlang':'error'
					    ('type_mismatch')
				    %% Line 1397
				    <'_'> when 'true' ->
					%% Line 1398
					F1
				    %% Line 1399
				    <Type = {_24,[_25|[]]}> when 'true' ->
					%% Line 1400
					( case F1 of
					    ( <( {'Set',_rec162,_26}
						 -| ['compiler_generated'] )> when 'true' ->
						  ( case F2 of
						      ( <( {'Set',_rec163,_28}
							   -| ['compiler_generated'] )> when 'true' ->
							    let <_11> =
								apply FF
								    (_rec162, _rec163, [])
							    in  {'Set',_11,Type}
							-| ['compiler_generated'] )
						      ( <_29> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','Set'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_27> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','Set'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    %% Line 1401
				    <_30> when 'true' ->
					call 'erlang':'error'
					    ('badarg')
				  end
			      -| ['compiler_generated'] )
			    ( <_23> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','Set'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_21> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_15,_14,_13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_15,_14,_13})
		  -| [{'function_name',{'fam_binop',3}}] )
	    -| ['compiler_generated'] )
	end
'partition_family'/2 =
    %% Line 1408
    fun (_0,_1) ->
	case <_0,_1> of
	  <I,Set = {'Set',_41,_42}>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 1409
	      ( case Set of
		  ( <( {'Set',_43,_rec164}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1410
			case apply 'check_for_sort'/2
				 (_rec164, I) of
			  %% Line 1411
			  <'empty'> when 'true' ->
			      %% Line 1412
			      Set
			  %% Line 1413
			  <'error'> when 'true' ->
			      %% Line 1414
			      call 'erlang':'error'
				  ('badarg')
			  %% Line 1415
			  <'false'> when 'true' ->
			      %% Line 1416
			      ( case Set of
				  ( <( {'Set',_rec165,_45}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_9> =
					    apply 'fam_partition_n'/2
						(I, _rec165)
					in  let <_6> =
						call %% Line 1417
						     'erlang':%% Line 1417
							      'element'
						    (%% Line 1417
						     I, _rec164)
					    in  {'Set',_9,%% Line 1417
							  {_6,[_rec164|[]]}}
				    -| ['compiler_generated'] )
				  ( <_46> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 1418
			  <'true'> when 'true' ->
			      %% Line 1419
			      ( case Set of
				  ( <( {'Set',_rec166,_47}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_13> =
					    call 'lists':'keysort'
						(I, _rec166)
					in  let <_14> =
						apply 'fam_partition_n'/2
						    (I, _13)
					    in  let <_10> =
						    call %% Line 1420
							 'erlang':%% Line 1420
								  'element'
							(%% Line 1420
							 I, _rec164)
						in  {'Set',_14,%% Line 1420
							       {_10,[_rec164|[]]}}
				    -| ['compiler_generated'] )
				  ( <_48> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  ( <_15> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_15})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_44> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1422
	  <SetFun,Set = {'Set',_49,_50}> when ( 'true'
						-| ['compiler_generated'] ) ->
	      %% Line 1423
	      ( case Set of
		  ( <( {'Set',_51,_rec167}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1424
			( case Set of
			    ( <( {'Set',_rec168,_53}
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 1425
				  case %% Line 2347
				       ( case SetFun of
					   ( <( {( 'external'
						   -| ['compiler_generated'] ),Function}
						-| ['compiler_generated'] )>
						 when ( call ( 'erlang'
							    -| ['compiler_generated'] ):( 'is_atom'
											  -| ['compiler_generated'] )
							 (Function)
						     -| ['compiler_generated'] ) ->
						 %% Line 2348
						 ( 'false'
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					   %% Line 2349
					   ( <( {( 'external'
						   -| ['compiler_generated'] ),Fun}
						-| ['compiler_generated'] )> when ( 'true'
										    -| ['compiler_generated'] ) ->
						 %% Line 2350
						 Fun
					     -| ['compiler_generated'] )
					   %% Line 2351
					   ( <_2> when ( 'true'
							 -| ['compiler_generated'] ) ->
						 %% Line 2352
						 ( 'false'
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					 end
					 -| ['compiler_generated'] ) of
				    %% Line 1426
				    <'false'>
					when call 'erlang':'=/='
					      (_rec168,
					       []) ->
					let <_22> =
					    case _rec167 of
					      %% Line 2355
					      ( <( [_63|( []
							  -| ['compiler_generated'] )]
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    _63
						-| ['compiler_generated'] )
					      %% Line 2356
					      ( <_64> when ( 'true'
							     -| ['compiler_generated'] ) ->
						    _64
						-| ['compiler_generated'] )
					    end
					in  %% Line 1427
					    case %% Line 2359
						 ( apply 'subst'/5
						       (_rec168, SetFun, _22, ( '_'
										-| ['compiler_generated'] ), ( []
													       -| ['compiler_generated'] ))
						   -| ['compiler_generated'] ) of
					      %% Line 1428
					      <{NSL,NewType}> when 'true' ->
						  let <_23> =
						      apply %% Line 1429
							    'converse'/2
							  (%% Line 1429
							   NSL, %% Line 1429
								[])
						  in  let <P> =
							  apply %% Line 1429
								'fam_partition'/2
							      (_23, %% Line 1429
								    'true')
						      in  let <_25> =
							      call %% Line 1430
								   'lists':%% Line 1430
									   'reverse'
								  (%% Line 1430
								   P)
							  in  %% Line 1430
							      {'Set',_25,{NewType,[_rec167|[]]}}
					      %% Line 1431
					      <Bad> when 'true' ->
						  %% Line 1432
						  call 'erlang':'error'
						      (Bad)
					    end
				    %% Line 1434
				    <'false'> when 'true' ->
					%% Line 1435
					apply 'empty_set'/0
					    ()
				    %% Line 1436
				    <_55>
					when call 'erlang':'=:='
					      (_rec167,
					       '_') ->
					%% Line 1437
					apply 'empty_set'/0
					    ()
				    %% Line 1438
				    <_X_XFun>
					when call 'erlang':'is_list'
					      (_rec167) ->
					%% Line 1439
					call 'erlang':'error'
					    ('badarg')
				    %% Line 1440
				    <XFun> when 'true' ->
					let <DType> =
					    apply %% Line 1441
						  XFun
						(_rec167)
					in  %% Line 1442
					    try
						apply 'check_fun'/3
						    (_rec167, XFun, DType)
					    of <_28> ->
						%% Line 1444
						( case Set of
						    ( <( {'Set',_rec169,_56}
							 -| ['compiler_generated'] )> when 'true' ->
							  let <Ts> =
							      apply 'inverse_substitution'/3
								  (_rec169, XFun, _28)
							  in  let <P> =
								  apply %% Line 1445
									'fam_partition'/2
								      (%% Line 1445
								       Ts, _28)
							      in  let <_33> =
								      call %% Line 1446
									   'lists':%% Line 1446
										   'reverse'
									  (%% Line 1446
									   P)
								  in  %% Line 1446
								      {'Set',_33,{DType,[_rec167|[]]}}
						      -| ['compiler_generated'] )
						    ( <_57> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','Set'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    catch <_37,_36,_35> ->
						%% Line 1447
						call 'erlang':'error'
						    ('badarg')
				  end
			      -| ['compiler_generated'] )
			    ( <_54> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','Set'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_52> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_40,_39> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_40,_39})
		  -| [{'function_name',{'partition_family',2}}] )
	    -| ['compiler_generated'] )
	end
'family_projection'/2 =
    %% Line 1455
    fun (_0,_1) ->
	case <_0,_1> of
	  <SetFun,F = {'Set',_17,_18}> when ( 'true'
					      -| ['compiler_generated'] ) ->
	      %% Line 1456
	      ( case F of
		  ( <( {'Set',_19,_rec170}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec170 of
			  %% Line 1457
			  <{_21,[_22|[]]}>
			      when ( try
				      ( let <_6> =
					    case ( call ( 'erlang'
							  -| ['compiler_generated'] ):( 'is_record'
											-| ['compiler_generated'] )
						       (F, ( 'Set'
							     -| ['compiler_generated'] ), ( 3
											    -| ['compiler_generated'] ))
						   -| ['compiler_generated'] ) of
					      ( <( 'true'
						   -| ['compiler_generated'] )> when 'true' ->
						    ( 'true'
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <( 'false'
						   -| ['compiler_generated'] )> when 'true' ->
						    ( 'fail'
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <( _4
						   -| ['compiler_generated'] )> when 'true' ->
						    ( _4
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					in  let <_7> =
						call 'erlang':'=:='
						    (( _6
						       -| ['compiler_generated'] ), 'true')
					    in  let <_8> =
						    call 'erlang':'element'
							(2, F)
						in  let <_9> =
							call 'erlang':'=:='
							    ([], _8)
						    in  ( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'and'
											       -| ['compiler_generated'] )
							      (_7, _9)
							  -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
				  -| ['compiler_generated'] ) ->
			      %% Line 1458
			      apply 'empty_set'/0
				  ()
			  %% Line 1459
			  <{DT,[Type|[]]}> when 'true' ->
			      %% Line 1460
			      case %% Line 2347
				   ( case SetFun of
				       ( <( {( 'external'
					       -| ['compiler_generated'] ),Function}
					    -| ['compiler_generated'] )>
					     when ( call ( 'erlang'
							-| ['compiler_generated'] ):( 'is_atom'
										      -| ['compiler_generated'] )
						     (Function)
						 -| ['compiler_generated'] ) ->
					     %% Line 2348
					     ( 'false'
					       -| ['compiler_generated'] )
					 -| ['compiler_generated'] )
				       %% Line 2349
				       ( <( {( 'external'
					       -| ['compiler_generated'] ),Fun}
					    -| ['compiler_generated'] )> when ( 'true'
										-| ['compiler_generated'] ) ->
					     %% Line 2350
					     Fun
					 -| ['compiler_generated'] )
				       %% Line 2351
				       ( <_2> when ( 'true'
						     -| ['compiler_generated'] ) ->
					     %% Line 2352
					     ( 'false'
					       -| ['compiler_generated'] )
					 -| ['compiler_generated'] )
				     end
				     -| ['compiler_generated'] ) of
				%% Line 1461
				<'false'> when 'true' ->
				    %% Line 1462
				    ( case F of
					( <( {'Set',_rec171,_23}
					     -| ['compiler_generated'] )> when 'true' ->
					      case apply 'fam_proj'/5
						       (_rec171, SetFun, Type, '_', []) of
						%% Line 1463
						<{SL,NewType}> when 'true' ->
						    %% Line 1464
						    {'Set',SL,{DT,NewType}}
						%% Line 1465
						<Bad> when 'true' ->
						    %% Line 1466
						    call 'erlang':'error'
							(Bad)
					      end
					  -| ['compiler_generated'] )
					( <_24> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','Set'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				%% Line 1468
				<_25> when 'true' ->
				    %% Line 1469
				    call 'erlang':'error'
					('badarg')
			      end
			  %% Line 1471
			  <'_'> when 'true' ->
			      F
			  %% Line 1472
			  <_26> when 'true' ->
			      call 'erlang':'error'
				  ('badarg')
			end
		    -| ['compiler_generated'] )
		  ( <_20> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_16,_15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15})
		  -| [{'function_name',{'family_projection',2}}] )
	    -| ['compiler_generated'] )
	end
'family_to_digraph'/1 =
    %% Line 1482
    fun (_0) ->
	case _0 of
	  <F = {'Set',_6,_7}> when ( 'true'
				     -| ['compiler_generated'] ) ->
	      %% Line 1483
	      ( case F of
		  ( <( {'Set',_8,_rec172}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec172 of
			  %% Line 1484
			  <{_10,[_11|[]]}> when 'true' ->
			      let <_3> =
				  call 'digraph':'new'
				      ()
			      in  apply 'fam2digraph'/2
				      (F, _3)
			  %% Line 1485
			  <'_'> when 'true' ->
			      call 'digraph':'new'
				  ()
			  %% Line 1486
			  <_X_Else> when 'true' ->
			      call 'erlang':'error'
				  ('badarg')
			end
		    -| ['compiler_generated'] )
		  ( <_9> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5})
		  -| [{'function_name',{'family_to_digraph',1}}] )
	    -| ['compiler_generated'] )
	end
'family_to_digraph'/2 =
    %% Line 1493
    fun (_0,_1) ->
	case <_0,_1> of
	  <F = {'Set',_15,_16},Type> when ( 'true'
					    -| ['compiler_generated'] ) ->
	      %% Line 1494
	      ( case F of
		  ( <( {'Set',_17,_rec173}
		       -| ['compiler_generated'] )> when 'true' ->
			do  case _rec173 of
			      %% Line 1495
			      <{_19,[_20|[]]}> when 'true' ->
				  'ok'
			      %% Line 1496
			      <'_'> when 'true' ->
				  'ok'
			      %% Line 1497
			      <_X_Else> when 'true' ->
				  call 'erlang':'error'
				      ('badarg')
			    end
			    %% Line 1499
			    try
				call 'digraph':'new'
				    (Type)
			    of <_5> ->
				let <_6> =
				    catch
					%% Line 1500
					apply 'fam2digraph'/2
					    (F, _5)
				in  %% Line 1500
				    case _6 of
				      %% Line 1501
				      <{'error',Reason}> when 'true' ->
					  %% Line 1502
					  case call 'digraph':'delete'
						   (_5) of
					    <'true'> when 'true' ->
						%% Line 1503
						call 'erlang':'error'
						    (Reason)
					    ( <_7> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_7})
					      -| ['compiler_generated'] )
					  end
				      %% Line 1504
				      <_21> when 'true' ->
					  _5
				    end
			    catch <_12,_11,_10> ->
				%% Line 1508
				case <_12,_11,_10> of
				  <( 'error'
				     -| ['compiler_generated'] ),( 'badarg'
								   -| ['compiler_generated'] ),_22> when 'true' ->
				      call 'erlang':'error'
					  ('badarg')
				  ( <_24,_25,_26> when 'true' ->
					primop 'raise'
					    (_26, _25)
				    -| ['compiler_generated'] )
				end
		    -| ['compiler_generated'] )
		  ( <_18> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_14,_13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13})
		  -| [{'function_name',{'family_to_digraph',2}}] )
	    -| ['compiler_generated'] )
	end
'digraph_to_family'/1 =
    %% Line 1514
    fun (_0) ->
	%% Line 1515
	try
	    apply 'digraph_family'/1
		(_0)
	of <_1> ->
	    %% Line 1516
	    {'Set',_1,{'atom',['atom']}}
	catch <_5,_4,_3> ->
	    %% Line 1517
	    call 'erlang':'error'
		('badarg')
'digraph_to_family'/2 =
    %% Line 1524
    fun (_0,_1) ->
	let <_2> =
	    apply %% Line 1525
		  'is_type'/1
		(_1)
	in  %% Line 1525
	    case <_2,_1> of
	      %% Line 1526
	      <( 'true'
		 -| ['compiler_generated'] ),( [Type = ( {_11,( [_12|( []
								       -| ['compiler_generated'] )]
								-| ['compiler_generated'] )}
							 -| ['compiler_generated'] )|( []
										       -| ['compiler_generated'] )]
					       -| ['compiler_generated'] )> when 'true' ->
		  %% Line 1527
		  try
		      apply 'digraph_family'/1
			  (_0)
		  of <_3> ->
		      %% Line 1528
		      {'Set',_3,Type}
		  catch <_7,_6,_5> ->
		      %% Line 1529
		      call 'erlang':'error'
			  ('badarg')
	      %% Line 1531
	      <( _17
		 -| ['compiler_generated'] ),( _18
					       -| ['compiler_generated'] )> when 'true' ->
		  %% Line 1532
		  call 'erlang':'error'
		      ('badarg')
	    end
'is_types'/2 =
    %% Line 1547
    fun (_0,_1) ->
	case <_0,_1> of
	  <0,_X_T> when 'true' ->
	      %% Line 1548
	      'true'
	  %% Line 1549
	  <I,T> when 'true' ->
	      let <_2> =
		  call %% Line 1550
		       'erlang':%% Line 1550
				'element'
		      (%% Line 1550
		       I, %% Line 1550
			  T)
	      in  %% Line 1550
		  case apply 'is_type'/1
			   (_2) of
		    %% Line 1551
		    <'true'> when 'true' ->
			let <_3> =
			    call 'erlang':'-'
				(I, 1)
			in  apply 'is_types'/2
				(_3, T)
		    %% Line 1552
		    <'false'> when 'true' ->
			'false'
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_4})
		      -| ['compiler_generated'] )
		  end
	end
'is_element_type'/1 =
    %% Line 1555
    fun (_0) ->
	case _0 of
	  <'_'> when 'true' ->
	      %% Line 1556
	      'true'
	  %% Line 1557
	  <T> when 'true' ->
	      %% Line 1558
	      apply 'is_type'/1
		  (T)
	end
'set_of_sets'/3 =
    %% Line 1560
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[S = {'Set',_17,_18}|Ss],L,T0> when ( 'true'
						 -| ['compiler_generated'] ) ->
	      %% Line 1561
	      ( case S of
		  ( <( {'Set',_19,_rec174}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_30> =
			    [_rec174|( []
				       -| ['compiler_generated'] )]
			in  case %% Line 2758
				 ( case <_30,T0> of
				     ( <T,_32>
					   when ( call ( 'erlang'
						      -| ['compiler_generated'] ):( '=:='
										    -| ['compiler_generated'] )
						   (_32,
						    T)
					       -| ['compiler_generated'] ) ->
					   T
				       -| ['compiler_generated'] )
				     %% Line 2759
				     ( <Type1,Type2> when ( 'true'
							    -| ['compiler_generated'] ) ->
					   ( catch
						 %% Line 2760
						 ( apply 'unify_types1'/2
						       (Type1, Type2)
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
				       -| ['compiler_generated'] )
				   end
				   -| ['compiler_generated'] ) of
			      %% Line 1562
			      <[]> when 'true' ->
				  {'error','type_mismatch'}
			      %% Line 1563
			      <Type> when 'true' ->
				  ( case S of
				      ( <( {'Set',_rec175,_21}
					   -| ['compiler_generated'] )> when 'true' ->
					    apply 'set_of_sets'/3
						(Ss, [_rec175|L], Type)
					-| ['compiler_generated'] )
				      ( <_22> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','Set'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_20> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1565
	  <[S = {'OrdSet',_23,_24}|Ss],L,T0> when ( 'true'
						    -| ['compiler_generated'] ) ->
	      %% Line 1566
	      ( case S of
		  ( <( {'OrdSet',_25,_rec176}
		       -| ['compiler_generated'] )> when 'true' ->
			case %% Line 2758
			     ( case <_rec176,T0> of
				 ( <T,_4>
				       when ( call ( 'erlang'
						  -| ['compiler_generated'] ):( '=:='
										-| ['compiler_generated'] )
					       (_4,
						T)
					   -| ['compiler_generated'] ) ->
				       T
				   -| ['compiler_generated'] )
				 %% Line 2759
				 ( <Type1,Type2> when ( 'true'
							-| ['compiler_generated'] ) ->
				       ( catch
					     %% Line 2760
					     ( apply 'unify_types1'/2
						   (Type1, Type2)
					       -| ['compiler_generated'] )
					 -| ['compiler_generated'] )
				   -| ['compiler_generated'] )
			       end
			       -| ['compiler_generated'] ) of
			  %% Line 1567
			  <[]> when 'true' ->
			      {'error','type_mismatch'}
			  %% Line 1568
			  <Type> when 'true' ->
			      ( case S of
				  ( <( {'OrdSet',_rec177,_27}
				       -| ['compiler_generated'] )> when 'true' ->
					apply 'set_of_sets'/3
					    (Ss, [_rec177|L], Type)
				    -| ['compiler_generated'] )
				  ( <_28> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','OrdSet'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_26> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','OrdSet'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1570
	  <[],L,T> when 'true' ->
	      let <_13> =
		  call %% Line 1571
		       'lists':%% Line 1571
			       'usort'
		      (%% Line 1571
		       L)
	      in  %% Line 1571
		  {'Set',_13,T}
	  %% Line 1572
	  <_29,_X_L,_X_T> when 'true' ->
	      %% Line 1573
	      {'error','badarg'}
	end
'ordset_of_sets'/3 =
    %% Line 1575
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[S = {'Set',_18,_19}|Ss],L,T> when ( 'true'
						-| ['compiler_generated'] ) ->
	      %% Line 1576
	      ( case S of
		  ( <( {'Set',_rec178,_20}
		       -| ['compiler_generated'] )> when 'true' ->
			( case S of
			    ( <( {'Set',_22,_rec179}
				 -| ['compiler_generated'] )> when 'true' ->
				  apply 'ordset_of_sets'/3
				      (Ss, [_rec178|L], [[_rec179|[]]|T])
			      -| ['compiler_generated'] )
			    ( <_23> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','Set'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_21> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1577
	  <[S = {'OrdSet',_24,_25}|Ss],L,T> when ( 'true'
						   -| ['compiler_generated'] ) ->
	      %% Line 1578
	      ( case S of
		  ( <( {'OrdSet',_rec180,_26}
		       -| ['compiler_generated'] )> when 'true' ->
			( case S of
			    ( <( {'OrdSet',_28,_rec181}
				 -| ['compiler_generated'] )> when 'true' ->
				  apply 'ordset_of_sets'/3
				      (Ss, [_rec180|L], [_rec181|T])
			      -| ['compiler_generated'] )
			    ( <_29> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','OrdSet'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_27> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','OrdSet'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1579
	  <[],L,T> when 'true' ->
	      let <_13> =
		  call %% Line 1580
		       'lists':%% Line 1580
			       'reverse'
		      (%% Line 1580
		       L)
	      in  let <_14> =
		      call %% Line 1580
			   'erlang':%% Line 1580
				    'list_to_tuple'
			  (_13)
		  in  let <_11> =
			  call %% Line 1580
			       'lists':%% Line 1580
				       'reverse'
			      (%% Line 1580
			       T)
		      in  let <_12> =
			      call %% Line 1580
				   'erlang':%% Line 1580
					    'list_to_tuple'
				  (_11)
			  in  %% Line 1580
			      {'OrdSet',_14,_12}
	  %% Line 1581
	  <_30,_X_L,_X_T> when 'true' ->
	      %% Line 1582
	      'error'
	end
'rel'/2 =
    %% Line 1585
    fun (_0,_1) ->
	case <_0,_1> of
	  <Ts,[Type|[]]> when 'true' ->
	      let <_3> =
		  apply %% Line 1586
			'is_type'/1
		      (%% Line 1586
		       Type)
	      in  let <_2> =
		      apply %% Line 1586
			    'atoms_only'/2
			  (%% Line 1586
			   Type, %% Line 1586
				 1)
		  in  %% Line 1586
		      case call 'erlang':'and'
			       (_3, _2) of
			%% Line 1587
			<'true'> when 'true' ->
			    let <_4> =
				call %% Line 1588
				     'erlang':%% Line 1588
					      'tuple_size'
				    (%% Line 1588
				     Type)
			    in  %% Line 1588
				apply 'rel'/3
				    (Ts, _4, Type)
			%% Line 1589
			<'false'> when 'true' ->
			    %% Line 1590
			    apply 'rel_type'/3
				(Ts, [], Type)
		      end
	  %% Line 1592
	  <Ts,Sz> when 'true' ->
	      let <_6> =
		  call %% Line 1593
		       'erlang':%% Line 1593
				'make_tuple'
		      (%% Line 1593
		       Sz, %% Line 1593
			   'atom')
	      in  %% Line 1593
		  apply 'rel'/3
		      (Ts, Sz, _6)
	end
'atoms_only'/2 =
    %% Line 1595
    fun (_0,_1) ->
	case <_0,_1> of
	  <Type,I>
	      when try
		    let <_2> =
			call 'erlang':'element'
			    (I, Type)
		    in  call 'erlang':'is_atom'
			    (_2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_3> =
		  call %% Line 1596
		       'erlang':%% Line 1596
				'+'
		      (%% Line 1596
		       I, %% Line 1596
			  1)
	      in  %% Line 1596
		  apply 'atoms_only'/2
		      (Type, _3)
	  %% Line 1597
	  <Type,I>
	      when try
		    let <_4> =
			call 'erlang':'tuple_size'
			    (Type)
		    in  let <_5> =
			    call 'erlang':'>'
				(I, _4)
			in  let <_6> =
				call 'erlang':'is_tuple'
				    (Type)
			    in  call 'erlang':'and'
				    (_5, _6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1598
	      'true'
	  %% Line 1599
	  <_X_Type,_X_I> when 'true' ->
	      %% Line 1600
	      'false'
	end
'rel'/3 =
    %% Line 1602
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Ts,Sz,Type>
	      when call 'erlang':'>='
		    (Sz,
		     1) ->
	      let <SL> =
		  call %% Line 1603
		       'lists':%% Line 1603
			       'usort'
		      (%% Line 1603
		       Ts)
	      in  %% Line 1604
		  apply 'rel'/4
		      (SL, SL, Sz, Type)
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'rel',3}}] )
	    -| ['compiler_generated'] )
	end
'rel'/4 =
    %% Line 1606
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[T|Ts],L,Sz,Type>
	      when try
		    let <_4> =
			call 'erlang':'tuple_size'
			    (T)
		    in  call 'erlang':'=:='
			    (_4, Sz)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1607
	      apply 'rel'/4
		  (Ts, L, Sz, Type)
	  %% Line 1608
	  <[],L,_X_Sz,Type> when 'true' ->
	      %% Line 1609
	      {'Set',L,Type}
	  ( <_8,_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7,_6,_5})
		  -| [{'function_name',{'rel',4}}] )
	    -| ['compiler_generated'] )
	end
'rel_type'/3 =
    %% Line 1611
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[E|Ts],L,Type> when 'true' ->
	      %% Line 1612
	      case apply 'make_element'/3
		       (E, Type, Type) of
		<{NType,NE}> when 'true' ->
		    %% Line 1613
		    apply 'rel_type'/3
			(Ts, [NE|L], NType)
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1614
	  <[],[],'_'> when 'true' ->
	      %% Line 1615
	      apply 'empty_set'/0
		  ()
	  %% Line 1616
	  <[],SL,Type>
	      when call 'erlang':'is_tuple'
		    (Type) ->
	      let <_4> =
		  call %% Line 1617
		       'lists':%% Line 1617
			       'usort'
		      (%% Line 1617
		       SL)
	      in  %% Line 1617
		  {'Set',_4,Type}
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'rel_type',3}}] )
	    -| ['compiler_generated'] )
	end
'a_func'/2 =
    %% Line 1620
    fun (_0,_1) ->
	let <_2> =
	    apply %% Line 1621
		  'is_type'/1
		(_1)
	in  %% Line 1621
	    case <_1,_2> of
	      %% Line 1622
	      <( [Type = ( {DT,RT}
			   -| ['compiler_generated'] )|( []
							 -| ['compiler_generated'] )]
		 -| ['compiler_generated'] ),( 'true'
					       -| ['compiler_generated'] )>
		  when let <_3> =
			call 'erlang':'is_atom'
			    (DT)
		    in  let <_4> =
			    call %% Line 1623
				 'erlang':%% Line 1623
					  'is_atom'
				(%% Line 1623
				 RT)
			in  call 'erlang':'and'
				(_3, _4) ->
		  %% Line 1624
		  apply 'func'/2
		      (_0, Type)
	      %% Line 1625
	      <( [Type|( []
			 -| ['compiler_generated'] )]
		 -| ['compiler_generated'] ),( 'true'
					       -| ['compiler_generated'] )> when 'true' ->
		  let <_7> =
		      fun (_5) ->
			  %% Line 1626
			  case _5 of
			    <{_11,_12}> when 'true' ->
				'true'
			    ( <_6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_6})
				    -| [{'function_name',{'-a_func/2-fun-0-',1}}] )
			      -| ['compiler_generated'] )
			  end
		  in  %% Line 1626
		      apply 'func_type'/4
			  (_0, [], Type, _7)
	      ( <( _13
		   -| ['compiler_generated'] ),( _14
						 -| ['compiler_generated'] )> when 'true' ->
		    let <_8> = {( _13
			   -| ['compiler_generated'] ),( _14
							 -| ['compiler_generated'] )}
		    in  primop 'match_fail'
			    ({'case_clause',_8})
		-| ['compiler_generated'] )
	    end
'func'/2 =
    %% Line 1629
    fun (_0,_1) ->
	let <L> =
	    call %% Line 1630
		 'lists':%% Line 1630
			 'usort'
		(_0)
	in  %% Line 1631
	    apply 'func'/4
		(L, L, L, _1)
'func'/4 =
    %% Line 1633
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[{X,_8}|Ts],X0,L,Type>
	      when call 'erlang':'/='
		    (X,
		     X0) ->
	      %% Line 1634
	      apply 'func'/4
		  (Ts, X, L, Type)
	  %% Line 1635
	  <[{X,_9}|_X_Ts],X0,_X_L,_X_Type>
	      when call 'erlang':'=='
		    (X,
		     X0) ->
	      %% Line 1636
	      'bad_function'
	  %% Line 1637
	  <[],_X_X0,L,Type> when 'true' ->
	      %% Line 1638
	      {'Set',L,Type}
	  ( <_7,_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5,_4})
		  -| [{'function_name',{'func',4}}] )
	    -| ['compiler_generated'] )
	end
'fam'/2 =
    %% Line 1641
    fun (_0,_1) ->
	let <_2> =
	    apply %% Line 1642
		  'is_type'/1
		(_1)
	in  %% Line 1642
	    case <_1,_2> of
	      %% Line 1643
	      <( [Type = ( {DT,( [RT|( []
				       -| ['compiler_generated'] )]
				 -| ['compiler_generated'] )}
			   -| ['compiler_generated'] )|( []
							 -| ['compiler_generated'] )]
		 -| ['compiler_generated'] ),( 'true'
					       -| ['compiler_generated'] )>
		  when let <_3> =
			call 'erlang':'is_atom'
			    (DT)
		    in  let <_4> =
			    call %% Line 1644
				 'erlang':%% Line 1644
					  'is_atom'
				(%% Line 1644
				 RT)
			in  call 'erlang':'and'
				(_3, _4) ->
		  %% Line 1645
		  apply 'fam2'/2
		      (_0, Type)
	      %% Line 1646
	      <( [Type|( []
			 -| ['compiler_generated'] )]
		 -| ['compiler_generated'] ),( 'true'
					       -| ['compiler_generated'] )> when 'true' ->
		  let <_7> =
		      fun (_5) ->
			  %% Line 1647
			  case _5 of
			    <{_11,[_12|[]]}> when 'true' ->
				'true'
			    ( <_6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_6})
				    -| [{'function_name',{'-fam/2-fun-0-',1}}] )
			      -| ['compiler_generated'] )
			  end
		  in  %% Line 1647
		      apply 'func_type'/4
			  (_0, [], Type, _7)
	      ( <( _13
		   -| ['compiler_generated'] ),( _14
						 -| ['compiler_generated'] )> when 'true' ->
		    let <_8> = {( _13
			   -| ['compiler_generated'] ),( _14
							 -| ['compiler_generated'] )}
		    in  primop 'match_fail'
			    ({'case_clause',_8})
		-| ['compiler_generated'] )
	    end
'fam2'/2 =
    %% Line 1650
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],Type> when 'true' ->
	      %% Line 1651
	      {'Set',[],Type}
	  %% Line 1652
	  <Ts,Type> when 'true' ->
	      let <_2> =
		  call %% Line 1653
		       'lists':%% Line 1653
			       'sort'
		      (%% Line 1653
		       Ts)
	      in  %% Line 1653
		  apply 'fam2'/4
		      (_2, Ts, [], Type)
	end
'fam2'/4 =
    %% Line 1655
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[{I,L}|T],I0,SL,Type>
	      when call 'erlang':'/='
		    (I,
		     I0) ->
	      let <_4> =
		  call %% Line 1656
		       'lists':%% Line 1656
			       'usort'
		      (%% Line 1656
		       L)
	      in  %% Line 1656
		  apply 'fam2'/4
		      (T, I, [{I,_4}|SL], Type)
	  %% Line 1657
	  <[{I,L}|T],I0,SL,Type>
	      when call 'erlang':'=='
		    (I,
		     I0) ->
	      let <_5> =
		  call %% Line 1658
		       'lists':%% Line 1658
			       'usort'
		      (%% Line 1658
		       L)
	      in  %% Line 1658
		  case <_5,SL> of
		    %% Line 1659
		    <NL,( [( {_X_I,NL1}
			     -| ['compiler_generated'] )|_12]
			  -| ['compiler_generated'] )>
			when call 'erlang':'=='
			      (NL,
			       NL1) ->
			%% Line 1660
			apply 'fam2'/4
			    (T, I0, SL, Type)
		    %% Line 1661
		    <( _14
		       -| ['compiler_generated'] ),( _15
						     -| ['compiler_generated'] )> when 'true' ->
			%% Line 1662
			'bad_function'
		  end
	  %% Line 1664
	  <[],_X_I0,SL,Type> when 'true' ->
	      let <_7> =
		  call %% Line 1665
		       'lists':%% Line 1665
			       'reverse'
		      (%% Line 1665
		       SL)
	      in  %% Line 1665
		  {'Set',_7,Type}
	  ( <_11,_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8})
		  -| [{'function_name',{'fam2',4}}] )
	    -| ['compiler_generated'] )
	end
'func_type'/4 =
    %% Line 1667
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[E|T],SL,Type,F> when 'true' ->
	      %% Line 1668
	      case apply 'make_element'/3
		       (E, Type, Type) of
		<{NType,NE}> when 'true' ->
		    %% Line 1669
		    apply 'func_type'/4
			(T, [NE|SL], NType, F)
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1670
	  <[],[],'_',_X_F> when 'true' ->
	      %% Line 1671
	      apply 'empty_set'/0
		  ()
	  %% Line 1672
	  <[],SL,Type,F> when 'true' ->
	      %% Line 1673
	      case apply F
		       (Type) of
		<'true'> when 'true' ->
		    let <NL> =
			call %% Line 1674
			     'lists':%% Line 1674
				     'usort'
			    (%% Line 1674
			     SL)
		    in  %% Line 1675
			apply 'check_function'/2
			    (NL, {'Set',NL,Type})
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_5})
		  -| ['compiler_generated'] )
	      end
	  ( <_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8,_7})
		  -| [{'function_name',{'func_type',4}}] )
	    -| ['compiler_generated'] )
	end
'setify'/2 =
    %% Line 1677
    fun (_0,_1) ->
	case <_0,_1> of
	  <L,[Atom|[]]>
	      when let <_2> =
		    call 'erlang':'is_atom'
			(Atom)
		in  let <_3> =
			call 'erlang':'=/='
			    (Atom, '_')
		    in  call 'erlang':'and'
			    (_2, _3) ->
	      let <_4> =
		  call %% Line 1678
		       'lists':%% Line 1678
			       'usort'
		      (%% Line 1678
		       L)
	      in  %% Line 1678
		  {'Set',_4,Atom}
	  %% Line 1679
	  <L,[Type0|[]]> when 'true' ->
	      %% Line 1680
	      try
		  apply 'is_no_lists'/1
		      (Type0)
	      of <_5> ->
		  case _5 of
		    %% Line 1681
		    <N>
			when call 'erlang':'is_integer'
			      (_5) ->
			%% Line 1682
			apply 'rel'/3
			    (L, N, Type0)
		    %% Line 1683
		    <Sizes> when 'true' ->
			%% Line 1684
			apply 'make_oset'/4
			    (L, Sizes, L, Type0)
		  end
	      catch <_9,_8,_7> ->
		  %% Line 1687
		  case apply 'create'/4
			   (L, Type0, Type0, []) of
		    <{[Type|[]],Set}> when 'true' ->
			%% Line 1688
			{'Set',Set,Type}
		    ( <_10> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_10})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1690
	  <E,Type0> when 'true' ->
	      %% Line 1691
	      case apply 'make_element'/3
		       (E, Type0, Type0) of
		<{Type,OrdSet}> when 'true' ->
		    %% Line 1692
		    {'OrdSet',OrdSet,Type}
		( <_11> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_11})
		  -| ['compiler_generated'] )
	      end
	end
'is_no_lists'/1 =
    %% Line 1694
    fun (_0) ->
	case _0 of
	  <T>
	      when call 'erlang':'is_tuple'
		    (_0) ->
	      let <Sz> =
		  call %% Line 1695
		       'erlang':%% Line 1695
				'tuple_size'
		      (%% Line 1695
		       T)
	      in  %% Line 1696
		  apply 'is_no_lists'/4
		      (T, Sz, Sz, [])
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'is_no_lists',1}}] )
	    -| ['compiler_generated'] )
	end
'is_no_lists'/4 =
    %% Line 1698
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <_X_T,0,Sz,[]> when 'true' ->
	      %% Line 1699
	      Sz
	  %% Line 1700
	  <_X_T,0,Sz,L> when 'true' ->
	      %% Line 1701
	      {Sz,L}
	  %% Line 1702
	  <T,I,Sz,L>
	      when try
		    let <_4> =
			call 'erlang':'element'
			    (I, T)
		    in  call 'erlang':'is_atom'
			    (_4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_5> =
		  call %% Line 1703
		       'erlang':%% Line 1703
				'-'
		      (%% Line 1703
		       I, %% Line 1703
			  1)
	      in  %% Line 1703
		  apply 'is_no_lists'/4
		      (T, _5, Sz, L)
	  %% Line 1704
	  <T,I,Sz,L> when 'true' ->
	      let <_8> =
		  call %% Line 1705
		       'erlang':%% Line 1705
				'-'
		      (%% Line 1705
		       I, %% Line 1705
			  1)
	      in  let <_6> =
		      call %% Line 1705
			   'erlang':%% Line 1705
				    'element'
			  (%% Line 1705
			   I, %% Line 1705
			      T)
		  in  let <_7> =
			  apply %% Line 1705
				'is_no_lists'/1
			      (_6)
		      in  %% Line 1705
			  apply 'is_no_lists'/4
			      (T, _8, Sz, [{I,_7}|L])
	end
'create'/4 =
    %% Line 1707
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[E|Es],T,T0,L> when 'true' ->
	      %% Line 1708
	      case apply 'make_element'/3
		       (E, T, T0) of
		<{NT,S}> when 'true' ->
		    %% Line 1709
		    apply 'create'/4
			(Es, NT, T0, [S|L])
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1710
	  <[],T,_X_T0,L> when 'true' ->
	      let <_5> =
		  call %% Line 1711
		       'lists':%% Line 1711
			       'usort'
		      (%% Line 1711
		       L)
	      in  %% Line 1711
		  {[T|[]],_5}
	  ( <_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6})
		  -| [{'function_name',{'create',4}}] )
	    -| ['compiler_generated'] )
	end
'make_element'/3 =
    %% Line 1713
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <C,'_',_X_T0> when 'true' ->
	      %% Line 1714
	      apply 'make_element'/1
		  (C)
	  %% Line 1715
	  <C,Atom,'_'>
	      when try
		    let <_3> =
			call 'erlang':'is_atom'
			    (Atom)
		    in  let <_4> =
			    call %% Line 1716
				 'erlang':%% Line 1716
					  'is_list'
				(%% Line 1716
				 C)
			in  let <_5> =
				call %% Line 1716
				     'erlang':%% Line 1716
					      'not'
				    (_4)
			    in  let <_6> =
				    call %% Line 1716
					 'erlang':%% Line 1716
						  'is_tuple'
					(%% Line 1716
					 C)
				in  let <_7> =
					call %% Line 1716
					     'erlang':%% Line 1716
						      'not'
					    (_6)
				    in  let <_8> =
					    call 'erlang':'and'
						(_5, _7)
					in  call 'erlang':'and'
						(_3, _8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1717
	      {Atom,C}
	  %% Line 1718
	  <C,Atom,_21>
	      when let <_22> =
		    call 'erlang':'=:='
			(_21, Atom)
		in  let <_23> =
			call 'erlang':'is_atom'
			    (Atom)
		    in  call 'erlang':'and'
			    (_22, _23) ->
	      %% Line 1719
	      {Atom,C}
	  %% Line 1720
	  <T,TT,'_'>
	      when try
		    let <_10> =
			call 'erlang':'tuple_size'
			    (T)
		    in  let <_9> =
			    call 'erlang':'tuple_size'
				(TT)
			in  call 'erlang':'=:='
				(_10, _9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_12> =
		  call %% Line 1721
		       'erlang':%% Line 1721
				'tuple_to_list'
		      (%% Line 1721
		       T)
	      in  let <_11> =
		      call %% Line 1721
			   'erlang':%% Line 1721
				    'tuple_to_list'
			  (%% Line 1721
			   TT)
		  in  %% Line 1721
		      apply 'make_tuple'/5
			  (_12, _11, [], [], '_')
	  %% Line 1722
	  <T,TT,T0>
	      when try
		    let <_14> =
			call 'erlang':'tuple_size'
			    (T)
		    in  let <_13> =
			    call 'erlang':'tuple_size'
				(TT)
			in  call 'erlang':'=:='
				(_14, _13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_17> =
		  call %% Line 1723
		       'erlang':%% Line 1723
				'tuple_to_list'
		      (%% Line 1723
		       T)
	      in  let <_16> =
		      call %% Line 1723
			   'erlang':%% Line 1723
				    'tuple_to_list'
			  (%% Line 1723
			   TT)
		  in  let <_15> =
			  call %% Line 1723
			       'erlang':%% Line 1723
					'tuple_to_list'
			      (%% Line 1723
			       T0)
		      in  %% Line 1723
			  apply 'make_tuple'/5
			      (_17, _16, [], [], _15)
	  %% Line 1724
	  <L,[LT|[]],'_'>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 1725
	      apply 'create'/4
		  (L, LT, '_', [])
	  %% Line 1726
	  <L,[LT|[]],[T0|[]]>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 1727
	      apply 'create'/4
		  (L, LT, T0, [])
	  ( <_20,_19,_18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_20,_19,_18})
		  -| [{'function_name',{'make_element',3}}] )
	    -| ['compiler_generated'] )
	end
'make_tuple'/5 =
    %% Line 1729
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <[E|Es],[T|Ts],NT,L,T0>
	      when call 'erlang':'=:='
		    (T0,
		     '_') ->
	      %% Line 1730
	      case apply 'make_element'/3
		       (E, T, T0) of
		<{ET,ES}> when 'true' ->
		    %% Line 1731
		    apply 'make_tuple'/5
			(Es, Ts, [ET|NT], [ES|L], T0)
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1732
	  <[E|Es],[T|Ts],NT,L,[T0|T0s]> when 'true' ->
	      %% Line 1733
	      case apply 'make_element'/3
		       (E, T, T0) of
		<{ET,ES}> when 'true' ->
		    %% Line 1734
		    apply 'make_tuple'/5
			(Es, Ts, [ET|NT], [ES|L], T0s)
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1735
	  <[],[],NT,L,_X_T0s>
	      when call 'erlang':'=/='
		    (NT,
		     []) ->
	      let <_9> =
		  call %% Line 1736
		       'lists':%% Line 1736
			       'reverse'
		      (%% Line 1736
		       NT)
	      in  let <_10> =
		      call %% Line 1736
			   'erlang':%% Line 1736
				    'list_to_tuple'
			  (_9)
		  in  let <_7> =
			  call %% Line 1736
			       'lists':%% Line 1736
				       'reverse'
			      (%% Line 1736
			       L)
		      in  let <_8> =
			      call %% Line 1736
				   'erlang':%% Line 1736
					    'list_to_tuple'
				  (_7)
			  in  %% Line 1736
			      {_10,_8}
	  ( <_15,_14,_13,_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_15,_14,_13,_12,_11})
		  -| [{'function_name',{'make_tuple',5}}] )
	    -| ['compiler_generated'] )
	end
'make_element'/1 =
    %% Line 1739
    fun (_0) ->
	case _0 of
	  <C>
	      when try
		    let <_1> =
			call 'erlang':'is_list'
			    (_0)
		    in  let <_2> =
			    call 'erlang':'not'
				(_1)
			in  let <_3> =
				call 'erlang':'is_tuple'
				    (_0)
			    in  let <_4> =
				    call 'erlang':'not'
					(_3)
				in  call 'erlang':'and'
					(_2, _4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1740
	      {'atom',C}
	  %% Line 1741
	  <T>
	      when call 'erlang':'is_tuple'
		    (_0) ->
	      let <_5> =
		  call %% Line 1742
		       'erlang':%% Line 1742
				'tuple_to_list'
		      (%% Line 1742
		       T)
	      in  %% Line 1742
		  apply 'make_tuple'/3
		      (_5, [], [])
	  %% Line 1743
	  <L>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 1744
	      apply 'create'/4
		  (L, '_', '_', [])
	  ( <_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6})
		  -| [{'function_name',{'make_element',1}}] )
	    -| ['compiler_generated'] )
	end
'make_tuple'/3 =
    %% Line 1746
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[E|Es],T,L> when 'true' ->
	      %% Line 1747
	      case apply 'make_element'/1
		       (E) of
		<{ET,ES}> when 'true' ->
		    %% Line 1748
		    apply 'make_tuple'/3
			(Es, [ET|T], [ES|L])
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1749
	  <[],T,L>
	      when call 'erlang':'=/='
		    (T,
		     []) ->
	      let <_6> =
		  call %% Line 1750
		       'lists':%% Line 1750
			       'reverse'
		      (%% Line 1750
		       T)
	      in  let <_7> =
		      call %% Line 1750
			   'erlang':%% Line 1750
				    'list_to_tuple'
			  (_6)
		  in  let <_4> =
			  call %% Line 1750
			       'lists':%% Line 1750
				       'reverse'
			      (%% Line 1750
			       L)
		      in  let <_5> =
			      call %% Line 1750
				   'erlang':%% Line 1750
					    'list_to_tuple'
				  (_4)
			  in  %% Line 1750
			      {_7,_5}
	  ( <_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8})
		  -| [{'function_name',{'make_tuple',3}}] )
	    -| ['compiler_generated'] )
	end
'make_oset'/4 =
    %% Line 1752
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[T|Ts],Szs,L,Type> when 'true' ->
	      %% Line 1753
	      case apply 'test_oset'/3
		       (Szs, T, T) of
		<'true'> when 'true' ->
		    %% Line 1754
		    apply 'make_oset'/4
			(Ts, Szs, L, Type)
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1755
	  <[],_X_Szs,L,Type> when 'true' ->
	      let <_5> =
		  call %% Line 1756
		       'lists':%% Line 1756
			       'usort'
		      (%% Line 1756
		       L)
	      in  %% Line 1756
		  {'Set',_5,Type}
	  ( <_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6})
		  -| [{'function_name',{'make_oset',4}}] )
	    -| ['compiler_generated'] )
	end
'test_oset'/3 =
    %% Line 1759
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{Sz,Args},T,T0>
	      when try
		    let <_3> =
			call 'erlang':'tuple_size'
			    (T)
		    in  call 'erlang':'=:='
			    (_3, Sz)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1760
	      apply 'test_oset_args'/3
		  (Args, T, T0)
	  %% Line 1761
	  <Sz,T,_X_T0>
	      when try
		    let <_4> =
			call 'erlang':'tuple_size'
			    (T)
		    in  call 'erlang':'=:='
			    (_4, Sz)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1762
	      'true'
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'test_oset',3}}] )
	    -| ['compiler_generated'] )
	end
'test_oset_args'/3 =
    %% Line 1764
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[{Arg,Szs}|Ss],T,T0> when 'true' ->
	      let <_3> =
		  call %% Line 1765
		       'erlang':%% Line 1765
				'element'
		      (%% Line 1765
		       Arg, %% Line 1765
			    T)
	      in  %% Line 1765
		  case apply 'test_oset'/3
			   (Szs, _3, T0) of
		    <'true'> when 'true' ->
			%% Line 1766
			apply 'test_oset_args'/3
			    (Ss, T, T0)
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1767
	  <[],_X_T,_X_T0> when 'true' ->
	      %% Line 1768
	      'true'
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'test_oset_args',3}}] )
	    -| ['compiler_generated'] )
	end
'list_of_sets'/3 =
    %% Line 1770
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[S|Ss],Type,L> when 'true' ->
	      %% Line 1771
	      apply 'list_of_sets'/3
		  (Ss, Type, [{'Set',S,Type}|L])
	  %% Line 1772
	  <[],_X_Type,L> when 'true' ->
	      %% Line 1773
	      call 'lists':'reverse'
		  (L)
	  ( <_5,_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4,_3})
		  -| [{'function_name',{'list_of_sets',3}}] )
	    -| ['compiler_generated'] )
	end
'list_of_ordsets'/3 =
    %% Line 1775
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[S|Ss],Type,L> when 'true' ->
	      %% Line 1776
	      apply 'list_of_ordsets'/3
		  (Ss, Type, [{'OrdSet',S,Type}|L])
	  %% Line 1777
	  <[],_X_Type,L> when 'true' ->
	      %% Line 1778
	      call 'lists':'reverse'
		  (L)
	  ( <_5,_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4,_3})
		  -| [{'function_name',{'list_of_ordsets',3}}] )
	    -| ['compiler_generated'] )
	end
'tuple_of_sets'/3 =
    %% Line 1780
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[S|Ss],[[Type|[]]|Types],L> when 'true' ->
	      %% Line 1781
	      apply 'tuple_of_sets'/3
		  (Ss, Types, [{'Set',S,Type}|L])
	  %% Line 1782
	  <[S|Ss],[Type|Types],L> when 'true' ->
	      %% Line 1783
	      apply 'tuple_of_sets'/3
		  (Ss, Types, [{'OrdSet',S,Type}|L])
	  %% Line 1784
	  <[],[],L> when 'true' ->
	      let <_3> =
		  call %% Line 1785
		       'lists':%% Line 1785
			       'reverse'
		      (%% Line 1785
		       L)
	      in  %% Line 1785
		  call 'erlang':'list_to_tuple'
		      (_3)
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'tuple_of_sets',3}}] )
	    -| ['compiler_generated'] )
	end
'spec'/4 =
    %% Line 1787
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[E|Es],Fun,Type,L> when 'true' ->
	      let <_4> =
		  case %% Line 1788
		       <E,Type> of
		    %% Line 2675
		    ( <_13,_14>
			  when ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'is_list'
								   -| ['compiler_generated'] )
				  (_13)
			      -| ['compiler_generated'] ) ->
			  %% Line 2676
			  ( {( 'Set'
			       -| ['compiler_generated'] ),_13,_14}
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		    %% Line 2677
		    ( <T,_15> when ( 'true'
				     -| ['compiler_generated'] ) ->
			  %% Line 2678
			  ( {( 'OrdSet'
			       -| ['compiler_generated'] ),T,_15}
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 1788
		  case apply Fun
			   (_4) of
		    %% Line 1789
		    <'true'> when 'true' ->
			%% Line 1790
			apply 'spec'/4
			    (Es, Fun, Type, [E|L])
		    %% Line 1791
		    <'false'> when 'true' ->
			%% Line 1792
			apply 'spec'/4
			    (Es, Fun, Type, L)
		    %% Line 1793
		    <_10> when 'true' ->
			%% Line 1794
			'badarg'
		  end
	  %% Line 1796
	  <[],_X_Fun,_X_Type,L> when 'true' ->
	      %% Line 1797
	      call 'lists':'reverse'
		  (L)
	  ( <_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6})
		  -| [{'function_name',{'spec',4}}] )
	    -| ['compiler_generated'] )
	end
'specification'/3 =
    %% Line 1799
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[E|Es],Fun,L> when 'true' ->
	      %% Line 1800
	      case apply Fun
		       (E) of
		%% Line 1801
		<'true'> when 'true' ->
		    %% Line 1802
		    apply 'specification'/3
			(Es, Fun, [E|L])
		%% Line 1803
		<'false'> when 'true' ->
		    %% Line 1804
		    apply 'specification'/3
			(Es, Fun, L)
		%% Line 1805
		<_7> when 'true' ->
		    %% Line 1806
		    'badarg'
	      end
	  %% Line 1808
	  <[],_X_Fun,L> when 'true' ->
	      %% Line 1809
	      call 'lists':'reverse'
		  (L)
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'specification',3}}] )
	    -| ['compiler_generated'] )
	end
'intersection'/3 =
    %% Line 1812
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[H1|T1],[H2|T2],L>
	      when call 'erlang':'<'
		    (H1,
		     H2) ->
	      %% Line 1813
	      apply 'intersection1'/4
		  (T1, T2, L, H2)
	  %% Line 1814
	  <[H1|T1],[H2|T2],L>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      %% Line 1815
	      apply 'intersection'/3
		  (T1, T2, [H1|L])
	  %% Line 1816
	  <[H1|T1],[_X_H2|T2],L> when 'true' ->
	      %% Line 1817
	      apply 'intersection2'/4
		  (T1, T2, L, H1)
	  %% Line 1818
	  <_6,_7,L> when 'true' ->
	      %% Line 1819
	      call 'lists':'reverse'
		  (L)
	end
'intersection1'/4 =
    %% Line 1821
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[H1|T1],T2,L,H2>
	      when call 'erlang':'<'
		    (H1,
		     H2) ->
	      %% Line 1822
	      apply 'intersection1'/4
		  (T1, T2, L, H2)
	  %% Line 1823
	  <[H1|T1],T2,L,H2>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      %% Line 1824
	      apply 'intersection'/3
		  (T1, T2, [H1|L])
	  %% Line 1825
	  <[H1|T1],T2,L,_X_H2> when 'true' ->
	      %% Line 1826
	      apply 'intersection2'/4
		  (T1, T2, L, H1)
	  %% Line 1827
	  <_8,_9,L,_10> when 'true' ->
	      %% Line 1828
	      call 'lists':'reverse'
		  (L)
	end
'intersection2'/4 =
    %% Line 1830
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <T1,[H2|T2],L,H1>
	      when call 'erlang':'>'
		    (H1,
		     H2) ->
	      %% Line 1831
	      apply 'intersection2'/4
		  (T1, T2, L, H1)
	  %% Line 1832
	  <T1,[H2|T2],L,H1>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      %% Line 1833
	      apply 'intersection'/3
		  (T1, T2, [H1|L])
	  %% Line 1834
	  <T1,[H2|T2],L,_X_H1> when 'true' ->
	      %% Line 1835
	      apply 'intersection1'/4
		  (T1, T2, L, H2)
	  %% Line 1836
	  <_8,_9,L,_10> when 'true' ->
	      %% Line 1837
	      call 'lists':'reverse'
		  (L)
	end
'difference'/3 =
    %% Line 1839
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[H1|T1],[H2|T2],L>
	      when call 'erlang':'<'
		    (H1,
		     H2) ->
	      %% Line 1840
	      apply 'diff'/4
		  (T1, T2, [H1|L], H2)
	  %% Line 1841
	  <[H1|T1],[H2|T2],L>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      %% Line 1842
	      apply 'difference'/3
		  (T1, T2, L)
	  %% Line 1843
	  <[H1|T1],[_X_H2|T2],L> when 'true' ->
	      %% Line 1844
	      apply 'diff2'/4
		  (T1, T2, L, H1)
	  %% Line 1845
	  <L1,_6,L> when 'true' ->
	      %% Line 1846
	      call 'lists':'reverse'
		  (L, L1)
	end
'diff'/4 =
    %% Line 1848
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[H1|T1],T2,L,H2>
	      when call 'erlang':'<'
		    (H1,
		     H2) ->
	      %% Line 1849
	      apply 'diff'/4
		  (T1, T2, [H1|L], H2)
	  %% Line 1850
	  <[H1|T1],T2,L,H2>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      %% Line 1851
	      apply 'difference'/3
		  (T1, T2, L)
	  %% Line 1852
	  <[H1|T1],T2,L,_X_H2> when 'true' ->
	      %% Line 1853
	      apply 'diff2'/4
		  (T1, T2, L, H1)
	  %% Line 1854
	  <_8,_9,L,_10> when 'true' ->
	      %% Line 1855
	      call 'lists':'reverse'
		  (L)
	end
'diff2'/4 =
    %% Line 1857
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <T1,[H2|T2],L,H1>
	      when call 'erlang':'>'
		    (H1,
		     H2) ->
	      %% Line 1858
	      apply 'diff2'/4
		  (T1, T2, L, H1)
	  %% Line 1859
	  <T1,[H2|T2],L,H1>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      %% Line 1860
	      apply 'difference'/3
		  (T1, T2, L)
	  %% Line 1861
	  <T1,[H2|T2],L,H1> when 'true' ->
	      %% Line 1862
	      apply 'diff'/4
		  (T1, T2, [H1|L], H2)
	  %% Line 1863
	  <T1,_8,L,H1> when 'true' ->
	      %% Line 1864
	      call 'lists':'reverse'
		  (L, [H1|T1])
	end
'symdiff'/3 =
    %% Line 1866
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[H1|T1],T2,L> when 'true' ->
	      %% Line 1867
	      apply 'symdiff2'/4
		  (T1, T2, L, H1)
	  %% Line 1868
	  <_6,T2,L> when 'true' ->
	      %% Line 1869
	      call 'lists':'reverse'
		  (L, T2)
	end
'symdiff1'/4 =
    %% Line 1871
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[H1|T1],T2,L,H2>
	      when call 'erlang':'<'
		    (H1,
		     H2) ->
	      %% Line 1872
	      apply 'symdiff1'/4
		  (T1, T2, [H1|L], H2)
	  %% Line 1873
	  <[H1|T1],T2,L,H2>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      ( case %% Line 1874
		     <T1,T2,L> of
		  ( <( [_12|_13]
		       -| ['compiler_generated'] ),_14,_15> when ( 'true'
								   -| ['compiler_generated'] ) ->
			( apply 'symdiff2'/4
			      (_13, _14, _15, _12)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_6,_16,_17> when ( 'true'
					-| ['compiler_generated'] ) ->
			( call ( 'lists'
				 -| ['compiler_generated'] ):( 'reverse'
							       -| ['compiler_generated'] )
			      (_17, _16)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1875
	  <[H1|T1],T2,L,H2> when 'true' ->
	      %% Line 1876
	      apply 'symdiff2'/4
		  (T1, T2, [H2|L], H1)
	  %% Line 1877
	  <_8,T2,L,H2> when 'true' ->
	      %% Line 1878
	      call 'lists':'reverse'
		  (L, [H2|T2])
	end
'symdiff2'/4 =
    %% Line 1880
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <T1,[H2|T2],L,H1>
	      when call 'erlang':'>'
		    (H1,
		     H2) ->
	      %% Line 1881
	      apply 'symdiff2'/4
		  (T1, T2, [H2|L], H1)
	  %% Line 1882
	  <T1,[H2|T2],L,H1>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      ( case %% Line 1883
		     <T1,T2,L> of
		  ( <( [_12|_13]
		       -| ['compiler_generated'] ),_14,_15> when ( 'true'
								   -| ['compiler_generated'] ) ->
			( apply 'symdiff2'/4
			      (_13, _14, _15, _12)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_6,_16,_17> when ( 'true'
					-| ['compiler_generated'] ) ->
			( call ( 'lists'
				 -| ['compiler_generated'] ):( 'reverse'
							       -| ['compiler_generated'] )
			      (_17, _16)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1884
	  <T1,[H2|T2],L,H1> when 'true' ->
	      %% Line 1885
	      apply 'symdiff1'/4
		  (T1, T2, [H1|L], H2)
	  %% Line 1886
	  <T1,_8,L,H1> when 'true' ->
	      %% Line 1887
	      call 'lists':'reverse'
		  (L, [H1|T1])
	end
'sympart'/6 =
    %% Line 1889
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <[H1|T1],[H2|T2],L1,L12,L2,T>
	      when call 'erlang':'<'
		    (H1,
		     H2) ->
	      %% Line 1890
	      apply 'sympart1'/7
		  (T1, T2, [H1|L1], L12, L2, T, H2)
	  %% Line 1891
	  <[H1|T1],[H2|T2],L1,L12,L2,T>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      %% Line 1892
	      apply 'sympart'/6
		  (T1, T2, L1, [H1|L12], L2, T)
	  %% Line 1893
	  <[H1|T1],[H2|T2],L1,L12,L2,T> when 'true' ->
	      %% Line 1894
	      apply 'sympart2'/7
		  (T1, T2, L1, L12, [H2|L2], T, H1)
	  %% Line 1895
	  <S1,[],L1,L12,L2,T> when 'true' ->
	      let <_8> =
		  call %% Line 1896
		       'lists':%% Line 1896
			       'reverse'
		      (%% Line 1896
		       L1, %% Line 1896
			   S1)
	      in  let <_7> =
		      call %% Line 1897
			   'lists':%% Line 1897
				   'reverse'
			  (%% Line 1897
			   L12)
		  in  let <_6> =
			  call %% Line 1898
			       'lists':%% Line 1898
				       'reverse'
			      (%% Line 1898
			       L2)
		      in  %% Line 1896
			  {{'Set',_8,T},%% Line 1897
					{'Set',_7,T},%% Line 1898
						     {'Set',_6,T}}
	  %% Line 1899
	  <_18,S2,L1,L12,L2,T> when 'true' ->
	      let <_11> =
		  call %% Line 1900
		       'lists':%% Line 1900
			       'reverse'
		      (%% Line 1900
		       L1)
	      in  let <_10> =
		      call %% Line 1901
			   'lists':%% Line 1901
				   'reverse'
			  (%% Line 1901
			   L12)
		  in  let <_9> =
			  call %% Line 1902
			       'lists':%% Line 1902
				       'reverse'
			      (%% Line 1902
			       L2, %% Line 1902
				   S2)
		      in  %% Line 1900
			  {{'Set',_11,T},%% Line 1901
					 {'Set',_10,T},%% Line 1902
						       {'Set',_9,T}}
	end
'sympart1'/7 =
    %% Line 1904
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <[H1|T1],T2,L1,L12,L2,T,H2>
	      when call 'erlang':'<'
		    (H1,
		     H2) ->
	      %% Line 1905
	      apply 'sympart1'/7
		  (T1, T2, [H1|L1], L12, L2, T, H2)
	  %% Line 1906
	  <[H1|T1],T2,L1,L12,L2,T,H2>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      %% Line 1907
	      apply 'sympart'/6
		  (T1, T2, L1, [H1|L12], L2, T)
	  %% Line 1908
	  <[H1|T1],T2,L1,L12,L2,T,H2> when 'true' ->
	      %% Line 1909
	      apply 'sympart2'/7
		  (T1, T2, L1, L12, [H2|L2], T, H1)
	  %% Line 1910
	  <_17,T2,L1,L12,L2,T,H2> when 'true' ->
	      let <_9> =
		  call %% Line 1911
		       'lists':%% Line 1911
			       'reverse'
		      (%% Line 1911
		       L1)
	      in  let <_8> =
		      call %% Line 1912
			   'lists':%% Line 1912
				   'reverse'
			  (%% Line 1912
			   L12)
		  in  let <_7> =
			  call %% Line 1913
			       'lists':%% Line 1913
				       'reverse'
			      (%% Line 1913
			       L2, %% Line 1913
				   [H2|T2])
		      in  %% Line 1911
			  {{'Set',_9,T},%% Line 1912
					{'Set',_8,T},%% Line 1913
						     {'Set',_7,T}}
	end
'sympart2'/7 =
    %% Line 1915
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <T1,[H2|T2],L1,L12,L2,T,H1>
	      when call 'erlang':'>'
		    (H1,
		     H2) ->
	      %% Line 1916
	      apply 'sympart2'/7
		  (T1, T2, L1, L12, [H2|L2], T, H1)
	  %% Line 1917
	  <T1,[H2|T2],L1,L12,L2,T,H1>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      %% Line 1918
	      apply 'sympart'/6
		  (T1, T2, L1, [H1|L12], L2, T)
	  %% Line 1919
	  <T1,[H2|T2],L1,L12,L2,T,H1> when 'true' ->
	      %% Line 1920
	      apply 'sympart1'/7
		  (T1, T2, [H1|L1], L12, L2, T, H2)
	  %% Line 1921
	  <T1,_17,L1,L12,L2,T,H1> when 'true' ->
	      let <_9> =
		  call %% Line 1922
		       'lists':%% Line 1922
			       'reverse'
		      (%% Line 1922
		       L1, %% Line 1922
			   [H1|T1])
	      in  let <_8> =
		      call %% Line 1923
			   'lists':%% Line 1923
				   'reverse'
			  (%% Line 1923
			   L12)
		  in  let <_7> =
			  call %% Line 1924
			       'lists':%% Line 1924
				       'reverse'
			      (%% Line 1924
			       L2)
		      in  %% Line 1922
			  {{'Set',_9,T},%% Line 1923
					{'Set',_8,T},%% Line 1924
						     {'Set',_7,T}}
	end
'prod'/3 =
    %% Line 1926
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[[E|Es]|Xs],T,L> when 'true' ->
	      let <_3> =
		  apply %% Line 1927
			'prod'/3
		      (%% Line 1927
		       Xs, %% Line 1927
			   [E|T], %% Line 1927
				  L)
	      in  %% Line 1927
		  apply 'prod'/4
		      (Es, Xs, T, _3)
	  %% Line 1928
	  <[],T,L> when 'true' ->
	      let <_4> =
		  call %% Line 1929
		       'lists':%% Line 1929
			       'reverse'
		      (%% Line 1929
		       T)
	      in  let <_5> =
		      call %% Line 1929
			   'erlang':%% Line 1929
				    'list_to_tuple'
			  (_4)
		  in  %% Line 1929
		      [_5|L]
	  ( <_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7,_6})
		  -| [{'function_name',{'prod',3}}] )
	    -| ['compiler_generated'] )
	end
'prod'/4 =
    %% Line 1931
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[E|Es],Xs,T,L> when 'true' ->
	      let <_4> =
		  apply %% Line 1932
			'prod'/3
		      (%% Line 1932
		       Xs, %% Line 1932
			   [E|T], %% Line 1932
				  L)
	      in  %% Line 1932
		  apply 'prod'/4
		      (Es, Xs, T, _4)
	  %% Line 1933
	  <[],_X_Xs,_X_E,L> when 'true' ->
	      %% Line 1934
	      L
	  ( <_8,_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7,_6,_5})
		  -| [{'function_name',{'prod',4}}] )
	    -| ['compiler_generated'] )
	end
'constant_function'/3 =
    %% Line 1936
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[E|Es],X,L> when 'true' ->
	      %% Line 1937
	      apply 'constant_function'/3
		  (Es, X, [{E,X}|L])
	  %% Line 1938
	  <[],_X_X,L> when 'true' ->
	      %% Line 1939
	      call 'lists':'reverse'
		  (L)
	  ( <_5,_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4,_3})
		  -| [{'function_name',{'constant_function',3}}] )
	    -| ['compiler_generated'] )
	end
'subset'/2 =
    %% Line 1941
    fun (_0,_1) ->
	case <_0,_1> of
	  <[H1|T1],[H2|T2]>
	      when call 'erlang':'>'
		    (H1,
		     H2) ->
	      %% Line 1942
	      apply 'subset'/3
		  (T1, T2, H1)
	  %% Line 1943
	  <[H1|T1],[H2|T2]>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      %% Line 1944
	      apply 'subset'/2
		  (T1, T2)
	  %% Line 1945
	  <L1,_4> when 'true' ->
	      %% Line 1946
	      call 'erlang':'=:='
		  (L1, [])
	end
'subset'/3 =
    %% Line 1948
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <T1,[H2|T2],H1>
	      when call 'erlang':'>'
		    (H1,
		     H2) ->
	      %% Line 1949
	      apply 'subset'/3
		  (T1, T2, H1)
	  %% Line 1950
	  <T1,[H2|T2],H1>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      %% Line 1951
	      apply 'subset'/2
		  (T1, T2)
	  %% Line 1952
	  <_6,_7,_8> when 'true' ->
	      %% Line 1953
	      'false'
	end
'disjoint'/3 =
    %% Line 1955
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[B|Bs],A,As>
	      when call 'erlang':'<'
		    (A,
		     B) ->
	      %% Line 1956
	      apply 'disjoint'/3
		  (As, B, Bs)
	  %% Line 1957
	  <[B|_X_Bs],A,_X_As>
	      when call 'erlang':'=='
		    (A,
		     B) ->
	      %% Line 1958
	      'false'
	  %% Line 1959
	  <[_X_B|Bs],A,As> when 'true' ->
	      %% Line 1960
	      apply 'disjoint'/3
		  (Bs, A, As)
	  %% Line 1961
	  <_X_Bs,_X_A,_X_As> when 'true' ->
	      %% Line 1962
	      'true'
	end
'lunion'/1 =
    %% Line 1965
    fun (_0) ->
	case _0 of
	  <[S = [_4|[]]|[]]> when 'true' ->
	      %% Line 1966
	      S
	  %% Line 1967
	  <[[]|Ls]> when 'true' ->
	      %% Line 1968
	      apply 'lunion'/1
		  (Ls)
	  %% Line 1969
	  <[S|Ss]> when 'true' ->
	      let <_1> =
		  call %% Line 1970
		       'lists':%% Line 1970
			       'last'
		      (%% Line 1970
		       S)
	      in  let <_2> =
		      apply %% Line 1970
			    'lunion'/4
			  (%% Line 1970
			   Ss, _1, %% Line 1970
				   [S|[]], %% Line 1970
					   [])
		  in  %% Line 1970
		      call 'lists':'umerge'
			  (_2)
	  %% Line 1971
	  <[]> when 'true' ->
	      %% Line 1972
	      []
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'lunion',1}}] )
	    -| ['compiler_generated'] )
	end
'lunion'/4 =
    %% Line 1974
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[S = [E|[]]|Ss],Last,SL,Ls>
	      when call 'erlang':'>'
		    (E,
		     Last) ->
	      %% Line 1975
	      apply 'lunion'/4
		  (Ss, E, [S|SL], Ls)
	  %% Line 1976
	  <[S|Ss],Last,SL,Ls>
	      when try
		    let <_4> =
			call 'erlang':'hd'
			    (S)
		    in  call 'erlang':'>'
			    (_4, Last)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_5> =
		  call %% Line 1977
		       'lists':%% Line 1977
			       'last'
		      (%% Line 1977
		       S)
	      in  %% Line 1977
		  apply 'lunion'/4
		      (Ss, _5, [S|SL], Ls)
	  %% Line 1978
	  <[S|Ss],_X_Last,SL,Ls> when 'true' ->
	      let <_8> =
		  call %% Line 1979
		       'lists':%% Line 1979
			       'last'
		      (%% Line 1979
		       S)
	      in  let <_6> =
		      call %% Line 1979
			   'lists':%% Line 1979
				   'reverse'
			  (%% Line 1979
			   SL)
		  in  let <_7> =
			  call %% Line 1979
			       'lists':%% Line 1979
				       'append'
			      (_6)
		      in  %% Line 1979
			  apply 'lunion'/4
			      (Ss, _8, [S|[]], [_7|Ls])
	  %% Line 1980
	  <[],_X_Last,SL,Ls> when 'true' ->
	      let <_9> =
		  call %% Line 1981
		       'lists':%% Line 1981
			       'reverse'
		      (%% Line 1981
		       SL)
	      in  let <_10> =
		      call %% Line 1981
			   'lists':%% Line 1981
				   'append'
			  (_9)
		  in  %% Line 1981
		      [_10|Ls]
	  ( <_14,_13,_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13,_12,_11})
		  -| [{'function_name',{'lunion',4}}] )
	    -| ['compiler_generated'] )
	end
'lintersection'/2 =
    %% Line 1984
    fun (_0,_1) ->
	case <_0,_1> of
	  <_5,[]> when 'true' ->
	      %% Line 1985
	      []
	  %% Line 1986
	  <[S|Ss],S0> when 'true' ->
	      let <_2> =
		  apply %% Line 1987
			'intersection'/3
		      (%% Line 1987
		       S, %% Line 1987
			  S0, %% Line 1987
			      [])
	      in  %% Line 1987
		  apply 'lintersection'/2
		      (Ss, _2)
	  %% Line 1988
	  <[],S> when 'true' ->
	      %% Line 1989
	      S
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'lintersection',2}}] )
	    -| ['compiler_generated'] )
	end
'can_rel'/2 =
    %% Line 1991
    fun (_0,_1) ->
	case <_0,_1> of
	  <[S|Ss],L> when 'true' ->
	      %% Line 1992
	      apply 'can_rel'/4
		  (Ss, L, S, S)
	  %% Line 1993
	  <[],L> when 'true' ->
	      %% Line 1994
	      call 'lists':'sort'
		  (L)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'can_rel',2}}] )
	    -| ['compiler_generated'] )
	end
'can_rel'/4 =
    %% Line 1996
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Ss,L,[E|Es],S> when 'true' ->
	      %% Line 1997
	      apply 'can_rel'/4
		  (Ss, [{E,S}|L], Es, S)
	  %% Line 1998
	  <Ss,L,_8,_X_S> when 'true' ->
	      %% Line 1999
	      apply 'can_rel'/2
		  (Ss, L)
	end
'rel2family'/1 =
    %% Line 2001
    fun (_0) ->
	case _0 of
	  <[{X,Y}|S]> when 'true' ->
	      %% Line 2002
	      apply 'rel2fam'/4
		  (S, X, [Y|[]], [])
	  %% Line 2003
	  <[]> when 'true' ->
	      %% Line 2004
	      []
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'rel2family',1}}] )
	    -| ['compiler_generated'] )
	end
'rel2fam'/4 =
    %% Line 2006
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[{X,Y}|S],X0,YL,L>
	      when call 'erlang':'=='
		    (X0,
		     X) ->
	      %% Line 2007
	      apply 'rel2fam'/4
		  (S, X0, [Y|YL], L)
	  %% Line 2008
	  <[{X,Y}|S],X0,[A|[B|YL]],L> when 'true' ->
	      let <_4> =
		  call %% Line 2009
		       'lists':%% Line 2009
			       'reverse'
		      (%% Line 2009
		       YL, %% Line 2009
			   [B|[A|[]]])
	      in  %% Line 2009
		  apply 'rel2fam'/4
		      (S, X, [Y|[]], [{X0,_4}|L])
	  %% Line 2010
	  <[{X,Y}|S],X0,YL,L> when 'true' ->
	      %% Line 2011
	      apply 'rel2fam'/4
		  (S, X, [Y|[]], [{X0,YL}|L])
	  %% Line 2012
	  <[],X,YL,L> when 'true' ->
	      let <_5> =
		  call %% Line 2013
		       'lists':%% Line 2013
			       'reverse'
		      (%% Line 2013
		       YL)
	      in  %% Line 2013
		  call 'lists':'reverse'
		      ([{X,_5}|L])
	  ( <_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6})
		  -| [{'function_name',{'rel2fam',4}}] )
	    -| ['compiler_generated'] )
	end
'dom'/1 =
    %% Line 2015
    fun (_0) ->
	case _0 of
	  <[{X,_2}|Es]> when 'true' ->
	      %% Line 2016
	      apply 'dom'/3
		  ([], X, Es)
	  %% Line 2017
	  <L = []> when 'true' ->
	      %% Line 2018
	      L
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'dom',1}}] )
	    -| ['compiler_generated'] )
	end
'dom'/3 =
    %% Line 2020
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <L,X,[{X1,_6}|Es]>
	      when call 'erlang':'=='
		    (X,
		     X1) ->
	      %% Line 2021
	      apply 'dom'/3
		  (L, X, Es)
	  %% Line 2022
	  <L,X,[{Y,_7}|Es]> when 'true' ->
	      %% Line 2023
	      apply 'dom'/3
		  ([X|L], Y, Es)
	  %% Line 2024
	  <L,X,[]> when 'true' ->
	      %% Line 2025
	      call 'lists':'reverse'
		  (L, [X|[]])
	  ( <_5,_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4,_3})
		  -| [{'function_name',{'dom',3}}] )
	    -| ['compiler_generated'] )
	end
'ran'/2 =
    %% Line 2027
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{_4,Y}|Es],L> when 'true' ->
	      %% Line 2028
	      apply 'ran'/2
		  (Es, [Y|L])
	  %% Line 2029
	  <[],L> when 'true' ->
	      %% Line 2030
	      call 'lists':'usort'
		  (L)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'ran',2}}] )
	    -| ['compiler_generated'] )
	end
'relprod'/2 =
    %% Line 2032
    fun (_0,_1) ->
	let <_2> =
	    apply %% Line 2033
		  'relprod1'/2
		(_0, _1)
	in  %% Line 2033
	    call 'lists':'usort'
		(_2)
'relprod1'/2 =
    %% Line 2035
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{Ay,Ax}|A],B> when 'true' ->
	      %% Line 2036
	      apply 'relprod1'/5
		  (B, Ay, Ax, A, [])
	  %% Line 2037
	  <_X_A,_X_B> when 'true' ->
	      %% Line 2038
	      []
	end
'relprod1'/5 =
    %% Line 2040
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <[{Bx,_X_By}|B],Ay,Ax,A,L>
	      when call 'erlang':'>'
		    (Ay,
		     Bx) ->
	      %% Line 2041
	      apply 'relprod1'/5
		  (B, Ay, Ax, A, L)
	  %% Line 2042
	  <[{Bx,By}|B],Ay,Ax,A,L>
	      when call 'erlang':'=='
		    (Ay,
		     Bx) ->
	      %% Line 2043
	      apply 'relprod'/8
		  (B, Bx, By, A, [{Ax,By}|L], Ax, B, Ay)
	  %% Line 2044
	  <[{Bx,By}|B],_X_Ay,_X_Ax,A,L> when 'true' ->
	      %% Line 2045
	      apply 'relprod2'/5
		  (B, Bx, By, A, L)
	  %% Line 2046
	  <_X_B,_X_Ay,_X_Ax,_X_A,L> when 'true' ->
	      %% Line 2047
	      L
	end
'relprod2'/5 =
    %% Line 2049
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <B,Bx,By,[{Ay,_X_Ax}|A],L>
	      when call 'erlang':'<'
		    (Ay,
		     Bx) ->
	      %% Line 2050
	      apply 'relprod2'/5
		  (B, Bx, By, A, L)
	  %% Line 2051
	  <B,Bx,By,[{Ay,Ax}|A],L>
	      when call 'erlang':'=='
		    (Ay,
		     Bx) ->
	      %% Line 2052
	      apply 'relprod'/8
		  (B, Bx, By, A, [{Ax,By}|L], Ax, B, Ay)
	  %% Line 2053
	  <B,_X_Bx,_X_By,[{Ay,Ax}|A],L> when 'true' ->
	      %% Line 2054
	      apply 'relprod1'/5
		  (B, Ay, Ax, A, L)
	  %% Line 2055
	  <_10,_11,_12,_13,L> when 'true' ->
	      %% Line 2056
	      L
	end
'relprod'/8 =
    %% Line 2058
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <B0,Bx0,By0,A0,L,Ax,[{Bx,By}|B],Ay>
	      when call 'erlang':'=='
		    (Ay,
		     Bx) ->
	      %% Line 2059
	      apply 'relprod'/8
		  (B0, Bx0, By0, A0, [{Ax,By}|L], Ax, B, Ay)
	  %% Line 2060
	  <B0,Bx0,By0,A0,L,_X_Ax,_X_B,_X_Ay> when 'true' ->
	      %% Line 2061
	      apply 'relprod2'/5
		  (B0, Bx0, By0, A0, L)
	end
'relprod_n'/4 =
    %% Line 2063
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[],_X_R,_X_EmptyG,_X_IsR> when 'true' ->
	      %% Line 2064
	      {'error','badarg'}
	  %% Line 2065
	  <RL,R,EmptyR,IsR> when 'true' ->
	      %% Line 2066
	      case apply 'domain_type'/2
		       (RL, '_') of
		%% Line 2067
		<Error = {'error',_X_Reason}> when 'true' ->
		    %% Line 2068
		    Error
		%% Line 2069
		<DType> when 'true' ->
		    let <_4> = 'is_empty_set'/1
		    in  let <_5> =
			    call %% Line 2070
				 'lists':%% Line 2070
					 'any'
				(_4, %% Line 2070
				     RL)
			in  let <Empty> =
				call %% Line 2070
				     'erlang':%% Line 2070
					      'or'
				    (_5, %% Line 2070
					 EmptyR)
			    in  let <RType> =
				    apply %% Line 2071
					  'range_type'/2
					(%% Line 2071
					 RL, %% Line 2071
					     [])
				in  let <Type> = {%% Line 2072
					 DType,%% Line 2072
					       RType}
				    in  let <_21> =
					    case %% Line 2074
						 Empty of
					      %% Line 2075
					      <'true'>
						  when let <_9> =
							call 'erlang':'=:='
							    (DType, '_')
						    in  let <_10> =
							    call 'erlang':'=:='
								(RType, '_')
							in  call 'erlang':'or'
								(_9, _10) ->
						  %% Line 2076
						  apply 'empty_set'/0
						      ()
					      %% Line 2077
					      <'true'> when 'true' ->
						  %% Line 2078
						  {'Set',[],Type}
					      %% Line 2079
					      <'false'> when 'true' ->
						  %% Line 2080
						  ( case apply 'relprod_n'/1
							     (RL) of
						      ( <( {'Set',_rec182,_29}
							   -| ['compiler_generated'] )> when 'true' ->
							    let <Sz> =
								call %% Line 2081
								     'erlang':%% Line 2081
									      'length'
								    (%% Line 2081
								     RL)
							    in  let <Fun> =
								    fun (_16) ->
									%% Line 2082
									case _16 of
									  <{X,A}> when 'true' ->
									      let <_15> =
										  apply 'flat'/3
										      (Sz, A, [])
									      in  {X,_15}
									  ( <_17> when 'true' ->
										( primop 'match_fail'
										      ({'function_clause',_17})
										  -| [{'function_name',{'-relprod_n/4-fun-1-',1}}] )
									    -| ['compiler_generated'] )
									end
								in  let <_19> =
									call %% Line 2083
									     'lists':%% Line 2083
										     'map'
									    (%% Line 2083
									     Fun, _rec182)
								    in  %% Line 2083
									{'Set',_19,Type}
							-| ['compiler_generated'] )
						      ( <_30> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','Set'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      ( <_20> when 'true' ->
						    %% Line 2074
						    primop 'match_fail'
							({'case_clause',_20})
						-| ['compiler_generated'] )
					    end
					in  %% Line 2085
					    case IsR of
					      %% Line 2086
					      <'true'> when 'true' ->
						  apply 'relative_product'/2
						      (_21, R)
					      %% Line 2087
					      <'false'> when 'true' ->
						  _21
					      ( <_23> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_23})
						-| ['compiler_generated'] )
					    end
	      end
	end
'relprod_n'/1 =
    %% Line 2091
    fun (_0) ->
	case _0 of
	  <[R|Rs]> when 'true' ->
	      %% Line 2092
	      apply 'relprod_n'/2
		  (Rs, R)
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'relprod_n',1}}] )
	    -| ['compiler_generated'] )
	end
'relprod_n'/2 =
    %% Line 2094
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],R> when 'true' ->
	      %% Line 2095
	      R
	  %% Line 2096
	  <[R|Rs],R0> when 'true' ->
	      let <T> =
		  apply %% Line 2097
			'raise_element'/2
		      (%% Line 2097
		       R0, %% Line 2097
			   1)
	      in  let <R1> =
		      apply %% Line 2098
			    'relative_product1'/2
			  (%% Line 2098
			   T, %% Line 2098
			      R)
		  in  let <_6> =
			  fun (_4) ->
			      %% Line 2099
			      case _4 of
				<{{X,A},AS}> when 'true' ->
				    {X,{A,AS}}
				( <_5> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_5})
					-| [{'function_name',{'-relprod_n/2-fun-0-',1}}] )
				  -| ['compiler_generated'] )
			      end
		      in  let <NR> =
			      apply %% Line 2099
				    'projection'/2
				  (%% Line 2099
				   {'external',_6}, %% Line 2099
						    R1)
			  in  %% Line 2100
			      apply 'relprod_n'/2
				  (Rs, NR)
	  ( <_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8})
		  -| [{'function_name',{'relprod_n',2}}] )
	    -| ['compiler_generated'] )
	end
'flat'/3 =
    %% Line 2102
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <1,A,L> when 'true' ->
	      %% Line 2103
	      call 'erlang':'list_to_tuple'
		  ([A|L])
	  %% Line 2104
	  <N,{T,A},L> when 'true' ->
	      let <_3> =
		  call %% Line 2105
		       'erlang':%% Line 2105
				'-'
		      (%% Line 2105
		       N, %% Line 2105
			  1)
	      in  %% Line 2105
		  apply 'flat'/3
		      (_3, T, [A|L])
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'flat',3}}] )
	    -| ['compiler_generated'] )
	end
'domain_type'/2 =
    %% Line 2107
    fun (_0,_1) ->
	case <_0,_1> of
	  <[T = {'Set',_8,_9}|Ts],T0> when ( 'true'
					     -| ['compiler_generated'] ) ->
	      %% Line 2108
	      ( case T of
		  ( <( {'Set',_10,_rec183}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec183 of
			  %% Line 2109
			  <{DT,_X_RT}> when 'true' ->
			      %% Line 2110
			      case %% Line 2758
				   ( case <DT,T0> of
				       ( <_15,_4>
					     when ( call ( 'erlang'
							-| ['compiler_generated'] ):( '=:='
										      -| ['compiler_generated'] )
						     (_4,
						      _15)
						 -| ['compiler_generated'] ) ->
					     _15
					 -| ['compiler_generated'] )
				       %% Line 2759
				       ( <Type1,Type2> when ( 'true'
							      -| ['compiler_generated'] ) ->
					     ( catch
						   %% Line 2760
						   ( apply 'unify_types1'/2
							 (Type1, Type2)
						     -| ['compiler_generated'] )
					       -| ['compiler_generated'] )
					 -| ['compiler_generated'] )
				     end
				     -| ['compiler_generated'] ) of
				%% Line 2111
				<[]> when 'true' ->
				    {'error','type_mismatch'}
				%% Line 2112
				<T1> when 'true' ->
				    apply 'domain_type'/2
					(Ts, T1)
			      end
			  %% Line 2114
			  <'_'> when 'true' ->
			      %% Line 2115
			      apply 'domain_type'/2
				  (Ts, T0)
			  %% Line 2116
			  <_12> when 'true' ->
			      {'error','badarg'}
			end
		    -| ['compiler_generated'] )
		  ( <_11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 2118
	  <[],T0> when 'true' ->
	      %% Line 2119
	      T0
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'domain_type',2}}] )
	    -| ['compiler_generated'] )
	end
'range_type'/2 =
    %% Line 2121
    fun (_0,_1) ->
	case <_0,_1> of
	  <[T|Ts],L> when 'true' ->
	      %% Line 2122
	      ( case T of
		  ( <( {'Set',_8,_rec184}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec184 of
			  %% Line 2123
			  <{_X_DT,RT}> when 'true' ->
			      %% Line 2124
			      apply 'range_type'/2
				  (Ts, [RT|L])
			  %% Line 2125
			  <'_'> when 'true' ->
			      %% Line 2126
			      '_'
			  ( <_4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_4})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_9> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 2128
	  <[],L> when 'true' ->
	      let <_5> =
		  call %% Line 2129
		       'lists':%% Line 2129
			       'reverse'
		      (%% Line 2129
		       L)
	      in  %% Line 2129
		  call 'erlang':'list_to_tuple'
		      (_5)
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'range_type',2}}] )
	    -| ['compiler_generated'] )
	end
'converse'/2 =
    %% Line 2131
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{A,B}|X],L> when 'true' ->
	      %% Line 2132
	      apply 'converse'/2
		  (X, [{B,A}|L])
	  %% Line 2133
	  <[],L> when 'true' ->
	      %% Line 2134
	      call 'lists':'sort'
		  (L)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'converse',2}}] )
	    -| ['compiler_generated'] )
	end
'strict'/2 =
    %% Line 2136
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{E1,E2}|Es],L>
	      when call 'erlang':'=='
		    (E1,
		     E2) ->
	      %% Line 2137
	      apply 'strict'/2
		  (Es, L)
	  %% Line 2138
	  <[E|Es],L> when 'true' ->
	      %% Line 2139
	      apply 'strict'/2
		  (Es, [E|L])
	  %% Line 2140
	  <[],L> when 'true' ->
	      %% Line 2141
	      call 'lists':'reverse'
		  (L)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'strict',2}}] )
	    -| ['compiler_generated'] )
	end
'weak'/1 =
    %% Line 2143
    fun (_0) ->
	let <_1> =
	    apply %% Line 2145
		  'ran'/2
		(_0, %% Line 2145
		     [])
	in  %% Line 2145
	    apply 'weak'/3
		(_0, _1, [])
'weak'/3 =
    %% Line 2147
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Es = [{X,_6}|_7],[Y|Ys],L>
	      when call 'erlang':'>'
		    (X,
		     Y) ->
	      %% Line 2148
	      apply 'weak'/3
		  (Es, Ys, [{Y,Y}|L])
	  %% Line 2149
	  <Es = [{X,_8}|_9],[Y|Ys],L>
	      when call 'erlang':'=='
		    (X,
		     Y) ->
	      %% Line 2150
	      apply 'weak'/3
		  (Es, Ys, L)
	  %% Line 2151
	  <[E = {X,Y}|Es],Ys,L>
	      when call 'erlang':'>'
		    (X,
		     Y) ->
	      %% Line 2152
	      apply 'weak1'/4
		  (Es, Ys, [E|L], X)
	  %% Line 2153
	  <[E = {X,Y}|Es],Ys,L>
	      when call 'erlang':'=='
		    (X,
		     Y) ->
	      %% Line 2154
	      apply 'weak2'/4
		  (Es, Ys, [E|L], X)
	  %% Line 2155
	  <[E = {X,_X_Y}|Es],Ys,L> when 'true' ->
	      %% Line 2156
	      apply 'weak2'/4
		  (Es, Ys, [E|[{X,X}|L]], X)
	  %% Line 2157
	  <[],[Y|Ys],L> when 'true' ->
	      %% Line 2158
	      apply 'weak'/3
		  ([], Ys, [{Y,Y}|L])
	  %% Line 2159
	  <[],[],L> when 'true' ->
	      %% Line 2160
	      call 'lists':'reverse'
		  (L)
	  ( <_5,_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4,_3})
		  -| [{'function_name',{'weak',3}}] )
	    -| ['compiler_generated'] )
	end
'weak1'/4 =
    %% Line 2162
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[E = {X,Y}|Es],Ys,L,X0>
	      when let <_4> =
		    call 'erlang':'>'
			(X, Y)
		in  let <_5> =
			call 'erlang':'=='
			    (X, X0)
		    in  call 'erlang':'and'
			    (_4, _5) ->
	      %% Line 2163
	      apply 'weak1'/4
		  (Es, Ys, [E|L], X)
	  %% Line 2164
	  <[E = {X,Y}|Es],Ys,L,X0>
	      when let <_6> =
		    call 'erlang':'=='
			(X, Y)
		in  let <_7> =
			call 'erlang':'=='
			    (X, X0)
		    in  call 'erlang':'and'
			    (_6, _7) ->
	      %% Line 2165
	      apply 'weak2'/4
		  (Es, Ys, [E|L], X)
	  %% Line 2166
	  <[E = {X,_X_Y}|Es],Ys,L,X0>
	      when call 'erlang':'=='
		    (X,
		     X0) ->
	      %% Line 2167
	      apply 'weak2'/4
		  (Es, Ys, [E|[{X,X}|L]], X)
	  %% Line 2168
	  <Es,Ys,L,X> when 'true' ->
	      %% Line 2169
	      apply 'weak'/3
		  (Es, Ys, [{X,X}|L])
	end
'weak2'/4 =
    %% Line 2171
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[E = {X,_X_Y}|Es],Ys,L,X0>
	      when call 'erlang':'=='
		    (X,
		     X0) ->
	      %% Line 2172
	      apply 'weak2'/4
		  (Es, Ys, [E|L], X)
	  %% Line 2173
	  <Es,Ys,L,_X_X> when 'true' ->
	      %% Line 2174
	      apply 'weak'/3
		  (Es, Ys, L)
	end
'extc'/4 =
    %% Line 2176
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <L,[D|Ds],C,Ts> when 'true' ->
	      %% Line 2177
	      apply 'extc'/5
		  (L, Ds, C, Ts, D)
	  %% Line 2178
	  <L,[],_X_C,_X_Ts> when 'true' ->
	      %% Line 2179
	      L
	  ( <_7,_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5,_4})
		  -| [{'function_name',{'extc',4}}] )
	    -| ['compiler_generated'] )
	end
'extc'/5 =
    %% Line 2181
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <L,Ds,C,[{X,_X_Y}|Ts],D>
	      when call 'erlang':'<'
		    (X,
		     D) ->
	      %% Line 2182
	      apply 'extc'/5
		  (L, Ds, C, Ts, D)
	  %% Line 2183
	  <L,Ds,C,[{X,_X_Y}|Ts],D>
	      when call 'erlang':'=='
		    (X,
		     D) ->
	      %% Line 2184
	      apply 'extc'/4
		  (L, Ds, C, Ts)
	  %% Line 2185
	  <L,Ds,C,[{X,_X_Y}|Ts],D> when 'true' ->
	      %% Line 2186
	      apply 'extc2'/5
		  ([{D,C}|L], Ds, C, Ts, X)
	  %% Line 2187
	  <L,Ds,C,[],D> when 'true' ->
	      %% Line 2188
	      apply 'extc_tail'/3
		  ([{D,C}|L], Ds, C)
	  ( <_9,_8,_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6,_5})
		  -| [{'function_name',{'extc',5}}] )
	    -| ['compiler_generated'] )
	end
'extc2'/5 =
    %% Line 2190
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <L,[D|Ds],C,Ts,X>
	      when call 'erlang':'>'
		    (X,
		     D) ->
	      %% Line 2191
	      apply 'extc2'/5
		  ([{D,C}|L], Ds, C, Ts, X)
	  %% Line 2192
	  <L,[D|Ds],C,Ts,X>
	      when call 'erlang':'=='
		    (X,
		     D) ->
	      %% Line 2193
	      apply 'extc'/4
		  (L, Ds, C, Ts)
	  %% Line 2194
	  <L,[D|Ds],C,Ts,_X_X> when 'true' ->
	      %% Line 2195
	      apply 'extc'/5
		  (L, Ds, C, Ts, D)
	  %% Line 2196
	  <L,[],_X_C,_X_Ts,_X_X> when 'true' ->
	      %% Line 2197
	      L
	  ( <_9,_8,_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6,_5})
		  -| [{'function_name',{'extc2',5}}] )
	    -| ['compiler_generated'] )
	end
'extc_tail'/3 =
    %% Line 2199
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <L,[D|Ds],C> when 'true' ->
	      %% Line 2200
	      apply 'extc_tail'/3
		  ([{D,C}|L], Ds, C)
	  %% Line 2201
	  <L,[],_X_C> when 'true' ->
	      %% Line 2202
	      L
	  ( <_5,_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4,_3})
		  -| [{'function_name',{'extc_tail',3}}] )
	    -| ['compiler_generated'] )
	end
'is_a_func'/2 =
    %% Line 2204
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{E,_4}|Es],E0>
	      when call 'erlang':'/='
		    (E,
		     E0) ->
	      %% Line 2205
	      apply 'is_a_func'/2
		  (Es, E)
	  %% Line 2206
	  <L,_X_E> when 'true' ->
	      %% Line 2207
	      call 'erlang':'=:='
		  (L, [])
	end
'restrict_n'/5 =
    %% Line 2209
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <I,[T|Ts],Key,Keys,L> when 'true' ->
	      %% Line 2210
	      case call 'erlang':'element'
		       (I, T) of
		%% Line 2211
		<K>
		    when call 'erlang':'<'
			  (K,
			   Key) ->
		    %% Line 2212
		    apply 'restrict_n'/5
			(I, Ts, Key, Keys, L)
		%% Line 2213
		<K>
		    when call 'erlang':'=='
			  (K,
			   Key) ->
		    %% Line 2214
		    apply 'restrict_n'/5
			(I, Ts, Key, Keys, [T|L])
		%% Line 2215
		<K> when 'true' ->
		    %% Line 2216
		    apply 'restrict_n'/6
			(I, K, Ts, Keys, L, T)
	      end
	  %% Line 2218
	  <_X_I,_X_Ts,_X_Key,_X_Keys,L> when 'true' ->
	      %% Line 2219
	      L
	end
'restrict_n'/6 =
    %% Line 2221
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <I,K,Ts,[Key|Keys],L,E>
	      when call 'erlang':'>'
		    (K,
		     Key) ->
	      %% Line 2222
	      apply 'restrict_n'/6
		  (I, K, Ts, Keys, L, E)
	  %% Line 2223
	  <I,K,Ts,[Key|Keys],L,E>
	      when call 'erlang':'=='
		    (K,
		     Key) ->
	      %% Line 2224
	      apply 'restrict_n'/5
		  (I, Ts, Key, Keys, [E|L])
	  %% Line 2225
	  <I,_X_K,Ts,[Key|Keys],L,_X_E> when 'true' ->
	      %% Line 2226
	      apply 'restrict_n'/5
		  (I, Ts, Key, Keys, L)
	  %% Line 2227
	  <_X_I,_X_K,_X_Ts,_X_Keys,L,_X_E> when 'true' ->
	      %% Line 2228
	      L
	end
'restrict'/2 =
    %% Line 2230
    fun (_0,_1) ->
	case <_0,_1> of
	  <[Key|Keys],Tuples> when 'true' ->
	      %% Line 2231
	      apply 'restrict'/4
		  (Tuples, Key, Keys, [])
	  %% Line 2232
	  <_X_Keys,_X_Tuples> when 'true' ->
	      %% Line 2233
	      []
	end
'restrict'/4 =
    %% Line 2235
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[{K,_X_E}|Ts],Key,Keys,L>
	      when call 'erlang':'<'
		    (K,
		     Key) ->
	      %% Line 2236
	      apply 'restrict'/4
		  (Ts, Key, Keys, L)
	  %% Line 2237
	  <[{K,E}|Ts],Key,Keys,L>
	      when call 'erlang':'=='
		    (K,
		     Key) ->
	      %% Line 2238
	      apply 'restrict'/4
		  (Ts, Key, Keys, [E|L])
	  %% Line 2239
	  <[{K,E}|Ts],_X_Key,Keys,L> when 'true' ->
	      %% Line 2240
	      apply 'restrict'/5
		  (Ts, K, Keys, L, E)
	  %% Line 2241
	  <_X_Ts,_X_Key,_X_Keys,L> when 'true' ->
	      %% Line 2242
	      L
	end
'restrict'/5 =
    %% Line 2244
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <Ts,K,[Key|Keys],L,E>
	      when call 'erlang':'>'
		    (K,
		     Key) ->
	      %% Line 2245
	      apply 'restrict'/5
		  (Ts, K, Keys, L, E)
	  %% Line 2246
	  <Ts,K,[Key|Keys],L,E>
	      when call 'erlang':'=='
		    (K,
		     Key) ->
	      %% Line 2247
	      apply 'restrict'/4
		  (Ts, Key, Keys, [E|L])
	  %% Line 2248
	  <Ts,_X_K,[Key|Keys],L,_X_E> when 'true' ->
	      %% Line 2249
	      apply 'restrict'/4
		  (Ts, Key, Keys, L)
	  %% Line 2250
	  <_X_Ts,_X_K,_X_Keys,L,_X_E> when 'true' ->
	      %% Line 2251
	      L
	end
'diff_restrict_n'/5 =
    %% Line 2253
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <I,[T|Ts],Key,Keys,L> when 'true' ->
	      %% Line 2254
	      case call 'erlang':'element'
		       (I, T) of
		%% Line 2255
		<K>
		    when call 'erlang':'<'
			  (K,
			   Key) ->
		    %% Line 2256
		    apply 'diff_restrict_n'/5
			(I, Ts, Key, Keys, [T|L])
		%% Line 2257
		<K>
		    when call 'erlang':'=='
			  (K,
			   Key) ->
		    %% Line 2258
		    apply 'diff_restrict_n'/5
			(I, Ts, Key, Keys, L)
		%% Line 2259
		<K> when 'true' ->
		    %% Line 2260
		    apply 'diff_restrict_n'/6
			(I, K, Ts, Keys, L, T)
	      end
	  %% Line 2262
	  <I,_X_Ts,_X_Key,_X_Keys,L>
	      when call 'erlang':'=:='
		    (I,
		     1) ->
	      %% Line 2263
	      call 'lists':'reverse'
		  (L)
	  %% Line 2264
	  <_X_I,_X_Ts,_X_Key,_X_Keys,L> when 'true' ->
	      %% Line 2265
	      call 'lists':'sort'
		  (L)
	end
'diff_restrict_n'/6 =
    %% Line 2267
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <I,K,Ts,[Key|Keys],L,T>
	      when call 'erlang':'>'
		    (K,
		     Key) ->
	      %% Line 2268
	      apply 'diff_restrict_n'/6
		  (I, K, Ts, Keys, L, T)
	  %% Line 2269
	  <I,K,Ts,[Key|Keys],L,_X_T>
	      when call 'erlang':'=='
		    (K,
		     Key) ->
	      %% Line 2270
	      apply 'diff_restrict_n'/5
		  (I, Ts, Key, Keys, L)
	  %% Line 2271
	  <I,_X_K,Ts,[Key|Keys],L,T> when 'true' ->
	      %% Line 2272
	      apply 'diff_restrict_n'/5
		  (I, Ts, Key, Keys, [T|L])
	  %% Line 2273
	  <I,_X_K,Ts,_X_Keys,L,T>
	      when call 'erlang':'=:='
		    (I,
		     1) ->
	      %% Line 2274
	      call 'lists':'reverse'
		  (L, [T|Ts])
	  %% Line 2275
	  <_X_I,_X_K,Ts,_X_Keys,L,T> when 'true' ->
	      let <_6> =
		  call %% Line 2276
		       'erlang':%% Line 2276
				'++'
		      (%% Line 2276
		       Ts, %% Line 2276
			   L)
	      in  %% Line 2276
		  call 'lists':'sort'
		      ([T|_6])
	end
'diff_restrict'/2 =
    %% Line 2278
    fun (_0,_1) ->
	case <_0,_1> of
	  <[Key|Keys],Tuples> when 'true' ->
	      %% Line 2279
	      apply 'diff_restrict'/4
		  (Tuples, Key, Keys, [])
	  %% Line 2280
	  <_X_Keys,Tuples> when 'true' ->
	      %% Line 2281
	      apply 'diff_restrict_tail'/2
		  (Tuples, [])
	end
'diff_restrict'/4 =
    %% Line 2283
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[{K,E}|Ts],Key,Keys,L>
	      when call 'erlang':'<'
		    (K,
		     Key) ->
	      %% Line 2284
	      apply 'diff_restrict'/4
		  (Ts, Key, Keys, [E|L])
	  %% Line 2285
	  <[{K,_X_E}|Ts],Key,Keys,L>
	      when call 'erlang':'=='
		    (K,
		     Key) ->
	      %% Line 2286
	      apply 'diff_restrict'/4
		  (Ts, Key, Keys, L)
	  %% Line 2287
	  <[{K,E}|Ts],_X_Key,Keys,L> when 'true' ->
	      %% Line 2288
	      apply 'diff_restrict'/5
		  (Ts, K, Keys, L, E)
	  %% Line 2289
	  <_X_Ts,_X_Key,_X_Keys,L> when 'true' ->
	      %% Line 2290
	      L
	end
'diff_restrict'/5 =
    %% Line 2292
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <Ts,K,[Key|Keys],L,E>
	      when call 'erlang':'>'
		    (K,
		     Key) ->
	      %% Line 2293
	      apply 'diff_restrict'/5
		  (Ts, K, Keys, L, E)
	  %% Line 2294
	  <Ts,K,[Key|Keys],L,_X_E>
	      when call 'erlang':'=='
		    (K,
		     Key) ->
	      %% Line 2295
	      apply 'diff_restrict'/4
		  (Ts, Key, Keys, L)
	  %% Line 2296
	  <Ts,_X_K,[Key|Keys],L,E> when 'true' ->
	      %% Line 2297
	      apply 'diff_restrict'/4
		  (Ts, Key, Keys, [E|L])
	  %% Line 2298
	  <Ts,_X_K,_X_Keys,L,E> when 'true' ->
	      %% Line 2299
	      apply 'diff_restrict_tail'/2
		  (Ts, [E|L])
	end
'diff_restrict_tail'/2 =
    %% Line 2301
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{_X_K,E}|Ts],L> when 'true' ->
	      %% Line 2302
	      apply 'diff_restrict_tail'/2
		  (Ts, [E|L])
	  %% Line 2303
	  <_X_Ts,L> when 'true' ->
	      %% Line 2304
	      L
	end
'comp'/2 =
    %% Line 2306
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],B> when 'true' ->
	      %% Line 2307
	      apply 'check_function'/2
		  (B, [])
	  %% Line 2308
	  <_X_A,[]> when 'true' ->
	      %% Line 2309
	      'bad_function'
	  %% Line 2310
	  <A0,[{Bx,By}|B]> when 'true' ->
	      let <A> =
		  apply %% Line 2311
			'converse'/2
		      (%% Line 2311
		       A0, %% Line 2311
			   [])
	      in  let <_3> =
		      apply %% Line 2312
			    'comp1'/5
			  (%% Line 2312
			   A, %% Line 2312
			      B, %% Line 2312
				 [], %% Line 2312
				     Bx, %% Line 2312
					 By)
		  in  %% Line 2312
		      apply 'check_function'/2
			  (A0, _3)
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'comp',2}}] )
	    -| ['compiler_generated'] )
	end
'comp1'/5 =
    %% Line 2314
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <[{Ay,Ax}|A],B,L,Bx,By>
	      when call 'erlang':'=='
		    (Ay,
		     Bx) ->
	      %% Line 2315
	      apply 'comp1'/5
		  (A, B, [{Ax,By}|L], Bx, By)
	  %% Line 2316
	  <[{Ay,Ax}|A],B,L,Bx,_X_By>
	      when call 'erlang':'>'
		    (Ay,
		     Bx) ->
	      %% Line 2317
	      apply 'comp2'/6
		  (A, B, L, Bx, Ay, Ax)
	  %% Line 2318
	  <[{Ay,_X_Ax}|_X_A],_X_B,_X_L,Bx,_X_By>
	      when call 'erlang':'<'
		    (Ay,
		     Bx) ->
	      %% Line 2319
	      'bad_function'
	  %% Line 2320
	  <[],B,L,Bx,_X_By> when 'true' ->
	      %% Line 2321
	      apply 'check_function'/3
		  (Bx, B, L)
	  ( <_9,_8,_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6,_5})
		  -| [{'function_name',{'comp1',5}}] )
	    -| ['compiler_generated'] )
	end
'comp2'/6 =
    %% Line 2323
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <A,[{Bx,_X_By}|B],L,Bx0,Ay,Ax>
	      when let <_6> =
		    call 'erlang':'>'
			(Ay, Bx)
		in  let <_7> =
			call 'erlang':'/='
			    (Bx, Bx0)
		    in  call 'erlang':'and'
			    (_6, _7) ->
	      %% Line 2324
	      apply 'comp2'/6
		  (A, B, L, Bx, Ay, Ax)
	  %% Line 2325
	  <A,[{Bx,By}|B],L,_X_Bx0,Ay,Ax>
	      when call 'erlang':'=='
		    (Ay,
		     Bx) ->
	      %% Line 2326
	      apply 'comp1'/5
		  (A, B, [{Ax,By}|L], Bx, By)
	  %% Line 2327
	  <_X_A,_X_B,_X_L,_X_Bx0,_X_Ay,_X_Ax> when 'true' ->
	      %% Line 2328
	      'bad_function'
	end
'inverse1'/1 =
    %% Line 2330
    fun (_0) ->
	case _0 of
	  <[{A,B}|X]> when 'true' ->
	      %% Line 2331
	      apply 'inverse'/3
		  (X, A, [{B,A}|[]])
	  %% Line 2332
	  <[]> when 'true' ->
	      %% Line 2333
	      []
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'inverse1',1}}] )
	    -| ['compiler_generated'] )
	end
'inverse'/3 =
    %% Line 2335
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[{A,B}|X],A0,L>
	      when call 'erlang':'/='
		    (A0,
		     A) ->
	      %% Line 2336
	      apply 'inverse'/3
		  (X, A, [{B,A}|L])
	  %% Line 2337
	  <[{A,_X_B}|_X_X],A0,_X_L>
	      when call 'erlang':'=='
		    (A0,
		     A) ->
	      %% Line 2338
	      'bad_function'
	  %% Line 2339
	  <[],_X_A0,L> when 'true' ->
	      %% Line 2340
	      case call 'lists':'sort'
		       (L) of
		<SL = [{V,_8}|Es]> when 'true' ->
		    %% Line 2341
		    case apply 'is_a_func'/2
			     (Es, V) of
		      %% Line 2342
		      <'true'> when 'true' ->
			  SL
		      %% Line 2343
		      <'false'> when 'true' ->
			  'bad_function'
		      ( <_4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_4})
			-| ['compiler_generated'] )
		    end
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'inverse',3}}] )
	    -| ['compiler_generated'] )
	end
'external_fun'/1 =
    %% Line 2347
    fun (_0) ->
	case _0 of
	  <{'external',Function}>
	      when call 'erlang':'is_atom'
		    (Function) ->
	      %% Line 2348
	      'false'
	  %% Line 2349
	  <{'external',Fun}> when 'true' ->
	      %% Line 2350
	      Fun
	  %% Line 2351
	  <_2> when 'true' ->
	      %% Line 2352
	      'false'
	end
'element_type'/1 =
    %% Line 2355
    fun (_0) ->
	case _0 of
	  <[Type|[]]> when 'true' ->
	      Type
	  %% Line 2356
	  <Type> when 'true' ->
	      Type
	end
'subst'/3 =
    %% Line 2358
    fun (_0,_1,_2) ->
	%% Line 2359
	apply 'subst'/5
	    (_0, _1, _2, '_', [])
'subst'/5 =
    %% Line 2361
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <[T|Ts],Fun,Type,NType,L> when 'true' ->
	      %% Line 2362
	      case apply 'setfun'/4
		       (T, Fun, Type, NType) of
		%% Line 2363
		<{SD,ST}> when 'true' ->
		    apply 'subst'/5
			(Ts, Fun, Type, ST, [{T,SD}|L])
		%% Line 2364
		<Bad> when 'true' ->
		    Bad
	      end
	  %% Line 2366
	  <[],_X_Fun,_X_Type,NType,L> when 'true' ->
	      %% Line 2367
	      {L,NType}
	  ( <_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8,_7,_6})
		  -| [{'function_name',{'subst',5}}] )
	    -| ['compiler_generated'] )
	end
'projection1'/1 =
    %% Line 2369
    fun (_0) ->
	case _0 of
	  <[E|Es]> when 'true' ->
	      let <_1> =
		  call %% Line 2370
		       'erlang':%% Line 2370
				'element'
		      (%% Line 2370
		       1, %% Line 2370
			  E)
	      in  %% Line 2370
		  apply 'projection1'/3
		      ([], _1, Es)
	  %% Line 2371
	  <L = []> when 'true' ->
	      %% Line 2372
	      L
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'projection1',1}}] )
	    -| ['compiler_generated'] )
	end
'projection1'/3 =
    %% Line 2374
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <L,X,[E|Es]> when 'true' ->
	      %% Line 2375
	      case call 'erlang':'element'
		       (1, E) of
		%% Line 2376
		<X1>
		    when call 'erlang':'=='
			  (X,
			   X1) ->
		    apply 'projection1'/3
			(L, X, Es)
		%% Line 2377
		<X1> when 'true' ->
		    apply 'projection1'/3
			([X|L], X1, Es)
	      end
	  %% Line 2379
	  <L,X,[]> when 'true' ->
	      %% Line 2380
	      call 'lists':'reverse'
		  (L, [X|[]])
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'projection1',3}}] )
	    -| ['compiler_generated'] )
	end
'projection_n'/3 =
    %% Line 2382
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[E|Es],I,L> when 'true' ->
	      let <_3> =
		  call %% Line 2383
		       'erlang':%% Line 2383
				'element'
		      (%% Line 2383
		       I, %% Line 2383
			  E)
	      in  %% Line 2383
		  apply 'projection_n'/3
		      (Es, I, [_3|L])
	  %% Line 2384
	  <[],_X_I,L> when 'true' ->
	      %% Line 2385
	      call 'lists':'usort'
		  (L)
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'projection_n',3}}] )
	    -| ['compiler_generated'] )
	end
'substitute_element'/3 =
    %% Line 2387
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[T|Ts],I,L> when 'true' ->
	      let <_3> =
		  call %% Line 2388
		       'erlang':%% Line 2388
				'element'
		      (%% Line 2388
		       I, %% Line 2388
			  T)
	      in  %% Line 2388
		  apply 'substitute_element'/3
		      (Ts, I, [{T,_3}|L])
	  %% Line 2389
	  <_7,_X_I,L> when 'true' ->
	      %% Line 2390
	      call 'lists':'reverse'
		  (L)
	end
'substitute'/3 =
    %% Line 2392
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[T|Ts],Fun,L> when 'true' ->
	      let <_3> =
		  apply %% Line 2393
			Fun
		      (%% Line 2393
		       T)
	      in  %% Line 2393
		  apply 'substitute'/3
		      (Ts, Fun, [{T,_3}|L])
	  %% Line 2394
	  <_7,_X_Fun,L> when 'true' ->
	      %% Line 2395
	      call 'lists':'reverse'
		  (L)
	end
'partition_n'/2 =
    %% Line 2397
    fun (_0,_1) ->
	case <_0,_1> of
	  <I,[E|Ts]> when 'true' ->
	      let <_2> =
		  call %% Line 2398
		       'erlang':%% Line 2398
				'element'
		      (%% Line 2398
		       I, %% Line 2398
			  E)
	      in  %% Line 2398
		  apply 'partition_n'/5
		      (I, Ts, _2, [E|[]], [])
	  %% Line 2399
	  <_X_I,[]> when 'true' ->
	      %% Line 2400
	      []
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'partition_n',2}}] )
	    -| ['compiler_generated'] )
	end
'partition_n'/5 =
    %% Line 2402
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <I,[E|Ts],K,Es,P> when 'true' ->
	      let <_5> =
		  call %% Line 2403
		       'erlang':%% Line 2403
				'element'
		      (%% Line 2403
		       I, %% Line 2403
			  E)
	      in  %% Line 2403
		  case <_5,Es> of
		    %% Line 2404
		    <K1,_15>
			when call 'erlang':'=='
			      (K,
			       K1) ->
			%% Line 2405
			apply 'partition_n'/5
			    (I, Ts, K, [E|Es], P)
		    %% Line 2406
		    <K1,( [_16|( []
				 -| ['compiler_generated'] )]
			  -| ['compiler_generated'] )> when 'true' ->
			%% Line 2407
			apply 'partition_n'/5
			    (I, Ts, K1, [E|[]], [Es|P])
		    %% Line 2408
		    <K1,_17> when 'true' ->
			let <_6> =
			    call %% Line 2409
				 'lists':%% Line 2409
					 'reverse'
				(%% Line 2409
				 Es)
			in  %% Line 2409
			    apply 'partition_n'/5
				(I, Ts, K1, [E|[]], [_6|P])
		  end
	  %% Line 2411
	  <I,[],_X_K,Es,P>
	      when call 'erlang':'>'
		    (I,
		     1) ->
	      let <_8> =
		  call %% Line 2412
		       'lists':%% Line 2412
			       'reverse'
		      (%% Line 2412
		       Es)
	      in  %% Line 2412
		  call 'lists':'sort'
		      ([_8|P])
	  %% Line 2413
	  <_X_I,[],_X_K,Es = [_18|[]],P> when 'true' ->
	      %% Line 2414
	      call 'lists':'reverse'
		  (P, [Es|[]])
	  %% Line 2415
	  <_X_I,[],_X_K,Es,P> when 'true' ->
	      let <_9> =
		  call %% Line 2416
		       'lists':%% Line 2416
			       'reverse'
		      (%% Line 2416
		       Es)
	      in  %% Line 2416
		  call 'lists':'reverse'
		      (P, [_9|[]])
	  ( <_14,_13,_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13,_12,_11,_10})
		  -| [{'function_name',{'partition_n',5}}] )
	    -| ['compiler_generated'] )
	end
'partition3_n'/6 =
    %% Line 2418
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <I,[T|Ts],Key,Keys,L1,L2> when 'true' ->
	      %% Line 2419
	      case call 'erlang':'element'
		       (I, T) of
		%% Line 2420
		<K>
		    when call 'erlang':'<'
			  (K,
			   Key) ->
		    %% Line 2421
		    apply 'partition3_n'/6
			(I, Ts, Key, Keys, L1, [T|L2])
		%% Line 2422
		<K>
		    when call 'erlang':'=='
			  (K,
			   Key) ->
		    %% Line 2423
		    apply 'partition3_n'/6
			(I, Ts, Key, Keys, [T|L1], L2)
		%% Line 2424
		<K> when 'true' ->
		    %% Line 2425
		    apply 'partition3_n'/7
			(I, K, Ts, Keys, L1, L2, T)
	      end
	  %% Line 2427
	  <I,_X_Ts,_X_Key,_X_Keys,L1,L2>
	      when call 'erlang':'=:='
		    (I,
		     1) ->
	      let <_7> =
		  call %% Line 2428
		       'lists':%% Line 2428
			       'reverse'
		      (%% Line 2428
		       L1)
	      in  let <_8> =
		      call %% Line 2428
			   'lists':%% Line 2428
				   'reverse'
			  (%% Line 2428
			   L2)
		  in  %% Line 2428
		      [_7|_8]
	  %% Line 2429
	  <_X_I,_X_Ts,_X_Key,_X_Keys,L1,L2> when 'true' ->
	      let <_9> =
		  call %% Line 2430
		       'lists':%% Line 2430
			       'sort'
		      (%% Line 2430
		       L1)
	      in  let <_10> =
		      call %% Line 2430
			   'lists':%% Line 2430
				   'sort'
			  (%% Line 2430
			   L2)
		  in  %% Line 2430
		      [_9|_10]
	end
'partition3_n'/7 =
    %% Line 2432
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <I,K,Ts,[Key|Keys],L1,L2,T>
	      when call 'erlang':'>'
		    (K,
		     Key) ->
	      %% Line 2433
	      apply 'partition3_n'/7
		  (I, K, Ts, Keys, L1, L2, T)
	  %% Line 2434
	  <I,K,Ts,[Key|Keys],L1,L2,T>
	      when call 'erlang':'=='
		    (K,
		     Key) ->
	      %% Line 2435
	      apply 'partition3_n'/6
		  (I, Ts, Key, Keys, [T|L1], L2)
	  %% Line 2436
	  <I,_X_K,Ts,[Key|Keys],L1,L2,T> when 'true' ->
	      %% Line 2437
	      apply 'partition3_n'/6
		  (I, Ts, Key, Keys, L1, [T|L2])
	  %% Line 2438
	  <I,_X_K,Ts,_X_Keys,L1,L2,T>
	      when call 'erlang':'=:='
		    (I,
		     1) ->
	      let <_7> =
		  call %% Line 2439
		       'lists':%% Line 2439
			       'reverse'
		      (%% Line 2439
		       L1)
	      in  let <_8> =
		      call %% Line 2439
			   'lists':%% Line 2439
				   'reverse'
			  (%% Line 2439
			   L2, %% Line 2439
			       [T|Ts])
		  in  %% Line 2439
		      [_7|_8]
	  %% Line 2440
	  <_X_I,_X_K,Ts,_X_Keys,L1,L2,T> when 'true' ->
	      let <_9> =
		  call %% Line 2441
		       'lists':%% Line 2441
			       'sort'
		      (%% Line 2441
		       L1)
	      in  let <_10> =
		      call %% Line 2441
			   'erlang':%% Line 2441
				    '++'
			  (%% Line 2441
			   Ts, %% Line 2441
			       L2)
		  in  let <_11> =
			  call %% Line 2441
			       'lists':%% Line 2441
				       'sort'
			      (%% Line 2441
			       [T|_10])
		      in  %% Line 2441
			  [_9|_11]
	end
'partition3'/2 =
    %% Line 2443
    fun (_0,_1) ->
	case <_0,_1> of
	  <[Key|Keys],Tuples> when 'true' ->
	      %% Line 2444
	      apply 'partition3'/5
		  (Tuples, Key, Keys, [], [])
	  %% Line 2445
	  <_X_Keys,Tuples> when 'true' ->
	      %% Line 2446
	      apply 'partition3_tail'/3
		  (Tuples, [], [])
	end
'partition3'/5 =
    %% Line 2448
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <[{K,E}|Ts],Key,Keys,L1,L2>
	      when call 'erlang':'<'
		    (K,
		     Key) ->
	      %% Line 2449
	      apply 'partition3'/5
		  (Ts, Key, Keys, L1, [E|L2])
	  %% Line 2450
	  <[{K,E}|Ts],Key,Keys,L1,L2>
	      when call 'erlang':'=='
		    (K,
		     Key) ->
	      %% Line 2451
	      apply 'partition3'/5
		  (Ts, Key, Keys, [E|L1], L2)
	  %% Line 2452
	  <[{K,E}|Ts],_X_Key,Keys,L1,L2> when 'true' ->
	      %% Line 2453
	      apply 'partition3'/6
		  (Ts, K, Keys, L1, L2, E)
	  %% Line 2454
	  <_X_Ts,_X_Key,_X_Keys,L1,L2> when 'true' ->
	      %% Line 2455
	      [L1|L2]
	end
'partition3'/6 =
    %% Line 2457
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <Ts,K,[Key|Keys],L1,L2,E>
	      when call 'erlang':'>'
		    (K,
		     Key) ->
	      %% Line 2458
	      apply 'partition3'/6
		  (Ts, K, Keys, L1, L2, E)
	  %% Line 2459
	  <Ts,K,[Key|Keys],L1,L2,E>
	      when call 'erlang':'=='
		    (K,
		     Key) ->
	      %% Line 2460
	      apply 'partition3'/5
		  (Ts, Key, Keys, [E|L1], L2)
	  %% Line 2461
	  <Ts,_X_K,[Key|Keys],L1,L2,E> when 'true' ->
	      %% Line 2462
	      apply 'partition3'/5
		  (Ts, Key, Keys, L1, [E|L2])
	  %% Line 2463
	  <Ts,_X_K,_X_Keys,L1,L2,E> when 'true' ->
	      %% Line 2464
	      apply 'partition3_tail'/3
		  (Ts, L1, [E|L2])
	end
'partition3_tail'/3 =
    %% Line 2466
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[{_X_K,E}|Ts],L1,L2> when 'true' ->
	      %% Line 2467
	      apply 'partition3_tail'/3
		  (Ts, L1, [E|L2])
	  %% Line 2468
	  <_X_Ts,L1,L2> when 'true' ->
	      %% Line 2469
	      [L1|L2]
	end
'replace'/3 =
    %% Line 2471
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[E|Es],F,L> when 'true' ->
	      let <_3> =
		  apply %% Line 2472
			F
		      (%% Line 2472
		       E)
	      in  %% Line 2472
		  apply 'replace'/3
		      (Es, F, [_3|L])
	  %% Line 2473
	  <_7,_X_F,L> when 'true' ->
	      %% Line 2474
	      call 'lists':'sort'
		  (L)
	end
'mul_relprod'/3 =
    %% Line 2476
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[T = {'Set',_10,_11}|Ts],I,R> when ( 'true'
						-| ['compiler_generated'] ) ->
	      let <P> =
		  apply %% Line 2477
			'raise_element'/2
		      (%% Line 2477
		       R, %% Line 2477
			  I)
	      in  let <F> =
		      apply %% Line 2478
			    'relative_product1'/2
			  (%% Line 2478
			   P, %% Line 2478
			      T)
		  in  let <_5> =
			  call %% Line 2479
			       'erlang':%% Line 2479
					'+'
			      (%% Line 2479
			       I, %% Line 2479
				  1)
		      in  let <_6> =
			      apply %% Line 2479
				    'mul_relprod'/3
				  (%% Line 2479
				   Ts, _5, %% Line 2479
					   R)
			  in  %% Line 2479
			      [F|_6]
	  %% Line 2480
	  <[],_X_I,_X_R> when 'true' ->
	      %% Line 2481
	      []
	  ( <_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7})
		  -| [{'function_name',{'mul_relprod',3}}] )
	    -| ['compiler_generated'] )
	end
'raise_element'/2 =
    %% Line 2483
    fun (_0,_1) ->
	let <_5> =
	    call %% Line 2484
		 'erlang':%% Line 2484
			  '=/='
		(_1, %% Line 2484
		     1)
	in  %% Line 2484
	    ( case _0 of
		( <( {'Set',_rec185,_13}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_4> =
			  apply 'rearr'/3
			      (_rec185, _1, [])
		      in  let <L> =
			      apply 'sort'/2
				  (_5, _4)
			  in  %% Line 2485
			      ( case _0 of
				  ( <( {'Set',_15,_rec186}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_10> =
					    call %% Line 2486
						 'erlang':%% Line 2486
							  'element'
						(_1, _rec186)
					in  %% Line 2486
					    {'Set',L,{_10,_rec186}}
				    -| ['compiler_generated'] )
				  ( <_16> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','Set'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <_14> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','Set'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'rearr'/3 =
    %% Line 2488
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[E|Es],I,L> when 'true' ->
	      let <_3> =
		  call %% Line 2489
		       'erlang':%% Line 2489
				'element'
		      (%% Line 2489
		       I, %% Line 2489
			  E)
	      in  %% Line 2489
		  apply 'rearr'/3
		      (Es, I, [{_3,E}|L])
	  %% Line 2490
	  <[],_X_I,L> when 'true' ->
	      %% Line 2491
	      L
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'rearr',3}}] )
	    -| ['compiler_generated'] )
	end
'join_element'/2 =
    %% Line 2493
    fun (_0,_1) ->
	%% Line 2494
	case call 'erlang':'tuple_to_list'
		 (_1) of
	  <[_7|L2]> when 'true' ->
	      let <_3> =
		  call %% Line 2495
		       'erlang':%% Line 2495
				'tuple_to_list'
		      (_0)
	      in  let <_4> =
		      call %% Line 2495
			   'erlang':%% Line 2495
				    '++'
			  (_3, %% Line 2495
			       L2)
		  in  %% Line 2495
		      call 'erlang':'list_to_tuple'
			  (_4)
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_2})
	    -| ['compiler_generated'] )
	end
'join_element'/3 =
    %% Line 2497
    fun (_0,_1,_2) ->
	let <_5> =
	    call %% Line 2498
		 'erlang':%% Line 2498
			  'tuple_to_list'
		(_0)
	in  let <_3> =
		call %% Line 2498
		     'erlang':%% Line 2498
			      'tuple_to_list'
		    (_1)
	    in  let <_4> =
		    apply %% Line 2498
			  'join_element2'/3
			(_3, %% Line 2498
			     1, _2)
		in  %% Line 2498
		    call 'erlang':'++'
			(_5, _4)
'join_element2'/3 =
    %% Line 2500
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[B|Bs],C,I2>
	      when call 'erlang':'=/='
		    (C,
		     I2) ->
	      let <_3> =
		  call %% Line 2501
		       'erlang':%% Line 2501
				'+'
		      (%% Line 2501
		       C, %% Line 2501
			  1)
	      in  let <_4> =
		      apply %% Line 2501
			    'join_element2'/3
			  (%% Line 2501
			   Bs, _3, %% Line 2501
				   I2)
		  in  %% Line 2501
		      [B|_4]
	  %% Line 2502
	  <[_8|Bs],_X_C,_X_I2> when 'true' ->
	      %% Line 2503
	      Bs
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'join_element2',3}}] )
	    -| ['compiler_generated'] )
	end
'family2rel'/2 =
    %% Line 2505
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{X,S}|F],L> when 'true' ->
	      %% Line 2506
	      apply 'fam2rel'/4
		  (F, L, X, S)
	  %% Line 2507
	  <[],L> when 'true' ->
	      %% Line 2508
	      call 'lists':'reverse'
		  (L)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'family2rel',2}}] )
	    -| ['compiler_generated'] )
	end
'fam2rel'/4 =
    %% Line 2510
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <F,L,X,[Y|Ys]> when 'true' ->
	      %% Line 2511
	      apply 'fam2rel'/4
		  (F, [{X,Y}|L], X, Ys)
	  %% Line 2512
	  <F,L,_X_X,_8> when 'true' ->
	      %% Line 2513
	      apply 'family2rel'/2
		  (F, L)
	end
'fam_spec'/4 =
    %% Line 2515
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[E = {_9,S}|F],Fun,Type,L> when 'true' ->
	      %% Line 2516
	      case apply Fun
		       ({'Set',S,Type}) of
		%% Line 2517
		<'true'> when 'true' ->
		    %% Line 2518
		    apply 'fam_spec'/4
			(F, Fun, Type, [E|L])
		%% Line 2519
		<'false'> when 'true' ->
		    %% Line 2520
		    apply 'fam_spec'/4
			(F, Fun, Type, L)
		%% Line 2521
		<_10> when 'true' ->
		    %% Line 2522
		    'badarg'
	      end
	  %% Line 2524
	  <[],_X_Fun,_X_Type,L> when 'true' ->
	      %% Line 2525
	      call 'lists':'reverse'
		  (L)
	  ( <_8,_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7,_6,_5})
		  -| [{'function_name',{'fam_spec',4}}] )
	    -| ['compiler_generated'] )
	end
'fam_specification'/3 =
    %% Line 2527
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[E = {_7,S}|F],Fun,L> when 'true' ->
	      %% Line 2528
	      case apply Fun
		       (S) of
		%% Line 2529
		<'true'> when 'true' ->
		    %% Line 2530
		    apply 'fam_specification'/3
			(F, Fun, [E|L])
		%% Line 2531
		<'false'> when 'true' ->
		    %% Line 2532
		    apply 'fam_specification'/3
			(F, Fun, L)
		%% Line 2533
		<_8> when 'true' ->
		    %% Line 2534
		    'badarg'
	      end
	  %% Line 2536
	  <[],_X_Fun,L> when 'true' ->
	      %% Line 2537
	      call 'lists':'reverse'
		  (L)
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'fam_specification',3}}] )
	    -| ['compiler_generated'] )
	end
'un_of_fam'/2 =
    %% Line 2539
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{_X_X,S}|F],L> when 'true' ->
	      %% Line 2540
	      apply 'un_of_fam'/2
		  (F, [S|L])
	  %% Line 2541
	  <[],L> when 'true' ->
	      let <_2> =
		  call %% Line 2542
		       'lists':%% Line 2542
			       'sort'
		      (%% Line 2542
		       L)
	      in  %% Line 2542
		  apply 'lunion'/1
		      (_2)
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'un_of_fam',2}}] )
	    -| ['compiler_generated'] )
	end
'int_of_fam'/1 =
    %% Line 2544
    fun (_0) ->
	case _0 of
	  <[{_2,S}|F]> when 'true' ->
	      %% Line 2545
	      apply 'int_of_fam'/2
		  (F, [S|[]])
	  %% Line 2546
	  <[]> when 'true' ->
	      %% Line 2547
	      'badarg'
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'int_of_fam',1}}] )
	    -| ['compiler_generated'] )
	end
'int_of_fam'/2 =
    %% Line 2549
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{_4,S}|F],L> when 'true' ->
	      %% Line 2550
	      apply 'int_of_fam'/2
		  (F, [S|L])
	  %% Line 2551
	  <[],[L|Ls]> when 'true' ->
	      %% Line 2552
	      apply 'lintersection'/2
		  (Ls, L)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'int_of_fam',2}}] )
	    -| ['compiler_generated'] )
	end
'fam_un'/2 =
    %% Line 2554
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{X,S}|F],L> when 'true' ->
	      let <_2> =
		  apply %% Line 2555
			'lunion'/1
		      (%% Line 2555
		       S)
	      in  %% Line 2555
		  apply 'fam_un'/2
		      (F, [{X,_2}|L])
	  %% Line 2556
	  <[],L> when 'true' ->
	      %% Line 2557
	      call 'lists':'reverse'
		  (L)
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'fam_un',2}}] )
	    -| ['compiler_generated'] )
	end
'fam_int'/2 =
    %% Line 2559
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{X,[S|Ss]}|F],L> when 'true' ->
	      let <_2> =
		  apply %% Line 2560
			'lintersection'/2
		      (%% Line 2560
		       Ss, %% Line 2560
			   S)
	      in  %% Line 2560
		  apply 'fam_int'/2
		      (F, [{X,_2}|L])
	  %% Line 2561
	  <[{_X_X,[]}|_X_F],_X_L> when 'true' ->
	      %% Line 2562
	      'badarg'
	  %% Line 2563
	  <[],L> when 'true' ->
	      %% Line 2564
	      call 'lists':'reverse'
		  (L)
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'fam_int',2}}] )
	    -| ['compiler_generated'] )
	end
'fam_dom'/2 =
    %% Line 2566
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{X,S}|F],L> when 'true' ->
	      let <_2> =
		  apply %% Line 2567
			'dom'/1
		      (%% Line 2567
		       S)
	      in  %% Line 2567
		  apply 'fam_dom'/2
		      (F, [{X,_2}|L])
	  %% Line 2568
	  <[],L> when 'true' ->
	      %% Line 2569
	      call 'lists':'reverse'
		  (L)
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'fam_dom',2}}] )
	    -| ['compiler_generated'] )
	end
'fam_ran'/2 =
    %% Line 2571
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{X,S}|F],L> when 'true' ->
	      let <_2> =
		  apply %% Line 2572
			'ran'/2
		      (%% Line 2572
		       S, %% Line 2572
			  [])
	      in  %% Line 2572
		  apply 'fam_ran'/2
		      (F, [{X,_2}|L])
	  %% Line 2573
	  <[],L> when 'true' ->
	      %% Line 2574
	      call 'lists':'reverse'
		  (L)
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'fam_ran',2}}] )
	    -| ['compiler_generated'] )
	end
'fam_union'/3 =
    %% Line 2576
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <F1 = [{A,_X_AS}|_X_AL],[B1 = {B,_X_BS}|BL],L>
	      when call 'erlang':'>'
		    (A,
		     B) ->
	      %% Line 2577
	      apply 'fam_union'/3
		  (F1, BL, [B1|L])
	  %% Line 2578
	  <[{A,AS}|AL],[{B,BS}|BL],L>
	      when call 'erlang':'=='
		    (A,
		     B) ->
	      let <_3> =
		  call %% Line 2579
		       'lists':%% Line 2579
			       'umerge'
		      (%% Line 2579
		       AS, %% Line 2579
			   BS)
	      in  %% Line 2579
		  apply 'fam_union'/3
		      (AL, BL, [{A,_3}|L])
	  %% Line 2580
	  <[A1|AL],F2,L> when 'true' ->
	      %% Line 2581
	      apply 'fam_union'/3
		  (AL, F2, [A1|L])
	  %% Line 2582
	  <_7,F2,L> when 'true' ->
	      %% Line 2583
	      call 'lists':'reverse'
		  (L, F2)
	end
'fam_intersect'/3 =
    %% Line 2585
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <F1 = [{A,_X_AS}|_X_AL],[{B,_X_BS}|BL],L>
	      when call 'erlang':'>'
		    (A,
		     B) ->
	      %% Line 2586
	      apply 'fam_intersect'/3
		  (F1, BL, L)
	  %% Line 2587
	  <[{A,AS}|AL],[{B,BS}|BL],L>
	      when call 'erlang':'=='
		    (A,
		     B) ->
	      let <_3> =
		  apply %% Line 2588
			'intersection'/3
		      (%% Line 2588
		       AS, %% Line 2588
			   BS, %% Line 2588
			       [])
	      in  %% Line 2588
		  apply 'fam_intersect'/3
		      (AL, BL, [{A,_3}|L])
	  %% Line 2589
	  <[_X_A1|AL],F2,L> when 'true' ->
	      %% Line 2590
	      apply 'fam_intersect'/3
		  (AL, F2, L)
	  %% Line 2591
	  <_7,_8,L> when 'true' ->
	      %% Line 2592
	      call 'lists':'reverse'
		  (L)
	end
'fam_difference'/3 =
    %% Line 2594
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <F1 = [{A,_X_AS}|_X_AL],[{B,_X_BS}|BL],L>
	      when call 'erlang':'>'
		    (A,
		     B) ->
	      %% Line 2595
	      apply 'fam_difference'/3
		  (F1, BL, L)
	  %% Line 2596
	  <[{A,AS}|AL],[{B,BS}|BL],L>
	      when call 'erlang':'=='
		    (A,
		     B) ->
	      let <_3> =
		  apply %% Line 2597
			'difference'/3
		      (%% Line 2597
		       AS, %% Line 2597
			   BS, %% Line 2597
			       [])
	      in  %% Line 2597
		  apply 'fam_difference'/3
		      (AL, BL, [{A,_3}|L])
	  %% Line 2598
	  <[A1|AL],F2,L> when 'true' ->
	      %% Line 2599
	      apply 'fam_difference'/3
		  (AL, F2, [A1|L])
	  %% Line 2600
	  <F1,_7,L> when 'true' ->
	      %% Line 2601
	      call 'lists':'reverse'
		  (L, F1)
	end
'check_function'/2 =
    %% Line 2603
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{X,_4}|XL],R> when 'true' ->
	      %% Line 2604
	      apply 'check_function'/3
		  (X, XL, R)
	  %% Line 2605
	  <[],R> when 'true' ->
	      %% Line 2606
	      R
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'check_function',2}}] )
	    -| ['compiler_generated'] )
	end
'check_function'/3 =
    %% Line 2608
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <X0,[{X,_6}|XL],R>
	      when call 'erlang':'/='
		    (X0,
		     X) ->
	      %% Line 2609
	      apply 'check_function'/3
		  (X, XL, R)
	  %% Line 2610
	  <X0,[{X,_7}|_X_XL],_X_R>
	      when call 'erlang':'=='
		    (X0,
		     X) ->
	      %% Line 2611
	      'bad_function'
	  %% Line 2612
	  <_X_X0,[],R> when 'true' ->
	      %% Line 2613
	      R
	  ( <_5,_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4,_3})
		  -| [{'function_name',{'check_function',3}}] )
	    -| ['compiler_generated'] )
	end
'fam_partition_n'/2 =
    %% Line 2615
    fun (_0,_1) ->
	case <_0,_1> of
	  <I,[E|Ts]> when 'true' ->
	      let <_2> =
		  call %% Line 2616
		       'erlang':%% Line 2616
				'element'
		      (%% Line 2616
		       I, %% Line 2616
			  E)
	      in  %% Line 2616
		  apply 'fam_partition_n'/5
		      (I, Ts, _2, [E|[]], [])
	  %% Line 2617
	  <_X_I,[]> when 'true' ->
	      %% Line 2618
	      []
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'fam_partition_n',2}}] )
	    -| ['compiler_generated'] )
	end
'fam_partition_n'/5 =
    %% Line 2620
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <I,[E|Ts],K,Es,P> when 'true' ->
	      let <_5> =
		  call %% Line 2621
		       'erlang':%% Line 2621
				'element'
		      (%% Line 2621
		       I, %% Line 2621
			  E)
	      in  %% Line 2621
		  case <_5,Es> of
		    %% Line 2622
		    <K1,_14>
			when call 'erlang':'=='
			      (K,
			       K1) ->
			%% Line 2623
			apply 'fam_partition_n'/5
			    (I, Ts, K, [E|Es], P)
		    %% Line 2624
		    <K1,( [_15|( []
				 -| ['compiler_generated'] )]
			  -| ['compiler_generated'] )> when 'true' ->
			%% Line 2625
			apply 'fam_partition_n'/5
			    (I, Ts, K1, [E|[]], [{K,Es}|P])
		    %% Line 2626
		    <K1,_16> when 'true' ->
			let <_6> =
			    call %% Line 2627
				 'lists':%% Line 2627
					 'reverse'
				(%% Line 2627
				 Es)
			in  %% Line 2627
			    apply 'fam_partition_n'/5
				(I, Ts, K1, [E|[]], [{K,_6}|P])
		  end
	  %% Line 2629
	  <_X_I,[],K,Es = [_17|[]],P> when 'true' ->
	      %% Line 2630
	      call 'lists':'reverse'
		  (P, [{K,Es}|[]])
	  %% Line 2631
	  <_X_I,[],K,Es,P> when 'true' ->
	      let <_8> =
		  call %% Line 2632
		       'lists':%% Line 2632
			       'reverse'
		      (%% Line 2632
		       Es)
	      in  %% Line 2632
		  call 'lists':'reverse'
		      (P, [{K,_8}|[]])
	  ( <_13,_12,_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12,_11,_10,_9})
		  -| [{'function_name',{'fam_partition_n',5}}] )
	    -| ['compiler_generated'] )
	end
'fam_partition'/2 =
    %% Line 2634
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{K,Vs}|Ts],Sort> when 'true' ->
	      %% Line 2635
	      apply 'fam_partition'/5
		  (Ts, K, [Vs|[]], [], Sort)
	  %% Line 2636
	  <[],_X_Sort> when 'true' ->
	      %% Line 2637
	      []
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'fam_partition',2}}] )
	    -| ['compiler_generated'] )
	end
'fam_partition'/5 =
    %% Line 2639
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <[{K1,V}|Ts],K,Vs,P,S>
	      when call 'erlang':'=='
		    (K1,
		     K) ->
	      %% Line 2640
	      apply 'fam_partition'/5
		  (Ts, K, [V|Vs], P, S)
	  %% Line 2641
	  <[{K1,V}|Ts],K,Vs = [_12|[]],P,S> when 'true' ->
	      %% Line 2642
	      apply 'fam_partition'/5
		  (Ts, K1, [V|[]], [{K,Vs}|P], S)
	  %% Line 2643
	  <[{K1,V}|Ts],K,Vs,P,S> when 'true' ->
	      let <_5> =
		  apply %% Line 2644
			'sort'/2
		      (%% Line 2644
		       S, %% Line 2644
			  Vs)
	      in  %% Line 2644
		  apply 'fam_partition'/5
		      (Ts, K1, [V|[]], [{K,_5}|P], S)
	  %% Line 2645
	  <[],K,Vs = [_13|[]],P,_X_S> when 'true' ->
	      %% Line 2646
	      [{K,Vs}|P]
	  %% Line 2647
	  <[],K,Vs,P,S> when 'true' ->
	      let <_6> =
		  apply %% Line 2648
			'sort'/2
		      (%% Line 2648
		       S, %% Line 2648
			  Vs)
	      in  %% Line 2648
		  [{K,_6}|P]
	  ( <_11,_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8,_7})
		  -| [{'function_name',{'fam_partition',5}}] )
	    -| ['compiler_generated'] )
	end
'fam_proj'/5 =
    %% Line 2650
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <[{X,S}|F],Fun,Type,NType,L> when 'true' ->
	      %% Line 2651
	      case apply 'setfun'/4
		       (S, Fun, Type, NType) of
		%% Line 2652
		<{SD,ST}> when 'true' ->
		    apply 'fam_proj'/5
			(F, Fun, Type, ST, [{X,SD}|L])
		%% Line 2653
		<Bad> when 'true' ->
		    Bad
	      end
	  %% Line 2655
	  <[],_X_Fun,_X_Type,NType,L> when 'true' ->
	      let <_6> =
		  call %% Line 2656
		       'lists':%% Line 2656
			       'reverse'
		      (%% Line 2656
		       L)
	      in  %% Line 2656
		  {_6,NType}
	  ( <_11,_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8,_7})
		  -| [{'function_name',{'fam_proj',5}}] )
	    -| ['compiler_generated'] )
	end
'setfun'/4 =
    %% Line 2658
    fun (_0,_1,_2,_3) ->
	let <_4> =
	    case <_0,_2> of
	      %% Line 2675
	      ( <L,_37>
		    when ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'is_list'
							     -| ['compiler_generated'] )
			    (L)
			-| ['compiler_generated'] ) ->
		    %% Line 2676
		    ( {( 'Set'
			 -| ['compiler_generated'] ),L,_37}
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	      %% Line 2677
	      ( <_38,_39> when ( 'true'
				 -| ['compiler_generated'] ) ->
		    %% Line 2678
		    ( {( 'OrdSet'
			 -| ['compiler_generated'] ),_38,_39}
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	in  %% Line 2659
	    case apply _1
		     (_4) of
	      %% Line 2660
	      <NS = {'Set',_21,_22}> when ( 'true'
					    -| ['compiler_generated'] ) ->
		  %% Line 2661
		  ( case NS of
		      ( <( {'Set',_23,_rec187}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_41> =
				[_rec187|( []
					   -| ['compiler_generated'] )]
			    in  case %% Line 2758
				     ( case <_3,_41> of
					 ( <_42,_43>
					       when ( call ( 'erlang'
							  -| ['compiler_generated'] ):( '=:='
											-| ['compiler_generated'] )
						       (_43,
							_42)
						   -| ['compiler_generated'] ) ->
					       _42
					   -| ['compiler_generated'] )
					 %% Line 2759
					 ( <Type1,Type2> when ( 'true'
								-| ['compiler_generated'] ) ->
					       ( catch
						     %% Line 2760
						     ( apply 'unify_types1'/2
							   (Type1, Type2)
						       -| ['compiler_generated'] )
						 -| ['compiler_generated'] )
					   -| ['compiler_generated'] )
				       end
				       -| ['compiler_generated'] ) of
				  %% Line 2662
				  <[]> when 'true' ->
				      'type_mismatch'
				  %% Line 2663
				  <NT> when 'true' ->
				      ( case NS of
					  ( <( {'Set',_rec188,_25}
					       -| ['compiler_generated'] )> when 'true' ->
						{_rec188,NT}
					    -| ['compiler_generated'] )
					  ( <_26> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','Set'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				end
			-| ['compiler_generated'] )
		      ( <_24> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','Set'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 2665
	      <NS = {'OrdSet',_27,_28}> when ( 'true'
					       -| ['compiler_generated'] ) ->
		  %% Line 2666
		  ( case NS of
		      ( <( {'OrdSet',_29,_rec189}
			   -| ['compiler_generated'] )> when 'true' ->
			    case %% Line 2758
				 ( case <_3,_rec189> of
				     ( <_46,_47>
					   when ( call ( 'erlang'
						      -| ['compiler_generated'] ):( '=:='
										    -| ['compiler_generated'] )
						   (_47,
						    _46)
					       -| ['compiler_generated'] ) ->
					   _46
				       -| ['compiler_generated'] )
				     %% Line 2759
				     ( <Type1,Type2> when ( 'true'
							    -| ['compiler_generated'] ) ->
					   ( catch
						 %% Line 2760
						 ( apply 'unify_types1'/2
						       (Type1, Type2)
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
				       -| ['compiler_generated'] )
				   end
				   -| ['compiler_generated'] ) of
			      %% Line 2667
			      <[]> when 'true' ->
				  'type_mismatch'
			      %% Line 2668
			      <_31>
				  when call 'erlang':'=:='
					(_31,
					 _rec189) ->
				  ( case NS of
				      ( <( {'OrdSet',_rec190,_32}
					   -| ['compiler_generated'] )> when 'true' ->
					    {_rec190,_rec189}
					-| ['compiler_generated'] )
				      ( <_33> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','OrdSet'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      ( <_15> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_15})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_30> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','OrdSet'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 2670
	      <_34> when 'true' ->
		  %% Line 2671
		  'badarg'
	    end
'term2set'/2 =
    %% Line 2675
    fun (_0,_1) ->
	case <_0,_1> of
	  <L,Type>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 2676
	      {'Set',L,Type}
	  %% Line 2677
	  <T,Type> when 'true' ->
	      %% Line 2678
	      {'OrdSet',T,Type}
	end
'fam2digraph'/2 =
    %% Line 2680
    fun (_0,_1) ->
	let <Fun> =
	    fun (_6) ->
		%% Line 2681
		case _6 of
		  <{From,ToL}> when 'true' ->
		      do  %% Line 2682
			  call 'digraph':'add_vertex'
			      (_1, From)
			  let <Fun2> =
			      fun (_3) ->
				  do  %% Line 2684
				      call 'digraph':'add_vertex'
					  (_1, _3)
				      %% Line 2685
				      case call 'digraph':'add_edge'
					       (_1, From, _3) of
					%% Line 2686
					<{'error',{'bad_edge',_12}}> when 'true' ->
					    %% Line 2687
					    call 'erlang':'throw'
						({'error','cyclic'})
					%% Line 2688
					<_13> when 'true' ->
					    %% Line 2689
					    'true'
				      end
			  in  %% Line 2692
			      call 'lists':'foreach'
				  (Fun2, ToL)
		  ( <_7> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_7})
			  -| [{'function_name',{'-fam2digraph/2-fun-1-',1}}] )
		    -| ['compiler_generated'] )
		end
	in  let <_9> =
		apply %% Line 2694
		      'to_external'/1
		    (_0)
	    in  do  %% Line 2694
		    call 'lists':'foreach'
			(Fun, _9)
		    _1
'digraph_family'/1 =
    %% Line 2697
    fun (_0) ->
	let <_1> =
	    call %% Line 2698
		 'digraph':%% Line 2698
			   'vertices'
		(_0)
	in  let <Vs> =
		call %% Line 2698
		     'lists':%% Line 2698
			     'sort'
		    (_1)
	    in  %% Line 2699
		apply 'digraph_fam'/4
		    (Vs, Vs, _0, [])
'digraph_fam'/4 =
    %% Line 2701
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[V|Vs],V0,G,L>
	      when call 'erlang':'/='
		    (V,
		     V0) ->
	      let <_4> =
		  call %% Line 2702
		       'digraph':%% Line 2702
				 'out_neighbours'
		      (%% Line 2702
		       G, %% Line 2702
			  V)
	      in  let <Ns> =
		      call %% Line 2702
			   'lists':%% Line 2702
				   'sort'
			  (_4)
		  in  %% Line 2703
		      apply 'digraph_fam'/4
			  (Vs, V, G, [{V,Ns}|L])
	  %% Line 2704
	  <[],_X_V0,_X_G,L> when 'true' ->
	      %% Line 2705
	      call 'lists':'reverse'
		  (L)
	  ( <_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6})
		  -| [{'function_name',{'digraph_fam',4}}] )
	    -| ['compiler_generated'] )
	end
'check_fun'/3 =
    %% Line 2708
    fun (_0,_1,_2) ->
	%% Line 2709
	case apply 'is_type'/1
		 (_2) of
	  <'true'> when 'true' ->
	      %% Line 2710
	      case apply 'number_tuples'/2
		       (_0, 1) of
		<{NT,_X_MaxI}> when 'true' ->
		    let <_5> =
			apply _1
			    (%% Line 2711
			     NT)
		    in  let <_6> =
			    apply %% Line 2711
				  'tuple2list'/1
				(_5)
			in  let <L> =
				call %% Line 2711
				     'lists':%% Line 2711
					     'flatten'
				    (_6)
			    in  %% Line 2712
				apply 'has_hole'/2
				    (L, 1)
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_3})
	    -| ['compiler_generated'] )
	end
'number_tuples'/2 =
    %% Line 2714
    fun (_0,_1) ->
	case <_0,_1> of
	  <T,N>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_3> = 'number_tuples'/2
	      in  let <_2> =
		      call %% Line 2715
			   'erlang':%% Line 2715
				    'tuple_to_list'
			  (%% Line 2715
			   T)
		  in  %% Line 2715
		      case call 'lists':'mapfoldl'
			       (_3, N, _2) of
			<{L,NN}> when 'true' ->
			    let <_5> =
				call %% Line 2716
				     'erlang':%% Line 2716
					      'list_to_tuple'
				    (%% Line 2716
				     L)
			    in  %% Line 2716
				{_5,NN}
			( <_4> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_4})
			  -| ['compiler_generated'] )
		      end
	  %% Line 2717
	  <_9,N> when 'true' ->
	      let <_6> =
		  call %% Line 2718
		       'erlang':%% Line 2718
				'+'
		      (%% Line 2718
		       N, %% Line 2718
			  1)
	      in  %% Line 2718
		  {N,_6}
	end
'tuple2list'/1 =
    %% Line 2720
    fun (_0) ->
	case _0 of
	  <T>
	      when call 'erlang':'is_tuple'
		    (_0) ->
	      let <_2> = 'tuple2list'/1
	      in  let <_1> =
		      call %% Line 2721
			   'erlang':%% Line 2721
				    'tuple_to_list'
			  (%% Line 2721
			   T)
		  in  %% Line 2721
		      call 'lists':'map'
			  (_2, _1)
	  %% Line 2722
	  <C> when 'true' ->
	      %% Line 2723
	      [C|[]]
	end
'has_hole'/2 =
    %% Line 2725
    fun (_0,_1) ->
	case <_0,_1> of
	  <[I|Is],I0>
	      when call 'erlang':'=<'
		    (I,
		     I0) ->
	      let <_2> =
		  call 'erlang':'+'
		      (I, 1)
	      in  let <_3> =
		      call 'erlang':'max'
			  (_2, I0)
		  in  apply 'has_hole'/2
			  (Is, _3)
	  %% Line 2726
	  <Is,_X_I> when 'true' ->
	      call 'erlang':'=/='
		  (Is, [])
	end
'check_for_sort'/2 =
    %% Line 2729
    fun (_0,_1) ->
	case <_0,_1> of
	  <T,_X_I>
	      when call 'erlang':'=:='
		    (T,
		     '_') ->
	      %% Line 2730
	      'empty'
	  %% Line 2731
	  <T,I>
	      when try
		    let <_2> =
			call 'erlang':'is_tuple'
			    (T)
		    in  let <_3> =
			    call 'erlang':'tuple_size'
				(T)
			in  let <_4> =
				call 'erlang':'=<'
				    (I, _3)
			    in  let <_5> =
				    call 'erlang':'>='
					(I, 1)
				in  let <_6> =
					call 'erlang':'and'
					    (_4, _5)
				    in  call 'erlang':'and'
					    (_2, _6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2732
	      call 'erlang':'>'
		  (I, 1)
	  %% Line 2733
	  <_X_T,_X_I> when 'true' ->
	      %% Line 2734
	      'error'
	end
'inverse_substitution'/3 =
    %% Line 2736
    fun (_0,_1,_2) ->
	let <_3> =
	    apply %% Line 2740
		  'fun_rearr'/3
		(_0, _1, %% Line 2740
			 [])
	in  %% Line 2740
	    apply 'sort'/2
		(_2, _3)
'fun_rearr'/3 =
    %% Line 2742
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[E|Es],Fun,L> when 'true' ->
	      let <_3> =
		  apply %% Line 2743
			Fun
		      (%% Line 2743
		       E)
	      in  %% Line 2743
		  apply 'fun_rearr'/3
		      (Es, Fun, [{_3,E}|L])
	  %% Line 2744
	  <[],_X_Fun,L> when 'true' ->
	      %% Line 2745
	      L
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'fun_rearr',3}}] )
	    -| ['compiler_generated'] )
	end
'sets_to_list'/1 =
    %% Line 2747
    fun (_0) ->
	let <_4> =
	    fun (_2) ->
		%% Line 2748
		case _2 of
		  <S = {'Set',_6,_7}> when ( 'true'
					     -| ['compiler_generated'] ) ->
		      ( case S of
			  ( <( {'Set',_rec191,_8}
			       -| ['compiler_generated'] )> when 'true' ->
				_rec191
			    -| ['compiler_generated'] )
			  ( <_9> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','Set'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  ( <_3> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_3})
			  -| [{'function_name',{'-sets_to_list/1-fun-0-',1}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 2748
	    call 'lists':'map'
		(_4, _0)
'types'/2 =
    %% Line 2750
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],L> when 'true' ->
	      let <_2> =
		  call %% Line 2751
		       'lists':%% Line 2751
			       'reverse'
		      (%% Line 2751
		       L)
	      in  %% Line 2751
		  call 'erlang':'list_to_tuple'
		      (_2)
	  %% Line 2752
	  <[S = {'Set',_13,_14}|_X_Ss],_X_L>
	      when ( try
		      let <_7> =
			  call 'erlang':'element'
			      (3, S)
		      in  call 'erlang':'=:='
			      (_7, '_')
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 2753
	      '_'
	  %% Line 2754
	  <[S|Ss],L> when 'true' ->
	      %% Line 2755
	      ( case S of
		  ( <( {'Set',_15,_rec192}
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'types'/2
			    (Ss, [_rec192|L])
		    -| ['compiler_generated'] )
		  ( <_16> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11})
		  -| [{'function_name',{'types',2}}] )
	    -| ['compiler_generated'] )
	end
'unify_types'/2 =
    %% Line 2758
    fun (_0,_1) ->
	case <_0,_1> of
	  <T,_4>
	      when call 'erlang':'=:='
		    (_4,
		     T) ->
	      T
	  %% Line 2759
	  <Type1,Type2> when 'true' ->
	      catch
		  %% Line 2760
		  apply 'unify_types1'/2
		      (Type1, Type2)
	end
'unify_types1'/2 =
    %% Line 2762
    fun (_0,_1) ->
	case <_0,_1> of
	  <Atom,_8>
	      when let <_9> =
		    call 'erlang':'=:='
			(_8, Atom)
		in  let <_10> =
			call 'erlang':'is_atom'
			    (Atom)
		    in  call 'erlang':'and'
			    (_9, _10) ->
	      %% Line 2763
	      Atom
	  %% Line 2764
	  <'_',Type> when 'true' ->
	      %% Line 2765
	      Type
	  %% Line 2766
	  <Type,'_'> when 'true' ->
	      %% Line 2767
	      Type
	  %% Line 2768
	  <[Type1|[]],[Type2|[]]> when 'true' ->
	      let <_2> =
		  apply %% Line 2769
			'unify_types1'/2
		      (%% Line 2769
		       Type1, %% Line 2769
			      Type2)
	      in  %% Line 2769
		  [_2|[]]
	  %% Line 2770
	  <T1,T2>
	      when try
		    let <_4> =
			call 'erlang':'tuple_size'
			    (T1)
		    in  let <_3> =
			    call 'erlang':'tuple_size'
				(T2)
			in  call 'erlang':'=:='
				(_4, _3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_5> =
		  call %% Line 2771
		       'erlang':%% Line 2771
				'tuple_size'
		      (%% Line 2771
		       T1)
	      in  %% Line 2771
		  apply 'unify_typesl'/4
		      (_5, T1, T2, [])
	  %% Line 2772
	  <_X_T1,_X_T2> when 'true' ->
	      %% Line 2773
	      call 'erlang':'throw'
		  ([])
	end
'unify_typesl'/4 =
    %% Line 2775
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <0,_X_T1,_X_T2,L> when 'true' ->
	      %% Line 2776
	      call 'erlang':'list_to_tuple'
		  (L)
	  %% Line 2777
	  <N,T1,T2,L> when 'true' ->
	      let <_5> =
		  call %% Line 2778
		       'erlang':%% Line 2778
				'element'
		      (%% Line 2778
		       N, %% Line 2778
			  T1)
	      in  let <_4> =
		      call %% Line 2778
			   'erlang':%% Line 2778
				    'element'
			  (%% Line 2778
			   N, %% Line 2778
			      T2)
		  in  let <T> =
			  apply %% Line 2778
				'unify_types1'/2
			      (_5, _4)
		      in  let <_7> =
			      call %% Line 2779
				   'erlang':%% Line 2779
					    '-'
				  (%% Line 2779
				   N, %% Line 2779
				      1)
			  in  %% Line 2779
			      apply 'unify_typesl'/4
				  (_7, T1, T2, [T|L])
	end
'match_types'/2 =
    %% Line 2782
    fun (_0,_1) ->
	case <_0,_1> of
	  <T,_4>
	      when call 'erlang':'=:='
		    (_4,
		     T) ->
	      'true'
	  %% Line 2783
	  <Type1,Type2> when 'true' ->
	      apply 'match_types1'/2
		  (Type1, Type2)
	end
'match_types1'/2 =
    %% Line 2785
    fun (_0,_1) ->
	case <_0,_1> of
	  <Atom,_7>
	      when let <_8> =
		    call 'erlang':'=:='
			(_7, Atom)
		in  let <_9> =
			call 'erlang':'is_atom'
			    (Atom)
		    in  call 'erlang':'and'
			    (_8, _9) ->
	      %% Line 2786
	      'true'
	  %% Line 2787
	  <'_',_10> when 'true' ->
	      %% Line 2788
	      'true'
	  %% Line 2789
	  <_11,'_'> when 'true' ->
	      %% Line 2790
	      'true'
	  %% Line 2791
	  <[Type1|[]],[Type2|[]]> when 'true' ->
	      %% Line 2792
	      apply 'match_types1'/2
		  (Type1, Type2)
	  %% Line 2793
	  <T1,T2>
	      when try
		    let <_3> =
			call 'erlang':'tuple_size'
			    (T1)
		    in  let <_2> =
			    call 'erlang':'tuple_size'
				(T2)
			in  call 'erlang':'=:='
				(_3, _2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_4> =
		  call %% Line 2794
		       'erlang':%% Line 2794
				'tuple_size'
		      (%% Line 2794
		       T1)
	      in  %% Line 2794
		  apply 'match_typesl'/3
		      (_4, T1, T2)
	  %% Line 2795
	  <_X_T1,_X_T2> when 'true' ->
	      %% Line 2796
	      'false'
	end
'match_typesl'/3 =
    %% Line 2798
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <0,_X_T1,_X_T2> when 'true' ->
	      %% Line 2799
	      'true'
	  %% Line 2800
	  <N,T1,T2> when 'true' ->
	      let <_4> =
		  call %% Line 2801
		       'erlang':%% Line 2801
				'element'
		      (%% Line 2801
		       N, %% Line 2801
			  T1)
	      in  let <_3> =
		      call %% Line 2801
			   'erlang':%% Line 2801
				    'element'
			  (%% Line 2801
			   N, %% Line 2801
			      T2)
		  in  %% Line 2801
		      case apply 'match_types1'/2
			       (_4, _3) of
			%% Line 2802
			<'true'> when 'true' ->
			    let <_5> =
				call 'erlang':'-'
				    (N, 1)
			    in  apply 'match_typesl'/3
				    (_5, T1, T2)
			%% Line 2803
			<'false'> when 'true' ->
			    'false'
			( <_6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_6})
			  -| ['compiler_generated'] )
		      end
	end
'sort'/2 =
    %% Line 2806
    fun (_0,_1) ->
	case <_0,_1> of
	  <'true',L> when 'true' ->
	      %% Line 2807
	      call 'lists':'sort'
		  (L)
	  %% Line 2808
	  <'false',L> when 'true' ->
	      %% Line 2809
	      call 'lists':'reverse'
		  (L)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'sort',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('sofs')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('sofs', _0)
end