module 'random' ['module_info'/0,
		 'module_info'/1,
		 'seed'/0,
		 'seed'/1,
		 'seed'/3,
		 'seed0'/0,
		 'uniform'/0,
		 'uniform'/1,
		 'uniform_s'/1,
		 'uniform_s'/2]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[114|[97|[110|[100|[111|[109|[46|[101|[114|[108]]]]]]]]]]]]]],1}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{'ran',{'type',37,'tuple',[{'type',37,'integer',[]}|[{'type',37,'integer',[]}|[{'type',37,'integer',[]}]]]},[]}],
		%% Line 41
		'spec' =
		    %% Line 41
		    [{{'seed0',0},[{'type',41,'fun',[{'type',41,'product',[]}|[{'user_type',41,'ran',[]}]]}]}],
		%% Line 49
		'spec' =
		    %% Line 49
		    [{{'seed',0},[{'type',49,'fun',[{'type',49,'product',[]}|[{'user_type',49,'ran',[]}]]}]}],
		%% Line 61
		'spec' =
		    %% Line 61
		    [{{'seed',1},[{'type',61,'bounded_fun',[{'type',61,'fun',[{'type',61,'product',[{'var',61,'SValue'}]}|[{'type',61,'union',[{'atom',61,'undefined'}|[{'user_type',61,'ran',[]}]]}]]}|[[{'type',62,'constraint',[{'atom',62,'is_subtype'}|[[{'var',62,'SValue'}|[{'type',62,'union',[{'type',62,'tuple',[{'var',62,'A1'}|[{'var',62,'A2'}|[{'var',62,'A3'}]]]}|[{'type',62,'integer',[]}]]}]]]]}|[{'type',63,'constraint',[{'atom',63,'is_subtype'}|[[{'var',63,'A1'}|[{'type',63,'integer',[]}]]]]}|[{'type',64,'constraint',[{'atom',64,'is_subtype'}|[[{'var',64,'A2'}|[{'type',64,'integer',[]}]]]]}|[{'type',65,'constraint',[{'atom',65,'is_subtype'}|[[{'var',65,'A3'}|[{'type',65,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 78
		'spec' =
		    %% Line 78
		    [{{'seed',3},[{'type',78,'bounded_fun',[{'type',78,'fun',[{'type',78,'product',[{'var',78,'A1'}|[{'var',78,'A2'}|[{'var',78,'A3'}]]]}|[{'type',78,'union',[{'atom',78,'undefined'}|[{'user_type',78,'ran',[]}]]}]]}|[[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'A1'}|[{'type',79,'integer',[]}]]]]}|[{'type',80,'constraint',[{'atom',80,'is_subtype'}|[[{'var',80,'A2'}|[{'type',80,'integer',[]}]]]]}|[{'type',81,'constraint',[{'atom',81,'is_subtype'}|[[{'var',81,'A3'}|[{'type',81,'integer',[]}]]]]}]]]]]}]}],
		%% Line 89
		'spec' =
		    %% Line 89
		    [{{'seed_put',1},[{'type',89,'fun',[{'type',89,'product',[{'user_type',89,'ran',[]}]}|[{'type',89,'union',[{'atom',89,'undefined'}|[{'user_type',89,'ran',[]}]]}]]}]}],
		%% Line 97
		'spec' =
		    %% Line 97
		    [{{'uniform',0},[{'type',97,'fun',[{'type',97,'product',[]}|[{'type',97,'float',[]}]]}]}],
		%% Line 115
		'spec' =
		    %% Line 115
		    [{{'uniform',1},[{'type',115,'bounded_fun',[{'type',115,'fun',[{'type',115,'product',[{'var',115,'N'}]}|[{'type',115,'pos_integer',[]}]]}|[[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'N'}|[{'type',116,'pos_integer',[]}]]]]}]]]}]}],
		%% Line 127
		'spec' =
		    %% Line 127
		    [{{'uniform_s',1},[{'type',127,'bounded_fun',[{'type',127,'fun',[{'type',127,'product',[{'var',127,'State0'}]}|[{'type',127,'tuple',[{'type',127,'float',[]}|[{'var',127,'State1'}]]}]]}|[[{'type',128,'constraint',[{'atom',128,'is_subtype'}|[[{'var',128,'State0'}|[{'user_type',128,'ran',[]}]]]]}|[{'type',129,'constraint',[{'atom',129,'is_subtype'}|[[{'var',129,'State1'}|[{'user_type',129,'ran',[]}]]]]}]]]]}]}],
		%% Line 142
		'spec' =
		    %% Line 142
		    [{{'uniform_s',2},[{'type',142,'bounded_fun',[{'type',142,'fun',[{'type',142,'product',[{'var',142,'N'}|[{'var',142,'State0'}]]}|[{'type',142,'tuple',[{'type',142,'integer',[]}|[{'var',142,'State1'}]]}]]}|[[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'N'}|[{'type',143,'pos_integer',[]}]]]]}|[{'type',144,'constraint',[{'atom',144,'is_subtype'}|[[{'var',144,'State0'}|[{'user_type',144,'ran',[]}]]]]}|[{'type',145,'constraint',[{'atom',145,'is_subtype'}|[[{'var',145,'State1'}|[{'user_type',145,'ran',[]}]]]]}]]]]]}]}]]
'seed0'/0 =
    %% Line 43
    fun () ->
	%% Line 44
	{3172,9814,20125}
'seed'/0 =
    %% Line 51
    fun () ->
	let <_0> =
	    apply %% Line 52
		  'seed0'/0
		()
	in  %% Line 52
	    case apply 'seed_put'/1
		     (_0) of
	      %% Line 53
	      <'undefined'> when 'true' ->
		  apply 'seed0'/0
		      ()
	      %% Line 54
	      <Tuple = {_2,_3,_4}> when 'true' ->
		  Tuple
	      ( <_1> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_1})
		-| ['compiler_generated'] )
	    end
'seed'/1 =
    %% Line 67
    fun (_0) ->
	case _0 of
	  <Int>
	      when call 'erlang':'is_integer'
		    (_0) ->
	      let <_1> =
		  call %% Line 68
		       'erlang':%% Line 68
				'bsr'
		      (%% Line 68
		       Int, %% Line 68
			    16)
	      in  let <A1> =
		      call %% Line 68
			   'erlang':%% Line 68
				    'band'
			  (_1, %% Line 68
			       268435455)
		  in  let <A2> =
			  call %% Line 69
			       'erlang':%% Line 69
					'band'
			      (%% Line 69
			       Int, %% Line 69
				    16777215)
		      in  let <_5> =
			      call %% Line 70
				   'erlang':%% Line 70
					    'bsr'
				  (%% Line 70
				   Int, %% Line 70
					36)
			  in  let <_4> =
				  call %% Line 70
				       'erlang':%% Line 70
						'bsr'
				      (%% Line 70
				       A2, %% Line 70
					   16)
			      in  let <A3> =
				      call %% Line 70
					   'erlang':%% Line 70
						    'bor'
					  (_5, _4)
				  in  %% Line 71
				      apply 'seed'/3
					  (A1, A2, A3)
	  %% Line 72
	  <{A1,A2,A3}> when 'true' ->
	      %% Line 73
	      apply 'seed'/3
		  (A1, A2, A3)
	  ( <_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7})
		  -| [{'function_name',{'seed',1}}] )
	    -| ['compiler_generated'] )
	end
'seed'/3 =
    %% Line 83
    fun (_0,_1,_2) ->
	let <_12> =
	    call %% Line 84
		 'erlang':%% Line 84
			  'abs'
		(_0)
	in  let <_13> =
		call %% Line 84
		     'erlang':%% Line 84
			      'rem'
		    (_12, %% Line 84
			  30268)
	    in  let <_14> =
		    call %% Line 84
			 'erlang':%% Line 84
				  '+'
			(_13, %% Line 84
			      1)
		in  let <_8> =
			call %% Line 85
			     'erlang':%% Line 85
				      'abs'
			    (_1)
		    in  let <_9> =
			    call %% Line 85
				 'erlang':%% Line 85
					  'rem'
				(_8, %% Line 85
				     30306)
			in  let <_10> =
				call %% Line 85
				     'erlang':%% Line 85
					      '+'
				    (_9, %% Line 85
					 1)
			    in  let <_4> =
				    call %% Line 86
					 'erlang':%% Line 86
						  'abs'
					(_2)
				in  let <_5> =
					call %% Line 86
					     'erlang':%% Line 86
						      'rem'
					    (_4, %% Line 86
						 30322)
				    in  let <_6> =
					    call %% Line 86
						 'erlang':%% Line 86
							  '+'
						(_5, %% Line 86
						     1)
					in  %% Line 84
					    apply 'seed_put'/1
						({_14,_10,_6})
'seed_put'/1 =
    %% Line 91
    fun (_0) ->
	%% Line 92
	call 'erlang':'put'
	    ('random_seed', _0)
'uniform'/0 =
    %% Line 99
    fun () ->
	let <_1> =
	    case %% Line 100
		 call 'erlang':'get'
		     ('random_seed') of
	      %% Line 101
	      <'undefined'> when 'true' ->
		  apply 'seed0'/0
		      ()
	      %% Line 102
	      <Tuple> when 'true' ->
		  Tuple
	    end
	in  %% Line 100
	    case _1 of
	      <{A1,A2,A3}> when 'true' ->
		  let <_3> =
		      call %% Line 104
			   'erlang':%% Line 104
				    '*'
			  (%% Line 104
			   A1, %% Line 104
			       171)
		  in  let <B1> =
			  call %% Line 104
			       'erlang':%% Line 104
					'rem'
			      (_3, %% Line 104
				   30269)
		      in  let <_5> =
			      call %% Line 105
				   'erlang':%% Line 105
					    '*'
				  (%% Line 105
				   A2, %% Line 105
				       172)
			  in  let <B2> =
				  call %% Line 105
				       'erlang':%% Line 105
						'rem'
				      (_5, %% Line 105
					   30307)
			      in  let <_7> =
				      call %% Line 106
					   'erlang':%% Line 106
						    '*'
					  (%% Line 106
					   A3, %% Line 106
					       170)
				  in  let <B3> =
					  call %% Line 106
					       'erlang':%% Line 106
							'rem'
					      (_7, %% Line 106
						   30323)
				      in  do  %% Line 107
					      call 'erlang':'put'
						  ('random_seed', {B1,B2,B3})
					      let <_11> =
						  call %% Line 108
						       'erlang':%% Line 108
								'/'
						      (%% Line 108
						       B1, %% Line 108
							   30269)
					      in  let <_10> =
						      call %% Line 108
							   'erlang':%% Line 108
								    '/'
							  (%% Line 108
							   B2, %% Line 108
							       30307)
						  in  let <_12> =
							  call %% Line 108
							       'erlang':%% Line 108
									'+'
							      (_11, _10)
						      in  let <_9> =
							      call %% Line 108
								   'erlang':%% Line 108
									    '/'
								  (%% Line 108
								   B3, %% Line 108
								       30323)
							  in  let <R> =
								  call %% Line 108
								       'erlang':%% Line 108
										'+'
								      (_12, _9)
							      in  let <_14> =
								      call %% Line 109
									   'erlang':%% Line 109
										    'trunc'
									  (%% Line 109
									   R)
								  in  %% Line 109
								      call 'erlang':'-'
									  (R, _14)
	      ( <_2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_2})
		-| ['compiler_generated'] )
	    end
'uniform'/1 =
    %% Line 118
    fun (_0) ->
	case _0 of
	  <N>
	      when let <_1> =
		    call 'erlang':'is_integer'
			(_0)
		in  let <_2> =
			call 'erlang':'>='
			    (_0, 1)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      let <_3> =
		  apply %% Line 119
			'uniform'/0
		      ()
	      in  let <_4> =
		      call %% Line 119
			   'erlang':%% Line 119
				    '*'
			  (_3, %% Line 119
			       N)
		  in  let <_5> =
			  call %% Line 119
			       'erlang':%% Line 119
					'trunc'
			      (_4)
		      in  %% Line 119
			  call 'erlang':'+'
			      (_5, 1)
	  ( <_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6})
		  -| [{'function_name',{'uniform',1}}] )
	    -| ['compiler_generated'] )
	end
'uniform_s'/1 =
    %% Line 131
    fun (_0) ->
	case _0 of
	  <{A1,A2,A3}> when 'true' ->
	      let <_1> =
		  call %% Line 132
		       'erlang':%% Line 132
				'*'
		      (%% Line 132
		       A1, %% Line 132
			   171)
	      in  let <B1> =
		      call %% Line 132
			   'erlang':%% Line 132
				    'rem'
			  (_1, %% Line 132
			       30269)
		  in  let <_3> =
			  call %% Line 133
			       'erlang':%% Line 133
					'*'
			      (%% Line 133
			       A2, %% Line 133
				   172)
		      in  let <B2> =
			      call %% Line 133
				   'erlang':%% Line 133
					    'rem'
				  (_3, %% Line 133
				       30307)
			  in  let <_5> =
				  call %% Line 134
				       'erlang':%% Line 134
						'*'
				      (%% Line 134
				       A3, %% Line 134
					   170)
			      in  let <B3> =
				      call %% Line 134
					   'erlang':%% Line 134
						    'rem'
					  (_5, %% Line 134
					       30323)
				  in  let <_9> =
					  call %% Line 135
					       'erlang':%% Line 135
							'/'
					      (%% Line 135
					       B1, %% Line 135
						   30269)
				      in  let <_8> =
					      call %% Line 135
						   'erlang':%% Line 135
							    '/'
						  (%% Line 135
						   B2, %% Line 135
						       30307)
					  in  let <_10> =
						  call %% Line 135
						       'erlang':%% Line 135
								'+'
						      (_9, _8)
					      in  let <_7> =
						      call %% Line 135
							   'erlang':%% Line 135
								    '/'
							  (%% Line 135
							   B3, %% Line 135
							       30323)
						  in  let <R> =
							  call %% Line 135
							       'erlang':%% Line 135
									'+'
							      (_10, _7)
						      in  let <_12> =
							      call %% Line 136
								   'erlang':%% Line 136
									    'trunc'
								  (%% Line 136
								   R)
							  in  let <_13> =
								  call %% Line 136
								       'erlang':%% Line 136
										'-'
								      (%% Line 136
								       R, _12)
							      in  %% Line 136
								  {_13,{B1,B2,B3}}
	  ( <_14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14})
		  -| [{'function_name',{'uniform_s',1}}] )
	    -| ['compiler_generated'] )
	end
'uniform_s'/2 =
    %% Line 147
    fun (_0,_1) ->
	case <_0,_1> of
	  <N,State0>
	      when let <_2> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_3> =
			call 'erlang':'>='
			    (N, 1)
		    in  call 'erlang':'and'
			    (_2, _3) ->
	      %% Line 148
	      case apply 'uniform_s'/1
		       (State0) of
		<{F,State1}> when 'true' ->
		    let <_5> =
			call %% Line 149
			     'erlang':%% Line 149
				      '*'
			    (%% Line 149
			     F, %% Line 149
				N)
		    in  let <_6> =
			    call %% Line 149
				 'erlang':%% Line 149
					  'trunc'
				(_5)
			in  let <_7> =
				call %% Line 149
				     'erlang':%% Line 149
					      '+'
				    (_6, %% Line 149
					 1)
			    in  %% Line 149
				{_7,State1}
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  ( <_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8})
		  -| [{'function_name',{'uniform_s',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('random')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('random', _0)
end