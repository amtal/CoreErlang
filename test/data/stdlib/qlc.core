module 'qlc' ['all_selections'/1,
	      'append'/1,
	      'append'/2,
	      'aux_name'/3,
	      'cursor'/1,
	      'cursor'/2,
	      'delete_cursor'/1,
	      'e'/1,
	      'e'/2,
	      'eval'/1,
	      'eval'/2,
	      'fold'/3,
	      'fold'/4,
	      'format_error'/1,
	      'info'/1,
	      'info'/2,
	      'keysort'/2,
	      'keysort'/3,
	      'module_info'/0,
	      'module_info'/1,
	      'name_suffix'/2,
	      'next_answers'/1,
	      'next_answers'/2,
	      'parse_transform'/2,
	      'q'/1,
	      'q'/2,
	      'sort'/1,
	      'sort'/2,
	      'string_to_handle'/1,
	      'string_to_handle'/2,
	      'string_to_handle'/3,
	      'table'/2,
	      'template_state'/0,
	      'transform_from_evaluator'/2,
	      'var_fold'/3,
	      'var_ufold'/2,
	      'vars'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[113|[108|[99|[46|[101|[114|[108]]]]]]]]]]],1}],
		%% Line 29
		'compile' =
		    %% Line 29
		    [{'no_auto_import',[{'error',1}]}],
		%% Line 54
		'dialyzer' =
		    %% Line 54
		    ['no_improper_lists'],
		%% Line 60
		'record' =
		    %% Line 60
		    [{'qlc_append',[{'record_field',61,{'atom',61,'hl'}}]}],
		%% Line 64
		'record' =
		    %% Line 64
		    [{'qlc_table',[{'record_field',65,{'atom',65,'trav_fun'}}|[{'record_field',66,{'atom',66,'trav_MS'}}|[{'record_field',67,{'atom',67,'pre_fun'}}|[{'record_field',68,{'atom',68,'post_fun'}}|[{'record_field',69,{'atom',69,'info_fun'}}|[{'record_field',70,{'atom',70,'format_fun'}}|[{'record_field',71,{'atom',71,'lookup_fun'}}|[{'record_field',72,{'atom',72,'parent_fun'}}|[{'record_field',73,{'atom',73,'key_equality'}}|[{'record_field',74,{'atom',74,'lu_vals'}}|[{'record_field',75,{'atom',75,'ms'},{'atom',75,'no_match_spec'}}]]]]]]]]]]]}],
		%% Line 79
		'record' =
		    %% Line 79
		    [{'qlc_sort',[{'record_field',80,{'atom',80,'h'}}|[{'record_field',81,{'atom',81,'keypos'}}|[{'record_field',82,{'atom',82,'unique'}}|[{'record_field',83,{'atom',83,'compressed'}}|[{'record_field',84,{'atom',84,'order'}}|[{'record_field',85,{'atom',85,'fs_opts'}}|[{'record_field',86,{'atom',86,'tmpdir_usage'},{'atom',86,'allowed'}}|[{'record_field',88,{'atom',88,'tmpdir'}}]]]]]]]]}],
		%% Line 92
		'record' =
		    %% Line 92
		    [{'qlc_lc',[{'record_field',93,{'atom',93,'lc'}}|[{'record_field',94,{'atom',94,'opt'}}]]}],
		%% Line 97
		'record' =
		    %% Line 97
		    [{'qlc_list',[{'record_field',98,{'atom',98,'l'}}|[{'record_field',99,{'atom',99,'ms'},{'atom',99,'no_match_spec'}}]]}],
		%% Line 102
		'record' =
		    %% Line 102
		    [{'qlc_join',[{'record_field',103,{'atom',103,'kind'}}|[{'record_field',105,{'atom',105,'opt'}}|[{'record_field',106,{'atom',106,'h1'}}|[{'record_field',106,{'atom',106,'q1'}}|[{'record_field',106,{'atom',106,'c1'}}|[{'record_field',107,{'atom',107,'h2'}}|[{'record_field',107,{'atom',107,'q2'}}|[{'record_field',107,{'atom',107,'c2'}}]]]]]]]]}],
		%% Line 113
		'record' =
		    %% Line 113
		    [{'qlc_cursor',[{'record_field',113,{'atom',113,'c'}}]}],
		%% Line 115
		'record' =
		    %% Line 115
		    [{'qlc_opt',[{'record_field',116,{'atom',116,'unique'},{'atom',116,'false'}}|[{'record_field',117,{'atom',117,'cache'},{'atom',117,'false'}}|[{'record_field',118,{'atom',118,'max_lookup'},{'op',118,'-',{'integer',118,1}}}|[{'record_field',119,{'atom',119,'join'},{'atom',119,'any'}}|[{'record_field',120,{'atom',120,'tmpdir'},{'string',120,[]}}|[{'record_field',121,{'atom',121,'lookup'},{'atom',121,'any'}}|[{'record_field',122,{'atom',122,'max_list'},{'op',122,'*',{'integer',122,512},{'integer',122,1024}}}|[{'record_field',123,{'atom',123,'tmpdir_usage'},{'atom',123,'allowed'}}]]]]]]]]}],
		%% Line 127
		'record' =
		    %% Line 127
		    [{'setup',[{'record_field',127,{'atom',127,'parent'}}]}],
		%% Line 131
		'export_type' =
		    %% Line 131
		    [{'query_cursor',0}|[{'query_handle',0}]],
		%% Line 136
		'record' =
		    %% Line 136
		    [{'qlc_handle',[{'record_field',136,{'atom',136,'h'}}]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{'query_list_comprehension',{'type',152,'term',[]},[]}],
		%% Line 153
		'opaque' =
		    %% Line 153
		    [{'query_cursor',{'type',153,'tuple',[{'atom',153,'qlc_cursor'}|[{'type',153,'term',[]}]]},[]}],
		%% Line 154
		'opaque' =
		    %% Line 154
		    [{'query_handle',{'type',154,'tuple',[{'atom',154,'qlc_handle'}|[{'type',154,'term',[]}]]},[]}],
		%% Line 155
		'type' =
		    %% Line 155
		    [{'query_handle_or_list',{'type',155,'union',[{'user_type',155,'query_handle',[]}|[{'type',155,'list',[]}]]},[]}],
		%% Line 156
		'type' =
		    %% Line 156
		    [{'answers',{'type',156,'list',[{'user_type',156,'answer',[]}]},[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'answer',{'type',157,'term',[]},[]}],
		%% Line 158
		'type' =
		    %% Line 158
		    [{'abstract_expr',{'remote_type',158,[{'atom',158,'erl_parse'}|[{'atom',158,'abstract_expr'}|[[]]]]},[]}],
		%% Line 159
		'type' =
		    %% Line 159
		    [{'match_expression',{'remote_type',159,[{'atom',159,'ets'}|[{'atom',159,'match_spec'}|[[]]]]},[]}],
		%% Line 160
		'type' =
		    %% Line 160
		    [{'spawn_options',{'type',160,'union',[{'atom',160,'default'}|[{'type',160,'list',[{'remote_type',160,[{'atom',160,'proc_lib'}|[{'atom',160,'spawn_option'}|[[]]]]}]}]]},[]}],
		%% Line 161
		'type' =
		    %% Line 161
		    [{'sort_options',{'type',161,'union',[{'type',161,'list',[{'user_type',161,'sort_option',[]}]}|[{'user_type',161,'sort_option',[]}]]},[]}],
		%% Line 162
		'type' =
		    %% Line 162
		    [{'sort_option',{'type',162,'union',[{'type',162,'tuple',[{'atom',162,'compressed'}|[{'type',162,'boolean',[]}]]}|[{'type',163,'tuple',[{'atom',163,'no_files'}|[{'user_type',163,'no_files',[]}]]}|[{'type',164,'tuple',[{'atom',164,'order'}|[{'user_type',164,'order',[]}]]}|[{'type',165,'tuple',[{'atom',165,'size'}|[{'type',165,'pos_integer',[]}]]}|[{'type',166,'tuple',[{'atom',166,'tmpdir'}|[{'user_type',166,'tmp_directory',[]}]]}|[{'type',167,'tuple',[{'atom',167,'unique'}|[{'type',167,'boolean',[]}]]}]]]]]]},[]}],
		%% Line 168
		'type' =
		    %% Line 168
		    [{'order',{'type',168,'union',[{'atom',168,'ascending'}|[{'atom',168,'descending'}|[{'user_type',168,'order_fun',[]}]]]},[]}],
		%% Line 169
		'type' =
		    %% Line 169
		    [{'order_fun',{'type',169,'fun',[{'type',169,'product',[{'type',169,'term',[]}|[{'type',169,'term',[]}]]}|[{'type',169,'boolean',[]}]]},[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{'tmp_directory',{'type',170,'union',[{'type',170,'nil',[]}|[{'remote_type',170,[{'atom',170,'file'}|[{'atom',170,'name'}|[[]]]]}]]},[]}],
		%% Line 171
		'type' =
		    %% Line 171
		    [{'no_files',{'type',171,'pos_integer',[]},[]}],
		%% Line 172
		'type' =
		    %% Line 172
		    [{'key_pos',{'type',172,'union',[{'type',172,'pos_integer',[]}|[{'type',172,'list',[{'type',172,'pos_integer',[]}]}]]},[]}],
		%% Line 173
		'type' =
		    %% Line 173
		    [{'max_list_size',{'type',173,'non_neg_integer',[]},[]}],
		%% Line 174
		'type' =
		    %% Line 174
		    [{'cache',{'type',174,'union',[{'atom',174,'ets'}|[{'atom',174,'list'}|[{'atom',174,'no'}]]]},[]}],
		%% Line 175
		'type' =
		    %% Line 175
		    [{'tmp_file_usage',{'type',175,'union',[{'atom',175,'allowed'}|[{'atom',175,'not_allowed'}|[{'atom',175,'info_msg'}|[{'atom',176,'warning_msg'}|[{'atom',176,'error_msg'}]]]]]},[]}],
		%% Line 178
		'spec' =
		    %% Line 178
		    [{{'append',1},[{'type',178,'bounded_fun',[{'type',178,'fun',[{'type',178,'product',[{'var',178,'QHL'}]}|[{'var',178,'QH'}]]}|[[{'type',179,'constraint',[{'atom',179,'is_subtype'}|[[{'var',179,'QHL'}|[{'type',179,'list',[{'user_type',179,'query_handle_or_list',[]}]}]]]]}|[{'type',180,'constraint',[{'atom',180,'is_subtype'}|[[{'var',180,'QH'}|[{'user_type',180,'query_handle',[]}]]]]}]]]]}]}],
		%% Line 188
		'spec' =
		    %% Line 188
		    [{{'append',2},[{'type',188,'bounded_fun',[{'type',188,'fun',[{'type',188,'product',[{'var',188,'QH1'}|[{'var',188,'QH2'}]]}|[{'var',188,'QH3'}]]}|[[{'type',189,'constraint',[{'atom',189,'is_subtype'}|[[{'var',189,'QH1'}|[{'user_type',189,'query_handle_or_list',[]}]]]]}|[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'QH2'}|[{'user_type',190,'query_handle_or_list',[]}]]]]}|[{'type',191,'constraint',[{'atom',191,'is_subtype'}|[[{'var',191,'QH3'}|[{'user_type',191,'query_handle',[]}]]]]}]]]]]}]}],
		%% Line 199
		'spec' =
		    %% Line 199
		    [{{'cursor',1},[{'type',199,'bounded_fun',[{'type',199,'fun',[{'type',199,'product',[{'var',199,'QH'}]}|[{'var',199,'Cursor'}]]}|[[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'QH'}|[{'user_type',200,'query_handle_or_list',[]}]]]]}|[{'type',201,'constraint',[{'atom',201,'is_subtype'}|[[{'var',201,'Cursor'}|[{'user_type',201,'query_cursor',[]}]]]]}]]]]}]}],
		%% Line 205
		'spec' =
		    %% Line 205
		    [{{'cursor',2},[{'type',205,'bounded_fun',[{'type',205,'fun',[{'type',205,'product',[{'var',205,'QH'}|[{'var',205,'Options'}]]}|[{'var',205,'Cursor'}]]}|[[{'type',206,'constraint',[{'atom',206,'is_subtype'}|[[{'var',206,'QH'}|[{'user_type',206,'query_handle_or_list',[]}]]]]}|[{'type',207,'constraint',[{'atom',207,'is_subtype'}|[[{'var',207,'Options'}|[{'type',207,'union',[{'type',207,'list',[{'var',207,'Option'}]}|[{'var',207,'Option'}]]}]]]]}|[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'Option'}|[{'type',208,'union',[{'type',208,'tuple',[{'atom',208,'cache_all'}|[{'user_type',208,'cache',[]}]]}|[{'atom',208,'cache_all'}|[{'type',209,'tuple',[{'atom',209,'max_list_size'}|[{'user_type',209,'max_list_size',[]}]]}|[{'type',210,'tuple',[{'atom',210,'spawn_options'}|[{'user_type',210,'spawn_options',[]}]]}|[{'type',211,'tuple',[{'atom',211,'tmpdir_usage'}|[{'user_type',211,'tmp_file_usage',[]}]]}|[{'type',212,'tuple',[{'atom',212,'tmpdir'}|[{'user_type',212,'tmp_directory',[]}]]}|[{'type',213,'tuple',[{'atom',213,'unique_all'}|[{'type',213,'boolean',[]}]]}|[{'atom',213,'unique_all'}]]]]]]]]}]]]]}|[{'type',214,'constraint',[{'atom',214,'is_subtype'}|[[{'var',214,'Cursor'}|[{'user_type',214,'query_cursor',[]}]]]]}]]]]]]}]}],
		%% Line 233
		'spec' =
		    %% Line 233
		    [{{'delete_cursor',1},[{'type',233,'bounded_fun',[{'type',233,'fun',[{'type',233,'product',[{'var',233,'QueryCursor'}]}|[{'atom',233,'ok'}]]}|[[{'type',234,'constraint',[{'atom',234,'is_subtype'}|[[{'var',234,'QueryCursor'}|[{'user_type',234,'query_cursor',[]}]]]]}]]]}]}],
		%% Line 242
		'spec' =
		    %% Line 242
		    [{{'e',1},[{'type',242,'bounded_fun',[{'type',242,'fun',[{'type',242,'product',[{'var',242,'QH'}]}|[{'type',242,'union',[{'var',242,'Answers'}|[{'var',242,'Error'}]]}]]}|[[{'type',243,'constraint',[{'atom',243,'is_subtype'}|[[{'var',243,'QH'}|[{'user_type',243,'query_handle_or_list',[]}]]]]}|[{'type',244,'constraint',[{'atom',244,'is_subtype'}|[[{'var',244,'Answers'}|[{'user_type',244,'answers',[]}]]]]}|[{'type',245,'constraint',[{'atom',245,'is_subtype'}|[[{'var',245,'Error'}|[{'type',245,'tuple',[{'atom',245,'error'}|[{'type',245,'module',[]}|[{'var',245,'Reason'}]]]}]]]]}|[{'type',246,'constraint',[{'atom',246,'is_subtype'}|[[{'var',246,'Reason'}|[{'remote_type',246,[{'atom',246,'file_sorter'}|[{'atom',246,'reason'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 250
		'spec' =
		    %% Line 250
		    [{{'e',2},[{'type',250,'bounded_fun',[{'type',250,'fun',[{'type',250,'product',[{'var',250,'QH'}|[{'var',250,'Options'}]]}|[{'type',250,'union',[{'var',250,'Answers'}|[{'var',250,'Error'}]]}]]}|[[{'type',251,'constraint',[{'atom',251,'is_subtype'}|[[{'var',251,'QH'}|[{'user_type',251,'query_handle_or_list',[]}]]]]}|[{'type',252,'constraint',[{'atom',252,'is_subtype'}|[[{'var',252,'Options'}|[{'type',252,'union',[{'type',252,'list',[{'var',252,'Option'}]}|[{'var',252,'Option'}]]}]]]]}|[{'type',253,'constraint',[{'atom',253,'is_subtype'}|[[{'var',253,'Option'}|[{'type',253,'union',[{'type',253,'tuple',[{'atom',253,'cache_all'}|[{'user_type',253,'cache',[]}]]}|[{'atom',253,'cache_all'}|[{'type',254,'tuple',[{'atom',254,'max_list_size'}|[{'user_type',254,'max_list_size',[]}]]}|[{'type',255,'tuple',[{'atom',255,'tmpdir_usage'}|[{'user_type',255,'tmp_file_usage',[]}]]}|[{'type',256,'tuple',[{'atom',256,'tmpdir'}|[{'user_type',256,'tmp_directory',[]}]]}|[{'type',257,'tuple',[{'atom',257,'unique_all'}|[{'type',257,'boolean',[]}]]}|[{'atom',257,'unique_all'}]]]]]]]}]]]]}|[{'type',258,'constraint',[{'atom',258,'is_subtype'}|[[{'var',258,'Answers'}|[{'user_type',258,'answers',[]}]]]]}|[{'type',259,'constraint',[{'atom',259,'is_subtype'}|[[{'var',259,'Error'}|[{'type',259,'tuple',[{'atom',259,'error'}|[{'type',259,'module',[]}|[{'var',259,'Reason'}]]]}]]]]}|[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'Reason'}|[{'remote_type',260,[{'atom',260,'file_sorter'}|[{'atom',260,'reason'}|[[]]]]}]]]]}]]]]]]]]}]}],
		%% Line 264
		'spec' =
		    %% Line 264
		    [{{'eval',1},[{'type',264,'bounded_fun',[{'type',264,'fun',[{'type',264,'product',[{'var',264,'QH'}]}|[{'type',264,'union',[{'var',264,'Answers'}|[{'var',264,'Error'}]]}]]}|[[{'type',265,'constraint',[{'atom',265,'is_subtype'}|[[{'var',265,'QH'}|[{'user_type',265,'query_handle_or_list',[]}]]]]}|[{'type',266,'constraint',[{'atom',266,'is_subtype'}|[[{'var',266,'Answers'}|[{'user_type',266,'answers',[]}]]]]}|[{'type',267,'constraint',[{'atom',267,'is_subtype'}|[[{'var',267,'Error'}|[{'type',267,'tuple',[{'atom',267,'error'}|[{'type',267,'module',[]}|[{'var',267,'Reason'}]]]}]]]]}|[{'type',268,'constraint',[{'atom',268,'is_subtype'}|[[{'var',268,'Reason'}|[{'remote_type',268,[{'atom',268,'file_sorter'}|[{'atom',268,'reason'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 272
		'spec' =
		    %% Line 272
		    [{{'eval',2},[{'type',272,'bounded_fun',[{'type',272,'fun',[{'type',272,'product',[{'var',272,'QH'}|[{'var',272,'Options'}]]}|[{'type',272,'union',[{'var',272,'Answers'}|[{'var',272,'Error'}]]}]]}|[[{'type',273,'constraint',[{'atom',273,'is_subtype'}|[[{'var',273,'QH'}|[{'user_type',273,'query_handle_or_list',[]}]]]]}|[{'type',274,'constraint',[{'atom',274,'is_subtype'}|[[{'var',274,'Answers'}|[{'user_type',274,'answers',[]}]]]]}|[{'type',275,'constraint',[{'atom',275,'is_subtype'}|[[{'var',275,'Options'}|[{'type',275,'union',[{'type',275,'list',[{'var',275,'Option'}]}|[{'var',275,'Option'}]]}]]]]}|[{'type',276,'constraint',[{'atom',276,'is_subtype'}|[[{'var',276,'Option'}|[{'type',276,'union',[{'type',276,'tuple',[{'atom',276,'cache_all'}|[{'user_type',276,'cache',[]}]]}|[{'atom',276,'cache_all'}|[{'type',277,'tuple',[{'atom',277,'max_list_size'}|[{'user_type',277,'max_list_size',[]}]]}|[{'type',278,'tuple',[{'atom',278,'tmpdir_usage'}|[{'user_type',278,'tmp_file_usage',[]}]]}|[{'type',279,'tuple',[{'atom',279,'tmpdir'}|[{'user_type',279,'tmp_directory',[]}]]}|[{'type',280,'tuple',[{'atom',280,'unique_all'}|[{'type',280,'boolean',[]}]]}|[{'atom',280,'unique_all'}]]]]]]]}]]]]}|[{'type',281,'constraint',[{'atom',281,'is_subtype'}|[[{'var',281,'Error'}|[{'type',281,'tuple',[{'atom',281,'error'}|[{'type',281,'module',[]}|[{'var',281,'Reason'}]]]}]]]]}|[{'type',282,'constraint',[{'atom',282,'is_subtype'}|[[{'var',282,'Reason'}|[{'remote_type',282,[{'atom',282,'file_sorter'}|[{'atom',282,'reason'}|[[]]]]}]]]]}]]]]]]]]}]}],
		%% Line 314
		'spec' =
		    %% Line 314
		    [{{'fold',3},[{'type',314,'bounded_fun',[{'type',314,'fun',[{'type',314,'product',[{'var',314,'Function'}|[{'var',314,'Acc0'}|[{'var',314,'QH'}]]]}|[{'type',315,'union',[{'var',315,'Acc1'}|[{'var',315,'Error'}]]}]]}|[[{'type',316,'constraint',[{'atom',316,'is_subtype'}|[[{'var',316,'QH'}|[{'user_type',316,'query_handle_or_list',[]}]]]]}|[{'type',317,'constraint',[{'atom',317,'is_subtype'}|[[{'var',317,'Function'}|[{'type',317,'fun',[{'type',317,'product',[{'user_type',317,'answer',[]}|[{'var',317,'AccIn'}]]}|[{'var',317,'AccOut'}]]}]]]]}|[{'type',318,'constraint',[{'atom',318,'is_subtype'}|[[{'var',318,'Acc0'}|[{'type',318,'term',[]}]]]]}|[{'type',319,'constraint',[{'atom',319,'is_subtype'}|[[{'var',319,'Acc1'}|[{'type',319,'term',[]}]]]]}|[{'type',320,'constraint',[{'atom',320,'is_subtype'}|[[{'var',320,'AccIn'}|[{'type',320,'term',[]}]]]]}|[{'type',321,'constraint',[{'atom',321,'is_subtype'}|[[{'var',321,'AccOut'}|[{'type',321,'term',[]}]]]]}|[{'type',322,'constraint',[{'atom',322,'is_subtype'}|[[{'var',322,'Error'}|[{'type',322,'tuple',[{'atom',322,'error'}|[{'type',322,'module',[]}|[{'var',322,'Reason'}]]]}]]]]}|[{'type',323,'constraint',[{'atom',323,'is_subtype'}|[[{'var',323,'Reason'}|[{'remote_type',323,[{'atom',323,'file_sorter'}|[{'atom',323,'reason'}|[[]]]]}]]]]}]]]]]]]]]]}]}],
		%% Line 327
		'spec' =
		    %% Line 327
		    [{{'fold',4},[{'type',327,'bounded_fun',[{'type',327,'fun',[{'type',327,'product',[{'var',327,'Function'}|[{'var',327,'Acc0'}|[{'var',327,'QH'}|[{'var',327,'Options'}]]]]}|[{'type',328,'union',[{'var',328,'Acc1'}|[{'var',328,'Error'}]]}]]}|[[{'type',329,'constraint',[{'atom',329,'is_subtype'}|[[{'var',329,'QH'}|[{'user_type',329,'query_handle_or_list',[]}]]]]}|[{'type',330,'constraint',[{'atom',330,'is_subtype'}|[[{'var',330,'Function'}|[{'type',330,'fun',[{'type',330,'product',[{'user_type',330,'answer',[]}|[{'var',330,'AccIn'}]]}|[{'var',330,'AccOut'}]]}]]]]}|[{'type',331,'constraint',[{'atom',331,'is_subtype'}|[[{'var',331,'Acc0'}|[{'type',331,'term',[]}]]]]}|[{'type',332,'constraint',[{'atom',332,'is_subtype'}|[[{'var',332,'Acc1'}|[{'type',332,'term',[]}]]]]}|[{'type',333,'constraint',[{'atom',333,'is_subtype'}|[[{'var',333,'AccIn'}|[{'type',333,'term',[]}]]]]}|[{'type',334,'constraint',[{'atom',334,'is_subtype'}|[[{'var',334,'AccOut'}|[{'type',334,'term',[]}]]]]}|[{'type',335,'constraint',[{'atom',335,'is_subtype'}|[[{'var',335,'Options'}|[{'type',335,'union',[{'type',335,'list',[{'var',335,'Option'}]}|[{'var',335,'Option'}]]}]]]]}|[{'type',336,'constraint',[{'atom',336,'is_subtype'}|[[{'var',336,'Option'}|[{'type',336,'union',[{'type',336,'tuple',[{'atom',336,'cache_all'}|[{'user_type',336,'cache',[]}]]}|[{'atom',336,'cache_all'}|[{'type',337,'tuple',[{'atom',337,'max_list_size'}|[{'user_type',337,'max_list_size',[]}]]}|[{'type',338,'tuple',[{'atom',338,'tmpdir_usage'}|[{'user_type',338,'tmp_file_usage',[]}]]}|[{'type',339,'tuple',[{'atom',339,'tmpdir'}|[{'user_type',339,'tmp_directory',[]}]]}|[{'type',340,'tuple',[{'atom',340,'unique_all'}|[{'type',340,'boolean',[]}]]}|[{'atom',340,'unique_all'}]]]]]]]}]]]]}|[{'type',341,'constraint',[{'atom',341,'is_subtype'}|[[{'var',341,'Error'}|[{'type',341,'tuple',[{'atom',341,'error'}|[{'type',341,'module',[]}|[{'var',341,'Reason'}]]]}]]]]}|[{'type',342,'constraint',[{'atom',342,'is_subtype'}|[[{'var',342,'Reason'}|[{'remote_type',342,[{'atom',342,'file_sorter'}|[{'atom',342,'reason'}|[[]]]]}]]]]}]]]]]]]]]]]]}]}],
		%% Line 372
		'spec' =
		    %% Line 372
		    [{{'format_error',1},[{'type',372,'bounded_fun',[{'type',372,'fun',[{'type',372,'product',[{'var',372,'Error'}]}|[{'var',372,'Chars'}]]}|[[{'type',373,'constraint',[{'atom',373,'is_subtype'}|[[{'var',373,'Error'}|[{'type',373,'tuple',[{'atom',373,'error'}|[{'type',373,'module',[]}|[{'type',373,'term',[]}]]]}]]]]}|[{'type',374,'constraint',[{'atom',374,'is_subtype'}|[[{'var',374,'Chars'}|[{'remote_type',374,[{'atom',374,'io_lib'}|[{'atom',374,'chars'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 412
		'spec' =
		    %% Line 412
		    [{{'info',1},[{'type',412,'bounded_fun',[{'type',412,'fun',[{'type',412,'product',[{'var',412,'QH'}]}|[{'var',412,'Info'}]]}|[[{'type',413,'constraint',[{'atom',413,'is_subtype'}|[[{'var',413,'QH'}|[{'user_type',413,'query_handle_or_list',[]}]]]]}|[{'type',414,'constraint',[{'atom',414,'is_subtype'}|[[{'var',414,'Info'}|[{'type',414,'union',[{'user_type',414,'abstract_expr',[]}|[{'type',414,'string',[]}]]}]]]]}]]]]}]}],
		%% Line 418
		'spec' =
		    %% Line 418
		    [{{'info',2},[{'type',418,'bounded_fun',[{'type',418,'fun',[{'type',418,'product',[{'var',418,'QH'}|[{'var',418,'Options'}]]}|[{'var',418,'Info'}]]}|[[{'type',419,'constraint',[{'atom',419,'is_subtype'}|[[{'var',419,'QH'}|[{'user_type',419,'query_handle_or_list',[]}]]]]}|[{'type',420,'constraint',[{'atom',420,'is_subtype'}|[[{'var',420,'Options'}|[{'type',420,'union',[{'type',420,'list',[{'var',420,'Option'}]}|[{'var',420,'Option'}]]}]]]]}|[{'type',421,'constraint',[{'atom',421,'is_subtype'}|[[{'var',421,'Option'}|[{'type',421,'union',[{'var',421,'EvalOption'}|[{'var',421,'ReturnOption'}]]}]]]]}|[{'type',422,'constraint',[{'atom',422,'is_subtype'}|[[{'var',422,'EvalOption'}|[{'type',422,'union',[{'type',422,'tuple',[{'atom',422,'cache_all'}|[{'user_type',422,'cache',[]}]]}|[{'atom',422,'cache_all'}|[{'type',423,'tuple',[{'atom',423,'max_list_size'}|[{'user_type',423,'max_list_size',[]}]]}|[{'type',424,'tuple',[{'atom',424,'tmpdir_usage'}|[{'user_type',424,'tmp_file_usage',[]}]]}|[{'type',425,'tuple',[{'atom',425,'tmpdir'}|[{'user_type',425,'tmp_directory',[]}]]}|[{'type',426,'tuple',[{'atom',426,'unique_all'}|[{'type',426,'boolean',[]}]]}|[{'atom',426,'unique_all'}]]]]]]]}]]]]}|[{'type',427,'constraint',[{'atom',427,'is_subtype'}|[[{'var',427,'ReturnOption'}|[{'type',427,'union',[{'type',427,'tuple',[{'atom',427,'depth'}|[{'var',427,'Depth'}]]}|[{'type',428,'tuple',[{'atom',428,'flat'}|[{'type',428,'boolean',[]}]]}|[{'type',429,'tuple',[{'atom',429,'format'}|[{'var',429,'Format'}]]}|[{'type',430,'tuple',[{'atom',430,'n_elements'}|[{'var',430,'NElements'}]]}]]]]}]]]]}|[{'type',431,'constraint',[{'atom',431,'is_subtype'}|[[{'var',431,'Depth'}|[{'type',431,'union',[{'atom',431,'infinity'}|[{'type',431,'non_neg_integer',[]}]]}]]]]}|[{'type',432,'constraint',[{'atom',432,'is_subtype'}|[[{'var',432,'Format'}|[{'type',432,'union',[{'atom',432,'abstract_code'}|[{'atom',432,'string'}]]}]]]]}|[{'type',433,'constraint',[{'atom',433,'is_subtype'}|[[{'var',433,'NElements'}|[{'type',433,'union',[{'atom',433,'infinity'}|[{'type',433,'pos_integer',[]}]]}]]]]}|[{'type',434,'constraint',[{'atom',434,'is_subtype'}|[[{'var',434,'Info'}|[{'type',434,'union',[{'user_type',434,'abstract_expr',[]}|[{'type',434,'string',[]}]]}]]]]}]]]]]]]]]]]}]}],
		%% Line 470
		'spec' =
		    %% Line 470
		    [{{'keysort',2},[{'type',470,'bounded_fun',[{'type',470,'fun',[{'type',470,'product',[{'var',470,'KeyPos'}|[{'var',470,'QH1'}]]}|[{'var',470,'QH2'}]]}|[[{'type',471,'constraint',[{'atom',471,'is_subtype'}|[[{'var',471,'KeyPos'}|[{'user_type',471,'key_pos',[]}]]]]}|[{'type',472,'constraint',[{'atom',472,'is_subtype'}|[[{'var',472,'QH1'}|[{'user_type',472,'query_handle_or_list',[]}]]]]}|[{'type',473,'constraint',[{'atom',473,'is_subtype'}|[[{'var',473,'QH2'}|[{'user_type',473,'query_handle',[]}]]]]}]]]]]}]}],
		%% Line 477
		'spec' =
		    %% Line 477
		    [{{'keysort',3},[{'type',477,'bounded_fun',[{'type',477,'fun',[{'type',477,'product',[{'var',477,'KeyPos'}|[{'var',477,'QH1'}|[{'var',477,'SortOptions'}]]]}|[{'var',477,'QH2'}]]}|[[{'type',478,'constraint',[{'atom',478,'is_subtype'}|[[{'var',478,'KeyPos'}|[{'user_type',478,'key_pos',[]}]]]]}|[{'type',479,'constraint',[{'atom',479,'is_subtype'}|[[{'var',479,'SortOptions'}|[{'user_type',479,'sort_options',[]}]]]]}|[{'type',480,'constraint',[{'atom',480,'is_subtype'}|[[{'var',480,'QH1'}|[{'user_type',480,'query_handle_or_list',[]}]]]]}|[{'type',481,'constraint',[{'atom',481,'is_subtype'}|[[{'var',481,'QH2'}|[{'user_type',481,'query_handle',[]}]]]]}]]]]]]}]}],
		%% Line 500
		'spec' =
		    %% Line 500
		    [{{'next_answers',1},[{'type',500,'bounded_fun',[{'type',500,'fun',[{'type',500,'product',[{'var',500,'QueryCursor'}]}|[{'type',501,'union',[{'var',501,'Answers'}|[{'var',501,'Error'}]]}]]}|[[{'type',502,'constraint',[{'atom',502,'is_subtype'}|[[{'var',502,'QueryCursor'}|[{'user_type',502,'query_cursor',[]}]]]]}|[{'type',503,'constraint',[{'atom',503,'is_subtype'}|[[{'var',503,'Answers'}|[{'user_type',503,'answers',[]}]]]]}|[{'type',504,'constraint',[{'atom',504,'is_subtype'}|[[{'var',504,'Error'}|[{'type',504,'tuple',[{'atom',504,'error'}|[{'type',504,'module',[]}|[{'var',504,'Reason'}]]]}]]]]}|[{'type',505,'constraint',[{'atom',505,'is_subtype'}|[[{'var',505,'Reason'}|[{'remote_type',505,[{'atom',505,'file_sorter'}|[{'atom',505,'reason'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 509
		'spec' =
		    %% Line 509
		    [{{'next_answers',2},[{'type',509,'bounded_fun',[{'type',509,'fun',[{'type',509,'product',[{'var',509,'QueryCursor'}|[{'var',509,'NumberOfAnswers'}]]}|[{'type',510,'union',[{'var',510,'Answers'}|[{'var',510,'Error'}]]}]]}|[[{'type',511,'constraint',[{'atom',511,'is_subtype'}|[[{'var',511,'QueryCursor'}|[{'user_type',511,'query_cursor',[]}]]]]}|[{'type',512,'constraint',[{'atom',512,'is_subtype'}|[[{'var',512,'Answers'}|[{'user_type',512,'answers',[]}]]]]}|[{'type',513,'constraint',[{'atom',513,'is_subtype'}|[[{'var',513,'NumberOfAnswers'}|[{'type',513,'union',[{'atom',513,'all_remaining'}|[{'type',513,'pos_integer',[]}]]}]]]]}|[{'type',514,'constraint',[{'atom',514,'is_subtype'}|[[{'var',514,'Error'}|[{'type',514,'tuple',[{'atom',514,'error'}|[{'type',514,'module',[]}|[{'var',514,'Reason'}]]]}]]]]}|[{'type',515,'constraint',[{'atom',515,'is_subtype'}|[[{'var',515,'Reason'}|[{'remote_type',515,[{'atom',515,'file_sorter'}|[{'atom',515,'reason'}|[[]]]]}]]]]}]]]]]]]}]}],
		%% Line 529
		'spec' =
		    %% Line 529
		    [{{'parse_transform',2},[{'type',529,'bounded_fun',[{'type',529,'fun',[{'type',529,'product',[{'var',529,'Forms'}|[{'var',529,'Options'}]]}|[{'var',529,'Forms2'}]]}|[[{'type',530,'constraint',[{'atom',530,'is_subtype'}|[[{'var',530,'Forms'}|[{'type',530,'list',[{'remote_type',530,[{'atom',530,'erl_parse'}|[{'atom',530,'abstract_form'}|[[]]]]}]}]]]]}|[{'type',531,'constraint',[{'atom',531,'is_subtype'}|[[{'var',531,'Forms2'}|[{'type',531,'list',[{'remote_type',531,[{'atom',531,'erl_parse'}|[{'atom',531,'abstract_form'}|[[]]]]}]}]]]]}|[{'type',532,'constraint',[{'atom',532,'is_subtype'}|[[{'var',532,'Options'}|[{'type',532,'list',[{'var',532,'Option'}]}]]]]}|[{'type',533,'constraint',[{'atom',533,'is_subtype'}|[[{'var',533,'Option'}|[{'type',533,'union',[{'atom',533,'type_checker'}|[{'remote_type',533,[{'atom',533,'compile'}|[{'atom',533,'option'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 540
		'spec' =
		    %% Line 540
		    [{{'q',1},[{'type',540,'bounded_fun',[{'type',540,'fun',[{'type',540,'product',[{'var',540,'QLC'}]}|[{'var',540,'QH'}]]}|[[{'type',541,'constraint',[{'atom',541,'is_subtype'}|[[{'var',541,'QLC'}|[{'user_type',541,'query_list_comprehension',[]}]]]]}|[{'type',542,'constraint',[{'atom',542,'is_subtype'}|[[{'var',542,'QH'}|[{'user_type',542,'query_handle',[]}]]]]}]]]]}]}],
		%% Line 546
		'spec' =
		    %% Line 546
		    [{{'q',2},[{'type',546,'bounded_fun',[{'type',546,'fun',[{'type',546,'product',[{'var',546,'QLC'}|[{'var',546,'Options'}]]}|[{'var',546,'QH'}]]}|[[{'type',547,'constraint',[{'atom',547,'is_subtype'}|[[{'var',547,'QH'}|[{'user_type',547,'query_handle',[]}]]]]}|[{'type',548,'constraint',[{'atom',548,'is_subtype'}|[[{'var',548,'Options'}|[{'type',548,'union',[{'type',548,'list',[{'var',548,'Option'}]}|[{'var',548,'Option'}]]}]]]]}|[{'type',549,'constraint',[{'atom',549,'is_subtype'}|[[{'var',549,'Option'}|[{'type',549,'union',[{'type',549,'tuple',[{'atom',549,'max_lookup'}|[{'var',549,'MaxLookup'}]]}|[{'type',550,'tuple',[{'atom',550,'cache'}|[{'user_type',550,'cache',[]}]]}|[{'atom',550,'cache'}|[{'type',551,'tuple',[{'atom',551,'join'}|[{'var',551,'Join'}]]}|[{'type',552,'tuple',[{'atom',552,'lookup'}|[{'var',552,'Lookup'}]]}|[{'type',553,'tuple',[{'atom',553,'unique'}|[{'type',553,'boolean',[]}]]}|[{'atom',553,'unique'}]]]]]]]}]]]]}|[{'type',554,'constraint',[{'atom',554,'is_subtype'}|[[{'var',554,'MaxLookup'}|[{'type',554,'union',[{'type',554,'non_neg_integer',[]}|[{'atom',554,'infinity'}]]}]]]]}|[{'type',555,'constraint',[{'atom',555,'is_subtype'}|[[{'var',555,'Join'}|[{'type',555,'union',[{'atom',555,'any'}|[{'atom',555,'lookup'}|[{'atom',555,'merge'}|[{'atom',555,'nested_loop'}]]]]}]]]]}|[{'type',556,'constraint',[{'atom',556,'is_subtype'}|[[{'var',556,'Lookup'}|[{'type',556,'union',[{'type',556,'boolean',[]}|[{'atom',556,'any'}]]}]]]]}|[{'type',557,'constraint',[{'atom',557,'is_subtype'}|[[{'var',557,'QLC'}|[{'user_type',557,'query_list_comprehension',[]}]]]]}]]]]]]]]]}]}],
		%% Line 570
		'spec' =
		    %% Line 570
		    [{{'sort',1},[{'type',570,'bounded_fun',[{'type',570,'fun',[{'type',570,'product',[{'var',570,'QH1'}]}|[{'var',570,'QH2'}]]}|[[{'type',571,'constraint',[{'atom',571,'is_subtype'}|[[{'var',571,'QH1'}|[{'user_type',571,'query_handle_or_list',[]}]]]]}|[{'type',572,'constraint',[{'atom',572,'is_subtype'}|[[{'var',572,'QH2'}|[{'user_type',572,'query_handle',[]}]]]]}]]]]}]}],
		%% Line 576
		'spec' =
		    %% Line 576
		    [{{'sort',2},[{'type',576,'bounded_fun',[{'type',576,'fun',[{'type',576,'product',[{'var',576,'QH1'}|[{'var',576,'SortOptions'}]]}|[{'var',576,'QH2'}]]}|[[{'type',577,'constraint',[{'atom',577,'is_subtype'}|[[{'var',577,'SortOptions'}|[{'user_type',577,'sort_options',[]}]]]]}|[{'type',578,'constraint',[{'atom',578,'is_subtype'}|[[{'var',578,'QH1'}|[{'user_type',578,'query_handle_or_list',[]}]]]]}|[{'type',579,'constraint',[{'atom',579,'is_subtype'}|[[{'var',579,'QH2'}|[{'user_type',579,'query_handle',[]}]]]]}]]]]]}]}],
		%% Line 593
		'spec' =
		    %% Line 593
		    [{{'string_to_handle',1},[{'type',593,'bounded_fun',[{'type',593,'fun',[{'type',593,'product',[{'var',593,'QueryString'}]}|[{'type',593,'union',[{'var',593,'QH'}|[{'var',593,'Error'}]]}]]}|[[{'type',594,'constraint',[{'atom',594,'is_subtype'}|[[{'var',594,'QueryString'}|[{'type',594,'string',[]}]]]]}|[{'type',595,'constraint',[{'atom',595,'is_subtype'}|[[{'var',595,'QH'}|[{'user_type',595,'query_handle',[]}]]]]}|[{'type',596,'constraint',[{'atom',596,'is_subtype'}|[[{'var',596,'Error'}|[{'type',596,'tuple',[{'atom',596,'error'}|[{'type',596,'module',[]}|[{'var',596,'Reason'}]]]}]]]]}|[{'type',597,'constraint',[{'atom',597,'is_subtype'}|[[{'var',597,'Reason'}|[{'type',597,'union',[{'remote_type',597,[{'atom',597,'erl_parse'}|[{'atom',597,'error_info'}|[[]]]]}|[{'remote_type',597,[{'atom',597,'erl_scan'}|[{'atom',597,'error_info'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 601
		'spec' =
		    %% Line 601
		    [{{'string_to_handle',2},[{'type',601,'bounded_fun',[{'type',601,'fun',[{'type',601,'product',[{'var',601,'QueryString'}|[{'var',601,'Options'}]]}|[{'type',601,'union',[{'var',601,'QH'}|[{'var',601,'Error'}]]}]]}|[[{'type',602,'constraint',[{'atom',602,'is_subtype'}|[[{'var',602,'QueryString'}|[{'type',602,'string',[]}]]]]}|[{'type',603,'constraint',[{'atom',603,'is_subtype'}|[[{'var',603,'Options'}|[{'type',603,'union',[{'type',603,'list',[{'var',603,'Option'}]}|[{'var',603,'Option'}]]}]]]]}|[{'type',604,'constraint',[{'atom',604,'is_subtype'}|[[{'var',604,'Option'}|[{'type',604,'union',[{'type',604,'tuple',[{'atom',604,'max_lookup'}|[{'var',604,'MaxLookup'}]]}|[{'type',605,'tuple',[{'atom',605,'cache'}|[{'user_type',605,'cache',[]}]]}|[{'atom',605,'cache'}|[{'type',606,'tuple',[{'atom',606,'join'}|[{'var',606,'Join'}]]}|[{'type',607,'tuple',[{'atom',607,'lookup'}|[{'var',607,'Lookup'}]]}|[{'type',608,'tuple',[{'atom',608,'unique'}|[{'type',608,'boolean',[]}]]}|[{'atom',608,'unique'}]]]]]]]}]]]]}|[{'type',609,'constraint',[{'atom',609,'is_subtype'}|[[{'var',609,'MaxLookup'}|[{'type',609,'union',[{'type',609,'non_neg_integer',[]}|[{'atom',609,'infinity'}]]}]]]]}|[{'type',610,'constraint',[{'atom',610,'is_subtype'}|[[{'var',610,'Join'}|[{'type',610,'union',[{'atom',610,'any'}|[{'atom',610,'lookup'}|[{'atom',610,'merge'}|[{'atom',610,'nested_loop'}]]]]}]]]]}|[{'type',611,'constraint',[{'atom',611,'is_subtype'}|[[{'var',611,'Lookup'}|[{'type',611,'union',[{'type',611,'boolean',[]}|[{'atom',611,'any'}]]}]]]]}|[{'type',612,'constraint',[{'atom',612,'is_subtype'}|[[{'var',612,'QH'}|[{'user_type',612,'query_handle',[]}]]]]}|[{'type',613,'constraint',[{'atom',613,'is_subtype'}|[[{'var',613,'Error'}|[{'type',613,'tuple',[{'atom',613,'error'}|[{'type',613,'module',[]}|[{'var',613,'Reason'}]]]}]]]]}|[{'type',614,'constraint',[{'atom',614,'is_subtype'}|[[{'var',614,'Reason'}|[{'type',614,'union',[{'remote_type',614,[{'atom',614,'erl_parse'}|[{'atom',614,'error_info'}|[[]]]]}|[{'remote_type',614,[{'atom',614,'erl_scan'}|[{'atom',614,'error_info'}|[[]]]]}]]}]]]]}]]]]]]]]]]]}]}],
		%% Line 618
		'spec' =
		    %% Line 618
		    [{{'string_to_handle',3},[{'type',618,'bounded_fun',[{'type',618,'fun',[{'type',618,'product',[{'var',618,'QueryString'}|[{'var',618,'Options'}|[{'var',618,'Bindings'}]]]}|[{'type',618,'union',[{'var',618,'QH'}|[{'var',618,'Error'}]]}]]}|[[{'type',619,'constraint',[{'atom',619,'is_subtype'}|[[{'var',619,'QueryString'}|[{'type',619,'string',[]}]]]]}|[{'type',620,'constraint',[{'atom',620,'is_subtype'}|[[{'var',620,'Options'}|[{'type',620,'union',[{'type',620,'list',[{'var',620,'Option'}]}|[{'var',620,'Option'}]]}]]]]}|[{'type',621,'constraint',[{'atom',621,'is_subtype'}|[[{'var',621,'Option'}|[{'type',621,'union',[{'type',621,'tuple',[{'atom',621,'max_lookup'}|[{'var',621,'MaxLookup'}]]}|[{'type',622,'tuple',[{'atom',622,'cache'}|[{'user_type',622,'cache',[]}]]}|[{'atom',622,'cache'}|[{'type',623,'tuple',[{'atom',623,'join'}|[{'var',623,'Join'}]]}|[{'type',624,'tuple',[{'atom',624,'lookup'}|[{'var',624,'Lookup'}]]}|[{'type',625,'tuple',[{'atom',625,'unique'}|[{'type',625,'boolean',[]}]]}|[{'atom',625,'unique'}]]]]]]]}]]]]}|[{'type',626,'constraint',[{'atom',626,'is_subtype'}|[[{'var',626,'MaxLookup'}|[{'type',626,'union',[{'type',626,'non_neg_integer',[]}|[{'atom',626,'infinity'}]]}]]]]}|[{'type',627,'constraint',[{'atom',627,'is_subtype'}|[[{'var',627,'Join'}|[{'type',627,'union',[{'atom',627,'any'}|[{'atom',627,'lookup'}|[{'atom',627,'merge'}|[{'atom',627,'nested_loop'}]]]]}]]]]}|[{'type',628,'constraint',[{'atom',628,'is_subtype'}|[[{'var',628,'Lookup'}|[{'type',628,'union',[{'type',628,'boolean',[]}|[{'atom',628,'any'}]]}]]]]}|[{'type',629,'constraint',[{'atom',629,'is_subtype'}|[[{'var',629,'Bindings'}|[{'remote_type',629,[{'atom',629,'erl_eval'}|[{'atom',629,'binding_struct'}|[[]]]]}]]]]}|[{'type',630,'constraint',[{'atom',630,'is_subtype'}|[[{'var',630,'QH'}|[{'user_type',630,'query_handle',[]}]]]]}|[{'type',631,'constraint',[{'atom',631,'is_subtype'}|[[{'var',631,'Error'}|[{'type',631,'tuple',[{'atom',631,'error'}|[{'type',631,'module',[]}|[{'var',631,'Reason'}]]]}]]]]}|[{'type',632,'constraint',[{'atom',632,'is_subtype'}|[[{'var',632,'Reason'}|[{'type',632,'union',[{'remote_type',632,[{'atom',632,'erl_parse'}|[{'atom',632,'error_info'}|[[]]]]}|[{'remote_type',632,[{'atom',632,'erl_scan'}|[{'atom',632,'error_info'}|[[]]]]}]]}]]]]}]]]]]]]]]]]]}]}],
		%% Line 676
		'spec' =
		    %% Line 676
		    [{{'table',2},[{'type',676,'bounded_fun',[{'type',676,'fun',[{'type',676,'product',[{'var',676,'TraverseFun'}|[{'var',676,'Options'}]]}|[{'var',676,'QH'}]]}|[[{'type',677,'constraint',[{'atom',677,'is_subtype'}|[[{'var',677,'TraverseFun'}|[{'type',677,'union',[{'var',677,'TraverseFun0'}|[{'var',677,'TraverseFun1'}]]}]]]]}|[{'type',678,'constraint',[{'atom',678,'is_subtype'}|[[{'var',678,'TraverseFun0'}|[{'type',678,'fun',[{'type',678,'product',[]}|[{'var',678,'TraverseResult'}]]}]]]]}|[{'type',679,'constraint',[{'atom',679,'is_subtype'}|[[{'var',679,'TraverseFun1'}|[{'type',679,'fun',[{'type',679,'product',[{'user_type',679,'match_expression',[]}]}|[{'var',679,'TraverseResult'}]]}]]]]}|[{'type',680,'constraint',[{'atom',680,'is_subtype'}|[[{'var',680,'TraverseResult'}|[{'type',680,'union',[{'var',680,'Objects'}|[{'type',680,'term',[]}]]}]]]]}|[{'type',681,'constraint',[{'atom',681,'is_subtype'}|[[{'var',681,'Objects'}|[{'type',681,'union',[{'type',681,'nil',[]}|[{'type',681,'list',[{'type',681,'union',[{'type',681,'term',[]}|[{'var',681,'ObjectList'}]]}]}]]}]]]]}|[{'type',682,'constraint',[{'atom',682,'is_subtype'}|[[{'var',682,'ObjectList'}|[{'type',682,'union',[{'var',682,'TraverseFun0'}|[{'var',682,'Objects'}]]}]]]]}|[{'type',683,'constraint',[{'atom',683,'is_subtype'}|[[{'var',683,'Options'}|[{'type',683,'union',[{'type',683,'list',[{'var',683,'Option'}]}|[{'var',683,'Option'}]]}]]]]}|[{'type',684,'constraint',[{'atom',684,'is_subtype'}|[[{'var',684,'Option'}|[{'type',684,'union',[{'type',684,'tuple',[{'atom',684,'format_fun'}|[{'var',684,'FormatFun'}]]}|[{'type',685,'tuple',[{'atom',685,'info_fun'}|[{'var',685,'InfoFun'}]]}|[{'type',686,'tuple',[{'atom',686,'lookup_fun'}|[{'var',686,'LookupFun'}]]}|[{'type',687,'tuple',[{'atom',687,'parent_fun'}|[{'var',687,'ParentFun'}]]}|[{'type',688,'tuple',[{'atom',688,'post_fun'}|[{'var',688,'PostFun'}]]}|[{'type',689,'tuple',[{'atom',689,'pre_fun'}|[{'var',689,'PreFun'}]]}|[{'type',690,'tuple',[{'atom',690,'key_equality'}|[{'var',690,'KeyComparison'}]]}]]]]]]]}]]]]}|[{'type',691,'constraint',[{'atom',691,'is_subtype'}|[[{'var',691,'FormatFun'}|[{'type',691,'union',[{'atom',691,'undefined'}|[{'type',691,'fun',[{'type',691,'product',[{'var',691,'SelectedObjects'}]}|[{'var',691,'FormatedTable'}]]}]]}]]]]}|[{'type',692,'constraint',[{'atom',692,'is_subtype'}|[[{'var',692,'SelectedObjects'}|[{'type',692,'union',[{'atom',692,'all'}|[{'type',693,'tuple',[{'atom',693,'all'}|[{'var',693,'NElements'}|[{'var',693,'DepthFun'}]]]}|[{'type',694,'tuple',[{'atom',694,'match_spec'}|[{'user_type',694,'match_expression',[]}]]}|[{'type',695,'tuple',[{'atom',695,'lookup'}|[{'var',695,'Position'}|[{'var',695,'Keys'}]]]}|[{'type',696,'tuple',[{'atom',696,'lookup'}|[{'var',696,'Position'}|[{'var',696,'Keys'}|[{'var',696,'NElements'}|[{'var',696,'DepthFun'}]]]]]}]]]]]}]]]]}|[{'type',697,'constraint',[{'atom',697,'is_subtype'}|[[{'var',697,'NElements'}|[{'type',697,'union',[{'atom',697,'infinity'}|[{'type',697,'pos_integer',[]}]]}]]]]}|[{'type',698,'constraint',[{'atom',698,'is_subtype'}|[[{'var',698,'DepthFun'}|[{'type',698,'fun',[{'type',698,'product',[{'type',698,'term',[]}]}|[{'type',698,'term',[]}]]}]]]]}|[{'type',699,'constraint',[{'atom',699,'is_subtype'}|[[{'var',699,'FormatedTable'}|[{'type',699,'union',[{'type',699,'tuple',[{'var',699,'Mod'}|[{'var',699,'Fun'}|[{'var',699,'Args'}]]]}|[{'user_type',700,'abstract_expr',[]}|[{'type',701,'string',[]}]]]}]]]]}|[{'type',702,'constraint',[{'atom',702,'is_subtype'}|[[{'var',702,'InfoFun'}|[{'type',702,'union',[{'atom',702,'undefined'}|[{'type',702,'fun',[{'type',702,'product',[{'var',702,'InfoTag'}]}|[{'var',702,'InfoValue'}]]}]]}]]]]}|[{'type',703,'constraint',[{'atom',703,'is_subtype'}|[[{'var',703,'InfoTag'}|[{'type',703,'union',[{'atom',703,'indices'}|[{'atom',703,'is_unique_objects'}|[{'atom',703,'keypos'}|[{'atom',703,'num_of_objects'}]]]]}]]]]}|[{'type',704,'constraint',[{'atom',704,'is_subtype'}|[[{'var',704,'InfoValue'}|[{'type',704,'union',[{'atom',704,'undefined'}|[{'type',704,'term',[]}]]}]]]]}|[{'type',705,'constraint',[{'atom',705,'is_subtype'}|[[{'var',705,'LookupFun'}|[{'type',705,'union',[{'atom',705,'undefined'}|[{'type',705,'fun',[{'type',705,'product',[{'var',705,'Position'}|[{'var',705,'Keys'}]]}|[{'var',705,'LookupResult'}]]}]]}]]]]}|[{'type',706,'constraint',[{'atom',706,'is_subtype'}|[[{'var',706,'LookupResult'}|[{'type',706,'union',[{'type',706,'list',[{'type',706,'term',[]}]}|[{'type',706,'term',[]}]]}]]]]}|[{'type',707,'constraint',[{'atom',707,'is_subtype'}|[[{'var',707,'ParentFun'}|[{'type',707,'union',[{'atom',707,'undefined'}|[{'type',707,'fun',[{'type',707,'product',[]}|[{'var',707,'ParentFunValue'}]]}]]}]]]]}|[{'type',708,'constraint',[{'atom',708,'is_subtype'}|[[{'var',708,'PostFun'}|[{'type',708,'union',[{'atom',708,'undefined'}|[{'type',708,'fun',[{'type',708,'product',[]}|[{'type',708,'term',[]}]]}]]}]]]]}|[{'type',709,'constraint',[{'atom',709,'is_subtype'}|[[{'var',709,'PreFun'}|[{'type',709,'union',[{'atom',709,'undefined'}|[{'type',709,'fun',[{'type',709,'product',[{'var',709,'PreArgs'}]}|[{'type',709,'term',[]}]]}]]}]]]]}|[{'type',710,'constraint',[{'atom',710,'is_subtype'}|[[{'var',710,'PreArgs'}|[{'type',710,'list',[{'var',710,'PreArg'}]}]]]]}|[{'type',711,'constraint',[{'atom',711,'is_subtype'}|[[{'var',711,'PreArg'}|[{'type',711,'union',[{'type',711,'tuple',[{'atom',711,'parent_value'}|[{'var',711,'ParentFunValue'}]]}|[{'type',711,'tuple',[{'atom',711,'stop_fun'}|[{'var',711,'StopFun'}]]}]]}]]]]}|[{'type',712,'constraint',[{'atom',712,'is_subtype'}|[[{'var',712,'ParentFunValue'}|[{'type',712,'union',[{'atom',712,'undefined'}|[{'type',712,'term',[]}]]}]]]]}|[{'type',713,'constraint',[{'atom',713,'is_subtype'}|[[{'var',713,'StopFun'}|[{'type',713,'union',[{'atom',713,'undefined'}|[{'type',713,'fun',[{'type',713,'product',[]}|[{'type',713,'term',[]}]]}]]}]]]]}|[{'type',714,'constraint',[{'atom',714,'is_subtype'}|[[{'var',714,'KeyComparison'}|[{'type',714,'union',[{'atom',714,'=:='}|[{'atom',714,'=='}]]}]]]]}|[{'type',715,'constraint',[{'atom',715,'is_subtype'}|[[{'var',715,'Position'}|[{'type',715,'pos_integer',[]}]]]]}|[{'type',716,'constraint',[{'atom',716,'is_subtype'}|[[{'var',716,'Keys'}|[{'type',716,'list',[{'type',716,'term',[]}]}]]]]}|[{'type',717,'constraint',[{'atom',717,'is_subtype'}|[[{'var',717,'Mod'}|[{'type',717,'atom',[]}]]]]}|[{'type',718,'constraint',[{'atom',718,'is_subtype'}|[[{'var',718,'Fun'}|[{'type',718,'atom',[]}]]]]}|[{'type',719,'constraint',[{'atom',719,'is_subtype'}|[[{'var',719,'Args'}|[{'type',719,'list',[{'type',719,'term',[]}]}]]]]}|[{'type',720,'constraint',[{'atom',720,'is_subtype'}|[[{'var',720,'QH'}|[{'user_type',720,'query_handle',[]}]]]]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}]}],
		%% Line 746
		'spec' =
		    %% Line 746
		    [{{'transform_from_evaluator',2},[{'type',746,'bounded_fun',[{'type',746,'fun',[{'type',746,'product',[{'var',746,'LC'}|[{'var',746,'Bs'}]]}|[{'var',746,'Return'}]]}|[[{'type',747,'constraint',[{'atom',747,'is_subtype'}|[[{'var',747,'LC'}|[{'user_type',747,'abstract_expr',[]}]]]]}|[{'type',748,'constraint',[{'atom',748,'is_subtype'}|[[{'var',748,'Bs'}|[{'remote_type',748,[{'atom',748,'erl_eval'}|[{'atom',748,'binding_struct'}|[[]]]]}]]]]}|[{'type',749,'constraint',[{'atom',749,'is_subtype'}|[[{'var',749,'Return'}|[{'type',749,'union',[{'type',749,'tuple',[{'atom',749,'ok'}|[{'user_type',749,'abstract_expr',[]}]]}|[{'type',750,'tuple',[{'atom',750,'not_ok'}|[{'type',750,'tuple',[{'atom',750,'error'}|[{'type',750,'module',[]}|[{'ann_type',750,[{'var',750,'Reason'}|[{'type',750,'term',[]}]]}]]]}]]}]]}]]]]}]]]]]}]}],
		%% Line 1005
		'record' =
		    %% Line 1005
		    [{'optz',[{'record_field',1006,{'atom',1006,'unique'},{'atom',1006,'false'}}|[{'record_field',1007,{'atom',1007,'cache'},{'atom',1007,'false'}}|[{'record_field',1008,{'atom',1008,'join_option'},{'atom',1008,'any'}}|[{'record_field',1009,{'atom',1009,'fast_join'},{'atom',1009,'no'}}|[{'record_field',1010,{'atom',1010,'opt'}}]]]]]}],
		%% Line 1014
		'record' =
		    %% Line 1014
		    [{'qlc',[{'record_field',1015,{'atom',1015,'lcf'}}|[{'record_field',1016,{'atom',1016,'codef'}}|[{'record_field',1017,{'atom',1017,'qdata'}}|[{'record_field',1018,{'atom',1018,'init_value'}}|[{'record_field',1019,{'atom',1019,'optz'}}]]]]]}],
		%% Line 1023
		'record' =
		    %% Line 1023
		    [{'simple_qlc',[{'record_field',1024,{'atom',1024,'p'}}|[{'record_field',1025,{'atom',1025,'le'}}|[{'typed_record_field',{'record_field',1026,{'atom',1026,'line'}},{'remote_type',1026,[{'atom',1026,'erl_anno'}|[{'atom',1026,'anno'}|[[]]]]}}|[{'record_field',1027,{'atom',1027,'init_value'}}|[{'record_field',1028,{'atom',1028,'optz'}}]]]]]}],
		%% Line 1031
		'record' =
		    %% Line 1031
		    [{'prepared',[{'record_field',1032,{'atom',1032,'qh'}}|[{'record_field',1034,{'atom',1034,'sorted'},{'atom',1034,'no'}}|[{'record_field',1035,{'atom',1035,'sort_info'},{'nil',1035}}|[{'record_field',1036,{'atom',1036,'sort_info2'},{'nil',1036}}|[{'record_field',1037,{'atom',1037,'lu_skip_quals'},{'nil',1037}}|[{'record_field',1038,{'atom',1038,'join'},{'tuple',1038,[{'nil',1038}|[{'nil',1038}]]}}|[{'record_field',1039,{'atom',1039,'n_objs'},{'atom',1039,'undefined'}}|[{'record_field',1040,{'atom',1040,'is_unique_objects'},{'atom',1040,'false'}}|[{'record_field',1041,{'atom',1041,'is_cached'},{'atom',1041,'false'}}]]]]]]]]]}],
		%% Line 1444
		'record' =
		    %% Line 1444
		    [{'join',[{'record_field',1445,{'atom',1445,'op'}}|[{'record_field',1445,{'atom',1445,'q1'}}|[{'record_field',1445,{'atom',1445,'q2'}}|[{'record_field',1445,{'atom',1445,'wh1'}}|[{'record_field',1445,{'atom',1445,'wh2'}}|[{'record_field',1445,{'atom',1445,'cs_fun'}}]]]]]]}],
		%% Line 3335
		'record' =
		    %% Line 3335
		    [{'m',[{'record_field',3335,{'atom',3335,'id'}}|[{'record_field',3335,{'atom',3335,'tmpdir'}}|[{'record_field',3335,{'atom',3335,'max_list'}}|[{'record_field',3335,{'atom',3335,'tmp_usage'}}]]]]}],
		%% Line 3833
		'spec' =
		    %% Line 3833
		    [{{'throw_file_error',2},[{'type',3833,'fun',[{'type',3833,'product',[{'type',3833,'string',[]}|[{'type',3833,'tuple',[{'atom',3833,'error'}|[{'type',3833,'atom',[]}]]}]]}|[{'type',3833,'no_return',[]}]]}]}],
		%% Line 3838
		'spec' =
		    %% Line 3838
		    [{{'throw_reason',1},[{'type',3838,'fun',[{'type',3838,'product',[{'type',3838,'term',[]}]}|[{'type',3838,'no_return',[]}]]}]}],
		%% Line 3843
		'spec' =
		    %% Line 3843
		    [{{'throw_error',1},[{'type',3843,'fun',[{'type',3843,'product',[{'type',3843,'term',[]}]}|[{'type',3843,'no_return',[]}]]}]}]]
'get_handle'/1 =
    %% Line 138
    fun (_0) ->
	case _0 of
	  <{'qlc_handle',H = {'qlc_lc',_6,{'qlc_opt',U,C,M}}}> when 'true' ->
	      let <_rec0> =
		  {%% Line 140
		   'qlc_opt',%% Line 140
			     U,%% Line 140
			       C,%% Line 140
				 M,'any',[],'any',524288,'allowed'}
	      in  %% Line 140
		  case H of
		    <{'qlc_lc',_7,_8}> when 'true' ->
			call 'erlang':'setelement'
			    (3, H, _rec0)
		    ( <_9> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','qlc_lc'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 141
	  <{'qlc_handle',H}> when 'true' ->
	      %% Line 142
	      H
	  %% Line 143
	  <L>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 144
	      L
	  %% Line 145
	  <_10> when 'true' ->
	      %% Line 146
	      'badarg'
	end
'append'/1 =
    %% Line 181
    fun (_0) ->
	let <_7> =
	    letrec
		'lc$^0'/1 =
		    %% Line 185
		    fun (_3) ->
			case _3 of
			  <[QH|_2]> when 'true' ->
			      let <_5> =
				  case apply 'get_handle'/1
					   (QH) of
				    <'badarg'> when 'true' ->
					call 'erlang':'error'
					    ('badarg', [_0|[]])
				    <H> when 'true' ->
					H
				  end
			      in  let <_6> =
				      apply 'lc$^0'/1
					  (_2)
				  in  ( [_5|_6]
					-| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_10> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_10})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 185
		apply 'lc$^0'/1
		    (_0)
	in  %% Line 186
	    {'qlc_handle',{'qlc_append',_7}}
'append'/2 =
    %% Line 192
    fun (_0,_1) ->
	let <_8> =
	    letrec
		'lc$^0'/1 =
		    %% Line 196
		    fun (_4) ->
			case _4 of
			  <[QH|_3]> when 'true' ->
			      let <_6> =
				  case apply 'get_handle'/1
					   (QH) of
				    <'badarg'> when 'true' ->
					call 'erlang':'error'
					    ('badarg', [_0|[_1|[]]])
				    <H> when 'true' ->
					H
				  end
			      in  let <_7> =
				      apply 'lc$^0'/1
					  (_3)
				  in  ( [_6|_7]
					-| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_12> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_12})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 196
		apply 'lc$^0'/1
		    ([_0|[_1|[]]])
	in  %% Line 197
	    {'qlc_handle',{'qlc_append',_8}}
'cursor'/1 =
    %% Line 202
    fun (_0) ->
	%% Line 203
	apply 'cursor'/2
	    (_0, [])
'cursor'/2 =
    %% Line 215
    fun (_0,_1) ->
	let <_3> =
	    apply %% Line 216
		  'options'/2
		(_1, %% Line 216
		     ['unique_all'|['cache_all'|['tmpdir'|['spawn_options'|['max_list_size'|['tmpdir_usage']]]]]])
	in  let <_2> =
		apply %% Line 219
		      'get_handle'/1
		    (_0)
	    in  %% Line 216
		case <_3,_2> of
		  %% Line 220
		  <B1,B2>
		      when let <_4> =
			    call 'erlang':'=:='
				(B1, 'badarg')
			in  let <_5> =
				call 'erlang':'=:='
				    (B2, 'badarg')
			    in  call 'erlang':'or'
				    (_4, _5) ->
		      %% Line 221
		      call 'erlang':'error'
			  ('badarg', [_0|[_1|[]]])
		  %% Line 222
		  <( [GUnique|( [GCache|( [TmpDir|( [SpawnOptions0|( [MaxList|( [TmpUsage|( []
											    -| ['compiler_generated'] )]
										-| ['compiler_generated'] )]
								     -| ['compiler_generated'] )]
						    -| ['compiler_generated'] )]
					  -| ['compiler_generated'] )]
				-| ['compiler_generated'] )]
		     -| ['compiler_generated'] ),H> when 'true' ->
		      let <SpawnOptions> =
			  apply %% Line 223
				'spawn_options'/1
			      (%% Line 223
			       SpawnOptions0)
		      in  %% Line 224
			  case apply 'cursor_process'/7
				   (H, GUnique, GCache, TmpDir, %% Line 225
								SpawnOptions, %% Line 225
									      MaxList, %% Line 225
										       TmpUsage) of
			    %% Line 226
			    <Pid>
				when call 'erlang':'is_pid'
				      (Pid) ->
				let <_7> =
				    call %% Line 227
					 'erlang':%% Line 227
						  'self'
					()
				in  %% Line 227
				    {'qlc_cursor',{Pid,_7}}
			    %% Line 228
			    <Error> when 'true' ->
				%% Line 229
				Error
			  end
		  ( <( _12
		       -| ['compiler_generated'] ),( _13
						     -| ['compiler_generated'] )> when 'true' ->
			let <_9> = {( _12
			       -| ['compiler_generated'] ),( _13
							     -| ['compiler_generated'] )}
			in  primop 'match_fail'
				({'case_clause',_9})
		    -| ['compiler_generated'] )
		end
'delete_cursor'/1 =
    %% Line 235
    fun (_0) ->
	case _0 of
	  <C = {'qlc_cursor',{_3,Owner}}>
	      when try
		    let <_1> =
			call 'erlang':'self'
			    ()
		    in  call 'erlang':'=/='
			    (Owner, _1)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 236
	      call 'erlang':'error'
		  ('not_cursor_owner', [C|[]])
	  %% Line 237
	  <{'qlc_cursor',{Pid,_4}}> when 'true' ->
	      %% Line 238
	      apply 'stop_cursor'/1
		  (Pid)
	  %% Line 239
	  <T> when 'true' ->
	      %% Line 240
	      call 'erlang':'error'
		  ('badarg', [T|[]])
	end
'e'/1 =
    %% Line 247
    fun (_0) ->
	%% Line 248
	apply 'eval'/2
	    (_0, [])
'e'/2 =
    %% Line 261
    fun (_0,_1) ->
	%% Line 262
	apply 'eval'/2
	    (_0, _1)
'eval'/1 =
    %% Line 269
    fun (_0) ->
	%% Line 270
	apply 'eval'/2
	    (_0, [])
'eval'/2 =
    %% Line 283
    fun (_0,_1) ->
	let <_3> =
	    apply %% Line 284
		  'options'/2
		(_1, %% Line 284
		     ['unique_all'|['cache_all'|['tmpdir'|['max_list_size'|['tmpdir_usage']]]]])
	in  let <_2> =
		apply %% Line 286
		      'get_handle'/1
		    (_0)
	    in  %% Line 284
		case <_3,_2> of
		  %% Line 287
		  <B1,B2>
		      when let <_4> =
			    call 'erlang':'=:='
				(B1, 'badarg')
			in  let <_5> =
				call 'erlang':'=:='
				    (B2, 'badarg')
			    in  call 'erlang':'or'
				    (_4, _5) ->
		      %% Line 288
		      call 'erlang':'error'
			  ('badarg', [_0|[_1|[]]])
		  %% Line 289
		  <( [GUnique|( [GCache|( [TmpDir|( [MaxList|( [TmpUsage|( []
									   -| ['compiler_generated'] )]
							       -| ['compiler_generated'] )]
						    -| ['compiler_generated'] )]
					  -| ['compiler_generated'] )]
				-| ['compiler_generated'] )]
		     -| ['compiler_generated'] ),Handle> when 'true' ->
		      %% Line 290
		      try
			  let <Prep> =
			      apply %% Line 291
				    'prepare_qlc'/7
				  (%% Line 291
				   Handle, %% Line 291
					   [], %% Line 291
					       GUnique, %% Line 291
							GCache, %% Line 292
								TmpDir, %% Line 292
									MaxList, %% Line 292
										 TmpUsage)
			  in  let <_7> =
				  call %% Line 293
				       'erlang':%% Line 293
						'self'
				      ()
			      in  %% Line 293
				  case apply 'setup_qlc'/2
					   (Prep, {'setup',_7}) of
				    %% Line 294
				    <{L,Post,_X_LocalPost}>
					when call 'erlang':'is_list'
					      (L) ->
					do  %% Line 295
					    apply 'post_funs'/1
						(Post)
					    %% Line 296
					    L
				    %% Line 297
				    <{Objs,Post,_X_LocalPost}>
					when call 'erlang':'is_function'
					      (Objs) ->
					%% Line 298
					letrec
					    'after$^0'/0 =
						fun () ->
						    %% Line 301
						    apply 'post_funs'/1
							(Post)
					in  try
						%% Line 299
						apply 'collect'/1
						    (Objs)
					    of <_8> ->
						do  ( apply 'after$^0'/0
							  ()
						      -| ['compiler_generated'] )
						    _8
					    catch <_11,_10,_9> ->
						do  ( apply 'after$^0'/0
							  ()
						      -| ['compiler_generated'] )
						    primop 'raise'
							(_9, _10)
				    ( <_12> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_12})
				      -| ['compiler_generated'] )
				  end
		      of <_13> ->
			  _13
		      catch <_16,_15,_14> ->
			  %% Line 304
			  case <_16,_15,_14> of
			    <( 'throw'
			       -| ['compiler_generated'] ),Term,_33> when 'true' ->
				let <Stacktrace> =
				    primop 'build_stacktrace'
					(_33)
				in  %% Line 305
				    case Stacktrace of
				      %% Line 306
				      <[{'qlc','throw_error',_21,_22}|_23]> when 'true' ->
					  %% Line 307
					  Term
				      %% Line 308
				      <_24> when 'true' ->
					  %% Line 309
					  call 'erlang':'raise'
					      ('throw', Term, Stacktrace)
				    end
			    ( <_34,_35,_36> when 'true' ->
				  primop 'raise'
				      (_36, _35)
			      -| ['compiler_generated'] )
			  end
		  ( <( _25
		       -| ['compiler_generated'] ),( _26
						     -| ['compiler_generated'] )> when 'true' ->
			let <_18> = {( _25
			       -| ['compiler_generated'] ),( _26
							     -| ['compiler_generated'] )}
			in  primop 'match_fail'
				({'case_clause',_18})
		    -| ['compiler_generated'] )
		end
'fold'/3 =
    %% Line 324
    fun (_0,_1,_2) ->
	%% Line 325
	apply 'fold'/4
	    (_0, _1, _2, [])
'fold'/4 =
    %% Line 343
    fun (_0,_1,_2,_3) ->
	let <_5> =
	    apply %% Line 344
		  'options'/2
		(_3, %% Line 344
		     ['unique_all'|['cache_all'|['tmpdir'|['max_list_size'|['tmpdir_usage']]]]])
	in  let <_4> =
		apply %% Line 346
		      'get_handle'/1
		    (_2)
	    in  %% Line 344
		case <_5,_4> of
		  %% Line 347
		  <B1,B2>
		      when let <_6> =
			    call 'erlang':'=:='
				(B1, 'badarg')
			in  let <_7> =
				call 'erlang':'=:='
				    (B2, 'badarg')
			    in  call 'erlang':'or'
				    (_6, _7) ->
		      %% Line 348
		      call 'erlang':'error'
			  ('badarg', [_0|[_1|[_2|[_3|[]]]]])
		  %% Line 349
		  <( [GUnique|( [GCache|( [TmpDir|( [MaxList|( [TmpUsage|( []
									   -| ['compiler_generated'] )]
							       -| ['compiler_generated'] )]
						    -| ['compiler_generated'] )]
					  -| ['compiler_generated'] )]
				-| ['compiler_generated'] )]
		     -| ['compiler_generated'] ),Handle> when 'true' ->
		      %% Line 350
		      try
			  let <Prep> =
			      apply %% Line 351
				    'prepare_qlc'/7
				  (%% Line 351
				   Handle, %% Line 351
					   'not_a_list', %% Line 351
							 GUnique, %% Line 351
								  GCache, %% Line 352
									  TmpDir, %% Line 352
										  MaxList, %% Line 352
											   TmpUsage)
			  in  let <_9> =
				  call %% Line 353
				       'erlang':%% Line 353
						'self'
				      ()
			      in  %% Line 353
				  case apply 'setup_qlc'/2
					   (Prep, {'setup',_9}) of
				    %% Line 354
				    <{Objs,Post,_X_LocalPost}>
					when let <_10> =
					      call 'erlang':'is_function'
						  (Objs)
					  in  let <_11> =
						  call %% Line 355
						       'erlang':%% Line 355
								'is_list'
						      (%% Line 355
						       Objs)
					      in  call 'erlang':'or'
						      (_10, _11) ->
					%% Line 356
					letrec
					    'after$^0'/0 =
						fun () ->
						    %% Line 359
						    apply 'post_funs'/1
							(Post)
					in  try
						%% Line 357
						apply 'fold_loop'/3
						    (_0, Objs, _1)
					    of <_12> ->
						do  ( apply 'after$^0'/0
							  ()
						      -| ['compiler_generated'] )
						    _12
					    catch <_15,_14,_13> ->
						do  ( apply 'after$^0'/0
							  ()
						      -| ['compiler_generated'] )
						    primop 'raise'
							(_13, _14)
				    ( <_16> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_16})
				      -| ['compiler_generated'] )
				  end
		      of <_17> ->
			  _17
		      catch <_20,_19,_18> ->
			  %% Line 362
			  case <_20,_19,_18> of
			    <( 'throw'
			       -| ['compiler_generated'] ),Term,_39> when 'true' ->
				let <Stacktrace> =
				    primop 'build_stacktrace'
					(_39)
				in  %% Line 363
				    case Stacktrace of
				      %% Line 364
				      <[{'qlc','throw_error',_27,_28}|_29]> when 'true' ->
					  %% Line 365
					  Term
				      %% Line 366
				      <_30> when 'true' ->
					  %% Line 367
					  call 'erlang':'raise'
					      ('throw', Term, Stacktrace)
				    end
			    ( <_40,_41,_42> when 'true' ->
				  primop 'raise'
				      (_42, _41)
			      -| ['compiler_generated'] )
			  end
		  ( <( _31
		       -| ['compiler_generated'] ),( _32
						     -| ['compiler_generated'] )> when 'true' ->
			let <_22> = {( _31
			       -| ['compiler_generated'] ),( _32
							     -| ['compiler_generated'] )}
			in  primop 'match_fail'
				({'case_clause',_22})
		    -| ['compiler_generated'] )
		end
'format_error'/1 =
    %% Line 375
    fun (_0) ->
	case _0 of
	  <'not_a_query_list_comprehension'> when 'true' ->
	      %% Line 376
	      call 'io_lib':'format'
		  ([97|[114|[103|[117|[109|[101|[110|[116|[32|[105|[115|[32|[110|[111|[116|[32|[97|[32|[113|[117|[101|[114|[121|[32|[108|[105|[115|[116|[32|[99|[111|[109|[112|[114|[101|[104|[101|[110|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 377
	  <{'used_generator_variable',V}> when 'true' ->
	      %% Line 378
	      call 'io_lib':'format'
		  ([103|[101|[110|[101|[114|[97|[116|[101|[100|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[109|[117|[115|[116|[32|[110|[111|[116|[32|[98|[101|[32|[117|[115|[101|[100|[32|[105|[110|[32|[108|[105|[115|[116|[32|[101|[120|[112|[114|[101|[115|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 379
																																											    [V|[]])
	  %% Line 380
	  <'binary_generator'> when 'true' ->
	      %% Line 381
	      call 'io_lib':'format'
		  ([99|[97|[110|[110|[111|[116|[32|[104|[97|[110|[100|[108|[101|[32|[98|[105|[110|[97|[114|[121|[32|[103|[101|[110|[101|[114|[97|[116|[111|[114|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 382
	  <'too_complex_join'> when 'true' ->
	      %% Line 383
	      call 'io_lib':'format'
		  ([99|[97|[110|[110|[111|[116|[32|[104|[97|[110|[100|[108|[101|[32|[106|[111|[105|[110|[32|[111|[102|[32|[116|[104|[114|[101|[101|[32|[111|[114|[32|[109|[111|[114|[101|[32|[103|[101|[110|[101|[114|[97|[116|[111|[114|[115|[32|[101|[102|[102|[105|[99|[105|[101|[110|[116|[108|[121]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 384
																																												   [])
	  %% Line 385
	  <'too_many_joins'> when 'true' ->
	      %% Line 386
	      call 'io_lib':'format'
		  ([99|[97|[110|[110|[111|[116|[32|[104|[97|[110|[100|[108|[101|[32|[109|[111|[114|[101|[32|[116|[104|[97|[110|[32|[111|[110|[101|[32|[106|[111|[105|[110|[32|[101|[102|[102|[105|[99|[105|[101|[110|[116|[108|[121]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 387
	  <'nomatch_pattern'> when 'true' ->
	      %% Line 388
	      call 'io_lib':'format'
		  ([112|[97|[116|[116|[101|[114|[110|[32|[99|[97|[110|[110|[111|[116|[32|[112|[111|[115|[115|[105|[98|[108|[121|[32|[109|[97|[116|[99|[104]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 389
	  <'nomatch_filter'> when 'true' ->
	      %% Line 390
	      call 'io_lib':'format'
		  ([102|[105|[108|[116|[101|[114|[32|[101|[118|[97|[108|[117|[97|[116|[101|[115|[32|[116|[111|[32|[39|[102|[97|[108|[115|[101|[39]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 391
	  <{Line,Mod,Reason}>
	      when call 'erlang':'is_integer'
		    (Line) ->
	      let <_1> =
		  call %% Line 393
		       Mod:%% Line 393
			   'format_error'
		      (%% Line 393
		       Reason)
	      in  let <_2> =
		      call %% Line 393
			   'lists':%% Line 393
				   'flatten'
			  (_1)
		  in  %% Line 392
		      call 'io_lib':'format'
			  ([126|[112|[58|[32|[126|[116|[115|[126|[110]]]]]]]]], %% Line 393
										[Line|[_2|[]]])
	  %% Line 395
	  <{'bad_object',FileName}> when 'true' ->
	      %% Line 396
	      call 'io_lib':'format'
		  ([116|[104|[101|[32|[116|[101|[109|[112|[111|[114|[97|[114|[121|[32|[102|[105|[108|[101|[32|[34|[126|[116|[115|[34|[32|[104|[111|[108|[100|[105|[110|[103|[32|[97|[110|[115|[119|[101|[114|[115|[32|[105|[115|[32|[99|[111|[114|[114|[117|[112|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 397
																																							  [FileName|[]])
	  %% Line 398
	  <'bad_object'> when 'true' ->
	      %% Line 399
	      call 'io_lib':'format'
		  ([116|[104|[101|[32|[107|[101|[121|[115|[32|[99|[111|[117|[108|[100|[32|[110|[111|[116|[32|[98|[101|[32|[101|[120|[116|[114|[97|[99|[116|[101|[100|[32|[102|[114|[111|[109|[32|[115|[111|[109|[101|[32|[116|[101|[114|[109]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 400
	  <{'file_error',FileName,Reason}> when 'true' ->
	      let <_3> =
		  call %% Line 401
		       'file':%% Line 401
			      'format_error'
		      (%% Line 401
		       Reason)
	      in  %% Line 401
		  call 'io_lib':'format'
		      ([34|[126|[116|[115|[34|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]], [FileName|[_3|[]]])
	  %% Line 402
	  <{'premature_eof',FileName}> when 'true' ->
	      %% Line 403
	      call 'io_lib':'format'
		  ([34|[126|[116|[115|[34|[58|[32|[101|[110|[100|[45|[111|[102|[45|[102|[105|[108|[101|[32|[119|[97|[115|[32|[101|[110|[99|[111|[117|[110|[116|[101|[114|[101|[100|[32|[105|[110|[115|[105|[100|[101|[32|[115|[111|[109|[101|[32|[98|[105|[110|[97|[114|[121|[32|[116|[101|[114|[109]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 404
																																												[FileName|[]])
	  %% Line 405
	  <{'tmpdir_usage',Why}> when 'true' ->
	      %% Line 406
	      call 'io_lib':'format'
		  ([116|[101|[109|[112|[111|[114|[97|[114|[121|[32|[102|[105|[108|[101|[32|[119|[97|[115|[32|[110|[101|[101|[100|[101|[100|[32|[102|[111|[114|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Why|[]])
	  %% Line 407
	  <{'error',Module,Reason}> when 'true' ->
	      %% Line 408
	      call Module:'format_error'
		  (Reason)
	  %% Line 409
	  <E> when 'true' ->
	      %% Line 410
	      call 'io_lib':'format'
		  ([126|[116|[112|[126|[110]]]]], [E|[]])
	end
'info'/1 =
    %% Line 415
    fun (_0) ->
	%% Line 416
	apply 'info'/2
	    (_0, [])
'info'/2 =
    %% Line 435
    fun (_0,_1) ->
	let <_3> =
	    apply %% Line 436
		  'options'/2
		(_1, %% Line 436
		     ['unique_all'|['cache_all'|['flat'|['format'|['n_elements'|['depth'|['tmpdir'|['max_list_size'|['tmpdir_usage']]]]]]]]])
	in  let <_2> =
		apply %% Line 438
		      'get_handle'/1
		    (_0)
	    in  %% Line 436
		case <_3,_2> of
		  %% Line 439
		  <B1,B2>
		      when let <_4> =
			    call 'erlang':'=:='
				(B1, 'badarg')
			in  let <_5> =
				call 'erlang':'=:='
				    (B2, 'badarg')
			    in  call 'erlang':'or'
				    (_4, _5) ->
		      %% Line 440
		      call 'erlang':'error'
			  ('badarg', [_0|[_1|[]]])
		  %% Line 441
		  <( [GUnique|( [GCache|( [Flat|( [Format|( [NElements|( [%% Line 442
									  Depth|( [%% Line 442
										   TmpDir|( [%% Line 442
											     MaxList|( [%% Line 442
													TmpUsage|( []
														   -| ['compiler_generated'] )]
												       -| ['compiler_generated'] )]
											    -| ['compiler_generated'] )]
										  -| ['compiler_generated'] )]
									 -| ['compiler_generated'] )]
							    -| ['compiler_generated'] )]
						  -| ['compiler_generated'] )]
					  -| ['compiler_generated'] )]
				-| ['compiler_generated'] )]
		     -| ['compiler_generated'] ),%% Line 443
						 H> when 'true' ->
		      %% Line 444
		      try
			  let <Prep> =
			      apply %% Line 445
				    'prepare_qlc'/7
				  (%% Line 445
				   H, %% Line 445
				      [], %% Line 445
					  GUnique, %% Line 445
						   GCache, %% Line 446
							   TmpDir, %% Line 446
								   MaxList, %% Line 446
									    TmpUsage)
			  in  let <Info> =
				  apply %% Line 447
					'le_info'/2
				      (%% Line 447
				       Prep, %% Line 447
					     {NElements,Depth})
			      in  let <AbstractCode> =
				      apply %% Line 448
					    'abstract'/4
					  (%% Line 448
					   Info, %% Line 448
						 Flat, %% Line 448
						       NElements, %% Line 448
								  Depth)
				  in  %% Line 449
				      case Format of
					%% Line 450
					<'abstract_code'> when 'true' ->
					    %% Line 451
					    apply 'abstract_code'/1
						(AbstractCode)
					%% Line 452
					<'string'> when 'true' ->
					    let <Hook> =
						fun (_12,_11,_10,_9) ->
						    %% Line 453
						    case <_12,_11,_10,_9> of
						      <{'special',_X_Line,String},_X_I,_X_P,_X_F> when 'true' ->
							  %% Line 454
							  String
						      ( <_16,_15,_14,_13> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_16,_15,_14,_13})
							      -| [{'function_name',{'-info/2-fun-0-',4}}] )
							-| ['compiler_generated'] )
						    end
					    in  let <_18> =
						    call %% Line 456
							 'erl_pp':%% Line 456
								  'expr'
							(%% Line 456
							 AbstractCode, %% Line 456
								       0, %% Line 456
									  Hook)
						in  %% Line 456
						    call 'lists':'flatten'
							(_18)
					%% Line 457
					<'debug'> when 'true' ->
					    %% Line 458
					    Info
					( <_19> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_19})
					  -| ['compiler_generated'] )
				      end
		      of <_20> ->
			  _20
		      catch <_23,_22,_21> ->
			  %% Line 460
			  case <_23,_22,_21> of
			    <( 'throw'
			       -| ['compiler_generated'] ),Term,_34> when 'true' ->
				let <Stacktrace> =
				    primop 'build_stacktrace'
					(_34)
				in  %% Line 461
				    case Stacktrace of
				      %% Line 462
				      <[{'qlc','throw_error',_28,_29}|_30]> when 'true' ->
					  %% Line 463
					  Term
				      %% Line 464
				      <_31> when 'true' ->
					  %% Line 465
					  call 'erlang':'raise'
					      ('throw', Term, Stacktrace)
				    end
			    ( <_35,_36,_37> when 'true' ->
				  primop 'raise'
				      (_37, _36)
			      -| ['compiler_generated'] )
			  end
		  ( <( _32
		       -| ['compiler_generated'] ),( _33
						     -| ['compiler_generated'] )> when 'true' ->
			let <_25> = {( _32
			       -| ['compiler_generated'] ),( _33
							     -| ['compiler_generated'] )}
			in  primop 'match_fail'
				({'case_clause',_25})
		    -| ['compiler_generated'] )
		end
'keysort'/2 =
    %% Line 474
    fun (_0,_1) ->
	%% Line 475
	apply 'keysort'/3
	    (_0, _1, [])
'keysort'/3 =
    %% Line 482
    fun (_0,_1,_2) ->
	let <_5> =
	    apply %% Line 483
		  'is_keypos'/1
		(_0)
	in  let <_4> =
		apply %% Line 484
		      'options'/2
		    (_2, %% Line 484
			 ['tmpdir'|['order'|['unique'|['compressed'|['size'|['no_files']]]]]])
	    in  let <_3> =
		    apply %% Line 486
			  'get_handle'/1
			(_1)
		in  %% Line 483
		    case <_5,_4,_3> of
		      %% Line 487
		      <( 'true'
			 -| ['compiler_generated'] ),( [TmpDir|( [Order|( [Unique|( [Compressed|_11]
										    -| ['compiler_generated'] )]
									  -| ['compiler_generated'] )]
								 -| ['compiler_generated'] )]
						       -| ['compiler_generated'] ),H>
			  when call 'erlang':'=/='
				(H,
				 'badarg') ->
			  let <_6> =
			      apply %% Line 492
				    'listify'/1
				  (_2)
			  in  %% Line 488
			      {'qlc_handle',{'qlc_sort',H,{'keysort',_0},%% Line 489
									 Unique,%% Line 490
										Compressed,%% Line 491
											   Order,_6,'allowed',%% Line 493
													      TmpDir}}
		      %% Line 494
		      <( _13
			 -| ['compiler_generated'] ),( _14
						       -| ['compiler_generated'] ),( _15
										     -| ['compiler_generated'] )> when 'true' ->
			  %% Line 495
			  call 'erlang':'error'
			      ('badarg', [_0|[_1|[_2|[]]]])
		    end
'next_answers'/1 =
    %% Line 506
    fun (_0) ->
	%% Line 507
	apply 'next_answers'/2
	    (_0, 10)
'next_answers'/2 =
    %% Line 516
    fun (_0,_1) ->
	case <_0,_1> of
	  <C = {'qlc_cursor',{_10,Owner}},%% Line 517
					  NumOfAnswers>
	      when %% Line 517
		try
		    let <_2> =
			call 'erlang':'self'
			    ()
		    in  call 'erlang':'=/='
			    (Owner, _2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 518
	      call 'erlang':'error'
		  ('not_cursor_owner', [C|[NumOfAnswers|[]]])
	  %% Line 519
	  <C = {'qlc_cursor',{Pid,_11}},NumOfAnswers> when 'true' ->
	      let <_6> =
		  case %% Line 520
		       NumOfAnswers of
		    %% Line 521
		    <'all_remaining'> when 'true' ->
			-1
		    %% Line 522
		    <_12>
			when let <_3> =
			      call 'erlang':'is_integer'
				  (NumOfAnswers)
			  in  let <_4> =
				  call 'erlang':'>'
				      (NumOfAnswers, 0)
			      in  call 'erlang':'and'
				      (_3, _4) ->
			NumOfAnswers
		    %% Line 523
		    <_13> when 'true' ->
			call 'erlang':'error'
			    ('badarg', [C|[NumOfAnswers|[]]])
		  end
	      in  %% Line 525
		  apply 'next_loop'/3
		      (Pid, [], _6)
	  %% Line 526
	  <T1,T2> when 'true' ->
	      %% Line 527
	      call 'erlang':'error'
		  ('badarg', [T1|[T2|[]]])
	end
'parse_transform'/2 =
    %% Line 535
    fun (_0,_1) ->
	%% Line 536
	call 'qlc_pt':'parse_transform'
	    (_0, _1)
'q'/1 =
    %% Line 543
    fun (_0) ->
	%% Line 544
	apply 'q'/2
	    (_0, [])
'q'/2 =
    %% Line 558
    fun (_0,_1) ->
	case <_0,_1> of
	  <QLC_lc = {'qlc_lc',_10,_11},Options> when 'true' ->
	      %% Line 559
	      case apply 'options'/2
		       (Options, ['unique'|['cache'|['max_lookup'|['join'|['lookup']]]]]) of
		%% Line 560
		<[Unique|[Cache|[Max|[Join|[Lookup|[]]]]]]> when 'true' ->
		    let <Opt> =
			{%% Line 561
			 'qlc_opt',%% Line 561
				   Unique,%% Line 561
					  Cache,%% Line 562
						Max,%% Line 562
						    Join,[],%% Line 562
							    Lookup,524288,'allowed'}
		    in  %% Line 563
			case QLC_lc of
			  <{'qlc_lc',_12,_13}> when 'true' ->
			      let <_6> =
				  call 'erlang':'setelement'
				      (3, QLC_lc, Opt)
			      in  {'qlc_handle',_6}
			  ( <_14> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','qlc_lc'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		%% Line 564
		<_15> when 'true' ->
		    %% Line 565
		    call 'erlang':'error'
			('badarg', [QLC_lc|[Options|[]]])
	      end
	  %% Line 567
	  <T1,T2> when 'true' ->
	      %% Line 568
	      call 'erlang':'error'
		  ('badarg', [T1|[T2|[]]])
	end
'sort'/1 =
    %% Line 573
    fun (_0) ->
	%% Line 574
	apply 'sort'/2
	    (_0, [])
'sort'/2 =
    %% Line 580
    fun (_0,_1) ->
	let <_3> =
	    apply %% Line 581
		  'options'/2
		(_1, %% Line 581
		     ['tmpdir'|['order'|['unique'|['compressed'|['size'|['no_files']]]]]])
	in  let <_2> =
		apply %% Line 582
		      'get_handle'/1
		    (_0)
	    in  %% Line 581
		case <_3,_2> of
		  %% Line 583
		  <B1,B2>
		      when let <_4> =
			    call 'erlang':'=:='
				(B1, 'badarg')
			in  let <_5> =
				call 'erlang':'=:='
				    (B2, 'badarg')
			    in  call 'erlang':'or'
				    (_4, _5) ->
		      %% Line 584
		      call 'erlang':'error'
			  ('badarg', [_0|[_1|[]]])
		  %% Line 585
		  <( [TD|( [Order|( [Unique|( [Compressed|_10]
					      -| ['compiler_generated'] )]
				    -| ['compiler_generated'] )]
			   -| ['compiler_generated'] )]
		     -| ['compiler_generated'] ),H> when 'true' ->
		      let <_6> =
			  apply %% Line 588
				'listify'/1
			      (_1)
		      in  %% Line 586
			  {'qlc_handle',{'qlc_sort',H,'sort',Unique,%% Line 587
								    Compressed,%% Line 587
									       Order,_6,'allowed',%% Line 589
												  TD}}
		  ( <( _11
		       -| ['compiler_generated'] ),( _12
						     -| ['compiler_generated'] )> when 'true' ->
			let <_7> = {( _11
			       -| ['compiler_generated'] ),( _12
							     -| ['compiler_generated'] )}
			in  primop 'match_fail'
				({'case_clause',_7})
		    -| ['compiler_generated'] )
		end
'string_to_handle'/1 =
    %% Line 598
    fun (_0) ->
	%% Line 599
	apply 'string_to_handle'/2
	    (_0, [])
'string_to_handle'/2 =
    %% Line 615
    fun (_0,_1) ->
	let <_2> =
	    call %% Line 616
		 'erl_eval':%% Line 616
			    'new_bindings'
		()
	in  %% Line 616
	    apply 'string_to_handle'/3
		(_0, _1, _2)
'string_to_handle'/3 =
    %% Line 633
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Str,Options,Bindings>
	      when call 'erlang':'is_list'
		    (Str) ->
	      %% Line 634
	      case apply 'options'/2
		       (Options, ['unique'|['cache'|['max_lookup'|['join'|['lookup']]]]]) of
		%% Line 635
		<'badarg'> when 'true' ->
		    %% Line 636
		    call 'erlang':'error'
			('badarg', [Str|[Options|[Bindings|[]]]])
		%% Line 637
		<[Unique|[Cache|[MaxLookup|[Join|[Lookup|[]]]]]]> when 'true' ->
		    %% Line 638
		    case call 'erl_scan':'string'
			     (Str, 1, ['text']) of
		      %% Line 639
		      <{'ok',Tokens,_20}> when 'true' ->
			  let <_4> =
			      case %% Line 641
				   call 'erl_eval':'extended_parse_exprs'
				       (Tokens) of
				%% Line 642
				<{'ok',[Expr0|[]],SBs}> when 'true' ->
				    %% Line 643
				    {'ok',Expr0,SBs}
				%% Line 644
				<{'ok',_X_ExprList,_X_SBs}> when 'true' ->
				    %% Line 645
				    call 'erlang':'error'
					('badarg', %% Line 646
						   [Str|[Options|[Bindings|[]]]])
				%% Line 647
				<E> when 'true' ->
				    %% Line 648
				    E
			      end
			  in  %% Line 650
			      case _4 of
				%% Line 651
				<{'ok',Expr,XBs}> when 'true' ->
				    let <Bs1> =
					apply %% Line 652
					      'merge_binding_structs'/2
					    (%% Line 652
					     Bindings, %% Line 652
						       XBs)
				    in  %% Line 653
					case call 'qlc_pt':'transform_expression'
						 (Expr, Bs1) of
					  %% Line 654
					  <{'ok',{'call',_21,_X_QlcQ,Handle}}> when 'true' ->
					      %% Line 655
					      case %% Line 656
						   call 'erl_eval':'exprs'
						       (Handle, Bs1) of
						<{'value',QLC_lc,_22}> when 'true' ->
						    let <O> =
							{%% Line 657
							 'qlc_opt',%% Line 657
								   Unique,%% Line 658
									  Cache,%% Line 659
										MaxLookup,%% Line 660
											  Join,[],%% Line 661
												  Lookup,524288,'allowed'}
						    in  %% Line 662
							case QLC_lc of
							  <{'qlc_lc',_23,_24}> when 'true' ->
							      let <_12> =
								  call 'erlang':'setelement'
								      (3, QLC_lc, O)
							      in  {'qlc_handle',_12}
							  ( <_25> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','qlc_lc'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
						( <_7> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_7})
						  -| ['compiler_generated'] )
					      end
					  %% Line 663
					  <{'not_ok',[{'error',Error}|_26]}> when 'true' ->
					      %% Line 664
					      apply 'error'/1
						  (Error)
					  ( <_13> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_13})
					    -| ['compiler_generated'] )
					end
				%% Line 666
				<{'error',ErrorInfo}> when 'true' ->
				    %% Line 667
				    apply 'error'/1
					(ErrorInfo)
				( <_14> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_14})
				  -| ['compiler_generated'] )
			      end
		      %% Line 669
		      <{'error',ErrorInfo,_X_EndLine}> when 'true' ->
			  %% Line 670
			  apply 'error'/1
			      (ErrorInfo)
		      ( <_15> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_15})
			-| ['compiler_generated'] )
		    end
		( <_16> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_16})
		  -| ['compiler_generated'] )
	      end
	  %% Line 673
	  <T1,T2,T3> when 'true' ->
	      %% Line 674
	      call 'erlang':'error'
		  ('badarg', [T1|[T2|[T3|[]]]])
	end
'table'/2 =
    %% Line 721
    fun (_0,_1) ->
	case <_0,_1> of
	  <TraverseFun,Options>
	      when call 'erlang':'is_function'
		    (TraverseFun) ->
	      let <_4> =
		  call %% Line 722
		       'erlang':%% Line 722
				'is_function'
		      (%% Line 722
		       TraverseFun, %% Line 722
				    0)
	      in  let <_3> =
		      call %% Line 723
			   'erlang':%% Line 723
				    'is_function'
			  (%% Line 723
			   TraverseFun, %% Line 723
					1)
		  in  %% Line 722
		      case <_4,_3> of
			%% Line 724
			<'false','false'> when 'true' ->
			    %% Line 725
			    call 'erlang':'error'
				('badarg', [TraverseFun|[Options|[]]])
			%% Line 726
			<( _11
			   -| ['compiler_generated'] ),( _12
							 -| ['compiler_generated'] )> when 'true' ->
			    %% Line 727
			    case apply 'options'/2
				     (Options, ['pre_fun'|['post_fun'|['info_fun'|['format_fun'|['lookup_fun'|['parent_fun'|['key_equality']]]]]]]) of
			      %% Line 729
			      <[PreFun|[PostFun|[InfoFun|[FormatFun|[LookupFun|[ParentFun|%% Line 730
											  [KeyEquality|[]]]]]]]]> when 'true' ->
				  let <T> =
				      {%% Line 731
				       'qlc_table',%% Line 731
						   TraverseFun,_3,%% Line 731
								  PreFun,%% Line 732
									 PostFun,%% Line 732
										 InfoFun,%% Line 735
											 FormatFun,%% Line 736
												   LookupFun,%% Line 733
													     ParentFun,%% Line 737
														       KeyEquality,'undefined','no_match_spec'}
				  in  %% Line 738
				      {'qlc_handle',T}
			      %% Line 739
			      <'badarg'> when 'true' ->
				  %% Line 740
				  call 'erlang':'error'
				      ('badarg', [TraverseFun|[Options|[]]])
			      ( <_6> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_6})
				-| ['compiler_generated'] )
			    end
		      end
	  %% Line 743
	  <T1,T2> when 'true' ->
	      %% Line 744
	      call 'erlang':'error'
		  ('badarg', [T1|[T2|[]]])
	end
'transform_from_evaluator'/2 =
    %% Line 752
    fun (_0,_1) ->
	%% Line 753
	call 'qlc_pt':'transform_from_evaluator'
	    (_0, _1)
'template_state'/0 =
    %% Line 757
    fun () ->
	%% Line 758
	1
'aux_name'/3 =
    %% Line 760
    fun (_0,_1,_2) ->
	%% Line 761
	case apply 'aux_name1'/3
		 (_0, _1, _2) of
	  <{VN,_7}> when 'true' ->
	      %% Line 762
	      VN
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_3})
	    -| ['compiler_generated'] )
	end
'name_suffix'/2 =
    %% Line 764
    fun (_0,_1) ->
	let <_2> =
	    call %% Line 765
		 'lists':%% Line 765
			 'concat'
		(%% Line 765
		 [_0|[_1|[]]])
	in  %% Line 765
	    call 'erlang':'list_to_atom'
		(_2)
'vars'/1 =
    %% Line 767
    fun (_0) ->
	let <_3> =
	    fun (_1) ->
		%% Line 768
		case _1 of
		  <{'var',_X_L,V}> when 'true' ->
		      V
		  ( <_2> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_2})
			  -| [{'function_name',{'-vars/1-fun-0-',1}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 768
	    apply 'var_ufold'/2
		(_3, _0)
'var_ufold'/2 =
    %% Line 770
    fun (_0,_1) ->
	let <_2> =
	    apply %% Line 771
		  'var_fold'/3
		(_0, %% Line 771
		     [], _1)
	in  %% Line 771
	    call 'ordsets':'from_list'
		(_2)
'all_selections'/1 =
    %% Line 773
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      %% Line 774
	      [[]]
	  %% Line 775
	  <[{I,Cs}|ICs]> when 'true' ->
	      %% Line 776
	      ( letrec
		    'lc$^0'/1 =
			fun (_6) ->
			    case _6 of
			      <[C|_2]> when 'true' ->
				  ( letrec
					'lc$^1'/1 =
					    fun (_7) ->
						case _7 of
						  <[L|_4]> when 'true' ->
						      let <_8> =
							  apply 'lc$^1'/1
							      (_4)
						      in  ( [[{I,C}|L]|_8]
							    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      apply 'lc$^0'/1
							  (_2)
						  ( <_10> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_10})
							  -| [{'function_name',{'lc$^1',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  let <_5> =
					    apply 'all_selections'/1
						(ICs)
					in  apply 'lc$^1'/1
						(_5)
				    -| ['list_comprehension'] )
			      <[]> when 'true' ->
				  []
			      ( <_11> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_11})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(Cs)
		-| ['list_comprehension'] )
	  ( <_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9})
		  -| [{'function_name',{'all_selections',1}}] )
	    -| ['compiler_generated'] )
	end
'merge_binding_structs'/2 =
    %% Line 782
    fun (_0,_1) ->
	let <_7> =
	    fun (_4,_3) ->
		%% Line 783
		case <_4,_3> of
		  <{N,V},Bs> when 'true' ->
		      call 'erl_eval':'add_binding'
			  (N, V, Bs)
		  ( <_6,_5> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_6,_5})
			  -| [{'function_name',{'-merge_binding_structs/2-fun-0-',2}}] )
		    -| ['compiler_generated'] )
		end
	in  let <_2> =
		call %% Line 784
		     'erl_eval':%% Line 784
				'bindings'
		    (_1)
	    in  %% Line 783
		call 'lists':'foldl'
		    (_7, _0, _2)
'aux_name1'/3 =
    %% Line 786
    fun (_0,_1,_2) ->
	let <SN> =
	    apply %% Line 787
		  'name_suffix'/2
		(_0, _1)
	in  %% Line 788
	    case call 'gb_sets':'is_member'
		     (SN, _2) of
	      %% Line 789
	      <'true'> when 'true' ->
		  let <_4> =
		      call 'erlang':'+'
			  (_1, 1)
		  in  apply 'aux_name1'/3
			  (_0, _4, _2)
	      %% Line 790
	      <'false'> when 'true' ->
		  {SN,_1}
	      ( <_5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_5})
		-| ['compiler_generated'] )
	    end
'var_fold'/3 =
    %% Line 793
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <F,A,Var = {'var',_9,V}>
	      when call 'erlang':'=/='
		    (V,
		     '_') ->
	      let <_3> =
		  apply %% Line 794
			F
		      (%% Line 794
		       Var)
	      in  %% Line 794
		  [_3|A]
	  %% Line 795
	  <F,A,T>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_4> =
		  call %% Line 796
		       'erlang':%% Line 796
				'tuple_to_list'
		      (%% Line 796
		       T)
	      in  %% Line 796
		  apply 'var_fold'/3
		      (F, A, _4)
	  %% Line 797
	  <F,A,[E|Es]> when 'true' ->
	      let <_5> =
		  apply %% Line 798
			'var_fold'/3
		      (%% Line 798
		       F, %% Line 798
			  A, %% Line 798
			     E)
	      in  %% Line 798
		  apply 'var_fold'/3
		      (F, _5, Es)
	  %% Line 799
	  <_X_F,A,_X_T> when 'true' ->
	      %% Line 800
	      A
	end
'options'/2 =
    %% Line 802
    fun (_0,_1) ->
	case <_0,_1> of
	  <Options,Keys>
	      when call 'erlang':'is_list'
		    (Options) ->
	      %% Line 803
	      apply 'options'/3
		  (Options, Keys, [])
	  %% Line 804
	  <Option,Keys> when 'true' ->
	      %% Line 805
	      apply 'options'/3
		  ([Option|[]], Keys, [])
	end
'options'/3 =
    %% Line 807
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Options0,[Key|Keys],L>
	      when call 'erlang':'is_list'
		    (Options0) ->
	      let <_6> =
		  case %% Line 808
		       call 'lists':'member'
			   (Key, Options0) of
		    %% Line 809
		    <'true'> when 'true' ->
			let <_3> =
			    apply %% Line 810
				  'atom_option'/1
				(%% Line 810
				 Key)
			in  let <_4> =
				call %% Line 810
				     'lists':%% Line 810
					     'delete'
				    (%% Line 810
				     Key, %% Line 810
					  Options0)
			    in  %% Line 810
				[_3|_4]
		    %% Line 811
		    <'false'> when 'true' ->
			%% Line 812
			Options0
		    ( <_5> when 'true' ->
			  %% Line 808
			  primop 'match_fail'
			      ({'case_clause',_5})
		      -| ['compiler_generated'] )
		  end
	      in  let <_51> =
		      case %% Line 814
			   call 'lists':'keyfind'
			       (Key, 1, _6) of
			%% Line 815
			<{'format_fun',U = 'undefined'}> when 'true' ->
			    %% Line 816
			    {'ok',U}
			%% Line 817
			<{'info_fun',U = 'undefined'}> when 'true' ->
			    %% Line 818
			    {'ok',U}
			%% Line 819
			<{'lookup_fun',U = 'undefined'}> when 'true' ->
			    %% Line 820
			    {'ok',U}
			%% Line 821
			<{'parent_fun',U = 'undefined'}> when 'true' ->
			    %% Line 822
			    {'ok',U}
			%% Line 823
			<{'post_fun',U = 'undefined'}> when 'true' ->
			    %% Line 824
			    {'ok',U}
			%% Line 825
			<{'pre_fun',U = 'undefined'}> when 'true' ->
			    %% Line 826
			    {'ok',U}
			%% Line 827
			<{'info_fun',Fun}>
			    when call 'erlang':'is_function'
				  (Fun,
				   1) ->
			    %% Line 828
			    {'ok',Fun}
			%% Line 829
			<{'pre_fun',Fun}>
			    when call 'erlang':'is_function'
				  (Fun,
				   1) ->
			    %% Line 830
			    {'ok',Fun}
			%% Line 831
			<{'post_fun',Fun}>
			    when call 'erlang':'is_function'
				  (Fun,
				   0) ->
			    %% Line 832
			    {'ok',Fun}
			%% Line 833
			<{'lookup_fun',Fun}>
			    when call 'erlang':'is_function'
				  (Fun,
				   2) ->
			    %% Line 834
			    {'ok',Fun}
			%% Line 835
			<{'max_lookup',Max}>
			    when let <_8> =
				  call 'erlang':'is_integer'
				      (Max)
			      in  let <_9> =
				      call 'erlang':'>='
					  (Max, 0)
				  in  call 'erlang':'and'
					  (_8, _9) ->
			    %% Line 836
			    {'ok',Max}
			%% Line 837
			<{'max_lookup','infinity'}> when 'true' ->
			    %% Line 838
			    {'ok',-1}
			%% Line 839
			<{'format_fun',Fun}>
			    when call 'erlang':'is_function'
				  (Fun,
				   1) ->
			    %% Line 840
			    {'ok',Fun}
			%% Line 841
			<{'parent_fun',Fun}>
			    when call 'erlang':'is_function'
				  (Fun,
				   0) ->
			    %% Line 842
			    {'ok',Fun}
			%% Line 843
			<{'key_equality',KE = '=='}> when 'true' ->
			    %% Line 844
			    {'ok',KE}
			%% Line 845
			<{'key_equality',KE = '=:='}> when 'true' ->
			    %% Line 846
			    {'ok',KE}
			%% Line 847
			<{'join',J = 'any'}> when 'true' ->
			    %% Line 848
			    {'ok',J}
			%% Line 849
			<{'join',J = 'nested_loop'}> when 'true' ->
			    %% Line 850
			    {'ok',J}
			%% Line 851
			<{'join',J = 'merge'}> when 'true' ->
			    %% Line 852
			    {'ok',J}
			%% Line 853
			<{'join',J = 'lookup'}> when 'true' ->
			    %% Line 854
			    {'ok',J}
			%% Line 855
			<{'lookup',LookUp}>
			    when let <_11> =
				  call 'erlang':'is_boolean'
				      (LookUp)
			      in  let <_12> =
				      call 'erlang':'=:='
					  (LookUp, 'any')
				  in  call 'erlang':'or'
					  (_11, _12) ->
			    %% Line 856
			    {'ok',LookUp}
			%% Line 857
			<{'max_list_size',Max}>
			    when let <_13> =
				  call 'erlang':'is_integer'
				      (Max)
			      in  let <_14> =
				      call 'erlang':'>='
					  (Max, 0)
				  in  call 'erlang':'and'
					  (_13, _14) ->
			    %% Line 858
			    {'ok',Max}
			%% Line 859
			<{'tmpdir_usage',TmpUsage}>
			    when let <_15> =
				  call 'erlang':'=:='
				      (TmpUsage, 'allowed')
			      in  let <_16> =
				      call %% Line 860
					   'erlang':%% Line 860
						    '=:='
					  (%% Line 860
					   TmpUsage, %% Line 860
						     'not_allowed')
				  in  let <_17> =
					  call %% Line 861
					       'erlang':%% Line 861
							'=:='
					      (%% Line 861
					       TmpUsage, %% Line 861
							 'info_msg')
				      in  let <_18> =
					      call %% Line 862
						   'erlang':%% Line 862
							    '=:='
						  (%% Line 862
						   TmpUsage, %% Line 862
							     'warning_msg')
					  in  let <_19> =
						  call %% Line 863
						       'erlang':%% Line 863
								'=:='
						      (%% Line 863
						       TmpUsage, %% Line 863
								 'error_msg')
					      in  let <_20> =
						      call %% Line 862
							   'erlang':%% Line 862
								    'or'
							  (_18, _19)
						  in  let <_21> =
							  call %% Line 861
							       'erlang':%% Line 861
									'or'
							      (_17, _20)
						      in  let <_22> =
							      call %% Line 860
								   'erlang':%% Line 860
									    'or'
								  (_16, _21)
							  in  call 'erlang':'or'
								  (_15, _22) ->
			    %% Line 864
			    {'ok',TmpUsage}
			%% Line 865
			<{'unique',Unique}>
			    when call 'erlang':'is_boolean'
				  (Unique) ->
			    %% Line 866
			    {'ok',Unique}
			%% Line 867
			<{'cache',Cache}>
			    when let <_23> =
				  call 'erlang':'is_boolean'
				      (Cache)
			      in  let <_24> =
				      call 'erlang':'=:='
					  (Cache, 'list')
				  in  call 'erlang':'or'
					  (_23, _24) ->
			    %% Line 868
			    {'ok',Cache}
			%% Line 869
			<{'cache','ets'}> when 'true' ->
			    %% Line 870
			    {'ok','true'}
			%% Line 871
			<{'cache','no'}> when 'true' ->
			    %% Line 872
			    {'ok','false'}
			%% Line 873
			<{'unique_all',UniqueAll}>
			    when call 'erlang':'is_boolean'
				  (UniqueAll) ->
			    %% Line 874
			    {'ok',UniqueAll}
			%% Line 875
			<{'cache_all',CacheAll}>
			    when let <_25> =
				  call 'erlang':'is_boolean'
				      (CacheAll)
			      in  let <_26> =
				      call %% Line 876
					   'erlang':%% Line 876
						    '=:='
					  (%% Line 876
					   CacheAll, %% Line 876
						     'list')
				  in  call 'erlang':'or'
					  (_25, _26) ->
			    %% Line 877
			    {'ok',CacheAll}
			%% Line 878
			<{'cache_all','ets'}> when 'true' ->
			    %% Line 879
			    {'ok','true'}
			%% Line 880
			<{'cache_all','no'}> when 'true' ->
			    %% Line 881
			    {'ok','false'}
			%% Line 882
			<{'spawn_options','default'}> when 'true' ->
			    %% Line 883
			    {'ok','default'}
			%% Line 884
			<{'spawn_options',SpawnOptions}> when 'true' ->
			    %% Line 885
			    case apply 'is_proper_list'/1
				     (SpawnOptions) of
			      %% Line 886
			      <'true'> when 'true' ->
				  %% Line 887
				  {'ok',SpawnOptions}
			      %% Line 888
			      <'false'> when 'true' ->
				  %% Line 889
				  'badarg'
			      ( <_27> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_27})
				-| ['compiler_generated'] )
			    end
			%% Line 891
			<{'flat',Flat}>
			    when call 'erlang':'is_boolean'
				  (Flat) ->
			    %% Line 892
			    {'ok',Flat}
			%% Line 893
			<{'format',Format}>
			    when let <_28> =
				  call 'erlang':'=:='
				      (Format, 'string')
			      in  let <_29> =
				      call %% Line 894
					   'erlang':%% Line 894
						    '=:='
					  (%% Line 894
					   Format, %% Line 894
						   'abstract_code')
				  in  let <_30> =
					  call %% Line 895
					       'erlang':%% Line 895
							'=:='
					      (%% Line 895
					       Format, %% Line 895
						       'debug')
				      in  let <_31> =
					      call %% Line 894
						   'erlang':%% Line 894
							    'or'
						  (_29, _30)
					  in  call 'erlang':'or'
						  (_28, _31) ->
			    %% Line 896
			    {'ok',Format}
			%% Line 897
			<{'n_elements',NElements}>
			    when let <_32> =
				  call 'erlang':'=:='
				      (NElements, 'infinity')
			      in  let <_33> =
				      call %% Line 898
					   'erlang':%% Line 898
						    'is_integer'
					  (%% Line 898
					   NElements)
				  in  let <_34> =
					  call %% Line 899
					       'erlang':%% Line 899
							'>'
					      (%% Line 899
					       NElements, %% Line 899
							  0)
				      in  let <_35> =
					      call %% Line 898
						   'erlang':%% Line 898
							    'and'
						  (_33, _34)
					  in  call 'erlang':'or'
						  (_32, _35) ->
			    %% Line 900
			    {'ok',NElements}
			%% Line 901
			<{'depth',Depth}>
			    when let <_36> =
				  call 'erlang':'=:='
				      (Depth, 'infinity')
			      in  let <_37> =
				      call %% Line 902
					   'erlang':%% Line 902
						    'is_integer'
					  (%% Line 902
					   Depth)
				  in  let <_38> =
					  call %% Line 902
					       'erlang':%% Line 902
							'>='
					      (%% Line 902
					       Depth, %% Line 902
						      0)
				      in  let <_39> =
					      call %% Line 902
						   'erlang':%% Line 902
							    'and'
						  (_37, _38)
					  in  call 'erlang':'or'
						  (_36, _39) ->
			    %% Line 903
			    {'ok',Depth}
			%% Line 904
			<{'order',Order}>
			    when let <_40> =
				  call 'erlang':'is_function'
				      (Order, 2)
			      in  let <_41> =
				      call %% Line 905
					   'erlang':%% Line 905
						    '=:='
					  (%% Line 905
					   Order, %% Line 905
						  'ascending')
				  in  let <_42> =
					  call %% Line 906
					       'erlang':%% Line 906
							'=:='
					      (%% Line 906
					       Order, %% Line 906
						      'descending')
				      in  let <_43> =
					      call %% Line 905
						   'erlang':%% Line 905
							    'or'
						  (_41, _42)
					  in  call 'erlang':'or'
						  (_40, _43) ->
			    %% Line 907
			    {'ok',Order}
			%% Line 908
			<{'compressed',Comp}>
			    when ( call 'erlang':'=:='
				    (Comp,
				     'true')
				-| ['compiler_generated'] ) ->
			    %% Line 909
			    {'ok',['compressed']}
			%% Line 910
			<{'compressed',Comp}>
			    when ( call 'erlang':'=:='
				    (Comp,
				     'false')
				-| ['compiler_generated'] ) ->
			    %% Line 911
			    {'ok',[]}
			%% Line 912
			<{'tmpdir',T}> when 'true' ->
			    %% Line 913
			    {'ok',T}
			%% Line 914
			<{'size',Size}>
			    when let <_45> =
				  call 'erlang':'is_integer'
				      (Size)
			      in  let <_46> =
				      call 'erlang':'>'
					  (Size, 0)
				  in  call 'erlang':'and'
					  (_45, _46) ->
			    %% Line 915
			    {'ok',Size}
			%% Line 916
			<{'no_files',NoFiles}>
			    when let <_47> =
				  call 'erlang':'is_integer'
				      (NoFiles)
			      in  let <_48> =
				      call 'erlang':'>'
					  (NoFiles, 1)
				  in  call 'erlang':'and'
					  (_47, _48) ->
			    %% Line 917
			    {'ok',NoFiles}
			%% Line 918
			<{_58,_59}>
			    when call 'erlang':'=:='
				  (_58,
				   Key) ->
			    %% Line 919
			    'badarg'
			%% Line 920
			<'false'> when 'true' ->
			    let <Default> =
				apply %% Line 921
				      'default_option'/1
				    (%% Line 921
				     Key)
			    in  %% Line 922
				{'ok',Default}
			( <_50> when 'true' ->
			      %% Line 814
			      primop 'match_fail'
				  ({'case_clause',_50})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 924
		      case _51 of
			%% Line 925
			<'badarg'> when 'true' ->
			    %% Line 926
			    'badarg'
			%% Line 927
			<{'ok',Value}> when 'true' ->
			    let <NewOptions> =
				call %% Line 928
				     'lists':%% Line 928
					     'keydelete'
				    (%% Line 928
				     Key, %% Line 928
					  1, _6)
			    in  %% Line 929
				apply 'options'/3
				    (NewOptions, Keys, [Value|L])
			( <_54> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_54})
			  -| ['compiler_generated'] )
		      end
	  %% Line 931
	  <[],[],L> when 'true' ->
	      %% Line 932
	      call 'lists':'reverse'
		  (L)
	  %% Line 933
	  <_X_Options,_60,_X_L> when 'true' ->
	      %% Line 934
	      'badarg'
	end
'default_option'/1 =
    %% Line 936
    fun (_0) ->
	case _0 of
	  <'pre_fun'> when 'true' ->
	      'undefined'
	  %% Line 937
	  <'post_fun'> when 'true' ->
	      'undefined'
	  %% Line 938
	  <'info_fun'> when 'true' ->
	      'undefined'
	  %% Line 939
	  <'format_fun'> when 'true' ->
	      'undefined'
	  %% Line 940
	  <'lookup_fun'> when 'true' ->
	      'undefined'
	  %% Line 941
	  <'max_lookup'> when 'true' ->
	      -1
	  %% Line 942
	  <'join'> when 'true' ->
	      'any'
	  %% Line 943
	  <'lookup'> when 'true' ->
	      'any'
	  %% Line 944
	  <'parent_fun'> when 'true' ->
	      'undefined'
	  %% Line 945
	  <'key_equality'> when 'true' ->
	      '=:='
	  %% Line 946
	  <'spawn_options'> when 'true' ->
	      'default'
	  %% Line 947
	  <'flat'> when 'true' ->
	      'true'
	  %% Line 948
	  <'format'> when 'true' ->
	      'string'
	  %% Line 949
	  <'n_elements'> when 'true' ->
	      'infinity'
	  %% Line 950
	  <'depth'> when 'true' ->
	      'infinity'
	  %% Line 951
	  <'max_list_size'> when 'true' ->
	      524288
	  %% Line 952
	  <'tmpdir_usage'> when 'true' ->
	      'allowed'
	  %% Line 953
	  <'cache'> when 'true' ->
	      'false'
	  %% Line 954
	  <'cache_all'> when 'true' ->
	      'false'
	  %% Line 955
	  <'unique'> when 'true' ->
	      'false'
	  %% Line 956
	  <'unique_all'> when 'true' ->
	      'false'
	  %% Line 957
	  <'order'> when 'true' ->
	      'ascending'
	  %% Line 958
	  <'compressed'> when 'true' ->
	      []
	  %% Line 959
	  <'tmpdir'> when 'true' ->
	      []
	  %% Line 960
	  <'size'> when 'true' ->
	      524288
	  %% Line 961
	  <'no_files'> when 'true' ->
	      16
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'default_option',1}}] )
	    -| ['compiler_generated'] )
	end
'atom_option'/1 =
    %% Line 963
    fun (_0) ->
	case _0 of
	  <'cache'> when 'true' ->
	      {'cache','true'}
	  %% Line 964
	  <'unique'> when 'true' ->
	      {'unique','true'}
	  %% Line 965
	  <'cache_all'> when 'true' ->
	      {'cache_all','true'}
	  %% Line 966
	  <'unique_all'> when 'true' ->
	      {'unique_all','true'}
	  %% Line 967
	  <'lookup'> when 'true' ->
	      {'lookup','true'}
	  %% Line 968
	  <'flat'> when 'true' ->
	      {'flat','true'}
	  %% Line 969
	  <Key> when 'true' ->
	      Key
	end
'is_proper_list'/1 =
    %% Line 971
    fun (_0) ->
	case _0 of
	  <[_2|L]> when 'true' ->
	      %% Line 972
	      apply 'is_proper_list'/1
		  (L)
	  %% Line 973
	  <L> when 'true' ->
	      %% Line 974
	      call 'erlang':'=:='
		  (L, [])
	end
'spawn_options'/1 =
    %% Line 976
    fun (_0) ->
	case _0 of
	  <'default'> when 'true' ->
	      %% Line 977
	      ['link']
	  %% Line 978
	  <SpawnOptions> when 'true' ->
	      let <_2> =
		  case %% Line 980
		       call 'lists':'member'
			   ('link', SpawnOptions) of
		    %% Line 981
		    <'true'> when 'true' ->
			%% Line 982
			SpawnOptions
		    %% Line 983
		    <'false'> when 'true' ->
			%% Line 984
			['link'|SpawnOptions]
		    ( <_1> when 'true' ->
			  %% Line 980
			  primop 'match_fail'
			      ({'case_clause',_1})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 979
		  call 'lists':'delete'
		      ('monitor', _2)
	end
'is_keypos'/1 =
    %% Line 987
    fun (_0) ->
	case _0 of
	  <Keypos>
	      when let <_1> =
		    call 'erlang':'is_integer'
			(_0)
		in  let <_2> =
			call 'erlang':'>'
			    (_0, 0)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 988
	      'true'
	  %% Line 989
	  <[]> when 'true' ->
	      %% Line 990
	      'false'
	  %% Line 991
	  <L> when 'true' ->
	      %% Line 992
	      apply 'is_keyposs'/1
		  (L)
	end
'is_keyposs'/1 =
    %% Line 994
    fun (_0) ->
	case _0 of
	  <[Kp|Kps]>
	      when let <_1> =
		    call 'erlang':'is_integer'
			(Kp)
		in  let <_2> =
			call 'erlang':'>'
			    (Kp, 0)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 995
	      apply 'is_keyposs'/1
		  (Kps)
	  %% Line 996
	  <Kps> when 'true' ->
	      %% Line 997
	      call 'erlang':'=:='
		  (Kps, [])
	end
'listify'/1 =
    %% Line 999
    fun (_0) ->
	case _0 of
	  <L>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 1000
	      L
	  %% Line 1001
	  <T> when 'true' ->
	      %% Line 1002
	      [T|[]]
	end
'cursor_process'/7 =
    %% Line 1046
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	let <Parent> =
	    call %% Line 1047
		 'erlang':%% Line 1047
			  'self'
		()
	in  let <Setup> = {%% Line 1048
		 'setup',%% Line 1048
			 Parent}
	    in  let <CF> =
		    fun () ->
			do  %% Line 1052
			    call 'erlang':'process_flag'
				('trap_exit', 'true')
			    let <MonRef> =
				call %% Line 1053
				     'erlang':%% Line 1053
					      'monitor'
				    (%% Line 1053
				     'process', %% Line 1053
						Parent)
			    in  let <_16> =
				    try
					let <Prep> =
					    apply %% Line 1056
						  'prepare_qlc'/7
						(_0, %% Line 1056
						     'not_a_list', _1, _2, _3, _5, _6)
					in  %% Line 1058
					    apply 'setup_qlc'/2
						(Prep, Setup)
				    of <_11> ->
					_11
				    catch <_14,_13,_12> ->
					let <_15> =
					    call %% Line 1060
						 'erlang':%% Line 1060
							  'self'
						()
					in  let <Stacktrace> =
						primop 'build_stacktrace'
						    (_12)
					    in  do  %% Line 1060
						    call 'erlang':'!'
							(Parent, {_15,%% Line 1061
								      {'caught',_14,_13,Stacktrace}})
						    %% Line 1062
						    call 'erlang':'exit'
							('normal')
				in  %% Line 1054
				    case _16 of
				      <{Objs,Post,_X_LocalPost}> when 'true' ->
					  let <_18> =
					      call %% Line 1064
						   'erlang':%% Line 1064
							    'self'
						  ()
					  in  do  %% Line 1064
						  call 'erlang':'!'
						      (Parent, {_18,'ok'})
						  do  %% Line 1065
						      apply 'wait_for_request'/3
							  (Parent, MonRef, Post)
						      %% Line 1066
						      apply 'reply'/4
							  (Parent, MonRef, Post, Objs)
				      ( <_17> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_17})
					-| ['compiler_generated'] )
				    end
		in  let <Pid> =
			call %% Line 1068
			     'erlang':%% Line 1068
				      'spawn_opt'
			    (%% Line 1068
			     CF, _4)
		    in  %% Line 1069
			apply 'parent_fun'/2
			    (Pid, Parent)
'parent_fun'/2 =
    %% Line 1072
    fun (_0,_1) ->
	%% Line 1073
	receive
	  %% Line 1074
	  <{_11,'ok'}>
	      when call 'erlang':'=:='
		    (_11,
		     _0) ->
	      _0
	  %% Line 1075
	  <{TPid,{'parent_fun',Fun}}> when 'true' ->
	      let <_7> =
		  try
		      let <_2> =
			  apply %% Line 1077
				Fun
			      ()
		      in  %% Line 1077
			  {'value',_2}
		  of <_3> ->
		      _3
		  catch <_6,_5,_4> ->
		      let <Stacktrace> =
			  primop 'build_stacktrace'
			      (_4)
		      in  %% Line 1079
			  {'parent_fun_caught',_6,_5,Stacktrace}
	      in  do  %% Line 1081
		      call 'erlang':'!'
			  (TPid, {_1,_7})
		      %% Line 1082
		      apply 'parent_fun'/2
			  (_0, _1)
	  %% Line 1083
	  <{_12,{'caught','throw',Error,[{'qlc','throw_error',_13,_14}|_15]}}>
	      when call 'erlang':'=:='
		    (_12,
		     _0) ->
	      %% Line 1084
	      Error
	  %% Line 1085
	  <{_16,{'caught',Class,Reason,Stacktrace}}>
	      when call 'erlang':'=:='
		    (_16,
		     _0) ->
	      %% Line 1086
	      call 'erlang':'raise'
		  (Class, Reason, Stacktrace)
	after 'infinity' ->
	  'true'
'reply'/4 =
    %% Line 1089
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Parent,MonRef,Post,[]> when 'true' ->
	      %% Line 1090
	      apply 'no_more'/3
		  (Parent, MonRef, Post)
	  %% Line 1091
	  <Parent,MonRef,Post,[Answer|Cont]> when 'true' ->
	      let <_4> =
		  call %% Line 1092
		       'erlang':%% Line 1092
				'self'
		      ()
	      in  do  %% Line 1092
		      call 'erlang':'!'
			  (Parent, {_4,{'answer',Answer}})
		      do  %% Line 1093
			  apply 'wait_for_request'/3
			      (Parent, MonRef, Post)
			  %% Line 1094
			  apply 'reply'/4
			      (Parent, MonRef, Post, Cont)
	  %% Line 1095
	  <Parent,MonRef,Post,Cont> when 'true' ->
	      let <_11> =
		  try
		      %% Line 1097
		      case <> of
			%% Line 1098
			<>
			    when call 'erlang':'is_function'
				  (Cont) ->
			    %% Line 1099
			    apply Cont
				()
			%% Line 1100
			<> when 'true' ->
			    %% Line 1101
			    apply 'throw_error'/1
				(Cont)
		      end
		  of <_5> ->
		      _5
		  catch <_8,_7,_6> ->
		      do  %% Line 1105
			  apply 'post_funs'/1
			      (Post)
			  let <Stacktrace> =
			      primop 'build_stacktrace'
				  (_6)
			  in  let <Message> =
				  {%% Line 1106
				   'caught',_8,_7,%% Line 1106
						  Stacktrace}
			      in  let <_10> =
				      call %% Line 1107
					   'erlang':%% Line 1107
						    'self'
					  ()
				  in  do  %% Line 1107
					  call 'erlang':'!'
					      (Parent, {_10,Message})
					  %% Line 1108
					  call 'erlang':'exit'
					      ('normal')
	      in  %% Line 1110
		  apply 'reply'/4
		      (Parent, MonRef, Post, _11)
	end
'no_more'/3 =
    %% Line 1112
    fun (_0,_1,_2) ->
	let <_3> =
	    call %% Line 1113
		 'erlang':%% Line 1113
			  'self'
		()
	in  do  %% Line 1113
		call 'erlang':'!'
		    (_0, {_3,'no_more'})
		do  %% Line 1114
		    apply 'wait_for_request'/3
			(_0, _1, _2)
		    %% Line 1115
		    apply 'no_more'/3
			(_0, _1, _2)
'wait_for_request'/3 =
    %% Line 1117
    fun (_0,_1,_2) ->
	%% Line 1118
	receive
	  %% Line 1119
	  <{_8,'stop'}>
	      when call 'erlang':'=:='
		    (_8,
		     _0) ->
	      do  %% Line 1120
		  apply 'post_funs'/1
		      (_2)
		  %% Line 1121
		  call 'erlang':'exit'
		      ('normal')
	  %% Line 1122
	  <{_9,'more'}>
	      when call 'erlang':'=:='
		    (_9,
		     _0) ->
	      %% Line 1123
	      'ok'
	  %% Line 1124
	  <{'EXIT',_10,_X_Reason}>
	      when call 'erlang':'=:='
		    (_10,
		     _0) ->
	      do  %% Line 1125
		  apply 'post_funs'/1
		      (_2)
		  %% Line 1126
		  call 'erlang':'exit'
		      ('normal')
	  %% Line 1127
	  <{'DOWN',_11,'process',_12,_X_Info}>
	      when let <_13> =
		    call 'erlang':'=:='
			(_11, _1)
		in  let <_14> =
			call 'erlang':'=:='
			    (_12, _0)
		    in  call 'erlang':'and'
			    (_13, _14) ->
	      do  %% Line 1128
		  apply 'post_funs'/1
		      (_2)
		  %% Line 1129
		  call 'erlang':'exit'
		      ('normal')
	  %% Line 1130
	  <{'EXIT',Pid,_X_Reason}>
	      when try
		    let <_3> =
			call 'erlang':'self'
			    ()
		    in  call 'erlang':'=:='
			    (Pid, _3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1132
	      apply 'wait_for_request'/3
		  (_0, _1, _2)
	  %% Line 1133
	  <Other> when 'true' ->
	      let <_4> =
		  call %% Line 1136
		       'erlang':%% Line 1136
				'self'
		      ()
	      in  do  %% Line 1134
		      call 'error_logger':'error_msg'
			  (%% Line 1135
			   [84|[104|[101|[32|[113|[108|[99|[32|[99|[117|[114|[115|[111|[114|[32|[126|[119|[32|[114|[101|[99|[101|[105|[118|[101|[100|[32|[97|[110|[32|[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[109|[101|[115|[115|[97|[103|[101|[58|[10|[126|[116|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1136
																																									       [_4|[Other|[]]])
		      %% Line 1137
		      apply 'wait_for_request'/3
			  (_0, _1, _2)
	after 'infinity' ->
	  'true'
'abstract_code'/1 =
    %% Line 1142
    fun (_0) ->
	case _0 of
	  <{'special',Line,String}> when 'true' ->
	      %% Line 1143
	      {'string',Line,String}
	  %% Line 1144
	  <Tuple>
	      when call 'erlang':'is_tuple'
		    (_0) ->
	      let <_1> =
		  call %% Line 1145
		       'erlang':%% Line 1145
				'tuple_to_list'
		      (%% Line 1145
		       Tuple)
	      in  let <_2> =
		      apply %% Line 1145
			    'abstract_code'/1
			  (_1)
		  in  %% Line 1145
		      call 'erlang':'list_to_tuple'
			  (_2)
	  %% Line 1146
	  <[H|T]> when 'true' ->
	      let <_3> =
		  apply %% Line 1147
			'abstract_code'/1
		      (%% Line 1147
		       H)
	      in  let <_4> =
		      apply %% Line 1147
			    'abstract_code'/1
			  (%% Line 1147
			   T)
		  in  %% Line 1147
		      [_3|_4]
	  %% Line 1148
	  <Term> when 'true' ->
	      %% Line 1149
	      Term
	end
'abstract'/4 =
    %% Line 1156
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Info,_X_Flat = 'false',NElements,Depth> when 'true' ->
	      %% Line 1157
	      apply 'abstract'/3
		  (Info, NElements, Depth)
	  %% Line 1158
	  <Info,_X_Flat = 'true',NElements,Depth> when 'true' ->
	      let <Abstract> =
		  apply %% Line 1159
			'abstract'/3
		      (%% Line 1159
		       Info, %% Line 1159
			     NElements, %% Line 1159
					Depth)
	      in  let <Vars> =
		      apply %% Line 1160
			    'abstract_vars'/1
			  (%% Line 1160
			   Abstract)
		  in  %% Line 1161
		      case apply 'flatten_abstr'/4
			       (Abstract, 1, Vars, []) of
			<{_16,Body0,Expr}> when 'true' ->
			    %% Line 1162
			    case Body0 of
			      %% Line 1163
			      <[]> when 'true' ->
				  %% Line 1164
				  Expr
			      %% Line 1165
			      <[{'match',_17,_18,Q}|[]]>
				  when call 'erlang':'=:='
					(_18,
					 Expr) ->
				  %% Line 1166
				  Q
			      %% Line 1167
			      <[{'match',_19,_20,Q}|Body]>
				  when call 'erlang':'=:='
					(_20,
					 Expr) ->
				  let <_8> =
				      apply %% Line 1168
					    'anno0'/0
					  ()
				  in  let <_7> =
					  call %% Line 1168
					       'lists':%% Line 1168
						       'reverse'
					      (%% Line 1168
					       Body, %% Line 1168
						     [Q|[]])
				      in  %% Line 1168
					  {'block',_8,_7}
			      %% Line 1169
			      <_21> when 'true' ->
				  let <_10> =
				      apply %% Line 1170
					    'anno0'/0
					  ()
				  in  let <_9> =
					  call %% Line 1170
					       'lists':%% Line 1170
						       'reverse'
					      (%% Line 1170
					       Body0, %% Line 1170
						      [Expr|[]])
				      in  %% Line 1170
					  {'block',_10,_9}
			    end
			( <_6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_6})
			  -| ['compiler_generated'] )
		      end
	  ( <_15,_14,_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_15,_14,_13,_12})
		  -| [{'function_name',{'abstract',4}}] )
	    -| ['compiler_generated'] )
	end
'abstract'/3 =
    %% Line 1173
    fun (_0,_1,_2) ->
	let <_3> =
	    apply %% Line 1174
		  'anno1'/0
		()
	in  %% Line 1174
	    apply 'abstract1'/4
		(_0, _1, _2, _3)
'abstract1'/4 =
    %% Line 1176
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <{'qlc',E0,Qs0,Opt},NElements,Depth,A> when 'true' ->
	      let <_8> =
		  fun (_6) ->
		      %% Line 1177
		      case _6 of
			<{'generate',P,LE}> when 'true' ->
			    let <_5> =
				call %% Line 1178
				     'erlang':%% Line 1178
					      'binary_to_term'
				    (%% Line 1178
				     P)
			    in  let <_4> =
				    apply %% Line 1179
					  'abstract1'/4
					(%% Line 1179
					 LE, %% Line 1179
					     NElements, %% Line 1179
							Depth, %% Line 1179
							       A)
				in  %% Line 1178
				    {'generate',A,_5,_4}
			%% Line 1180
			<F> when 'true' ->
			    %% Line 1181
			    call 'erlang':'binary_to_term'
				(F)
		      end
	      in  let <Qs> =
		      call %% Line 1177
			   'lists':%% Line 1177
				   'map'
			  (_8, %% Line 1182
			       Qs0)
		  in  let <E> =
			  call %% Line 1183
			       'erlang':%% Line 1183
					'binary_to_term'
			      (%% Line 1183
			       E0)
		      in  let <_13> =
			      case %% Line 1184
				   Opt of
				%% Line 1185
				<[]> when 'true' ->
				    []
				%% Line 1186
				<_58> when 'true' ->
				    let <_11> =
					apply 'abstract_term'/2
					    (Opt, 1)
				    in  [_11|[]]
			      end
			  in  %% Line 1188
			      {'call',A,{'remote',A,{'atom',A,'qlc'},{'atom',A,'q'}},[{'lc',A,E,Qs}|_13]}
	  %% Line 1189
	  <{'table',{M,F,As0}},_X_NElements,_X_Depth,Anno>
	      when %% Line 1190
		try
		    let <_15> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_16> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_17> =
				call 'erlang':'is_list'
				    (As0)
			    in  let <_18> =
				    call 'erlang':'and'
					(_16, _17)
				in  call 'erlang':'and'
					(_15, _18)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_24> =
		  letrec
		      'lc$^1'/1 =
			  %% Line 1191
			  fun (_21) ->
			      case _21 of
				<[A|_20]> when 'true' ->
				    let <_22> =
					apply 'abstract_term'/2
					    (A, 1)
				    in  let <_23> =
					    apply 'lc$^1'/1
						(_20)
					in  ( [_22|_23]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_60> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_60})
					-| [{'function_name',{'lc$^1',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  %% Line 1191
		      apply 'lc$^1'/1
			  (As0)
	      in  %% Line 1192
		  {'call',Anno,{'remote',Anno,{'atom',Anno,M},{'atom',Anno,F}},_24}
	  %% Line 1193
	  <{'table',TableDesc},_X_NElements,_X_Depth,_X_A> when 'true' ->
	      %% Line 1194
	      case call 'io_lib':'deep_char_list'
		       (TableDesc) of
		%% Line 1195
		<'true'> when 'true' ->
		    let <_26> =
			call %% Line 1197
			     'erlang':%% Line 1197
				      '++'
			    (%% Line 1197
			     TableDesc, %% Line 1197
					[46])
		    in  let <_27> =
			    call %% Line 1197
				 'lists':%% Line 1197
					 'flatten'
				(_26)
			in  %% Line 1196
			    case %% Line 1197
				 call 'erl_scan':'string'
				     (_27, 1, ['text']) of
			      <{'ok',Tokens,_59}> when 'true' ->
				  %% Line 1198
				  case %% Line 1199
				       call 'erl_eval':'extended_parse_exprs'
					   (Tokens) of
				    <{'ok',Es,Bs}> when 'true' ->
					%% Line 1200
					case call 'erl_eval':'subst_values_for_vars'
						 (Es, Bs) of
					  <[Expr|[]]> when 'true' ->
					      %% Line 1201
					      apply 'special'/1
						  (Expr)
					  ( <_30> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_30})
					    -| ['compiler_generated'] )
					end
				    ( <_29> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_29})
				      -| ['compiler_generated'] )
				  end
			      ( <_28> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_28})
				-| ['compiler_generated'] )
			    end
		%% Line 1202
		<'false'> when 'true' ->
		    %% Line 1203
		    TableDesc
		( <_31> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_31})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1205
	  <{'append',Infos},NElements,Depth,A> when 'true' ->
	      let <_37> =
		  fun (_34,_33) ->
		      let <_32> =
			  apply %% Line 1207
				'abstract1'/4
			      (_34, %% Line 1207
				    NElements, %% Line 1207
					       Depth, %% Line 1207
						      A)
		      in  %% Line 1207
			  {'cons',A,_32,_33}
	      in  let <As> =
		      call %% Line 1206
			   'lists':%% Line 1206
				   'foldr'
			  (_37, %% Line 1209
				{'nil',A}, %% Line 1209
					   Infos)
		  in  %% Line 1210
		      {'call',A,{'remote',A,{'atom',A,'qlc'},{'atom',A,'append'}},[As|[]]}
	  %% Line 1211
	  <{'sort',Info,SortOptions},NElements,Depth,A> when 'true' ->
	      let <_39> =
		  apply %% Line 1213
			'abstract1'/4
		      (%% Line 1213
		       Info, %% Line 1213
			     NElements, %% Line 1213
					Depth, %% Line 1213
					       A)
	      in  let <_40> =
		      apply %% Line 1213
			    'abstract_term'/2
			  (%% Line 1213
			   SortOptions, %% Line 1213
					1)
		  in  %% Line 1212
		      {'call',A,{'remote',A,{'atom',A,'qlc'},{'atom',A,'sort'}},%% Line 1213
										[_39|[_40|[]]]}
	  %% Line 1214
	  <{'keysort',Info,Kp,SortOptions},NElements,Depth,A> when 'true' ->
	      let <_41> =
		  apply %% Line 1216
			'abstract_term'/2
		      (%% Line 1216
		       Kp, %% Line 1216
			   1)
	      in  let <_42> =
		      apply %% Line 1216
			    'abstract1'/4
			  (%% Line 1216
			   Info, %% Line 1216
				 NElements, %% Line 1216
					    Depth, %% Line 1216
						   A)
		  in  let <_43> =
			  apply %% Line 1217
				'abstract_term'/2
			      (%% Line 1217
			       SortOptions, %% Line 1217
					    1)
		      in  %% Line 1215
			  {'call',A,{'remote',A,{'atom',A,'qlc'},{'atom',A,'keysort'}},%% Line 1216
										       [_41|[_42|%% Line 1217
												 [_43|[]]]]}
	  %% Line 1218
	  <{'list',L,MS},NElements,Depth,A> when 'true' ->
	      let <_44> =
		  apply %% Line 1220
			'abstract1'/4
		      (%% Line 1220
		       L, %% Line 1220
			  NElements, %% Line 1220
				     Depth, %% Line 1220
					    A)
	      in  let <_45> =
		      apply %% Line 1222
			    'depth'/2
			  (%% Line 1222
			   MS, %% Line 1222
			       Depth)
		  in  let <_46> =
			  apply %% Line 1222
				'abstract_term'/2
			      (_45, %% Line 1222
				    1)
		      in  %% Line 1219
			  {'call',A,{'remote',A,{'atom',A,'ets'},{'atom',A,'match_spec_run'}},%% Line 1220
											      [_44|%% Line 1221
												   [{'call',A,{'remote',A,{'atom',A,'ets'},{'atom',A,'match_spec_compile'}},%% Line 1222
																					    [_46|[]]}|%% Line 1222
																						      []]]}
	  %% Line 1223
	  <{'list',L},NElements,Depth,_X_A>
	      when let <_47> =
		    call 'erlang':'=:='
			(NElements, 'infinity')
		in  let <_49> =
			try
			    let <_48> =
				call %% Line 1224
				     'erlang':%% Line 1224
					      'length'
				    (%% Line 1224
				     L)
			    in  %% Line 1224
				call 'erlang':'>='
				    (NElements, _48)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  call 'erlang':'or'
			    (_47, _49) ->
	      let <_50> =
		  apply %% Line 1225
			'depth'/2
		      (%% Line 1225
		       L, %% Line 1225
			  Depth)
	      in  %% Line 1225
		  apply 'abstract_term'/2
		      (_50, 1)
	  %% Line 1226
	  <{'list',L},NElements,Depth,_X_A> when 'true' ->
	      let <_51> =
		  call %% Line 1227
		       'lists':%% Line 1227
			       'sublist'
		      (%% Line 1227
		       L, %% Line 1227
			  NElements)
	      in  let <_52> =
		      apply %% Line 1227
			    'depth'/2
			  (_51, %% Line 1227
				Depth)
		  in  let <_53> =
			  call %% Line 1227
			       'erlang':%% Line 1227
					'++'
			      (_52, %% Line 1227
				    '...')
		      in  %% Line 1227
			  apply 'abstract_term'/2
			      (_53, 1)
	  ( <_57,_56,_55,_54> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_57,_56,_55,_54})
		  -| [{'function_name',{'abstract1',4}}] )
	    -| ['compiler_generated'] )
	end
'special'/1 =
    %% Line 1229
    fun (_0) ->
	case _0 of
	  <{'value',_6,Thing}> when 'true' ->
	      %% Line 1230
	      apply 'abstract_term'/1
		  (Thing)
	  %% Line 1231
	  <Tuple>
	      when call 'erlang':'is_tuple'
		    (_0) ->
	      let <_1> =
		  call %% Line 1232
		       'erlang':%% Line 1232
				'tuple_to_list'
		      (%% Line 1232
		       Tuple)
	      in  let <_2> =
		      apply %% Line 1232
			    'special'/1
			  (_1)
		  in  %% Line 1232
		      call 'erlang':'list_to_tuple'
			  (_2)
	  %% Line 1233
	  <[E|Es]> when 'true' ->
	      let <_3> =
		  apply %% Line 1234
			'special'/1
		      (%% Line 1234
		       E)
	      in  let <_4> =
		      apply %% Line 1234
			    'special'/1
			  (%% Line 1234
			   Es)
		  in  %% Line 1234
		      [_3|_4]
	  %% Line 1235
	  <Expr> when 'true' ->
	      %% Line 1236
	      Expr
	end
'depth'/2 =
    %% Line 1238
    fun (_0,_1) ->
	case <_0,_1> of
	  <List,'infinity'> when 'true' ->
	      %% Line 1239
	      List
	  %% Line 1240
	  <List,Depth> when 'true' ->
	      %% Line 1241
	      ( letrec
		    'lc$^0'/1 =
			fun (_4) ->
			    case _4 of
			      <[E|_3]> when 'true' ->
				  let <_5> =
				      apply 'depth1'/2
					  (E, Depth)
				  in  let <_6> =
					  apply 'lc$^0'/1
					      (_3)
				      in  ( [_5|_6]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_9> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_9})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(List)
		-| ['list_comprehension'] )
	end
'depth_fun'/1 =
    %% Line 1243
    fun (_0) ->
	case _0 of
	  <_X_Depth = 'infinity'> when 'true' ->
	      %% Line 1244
	      ( fun (_1) ->
		    _1
		-| [{'id',{0,0,'-depth_fun/1-fun-0-'}}] )
	  %% Line 1245
	  <Depth> when 'true' ->
	      %% Line 1246
	      ( fun (_3) ->
		    apply 'depth1'/2
			(_3, Depth)
		-| [{'id',{0,0,'-depth_fun/1-fun-1-'}}] )
	end
'depth1'/2 =
    %% Line 1248
    fun (_0,_1) ->
	case <_0,_1> of
	  <L = [],_X_D> when 'true' ->
	      %% Line 1249
	      L
	  %% Line 1250
	  <_X_Term,0> when 'true' ->
	      %% Line 1251
	      '...'
	  %% Line 1252
	  <Tuple,D>
	      when call 'erlang':'is_tuple'
		    (Tuple) ->
	      let <_3> =
		  call %% Line 1253
		       'erlang':%% Line 1253
				'tuple_size'
		      (%% Line 1253
		       Tuple)
	      in  let <_2> =
		      call %% Line 1253
			   'erlang':%% Line 1253
				    '-'
			  (%% Line 1253
			   D, %% Line 1253
			      1)
		  in  %% Line 1253
		      apply 'depth_tuple'/5
			  (Tuple, _3, 1, _2, [])
	  %% Line 1254
	  <List,D>
	      when call 'erlang':'is_list'
		    (List) ->
	      %% Line 1255
	      case <> of
		%% Line 1256
		<>
		    when call 'erlang':'=:='
			  (D,
			   1) ->
		    %% Line 1257
		    ['...']
		%% Line 1258
		<> when 'true' ->
		    let <_4> =
			call %% Line 1259
			     'erlang':%% Line 1259
				      '-'
			    (%% Line 1259
			     D, %% Line 1259
				1)
		    in  %% Line 1259
			apply 'depth_list'/2
			    (List, _4)
	      end
	  %% Line 1261
	  <Binary,D>
	      when try
		    let <_6> =
			call 'erlang':'byte_size'
			    (Binary)
		    in  let <_5> =
			    call 'erlang':'-'
				(D, 1)
			in  call 'erlang':'>'
				(_6, _5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <D1> =
		  call %% Line 1262
		       'erlang':%% Line 1262
				'-'
		      (%% Line 1262
		       D, %% Line 1262
			  1)
	      in  %% Line 1263
		  case Binary of
		    <#{#<Bin>(D1,8,'binary',['unsigned'|['big']]),
		       #<_11>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			%% Line 1264
			#{#<Bin>('all',8,'binary',['unsigned'|['big']]),
			  #<3026478>(24,1,'integer',['unsigned'|['big']])}#
		    ( <_8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_8})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1265
	  <T,_X_Depth> when 'true' ->
	      %% Line 1266
	      T
	end
'depth_list'/2 =
    %% Line 1268
    fun (_0,_1) ->
	case <_0,_1> of
	  <L = [],_X_D> when 'true' ->
	      %% Line 1269
	      L
	  %% Line 1270
	  <_X_L,0> when 'true' ->
	      %% Line 1271
	      '...'
	  %% Line 1272
	  <[E|Es],D> when 'true' ->
	      let <_2> =
		  apply %% Line 1273
			'depth1'/2
		      (%% Line 1273
		       E, %% Line 1273
			  D)
	      in  let <_3> =
		      call %% Line 1273
			   'erlang':%% Line 1273
				    '-'
			  (%% Line 1273
			   D, %% Line 1273
			      1)
		  in  let <_4> =
			  apply %% Line 1273
				'depth_list'/2
			      (%% Line 1273
			       Es, _3)
		      in  %% Line 1273
			  [_2|_4]
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'depth_list',2}}] )
	    -| ['compiler_generated'] )
	end
'depth_tuple'/5 =
    %% Line 1275
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <_X_Tuple,Sz,I,_X_D,L>
	      when call 'erlang':'>'
		    (I,
		     Sz) ->
	      let <_5> =
		  call %% Line 1276
		       'lists':%% Line 1276
			       'reverse'
		      (%% Line 1276
		       L)
	      in  %% Line 1276
		  call 'erlang':'list_to_tuple'
		      (_5)
	  %% Line 1277
	  <_X_L,_X_Sz,_X_I,0,L> when 'true' ->
	      let <_6> =
		  call %% Line 1278
		       'lists':%% Line 1278
			       'reverse'
		      (%% Line 1278
		       L, %% Line 1278
			  ['...'])
	      in  %% Line 1278
		  call 'erlang':'list_to_tuple'
		      (_6)
	  %% Line 1279
	  <Tuple,Sz,I,D,L> when 'true' ->
	      let <_7> =
		  call %% Line 1280
		       'erlang':%% Line 1280
				'element'
		      (%% Line 1280
		       I, %% Line 1280
			  Tuple)
	      in  let <E> =
		      apply %% Line 1280
			    'depth1'/2
			  (_7, %% Line 1280
			       D)
		  in  let <_10> =
			  call %% Line 1281
			       'erlang':%% Line 1281
					'+'
			      (%% Line 1281
			       I, %% Line 1281
				  1)
		      in  let <_9> =
			      call %% Line 1281
				   'erlang':%% Line 1281
					    '-'
				  (%% Line 1281
				   D, %% Line 1281
				      1)
			  in  %% Line 1281
			      apply 'depth_tuple'/5
				  (Tuple, Sz, _10, _9, [E|L])
	end
'abstract_term'/1 =
    %% Line 1283
    fun (_0) ->
	%% Line 1284
	apply 'abstract_term'/2
	    (_0, 0)
'abstract_term'/2 =
    %% Line 1286
    fun (_0,_1) ->
	let <_2> =
	    apply %% Line 1287
		  'anno'/1
		(_1)
	in  %% Line 1287
	    apply 'abstr_term'/2
		(_0, _2)
'abstr_term'/2 =
    %% Line 1289
    fun (_0,_1) ->
	case <_0,_1> of
	  <Tuple,Line>
	      when call 'erlang':'is_tuple'
		    (Tuple) ->
	      let <_8> =
		  letrec
		      'lc$^0'/1 =
			  %% Line 1290
			  fun (_5) ->
			      case _5 of
				<[E|_3]> when 'true' ->
				    let <_6> =
					apply 'abstr_term'/2
					    (E, Line)
				    in  let <_7> =
					    apply 'lc$^0'/1
						(_3)
					in  ( [_6|_7]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_35> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_35})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  let <_4> =
			  call %% Line 1290
			       'erlang':%% Line 1290
					'tuple_to_list'
			      (%% Line 1290
			       Tuple)
		      in  %% Line 1290
			  apply 'lc$^0'/1
			      (_4)
	      in  %% Line 1290
		  {'tuple',Line,_8}
	  %% Line 1291
	  <L = [_33|_34],Line> when 'true' ->
	      %% Line 1292
	      case call 'io_lib':'char_list'
		       (L) of
		%% Line 1293
		<'true'> when 'true' ->
		    let <_9> =
			call %% Line 1294
			     'erl_anno':%% Line 1294
					'line'
			    (%% Line 1294
			     Line)
		    in  %% Line 1294
			call 'erl_parse':'abstract'
			    (L, _9)
		%% Line 1295
		<'false'> when 'true' ->
		    %% Line 1296
		    apply 'abstr_list'/2
			(L, Line)
		( <_10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1298
	  <Fun,Line>
	      when call 'erlang':'is_function'
		    (Fun) ->
	      %% Line 1299
	      case call 'erl_eval':'fun_data'
		       (Fun) of
		%% Line 1300
		<{'fun_data',_X_Bs,Cs}> when 'true' ->
		    %% Line 1301
		    {'fun',Line,{'clauses',Cs}}
		%% Line 1302
		<{'named_fun_data',_X_Bs,Name,Cs}> when 'true' ->
		    %% Line 1303
		    {'named_fun',Line,Name,Cs}
		%% Line 1304
		<'false'> when 'true' ->
		    %% Line 1305
		    case call 'erlang':'fun_info'
			     (Fun, 'name') of
		      <{'name',Name}> when 'true' ->
			  %% Line 1306
			  case call 'erlang':'fun_info'
				   (Fun, 'arity') of
			    <{'arity',Arity}> when 'true' ->
				%% Line 1307
				case call 'erlang':'fun_info'
					 (Fun, 'type') of
				  %% Line 1308
				  <{'type','external'}> when 'true' ->
				      %% Line 1309
				      case call 'erlang':'fun_info'
					       (Fun, 'module') of
					<{'module',Module}> when 'true' ->
					    %% Line 1310
					    {'fun',Line,{'function',%% Line 1311
								    {'atom',Line,Module},%% Line 1312
											 {'atom',Line,Name},%% Line 1313
													    {'integer',Line,Arity}}}
					( <_13> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_13})
					  -| ['compiler_generated'] )
				      end
				  %% Line 1314
				  <{'type','local'}> when 'true' ->
				      %% Line 1315
				      {'fun',Line,{'function',Name,Arity}}
				  ( <_14> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_14})
				    -| ['compiler_generated'] )
				end
			    ( <_12> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_12})
			      -| ['compiler_generated'] )
			  end
		      ( <_11> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_11})
			-| ['compiler_generated'] )
		    end
		( <_15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1318
	  <PPR,Line>
	      when let <_16> =
		    call 'erlang':'is_pid'
			(PPR)
		in  let <_17> =
			call 'erlang':'is_port'
			    (PPR)
		    in  let <_18> =
			    call 'erlang':'is_reference'
				(PPR)
			in  let <_19> =
				call 'erlang':'or'
				    (_17, _18)
			    in  call 'erlang':'or'
				    (_16, _19) ->
	      let <_20> =
		  call %% Line 1319
		       'io_lib':%% Line 1319
				'write'
		      (%% Line 1319
		       PPR)
	      in  let <_21> =
		      call %% Line 1319
			   'lists':%% Line 1319
				   'flatten'
			  (_20)
		  in  %% Line 1319
		      {'special',Line,_21}
	  %% Line 1320
	  <Map,Line>
	      when call 'erlang':'is_map'
		    (Map) ->
	      let <_29> =
		  letrec
		      'lc$^1'/1 =
			  %% Line 1323
			  fun (_25) ->
			      case _25 of
				<[{K,V}|_23]> when 'true' ->
				    let <_27> =
					apply 'abstr_term'/2
					    (K, Line)
				    in  let <_26> =
					    apply 'abstr_term'/2
						(V, Line)
					in  let <_28> =
						apply 'lc$^1'/1
						    (_23)
					    in  ( [{'map_field_assoc',Line,_27,_26}|_28]
						  -| ['compiler_generated'] )
				( <[_22|_23]> when 'true' ->
				      apply 'lc$^1'/1
					  (_23)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_36> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_36})
					-| [{'function_name',{'lc$^1',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  let <_24> =
			  call %% Line 1323
			       'maps':%% Line 1323
				      'to_list'
			      (%% Line 1323
			       Map)
		      in  %% Line 1323
			  apply 'lc$^1'/1
			      (_24)
	      in  %% Line 1321
		  {'map',Line,_29}
	  %% Line 1324
	  <Simple,Line> when 'true' ->
	      let <_30> =
		  call %% Line 1325
		       'erl_anno':%% Line 1325
				  'line'
		      (%% Line 1325
		       Line)
	      in  %% Line 1325
		  call 'erl_parse':'abstract'
		      (Simple, _30)
	end
'abstr_list'/2 =
    %% Line 1327
    fun (_0,_1) ->
	case <_0,_1> of
	  <[H|T],Line> when 'true' ->
	      let <_3> =
		  apply %% Line 1328
			'abstr_term'/2
		      (%% Line 1328
		       H, %% Line 1328
			  Line)
	      in  let <_2> =
		      apply %% Line 1328
			    'abstr_list'/2
			  (%% Line 1328
			   T, %% Line 1328
			      Line)
		  in  %% Line 1328
		      {'cons',Line,_3,_2}
	  %% Line 1329
	  <T,Line> when 'true' ->
	      %% Line 1330
	      apply 'abstr_term'/2
		  (T, Line)
	end
'flatten_abstr'/4 =
    %% Line 1335
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <{'call',L1,_@r0 = {'remote',L2,{'atom',L3,'qlc'},{'atom',L4,'q'}},[LC0|Os]},VN0,Vars,Body0> when 'true' ->
	      %% Line 1336
	      case LC0 of
		<{'lc',L,E,Qs0}> when 'true' ->
		    let <F> =
			fun (_7,_6) ->
			    %% Line 1337
			    case <_7,_6> of
			      <{'generate',Ln,P,LE0},{VN1,Body1}> when 'true' ->
				  %% Line 1338
				  case apply 'flatten_abstr'/4
					   (LE0, VN1, Vars, Body1) of
				    <{VN2,Body2,LE}> when 'true' ->
					%% Line 1339
					{{'generate',Ln,P,LE},{VN2,Body2}}
				    ( <_5> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_5})
				      -| ['compiler_generated'] )
				  end
			      %% Line 1340
			      <Fil,VN_Body> when 'true' ->
				  %% Line 1341
				  {Fil,VN_Body}
			    end
		    in  %% Line 1343
			case call 'lists':'mapfoldl'
				 (F, {VN0,Body0}, Qs0) of
			  <{Qs,{VN3,Body}}> when 'true' ->
			      let <LC> =
				  {%% Line 1344
				   'lc',%% Line 1344
					L,%% Line 1344
					  E,%% Line 1344
					    Qs}
			      in  %% Line 1345
				  case apply 'aux_name1'/3
					   ('V', VN3, Vars) of
				    <{V,VN}> when 'true' ->
					let <Var> = {%% Line 1346
					     'var',%% Line 1346
						   L1,%% Line 1346
						      V}
					in  let <QLC> =
						{%% Line 1347
						 'call',%% Line 1347
							L1,%% Line 1347
							   _@r0,%% Line 1347
								[LC|Os]}
					    in  let <_16> =
						    call %% Line 1348
							 'erlang':%% Line 1348
								  '+'
							(%% Line 1348
							 VN, %% Line 1348
							     1)
						in  %% Line 1348
						    {_16,[{'match',L1,Var,QLC}|Body],Var}
				    ( <_13> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_13})
				      -| ['compiler_generated'] )
				  end
			  ( <_11> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_11})
			    -| ['compiler_generated'] )
			end
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1349
	  <T0,VN0,Vars,Body0>
	      when call 'erlang':'is_tuple'
		    (T0) ->
	      let <_17> =
		  call %% Line 1350
		       'erlang':%% Line 1350
				'tuple_to_list'
		      (%% Line 1350
		       T0)
	      in  %% Line 1350
		  case apply 'flatten_abstr'/4
			   (_17, VN0, Vars, Body0) of
		    <{VN,Body,L}> when 'true' ->
			let <_19> =
			    call %% Line 1351
				 'erlang':%% Line 1351
					  'list_to_tuple'
				(%% Line 1351
				 L)
			in  %% Line 1351
			    {VN,Body,_19}
		    ( <_18> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_18})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1352
	  <[E0|Es0],VN0,Vars,Body0> when 'true' ->
	      %% Line 1353
	      case apply 'flatten_abstr'/4
		       (E0, VN0, Vars, Body0) of
		<{VN1,Body1,E}> when 'true' ->
		    %% Line 1354
		    case apply 'flatten_abstr'/4
			     (Es0, VN1, Vars, Body1) of
		      <{VN,Body,Es}> when 'true' ->
			  %% Line 1355
			  {VN,Body,[E|Es]}
		      ( <_21> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_21})
			-| ['compiler_generated'] )
		    end
		( <_20> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_20})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1356
	  <E,VN,_X_Vars,Body> when 'true' ->
	      %% Line 1357
	      {VN,Body,E}
	end
'abstract_vars'/1 =
    %% Line 1359
    fun (_0) ->
	let <_1> =
	    apply %% Line 1360
		  'vars'/1
		(_0)
	in  let <_2> =
		call %% Line 1360
		     'ordsets':%% Line 1360
			       'to_list'
		    (_1)
	    in  %% Line 1360
		call 'gb_sets':'from_list'
		    (_2)
'collect'/1 =
    %% Line 1362
    fun (_0) ->
	case _0 of
	  <L = []> when 'true' ->
	      %% Line 1363
	      L
	  %% Line 1364
	  <[Answer|Cont]> when 'true' ->
	      let <_1> =
		  apply %% Line 1365
			'collect'/1
		      (%% Line 1365
		       Cont)
	      in  %% Line 1365
		  [Answer|_1]
	  %% Line 1366
	  <Cont> when 'true' ->
	      %% Line 1367
	      case apply Cont
		       () of
		%% Line 1368
		<Answers>
		    when call 'erlang':'is_list'
			  (Answers) ->
		    %% Line 1369
		    apply 'collect'/1
			(Answers)
		%% Line 1370
		<Term> when 'true' ->
		    %% Line 1371
		    apply 'throw_error'/1
			(Term)
	      end
	end
'fold_loop'/3 =
    %% Line 1374
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Fun,[Obj|Cont],Acc> when 'true' ->
	      let <_3> =
		  apply %% Line 1375
			Fun
		      (%% Line 1375
		       Obj, %% Line 1375
			    Acc)
	      in  %% Line 1375
		  apply 'fold_loop'/3
		      (Fun, Cont, _3)
	  %% Line 1376
	  <_X_Fun,[],Acc> when 'true' ->
	      %% Line 1377
	      Acc
	  %% Line 1378
	  <Fun,Cont,Acc> when 'true' ->
	      %% Line 1379
	      case apply Cont
		       () of
		%% Line 1380
		<Objects>
		    when call 'erlang':'is_list'
			  (Objects) ->
		    %% Line 1381
		    apply 'fold_loop'/3
			(Fun, Objects, Acc)
		%% Line 1382
		<Term> when 'true' ->
		    %% Line 1383
		    Term
	      end
	end
'next_loop'/3 =
    %% Line 1386
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Pid,L,N>
	      when call 'erlang':'=/='
		    (N,
		     0) ->
	      %% Line 1387
	      case apply 'monitor_request'/2
		       (Pid, 'more') of
		%% Line 1388
		<'no_more'> when 'true' ->
		    %% Line 1389
		    call 'lists':'reverse'
			(L)
		%% Line 1390
		<{'answer',Answer}> when 'true' ->
		    let <_3> =
			call %% Line 1391
			     'erlang':%% Line 1391
				      '-'
			    (%% Line 1391
			     N, %% Line 1391
				1)
		    in  %% Line 1391
			apply 'next_loop'/3
			    (Pid, [Answer|L], _3)
		%% Line 1392
		<{'caught','throw',Error,[{'qlc','throw_error',_11,_12}|_13]}> when 'true' ->
		    %% Line 1393
		    Error
		%% Line 1394
		<{'caught',Class,Reason,Stacktrace}> when 'true' ->
		    let <_4> =
			call %% Line 1396
			     'erlang':%% Line 1396
				      'self'
			    ()
		    in  %% Line 1395
			case %% Line 1396
			     call 'erlang':'process_info'
				 (_4, 'current_stacktrace') of
			  <{'current_stacktrace',CurrentStacktrace}> when 'true' ->
			      let <_6> =
				  call %% Line 1397
				       'erlang':%% Line 1397
						'++'
				      (%% Line 1397
				       Stacktrace, %% Line 1397
						   CurrentStacktrace)
			      in  %% Line 1397
				  call 'erlang':'raise'
				      (Class, Reason, _6)
			  ( <_5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_5})
			    -| ['compiler_generated'] )
			end
		%% Line 1398
		<'error'> when 'true' ->
		    %% Line 1399
		    call 'erlang':'error'
			({'qlc_cursor_pid_no_longer_exists',Pid})
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1401
	  <_X_Pid,L,_X_N> when 'true' ->
	      %% Line 1402
	      call 'lists':'reverse'
		  (L)
	end
'stop_cursor'/1 =
    %% Line 1404
    fun (_0) ->
	do  %% Line 1405
	    call 'erlang':'monitor'
		('process', _0)
	    do  %% Line 1406
		call 'erlang':'unlink'
		    (_0)
		%% Line 1407
		receive
		  %% Line 1408
		  <{'EXIT',_3,_X_Reason}>
		      when call 'erlang':'=:='
			    (_3,
			     _0) ->
		      %% Line 1409
		      receive
			%% Line 1410
			<{'DOWN',_4,'process',_5,_6}>
			    when call 'erlang':'=:='
				  (_5,
				   _0) ->
			    'ok'
		      after 'infinity' ->
			'true'
		after %% Line 1412
		      0 ->
		  let <_1> =
		      call %% Line 1413
			   'erlang':%% Line 1413
				    'self'
			  ()
		  in  do  %% Line 1413
			  call 'erlang':'!'
			      (_0, {_1,'stop'})
			  %% Line 1414
			  receive
			    %% Line 1415
			    <{'DOWN',_7,'process',_8,_9}>
				when call 'erlang':'=:='
				      (_8,
				       _0) ->
				'ok'
			  after 'infinity' ->
			    'true'
'monitor_request'/2 =
    %% Line 1419
    fun (_0,_1) ->
	let <Ref> =
	    call %% Line 1420
		 'erlang':%% Line 1420
			  'monitor'
		(%% Line 1420
		 'process', _0)
	in  let <_3> =
		call %% Line 1421
		     'erlang':%% Line 1421
			      'self'
		    ()
	    in  do  %% Line 1421
		    call 'erlang':'!'
			(_0, {_3,_1})
		    %% Line 1422
		    receive
		      %% Line 1423
		      <{'DOWN',_6,'process',_7,_X_Info}>
			  when let <_8> =
				call 'erlang':'=:='
				    (_6, Ref)
			    in  let <_9> =
				    call 'erlang':'=:='
					(_7, _0)
				in  call 'erlang':'and'
					(_8, _9) ->
			  do  %% Line 1424
			      receive
				%% Line 1425
				<{'EXIT',_10,_X_Reason}>
				    when call 'erlang':'=:='
					  (_10,
					   _0) ->
				    'ok'
			      after %% Line 1426
				    1 ->
				'ok'
			      %% Line 1427
			      'error'
		      %% Line 1428
		      <{'EXIT',_11,_X_Reason}>
			  when call 'erlang':'=:='
				(_11,
				 _0) ->
			  %% Line 1429
			  receive
			    %% Line 1430
			    <{'DOWN',_12,'process',_13,_14}>
				when call 'erlang':'=:='
				      (_13,
				       _0) ->
				'error'
			  after 'infinity' ->
			    'true'
		      %% Line 1432
		      <{_15,Reply}>
			  when call 'erlang':'=:='
				(_15,
				 _0) ->
			  do  %% Line 1433
			      call 'erlang':'demonitor'
				  (Ref, ['flush'])
			      %% Line 1434
			      Reply
		    after 'infinity' ->
		      'true'
'le_info'/2 =
    %% Line 1469
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'prepared',{'simple_qlc',P,LE,L,_54,Optz},_55,_56,_57,_58,_59,_60,_61,_62},%% Line 1470
										       InfOpt> when 'true' ->
	      let <QVar> =
		  call %% Line 1471
		       'erlang':%% Line 1471
				'term_to_binary'
		      (%% Line 1471
		       {'var',L,P})
	      in  let <_4> =
		      apply %% Line 1472
			    'le_info'/2
			  (%% Line 1472
			   LE, %% Line 1472
			       InfOpt)
		  in  let <_3> =
			  apply %% Line 1472
				'opt_info'/1
			      (%% Line 1472
			       Optz)
		      in  %% Line 1472
			  {'qlc',QVar,[{'generate',QVar,_4}|[]],_3}
	  %% Line 1473
	  <{'prepared',{'qlc',_63,CodeF,Qdata,_64,Optz},_65,_66,_67,_68,_69,_70,_71,_72},%% Line 1474
											 InfOpt> when 'true' ->
	      let <Code> =
		  apply %% Line 1475
			CodeF
		      ()
	      in  let <TemplateState> =
		      apply %% Line 1476
			    'template_state'/0
			  ()
		  in  let <E> =
			  call %% Line 1477
			       'erlang':%% Line 1477
					'element'
			      (%% Line 1477
			       TemplateState, %% Line 1477
					      Code)
		      in  let <QualInfo0> =
			      apply %% Line 1478
				    'qual_info'/3
				  (%% Line 1478
				   Qdata, %% Line 1478
					  Code, %% Line 1478
						InfOpt)
			  in  %% Line 1479
			      ( case Optz of
				  ( <( {'optz',_73,_74,_75,_rec4,_76}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_12> =
					    case _rec4 of
					      %% Line 1480
					      <Join = {'qlc_join',_78,_79,_80,_81,_82,_83,_84,_85}> when 'true' ->
						  %% Line 1481
						  apply 'join_info'/4
						      (Join, QualInfo0, Qdata, Code)
					      %% Line 1482
					      <'no'> when 'true' ->
						  %% Line 1483
						  QualInfo0
					      ( <_11> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_11})
						-| ['compiler_generated'] )
					    end
					in  let <_18> =
						letrec
						    'lc$^0'/1 =
							%% Line 1485
							fun (_16) ->
							    case _16 of
							      <[I|_15]>
								  when call 'erlang':'=/='
									(I,
									 'skip') ->
								  let <_17> =
								      apply 'lc$^0'/1
									  (_15)
								  in  ( [I|_17]
									-| ['compiler_generated'] )
							      ( <[I|_15]> when 'true' ->
								    apply 'lc$^0'/1
									(_15)
								-| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_166> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_166})
								      -| [{'function_name',{'lc$^0',1}}] )
								-| ['compiler_generated'] )
							    end
						in  %% Line 1485
						    apply 'lc$^0'/1
							(_12)
					    in  let <_20> =
						    apply %% Line 1486
							  'opt_info'/1
							(%% Line 1486
							 Optz)
						in  %% Line 1486
						    {'qlc',E,_18,_20}
				    -| ['compiler_generated'] )
				  ( <_77> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','optz'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
	  %% Line 1487
	  <{'prepared',{'qlc_table',_86,TravMS,_87,_88,_89,FormatFun,_90,_91,_92,%% Line 1488
										 LuVals,%% Line 1488
											MS},_93,_94,_95,_96,_97,_98,_99,_100},%% Line 1488
															      InfOpt> when 'true' ->
	      %% Line 1489
	      case InfOpt of
		<{NElements,Depth}> when 'true' ->
		    let <DepthFun> =
			apply %% Line 1492
			      'depth_fun'/1
			    (%% Line 1492
			     Depth)
		    in  %% Line 1493
			case LuVals of
			  %% Line 1494
			  <_101>
			      when call 'erlang':'=:='
				    (FormatFun,
				     'undefined') ->
			      %% Line 1495
			      {'table',{'$MOD','$FUN',[]}}
			  %% Line 1496
			  <{Pos,Vals}> when 'true' ->
			      let <_27> =
				  try
				      %% Line 1497
				      apply FormatFun
					  ({'lookup',Pos,Vals,NElements,DepthFun})
				  of <_23> ->
				      _23
				  catch <_26,_25,_24> ->
				      %% Line 1498
				      apply FormatFun
					  ({'lookup',Pos,Vals})
			      in  %% Line 1500
				  case <> of
				    %% Line 1501
				    <>
					when call 'erlang':'=:='
					      (MS,
					       'no_match_spec') ->
					%% Line 1502
					{'table',_27}
				    %% Line 1503
				    <> when 'true' ->
					let <_29> =
					    apply %% Line 1504
						  'depth'/2
						(%% Line 1504
						 MS, %% Line 1504
						     Depth)
					in  %% Line 1504
					    {'list',{'table',_27},_29}
				  end
			  %% Line 1506
			  <_105>
			      when let <_30> =
				    call 'erlang':'=:='
					(TravMS, 'true')
				in  let <_31> =
					call 'erlang':'is_list'
					    (MS)
				    in  call 'erlang':'and'
					    (_30, _31) ->
			      let <_32> =
				  apply %% Line 1507
					'depth'/2
				      (%% Line 1507
				       MS, %% Line 1507
					   Depth)
			      in  let <_33> =
				      apply %% Line 1507
					    FormatFun
					  (%% Line 1507
					   {'match_spec',_32})
				  in  %% Line 1507
				      {'table',_33}
			  %% Line 1508
			  <_106>
			      when call 'erlang':'=:='
				    (MS,
				     'no_match_spec') ->
			      %% Line 1509
			      try
				  let <_34> =
				      apply FormatFun
					  ({'all',NElements,DepthFun})
				  in  {'table',_34}
			      of <_35> ->
				  _35
			      catch <_38,_37,_36> ->
				  let <_39> =
				      apply %% Line 1510
					    FormatFun
					  (%% Line 1510
					   'all')
				  in  %% Line 1510
				      {'table',_39}
			  ( <_40> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_40})
			    -| ['compiler_generated'] )
			end
		( <_21> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_21})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1513
	  <{'prepared',{'qlc_append',HL},_110,_111,_112,_113,_114,_115,_116,_117},InfOpt> when 'true' ->
	      let <_46> =
		  letrec
		      'lc$^1'/1 =
			  %% Line 1514
			  fun (_43) ->
			      case _43 of
				<[H|_42]> when 'true' ->
				    let <_44> =
					apply 'le_info'/2
					    (H, InfOpt)
				    in  let <_45> =
					    apply 'lc$^1'/1
						(_42)
					in  ( [_44|_45]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_173> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_173})
					-| [{'function_name',{'lc$^1',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  %% Line 1514
		      apply 'lc$^1'/1
			  (HL)
	      in  %% Line 1514
		  {'append',_46}
	  %% Line 1515
	  <{'prepared',{'qlc_sort',H,'sort',_118,_119,_120,%% Line 1516
							   SortOptions0,_121,%% Line 1516
									     TmpDir},_122,_123,_124,_125,_126,_127,_128,_129},%% Line 1517
															      InfOpt> when 'true' ->
	      let <SortOptions> =
		  apply %% Line 1518
			'sort_options_global_tmp'/2
		      (%% Line 1518
		       SortOptions0, %% Line 1518
				     TmpDir)
	      in  let <_48> =
		      apply %% Line 1519
			    'le_info'/2
			  (%% Line 1519
			   H, %% Line 1519
			      InfOpt)
		  in  %% Line 1519
		      {'sort',_48,SortOptions}
	  %% Line 1520
	  <{'prepared',{'qlc_sort',H,{'keysort',Kp},_130,_131,_132,%% Line 1521
								   SortOptions0,_133,%% Line 1521
										     TmpDir},_134,_135,_136,_137,_138,_139,_140,_141},%% Line 1522
																      InfOpt> when 'true' ->
	      let <SortOptions> =
		  apply %% Line 1523
			'sort_options_global_tmp'/2
		      (%% Line 1523
		       SortOptions0, %% Line 1523
				     TmpDir)
	      in  let <_50> =
		      apply %% Line 1524
			    'le_info'/2
			  (%% Line 1524
			   H, %% Line 1524
			      InfOpt)
		  in  %% Line 1524
		      {'keysort',_50,Kp,SortOptions}
	  %% Line 1525
	  <{'prepared',{'qlc_list',L,'no_match_spec'},_142,_143,_144,_145,_146,_147,_148,_149},_X_InfOpt> when 'true' ->
	      %% Line 1526
	      {'list',L}
	  %% Line 1527
	  <{'prepared',{'qlc_list',L,MS},_150,_151,_152,_153,_154,_155,_156,_157},_X_InfOpt>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 1528
	      {'list',{'list',L},MS}
	  %% Line 1529
	  <{'prepared',{'qlc_list',L,MS},_158,_159,_160,_161,_162,_163,_164,_165},InfOpt> when 'true' ->
	      let <_51> =
		  apply %% Line 1530
			'le_info'/2
		      (%% Line 1530
		       L, %% Line 1530
			  InfOpt)
	      in  %% Line 1530
		  {'list',_51,MS}
	  ( <_53,_52> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_53,_52})
		  -| [{'function_name',{'le_info',2}}] )
	    -| ['compiler_generated'] )
	end
'qual_info'/3 =
    %% Line 1532
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[{_X_QNum,_X_GoI,-1,'fil'}|Qdata],Code,InfOpt> when 'true' ->
	      let <_3> =
		  apply %% Line 1534
			'qual_info'/3
		      (%% Line 1534
		       Qdata, %% Line 1534
			      Code, %% Line 1534
				    InfOpt)
	      in  %% Line 1534
		  ['skip'|_3]
	  %% Line 1535
	  <[{QNum,_X_GoI,_X_SI,'fil'}|Qdata],Code,InfOpt> when 'true' ->
	      let <_4> =
		  call %% Line 1536
		       'erlang':%% Line 1536
				'+'
		      (%% Line 1536
		       QNum, %% Line 1536
			     1)
	      in  let <_5> =
		      call %% Line 1536
			   'erlang':%% Line 1536
				    'element'
			  (_4, %% Line 1536
			       Code)
		  in  let <_6> =
			  apply %% Line 1536
				'qual_info'/3
			      (%% Line 1536
			       Qdata, %% Line 1536
				      Code, %% Line 1536
					    InfOpt)
		      in  %% Line 1536
			  [_5|_6]
	  %% Line 1537
	  <[{_X_QNum,_X_GoI,_X_SI,{'gen',{'join',_15,_16,_17,_18,_19,_20}}}|Qdata],%% Line 1538
										   Code,%% Line 1538
											InfOpt> when 'true' ->
	      let <_7> =
		  apply %% Line 1539
			'qual_info'/3
		      (%% Line 1539
		       Qdata, %% Line 1539
			      Code, %% Line 1539
				    InfOpt)
	      in  %% Line 1539
		  ['skip'|_7]
	  %% Line 1540
	  <[{QNum,_X_GoI,_X_SI,{'gen',LE}}|Qdata],Code,InfOpt> when 'true' ->
	      let <_9> =
		  call %% Line 1541
		       'erlang':%% Line 1541
				'+'
		      (%% Line 1541
		       QNum, %% Line 1541
			     1)
	      in  let <_10> =
		      call %% Line 1541
			   'erlang':%% Line 1541
				    'element'
			  (_9, %% Line 1541
			       Code)
		  in  let <_8> =
			  apply %% Line 1541
				'le_info'/2
			      (%% Line 1541
			       LE, %% Line 1541
				   InfOpt)
		      in  let <_11> =
			      apply %% Line 1542
				    'qual_info'/3
				  (%% Line 1542
				   Qdata, %% Line 1542
					  Code, %% Line 1542
						InfOpt)
			  in  %% Line 1541
			      [{'generate',_10,_8}|_11]
	  %% Line 1543
	  <[],_X_Code,_X_InfOpt> when 'true' ->
	      %% Line 1544
	      []
	  ( <_14,_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13,_12})
		  -| [{'function_name',{'qual_info',3}}] )
	    -| ['compiler_generated'] )
	end
'join_info'/4 =
    %% Line 1546
    fun (_0,_1,_2,_3) ->
	%% Line 1548
	case _0 of
	  <{'qlc_join',Kind,Opt,_57,QNum1a,C1,_58,QNum2a,C2}> when 'true' ->
	      %% Line 1549
	      case %% Line 1550
		   apply 'find_join_data'/3
		       (_2, QNum1a, QNum2a) of
		<{{JQNum,_59,_60,_61},Rev,QNum1,QNum2,_X_WH1,_X_WH2,CsFun}> when 'true' ->
		    %% Line 1551
		    case apply CsFun
			     () of
		      <{Cs1_0,Cs2_0,Compat}> when 'true' ->
			  let <_22> =
			      case %% Line 1552
				   Compat of
				%% Line 1553
				<[]> when 'true' ->
				    %% Line 1555
				    ( letrec
					  'lc$^0'/1 =
					      fun (_9) ->
						  case _9 of
						    <[CVs|_8]> when 'true' ->
							let <_19> =
							    letrec
								'lc$^1'/1 =
								    fun (_12) ->
									case _12 of
									  <[{C,Vs}|_11]> when 'true' ->
									      let <_17> =
										  letrec
										      'lc$^2'/1 =
											  fun (_15) ->
											      case _15 of
												<[V|_14]> when 'true' ->
												    let <_16> =
													apply 'lc$^2'/1
													    (_14)
												    in  ( [{V,'=:='}|_16]
													  -| ['compiler_generated'] )
												<[]> when 'true' ->
												    []
												( <_67> when 'true' ->
												      ( primop 'match_fail'
													    ({'function_clause',_67})
													-| [{'function_name',{'lc$^2',1}}] )
												  -| ['compiler_generated'] )
											      end
										  in  apply 'lc$^2'/1
											  (Vs)
									      in  let <_18> =
										      apply 'lc$^1'/1
											  (_11)
										  in  ( [{C,_17}|_18]
											-| ['compiler_generated'] )
									  ( <[_10|_11]> when 'true' ->
										apply 'lc$^1'/1
										    (_11)
									    -| ['compiler_generated'] )
									  <[]> when 'true' ->
									      []
									  ( <_68> when 'true' ->
										( primop 'match_fail'
										      ({'function_clause',_68})
										  -| [{'function_name',{'lc$^1',1}}] )
									    -| ['compiler_generated'] )
									end
							    in  apply 'lc$^1'/1
								    (CVs)
							in  let <_20> =
								apply 'lc$^0'/1
								    (_8)
							    in  ( [_19|_20]
								  -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_69> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_69})
							    -| [{'function_name',{'lc$^0',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^0'/1
					      ([Cs1_0|[Cs2_0|[]]])
				      -| ['list_comprehension'] )
				%% Line 1556
				<_62> when 'true' ->
				    %% Line 1558
				    [Cs1_0|[Cs2_0|[]]]
			      end
			  in  %% Line 1552
			      case _22 of
				<[Cs1|[Cs2|[]]]> when 'true' ->
				    let <L> =
					apply %% Line 1560
					      'anno0'/0
					    ()
				    in  let <G1_0> = {%% Line 1561
					     'var',%% Line 1561
						   L,%% Line 1561
						     'G1'}
					in  let <G2_0> = {%% Line 1561
						 'var',%% Line 1561
						       L,%% Line 1561
							 'G2'}
					    in  let <_27> =
						    call %% Line 1562
							 'erlang':%% Line 1562
								  '+'
							(%% Line 1562
							 JQNum, %% Line 1562
								1)
						in  let <JP> =
							call %% Line 1562
							     'erlang':%% Line 1562
								      'element'
							    (_27, _3)
						    in  let <_70,_71,_72> =
							    case %% Line 1565
								 Kind of
							      %% Line 1566
							      <{'merge',_63}> when 'true' ->
								  %% Line 1567
								  case apply 'join_merge_info'/5
									   (QNum1, _1, _3, G1_0, Cs1) of
								    <{JG1,QInfo1}> when 'true' ->
									%% Line 1568
									case apply 'join_merge_info'/5
										 (QNum2, _1, _3, G2_0, Cs2) of
									  <{JG2,QInfo2}> when 'true' ->
									      let <_31> =
										  call %% Line 1569
										       'erlang':%% Line 1569
												'++'
										      (%% Line 1569
										       QInfo1, %% Line 1569
											       QInfo2)
									      in  %% Line 1569
										  <JG1,JG2,_31>
									  ( <_30> when 'true' ->
										primop 'match_fail'
										    ({'badmatch',_30})
									    -| ['compiler_generated'] )
									end
								    ( <_29> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_29})
								      -| ['compiler_generated'] )
								  end
							      %% Line 1570
							      <_64>
								  when ( call 'erlang':'=:='
									  (Rev,
									   'true')
								      -| ['compiler_generated'] ) ->
								  %% Line 1571
								  case apply 'join_merge_info'/5
									   (QNum2, _1, _3, G2_0, Cs2) of
								    <{JG2,QInfo2}> when 'true' ->
									%% Line 1572
									case apply 'join_lookup_info'/3
										 (QNum1, _1, G1_0) of
									  <{J1,QInfo1}> when 'true' ->
									      let <_34> =
										  call %% Line 1573
										       'erlang':%% Line 1573
												'++'
										      (%% Line 1573
										       QInfo2, %% Line 1573
											       [QInfo1|[]])
									      in  %% Line 1573
										  <{J1,G1_0},JG2,_34>
									  ( <_33> when 'true' ->
										primop 'match_fail'
										    ({'badmatch',_33})
									    -| ['compiler_generated'] )
									end
								    ( <_32> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_32})
								      -| ['compiler_generated'] )
								  end
							      %% Line 1574
							      <_65> when 'true' ->
								  %% Line 1575
								  case apply 'join_merge_info'/5
									   (QNum1, _1, _3, G1_0, Cs1) of
								    <{JG1,QInfo1}> when 'true' ->
									%% Line 1576
									case apply 'join_lookup_info'/3
										 (QNum2, _1, G2_0) of
									  <{J2,QInfo2}> when 'true' ->
									      let <_37> =
										  call %% Line 1577
										       'erlang':%% Line 1577
												'++'
										      (%% Line 1577
										       QInfo1, %% Line 1577
											       [QInfo2|[]])
									      in  %% Line 1577
										  <JG1,{J2,G2_0},_37>
									  ( <_36> when 'true' ->
										primop 'match_fail'
										    ({'badmatch',_36})
									    -| ['compiler_generated'] )
									end
								    ( <_35> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_35})
								      -| ['compiler_generated'] )
								  end
							    end
							in  %% Line 1564
							    case ( <( _70
								      -| ['compiler_generated'] ),( _71
												    -| ['compiler_generated'] ),( _72
																  -| ['compiler_generated'] )>
								   -| ['compiler_generated'] ) of
							      <( {I1,G1}
								 -| ['compiler_generated'] ),( {I2,G2}
											       -| ['compiler_generated'] ),QInfoL> when 'true' ->
								  %% Line 1579
								  case apply 'kind2op'/1
									   (Kind) of
								    <{JOptVal,JOp}> when 'true' ->
									let <_42> =
									    apply %% Line 1580
										  'join_unique_cache'/1
										(%% Line 1580
										 Opt)
									in  let <_43> =
										apply %% Line 1580
										      'opt_info'/1
										    (_42)
									    in  let <JOpt> =
										    [%% Line 1580
										     {'join',JOptVal}|_43]
										in  let <JFil> =
											call %% Line 1581
											     'erlang':%% Line 1581
												      'term_to_binary'
											    (%% Line 1581
											     {'op',L,JOp,%% Line 1582
													 {'call',L,{'atom',L,'element'},[{'integer',L,C1}|[G1|[]]]},%% Line 1583
																				    {'call',L,{'atom',L,'element'},[{'integer',L,C2}|[G2|[]]]}})
										    in  let <P> =
											    call %% Line 1584
												 'erlang':%% Line 1584
													  'term_to_binary'
												(%% Line 1584
												 {'cons',L,G1,G2})
											in  let <_47> =
												call %% Line 1585
												     'erlang':%% Line 1585
													      '++'
												    (%% Line 1585
												     QInfoL, %% Line 1585
													     [JFil|[]])
											    in  let <JInfo> =
												    {%% Line 1585
												     'generate',%% Line 1585
														JP,%% Line 1585
														   {'qlc',P,_47,JOpt}}
												in  let <_49> =
													call %% Line 1586
													     'erlang':%% Line 1586
														      '-'
													    (%% Line 1586
													     QNum1, %% Line 1586
														    1)
												    in  %% Line 1586
													case call 'lists':'split'
														 (_49, _1) of
													  <{Before,[_66|After]}>
													      when call 'erlang':'=:='
														    (_66,
														     I1) ->
													      let <_51> =
														  call %% Line 1587
														       'lists':%% Line 1587
															       'delete'
														      (%% Line 1587
														       I2, %% Line 1587
															   After)
													      in  let <_52> =
														      [%% Line 1587
														       JInfo|_51]
														  in  %% Line 1587
														      call 'erlang':'++'
															  (Before, _52)
													  ( <_50> when 'true' ->
														primop 'match_fail'
														    ({'badmatch',_50})
													    -| ['compiler_generated'] )
													end
								    ( <_41> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_41})
								      -| ['compiler_generated'] )
								  end
							      ( <( _73
								   -| ['compiler_generated'] ),( _74
												 -| ['compiler_generated'] ),( _75
															       -| ['compiler_generated'] )> when 'true' ->
								    let <_40> = {( _73
									   -| ['compiler_generated'] ),( _74
													 -| ['compiler_generated'] ),( _75
																       -| ['compiler_generated'] )}
								    in  primop 'match_fail'
									    ({'badmatch',_40})
								-| ['compiler_generated'] )
							    end
				( <_23> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_23})
				  -| ['compiler_generated'] )
			      end
		      ( <_6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_6})
			-| ['compiler_generated'] )
		    end
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_5})
		  -| ['compiler_generated'] )
	      end
	  ( <_4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_4})
	    -| ['compiler_generated'] )
	end
'kind2op'/1 =
    %% Line 1589
    fun (_0) ->
	case _0 of
	  <{'merge',_X_KE}> when 'true' ->
	      {'merge','=='}
	  %% Line 1590
	  <{'lookup',KE,_X_LU_fun}> when 'true' ->
	      {'lookup',KE}
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'kind2op',1}}] )
	    -| ['compiler_generated'] )
	end
'join_merge_info'/5 =
    %% Line 1595
    fun (_0,_1,_2,_3,_4) ->
	%% Line 1596
	case call 'lists':'nth'
		 (_0, _1) of
	  <I = {'generate',_44,LEInfo}> when 'true' ->
	      let <_6> =
		  call %% Line 1597
		       'erlang':%% Line 1597
				'+'
		      (_0, %% Line 1597
			   1)
	      in  let <_7> =
		      call %% Line 1597
			   'erlang':%% Line 1597
				    'element'
			  (_6, _2)
		  in  let <P> =
			  call %% Line 1597
			       'erlang':%% Line 1597
					'binary_to_term'
			      (_7)
		      in  %% Line 1598
			  case <P,_4> of
			    %% Line 1599
			    <( {( 'var'
				  -| ['compiler_generated'] ),_45,_46}
			       -| ['compiler_generated'] ),( []
							     -| ['compiler_generated'] )> when 'true' ->
				let <TP> =
				    call %% Line 1601
					 'erlang':%% Line 1601
						  'term_to_binary'
					(_3)
				in  let <I2> = {%% Line 1602
					 'generate',%% Line 1602
						    TP,%% Line 1602
						       LEInfo}
				    in  %% Line 1603
					{{I,_3},[I2|[]]}
			    %% Line 1604
			    <( _52
			       -| ['compiler_generated'] ),( _53
							     -| ['compiler_generated'] )> when 'true' ->
				let <_56,_57> =
				    case %% Line 1606
					 P of
				      %% Line 1607
				      <{'var',_48,_49}> when 'true' ->
					  %% Line 1609
					  <P,P>
				      %% Line 1610
				      <_50> when 'true' ->
					  let <_11> =
					      apply %% Line 1611
						    'abstract_vars'/1
						  (%% Line 1611
						   P)
					  in  %% Line 1611
					      case apply 'aux_name1'/3
						       ('P', 0, _11) of
						<{PV,_51}> when 'true' ->
						    let <L> =
							call %% Line 1612
							     'erl_anno':%% Line 1612
									'new'
							    (%% Line 1612
							     0)
						    in  let <V> = {%% Line 1613
							     'var',%% Line 1613
								   L,%% Line 1613
								     PV}
							in  %% Line 1614
							    <V,{'match',L,V,P}>
						( <_12> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_12})
						  -| ['compiler_generated'] )
					      end
				    end
				in  let <DQP> =
					call %% Line 1616
					     'erlang':%% Line 1616
						      'term_to_binary'
					    (( _56
					       -| ['compiler_generated'] ))
				    in  let <_19> =
					    call %% Line 1617
						 'erlang':%% Line 1617
							  'term_to_binary'
						(( _57
						   -| ['compiler_generated'] ))
					in  let <LEI> = {%% Line 1617
						 'generate',_19,%% Line 1617
								LEInfo}
					    in  let <TP> =
						    call %% Line 1618
							 'erlang':%% Line 1618
								  'term_to_binary'
							(_3)
						in  let <_36> =
							letrec
							    'lc$^0'/1 =
								%% Line 1626
								fun (_24) ->
								    case _24 of
								      <[{Col,ConstOps}|_23]> when 'true' ->
									  let <A> =
									      apply 'anno0'/0
										  ()
									  in  let <Call> =
										  {'call',A,{'atom',A,'element'},[{'integer',A,Col}|[( _56
																       -| ['compiler_generated'] )|[]]]}
									      in  let <_32> =
										      letrec
											  'lc$^1'/1 =
											      fun (_29) ->
												  case _29 of
												    <[{Con,Op}|_28]> when 'true' ->
													let <_30> =
													    apply 'abstract_term'/1
														(Con)
													in  let <_31> =
														apply 'lc$^1'/1
														    (_28)
													    in  ( [{'op',A,Op,_30,Call}|_31]
														  -| ['compiler_generated'] )
												    ( <[_27|_28]> when 'true' ->
													  apply 'lc$^1'/1
													      (_28)
												      -| ['compiler_generated'] )
												    <[]> when 'true' ->
													[]
												    ( <_60> when 'true' ->
													  ( primop 'match_fail'
														({'function_clause',_60})
													    -| [{'function_name',{'lc$^1',1}}] )
												      -| ['compiler_generated'] )
												  end
										      in  apply 'lc$^1'/1
											      (ConstOps)
										  in  let <F> =
											  apply 'list2op'/3
											      (_32, 'or', A)
										      in  let <_34> =
											      call 'erlang':'term_to_binary'
												  (F)
											  in  let <_35> =
												  apply 'lc$^0'/1
												      (_23)
											      in  ( [_34|_35]
												    -| ['compiler_generated'] )
								      ( <[_22|_23]> when 'true' ->
									    apply 'lc$^0'/1
										(_23)
									-| ['compiler_generated'] )
								      <[]> when 'true' ->
									  []
								      ( <_61> when 'true' ->
									    ( primop 'match_fail'
										  ({'function_clause',_61})
									      -| [{'function_name',{'lc$^0',1}}] )
									-| ['compiler_generated'] )
								    end
							in  %% Line 1626
							    apply 'lc$^0'/1
								(_4)
						    in  %% Line 1627
							{{I,_3},[{'generate',TP,{'qlc',DQP,[LEI|_36],[]}}|[]]}
			  end
	  ( <_5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_5})
	    -| ['compiler_generated'] )
	end
'list2op'/3 =
    %% Line 1630
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[E|[]],_X_Op,_X_Anno> when 'true' ->
	      %% Line 1631
	      E
	  %% Line 1632
	  <[E|Es],Op,Anno> when 'true' ->
	      let <_3> =
		  apply %% Line 1633
			'list2op'/3
		      (%% Line 1633
		       Es, %% Line 1633
			   Op, %% Line 1633
			       Anno)
	      in  %% Line 1633
		  {'op',Anno,Op,E,_3}
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'list2op',3}}] )
	    -| ['compiler_generated'] )
	end
'join_lookup_info'/3 =
    %% Line 1635
    fun (_0,_1,_2) ->
	%% Line 1636
	case call 'lists':'nth'
		 (_0, _1) of
	  <I = {'generate',_8,LEInfo}> when 'true' ->
	      let <TP> =
		  call %% Line 1637
		       'erlang':%% Line 1637
				'term_to_binary'
		      (_2)
	      in  %% Line 1638
		  {I,{'generate',TP,LEInfo}}
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_3})
	    -| ['compiler_generated'] )
	end
'opt_info'/1 =
    %% Line 1640
    fun (_0) ->
	case _0 of
	  <{'optz',Unique,Cache0,JoinOption,_15,_16}> when 'true' ->
	      let <_1> =
		  case <> of
		    %% Line 1646
		    <>
			when ( call 'erlang':'=:='
				(Cache0,
				 'true')
			    -| ['compiler_generated'] ) ->
			'ets'
		    %% Line 1647
		    <> when 'true' ->
			Cache0
		  end
	      in  let <_7> =
		      letrec
			  'lc$^0'/1 =
			      %% Line 1651
			      fun (_5) ->
				  case _5 of
				    <[_@r0 = {T,V}|_4]>
					when call 'erlang':'=:='
					      (V,
					       'nested_loop') ->
					let <_6> =
					    apply 'lc$^0'/1
						(_4)
					in  ( [_@r0|_6]
					      -| ['compiler_generated'] )
				    ( <[_3|_4]> when 'true' ->
					  apply 'lc$^0'/1
					      (_4)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_17> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_17})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  %% Line 1651
			  apply 'lc$^0'/1
			      ([{'join',JoinOption}|[]])
		  in  %% Line 1649
		      ( letrec
			    'lc$^1'/1 =
				fun (_11) ->
				    case _11 of
				      <[_@r1 = {T,V}|_9]> when 'true' ->
					  let <_10> =
					      apply %% Line 1650
						    'default_option'/1
						  (%% Line 1650
						   T)
					  in  %% Line 1650
					      ( case <> of
						  <>
						      when call 'erlang':'=/='
							    (V,
							     _10) ->
						      let <_12> =
							  apply 'lc$^1'/1
							      (_9)
						      in  ( [_@r1|_12]
							    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							apply 'lc$^1'/1
							    (_9)
						    -| ['compiler_generated'] )
						end
						-| ['list_comprehension'] )
				      ( <[_8|_9]> when 'true' ->
					    apply 'lc$^1'/1
						(_9)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  _7
				      ( <_18> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_18})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				([{'cache',_1}|[{'unique',Unique}|[]]])
			-| ['list_comprehension'] )
	  ( <_14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14})
		  -| [{'function_name',{'opt_info',1}}] )
	    -| ['compiler_generated'] )
	end
'prepare_qlc'/7 =
    %% Line 1653
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	let <GOpt> =
	    {%% Line 1654
	     'qlc_opt',_2,_3,-1,'any',_4,'any',_5,_6}
	in  let <_9> =
		apply %% Line 1657
		      'prep_le'/2
		    (_0, %% Line 1657
			 GOpt)
	    in  %% Line 1657
		case apply 'opt_le'/2
			 (_9, 1) of
		  %% Line 1658
		  <Prep = {'prepared',QLC = {'qlc',_30,_31,_32,_33,_34},_35,_36,_37,_38,_39,_40,_41,_42}> when 'true' ->
		      %% Line 1659
		      case QLC of
			<{'qlc',_43,_44,_45,_46,_47}> when 'true' ->
			    let <_12> =
				call 'erlang':'setelement'
				    (5, QLC, _1)
			    in  case Prep of
				  <{'prepared',_49,_50,_51,_52,_53,_54,_55,_56,_57}> when 'true' ->
				      call 'erlang':'setelement'
					  (2, Prep, _12)
				  ( <_58> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','prepared'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			( <_48> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','qlc'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		  %% Line 1660
		  <Prep = {'prepared',SimpleQLC = {'simple_qlc',_59,_60,_61,_62,_63},_64,_65,_66,_67,_68,_69,_70,_71}> when 'true' ->
		      %% Line 1661
		      case SimpleQLC of
			<{'simple_qlc',_72,_73,_74,_75,_76}> when 'true' ->
			    let <_18> =
				call 'erlang':'setelement'
				    (5, SimpleQLC, _1)
			    in  case Prep of
				  <{'prepared',_78,_79,_80,_81,_82,_83,_84,_85,_86}> when 'true' ->
				      call 'erlang':'setelement'
					  (2, Prep, _18)
				  ( <_87> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','prepared'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			( <_77> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','simple_qlc'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		  %% Line 1662
		  <Prep> when 'true' ->
		      %% Line 1663
		      Prep
		end
'prep_le'/2 =
    %% Line 1672
    fun (_0,_1) ->
	case <_0,_1> of
	  <H = {'qlc_lc',LC_fun,Opt0 = {'qlc_opt',_83,_84,_85,_86,_87,_88,_89,_90}},GOpt> when 'true' ->
	      %% Line 1675
	      case GOpt of
		<{'qlc_opt',GUnique,GCache,_91,_92,TmpDir,_93,MaxList,TmpUsage}> when 'true' ->
		    %% Line 1676
		    ( case Opt0 of
			( <( {'qlc_opt',_rec11,_94,_95,_96,_97,_98,_99,_100}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <Unique> =
				  call 'erlang':'or'
				      (_rec11, GUnique)
			      in  let <_8> =
				      case <> of
					%% Line 1678
					<>
					    when ( call 'erlang':'=:='
						    (GCache,
						     'false')
						-| ['compiler_generated'] ) ->
					    ( case Opt0 of
						( <( {'qlc_opt',_102,_rec12,_103,_104,_105,_106,_107,_108}
						     -| ['compiler_generated'] )> when 'true' ->
						      _rec12
						  -| ['compiler_generated'] )
						( <_109> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','qlc_opt'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					%% Line 1679
					<> when 'true' ->
					    GCache
				      end
				  in  %% Line 1683
				      case Opt0 of
					<{'qlc_opt',_rec14,_rec15,_rec16,_rec17,_rec18,_rec19,_rec20,_rec21}> when 'true' ->
					    let <_12> =
						{'qlc_opt',Unique,_8,_rec16,_rec17,TmpDir,_rec19,MaxList,TmpUsage}
					    in  let <_14> =
						    apply %% Line 1684
							  LC_fun
							()
						in  %% Line 1684
						    apply 'prep_qlc_lc'/4
							(_14, _12, GOpt, H)
					( <_110> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','qlc_opt'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
			  -| ['compiler_generated'] )
			( <_101> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','qlc_opt'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1685
	  <T = {'qlc_table',_111,_112,_113,_114,IF,_115,_116,_117,_118,_119,_120},GOpt> when 'true' ->
	      %% Line 1686
	      case apply 'table_sort_info'/1
		       (T) of
		<{SortInfo,Sorted}> when 'true' ->
		    let <IsUnique> =
			apply %% Line 1687
			      'grd'/2
			    (%% Line 1687
			     IF, %% Line 1687
				 'is_unique_objects')
		    in  let <Prep> =
			    {%% Line 1688
			     'prepared',%% Line 1688
					T,%% Line 1688
					  Sorted,%% Line 1688
						 SortInfo,[],[],{[],[]},'undefined',%% Line 1689
										    IsUnique,'false'}
			in  let <_43> =
				case <> of
				  %% Line 1691
				  <>
				      when try
					    let <_18> =
						call 'erlang':'=:='
						    (IsUnique, 'true')
					    in  ( let <_21> =
						      case ( call ( 'erlang'
								    -| ['compiler_generated'] ):( 'is_record'
												  -| ['compiler_generated'] )
								 (GOpt, ( 'qlc_opt'
									  -| ['compiler_generated'] ), ( 9
													 -| ['compiler_generated'] ))
							     -| ['compiler_generated'] ) of
							( <( 'true'
							     -| ['compiler_generated'] )> when 'true' ->
							      ( 'true'
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
							( <( 'false'
							     -| ['compiler_generated'] )> when 'true' ->
							      ( 'fail'
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
							( <( _19
							     -| ['compiler_generated'] )> when 'true' ->
							      ( _19
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						  in  let <_22> =
							  call 'erlang':'=:='
							      (( _21
								 -| ['compiler_generated'] ), 'true')
						      in  let <_23> =
							      call 'erlang':'element'
								  (2, GOpt)
							  in  let <_24> =
								  call 'erlang':'=:='
								      (_23, 'true')
							      in  let <_25> =
								      call ( 'erlang'
									     -| ['compiler_generated'] ):( 'and'
													   -| ['compiler_generated'] )
									  (_22, _24)
								  in  let <_26> =
									  call 'erlang':'not'
									      (_25)
								      in  let <_27> =
									      call 'erlang':'or'
										  (_18, _26)
									  in  ( let <_30> =
										    case %% Line 1692
											 ( call ( 'erlang'
												  -| ['compiler_generated'] ):( 'is_record'
																-| ['compiler_generated'] )
											       (T, ( 'qlc_table'
												     -| ['compiler_generated'] ), ( 12
																    -| ['compiler_generated'] ))
											   -| ['compiler_generated'] ) of
										      %% Line 1692
										      ( <( 'true'
											   -| ['compiler_generated'] )> when 'true' ->
											    ( 'true'
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										      %% Line 1692
										      ( <( 'false'
											   -| ['compiler_generated'] )> when 'true' ->
											    ( 'fail'
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										      %% Line 1692
										      ( <( _28
											   -| ['compiler_generated'] )> when 'true' ->
											    ( _28
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										    end
										in  let <_31> =
											call 'erlang':'=:='
											    (%% Line 1692
											     ( _30
											       -| ['compiler_generated'] ), 'true')
										    in  let <_32> =
											    call %% Line 1692
												 'erlang':%% Line 1692
													  'element'
												(%% Line 1692
												 12, %% Line 1692
												     T)
											in  let <_33> =
												call %% Line 1692
												     'erlang':%% Line 1692
													      '=:='
												    (_32, %% Line 1692
													  'no_match_spec')
											    in  let <_34> =
												    call %% Line 1692
													 ( 'erlang'
													   -| ['compiler_generated'] ):%% Line 1692
																       ( 'and'
																	 -| ['compiler_generated'] )
													(_31, _33)
												in  let <_35> =
													call 'erlang':'and'
													    (_27, _34)
												    in  let <_36> =
													    call 'erlang':'is_boolean'
														(_23)
													in  let <_37> =
														call 'erlang':'and'
														    (_35, _36)
													    in  let <_38> =
														    call 'erlang':'is_boolean'
															(_21)
														in  let <_39> =
															call 'erlang':'and'
															    (_37, _38)
														    in  let <_40> =
															    call 'erlang':'is_boolean'
																(IsUnique)
															in  ( call 'erlang':'and'
																  (_39, _40)
															      -| ['compiler_generated'] )
										-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false' ->
				      %% Line 1693
				      case GOpt of
					<{'qlc_opt',_121,_122,_123,_124,_125,_126,_127,_128}> when 'true' ->
					    call 'erlang':'setelement'
						(3, GOpt, 'false')
					( <_129> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','qlc_opt'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				  %% Line 1694
				  <> when 'true' ->
				      %% Line 1695
				      GOpt
				end
			    in  %% Line 1697
				apply 'may_create_simple'/2
				    (_43, Prep)
		( <_15> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1698
	  <{'qlc_append',HL},GOpt> when 'true' ->
	      let <_53> =
		  fun (_51) ->
		      %% Line 1699
		      case _51 of
			<{'prepared',{'qlc_list',[],_130},_131,_132,_133,_134,_135,_136,_137,_138}> when 'true' ->
			    []
			%% Line 1700
			<{'prepared',{'qlc_append',HL1},_139,_140,_141,_142,_143,_144,_145,_146}> when 'true' ->
			    HL1
			%% Line 1701
			<H> when 'true' ->
			    [H|[]]
		      end
	      in  let <_50> =
		      letrec
			  'lc$^0'/1 =
			      %% Line 1702
			      fun (_47) ->
				  case _47 of
				    <[H|_46]> when 'true' ->
					let <_48> =
					    apply 'prep_le'/2
						(H, GOpt)
					in  let <_49> =
						apply 'lc$^0'/1
						    (_46)
					    in  ( [_48|_49]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_183> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_183})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  %% Line 1702
			  apply 'lc$^0'/1
			      (HL)
		  in  %% Line 1699
		      case call 'lists':'flatmap'
			       (_53, _50) of
			%% Line 1703
			<Nil = []> when 'true' ->
			    %% Line 1704
			    apply 'short_list'/1
				(Nil)
			%% Line 1705
			<[Prep|[]]> when 'true' ->
			    %% Line 1706
			    Prep
			%% Line 1707
			<PrepL> when 'true' ->
			    let <_56> =
				fun (_54) ->
				    %% Line 1708
				    case _54 of
				      <{'prepared',_147,_148,_149,_150,_151,_152,_153,_154,IsC}> when 'true' ->
					  call 'erlang':'=/='
					      (IsC, 'false')
				      ( <_55> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_55})
					      -| [{'function_name',{'-prep_le/2-fun-2-',1}}] )
					-| ['compiler_generated'] )
				    end
			    in  let <Cache> =
				    call %% Line 1708
					 'lists':%% Line 1708
						 'all'
					(_56, %% Line 1709
					      PrepL)
				in  let <Prep> =
					{%% Line 1711
					 'prepared',%% Line 1711
						    {'qlc_append',PrepL},'no',[],[],[],{[],[]},'undefined','false',%% Line 1711
														   Cache}
				    in  %% Line 1712
					apply 'may_create_simple'/2
					    (GOpt, Prep)
		      end
	  %% Line 1714
	  <Q0 = {'qlc_sort',H0,_155,_156,_157,_158,_159,_160,_161},GOpt> when 'true' ->
	      let <_rec23> =
		  apply %% Line 1716
			'prep_le'/2
		      (%% Line 1716
		       H0, %% Line 1716
			   GOpt)
	      in  %% Line 1716
		  case Q0 of
		    <{'qlc_sort',_162,_163,_164,_165,_166,_167,_168,_169}> when 'true' ->
			let <_63> =
			    call 'erlang':'setelement'
				(2, Q0, _rec23)
			in  %% Line 1717
			    apply 'prep_sort'/2
				(_63, GOpt)
		    ( <_170> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','qlc_sort'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1718
	  <L = [_171|[_172|_173]],GOpt> when 'true' ->
	      let <Prep> =
		  {%% Line 1719
		   'prepared',%% Line 1719
			      {'qlc_list',L,'no_match_spec'},'no',[],[],[],{[],[]},'undefined','false',%% Line 1719
												       'true'}
	      in  let <_79> =
		      case <> of
			%% Line 1721
			<>
			    when try
				  ( let <_68> =
					case ( call ( 'erlang'
						      -| ['compiler_generated'] ):( 'is_record'
										    -| ['compiler_generated'] )
						   (GOpt, ( 'qlc_opt'
							    -| ['compiler_generated'] ), ( 9
											   -| ['compiler_generated'] ))
					       -| ['compiler_generated'] ) of
					  ( <( 'true'
					       -| ['compiler_generated'] )> when 'true' ->
						( 'true'
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <( 'false'
					       -| ['compiler_generated'] )> when 'true' ->
						( 'fail'
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <( _66
					       -| ['compiler_generated'] )> when 'true' ->
						( _66
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
				    in  let <_69> =
					    call 'erlang':'=:='
						(( _68
						   -| ['compiler_generated'] ), 'true')
					in  let <_70> =
						call 'erlang':'element'
						    (2, GOpt)
					    in  let <_71> =
						    call 'erlang':'=:='
							(_70, 'true')
						in  let <_72> =
							call ( 'erlang'
							       -| ['compiler_generated'] ):( 'and'
											     -| ['compiler_generated'] )
							    (_69, _71)
						    in  let <_73> =
							    call 'erlang':'not'
								(_72)
							in  let <_74> =
								call 'erlang':'is_boolean'
								    (_70)
							    in  let <_75> =
								    call 'erlang':'and'
									(_73, _74)
								in  let <_76> =
									call 'erlang':'is_boolean'
									    (_68)
								    in  ( call 'erlang':'and'
									      (_75, _76)
									  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    %% Line 1722
			    case GOpt of
			      <{'qlc_opt',_174,_175,_176,_177,_178,_179,_180,_181}> when 'true' ->
				  call 'erlang':'setelement'
				      (3, GOpt, 'false')
			      ( <_182> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','qlc_opt'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			%% Line 1723
			<> when 'true' ->
			    GOpt
		      end
		  in  %% Line 1725
		      apply 'may_create_simple'/2
			  (_79, Prep)
	  %% Line 1726
	  <L,_X_GOpt>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 1727
	      apply 'short_list'/1
		  (L)
	  %% Line 1728
	  <T,_X_GOpt> when 'true' ->
	      %% Line 1729
	      call 'erlang':'error'
		  ({'unsupported_qlc_handle',{'qlc_handle',T}})
	end
'eval_le'/2 =
    %% Line 1731
    fun (_0,_1) ->
	%% Line 1732
	case apply _0
		 () of
	  %% Line 1733
	  <Error = {'error','qlc',_6}> when 'true' ->
	      %% Line 1734
	      apply 'throw_error'/1
		  (Error)
	  %% Line 1735
	  <R> when 'true' ->
	      %% Line 1736
	      case apply 'get_handle'/1
		       (R) of
		%% Line 1737
		<'badarg'> when 'true' ->
		    %% Line 1738
		    call 'erlang':'error'
			('badarg', [R|[]])
		%% Line 1739
		<H> when 'true' ->
		    %% Line 1740
		    apply 'prep_le'/2
			(H, _1)
	      end
	end
'prep_qlc_lc'/4 =
    %% Line 1744
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <{'simple_v1',PVar,LE_fun,L},Opt,GOpt,_X_H> when 'true' ->
	      do  %% Line 1745
		  apply 'check_lookup_option'/2
		      (Opt, 'false')
		  let <_5> =
		      apply %% Line 1746
			    'anno'/1
			  (%% Line 1746
			   L)
		  in  let <_4> =
			  apply %% Line 1746
				'eval_le'/2
			      (%% Line 1746
			       LE_fun, %% Line 1746
				       GOpt)
		      in  %% Line 1746
			  apply 'prep_simple_qlc'/4
			      (PVar, _5, _4, Opt)
	  %% Line 1747
	  <{'qlc_v1',QFun,CodeF,Qdata0,QOpt},Opt,GOpt,_X_H> when 'true' ->
	      let <F> =
		  fun (_9,_8) ->
		      %% Line 1748
		      case <_9,_8> of
			<QualData = {_X_QNum,_X_GoI,_X_SI,'fil'},ModGens> when 'true' ->
			    %% Line 1749
			    {QualData,ModGens}
			%% Line 1750
			<QualData = {_X_QNum,_X_GoI,_X_SI,{'gen',{'join',_29,_30,_31,_32,_33,_34}}},ModGens> when 'true' ->
			    %% Line 1751
			    {QualData,ModGens}
			%% Line 1752
			<{QNum,GoI,SI,{'gen',LE_fun}},ModGens0> when 'true' ->
			    let <Prep1> =
				apply %% Line 1753
				      'eval_le'/2
				    (%% Line 1753
				     LE_fun, %% Line 1753
					     GOpt)
			    in  %% Line 1754
				case %% Line 1755
				     apply 'prep_generator'/5
					 (QNum, Prep1, QOpt, Opt, ModGens0) of
				  <{Prep,ModGens}> when 'true' ->
				      %% Line 1756
				      {{QNum,GoI,SI,{'gen',Prep}},ModGens}
				  ( <_7> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_7})
				    -| ['compiler_generated'] )
				end
			( <_11,_10> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_11,_10})
				-| [{'function_name',{'-prep_qlc_lc/4-fun-0-',2}}] )
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 1758
		  case call 'lists':'mapfoldl'
			   (F, [], Qdata0) of
		    <{Qdata,ModGens}> when 'true' ->
			let <SomeLookUp> =
			    call %% Line 1759
				 'lists':%% Line 1759
					 'keymember'
				(%% Line 1759
				 'true', %% Line 1759
					 2, %% Line 1759
					    ModGens)
			in  do  %% Line 1760
				apply 'check_lookup_option'/2
				    (Opt, SomeLookUp)
				%% Line 1761
				case ModGens of
				  %% Line 1762
				  <[{_X_QNum,_X_LookUp,'all',OnePrep}|[]]> when 'true' ->
				      do  %% Line 1763
					  apply 'check_join_option'/1
					      (Opt)
					  %% Line 1764
					  OnePrep
				  %% Line 1765
				  <_35> when 'true' ->
				      let <Prep0> =
					  apply %% Line 1766
						'prep_qlc'/5
					      (%% Line 1766
					       QFun, %% Line 1766
						     CodeF, %% Line 1766
							    Qdata, %% Line 1766
								   QOpt, %% Line 1766
									 Opt)
				      in  let <_18> =
					      fun (_16) ->
						  %% Line 1768
						  case _16 of
						    <{QNum,_X_LookUp,Fs,_X_Prep}> when 'true' ->
							[{QNum,Fs}|[]]
						    ( <_17> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_17})
							    -| [{'function_name',{'-prep_qlc_lc/4-fun-1-',1}}] )
						      -| ['compiler_generated'] )
						  end
					  in  let <LU_SkipQuals> =
						  call %% Line 1768
						       'lists':%% Line 1768
							       'flatmap'
						      (_18, %% Line 1769
							    ModGens)
					      in  %% Line 1770
						  case Prep0 of
						    <{'prepared',_36,_37,_38,_39,_40,_41,_42,_43,_44}> when 'true' ->
							let <_22> =
							    call 'erlang':'setelement'
								(6, Prep0, LU_SkipQuals)
							in  %% Line 1771
							    apply 'prep_join'/3
								(_22, QOpt, Opt)
						    ( <_45> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','prepared'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
				end
		    ( <_13> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_13})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1773
	  <_46,_X_Opt,_X_GOpt,H> when 'true' ->
	      %% Line 1774
	      call 'erlang':'error'
		  ({'unsupported_qlc_handle',{'qlc_handle',H}})
	end
'prep_generator'/5 =
    %% Line 1776
    fun (_0,_1,_2,_3,_4) ->
	let <PosFun> =
	    fun (_5) ->
		%% Line 1777
		apply 'pos_fun'/3
		    (_5, _2, _0)
	in  let <_9> =
		case %% Line 1778
		     apply 'match_specs'/2
			 (_2, _0) of
		  %% Line 1779
		  <'undefined'> when 'true' ->
		      %% Line 1780
		      {'no_match_spec',[]}
		  %% Line 1781
		  <MSFs0 = {_18,_19}> when 'true' ->
		      %% Line 1782
		      MSFs0
		  ( <_8> when 'true' ->
			%% Line 1778
			primop 'match_fail'
			    ({'case_clause',_8})
		    -| ['compiler_generated'] )
		end
	    in  %% Line 1784
		case _1 of
		  <{'prepared',LE,_20,_21,_22,_23,_24,_25,_26,_27}> when 'true' ->
		      %% Line 1785
		      case apply 'prep_gen'/5
			       (LE, _1, PosFun, _9, _3) of
			%% Line 1786
			<{'replace',Fs,LookUp,Prep}> when 'true' ->
			    %% Line 1787
			    {Prep,[{_0,LookUp,Fs,Prep}|_4]}
			%% Line 1788
			<{'skip',SkipFils,LookUp,Prep}> when 'true' ->
			    %% Line 1789
			    {Prep,[{_0,LookUp,SkipFils,Prep}|_4]}
			%% Line 1790
			<{'no',_X_Fs,_X_LookUp,Prep}> when 'true' ->
			    %% Line 1791
			    {Prep,_4}
			( <_12> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_12})
			  -| ['compiler_generated'] )
		      end
		  ( <_11> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_11})
		    -| ['compiler_generated'] )
		end
'pos_fun'/3 =
    %% Line 1794
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <'undefined',QOpt,QNum> when 'true' ->
	      let <_3> =
		  apply %% Line 1795
			'constants'/2
		      (%% Line 1795
		       QOpt, %% Line 1795
			     QNum)
	      in  %% Line 1795
		  {'=:=',_3}
	  %% Line 1796
	  <'=:=',QOpt,QNum> when 'true' ->
	      let <_4> =
		  apply %% Line 1797
			'constants'/2
		      (%% Line 1797
		       QOpt, %% Line 1797
			     QNum)
	      in  %% Line 1797
		  {'=:=',_4}
	  %% Line 1798
	  <'==',QOpt,QNum> when 'true' ->
	      %% Line 1799
	      try
		  let <_5> =
		      apply 'equal_constants'/2
			  (QOpt, QNum)
		  in  {'==',_5}
	      of <_6> ->
		  _6
	      catch <_9,_8,_7> ->
		  let <_10> =
		      apply %% Line 1800
			    'constants'/2
			  (%% Line 1800
			   QOpt, %% Line 1800
				 QNum)
		  in  %% Line 1800
		      {'=:=',_10}
	  ( <_13,_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12,_11})
		  -| [{'function_name',{'pos_fun',3}}] )
	    -| ['compiler_generated'] )
	end
'prep_gen'/5 =
    %% Line 1803
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <%% Line 1805
	   LE0 = {'qlc_table',_64,TravMS,_65,_66,%% Line 1804
						 IF,_67,%% Line 1804
							LU_fun,_68,%% Line 1805
								   KeyEquality,LuV0,MS0},%% Line 1806
											 Prep0,%% Line 1806
											       PosFun0,%% Line 1806
												       {MS,Fs},%% Line 1806
													       Opt> when 'true' ->
	      let <PosFun> =
		  apply %% Line 1807
			PosFun0
		      (%% Line 1807
		       KeyEquality)
	      in  %% Line 1808
		  case apply 'find_const_positions'/4
			   (IF, LU_fun, PosFun, Opt) of
		    <{LuV,{STag,SkipFils}}> when 'true' ->
			let <LU> =
			    call %% Line 1809
				 'erlang':%% Line 1809
					  '=/='
				(%% Line 1809
				 LuV, %% Line 1809
				      'false')
			in  %% Line 1810
			    case <> of
			      %% Line 1811
			      <>
				  when let <_8> =
					call 'erlang':'=/='
					    (LuV0, 'undefined')
				    in  let <_9> =
					    call 'erlang':'=/='
						(MS0, 'no_match_spec')
					in  call 'erlang':'or'
						(_8, _9) ->
				  %% Line 1812
				  {'no',[],'false',Prep0}
			      %% Line 1813
			      <>
				  when try
					let <_10> =
					    call 'erlang':'=/='
						(MS, 'no_match_spec')
					in  call 'erlang':'and'
						(_10, LU)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  let <_15> =
				      case <> of
					%% Line 1815
					<>
					    when let <_12> =
						  call 'erlang':'=:='
						      (Fs, SkipFils)
					      in  let <_13> =
						      call 'erlang':'=:='
							  (STag, Fs)
						  in  call 'erlang':'or'
							  (_12, _13) ->
					    %% Line 1818
					    case MS of
					      %% Line 1819
					      <[{'$1',_X_Guard,['$1']}|[]]> when 'true' ->
						  %% Line 1820
						  'no_match_spec'
					      %% Line 1821
					      <[{Head,_X_Guard,Body}|[]]> when 'true' ->
						  %% Line 1822
						  [{Head,[],Body}|[]]
					      ( <_14> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_14})
						-| ['compiler_generated'] )
					    end
					%% Line 1824
					<> when 'true' ->
					    %% Line 1825
					    MS
				      end
				  in  %% Line 1827
				      case LE0 of
					<{'qlc_table',_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79}> when 'true' ->
					    let <_18> =
						call 'erlang':'setelement'
						    (12, LE0, _15)
					    in  let <_20> =
						    call 'erlang':'setelement'
							(11, _18, LuV)
						in  case Prep0 of
						      <{'prepared',_81,_82,_83,_84,_85,_86,_87,_88,_89}> when 'true' ->
							  let <_24> =
							      call 'erlang':'setelement'
								  (2, Prep0, _20)
							  in  %% Line 1828
							      {'replace',Fs,LU,_24}
						      ( <_90> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','prepared'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
					( <_80> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','qlc_table'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
			      %% Line 1829
			      <>
				  when LU ->
				  %% Line 1830
				  case LE0 of
				    <{'qlc_table',_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101}> when 'true' ->
					let <_28> =
					    call 'erlang':'setelement'
						(11, LE0, LuV)
					in  case Prep0 of
					      <{'prepared',_103,_104,_105,_106,_107,_108,_109,_110,_111}> when 'true' ->
						  let <_32> =
						      call 'erlang':'setelement'
							  (2, Prep0, _28)
						  in  %% Line 1831
						      {'skip',SkipFils,LU,_32}
					      ( <_112> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','prepared'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
				    ( <_102> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','qlc_table'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      %% Line 1832
			      <>
				  when let <_34> =
					call 'erlang':'=:='
					    (TravMS, 'true')
				    in  let <_35> =
					    call 'erlang':'=/='
						(MS, 'no_match_spec')
					in  call 'erlang':'and'
						(_34, _35) ->
				  %% Line 1833
				  case LE0 of
				    <{'qlc_table',_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123}> when 'true' ->
					let <_38> =
					    call 'erlang':'setelement'
						(12, LE0, MS)
					in  case Prep0 of
					      <{'prepared',_125,_126,_127,_128,_129,_130,_131,_132,_133}> when 'true' ->
						  let <_41> =
						      call %% Line 1834
							   'erlang':%% Line 1834
								    'setelement'
							  (%% Line 1834
							   9, Prep0, %% Line 1834
								     'false')
						  in  let <_43> =
							  call 'erlang':'setelement'
							      (2, _41, _38)
						      in  let <_45> =
							      apply %% Line 1835
								    'may_create_simple'/2
								  (%% Line 1835
								   Opt, _43)
							  in  %% Line 1835
							      {'replace',Fs,'false',_45}
					      ( <_134> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','prepared'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
				    ( <_124> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','qlc_table'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      %% Line 1836
			      <> when 'true' ->
				  %% Line 1837
				  {'no',[],'false',Prep0}
			    end
		    ( <_6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1839
	  <{'qlc_list',[],_135},Prep0,_X_PosFun,{_X_MS,Fs},_X_Opt> when 'true' ->
	      %% Line 1841
	      {'replace',Fs,'false',Prep0}
	  %% Line 1842
	  <LE0 = {'qlc_list',_136,'no_match_spec'},Prep0,_X_PosFun,{MS,Fs},Opt>
	      when %% Line 1843
		call 'erlang':'=/='
		    (MS,
		     'no_match_spec') ->
	      %% Line 1844
	      case LE0 of
		<{'qlc_list',_137,_138}> when 'true' ->
		    let <_48> =
			call 'erlang':'setelement'
			    (3, LE0, MS)
		    in  case Prep0 of
			  <{'prepared',_140,_141,_142,_143,_144,_145,_146,_147,_148}> when 'true' ->
			      let <_51> =
				  call %% Line 1845
				       'erlang':%% Line 1845
						'setelement'
				      (%% Line 1845
				       10, Prep0, %% Line 1845
						  'false')
			      in  let <_53> =
				      call 'erlang':'setelement'
					  (2, _51, _48)
				  in  let <_55> =
					  apply %% Line 1846
						'may_create_simple'/2
					      (%% Line 1846
					       Opt, _53)
				      in  %% Line 1846
					  {'replace',Fs,'false',_55}
			  ( <_149> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','prepared'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		( <_139> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','qlc_list'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1847
	  <{'qlc_list',_150,_151},Prep0,_X_PosFun,{MS,Fs},Opt>
	      when %% Line 1848
		call 'erlang':'=/='
		    (MS,
		     'no_match_spec') ->
	      let <ListMS> = {%% Line 1849
		   'qlc_list',%% Line 1849
			      Prep0,%% Line 1849
				    MS}
	      in  let <LE> =
		      {%% Line 1850
		       'prepared',%% Line 1850
				  ListMS,'no',[],[],[],{[],[]},'undefined','false',%% Line 1850
										   'false'}
		  in  let <_58> =
			  apply %% Line 1851
				'may_create_simple'/2
			      (%% Line 1851
			       Opt, %% Line 1851
				    LE)
		      in  %% Line 1851
			  {'replace',Fs,'false',_58}
	  %% Line 1852
	  <_X_LE0,Prep0,_X_PosFun,_X_MSFs,_X_Opt> when 'true' ->
	      %% Line 1853
	      {'no',[],'false',Prep0}
	end
'may_create_simple'/2 =
    %% Line 1857
    fun (_0,_1) ->
	case <_0,_1> of
	  <Opt = {'qlc_opt',Unique,Cache,_11,_12,_13,_14,_15,_16},%% Line 1859
								  Prep = %% Line 1858
									 {'prepared',_17,_18,_19,_20,_21,_22,_23,%% Line 1859
														 IsUnique,IsCached}> when 'true' ->
	      %% Line 1860
	      case <> of
		%% Line 1861
		<>
		    when let <_2> =
			  call 'erlang':'=:='
			      (Unique, 'true')
		      in  let <_3> =
			      call 'erlang':'=:='
				  (IsUnique, 'false')
			  in  let <_4> =
				  call 'erlang':'and'
				      (_2, _3)
			      in  let <_5> =
				      call %% Line 1862
					   'erlang':%% Line 1862
						    '=/='
					  (%% Line 1862
					   Cache, %% Line 1862
						  'false')
				  in  let <_6> =
					  call 'erlang':'=:='
					      (%% Line 1862
					       IsCached, 'false')
				      in  let <_7> =
					      call %% Line 1862
						   'erlang':%% Line 1862
							    'and'
						  (_5, _6)
					  in  call 'erlang':'or'
						  (_4, _7) ->
		    let <_8> =
			apply %% Line 1863
			      'anno'/1
			    (%% Line 1863
			     1)
		    in  %% Line 1863
			apply 'prep_simple_qlc'/4
			    ('SQV', _8, Prep, Opt)
		%% Line 1864
		<> when 'true' ->
		    %% Line 1865
		    Prep
	      end
	  ( <_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9})
		  -| [{'function_name',{'may_create_simple',2}}] )
	    -| ['compiler_generated'] )
	end
'prep_simple_qlc'/4 =
    %% Line 1868
    fun (_0,_1,_2,_3) ->
	do  %% Line 1869
	    apply 'check_join_option'/1
		(_3)
	    %% Line 1872
	    case _2 of
	      <{'prepared',_20,Sorted,SortInfo,_21,_22,_23,_24,IsUnique,IsCached}> when 'true' ->
		  %% Line 1873
		  case _3 of
		    <{'qlc_opt',Unique,Cache,_25,_26,_27,_28,_29,_30}> when 'true' ->
			let <_7> =
			    case <> of
			      %% Line 1875
			      <>
				  when ( call 'erlang':'=:='
					  (Unique,
					   'true')
				      -| ['compiler_generated'] ) ->
				  Cache
			      %% Line 1876
			      <>
				  when ( call 'erlang':'=:='
					  (IsCached,
					   'false')
				      -| ['compiler_generated'] ) ->
				  Cache
			      %% Line 1877
			      <> when 'true' ->
				  'false'
			    end
			in  let <_9> =
				call %% Line 1879
				     'erlang':%% Line 1879
					      'not'
				    (%% Line 1879
				     IsUnique)
			    in  let <_10> =
				    call %% Line 1879
					 'erlang':%% Line 1879
						  'and'
					(%% Line 1879
					 Unique, _9)
				in  let <Optz> =
					{%% Line 1879
					 'optz',_10,_7,'any','no',_3}
				    in  let <QLC> =
					    {%% Line 1881
					     'simple_qlc',_0,_2,_1,%% Line 1882
								   'not_a_list',%% Line 1882
										Optz}
					in  let <_15> =
						call %% Line 1884
						     'erlang':%% Line 1884
							      'or'
						    (%% Line 1884
						     IsUnique, %% Line 1884
							       Unique)
					    in  let <_13> =
						    call %% Line 1886
							 'erlang':%% Line 1886
								  '=/='
							(_7, %% Line 1886
							     'false')
						in  let <_14> =
							call %% Line 1886
							     'erlang':%% Line 1886
								      'or'
							    (%% Line 1886
							     IsCached, _13)
						    in  %% Line 1884
							{'prepared',QLC,%% Line 1885
									Sorted,%% Line 1885
									       SortInfo,[],[],{[],[]},'undefined',_15,_14}
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5})
		      -| ['compiler_generated'] )
		  end
	      ( <_4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_4})
		-| ['compiler_generated'] )
	    end
'prep_sort'/2 =
    %% Line 1888
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'qlc_sort',Prep = {'prepared',_17,'yes',_18,_19,_20,_21,_22,_23,_24},_25,_26,_27,_28,_29,_30,_31},_X_GOpt> when 'true' ->
	      %% Line 1889
	      Prep
	  %% Line 1890
	  <Q = {'qlc_sort',{'prepared',_32,_33,_34,_35,_36,_37,_38,IsUniqueObjs,_39},_40,_41,_42,_43,_44,_45,_46},%% Line 1891
														  GOpt> when 'true' ->
	      let <S1> =
		  apply %% Line 1892
			'sort_unique'/2
		      (%% Line 1892
		       IsUniqueObjs, %% Line 1892
				     Q)
	      in  let <S2> =
		      apply %% Line 1893
			    'sort_tmpdir'/2
			  (%% Line 1893
			   S1, %% Line 1893
			       GOpt)
		  in  %% Line 1894
		      ( case GOpt of
			  ( <( {'qlc_opt',_47,_48,_49,_50,_51,_52,_53,_rec41}
			       -| ['compiler_generated'] )> when 'true' ->
				case S2 of
				  <{'qlc_sort',_55,_56,_57,_58,_59,_60,_61,_62}> when 'true' ->
				      let <_9> =
					  call 'erlang':'setelement'
					      (8, S2, _rec41)
				      in  %% Line 1895
					  case apply 'sort_sort_info'/1
						   (_9) of
					    <{SortInfo,Sorted}> when 'true' ->
						%% Line 1898
						( case _9 of
						    ( <( {'qlc_sort',_64,_65,_rec42,_66,_67,_68,_69,_70}
							 -| ['compiler_generated'] )> when 'true' ->
							  let <_14> =
							      call 'erlang':'or'
								  (_rec42, IsUniqueObjs)
							  in  {'prepared',_9,Sorted,SortInfo,[],[],{[],[]},'undefined',_14,'true'}
						      -| ['compiler_generated'] )
						    ( <_71> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','qlc_sort'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    ( <_11> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_11})
					      -| ['compiler_generated'] )
					  end
				  ( <_63> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','qlc_sort'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			    -| ['compiler_generated'] )
			  ( <_54> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','qlc_opt'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  ( <_16,_15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15})
		  -| [{'function_name',{'prep_sort',2}}] )
	    -| ['compiler_generated'] )
	end
'prep_qlc'/5 =
    %% Line 1900
    fun (_0,_1,_2,_3,_4) ->
	%% Line 1901
	case _4 of
	  <{'qlc_opt',Unique,Cache,_15,Join,_16,_17,_18,_19}> when 'true' ->
	      let <Optz> =
		  {%% Line 1902
		   'optz',%% Line 1902
			  Unique,%% Line 1902
				 Cache,%% Line 1903
				       Join,'no',_4}
	      in  %% Line 1904
		  case apply 'qlc_sort_info'/2
			   (_2, _3) of
		    <{Qdata,SortInfo}> when 'true' ->
			let <QLC> =
			    {%% Line 1905
			     'qlc',_0,_1,%% Line 1905
					 Qdata,%% Line 1906
					       'not_a_list',%% Line 1906
							    Optz}
			in  let <_9> =
				call %% Line 1909
				     'erlang':%% Line 1909
					      '=/='
				    (%% Line 1909
				     Cache, %% Line 1909
					    'false')
			    in  %% Line 1907
				{'prepared',QLC,'no',SortInfo,[],[],{[],[]},'undefined',%% Line 1908
											Unique,_9}
		    ( <_7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_7})
		      -| ['compiler_generated'] )
		  end
	  ( <_5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_5})
	    -| ['compiler_generated'] )
	end
'qlc_sort_info'/2 =
    %% Line 1922
    fun (_0,_1) ->
	let <F> =
	    fun (_17,_16) ->
		%% Line 1923
		case <_17,_16> of
		  <Qd = {_X_QNum,_X_GoI,_X_SI,'fil'},Info> when 'true' ->
		      %% Line 1924
		      {Qd,Info}
		  %% Line 1925
		  <Qd = {_X_QNum,_X_GoI,_X_SI,{'gen',{'join',_37,_38,_39,_40,_41,_42}}},Info> when 'true' ->
		      %% Line 1926
		      {Qd,Info}
		  %% Line 1927
		  <{QNum,GoI,SI,{'gen',PrepLE0}},Info> when 'true' ->
		      let <PrepLE> =
			  apply %% Line 1928
				'sort_info'/3
			      (%% Line 1928
			       PrepLE0, %% Line 1928
					QNum, _1)
		      in  let <Qd> =
			      {%% Line 1929
			       QNum,%% Line 1929
				    GoI,%% Line 1929
					SI,%% Line 1929
					   {'gen',PrepLE}}
			  in  let <_14> =
				  letrec
				      'lc$^0'/1 =
					  %% Line 1931
					  fun (_11) ->
					      case _11 of
						<[{{C,Order},What}|_5]>
						    when %% Line 1932
						      call 'erlang':'=:='
							  (What,
							   []) ->
						    %% Line 1933
						    ( letrec
							  'lc$^1'/1 =
							      fun (_12) ->
								  case _12 of
								    <[Column|_9]> when 'true' ->
									let <_13> =
									    apply 'lc$^1'/1
										(_9)
									in  ( [{{Column,Order},[{'traverse',QNum,C}|[]]}|_13]
									      -| ['compiler_generated'] )
								    <[]> when 'true' ->
									apply 'lc$^0'/1
									    (_5)
								    ( <_52> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_52})
									    -| [{'function_name',{'lc$^1',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  let <_10> =
							      apply 'equal_template_columns'/2
								  (_1, {QNum,C})
							  in  apply 'lc$^1'/1
								  (_10)
						      -| ['list_comprehension'] )
						( <[_4|_5]> when 'true' ->
						      apply 'lc$^0'/1
							  (_5)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_53> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_53})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  %% Line 1931
				      ( case PrepLE of
					  ( <( {'prepared',_43,_44,_45,_rec43,_46,_47,_48,_49,_50}
					       -| ['compiler_generated'] )> when 'true' ->
						apply 'lc$^0'/1
						    (_rec43)
					    -| ['compiler_generated'] )
					  ( <_51> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','prepared'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
			      in  %% Line 1934
				  {Qd,[_14|Info]}
		  ( <_19,_18> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_19,_18})
			  -| [{'function_name',{'-qlc_sort_info/2-fun-2-',2}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 1936
	    case call 'lists':'mapfoldl'
		     (F, [], _0) of
	      <{Qdata,SortInfoL}> when 'true' ->
		  let <_22> =
		      call %% Line 1940
			   'lists':%% Line 1940
				   'append'
			  (%% Line 1940
			   SortInfoL)
		  in  let <_32> =
			  letrec
			      'lc$^3'/1 =
				  %% Line 1938
				  fun (_29) ->
				      case _29 of
					<[Pos|_24]> when 'true' ->
					    %% Line 1939
					    ( letrec
						  'lc$^4'/1 =
						      fun (_30) ->
							  case _30 of
							    <[Ord|_27]> when 'true' ->
								let <_31> =
								    apply 'lc$^4'/1
									(_27)
								in  ( [{{Pos,Ord},['template']}|_31]
								      -| ['compiler_generated'] )
							    <[]> when 'true' ->
								apply 'lc$^3'/1
								    (_24)
							    ( <_54> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_54})
								    -| [{'function_name',{'lc$^4',1}}] )
							      -| ['compiler_generated'] )
							  end
					      in  let <_28> =
						      apply 'orders'/1
							  ('yes')
						  in  apply 'lc$^4'/1
							  (_28)
					      -| ['list_comprehension'] )
					<[]> when 'true' ->
					    _22
					( <_55> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_55})
						-| [{'function_name',{'lc$^3',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  let <_25> =
				  apply %% Line 1938
					'constant_columns'/2
				      (_1, %% Line 1938
					   0)
			      in  %% Line 1938
				  apply 'lc$^3'/1
				      (_25)
		      in  let <SortInfo> =
			      apply %% Line 1941
				    'family_union'/1
				  (_32)
			  in  %% Line 1942
			      {Qdata,SortInfo}
	      ( <_21> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_21})
		-| ['compiler_generated'] )
	    end
'sort_info'/3 =
    %% Line 1944
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Prep = {'prepared',_41,S,SI,_42,_43,_44,_45,_46,_47},QNum,QOpt> when 'true' ->
	      let <_7> =
		  letrec
		      'lc$^0'/1 =
			  %% Line 1954
			  fun (_5) ->
			      case _5 of
				<[{PosOrd,_48}|_4]> when 'true' ->
				    let <_6> =
					apply 'lc$^0'/1
					    (_4)
				    in  ( [{PosOrd,[]}|_6]
					  -| ['compiler_generated'] )
				( <[_3|_4]> when 'true' ->
				      apply 'lc$^0'/1
					  (_4)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_59> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_59})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  %% Line 1954
		      apply 'lc$^0'/1
			  (SI)
	      in  let <_17> =
		      letrec
			  'lc$^1'/1 =
			      %% Line 1952
			      fun (_14) ->
				  case _14 of
				    <[Pos|_9]> when 'true' ->
					%% Line 1953
					( letrec
					      'lc$^2'/1 =
						  fun (_15) ->
						      case _15 of
							<[Ord|_12]> when 'true' ->
							    let <_16> =
								apply 'lc$^2'/1
								    (_12)
							    in  ( [{{Pos,Ord},[]}|_16]
								  -| ['compiler_generated'] )
							<[]> when 'true' ->
							    apply 'lc$^1'/1
								(_9)
							( <_60> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_60})
								-| [{'function_name',{'lc$^2',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  let <_13> =
						  apply 'orders'/1
						      ('yes')
					      in  apply 'lc$^2'/1
						      (_13)
					  -| ['list_comprehension'] )
				    <[]> when 'true' ->
					_7
				    ( <_61> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_61})
					    -| [{'function_name',{'lc$^1',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_10> =
			      apply %% Line 1952
				    'constant_columns'/2
				  (%% Line 1952
				   QOpt, %% Line 1952
					 QNum)
			  in  %% Line 1952
			      apply 'lc$^1'/1
				  (_10)
		  in  let <_33> =
			  case <> of
			    %% Line 1946
			    <>
				when call 'erlang':'=/='
				      (S,
				       'no') ->
				let <_19> =
				    apply %% Line 1947
					  'size_of_qualifier'/2
					(%% Line 1947
					 QOpt, %% Line 1947
					       QNum)
				in  %% Line 1947
				    ( case <> of
					<>
					    when call 'erlang':'is_integer'
						  (_19) ->
					    %% Line 1948
					    ( case <> of
						<>
						    when call 'erlang':'>'
							  (_19,
							   0) ->
						    let <_21> =
							apply %% Line 1949
							      'size_of_constant_prefix'/2
							    (%% Line 1949
							     QOpt, %% Line 1949
								   QNum)
						    in  %% Line 1949
							( case <> of
							    <>
								when call 'erlang':'<'
								      (_21,
								       _19) ->
								%% Line 1950
								( letrec
								      'lc$^3'/1 =
									  fun (_28) ->
									      case _28 of
										<[C|_23]> when 'true' ->
										    %% Line 1951
										    ( letrec
											  'lc$^4'/1 =
											      fun (_29) ->
												  case _29 of
												    <[Ord|_26]> when 'true' ->
													let <_30> =
													    apply 'lc$^4'/1
														(_26)
													in  ( [{{C,Ord},[]}|_30]
													      -| ['compiler_generated'] )
												    <[]> when 'true' ->
													apply 'lc$^3'/1
													    (_23)
												    ( <_62> when 'true' ->
													  ( primop 'match_fail'
														({'function_clause',_62})
													    -| [{'function_name',{'lc$^4',1}}] )
												      -| ['compiler_generated'] )
												  end
										      in  let <_27> =
											      apply 'orders'/1
												  (S)
											  in  apply 'lc$^4'/1
												  (_27)
										      -| ['list_comprehension'] )
										<[]> when 'true' ->
										    _17
										( <_63> when 'true' ->
										      ( primop 'match_fail'
											    ({'function_clause',_63})
											-| [{'function_name',{'lc$^3',1}}] )
										  -| ['compiler_generated'] )
									      end
								  in  let <_24> =
									  call 'erlang':'+'
									      (_21, 1)
								      in  apply 'lc$^3'/1
									      ([_24|[]])
								  -| ['list_comprehension'] )
							    ( <> when 'true' ->
								  _17
							      -| ['compiler_generated'] )
							  end
							  -| ['list_comprehension'] )
						( <> when 'true' ->
						      _17
						  -| ['compiler_generated'] )
					      end
					      -| ['list_comprehension'] )
					( <> when 'true' ->
					      _17
					  -| ['compiler_generated'] )
				      end
				      -| ['list_comprehension'] )
			    %% Line 1946
			    ( <> when 'true' ->
				  _17
			      -| ['compiler_generated'] )
			  end
		      in  let <SI2> =
			      call %% Line 1955
				   'lists':%% Line 1955
					   'usort'
				  (_33)
			  in  %% Line 1956
			      case Prep of
				<{'prepared',_49,_50,_51,_52,_53,_54,_55,_56,_57}> when 'true' ->
				    call 'erlang':'setelement'
					(5, Prep, SI2)
				( <_58> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','prepared'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
	  ( <_40,_39,_38> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_40,_39,_38})
		  -| [{'function_name',{'sort_info',3}}] )
	    -| ['compiler_generated'] )
	end
'orders'/1 =
    %% Line 1960
    fun (_0) ->
	case _0 of
	  <O = 'ascending'> when 'true' ->
	      %% Line 1961
	      [O|[]]
	  %% Line 1962
	  <'yes'> when 'true' ->
	      %% Line 1963
	      ['ascending']
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'orders',1}}] )
	    -| ['compiler_generated'] )
	end
'sort_unique'/2 =
    %% Line 1967
    fun (_0,_1) ->
	case <_0,_1> of
	  <'true',Sort = {'qlc_sort',_9,'sort',_10,_11,_12,SortOptions,_13,_14}> when 'true' ->
	      let <_2> =
		  call %% Line 1971
		       'lists':%% Line 1971
			       'delete'
		      (%% Line 1971
		       'unique', %% Line 1971
				 SortOptions)
	      in  let <_rec45> =
		      call %% Line 1970
			   'lists':%% Line 1970
				   'keydelete'
			  (%% Line 1970
			   'unique', %% Line 1970
				     1, _2)
		  in  %% Line 1968
		      case Sort of
			<{'qlc_sort',_15,_16,_17,_18,_19,_20,_21,_22}> when 'true' ->
			    let <_5> =
				call %% Line 1969
				     'erlang':%% Line 1969
					      'setelement'
				    (%% Line 1969
				     7, Sort, %% Line 1969
					      _rec45)
			    in  call 'erlang':'setelement'
				    (4, _5, 'false')
			( <_23> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','qlc_sort'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1972
	  <_24,Sort> when 'true' ->
	      %% Line 1973
	      Sort
	end
'sort_tmpdir'/2 =
    %% Line 1975
    fun (_0,_1) ->
	case <_0,_1> of
	  <S,{'qlc_opt',_9,_10,_11,_12,[],_13,_14,_15}> when 'true' ->
	      %% Line 1976
	      S
	  %% Line 1977
	  <S,Opt> when 'true' ->
	      %% Line 1978
	      ( case Opt of
		  ( <( {'qlc_opt',_16,_17,_18,_19,_rec49,_20,_21,_22}
		       -| ['compiler_generated'] )> when 'true' ->
			case S of
			  <{'qlc_sort',_24,_25,_26,_27,_28,_29,_30,_31}> when 'true' ->
			      call 'erlang':'setelement'
				  (9, S, _rec49)
			  ( <_32> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','qlc_sort'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_23> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','qlc_opt'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'short_list'/1 =
    %% Line 1980
    fun (_0) ->
	%% Line 1982
	{'prepared',{'qlc_list',_0,'no_match_spec'},'yes',[],[],[],{[],[]},'undefined','true',%% Line 1983
											      'true'}
'find_const_positions'/4 =
    %% Line 1985
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <IF,LU_fun,{KeyEquality,PosFun},%% Line 1986
					  {'qlc_opt',_19,_20,Max,_21,_22,Lookup,_23,_24}>
	      when %% Line 1987
		try
		    let <_4> =
			call 'erlang':'is_function'
			    (LU_fun)
		    in  let <_5> =
			    call 'erlang':'is_function'
				(PosFun)
			in  let <_6> =
				call 'erlang':'is_function'
				    (IF)
			    in  let <_7> =
				    call %% Line 1988
					 'erlang':%% Line 1988
						  '=/='
					(%% Line 1988
					 Lookup, %% Line 1988
						 'false')
				in  let <_8> =
					call 'erlang':'and'
					    (_6, _7)
				    in  let <_9> =
					    call 'erlang':'and'
						(_5, _8)
					in  call 'erlang':'and'
						(_4, _9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1989
	      case apply 'call'/4
		       (IF, 'keypos', 'undefined', []) of
		%% Line 1990
		<'undefined'> when 'true' ->
		    let <Indices> =
			apply %% Line 1991
			      'call'/4
			    (%% Line 1991
			     IF, %% Line 1991
				 'indices', %% Line 1991
					    'undefined', %% Line 1991
							 [])
		    in  %% Line 1992
			apply 'find_const_position_idx'/5
			    (Indices, KeyEquality, PosFun, Max, [])
		%% Line 1993
		<KeyPos> when 'true' ->
		    let <_11> =
			apply %% Line 1994
			      PosFun
			    (%% Line 1994
			     KeyPos)
		    in  %% Line 1994
			case apply 'pos_vals'/4
				 (KeyPos, KeyEquality, _11, Max) of
			  %% Line 1995
			  <'false'> when 'true' ->
			      let <_12> =
				  apply %% Line 1996
					IF
				      (%% Line 1996
				       'indices')
			      in  %% Line 1996
				  apply 'find_const_position_idx'/5
				      (_12, KeyEquality, %% Line 1997
							 PosFun, %% Line 1997
								 Max, %% Line 1997
								      [])
			  %% Line 1998
			  <PosValuesSkip> when 'true' ->
			      %% Line 1999
			      PosValuesSkip
			end
	      end
	  %% Line 2002
	  <_X_IF,_X_LU_fun,_X_KE_PosFun,_X_Opt0> when 'true' ->
	      %% Line 2003
	      {'false',{'some',[]}}
	end
'find_const_position_idx'/5 =
    %% Line 2005
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <[I|Is],KeyEquality,PosFun,Max,L0> when 'true' ->
	      let <_5> =
		  apply %% Line 2006
			PosFun
		      (%% Line 2006
		       I)
	      in  %% Line 2006
		  case apply 'pos_vals'/4
			   (I, KeyEquality, _5, Max) of
		    %% Line 2007
		    <'false'> when 'true' ->
			%% Line 2008
			apply 'find_const_position_idx'/5
			    (Is, KeyEquality, PosFun, Max, L0)
		    %% Line 2009
		    <PosValuesFils = {{_X_Pos,Values},_X_SkipFils}> when 'true' ->
			let <_6> =
			    call %% Line 2010
				 'erlang':%% Line 2010
					  'length'
				(%% Line 2010
				 Values)
			in  let <L> =
				[%% Line 2010
				 {_6,PosValuesFils}|%% Line 2010
						    L0]
			    in  %% Line 2011
				apply 'find_const_position_idx'/5
				    (Is, KeyEquality, PosFun, Max, L)
		    ( <_8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_8})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2013
	  <_15,_X_KeyEquality,_X_PosFun,_X_Max,[]> when 'true' ->
	      %% Line 2014
	      {'false',{'some',[]}}
	  %% Line 2015
	  <_16,_X_KeyEquality,_X_PosFun,_X_Max,L> when 'true' ->
	      %% Line 2016
	      case call 'lists':'sort'
		       (L) of
		<[{_17,PVF}|_18]> when 'true' ->
		    %% Line 2017
		    PVF
		( <_9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_9})
		  -| ['compiler_generated'] )
	      end
	end
'pos_vals'/4 =
    %% Line 2019
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Pos,'==',{'usort_needed',Values,SkipFils},Max> when 'true' ->
	      let <_4> =
		  call %% Line 2020
		       'lists':%% Line 2020
			       'usort'
		      (%% Line 2020
		       Values)
	      in  %% Line 2020
		  apply 'pos_vals_max'/4
		      (Pos, _4, SkipFils, Max)
	  %% Line 2021
	  <Pos,'=:=',{'usort_needed',Values,SkipFils},Max> when 'true' ->
	      let <_5> =
		  apply %% Line 2022
			'nub'/1
		      (%% Line 2022
		       Values)
	      in  let <_6> =
		      call %% Line 2022
			   'lists':%% Line 2022
				   'sort'
			  (_5)
		  in  %% Line 2022
		      apply 'pos_vals_max'/4
			  (Pos, _6, SkipFils, Max)
	  %% Line 2023
	  <Pos,_X_KeyEquality,{'values',Values,SkipFils},Max> when 'true' ->
	      %% Line 2024
	      apply 'pos_vals_max'/4
		  (Pos, Values, SkipFils, Max)
	  %% Line 2025
	  <_X_Pos,_X_KeyEquality,_X_T,_X_Max> when 'true' ->
	      %% Line 2026
	      'false'
	end
'nub'/1 =
    %% Line 2028
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      %% Line 2029
	      []
	  %% Line 2030
	  <[E|L]> when 'true' ->
	      let <_2> =
		  apply %% Line 2031
			'nub'/1
		      (%% Line 2031
		       L)
	      in  %% Line 2031
		  case call 'lists':'member'
			   (E, _2) of
		    %% Line 2032
		    <'true'> when 'true' ->
			_2
		    %% Line 2034
		    <'false'> when 'true' ->
			%% Line 2035
			[E|_2]
		    ( <_3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_3})
		      -| ['compiler_generated'] )
		  end
	  ( <_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4})
		  -| [{'function_name',{'nub',1}}] )
	    -| ['compiler_generated'] )
	end
'pos_vals_max'/4 =
    %% Line 2039
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Pos,Values,Skip,Max>
	      when let <_5> =
		    call 'erlang':'=:='
			(Max, -1)
		in  let <_7> =
			try
			    let <_6> =
				call 'erlang':'length'
				    (Values)
			    in  call 'erlang':'>='
				    (Max, _6)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  call 'erlang':'or'
			    (_5, _7) ->
	      %% Line 2040
	      {{Pos,Values},Skip}
	  %% Line 2041
	  <_X_Pos,_X_Value,_X_Skip,_X_Max> when 'true' ->
	      %% Line 2042
	      'false'
	end
'prep_join'/3 =
    %% Line 2044
    fun (_0,_1,_2) ->
	%% Line 2045
	case apply 'join_opt'/1
		 (_1) of
	  %% Line 2046
	  <'undefined'> when 'true' ->
	      do  %% Line 2047
		  apply 'check_join_option'/1
		      (_2)
		  _0
	  %% Line 2049
	  <EqualMatch> when 'true' ->
	      let <_4> =
		  case %% Line 2050
		       EqualMatch of
		    %% Line 2051
		    <{NEqual,NMatch}> when 'true' ->
			%% Line 2052
			apply 'pref_join'/5
			    (NEqual, NMatch, _0, _1, _2)
		    %% Line 2053
		    <EM> when 'true' ->
			%% Line 2054
			apply 'pref_join'/5
			    (EM, EM, _0, _1, _2)
		  end
	      in  %% Line 2050
		  case _4 of
		    <_@r0 = {Ix,M}> when 'true' ->
			%% Line 2056
			( case _0 of
			    ( <( {'prepared',_18,_19,_rec50,_20,_21,_22,_23,_24,_25}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_8> =
				      call 'erlang':'++'
					  (_rec50, M)
				  in  let <SI> =
					  apply 'family_union'/1
					      (_8)
				      in  let <_rec51> = _@r0
					  in  %% Line 2057
					      case _0 of
						<{'prepared',_27,_28,_29,_30,_31,_32,_33,_34,_35}> when 'true' ->
						    let <_12> =
							call 'erlang':'setelement'
							    (7, _0, _rec51)
						    in  call 'erlang':'setelement'
							    (4, _12, SI)
						( <_36> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','prepared'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
			      -| ['compiler_generated'] )
			    ( <_26> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','prepared'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5})
		      -| ['compiler_generated'] )
		  end
	end
'pref_join'/5 =
    %% Line 2061
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <Equal,Match,Prep,QOpt,{'qlc_opt',_43,_44,_45,JoinOpt,_46,_47,_48,_49}> when 'true' ->
	      let <_12> =
		  letrec
		      'lc$^0'/1 =
			  %% Line 2063
			  fun (_9) ->
			      case _9 of
				<[{KeyEquality,QCsL}|_6]> when 'true' ->
				    %% Line 2064
				    ( letrec
					  'lc$^1'/1 =
					      fun (_10) ->
						  case _10 of
						    <[QCs|_8]> when 'true' ->
							let <_11> =
							    apply 'lc$^1'/1
								(_8)
							in  ( [{KeyEquality,QCs}|_11]
							      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							apply 'lc$^0'/1
							    (_6)
						    ( <_50> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_50})
							    -| [{'function_name',{'lc$^1',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^1'/1
					      (QCsL)
				      -| ['list_comprehension'] )
				( <[_5|_6]> when 'true' ->
				      apply 'lc$^0'/1
					  (_6)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_51> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_51})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  %% Line 2063
		      apply 'lc$^0'/1
			  ([{'==',Equal}|[{'=:=',Match}|[]]])
	      in  let <_22> =
		      case <> of
			%% Line 2066
			<>
			    when try
				  ( let <_16> =
					case call 'erlang':'=:='
						 (JoinOpt, 'any') of
					  ( <( 'true'
					       -| ['compiler_generated'] )> when 'true' ->
						'true'
					    -| ['compiler_generated'] )
					  ( <( 'false'
					       -| ['compiler_generated'] )> when 'true' ->
						call 'erlang':'=:='
						    (JoinOpt, 'lookup')
					    -| ['compiler_generated'] )
					  ( <_14> when 'true' ->
						_14
					    -| ['compiler_generated'] )
					end
				    in  ( call 'erlang':'=:='
					      (( _16
						 -| ['compiler_generated'] ), 'true')
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    %% Line 2067
			    ( letrec
				  'lc$^2'/1 =
				      fun (_19) ->
					  case _19 of
					    <[{KE,QCs}|_18]> when 'true' ->
						let <_20> =
						    apply 'pref_lookup_join'/4
							(KE, QCs, Prep, QOpt)
						in  let <_21> =
							apply 'lc$^2'/1
							    (_18)
						    in  ( [_20|_21]
							  -| ['compiler_generated'] )
					    ( <[_17|_18]> when 'true' ->
						  apply 'lc$^2'/1
						      (_18)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_52> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_52})
						    -| [{'function_name',{'lc$^2',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^2'/1
				      (_12)
			      -| ['list_comprehension'] )
			%% Line 2066
			( <> when 'true' ->
			      []
			  -| ['compiler_generated'] )
		      end
		  in  let <_32> =
			  case <> of
			    %% Line 2069
			    <>
				when try
				      ( let <_26> =
					    case call 'erlang':'=:='
						     (JoinOpt, 'any') of
					      ( <( 'true'
						   -| ['compiler_generated'] )> when 'true' ->
						    'true'
						-| ['compiler_generated'] )
					      ( <( 'false'
						   -| ['compiler_generated'] )> when 'true' ->
						    call 'erlang':'=:='
							(JoinOpt, 'merge')
						-| ['compiler_generated'] )
					      ( <_24> when 'true' ->
						    _24
						-| ['compiler_generated'] )
					    end
					in  ( call 'erlang':'=:='
						  (( _26
						     -| ['compiler_generated'] ), 'true')
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false' ->
				%% Line 2070
				( letrec
				      'lc$^3'/1 =
					  fun (_29) ->
					      case _29 of
						<[{KE,QCs}|_28]> when 'true' ->
						    let <_30> =
							apply 'pref_merge_join'/4
							    (KE, QCs, Prep, QOpt)
						    in  let <_31> =
							    apply 'lc$^3'/1
								(_28)
							in  ( [_30|_31]
							      -| ['compiler_generated'] )
						( <[_27|_28]> when 'true' ->
						      apply 'lc$^3'/1
							  (_28)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_53> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_53})
							-| [{'function_name',{'lc$^3',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^3'/1
					  (_12)
				  -| ['list_comprehension'] )
			    %% Line 2069
			    ( <> when 'true' ->
				  []
			      -| ['compiler_generated'] )
			  end
		      in  let <_36> =
			      call %% Line 2071
				   'lists':%% Line 2071
					   'append'
				  (_22)
			  in  let <_37> =
				  call %% Line 2071
				       'lists':%% Line 2071
					       'usort'
				      (_36)
			      in  let <_34> =
				      call %% Line 2071
					   'lists':%% Line 2071
						   'append'
					  (_32)
				  in  let <_35> =
					  call %% Line 2071
					       'lists':%% Line 2071
						       'usort'
					      (_34)
				      in  %% Line 2071
					  {_37,_35}
	  ( <_42,_41,_40,_39,_38> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_42,_41,_40,_39,_38})
		  -| [{'function_name',{'pref_join',5}}] )
	    -| ['compiler_generated'] )
	end
'pref_lookup_join'/4 =
    %% Line 2073
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <KeyEquality,{[{Q1,C1}|[{Q2,C2}|[]]],Skip},Prep,QOpt>
	      when let <_4> =
		    call %% Line 2074
			 'erlang':%% Line 2074
				  'is_integer'
			(%% Line 2074
			 C1)
		in  let <_5> =
			call %% Line 2074
			     'erlang':%% Line 2074
				      'is_integer'
			    (%% Line 2074
			     C2)
		    in  %% Line 2074
			call 'erlang':'and'
			    (_4, _5) ->
	      %% Line 2075
	      case Prep of
		<{'prepared',{'qlc',_37,_38,QData,_39,_40},_41,_42,_43,_44,_45,_46,_47,_48}> when 'true' ->
		    let <Is1> =
			apply %% Line 2076
			      'lookup_qual_data'/3
			    (%% Line 2076
			     QData, %% Line 2076
				    Q1, %% Line 2076
					KeyEquality)
		    in  let <_13> =
			    letrec
				'lc$^0'/1 =
				    %% Line 2078
				    fun (_10) ->
					case _10 of
					  <[IC1|_9]>
					      when call 'erlang':'=:='
						    (IC1,
						     C1) ->
					      let <_11> =
						  apply 'pref_lookup_join2'/7
						      (Q2, C2, Q1, C1, Skip, QOpt, KeyEquality)
					      in  let <_12> =
						      apply 'lc$^0'/1
							  (_9)
						  in  ( [_11|_12]
							-| ['compiler_generated'] )
					  ( <[IC1|_9]> when 'true' ->
						apply 'lc$^0'/1
						    (_9)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_51> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_51})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  %% Line 2078
				apply 'lc$^0'/1
				    (Is1)
			in  let <Is2> =
				apply %% Line 2079
				      'lookup_qual_data'/3
				    (%% Line 2079
				     QData, %% Line 2079
					    Q2, %% Line 2079
						KeyEquality)
			    in  let <_21> =
				    letrec
					'lc$^1'/1 =
					    %% Line 2081
					    fun (_18) ->
						case _18 of
						  <[IC2|_17]>
						      when call 'erlang':'=:='
							    (IC2,
							     C2) ->
						      let <_19> =
							  apply 'pref_lookup_join2'/7
							      (Q1, C1, Q2, C2, Skip, QOpt, KeyEquality)
						      in  let <_20> =
							      apply 'lc$^1'/1
								  (_17)
							  in  ( [_19|_20]
								-| ['compiler_generated'] )
						  ( <[IC2|_17]> when 'true' ->
							apply 'lc$^1'/1
							    (_17)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_52> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_52})
							  -| [{'function_name',{'lc$^1',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  %% Line 2081
					apply 'lc$^1'/1
					    (Is2)
				in  let <_23> =
					call %% Line 2082
					     'erlang':%% Line 2082
						      '++'
					    (_21, _13)
				    in  %% Line 2082
					apply 'family'/1
					    (_23)
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2083
	  <KE,L = [{_49,Cs1}|[{_50,Cs2}|[]]],Prep,QOpt>
	      when let <_24> =
		    call 'erlang':'is_list'
			(Cs1)
		in  let <_25> =
			call %% Line 2084
			     'erlang':%% Line 2084
				      'is_list'
			    (%% Line 2084
			     Cs2)
		    in  call 'erlang':'and'
			    (_24, _25) ->
	      let <_32> =
		  letrec
		      'lc$^2'/1 =
			  %% Line 2087
			  fun (_29) ->
			      case _29 of
				<[QC|_27]> when 'true' ->
				    let <_30> =
					apply 'pref_lookup_join'/4
					    (KE, QC, Prep, QOpt)
				    in  let <_31> =
					    apply 'lc$^2'/1
						(_27)
					in  ( [_30|_31]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_53> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_53})
					-| [{'function_name',{'lc$^2',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  let <_28> =
			  apply %% Line 2087
				'selections_no_skip'/1
			      (%% Line 2087
			       L)
		      in  %% Line 2087
			  apply 'lc$^2'/1
			      (_28)
	      in  %% Line 2086
		  call 'lists':'append'
		      (_32)
	  ( <_36,_35,_34,_33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_36,_35,_34,_33})
		  -| [{'function_name',{'pref_lookup_join',4}}] )
	    -| ['compiler_generated'] )
	end
'lookup_qual_data'/3 =
    %% Line 2089
    fun (_0,_1,_2) ->
	%% Line 2090
	case call 'lists':'keysearch'
		 (_1, 1, _0) of
	  %% Line 2091
	  <{'value',{_7,_8,_9,{'gen',PrepLE}}}>
	      when call 'erlang':'=:='
		    (_7,
		     _1) ->
	      %% Line 2092
	      apply 'join_indices'/2
		  (PrepLE, _2)
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_3})
	    -| ['compiler_generated'] )
	end
'join_indices'/2 =
    %% Line 2099
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'prepared',{'qlc_table',_16,_17,_18,_19,IF,_20,%% Line 2100
							   LU_fun,_21,%% Line 2101
								      KeyEquality,%% Line 2102
										  'undefined',_22},_23,_24,_25,_26,_27,_28,_29,_30},%% Line 2103
																    KE>
	      when %% Line 2103
		try
		    let <_2> =
			call 'erlang':'is_function'
			    (LU_fun)
		    in  ( let <_7> =
			      case %% Line 2104
				   call 'erlang':'=:='
				       (KE, KeyEquality) of
				%% Line 2104
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      'true'
				  -| ['compiler_generated'] )
				%% Line 2104
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      %% Line 2105
				      ( case call 'erlang':'=:='
						 (KE, '=:=') of
					  ( <( 'true'
					       -| ['compiler_generated'] )> when 'true' ->
						%% Line 2106
						call 'erlang':'=:='
						    (KeyEquality, 'undefined')
					    -| ['compiler_generated'] )
					  ( <( 'false'
					       -| ['compiler_generated'] )> when 'true' ->
						'false'
					    -| ['compiler_generated'] )
					  ( <_4> when 'true' ->
						_4
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 2104
				( <_3> when 'true' ->
				      _3
				  -| ['compiler_generated'] )
			      end
			  in  let <_8> =
				  call 'erlang':'=:='
				      (%% Line 2104
				       ( _7
					 -| ['compiler_generated'] ), 'true')
			      in  call 'erlang':'and'
				      (_2, _8)
			  -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_10> =
		  case %% Line 2107
		       apply 'call'/4
			   (IF, 'keypos', 'undefined', []) of
		    %% Line 2108
		    <'undefined'> when 'true' ->
			[]
		    %% Line 2109
		    <Kp> when 'true' ->
			[Kp|[]]
		  end
	      in  %% Line 2111
		  case apply 'call'/4
			   (IF, 'indices', 'undefined', []) of
		    %% Line 2112
		    <'undefined'> when 'true' ->
			_10
		    %% Line 2113
		    <Is0> when 'true' ->
			let <_12> =
			    call 'erlang':'++'
				(_10, Is0)
			in  call 'lists':'usort'
				(_12)
		  end
	  %% Line 2115
	  <_X_Prep,_X_KeyEquality> when 'true' ->
	      %% Line 2116
	      []
	end
'pref_lookup_join2'/7 =
    %% Line 2118
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	let <TemplCols> =
	    apply %% Line 2119
		  'compared_template_columns'/3
		(_5, %% Line 2119
		     {_0,_1}, _6)
	in  %% Line 2120
	    {{_0,_1,_2,_3},{'lookup_join',TemplCols,_6,_4}}
'pref_merge_join'/4 =
    %% Line 2122
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <KE,{[{Q1,C1}|[{Q2,C2}|[]]],Skip},Prep,QOpt>
	      when let <_4> =
		    call %% Line 2123
			 'erlang':%% Line 2123
				  'is_integer'
			(%% Line 2123
			 C1)
		in  let <_5> =
			call %% Line 2123
			     'erlang':%% Line 2123
				      'is_integer'
			    (%% Line 2123
			     C2)
		    in  %% Line 2123
			call 'erlang':'and'
			    (_4, _5) ->
	      %% Line 2124
	      case Prep of
		<{'prepared',{'qlc',_23,_24,QData,_25,_26},_27,_28,_29,_30,_31,_32,_33,_34}> when 'true' ->
		    let <Sort1> =
			apply %% Line 2125
			      'merge_qual_data'/2
			    (%% Line 2125
			     QData, %% Line 2125
				    Q1)
		    in  let <Sort2> =
			    apply %% Line 2126
				  'merge_qual_data'/2
				(%% Line 2126
				 QData, %% Line 2126
					Q2)
			in  let <Merge> =
				apply %% Line 2127
				      'pref_merge'/9
				    (%% Line 2127
				     KE, %% Line 2127
					 Q1, %% Line 2127
					     C1, %% Line 2127
						 Q2, %% Line 2127
						     C2, %% Line 2127
							 Skip, %% Line 2127
							       Sort1, %% Line 2127
								      Sort2, %% Line 2127
									     QOpt)
			    in  %% Line 2128
				apply 'family_union'/1
				    (Merge)
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2129
	  <KE,L = [{_35,Cs1}|[{_36,Cs2}|[]]],Prep,QOpt>
	      when let <_10> =
		    call 'erlang':'is_list'
			(Cs1)
		in  let <_11> =
			call %% Line 2130
			     'erlang':%% Line 2130
				      'is_list'
			    (%% Line 2130
			     Cs2)
		    in  call 'erlang':'and'
			    (_10, _11) ->
	      let <_18> =
		  letrec
		      'lc$^0'/1 =
			  %% Line 2133
			  fun (_15) ->
			      case _15 of
				<[QC|_13]> when 'true' ->
				    let <_16> =
					apply 'pref_merge_join'/4
					    (KE, QC, Prep, QOpt)
				    in  let <_17> =
					    apply 'lc$^0'/1
						(_13)
					in  ( [_16|_17]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_37> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_37})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  let <_14> =
			  apply %% Line 2133
				'selections_no_skip'/1
			      (%% Line 2133
			       L)
		      in  %% Line 2133
			  apply 'lc$^0'/1
			      (_14)
	      in  %% Line 2132
		  call 'lists':'append'
		      (_18)
	  ( <_22,_21,_20,_19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_22,_21,_20,_19})
		  -| [{'function_name',{'pref_merge_join',4}}] )
	    -| ['compiler_generated'] )
	end
'selections_no_skip'/1 =
    %% Line 2135
    fun (_0) ->
	%% Line 2136
	( letrec
	      'lc$^0'/1 =
		  fun (_4) ->
		      case _4 of
			<[C|_2]> when 'true' ->
			    let <_5> =
				apply 'lc$^0'/1
				    (_2)
			    in  ( [{C,{'some',[]}}|_5]
				  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_7> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_7})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_3> =
		  apply 'all_selections'/1
		      (_0)
	      in  apply 'lc$^0'/1
		      (_3)
	  -| ['list_comprehension'] )
'merge_qual_data'/2 =
    %% Line 2138
    fun (_0,_1) ->
	%% Line 2139
	case call 'lists':'keysearch'
		 (_1, 1, _0) of
	  %% Line 2140
	  <{'value',{_6,_7,_8,{'gen',PrepLE}}}>
	      when call 'erlang':'=:='
		    (_6,
		     _1) ->
	      %% Line 2141
	      case PrepLE of
		<{'prepared',_9,_10,_11,SortInfo,_12,_13,_14,_15,_16}> when 'true' ->
		    %% Line 2142
		    SortInfo
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_3})
	    -| ['compiler_generated'] )
	end
'pref_merge'/9 =
    %% Line 2145
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	let <Col1> = {_1,_2}
	in  let <Col2> = {_3,_4}
	    in  let <_17> =
		    letrec
			'lc$^0'/1 =
			    %% Line 2148
			    fun (_14) ->
				case _14 of
				  <[{QC = {_X_QNum,Col},SortL}|_12]> when 'true' ->
				      let <_13> =
					  call %% Line 2149
					       'lists':%% Line 2149
						       'keymember'
					      (%% Line 2149
					       {Col,'ascending'}, %% Line 2149
								  1, %% Line 2149
								     SortL)
				      in  %% Line 2149
					  ( case <> of
					      <>
						  when call 'erlang':'=:='
							(_13,
							 'false') ->
						  let <_15> =
						      apply 'lc$^0'/1
							  (_12)
						  in  ( [QC|_15]
							-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    apply 'lc$^0'/1
							(_12)
						-| ['compiler_generated'] )
					    end
					    -| ['list_comprehension'] )
				  ( <[_11|_12]> when 'true' ->
					apply 'lc$^0'/1
					    (_12)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_34> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_34})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  %% Line 2148
			apply 'lc$^0'/1
			    ([{Col1,_6}|[{Col2,_7}|[]]])
		in  let <J> =
			[%% Line 2150
			 {{_1,_2,_3,_4},{'merge_join',_17,_0,_5}}|%% Line 2150
								  []]
		    in  %% Line 2153
			( letrec
			      'lc$^1'/1 =
				  fun (_23) ->
				      case _23 of
					<[Column|_21]> when 'true' ->
					    let <_24> =
						apply 'lc$^1'/1
						    (_21)
					    in  ( [{{Column,'ascending'},J}|_24]
						  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    [{'other',J}|[]]
					( <_35> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_35})
						-| [{'function_name',{'lc$^1',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  let <_22> =
				  apply 'equal_template_columns'/2
				      (_8, Col1)
			      in  apply 'lc$^1'/1
				      (_22)
			  -| ['list_comprehension'] )
'table_sort_info'/1 =
    %% Line 2155
    fun (_0) ->
	case _0 of
	  <{'qlc_table',_4,_5,_6,_7,IF,_8,_9,_10,_11,_12,_13}> when 'true' ->
	      %% Line 2156
	      case apply 'call'/4
		       (IF, 'is_sorted_key', 'undefined', []) of
		%% Line 2157
		<'undefined'> when 'true' ->
		    %% Line 2158
		    {[],'no'}
		%% Line 2159
		<'false'> when 'true' ->
		    %% Line 2160
		    {[],'no'}
		%% Line 2161
		<'true'> when 'true' ->
		    %% Line 2162
		    case apply 'call'/4
			     (IF, 'keypos', 'undefined', []) of
		      %% Line 2163
		      <'undefined'> when 'true' ->
			  %% Line 2164
			  {[],'no'}
		      %% Line 2165
		      <KeyPos> when 'true' ->
			  %% Line 2166
			  {[{{KeyPos,'ascending'},[]}|[]],'no'}
		    end
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'table_sort_info',1}}] )
	    -| ['compiler_generated'] )
	end
'sort_sort_info'/1 =
    %% Line 2170
    fun (_0) ->
	case _0 of
	  <{'qlc_sort',_7,'sort',_8,_9,Ord0,_10,_11,_12}> when 'true' ->
	      let <_1> =
		  apply %% Line 2171
			'sort_order'/1
		      (%% Line 2171
		       Ord0)
	      in  %% Line 2171
		  {[],_1}
	  %% Line 2172
	  <{'qlc_sort',_13,{'keysort',Kp0},_14,_15,Ord0,_16,_17,_18}> when 'true' ->
	      let <_3> =
		  case %% Line 2173
		       Kp0 of
		    %% Line 2174
		    <[Pos|_19]> when 'true' ->
			Pos
		    %% Line 2175
		    <_20> when 'true' ->
			Kp0
		  end
	      in  let <_5> =
		      apply %% Line 2177
			    'sort_order'/1
			  (%% Line 2177
			   Ord0)
		  in  %% Line 2177
		      {[{{_3,_5},[]}|[]],'no'}
	  ( <_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6})
		  -| [{'function_name',{'sort_sort_info',1}}] )
	    -| ['compiler_generated'] )
	end
'sort_order'/1 =
    %% Line 2179
    fun (_0) ->
	case _0 of
	  <F>
	      when call 'erlang':'is_function'
		    (_0) ->
	      %% Line 2180
	      'no'
	  %% Line 2181
	  <Order> when 'true' ->
	      %% Line 2182
	      Order
	end
'check_join_option'/1 =
    %% Line 2184
    fun (_0) ->
	case _0 of
	  <{'qlc_opt',_2,_3,_4,'any',_5,_6,_7,_8}> when 'true' ->
	      %% Line 2185
	      'ok'
	  %% Line 2186
	  <{'qlc_opt',_9,_10,_11,Join,_12,_13,_14,_15}> when 'true' ->
	      %% Line 2187
	      call 'erlang':'error'
		  ('no_join_to_carry_out', [{'join',Join}|[]])
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'check_join_option',1}}] )
	    -| ['compiler_generated'] )
	end
'check_lookup_option'/2 =
    %% Line 2189
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'qlc_opt',_4,_5,_6,_7,_8,'true',_9,_10},'false'> when 'true' ->
	      %% Line 2190
	      call 'erlang':'error'
		  ('no_lookup_to_carry_out', [{'lookup','true'}])
	  %% Line 2191
	  <_X_QOpt,_X_LuV> when 'true' ->
	      %% Line 2192
	      'ok'
	end
'compared_template_columns'/3 =
    %% Line 2194
    fun (_0,_1,_2) ->
	let <_3> =
	    apply _0
		(%% Line 2195
		 'template')
	in  %% Line 2195
	    apply _3
		(_1, _2)
'equal_template_columns'/2 =
    %% Line 2197
    fun (_0,_1) ->
	let <_2> =
	    apply _0
		(%% Line 2198
		 'template')
	in  %% Line 2198
	    apply _2
		(_1, '==')
'size_of_constant_prefix'/2 =
    %% Line 2203
    fun (_0,_1) ->
	let <_2> =
	    apply _0
		(%% Line 2204
		 'n_leading_constant_columns')
	in  %% Line 2204
	    apply _2
		(_1)
'constants'/2 =
    %% Line 2206
    fun (_0,_1) ->
	let <_2> =
	    apply _0
		(%% Line 2207
		 'constants')
	in  %% Line 2207
	    apply _2
		(_1)
'equal_constants'/2 =
    %% Line 2209
    fun (_0,_1) ->
	let <_2> =
	    apply _0
		(%% Line 2210
		 'equal_constants')
	in  %% Line 2210
	    apply _2
		(_1)
'join_opt'/1 =
    %% Line 2212
    fun (_0) ->
	%% Line 2213
	apply _0
	    ('join')
'match_specs'/2 =
    %% Line 2215
    fun (_0,_1) ->
	let <_2> =
	    apply _0
		(%% Line 2216
		 'match_specs')
	in  %% Line 2216
	    apply _2
		(_1)
'constant_columns'/2 =
    %% Line 2218
    fun (_0,_1) ->
	let <_2> =
	    apply _0
		(%% Line 2219
		 'constant_columns')
	in  %% Line 2219
	    apply _2
		(_1)
'size_of_qualifier'/2 =
    %% Line 2221
    fun (_0,_1) ->
	let <_2> =
	    apply _0
		(%% Line 2222
		 'size')
	in  %% Line 2222
	    apply _2
		(_1)
'opt_le'/2 =
    %% Line 2231
    fun (_0,_1) ->
	case <_0,_1> of
	  <Prep0 = {'prepared',QLC = {'simple_qlc',_100,LE0,_101,_102,Optz0},_103,_104,_105,_106,_107,_108,_109,_110},%% Line 2232
														      GenNum> when 'true' ->
	      %% Line 2233
	      case LE0 of
		%% Line 2234
		<{'prepared',{'simple_qlc',LE_Pvar,LE2,_111,_112,Optz2},_113,_114,_115,_116,_117,_118,_119,_120}> when 'true' ->
		    %% Line 2236
		    ( case Optz2 of
			( <( {'optz',_121,_rec53,_122,_123,_124}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_6> =
				  case _rec53 of
				    %% Line 2237
				    <'false'> when 'true' ->
					( case Optz0 of
					    ( <( {'optz',_126,_rec54,_127,_128,_129}
						 -| ['compiler_generated'] )> when 'true' ->
						  _rec54
					      -| ['compiler_generated'] )
					    ( <_130> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','optz'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    %% Line 2238
				    <Cache2> when 'true' ->
					Cache2
				  end
			      in  %% Line 2241
				  ( case Optz0 of
				      ( <( {'optz',_rec57,_131,_132,_133,_134}
					   -| ['compiler_generated'] )> when 'true' ->
					    ( case Optz2 of
						( <( {'optz',_rec58,_136,_137,_138,_139}
						     -| ['compiler_generated'] )> when 'true' ->
						      let <_rec55> =
							  call 'erlang':'or'
							      (_rec57, _rec58)
						      in  case Optz0 of
							    <{'optz',_141,_142,_143,_144,_145}> when 'true' ->
								let <_14> =
								    call 'erlang':'setelement'
									(3, Optz0, _6)
								in  let <_16> =
									call 'erlang':'setelement'
									    (2, _14, _rec55)
								    in  let <_19> =
									    case <> of
									      %% Line 2243
									      <>
										  when call 'erlang':'=:='
											(LE_Pvar,
											 'SQV') ->
										  ( case QLC of
										      ( <( {'simple_qlc',_rec59,_147,_148,_149,_150}
											   -| ['compiler_generated'] )> when 'true' ->
											    _rec59
											-| ['compiler_generated'] )
										      ( <_151> when 'true' ->
											    ( call ( 'erlang'
												     -| ['compiler_generated'] ):( 'error'
																   -| ['compiler_generated'] )
												  (( {'badrecord','simple_qlc'}
												     -| ['compiler_generated'] ))
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										    end
										    -| ['compiler_generated'] )
									      %% Line 2244
									      <> when 'true' ->
										  LE_Pvar
									    end
									in  %% Line 2247
									    case QLC of
									      <{'simple_qlc',_rec63,_rec64,_rec65,_rec66,_rec67}> when 'true' ->
										  let <_23> =
										      {'simple_qlc',_19,LE2,_rec65,_rec66,_16}
										  in  case Prep0 of
											<{'prepared',_153,_154,_155,_156,_157,_158,_159,_160,_161}> when 'true' ->
											    let <_27> =
												call 'erlang':'setelement'
												    (2, Prep0, _23)
											    in  %% Line 2248
												apply 'opt_le'/2
												    (_27, GenNum)
											( <_162> when 'true' ->
											      ( call ( 'erlang'
												       -| ['compiler_generated'] ):( 'error'
																     -| ['compiler_generated'] )
												    (( {'badrecord','prepared'}
												       -| ['compiler_generated'] ))
												-| ['compiler_generated'] )
											  -| ['compiler_generated'] )
										      end
									      ( <_152> when 'true' ->
										    ( call ( 'erlang'
											     -| ['compiler_generated'] ):( 'error'
															   -| ['compiler_generated'] )
											  (( {'badrecord','simple_qlc'}
											     -| ['compiler_generated'] ))
										      -| ['compiler_generated'] )
										-| ['compiler_generated'] )
									    end
							    ( <_146> when 'true' ->
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'error'
													 -| ['compiler_generated'] )
									(( {'badrecord','optz'}
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
						  -| ['compiler_generated'] )
						( <_140> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','optz'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <_135> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','optz'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			( <_125> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','optz'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2249
		<_163> when 'true' ->
		    let <Optz1> =
			apply %% Line 2250
			      'no_cache_of_first_generator'/2
			    (%% Line 2250
			     Optz0, %% Line 2250
				    GenNum)
		    in  let <_30> =
			    apply %% Line 2251
				  'opt_le'/2
				(%% Line 2251
				 LE0, %% Line 2251
				      1)
			in  %% Line 2251
			    case <_30,Optz1> of
			      %% Line 2252
			      <LE,( {( 'optz'
				       -| ['compiler_generated'] ),( 'false'
								     -| ['compiler_generated'] ),( 'false'
												   -| ['compiler_generated'] ),_164,_165,_166}
				    -| ['compiler_generated'] )> when 'true' ->
				  %% Line 2253
				  LE
			      %% Line 2254
			      <LE,_167> when 'true' ->
				  %% Line 2255
				  case QLC of
				    <{'simple_qlc',_168,_169,_170,_171,_172}> when 'true' ->
					let <_32> =
					    call 'erlang':'setelement'
						(6, QLC, Optz1)
					in  let <_34> =
						call 'erlang':'setelement'
						    (3, _32, LE)
					    in  case Prep0 of
						  <{'prepared',_174,_175,_176,_177,_178,_179,_180,_181,_182}> when 'true' ->
						      call 'erlang':'setelement'
							  (2, Prep0, _34)
						  ( <_183> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','prepared'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
				    ( <_173> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','simple_qlc'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			    end
	      end
	  %% Line 2258
	  <Prep0 = {'prepared',{'qlc',_184,_185,_186,_187,_188},_189,_190,_191,LU_SkipQuals0,_192,_193,_194,_195},GenNum> when 'true' ->
	      %% Line 2259
	      case Prep0 of
		<{'prepared',QLC = {'qlc',_196,_197,Qdata0,_198,Optz0},_199,_200,_201,_202,_203,_204,_205,_206}> when 'true' ->
		    %% Line 2260
		    case Optz0 of
		      <{'optz',_207,_208,JoinOption,_209,Opt}> when 'true' ->
			  %% Line 2261
			  ( case Optz0 of
			      ( <( {'optz',_210,_211,_rec71,_212,_213}
				   -| ['compiler_generated'] )> when 'true' ->
				    case _rec71 of
				      <_215>
					  when call 'erlang':'=:='
						(_rec71,
						 JoinOption) ->
					  %% Line 2263
					  ( case Prep0 of
					      ( <( {'prepared',_216,_217,_218,_219,_220,_rec72,_221,_222,_223}
						   -| ['compiler_generated'] )> when 'true' ->
						    case apply 'opt_join'/5
							     (_rec72, JoinOption, Qdata0, Opt, LU_SkipQuals0) of
						      <{LU_QNum,Join,JoinSkipFs,DoSort}> when 'true' ->
							  let <_50> =
							      fun (_48) ->
								  %% Line 2265
								  case _48 of
								    <{QNum,_X_Fs}> when 'true' ->
									call 'erlang':'=:='
									    (QNum, LU_QNum)
								    ( <_49> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_49})
									    -| [{'function_name',{'-opt_le/2-fun-0-',1}}] )
								      -| ['compiler_generated'] )
								  end
							  in  %% Line 2264
							      case %% Line 2265
								   call 'lists':'partition'
								       (_50, %% Line 2266
									     LU_SkipQuals0) of
								<{LU_Skip,LU_SkipQuals}> when 'true' ->
								    let <_54> =
									fun (_52) ->
									    %% Line 2267
									    case _52 of
									      <{_X_QNum,Fs}> when 'true' ->
										  Fs
									      ( <_53> when 'true' ->
										    ( primop 'match_fail'
											  ({'function_clause',_53})
										      -| [{'function_name',{'-opt_le/2-fun-1-',1}}] )
										-| ['compiler_generated'] )
									    end
								    in  let <LU_SkipFs> =
									    call %% Line 2267
										 'lists':%% Line 2267
											 'flatmap'
										(_54, %% Line 2267
										      LU_SkipQuals)
									in  let <_56> =
										case <> of
										  %% Line 2271
										  <>
										      when call 'erlang':'=:='
											    (LU_Skip,
											     []) ->
										      Qdata0
										  %% Line 2272
										  <> when 'true' ->
										      apply 'activate_join_lookup_filter'/2
											  (LU_QNum, Qdata0)
										end
									    in  let <_58> =
										    call %% Line 2274
											 'erlang':%% Line 2274
												  '++'
											(%% Line 2274
											 LU_SkipFs, %% Line 2274
												    JoinSkipFs)
										in  let <Qdata2> =
											apply %% Line 2274
											      'skip_lookup_filters'/2
											    (_56, _58)
										    in  let <F> =
											    fun (_64,_63) ->
												%% Line 2275
												case <_64,_63> of
												  <{QNum,GoI,SI,{'gen',PrepLE = {'prepared',_225,_226,_227,_228,_229,_230,_231,_232,_233}}},GenNum1> when 'true' ->
												      let <NewPrepLE> =
													  apply %% Line 2276
														'maybe_sort'/4
													      (%% Line 2276
													       PrepLE, %% Line 2276
														       QNum, %% Line 2276
															     DoSort, %% Line 2276
																     Opt)
												      in  let <_62> =
													      apply %% Line 2277
														    'opt_le'/2
														  (%% Line 2277
														   NewPrepLE, %% Line 2277
															      GenNum1)
													  in  let <_61> =
														  call %% Line 2278
														       'erlang':%% Line 2278
																'+'
														      (%% Line 2278
														       GenNum1, %% Line 2278
																1)
													      in  %% Line 2277
														  {{QNum,GoI,SI,{'gen',_62}},_61}
												  %% Line 2279
												  <Qd,GenNum1> when 'true' ->
												      %% Line 2280
												      {Qd,GenNum1}
												end
											in  %% Line 2282
											    case call 'lists':'mapfoldl'
												     (F, 1, Qdata2) of
											      <{Qdata,_234}> when 'true' ->
												  let <Optz1> =
												      apply %% Line 2283
													    'no_cache_of_first_generator'/2
													  (%% Line 2283
													   Optz0, %% Line 2283
														  GenNum)
												  in  %% Line 2284
												      case Optz1 of
													<{'optz',_235,_236,_237,_238,_239}> when 'true' ->
													    let <_72> =
														call 'erlang':'setelement'
														    (5, Optz1, Join)
													    in  %% Line 2285
														case QLC of
														  <{'qlc',_241,_242,_243,_244,_245}> when 'true' ->
														      let <_75> =
															  call 'erlang':'setelement'
															      (6, QLC, _72)
														      in  let <_77> =
															      call 'erlang':'setelement'
																  (4, _75, Qdata)
															  in  case Prep0 of
																<{'prepared',_247,_248,_249,_250,_251,_252,_253,_254,_255}> when 'true' ->
																    call 'erlang':'setelement'
																	(2, Prep0, _77)
																( <_256> when 'true' ->
																      ( call ( 'erlang'
																	       -| ['compiler_generated'] ):( 'error'
																					     -| ['compiler_generated'] )
																	    (( {'badrecord','prepared'}
																	       -| ['compiler_generated'] ))
																	-| ['compiler_generated'] )
																  -| ['compiler_generated'] )
															      end
														  ( <_246> when 'true' ->
															( call ( 'erlang'
																 -| ['compiler_generated'] ):( 'error'
																			       -| ['compiler_generated'] )
															      (( {'badrecord','qlc'}
																 -| ['compiler_generated'] ))
															  -| ['compiler_generated'] )
														    -| ['compiler_generated'] )
														end
													( <_240> when 'true' ->
													      ( call ( 'erlang'
														       -| ['compiler_generated'] ):( 'error'
																		     -| ['compiler_generated'] )
														    (( {'badrecord','optz'}
														       -| ['compiler_generated'] ))
														-| ['compiler_generated'] )
													  -| ['compiler_generated'] )
												      end
											      ( <_68> when 'true' ->
												    primop 'match_fail'
													({'badmatch',_68})
												-| ['compiler_generated'] )
											    end
								( <_51> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_51})
								  -| ['compiler_generated'] )
							      end
						      ( <_47> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_47})
							-| ['compiler_generated'] )
						    end
						-| ['compiler_generated'] )
					      ( <_224> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','prepared'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      ( <_44> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_44})
					-| ['compiler_generated'] )
				    end
				-| ['compiler_generated'] )
			      ( <_214> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','optz'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      ( <_41> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_41})
			-| ['compiler_generated'] )
		    end
		( <_40> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_40})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2286
	  <Prep = {'prepared',{'qlc_append',HL},_257,_258,_259,_260,_261,_262,_263,_264},GenNum> when 'true' ->
	      let <_86> =
		  letrec
		      'lc$^3'/1 =
			  %% Line 2287
			  fun (_83) ->
			      case _83 of
				<[H|_82]> when 'true' ->
				    let <_84> =
					apply 'opt_le'/2
					    (H, GenNum)
				    in  let <_85> =
					    apply 'lc$^3'/1
						(_82)
					in  ( [_84|_85]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_311> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_311})
					-| [{'function_name',{'lc$^3',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  %% Line 2287
		      apply 'lc$^3'/1
			  (HL)
	      in  let <_rec77> = {%% Line 2288
		       'qlc_append',_86}
		  in  %% Line 2288
		      case Prep of
			<{'prepared',_265,_266,_267,_268,_269,_270,_271,_272,_273}> when 'true' ->
			    call 'erlang':'setelement'
				(2, Prep, _rec77)
			( <_274> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','prepared'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 2289
	  <Prep = {'prepared',Sort = {'qlc_sort',H,_275,_276,_277,_278,_279,_280,_281},_282,_283,_284,_285,_286,_287,_288,_289},GenNum> when 'true' ->
	      let <_rec81> =
		  apply %% Line 2290
			'opt_le'/2
		      (%% Line 2290
		       H, %% Line 2290
			  GenNum)
	      in  %% Line 2290
		  case Sort of
		    <{'qlc_sort',_290,_291,_292,_293,_294,_295,_296,_297}> when 'true' ->
			let <_94> =
			    call 'erlang':'setelement'
				(2, Sort, _rec81)
			in  case Prep of
			      <{'prepared',_299,_300,_301,_302,_303,_304,_305,_306,_307}> when 'true' ->
				  call 'erlang':'setelement'
				      (2, Prep, _94)
			      ( <_308> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','prepared'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
		    ( <_298> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','qlc_sort'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 2291
	  <Prep,_X_GenNum> when 'true' ->
	      %% Line 2292
	      Prep
	end
'no_cache_of_first_generator'/2 =
    %% Line 2294
    fun (_0,_1) ->
	case <_0,_1> of
	  <Optz,GenNum>
	      when call 'erlang':'>'
		    (GenNum,
		     1) ->
	      %% Line 2295
	      Optz
	  %% Line 2296
	  <Optz,1> when 'true' ->
	      %% Line 2297
	      case Optz of
		<{'optz',_6,_7,_8,_9,_10}> when 'true' ->
		    call 'erlang':'setelement'
			(3, Optz, 'false')
		( <_11> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','optz'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'no_cache_of_first_generator',2}}] )
	    -| ['compiler_generated'] )
	end
'maybe_sort'/4 =
    %% Line 2299
    fun (_0,_1,_2,_3) ->
	%% Line 2300
	case call 'lists':'keyfind'
		 (_1, 1, _2) of
	  %% Line 2301
	  <{_17,Col}>
	      when call 'erlang':'=:='
		    (_17,
		     _1) ->
	      %% Line 2302
	      case _3 of
		<{'qlc_opt',_18,_19,_20,_21,TmpDir,_22,_23,TmpUsage}> when 'true' ->
		    let <_9> =
			letrec
			    'lc$^0'/1 =
				%% Line 2303
				fun (_7) ->
				    case _7 of
				      <[Dir|_6]>
					  when call 'erlang':'=/='
						(Dir,
						 []) ->
					  let <_8> =
					      apply 'lc$^0'/1
						  (_6)
					  in  ( [{'tmpdir',Dir}|_8]
						-| ['compiler_generated'] )
				      ( <[Dir|_6]> when 'true' ->
					    apply 'lc$^0'/1
						(_6)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_24> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_24})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  %% Line 2303
			    apply 'lc$^0'/1
				([TmpDir|[]])
		    in  let <Sort> =
			    {%% Line 2304
			     'qlc_sort',_0,%% Line 2304
					   {'keysort',Col},%% Line 2304
							   'false',%% Line 2305
								   [],%% Line 2305
								      'ascending',_9,%% Line 2306
										     TmpUsage,%% Line 2307
											      TmpDir}
			in  %% Line 2308
			    {'prepared',Sort,'no',[],[],[],'no','undefined','false','false'}
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2309
	  <'false'> when 'true' ->
	      _0
	  ( <_12> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_12})
	    -| ['compiler_generated'] )
	end
'skip_lookup_filters'/2 =
    %% Line 2313
    fun (_0,_1) ->
	case <_0,_1> of
	  <Qdata,[]> when 'true' ->
	      %% Line 2314
	      Qdata
	  %% Line 2315
	  <Qdata0,LU_SkipFs> when 'true' ->
	      %% Line 2321
	      ( letrec
		    'lc$^0'/1 =
			fun (_4) ->
			    case _4 of
			      <[Qd = {QNum,GoI,_11,_12}|_3]> when 'true' ->
				  let <_7> =
				      case call 'lists':'member'
					       (QNum, LU_SkipFs) of
					<'true'> when 'true' ->
					    {QNum,GoI,-1,'fil'}
					<'false'> when 'true' ->
					    Qd
					( <_6> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_6})
					  -| ['compiler_generated'] )
				      end
				  in  let <_8> =
					  apply 'lc$^0'/1
					      (_3)
				      in  ( [_7|_8]
					    -| ['compiler_generated'] )
			      ( <[_2|_3]> when 'true' ->
				    apply 'lc$^0'/1
					(_3)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_13> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_13})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(Qdata0)
		-| ['list_comprehension'] )
	end
'activate_join_lookup_filter'/2 =
    %% Line 2326
    fun (_0,_1) ->
	%% Line 2327
	case call 'lists':'keyfind'
		 (_0, 1, _1) of
	  <{_16,GoI2,SI2,{'gen',Prep2}}> when 'true' ->
	      %% Line 2328
	      ( case Prep2 of
		  ( <( {'prepared',_rec84,_17,_18,_19,_20,_21,_22,_23,_24}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 2329
			case _rec84 of
			  <{'qlc_table',_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36}> when 'true' ->
			      let <_8> =
				  call 'erlang':'setelement'
				      (12, _rec84, 'no_match_spec')
			      in  case Prep2 of
				    <{'prepared',_38,_39,_40,_41,_42,_43,_44,_45,_46}> when 'true' ->
					let <_12> =
					    call 'erlang':'setelement'
						(2, Prep2, _8)
					in  %% Line 2331
					    call 'lists':'keyreplace'
						(_0, 1, _1, {_0,GoI2,SI2,{'gen',_12}})
				    ( <_47> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','prepared'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			  ( <_37> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','qlc_table'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_25> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','prepared'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_2})
	    -| ['compiler_generated'] )
	end
'opt_join'/5 =
    %% Line 2333
    fun (_0,_1,_2,_3,_4) ->
	%% Line 2335
	case _0 of
	  <{Ix0,M0}> when 'true' ->
	      let <Ix1> =
		  apply %% Line 2336
			'opt_join_lu'/3
		      (%% Line 2336
		       Ix0, _2, _4)
	      in  let <_7> =
		      call %% Line 2337
			   'lists':%% Line 2337
				   'keysort'
			  (%% Line 2337
			   2, %% Line 2337
			      Ix1)
		  in  %% Line 2338
		      case call 'lists':'reverse'
			       (_7) of
			%% Line 2339
			<[{{Q1,C1,Q2,C2},Skip,KE,LU_fun}|_19]> when 'true' ->
			    let <J> =
				{%% Line 2340
				 'qlc_join',%% Line 2340
					    {'lookup',KE,LU_fun},_3,'undefined',%% Line 2340
										Q1,%% Line 2341
										   C1,'undefined',%% Line 2341
												  Q2,%% Line 2341
												     C2}
			    in  %% Line 2342
				{Q2,J,Skip,[]}
			%% Line 2343
			<[]> when 'true' ->
			    %% Line 2345
			    case apply 'opt_join_merge'/1
				     (M0) of
			      %% Line 2346
			      <[{{Q1,C1,Q2,C2},{'merge_join',DoSort,KE,Skip}}|_20]> when 'true' ->
				  let <J> =
				      {%% Line 2347
				       'qlc_join',%% Line 2347
						  {'merge',KE},_3,'undefined',%% Line 2348
									      Q1,%% Line 2348
										 C1,'undefined',%% Line 2348
												Q2,%% Line 2348
												   C2}
				  in  %% Line 2349
				      {'not_a_qnum',J,Skip,DoSort}
			      %% Line 2350
			      <[]>
				  when call 'erlang':'=:='
					(_1,
					 'nested_loop') ->
				  %% Line 2351
				  {'not_a_qnum','no',[],[]}
			      %% Line 2352
			      <_21>
				  when call 'erlang':'=/='
					(_1,
					 'any') ->
				  %% Line 2353
				  call 'erlang':'error'
				      ('cannot_carry_out_join', [_1|[]])
			      %% Line 2354
			      <_22> when 'true' ->
				  %% Line 2355
				  {'not_a_qnum','no',[],[]}
			    end
			( <_13> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_13})
			  -| ['compiler_generated'] )
		      end
	  ( <_5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_5})
	    -| ['compiler_generated'] )
	end
'opt_join_lu'/3 =
    %% Line 2359
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[{J = {_X_Q1,_X_C1,Q2,_X_C2},[{'lookup_join',_X_KEols,JKE,Skip0}|_17]}|LJ],%% Line 2360
										      Qdata,%% Line 2360
											    LU_SkipQuals> when 'true' ->
	      %% Line 2361
	      case call 'lists':'keyfind'
		       (Q2, 1, Qdata) of
		<{_18,_19,_20,{'gen',Prep2}}>
		    when call 'erlang':'=:='
			  (_18,
			   Q2) ->
		    %% Line 2363
		    ( case Prep2 of
			( <( {'prepared',_rec88,_21,_22,_23,_24,_25,_26,_27,_28}
			     -| ['compiler_generated'] )> when 'true' ->
			      case _rec88 of
				<{'qlc_table',_30,_31,_32,_33,_34,_35,LU_fun,_36,KE,_37,MS}> when 'true' ->
				    let <_10> =
					case <> of
					  %% Line 2367
					  ( <>
						when call 'erlang':'=/='
						      (MS,
						       'no_match_spec') ->
						let <_8> =
						    call %% Line 2368
							 'lists':%% Line 2368
								 'keymember'
							(%% Line 2368
							 Q2, %% Line 2368
							     1, %% Line 2368
								LU_SkipQuals)
						in  %% Line 2368
						    call 'erlang':'=:='
							(_8, 'false')
					    -| ['compiler_generated'] )
					  %% Line 2367
					  ( <> when 'true' ->
						'false'
					    -| ['compiler_generated'] )
					end
				    in  %% Line 2366
					case _10 of
					  %% Line 2370
					  <'true'> when 'true' ->
					      %% Line 2371
					      apply 'opt_join_lu'/3
						  (LJ, Qdata, LU_SkipQuals)
					  %% Line 2372
					  <'false'> when 'true' ->
					      let <Skip> =
						  apply %% Line 2375
							'skip_if_possible'/3
						      (%% Line 2375
						       JKE, %% Line 2375
							    KE, %% Line 2375
								Skip0)
					      in  let <_12> =
						      apply %% Line 2376
							    'opt_join_lu'/3
							  (%% Line 2376
							   LJ, %% Line 2376
							       Qdata, %% Line 2376
								      LU_SkipQuals)
						  in  %% Line 2376
						      [{J,Skip,KE,LU_fun}|_12]
					  ( <_13> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_13})
					    -| ['compiler_generated'] )
					end
				( <_6> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_6})
				  -| ['compiler_generated'] )
			      end
			  -| ['compiler_generated'] )
			( <_29> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','prepared'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2378
	  <[],_X_Qdata,_X_LU_SkipQuals> when 'true' ->
	      %% Line 2379
	      []
	  ( <_16,_15,_14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15,_14})
		  -| [{'function_name',{'opt_join_lu',3}}] )
	    -| ['compiler_generated'] )
	end
'opt_join_merge'/1 =
    %% Line 2381
    fun (_0) ->
	let <_15> =
	    letrec
		'lc$^0'/1 =
		    %% Line 2385
		    fun (_8) ->
			case _8 of
			  <[{_X_KpOrder_or_other,MJ}|_2]> when 'true' ->
			      %% Line 2386
			      ( letrec
				    'lc$^1'/1 =
					fun (_9) ->
					    case _9 of
					      <[{QCs,{'merge_join',DoSort,KE,Skip0}}|_4]> when 'true' ->
						  %% Line 2387
						  ( letrec
							'lc$^2'/1 =
							    fun (_10) ->
								case _10 of
								  <[Skip|_6]> when 'true' ->
								      let <_12> =
									  call 'erlang':'length'
									      (DoSort)
								      in  let <_13> =
									      call 'erlang':'-'
										  (_12)
									  in  let <_11> =
										  call 'erlang':'length'
										      (Skip)
									      in  let <_14> =
										      apply 'lc$^2'/1
											  (_6)
										  in  ( [{_13,_11,{QCs,{'merge_join',DoSort,KE,Skip}}}|_14]
											-| ['compiler_generated'] )
								  <[]> when 'true' ->
								      apply 'lc$^1'/1
									  (_4)
								  ( <_26> when 'true' ->
									( primop 'match_fail'
									      ({'function_clause',_26})
									  -| [{'function_name',{'lc$^2',1}}] )
								    -| ['compiler_generated'] )
								end
						    in  let <_7> =
							    apply 'skip_if_possible'/3
								(KE, '==', Skip0)
							in  apply 'lc$^2'/1
								([_7|[]])
						    -| ['list_comprehension'] )
					      ( <[_3|_4]> when 'true' ->
						    apply 'lc$^1'/1
							(_4)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  apply 'lc$^0'/1
						      (_2)
					      ( <_27> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_27})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^1'/1
					(MJ)
				-| ['list_comprehension'] )
			  ( <[_1|_2]> when 'true' ->
				apply 'lc$^0'/1
				    (_2)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_28> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_28})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 2385
		apply 'lc$^0'/1
		    (_0)
	in  let <_22> =
		letrec
		    'lc$^3'/1 =
			%% Line 2388
			fun (_20) ->
			    case _20 of
			      <[{_24,_25,J}|_18]> when 'true' ->
				  let <_21> =
				      apply 'lc$^3'/1
					  (_18)
				  in  ( [J|_21]
					-| ['compiler_generated'] )
			      ( <[_17|_18]> when 'true' ->
				    apply 'lc$^3'/1
					(_18)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_29> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_29})
				      -| [{'function_name',{'lc$^3',1}}] )
				-| ['compiler_generated'] )
			    end
		in  let <_19> =
			call %% Line 2388
			     'lists':%% Line 2388
				     'sort'
			    (_15)
		    in  %% Line 2388
			apply 'lc$^3'/1
			    (_19)
	    in  %% Line 2388
		call 'lists':'reverse'
		    (_22)
'skip_if_possible'/3 =
    %% Line 2392
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <'=:=','==',_6> when 'true' ->
	      %% Line 2393
	      []
	  %% Line 2394
	  <_7,_8,{_X_SkipTag,Skip}> when 'true' ->
	      %% Line 2395
	      Skip
	  ( <_5,_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4,_3})
		  -| [{'function_name',{'skip_if_possible',3}}] )
	    -| ['compiler_generated'] )
	end
'setup_qlc'/2 =
    %% Line 2406
    fun (_0,_1) ->
	%% Line 2408
	apply 'setup_le'/3
	    (_0, [], _1)
'setup_le'/3 =
    %% Line 2410
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{'prepared',{'simple_qlc',_35,LE,_36,_37,Optz},_38,_39,_40,_41,_42,_43,_44,_45},Post0,Setup> when 'true' ->
	      %% Line 2411
	      case apply 'setup_le'/3
		       (LE, Post0, Setup) of
		<{Objs,Post,LocalPost}> when 'true' ->
		    %% Line 2412
		    apply 'unique_cache'/4
			(Objs, Post, LocalPost, Optz)
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2413
	  <{'prepared',{'qlc',QFun,_46,Qdata,V,%% Line 2414
					       Optz},_47,_48,_49,_50,_51,_52,_53,_54},%% Line 2414
										      Post0,%% Line 2414
											    Setup> when 'true' ->
	      %% Line 2415
	      case %% Line 2416
		   apply 'setup_quals'/4
		       (Qdata, Post0, Setup, Optz) of
		<{GoTo,FirstState,Post,LocalPost}> when 'true' ->
		    let <Objs> =
			fun () ->
			    %% Line 2417
			    apply QFun
				(FirstState, V, GoTo)
		    in  %% Line 2418
			apply 'unique_cache'/4
			    (Objs, Post, LocalPost, Optz)
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2419
	  <{'prepared',Table = {'qlc_table',_55,_56,_57,PostFun,_58,_59,_60,_61,_62,_63,_64},_65,_66,_67,_68,_69,_70,_71,_72},Post,Setup> when 'true' ->
	      let <H> =
		  apply %% Line 2420
			'table_handle'/3
		      (%% Line 2420
		       Table, %% Line 2420
			      Post, %% Line 2420
				    Setup)
	      in  %% Line 2422
		  {H,[PostFun|Post],[]}
	  %% Line 2423
	  <{'prepared',{'qlc_append',PrepL},_73,_74,_75,_76,_77,_78,_79,_80},Post0,Setup> when 'true' ->
	      let <F> =
		  fun (_10,_9) ->
		      %% Line 2424
		      case <_10,_9> of
			<Prep,{Post1,LPost1}> when 'true' ->
			    %% Line 2425
			    case apply 'setup_le'/3
				     (Prep, Post1, Setup) of
			      <{Objs,Post2,LPost2}> when 'true' ->
				  let <_8> =
				      call %% Line 2426
					   'erlang':%% Line 2426
						    '++'
					  (%% Line 2426
					   LPost1, %% Line 2426
						   LPost2)
				  in  %% Line 2426
				      {Objs,{Post2,_8}}
			      ( <_7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_7})
				-| ['compiler_generated'] )
			    end
			( <_12,_11> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_12,_11})
				-| [{'function_name',{'-setup_le/3-fun-1-',2}}] )
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 2428
		  case call 'lists':'mapfoldl'
			   (F, {Post0,[]}, PrepL) of
		    <{ObjsL,{Post,LocalPost}}> when 'true' ->
			let <_15> =
			    fun () ->
				%% Line 2429
				apply 'append_loop'/2
				    (ObjsL, 0)
			in  %% Line 2429
			    {_15,Post,LocalPost}
		    ( <_14> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_14})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2430
	  <{'prepared',{'qlc_sort',Prep,Kp,%% Line 2431
					   Unique,%% Line 2431
						  Compressed,%% Line 2432
							     Order,%% Line 2432
								   SortOptions0,%% Line 2433
										TmpUsage,%% Line 2433
											 TmpDir},_81,_82,_83,_84,_85,_86,_87,_88},%% Line 2434
																  Post0,%% Line 2434
																	Setup> when 'true' ->
	      let <SortOptions> =
		  apply %% Line 2435
			'sort_options_global_tmp'/2
		      (%% Line 2435
		       SortOptions0, %% Line 2435
				     TmpDir)
	      in  let <LF> =
		      fun (_17) ->
			  %% Line 2437
			  apply 'sort_list'/6
			      (_17, Order, Unique, Kp, SortOptions, Post0)
		  in  %% Line 2439
		      case apply 'setup_le'/3
			       (Prep, Post0, Setup) of
			%% Line 2440
			<{L,Post,LocalPost}>
			    when call 'erlang':'is_list'
				  (L) ->
			    let <_20> =
				apply %% Line 2441
				      LF
				    (%% Line 2441
				     L)
			    in  %% Line 2441
				{_20,Post,LocalPost}
			%% Line 2442
			<{Objs,Post,LocalPost}> when 'true' ->
			    let <FF> =
				fun (_21) ->
				    %% Line 2444
				    apply 'file_sort_handle'/7
					(_21, Kp, SortOptions, TmpDir, %% Line 2445
								       Compressed, %% Line 2445
										   Post, %% Line 2445
											 LocalPost)
			    in  %% Line 2447
				apply 'sort_handle'/7
				    (Objs, LF, FF, SortOptions, Post, LocalPost, %% Line 2448
										 {TmpUsage,'sorting'})
			( <_24> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_24})
			  -| ['compiler_generated'] )
		      end
	  %% Line 2450
	  <{'prepared',{'qlc_list',L,MS},_89,_90,_91,_92,_93,_94,_95,_96},Post,_X_Setup>
	      when let <_25> =
		    call %% Line 2451
			 'erlang':%% Line 2451
				  '=:='
			(%% Line 2451
			 'no_match_spec', %% Line 2451
					  MS)
		in  let <_26> =
			call %% Line 2451
			     'erlang':%% Line 2451
				      '=:='
			    (%% Line 2451
			     L, %% Line 2451
				[])
		    in  %% Line 2451
			call 'erlang':'or'
			    (_25, _26) ->
	      %% Line 2452
	      {L,Post,[]}
	  %% Line 2453
	  <{'prepared',{'qlc_list',L,MS},_97,_98,_99,_100,_101,_102,_103,_104},Post,_X_Setup>
	      when %% Line 2454
		call 'erlang':'is_list'
		    (L) ->
	      let <_27> =
		  call %% Line 2455
		       'ets':%% Line 2455
			     'match_spec_compile'
		      (%% Line 2455
		       MS)
	      in  let <_28> =
		      call %% Line 2455
			   'ets':%% Line 2455
				 'match_spec_run'
			  (%% Line 2455
			   L, _27)
		  in  %% Line 2455
		      {_28,Post,[]}
	  %% Line 2456
	  <{'prepared',{'qlc_list',H0,MS},_105,_106,_107,_108,_109,_110,_111,_112},Post0,Setup> when 'true' ->
	      %% Line 2457
	      case apply 'setup_le'/3
		       (H0, Post0, Setup) of
		<{Objs0,Post,LocalPost}> when 'true' ->
		    let <_30> =
			call %% Line 2458
			     'ets':%% Line 2458
				   'match_spec_compile'
			    (%% Line 2458
			     MS)
		    in  let <Objs> =
			    call %% Line 2458
				 'ets':%% Line 2458
				       'match_spec_run'
				(%% Line 2458
				 Objs0, _30)
			in  %% Line 2459
			    {Objs,Post,LocalPost}
		( <_29> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_29})
		  -| ['compiler_generated'] )
	      end
	  ( <_34,_33,_32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_34,_33,_32})
		  -| [{'function_name',{'setup_le',3}}] )
	    -| ['compiler_generated'] )
	end
'setup_quals'/4 =
    %% Line 2475
    fun (_0,_1,_2,_3) ->
	%% Line 2476
	case %% Line 2477
	     apply 'setup_quals'/6
		 (0, _0, [], _1, [], _2) of
	  <{GoTo0,Post1,LocalPost0}> when 'true' ->
	      let <GoTo1> =
		  call %% Line 2478
		       'lists':%% Line 2478
			       'keysort'
		      (%% Line 2478
		       1, %% Line 2478
			  GoTo0)
	      in  let <FirstState0> =
		      apply %% Line 2479
			    'next_state'/1
			  (_0)
		  in  %% Line 2481
		      ( case _3 of
			  ( <( {'optz',_38,_39,_40,_rec89,_41}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_30> =
				    case _rec89 of
				      %% Line 2482
				      <MJ = {'qlc_join',{'merge',_X_KE},Opt,_43,_44,C1,_45,_46,C2}> when 'true' ->
					  let <MF> =
					      fun (_13,_12,_11) ->
						  %% Line 2483
						  case <_13,_12,_11> of
						    <_X_Rev,{H1,WH1},{H2,WH2}> when 'true' ->
							%% Line 2484
							( fun () ->
							      let <_10> =
								  apply %% Line 2485
									WH1
								      (%% Line 2485
								       H1)
							      in  let <_9> =
								      apply %% Line 2485
									    WH2
									  (%% Line 2485
									   H2)
								  in  %% Line 2485
								      apply 'merge_join'/5
									  (_10, C1, _9, C2, Opt)
							  -| [{'id',{0,0,'-setup_quals/4-fun-0-'}}] )
						    ( <_16,_15,_14> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_16,_15,_14})
							    -| [{'function_name',{'-setup_quals/4-fun-1-',3}}] )
						      -| ['compiler_generated'] )
						  end
					  in  %% Line 2488
					      apply 'setup_join'/6
						  (MJ, _0, GoTo1, FirstState0, MF, Post1)
				      %% Line 2489
				      <LJ = {'qlc_join',{'lookup',_X_KE,LuF},_47,_48,_49,C1,_50,_51,C2}> when 'true' ->
					  let <LF> =
					      fun (_23,_22,_21) ->
						  %% Line 2490
						  case <_23,_22,_21> of
						    <Rev,{H1,WH1},{H2,WH2}> when 'true' ->
							let <_52,_53> =
							    case <> of
							      %% Line 2492
							      <>
								  when ( call 'erlang':'=:='
									  (Rev,
									   'true')
								      -| ['compiler_generated'] ) ->
								  <H2,WH2>
							      %% Line 2493
							      <> when 'true' ->
								  <H1,WH1>
							    end
							in  %% Line 2495
							    ( fun () ->
								  let <_20> =
								      apply ( _53
									      -| ['compiler_generated'] )
									  (( _52
									     -| ['compiler_generated'] ))
								  in  %% Line 2496
								      apply 'lookup_join'/5
									  (_20, C1, LuF, C2, Rev)
							      -| [{'id',{0,0,'-setup_quals/4-fun-2-'}}] )
						    ( <_26,_25,_24> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_26,_25,_24})
							    -| [{'function_name',{'-setup_quals/4-fun-3-',3}}] )
						      -| ['compiler_generated'] )
						  end
					  in  %% Line 2499
					      apply 'setup_join'/6
						  (LJ, _0, GoTo1, FirstState0, LF, Post1)
				      %% Line 2500
				      <'no'> when 'true' ->
					  let <_28> =
					      apply %% Line 2501
						    'flat_goto'/1
						  (%% Line 2501
						   GoTo1)
					  in  %% Line 2501
					      {_28,FirstState0,Post1,[]}
				      ( <_29> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_29})
					-| ['compiler_generated'] )
				    end
				in  case _30 of
				      <{GoTo2,FirstState,Post,LocalPost1}> when 'true' ->
					  let <GoTo> =
					      call %% Line 2503
						   'erlang':%% Line 2503
							    'list_to_tuple'
						  (%% Line 2503
						   GoTo2)
					  in  let <_33> =
						  call %% Line 2504
						       'erlang':%% Line 2504
								'++'
						      (%% Line 2504
						       LocalPost0, %% Line 2504
								   LocalPost1)
					      in  %% Line 2504
						  {GoTo,FirstState,Post,_33}
				      ( <_31> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_31})
					-| ['compiler_generated'] )
				    end
			    -| ['compiler_generated'] )
			  ( <_42> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','optz'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  ( <_4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_4})
	    -| ['compiler_generated'] )
	end
'setup_quals'/6 =
    %% Line 2506
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <GenLoopS,[{_X_QNum,GoI,-1,'fil'}|Qdata],%% Line 2507
						   Gs,%% Line 2507
						      P,%% Line 2507
							LP,%% Line 2507
							   Setup> when 'true' ->
	      %% Line 2509
	      apply 'setup_quals'/6
		  (GenLoopS, Qdata, [{GoI,[-1|[-1]]}|Gs], P, LP, Setup)
	  %% Line 2510
	  <GenLoopS,[{_X_QNum,GoI,_X_SI,'fil'}|Qdata],%% Line 2511
						      Gs,%% Line 2511
							 P,%% Line 2511
							   LP,%% Line 2511
							      Setup> when 'true' ->
	      let <_8> =
		  apply %% Line 2512
			'next_state'/1
		      (%% Line 2512
		       Qdata)
	      in  %% Line 2512
		  apply 'setup_quals'/6
		      (GenLoopS, Qdata, [{GoI,[GenLoopS|[_8|[]]]}|Gs], %% Line 2513
								       P, %% Line 2513
									  LP, %% Line 2513
									      Setup)
	  %% Line 2514
	  <GenLoopS,[{_X_QNum,GoI,_X_SI,{'gen',{'join',_22,_23,_24,_25,_26,_27}}}|Qdata],%% Line 2515
											 Gs,%% Line 2515
											    P,%% Line 2515
											      LP,%% Line 2515
												 Setup> when 'true' ->
	      %% Line 2516
	      apply 'setup_quals'/6
		  (GenLoopS, Qdata, [{GoI,[-1|[-1|[-1]]]}|Gs], P, LP, Setup)
	  %% Line 2517
	  <GenLoopS,[{_X_QNum,GoI,SI,{'gen',LE}}|Qdata],%% Line 2518
							Gs,%% Line 2518
							   P,%% Line 2518
							     LP,%% Line 2518
								Setup> when 'true' ->
	      %% Line 2519
	      case apply 'setup_le'/3
		       (LE, P, Setup) of
		<{V,NP,LP1}> when 'true' ->
		    let <_15> =
			call %% Line 2520
			     'erlang':%% Line 2520
				      '+'
			    (%% Line 2520
			     SI, %% Line 2520
				 1)
		    in  let <_14> =
			    apply %% Line 2520
				  'next_state'/1
				(%% Line 2520
				 Qdata)
			in  let <_13> =
				call %% Line 2521
				     'erlang':%% Line 2521
					      '++'
				    (%% Line 2521
				     LP, %% Line 2521
					 LP1)
			    in  %% Line 2520
				apply 'setup_quals'/6
				    (_15, Qdata, [{GoI,[GenLoopS|[_14|[V|[]]]]}|Gs], %% Line 2521
										     NP, _13, %% Line 2521
											      Setup)
		( <_12> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2522
	  <GenLoopS,[],Gs,P,LP,_X_Setup> when 'true' ->
	      %% Line 2523
	      {[{1,[GenLoopS|[]]}|Gs],P,LP}
	  ( <_21,_20,_19,_18,_17,_16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_21,_20,_19,_18,_17,_16})
		  -| [{'function_name',{'setup_quals',6}}] )
	    -| ['compiler_generated'] )
	end
'setup_join'/6 =
    %% Line 2532
    fun (_0,_1,_2,_3,_4,_5) ->
	%% Line 2533
	case _0 of
	  <{'qlc_join',_70,Opt,_71,QNum1a,_72,_73,QNum2a,_74}> when 'true' ->
	      %% Line 2534
	      case %% Line 2535
		   apply 'find_join_data'/3
		       (_1, QNum1a, QNum2a) of
		<{{_X_QN,JGoI,JSI,_75},Rev,QNum1,QNum2,WH1,WH2,_X_CsFun}> when 'true' ->
		    let <_12> =
			letrec
			    'lc$^0'/1 =
				%% Line 2537
				fun (_10) ->
				    case _10 of
				      <[{QNum,GoI,SI,_76}|_9]>
					  when call 'erlang':'=:='
						(QNum,
						 QNum1) ->
					  let <_11> =
					      apply 'lc$^0'/1
						  (_9)
					  in  ( [{GoI,SI}|_11]
						-| ['compiler_generated'] )
				      ( <[_8|_9]> when 'true' ->
					    apply 'lc$^0'/1
						(_9)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_82> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_82})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  %% Line 2537
			    apply 'lc$^0'/1
				(_1)
		    in  %% Line 2536
			case _12 of
			  <[{GoI1,SI1}|[]]> when 'true' ->
			      let <_18> =
				  letrec
				      'lc$^1'/1 =
					  %% Line 2539
					  fun (_16) ->
					      case _16 of
						<[{QNum,GoI,SI,_77}|_15]>
						    when call 'erlang':'=:='
							  (QNum,
							   QNum2) ->
						    let <_17> =
							apply 'lc$^1'/1
							    (_15)
						    in  ( [{GoI,SI}|_17]
							  -| ['compiler_generated'] )
						( <[_14|_15]> when 'true' ->
						      apply 'lc$^1'/1
							  (_15)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_83> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_83})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  %% Line 2539
				      apply 'lc$^1'/1
					  (_1)
			      in  %% Line 2538
				  case _18 of
				    <[{GoI2,SI2}|[]]> when 'true' ->
					let <_24> =
					    letrec
						'lc$^2'/1 =
						    %% Line 2541
						    fun (_22) ->
							case _22 of
							  <[{GoI,[_X_Back|[_X_Forth|[H|[]]]]}|_21]>
							      when call 'erlang':'=:='
								    (GoI,
								     GoI1) ->
							      let <_23> =
								  apply 'lc$^2'/1
								      (_21)
							      in  ( [H|_23]
								    -| ['compiler_generated'] )
							  ( <[_20|_21]> when 'true' ->
								apply 'lc$^2'/1
								    (_21)
							    -| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_84> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_84})
								  -| [{'function_name',{'lc$^2',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  %% Line 2541
						apply 'lc$^2'/1
						    (_2)
					in  %% Line 2541
					    case _24 of
					      <[H1|[]]> when 'true' ->
						  let <_30> =
						      letrec
							  'lc$^3'/1 =
							      %% Line 2543
							      fun (_28) ->
								  case _28 of
								    <[{GoI,[Back|[_X_Forth|[H|[]]]]}|_27]>
									when call 'erlang':'=:='
									      (GoI,
									       GoI2) ->
									let <_29> =
									    apply 'lc$^3'/1
										(_27)
									in  ( [{Back,H}|_29]
									      -| ['compiler_generated'] )
								    ( <[_26|_27]> when 'true' ->
									  apply 'lc$^3'/1
									      (_27)
								      -| ['compiler_generated'] )
								    <[]> when 'true' ->
									[]
								    ( <_85> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_85})
									    -| [{'function_name',{'lc$^3',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  %% Line 2543
							  apply 'lc$^3'/1
							      (_2)
						  in  %% Line 2542
						      case _30 of
							<[{BackH2,H2}|[]]> when 'true' ->
							    let <H0> =
								apply _4
								    (%% Line 2544
								     Rev, %% Line 2544
									  {H1,WH1}, %% Line 2544
										    {H2,WH2})
							    in  let <_33> =
								    apply %% Line 2547
									  'join_unique_cache'/1
									(%% Line 2547
									 Opt)
								in  %% Line 2546
								    case %% Line 2547
									 apply 'unique_cache'/4
									     (H0, _5, [], _33) of
								      <{H,Post,LocalPost}> when 'true' ->
									  let <_39> =
									      letrec
										  'lc$^4'/1 =
										      %% Line 2548
										      fun (_37) ->
											  case _37 of
											    <[{GoI,[Back|[_78|[_79|[]]]]}|_36]>
												when call 'erlang':'=:='
												      (GoI,
												       GoI1) ->
												let <_38> =
												    apply 'lc$^4'/1
													(_36)
												in  ( [Back|_38]
												      -| ['compiler_generated'] )
											    ( <[_35|_36]> when 'true' ->
												  apply 'lc$^4'/1
												      (_36)
											      -| ['compiler_generated'] )
											    <[]> when 'true' ->
												[]
											    ( <_86> when 'true' ->
												  ( primop 'match_fail'
													({'function_clause',_86})
												    -| [{'function_name',{'lc$^4',1}}] )
											      -| ['compiler_generated'] )
											  end
									      in  %% Line 2548
										  apply 'lc$^4'/1
										      (_2)
									  in  %% Line 2548
									      case _39 of
										<[JBack|[]]> when 'true' ->
										    let <JForth> =
											apply %% Line 2549
											      'next_after'/3
											    (_1, %% Line 2549
												 SI1, %% Line 2549
												      QNum2)
										    in  let <_49> =
											    fun (_47) ->
												%% Line 2550
												case _47 of
												  <{GoI,_80}>
												      when call 'erlang':'=:='
													    (GoI,
													     JGoI) ->
												      %% Line 2551
												      {JGoI,[JBack|[JForth|[H|[]]]]}
												  %% Line 2552
												  <{GoI,_81}>
												      when let <_42> =
													    call 'erlang':'=:='
														(GoI, GoI1)
													in  let <_43> =
														call 'erlang':'=:='
														    (GoI, GoI2)
													    in  call 'erlang':'or'
														    (_42, _43) ->
												      %% Line 2553
												      {GoI,[-1|[-1|[-1]]]}
												  %% Line 2554
												  <Go> when 'true' ->
												      %% Line 2555
												      Go
												end
											in  let <GoTo1> =
												call %% Line 2550
												     'lists':%% Line 2550
													     'map'
												    (_49, _2)
											    in  let <_60> =
												    fun (_58) ->
													%% Line 2557
													case _58 of
													  <S>
													      when call 'erlang':'=:='
														    (_58,
														     SI1) ->
													      %% Line 2558
													      JSI
													  %% Line 2559
													  <S>
													      when call 'erlang':'=:='
														    (_58,
														     SI2) ->
													      %% Line 2560
													      apply 'next_after'/3
														  (_1, S, QNum2)
													  %% Line 2561
													  <S>
													      when try
														    let <_52> =
															call 'erlang':'+'
															    (SI1, 1)
														    in  call 'erlang':'=:='
															    (_58, _52)
														of <Try> ->
														    Try
														catch <T,R> ->
														    'false' ->
													      %% Line 2562
													      call 'erlang':'+'
														  (JSI, 1)
													  %% Line 2563
													  <S>
													      when try
														    let <_53> =
															call 'erlang':'+'
															    (SI2, 1)
														    in  let <_54> =
															    call 'erlang':'=:='
																(_58, _53)
															in  let <_55> =
																call 'erlang':'+'
																    (SI1, 1)
															    in  let <_56> =
																    call 'erlang':'=:='
																	(_55, BackH2)
																in  call 'erlang':'and'
																	(_54, _56)
														of <Try> ->
														    Try
														catch <T,R> ->
														    'false' ->
													      %% Line 2564
													      call 'erlang':'+'
														  (JSI, 1)
													  %% Line 2565
													  <S>
													      when try
														    let <_57> =
															call 'erlang':'+'
															    (SI2, 1)
														    in  call 'erlang':'=:='
															    (_58, _57)
														of <Try> ->
														    Try
														catch <T,R> ->
														    'false' ->
													      %% Line 2566
													      BackH2
													  %% Line 2567
													  <S> when 'true' ->
													      S
													end
												in  let <_51> =
													apply %% Line 2568
													      'flat_goto'/1
													    (%% Line 2568
													     GoTo1)
												    in  let <GoTo> =
													    call %% Line 2557
														 'lists':%% Line 2557
															 'map'
														(_60, _51)
													in  let <_62> =
														case <> of
														  %% Line 2570
														  <>
														      when call 'erlang':'=:='
															    (SI1,
															     _3) ->
														      JSI
														  %% Line 2571
														  <> when 'true' ->
														      _3
														end
													    in  %% Line 2573
														{GoTo,_62,Post,LocalPost}
										( <_40> when 'true' ->
										      primop 'match_fail'
											  ({'badmatch',_40})
										  -| ['compiler_generated'] )
									      end
								      ( <_34> when 'true' ->
									    primop 'match_fail'
										({'badmatch',_34})
									-| ['compiler_generated'] )
								    end
							( <_31> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_31})
							  -| ['compiler_generated'] )
						      end
					      ( <_25> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_25})
						-| ['compiler_generated'] )
					    end
				    ( <_19> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_19})
				      -| ['compiler_generated'] )
				  end
			  ( <_13> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_13})
			    -| ['compiler_generated'] )
			end
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_7})
		  -| ['compiler_generated'] )
	      end
	  ( <_6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_6})
	    -| ['compiler_generated'] )
	end
'join_unique_cache'/1 =
    %% Line 2575
    fun (_0) ->
	case _0 of
	  <Opt = {'qlc_opt',Unique,Cache,_2,_3,_4,_5,_6,_7}> when 'true' ->
	      %% Line 2576
	      {'optz',Unique,Cache,'any','no',Opt}
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'join_unique_cache',1}}] )
	    -| ['compiler_generated'] )
	end
'flat_goto'/1 =
    %% Line 2578
    fun (_0) ->
	let <_3> =
	    fun (_1) ->
		%% Line 2579
		case _1 of
		  <{_5,L}> when 'true' ->
		      L
		  ( <_2> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_2})
			  -| [{'function_name',{'-flat_goto/1-fun-0-',1}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 2579
	    call 'lists':'flatmap'
		(_3, _0)
'next_after'/3 =
    %% Line 2581
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[{_7,_8,S,_9}|Qdata],_10,QNum2>
	      when call 'erlang':'=:='
		    (_10,
		     S) ->
	      %% Line 2582
	      case Qdata of
		%% Line 2583
		<[{_11,_12,_13,_14}|Qdata1]>
		    when call 'erlang':'=:='
			  (_11,
			   QNum2) ->
		    %% Line 2584
		    apply 'next_state'/1
			(Qdata1)
		%% Line 2585
		<_15> when 'true' ->
		    %% Line 2586
		    apply 'next_state'/1
			(Qdata)
	      end
	  %% Line 2588
	  <[_16|Qdata],S,QNum2> when 'true' ->
	      %% Line 2589
	      apply 'next_after'/3
		  (Qdata, S, QNum2)
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'next_after',3}}] )
	    -| ['compiler_generated'] )
	end
'next_state'/1 =
    %% Line 2591
    fun (_0) ->
	case _0 of
	  <[{_2,_3,_4,{'gen',{'join',_5,_6,_7,_8,_9,_10}}}|Qdata]> when 'true' ->
	      %% Line 2592
	      apply 'next_state'/1
		  (Qdata)
	  %% Line 2593
	  <[{_11,_12,-1,'fil'}|Qdata]> when 'true' ->
	      %% Line 2595
	      apply 'next_state'/1
		  (Qdata)
	  %% Line 2596
	  <[{_13,_14,S,_15}|_16]> when 'true' ->
	      %% Line 2597
	      S
	  %% Line 2598
	  <[]> when 'true' ->
	      %% Line 2599
	      apply 'template_state'/0
		  ()
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'next_state',1}}] )
	    -| ['compiler_generated'] )
	end
'find_join_data'/3 =
    %% Line 2601
    fun (_0,_1,_2) ->
	let <_17> =
	    letrec
		'lc$^0'/1 =
		    %% Line 2606
		    fun (_14) ->
			case _14 of
			  <[Q = {_X_QN,_X_GoI,_X_SI,{'gen',{'join',_22,QN1,QN2,H1,H2,CsF}}}|_4]> when 'true' ->
			      let <_13,Rev> =
				  case <> of
				    %% Line 2608
				    <>
					when let <_5> =
					      call 'erlang':'=:='
						  (QN1, _1)
					  in  let <_6> =
						  call 'erlang':'=:='
						      (QN2, _2)
					      in  call 'erlang':'and'
						      (_5, _6) ->
					<%% Line 2609
					 'true',( 'false'
						  -| ['compiler_generated'] )>
				    %% Line 2610
				    <>
					when let <_9> =
					      call 'erlang':'=:='
						  (QN1, _2)
					  in  let <_10> =
						  call 'erlang':'=:='
						      (QN2, _1)
					      in  call 'erlang':'and'
						      (_9, _10) ->
					%% Line 2611
					<'true','true'>
				    %% Line 2612
				    <> when 'true' ->
					%% Line 2613
					<'false','false'>
				  end
			      in  %% Line 2607
				  ( case _13 of
				      <'true'> when 'true' ->
					  let <_15> =
					      apply 'lc$^0'/1
						  (_4)
					  in  ( [{Q,Rev,QN1,QN2,H1,H2,CsF}|_15]
						-| ['compiler_generated'] )
				      ( <'false'> when 'true' ->
					    apply 'lc$^0'/1
						(_4)
					-| ['compiler_generated'] )
				      ( <_16> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_16})
					-| ['compiler_generated'] )
				    end
				    -| ['list_comprehension'] )
			  ( <[_3|_4]> when 'true' ->
				apply 'lc$^0'/1
				    (_4)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_24> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_24})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 2606
		apply 'lc$^0'/1
		    (_0)
	in  %% Line 2602
	    case _17 of
	      <[QRev|[]]> when 'true' ->
		  %% Line 2615
		  QRev
	      ( <_18> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_18})
		-| ['compiler_generated'] )
	    end
'table_handle'/3 =
    %% Line 2617
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{'qlc_table',TraverseFun,TravMS,%% Line 2618
					   PreFun,_27,_28,_29,%% Line 2618
							      LuF,%% Line 2619
								  ParentFun,_30,%% Line 2619
										LuVals,%% Line 2619
										       MS},%% Line 2620
											   Post,%% Line 2620
												Setup> when 'true' ->
	      %% Line 2621
	      case Setup of
		<{'setup',Parent}> when 'true' ->
		    let <_10> =
			case <> of
			  %% Line 2624
			  <>
			      when call 'erlang':'=:='
				    (ParentFun,
				     'undefined') ->
			      %% Line 2625
			      'undefined'
			  %% Line 2626
			  <>
			      when try
				    let <_4> =
					call 'erlang':'self'
					    ()
				    in  call 'erlang':'=:='
					    (Parent, _4)
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false' ->
			      %% Line 2627
			      try
				  %% Line 2628
				  apply ParentFun
				      ()
			      of <_5> ->
				  _5
			      catch <_8,_7,_6> ->
				  do  %% Line 2630
				      apply 'post_funs'/1
					  (Post)
				      primop 'raw_raise'
					  (_8, _7, _6)
			  %% Line 2633
			  <> when 'true' ->
			      %% Line 2634
			      case apply 'monitor_request'/2
				       (Parent, {'parent_fun',ParentFun}) of
				%% Line 2635
				<'error'> when 'true' ->
				    do  %% Line 2636
					apply 'post_funs'/1
					    (Post)
					%% Line 2637
					call 'erlang':'exit'
					    ('normal')
				%% Line 2638
				<{'value',Value}> when 'true' ->
				    %% Line 2639
				    Value
				%% Line 2640
				<{'parent_fun_caught',Class,Reason,Stacktrace}> when 'true' ->
				    do  %% Line 2642
					apply 'post_funs'/1
					    (Post)
					%% Line 2643
					call 'erlang':'raise'
					    (Class, Reason, Stacktrace)
				( <_9> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_9})
				  -| ['compiler_generated'] )
			      end
			end
		    in  let <_15> =
			    case <> of
			      %% Line 2648
			      <>
				  when try
					let <_12> =
					    call 'erlang':'self'
						()
					in  call 'erlang':'=:='
						(Parent, _12)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  %% Line 2649
				  'undefined'
			      %% Line 2650
			      <> when 'true' ->
				  let <_13> =
				      call %% Line 2651
					   'erlang':%% Line 2651
						    'self'
					  ()
				  in  let <Cursor> = {%% Line 2651
					   'qlc_cursor',%% Line 2651
							{_13,Parent}}
				      in  %% Line 2652
					  ( fun () ->
						apply 'delete_cursor'/1
						    (Cursor)
					    -| [{'id',{0,0,'-table_handle/3-fun-0-'}}] )
			    end
			in  let <PreFunArgs> =
				[%% Line 2654
				 {'parent_value',_10}|%% Line 2654
						      [{'stop_fun',_15}|[]]]
			    in  do  %% Line 2655
				    apply 'call'/4
					(PreFun, PreFunArgs, ( 'ok'
							       -| ['result_not_wanted'] ), Post)
				    %% Line 2656
				    case LuVals of
				      %% Line 2657
				      <{Pos,Vals}>
					  when call 'erlang':'=:='
						(MS,
						 'no_match_spec') ->
					  %% Line 2658
					  apply LuF
					      (Pos, Vals)
				      %% Line 2659
				      <{Pos,Vals}> when 'true' ->
					  %% Line 2660
					  case apply LuF
						   (Pos, Vals) of
					    %% Line 2661
					    <[]> when 'true' ->
						%% Line 2662
						[]
					    %% Line 2663
					    <Objs>
						when call 'erlang':'is_list'
						      (Objs) ->
						let <_19> =
						    call %% Line 2665
							 'ets':%% Line 2665
							       'match_spec_compile'
							(%% Line 2665
							 MS)
						in  %% Line 2664
						    call 'ets':'match_spec_run'
							(Objs, _19)
					    %% Line 2666
					    <Error> when 'true' ->
						do  %% Line 2667
						    apply 'post_funs'/1
							(Post)
						    %% Line 2668
						    apply 'throw_error'/1
							(Error)
					  end
				      %% Line 2670
				      <_31>
					  when ( call 'erlang':'=:='
						  (TravMS,
						   'false')
					      -| ['compiler_generated'] ) ->
					  %% Line 2671
					  case <> of
					    <>
						when call 'erlang':'=:='
						      (( 'no_match_spec'
							 -| ['compiler_generated'] ),
						       MS) ->
						%% Line 2672
						TraverseFun
					    ( <> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch','no_match_spec'})
					      -| ['compiler_generated'] )
					  end
				      %% Line 2673
				      <_33>
					  when call 'erlang':'=:='
						(MS,
						 'no_match_spec') ->
					  %% Line 2674
					  ( fun () ->
						apply TraverseFun
						    ([{'$1',[],['$1']}])
					    -| [{'id',{0,0,'-table_handle/3-fun-1-'}}] )
				      %% Line 2675
				      <_34> when 'true' ->
					  %% Line 2676
					  ( fun () ->
						apply TraverseFun
						    (MS)
					    -| [{'id',{0,0,'-table_handle/3-fun-2-'}}] )
				    end
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  ( <_26,_25,_24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_26,_25,_24})
		  -| [{'function_name',{'table_handle',3}}] )
	    -| ['compiler_generated'] )
	end
'open_file'/3 =
    %% Line 2681
    fun (_0,_1,_2) ->
	%% Line 2682
	case call 'file':'open'
		 (_0, ['read'|['raw'|['binary'|_1]]]) of
	  %% Line 2683
	  <{'ok',Fd}> when 'true' ->
	      let <_10> =
		  fun () ->
		      %% Line 2685
		      case call 'file':'position'
			       (Fd, 'bof') of
			%% Line 2686
			<{'ok',0}> when 'true' ->
			    let <TF> =
				fun (_4,_3) ->
				    %% Line 2687
				    case <_4,_3> of
				      <[],_15> when 'true' ->
					  %% Line 2688
					  []
				      %% Line 2689
				      <Ts,C>
					  when call 'erlang':'is_list'
						(Ts) ->
					  %% Line 2690
					  call 'lists':'reverse'
					      (Ts, C)
				      ( <_6,_5> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_6,_5})
					      -| [{'function_name',{'-open_file/3-fun-0-',2}}] )
					-| ['compiler_generated'] )
				    end
			    in  %% Line 2692
				apply 'file_loop_read'/4
				    (#{}#, 65536, {Fd,_0}, TF)
			%% Line 2693
			<Error> when 'true' ->
			    %% Line 2694
			    apply 'file_error'/2
				(_0, Error)
		      end
	      in  %% Line 2684
		  {_10,%% Line 2696
		       Fd}
	  %% Line 2697
	  <Error> when 'true' ->
	      do  %% Line 2698
		  apply 'post_funs'/1
		      (_2)
		  %% Line 2699
		  apply 'throw_file_error'/2
		      (_0, Error)
	end
'file_loop'/4 =
    %% Line 2702
    fun (_0,_1,_2,_3) ->
	let <_9> =
	    try
		%% Line 2704
		apply 'file_loop2'/2
		    (_0, _2)
	    of <_4> ->
		_4
	    catch <_7,_6,_5> ->
		%% Line 2706
		case _1 of
		  <{_X_Fd,FileName}> when 'true' ->
		      %% Line 2707
		      apply 'error'/1
			  ({'bad_object',FileName})
		  ( <_8> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_8})
		    -| ['compiler_generated'] )
		end
	in  %% Line 2703
	    case _9 of
	      %% Line 2710
	      <{'terms',Bin = #{#<Size>(4,8,'integer',['unsigned'|['big']]),
				#<B>('all',8,'binary',['unsigned'|['big']])}#,[]}> when 'true' ->
		  let <_10> =
		      call %% Line 2711
			   'erlang':%% Line 2711
				    'byte_size'
			  (%% Line 2711
			   B)
		  in  let <_11> =
			  call %% Line 2711
			       'erlang':%% Line 2711
					'-'
			      (%% Line 2711
			       Size, _10)
		      in  let <_12> =
			      call %% Line 2711
				   'erlang':%% Line 2711
					    '+'
				  (_11, %% Line 2711
					4)
			  in  %% Line 2711
			      apply 'file_loop_read'/4
				  (Bin, _12, _1, _3)
	      %% Line 2712
	      <{'terms',Bin = #{#<Size>(4,8,'integer',['unsigned'|['big']]),
				#<_25>('all',8,'binary',['unsigned'|['big']])}#,Ts}> when 'true' ->
		  let <C> =
		      fun () ->
			  let <_13> =
			      call %% Line 2713
				   'erlang':%% Line 2713
					    '+'
				  (%% Line 2713
				   Size, %% Line 2713
					 4)
			  in  %% Line 2713
			      apply 'file_loop_read'/4
				  (Bin, _13, _1, _3)
		  in  %% Line 2714
		      apply _3
			  (Ts, C)
	      %% Line 2715
	      <{'terms',B,Ts}> when 'true' ->
		  let <C> =
		      fun () ->
			  %% Line 2716
			  apply 'file_loop_read'/4
			      (B, 65536, _1, _3)
		  in  %% Line 2717
		      apply _3
			  (Ts, C)
	      %% Line 2718
	      <Error> when 'true' ->
		  %% Line 2719
		  Error
	    end
'file_loop2'/2 =
    %% Line 2722
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{#<Size>(4,8,'integer',['unsigned'|['big']]),
	     #<B>(Size,8,'binary',['unsigned'|['big']]),
	     #<Bin>('all',8,'binary',['unsigned'|['big']])}#,Ts> when 'true' ->
	      let <_2> =
		  call %% Line 2723
		       'erlang':%% Line 2723
				'binary_to_term'
		      (%% Line 2723
		       B)
	      in  %% Line 2723
		  apply 'file_loop2'/2
		      (Bin, [_2|Ts])
	  %% Line 2724
	  <Bin,Ts> when 'true' ->
	      %% Line 2725
	      {'terms',Bin,Ts}
	end
'file_loop_read'/4 =
    %% Line 2733
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <B,MinBytesToRead,Fd_FName = {Fd,FileName},TF> when 'true' ->
	      let <BytesToRead> =
		  call %% Line 2734
		       'erlang':%% Line 2734
				'max'
		      (%% Line 2734
		       65536, %% Line 2734
			      MinBytesToRead)
	      in  %% Line 2735
		  case call 'file':'read'
			   (Fd, BytesToRead) of
		    %% Line 2736
		    <{'ok',Bin}>
			when try
			      let <_6> =
				  call 'erlang':'byte_size'
				      (B)
			      in  call 'erlang':'=:='
				      (_6, 0)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			%% Line 2737
			apply 'file_loop'/4
			    (Bin, Fd_FName, [], TF)
		    %% Line 2738
		    <{'ok',Bin}> when 'true' ->
			%% Line 2739
			case B of
			  %% Line 2740
			  <#{#<Size>(4,8,'integer',['unsigned'|['big']]),
			     #<Tl>('all',8,'binary',['unsigned'|['big']])}#>
			      when %% Line 2741
				try
				    let <_8> =
					call 'erlang':'byte_size'
					    (Bin)
				    in  let <_7> =
					    call 'erlang':'byte_size'
						(Tl)
					in  let <_9> =
						call 'erlang':'+'
						    (_8, _7)
					    in  call 'erlang':'>='
						    (_9, Size)
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false' ->
			      let <_10> =
				  call %% Line 2742
				       'erlang':%% Line 2742
						'byte_size'
				      (%% Line 2742
				       Tl)
			      in  let <_11> =
				      call %% Line 2742
					   'erlang':%% Line 2742
						    '-'
					  (%% Line 2742
					   Size, _10)
				  in  %% Line 2742
				      case call 'erlang':'split_binary'
					       (Bin, _11) of
					<{B1,B2}> when 'true' ->
					    let <Foo> =
						fun (_14,_13) ->
						    %% Line 2743
						    case <_14,_13> of
						      <[T|[]],Fun> when 'true' ->
							  [T|Fun]
						      ( <_16,_15> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_16,_15})
							      -| [{'function_name',{'-file_loop_read/4-fun-0-',2}}] )
							-| ['compiler_generated'] )
						    end
					    in  let <_18> =
						    call %% Line 2746
							 'erlang':%% Line 2746
								  'list_to_binary'
							(%% Line 2746
							 [B|[B1|[]]])
						in  %% Line 2745
						    case %% Line 2746
							 apply 'file_loop'/4
							     (_18, Fd_FName, [], Foo) of
						      %% Line 2748
						      <[T|Fun]> when 'true' ->
							  %% Line 2749
							  case call 'erlang':'is_function'
								   (Fun) of
							    <'true'> when 'true' ->
								%% Line 2750
								apply 'file_loop'/4
								    (B2, Fd_FName, [T|[]], TF)
							    ( <_19> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_19})
							      -| ['compiler_generated'] )
							  end
						      %% Line 2751
						      <Error> when 'true' ->
							  %% Line 2752
							  Error
						    end
					( <_12> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_12})
					  -| ['compiler_generated'] )
				      end
			  %% Line 2754
			  <_29> when 'true' ->
			      let <_21> =
				  call %% Line 2755
				       'erlang':%% Line 2755
						'list_to_binary'
				      (%% Line 2755
				       [B|[Bin|[]]])
			      in  %% Line 2755
				  apply 'file_loop'/4
				      (_21, Fd_FName, [], TF)
			end
		    %% Line 2757
		    <'eof'>
			when try
			      let <_23> =
				  call 'erlang':'byte_size'
				      (B)
			      in  call 'erlang':'=:='
				      (_23, 0)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			%% Line 2758
			apply TF
			    ([], 'foo')
		    %% Line 2759
		    <'eof'> when 'true' ->
			%% Line 2760
			apply 'error'/1
			    ({'bad_object',FileName})
		    %% Line 2761
		    <Error> when 'true' ->
			%% Line 2762
			apply 'file_error'/2
			    (FileName, Error)
		  end
	  ( <_28,_27,_26,_25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_28,_27,_26,_25})
		  -| [{'function_name',{'file_loop_read',4}}] )
	    -| ['compiler_generated'] )
	end
'sort_cursor_input'/2 =
    %% Line 2765
    fun (_0,_1) ->
	%% Line 2766
	( fun (_2) ->
	      case _2 of
		<'close'> when 'true' ->
		    %% Line 2767
		    'ok'
		%% Line 2768
		<'read'> when 'true' ->
		    %% Line 2769
		    apply 'sort_cursor_input_read'/2
			(_0, _1)
		( <_3> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_3})
			-| [{'function_name',{'-sort_cursor_input/2-fun-0-',1}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-sort_cursor_input/2-fun-0-'}}] )
'sort_cursor_list_output'/3 =
    %% Line 2772
    fun (_0,_1,_2) ->
	%% Line 2773
	( fun (_11) ->
	      case _11 of
		<'close'> when 'true' ->
		    %% Line 2774
		    {'terms',[]}
		%% Line 2775
		<{'value',NoObjects}> when 'true' ->
		    %% Line 2776
		    ( fun (_9) ->
			  case _9 of
			    <BTerms>
				when let <_3> =
				      call 'erlang':'=:='
					  (_2, 'true')
				  in  let <_5> =
					  try
					      let <_4> =
						  call 'erlang':'length'
						      (_9)
					      in  call 'erlang':'=:='
						      (_4, NoObjects)
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      'false'
				      in  call 'erlang':'or'
					      (_3, _5) ->
				%% Line 2777
				( fun (_7) ->
				      case _7 of
					<'close'> when 'true' ->
					    %% Line 2778
					    {'terms',BTerms}
					%% Line 2779
					<BTerms1> when 'true' ->
					    let <_6> =
						call %% Line 2780
						     'erlang':%% Line 2780
							      '++'
						    (%% Line 2780
						     BTerms, %% Line 2780
							     BTerms1)
					    in  %% Line 2780
						apply 'sort_cursor_file'/3
						    (_6, _0, _1)
				      end
				  -| [{'id',{0,0,'-sort_cursor_list_output/3-fun-0-'}}] )
			    %% Line 2782
			    <BTerms> when 'true' ->
				%% Line 2783
				apply 'sort_cursor_file'/3
				    (BTerms, _0, _1)
			  end
		      -| [{'id',{0,0,'-sort_cursor_list_output/3-fun-1-'}}] )
		( <_12> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_12})
			-| [{'function_name',{'-sort_cursor_list_output/3-fun-2-',1}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-sort_cursor_list_output/3-fun-2-'}}] )
'sort_cursor_file'/3 =
    %% Line 2787
    fun (_0,_1,_2) ->
	let <FName> =
	    apply %% Line 2788
		  'tmp_filename'/1
		(_1)
	in  %% Line 2789
	    case call 'file':'open'
		     (FName, ['write'|['raw'|['binary'|_2]]]) of
	      %% Line 2790
	      <{'ok',Fd}> when 'true' ->
		  let <WFun> =
		      apply %% Line 2791
			    'write_terms'/2
			  (%% Line 2791
			   FName, %% Line 2791
				  Fd)
		  in  %% Line 2792
		      apply WFun
			  (_0)
	      %% Line 2793
	      <Error> when 'true' ->
		  %% Line 2794
		  apply 'throw_file_error'/2
		      (FName, Error)
	    end
'sort_options_global_tmp'/2 =
    %% Line 2797
    fun (_0,_1) ->
	case <_0,_1> of
	  <S,[]> when 'true' ->
	      %% Line 2798
	      S
	  %% Line 2799
	  <S,TmpDir> when 'true' ->
	      let <_2> =
		  call %% Line 2800
		       'lists':%% Line 2800
			       'keydelete'
		      (%% Line 2800
		       'tmpdir', %% Line 2800
				 1, %% Line 2800
				    S)
	      in  %% Line 2800
		  [{'tmpdir',TmpDir}|_2]
	end
'tmp_filename'/1 =
    %% Line 2802
    fun (_0) ->
	let <Node> =
	    call %% Line 2804
		 'erlang':%% Line 2804
			  'node'
		()
	in  let <Pid> =
		call %% Line 2805
		     'os':%% Line 2805
			  'getpid'
		    ()
	    in  let <Unique> =
		    call %% Line 2806
			 'erlang':%% Line 2806
				  'unique_integer'
			()
		in  let <F> =
			call %% Line 2807
			     'lists':%% Line 2807
				     'concat'
			    (%% Line 2807
			     ['qlc'|[[95]|[Node|[[95]|[Pid|[[95]|[Unique|[]]]]]]]])
		    in  let <_8> =
			    case _0 of
			      %% Line 2809
			      <[]> when 'true' ->
				  %% Line 2810
				  case call 'file':'get_cwd'
					   () of
				    <{'ok',CurDir}> when 'true' ->
					%% Line 2811
					CurDir
				    ( <_6> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_6})
				      -| ['compiler_generated'] )
				  end
			      %% Line 2812
			      <TDir> when 'true' ->
				  %% Line 2813
				  TDir
			    end
			in  let <_10> =
				call %% Line 2815
				     'filename':%% Line 2815
						'absname'
				    (_8)
			    in  %% Line 2815
				call 'filename':'join'
				    (_10, F)
'write_terms'/2 =
    %% Line 2817
    fun (_0,_1) ->
	%% Line 2818
	( fun (_6) ->
	      case _6 of
		<'close'> when 'true' ->
		    do  %% Line 2819
			( call ( 'file'
				 -| ['result_not_wanted'] ):( 'close'
							      -| ['result_not_wanted'] )
			      (_1)
			  -| ['result_not_wanted'] )
			%% Line 2820
			{'file',_0}
		%% Line 2821
		<BTerms> when 'true' ->
		    let <_3> =
			apply %% Line 2822
			      'size_bin'/2
			    (%% Line 2822
			     BTerms, %% Line 2822
				     [])
		    in  %% Line 2822
			case call 'file':'write'
				 (_1, _3) of
			  %% Line 2823
			  <'ok'> when 'true' ->
			      %% Line 2824
			      apply 'write_terms'/2
				  (_0, _1)
			  %% Line 2825
			  <Error> when 'true' ->
			      do  %% Line 2826
				  ( call ( 'file'
					   -| ['result_not_wanted'] ):( 'close'
									-| ['result_not_wanted'] )
					(_1)
				    -| ['result_not_wanted'] )
				  %% Line 2827
				  apply 'throw_file_error'/2
				      (_0, Error)
			end
	      end
	  -| [{'id',{0,0,'-write_terms/2-fun-0-'}}] )
'size_bin'/2 =
    %% Line 2831
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],L> when 'true' ->
	      %% Line 2832
	      L
	  %% Line 2833
	  <[BinTerm|BinTerms],L> when 'true' ->
	      let <_2> =
		  call %% Line 2834
		       'erlang':%% Line 2834
				'byte_size'
		      (%% Line 2834
		       BinTerm)
	      in  let <_3> =
		      #{#<_2>(%% Line 2834
			      4,8,'integer',['unsigned'|['big']])}#
		  in  %% Line 2834
		      apply 'size_bin'/2
			  (BinTerms, [L|[_3|BinTerm]])
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'size_bin',2}}] )
	    -| ['compiler_generated'] )
	end
'sort_cursor_input_read'/2 =
    %% Line 2836
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],NoObjects> when 'true' ->
	      %% Line 2837
	      {'end_of_input',NoObjects}
	  %% Line 2838
	  <[Object|Cont],NoObjects> when 'true' ->
	      let <_4> =
		  call %% Line 2839
		       'erlang':%% Line 2839
				'term_to_binary'
		      (%% Line 2839
		       Object)
	      in  let <_2> =
		      call %% Line 2839
			   'erlang':%% Line 2839
				    '+'
			  (%% Line 2839
			   NoObjects, %% Line 2839
				      1)
		  in  let <_3> =
			  apply %% Line 2839
				'sort_cursor_input'/2
			      (%% Line 2839
			       Cont, _2)
		      in  %% Line 2839
			  {[_4|[]],_3}
	  %% Line 2840
	  <F,NoObjects> when 'true' ->
	      %% Line 2841
	      case apply F
		       () of
		%% Line 2842
		<Objects>
		    when call 'erlang':'is_list'
			  (Objects) ->
		    %% Line 2843
		    apply 'sort_cursor_input_read'/2
			(Objects, NoObjects)
		%% Line 2844
		<Term> when 'true' ->
		    %% Line 2845
		    apply 'throw_error'/1
			(Term)
	      end
	end
'unique_cache'/4 =
    %% Line 2848
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <L,Post,LocalPost,Optz>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 2849
	      ( case Optz of
		  ( <( {'optz',_rec90,_56,_57,_58,_59}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec90 of
			  %% Line 2850
			  <'true'> when 'true' ->
			      let <_6> =
				  apply %% Line 2851
					'unique_sort_list'/1
				      (%% Line 2851
				       L)
			      in  %% Line 2851
				  {_6,Post,LocalPost}
			  %% Line 2852
			  <'false'> when 'true' ->
			      %% Line 2854
			      {L,Post,LocalPost}
			  ( <_7> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_7})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_60> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','optz'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 2856
	  <H,Post,LocalPost,{'optz','false','false',_61,_62,_63}> when 'true' ->
	      %% Line 2857
	      {H,Post,LocalPost}
	  %% Line 2858
	  <H,Post,LocalPost,{'optz','true','false',_64,_65,_66}> when 'true' ->
	      let <E> =
		  call %% Line 2859
		       'ets':%% Line 2859
			     'new'
		      (%% Line 2859
		       'qlc', %% Line 2859
			      ['set'|['private']])
	      in  let <_10> =
		      fun () ->
			  %% Line 2860
			  apply 'no_dups'/2
			      (H, E)
		  in  let <_9> =
			  apply %% Line 2860
				'del_table'/1
			      (%% Line 2860
			       E)
		      in  %% Line 2860
			  {_10,[_9|Post],LocalPost}
	  %% Line 2861
	  <H,Post,LocalPost,{'optz','false','true',_67,_68,_69}> when 'true' ->
	      let <E> =
		  call %% Line 2862
		       'ets':%% Line 2862
			     'new'
		      (%% Line 2862
		       'qlc', %% Line 2862
			      ['set'|['private']])
	      in  %% Line 2863
		  case apply 'unique_cache_post'/1
			   (E) of
		    <{L,P}> when 'true' ->
			let <_13> =
			    fun () ->
				%% Line 2864
				apply 'cache'/3
				    (H, E, LocalPost)
			in  %% Line 2864
			    {_13,[P|Post],[L|[]]}
		    ( <_12> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_12})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2865
	  <H,Post,LocalPost,{'optz','true','true',_70,_71,_72}> when 'true' ->
	      let <UT> =
		  call %% Line 2866
		       'ets':%% Line 2866
			     'new'
		      (%% Line 2866
		       'qlc', %% Line 2866
			      ['bag'|['private']])
	      in  let <MT> =
		      call %% Line 2867
			   'ets':%% Line 2867
				 'new'
			  (%% Line 2867
			   'qlc', %% Line 2867
				  ['set'|['private']])
		  in  %% Line 2868
		      case apply 'unique_cache_post'/1
			       (UT) of
			<{L1,P1}> when 'true' ->
			    %% Line 2869
			    case apply 'unique_cache_post'/1
				     (MT) of
			      <{L2,P2}> when 'true' ->
				  let <_18> =
				      fun () ->
					  %% Line 2870
					  apply 'ucache'/4
					      (H, UT, MT, LocalPost)
				  in  %% Line 2870
				      {_18,[P1|[P2|Post]],[L1|[L2|[]]]}
			      ( <_17> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_17})
				-| ['compiler_generated'] )
			    end
			( <_16> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_16})
			  -| ['compiler_generated'] )
		      end
	  %% Line 2871
	  <H,Post,LocalPost,Optz = {'optz','false','list',_73,_74,_75}> when 'true' ->
	      let <Ref> =
		  call %% Line 2872
		       'erlang':%% Line 2872
				'make_ref'
		      ()
	      in  let <F> =
		      apply %% Line 2873
			    'del_lcache'/1
			  (%% Line 2873
			   Ref)
		  in  %% Line 2875
		      ( case Optz of
			  ( <( {'optz',_76,_77,_78,_79,_rec91}
			       -| ['compiler_generated'] )> when 'true' ->
				case _rec91 of
				  <{'qlc_opt',_81,_82,_83,_84,TmpDir,_85,MaxList,TmpUsage}> when 'true' ->
				      let <_24> =
					  fun () ->
					      %% Line 2876
					      apply 'lcache'/6
						  (H, Ref, LocalPost, TmpDir, MaxList, TmpUsage)
				      in  %% Line 2876
					  {_24,%% Line 2877
					       [F|Post],%% Line 2877
							[F|[]]}
				  ( <_23> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_23})
				    -| ['compiler_generated'] )
				end
			    -| ['compiler_generated'] )
			  ( <_80> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','optz'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 2878
	  <H,Post0,LocalPost0,Optz = {'optz','true','list',_86,_87,_88}> when 'true' ->
	      %% Line 2880
	      ( case Optz of
		  ( <( {'optz',_89,_90,_91,_92,_rec92}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec92 of
			  <{'qlc_opt',_94,_95,_96,_97,TmpDir,_98,MaxList,TmpUsage}> when 'true' ->
			      let <_30> =
				  case <> of
				    %% Line 2882
				    <>
					when call 'erlang':'>='
					      (MaxList,
					       2147483648) ->
					2147483647
				    %% Line 2883
				    <>
					when call 'erlang':'=:='
					      (MaxList,
					       0) ->
					1
				    %% Line 2884
				    <> when 'true' ->
					MaxList
				  end
			      in  let <SortOptions> =
				      [%% Line 2886
				       {'size',_30}|%% Line 2886
						    [{'tmpdir',TmpDir}|[]]]
				  in  let <USortOptions> =
					  [%% Line 2887
					   {'unique','true'}|%% Line 2887
							     SortOptions]
				      in  let <TmpUsageM> = {%% Line 2888
					       TmpUsage,%% Line 2888
							'caching'}
					  in  let <LF1> =
						  fun (_35) ->
						      %% Line 2889
						      call 'lists':'ukeysort'
							  (1, _35)
					      in  let <FF1> =
						      fun (_38) ->
							  %% Line 2891
							  apply 'file_sort_handle'/7
							      (_38, {'keysort',1}, USortOptions, %% Line 2892
												 TmpDir, %% Line 2892
													 [], %% Line 2892
													     Post0, %% Line 2892
														    LocalPost0)
						  in  let <_41> =
							  apply %% Line 2894
								'tag_objects'/2
							      (%% Line 2894
							       H, %% Line 2894
								  1)
						      in  %% Line 2894
							  case apply 'sort_handle'/7
								   (_41, LF1, FF1, %% Line 2895
										   USortOptions, %% Line 2895
												 Post0, %% Line 2895
													LocalPost0, %% Line 2896
														    TmpUsageM) of
							    <{UH,Post1,LocalPost1}> when 'true' ->
								let <LF2> =
								    fun (_43) ->
									%% Line 2897
									call 'lists':'keysort'
									    (2, _43)
								in  let <FF2> =
									fun (_46) ->
									    %% Line 2899
									    apply 'file_sort_handle'/7
										(_46, {'keysort',2}, SortOptions, TmpDir, %% Line 2900
															  [], %% Line 2900
															      Post1, %% Line 2900
																     LocalPost1)
								    in  %% Line 2902
									case %% Line 2903
									     apply 'sort_handle'/7
										 (UH, LF2, FF2, SortOptions, Post1, LocalPost1, TmpUsageM) of
									  <{SH,Post,LocalPost}> when 'true' ->
									      %% Line 2904
									      case <> of
										%% Line 2905
										<>
										    when call 'erlang':'is_list'
											  (SH) ->
										    let <_50> =
											apply %% Line 2907
											      'untag_objects2'/1
											    (%% Line 2907
											     SH)
										    in  %% Line 2907
											{_50,Post,LocalPost}
										%% Line 2908
										<> when 'true' ->
										    let <_51> =
											fun () ->
											    %% Line 2910
											    apply 'untag_objects'/1
												(SH)
										    in  %% Line 2910
											{_51,Post,LocalPost}
									      end
									  ( <_49> when 'true' ->
										primop 'match_fail'
										    ({'badmatch',_49})
									    -| ['compiler_generated'] )
									end
							    ( <_42> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_42})
							      -| ['compiler_generated'] )
							  end
			  ( <_27> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_27})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_93> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','optz'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_55,_54,_53,_52> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_55,_54,_53,_52})
		  -| [{'function_name',{'unique_cache',4}}] )
	    -| ['compiler_generated'] )
	end
'unique_cache_post'/1 =
    %% Line 2913
    fun (_0) ->
	let <_2> =
	    apply %% Line 2914
		  'empty_table'/1
		(_0)
	in  let <_1> =
		apply %% Line 2914
		      'del_table'/1
		    (_0)
	    in  %% Line 2914
		{_2,_1}
'unique_sort_list'/1 =
    %% Line 2916
    fun (_0) ->
	let <E> =
	    call %% Line 2917
		 'ets':%% Line 2917
		       'new'
		(%% Line 2917
		 'qlc', %% Line 2917
			['set'|['private']])
	in  %% Line 2918
	    apply 'unique_list'/2
		(_0, E)
'unique_list'/2 =
    %% Line 2920
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],E> when 'true' ->
	      %% Line 2921
	      case call 'ets':'delete'
		       (E) of
		<'true'> when 'true' ->
		    %% Line 2922
		    []
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2923
	  <[Object|Objects],E> when 'true' ->
	      %% Line 2924
	      case call 'ets':'member'
		       (E, Object) of
		%% Line 2925
		<'false'> when 'true' ->
		    %% Line 2926
		    case call 'ets':'insert'
			     (E, {Object}) of
		      <'true'> when 'true' ->
			  let <_4> =
			      apply %% Line 2927
				    'unique_list'/2
				  (%% Line 2927
				   Objects, %% Line 2927
					    E)
			  in  %% Line 2927
			      [Object|_4]
		      ( <_3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_3})
			-| ['compiler_generated'] )
		    end
		%% Line 2928
		<'true'> when 'true' ->
		    %% Line 2929
		    apply 'unique_list'/2
			(Objects, E)
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'unique_list',2}}] )
	    -| ['compiler_generated'] )
	end
'sort_list'/6 =
    %% Line 2932
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <L,CFun,'true','sort',_X_SortOptions,_X_Post>
	      when call 'erlang':'is_function'
		    (CFun) ->
	      %% Line 2933
	      call 'lists':'usort'
		  (CFun, L)
	  %% Line 2934
	  <L,CFun,'false','sort',_X_SortOptions,_X_Post>
	      when call 'erlang':'is_function'
		    (CFun) ->
	      %% Line 2935
	      call 'lists':'sort'
		  (CFun, L)
	  %% Line 2936
	  <L,'ascending','true','sort',_X_SortOptions,_X_Post> when 'true' ->
	      %% Line 2937
	      call 'lists':'usort'
		  (L)
	  %% Line 2938
	  <L,'descending','true','sort',_X_SortOptions,_X_Post> when 'true' ->
	      let <_6> =
		  call %% Line 2939
		       'lists':%% Line 2939
			       'usort'
		      (%% Line 2939
		       L)
	      in  %% Line 2939
		  call 'lists':'reverse'
		      (_6)
	  %% Line 2940
	  <L,'ascending','false','sort',_X_SortOptions,_X_Post> when 'true' ->
	      %% Line 2941
	      call 'lists':'sort'
		  (L)
	  %% Line 2942
	  <L,'descending','false','sort',_X_SortOptions,_X_Post> when 'true' ->
	      let <_7> =
		  call %% Line 2943
		       'lists':%% Line 2943
			       'sort'
		      (%% Line 2943
		       L)
	      in  %% Line 2943
		  call 'lists':'reverse'
		      (_7)
	  %% Line 2944
	  <L,Order,Unique,{'keysort',Kp},_X_SortOptions,_X_Post>
	      when let <_8> =
		    call %% Line 2945
			 'erlang':%% Line 2945
				  'is_integer'
			(%% Line 2945
			 Kp)
		in  let <_9> =
			call %% Line 2945
			     'erlang':%% Line 2945
				      'is_atom'
			    (%% Line 2945
			     Order)
		    in  %% Line 2945
			call 'erlang':'and'
			    (_8, _9) ->
	      %% Line 2946
	      case <Order,Unique> of
		%% Line 2947
		<'ascending','true'> when 'true' ->
		    %% Line 2948
		    call 'lists':'ukeysort'
			(Kp, L)
		%% Line 2949
		<'ascending','false'> when 'true' ->
		    %% Line 2950
		    call 'lists':'keysort'
			(Kp, L)
		%% Line 2951
		<'descending','true'> when 'true' ->
		    let <_10> =
			call %% Line 2952
			     'lists':%% Line 2952
				     'ukeysort'
			    (%% Line 2952
			     Kp, %% Line 2952
				 L)
		    in  %% Line 2952
			call 'lists':'reverse'
			    (_10)
		%% Line 2953
		<'descending','false'> when 'true' ->
		    let <_11> =
			call %% Line 2954
			     'lists':%% Line 2954
				     'keysort'
			    (%% Line 2954
			     Kp, %% Line 2954
				 L)
		    in  %% Line 2954
			call 'lists':'reverse'
			    (_11)
		( <( _29
		     -| ['compiler_generated'] ),( _30
						   -| ['compiler_generated'] )> when 'true' ->
		      let <_12> = {( _29
			     -| ['compiler_generated'] ),( _30
							   -| ['compiler_generated'] )}
		      in  primop 'match_fail'
			      ({'case_clause',_12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2956
	  <L,_X_Order,_X_Unique,Sort,SortOptions,Post> when 'true' ->
	      let <In> =
		  fun (_16) ->
		      let <_15> =
			  fun (_13) ->
			      %% Line 2957
			      'end_of_input'
		      in  %% Line 2957
			  {L,_15}
	      in  let <Out> =
		      apply %% Line 2958
			    'sort_list_output'/1
			  (%% Line 2958
			   [])
		  in  let <TSortOptions> =
			  [%% Line 2959
			   {'format','term'}|%% Line 2959
					     SortOptions]
		      in  %% Line 2960
			  apply 'do_sort'/5
			      (In, Out, Sort, TSortOptions, Post)
	end
'sort_list_output'/1 =
    %% Line 2962
    fun (_0) ->
	%% Line 2963
	( fun (_2) ->
	      case _2 of
		<'close'> when 'true' ->
		    let <_1> =
			call %% Line 2964
			     'lists':%% Line 2964
				     'reverse'
			    (_0)
		    in  %% Line 2964
			call 'lists':'append'
			    (_1)
		%% Line 2965
		<Terms>
		    when call 'erlang':'is_list'
			  (_2) ->
		    %% Line 2966
		    apply 'sort_list_output'/1
			([Terms|_0])
		( <_3> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_3})
			-| [{'function_name',{'-sort_list_output/1-fun-0-',1}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-sort_list_output/1-fun-0-'}}] )
'sort_handle'/7 =
    %% Line 2971
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	let <_8> =
	    case %% Line 2972
		 call 'lists':'keyfind'
		     ('size', 1, _3) of
	      %% Line 2973
	      <{'size',Size0}> when 'true' ->
		  Size0
	      %% Line 2974
	      <'false'> when 'true' ->
		  apply 'default_option'/1
		      ('size')
	      ( <_7> when 'true' ->
		    %% Line 2972
		    primop 'match_fail'
			({'case_clause',_7})
		-| ['compiler_generated'] )
	    end
	in  %% Line 2976
	    apply 'sort_cache'/4
		(_0, [], _8, {_1,_2,_4,_5,_6})
'sort_cache'/4 =
    %% Line 2978
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[],CL,_X_Sz,{LF,_X_FF,Post,LocalPost,_X_TmpUsageM}> when 'true' ->
	      let <_4> =
		  call %% Line 2979
		       'lists':%% Line 2979
			       'reverse'
		      (%% Line 2979
		       CL)
	      in  let <_5> =
		      apply %% Line 2979
			    LF
			  (_4)
		  in  %% Line 2979
		      {_5,Post,LocalPost}
	  %% Line 2980
	  <Objs,CL,Sz,C>
	      when call 'erlang':'<'
		    (Sz,
		     0) ->
	      %% Line 2981
	      apply 'sort_cache2'/4
		  (Objs, CL, 'false', C)
	  %% Line 2982
	  <[Object|Cont],CL,Sz0,C> when 'true' ->
	      let <Sz> =
		  apply %% Line 2983
			'decr_list_size'/2
		      (%% Line 2983
		       Sz0, %% Line 2983
			    Object)
	      in  %% Line 2984
		  apply 'sort_cache'/4
		      (Cont, [Object|CL], Sz, C)
	  %% Line 2985
	  <F,CL,Sz,C> when 'true' ->
	      %% Line 2986
	      case apply F
		       () of
		%% Line 2987
		<Objects>
		    when call 'erlang':'is_list'
			  (Objects) ->
		    %% Line 2988
		    apply 'sort_cache'/4
			(Objects, CL, Sz, C)
		%% Line 2989
		<Term> when 'true' ->
		    %% Line 2990
		    case C of
		      <{_X_LF,_X_FF,Post,_X_LocalPost,_X_TmpUsageM}> when 'true' ->
			  do  %% Line 2991
			      apply 'post_funs'/1
				  (Post)
			      %% Line 2992
			      apply 'throw_error'/1
				  (Term)
		      ( <_7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_7})
			-| ['compiler_generated'] )
		    end
	      end
	end
'sort_cache2'/4 =
    %% Line 2995
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[],CL,_X_X,{LF,_X_FF,Post,LocalPost,_X_TmpUsageM}> when 'true' ->
	      let <_4> =
		  call %% Line 2996
		       'lists':%% Line 2996
			       'reverse'
		      (%% Line 2996
		       CL)
	      in  let <_5> =
		      apply %% Line 2996
			    LF
			  (_4)
		  in  %% Line 2996
		      {_5,Post,LocalPost}
	  %% Line 2997
	  <[Object|Cont],CL,_13,C> when 'true' ->
	      %% Line 2998
	      apply 'sort_cache2'/4
		  (Cont, [Object|CL], 'true', C)
	  %% Line 2999
	  <F,CL,'false',C> when 'true' ->
	      %% Line 3003
	      case apply F
		       () of
		%% Line 3004
		<Objects>
		    when call 'erlang':'is_list'
			  (Objects) ->
		    %% Line 3005
		    apply 'sort_cache2'/4
			(Objects, CL, 'true', C)
		%% Line 3006
		<Term> when 'true' ->
		    %% Line 3007
		    case C of
		      <{_X_LF,_X_FF,Post,_X_LocalPost,_X_TmpUsageM}> when 'true' ->
			  do  %% Line 3008
			      apply 'post_funs'/1
				  (Post)
			      %% Line 3009
			      apply 'throw_error'/1
				  (Term)
		      ( <_6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_6})
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 3011
	  <_X_Cont,_X_CL,'true',{_X_LF,_X_FF,Post,_X_LocalPost,{'not_allowed',M}}> when 'true' ->
	      do  %% Line 3012
		  apply 'post_funs'/1
		      (Post)
		  %% Line 3013
		  apply 'throw_reason'/1
		      ({'tmpdir_usage',M})
	  %% Line 3014
	  <Cont,CL,'true',{_X_LF,FF,_X_Post,_X_LocalPost,{TmpUsage,M}}> when 'true' ->
	      do  %% Line 3015
		  apply 'maybe_error_logger'/2
		      (TmpUsage, M)
		  let <_8> =
		      call %% Line 3016
			   'lists':%% Line 3016
				   'reverse'
			  (%% Line 3016
			   CL, %% Line 3016
			       Cont)
		  in  %% Line 3016
		      apply FF
			  (_8)
	  ( <_12,_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11,_10,_9})
		  -| [{'function_name',{'sort_cache2',4}}] )
	    -| ['compiler_generated'] )
	end
'file_sort_handle'/7 =
    %% Line 3018
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	let <In> =
	    apply %% Line 3019
		  'sort_cursor_input'/2
		(_0, %% Line 3019
		     0)
	in  let <_10> =
		case %% Line 3020
		     call 'lists':'member'
			 ('unique', _2) of
		  %% Line 3021
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			'true'
		    -| ['compiler_generated'] )
		  %% Line 3021
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 3022
			call 'lists':'keymember'
			    ('unique', 1, _2)
		    -| ['compiler_generated'] )
		  %% Line 3021
		  ( <_8> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_8}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
	    in  let <Out> =
		    apply %% Line 3023
			  'sort_cursor_list_output'/3
			(_3, _4, _10)
		in  %% Line 3025
		    case apply 'do_sort'/5
			     (In, Out, _1, _2, _5) of
		      %% Line 3026
		      <{'file',FileName}> when 'true' ->
			  %% Line 3027
			  case apply 'open_file'/3
				   (FileName, _4, _5) of
			    <{F,Fd}> when 'true' ->
				let <P> =
				    fun () ->
					do  %% Line 3028
					    ( call ( 'file'
						     -| ['result_not_wanted'] ):( 'close'
										  -| ['result_not_wanted'] )
						  (Fd)
					      -| ['result_not_wanted'] )
					    %% Line 3029
					    ( call ( 'file'
						     -| ['result_not_wanted'] ):( 'delete'
										  -| ['result_not_wanted'] )
						  (FileName)
					      -| ['result_not_wanted'] )
				in  %% Line 3031
				    {F,[P|_5],_6}
			    ( <_14> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_14})
			      -| ['compiler_generated'] )
			  end
		      %% Line 3032
		      <{'terms',BTerms}> when 'true' ->
			  %% Line 3033
			  try
			      let <_23> =
				  letrec
				      'lc$^1'/1 =
					  %% Line 3034
					  fun (_20) ->
					      case _20 of
						<[B|_19]> when 'true' ->
						    let <_21> =
							call 'erlang':'binary_to_term'
							    (B)
						    in  let <_22> =
							    apply 'lc$^1'/1
								(_19)
							in  ( [_21|_22]
							      -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_39> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_39})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  %% Line 3034
				      apply 'lc$^1'/1
					  (BTerms)
			      in  %% Line 3034
				  {_23,_5,_6}
			  of <_24> ->
			      _24
			  catch <_27,_26,_25> ->
			      do  %% Line 3036
				  apply 'post_funs'/1
				      (_5)
				  primop 'raw_raise'
				      (_27, _26, _25)
		      ( <_28> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_28})
			-| ['compiler_generated'] )
		    end
'do_sort'/5 =
    %% Line 3041
    fun (_0,_1,_2,_3,_4) ->
	%% Line 3042
	try
	    %% Line 3043
	    case apply 'do_sort'/4
		     (_0, _1, _2, _3) of
	      %% Line 3044
	      <{'error',Reason}> when 'true' ->
		  apply 'throw_reason'/1
		      (Reason)
	      %% Line 3045
	      <Reply> when 'true' ->
		  Reply
	    end
	of <_6> ->
	    _6
	catch <_9,_8,_7> ->
	    do  %% Line 3048
		apply 'post_funs'/1
		    (_4)
		primop 'raw_raise'
		    (_9, _8, _7)
'do_sort'/4 =
    %% Line 3052
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <In,Out,'sort',SortOptions> when 'true' ->
	      %% Line 3053
	      call 'file_sorter':'sort'
		  (In, Out, SortOptions)
	  %% Line 3054
	  <In,Out,{'keysort',KeyPos},SortOptions> when 'true' ->
	      %% Line 3055
	      call 'file_sorter':'keysort'
		  (KeyPos, In, Out, SortOptions)
	  ( <_7,_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5,_4})
		  -| [{'function_name',{'do_sort',4}}] )
	    -| ['compiler_generated'] )
	end
'del_table'/1 =
    %% Line 3057
    fun (_0) ->
	%% Line 3058
	( fun () ->
	      let <_3> =
		  call 'ets':'delete'
		      (_0)
	      in  case _3 of
		    <'true'> when 'true' ->
			( _3
			  -| ['compiler_generated'] )
		    ( <_1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_1})
		      -| ['compiler_generated'] )
		  end
	  -| [{'id',{0,0,'-del_table/1-fun-0-'}}] )
'empty_table'/1 =
    %% Line 3060
    fun (_0) ->
	%% Line 3061
	( fun () ->
	      let <_3> =
		  call 'ets':'delete_all_objects'
		      (_0)
	      in  case _3 of
		    <'true'> when 'true' ->
			( _3
			  -| ['compiler_generated'] )
		    ( <_1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_1})
		      -| ['compiler_generated'] )
		  end
	  -| [{'id',{0,0,'-empty_table/1-fun-0-'}}] )
'append_loop'/2 =
    %% Line 3063
    fun (_0,_1) ->
	case <_0,_1> of
	  <[L = [_4|_5]|[]],_X_N> when 'true' ->
	      %% Line 3064
	      L
	  %% Line 3065
	  <[F|[]],_X_N> when 'true' ->
	      %% Line 3066
	      apply F
		  ()
	  %% Line 3067
	  <[L|Hs],N> when 'true' ->
	      %% Line 3068
	      apply 'append_loop'/3
		  (L, N, Hs)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'append_loop',2}}] )
	    -| ['compiler_generated'] )
	end
'append_loop'/3 =
    %% Line 3070
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[],N,Hs> when 'true' ->
	      %% Line 3071
	      apply 'append_loop'/2
		  (Hs, N)
	  %% Line 3072
	  <[Object|Cont],N,Hs> when 'true' ->
	      let <_3> =
		  call %% Line 3073
		       'erlang':%% Line 3073
				'+'
		      (%% Line 3073
		       N, %% Line 3073
			  1)
	      in  let <_4> =
		      apply %% Line 3073
			    'append_loop'/3
			  (%% Line 3073
			   Cont, _3, %% Line 3073
				     Hs)
		  in  %% Line 3073
		      [Object|_4]
	  %% Line 3074
	  <F,0,Hs> when 'true' ->
	      %% Line 3075
	      case apply F
		       () of
		%% Line 3076
		<[]> when 'true' ->
		    %% Line 3077
		    apply 'append_loop'/2
			(Hs, 0)
		%% Line 3078
		<[Object|Cont]> when 'true' ->
		    let <_5> =
			apply %% Line 3079
			      'append_loop'/3
			    (%% Line 3079
			     Cont, %% Line 3079
				   1, %% Line 3079
				      Hs)
		    in  %% Line 3079
			[Object|_5]
		%% Line 3080
		<Term> when 'true' ->
		    %% Line 3081
		    Term
	      end
	  %% Line 3083
	  <F,_X_N,Hs> when 'true' ->
	      %% Line 3084
	      ( fun () ->
		    apply 'append_loop'/3
			(F, 0, Hs)
		-| [{'id',{0,0,'-append_loop/3-fun-0-'}}] )
	end
'no_dups'/2 =
    %% Line 3086
    fun (_0,_1) ->
	case <_0,_1> of
	  <Cont = [],UTab> when 'true' ->
	      %% Line 3087
	      case call 'ets':'delete_all_objects'
		       (UTab) of
		<'true'> when 'true' ->
		    %% Line 3088
		    Cont
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3089
	  <[Object|Cont],UTab> when 'true' ->
	      %% Line 3090
	      case call 'ets':'member'
		       (UTab, Object) of
		%% Line 3091
		<'false'> when 'true' ->
		    %% Line 3092
		    case call 'ets':'insert'
			     (UTab, {Object}) of
		      <'true'> when 'true' ->
			  let <_4> =
			      fun () ->
				  %% Line 3095
				  apply 'no_dups'/2
				      (Cont, UTab)
			  in  %% Line 3095
			      [Object|_4]
		      ( <_3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_3})
			-| ['compiler_generated'] )
		    end
		%% Line 3096
		<'true'> when 'true' ->
		    %% Line 3097
		    apply 'no_dups'/2
			(Cont, UTab)
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3099
	  <F,UTab> when 'true' ->
	      %% Line 3100
	      case apply F
		       () of
		%% Line 3101
		<Objects>
		    when call 'erlang':'is_list'
			  (Objects) ->
		    %% Line 3102
		    apply 'no_dups'/2
			(Objects, UTab)
		%% Line 3103
		<Term> when 'true' ->
		    %% Line 3104
		    Term
	      end
	end
'cache'/3 =
    %% Line 3111
    fun (_0,_1,_2) ->
	%% Line 3112
	case call 'ets':'member'
		 (_1, 0) of
	  %% Line 3113
	  <'false'> when 'true' ->
	      %% Line 3114
	      case call 'ets':'insert'
		       (_1, {0}) of
		<'true'> when 'true' ->
		    %% Line 3115
		    apply 'cache'/4
			(_0, _1, 1, _2)
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3116
	  <'true'> when 'true' ->
	      %% Line 3117
	      apply 'cache_recall'/2
		  (_1, 1)
	  ( <_4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_4})
	    -| ['compiler_generated'] )
	end
'cache'/4 =
    %% Line 3120
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Cont = [],_X_MTab,_X_SeqNo,LocalPost> when 'true' ->
	      do  %% Line 3121
		  apply 'local_post'/1
		      (LocalPost)
		  %% Line 3122
		  Cont
	  %% Line 3123
	  <[Object|Cont],MTab,SeqNo,LocalPost> when 'true' ->
	      %% Line 3124
	      case call 'ets':'insert'
		       (MTab, {SeqNo,Object}) of
		<'true'> when 'true' ->
		    let <_6> =
			fun () ->
			    let <_5> =
				call %% Line 3127
				     'erlang':%% Line 3127
					      '+'
				    (%% Line 3127
				     SeqNo, %% Line 3127
					    1)
			    in  %% Line 3127
				apply 'cache'/4
				    (Cont, MTab, _5, LocalPost)
		    in  %% Line 3127
			[Object|_6]
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3128
	  <F,MTab,SeqNo,LocalPost> when 'true' ->
	      %% Line 3129
	      case apply F
		       () of
		%% Line 3130
		<Objects>
		    when call 'erlang':'is_list'
			  (Objects) ->
		    %% Line 3131
		    apply 'cache'/4
			(Objects, MTab, SeqNo, LocalPost)
		%% Line 3132
		<Term> when 'true' ->
		    %% Line 3133
		    Term
	      end
	end
'cache_recall'/2 =
    %% Line 3136
    fun (_0,_1) ->
	%% Line 3137
	case call 'ets':'lookup'
		 (_0, _1) of
	  %% Line 3138
	  <Cont = []> when 'true' ->
	      %% Line 3139
	      Cont
	  %% Line 3140
	  <[{_7,Object}|[]]>
	      when call 'erlang':'=:='
		    (_7,
		     _1) ->
	      let <_3> =
		  fun () ->
		      let <_2> =
			  call %% Line 3141
			       'erlang':%% Line 3141
					'+'
			      (_1, %% Line 3141
				   1)
		      in  %% Line 3141
			  apply 'cache_recall'/2
			      (_0, _2)
	      in  %% Line 3141
		  [Object|_3]
	  ( <_4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_4})
	    -| ['compiler_generated'] )
	end
'ucache'/4 =
    %% Line 3144
    fun (_0,_1,_2,_3) ->
	%% Line 3145
	case call 'ets':'member'
		 (_2, 0) of
	  %% Line 3146
	  <'false'> when 'true' ->
	      %% Line 3147
	      case call 'ets':'insert'
		       (_2, {0}) of
		<'true'> when 'true' ->
		    %% Line 3148
		    apply 'ucache'/5
			(_0, _1, _2, 1, _3)
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3149
	  <'true'> when 'true' ->
	      %% Line 3150
	      apply 'ucache_recall'/3
		  (_1, _2, 1)
	  ( <_5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_5})
	    -| ['compiler_generated'] )
	end
'ucache'/5 =
    %% Line 3153
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <Cont = [],_X_UTab,_X_MTab,_X_SeqNo,LocalPost> when 'true' ->
	      do  %% Line 3154
		  apply 'local_post'/1
		      (LocalPost)
		  %% Line 3155
		  Cont
	  %% Line 3156
	  <[Object|Cont],UTab,MTab,SeqNo,LocalPost> when 'true' ->
	      let <Hash> =
		  call %% Line 3158
		       'erlang':%% Line 3158
				'phash2'
		      (%% Line 3158
		       Object)
	      in  %% Line 3159
		  case call 'ets':'lookup'
			   (UTab, Hash) of
		    %% Line 3160
		    <[]> when 'true' ->
			%% Line 3161
			apply 'ucache3'/7
			    (Object, Cont, Hash, UTab, MTab, SeqNo, LocalPost)
		    %% Line 3162
		    <HashSeqObjects> when 'true' ->
			%% Line 3163
			case call 'lists':'keymember'
				 (Object, 3, HashSeqObjects) of
			  %% Line 3164
			  <'true'> when 'true' ->
			      %% Line 3165
			      apply 'ucache'/5
				  (Cont, UTab, MTab, SeqNo, LocalPost)
			  %% Line 3166
			  <'false'> when 'true' ->
			      %% Line 3167
			      apply 'ucache3'/7
				  (Object, Cont, Hash, UTab, MTab, SeqNo, LocalPost)
			  ( <_6> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_6})
			    -| ['compiler_generated'] )
			end
		  end
	  %% Line 3170
	  <F,UTab,MTab,SeqNo,LocalPost> when 'true' ->
	      %% Line 3171
	      case apply F
		       () of
		%% Line 3172
		<Objects>
		    when call 'erlang':'is_list'
			  (Objects) ->
		    %% Line 3173
		    apply 'ucache'/5
			(Objects, UTab, MTab, SeqNo, LocalPost)
		%% Line 3174
		<Term> when 'true' ->
		    %% Line 3175
		    Term
	      end
	end
'ucache3'/7 =
    %% Line 3178
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	%% Line 3179
	case call 'ets':'insert'
		 (_3, {_2,_5,_0}) of
	  <'true'> when 'true' ->
	      %% Line 3180
	      case call 'ets':'insert'
		       (_4, {_5,_2}) of
		<'true'> when 'true' ->
		    let <_10> =
			fun () ->
			    let <_9> =
				call %% Line 3183
				     'erlang':%% Line 3183
					      '+'
				    (_5, %% Line 3183
					 1)
			    in  %% Line 3183
				apply 'ucache'/5
				    (_1, _3, _4, _9, _6)
		    in  %% Line 3183
			[_0|_10]
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_8})
		  -| ['compiler_generated'] )
	      end
	  ( <_7> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_7})
	    -| ['compiler_generated'] )
	end
'ucache_recall'/3 =
    %% Line 3185
    fun (_0,_1,_2) ->
	%% Line 3186
	case call 'ets':'lookup'
		 (_1, _2) of
	  %% Line 3187
	  <Cont = []> when 'true' ->
	      %% Line 3188
	      Cont
	  %% Line 3189
	  <[{_13,Hash}|[]]>
	      when call 'erlang':'=:='
		    (_13,
		     _2) ->
	      let <_5> =
		  case %% Line 3190
		       call 'ets':'lookup'
			   (_0, Hash) of
		    %% Line 3191
		    <[{_14,_15,Object0}|[]]>
			when let <_16> =
			      call 'erlang':'=:='
				  (_14, Hash)
			  in  let <_17> =
				  call 'erlang':'=:='
				      (_15, _2)
			      in  call 'erlang':'and'
				      (_16, _17) ->
			Object0
		    %% Line 3192
		    <HashSeqObjects> when 'true' ->
			%% Line 3193
			case %% Line 3194
			     call 'lists':'keyfind'
				 (_2, 2, HashSeqObjects) of
			  <{_18,_19,Object0}>
			      when let <_20> =
				    call 'erlang':'=:='
					(_18, Hash)
				in  let <_21> =
					call 'erlang':'=:='
					    (_19, _2)
				    in  call 'erlang':'and'
					    (_20, _21) ->
			      %% Line 3195
			      Object0
			  ( <_3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_3})
			    -| ['compiler_generated'] )
			end
		  end
	      in  let <_8> =
		      fun () ->
			  let <_7> =
			      call %% Line 3197
				   'erlang':%% Line 3197
					    '+'
				  (_2, %% Line 3197
				       1)
			  in  %% Line 3197
			      apply 'ucache_recall'/3
				  (_0, _1, _7)
		  in  %% Line 3197
		      [_5|_8]
	  ( <_9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_9})
	    -| ['compiler_generated'] )
	end
'lcache'/6 =
    %% Line 3202
    fun (_0,_1,_2,_3,_4,_5) ->
	let <Key> = {_1,%% Line 3203
		'$_qlc_cache_tmpfiles_'}
	in  %% Line 3204
	    case call 'erlang':'get'
		     (Key) of
	      %% Line 3205
	      <'undefined'> when 'true' ->
		  %% Line 3206
		  apply 'lcache1'/4
		      (_0, {Key,_2,_3,_4,_5}, _4, %% Line 3207
						  [])
	      %% Line 3208
	      <{'file',_X_Fd,_X_TmpFile,F}> when 'true' ->
		  %% Line 3209
		  apply F
		      ()
	      %% Line 3210
	      <L>
		  when call 'erlang':'is_list'
			(L) ->
		  %% Line 3211
		  L
	      ( <_7> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_7})
		-| ['compiler_generated'] )
	    end
'lcache1'/4 =
    %% Line 3214
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Cont = [],{Key,LocalPost,_X_TmpDir,_X_MaxList,_X_TmpUsage},_X_Sz,Acc> when 'true' ->
	      do  %% Line 3215
		  apply 'local_post'/1
		      (LocalPost)
		  %% Line 3216
		  case call 'erlang':'get'
			   (Key) of
		    %% Line 3217
		    <'undefined'> when 'true' ->
			let <_4> =
			    call %% Line 3218
				 'lists':%% Line 3218
					 'reverse'
				(%% Line 3218
				 Acc)
			in  do  %% Line 3218
				call 'erlang':'put'
				    (Key, _4)
				%% Line 3219
				Cont
		    %% Line 3220
		    <{'file',Fd,TmpFile,_X_F}> when 'true' ->
			%% Line 3221
			case apply 'lcache_write'/3
				 (Fd, TmpFile, Acc) of
			  %% Line 3222
			  <'ok'> when 'true' ->
			      %% Line 3223
			      Cont
			  %% Line 3224
			  <Error> when 'true' ->
			      %% Line 3225
			      Error
			end
		    ( <_6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3228
	  <H,State,Sz,Acc>
	      when call 'erlang':'<'
		    (Sz,
		     0) ->
	      %% Line 3229
	      case State of
		<{Key,LocalPost,TmpDir,MaxList,TmpUsage}> when 'true' ->
		    let <_11> =
			case %% Line 3231
			     call 'erlang':'get'
				 (Key) of
			  %% Line 3232
			  <{'file',Fd0,TmpFile,_X_F}> when 'true' ->
			      %% Line 3233
			      {TmpFile,Fd0}
			  %% Line 3234
			  <'undefined'>
			      when call 'erlang':'=:='
				    (TmpUsage,
				     'not_allowed') ->
			      %% Line 3235
			      apply 'error'/1
				  ({'tmpdir_usage','caching'})
			  %% Line 3236
			  <'undefined'> when 'true' ->
			      do  %% Line 3237
				  apply 'maybe_error_logger'/2
				      (TmpUsage, 'caching')
				  let <FName> =
				      apply %% Line 3238
					    'tmp_filename'/1
					  (%% Line 3238
					   TmpDir)
				  in  %% Line 3239
				      case apply 'open_file'/3
					       (FName, ['write'], LocalPost) of
					<{F,Fd0}> when 'true' ->
					    do  %% Line 3240
						call 'erlang':'put'
						    (Key, {'file',Fd0,FName,F})
						%% Line 3241
						{FName,Fd0}
					( <_9> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_9})
					  -| ['compiler_generated'] )
				      end
			  ( <_10> when 'true' ->
				%% Line 3231
				primop 'match_fail'
				    ({'case_clause',_10})
			    -| ['compiler_generated'] )
			end
		    in  %% Line 3243
			case _11 of
			  %% Line 3244
			  <{FileName,Fd}> when 'true' ->
			      %% Line 3245
			      case apply 'lcache_write'/3
				       (Fd, FileName, Acc) of
				%% Line 3246
				<'ok'> when 'true' ->
				    %% Line 3247
				    apply 'lcache1'/4
					(H, State, MaxList, [])
				%% Line 3248
				<Error> when 'true' ->
				    %% Line 3249
				    Error
			      end
			  %% Line 3251
			  <Error> when 'true' ->
			      %% Line 3252
			      Error
			end
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3254
	  <[Object|Cont],State,Sz0,Acc> when 'true' ->
	      let <Sz> =
		  apply %% Line 3255
			'decr_list_size'/2
		      (%% Line 3255
		       Sz0, %% Line 3255
			    Object)
	      in  let <_16> =
		      apply %% Line 3256
			    'lcache2'/4
			  (%% Line 3256
			   Cont, %% Line 3256
				 State, %% Line 3256
					Sz, %% Line 3256
					    [Object|Acc])
		  in  %% Line 3256
		      [Object|_16]
	  %% Line 3257
	  <F,State,Sz,Acc> when 'true' ->
	      %% Line 3258
	      case apply F
		       () of
		%% Line 3259
		<Objects>
		    when call 'erlang':'is_list'
			  (Objects) ->
		    %% Line 3260
		    apply 'lcache1'/4
			(Objects, State, Sz, Acc)
		%% Line 3261
		<Term> when 'true' ->
		    %% Line 3262
		    Term
	      end
	end
'lcache2'/4 =
    %% Line 3265
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[Object|Cont],State,Sz0,Acc>
	      when call 'erlang':'>='
		    (Sz0,
		     0) ->
	      let <Sz> =
		  apply %% Line 3266
			'decr_list_size'/2
		      (%% Line 3266
		       Sz0, %% Line 3266
			    Object)
	      in  let <_5> =
		      apply %% Line 3267
			    'lcache2'/4
			  (%% Line 3267
			   Cont, %% Line 3267
				 State, %% Line 3267
					Sz, %% Line 3267
					    [Object|Acc])
		  in  %% Line 3267
		      [Object|_5]
	  %% Line 3268
	  <Cont,State,Sz,Acc> when 'true' ->
	      %% Line 3269
	      ( fun () ->
		    apply 'lcache1'/4
			(Cont, State, Sz, Acc)
		-| [{'id',{0,0,'-lcache2/4-fun-0-'}}] )
	end
'lcache_write'/3 =
    %% Line 3271
    fun (_0,_1,_2) ->
	let <_3> =
	    apply %% Line 3272
		  't2b'/2
		(_2, %% Line 3272
		     [])
	in  %% Line 3272
	    apply 'write_binary_terms'/3
		(_3, _0, _1)
't2b'/2 =
    %% Line 3274
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],Bs> when 'true' ->
	      %% Line 3275
	      Bs
	  %% Line 3276
	  <[T|Ts],Bs> when 'true' ->
	      let <_2> =
		  call %% Line 3277
		       'erlang':%% Line 3277
				'term_to_binary'
		      (%% Line 3277
		       T)
	      in  %% Line 3277
		  apply 't2b'/2
		      (Ts, [_2|Bs])
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'t2b',2}}] )
	    -| ['compiler_generated'] )
	end
'del_lcache'/1 =
    %% Line 3279
    fun (_0) ->
	%% Line 3280
	( fun () ->
	      let <Key> = {_0,%% Line 3281
		      '$_qlc_cache_tmpfiles_'}
	      in  %% Line 3282
		  case call 'erlang':'get'
			   (Key) of
		    %% Line 3283
		    <'undefined'> when 'true' ->
			%% Line 3284
			'ok'
		    %% Line 3285
		    <{'file',Fd,TmpFile,_X_F}> when 'true' ->
			do  %% Line 3286
			    ( call ( 'file'
				     -| ['result_not_wanted'] ):( 'close'
								  -| ['result_not_wanted'] )
				  (Fd)
			      -| ['result_not_wanted'] )
			    do  %% Line 3287
				( call ( 'file'
					 -| ['result_not_wanted'] ):( 'delete'
								      -| ['result_not_wanted'] )
				      (TmpFile)
				  -| ['result_not_wanted'] )
				%% Line 3288
				call 'erlang':'erase'
				    (Key)
		    %% Line 3289
		    <_X_L> when 'true' ->
			%% Line 3290
			call 'erlang':'erase'
			    (Key)
		  end
	  -| [{'id',{0,0,'-del_lcache/1-fun-0-'}}] )
'tag_objects'/2 =
    %% Line 3294
    fun (_0,_1) ->
	case <_0,_1> of
	  <[Object|Cont],T> when 'true' ->
	      let <_2> =
		  call %% Line 3295
		       'erlang':%% Line 3295
				'+'
		      (%% Line 3295
		       T, %% Line 3295
			  1)
	      in  let <_3> =
		      apply %% Line 3295
			    'tag_objects2'/2
			  (%% Line 3295
			   Cont, _2)
		  in  %% Line 3295
		      [{Object,T}|_3]
	  %% Line 3296
	  <Cont = [],_X_T> when 'true' ->
	      %% Line 3297
	      Cont
	  %% Line 3298
	  <F,T> when 'true' ->
	      %% Line 3299
	      case apply F
		       () of
		%% Line 3300
		<Objects>
		    when call 'erlang':'is_list'
			  (Objects) ->
		    %% Line 3301
		    apply 'tag_objects'/2
			(Objects, T)
		%% Line 3302
		<Term> when 'true' ->
		    %% Line 3303
		    Term
	      end
	end
'tag_objects2'/2 =
    %% Line 3306
    fun (_0,_1) ->
	case <_0,_1> of
	  <[Object|Cont],T> when 'true' ->
	      let <_2> =
		  call %% Line 3307
		       'erlang':%% Line 3307
				'+'
		      (%% Line 3307
		       T, %% Line 3307
			  1)
	      in  let <_3> =
		      apply %% Line 3307
			    'tag_objects2'/2
			  (%% Line 3307
			   Cont, _2)
		  in  %% Line 3307
		      [{Object,T}|_3]
	  %% Line 3308
	  <Objects,T> when 'true' ->
	      %% Line 3309
	      ( fun () ->
		    apply 'tag_objects'/2
			(Objects, T)
		-| [{'id',{0,0,'-tag_objects2/2-fun-0-'}}] )
	end
'untag_objects'/1 =
    %% Line 3311
    fun (_0) ->
	case _0 of
	  <Objs = []> when 'true' ->
	      %% Line 3312
	      Objs
	  %% Line 3313
	  <[{Object,_X_N}|Cont]> when 'true' ->
	      let <_1> =
		  apply %% Line 3314
			'untag_objects2'/1
		      (%% Line 3314
		       Cont)
	      in  %% Line 3314
		  [Object|_1]
	  %% Line 3315
	  <F> when 'true' ->
	      %% Line 3316
	      case apply F
		       () of
		%% Line 3317
		<Objects>
		    when call 'erlang':'is_list'
			  (Objects) ->
		    %% Line 3318
		    apply 'untag_objects'/1
			(Objects)
		%% Line 3319
		<Term> when 'true' ->
		    %% Line 3320
		    Term
	      end
	end
'untag_objects2'/1 =
    %% Line 3323
    fun (_0) ->
	case _0 of
	  <[{Object,_X_N}|Cont]> when 'true' ->
	      let <_1> =
		  apply %% Line 3324
			'untag_objects2'/1
		      (%% Line 3324
		       Cont)
	      in  %% Line 3324
		  [Object|_1]
	  %% Line 3325
	  <Cont = []> when 'true' ->
	      %% Line 3326
	      Cont
	  %% Line 3327
	  <Objects> when 'true' ->
	      %% Line 3328
	      ( fun () ->
		    apply 'untag_objects'/1
			(Objects)
		-| [{'id',{0,0,'-untag_objects2/1-fun-0-'}}] )
	end
'merge_join'/5 =
    %% Line 3337
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <Cont = [],_X_C1,_X_T2,_X_C2,_X_Opt> when 'true' ->
	      %% Line 3338
	      Cont
	  %% Line 3339
	  <[E1|L1],C1,L2,C2,Opt> when 'true' ->
	      %% Line 3341
	      case Opt of
		<{'qlc_opt',_15,_16,_17,_18,TmpDir,_19,MaxList,TmpUsage}> when 'true' ->
		    let <_6> =
			apply %% Line 3342
			      'merge_join_id'/0
			    ()
		    in  let <M> =
			    {%% Line 3342
			     'm',_6,%% Line 3342
				    TmpDir,%% Line 3342
					   MaxList,%% Line 3343
						   TmpUsage}
			in  let <_8> =
				call %% Line 3344
				     'erlang':%% Line 3344
					      'element'
				    (%% Line 3344
				     C1, %% Line 3344
					 E1)
			    in  %% Line 3344
				apply 'merge_join2'/7
				    (E1, _8, L1, C1, L2, C2, M)
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3345
	  <F1,C1,L2,C2,Opt> when 'true' ->
	      %% Line 3346
	      case apply F1
		       () of
		%% Line 3347
		<L1>
		    when call 'erlang':'is_list'
			  (L1) ->
		    %% Line 3348
		    apply 'merge_join'/5
			(L1, C1, L2, C2, Opt)
		%% Line 3349
		<T1> when 'true' ->
		    %% Line 3350
		    T1
	      end
	end
'merge_join1'/7 =
    %% Line 3353
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <_X_E2,_X_K2,Cont = [],_X_C1,_X_L2,_X_C2,M> when 'true' ->
	      %% Line 3354
	      apply 'end_merge_join'/2
		  (Cont, M)
	  %% Line 3355
	  <E2,K2,[E1|L1],C1,L2,C2,M> when 'true' ->
	      let <K1> =
		  call %% Line 3356
		       'erlang':%% Line 3356
				'element'
		      (%% Line 3356
		       C1, %% Line 3356
			   E1)
	      in  %% Line 3357
		  case <> of
		    %% Line 3358
		    <>
			when call 'erlang':'=='
			      (K1,
			       K2) ->
			%% Line 3359
			apply 'same_keys2'/8
			    (E1, K1, L1, C1, L2, C2, E2, M)
		    %% Line 3360
		    <>
			when call 'erlang':'>'
			      (K1,
			       K2) ->
			%% Line 3361
			apply 'merge_join2'/7
			    (E1, K1, L1, C1, L2, C2, M)
		    %% Line 3362
		    <> when 'true' ->
			%% Line 3363
			apply 'merge_join1'/7
			    (E2, K2, L1, C1, L2, C2, M)
		  end
	  %% Line 3365
	  <E2,K2,F1,C1,L2,C2,M> when 'true' ->
	      %% Line 3366
	      case apply F1
		       () of
		%% Line 3367
		<L1>
		    when call 'erlang':'is_list'
			  (L1) ->
		    %% Line 3368
		    apply 'merge_join1'/7
			(E2, K2, L1, C1, L2, C2, M)
		%% Line 3369
		<T1> when 'true' ->
		    %% Line 3370
		    T1
	      end
	end
'merge_join2'/7 =
    %% Line 3373
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <_X_E1,_X_K1,_X_L1,_X_C1,Cont = [],_X_C2,M> when 'true' ->
	      %% Line 3374
	      apply 'end_merge_join'/2
		  (Cont, M)
	  %% Line 3375
	  <E1,K1,L1,C1,[E2|L2],C2,M> when 'true' ->
	      let <K2> =
		  call %% Line 3376
		       'erlang':%% Line 3376
				'element'
		      (%% Line 3376
		       C2, %% Line 3376
			   E2)
	      in  %% Line 3377
		  case <> of
		    %% Line 3378
		    <>
			when call 'erlang':'=='
			      (K1,
			       K2) ->
			%% Line 3379
			apply 'same_keys2'/8
			    (E1, K1, L1, C1, L2, C2, E2, M)
		    %% Line 3380
		    <>
			when call 'erlang':'>'
			      (K1,
			       K2) ->
			%% Line 3381
			apply 'merge_join2'/7
			    (E1, K1, L1, C1, L2, C2, M)
		    %% Line 3382
		    <> when 'true' ->
			%% Line 3383
			apply 'merge_join1'/7
			    (E2, K2, L1, C1, L2, C2, M)
		  end
	  %% Line 3385
	  <E1,K1,L1,C1,F2,C2,M> when 'true' ->
	      %% Line 3386
	      case apply F2
		       () of
		%% Line 3387
		<L2>
		    when call 'erlang':'is_list'
			  (L2) ->
		    %% Line 3388
		    apply 'merge_join2'/7
			(E1, K1, L1, C1, L2, C2, M)
		%% Line 3389
		<T2> when 'true' ->
		    %% Line 3390
		    T2
	      end
	end
'same_keys2'/8 =
    %% Line 3394
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <E1,K1,L1,C1,[],_X_C2,E2_0,M> when 'true' ->
	      let <Cont> =
		  fun (_8) ->
		      %% Line 3395
		      apply 'end_merge_join'/2
			  ([], M)
	      in  %% Line 3396
		  apply 'loop_same_keys'/7
		      (E1, K1, L1, C1, [E2_0|[]], Cont, M)
	  %% Line 3397
	  <E1,K1,L1,C1,L2_0 = [E2|L2],C2,E2_0,M> when 'true' ->
	      let <K2> =
		  call %% Line 3398
		       'erlang':%% Line 3398
				'element'
		      (%% Line 3398
		       C2, %% Line 3398
			   E2)
	      in  %% Line 3399
		  case <> of
		    %% Line 3400
		    <>
			when call 'erlang':'=='
			      (K1,
			       K2) ->
			%% Line 3401
			apply 'same_keys1'/9
			    (E1, K1, L1, C1, E2, C2, E2_0, L2, M)
		    %% Line 3402
		    <>
			when call 'erlang':'<'
			      (K1,
			       K2) ->
			let <_12> =
			    fun () ->
				%% Line 3404
				apply 'same_loop1'/7
				    (L1, K1, C1, E2_0, L2_0, C2, M)
			in  %% Line 3403
			    [[E1|E2_0]|_12]
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	  %% Line 3406
	  <E1,K1,L1,C1,F2,C2,E2_0,M> when 'true' ->
	      %% Line 3407
	      case apply F2
		       () of
		%% Line 3408
		<L2>
		    when call 'erlang':'is_list'
			  (L2) ->
		    %% Line 3409
		    apply 'same_keys2'/8
			(E1, K1, L1, C1, L2, C2, E2_0, M)
		%% Line 3410
		<T2> when 'true' ->
		    let <Cont> =
			fun (_13) ->
			    %% Line 3411
			    T2
		    in  %% Line 3412
			apply 'loop_same_keys'/7
			    (E1, K1, L1, C1, [E2_0|[]], Cont, M)
	      end
	end
'same_loop1'/7 =
    %% Line 3415
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <[],_X_K1_0,_X_C1,_X_E2_0,_X_L2,_X_C2,M> when 'true' ->
	      %% Line 3416
	      apply 'end_merge_join'/2
		  ([], M)
	  %% Line 3417
	  <[E1|L1],K1_0,C1,E2_0,L2,C2,M> when 'true' ->
	      let <K1> =
		  call %% Line 3418
		       'erlang':%% Line 3418
				'element'
		      (%% Line 3418
		       C1, %% Line 3418
			   E1)
	      in  %% Line 3419
		  case <> of
		    %% Line 3420
		    <>
			when call 'erlang':'=='
			      (K1,
			       K1_0) ->
			let <_8> =
			    fun () ->
				%% Line 3422
				apply 'same_loop1'/7
				    (L1, K1_0, C1, E2_0, L2, C2, M)
			in  %% Line 3421
			    [[E1|E2_0]|_8]
		    %% Line 3423
		    <>
			when call 'erlang':'<'
			      (K1_0,
			       K1) ->
			%% Line 3424
			apply 'merge_join2'/7
			    (E1, K1, L1, C1, L2, C2, M)
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	  %% Line 3426
	  <F1,K1_0,C1,E2_0,L2,C2,M> when 'true' ->
	      %% Line 3427
	      case apply F1
		       () of
		%% Line 3428
		<L1>
		    when call 'erlang':'is_list'
			  (L1) ->
		    %% Line 3429
		    apply 'same_loop1'/7
			(L1, K1_0, C1, E2_0, L2, C2, M)
		%% Line 3430
		<T1> when 'true' ->
		    %% Line 3431
		    T1
	      end
	end
'same_keys1'/9 =
    %% Line 3435
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <E1_0,K1_0,L1 = [],C1,E2,C2,E2_0,L2,M> when 'true' ->
	      let <_9> =
		  fun () ->
		      %% Line 3437
		      apply 'same_keys'/7
			  (K1_0, E1_0, L1, C1, L2, C2, M)
	      in  %% Line 3436
		  [[E1_0|E2_0]|[[E1_0|E2]|_9]]
	  %% Line 3438
	  <E1_0,K1_0,L1 = [E1|_27],C1,E2,C2,E2_0,L2,M> when 'true' ->
	      let <K1> =
		  call %% Line 3439
		       'erlang':%% Line 3439
				'element'
		      (%% Line 3439
		       C1, %% Line 3439
			   E1)
	      in  %% Line 3440
		  case <> of
		    %% Line 3441
		    <>
			when call 'erlang':'=='
			      (K1_0,
			       K1) ->
			let <E2s> =
			    [%% Line 3442
			     E2|%% Line 3442
				[E2_0|[]]]
			in  %% Line 3443
			    ( case M of
				( <( {'m',_28,_29,_rec93,_30}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <Sz0> =
					  apply 'decr_list_size'/2
					      (_rec93, E2s)
				      in  %% Line 3444
					  apply 'same_keys_cache'/9
					      (E1_0, K1_0, L1, C1, L2, C2, E2s, Sz0, M)
				  -| ['compiler_generated'] )
				( <_31> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','m'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    %% Line 3445
		    <>
			when call 'erlang':'<'
			      (K1_0,
			       K1) ->
			let <_15> =
			    fun () ->
				%% Line 3447
				apply 'same_keys'/7
				    (K1_0, E1_0, L1, C1, L2, C2, M)
			in  %% Line 3446
			    [[E1_0|E2_0]|[[E1_0|E2]|_15]]
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	  %% Line 3449
	  <E1_0,K1_0,F1,C1,E2,C2,E2_0,L2,M> when 'true' ->
	      %% Line 3450
	      case apply F1
		       () of
		%% Line 3451
		<L1>
		    when call 'erlang':'is_list'
			  (L1) ->
		    %% Line 3452
		    apply 'same_keys1'/9
			(E1_0, K1_0, L1, C1, E2, C2, E2_0, L2, M)
		%% Line 3453
		<T1> when 'true' ->
		    let <Cont> =
			fun () ->
			    %% Line 3454
			    T1
		    in  %% Line 3455
			apply 'loop_same'/3
			    (E1_0, [E2|[E2_0|[]]], Cont)
	      end
	end
'same_keys'/7 =
    %% Line 3459
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <_X_K1,_X_E1,_X_L1,_X_C1,Cont = [],_X_C2,M> when 'true' ->
	      %% Line 3460
	      apply 'end_merge_join'/2
		  (Cont, M)
	  %% Line 3461
	  <K1,E1,L1,C1,[E2|L2],C2,M> when 'true' ->
	      let <K2> =
		  call %% Line 3462
		       'erlang':%% Line 3462
				'element'
		      (%% Line 3462
		       C2, %% Line 3462
			   E2)
	      in  %% Line 3463
		  case <> of
		    %% Line 3464
		    <>
			when call 'erlang':'=='
			      (K1,
			       K2) ->
			let <_8> =
			    fun () ->
				%% Line 3466
				apply 'same_keys'/7
				    (K1, E1, L1, C1, L2, C2, M)
			in  %% Line 3465
			    [[E1|E2]|_8]
		    %% Line 3467
		    <>
			when call 'erlang':'<'
			      (K1,
			       K2) ->
			%% Line 3468
			apply 'merge_join1'/7
			    (E2, K2, L1, C1, L2, C2, M)
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	  %% Line 3470
	  <K1,E1,L1,C1,F2,C2,M> when 'true' ->
	      %% Line 3471
	      case apply F2
		       () of
		%% Line 3472
		<L2>
		    when call 'erlang':'is_list'
			  (L2) ->
		    %% Line 3473
		    apply 'same_keys'/7
			(K1, E1, L1, C1, L2, C2, M)
		%% Line 3474
		<T2> when 'true' ->
		    %% Line 3475
		    T2
	      end
	end
'same_keys_cache'/9 =
    %% Line 3481
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <E1,K1,L1,C1,[],_X_C2,E2s,_X_Sz,M> when 'true' ->
	      let <Cont> =
		  fun (_9) ->
		      %% Line 3482
		      apply 'end_merge_join'/2
			  ([], M)
	      in  %% Line 3483
		  apply 'loop_same_keys'/7
		      (E1, K1, L1, C1, E2s, Cont, M)
	  %% Line 3484
	  <E1,K1,L1,C1,L2,C2,E2s,Sz0,M>
	      when call 'erlang':'<'
		    (Sz0,
		     0) ->
	      %% Line 3485
	      case apply 'init_merge_join'/1
		       (M) of
		%% Line 3486
		<'ok'> when 'true' ->
		    %% Line 3487
		    ( case M of
			( <( {'m',_35,_36,_rec94,_37}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <C> =
				  fun () ->
				      %% Line 3489
				      apply 'same_keys_file'/9
					  (E1, K1, L1, C1, L2, C2, [], _rec94, M)
			      in  %% Line 3491
				  apply 'write_same_keys'/4
				      (E1, E2s, M, C)
			  -| ['compiler_generated'] )
			( <_38> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','m'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 3492
		<Error> when 'true' ->
		    %% Line 3493
		    Error
	      end
	  %% Line 3495
	  <E1,K1,L1,C1,[E2|L2],C2,E2s,Sz0,M> when 'true' ->
	      let <K2> =
		  call %% Line 3496
		       'erlang':%% Line 3496
				'element'
		      (%% Line 3496
		       C2, %% Line 3496
			   E2)
	      in  %% Line 3497
		  case <> of
		    %% Line 3498
		    <>
			when call 'erlang':'=='
			      (K1,
			       K2) ->
			let <Sz> =
			    apply %% Line 3499
				  'decr_list_size'/2
				(%% Line 3499
				 Sz0, %% Line 3499
				      E2)
			in  %% Line 3500
			    apply 'same_keys_cache'/9
				(E1, K1, L1, C1, L2, C2, [E2|E2s], Sz, M)
		    %% Line 3501
		    <>
			when call 'erlang':'<'
			      (K1,
			       K2) ->
			let <Cont> =
			    fun (_19) ->
				%% Line 3502
				apply 'merge_join1'/7
				    (E2, K2, _19, C1, L2, C2, M)
			in  %% Line 3503
			    apply 'loop_same_keys'/7
				(E1, K1, L1, C1, E2s, Cont, M)
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	  %% Line 3505
	  <E1,K1,L1,C1,F2,C2,E2s,Sz,M> when 'true' ->
	      %% Line 3506
	      case apply F2
		       () of
		%% Line 3507
		<L2>
		    when call 'erlang':'is_list'
			  (L2) ->
		    %% Line 3508
		    apply 'same_keys_cache'/9
			(E1, K1, L1, C1, L2, C2, E2s, Sz, M)
		%% Line 3509
		<T2> when 'true' ->
		    let <Cont> =
			fun (_22) ->
			    %% Line 3510
			    T2
		    in  %% Line 3511
			apply 'loop_same_keys'/7
			    (E1, K1, L1, C1, E2s, Cont, M)
	      end
	end
'loop_same_keys'/7 =
    %% Line 3515
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <E1,_X_K1,[],_X_C1,E2s,_X_Cont,M> when 'true' ->
	      let <_7> =
		  apply %% Line 3516
			'loop_same'/3
		      (%% Line 3516
		       E1, %% Line 3516
			   E2s, %% Line 3516
				[])
	      in  %% Line 3516
		  apply 'end_merge_join'/2
		      (_7, M)
	  %% Line 3517
	  <E1,K1,L1,C1,E2s,Cont,M> when 'true' ->
	      let <_8> =
		  fun () ->
		      %% Line 3518
		      apply 'loop_keys'/6
			  (K1, L1, C1, E2s, Cont, M)
	      in  %% Line 3518
		  apply 'loop_same'/3
		      (E1, E2s, _8)
	end
'loop_same'/3 =
    %% Line 3520
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <_X_E1,[],L> when 'true' ->
	      %% Line 3521
	      L
	  %% Line 3522
	  <E1,[E2|E2s],L> when 'true' ->
	      %% Line 3523
	      apply 'loop_same'/3
		  (E1, E2s, [[E1|E2]|L])
	  ( <_5,_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4,_3})
		  -| [{'function_name',{'loop_same',3}}] )
	    -| ['compiler_generated'] )
	end
'loop_keys'/6 =
    %% Line 3525
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <K,L1_0 = [E1|L1],C1,E2s,Cont,M> when 'true' ->
	      let <K1> =
		  call %% Line 3526
		       'erlang':%% Line 3526
				'element'
		      (%% Line 3526
		       C1, %% Line 3526
			   E1)
	      in  %% Line 3527
		  case <> of
		    %% Line 3528
		    <>
			when call 'erlang':'=='
			      (K1,
			       K) ->
			%% Line 3529
			apply 'loop_same_keys'/7
			    (E1, K1, L1, C1, E2s, Cont, M)
		    %% Line 3530
		    <>
			when call 'erlang':'>'
			      (K1,
			       K) ->
			%% Line 3531
			apply Cont
			    (L1_0)
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	  %% Line 3533
	  <_X_K,L1 = [],_X_C1,_X_Es2,Cont,_X_M> when 'true' ->
	      %% Line 3534
	      apply Cont
		  (L1)
	  %% Line 3535
	  <K,F1,C1,E2s,Cont,M> when 'true' ->
	      %% Line 3536
	      case apply F1
		       () of
		%% Line 3537
		<L1>
		    when call 'erlang':'is_list'
			  (L1) ->
		    %% Line 3538
		    apply 'loop_keys'/6
			(K, L1, C1, E2s, Cont, M)
		%% Line 3539
		<T1> when 'true' ->
		    %% Line 3540
		    T1
	      end
	end
'same_keys_file'/9 =
    %% Line 3544
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <E1,K1,L1,C1,[],_X_C2,E2s,_X_Sz,M> when 'true' ->
	      let <Cont> =
		  fun (_9) ->
		      %% Line 3545
		      apply 'end_merge_join'/2
			  ([], M)
	      in  %% Line 3546
		  apply 'same_keys_file_write'/7
		      (E1, K1, L1, C1, E2s, M, Cont)
	  %% Line 3547
	  <E1,K1,L1,C1,L2,C2,E2s,Sz0,M>
	      when call 'erlang':'<'
		    (Sz0,
		     0) ->
	      %% Line 3548
	      ( case M of
		  ( <( {'m',_34,_35,_rec95,_36}
		       -| ['compiler_generated'] )> when 'true' ->
			let <C> =
			    fun () ->
				%% Line 3549
				apply 'same_keys_file'/9
				    (E1, K1, L1, C1, L2, C2, [], _rec95, M)
			in  %% Line 3550
			    apply 'write_same_keys'/4
				(E1, E2s, M, C)
		    -| ['compiler_generated'] )
		  ( <_37> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','m'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 3551
	  <E1,K1,L1,C1,[E2|L2],C2,E2s,Sz0,M> when 'true' ->
	      let <K2> =
		  call %% Line 3552
		       'erlang':%% Line 3552
				'element'
		      (%% Line 3552
		       C2, %% Line 3552
			   E2)
	      in  %% Line 3553
		  case <> of
		    %% Line 3554
		    <>
			when call 'erlang':'=='
			      (K1,
			       K2) ->
			let <Sz> =
			    apply %% Line 3555
				  'decr_list_size'/2
				(%% Line 3555
				 Sz0, %% Line 3555
				      E2)
			in  %% Line 3556
			    apply 'same_keys_file'/9
				(E1, K1, L1, C1, L2, C2, [E2|E2s], Sz, M)
		    %% Line 3557
		    <>
			when call 'erlang':'<'
			      (K1,
			       K2) ->
			let <Cont> =
			    fun (_18) ->
				%% Line 3560
				apply 'merge_join1'/7
				    (E2, K2, _18, C1, L2, C2, M)
			in  %% Line 3562
			    apply 'same_keys_file_write'/7
				(E1, K1, L1, C1, E2s, M, Cont)
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	  %% Line 3564
	  <E1,K1,L1,C1,F2,C2,E2s,Sz,M> when 'true' ->
	      %% Line 3565
	      case apply F2
		       () of
		%% Line 3566
		<L2>
		    when call 'erlang':'is_list'
			  (L2) ->
		    %% Line 3567
		    apply 'same_keys_file'/9
			(E1, K1, L1, C1, L2, C2, E2s, Sz, M)
		%% Line 3568
		<T2> when 'true' ->
		    let <Cont> =
			fun (_21) ->
			    %% Line 3569
			    T2
		    in  %% Line 3570
			apply 'same_keys_file_write'/7
			    (E1, K1, L1, C1, E2s, M, Cont)
	      end
	end
'same_keys_file_write'/7 =
    %% Line 3573
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	let <C> =
	    fun () ->
		%% Line 3574
		apply 'loop_keys_file'/5
		    (_1, _2, _3, _6, _5)
	in  %% Line 3575
	    apply 'write_same_keys'/4
		(_0, _4, _5, C)
'write_same_keys'/4 =
    %% Line 3577
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <_X_E1,[],_X_M,Cont> when 'true' ->
	      %% Line 3578
	      apply Cont
		  ()
	  %% Line 3579
	  <E1,Es2,M,Cont> when 'true' ->
	      %% Line 3580
	      apply 'write_same_keys'/5
		  (E1, Es2, M, [], Cont)
	end
'write_same_keys'/5 =
    %% Line 3583
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <_X_E1,[],M,E2s,Objs> when 'true' ->
	      %% Line 3584
	      case apply 'write_merge_join'/2
		       (M, E2s) of
		%% Line 3585
		<'ok'> when 'true' ->
		    Objs
		%% Line 3586
		<Error> when 'true' ->
		    Error
	      end
	  %% Line 3588
	  <E1,[E2|E2s0],M,E2s,Objs> when 'true' ->
	      let <BE2> =
		  call %% Line 3589
		       'erlang':%% Line 3589
				'term_to_binary'
		      (%% Line 3589
		       E2)
	      in  %% Line 3590
		  apply 'write_same_keys'/5
		      (E1, E2s0, M, [BE2|E2s], [[E1|E2]|Objs])
	  ( <_11,_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8,_7})
		  -| [{'function_name',{'write_same_keys',5}}] )
	    -| ['compiler_generated'] )
	end
'loop_keys_file'/5 =
    %% Line 3592
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <K,L1_0 = [E1|L1],C1,Cont,M> when 'true' ->
	      let <K1> =
		  call %% Line 3593
		       'erlang':%% Line 3593
				'element'
		      (%% Line 3593
		       C1, %% Line 3593
			   E1)
	      in  %% Line 3594
		  case <> of
		    %% Line 3595
		    <>
			when call 'erlang':'=='
			      (K1,
			       K) ->
			let <C> =
			    fun () ->
				%% Line 3596
				apply 'loop_keys_file'/5
				    (K1, L1, C1, Cont, M)
			in  %% Line 3597
			    apply 'read_merge_join'/3
				(M, E1, C)
		    %% Line 3598
		    <>
			when call 'erlang':'>'
			      (K1,
			       K) ->
			%% Line 3599
			apply Cont
			    (L1_0)
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	  %% Line 3601
	  <_X_K,L1 = [],_X_C1,Cont,_X_M> when 'true' ->
	      %% Line 3602
	      apply Cont
		  (L1)
	  %% Line 3603
	  <K,F1,C1,Cont,M> when 'true' ->
	      %% Line 3604
	      case apply F1
		       () of
		%% Line 3605
		<L1>
		    when call 'erlang':'is_list'
			  (L1) ->
		    %% Line 3606
		    apply 'loop_keys_file'/5
			(K, L1, C1, Cont, M)
		%% Line 3607
		<T1> when 'true' ->
		    %% Line 3608
		    T1
	      end
	end
'end_merge_join'/2 =
    %% Line 3611
    fun (_0,_1) ->
	do  %% Line 3612
	    apply 'end_merge_join'/1
		(_1)
	    _0
'init_merge_join'/1 =
    %% Line 3625
    fun (_0) ->
	case _0 of
	  <{'m',MergeId,TmpDir,_8,TmpUsage}> when 'true' ->
	      %% Line 3626
	      case apply 'tmp_merge_file'/1
		       (MergeId) of
		%% Line 3627
		<{Fd,FileName}> when 'true' ->
		    %% Line 3628
		    case call 'file':'position'
			     (Fd, 'bof') of
		      %% Line 3629
		      <{'ok',0}> when 'true' ->
			  %% Line 3630
			  case call 'file':'truncate'
				   (Fd) of
			    %% Line 3631
			    <'ok'> when 'true' ->
				%% Line 3632
				'ok'
			    %% Line 3633
			    <Error> when 'true' ->
				%% Line 3634
				apply 'file_error'/2
				    (FileName, Error)
			  end
		      %% Line 3636
		      <Error> when 'true' ->
			  %% Line 3637
			  apply 'file_error'/2
			      (FileName, Error)
		    end
		%% Line 3639
		<'none'>
		    when call 'erlang':'=:='
			  (TmpUsage,
			   'not_allowed') ->
		    %% Line 3640
		    apply 'error'/1
			({'tmpdir_usage','joining'})
		%% Line 3641
		<'none'> when 'true' ->
		    do  %% Line 3642
			apply 'maybe_error_logger'/2
			    (TmpUsage, 'joining')
			let <FName> =
			    apply %% Line 3643
				  'tmp_filename'/1
				(%% Line 3643
				 TmpDir)
			in  %% Line 3644
			    case call 'file':'open'
				     (FName, ['raw'|['binary'|['read'|['write']]]]) of
			      %% Line 3645
			      <{'ok',Fd}> when 'true' ->
				  let <TmpFiles> =
				      call %% Line 3646
					   'erlang':%% Line 3646
						    'get'
					  (%% Line 3646
					   '$_qlc_merge_join_tmpfiles_')
				  in  do  %% Line 3647
					  call 'erlang':'put'
					      ('$_qlc_merge_join_tmpfiles_', [{MergeId,Fd,FName}|TmpFiles])
					  %% Line 3648
					  'ok'
			      %% Line 3649
			      <Error> when 'true' ->
				  %% Line 3650
				  apply 'file_error'/2
				      (FName, Error)
			    end
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_6})
		  -| ['compiler_generated'] )
	      end
	  ( <_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7})
		  -| [{'function_name',{'init_merge_join',1}}] )
	    -| ['compiler_generated'] )
	end
'write_merge_join'/2 =
    %% Line 3654
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'m',MergeId,_5,_6,_7},BTerms> when 'true' ->
	      %% Line 3655
	      case apply 'tmp_merge_file'/1
		       (MergeId) of
		<{Fd,FileName}> when 'true' ->
		    %% Line 3656
		    apply 'write_binary_terms'/3
			(BTerms, Fd, FileName)
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'write_merge_join',2}}] )
	    -| ['compiler_generated'] )
	end
'read_merge_join'/3 =
    %% Line 3658
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{'m',MergeId,_14,_15,_16},E1,Cont> when 'true' ->
	      %% Line 3659
	      case apply 'tmp_merge_file'/1
		       (MergeId) of
		<_@r0 = {Fd,FileName}> when 'true' ->
		    %% Line 3660
		    case call 'file':'position'
			     (Fd, 'bof') of
		      %% Line 3661
		      <{'ok',0}> when 'true' ->
			  let <Fun> =
			      fun (_5,_4) ->
				  %% Line 3662
				  case <_5,_4> of
				    <[],_17> when 'true' ->
					%% Line 3663
					apply Cont
					    ()
				    %% Line 3664
				    <Ts,C>
					when call 'erlang':'is_list'
					      (Ts) ->
					%% Line 3665
					apply 'join_read_terms'/3
					    (E1, Ts, C)
				    ( <_7,_6> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_7,_6})
					    -| [{'function_name',{'-read_merge_join/3-fun-0-',2}}] )
				      -| ['compiler_generated'] )
				  end
			  in  %% Line 3667
			      apply 'file_loop_read'/4
				  (#{}#, 65536, _@r0, Fun)
		      %% Line 3668
		      <Error> when 'true' ->
			  %% Line 3669
			  apply 'file_error'/2
			      (FileName, Error)
		    end
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  ( <_13,_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12,_11})
		  -| [{'function_name',{'read_merge_join',3}}] )
	    -| ['compiler_generated'] )
	end
'join_read_terms'/3 =
    %% Line 3672
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <_X_E1,[],Objs> when 'true' ->
	      %% Line 3673
	      Objs
	  %% Line 3674
	  <E1,[E2|E2s],Objs> when 'true' ->
	      %% Line 3675
	      apply 'join_read_terms'/3
		  (E1, E2s, [[E1|E2]|Objs])
	  ( <_5,_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4,_3})
		  -| [{'function_name',{'join_read_terms',3}}] )
	    -| ['compiler_generated'] )
	end
'end_merge_join'/1 =
    %% Line 3677
    fun (_0) ->
	case _0 of
	  <{'m',MergeId,_7,_8,_9}> when 'true' ->
	      %% Line 3678
	      case apply 'tmp_merge_file'/1
		       (MergeId) of
		%% Line 3679
		<'none'> when 'true' ->
		    %% Line 3680
		    'ok'
		%% Line 3681
		<{Fd,FileName}> when 'true' ->
		    do  %% Line 3682
			( call ( 'file'
				 -| ['result_not_wanted'] ):( 'close'
							      -| ['result_not_wanted'] )
			      (Fd)
			  -| ['result_not_wanted'] )
			do  %% Line 3683
			    ( call ( 'file'
				     -| ['result_not_wanted'] ):( 'delete'
								  -| ['result_not_wanted'] )
				  (FileName)
			      -| ['result_not_wanted'] )
			    let <_3> =
				call %% Line 3685
				     'erlang':%% Line 3685
					      'get'
				    (%% Line 3685
				     '$_qlc_merge_join_tmpfiles_')
			    in  let <_4> =
				    call %% Line 3685
					 'lists':%% Line 3685
						 'keydelete'
					(%% Line 3685
					 MergeId, %% Line 3685
						  1, _3)
				in  %% Line 3684
				    call 'erlang':'put'
					('$_qlc_merge_join_tmpfiles_', _4)
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  ( <_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6})
		  -| [{'function_name',{'end_merge_join',1}}] )
	    -| ['compiler_generated'] )
	end
'end_all_merge_joins'/0 =
    %% Line 3688
    fun () ->
	let <_9> =
	    fun (_7) ->
		%% Line 3690
		apply 'end_merge_join'/1
		    ({'m',_7,'undefined','undefined','undefined'})
	in  let <_6> =
		letrec
		    'lc$^0'/1 =
			%% Line 3691
			fun (_4) ->
			    case _4 of
			      <[{Id,_X_Fd,_X_FileName}|_1]> when 'true' ->
				  let <_5> =
				      apply 'lc$^0'/1
					  (_1)
				  in  ( [Id|_5]
					-| ['compiler_generated'] )
			      ( <[_0|_1]> when 'true' ->
				    apply 'lc$^0'/1
					(_1)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_11> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_11})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  let <_2> =
			call %% Line 3691
			     'erlang':%% Line 3691
				      'get'
			    (%% Line 3691
			     '$_qlc_merge_join_tmpfiles_')
		    in  let <_3> =
			    call %% Line 3691
				 'lists':%% Line 3691
					 'flatten'
				(%% Line 3691
				 [_2|[]])
			in  %% Line 3691
			    apply 'lc$^0'/1
				(_3)
	    in  do  %% Line 3689
		    call 'lists':'foreach'
			(_9, _6)
		    %% Line 3692
		    call 'erlang':'erase'
			('$_qlc_merge_join_tmpfiles_')
'merge_join_id'/0 =
    %% Line 3694
    fun () ->
	do  %% Line 3695
	    case call 'erlang':'get'
		     ('$_qlc_merge_join_tmpfiles_') of
	      %% Line 3696
	      <'undefined'> when 'true' ->
		  %% Line 3697
		  call 'erlang':'put'
		      ('$_qlc_merge_join_tmpfiles_', [])
	      %% Line 3698
	      <_1> when 'true' ->
		  'ok'
	    end
	    %% Line 3701
	    call 'erlang':'make_ref'
		()
'tmp_merge_file'/1 =
    %% Line 3703
    fun (_0) ->
	let <TmpFiles> =
	    call %% Line 3704
		 'erlang':%% Line 3704
			  'get'
		(%% Line 3704
		 '$_qlc_merge_join_tmpfiles_')
	in  %% Line 3705
	    case call 'lists':'keyfind'
		     (_0, 1, TmpFiles) of
	      %% Line 3706
	      <{_4,Fd,FileName}>
		  when call 'erlang':'=:='
			(_4,
			 _0) ->
		  %% Line 3707
		  {Fd,FileName}
	      %% Line 3708
	      <'false'> when 'true' ->
		  %% Line 3709
		  'none'
	      ( <_2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_2})
		-| ['compiler_generated'] )
	    end
'decr_list_size'/2 =
    %% Line 3712
    fun (_0,_1) ->
	case <_0,_1> of
	  <Sz0,E>
	      when call 'erlang':'is_integer'
		    (Sz0) ->
	      let <_2> =
		  call %% Line 3713
		       'erlang':%% Line 3713
				'external_size'
		      (%% Line 3713
		       E)
	      in  %% Line 3713
		  call 'erlang':'-'
		      (Sz0, _2)
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'decr_list_size',2}}] )
	    -| ['compiler_generated'] )
	end
'lookup_join'/5 =
    %% Line 3717
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <[E1|L1],C1,LuF,C2,Rev> when 'true' ->
	      let <K1> =
		  call %% Line 3718
		       'erlang':%% Line 3718
				'element'
		      (%% Line 3718
		       C1, %% Line 3718
			   E1)
	      in  %% Line 3719
		  case apply LuF
			   (C2, [K1|[]]) of
		    %% Line 3720
		    <[]> when 'true' ->
			%% Line 3721
			apply 'lookup_join'/5
			    (L1, C1, LuF, C2, Rev)
		    %% Line 3722
		    <[E2|[]]>
			when ( call 'erlang':'=:='
				(Rev,
				 'true')
			    -| ['compiler_generated'] ) ->
			let <_6> =
			    fun () ->
				%% Line 3723
				apply 'lookup_join'/5
				    (L1, C1, LuF, C2, Rev)
			in  %% Line 3723
			    [[E2|E1]|_6]
		    %% Line 3724
		    <[E2|[]]> when 'true' ->
			let <_7> =
			    fun () ->
				%% Line 3725
				apply 'lookup_join'/5
				    (L1, C1, LuF, C2, Rev)
			in  %% Line 3725
			    [[E1|E2]|_7]
		    %% Line 3726
		    <E2s>
			when let <_8> =
			      call 'erlang':'is_list'
				  (E2s)
			  in  let <_9> =
				  call 'erlang':'=:='
				      (Rev, 'true')
			      in  call 'erlang':'and'
				      (_8, _9) ->
			let <_10> =
			    fun () ->
				%% Line 3728
				apply 'lookup_join'/5
				    (L1, C1, LuF, C2, Rev)
			in  %% Line 3727
			    ( letrec
				  'lc$^3'/1 =
				      fun (_13) ->
					  case _13 of
					    <[E2|_12]> when 'true' ->
						let <_14> =
						    apply 'lc$^3'/1
							(_12)
						in  ( [[E2|E1]|_14]
						      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						_10
					    ( <_27> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_27})
						    -| [{'function_name',{'lc$^3',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^3'/1
				      (E2s)
			      -| ['list_comprehension'] )
		    %% Line 3729
		    <E2s>
			when call 'erlang':'is_list'
			      (E2s) ->
			let <_15> =
			    fun () ->
				%% Line 3731
				apply 'lookup_join'/5
				    (L1, C1, LuF, C2, Rev)
			in  %% Line 3730
			    ( letrec
				  'lc$^5'/1 =
				      fun (_18) ->
					  case _18 of
					    <[E2|_17]> when 'true' ->
						let <_19> =
						    apply 'lc$^5'/1
							(_17)
						in  ( [[E1|E2]|_19]
						      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						_15
					    ( <_28> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_28})
						    -| [{'function_name',{'lc$^5',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^5'/1
				      (E2s)
			      -| ['list_comprehension'] )
		    %% Line 3732
		    <Term> when 'true' ->
			%% Line 3733
			Term
		  end
	  %% Line 3735
	  <Cont = [],_X_C1,_X_LuF,_X_C2,_X_Rev> when 'true' ->
	      %% Line 3736
	      Cont
	  %% Line 3737
	  <F1,C1,LuF,C2,Rev> when 'true' ->
	      %% Line 3738
	      case apply F1
		       () of
		%% Line 3739
		<L1>
		    when call 'erlang':'is_list'
			  (L1) ->
		    %% Line 3740
		    apply 'lookup_join'/5
			(L1, C1, LuF, C2, Rev)
		%% Line 3741
		<T1> when 'true' ->
		    %% Line 3742
		    T1
	      end
	end
'maybe_error_logger'/2 =
    %% Line 3745
    fun (_0,_1) ->
	case <_0,_1> of
	  <'allowed',_20> when 'true' ->
	      %% Line 3746
	      'ok'
	  %% Line 3747
	  <Name,Why> when 'true' ->
	      %% Line 3748
	      case %% Line 3749
		   apply 'expand_stacktrace'/0
		       () of
		<[_21|[_22|[{'qlc','maybe_error_logger',_23,_24}|Stacktrace]]]> when 'true' ->
		    let <Trimmer> =
			fun (_5,_4,_3) ->
			    %% Line 3750
			    call 'erlang':'=:='
				(_5, 'erl_eval')
		    in  let <Formater> =
			    fun (_12,_11) ->
				%% Line 3751
				call 'io_lib':'print'
				    (_12, _11, 80, -1)
			in  let <X> =
				call %% Line 3752
				     'erl_error':%% Line 3752
						 'format_stacktrace'
				    (%% Line 3752
				     1, %% Line 3752
					Stacktrace, %% Line 3752
						    Trimmer, %% Line 3752
							     Formater)
			    in  let <_17> =
				    call %% Line 3754
					 'lists':%% Line 3754
						 'flatten'
					(%% Line 3754
					 X)
				in  %% Line 3753
				    call 'error_logger':Name
					([113|[108|[99|[58|[32|[116|[101|[109|[112|[111|[114|[97|[114|[121|[32|[102|[105|[108|[101|[32|[119|[97|[115|[32|[110|[101|[101|[100|[101|[100|[32|[102|[111|[114|[32|[126|[119|[10|[126|[116|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 3754
																																			  [Why|[_17|[]]])
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	end
'expand_stacktrace'/0 =
    %% Line 3756
    fun () ->
	let <D> =
	    call %% Line 3757
		 'erlang':%% Line 3757
			  'system_flag'
		(%% Line 3757
		 'backtrace_depth', %% Line 3757
				    8)
	in  %% Line 3758
	    letrec
		'after$^0'/0 =
		    fun () ->
			%% Line 3762
			call 'erlang':'system_flag'
			    ('backtrace_depth', D)
	    in  try
		    let <_1> =
			call %% Line 3760
			     'erlang':%% Line 3760
				      'max'
			    (%% Line 3760
			     1, %% Line 3760
				D)
		    in  %% Line 3760
			apply 'expand_stacktrace'/1
			    (_1)
		of <_2> ->
		    do  ( apply 'after$^0'/0
			      ()
			  -| ['compiler_generated'] )
			_2
		catch <_5,_4,_3> ->
		    do  ( apply 'after$^0'/0
			      ()
			  -| ['compiler_generated'] )
			primop 'raise'
			    (_3, _4)
'expand_stacktrace'/1 =
    %% Line 3765
    fun (_0) ->
	do  %% Line 3766
	    ( call ( 'erlang'
		     -| ['result_not_wanted'] ):( 'system_flag'
						  -| ['result_not_wanted'] )
		  (( 'backtrace_depth'
		     -| ['result_not_wanted'] ), _0)
	      -| ['result_not_wanted'] )
	    let <_2> =
		catch
		    %% Line 3767
		    call 'erlang':'error'
			('foo')
	    in  %% Line 3767
		case _2 of
		  <{'EXIT',{'foo',Stacktrace}}> when 'true' ->
		      let <_7> =
			  fun (_5) ->
			      %% Line 3768
			      case _5 of
				<{M,_16,_17,_18}> when 'true' ->
				    call 'erlang':'=/='
					(M, 'qlc')
				( <_6> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_6})
					-| [{'function_name',{'-expand_stacktrace/1-fun-0-',1}}] )
				  -| ['compiler_generated'] )
			      end
		      in  let <_4> =
			      call %% Line 3769
				   'lists':%% Line 3769
					   'reverse'
				  (%% Line 3769
				   Stacktrace)
			  in  let <L> =
				  call %% Line 3768
				       'lists':%% Line 3768
					       'takewhile'
				      (_7, _4)
			      in  %% Line 3770
				  case <> of
				    %% Line 3771
				    <>
					when try
					      let <_10> =
						  call 'erlang':'length'
						      (L)
					      in  ( let <_13> =
							case call 'erlang':'<'
								 (_10, 3) of
							  ( <( 'true'
							       -| ['compiler_generated'] )> when 'true' ->
								let <_11> =
								    call 'erlang':'length'
									(Stacktrace)
								in  call 'erlang':'=:='
									(_11, _0)
							    -| ['compiler_generated'] )
							  ( <( 'false'
							       -| ['compiler_generated'] )> when 'true' ->
								'false'
							    -| ['compiler_generated'] )
							  ( <_9> when 'true' ->
								_9
							    -| ['compiler_generated'] )
							end
						    in  ( call 'erlang':'=:='
							      (( _13
								 -| ['compiler_generated'] ), 'true')
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      'false' ->
					let <_14> =
					    call %% Line 3772
						 'erlang':%% Line 3772
							  '+'
						(_0, %% Line 3772
						     5)
					in  %% Line 3772
					    apply 'expand_stacktrace'/1
						(_14)
				    %% Line 3773
				    <> when 'true' ->
					%% Line 3774
					Stacktrace
				  end
		  ( <_3> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_3})
		    -| ['compiler_generated'] )
		end
'write_binary_terms'/3 =
    %% Line 3777
    fun (_0,_1,_2) ->
	let <_3> =
	    apply %% Line 3778
		  'size_bin'/2
		(_0, %% Line 3778
		     [])
	in  %% Line 3778
	    case call 'file':'write'
		     (_1, _3) of
	      %% Line 3779
	      <'ok'> when 'true' ->
		  %% Line 3780
		  'ok'
	      %% Line 3781
	      <Error> when 'true' ->
		  %% Line 3782
		  apply 'file_error'/2
		      (_2, Error)
	    end
'post_funs'/1 =
    %% Line 3785
    fun (_0) ->
	do  %% Line 3786
	    apply 'end_all_merge_joins'/0
		()
	    %% Line 3787
	    apply 'local_post'/1
		(_0)
'local_post'/1 =
    %% Line 3789
    fun (_0) ->
	let <_3> =
	    fun (_1) ->
		%% Line 3790
		case _1 of
		  <'undefined'> when 'true' ->
		      'ok'
		  %% Line 3791
		  <F> when 'true' ->
		      catch
			  apply F
			      ()
		end
	in  %% Line 3790
	    call 'lists':'foreach'
		(_3, _0)
'call'/4 =
    %% Line 3794
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <'undefined',_X_Arg,Default,_X_Post> when 'true' ->
	      %% Line 3795
	      Default
	  %% Line 3796
	  <Fun,Arg,_X_Default,Post> when 'true' ->
	      %% Line 3797
	      try
		  %% Line 3798
		  apply Fun
		      (Arg)
	      of <_4> ->
		  _4
	      catch <_7,_6,_5> ->
		  do  %% Line 3800
		      apply 'post_funs'/1
			  (Post)
		      primop 'raw_raise'
			  (_7, _6, _5)
	end
'grd'/2 =
    %% Line 3804
    fun (_0,_1) ->
	case <_0,_1> of
	  <'undefined',_X_Arg> when 'true' ->
	      %% Line 3805
	      'false'
	  %% Line 3806
	  <Fun,Arg> when 'true' ->
	      %% Line 3807
	      case apply Fun
		       (Arg) of
		%% Line 3808
		<'true'> when 'true' ->
		    %% Line 3809
		    'true'
		%% Line 3810
		<_5> when 'true' ->
		    %% Line 3811
		    'false'
	      end
	end
'anno0'/0 =
    %% Line 3814
    fun () ->
	%% Line 3815
	apply 'anno'/1
	    (0)
'anno1'/0 =
    %% Line 3817
    fun () ->
	%% Line 3818
	apply 'anno'/1
	    (1)
'anno'/1 =
    %% Line 3820
    fun (_0) ->
	%% Line 3821
	call 'erl_anno':'new'
	    (_0)
'family'/1 =
    %% Line 3823
    fun (_0) ->
	let <_1> =
	    call %% Line 3824
		 'sofs':%% Line 3824
			'relation'
		(_0)
	in  let <_2> =
		call %% Line 3824
		     'sofs':%% Line 3824
			    'relation_to_family'
		    (_1)
	    in  %% Line 3824
		call 'sofs':'to_external'
		    (_2)
'family_union'/1 =
    %% Line 3826
    fun (_0) ->
	let <R> =
	    call %% Line 3827
		 'sofs':%% Line 3827
			'relation'
		(_0, %% Line 3827
		     [{'atom',['atom']}])
	in  let <_2> =
		call %% Line 3828
		     'sofs':%% Line 3828
			    'relation_to_family'
		    (%% Line 3828
		     R)
	    in  let <_3> =
		    call %% Line 3828
			 'sofs':%% Line 3828
				'family_union'
			(_2)
		in  %% Line 3828
		    call 'sofs':'to_external'
			(_3)
'file_error'/2 =
    %% Line 3830
    fun (_0,_1) ->
	case <_0,_1> of
	  <File,{'error',Reason}> when 'true' ->
	      %% Line 3831
	      apply 'error'/1
		  ({'file_error',File,Reason})
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'file_error',2}}] )
	    -| ['compiler_generated'] )
	end
'throw_file_error'/2 =
    %% Line 3835
    fun (_0,_1) ->
	case <_0,_1> of
	  <File,{'error',Reason}> when 'true' ->
	      %% Line 3836
	      apply 'throw_reason'/1
		  ({'file_error',File,Reason})
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'throw_file_error',2}}] )
	    -| ['compiler_generated'] )
	end
'throw_reason'/1 =
    %% Line 3840
    fun (_0) ->
	let <_1> =
	    apply %% Line 3841
		  'error'/1
		(_0)
	in  %% Line 3841
	    apply 'throw_error'/1
		(_1)
'throw_error'/1 =
    %% Line 3845
    fun (_0) ->
	%% Line 3846
	call 'erlang':'throw'
	    (_0)
'error'/1 =
    %% Line 3848
    fun (_0) ->
	%% Line 3849
	{'error','qlc',_0}
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('qlc')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('qlc', _0)
end