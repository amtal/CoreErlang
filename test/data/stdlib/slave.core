module 'slave' ['module_info'/0,
		'module_info'/1,
		'pseudo'/1,
		'pseudo'/2,
		'relay'/1,
		'slave_start'/1,
		'start'/1,
		'start'/2,
		'start'/3,
		'start'/5,
		'start_link'/1,
		'start_link'/2,
		'start_link'/3,
		'stop'/1,
		'wait_for_master_to_die'/2,
		'wait_for_slave'/7]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[115|[108|[97|[118|[101|[46|[101|[114|[108]]]]]]]]]]]]],1}],
		%% Line 58
		'spec' =
		    %% Line 58
		    [{{'pseudo',2},[{'type',58,'bounded_fun',[{'type',58,'fun',[{'type',58,'product',[{'var',58,'Master'}|[{'var',58,'ServerList'}]]}|[{'atom',58,'ok'}]]}|[[{'type',59,'constraint',[{'atom',59,'is_subtype'}|[[{'var',59,'Master'}|[{'type',59,'node',[]}]]]]}|[{'type',60,'constraint',[{'atom',60,'is_subtype'}|[[{'var',60,'ServerList'}|[{'type',60,'list',[{'type',60,'atom',[]}]}]]]]}]]]]}]}],
		%% Line 76
		'spec' =
		    %% Line 76
		    [{{'relay',1},[{'type',76,'bounded_fun',[{'type',76,'fun',[{'type',76,'product',[{'var',76,'Pid'}]}|[{'type',76,'no_return',[]}]]}|[[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'Pid'}|[{'type',77,'pid',[]}]]]]}]]]}]}],
		%% Line 130
		'spec' =
		    %% Line 130
		    [{{'start',1},[{'type',130,'bounded_fun',[{'type',130,'fun',[{'type',130,'product',[{'var',130,'Host'}]}|[{'type',130,'union',[{'type',130,'tuple',[{'atom',130,'ok'}|[{'var',130,'Node'}]]}|[{'type',130,'tuple',[{'atom',130,'error'}|[{'var',130,'Reason'}]]}]]}]]}|[[{'type',131,'constraint',[{'atom',131,'is_subtype'}|[[{'var',131,'Host'}|[{'remote_type',131,[{'atom',131,'inet'}|[{'atom',131,'hostname'}|[[]]]]}]]]]}|[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'Node'}|[{'type',132,'node',[]}]]]]}|[{'type',133,'constraint',[{'atom',133,'is_subtype'}|[[{'var',133,'Reason'}|[{'type',133,'union',[{'atom',133,'timeout'}|[{'atom',133,'no_rsh'}|[{'type',133,'tuple',[{'atom',133,'already_running'}|[{'var',133,'Node'}]]}]]]}]]]]}]]]]]}]}],
		%% Line 140
		'spec' =
		    %% Line 140
		    [{{'start',2},[{'type',140,'bounded_fun',[{'type',140,'fun',[{'type',140,'product',[{'var',140,'Host'}|[{'var',140,'Name'}]]}|[{'type',140,'union',[{'type',140,'tuple',[{'atom',140,'ok'}|[{'var',140,'Node'}]]}|[{'type',140,'tuple',[{'atom',140,'error'}|[{'var',140,'Reason'}]]}]]}]]}|[[{'type',141,'constraint',[{'atom',141,'is_subtype'}|[[{'var',141,'Host'}|[{'remote_type',141,[{'atom',141,'inet'}|[{'atom',141,'hostname'}|[[]]]]}]]]]}|[{'type',142,'constraint',[{'atom',142,'is_subtype'}|[[{'var',142,'Name'}|[{'type',142,'union',[{'type',142,'atom',[]}|[{'type',142,'string',[]}]]}]]]]}|[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'Node'}|[{'type',143,'node',[]}]]]]}|[{'type',144,'constraint',[{'atom',144,'is_subtype'}|[[{'var',144,'Reason'}|[{'type',144,'union',[{'atom',144,'timeout'}|[{'atom',144,'no_rsh'}|[{'type',144,'tuple',[{'atom',144,'already_running'}|[{'var',144,'Node'}]]}]]]}]]]]}]]]]]]}]}],
		%% Line 149
		'spec' =
		    %% Line 149
		    [{{'start',3},[{'type',149,'bounded_fun',[{'type',149,'fun',[{'type',149,'product',[{'var',149,'Host'}|[{'var',149,'Name'}|[{'var',149,'Args'}]]]}|[{'type',149,'union',[{'type',149,'tuple',[{'atom',149,'ok'}|[{'var',149,'Node'}]]}|[{'type',149,'tuple',[{'atom',149,'error'}|[{'var',149,'Reason'}]]}]]}]]}|[[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'Host'}|[{'remote_type',150,[{'atom',150,'inet'}|[{'atom',150,'hostname'}|[[]]]]}]]]]}|[{'type',151,'constraint',[{'atom',151,'is_subtype'}|[[{'var',151,'Name'}|[{'type',151,'union',[{'type',151,'atom',[]}|[{'type',151,'string',[]}]]}]]]]}|[{'type',152,'constraint',[{'atom',152,'is_subtype'}|[[{'var',152,'Args'}|[{'type',152,'string',[]}]]]]}|[{'type',153,'constraint',[{'atom',153,'is_subtype'}|[[{'var',153,'Node'}|[{'type',153,'node',[]}]]]]}|[{'type',154,'constraint',[{'atom',154,'is_subtype'}|[[{'var',154,'Reason'}|[{'type',154,'union',[{'atom',154,'timeout'}|[{'atom',154,'no_rsh'}|[{'type',154,'tuple',[{'atom',154,'already_running'}|[{'var',154,'Node'}]]}]]]}]]]]}]]]]]]]}]}],
		%% Line 159
		'spec' =
		    %% Line 159
		    [{{'start_link',1},[{'type',159,'bounded_fun',[{'type',159,'fun',[{'type',159,'product',[{'var',159,'Host'}]}|[{'type',159,'union',[{'type',159,'tuple',[{'atom',159,'ok'}|[{'var',159,'Node'}]]}|[{'type',159,'tuple',[{'atom',159,'error'}|[{'var',159,'Reason'}]]}]]}]]}|[[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'Host'}|[{'remote_type',160,[{'atom',160,'inet'}|[{'atom',160,'hostname'}|[[]]]]}]]]]}|[{'type',161,'constraint',[{'atom',161,'is_subtype'}|[[{'var',161,'Node'}|[{'type',161,'node',[]}]]]]}|[{'type',162,'constraint',[{'atom',162,'is_subtype'}|[[{'var',162,'Reason'}|[{'type',162,'union',[{'atom',162,'timeout'}|[{'atom',162,'no_rsh'}|[{'type',162,'tuple',[{'atom',162,'already_running'}|[{'var',162,'Node'}]]}]]]}]]]]}]]]]]}]}],
		%% Line 169
		'spec' =
		    %% Line 169
		    [{{'start_link',2},[{'type',169,'bounded_fun',[{'type',169,'fun',[{'type',169,'product',[{'var',169,'Host'}|[{'var',169,'Name'}]]}|[{'type',169,'union',[{'type',169,'tuple',[{'atom',169,'ok'}|[{'var',169,'Node'}]]}|[{'type',169,'tuple',[{'atom',169,'error'}|[{'var',169,'Reason'}]]}]]}]]}|[[{'type',170,'constraint',[{'atom',170,'is_subtype'}|[[{'var',170,'Host'}|[{'remote_type',170,[{'atom',170,'inet'}|[{'atom',170,'hostname'}|[[]]]]}]]]]}|[{'type',171,'constraint',[{'atom',171,'is_subtype'}|[[{'var',171,'Name'}|[{'type',171,'union',[{'type',171,'atom',[]}|[{'type',171,'string',[]}]]}]]]]}|[{'type',172,'constraint',[{'atom',172,'is_subtype'}|[[{'var',172,'Node'}|[{'type',172,'node',[]}]]]]}|[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'Reason'}|[{'type',173,'union',[{'atom',173,'timeout'}|[{'atom',173,'no_rsh'}|[{'type',173,'tuple',[{'atom',173,'already_running'}|[{'var',173,'Node'}]]}]]]}]]]]}]]]]]]}]}],
		%% Line 178
		'spec' =
		    %% Line 178
		    [{{'start_link',3},[{'type',178,'bounded_fun',[{'type',178,'fun',[{'type',178,'product',[{'var',178,'Host'}|[{'var',178,'Name'}|[{'var',178,'Args'}]]]}|[{'type',178,'union',[{'type',178,'tuple',[{'atom',178,'ok'}|[{'var',178,'Node'}]]}|[{'type',178,'tuple',[{'atom',178,'error'}|[{'var',178,'Reason'}]]}]]}]]}|[[{'type',179,'constraint',[{'atom',179,'is_subtype'}|[[{'var',179,'Host'}|[{'remote_type',179,[{'atom',179,'inet'}|[{'atom',179,'hostname'}|[[]]]]}]]]]}|[{'type',180,'constraint',[{'atom',180,'is_subtype'}|[[{'var',180,'Name'}|[{'type',180,'union',[{'type',180,'atom',[]}|[{'type',180,'string',[]}]]}]]]]}|[{'type',181,'constraint',[{'atom',181,'is_subtype'}|[[{'var',181,'Args'}|[{'type',181,'string',[]}]]]]}|[{'type',182,'constraint',[{'atom',182,'is_subtype'}|[[{'var',182,'Node'}|[{'type',182,'node',[]}]]]]}|[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'Reason'}|[{'type',183,'union',[{'atom',183,'timeout'}|[{'atom',183,'no_rsh'}|[{'type',183,'tuple',[{'atom',183,'already_running'}|[{'var',183,'Node'}]]}]]]}]]]]}]]]]]]]}]}],
		%% Line 209
		'spec' =
		    %% Line 209
		    [{{'stop',1},[{'type',209,'bounded_fun',[{'type',209,'fun',[{'type',209,'product',[{'var',209,'Node'}]}|[{'atom',209,'ok'}]]}|[[{'type',210,'constraint',[{'atom',210,'is_subtype'}|[[{'var',210,'Node'}|[{'type',210,'node',[]}]]]]}]]]}]}]]
'pseudo'/1 =
    %% Line 53
    fun (_0) ->
	case _0 of
	  <[Master|ServerList]> when 'true' ->
	      %% Line 54
	      apply 'pseudo'/2
		  (Master, ServerList)
	  %% Line 55
	  <_2> when 'true' ->
	      %% Line 56
	      call 'error_logger':'error_msg'
		  ([78|[111|[32|[109|[97|[115|[116|[101|[114|[32|[110|[111|[100|[101|[32|[103|[105|[118|[101|[110|[32|[116|[111|[32|[115|[108|[97|[118|[101|[58|[112|[115|[101|[117|[100|[111|[47|[49|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	end
'pseudo'/2 =
    %% Line 62
    fun (_0,_1) ->
	case <_0,_1> of
	  <_5,[]> when 'true' ->
	      'ok'
	  %% Line 63
	  <Master,[S|Tail]> when 'true' ->
	      let <_2> =
		  call %% Line 64
		       'erlang':%% Line 64
				'whereis'
		      (%% Line 64
		       S)
	      in  do  %% Line 64
		      apply 'start_pseudo'/3
			  (S, _2, Master)
		      %% Line 65
		      apply 'pseudo'/2
			  (Master, Tail)
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'pseudo',2}}] )
	    -| ['compiler_generated'] )
	end
'start_pseudo'/3 =
    %% Line 67
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Name,'undefined',Master> when 'true' ->
	      let <X> =
		  call %% Line 68
		       'rpc':%% Line 68
			     'call'
		      (%% Line 68
		       Master, %% Line 68
			       'erlang', %% Line 68
					 'whereis', %% Line 68
						    [Name|[]])
	      in  let <_4> =
		      call %% Line 69
			   'erlang':%% Line 69
				    'spawn'
			  (%% Line 69
			   'slave', %% Line 69
				    'relay', %% Line 69
					     [X|[]])
		  in  %% Line 69
		      call 'erlang':'register'
			  (Name, _4)
	  %% Line 71
	  <_8,_9,_10> when 'true' ->
	      'ok'
	end
'relay'/1 =
    %% Line 79
    fun (_0) ->
	case _0 of
	  <{'badrpc',Reason}> when 'true' ->
	      let <_1> =
		  call %% Line 80
		       'erlang':%% Line 80
				'self'
		      ()
	      in  do  %% Line 80
		      call 'error_logger':'error_msg'
			  ([32|[42|[42|[32|[101|[120|[105|[116|[105|[110|[103|[32|[114|[101|[108|[97|[121|[32|[115|[101|[114|[118|[101|[114|[32|[126|[119|[32|[58|[126|[116|[119|[32|[32|[42|[42|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_1|[Reason|[]]])
		      %% Line 81
		      call 'erlang':'exit'
			  (Reason)
	  %% Line 82
	  <'undefined'> when 'true' ->
	      let <_2> =
		  call %% Line 83
		       'erlang':%% Line 83
				'self'
		      ()
	      in  do  %% Line 83
		      call 'error_logger':'error_msg'
			  ([32|[42|[42|[32|[101|[120|[105|[116|[105|[110|[103|[32|[114|[101|[108|[97|[121|[32|[115|[101|[114|[118|[101|[114|[32|[126|[119|[32|[32|[42|[42|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_2|[]])
		      %% Line 84
		      call 'erlang':'exit'
			  ('undefined')
	  %% Line 85
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_0) ->
	      %% Line 86
	      apply 'relay1'/1
		  (Pid)
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'relay',1}}] )
	    -| ['compiler_generated'] )
	end
'relay1'/1 =
    %% Line 88
    fun (_0) ->
	do  %% Line 89
	    receive
	      %% Line 90
	      <X> when 'true' ->
		  %% Line 91
		  call 'erlang':'!'
		      (_0, X)
	    after 'infinity' ->
	      'ok'
	    %% Line 93
	    apply 'relay1'/1
		(_0)
'start'/1 =
    %% Line 135
    fun (_0) ->
	let <_1> =
	    call %% Line 136
		 'erlang':%% Line 136
			  'node'
		()
	in  let <L> =
		call %% Line 136
		     'erlang':%% Line 136
			      'atom_to_list'
		    (_1)
	    in  let <Name> =
		    apply %% Line 137
			  'upto'/2
			(%% Line 137
			 64, %% Line 137
			     L)
		in  %% Line 138
		    apply 'start'/4
			(_0, Name, [], 'no_link')
'start'/2 =
    %% Line 146
    fun (_0,_1) ->
	%% Line 147
	apply 'start'/3
	    (_0, _1, [])
'start'/3 =
    %% Line 156
    fun (_0,_1,_2) ->
	%% Line 157
	apply 'start'/4
	    (_0, _1, _2, 'no_link')
'start_link'/1 =
    %% Line 164
    fun (_0) ->
	let <_1> =
	    call %% Line 165
		 'erlang':%% Line 165
			  'node'
		()
	in  let <L> =
		call %% Line 165
		     'erlang':%% Line 165
			      'atom_to_list'
		    (_1)
	    in  let <Name> =
		    apply %% Line 166
			  'upto'/2
			(%% Line 166
			 64, %% Line 166
			     L)
		in  let <_4> =
			call %% Line 167
			     'erlang':%% Line 167
				      'self'
			    ()
		    in  %% Line 167
			apply 'start'/4
			    (_0, Name, [], _4)
'start_link'/2 =
    %% Line 175
    fun (_0,_1) ->
	%% Line 176
	apply 'start_link'/3
	    (_0, _1, [])
'start_link'/3 =
    %% Line 185
    fun (_0,_1,_2) ->
	let <_3> =
	    call %% Line 186
		 'erlang':%% Line 186
			  'self'
		()
	in  %% Line 186
	    apply 'start'/4
		(_0, _1, _2, _3)
'start'/4 =
    %% Line 188
    fun (_0,_1,_2,_3) ->
	let <Prog> =
	    apply %% Line 189
		  'progname'/0
		()
	in  %% Line 190
	    apply 'start'/5
		(_0, _1, _2, _3, Prog)
'start'/5 =
    %% Line 192
    fun (_0,_1,_2,_3,_4) ->
	let <_7> =
	    case %% Line 194
		 call 'net_kernel':'longnames'
		     () of
	      %% Line 195
	      <'true'> when 'true' ->
		  apply 'dns'/1
		      (_0)
	      %% Line 196
	      <'false'> when 'true' ->
		  let <_5> =
		      apply 'to_list'/1
			  (_0)
		  in  apply 'strip_host_name'/1
			  (_5)
	      %% Line 197
	      <'ignored'> when 'true' ->
		  call 'erlang':'exit'
		      ('not_alive')
	      ( <_6> when 'true' ->
		    %% Line 194
		    primop 'match_fail'
			({'case_clause',_6})
		-| ['compiler_generated'] )
	    end
	in  let <_9> =
		call %% Line 199
		     'lists':%% Line 199
			     'concat'
		    (%% Line 199
		     [_1|[[64]|[_7|[]]]])
	    in  let <Node> =
		    call %% Line 199
			 'erlang':%% Line 199
				  'list_to_atom'
			(_9)
		in  %% Line 200
		    case call 'net_adm':'ping'
			     (Node) of
		      %% Line 201
		      <'pang'> when 'true' ->
			  %% Line 202
			  apply 'start_it'/6
			      (_7, _1, Node, _2, _3, _4)
		      %% Line 203
		      <'pong'> when 'true' ->
			  %% Line 204
			  {'error',{'already_running',Node}}
		      ( <_11> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_11})
			-| ['compiler_generated'] )
		    end
'stop'/1 =
    %% Line 212
    fun (_0) ->
	do  %% Line 213
	    call 'rpc':'call'
		(_0, 'erlang', 'halt', [])
	    %% Line 214
	    'ok'
'start_it'/6 =
    %% Line 218
    fun (_0,_1,_2,_3,_4,_5) ->
	let <_6> =
	    call %% Line 219
		 'erlang':%% Line 219
			  'self'
		()
	in  do  %% Line 219
		call 'erlang':'spawn'
		    ('slave', 'wait_for_slave', [_6|[_0|[_1|[_2|[_3|[_4|%% Line 220
									[_5|[]]]]]]]])
		%% Line 221
		receive
		  %% Line 222
		  <{'result',Result}> when 'true' ->
		      Result
		after 'infinity' ->
		  'true'
'wait_for_slave'/7 =
    %% Line 227
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	let <Waiter> =
	    apply %% Line 228
		  'register_unique_name'/1
		(%% Line 228
		 0)
	in  %% Line 229
	    case apply 'mk_cmd'/5
		     (_1, _2, _4, Waiter, _6) of
	      %% Line 230
	      <{'ok',Cmd}> when 'true' ->
		  do  %% Line 231
		      call 'erlang':'open_port'
			  ({'spawn',Cmd}, ['stream'])
		      %% Line 232
		      receive
			%% Line 233
			<{SlavePid,'slave_started'}> when 'true' ->
			    do  %% Line 234
				call 'erlang':'unregister'
				    (Waiter)
				%% Line 235
				apply 'slave_started'/3
				    (_0, _5, SlavePid)
		      after %% Line 236
			    32000 ->
			let <_8> =
			    call %% Line 239
				 'lists':%% Line 239
					 'concat'
				(%% Line 239
				 [_2|[[64]|[_1|[]]]])
			in  %% Line 239
			    case call 'erlang':'list_to_atom'
				     (_8) of
			      <_19>
				  when call 'erlang':'=:='
					(_19,
					 _3) ->
				  do  %% Line 240
				      case call 'net_adm':'ping'
					       (_3) of
					%% Line 241
					<'pong'> when 'true' ->
					    %% Line 242
					    call 'erlang':'spawn'
						(_3, 'erlang', 'halt', [])
					%% Line 244
					<_20> when 'true' ->
					    'ok'
				      end
				      %% Line 247
				      call 'erlang':'!'
					  (_0, {'result',{'error','timeout'}})
			      ( <_9> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_9})
				-| ['compiler_generated'] )
			    end
	      %% Line 249
	      <Other> when 'true' ->
		  %% Line 250
		  call 'erlang':'!'
		      (_0, {'result',Other})
	    end
'slave_started'/3 =
    %% Line 253
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <ReplyTo,'no_link',Slave>
	      when call 'erlang':'is_pid'
		    (Slave) ->
	      let <_3> =
		  call %% Line 254
		       'erlang':%% Line 254
				'node'
		      (%% Line 254
		       Slave)
	      in  %% Line 254
		  call 'erlang':'!'
		      (ReplyTo, {'result',{'ok',_3}})
	  %% Line 255
	  <ReplyTo,Master,Slave>
	      when let <_4> =
		    call 'erlang':'is_pid'
			(Master)
		in  let <_5> =
			call 'erlang':'is_pid'
			    (Slave)
		    in  call 'erlang':'and'
			    (_4, _5) ->
	      do  %% Line 256
		  call 'erlang':'process_flag'
		      ('trap_exit', 'true')
		  do  %% Line 257
		      call 'erlang':'link'
			  (Master)
		      do  %% Line 258
			  call 'erlang':'link'
			      (Slave)
			  let <_6> =
			      call %% Line 259
				   'erlang':%% Line 259
					    'node'
				  (%% Line 259
				   Slave)
			  in  do  %% Line 259
				  call 'erlang':'!'
				      (ReplyTo, {'result',{'ok',_6}})
				  %% Line 260
				  apply 'one_way_link'/2
				      (Master, Slave)
	  ( <_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7})
		  -| [{'function_name',{'slave_started',3}}] )
	    -| ['compiler_generated'] )
	end
'one_way_link'/2 =
    %% Line 266
    fun (_0,_1) ->
	%% Line 267
	receive
	  %% Line 268
	  <{'EXIT',_5,_X_Reason}>
	      when call 'erlang':'=:='
		    (_5,
		     _0) ->
	      do  %% Line 269
		  call 'erlang':'unlink'
		      (_1)
		  let <_2> =
		      call %% Line 270
			   'erlang':%% Line 270
				    'node'
			  ()
		  in  %% Line 270
		      call 'erlang':'!'
			  (_1, {'nodedown',_2})
	  %% Line 271
	  <{'EXIT',_6,_X_Reason}>
	      when call 'erlang':'=:='
		    (_6,
		     _1) ->
	      %% Line 272
	      call 'erlang':'unlink'
		  (_0)
	  %% Line 273
	  <_X_Other> when 'true' ->
	      %% Line 274
	      apply 'one_way_link'/2
		  (_0, _1)
	after 'infinity' ->
	  'true'
'register_unique_name'/1 =
    %% Line 277
    fun (_0) ->
	let <_1> =
	    call %% Line 278
		 'lists':%% Line 278
			 'concat'
		(%% Line 278
		 [[115|[108|[97|[118|[101|[95|[119|[97|[105|[116|[101|[114|[95]]]]]]]]]]]]]|[_0|[]]])
	in  let <Name> =
		call %% Line 278
		     'erlang':%% Line 278
			      'list_to_atom'
		    (_1)
	    in  let <_4> =
		    catch
			let <_3> =
			    call %% Line 279
				 'erlang':%% Line 279
					  'self'
				()
			in  %% Line 279
			    call 'erlang':'register'
				(Name, _3)
		in  %% Line 279
		    case _4 of
		      %% Line 280
		      <'true'> when 'true' ->
			  %% Line 281
			  Name
		      %% Line 282
		      <{'EXIT',{'badarg',_8}}> when 'true' ->
			  let <_5> =
			      call %% Line 283
				   'erlang':%% Line 283
					    '+'
				  (_0, %% Line 283
				       1)
			  in  %% Line 283
			      apply 'register_unique_name'/1
				  (_5)
		      ( <_6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_6})
			-| ['compiler_generated'] )
		    end
'mk_cmd'/5 =
    %% Line 290
    fun (_0,_1,_2,_3,_4) ->
	let <Prog> =
	    apply %% Line 291
		  'quote_progname'/1
		(_4)
	in  let <_6> =
		call %% Line 293
		     'erlang':%% Line 293
			      'node'
		    ()
	    in  let <_7> =
		    apply %% Line 294
			  'long_or_short'/0
			()
		in  let <_8> =
			call %% Line 295
			     'erlang':%% Line 295
				      'node'
			    ()
		    in  let <BasicCmd> =
			    call %% Line 292
				 'lists':%% Line 292
					 'concat'
				(%% Line 292
				 [Prog|%% Line 293
				       [[32|[45|[100|[101|[116|[97|[99|[104|[101|[100|[32|[45|[110|[111|[105|[110|[112|[117|[116|[32|[45|[109|[97|[115|[116|[101|[114|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[_6|%% Line 294
																									  [[32]|[_7|[_1|[[64]|[_0|%% Line 295
																												  [[32|[45|[115|[32|[115|[108|[97|[118|[101|[32|[115|[108|[97|[118|[101|[95|[115|[116|[97|[114|[116|[32]]]]]]]]]]]]]]]]]]]]]]|[_8|%% Line 296
																																												  [[32]|[_3|%% Line 297
																																													    [[32]|[_2|[]]]]]]]]]]]]]]])
			in  let <_10> =
				call %% Line 298
				     'erlang':%% Line 298
					      'node'
				    ()
			    in  let <_11> =
				    call %% Line 298
					 'erlang':%% Line 298
						  'atom_to_list'
					(_10)
				in  %% Line 298
				    case apply 'after_char'/2
					     (64, _11) of
				      %% Line 299
				      <_20>
					  when call 'erlang':'=:='
						(_20,
						 _0) ->
					  %% Line 300
					  {'ok',BasicCmd}
				      %% Line 301
				      <_21> when 'true' ->
					  %% Line 302
					  case apply 'rsh'/0
						   () of
					    %% Line 303
					    <{'ok',Rsh}> when 'true' ->
						let <_12> =
						    call %% Line 304
							 'lists':%% Line 304
								 'concat'
							(%% Line 304
							 [Rsh|[[32]|[_0|[[32]|[BasicCmd|[]]]]]])
						in  %% Line 304
						    {'ok',_12}
					    %% Line 305
					    <Other> when 'true' ->
						%% Line 306
						Other
					  end
				    end
'progname'/0 =
    %% Line 311
    fun () ->
	%% Line 312
	case call 'init':'get_argument'
		 ('progname') of
	  %% Line 313
	  <{'ok',[[Prog|[]]|[]]}> when 'true' ->
	      %% Line 314
	      Prog
	  %% Line 315
	  <_X_Other> when 'true' ->
	      %% Line 316
	      [110|[111|[95|[112|[114|[111|[103|[95|[110|[97|[109|[101]]]]]]]]]]]]
	end
'quote_progname'/1 =
    %% Line 329
    fun (_0) ->
	let <_1> =
	    apply %% Line 330
		  'to_list'/1
		(_0)
	in  let <_2> =
		call %% Line 330
		     'string':%% Line 330
			      'lexemes'
		    (_1, %% Line 330
			 [32])
	    in  %% Line 330
		apply 'do_quote_progname'/1
		    (_2)
'do_quote_progname'/1 =
    %% Line 332
    fun (_0) ->
	case _0 of
	  <[Prog|[]]> when 'true' ->
	      let <_1> =
		  call %% Line 333
		       'erlang':%% Line 333
				'++'
		      (%% Line 333
		       Prog, %% Line 333
			     [34])
	      in  %% Line 333
		  [34|_1]
	  %% Line 334
	  <[Prog|_@r0 = [Arg|Args]]> when 'true' ->
	      %% Line 335
	      case call 'os':'find_executable'
		       (Prog) of
		%% Line 336
		<'false'> when 'true' ->
		    let <_2> =
			[32|%% Line 337
			    Arg]
		    in  let <_3> =
			    call %% Line 337
				 'erlang':%% Line 337
					  '++'
				(%% Line 337
				 Prog, _2)
			in  %% Line 337
			    apply 'do_quote_progname'/1
				([_3|Args])
		%% Line 338
		<_13> when 'true' ->
		    let <_6> =
			fun (_4) ->
			    %% Line 341
			    [[32]|[_4|[]]]
		    in  let <_7> =
			    call %% Line 341
				 'lists':%% Line 341
					 'map'
				(_6, %% Line 341
				     _@r0)
			in  let <_8> =
				call %% Line 341
				     'lists':%% Line 341
					     'flatten'
				    (_7)
			    in  let <_9> =
				    [34|_8]
				in  let <_10> =
					call %% Line 340
					     'erlang':%% Line 340
						      '++'
					    (%% Line 340
					     Prog, _9)
				    in  %% Line 340
					[34|_10]
	      end
	  ( <_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12})
		  -| [{'function_name',{'do_quote_progname',1}}] )
	    -| ['compiler_generated'] )
	end
'rsh'/0 =
    %% Line 350
    fun () ->
	let <_1> =
	    case %% Line 352
		 call 'init':'get_argument'
		     ('rsh') of
	      %% Line 353
	      <{'ok',[[Prog|[]]|[]]}> when 'true' ->
		  Prog
	      %% Line 354
	      <_4> when 'true' ->
		  [115|[115|[104]]]
	    end
	in  %% Line 356
	    case call 'os':'find_executable'
		     (_1) of
	      %% Line 357
	      <'false'> when 'true' ->
		  {'error','no_rsh'}
	      %% Line 358
	      <Path> when 'true' ->
		  {'ok',Path}
	    end
'long_or_short'/0 =
    %% Line 361
    fun () ->
	%% Line 362
	case call 'net_kernel':'longnames'
		 () of
	  %% Line 363
	  <'true'> when 'true' ->
	      [32|[45|[110|[97|[109|[101|[32]]]]]]]
	  %% Line 364
	  <'false'> when 'true' ->
	      [32|[45|[115|[110|[97|[109|[101|[32]]]]]]]]
	  ( <_0> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_0})
	    -| ['compiler_generated'] )
	end
'slave_start'/1 =
    %% Line 370
    fun (_0) ->
	case _0 of
	  <_@r0 = [Master|[Waiter|[]]]> when 'true' ->
	      %% Line 372
	      call 'erlang':'spawn'
		  ('slave', 'wait_for_master_to_die', _@r0)
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'slave_start',1}}] )
	    -| ['compiler_generated'] )
	end
'wait_for_master_to_die'/2 =
    %% Line 374
    fun (_0,_1) ->
	do  %% Line 376
	    call 'erlang':'process_flag'
		('trap_exit', 'true')
	    do  %% Line 377
		call 'erlang':'monitor_node'
		    (_0, 'true')
		let <_2> =
		    call %% Line 378
			 'erlang':%% Line 378
				  'self'
			()
		in  do  %% Line 378
			call 'erlang':'!'
			    ({_1,_0}, {_2,'slave_started'})
			%% Line 379
			apply 'wloop'/1
			    (_0)
'wloop'/1 =
    %% Line 381
    fun (_0) ->
	%% Line 382
	receive
	  %% Line 383
	  <{'nodedown',_2}>
	      when call 'erlang':'=:='
		    (_2,
		     _0) ->
	      %% Line 386
	      call 'erlang':'halt'
		  ()
	  %% Line 387
	  <_X_Other> when 'true' ->
	      %% Line 388
	      apply 'wloop'/1
		  (_0)
	after 'infinity' ->
	  'true'
'strip_host_name'/1 =
    %% Line 393
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      []
	  %% Line 394
	  <[46|_3]> when 'true' ->
	      []
	  %% Line 395
	  <[H|T]> when 'true' ->
	      let <_1> =
		  apply 'strip_host_name'/1
		      (T)
	      in  [H|_1]
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'strip_host_name',1}}] )
	    -| ['compiler_generated'] )
	end
'dns'/1 =
    %% Line 397
    fun (_0) ->
	case call 'net_adm':'dns_hostname'
		 (_0) of
	  <{'ok',Host}> when 'true' ->
	      Host
	  ( <_1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_1})
	    -| ['compiler_generated'] )
	end
'to_list'/1 =
    %% Line 399
    fun (_0) ->
	case _0 of
	  <X>
	      when call 'erlang':'is_list'
		    (_0) ->
	      X
	  %% Line 400
	  <X>
	      when call 'erlang':'is_atom'
		    (_0) ->
	      call 'erlang':'atom_to_list'
		  (X)
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'to_list',1}}] )
	    -| ['compiler_generated'] )
	end
'upto'/2 =
    %% Line 402
    fun (_0,_1) ->
	case <_0,_1> of
	  <_5,[]> when 'true' ->
	      []
	  %% Line 403
	  <Char,[_6|_7]>
	      when call 'erlang':'=:='
		    (_6,
		     Char) ->
	      []
	  %% Line 404
	  <Char,[H|T]> when 'true' ->
	      let <_2> =
		  apply 'upto'/2
		      (Char, T)
	      in  [H|_2]
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'upto',2}}] )
	    -| ['compiler_generated'] )
	end
'after_char'/2 =
    %% Line 406
    fun (_0,_1) ->
	case <_0,_1> of
	  <_4,[]> when 'true' ->
	      []
	  %% Line 407
	  <Char,[_5|Rest]>
	      when call 'erlang':'=:='
		    (_5,
		     Char) ->
	      Rest
	  %% Line 408
	  <Char,[_6|Rest]> when 'true' ->
	      apply 'after_char'/2
		  (Char, Rest)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'after_char',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('slave')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('slave', _0)
end