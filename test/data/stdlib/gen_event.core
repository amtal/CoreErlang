module 'gen_event' ['add_handler'/3,
		    'add_sup_handler'/3,
		    'behaviour_info'/1,
		    'call'/3,
		    'call'/4,
		    'check_response'/2,
		    'delete_handler'/3,
		    'format_log'/1,
		    'format_log'/2,
		    'format_status'/2,
		    'init_it'/6,
		    'module_info'/0,
		    'module_info'/1,
		    'notify'/2,
		    'send_request'/3,
		    'start'/0,
		    'start'/1,
		    'start'/2,
		    'start_link'/0,
		    'start_link'/1,
		    'start_link'/2,
		    'start_monitor'/0,
		    'start_monitor'/1,
		    'start_monitor'/2,
		    'stop'/1,
		    'stop'/3,
		    'swap_handler'/3,
		    'swap_sup_handler'/3,
		    'sync_notify'/2,
		    'system_code_change'/4,
		    'system_continue'/3,
		    'system_get_state'/1,
		    'system_replace_state'/2,
		    'system_terminate'/4,
		    'wait_response'/2,
		    'wake_hib'/5,
		    'which_handlers'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[103|[101|[110|[95|[101|[118|[101|[110|[116|[46|[101|[114|[108]]]]]]]]]]]]]]]]],1}],
		%% Line 60
		'export_type' =
		    %% Line 60
		    [{'handler',0}|[{'handler_args',0}|[{'add_handler_ret',0}|[{'del_handler_ret',0}]]]],
		%% Line 63
		'record' =
		    %% Line 63
		    [{'handler',[{'typed_record_field',{'record_field',63,{'atom',63,'module'}},{'type',63,'atom',[]}}|[{'record_field',64,{'atom',64,'id'},{'atom',64,'false'}}|[{'record_field',65,{'atom',65,'state'}}|[{'typed_record_field',{'record_field',66,{'atom',66,'supervised'},{'atom',66,'false'}},{'type',66,'union',[{'atom',66,'false'}|[{'type',66,'pid',[]}]]}}]]]]}],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[47|[85|[115|[101|[114|[115|[47|[102|[101|[110|[103|[108|[101|[101|[47|[72|[97|[109|[108|[101|[114|[47|[111|[116|[112|[45|[79|[84|[80|[45|[50|[51|[46|[48|[45|[114|[99|[49|[47|[108|[105|[98|[47|[115|[116|[100|[108|[105|[98|[47|[46|[46|[47|[107|[101|[114|[110|[101|[108|[47|[105|[110|[99|[108|[117|[100|[101|[47|[108|[111|[103|[103|[101|[114|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 69
		'file' =
		    %% Line 69
		    [{[115|[114|[99|[47|[103|[101|[110|[95|[101|[118|[101|[110|[116|[46|[101|[114|[108]]]]]]]]]]]]]]]]],69}],
		%% Line 84
		'callback' =
		    %% Line 84
		    [{{'init',1},[{'type',84,'fun',[{'type',84,'product',[{'ann_type',84,[{'var',84,'InitArgs'}|[{'type',84,'term',[]}]]}]}|[{'type',85,'union',[{'type',85,'tuple',[{'atom',85,'ok'}|[{'ann_type',85,[{'var',85,'State'}|[{'type',85,'term',[]}]]}]]}|[{'type',86,'tuple',[{'atom',86,'ok'}|[{'ann_type',86,[{'var',86,'State'}|[{'type',86,'term',[]}]]}|[{'atom',86,'hibernate'}]]]}|[{'type',87,'tuple',[{'atom',87,'error'}|[{'ann_type',87,[{'var',87,'Reason'}|[{'type',87,'term',[]}]]}]]}]]]}]]}]}],
		%% Line 88
		'callback' =
		    %% Line 88
		    [{{'handle_event',2},[{'type',88,'fun',[{'type',88,'product',[{'ann_type',88,[{'var',88,'Event'}|[{'type',88,'term',[]}]]}|[{'ann_type',88,[{'var',88,'State'}|[{'type',88,'term',[]}]]}]]}|[{'type',89,'union',[{'type',89,'tuple',[{'atom',89,'ok'}|[{'ann_type',89,[{'var',89,'NewState'}|[{'type',89,'term',[]}]]}]]}|[{'type',90,'tuple',[{'atom',90,'ok'}|[{'ann_type',90,[{'var',90,'NewState'}|[{'type',90,'term',[]}]]}|[{'atom',90,'hibernate'}]]]}|[{'type',91,'tuple',[{'atom',91,'swap_handler'}|[{'ann_type',91,[{'var',91,'Args1'}|[{'type',91,'term',[]}]]}|[{'ann_type',91,[{'var',91,'NewState'}|[{'type',91,'term',[]}]]}|[{'ann_type',92,[{'var',92,'Handler2'}|[{'type',92,'union',[{'type',92,'atom',[]}|[{'type',92,'tuple',[{'type',92,'atom',[]}|[{'ann_type',92,[{'var',92,'Id'}|[{'type',92,'term',[]}]]}]]}]]}]]}|[{'ann_type',92,[{'var',92,'Args2'}|[{'type',92,'term',[]}]]}]]]]]}|[{'atom',93,'remove_handler'}]]]]}]]}]}],
		%% Line 94
		'callback' =
		    %% Line 94
		    [{{'handle_call',2},[{'type',94,'fun',[{'type',94,'product',[{'ann_type',94,[{'var',94,'Request'}|[{'type',94,'term',[]}]]}|[{'ann_type',94,[{'var',94,'State'}|[{'type',94,'term',[]}]]}]]}|[{'type',95,'union',[{'type',95,'tuple',[{'atom',95,'ok'}|[{'ann_type',95,[{'var',95,'Reply'}|[{'type',95,'term',[]}]]}|[{'ann_type',95,[{'var',95,'NewState'}|[{'type',95,'term',[]}]]}]]]}|[{'type',96,'tuple',[{'atom',96,'ok'}|[{'ann_type',96,[{'var',96,'Reply'}|[{'type',96,'term',[]}]]}|[{'ann_type',96,[{'var',96,'NewState'}|[{'type',96,'term',[]}]]}|[{'atom',96,'hibernate'}]]]]}|[{'type',97,'tuple',[{'atom',97,'swap_handler'}|[{'ann_type',97,[{'var',97,'Reply'}|[{'type',97,'term',[]}]]}|[{'ann_type',97,[{'var',97,'Args1'}|[{'type',97,'term',[]}]]}|[{'ann_type',97,[{'var',97,'NewState'}|[{'type',97,'term',[]}]]}|[{'ann_type',98,[{'var',98,'Handler2'}|[{'type',98,'union',[{'type',98,'atom',[]}|[{'type',98,'tuple',[{'type',98,'atom',[]}|[{'ann_type',98,[{'var',98,'Id'}|[{'type',98,'term',[]}]]}]]}]]}]]}|[{'ann_type',98,[{'var',98,'Args2'}|[{'type',98,'term',[]}]]}]]]]]]}|[{'type',99,'tuple',[{'atom',99,'remove_handler'}|[{'ann_type',99,[{'var',99,'Reply'}|[{'type',99,'term',[]}]]}]]}]]]]}]]}]}],
		%% Line 100
		'callback' =
		    %% Line 100
		    [{{'handle_info',2},[{'type',100,'fun',[{'type',100,'product',[{'ann_type',100,[{'var',100,'Info'}|[{'type',100,'term',[]}]]}|[{'ann_type',100,[{'var',100,'State'}|[{'type',100,'term',[]}]]}]]}|[{'type',101,'union',[{'type',101,'tuple',[{'atom',101,'ok'}|[{'ann_type',101,[{'var',101,'NewState'}|[{'type',101,'term',[]}]]}]]}|[{'type',102,'tuple',[{'atom',102,'ok'}|[{'ann_type',102,[{'var',102,'NewState'}|[{'type',102,'term',[]}]]}|[{'atom',102,'hibernate'}]]]}|[{'type',103,'tuple',[{'atom',103,'swap_handler'}|[{'ann_type',103,[{'var',103,'Args1'}|[{'type',103,'term',[]}]]}|[{'ann_type',103,[{'var',103,'NewState'}|[{'type',103,'term',[]}]]}|[{'ann_type',104,[{'var',104,'Handler2'}|[{'type',104,'union',[{'type',104,'atom',[]}|[{'type',104,'tuple',[{'type',104,'atom',[]}|[{'ann_type',104,[{'var',104,'Id'}|[{'type',104,'term',[]}]]}]]}]]}]]}|[{'ann_type',104,[{'var',104,'Args2'}|[{'type',104,'term',[]}]]}]]]]]}|[{'atom',105,'remove_handler'}]]]]}]]}]}],
		%% Line 106
		'callback' =
		    %% Line 106
		    [{{'terminate',2},[{'type',106,'fun',[{'type',106,'product',[{'ann_type',106,[{'var',106,'Args'}|[{'type',106,'union',[{'type',106,'term',[]}|[{'type',106,'tuple',[{'atom',106,'stop'}|[{'ann_type',106,[{'var',106,'Reason'}|[{'type',106,'term',[]}]]}]]}|[{'atom',107,'stop'}|[{'atom',107,'remove_handler'}|[{'type',108,'tuple',[{'atom',108,'error'}|[{'type',108,'tuple',[{'atom',108,'EXIT'}|[{'ann_type',108,[{'var',108,'Reason'}|[{'type',108,'term',[]}]]}]]}]]}|[{'type',109,'tuple',[{'atom',109,'error'}|[{'type',109,'term',[]}]]}]]]]]]}]]}|[{'ann_type',110,[{'var',110,'State'}|[{'type',110,'term',[]}]]}]]}|[{'type',111,'term',[]}]]}]}],
		%% Line 112
		'callback' =
		    %% Line 112
		    [{{'code_change',3},[{'type',112,'fun',[{'type',112,'product',[{'ann_type',112,[{'var',112,'OldVsn'}|[{'type',112,'union',[{'type',112,'term',[]}|[{'type',112,'tuple',[{'atom',112,'down'}|[{'type',112,'term',[]}]]}]]}]]}|[{'ann_type',113,[{'var',113,'State'}|[{'type',113,'term',[]}]]}|[{'ann_type',113,[{'var',113,'Extra'}|[{'type',113,'term',[]}]]}]]]}|[{'type',114,'tuple',[{'atom',114,'ok'}|[{'ann_type',114,[{'var',114,'NewState'}|[{'type',114,'term',[]}]]}]]}]]}]}],
		%% Line 115
		'callback' =
		    %% Line 115
		    [{{'format_status',2},[{'type',115,'bounded_fun',[{'type',115,'fun',[{'type',115,'product',[{'var',115,'Opt'}|[{'var',115,'StatusData'}]]}|[{'var',115,'Status'}]]}|[[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'Opt'}|[{'type',116,'union',[{'atom',116,'normal'}|[{'atom',116,'terminate'}]]}]]]]}|[{'type',117,'constraint',[{'atom',117,'is_subtype'}|[[{'var',117,'StatusData'}|[{'type',117,'list',[{'type',117,'union',[{'var',117,'PDict'}|[{'var',117,'State'}]]}]}]]]]}|[{'type',118,'constraint',[{'atom',118,'is_subtype'}|[[{'var',118,'PDict'}|[{'type',118,'list',[{'type',118,'tuple',[{'ann_type',118,[{'var',118,'Key'}|[{'type',118,'term',[]}]]}|[{'ann_type',118,[{'var',118,'Value'}|[{'type',118,'term',[]}]]}]]}]}]]]]}|[{'type',119,'constraint',[{'atom',119,'is_subtype'}|[[{'var',119,'State'}|[{'type',119,'term',[]}]]]]}|[{'type',120,'constraint',[{'atom',120,'is_subtype'}|[[{'var',120,'Status'}|[{'type',120,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 122
		'optional_callbacks' =
		    %% Line 122
		    [{'handle_info',2}|[{'terminate',2}|[{'code_change',3}|[{'format_status',2}]]]],
		%% Line 127
		'type' =
		    %% Line 127
		    [{'handler',{'type',127,'union',[{'type',127,'atom',[]}|[{'type',127,'tuple',[{'type',127,'atom',[]}|[{'type',127,'term',[]}]]}]]},[]}],
		%% Line 128
		'type' =
		    %% Line 128
		    [{'handler_args',{'type',128,'term',[]},[]}],
		%% Line 129
		'type' =
		    %% Line 129
		    [{'add_handler_ret',{'type',129,'union',[{'atom',129,'ok'}|[{'type',129,'term',[]}|[{'type',129,'tuple',[{'atom',129,'EXIT'}|[{'type',129,'term',[]}]]}]]]},[]}],
		%% Line 130
		'type' =
		    %% Line 130
		    [{'del_handler_ret',{'type',130,'union',[{'atom',130,'ok'}|[{'type',130,'term',[]}|[{'type',130,'tuple',[{'atom',130,'EXIT'}|[{'type',130,'term',[]}]]}]]]},[]}],
		%% Line 132
		'type' =
		    %% Line 132
		    [{'emgr_name',{'type',132,'union',[{'type',132,'tuple',[{'atom',132,'local'}|[{'type',132,'atom',[]}]]}|[{'type',132,'tuple',[{'atom',132,'global'}|[{'type',132,'term',[]}]]}|[{'type',133,'tuple',[{'atom',133,'via'}|[{'type',133,'atom',[]}|[{'type',133,'term',[]}]]]}]]]},[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{'debug_flag',{'type',134,'union',[{'atom',134,'trace'}|[{'atom',134,'log'}|[{'atom',134,'statistics'}|[{'atom',134,'debug'}|[{'type',135,'tuple',[{'atom',135,'logfile'}|[{'type',135,'string',[]}]]}]]]]]},[]}],
		%% Line 136
		'type' =
		    %% Line 136
		    [{'option',{'type',136,'union',[{'type',136,'tuple',[{'atom',136,'timeout'}|[{'type',136,'timeout',[]}]]}|[{'type',137,'tuple',[{'atom',137,'debug'}|[{'type',137,'list',[{'user_type',137,'debug_flag',[]}]}]]}|[{'type',138,'tuple',[{'atom',138,'spawn_opt'}|[{'type',138,'list',[{'remote_type',138,[{'atom',138,'proc_lib'}|[{'atom',138,'start_spawn_option'}|[[]]]]}]}]]}|[{'type',139,'tuple',[{'atom',139,'hibernate_after'}|[{'type',139,'timeout',[]}]]}]]]]},[]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{'emgr_ref',{'type',140,'union',[{'type',140,'atom',[]}|[{'type',140,'tuple',[{'type',140,'atom',[]}|[{'type',140,'atom',[]}]]}|[{'type',140,'tuple',[{'atom',140,'global'}|[{'type',140,'term',[]}]]}|[{'type',141,'tuple',[{'atom',141,'via'}|[{'type',141,'atom',[]}|[{'type',141,'term',[]}]]]}|[{'type',141,'pid',[]}]]]]]},[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{'start_ret',{'type',142,'union',[{'type',142,'tuple',[{'atom',142,'ok'}|[{'type',142,'pid',[]}]]}|[{'type',142,'tuple',[{'atom',142,'error'}|[{'type',142,'term',[]}]]}]]},[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{'start_mon_ret',{'type',143,'union',[{'type',143,'tuple',[{'atom',143,'ok'}|[{'type',143,'tuple',[{'type',143,'pid',[]}|[{'type',143,'reference',[]}]]}]]}|[{'type',143,'tuple',[{'atom',143,'error'}|[{'type',143,'term',[]}]]}]]},[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{'request_id',{'type',144,'term',[]},[]}],
		%% Line 167
		'spec' =
		    %% Line 167
		    [{{'start',0},[{'type',167,'fun',[{'type',167,'product',[]}|[{'user_type',167,'start_ret',[]}]]}]}],
		%% Line 171
		'spec' =
		    %% Line 171
		    [{{'start',1},[{'type',171,'fun',[{'type',171,'product',[{'type',171,'union',[{'user_type',171,'emgr_name',[]}|[{'type',171,'list',[{'user_type',171,'option',[]}]}]]}]}|[{'user_type',171,'start_ret',[]}]]}]}],
		%% Line 177
		'spec' =
		    %% Line 177
		    [{{'start',2},[{'type',177,'fun',[{'type',177,'product',[{'user_type',177,'emgr_name',[]}|[{'type',177,'list',[{'user_type',177,'option',[]}]}]]}|[{'user_type',177,'start_ret',[]}]]}]}],
		%% Line 181
		'spec' =
		    %% Line 181
		    [{{'start_link',0},[{'type',181,'fun',[{'type',181,'product',[]}|[{'user_type',181,'start_ret',[]}]]}]}],
		%% Line 185
		'spec' =
		    %% Line 185
		    [{{'start_link',1},[{'type',185,'fun',[{'type',185,'product',[{'type',185,'union',[{'user_type',185,'emgr_name',[]}|[{'type',185,'list',[{'user_type',185,'option',[]}]}]]}]}|[{'user_type',185,'start_ret',[]}]]}]}],
		%% Line 191
		'spec' =
		    %% Line 191
		    [{{'start_link',2},[{'type',191,'fun',[{'type',191,'product',[{'user_type',191,'emgr_name',[]}|[{'type',191,'list',[{'user_type',191,'option',[]}]}]]}|[{'user_type',191,'start_ret',[]}]]}]}],
		%% Line 195
		'spec' =
		    %% Line 195
		    [{{'start_monitor',0},[{'type',195,'fun',[{'type',195,'product',[]}|[{'user_type',195,'start_mon_ret',[]}]]}]}],
		%% Line 199
		'spec' =
		    %% Line 199
		    [{{'start_monitor',1},[{'type',199,'fun',[{'type',199,'product',[{'type',199,'union',[{'user_type',199,'emgr_name',[]}|[{'type',199,'list',[{'user_type',199,'option',[]}]}]]}]}|[{'user_type',199,'start_mon_ret',[]}]]}]}],
		%% Line 205
		'spec' =
		    %% Line 205
		    [{{'start_monitor',2},[{'type',205,'fun',[{'type',205,'product',[{'user_type',205,'emgr_name',[]}|[{'type',205,'list',[{'user_type',205,'option',[]}]}]]}|[{'user_type',205,'start_mon_ret',[]}]]}]}],
		%% Line 220
		'spec' =
		    %% Line 220
		    [{{'add_handler',3},[{'type',220,'fun',[{'type',220,'product',[{'user_type',220,'emgr_ref',[]}|[{'user_type',220,'handler',[]}|[{'type',220,'term',[]}]]]}|[{'type',220,'term',[]}]]}]}],
		%% Line 223
		'spec' =
		    %% Line 223
		    [{{'add_sup_handler',3},[{'type',223,'fun',[{'type',223,'product',[{'user_type',223,'emgr_ref',[]}|[{'user_type',223,'handler',[]}|[{'type',223,'term',[]}]]]}|[{'type',223,'term',[]}]]}]}],
		%% Line 227
		'spec' =
		    %% Line 227
		    [{{'notify',2},[{'type',227,'fun',[{'type',227,'product',[{'user_type',227,'emgr_ref',[]}|[{'type',227,'term',[]}]]}|[{'atom',227,'ok'}]]}]}],
		%% Line 230
		'spec' =
		    %% Line 230
		    [{{'sync_notify',2},[{'type',230,'fun',[{'type',230,'product',[{'user_type',230,'emgr_ref',[]}|[{'type',230,'term',[]}]]}|[{'atom',230,'ok'}]]}]}],
		%% Line 233
		'spec' =
		    %% Line 233
		    [{{'call',3},[{'type',233,'fun',[{'type',233,'product',[{'user_type',233,'emgr_ref',[]}|[{'user_type',233,'handler',[]}|[{'type',233,'term',[]}]]]}|[{'type',233,'term',[]}]]}]}],
		%% Line 236
		'spec' =
		    %% Line 236
		    [{{'call',4},[{'type',236,'fun',[{'type',236,'product',[{'user_type',236,'emgr_ref',[]}|[{'user_type',236,'handler',[]}|[{'type',236,'term',[]}|[{'type',236,'timeout',[]}]]]]}|[{'type',236,'term',[]}]]}]}],
		%% Line 239
		'spec' =
		    %% Line 239
		    [{{'send_request',3},[{'type',239,'fun',[{'type',239,'product',[{'user_type',239,'emgr_ref',[]}|[{'user_type',239,'handler',[]}|[{'type',239,'term',[]}]]]}|[{'user_type',239,'request_id',[]}]]}]}],
		%% Line 243
		'spec' =
		    %% Line 243
		    [{{'wait_response',2},[{'type',243,'fun',[{'type',243,'product',[{'ann_type',243,[{'var',243,'RequestId'}|[{'user_type',243,'request_id',[]}]]}|[{'type',243,'timeout',[]}]]}|[{'type',244,'union',[{'type',244,'tuple',[{'atom',244,'reply'}|[{'ann_type',244,[{'var',244,'Reply'}|[{'type',244,'term',[]}]]}]]}|[{'atom',244,'timeout'}|[{'type',244,'tuple',[{'atom',244,'error'}|[{'type',244,'tuple',[{'ann_type',244,[{'var',244,'Reason'}|[{'type',244,'term',[]}]]}|[{'user_type',244,'emgr_ref',[]}]]}]]}]]]}]]}]}],
		%% Line 251
		'spec' =
		    %% Line 251
		    [{{'check_response',2},[{'type',251,'fun',[{'type',251,'product',[{'ann_type',251,[{'var',251,'Msg'}|[{'type',251,'term',[]}]]}|[{'ann_type',251,[{'var',251,'RequestId'}|[{'user_type',251,'request_id',[]}]]}]]}|[{'type',252,'union',[{'type',252,'tuple',[{'atom',252,'reply'}|[{'ann_type',252,[{'var',252,'Reply'}|[{'type',252,'term',[]}]]}]]}|[{'atom',252,'no_reply'}|[{'type',252,'tuple',[{'atom',252,'error'}|[{'type',252,'tuple',[{'ann_type',252,[{'var',252,'Reason'}|[{'type',252,'term',[]}]]}|[{'user_type',252,'emgr_ref',[]}]]}]]}]]]}]]}]}],
		%% Line 259
		'spec' =
		    %% Line 259
		    [{{'delete_handler',3},[{'type',259,'fun',[{'type',259,'product',[{'user_type',259,'emgr_ref',[]}|[{'user_type',259,'handler',[]}|[{'type',259,'term',[]}]]]}|[{'type',259,'term',[]}]]}]}],
		%% Line 262
		'spec' =
		    %% Line 262
		    [{{'swap_handler',3},[{'type',262,'fun',[{'type',262,'product',[{'user_type',262,'emgr_ref',[]}|[{'type',262,'tuple',[{'user_type',262,'handler',[]}|[{'type',262,'term',[]}]]}|[{'type',262,'tuple',[{'user_type',262,'handler',[]}|[{'type',262,'term',[]}]]}]]]}|[{'type',263,'union',[{'atom',263,'ok'}|[{'type',263,'tuple',[{'atom',263,'error'}|[{'type',263,'term',[]}]]}]]}]]}]}],
		%% Line 266
		'spec' =
		    %% Line 266
		    [{{'swap_sup_handler',3},[{'type',266,'fun',[{'type',266,'product',[{'user_type',266,'emgr_ref',[]}|[{'type',266,'tuple',[{'user_type',266,'handler',[]}|[{'type',266,'term',[]}]]}|[{'type',266,'tuple',[{'user_type',266,'handler',[]}|[{'type',266,'term',[]}]]}]]]}|[{'type',267,'union',[{'atom',267,'ok'}|[{'type',267,'tuple',[{'atom',267,'error'}|[{'type',267,'term',[]}]]}]]}]]}]}],
		%% Line 271
		'spec' =
		    %% Line 271
		    [{{'which_handlers',1},[{'type',271,'fun',[{'type',271,'product',[{'user_type',271,'emgr_ref',[]}]}|[{'type',271,'list',[{'user_type',271,'handler',[]}]}]]}]}],
		%% Line 274
		'spec' =
		    %% Line 274
		    [{{'stop',1},[{'type',274,'fun',[{'type',274,'product',[{'user_type',274,'emgr_ref',[]}]}|[{'atom',274,'ok'}]]}]}],
		%% Line 448
		'spec' =
		    %% Line 448
		    [{{'system_terminate',4},[{'type',448,'fun',[{'type',448,'product',[{'var',448,'_'}|[{'var',448,'_'}|[{'var',448,'_'}|[{'type',448,'list',[{'var',448,'_'}]}]]]]}|[{'type',448,'no_return',[]}]]}]}],
		%% Line 670
		'spec' =
		    %% Line 670
		    [{{'split',2},[{'type',670,'fun',[{'type',670,'product',[{'user_type',670,'handler',[]}|[{'type',670,'list',[{'type',670,'record',[{'atom',670,'handler'}]}]}]]}|[{'type',671,'union',[{'type',671,'tuple',[{'type',671,'atom',[]}|[{'type',671,'record',[{'atom',671,'handler'}]}|[{'type',671,'list',[{'type',671,'record',[{'atom',671,'handler'}]}]}]]]}|[{'atom',671,'error'}]]}]]}]}]]
'start'/0 =
    %% Line 168
    fun () ->
	%% Line 169
	call 'gen':'start'
	    ('gen_event', 'nolink', 'no callback module', [], [])
'start'/1 =
    %% Line 172
    fun (_0) ->
	case _0 of
	  <Name>
	      when call 'erlang':'is_tuple'
		    (_0) ->
	      %% Line 173
	      call 'gen':'start'
		  ('gen_event', 'nolink', Name, 'no callback module', [], [])
	  %% Line 174
	  <Options>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 175
	      call 'gen':'start'
		  ('gen_event', 'nolink', 'no callback module', [], Options)
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'start',1}}] )
	    -| ['compiler_generated'] )
	end
'start'/2 =
    %% Line 178
    fun (_0,_1) ->
	%% Line 179
	call 'gen':'start'
	    ('gen_event', 'nolink', _0, 'no callback module', [], _1)
'start_link'/0 =
    %% Line 182
    fun () ->
	%% Line 183
	call 'gen':'start'
	    ('gen_event', 'link', 'no callback module', [], [])
'start_link'/1 =
    %% Line 186
    fun (_0) ->
	case _0 of
	  <Name>
	      when call 'erlang':'is_tuple'
		    (_0) ->
	      %% Line 187
	      call 'gen':'start'
		  ('gen_event', 'link', Name, 'no callback module', [], [])
	  %% Line 188
	  <Options>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 189
	      call 'gen':'start'
		  ('gen_event', 'link', 'no callback module', [], Options)
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'start_link',1}}] )
	    -| ['compiler_generated'] )
	end
'start_link'/2 =
    %% Line 192
    fun (_0,_1) ->
	%% Line 193
	call 'gen':'start'
	    ('gen_event', 'link', _0, 'no callback module', [], _1)
'start_monitor'/0 =
    %% Line 196
    fun () ->
	%% Line 197
	call 'gen':'start'
	    ('gen_event', 'monitor', 'no callback module', [], [])
'start_monitor'/1 =
    %% Line 200
    fun (_0) ->
	case _0 of
	  <Name>
	      when call 'erlang':'is_tuple'
		    (_0) ->
	      %% Line 201
	      call 'gen':'start'
		  ('gen_event', 'monitor', Name, 'no callback module', [], [])
	  %% Line 202
	  <Options>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 203
	      call 'gen':'start'
		  ('gen_event', 'monitor', 'no callback module', [], Options)
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'start_monitor',1}}] )
	    -| ['compiler_generated'] )
	end
'start_monitor'/2 =
    %% Line 206
    fun (_0,_1) ->
	%% Line 207
	call 'gen':'start'
	    ('gen_event', 'monitor', _0, 'no callback module', [], _1)
'init_it'/6 =
    %% Line 210
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <Starter,'self',Name,Mod,Args,Options> when 'true' ->
	      let <_6> =
		  call %% Line 211
		       'erlang':%% Line 211
				'self'
		      ()
	      in  %% Line 211
		  apply 'init_it'/6
		      (Starter, _6, Name, Mod, Args, Options)
	  %% Line 212
	  <Starter,Parent,Name0,_17,_18,Options> when 'true' ->
	      do  %% Line 213
		  call 'erlang':'process_flag'
		      ('trap_exit', 'true')
		  let <Name> =
		      call %% Line 214
			   'gen':%% Line 214
				 'name'
			  (%% Line 214
			   Name0)
		  in  let <Debug> =
			  call %% Line 215
			       'gen':%% Line 215
				     'debug_options'
			      (%% Line 215
			       Name, %% Line 215
				     Options)
		      in  let <HibernateAfterTimeout> =
			      call %% Line 216
				   'gen':%% Line 216
					 'hibernate_after'
				  (%% Line 216
				   Options)
			  in  let <_10> =
				  call %% Line 217
				       'erlang':%% Line 217
						'self'
				      ()
			      in  do  %% Line 217
				      call 'proc_lib':'init_ack'
					  (Starter, {'ok',_10})
				      %% Line 218
				      apply 'loop'/6
					  (Parent, Name, [], HibernateAfterTimeout, Debug, 'false')
	end
'add_handler'/3 =
    %% Line 221
    fun (_0,_1,_2) ->
	apply 'rpc'/2
	    (_0, {'add_handler',_1,_2})
'add_sup_handler'/3 =
    %% Line 224
    fun (_0,_1,_2) ->
	let <_3> =
	    call %% Line 225
		 'erlang':%% Line 225
			  'self'
		()
	in  %% Line 225
	    apply 'rpc'/2
		(_0, {'add_sup_handler',_1,_2,_3})
'notify'/2 =
    %% Line 228
    fun (_0,_1) ->
	apply 'send'/2
	    (_0, {'notify',_1})
'sync_notify'/2 =
    %% Line 231
    fun (_0,_1) ->
	apply 'rpc'/2
	    (_0, {'sync_notify',_1})
'call'/3 =
    %% Line 234
    fun (_0,_1,_2) ->
	apply 'call1'/3
	    (_0, _1, _2)
'call'/4 =
    %% Line 237
    fun (_0,_1,_2,_3) ->
	apply 'call1'/4
	    (_0, _1, _2, _3)
'send_request'/3 =
    %% Line 240
    fun (_0,_1,_2) ->
	let <_3> =
	    call %% Line 241
		 'erlang':%% Line 241
			  'self'
		()
	in  %% Line 241
	    call 'gen':'send_request'
		(_0, _3, {'call',_1,_2})
'wait_response'/2 =
    %% Line 245
    fun (_0,_1) ->
	%% Line 246
	case call 'gen':'wait_response'
		 (_0, _1) of
	  %% Line 247
	  <{'reply',Err = {'error',_5}}> when 'true' ->
	      Err
	  %% Line 248
	  <Return> when 'true' ->
	      Return
	end
'check_response'/2 =
    %% Line 253
    fun (_0,_1) ->
	%% Line 254
	case call 'gen':'check_response'
		 (_0, _1) of
	  %% Line 255
	  <{'reply',Err = {'error',_5}}> when 'true' ->
	      Err
	  %% Line 256
	  <Return> when 'true' ->
	      Return
	end
'delete_handler'/3 =
    %% Line 260
    fun (_0,_1,_2) ->
	apply 'rpc'/2
	    (_0, {'delete_handler',_1,_2})
'swap_handler'/3 =
    %% Line 264
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <M,{H1,A1},{H2,A2}> when 'true' ->
	      apply 'rpc'/2
		  (M, {'swap_handler',H1,A1,H2,A2})
	  ( <_5,_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4,_3})
		  -| [{'function_name',{'swap_handler',3}}] )
	    -| ['compiler_generated'] )
	end
'swap_sup_handler'/3 =
    %% Line 268
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <M,{H1,A1},{H2,A2}> when 'true' ->
	      let <_3> =
		  call %% Line 269
		       'erlang':%% Line 269
				'self'
		      ()
	      in  %% Line 269
		  apply 'rpc'/2
		      (M, {'swap_sup_handler',H1,A1,H2,A2,_3})
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'swap_sup_handler',3}}] )
	    -| ['compiler_generated'] )
	end
'which_handlers'/1 =
    %% Line 272
    fun (_0) ->
	apply 'rpc'/2
	    (_0, 'which_handlers')
'stop'/1 =
    %% Line 275
    fun (_0) ->
	%% Line 276
	call 'gen':'stop'
	    (_0)
'stop'/3 =
    %% Line 278
    fun (_0,_1,_2) ->
	%% Line 279
	call 'gen':'stop'
	    (_0, _1, _2)
'rpc'/2 =
    %% Line 281
    fun (_0,_1) ->
	let <_2> =
	    call %% Line 282
		 'erlang':%% Line 282
			  'self'
		()
	in  %% Line 282
	    case call 'gen':'call'
		     (_0, _2, _1, 'infinity') of
	      <{'ok',Reply}> when 'true' ->
		  %% Line 283
		  Reply
	      ( <_3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_3})
		-| ['compiler_generated'] )
	    end
'call1'/3 =
    %% Line 285
    fun (_0,_1,_2) ->
	let <Cmd> = {%% Line 286
	     'call',_1,_2}
	in  %% Line 287
	    try
		let <_4> =
		    call 'erlang':'self'
			()
		in  call 'gen':'call'
			(_0, _4, Cmd)
	    of <_5> ->
		case _5 of
		  %% Line 288
		  <{'ok',Res}> when 'true' ->
		      %% Line 289
		      Res
		  ( <_6> when 'true' ->
			primop 'match_fail'
			    ({'try_clause',_6})
		    -| ['compiler_generated'] )
		end
	    catch <_9,_8,_7> ->
		%% Line 291
		case <_9,_8,_7> of
		  <( 'exit'
		     -| ['compiler_generated'] ),Reason,_13> when 'true' ->
		      %% Line 292
		      call 'erlang':'exit'
			  ({Reason,{'gen_event','call',[_0|[_1|[_2|[]]]]}})
		  ( <_14,_15,_16> when 'true' ->
			primop 'raise'
			    (_16, _15)
		    -| ['compiler_generated'] )
		end
'call1'/4 =
    %% Line 295
    fun (_0,_1,_2,_3) ->
	let <Cmd> = {%% Line 296
	     'call',_1,_2}
	in  %% Line 297
	    try
		let <_5> =
		    call 'erlang':'self'
			()
		in  call 'gen':'call'
			(_0, _5, Cmd, _3)
	    of <_6> ->
		case _6 of
		  %% Line 298
		  <{'ok',Res}> when 'true' ->
		      %% Line 299
		      Res
		  ( <_7> when 'true' ->
			primop 'match_fail'
			    ({'try_clause',_7})
		    -| ['compiler_generated'] )
		end
	    catch <_10,_9,_8> ->
		%% Line 301
		case <_10,_9,_8> of
		  <( 'exit'
		     -| ['compiler_generated'] ),Reason,_15> when 'true' ->
		      %% Line 302
		      call 'erlang':'exit'
			  ({Reason,{'gen_event','call',[_0|[_1|[_2|[_3|[]]]]]}})
		  ( <_16,_17,_18> when 'true' ->
			primop 'raise'
			    (_18, _17)
		    -| ['compiler_generated'] )
		end
'send'/2 =
    %% Line 305
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'global',Name},Cmd> when 'true' ->
	      do  try
		      %% Line 306
		      call 'global':'send'
			  (Name, Cmd)
		  of <_catch_value> ->
		      _catch_value
		  catch <Class,Reason,Stk> ->
		      'ok'
		  %% Line 307
		  'ok'
	  %% Line 308
	  <{'via',Mod,Name},Cmd> when 'true' ->
	      do  try
		      %% Line 309
		      call Mod:'send'
			  (Name, Cmd)
		  of <_catch_value> ->
		      _catch_value
		  catch <Class,Reason,Stk> ->
		      'ok'
		  %% Line 310
		  'ok'
	  %% Line 311
	  <M,Cmd> when 'true' ->
	      do  %% Line 312
		  call 'erlang':'!'
		      (M, Cmd)
		  %% Line 313
		  'ok'
	end
'loop'/6 =
    %% Line 315
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <Parent,ServerName,MSL,HibernateAfterTimeout,Debug,'true'> when 'true' ->
	      %% Line 316
	      call 'proc_lib':'hibernate'
		  ('gen_event', 'wake_hib', [Parent|[ServerName|[MSL|[HibernateAfterTimeout|[Debug|[]]]]]])
	  %% Line 317
	  <Parent,ServerName,MSL,HibernateAfterTimeout,Debug,_12> when 'true' ->
	      %% Line 318
	      apply 'fetch_msg'/6
		  (Parent, ServerName, MSL, HibernateAfterTimeout, Debug, 'false')
	end
'wake_hib'/5 =
    %% Line 320
    fun (_0,_1,_2,_3,_4) ->
	%% Line 321
	apply 'fetch_msg'/6
	    (_0, _1, _2, _3, _4, 'true')
'fetch_msg'/6 =
    %% Line 323
    fun (_0,_1,_2,_3,_4,_5) ->
	%% Line 324
	receive
	  %% Line 325
	  <{'system',From,Req}> when 'true' ->
	      %% Line 326
	      call 'sys':'handle_system_msg'
		  (Req, From, _0, 'gen_event', _4, %% Line 327
						   [_1|[_2|[_3|[_5|[]]]]], _5)
	  %% Line 328
	  <{'EXIT',_14,Reason}>
	      when call 'erlang':'=:='
		    (_14,
		     _0) ->
	      %% Line 329
	      apply 'terminate_server'/4
		  (Reason, _0, _2, _1)
	  %% Line 330
	  <Msg>
	      when call 'erlang':'=:='
		    (_4,
		     []) ->
	      %% Line 331
	      apply 'handle_msg'/6
		  (Msg, _0, _1, _2, _3, [])
	  %% Line 332
	  <Msg> when 'true' ->
	      let <_6> = 'print_event'/3
	      in  let <Debug1> =
		      call %% Line 333
			   'sys':%% Line 333
				 'handle_debug'
			  (_4, _6, _1, %% Line 334
				       {'in',Msg})
		  in  %% Line 335
		      apply 'handle_msg'/6
			  (Msg, _0, _1, _2, _3, Debug1)
	after _3 ->
	  %% Line 337
	  apply 'loop'/6
	      (_0, _1, _2, _3, _4, 'true')
'handle_msg'/6 =
    %% Line 340
    fun (_0,_1,_2,_3,_4,_5) ->
	%% Line 341
	case _0 of
	  %% Line 342
	  <{'notify',Event}> when 'true' ->
	      %% Line 343
	      case apply 'server_notify'/4
		       (Event, 'handle_event', _3, _2) of
		<{Hib,MSL1}> when 'true' ->
		    %% Line 344
		    apply 'loop'/6
			(_1, _2, MSL1, _4, _5, Hib)
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 345
	  <{_X_From,Tag,{'sync_notify',Event}}> when 'true' ->
	      %% Line 346
	      case apply 'server_notify'/4
		       (Event, 'handle_event', _3, _2) of
		<{Hib,MSL1}> when 'true' ->
		    do  %% Line 347
			apply 'reply'/2
			    (Tag, 'ok')
			%% Line 348
			apply 'loop'/6
			    (_1, _2, MSL1, _4, _5, Hib)
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 349
	  <{'EXIT',From,Reason}> when 'true' ->
	      let <MSL1> =
		  apply %% Line 350
			'handle_exit'/4
		      (%% Line 350
		       From, %% Line 350
			     Reason, _3, _2)
	      in  %% Line 351
		  apply 'loop'/6
		      (_1, _2, MSL1, _4, _5, 'false')
	  %% Line 352
	  <{_X_From,Tag,{'call',Handler,Query}}> when 'true' ->
	      %% Line 353
	      case apply 'server_call'/4
		       (Handler, Query, _3, _2) of
		<{Hib,Reply,MSL1}> when 'true' ->
		    do  %% Line 354
			apply 'reply'/2
			    (Tag, Reply)
			%% Line 355
			apply 'loop'/6
			    (_1, _2, MSL1, _4, _5, Hib)
		( <_9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 356
	  <{_X_From,Tag,{'add_handler',Handler,Args}}> when 'true' ->
	      %% Line 357
	      case apply 'server_add_handler'/3
		       (Handler, Args, _3) of
		<{Hib,Reply,MSL1}> when 'true' ->
		    do  %% Line 358
			apply 'reply'/2
			    (Tag, Reply)
			%% Line 359
			apply 'loop'/6
			    (_1, _2, MSL1, _4, _5, Hib)
		( <_10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 360
	  <{_X_From,Tag,{'add_sup_handler',Handler,Args,SupP}}> when 'true' ->
	      %% Line 361
	      case apply 'server_add_sup_handler'/4
		       (Handler, Args, _3, SupP) of
		<{Hib,Reply,MSL1}> when 'true' ->
		    do  %% Line 362
			apply 'reply'/2
			    (Tag, Reply)
			%% Line 363
			apply 'loop'/6
			    (_1, _2, MSL1, _4, _5, Hib)
		( <_11> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 364
	  <{_X_From,Tag,{'delete_handler',Handler,Args}}> when 'true' ->
	      %% Line 365
	      case apply 'server_delete_handler'/4
		       (Handler, Args, _3, _2) of
		<{Reply,MSL1}> when 'true' ->
		    do  %% Line 367
			apply 'reply'/2
			    (Tag, Reply)
			%% Line 368
			apply 'loop'/6
			    (_1, _2, MSL1, _4, _5, 'false')
		( <_12> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 369
	  <{_X_From,Tag,{'swap_handler',Handler1,Args1,Handler2,Args2}}> when 'true' ->
	      %% Line 370
	      case apply 'server_swap_handler'/6
		       (Handler1, Args1, Handler2, %% Line 371
						   Args2, _3, _2) of
		<{Hib,Reply,MSL1}> when 'true' ->
		    do  %% Line 372
			apply 'reply'/2
			    (Tag, Reply)
			%% Line 373
			apply 'loop'/6
			    (_1, _2, MSL1, _4, _5, Hib)
		( <_13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 374
	  <{_X_From,Tag,{'swap_sup_handler',Handler1,Args1,Handler2,Args2,%% Line 375
									  Sup}}> when 'true' ->
	      %% Line 376
	      case apply 'server_swap_handler'/7
		       (Handler1, Args1, Handler2, %% Line 377
						   Args2, _3, %% Line 377
							      Sup, _2) of
		<{Hib,Reply,MSL1}> when 'true' ->
		    do  %% Line 378
			apply 'reply'/2
			    (Tag, Reply)
			%% Line 379
			apply 'loop'/6
			    (_1, _2, MSL1, _4, _5, Hib)
		( <_14> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 380
	  <{_X_From,Tag,'stop'}> when 'true' ->
	      do  try
		      %% Line 381
		      apply 'terminate_server'/4
			  ('normal', _1, _3, _2)
		  of <_catch_value> ->
		      _catch_value
		  catch <Class,Reason,Stk> ->
		      'ok'
		  %% Line 382
		  apply 'reply'/2
		      (Tag, 'ok')
	  %% Line 383
	  <{_X_From,Tag,'which_handlers'}> when 'true' ->
	      let <_15> =
		  apply %% Line 384
			'the_handlers'/1
		      (_3)
	      in  do  %% Line 384
		      apply 'reply'/2
			  (Tag, _15)
		      %% Line 385
		      apply 'loop'/6
			  (_1, _2, _3, _4, _5, 'false')
	  %% Line 386
	  <{_X_From,Tag,'get_modules'}> when 'true' ->
	      let <_16> =
		  apply %% Line 387
			'get_modules'/1
		      (_3)
	      in  do  %% Line 387
		      apply 'reply'/2
			  (Tag, _16)
		      %% Line 388
		      apply 'loop'/6
			  (_1, _2, _3, _4, _5, 'false')
	  %% Line 389
	  <Other> when 'true' ->
	      %% Line 390
	      case apply 'server_notify'/4
		       (Other, 'handle_info', _3, _2) of
		<{Hib,MSL1}> when 'true' ->
		    %% Line 391
		    apply 'loop'/6
			(_1, _2, MSL1, _4, _5, Hib)
		( <_17> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_17})
		  -| ['compiler_generated'] )
	      end
	end
'terminate_server'/4 =
    %% Line 394
    fun (_0,_1,_2,_3) ->
	do  %% Line 395
	    apply 'stop_handlers'/2
		(_2, _3)
	    do  %% Line 396
		apply 'do_unlink'/2
		    (_1, _2)
		%% Line 397
		call 'erlang':'exit'
		    (_0)
'reply'/2 =
    %% Line 399
    fun (_0,_1) ->
	case <_0,_1> of
	  <{From,Ref},Msg> when 'true' ->
	      do  %% Line 400
		  call 'erlang':'!'
		      (From, {Ref,Msg})
		  %% Line 401
		  'ok'
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'reply',2}}] )
	    -| ['compiler_generated'] )
	end
'do_unlink'/2 =
    %% Line 407
    fun (_0,_1) ->
	let <_18> =
	    fun (_16) ->
		%% Line 408
		case _16 of
		  <Handler = {'handler',_21,_22,_23,_24}>
		      when ( try
			      let <_6> =
				  call 'erlang':'element'
				      (5, Handler)
			      in  call 'erlang':'=:='
				      (_6, _0)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false'
			  -| ['compiler_generated'] ) ->
		      %% Line 409
		      'true'
		  %% Line 410
		  <Handler = {'handler',_25,_26,_27,_28}>
		      when ( try
			      let <_12> =
				  call 'erlang':'element'
				      (5, Handler)
			      in  call 'erlang':'is_pid'
				      (_12)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false'
			  -| ['compiler_generated'] ) ->
		      %% Line 411
		      ( case Handler of
			  ( <( {'handler',_29,_30,_31,_rec0}
			       -| ['compiler_generated'] )> when 'true' ->
				do  call 'erlang':'unlink'
					(_rec0)
				    %% Line 412
				    'true'
			    -| ['compiler_generated'] )
			  ( <_32> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','handler'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  %% Line 413
		  <_33> when 'true' ->
		      %% Line 414
		      'true'
		end
	in  %% Line 408
	    call 'lists':'foreach'
		(_18, _1)
'handle_exit'/4 =
    %% Line 422
    fun (_0,_1,_2,_3) ->
	let <MSL1> =
	    apply %% Line 423
		  'terminate_supervised'/4
		(_0, _1, _2, _3)
	in  %% Line 424
	    case apply 'server_notify'/4
		     ({'EXIT',_0,_1}, 'handle_info', MSL1, _3) of
	      <{_10,MSL2}> when 'true' ->
		  %% Line 425
		  MSL2
	      ( <_5> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_5})
		-| ['compiler_generated'] )
	    end
'terminate_supervised'/4 =
    %% Line 427
    fun (_0,_1,_2,_3) ->
	let <F> =
	    fun (_14) ->
		%% Line 428
		case _14 of
		  <Ha = {'handler',_21,_22,_23,_24}>
		      when ( try
			      let <_8> =
				  call 'erlang':'element'
				      (5, Ha)
			      in  call 'erlang':'=:='
				      (_8, _0)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false'
			  -| ['compiler_generated'] ) ->
		      %% Line 429
		      ( case Ha of
			  ( <( {'handler',_rec1,_25,_26,_27}
			       -| ['compiler_generated'] )> when 'true' ->
				%% Line 432
				( case Ha of
				    ( <( {'handler',_29,_30,_rec2,_31}
					 -| ['compiler_generated'] )> when 'true' ->
					  do  apply 'do_terminate'/7
						  (_rec1, Ha, {'stop',_1}, _rec2, %% Line 433
										  {'parent_terminated',{_0,_1}}, _3, %% Line 435
														     'shutdown')
					      %% Line 436
					      'false'
				      -| ['compiler_generated'] )
				    ( <_32> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','handler'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <_28> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','handler'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  %% Line 437
		  <_33> when 'true' ->
		      %% Line 438
		      'true'
		end
	in  %% Line 440
	    call 'lists':'filter'
		(F, _2)
'system_continue'/3 =
    %% Line 445
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Parent,Debug,[ServerName|[MSL|[HibernateAfterTimeout|[Hib|[]]]]]> when 'true' ->
	      %% Line 446
	      apply 'loop'/6
		  (Parent, ServerName, MSL, HibernateAfterTimeout, Debug, Hib)
	  ( <_5,_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4,_3})
		  -| [{'function_name',{'system_continue',3}}] )
	    -| ['compiler_generated'] )
	end
'system_terminate'/4 =
    %% Line 449
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Reason,Parent,_X_Debug,[ServerName|[MSL|[_X_HibernateAfterTimeout|[_X_Hib|[]]]]]> when 'true' ->
	      %% Line 450
	      apply 'terminate_server'/4
		  (Reason, Parent, MSL, ServerName)
	  ( <_7,_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5,_4})
		  -| [{'function_name',{'system_terminate',4}}] )
	    -| ['compiler_generated'] )
	end
'system_code_change'/4 =
    %% Line 456
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[ServerName|[MSL|_@r0 = [HibernateAfterTimeout|[Hib|[]]]]],Module,OldVsn,Extra> when 'true' ->
	      let <_18> =
		  fun (_16) ->
		      %% Line 457
		      case _16 of
			<H = {'handler',_24,_25,_26,_27}>
			    when ( try
				    let <_8> =
					call 'erlang':'element'
					    (2, H)
				    in  call 'erlang':'=:='
					    (_8, Module)
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false'
				-| ['compiler_generated'] ) ->
			    %% Line 460
			    ( case H of
				( <( {'handler',_28,_29,_rec3,_30}
				     -| ['compiler_generated'] )> when 'true' ->
				      case call Module:'code_change'
					       (OldVsn, _rec3, Extra) of
					<{'ok',NewState}> when 'true' ->
					    %% Line 461
					    case H of
					      <{'handler',_32,_33,_34,_35}> when 'true' ->
						  let <_15> =
						      call 'erlang':'setelement'
							  (4, H, NewState)
						  in  {'true',_15}
					      ( <_36> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','handler'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					( <_12> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_12})
					  -| ['compiler_generated'] )
				      end
				  -| ['compiler_generated'] )
				( <_31> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','handler'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			%% Line 462
			<_37> when 'true' ->
			    'true'
		      end
	      in  let <MSL1> =
		      call %% Line 457
			   'lists':%% Line 457
				   'zf'
			  (_18, %% Line 464
				MSL)
		  in  %% Line 465
		      {'ok',[ServerName|[MSL1|_@r0]]}
	  ( <_23,_22,_21,_20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_23,_22,_21,_20})
		  -| [{'function_name',{'system_code_change',4}}] )
	    -| ['compiler_generated'] )
	end
'system_get_state'/1 =
    %% Line 467
    fun (_0) ->
	case _0 of
	  <[_X_ServerName|[MSL|[_X_HibernateAfterTimeout|[_X_Hib|[]]]]]> when 'true' ->
	      let <_5> =
		  letrec
		      'lc$^0'/1 =
			  %% Line 468
			  fun (_3) ->
			      case _3 of
				<[{'handler',Mod,Id,State,_7}|_2]> when 'true' ->
				    let <_4> =
					apply 'lc$^0'/1
					    (_2)
				    in  ( [{Mod,Id,State}|_4]
					  -| ['compiler_generated'] )
				( <[_1|_2]> when 'true' ->
				      apply 'lc$^0'/1
					  (_2)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_8> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_8})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  %% Line 468
		      apply 'lc$^0'/1
			  (MSL)
	      in  %% Line 468
		  {'ok',_5}
	  ( <_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6})
		  -| [{'function_name',{'system_get_state',1}}] )
	    -| ['compiler_generated'] )
	end
'system_replace_state'/2 =
    %% Line 470
    fun (_0,_1) ->
	case <_0,_1> of
	  <StateFun,[ServerName|[MSL|_@r0 = [HibernateAfterTimeout|[Hib|[]]]]]> when 'true' ->
	      let <_16> =
		  letrec
		      'lc$^0'/1 =
			  %% Line 481
			  fun (_4) ->
			      case _4 of
				<[HS = {'handler',Mod,Id,State,_20}|_3]> when 'true' ->
				    let <Cur> = {Mod,Id,State}
				    in  let <_14> =
					    try
						case apply StateFun
							 (Cur) of
						  <NState = {_21,_22,NS}>
						      when let <_23> =
							    call 'erlang':'=:='
								(_21, Mod)
							in  let <_24> =
								call 'erlang':'=:='
								    (_22, Id)
							    in  call 'erlang':'and'
								    (_23, _24) ->
						      case HS of
							<{'handler',_25,_26,_27,_28}> when 'true' ->
							    let <_9> =
								call 'erlang':'setelement'
								    (4, HS, NS)
							    in  {_9,NState}
							( <_29> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','handler'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						  ( <_6> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_6})
						    -| ['compiler_generated'] )
						end
					    of <_10> ->
						_10
					    catch <_13,_12,_11> ->
						{HS,Cur}
					in  let <_15> =
						apply 'lc$^0'/1
						    (_3)
					    in  ( [_14|_15]
						  -| ['compiler_generated'] )
				( <[_2|_3]> when 'true' ->
				      apply 'lc$^0'/1
					  (_3)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_36> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_36})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  %% Line 481
		      apply 'lc$^0'/1
			  (MSL)
	      in  %% Line 471
		  case %% Line 472
		       call 'lists':'unzip'
			   (_16) of
		    <{NMSL,NStates}> when 'true' ->
			%% Line 482
			{'ok',NStates,[ServerName|[NMSL|_@r0]]}
		    ( <_17> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_17})
		      -| ['compiler_generated'] )
		  end
	  ( <_19,_18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_19,_18})
		  -| [{'function_name',{'system_replace_state',2}}] )
	    -| ['compiler_generated'] )
	end
'print_event'/3 =
    %% Line 488
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Dev,{'in',Msg},Name> when 'true' ->
	      %% Line 489
	      case Msg of
		%% Line 490
		<{'notify',Event}> when 'true' ->
		    %% Line 491
		    call 'io':'format'
			(Dev, [42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[103|[111|[116|[32|[101|[118|[101|[110|[116|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[Event|[]]])
		%% Line 492
		<{_7,_8,{'call',Handler,Query}}> when 'true' ->
		    %% Line 493
		    call 'io':'format'
			(Dev, [42|[68|[66|[71|[42|[32|[126|[116|[112|[40|[126|[116|[112|[41|[32|[103|[111|[116|[32|[99|[97|[108|[108|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 494
																								[Name|[Handler|[Query|[]]]])
		%% Line 495
		<_9> when 'true' ->
		    %% Line 496
		    call 'io':'format'
			(Dev, [42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[103|[111|[116|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]], [Name|[Msg|[]]])
	      end
	  %% Line 498
	  <Dev,Dbg,Name> when 'true' ->
	      %% Line 499
	      call 'io':'format'
		  (Dev, [42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]], [Name|[Dbg|[]]])
	end
'server_add_handler'/3 =
    %% Line 507
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{Mod,Id},Args,MSL> when 'true' ->
	      let <Handler> =
		  {%% Line 508
		   'handler',%% Line 508
			     Mod,%% Line 509
				 Id,'undefined','false'}
	      in  %% Line 510
		  apply 'server_add_handler'/4
		      (Mod, Handler, Args, MSL)
	  %% Line 511
	  <Mod,Args,MSL> when 'true' ->
	      let <Handler> =
		  {%% Line 512
		   'handler',%% Line 512
			     Mod,'false','undefined','false'}
	      in  %% Line 513
		  apply 'server_add_handler'/4
		      (Mod, Handler, Args, MSL)
	end
'server_add_handler'/4 =
    %% Line 515
    fun (_0,_1,_2,_3) ->
	let <_4> =
	    catch
		%% Line 516
		call _0:'init'
		    (_2)
	in  %% Line 516
	    case _4 of
	      %% Line 517
	      <{'ok',State}> when 'true' ->
		  %% Line 518
		  case _1 of
		    <{'handler',_16,_17,_18,_19}> when 'true' ->
			let <_7> =
			    call 'erlang':'setelement'
				(4, _1, State)
			in  {'false','ok',[_7|_3]}
		    ( <_20> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','handler'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      %% Line 519
	      <{'ok',State,'hibernate'}> when 'true' ->
		  %% Line 520
		  case _1 of
		    <{'handler',_21,_22,_23,_24}> when 'true' ->
			let <_10> =
			    call 'erlang':'setelement'
				(4, _1, State)
			in  {'true','ok',[_10|_3]}
		    ( <_25> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','handler'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      %% Line 521
	      <Other> when 'true' ->
		  %% Line 522
		  {'false',Other,_3}
	    end
'server_add_sup_handler'/4 =
    %% Line 530
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <{Mod,Id},Args,MSL,Parent> when 'true' ->
	      do  %% Line 531
		  call 'erlang':'link'
		      (Parent)
		  let <Handler> =
		      {%% Line 532
		       'handler',%% Line 532
				 Mod,%% Line 533
				     Id,'undefined',%% Line 534
						    Parent}
		  in  %% Line 535
		      apply 'server_add_handler'/4
			  (Mod, Handler, Args, MSL)
	  %% Line 536
	  <Mod,Args,MSL,Parent> when 'true' ->
	      do  %% Line 537
		  call 'erlang':'link'
		      (Parent)
		  let <Handler> =
		      {%% Line 538
		       'handler',%% Line 538
				 Mod,'false','undefined',%% Line 539
							 Parent}
		  in  %% Line 540
		      apply 'server_add_handler'/4
			  (Mod, Handler, Args, MSL)
	end
'server_delete_handler'/4 =
    %% Line 544
    fun (_0,_1,_2,_3) ->
	%% Line 545
	case apply 'split'/2
		 (_0, _2) of
	  %% Line 546
	  <{Mod,Handler,MSL1}> when 'true' ->
	      %% Line 548
	      ( case Handler of
		  ( <( {'handler',_12,_13,_rec8,_14}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_6> =
			    apply 'do_terminate'/7
				(Mod, Handler, _1, _rec8, 'delete', _3, 'normal')
			in  {_6,%% Line 549
				MSL1}
		    -| ['compiler_generated'] )
		  ( <_15> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','handler'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 550
	  <'error'> when 'true' ->
	      %% Line 551
	      {{'error','module_not_found'},_2}
	  ( <_7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_7})
	    -| ['compiler_generated'] )
	end
'server_swap_handler'/6 =
    %% Line 557
    fun (_0,_1,_2,_3,_4,_5) ->
	%% Line 558
	case apply 'split_and_terminate'/6
		 (_0, _1, _4, _5, _2, %% Line 559
				      'false') of
	  <{State2,Sup,MSL1}> when 'true' ->
	      %% Line 560
	      case apply 's_s_h'/4
		       (Sup, _2, {_3,State2}, MSL1) of
		%% Line 561
		<_@r0 = {Hib,'ok',MSL2}> when 'true' ->
		    %% Line 562
		    _@r0
		%% Line 563
		<{Hib,What,MSL2}> when 'true' ->
		    %% Line 564
		    {Hib,{'error',What},MSL2}
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_7})
		  -| ['compiler_generated'] )
	      end
	  ( <_6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_6})
	    -| ['compiler_generated'] )
	end
'server_swap_handler'/7 =
    %% Line 567
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	%% Line 568
	case apply 'split_and_terminate'/6
		 (_0, _1, _4, _6, _2, _5) of
	  <{State2,_16,MSL1}> when 'true' ->
	      %% Line 570
	      case apply 's_s_h'/4
		       (_5, _2, {_3,State2}, MSL1) of
		%% Line 571
		<_@r0 = {Hib,'ok',MSL2}> when 'true' ->
		    %% Line 572
		    _@r0
		%% Line 573
		<{Hib,What,MSL2}> when 'true' ->
		    %% Line 574
		    {Hib,{'error',What},MSL2}
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_8})
		  -| ['compiler_generated'] )
	      end
	  ( <_7> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_7})
	    -| ['compiler_generated'] )
	end
's_s_h'/4 =
    %% Line 577
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <'false',Handler,Args,MSL> when 'true' ->
	      %% Line 578
	      apply 'server_add_handler'/3
		  (Handler, Args, MSL)
	  %% Line 579
	  <Pid,Handler,Args,MSL> when 'true' ->
	      %% Line 580
	      apply 'server_add_sup_handler'/4
		  (Handler, Args, MSL, Pid)
	end
'split_and_terminate'/6 =
    %% Line 582
    fun (_0,_1,_2,_3,_4,_5) ->
	%% Line 583
	case apply 'split'/2
		 (_0, _2) of
	  %% Line 584
	  <{Mod,Handler,MSL1}> when 'true' ->
	      %% Line 585
	      ( case Handler of
		  ( <( {'handler',_22,_23,_24,_rec9}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_10> =
			    case <> of
			      %% Line 587
			      <>
				  when ( call 'erlang':'=:='
					  (_5,
					   'false')
				      -| ['compiler_generated'] ) ->
				  _rec9
			      %% Line 588
			      <> when 'true' ->
				  _5
			    end
			in  %% Line 591
			    ( case Handler of
				( <( {'handler',_26,_27,_rec10,_28}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_14> =
					  apply 'do_terminate'/7
					      (Mod, Handler, _1, _rec10, 'swapped', _3, %% Line 592
											{'swapped',_4,_10})
				      in  {_14,_rec9,%% Line 594
						     MSL1}
				  -| ['compiler_generated'] )
				( <_29> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','handler'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_25> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','handler'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 595
	  <'error'> when 'true' ->
	      %% Line 596
	      {'error','false',_2}
	  ( <_15> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_15})
	    -| ['compiler_generated'] )
	end
'server_notify'/4 =
    %% Line 601
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Event,Func,[Handler|T],SName> when 'true' ->
	      %% Line 602
	      case apply 'server_update'/4
		       (Handler, Func, Event, SName) of
		%% Line 603
		<{'ok',Handler1}> when 'true' ->
		    %% Line 604
		    case apply 'server_notify'/4
			     (Event, Func, T, SName) of
		      <{Hib,NewHandlers}> when 'true' ->
			  %% Line 605
			  {Hib,[Handler1|NewHandlers]}
		      ( <_4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_4})
			-| ['compiler_generated'] )
		    end
		%% Line 606
		<{'hibernate',Handler1}> when 'true' ->
		    %% Line 607
		    case apply 'server_notify'/4
			     (Event, Func, T, SName) of
		      <{_X_Hib,NewHandlers}> when 'true' ->
			  %% Line 608
			  {'true',[Handler1|NewHandlers]}
		      ( <_5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_5})
			-| ['compiler_generated'] )
		    end
		%% Line 609
		<'no'> when 'true' ->
		    %% Line 610
		    apply 'server_notify'/4
			(Event, Func, T, SName)
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 612
	  <_11,_12,[],_13> when 'true' ->
	      %% Line 613
	      {'false',[]}
	  ( <_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8,_7})
		  -| [{'function_name',{'server_notify',4}}] )
	    -| ['compiler_generated'] )
	end
'server_update'/4 =
    %% Line 617
    fun (_0,_1,_2,_3) ->
	%% Line 618
	( case _0 of
	    ( <( {'handler',_rec11,_28,_29,_30}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 619
		  ( case _0 of
		      ( <( {'handler',_32,_33,_rec12,_34}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_10> =
				catch
				    %% Line 620
				    call _rec11:_1
					(_2, _rec12)
			    in  %% Line 620
				case _10 of
				  %% Line 621
				  <{'ok',State1}> when 'true' ->
				      %% Line 622
				      case _0 of
					<{'handler',_36,_37,_38,_39}> when 'true' ->
					    let <_13> =
						call 'erlang':'setelement'
						    (4, _0, State1)
					    in  {'ok',_13}
					( <_40> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','handler'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				  %% Line 623
				  <{'ok',State1,'hibernate'}> when 'true' ->
				      %% Line 624
				      case _0 of
					<{'handler',_41,_42,_43,_44}> when 'true' ->
					    let <_16> =
						call 'erlang':'setelement'
						    (4, _0, State1)
					    in  {'hibernate',_16}
					( <_45> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','handler'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				  %% Line 625
				  <{'swap_handler',Args1,State1,Handler2,Args2}> when 'true' ->
				      %% Line 626
				      apply 'do_swap'/7
					  (_rec11, _0, Args1, State1, Handler2, Args2, _3)
				  %% Line 627
				  <'remove_handler'> when 'true' ->
				      do  %% Line 628
					  apply 'do_terminate'/7
					      (_rec11, _0, 'remove_handler', _rec12, %% Line 629
										     'remove', _3, %% Line 629
												   'normal')
					  %% Line 630
					  'no'
				  %% Line 631
				  <{'EXIT',{'undef',[{_46,'handle_info',[_47|[_48|[]]],_49}|_50]}}>
				      when call 'erlang':'=:='
					    (_46,
					     _rec11) ->
				      do  %% Line 632
					  case call 'logger':'allow'
						   ('warning', 'gen_event') of
					    <'true'> when 'true' ->
						let <_17> =
						    ~{%% Line 633
						     'module'=>_rec11,%% Line 634
								      'message'=>_2|~{'label'=>{'gen_event','no_handle_info'}}~}~
						in  call 'logger':'macro_log'
							(~{'file'=>[115|[114|[99|[47|[103|[101|[110|[95|[101|[118|[101|[110|[116|[46|[101|[114|[108]]]]]]]]]]]]]]]]],'line'=>632,'mfa'=>{'gen_event','server_update',4}}~, 'warning', _17, ~{'domain'=>['otp'],'error_logger'=>~{'report_cb'=>fun 'gen_event':'format_log'/1,'tag'=>'warning_msg'}~,'report_cb'=>fun 'gen_event':'format_log'/2}~)
					    %% Line 639
					    <'false'> when 'true' ->
						'ok'
					    ( <_22> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_22})
					      -| ['compiler_generated'] )
					  end
					  %% Line 640
					  {'ok',_0}
				  %% Line 641
				  <Other> when 'true' ->
				      do  %% Line 642
					  apply 'do_terminate'/7
					      (_rec11, _0, {'error',Other}, _rec12, _2, _3, %% Line 643
											    'crash')
					  %% Line 644
					  'no'
				end
			-| ['compiler_generated'] )
		      ( <_35> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','handler'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_31> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','handler'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'do_swap'/7 =
    %% Line 647
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	%% Line 651
	( case _1 of
	    ( <( {'handler',_23,_24,_25,_rec15}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <State2> =
		      apply 'do_terminate'/7
			  (_0, _1, _2, _3, 'swapped', _6, {'swapped',_4,_rec15})
		  in  %% Line 652
		      case apply 'new_handler'/2
			       (_4, _1) of
			<{Mod2,Handler}> when 'true' ->
			    let <_11> =
				catch
				    %% Line 653
				    call Mod2:'init'
					({_5,State2})
			    in  %% Line 653
				case _11 of
				  %% Line 654
				  <{'ok',State2a}> when 'true' ->
				      %% Line 655
				      case Handler of
					<{'handler',_27,_28,_29,_30}> when 'true' ->
					    let <_14> =
						call 'erlang':'setelement'
						    (4, Handler, State2a)
					    in  {'ok',_14}
					( <_31> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','handler'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				  %% Line 656
				  <Other> when 'true' ->
				      do  %% Line 657
					  apply 'report_terminate'/5
					      (Handler, 'crash', {'error',Other}, _6, 'false')
					  %% Line 658
					  'no'
				end
			( <_10> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_10})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_26> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','handler'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'new_handler'/2 =
    %% Line 661
    fun (_0,_1) ->
	case <_0,_1> of
	  <{Mod,Id},Handler1> when 'true' ->
	      %% Line 664
	      ( case Handler1 of
		  ( <( {'handler',_8,_9,_10,_rec17}
		       -| ['compiler_generated'] )> when 'true' ->
			{Mod,{'handler',Mod,Id,'undefined',_rec17}}
		    -| ['compiler_generated'] )
		  ( <_11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','handler'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 665
	  <Mod,Handler1> when 'true' ->
	      %% Line 667
	      ( case Handler1 of
		  ( <( {'handler',_12,_13,_14,_rec18}
		       -| ['compiler_generated'] )> when 'true' ->
			{Mod,{'handler',Mod,'false','undefined',_rec18}}
		    -| ['compiler_generated'] )
		  ( <_15> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','handler'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'split'/2 =
    %% Line 673
    fun (_0,_1) ->
	apply 'split'/3
	    (_0, _1, [])
'split'/3 =
    %% Line 675
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{Mod,Id},[Ha = {'handler',_26,_27,_28,_29}|T],L>
	      when ( try
		      let <_7> =
			  call 'erlang':'element'
			      (2, Ha)
		      in  let <_8> =
			      call 'erlang':'=:='
				  (_7, Mod)
			  in  let <_10> =
				  call %% Line 676
				       'erlang':%% Line 676
						'element'
				      (%% Line 676
				       3, %% Line 676
					  Ha)
			      in  let <_11> =
				      call %% Line 676
					   'erlang':%% Line 676
						    '=:='
					  (_10, %% Line 676
						Id)
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_8, _11)
					-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      let <_12> =
		  call %% Line 677
		       'lists':%% Line 677
			       'reverse'
		      (%% Line 677
		       L, %% Line 677
			  T)
	      in  %% Line 677
		  {Mod,Ha,_12}
	  %% Line 678
	  <Mod,[Ha = {'handler',_30,_31,_32,_33}|T],L>
	      when ( try
		      let <_17> =
			  call 'erlang':'element'
			      (2, Ha)
		      in  let <_18> =
			      call 'erlang':'=:='
				  (_17, Mod)
			  in  %% Line 679
			      let <_20> =
				  call 'erlang':'element'
				      (3, Ha)
			      in  let <_21> =
				      call 'erlang':'=:='
					  (_20, 'false')
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_18, _21)
					-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      let <_22> =
		  call %% Line 680
		       'lists':%% Line 680
			       'reverse'
		      (%% Line 680
		       L, %% Line 680
			  T)
	      in  %% Line 680
		  {Mod,Ha,_22}
	  %% Line 681
	  <Ha,[H|T],L> when 'true' ->
	      %% Line 682
	      apply 'split'/3
		  (Ha, T, [H|L])
	  %% Line 683
	  <_34,[],_35> when 'true' ->
	      %% Line 684
	      'error'
	  ( <_25,_24,_23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_25,_24,_23})
		  -| [{'function_name',{'split',3}}] )
	    -| ['compiler_generated'] )
	end
'server_call'/4 =
    %% Line 689
    fun (_0,_1,_2,_3) ->
	%% Line 690
	case apply 'search'/2
		 (_0, _2) of
	  %% Line 691
	  <{'ok',Ha}> when 'true' ->
	      %% Line 692
	      case apply 'server_call_update'/3
		       (Ha, _1, _3) of
		%% Line 693
		<{'no',Reply}> when 'true' ->
		    let <_4> =
			apply %% Line 694
			      'delete'/2
			    (_0, _2)
		    in  %% Line 694
			{'false',Reply,_4}
		%% Line 695
		<{{'ok',Ha1},Reply}> when 'true' ->
		    let <_5> =
			apply %% Line 696
			      'replace'/3
			    (_0, _2, %% Line 696
				     Ha1)
		    in  %% Line 696
			{'false',Reply,_5}
		%% Line 697
		<{{'hibernate',Ha1},Reply}> when 'true' ->
		    let <_6> =
			apply %% Line 698
			      'replace'/3
			    (_0, _2, %% Line 698
				     Ha1)
		    in  %% Line 698
			{'true',Reply,_6}
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 700
	  <'false'> when 'true' ->
	      %% Line 701
	      {'false',{'error','bad_module'},_2}
	  ( <_8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_8})
	    -| ['compiler_generated'] )
	end
'search'/2 =
    %% Line 704
    fun (_0,_1) ->
	case <_0,_1> of
	  <{Mod,Id},[Ha = {'handler',_22,_23,_24,_25}|_X_MSL]>
	      when ( try
		      let <_6> =
			  call 'erlang':'element'
			      (2, Ha)
		      in  let <_7> =
			      call 'erlang':'=:='
				  (_6, Mod)
			  in  let <_9> =
				  call %% Line 705
				       'erlang':%% Line 705
						'element'
				      (%% Line 705
				       3, %% Line 705
					  Ha)
			      in  let <_10> =
				      call %% Line 705
					   'erlang':%% Line 705
						    '=:='
					  (_9, %% Line 705
					       Id)
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_7, _10)
					-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 706
	      {'ok',Ha}
	  %% Line 707
	  <Mod,[Ha = {'handler',_26,_27,_28,_29}|_X_MSL]>
	      when ( try
		      let <_15> =
			  call 'erlang':'element'
			      (2, Ha)
		      in  let <_16> =
			      call 'erlang':'=:='
				  (_15, Mod)
			  in  %% Line 708
			      let <_18> =
				  call 'erlang':'element'
				      (3, Ha)
			      in  let <_19> =
				      call 'erlang':'=:='
					  (_18, 'false')
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_16, _19)
					-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 709
	      {'ok',Ha}
	  %% Line 710
	  <Handler,[_30|MSL]> when 'true' ->
	      %% Line 711
	      apply 'search'/2
		  (Handler, MSL)
	  %% Line 712
	  <_31,[]> when 'true' ->
	      %% Line 713
	      'false'
	  ( <_21,_20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_21,_20})
		  -| [{'function_name',{'search',2}}] )
	    -| ['compiler_generated'] )
	end
'delete'/2 =
    %% Line 715
    fun (_0,_1) ->
	case <_0,_1> of
	  <{Mod,Id},[Ha = {'handler',_23,_24,_25,_26}|MSL]>
	      when ( try
		      let <_6> =
			  call 'erlang':'element'
			      (2, Ha)
		      in  let <_7> =
			      call 'erlang':'=:='
				  (_6, Mod)
			  in  let <_9> =
				  call %% Line 716
				       'erlang':%% Line 716
						'element'
				      (%% Line 716
				       3, %% Line 716
					  Ha)
			      in  let <_10> =
				      call %% Line 716
					   'erlang':%% Line 716
						    '=:='
					  (_9, %% Line 716
					       Id)
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_7, _10)
					-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 717
	      MSL
	  %% Line 718
	  <Mod,[Ha = {'handler',_27,_28,_29,_30}|MSL]>
	      when ( try
		      let <_15> =
			  call 'erlang':'element'
			      (2, Ha)
		      in  let <_16> =
			      call 'erlang':'=:='
				  (_15, Mod)
			  in  %% Line 719
			      let <_18> =
				  call 'erlang':'element'
				      (3, Ha)
			      in  let <_19> =
				      call 'erlang':'=:='
					  (_18, 'false')
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_16, _19)
					-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 720
	      MSL
	  %% Line 721
	  <Handler,[Ha|MSL]> when 'true' ->
	      let <_20> =
		  apply %% Line 722
			'delete'/2
		      (%% Line 722
		       Handler, %% Line 722
				MSL)
	      in  %% Line 722
		  [Ha|_20]
	  %% Line 723
	  <_31,[]> when 'true' ->
	      %% Line 724
	      []
	  ( <_22,_21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_22,_21})
		  -| [{'function_name',{'delete',2}}] )
	    -| ['compiler_generated'] )
	end
'replace'/3 =
    %% Line 726
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{Mod,Id},[Ha = {'handler',_25,_26,_27,_28}|MSL],NewHa>
	      when ( try
		      let <_7> =
			  call 'erlang':'element'
			      (2, Ha)
		      in  let <_8> =
			      call 'erlang':'=:='
				  (_7, Mod)
			  in  let <_10> =
				  call %% Line 727
				       'erlang':%% Line 727
						'element'
				      (%% Line 727
				       3, %% Line 727
					  Ha)
			      in  let <_11> =
				      call %% Line 727
					   'erlang':%% Line 727
						    '=:='
					  (_10, %% Line 727
						Id)
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_8, _11)
					-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 728
	      [NewHa|MSL]
	  %% Line 729
	  <Mod,[Ha = {'handler',_29,_30,_31,_32}|MSL],NewHa>
	      when ( try
		      let <_16> =
			  call 'erlang':'element'
			      (2, Ha)
		      in  let <_17> =
			      call 'erlang':'=:='
				  (_16, Mod)
			  in  %% Line 730
			      let <_19> =
				  call 'erlang':'element'
				      (3, Ha)
			      in  let <_20> =
				      call 'erlang':'=:='
					  (_19, 'false')
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_17, _20)
					-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 731
	      [NewHa|MSL]
	  %% Line 732
	  <Handler,[Ha|MSL],NewHa> when 'true' ->
	      let <_21> =
		  apply %% Line 733
			'replace'/3
		      (%% Line 733
		       Handler, %% Line 733
				MSL, %% Line 733
				     NewHa)
	      in  %% Line 733
		  [Ha|_21]
	  %% Line 734
	  <_33,[],NewHa> when 'true' ->
	      %% Line 735
	      [NewHa|[]]
	  ( <_24,_23,_22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_24,_23,_22})
		  -| [{'function_name',{'replace',3}}] )
	    -| ['compiler_generated'] )
	end
'server_call_update'/3 =
    %% Line 740
    fun (_0,_1,_2) ->
	%% Line 741
	( case _0 of
	    ( <( {'handler',_rec19,_21,_22,_23}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 742
		  ( case _0 of
		      ( <( {'handler',_25,_26,_rec20,_27}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_9> =
				catch
				    %% Line 743
				    call _rec19:'handle_call'
					(_1, _rec20)
			    in  %% Line 743
				case _9 of
				  %% Line 744
				  <{'ok',Reply,State1}> when 'true' ->
				      %% Line 745
				      case _0 of
					<{'handler',_29,_30,_31,_32}> when 'true' ->
					    let <_12> =
						call 'erlang':'setelement'
						    (4, _0, State1)
					    in  {{'ok',_12},Reply}
					( <_33> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','handler'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				  %% Line 746
				  <{'ok',Reply,State1,'hibernate'}> when 'true' ->
				      %% Line 747
				      case _0 of
					<{'handler',_34,_35,_36,_37}> when 'true' ->
					    let <_15> =
						call 'erlang':'setelement'
						    (4, _0, State1)
					    in  {{'hibernate',_15},%% Line 748
								   Reply}
					( <_38> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','handler'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				  %% Line 749
				  <{'swap_handler',Reply,Args1,State1,Handler2,Args2}> when 'true' ->
				      let <_16> =
					  apply %% Line 750
						'do_swap'/7
					      (_rec19, _0, %% Line 750
							   Args1, %% Line 750
								  State1, %% Line 750
									  Handler2, %% Line 750
										    Args2, _2)
				      in  %% Line 750
					  {_16,Reply}
				  %% Line 751
				  <{'remove_handler',Reply}> when 'true' ->
				      do  %% Line 752
					  apply 'do_terminate'/7
					      (_rec19, _0, 'remove_handler', _rec20, %% Line 753
										     'remove', _2, %% Line 753
												   'normal')
					  %% Line 754
					  {'no',Reply}
				  %% Line 755
				  <Other> when 'true' ->
				      do  %% Line 756
					  apply 'do_terminate'/7
					      (_rec19, _0, {'error',Other}, _rec20, _1, _2, %% Line 757
											    'crash')
					  %% Line 758
					  {'no',{'error',Other}}
				end
			-| ['compiler_generated'] )
		      ( <_28> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','handler'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_24> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','handler'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'do_terminate'/7 =
    %% Line 761
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	%% Line 762
	case call 'erlang':'function_exported'
		 (_0, 'terminate', 2) of
	  %% Line 763
	  <'true'> when 'true' ->
	      let <_7> =
		  catch
		      %% Line 764
		      call _0:'terminate'
			  (_2, _3)
	      in  do  %% Line 765
		      apply 'report_terminate'/7
			  (_1, _6, _2, _3, _4, _5, _7)
		      _7
	  %% Line 767
	  <'false'> when 'true' ->
	      do  %% Line 768
		  apply 'report_terminate'/7
		      (_1, _6, _2, _3, _4, _5, 'ok')
		  %% Line 769
		  'ok'
	  ( <_9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_9})
	    -| ['compiler_generated'] )
	end
'report_terminate'/7 =
    %% Line 772
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <Handler,'crash',{'error',Why},State,LastIn,SName,_14> when 'true' ->
	      %% Line 773
	      apply 'report_terminate'/5
		  (Handler, Why, State, LastIn, SName)
	  %% Line 774
	  <Handler,How,_15,State,LastIn,SName,_16> when 'true' ->
	      %% Line 776
	      apply 'report_terminate'/5
		  (Handler, How, State, LastIn, SName)
	end
'report_terminate'/5 =
    %% Line 778
    fun (_0,_1,_2,_3,_4) ->
	do  %% Line 779
	    apply 'report_error'/5
		(_0, _1, _2, _3, _4)
	    %% Line 780
	    ( case _0 of
		( <( {'handler',_14,_15,_16,_rec23}
		     -| ['compiler_generated'] )> when 'true' ->
		      case _rec23 of
			%% Line 781
			<'false'> when 'true' ->
			    %% Line 782
			    'ok'
			%% Line 783
			<Pid> when 'true' ->
			    let <_7> =
				apply %% Line 784
				      'handler'/1
				    (_0)
			    in  do  %% Line 784
				    call 'erlang':'!'
					(Pid, {'gen_event_EXIT',_7,_1})
				    %% Line 785
				    'ok'
		      end
		  -| ['compiler_generated'] )
		( <_17> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','handler'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'report_error'/5 =
    %% Line 788
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <_X_Handler,'normal',_21,_22,_23> when 'true' ->
	      'ok'
	  %% Line 789
	  <_X_Handler,'shutdown',_24,_25,_26> when 'true' ->
	      'ok'
	  %% Line 790
	  <_X_Handler,{'swapped',_27,_28},_29,_30,_31> when 'true' ->
	      'ok'
	  %% Line 791
	  <Handler,Reason,State,LastIn,SName> when 'true' ->
	      %% Line 792
	      case call 'logger':'allow'
		       ('error', 'gen_event') of
		<'true'> when 'true' ->
		    let <_5> =
			apply %% Line 793
			      'handler'/1
			    (%% Line 793
			     Handler)
		    in  %% Line 796
			( case Handler of
			    ( <( {'handler',_rec24,_32,_33,_34}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_6> =
				      call %% Line 797
					   'erlang':%% Line 797
						    'get'
					  ()
				  in  let <_9> =
					  apply 'format_status'/4
					      ('terminate', _rec24, _6, %% Line 797
									State)
				      in  let <_10> =
					      ~{'handler'=>_5,'name'=>SName,'last_message'=>LastIn,'state'=>_9,%% Line 798
													      'reason'=>Reason|~{'label'=>{'gen_event','terminate'}}~}~
					  in  call 'logger':'macro_log'
						  (~{'file'=>[115|[114|[99|[47|[103|[101|[110|[95|[101|[118|[101|[110|[116|[46|[101|[114|[108]]]]]]]]]]]]]]]]],'line'=>792,'mfa'=>{'gen_event','report_error',5}}~, 'error', _10, ~{'domain'=>['otp'],'error_logger'=>~{'report_cb'=>fun 'gen_event':'format_log'/1,'tag'=>'error'}~,'report_cb'=>fun 'gen_event':'format_log'/2}~)
			      -| ['compiler_generated'] )
			    ( <_35> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','handler'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		%% Line 802
		<'false'> when 'true' ->
		    'ok'
		( <_15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_15})
		  -| ['compiler_generated'] )
	      end
	end
'format_log'/1 =
    %% Line 809
    fun (_0) ->
	let <Depth> =
	    call %% Line 810
		 'error_logger':%% Line 810
				'get_format_depth'
		()
	in  let <FormatOpts> =
		~{%% Line 812
		 'depth'=>Depth,%% Line 813
				'single_line'=>'false',%% Line 814
						       'encoding'=>'utf8'|%% Line 811
		 ~{'chars_limit'=>'unlimited'}~}~
	    in  let <_3> =
		    apply %% Line 815
			  'limit_report'/2
			(_0, %% Line 815
			     Depth)
		in  %% Line 815
		    apply 'format_log_multi'/2
			(_3, FormatOpts)
'limit_report'/2 =
    %% Line 817
    fun (_0,_1) ->
	case <_0,_1> of
	  <Report,'unlimited'> when 'true' ->
	      %% Line 818
	      Report
	  %% Line 819
	  <%% Line 822
	   Report = ~{%% Line 822
		     'reason':=Reason,'label':={'gen_event','terminate'},%% Line 821
									 'state':=State,%% Line 820
											'last_message':=LastIn}~,%% Line 823
														 Depth> when 'true' ->
	      let <_2> =
		  call %% Line 824
		       'io_lib':%% Line 824
				'limit_term'
		      (%% Line 824
		       LastIn, %% Line 824
			       Depth)
	      in  let <_3> =
		      call %% Line 825
			   'io_lib':%% Line 825
				    'limit_term'
			  (%% Line 825
			   State, %% Line 825
				  Depth)
		  in  let <_4> =
			  call %% Line 826
			       'io_lib':%% Line 826
					'limit_term'
			      (%% Line 826
			       Reason, %% Line 826
				       Depth)
		      in  %% Line 824
			  case <> of
			    ( <>
				  when call 'erlang':'is_map'
					(Report) ->
				  ~{'last_message'=>_2,%% Line 825
						      'state'=>_3,%% Line 826
								  'reason'=>_4|Report}~
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  ( primop 'match_fail'
					({'badmap',Report})
				    -| [{'eval_failure','badmap'}] )
			      -| ['compiler_generated'] )
			  end
	  %% Line 827
	  <%% Line 828
	   Report = ~{'label':={'gen_event','no_handle_info'},%% Line 828
							     'message':=Msg}~,%% Line 829
									      Depth> when 'true' ->
	      let <_5> =
		  call %% Line 830
		       'io_lib':%% Line 830
				'limit_term'
		      (%% Line 830
		       Msg, %% Line 830
			    Depth)
	      in  %% Line 830
		  case <> of
		    ( <>
			  when call 'erlang':'is_map'
				(Report) ->
			  ~{'message'=>_5|Report}~
		      -| ['compiler_generated'] )
		    ( <> when 'true' ->
			  ( primop 'match_fail'
				({'badmap',Report})
			    -| [{'eval_failure','badmap'}] )
		      -| ['compiler_generated'] )
		  end
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'limit_report',2}}] )
	    -| ['compiler_generated'] )
	end
'format_log'/2 =
    %% Line 834
    fun (_0,_1) ->
	let <FormatOpts> =
	    call %% Line 839
		 'maps':%% Line 839
			'merge'
		(%% Line 835
		 ~{'chars_limit'=>'unlimited','depth'=>'unlimited','encoding'=>'utf8','single_line'=>'false'}~, _1)
	in  let <_5> =
		case %% Line 841
		     FormatOpts of
		  %% Line 842
		  <~{'chars_limit':='unlimited'}~> when 'true' ->
		      %% Line 843
		      []
		  %% Line 844
		  <~{'chars_limit':=Limit}~> when 'true' ->
		      %% Line 845
		      [{'chars_limit',Limit}|[]]
		  ( <_4> when 'true' ->
			%% Line 841
			primop 'match_fail'
			    ({'case_clause',_4})
		    -| ['compiler_generated'] )
		end
	    in  %% Line 847
		case apply 'format_log_single'/2
			 (_0, FormatOpts) of
		  <{Format,Args}> when 'true' ->
		      %% Line 848
		      call 'io_lib':'format'
			  (Format, Args, _5)
		  ( <_7> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_7})
		    -| ['compiler_generated'] )
		end
'format_log_single'/2 =
    %% Line 850
    fun (_0,_1) ->
	case <_0,_1> of
	  <~{%% Line 855
	    'reason':=Reason,'label':={'gen_event','terminate'},%% Line 851
								'handler':=Handler,%% Line 854
										   'state':=State,%% Line 853
												  'last_message':=LastIn,%% Line 852
															 'name':=SName}~,%% Line 856
																	 FormatOpts = %% Line 856
																		      ~{'depth':=Depth,'single_line':='true'}~> when 'true' ->
	      let <P> =
		  apply %% Line 857
			'p'/1
		      (%% Line 857
		       FormatOpts)
	      in  let <Reason1> =
		      apply %% Line 858
			    'fix_reason'/1
			  (%% Line 858
			   Reason)
		  in  let <Format1> =
			  call %% Line 859
			       'lists':%% Line 859
				       'append'
			      (%% Line 859
			       [[71|[101|[110|[101|[114|[105|[99|[32|[101|[118|[101|[110|[116|[32|[104|[97|[110|[100|[108|[101|[114|[32]]]]]]]]]]]]]]]]]]]]]]|[P|[[32|[99|[114|[97|[115|[104|[101|[100|[46|[32|[73|[110|[115|[116|[97|[108|[108|[101|[100|[58|[32]]]]]]]]]]]]]]]]]]]]]|%% Line 860
																																		       [P|[[46|[32|[76|[97|[115|[116|[32|[101|[118|[101|[110|[116|[58|[32]]]]]]]]]]]]]]|[P|%% Line 861
																																													   [[46|[32|[83|[116|[97|[116|[101|[58|[32]]]]]]]]]|[P|[[46|[32|[82|[101|[97|[115|[111|[110|[58|[32]]]]]]]]]]|[P|[[46]]]]]]]]]]]])
		      in  let <_6> =
			      case %% Line 863
				   Depth of
				%% Line 864
				<'unlimited'> when 'true' ->
				    %% Line 865
				    [Handler|[SName|[Reason1|[LastIn|[State|[]]]]]]
				%% Line 866
				<_15> when 'true' ->
				    %% Line 867
				    [Handler|[Depth|[SName|[Depth|[Reason1|[Depth|%% Line 868
										  [LastIn|[Depth|[State|[Depth|[]]]]]]]]]]]
			      end
			  in  %% Line 870
			      {Format1,_6}
	  %% Line 871
	  <~{'label':={'gen_event','no_handle_info'},%% Line 873
						    'message':=Msg,%% Line 872
								   'module':=Mod}~,%% Line 874
										   FormatOpts = %% Line 874
												~{'depth':=Depth,'single_line':='true'}~> when 'true' ->
	      let <P> =
		  apply %% Line 875
			'p'/1
		      (%% Line 875
		       FormatOpts)
	      in  let <Format> =
		      call %% Line 876
			   'lists':%% Line 876
				   'append'
			  (%% Line 876
			   [[85|[110|[100|[101|[102|[105|[110|[101|[100|[32|[104|[97|[110|[100|[108|[101|[95|[105|[110|[102|[111|[32|[105|[110|[32]]]]]]]]]]]]]]]]]]]]]]]]]|[P|%% Line 877
																					       [[46|[32|[85|[110|[104|[97|[110|[100|[108|[101|[100|[32|[109|[101|[115|[115|[97|[103|[101|[58|[32]]]]]]]]]]]]]]]]]]]]]|[P|[[46]]]]]])
		  in  let <_11> =
			  case %% Line 879
			       Depth of
			    %% Line 880
			    <'unlimited'> when 'true' ->
				%% Line 881
				[Mod|[Msg|[]]]
			    %% Line 882
			    <_16> when 'true' ->
				%% Line 883
				[Mod|[Depth|[Msg|[Depth|[]]]]]
			  end
		      in  %% Line 885
			  {Format,_11}
	  %% Line 886
	  <Report,FormatOpts> when 'true' ->
	      %% Line 887
	      apply 'format_log_multi'/2
		  (Report, FormatOpts)
	end
'format_log_multi'/2 =
    %% Line 889
    fun (_0,_1) ->
	case <_0,_1> of
	  <~{%% Line 894
	    'reason':=Reason,'label':={'gen_event','terminate'},%% Line 890
								'handler':=Handler,%% Line 893
										   'state':=State,%% Line 892
												  'last_message':=LastIn,%% Line 891
															 'name':=SName}~,%% Line 895
																	 FormatOpts = %% Line 895
																		      ~{'depth':=Depth}~> when 'true' ->
	      let <Reason1> =
		  apply %% Line 896
			'fix_reason'/1
		      (%% Line 896
		       Reason)
	      in  let <P> =
		      apply %% Line 897
			    'p'/1
			  (%% Line 897
			   FormatOpts)
		  in  let <Format> =
			  call %% Line 899
			       'lists':%% Line 899
				       'append'
			      (%% Line 899
			       [[42|[42|[32|[103|[101|[110|[95|[101|[118|[101|[110|[116|[32|[104|[97|[110|[100|[108|[101|[114|[32]]]]]]]]]]]]]]]]]]]]]|[P|[[32|[99|[114|[97|[115|[104|[101|[100|[46|[10]]]]]]]]]]|%% Line 900
																										  [[42|[42|[32|[87|[97|[115|[32|[105|[110|[115|[116|[97|[108|[108|[101|[100|[32|[105|[110|[32]]]]]]]]]]]]]]]]]]]]|[P|[[10]|%% Line 901
																																									   [[42|[42|[32|[76|[97|[115|[116|[32|[101|[118|[101|[110|[116|[32|[119|[97|[115|[58|[32]]]]]]]]]]]]]]]]]]]|[P|[[10]|%% Line 902
																																																							     [[42|[42|[32|[87|[104|[101|[110|[32|[104|[97|[110|[100|[108|[101|[114|[32|[115|[116|[97|[116|[101|[32|[61|[61|[32]]]]]]]]]]]]]]]]]]]]]]]]]|[P|[[10]|%% Line 903
																																																																										 [[42|[42|[32|[82|[101|[97|[115|[111|[110|[32|[61|[61|[32]]]]]]]]]]]]]|[P|[[10]]]]]]]]]]]]]]]])
		      in  let <_6> =
			      case %% Line 905
				   Depth of
				%% Line 906
				<'unlimited'> when 'true' ->
				    %% Line 907
				    [Handler|[SName|[LastIn|[State|[Reason1|[]]]]]]
				%% Line 908
				<_16> when 'true' ->
				    %% Line 909
				    [Handler|[Depth|[SName|[Depth|[LastIn|[Depth|[State|[Depth|%% Line 910
											       [Reason1|[Depth|[]]]]]]]]]]]
			      end
			  in  %% Line 912
			      {Format,_6}
	  %% Line 913
	  <~{'label':={'gen_event','no_handle_info'},%% Line 915
						    'message':=Msg,%% Line 914
								   'module':=Mod}~,%% Line 916
										   FormatOpts = %% Line 916
												~{'depth':=Depth}~> when 'true' ->
	      let <P> =
		  apply %% Line 917
			'p'/1
		      (%% Line 917
		       FormatOpts)
	      in  let <_9> =
		      call %% Line 920
			   'erlang':%% Line 920
				    '++'
			  (%% Line 920
			   P, %% Line 920
			      [10])
		  in  let <Format> =
			  call %% Line 920
			       'erlang':%% Line 920
					'++'
			      (%% Line 919
			       [42|[42|[32|[85|[110|[100|[101|[102|[105|[110|[101|[100|[32|[104|[97|[110|[100|[108|[101|[95|[105|[110|[102|[111|[32|[105|[110|[32|[126|[112|[10|[42|[42|[32|[85|[110|[104|[97|[110|[100|[108|[101|[100|[32|[109|[101|[115|[115|[97|[103|[101|[58|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], _9)
		      in  let <_12> =
			      case %% Line 922
				   Depth of
				%% Line 923
				<'unlimited'> when 'true' ->
				    %% Line 924
				    [Mod|[Msg|[]]]
				%% Line 925
				<_17> when 'true' ->
				    %% Line 926
				    [Mod|[Msg|[Depth|[]]]]
			      end
			  in  %% Line 928
			      {Format,_12}
	  ( <_15,_14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_15,_14})
		  -| [{'function_name',{'format_log_multi',2}}] )
	    -| ['compiler_generated'] )
	end
'fix_reason'/1 =
    %% Line 930
    fun (_0) ->
	case _0 of
	  <{'EXIT',Reason = {'undef',MFAs = [{M,F,A,_X_L}|_5]}}> when 'true' ->
	      %% Line 931
	      case call 'code':'is_loaded'
		       (M) of
		%% Line 932
		<'false'> when 'true' ->
		    %% Line 933
		    {'module could not be loaded',MFAs}
		%% Line 934
		<_6> when 'true' ->
		    let <_1> =
			call %% Line 935
			     'erlang':%% Line 935
				      'length'
			    (%% Line 935
			     A)
		    in  %% Line 935
			case call 'erlang':'function_exported'
				 (M, F, _1) of
			  %% Line 936
			  <'true'> when 'true' ->
			      %% Line 937
			      Reason
			  %% Line 938
			  <'false'> when 'true' ->
			      %% Line 939
			      {'function not exported',MFAs}
			  ( <_2> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_2})
			    -| ['compiler_generated'] )
			end
	      end
	  %% Line 942
	  <{'EXIT',Reason}> when 'true' ->
	      %% Line 943
	      Reason
	  %% Line 944
	  <Reason> when 'true' ->
	      %% Line 945
	      Reason
	end
'p'/1 =
    %% Line 947
    fun (_0) ->
	case _0 of
	  <~{'depth':=Depth,'encoding':=Enc,'single_line':=Single}~> when 'true' ->
	      let <_4> =
		  apply %% Line 948
			'single'/1
		      (%% Line 948
		       Single)
	      in  let <_2> =
		      apply %% Line 948
			    'mod'/1
			  (%% Line 948
			   Enc)
		  in  let <_1> =
			  apply %% Line 948
				'p'/1
			      (%% Line 948
			       Depth)
		      in  let <_3> =
			      call %% Line 948
				   'erlang':%% Line 948
					    '++'
				  (_2, _1)
			  in  let <_5> =
				  call %% Line 948
				       'erlang':%% Line 948
						'++'
				      (_4, _3)
			      in  %% Line 948
				  [126|_5]
	  %% Line 949
	  <'unlimited'> when 'true' ->
	      %% Line 950
	      [112]
	  %% Line 951
	  <_X_Depth> when 'true' ->
	      %% Line 952
	      [80]
	end
'single'/1 =
    %% Line 954
    fun (_0) ->
	case _0 of
	  <'true'> when 'true' ->
	      [48]
	  %% Line 955
	  <'false'> when 'true' ->
	      []
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'single',1}}] )
	    -| ['compiler_generated'] )
	end
'mod'/1 =
    %% Line 957
    fun (_0) ->
	case _0 of
	  <'latin1'> when 'true' ->
	      []
	  %% Line 958
	  <_2> when 'true' ->
	      [116]
	end
'handler'/1 =
    %% Line 960
    fun (_0) ->
	case _0 of
	  <Handler>
	      when try
		    ( let <_3> =
			  case ( call ( 'erlang'
					-| ['compiler_generated'] ):( 'is_record'
								      -| ['compiler_generated'] )
				     (_0, ( 'handler'
					    -| ['compiler_generated'] ), ( 5
									   -| ['compiler_generated'] ))
				 -| ['compiler_generated'] ) of
			    ( <( 'true'
				 -| ['compiler_generated'] )> when 'true' ->
				  ( 'true'
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <( 'false'
				 -| ['compiler_generated'] )> when 'true' ->
				  ( 'fail'
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <( _1
				 -| ['compiler_generated'] )> when 'true' ->
				  ( _1
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      in  let <_4> =
			      call 'erlang':'=:='
				  (( _3
				     -| ['compiler_generated'] ), 'true')
			  in  let <_5> =
				  call 'erlang':'element'
				      (3, _0)
			      in  let <_6> =
				      call 'erlang':'=:='
					  (_5, 'true')
				  in  let <_7> =
					  call ( 'erlang'
						 -| ['compiler_generated'] ):( 'and'
									       -| ['compiler_generated'] )
					      (_4, _6)
				      in  let <_8> =
					      call 'erlang':'not'
						  (_7)
					  in  let <_9> =
						  call 'erlang':'is_boolean'
						      (_5)
					      in  let <_10> =
						      call 'erlang':'and'
							  (_8, _9)
						  in  let <_11> =
							  call 'erlang':'is_boolean'
							      (_3)
						      in  ( call 'erlang':'and'
								(_10, _11)
							    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 961
	      ( case Handler of
		  ( <( {'handler',_rec25,_18,_19,_20}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec25
		    -| ['compiler_generated'] )
		  ( <_21> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','handler'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 962
	  <Handler> when 'true' ->
	      %% Line 963
	      ( case Handler of
		  ( <( {'handler',_rec26,_22,_23,_24}
		       -| ['compiler_generated'] )> when 'true' ->
			( case Handler of
			    ( <( {'handler',_26,_rec27,_27,_28}
				 -| ['compiler_generated'] )> when 'true' ->
				  {_rec26,_rec27}
			      -| ['compiler_generated'] )
			    ( <_29> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','handler'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_25> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','handler'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'the_handlers'/1 =
    %% Line 965
    fun (_0) ->
	%% Line 966
	( letrec
	      'lc$^0'/1 =
		  fun (_3) ->
		      case _3 of
			<[Handler|_2]> when 'true' ->
			    let <_4> =
				apply 'handler'/1
				    (Handler)
			    in  let <_5> =
				    apply 'lc$^0'/1
					(_2)
				in  ( [_4|_5]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_7> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_7})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_0)
	  -| ['list_comprehension'] )
'stop_handlers'/2 =
    %% Line 970
    fun (_0,_1) ->
	case <_0,_1> of
	  <[Handler|T],SName> when 'true' ->
	      %% Line 971
	      ( case Handler of
		  ( <( {'handler',_rec28,_9,_10,_11}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 972
			( case Handler of
			    ( <( {'handler',_13,_14,_rec29,_15}
				 -| ['compiler_generated'] )> when 'true' ->
				  do  apply 'do_terminate'/7
					  (_rec28, Handler, 'stop', _rec29, %% Line 973
									    'stop', %% Line 973
										    SName, %% Line 973
											   'shutdown')
				      %% Line 974
				      apply 'stop_handlers'/2
					  (T, SName)
			      -| ['compiler_generated'] )
			    ( <_16> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','handler'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_12> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','handler'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 975
	  <[],_17> when 'true' ->
	      %% Line 976
	      []
	  ( <_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7})
		  -| [{'function_name',{'stop_handlers',2}}] )
	    -| ['compiler_generated'] )
	end
'get_modules'/1 =
    %% Line 980
    fun (_0) ->
	let <_7> =
	    letrec
		'lc$^0'/1 =
		    %% Line 981
		    fun (_3) ->
			case _3 of
			  <[Handler|_2]> when 'true' ->
			      ( case Handler of
				  ( <( {'handler',_rec30,_11,_12,_13}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_6> =
					    apply 'lc$^0'/1
						(_2)
					in  ( [_rec30|_6]
					      -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <_14> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','handler'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_15> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_15})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 981
		apply 'lc$^0'/1
		    (_0)
	in  let <_9> =
		call %% Line 982
		     'ordsets':%% Line 982
			       'from_list'
		    (_7)
	    in  %% Line 982
		call 'ordsets':'to_list'
		    (_9)
'format_status'/2 =
    %% Line 987
    fun (_0,_1) ->
	%% Line 988
	case _1 of
	  <[PDict|[SysState|[Parent|[_X_Debug|[[ServerName|[MSL|[_X_HibernateAfterTimeout|[_X_Hib|[]]]]]|[]]]]]]> when 'true' ->
	      let <Header> =
		  call %% Line 989
		       'gen':%% Line 989
			     'format_status_header'
		      (%% Line 989
		       [83|[116|[97|[116|[117|[115|[32|[102|[111|[114|[32|[101|[118|[101|[110|[116|[32|[104|[97|[110|[100|[108|[101|[114]]]]]]]]]]]]]]]]]]]]]]]], %% Line 990
																				  ServerName)
	      in  let <_12> =
		      letrec
			  'lc$^0'/1 =
			      %% Line 992
			      fun (_6) ->
				  case _6 of
				    <[MS = {'handler',Mod,_16,State,_17}|_5]> when 'true' ->
					let <_rec31> =
					    apply 'format_status'/4
						(_0, Mod, PDict, State)
					in  case MS of
					      <{'handler',_18,_19,_20,_21}> when 'true' ->
						  let <_10> =
						      call 'erlang':'setelement'
							  (4, MS, _rec31)
						  in  let <_11> =
							  apply 'lc$^0'/1
							      (_5)
						      in  ( [_10|_11]
							    -| ['compiler_generated'] )
					      ( <_22> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','handler'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
				    ( <[_4|_5]> when 'true' ->
					  apply 'lc$^0'/1
					      (_5)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_23> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_23})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  %% Line 992
			  apply 'lc$^0'/1
			      (MSL)
		  in  %% Line 993
		      [{'header',Header}|%% Line 994
					 [{'data',[{[83|[116|[97|[116|[117|[115]]]]]],SysState}|%% Line 995
												[{[80|[97|[114|[101|[110|[116]]]]]],Parent}|[]]]}|%% Line 996
																		  [{'items',{[73|[110|[115|[116|[97|[108|[108|[101|[100|[32|[104|[97|[110|[100|[108|[101|[114|[115]]]]]]]]]]]]]]]]]],_12}}|[]]]]
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_2})
	    -| ['compiler_generated'] )
	end
'format_status'/4 =
    %% Line 998
    fun (_0,_1,_2,_3) ->
	%% Line 999
	case call 'erlang':'function_exported'
		 (_1, 'format_status', 2) of
	  %% Line 1000
	  <'true'> when 'true' ->
	      let <Args> =
		  [_2|%% Line 1001
		      [_3|[]]]
	      in  let <_5> =
		      catch
			  %% Line 1002
			  call _1:'format_status'
			      (_0, Args)
		  in  %% Line 1002
		      case _5 of
			%% Line 1003
			<{'EXIT',_12}> when 'true' ->
			    _3
			%% Line 1004
			<Else> when 'true' ->
			    Else
		      end
	  %% Line 1006
	  <'false'> when 'true' ->
	      _3
	  ( <_7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_7})
	    -| ['compiler_generated'] )
	end
'behaviour_info'/1 =
    fun (_0) ->
	case _0 of
	  <'callbacks'> when 'true' ->
	      [{'init',1}|[{'handle_event',2}|[{'handle_call',2}|[{'handle_info',2}|[{'terminate',2}|[{'code_change',3}|[{'format_status',2}]]]]]]]
	  <'optional_callbacks'> when 'true' ->
	      [{'handle_info',2}|[{'terminate',2}|[{'code_change',3}|[{'format_status',2}]]]]
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'behaviour_info',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('gen_event')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('gen_event', _0)
end