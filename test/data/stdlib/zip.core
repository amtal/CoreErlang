module 'zip' ['create'/2,
	      'create'/3,
	      'extract'/1,
	      'extract'/2,
	      'foldl'/3,
	      'list_dir'/1,
	      'list_dir'/2,
	      'module_info'/0,
	      'module_info'/1,
	      'openzip_close'/1,
	      'openzip_get'/1,
	      'openzip_get'/2,
	      'openzip_list_dir'/1,
	      'openzip_list_dir'/2,
	      'openzip_open'/1,
	      'openzip_open'/2,
	      'openzip_t'/1,
	      'openzip_tt'/1,
	      't'/1,
	      'table'/1,
	      'table'/2,
	      'tt'/1,
	      'unzip'/1,
	      'unzip'/2,
	      'zip'/2,
	      'zip'/3,
	      'zip_close'/1,
	      'zip_get'/1,
	      'zip_get'/2,
	      'zip_get_state'/1,
	      'zip_list_dir'/1,
	      'zip_list_dir'/2,
	      'zip_open'/1,
	      'zip_open'/2,
	      'zip_t'/1,
	      'zip_tt'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[122|[105|[112|[46|[101|[114|[108]]]]]]]]]]],1}],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[47|[85|[115|[101|[114|[115|[47|[102|[101|[110|[103|[108|[101|[101|[47|[72|[97|[109|[108|[101|[114|[47|[111|[116|[112|[45|[79|[84|[80|[45|[50|[51|[46|[48|[45|[114|[99|[49|[47|[108|[105|[98|[47|[115|[116|[100|[108|[105|[98|[47|[46|[46|[47|[107|[101|[114|[110|[101|[108|[47|[105|[110|[99|[108|[117|[100|[101|[47|[102|[105|[108|[101|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 25
		'record' =
		    %% Line 25
		    [{'file_info',[{'typed_record_field',{'record_field',26,{'atom',26,'size'}},{'type',26,'union',[{'type',26,'non_neg_integer',[]}|[{'atom',26,'undefined'}]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'type'}},{'type',27,'union',[{'atom',27,'device'}|[{'atom',27,'directory'}|[{'atom',27,'other'}|[{'atom',27,'regular'}|[{'atom',27,'symlink'}|[{'atom',28,'undefined'}]]]]]]}}|[{'typed_record_field',{'record_field',29,{'atom',29,'access'}},{'type',29,'union',[{'atom',29,'read'}|[{'atom',29,'write'}|[{'atom',29,'read_write'}|[{'atom',29,'none'}|[{'atom',29,'undefined'}]]]]]}}|[{'typed_record_field',{'record_field',30,{'atom',30,'atime'}},{'type',30,'union',[{'remote_type',30,[{'atom',30,'file'}|[{'atom',30,'date_time'}|[[]]]]}|[{'type',30,'non_neg_integer',[]}|[{'atom',30,'undefined'}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'mtime'}},{'type',34,'union',[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}|[{'atom',34,'undefined'}]]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'ctime'}},{'type',36,'union',[{'remote_type',36,[{'atom',36,'file'}|[{'atom',36,'date_time'}|[[]]]]}|[{'type',36,'non_neg_integer',[]}|[{'atom',36,'undefined'}]]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'mode'}},{'type',42,'union',[{'type',42,'non_neg_integer',[]}|[{'atom',42,'undefined'}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'links'}},{'type',46,'union',[{'type',46,'non_neg_integer',[]}|[{'atom',46,'undefined'}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'major_device'}},{'type',49,'union',[{'type',49,'non_neg_integer',[]}|[{'atom',49,'undefined'}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'minor_device'}},{'type',55,'union',[{'type',55,'non_neg_integer',[]}|[{'atom',55,'undefined'}]]}}|[{'typed_record_field',{'record_field',57,{'atom',57,'inode'}},{'type',57,'union',[{'type',57,'non_neg_integer',[]}|[{'atom',57,'undefined'}]]}}|[{'typed_record_field',{'record_field',58,{'atom',58,'uid'}},{'type',58,'union',[{'type',58,'non_neg_integer',[]}|[{'atom',58,'undefined'}]]}}|[{'typed_record_field',{'record_field',59,{'atom',59,'gid'}},{'type',59,'union',[{'type',59,'non_neg_integer',[]}|[{'atom',59,'undefined'}]]}}]]]]]]]]]]]]]}],
		%% Line 62
		'record' =
		    %% Line 62
		    [{'file_descriptor',[{'typed_record_field',{'record_field',63,{'atom',63,'module'}},{'type',63,'module',[]}}|[{'typed_record_field',{'record_field',64,{'atom',64,'data'}},{'type',64,'term',[]}}]]}],
		%% Line 47
		'file' =
		    %% Line 47
		    [{[115|[114|[99|[47|[122|[105|[112|[46|[101|[114|[108]]]]]]]]]]],47}],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[47|[85|[115|[101|[114|[115|[47|[102|[101|[110|[103|[108|[101|[101|[47|[72|[97|[109|[108|[101|[114|[47|[111|[116|[112|[45|[79|[84|[80|[45|[50|[51|[46|[48|[45|[114|[99|[49|[47|[108|[105|[98|[47|[115|[116|[100|[108|[105|[98|[47|[105|[110|[99|[108|[117|[100|[101|[47|[122|[105|[112|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 21
		'record' =
		    %% Line 21
		    [{'zip_file',[{'typed_record_field',{'record_field',22,{'atom',22,'name'}},{'type',22,'string',[]}}|[{'typed_record_field',{'record_field',23,{'atom',23,'info'}},{'remote_type',23,[{'atom',23,'file'}|[{'atom',23,'file_info'}|[[]]]]}}|[{'typed_record_field',{'record_field',24,{'atom',24,'comment'}},{'type',24,'string',[]}}|[{'typed_record_field',{'record_field',25,{'atom',25,'offset'}},{'type',25,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'comp_size'}},{'type',26,'non_neg_integer',[]}}]]]]]}],
		%% Line 29
		'record' =
		    %% Line 29
		    [{'zip_comment',[{'typed_record_field',{'record_field',30,{'atom',30,'comment'}},{'type',30,'string',[]}}]}],
		%% Line 48
		'file' =
		    %% Line 48
		    [{[115|[114|[99|[47|[122|[105|[112|[46|[101|[114|[108]]]]]]]]]]],48}],
		%% Line 61
		'record' =
		    %% Line 61
		    [{'unzip_opts',[{'record_field',62,{'atom',62,'output'}}|[{'record_field',63,{'atom',63,'input'}}|[{'record_field',64,{'atom',64,'file_filter'}}|[{'record_field',65,{'atom',65,'open_opts'}}|[{'record_field',66,{'atom',66,'feedback'}}|[{'record_field',67,{'atom',67,'cwd'}}]]]]]]}],
		%% Line 70
		'record' =
		    %% Line 70
		    [{'zip_opts',[{'record_field',71,{'atom',71,'output'}}|[{'record_field',72,{'atom',72,'input'}}|[{'record_field',73,{'atom',73,'comment'}}|[{'record_field',74,{'atom',74,'open_opts'}}|[{'record_field',75,{'atom',75,'feedback'}}|[{'record_field',76,{'atom',76,'cwd'}}|[{'record_field',77,{'atom',77,'compress'}}|[{'record_field',78,{'atom',78,'uncompress'}}]]]]]]]]}],
		%% Line 81
		'record' =
		    %% Line 81
		    [{'list_dir_opts',[{'record_field',82,{'atom',82,'input'}}|[{'record_field',83,{'atom',83,'raw_iterator'}}|[{'record_field',84,{'atom',84,'open_opts'}}]]]}],
		%% Line 87
		'record' =
		    %% Line 87
		    [{'openzip_opts',[{'record_field',88,{'atom',88,'output'}}|[{'record_field',89,{'atom',89,'open_opts'}}|[{'record_field',90,{'atom',90,'cwd'}}]]]}],
		%% Line 94
		'record' =
		    %% Line 94
		    [{'openzip',[{'record_field',95,{'atom',95,'zip_comment'}}|[{'record_field',96,{'atom',96,'files'}}|[{'record_field',97,{'atom',97,'in'}}|[{'record_field',98,{'atom',98,'input'}}|[{'record_field',99,{'atom',99,'output'}}|[{'record_field',100,{'atom',100,'zlib'}}|[{'record_field',101,{'atom',101,'cwd'}}]]]]]]]}],
		%% Line 107
		'record' =
		    %% Line 107
		    [{'zip_file_extra',[{'record_field',108,{'atom',108,'crc32'}}]}],
		%% Line 153
		'record' =
		    %% Line 153
		    [{'local_file_header',[{'record_field',153,{'atom',153,'version_needed'}}|[{'record_field',154,{'atom',154,'gp_flag'}}|[{'record_field',155,{'atom',155,'comp_method'}}|[{'record_field',156,{'atom',156,'last_mod_time'}}|[{'record_field',157,{'atom',157,'last_mod_date'}}|[{'record_field',158,{'atom',158,'crc32'}}|[{'record_field',159,{'atom',159,'comp_size'}}|[{'record_field',160,{'atom',160,'uncomp_size'}}|[{'record_field',161,{'atom',161,'file_name_length'}}|[{'record_field',162,{'atom',162,'extra_field_length'}}]]]]]]]]]]}],
		%% Line 174
		'record' =
		    %% Line 174
		    [{'cd_file_header',[{'record_field',174,{'atom',174,'version_made_by'}}|[{'record_field',175,{'atom',175,'version_needed'}}|[{'record_field',176,{'atom',176,'gp_flag'}}|[{'record_field',177,{'atom',177,'comp_method'}}|[{'record_field',178,{'atom',178,'last_mod_time'}}|[{'record_field',179,{'atom',179,'last_mod_date'}}|[{'record_field',180,{'atom',180,'crc32'}}|[{'record_field',181,{'atom',181,'comp_size'}}|[{'record_field',182,{'atom',182,'uncomp_size'}}|[{'record_field',183,{'atom',183,'file_name_length'}}|[{'record_field',184,{'atom',184,'extra_field_length'}}|[{'record_field',185,{'atom',185,'file_comment_length'}}|[{'record_field',186,{'atom',186,'disk_num_start'}}|[{'record_field',187,{'atom',187,'internal_attr'}}|[{'record_field',188,{'atom',188,'external_attr'}}|[{'record_field',189,{'atom',189,'local_header_offset'}}]]]]]]]]]]]]]]]]}],
		%% Line 194
		'record' =
		    %% Line 194
		    [{'eocd',[{'record_field',194,{'atom',194,'disk_num'}}|[{'record_field',195,{'atom',195,'start_disk_num'}}|[{'record_field',196,{'atom',196,'entries_on_disk'}}|[{'record_field',197,{'atom',197,'entries'}}|[{'record_field',198,{'atom',198,'size'}}|[{'record_field',199,{'atom',199,'offset'}}|[{'record_field',200,{'atom',200,'zip_comment_length'}}]]]]]]]}],
		%% Line 203
		'type' =
		    %% Line 203
		    [{'create_option',{'type',203,'union',[{'atom',203,'memory'}|[{'atom',203,'cooked'}|[{'atom',203,'verbose'}|[{'type',204,'tuple',[{'atom',204,'comment'}|[{'ann_type',204,[{'var',204,'Comment'}|[{'type',204,'string',[]}]]}]]}|[{'type',205,'tuple',[{'atom',205,'cwd'}|[{'ann_type',205,[{'var',205,'CWD'}|[{'remote_type',205,[{'atom',205,'file'}|[{'atom',205,'filename'}|[[]]]]}]]}]]}|[{'type',206,'tuple',[{'atom',206,'compress'}|[{'ann_type',206,[{'var',206,'What'}|[{'user_type',206,'extension_spec',[]}]]}]]}|[{'type',207,'tuple',[{'atom',207,'uncompress'}|[{'ann_type',207,[{'var',207,'What'}|[{'user_type',207,'extension_spec',[]}]]}]]}]]]]]]]},[]}],
		%% Line 208
		'type' =
		    %% Line 208
		    [{'extension',{'type',208,'string',[]},[]}],
		%% Line 209
		'type' =
		    %% Line 209
		    [{'extension_spec',{'type',209,'union',[{'atom',209,'all'}|[{'type',210,'list',[{'ann_type',210,[{'var',210,'Extension'}|[{'user_type',210,'extension',[]}]]}]}|[{'type',211,'tuple',[{'atom',211,'add'}|[{'type',211,'list',[{'ann_type',211,[{'var',211,'Extension'}|[{'user_type',211,'extension',[]}]]}]}]]}|[{'type',212,'tuple',[{'atom',212,'del'}|[{'type',212,'list',[{'ann_type',212,[{'var',212,'Extension'}|[{'user_type',212,'extension',[]}]]}]}]]}]]]]},[]}],
		%% Line 213
		'type' =
		    %% Line 213
		    [{'filename',{'remote_type',213,[{'atom',213,'file'}|[{'atom',213,'filename'}|[[]]]]},[]}],
		%% Line 215
		'type' =
		    %% Line 215
		    [{'zip_comment',{'type',215,'record',[{'atom',215,'zip_comment'}]},[]}],
		%% Line 216
		'type' =
		    %% Line 216
		    [{'zip_file',{'type',216,'record',[{'atom',216,'zip_file'}]},[]}],
		%% Line 218
		'opaque' =
		    %% Line 218
		    [{'handle',{'type',218,'pid',[]},[]}],
		%% Line 220
		'export_type' =
		    %% Line 220
		    [{'create_option',0}|[{'filename',0}|[{'handle',0}]]],
		%% Line 346
		'spec' =
		    %% Line 346
		    [{{'unzip',1},[{'type',346,'bounded_fun',[{'type',346,'fun',[{'type',346,'product',[{'var',346,'Archive'}]}|[{'var',346,'RetValue'}]]}|[[{'type',347,'constraint',[{'atom',347,'is_subtype'}|[[{'var',347,'Archive'}|[{'type',347,'union',[{'remote_type',347,[{'atom',347,'file'}|[{'atom',347,'name'}|[[]]]]}|[{'type',347,'binary',[]}]]}]]]]}|[{'type',348,'constraint',[{'atom',348,'is_subtype'}|[[{'var',348,'RetValue'}|[{'type',348,'union',[{'type',348,'tuple',[{'atom',348,'ok'}|[{'var',348,'FileList'}]]}|[{'type',349,'tuple',[{'atom',349,'ok'}|[{'var',349,'FileBinList'}]]}|[{'type',350,'tuple',[{'atom',350,'error'}|[{'ann_type',350,[{'var',350,'Reason'}|[{'type',350,'term',[]}]]}]]}|[{'type',351,'tuple',[{'atom',351,'error'}|[{'type',351,'tuple',[{'ann_type',351,[{'var',351,'Name'}|[{'remote_type',351,[{'atom',351,'file'}|[{'atom',351,'name'}|[[]]]]}]]}|[{'ann_type',351,[{'var',351,'Reason'}|[{'type',351,'term',[]}]]}]]}]]}]]]]}]]]]}|[{'type',352,'constraint',[{'atom',352,'is_subtype'}|[[{'var',352,'FileList'}|[{'type',352,'list',[{'remote_type',352,[{'atom',352,'file'}|[{'atom',352,'name'}|[[]]]]}]}]]]]}|[{'type',353,'constraint',[{'atom',353,'is_subtype'}|[[{'var',353,'FileBinList'}|[{'type',353,'list',[{'type',353,'tuple',[{'remote_type',353,[{'atom',353,'file'}|[{'atom',353,'name'}|[[]]]]}|[{'type',353,'binary',[]}]]}]}]]]]}]]]]]]}]}],
		%% Line 357
		'spec' =
		    %% Line 357
		    [{{'unzip',2},[{'type',357,'bounded_fun',[{'type',357,'fun',[{'type',357,'product',[{'var',357,'Archive'}|[{'var',357,'Options'}]]}|[{'var',357,'RetValue'}]]}|[[{'type',358,'constraint',[{'atom',358,'is_subtype'}|[[{'var',358,'Archive'}|[{'type',358,'union',[{'remote_type',358,[{'atom',358,'file'}|[{'atom',358,'name'}|[[]]]]}|[{'type',358,'binary',[]}]]}]]]]}|[{'type',359,'constraint',[{'atom',359,'is_subtype'}|[[{'var',359,'Options'}|[{'type',359,'list',[{'var',359,'Option'}]}]]]]}|[{'type',360,'constraint',[{'atom',360,'is_subtype'}|[[{'var',360,'Option'}|[{'type',360,'union',[{'type',360,'tuple',[{'atom',360,'file_list'}|[{'var',360,'FileList'}]]}|[{'atom',360,'cooked'}|[{'atom',361,'keep_old_files'}|[{'atom',361,'verbose'}|[{'atom',361,'memory'}|[{'type',362,'tuple',[{'atom',362,'file_filter'}|[{'var',362,'FileFilter'}]]}|[{'type',362,'tuple',[{'atom',362,'cwd'}|[{'var',362,'CWD'}]]}]]]]]]]}]]]]}|[{'type',363,'constraint',[{'atom',363,'is_subtype'}|[[{'var',363,'FileList'}|[{'type',363,'list',[{'remote_type',363,[{'atom',363,'file'}|[{'atom',363,'name'}|[[]]]]}]}]]]]}|[{'type',364,'constraint',[{'atom',364,'is_subtype'}|[[{'var',364,'FileBinList'}|[{'type',364,'list',[{'type',364,'tuple',[{'remote_type',364,[{'atom',364,'file'}|[{'atom',364,'name'}|[[]]]]}|[{'type',364,'binary',[]}]]}]}]]]]}|[{'type',365,'constraint',[{'atom',365,'is_subtype'}|[[{'var',365,'FileFilter'}|[{'type',365,'fun',[{'type',365,'product',[{'var',365,'ZipFile'}]}|[{'type',365,'boolean',[]}]]}]]]]}|[{'type',366,'constraint',[{'atom',366,'is_subtype'}|[[{'var',366,'CWD'}|[{'remote_type',366,[{'atom',366,'file'}|[{'atom',366,'filename'}|[[]]]]}]]]]}|[{'type',367,'constraint',[{'atom',367,'is_subtype'}|[[{'var',367,'ZipFile'}|[{'user_type',367,'zip_file',[]}]]]]}|[{'type',368,'constraint',[{'atom',368,'is_subtype'}|[[{'var',368,'RetValue'}|[{'type',368,'union',[{'type',368,'tuple',[{'atom',368,'ok'}|[{'var',368,'FileList'}]]}|[{'type',369,'tuple',[{'atom',369,'ok'}|[{'var',369,'FileBinList'}]]}|[{'type',370,'tuple',[{'atom',370,'error'}|[{'ann_type',370,[{'var',370,'Reason'}|[{'type',370,'term',[]}]]}]]}|[{'type',371,'tuple',[{'atom',371,'error'}|[{'type',371,'tuple',[{'ann_type',371,[{'var',371,'Name'}|[{'remote_type',371,[{'atom',371,'file'}|[{'atom',371,'name'}|[[]]]]}]]}|[{'ann_type',371,[{'var',371,'Reason'}|[{'type',371,'term',[]}]]}]]}]]}]]]]}]]]]}]]]]]]]]]]]}]}],
		%% Line 396
		'spec' =
		    %% Line 396
		    [{{'foldl',3},[{'type',396,'bounded_fun',[{'type',396,'fun',[{'type',396,'product',[{'var',396,'Fun'}|[{'var',396,'Acc0'}|[{'var',396,'Archive'}]]]}|[{'type',396,'union',[{'type',396,'tuple',[{'atom',396,'ok'}|[{'var',396,'Acc1'}]]}|[{'type',396,'tuple',[{'atom',396,'error'}|[{'var',396,'Reason'}]]}]]}]]}|[[{'type',397,'constraint',[{'atom',397,'is_subtype'}|[[{'var',397,'Fun'}|[{'type',397,'fun',[{'type',397,'product',[{'var',397,'FileInArchive'}|[{'var',397,'GetInfo'}|[{'var',397,'GetBin'}|[{'var',397,'AccIn'}]]]]}|[{'var',397,'AccOut'}]]}]]]]}|[{'type',398,'constraint',[{'atom',398,'is_subtype'}|[[{'var',398,'FileInArchive'}|[{'remote_type',398,[{'atom',398,'file'}|[{'atom',398,'name'}|[[]]]]}]]]]}|[{'type',399,'constraint',[{'atom',399,'is_subtype'}|[[{'var',399,'GetInfo'}|[{'type',399,'fun',[{'type',399,'product',[]}|[{'remote_type',399,[{'atom',399,'file'}|[{'atom',399,'file_info'}|[[]]]]}]]}]]]]}|[{'type',400,'constraint',[{'atom',400,'is_subtype'}|[[{'var',400,'GetBin'}|[{'type',400,'fun',[{'type',400,'product',[]}|[{'type',400,'binary',[]}]]}]]]]}|[{'type',401,'constraint',[{'atom',401,'is_subtype'}|[[{'var',401,'Acc0'}|[{'type',401,'term',[]}]]]]}|[{'type',402,'constraint',[{'atom',402,'is_subtype'}|[[{'var',402,'Acc1'}|[{'type',402,'term',[]}]]]]}|[{'type',403,'constraint',[{'atom',403,'is_subtype'}|[[{'var',403,'AccIn'}|[{'type',403,'term',[]}]]]]}|[{'type',404,'constraint',[{'atom',404,'is_subtype'}|[[{'var',404,'AccOut'}|[{'type',404,'term',[]}]]]]}|[{'type',405,'constraint',[{'atom',405,'is_subtype'}|[[{'var',405,'Archive'}|[{'type',405,'union',[{'remote_type',405,[{'atom',405,'file'}|[{'atom',405,'name'}|[[]]]]}|[{'type',405,'tuple',[{'remote_type',405,[{'atom',405,'file'}|[{'atom',405,'name'}|[[]]]]}|[{'type',405,'binary',[]}]]}]]}]]]]}|[{'type',406,'constraint',[{'atom',406,'is_subtype'}|[[{'var',406,'Reason'}|[{'type',406,'term',[]}]]]]}]]]]]]]]]]]]}]}],
		%% Line 431
		'spec' =
		    %% Line 431
		    [{{'zip',2},[{'type',431,'bounded_fun',[{'type',431,'fun',[{'type',431,'product',[{'var',431,'Name'}|[{'var',431,'FileList'}]]}|[{'var',431,'RetValue'}]]}|[[{'type',432,'constraint',[{'atom',432,'is_subtype'}|[[{'var',432,'Name'}|[{'remote_type',432,[{'atom',432,'file'}|[{'atom',432,'name'}|[[]]]]}]]]]}|[{'type',433,'constraint',[{'atom',433,'is_subtype'}|[[{'var',433,'FileList'}|[{'type',433,'list',[{'var',433,'FileSpec'}]}]]]]}|[{'type',434,'constraint',[{'atom',434,'is_subtype'}|[[{'var',434,'FileSpec'}|[{'type',434,'union',[{'remote_type',434,[{'atom',434,'file'}|[{'atom',434,'name'}|[[]]]]}|[{'type',434,'tuple',[{'remote_type',434,[{'atom',434,'file'}|[{'atom',434,'name'}|[[]]]]}|[{'type',434,'binary',[]}]]}|[{'type',435,'tuple',[{'remote_type',435,[{'atom',435,'file'}|[{'atom',435,'name'}|[[]]]]}|[{'type',435,'binary',[]}|[{'remote_type',435,[{'atom',435,'file'}|[{'atom',435,'file_info'}|[[]]]]}]]]}]]]}]]]]}|[{'type',436,'constraint',[{'atom',436,'is_subtype'}|[[{'var',436,'RetValue'}|[{'type',436,'union',[{'type',436,'tuple',[{'atom',436,'ok'}|[{'ann_type',436,[{'var',436,'FileName'}|[{'remote_type',436,[{'atom',436,'file'}|[{'atom',436,'name'}|[[]]]]}]]}]]}|[{'type',437,'tuple',[{'atom',437,'ok'}|[{'type',437,'tuple',[{'ann_type',437,[{'var',437,'FileName'}|[{'remote_type',437,[{'atom',437,'file'}|[{'atom',437,'name'}|[[]]]]}]]}|[{'type',437,'binary',[]}]]}]]}|[{'type',438,'tuple',[{'atom',438,'error'}|[{'ann_type',438,[{'var',438,'Reason'}|[{'type',438,'term',[]}]]}]]}]]]}]]]]}]]]]]]}]}],
		%% Line 442
		'spec' =
		    %% Line 442
		    [{{'zip',3},[{'type',442,'bounded_fun',[{'type',442,'fun',[{'type',442,'product',[{'var',442,'Name'}|[{'var',442,'FileList'}|[{'var',442,'Options'}]]]}|[{'var',442,'RetValue'}]]}|[[{'type',443,'constraint',[{'atom',443,'is_subtype'}|[[{'var',443,'Name'}|[{'remote_type',443,[{'atom',443,'file'}|[{'atom',443,'name'}|[[]]]]}]]]]}|[{'type',444,'constraint',[{'atom',444,'is_subtype'}|[[{'var',444,'FileList'}|[{'type',444,'list',[{'var',444,'FileSpec'}]}]]]]}|[{'type',445,'constraint',[{'atom',445,'is_subtype'}|[[{'var',445,'FileSpec'}|[{'type',445,'union',[{'remote_type',445,[{'atom',445,'file'}|[{'atom',445,'name'}|[[]]]]}|[{'type',445,'tuple',[{'remote_type',445,[{'atom',445,'file'}|[{'atom',445,'name'}|[[]]]]}|[{'type',445,'binary',[]}]]}|[{'type',446,'tuple',[{'remote_type',446,[{'atom',446,'file'}|[{'atom',446,'name'}|[[]]]]}|[{'type',446,'binary',[]}|[{'remote_type',446,[{'atom',446,'file'}|[{'atom',446,'file_info'}|[[]]]]}]]]}]]]}]]]]}|[{'type',447,'constraint',[{'atom',447,'is_subtype'}|[[{'var',447,'Options'}|[{'type',447,'list',[{'var',447,'Option'}]}]]]]}|[{'type',448,'constraint',[{'atom',448,'is_subtype'}|[[{'var',448,'Option'}|[{'user_type',448,'create_option',[]}]]]]}|[{'type',449,'constraint',[{'atom',449,'is_subtype'}|[[{'var',449,'RetValue'}|[{'type',449,'union',[{'type',449,'tuple',[{'atom',449,'ok'}|[{'ann_type',449,[{'var',449,'FileName'}|[{'remote_type',449,[{'atom',449,'file'}|[{'atom',449,'name'}|[[]]]]}]]}]]}|[{'type',450,'tuple',[{'atom',450,'ok'}|[{'type',450,'tuple',[{'ann_type',450,[{'var',450,'FileName'}|[{'remote_type',450,[{'atom',450,'file'}|[{'atom',450,'name'}|[[]]]]}]]}|[{'type',450,'binary',[]}]]}]]}|[{'type',451,'tuple',[{'atom',451,'error'}|[{'ann_type',451,[{'var',451,'Reason'}|[{'type',451,'term',[]}]]}]]}]]]}]]]]}]]]]]]]]}]}],
		%% Line 483
		'spec' =
		    %% Line 483
		    [{{'list_dir',1},[{'type',483,'bounded_fun',[{'type',483,'fun',[{'type',483,'product',[{'var',483,'Archive'}]}|[{'var',483,'RetValue'}]]}|[[{'type',484,'constraint',[{'atom',484,'is_subtype'}|[[{'var',484,'Archive'}|[{'type',484,'union',[{'remote_type',484,[{'atom',484,'file'}|[{'atom',484,'name'}|[[]]]]}|[{'type',484,'binary',[]}]]}]]]]}|[{'type',485,'constraint',[{'atom',485,'is_subtype'}|[[{'var',485,'RetValue'}|[{'type',485,'union',[{'type',485,'tuple',[{'atom',485,'ok'}|[{'var',485,'CommentAndFiles'}]]}|[{'type',485,'tuple',[{'atom',485,'error'}|[{'ann_type',485,[{'var',485,'Reason'}|[{'type',485,'term',[]}]]}]]}]]}]]]]}|[{'type',486,'constraint',[{'atom',486,'is_subtype'}|[[{'var',486,'CommentAndFiles'}|[{'type',486,'list',[{'type',486,'union',[{'user_type',486,'zip_comment',[]}|[{'user_type',486,'zip_file',[]}]]}]}]]]]}]]]]]}]}],
		%% Line 490
		'spec' =
		    %% Line 490
		    [{{'list_dir',2},[{'type',490,'bounded_fun',[{'type',490,'fun',[{'type',490,'product',[{'var',490,'Archive'}|[{'var',490,'Options'}]]}|[{'var',490,'RetValue'}]]}|[[{'type',491,'constraint',[{'atom',491,'is_subtype'}|[[{'var',491,'Archive'}|[{'type',491,'union',[{'remote_type',491,[{'atom',491,'file'}|[{'atom',491,'name'}|[[]]]]}|[{'type',491,'binary',[]}]]}]]]]}|[{'type',492,'constraint',[{'atom',492,'is_subtype'}|[[{'var',492,'RetValue'}|[{'type',492,'union',[{'type',492,'tuple',[{'atom',492,'ok'}|[{'var',492,'CommentAndFiles'}]]}|[{'type',492,'tuple',[{'atom',492,'error'}|[{'ann_type',492,[{'var',492,'Reason'}|[{'type',492,'term',[]}]]}]]}]]}]]]]}|[{'type',493,'constraint',[{'atom',493,'is_subtype'}|[[{'var',493,'CommentAndFiles'}|[{'type',493,'list',[{'type',493,'union',[{'user_type',493,'zip_comment',[]}|[{'user_type',493,'zip_file',[]}]]}]}]]]]}|[{'type',494,'constraint',[{'atom',494,'is_subtype'}|[[{'var',494,'Options'}|[{'type',494,'list',[{'var',494,'Option'}]}]]]]}|[{'type',495,'constraint',[{'atom',495,'is_subtype'}|[[{'var',495,'Option'}|[{'atom',495,'cooked'}]]]]}]]]]]]]}]}],
		%% Line 514
		'spec' =
		    %% Line 514
		    [{{'t',1},[{'type',514,'bounded_fun',[{'type',514,'fun',[{'type',514,'product',[{'var',514,'Archive'}]}|[{'atom',514,'ok'}]]}|[[{'type',515,'constraint',[{'atom',515,'is_subtype'}|[[{'var',515,'Archive'}|[{'type',515,'union',[{'remote_type',515,[{'atom',515,'file'}|[{'atom',515,'name'}|[[]]]]}|[{'type',515,'binary',[]}|[{'var',515,'ZipHandle'}]]]}]]]]}|[{'type',516,'constraint',[{'atom',516,'is_subtype'}|[[{'var',516,'ZipHandle'}|[{'user_type',516,'handle',[]}]]]]}]]]]}]}],
		%% Line 538
		'spec' =
		    %% Line 538
		    [{{'tt',1},[{'type',538,'bounded_fun',[{'type',538,'fun',[{'type',538,'product',[{'var',538,'Archive'}]}|[{'atom',538,'ok'}]]}|[[{'type',539,'constraint',[{'atom',539,'is_subtype'}|[[{'var',539,'Archive'}|[{'type',539,'union',[{'remote_type',539,[{'atom',539,'file'}|[{'atom',539,'name'}|[[]]]]}|[{'type',539,'binary',[]}|[{'var',539,'ZipHandle'}]]]}]]]]}|[{'type',540,'constraint',[{'atom',540,'is_subtype'}|[[{'var',540,'ZipHandle'}|[{'user_type',540,'handle',[]}]]]]}]]]]}]}],
		%% Line 721
		'spec' =
		    %% Line 721
		    [{{'table',1},[{'type',721,'bounded_fun',[{'type',721,'fun',[{'type',721,'product',[{'var',721,'Archive'}]}|[{'var',721,'RetValue'}]]}|[[{'type',722,'constraint',[{'atom',722,'is_subtype'}|[[{'var',722,'Archive'}|[{'type',722,'union',[{'remote_type',722,[{'atom',722,'file'}|[{'atom',722,'name'}|[[]]]]}|[{'type',722,'binary',[]}]]}]]]]}|[{'type',723,'constraint',[{'atom',723,'is_subtype'}|[[{'var',723,'RetValue'}|[{'type',723,'union',[{'type',723,'tuple',[{'atom',723,'ok'}|[{'var',723,'CommentAndFiles'}]]}|[{'type',723,'tuple',[{'atom',723,'error'}|[{'ann_type',723,[{'var',723,'Reason'}|[{'type',723,'term',[]}]]}]]}]]}]]]]}|[{'type',724,'constraint',[{'atom',724,'is_subtype'}|[[{'var',724,'CommentAndFiles'}|[{'type',724,'list',[{'type',724,'union',[{'user_type',724,'zip_comment',[]}|[{'user_type',724,'zip_file',[]}]]}]}]]]]}]]]]]}]}],
		%% Line 728
		'spec' =
		    %% Line 728
		    [{{'table',2},[{'type',728,'bounded_fun',[{'type',728,'fun',[{'type',728,'product',[{'var',728,'Archive'}|[{'var',728,'Options'}]]}|[{'var',728,'RetValue'}]]}|[[{'type',729,'constraint',[{'atom',729,'is_subtype'}|[[{'var',729,'Archive'}|[{'type',729,'union',[{'remote_type',729,[{'atom',729,'file'}|[{'atom',729,'name'}|[[]]]]}|[{'type',729,'binary',[]}]]}]]]]}|[{'type',730,'constraint',[{'atom',730,'is_subtype'}|[[{'var',730,'RetValue'}|[{'type',730,'union',[{'type',730,'tuple',[{'atom',730,'ok'}|[{'var',730,'CommentAndFiles'}]]}|[{'type',730,'tuple',[{'atom',730,'error'}|[{'ann_type',730,[{'var',730,'Reason'}|[{'type',730,'term',[]}]]}]]}]]}]]]]}|[{'type',731,'constraint',[{'atom',731,'is_subtype'}|[[{'var',731,'CommentAndFiles'}|[{'type',731,'list',[{'type',731,'union',[{'user_type',731,'zip_comment',[]}|[{'user_type',731,'zip_file',[]}]]}]}]]]]}|[{'type',733,'constraint',[{'atom',733,'is_subtype'}|[[{'var',733,'Options'}|[{'type',733,'list',[{'var',733,'Option'}]}]]]]}|[{'type',734,'constraint',[{'atom',734,'is_subtype'}|[[{'var',734,'Option'}|[{'atom',734,'cooked'}]]]]}]]]]]]]}]}],
		%% Line 738
		'spec' =
		    %% Line 738
		    [{{'create',2},[{'type',738,'bounded_fun',[{'type',738,'fun',[{'type',738,'product',[{'var',738,'Name'}|[{'var',738,'FileList'}]]}|[{'var',738,'RetValue'}]]}|[[{'type',739,'constraint',[{'atom',739,'is_subtype'}|[[{'var',739,'Name'}|[{'remote_type',739,[{'atom',739,'file'}|[{'atom',739,'name'}|[[]]]]}]]]]}|[{'type',740,'constraint',[{'atom',740,'is_subtype'}|[[{'var',740,'FileList'}|[{'type',740,'list',[{'var',740,'FileSpec'}]}]]]]}|[{'type',741,'constraint',[{'atom',741,'is_subtype'}|[[{'var',741,'FileSpec'}|[{'type',741,'union',[{'remote_type',741,[{'atom',741,'file'}|[{'atom',741,'name'}|[[]]]]}|[{'type',741,'tuple',[{'remote_type',741,[{'atom',741,'file'}|[{'atom',741,'name'}|[[]]]]}|[{'type',741,'binary',[]}]]}|[{'type',742,'tuple',[{'remote_type',742,[{'atom',742,'file'}|[{'atom',742,'name'}|[[]]]]}|[{'type',742,'binary',[]}|[{'remote_type',742,[{'atom',742,'file'}|[{'atom',742,'file_info'}|[[]]]]}]]]}]]]}]]]]}|[{'type',743,'constraint',[{'atom',743,'is_subtype'}|[[{'var',743,'RetValue'}|[{'type',743,'union',[{'type',743,'tuple',[{'atom',743,'ok'}|[{'ann_type',743,[{'var',743,'FileName'}|[{'user_type',743,'filename',[]}]]}]]}|[{'type',744,'tuple',[{'atom',744,'ok'}|[{'type',744,'tuple',[{'ann_type',744,[{'var',744,'FileName'}|[{'user_type',744,'filename',[]}]]}|[{'type',744,'binary',[]}]]}]]}|[{'type',745,'tuple',[{'atom',745,'error'}|[{'ann_type',745,[{'var',745,'Reason'}|[{'type',745,'term',[]}]]}]]}]]]}]]]]}]]]]]]}]}],
		%% Line 749
		'spec' =
		    %% Line 749
		    [{{'create',3},[{'type',749,'bounded_fun',[{'type',749,'fun',[{'type',749,'product',[{'var',749,'Name'}|[{'var',749,'FileList'}|[{'var',749,'Options'}]]]}|[{'var',749,'RetValue'}]]}|[[{'type',750,'constraint',[{'atom',750,'is_subtype'}|[[{'var',750,'Name'}|[{'remote_type',750,[{'atom',750,'file'}|[{'atom',750,'name'}|[[]]]]}]]]]}|[{'type',751,'constraint',[{'atom',751,'is_subtype'}|[[{'var',751,'FileList'}|[{'type',751,'list',[{'var',751,'FileSpec'}]}]]]]}|[{'type',752,'constraint',[{'atom',752,'is_subtype'}|[[{'var',752,'FileSpec'}|[{'type',752,'union',[{'remote_type',752,[{'atom',752,'file'}|[{'atom',752,'name'}|[[]]]]}|[{'type',752,'tuple',[{'remote_type',752,[{'atom',752,'file'}|[{'atom',752,'name'}|[[]]]]}|[{'type',752,'binary',[]}]]}|[{'type',753,'tuple',[{'remote_type',753,[{'atom',753,'file'}|[{'atom',753,'name'}|[[]]]]}|[{'type',753,'binary',[]}|[{'remote_type',753,[{'atom',753,'file'}|[{'atom',753,'file_info'}|[[]]]]}]]]}]]]}]]]]}|[{'type',754,'constraint',[{'atom',754,'is_subtype'}|[[{'var',754,'Options'}|[{'type',754,'list',[{'var',754,'Option'}]}]]]]}|[{'type',755,'constraint',[{'atom',755,'is_subtype'}|[[{'var',755,'Option'}|[{'user_type',755,'create_option',[]}]]]]}|[{'type',756,'constraint',[{'atom',756,'is_subtype'}|[[{'var',756,'RetValue'}|[{'type',756,'union',[{'type',756,'tuple',[{'atom',756,'ok'}|[{'ann_type',756,[{'var',756,'FileName'}|[{'user_type',756,'filename',[]}]]}]]}|[{'type',757,'tuple',[{'atom',757,'ok'}|[{'type',757,'tuple',[{'ann_type',757,[{'var',757,'FileName'}|[{'user_type',757,'filename',[]}]]}|[{'type',757,'binary',[]}]]}]]}|[{'type',758,'tuple',[{'atom',758,'error'}|[{'ann_type',758,[{'var',758,'Reason'}|[{'type',758,'term',[]}]]}]]}]]]}]]]]}]]]]]]]]}]}],
		%% Line 761
		'spec' =
		    %% Line 761
		    [{{'extract',1},[{'type',761,'bounded_fun',[{'type',761,'fun',[{'type',761,'product',[{'var',761,'Archive'}]}|[{'var',761,'RetValue'}]]}|[[{'type',762,'constraint',[{'atom',762,'is_subtype'}|[[{'var',762,'Archive'}|[{'type',762,'union',[{'remote_type',762,[{'atom',762,'file'}|[{'atom',762,'name'}|[[]]]]}|[{'type',762,'binary',[]}]]}]]]]}|[{'type',763,'constraint',[{'atom',763,'is_subtype'}|[[{'var',763,'RetValue'}|[{'type',763,'union',[{'type',763,'tuple',[{'atom',763,'ok'}|[{'var',763,'FileList'}]]}|[{'type',764,'tuple',[{'atom',764,'ok'}|[{'var',764,'FileBinList'}]]}|[{'type',765,'tuple',[{'atom',765,'error'}|[{'ann_type',765,[{'var',765,'Reason'}|[{'type',765,'term',[]}]]}]]}|[{'type',766,'tuple',[{'atom',766,'error'}|[{'type',766,'tuple',[{'ann_type',766,[{'var',766,'Name'}|[{'remote_type',766,[{'atom',766,'file'}|[{'atom',766,'name'}|[[]]]]}]]}|[{'ann_type',766,[{'var',766,'Reason'}|[{'type',766,'term',[]}]]}]]}]]}]]]]}]]]]}|[{'type',767,'constraint',[{'atom',767,'is_subtype'}|[[{'var',767,'FileList'}|[{'type',767,'list',[{'remote_type',767,[{'atom',767,'file'}|[{'atom',767,'name'}|[[]]]]}]}]]]]}|[{'type',768,'constraint',[{'atom',768,'is_subtype'}|[[{'var',768,'FileBinList'}|[{'type',768,'list',[{'type',768,'tuple',[{'remote_type',768,[{'atom',768,'file'}|[{'atom',768,'name'}|[[]]]]}|[{'type',768,'binary',[]}]]}]}]]]]}]]]]]]}]}],
		%% Line 772
		'spec' =
		    %% Line 772
		    [{{'extract',2},[{'type',772,'bounded_fun',[{'type',772,'fun',[{'type',772,'product',[{'var',772,'Archive'}|[{'var',772,'Options'}]]}|[{'var',772,'RetValue'}]]}|[[{'type',773,'constraint',[{'atom',773,'is_subtype'}|[[{'var',773,'Archive'}|[{'type',773,'union',[{'remote_type',773,[{'atom',773,'file'}|[{'atom',773,'name'}|[[]]]]}|[{'type',773,'binary',[]}]]}]]]]}|[{'type',774,'constraint',[{'atom',774,'is_subtype'}|[[{'var',774,'Options'}|[{'type',774,'list',[{'var',774,'Option'}]}]]]]}|[{'type',775,'constraint',[{'atom',775,'is_subtype'}|[[{'var',775,'Option'}|[{'type',775,'union',[{'type',775,'tuple',[{'atom',775,'file_list'}|[{'var',775,'FileList'}]]}|[{'atom',776,'keep_old_files'}|[{'atom',776,'verbose'}|[{'atom',776,'memory'}|[{'type',777,'tuple',[{'atom',777,'file_filter'}|[{'var',777,'FileFilter'}]]}|[{'type',777,'tuple',[{'atom',777,'cwd'}|[{'var',777,'CWD'}]]}]]]]]]}]]]]}|[{'type',778,'constraint',[{'atom',778,'is_subtype'}|[[{'var',778,'FileList'}|[{'type',778,'list',[{'remote_type',778,[{'atom',778,'file'}|[{'atom',778,'name'}|[[]]]]}]}]]]]}|[{'type',779,'constraint',[{'atom',779,'is_subtype'}|[[{'var',779,'FileBinList'}|[{'type',779,'list',[{'type',779,'tuple',[{'remote_type',779,[{'atom',779,'file'}|[{'atom',779,'name'}|[[]]]]}|[{'type',779,'binary',[]}]]}]}]]]]}|[{'type',780,'constraint',[{'atom',780,'is_subtype'}|[[{'var',780,'FileFilter'}|[{'type',780,'fun',[{'type',780,'product',[{'var',780,'ZipFile'}]}|[{'type',780,'boolean',[]}]]}]]]]}|[{'type',781,'constraint',[{'atom',781,'is_subtype'}|[[{'var',781,'CWD'}|[{'remote_type',781,[{'atom',781,'file'}|[{'atom',781,'filename'}|[[]]]]}]]]]}|[{'type',782,'constraint',[{'atom',782,'is_subtype'}|[[{'var',782,'ZipFile'}|[{'user_type',782,'zip_file',[]}]]]]}|[{'type',783,'constraint',[{'atom',783,'is_subtype'}|[[{'var',783,'RetValue'}|[{'type',783,'union',[{'type',783,'tuple',[{'atom',783,'ok'}|[{'var',783,'FileList'}]]}|[{'type',784,'tuple',[{'atom',784,'ok'}|[{'var',784,'FileBinList'}]]}|[{'type',785,'tuple',[{'atom',785,'error'}|[{'ann_type',785,[{'var',785,'Reason'}|[{'type',785,'term',[]}]]}]]}|[{'type',786,'tuple',[{'atom',786,'error'}|[{'type',786,'tuple',[{'ann_type',786,[{'var',786,'Name'}|[{'remote_type',786,[{'atom',786,'file'}|[{'atom',786,'name'}|[[]]]]}]]}|[{'ann_type',786,[{'var',786,'Reason'}|[{'type',786,'term',[]}]]}]]}]]}]]]]}]]]]}]]]]]]]]]]]}]}],
		%% Line 1177
		'spec' =
		    %% Line 1177
		    [{{'zip_open',1},[{'type',1177,'bounded_fun',[{'type',1177,'fun',[{'type',1177,'product',[{'var',1177,'Archive'}]}|[{'type',1177,'union',[{'type',1177,'tuple',[{'atom',1177,'ok'}|[{'var',1177,'ZipHandle'}]]}|[{'type',1177,'tuple',[{'atom',1177,'error'}|[{'var',1177,'Reason'}]]}]]}]]}|[[{'type',1178,'constraint',[{'atom',1178,'is_subtype'}|[[{'var',1178,'Archive'}|[{'type',1178,'union',[{'remote_type',1178,[{'atom',1178,'file'}|[{'atom',1178,'name'}|[[]]]]}|[{'type',1178,'binary',[]}]]}]]]]}|[{'type',1179,'constraint',[{'atom',1179,'is_subtype'}|[[{'var',1179,'ZipHandle'}|[{'user_type',1179,'handle',[]}]]]]}|[{'type',1180,'constraint',[{'atom',1180,'is_subtype'}|[[{'var',1180,'Reason'}|[{'type',1180,'term',[]}]]]]}]]]]]}]}],
		%% Line 1184
		'spec' =
		    %% Line 1184
		    [{{'zip_open',2},[{'type',1184,'bounded_fun',[{'type',1184,'fun',[{'type',1184,'product',[{'var',1184,'Archive'}|[{'var',1184,'Options'}]]}|[{'type',1184,'union',[{'type',1184,'tuple',[{'atom',1184,'ok'}|[{'var',1184,'ZipHandle'}]]}|[{'type',1184,'tuple',[{'atom',1184,'error'}|[{'var',1184,'Reason'}]]}]]}]]}|[[{'type',1185,'constraint',[{'atom',1185,'is_subtype'}|[[{'var',1185,'Archive'}|[{'type',1185,'union',[{'remote_type',1185,[{'atom',1185,'file'}|[{'atom',1185,'name'}|[[]]]]}|[{'type',1185,'binary',[]}]]}]]]]}|[{'type',1186,'constraint',[{'atom',1186,'is_subtype'}|[[{'var',1186,'ZipHandle'}|[{'user_type',1186,'handle',[]}]]]]}|[{'type',1187,'constraint',[{'atom',1187,'is_subtype'}|[[{'var',1187,'Options'}|[{'type',1187,'list',[{'var',1187,'Option'}]}]]]]}|[{'type',1188,'constraint',[{'atom',1188,'is_subtype'}|[[{'var',1188,'Option'}|[{'type',1188,'union',[{'atom',1188,'cooked'}|[{'atom',1188,'memory'}|[{'type',1188,'tuple',[{'atom',1188,'cwd'}|[{'ann_type',1188,[{'var',1188,'CWD'}|[{'remote_type',1188,[{'atom',1188,'file'}|[{'atom',1188,'filename'}|[[]]]]}]]}]]}]]]}]]]]}|[{'type',1189,'constraint',[{'atom',1189,'is_subtype'}|[[{'var',1189,'Reason'}|[{'type',1189,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 1196
		'spec' =
		    %% Line 1196
		    [{{'zip_get',1},[{'type',1196,'bounded_fun',[{'type',1196,'fun',[{'type',1196,'product',[{'var',1196,'ZipHandle'}]}|[{'type',1196,'union',[{'type',1196,'tuple',[{'atom',1196,'ok'}|[{'type',1196,'list',[{'var',1196,'Result'}]}]]}|[{'type',1196,'tuple',[{'atom',1196,'error'}|[{'var',1196,'Reason'}]]}]]}]]}|[[{'type',1197,'constraint',[{'atom',1197,'is_subtype'}|[[{'var',1197,'ZipHandle'}|[{'user_type',1197,'handle',[]}]]]]}|[{'type',1198,'constraint',[{'atom',1198,'is_subtype'}|[[{'var',1198,'Result'}|[{'type',1198,'union',[{'remote_type',1198,[{'atom',1198,'file'}|[{'atom',1198,'name'}|[[]]]]}|[{'type',1198,'tuple',[{'remote_type',1198,[{'atom',1198,'file'}|[{'atom',1198,'name'}|[[]]]]}|[{'type',1198,'binary',[]}]]}]]}]]]]}|[{'type',1199,'constraint',[{'atom',1199,'is_subtype'}|[[{'var',1199,'Reason'}|[{'type',1199,'term',[]}]]]]}]]]]]}]}],
		%% Line 1204
		'spec' =
		    %% Line 1204
		    [{{'zip_close',1},[{'type',1204,'bounded_fun',[{'type',1204,'fun',[{'type',1204,'product',[{'var',1204,'ZipHandle'}]}|[{'type',1204,'union',[{'atom',1204,'ok'}|[{'type',1204,'tuple',[{'atom',1204,'error'}|[{'atom',1204,'einval'}]]}]]}]]}|[[{'type',1205,'constraint',[{'atom',1205,'is_subtype'}|[[{'var',1205,'ZipHandle'}|[{'user_type',1205,'handle',[]}]]]]}]]]}]}],
		%% Line 1210
		'spec' =
		    %% Line 1210
		    [{{'zip_get',2},[{'type',1210,'bounded_fun',[{'type',1210,'fun',[{'type',1210,'product',[{'var',1210,'FileName'}|[{'var',1210,'ZipHandle'}]]}|[{'type',1210,'union',[{'type',1210,'tuple',[{'atom',1210,'ok'}|[{'var',1210,'Result'}]]}|[{'type',1210,'tuple',[{'atom',1210,'error'}|[{'var',1210,'Reason'}]]}]]}]]}|[[{'type',1211,'constraint',[{'atom',1211,'is_subtype'}|[[{'var',1211,'FileName'}|[{'remote_type',1211,[{'atom',1211,'file'}|[{'atom',1211,'name'}|[[]]]]}]]]]}|[{'type',1212,'constraint',[{'atom',1212,'is_subtype'}|[[{'var',1212,'ZipHandle'}|[{'user_type',1212,'handle',[]}]]]]}|[{'type',1213,'constraint',[{'atom',1213,'is_subtype'}|[[{'var',1213,'Result'}|[{'type',1213,'union',[{'remote_type',1213,[{'atom',1213,'file'}|[{'atom',1213,'name'}|[[]]]]}|[{'type',1213,'tuple',[{'remote_type',1213,[{'atom',1213,'file'}|[{'atom',1213,'name'}|[[]]]]}|[{'type',1213,'binary',[]}]]}]]}]]]]}|[{'type',1214,'constraint',[{'atom',1214,'is_subtype'}|[[{'var',1214,'Reason'}|[{'type',1214,'term',[]}]]]]}]]]]]]}]}],
		%% Line 1219
		'spec' =
		    %% Line 1219
		    [{{'zip_list_dir',1},[{'type',1219,'bounded_fun',[{'type',1219,'fun',[{'type',1219,'product',[{'var',1219,'ZipHandle'}]}|[{'type',1219,'union',[{'type',1219,'tuple',[{'atom',1219,'ok'}|[{'var',1219,'Result'}]]}|[{'type',1219,'tuple',[{'atom',1219,'error'}|[{'var',1219,'Reason'}]]}]]}]]}|[[{'type',1220,'constraint',[{'atom',1220,'is_subtype'}|[[{'var',1220,'Result'}|[{'type',1220,'list',[{'type',1220,'union',[{'user_type',1220,'zip_comment',[]}|[{'user_type',1220,'zip_file',[]}]]}]}]]]]}|[{'type',1221,'constraint',[{'atom',1221,'is_subtype'}|[[{'var',1221,'ZipHandle'}|[{'user_type',1221,'handle',[]}]]]]}|[{'type',1222,'constraint',[{'atom',1222,'is_subtype'}|[[{'var',1222,'Reason'}|[{'type',1222,'term',[]}]]]]}]]]]]}]}],
		%% Line 1620
		'dialyzer' =
		    %% Line 1620
		    [{'no_improper_lists',{'pwrite_iolist',3}}]]
'openzip_open'/1 =
    %% Line 225
    fun (_0) ->
	%% Line 226
	apply 'openzip_open'/2
	    (_0, [])
'openzip_open'/2 =
    %% Line 228
    fun (_0,_1) ->
	let <_2> =
	    catch
		%% Line 229
		apply 'do_openzip_open'/2
		    (_0, _1)
	in  %% Line 229
	    case _2 of
	      %% Line 230
	      <_@r0 = {'ok',OpenZip}> when 'true' ->
		  %% Line 231
		  _@r0
	      %% Line 232
	      <Error> when 'true' ->
		  %% Line 233
		  {'error',Error}
	    end
'do_openzip_open'/2 =
    %% Line 236
    fun (_0,_1) ->
	%% Line 238
	case apply 'get_openzip_options'/1
		 (_1) of
	  <{'openzip_opts',Output,OpO,CWD}> when 'true' ->
	      let <Input> =
		  apply %% Line 239
			'get_input'/1
		      (_0)
	      in  let <_5> =
		      call %% Line 240
			   'erlang':%% Line 240
				    '--'
			  (%% Line 240
			   OpO, %% Line 240
				['write'])
		  in  let <In0> =
			  apply %% Line 240
				Input
			      (%% Line 240
			       {'open',_0,_5}, %% Line 240
					       [])
		      in  let <_7> = 'raw_file_info_etc'/5
			  in  %% Line 241
			      case %% Line 242
				   apply 'get_central_dir'/3
				       (In0, _7, Input) of
				<{[{'zip_comment',C}|Files],In1}> when 'true' ->
				    let <Z> =
					call %% Line 243
					     'zlib':%% Line 243
						    'open'
					    ()
				    in  %% Line 244
					{'ok',{'openzip',C,%% Line 245
							   Files,%% Line 246
								 In1,%% Line 247
								     Input,%% Line 248
									   Output,%% Line 249
										  Z,%% Line 250
										    CWD}}
				( <_8> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_8})
				  -| ['compiler_generated'] )
			      end
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_3})
	    -| ['compiler_generated'] )
	end
'openzip_get'/1 =
    %% Line 253
    fun (_0) ->
	let <_1> =
	    catch
		%% Line 254
		apply 'do_openzip_get'/1
		    (_0)
	in  %% Line 254
	    case _1 of
	      %% Line 255
	      <_@r0 = {'ok',Result}> when 'true' ->
		  _@r0
	      %% Line 256
	      <Error> when 'true' ->
		  {'error',Error}
	    end
'do_openzip_get'/1 =
    %% Line 259
    fun (_0) ->
	case _0 of
	  <{'openzip',_6,Files,In0,Input,%% Line 260
					 Output,%% Line 260
						Z,%% Line 260
						  CWD}> when 'true' ->
	      let <_2> = 'all'/1
	      in  let <_1> = 'silent'/1
		  in  let <ZipOpts> =
			  {%% Line 261
			   'unzip_opts',%% Line 261
					Output,%% Line 261
					       Input,_2,%% Line 262
							[],_1,%% Line 263
							      CWD}
		      in  let <R> =
			      apply %% Line 264
				    'get_z_files'/5
				  (%% Line 264
				   Files, %% Line 264
					  Z, %% Line 264
					     In0, %% Line 264
						  ZipOpts, %% Line 264
							   [])
			  in  %% Line 265
			      {'ok',R}
	  %% Line 266
	  <_7> when 'true' ->
	      %% Line 267
	      call 'erlang':'throw'
		  ('einval')
	end
'openzip_get'/2 =
    %% Line 270
    fun (_0,_1) ->
	let <_2> =
	    catch
		%% Line 271
		apply 'do_openzip_get'/2
		    (_0, _1)
	in  %% Line 271
	    case _2 of
	      %% Line 272
	      <_@r0 = {'ok',Result}> when 'true' ->
		  _@r0
	      %% Line 273
	      <Error> when 'true' ->
		  {'error',Error}
	    end
'do_openzip_get'/2 =
    %% Line 276
    fun (_0,_1) ->
	case <_0,_1> of
	  <F,{'openzip',_9,Files,In0,Input,%% Line 277
					   Output,%% Line 277
						  Z,%% Line 277
						    CWD}> when 'true' ->
	      %% Line 279
	      case apply 'file_name_search'/2
		       (F, Files) of
		%% Line 280
		<ZFile = {{'zip_file',_10,_11,_12,Offset,_13},_14}> when 'true' ->
		    let <In1> =
			apply %% Line 281
			      Input
			    (%% Line 281
			     {'seek','bof',Offset}, %% Line 281
						    In0)
		    in  let <_4> = 'silent'/1
			in  let <_3> = 'all'/1
			    in  %% Line 282
				case apply 'get_z_file'/9
					 (In1, Z, Input, Output, [], _4, %% Line 283
									 CWD, %% Line 283
									      ZFile, _3) of
				  %% Line 284
				  <{'file',R,_X_In2}> when 'true' ->
				      {'ok',R}
				  %% Line 285
				  <_15> when 'true' ->
				      call 'erlang':'throw'
					  ('file_not_found')
				end
		%% Line 287
		<_16> when 'true' ->
		    call 'erlang':'throw'
			('file_not_found')
	      end
	  %% Line 289
	  <_17,_18> when 'true' ->
	      %% Line 290
	      call 'erlang':'throw'
		  ('einval')
	end
'file_name_search'/2 =
    %% Line 292
    fun (_0,_1) ->
	let <Fun> =
	    fun (_9) ->
		%% Line 293
		case _9 of
		  <{ZipFile,_15}> when 'true' ->
		      %% Line 294
		      ( case ZipFile of
			  ( <( {'zip_file',_rec0,_16,_17,_18,_19}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_8> =
				    call 'string':'equal'
					(_rec0, _0, ( 'false'
						      -| ['compiler_generated'] ), ( 'nfc'
										     -| ['compiler_generated'] ))
				in  call 'erlang':'not'
					(_8)
			    -| ['compiler_generated'] )
			  ( <_20> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','zip_file'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  ( <_10> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_10})
			  -| [{'function_name',{'-file_name_search/2-fun-0-',1}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 297
	    case call 'lists':'dropwhile'
		     (Fun, _1) of
	      %% Line 298
	      <[ZFile|_21]> when 'true' ->
		  ZFile
	      %% Line 299
	      <[]> when 'true' ->
		  'false'
	      ( <_12> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_12})
		-| ['compiler_generated'] )
	    end
'openzip_list_dir'/1 =
    %% Line 320
    fun (_0) ->
	case _0 of
	  <{'openzip',Comment,%% Line 321
			      Files,_3,_4,_5,_6,_7}> when 'true' ->
	      %% Line 322
	      case call 'lists':'unzip'
		       (Files) of
		<{ZipFiles,_X_Extras}> when 'true' ->
		    %% Line 323
		    {'ok',[{'zip_comment',Comment}|ZipFiles]}
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 324
	  <_8> when 'true' ->
	      %% Line 325
	      {'error','einval'}
	end
'openzip_list_dir'/2 =
    %% Line 327
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'openzip',_11,Files,_12,_13,_14,_15,_16},['names_only']> when 'true' ->
	      %% Line 328
	      case call 'lists':'unzip'
		       (Files) of
		<{ZipFiles,_X_Extras}> when 'true' ->
		    let <_7> =
			letrec
			    'lc$^0'/1 =
				%% Line 329
				fun (_5) ->
				    case _5 of
				      <[{{'zip_file',Name,_17,_18,_19,_20},_21}|_4]> when 'true' ->
					  let <_6> =
					      apply 'lc$^0'/1
						  (_4)
					  in  ( [Name|_6]
						-| ['compiler_generated'] )
				      ( <[_3|_4]> when 'true' ->
					    apply 'lc$^0'/1
						(_4)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_24> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_24})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  %% Line 329
			    apply 'lc$^0'/1
				(ZipFiles)
		    in  %% Line 330
			{'ok',_7}
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 331
	  <_22,_23> when 'true' ->
	      %% Line 332
	      {'error','einval'}
	end
'openzip_close'/1 =
    %% Line 335
    fun (_0) ->
	case _0 of
	  <{'openzip',_2,_3,In0,Input,_4,Z,_5}> when 'true' ->
	      do  %% Line 336
		  apply Input
		      ('close', In0)
		  %% Line 337
		  call 'zlib':'close'
		      (Z)
	  %% Line 338
	  <_6> when 'true' ->
	      %% Line 339
	      {'error','einval'}
	end
'unzip'/1 =
    %% Line 355
    fun (_0) ->
	apply 'unzip'/2
	    (_0, [])
'unzip'/2 =
    %% Line 373
    fun (_0,_1) ->
	let <_2> =
	    catch
		%% Line 374
		apply 'do_unzip'/2
		    (_0, _1)
	in  %% Line 374
	    case _2 of
	      %% Line 375
	      <_@r0 = {'ok',R}> when 'true' ->
		  _@r0
	      %% Line 376
	      <Error> when 'true' ->
		  {'error',Error}
	    end
'do_unzip'/2 =
    %% Line 379
    fun (_0,_1) ->
	let <Opts> =
	    apply %% Line 380
		  'get_unzip_options'/2
		(_0, _1)
	in  %% Line 381
	    case Opts of
	      <{'unzip_opts',_18,Input,_19,OpO,_20,_21}> when 'true' ->
		  let <_4> =
		      call %% Line 382
			   'erlang':%% Line 382
				    '--'
			  (%% Line 382
			   OpO, %% Line 382
				['write'])
		  in  let <In0> =
			  apply %% Line 382
				Input
			      (%% Line 382
			       {'open',_0,_4}, %% Line 382
					       [])
		      in  let <_6> = 'raw_file_info_etc'/5
			  in  %% Line 384
			      case apply 'get_central_dir'/3
				       (In0, _6, Input) of
				<{Info,In1}> when 'true' ->
				    let <Z> =
					call %% Line 386
					     'zlib':%% Line 386
						    'open'
					    ()
				    in  let <_14> =
					    letrec
						'after$^1'/0 =
						    %% Line 387
						    fun () ->
							do  %% Line 390
							    call 'zlib':'close'
								(Z)
							    %% Line 391
							    apply Input
								('close', In1)
					    in  %% Line 387
						try
						    %% Line 388
						    apply 'get_z_files'/5
							(Info, Z, In1, Opts, [])
						of <_10> ->
						    do  ( apply 'after$^1'/0
							      ()
							  -| ['compiler_generated'] )
							_10
						catch <_13,_12,_11> ->
						    do  ( apply 'after$^1'/0
							      ()
							  -| ['compiler_generated'] )
							primop 'raise'
							    (_11, _12)
					in  %% Line 393
					    {'ok',_14}
				( <_8> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_8})
				  -| ['compiler_generated'] )
			      end
	      ( <_3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_3})
		-| ['compiler_generated'] )
	    end
'foldl'/3 =
    %% Line 408
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Fun,Acc0,Archive>
	      when call 'erlang':'is_function'
		    (Fun,
		     4) ->
	      let <ZipFun> =
		  fun (_5,_4) ->
		      %% Line 410
		      case <_5,_4> of
			<{Name,GetInfo,GetBin},A> when 'true' ->
			    let <A2> =
				apply %% Line 411
				      Fun
				    (%% Line 411
				     Name, %% Line 411
					   GetInfo, %% Line 411
						    GetBin, %% Line 411
							    A)
			    in  %% Line 412
				{'true','false',A2}
			( <_7,_6> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_7,_6})
				-| [{'function_name',{'-foldl/3-fun-0-',2}}] )
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 414
		  case call 'prim_zip':'open'
			   (ZipFun, Acc0, Archive) of
		    %% Line 415
		    <{'ok',PrimZip,Acc1}> when 'true' ->
			%% Line 416
			case call 'prim_zip':'close'
				 (PrimZip) of
			  <'ok'> when 'true' ->
			      %% Line 417
			      {'ok',Acc1}
			  ( <_9> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_9})
			    -| ['compiler_generated'] )
			end
		    %% Line 418
		    <{'error','bad_eocd'}> when 'true' ->
			%% Line 419
			{'error',[78|[111|[116|[32|[97|[110|[32|[97|[114|[99|[104|[105|[118|[101|[32|[102|[105|[108|[101]]]]]]]]]]]]]]]]]]]}
		    %% Line 420
		    <_@r0 = {'error',Reason}> when 'true' ->
			%% Line 421
			_@r0
		    ( <_10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_10})
		      -| ['compiler_generated'] )
		  end
	  %% Line 423
	  <_14,_15,_16> when 'true' ->
	      %% Line 424
	      {'error','einval'}
	end
'zip'/2 =
    %% Line 440
    fun (_0,_1) ->
	apply 'zip'/3
	    (_0, _1, [])
'zip'/3 =
    %% Line 453
    fun (_0,_1,_2) ->
	let <_3> =
	    catch
		%% Line 454
		apply 'do_zip'/3
		    (_0, _1, _2)
	in  %% Line 454
	    case _3 of
	      %% Line 455
	      <_@r0 = {'ok',R}> when 'true' ->
		  _@r0
	      %% Line 456
	      <Error> when 'true' ->
		  {'error',Error}
	    end
'do_zip'/3 =
    %% Line 459
    fun (_0,_1,_2) ->
	let <Opts> =
	    apply %% Line 460
		  'get_zip_options'/2
		(_1, _2)
	in  %% Line 461
	    case Opts of
	      <{'zip_opts',Output,_17,_18,OpO,_19,_20,_21,_22}> when 'true' ->
		  let <Out0> =
		      apply %% Line 462
			    Output
			  (%% Line 462
			   {'open',_0,OpO}, %% Line 462
					    [])
		  in  let <Z> =
			  call %% Line 463
			       'zlib':%% Line 463
				      'open'
			      ()
		      in  %% Line 464
			  try
			      %% Line 465
			      case apply 'put_z_files'/6
				       (_1, Z, Out0, 0, Opts, []) of
				<{Out1,LHS,Pos}> when 'true' ->
				    do  %% Line 466
					call 'zlib':'close'
					    (Z)
					let <Out2> =
					    apply %% Line 467
						  'put_central_dir'/4
						(%% Line 467
						 LHS, %% Line 467
						      Pos, %% Line 467
							   Out1, %% Line 467
								 Opts)
					in  let <Out3> =
						apply %% Line 468
						      Output
						    (%% Line 468
						     {'close',_0}, %% Line 468
								   Out2)
					    in  %% Line 469
						{'ok',Out3}
				( <_7> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_7})
				  -| ['compiler_generated'] )
			      end
			  of <_10> ->
			      _10
			  catch <_13,_12,_11> ->
			      do  %% Line 472
				  call 'zlib':'close'
				      (Z)
				  do  %% Line 473
				      apply Output
					  ({'close',_0}, Out0)
				      primop 'raw_raise'
					  (_13, _12, _11)
	      ( <_4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_4})
		-| ['compiler_generated'] )
	    end
'list_dir'/1 =
    %% Line 488
    fun (_0) ->
	apply 'list_dir'/2
	    (_0, [])
'list_dir'/2 =
    %% Line 497
    fun (_0,_1) ->
	let <_2> =
	    catch
		%% Line 498
		apply 'do_list_dir'/2
		    (_0, _1)
	in  %% Line 498
	    case _2 of
	      %% Line 499
	      <_@r0 = {'ok',R}> when 'true' ->
		  _@r0
	      %% Line 500
	      <Error> when 'true' ->
		  {'error',Error}
	    end
'do_list_dir'/2 =
    %% Line 503
    fun (_0,_1) ->
	%% Line 506
	case apply 'get_list_dir_options'/2
		 (_0, _1) of
	  <{'list_dir_opts',Input,RawIterator,OpO}> when 'true' ->
	      let <In0> =
		  apply %% Line 507
			Input
		      (%% Line 507
		       {'open',_0,OpO}, %% Line 507
					[])
	      in  %% Line 508
		  case apply 'get_central_dir'/3
			   (In0, RawIterator, Input) of
		    <{Info,In1}> when 'true' ->
			do  %% Line 509
			    apply Input
				('close', In1)
			    %% Line 510
			    {'ok',Info}
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5})
		      -| ['compiler_generated'] )
		  end
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_3})
	    -| ['compiler_generated'] )
	end
't'/1 =
    %% Line 518
    fun (_0) ->
	case _0 of
	  <F>
	      when call 'erlang':'is_pid'
		    (_0) ->
	      apply 'zip_t'/1
		  (F)
	  %% Line 519
	  <F = {'openzip',_3,_4,_5,_6,_7,_8,_9}> when ( 'true'
							-| ['compiler_generated'] ) ->
	      apply 'openzip_t'/1
		  (F)
	  %% Line 520
	  <F> when 'true' ->
	      let <_1> = 'raw_short_print_info_etc'/5
	      in  apply 't'/2
		      (F, _1)
	end
't'/2 =
    %% Line 522
    fun (_0,_1) ->
	let <_2> =
	    catch
		%% Line 523
		apply 'do_t'/2
		    (_0, _1)
	in  %% Line 523
	    case _2 of
	      %% Line 524
	      <'ok'> when 'true' ->
		  'ok'
	      %% Line 525
	      <Error> when 'true' ->
		  {'error',Error}
	    end
'do_t'/2 =
    %% Line 528
    fun (_0,_1) ->
	let <Input> =
	    apply %% Line 529
		  'get_input'/1
		(_0)
	in  let <In0> =
		apply %% Line 531
		      Input
		    (%% Line 531
		     {'open',_0,['raw']}, %% Line 531
					  [])
	    in  %% Line 532
		case apply 'get_central_dir'/3
			 (In0, _1, Input) of
		  <{_X_Info,In1}> when 'true' ->
		      do  %% Line 533
			  apply Input
			      ('close', In1)
			  %% Line 534
			  'ok'
		  ( <_5> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_5})
		    -| ['compiler_generated'] )
		end
'tt'/1 =
    %% Line 542
    fun (_0) ->
	case _0 of
	  <F>
	      when call 'erlang':'is_pid'
		    (_0) ->
	      apply 'zip_tt'/1
		  (F)
	  %% Line 543
	  <F = {'openzip',_3,_4,_5,_6,_7,_8,_9}> when ( 'true'
							-| ['compiler_generated'] ) ->
	      apply 'openzip_tt'/1
		  (F)
	  %% Line 544
	  <F> when 'true' ->
	      let <_1> = 'raw_long_print_info_etc'/5
	      in  apply 't'/2
		      (F, _1)
	end
'get_unzip_opt'/2 =
    %% Line 548
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],Opts> when 'true' ->
	      %% Line 549
	      Opts
	  %% Line 550
	  <['verbose'|Rest],Opts> when 'true' ->
	      let <_2> = 'verbose_unzip'/1
	      in  %% Line 551
		  case Opts of
		    <{'unzip_opts',_47,_48,_49,_50,_51,_52}> when 'true' ->
			let <_6> =
			    call 'erlang':'setelement'
				(6, Opts, _2)
			in  apply 'get_unzip_opt'/2
				(Rest, _6)
		    ( <_53> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','unzip_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 552
	  <['cooked'|Rest],Opts = {'unzip_opts',_54,_55,_56,OpO,_57,_58}> when 'true' ->
	      let <_rec3> =
		  call %% Line 553
		       'erlang':%% Line 553
				'--'
		      (%% Line 553
		       OpO, %% Line 553
			    ['raw'])
	      in  %% Line 553
		  case Opts of
		    <{'unzip_opts',_59,_60,_61,_62,_63,_64}> when 'true' ->
			let <_10> =
			    call 'erlang':'setelement'
				(5, Opts, _rec3)
			in  apply 'get_unzip_opt'/2
				(Rest, _10)
		    ( <_65> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','unzip_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 554
	  <['memory'|Rest],Opts> when 'true' ->
	      let <_11> = 'binary_io'/2
	      in  %% Line 555
		  case Opts of
		    <{'unzip_opts',_66,_67,_68,_69,_70,_71}> when 'true' ->
			let <_15> =
			    call 'erlang':'setelement'
				(2, Opts, _11)
			in  apply 'get_unzip_opt'/2
				(Rest, _15)
		    ( <_72> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','unzip_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 556
	  <[{'cwd',CWD}|Rest],Opts> when 'true' ->
	      %% Line 557
	      case Opts of
		<{'unzip_opts',_73,_74,_75,_76,_77,_78}> when 'true' ->
		    let <_18> =
			call 'erlang':'setelement'
			    (7, Opts, CWD)
		    in  apply 'get_unzip_opt'/2
			    (Rest, _18)
		( <_79> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','unzip_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 558
	  <[{'file_filter',F}|Rest],Opts> when 'true' ->
	      let <Filter1> =
		  fun (_19) ->
		      %% Line 559
		      case _19 of
			<{ZipFile,_X_Extra}> when 'true' ->
			    apply F
				(ZipFile)
			( <_20> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_20})
				-| [{'function_name',{'-get_unzip_opt/2-fun-2-',1}}] )
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 560
		  ( case Opts of
		      ( <( {'unzip_opts',_80,_81,_rec8,_82,_83,_84}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <Filter2> =
				apply 'fun_and_1'/2
				    (Filter1, _rec8)
			    in  %% Line 561
				case Opts of
				  <{'unzip_opts',_86,_87,_88,_89,_90,_91}> when 'true' ->
				      let <_27> =
					  call 'erlang':'setelement'
					      (4, Opts, Filter2)
				      in  apply 'get_unzip_opt'/2
					      (Rest, _27)
				  ( <_92> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','unzip_opts'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			-| ['compiler_generated'] )
		      ( <_85> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','unzip_opts'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 562
	  <[{'file_list',L}|Rest],Opts> when 'true' ->
	      let <FileInList> =
		  fun (_28) ->
		      %% Line 563
		      apply 'file_in_list'/2
			  (_28, L)
	      in  %% Line 564
		  ( case Opts of
		      ( <( {'unzip_opts',_93,_94,_rec10,_95,_96,_97}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <Filter> =
				apply 'fun_and_1'/2
				    (FileInList, _rec10)
			    in  %% Line 565
				case Opts of
				  <{'unzip_opts',_99,_100,_101,_102,_103,_104}> when 'true' ->
				      let <_36> =
					  call 'erlang':'setelement'
					      (4, Opts, Filter)
				      in  apply 'get_unzip_opt'/2
					      (Rest, _36)
				  ( <_105> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','unzip_opts'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			-| ['compiler_generated'] )
		      ( <_98> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','unzip_opts'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 566
	  <['keep_old_files'|Rest],Opts> when 'true' ->
	      let <_37> = 'keep_old_file'/1
	      in  %% Line 568
		  ( case Opts of
		      ( <( {'unzip_opts',_106,_107,_rec12,_108,_109,_110}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <Filter> =
				apply 'fun_and_1'/2
				    (_37, _rec12)
			    in  %% Line 569
				case Opts of
				  <{'unzip_opts',_112,_113,_114,_115,_116,_117}> when 'true' ->
				      let <_44> =
					  call 'erlang':'setelement'
					      (4, Opts, Filter)
				      in  apply 'get_unzip_opt'/2
					      (Rest, _44)
				  ( <_118> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','unzip_opts'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			-| ['compiler_generated'] )
		      ( <_111> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','unzip_opts'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 570
	  <[Unknown|_X_Rest],_X_Opts> when 'true' ->
	      %% Line 571
	      call 'erlang':'throw'
		  ({'bad_option',Unknown})
	  ( <_46,_45> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_46,_45})
		  -| [{'function_name',{'get_unzip_opt',2}}] )
	    -| ['compiler_generated'] )
	end
'get_list_dir_opt'/2 =
    %% Line 573
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],Opts> when 'true' ->
	      %% Line 574
	      Opts
	  %% Line 575
	  <['cooked'|Rest],Opts = {'list_dir_opts',_22,_23,OpO}> when 'true' ->
	      let <_rec14> =
		  call %% Line 576
		       'erlang':%% Line 576
				'--'
		      (%% Line 576
		       OpO, %% Line 576
			    ['raw'])
	      in  %% Line 576
		  case Opts of
		    <{'list_dir_opts',_24,_25,_26}> when 'true' ->
			let <_5> =
			    call 'erlang':'setelement'
				(4, Opts, _rec14)
			in  apply 'get_list_dir_opt'/2
				(Rest, _5)
		    ( <_27> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','list_dir_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 577
	  <['names_only'|Rest],Opts> when 'true' ->
	      let <_rec16> =
		  fun (_10,_9,_8,_7,_6) ->
		      %% Line 579
		      apply 'raw_name_only'/5
			  (_10, _9, _8, _7, _6)
	      in  %% Line 579
		  case Opts of
		    <{'list_dir_opts',_28,_29,_30}> when 'true' ->
			let <_19> =
			    call 'erlang':'setelement'
				(3, Opts, _rec16)
			in  apply 'get_list_dir_opt'/2
				(Rest, _19)
		    ( <_31> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','list_dir_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 584
	  <[Unknown|_X_Rest],_X_Opts> when 'true' ->
	      %% Line 585
	      call 'erlang':'throw'
		  ({'bad_option',Unknown})
	  ( <_21,_20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_21,_20})
		  -| [{'function_name',{'get_list_dir_opt',2}}] )
	    -| ['compiler_generated'] )
	end
'get_zip_opt'/2 =
    %% Line 587
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],Opts> when 'true' ->
	      %% Line 588
	      Opts
	  %% Line 589
	  <['verbose'|Rest],Opts> when 'true' ->
	      let <_2> = 'verbose_zip'/1
	      in  %% Line 590
		  case Opts of
		    <{'zip_opts',_48,_49,_50,_51,_52,_53,_54,_55}> when 'true' ->
			let <_6> =
			    call 'erlang':'setelement'
				(6, Opts, _2)
			in  apply 'get_zip_opt'/2
				(Rest, _6)
		    ( <_56> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','zip_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 591
	  <['cooked'|Rest],Opts = {'zip_opts',_57,_58,_59,OpO,_60,_61,_62,_63}> when 'true' ->
	      let <_rec20> =
		  call %% Line 592
		       'erlang':%% Line 592
				'--'
		      (%% Line 592
		       OpO, %% Line 592
			    ['raw'])
	      in  %% Line 592
		  case Opts of
		    <{'zip_opts',_64,_65,_66,_67,_68,_69,_70,_71}> when 'true' ->
			let <_10> =
			    call 'erlang':'setelement'
				(5, Opts, _rec20)
			in  apply 'get_zip_opt'/2
				(Rest, _10)
		    ( <_72> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','zip_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 593
	  <['memory'|Rest],Opts> when 'true' ->
	      let <_11> = 'binary_io'/2
	      in  %% Line 594
		  case Opts of
		    <{'zip_opts',_73,_74,_75,_76,_77,_78,_79,_80}> when 'true' ->
			let <_15> =
			    call 'erlang':'setelement'
				(2, Opts, _11)
			in  apply 'get_zip_opt'/2
				(Rest, _15)
		    ( <_81> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','zip_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 595
	  <[{'cwd',CWD}|Rest],Opts> when 'true' ->
	      %% Line 596
	      case Opts of
		<{'zip_opts',_82,_83,_84,_85,_86,_87,_88,_89}> when 'true' ->
		    let <_18> =
			call 'erlang':'setelement'
			    (7, Opts, CWD)
		    in  apply 'get_zip_opt'/2
			    (Rest, _18)
		( <_90> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','zip_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 597
	  <[{'comment',C}|Rest],Opts> when 'true' ->
	      %% Line 598
	      case Opts of
		<{'zip_opts',_91,_92,_93,_94,_95,_96,_97,_98}> when 'true' ->
		    let <_21> =
			call 'erlang':'setelement'
			    (4, Opts, C)
		    in  apply 'get_zip_opt'/2
			    (Rest, _21)
		( <_99> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','zip_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 599
	  <[O = {'compress',Which}|Rest],Opts> when 'true' ->
	      let <_29> =
		  case %% Line 601
		       Which of
		    %% Line 602
		    <'all'> when 'true' ->
			%% Line 603
			'all'
		    %% Line 604
		    <Suffixes>
			when call 'erlang':'is_list'
			      (Which) ->
			%% Line 605
			call 'lists':'usort'
			    (Suffixes)
		    %% Line 606
		    <{'add',Suffixes}>
			when call 'erlang':'is_list'
			      (Suffixes) ->
			%% Line 607
			( case Opts of
			    ( <( {'zip_opts',_100,_101,_102,_103,_104,_105,_rec26,_106}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_24> =
				      call 'erlang':'++'
					  (_rec26, Suffixes)
				  in  call 'lists':'usort'
					  (_24)
			      -| ['compiler_generated'] )
			    ( <_107> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','zip_opts'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 608
		    <{'del',Suffixes}>
			when call 'erlang':'is_list'
			      (Suffixes) ->
			%% Line 609
			( case Opts of
			    ( <( {'zip_opts',_108,_109,_110,_111,_112,_113,_rec27,_114}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_27> =
				      call 'erlang':'--'
					  (_rec27, Suffixes)
				  in  call 'lists':'usort'
					  (_27)
			      -| ['compiler_generated'] )
			    ( <_115> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','zip_opts'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 610
		    <_116> when 'true' ->
			%% Line 611
			call 'erlang':'throw'
			    ({'bad_option',O})
		  end
	      in  %% Line 613
		  case Opts of
		    <{'zip_opts',_117,_118,_119,_120,_121,_122,_123,_124}> when 'true' ->
			let <_33> =
			    call 'erlang':'setelement'
				(8, Opts, _29)
			in  apply 'get_zip_opt'/2
				(Rest, _33)
		    ( <_125> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','zip_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 614
	  <[O = {'uncompress',Which}|Rest],Opts> when 'true' ->
	      let <_41> =
		  case %% Line 616
		       Which of
		    %% Line 617
		    <'all'> when 'true' ->
			%% Line 618
			'all'
		    %% Line 619
		    <Suffixes>
			when call 'erlang':'is_list'
			      (Which) ->
			%% Line 620
			call 'lists':'usort'
			    (Suffixes)
		    %% Line 621
		    <{'add',Suffixes}>
			when call 'erlang':'is_list'
			      (Suffixes) ->
			%% Line 622
			( case Opts of
			    ( <( {'zip_opts',_126,_127,_128,_129,_130,_131,_132,_rec29}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_36> =
				      call 'erlang':'++'
					  (_rec29, Suffixes)
				  in  call 'lists':'usort'
					  (_36)
			      -| ['compiler_generated'] )
			    ( <_133> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','zip_opts'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 623
		    <{'del',Suffixes}>
			when call 'erlang':'is_list'
			      (Suffixes) ->
			%% Line 624
			( case Opts of
			    ( <( {'zip_opts',_134,_135,_136,_137,_138,_139,_140,_rec30}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_39> =
				      call 'erlang':'--'
					  (_rec30, Suffixes)
				  in  call 'lists':'usort'
					  (_39)
			      -| ['compiler_generated'] )
			    ( <_141> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','zip_opts'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 625
		    <_142> when 'true' ->
			%% Line 626
			call 'erlang':'throw'
			    ({'bad_option',O})
		  end
	      in  %% Line 628
		  case Opts of
		    <{'zip_opts',_143,_144,_145,_146,_147,_148,_149,_150}> when 'true' ->
			let <_45> =
			    call 'erlang':'setelement'
				(9, Opts, _41)
			in  apply 'get_zip_opt'/2
				(Rest, _45)
		    ( <_151> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','zip_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 629
	  <[Unknown|_X_Rest],_X_Opts> when 'true' ->
	      %% Line 630
	      call 'erlang':'throw'
		  ({'bad_option',Unknown})
	  ( <_47,_46> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_47,_46})
		  -| [{'function_name',{'get_zip_opt',2}}] )
	    -| ['compiler_generated'] )
	end
'silent'/1 =
    %% Line 634
    fun (_0) ->
	'ok'
'verbose_unzip'/1 =
    %% Line 636
    fun (_0) ->
	let <_1> =
	    call %% Line 637
		 'io_lib':%% Line 637
			  'write_string'
		(_0)
	in  %% Line 637
	    call 'io':'format'
		([101|[120|[116|[114|[97|[99|[116|[105|[110|[103|[58|[32|[126|[116|[115|[10]]]]]]]]]]]]]]]], [_1|[]])
'verbose_zip'/1 =
    %% Line 639
    fun (_0) ->
	let <_1> =
	    call %% Line 640
		 'io_lib':%% Line 640
			  'write_string'
		(_0)
	in  %% Line 640
	    call 'io':'format'
		([97|[100|[100|[105|[110|[103|[58|[32|[126|[116|[115|[10]]]]]]]]]]]], [_1|[]])
'all'/1 =
    %% Line 643
    fun (_0) ->
	'true'
'file_in_list'/2 =
    %% Line 645
    fun (_0,_1) ->
	case <_0,_1> of
	  <{{'zip_file',FileName,_4,_5,_6,_7},_8},List> when 'true' ->
	      %% Line 646
	      call 'lists':'member'
		  (FileName, List)
	  %% Line 647
	  <_9,_10> when 'true' ->
	      %% Line 648
	      'false'
	end
'keep_old_file'/1 =
    %% Line 650
    fun (_0) ->
	case _0 of
	  <{{'zip_file',FileName,_5,_6,_7,_8},_9}> when 'true' ->
	      %% Line 651
	      ( case call 'filelib':'is_file'
			 (FileName) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			let <_11> =
			    call 'filelib':'is_dir'
				(FileName)
			in  call 'erlang':'not'
				(_11)
		    -| ['compiler_generated'] )
		  ( <_1> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_1}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 652
	  <_10> when 'true' ->
	      %% Line 653
	      'false'
	end
'fun_and_1'/2 =
    %% Line 656
    fun (_0,_1) ->
	%% Line 657
	( fun (_4) ->
	      ( case apply _0
			 (_4) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			apply _1
			    (_4)
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_2> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_2}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  -| [{'id',{0,0,'-fun_and_1/2-fun-0-'}}] )
'get_zip_options'/2 =
    %% Line 660
    fun (_0,_1) ->
	let <_5> = 'file_io'/2
	in  let <_4> =
		apply %% Line 663
		      'get_zip_input'/1
		    (%% Line 663
		     {'files',_0})
	    in  let <_3> = 'silent'/1
		in  let <Opts> =
			{%% Line 662
			 'zip_opts',_5,_4,%% Line 665
					  [],%% Line 664
					     ['raw'|['write']],_3,%% Line 667
								  [],%% Line 668
								     'all',%% Line 661
									   [[46|[90]]|[[46|[122|[105|[112]]]]|[[46|[122|[111|[111]]]]|[[46|[97|[114|[99]]]]|[[46|[108|[122|[104]]]]|[[46|[97|[114|[106]]]]]]]]]]}
		    in  %% Line 671
			case apply 'get_zip_opt'/2
				 (_1, Opts) of
			  <Opts1 = {'zip_opts',_13,_14,Comment,_15,_16,_17,_18,_19}> when 'true' ->
			      %% Line 673
			      case apply 'encode_string'/1
				       (Comment) of
				<{Comment1,_20}> when 'true' ->
				    %% Line 674
				    case Opts1 of
				      <{'zip_opts',_21,_22,_23,_24,_25,_26,_27,_28}> when 'true' ->
					  call 'erlang':'setelement'
					      (4, Opts1, Comment1)
				      ( <_29> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','zip_opts'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				( <_8> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_8})
				  -| ['compiler_generated'] )
			      end
			  ( <_7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_7})
			    -| ['compiler_generated'] )
			end
'get_unzip_options'/2 =
    %% Line 676
    fun (_0,_1) ->
	let <_5> = 'file_io'/2
	in  let <_4> =
		apply %% Line 679
		      'get_input'/1
		    (_0)
	    in  let <_3> = 'all'/1
		in  let <_2> = 'silent'/1
		    in  let <Opts> =
			    {%% Line 677
			     'unzip_opts',_5,_4,_3,%% Line 680
						   ['raw'],_2,%% Line 682
							      []}
			in  %% Line 684
			    apply 'get_unzip_opt'/2
				(_1, Opts)
'get_openzip_options'/1 =
    %% Line 686
    fun (_0) ->
	let <_1> = 'file_io'/2
	in  let <Opts> =
		{%% Line 687
		 'openzip_opts',_1,%% Line 687
				   ['raw'|['read']],%% Line 689
						    []}
	    in  %% Line 690
		apply 'get_openzip_opt'/2
		    (_0, Opts)
'get_input'/1 =
    %% Line 692
    fun (_0) ->
	case _0 of
	  <F>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      %% Line 693
	      ( 'binary_io'/2
		-| [{'id',{0,0,'-get_input/1-fun-0-'}}] )
	  %% Line 694
	  <F>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 695
	      ( 'file_io'/2
		-| [{'id',{0,0,'-get_input/1-fun-1-'}}] )
	  %% Line 696
	  <_2> when 'true' ->
	      %% Line 697
	      call 'erlang':'throw'
		  ('einval')
	end
'get_zip_input'/1 =
    %% Line 699
    fun (_0) ->
	case _0 of
	  <{F,B}>
	      when let <_1> =
		    call 'erlang':'is_binary'
			(B)
		in  let <_2> =
			call 'erlang':'is_list'
			    (F)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 700
	      ( 'binary_io'/2
		-| [{'id',{0,0,'-get_zip_input/1-fun-0-'}}] )
	  %% Line 701
	  <{F,B,{'file_info',_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20}}>
	      when let <_3> =
		    call 'erlang':'is_binary'
			(B)
		in  let <_4> =
			call 'erlang':'is_list'
			    (F)
		    in  call 'erlang':'and'
			    (_3, _4) ->
	      %% Line 702
	      ( 'binary_io'/2
		-| [{'id',{0,0,'-get_zip_input/1-fun-1-'}}] )
	  %% Line 703
	  <{F,{'file_info',_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33},B}>
	      when let <_5> =
		    call 'erlang':'is_binary'
			(B)
		in  let <_6> =
			call 'erlang':'is_list'
			    (F)
		    in  call 'erlang':'and'
			    (_5, _6) ->
	      %% Line 704
	      ( 'binary_io'/2
		-| [{'id',{0,0,'-get_zip_input/1-fun-2-'}}] )
	  %% Line 705
	  <F>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 706
	      ( 'file_io'/2
		-| [{'id',{0,0,'-get_zip_input/1-fun-3-'}}] )
	  %% Line 707
	  <{'files',[]}> when 'true' ->
	      %% Line 708
	      ( 'binary_io'/2
		-| [{'id',{0,0,'-get_zip_input/1-fun-4-'}}] )
	  %% Line 709
	  <{'files',[File|_34]}> when 'true' ->
	      %% Line 710
	      apply 'get_zip_input'/1
		  (File)
	  %% Line 711
	  <_35> when 'true' ->
	      %% Line 712
	      call 'erlang':'throw'
		  ('einval')
	end
'get_list_dir_options'/2 =
    %% Line 714
    fun (_0,_1) ->
	let <_3> =
	    apply %% Line 716
		  'get_input'/1
		(_0)
	in  let <_2> = 'raw_file_info_public'/5
	    in  let <Opts> =
		    {%% Line 715
		     'list_dir_opts',_3,_2,%% Line 717
					   ['raw']}
		in  %% Line 718
		    apply 'get_list_dir_opt'/2
			(_1, Opts)
'table'/1 =
    %% Line 726
    fun (_0) ->
	apply 'list_dir'/1
	    (_0)
'table'/2 =
    %% Line 736
    fun (_0,_1) ->
	apply 'list_dir'/2
	    (_0, _1)
'create'/2 =
    %% Line 747
    fun (_0,_1) ->
	apply 'zip'/2
	    (_0, _1)
'create'/3 =
    %% Line 759
    fun (_0,_1,_2) ->
	apply 'zip'/3
	    (_0, _1, _2)
'extract'/1 =
    %% Line 770
    fun (_0) ->
	apply 'unzip'/1
	    (_0)
'extract'/2 =
    %% Line 788
    fun (_0,_1) ->
	apply 'unzip'/2
	    (_0, _1)
'put_central_dir'/4 =
    %% Line 792
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <LHS,Pos,Out0,%% Line 793
			{'zip_opts',Output,_10,Comment,_11,_12,_13,_14,_15}> when 'true' ->
	      %% Line 794
	      case apply 'put_cd_files_loop'/4
		       (LHS, Output, Out0, 0) of
		<{Out1,Sz}> when 'true' ->
		    let <_5> =
			call %% Line 795
			     'erlang':%% Line 795
				      'length'
			    (%% Line 795
			     LHS)
		    in  %% Line 795
			apply 'put_eocd'/6
			    (_5, Pos, Sz, Comment, Output, Out1)
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  ( <_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6})
		  -| [{'function_name',{'put_central_dir',4}}] )
	    -| ['compiler_generated'] )
	end
'put_cd_files_loop'/4 =
    %% Line 797
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[],_X_Output,Out,Sz> when 'true' ->
	      %% Line 798
	      {Out,Sz}
	  %% Line 799
	  <[{LH,Name,Pos}|LHRest],Output,Out0,Sz0> when 'true' ->
	      let <CDFH> =
		  apply %% Line 800
			'cd_file_header_from_lh_and_pos'/2
		      (%% Line 800
		       LH, %% Line 800
			   Pos)
	      in  let <BCDFH> =
		      apply %% Line 801
			    'cd_file_header_to_bin'/1
			  (%% Line 801
			   CDFH)
		  in  let <B> =
			  [%% Line 802
			   #{#<80>(8,1,'integer',['unsigned'|['big']]),
			     #<75>(8,1,'integer',['unsigned'|['big']]),
			     #<1>(8,1,'integer',['unsigned'|['big']]),
			     #<2>(8,1,'integer',['unsigned'|['big']])}#|%% Line 802
									[BCDFH|[Name|[]]]]
		      in  let <Out1> =
			      apply %% Line 803
				    Output
				  (%% Line 803
				   {'write',B}, %% Line 803
						Out0)
			  in  let <_26> =
				  call %% Line 804
				       'erlang':%% Line 804
						'+'
				      (%% Line 804
				       Sz0, %% Line 804
					    46)
			      in  %% Line 805
				  ( case LH of
				      ( <( {'local_file_header',_32,_33,_34,_35,_36,_37,_38,_39,_rec33,_40}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <Sz1> =
						call 'erlang':'+'
						    (_26, _rec33)
					    in  %% Line 806
						apply 'put_cd_files_loop'/4
						    (LHRest, Output, Out1, Sz1)
					-| ['compiler_generated'] )
				      ( <_41> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','local_file_header'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
	  ( <_31,_30,_29,_28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_31,_30,_29,_28})
		  -| [{'function_name',{'put_cd_files_loop',4}}] )
	    -| ['compiler_generated'] )
	end
'put_eocd'/6 =
    %% Line 809
    fun (_0,_1,_2,_3,_4,_5) ->
	let <CommentSz> =
	    call %% Line 811
		 'erlang':%% Line 811
			  'length'
		(_3)
	in  let <EOCD> =
		{%% Line 812
		 'eocd',%% Line 812
			0,%% Line 813
			  0,_0,_0,_2,_1,%% Line 818
					CommentSz}
	    in  let <BEOCD> =
		    apply %% Line 819
			  'eocd_to_bin'/1
			(%% Line 819
			 EOCD)
		in  let <B> =
			[%% Line 820
			 #{#<80>(8,1,'integer',['unsigned'|['big']]),
			   #<75>(8,1,'integer',['unsigned'|['big']]),
			   #<5>(8,1,'integer',['unsigned'|['big']]),
			   #<6>(8,1,'integer',['unsigned'|['big']])}#|%% Line 820
								      [BEOCD|[_3|[]]]]
		    in  %% Line 821
			apply _4
			    ({'write',B}, _5)
'get_filename'/2 =
    %% Line 823
    fun (_0,_1) ->
	case <_0,_1> of
	  <{Name,_5},Type> when 'true' ->
	      %% Line 824
	      apply 'get_filename'/2
		  (Name, Type)
	  %% Line 825
	  <{Name,_6,_7},Type> when 'true' ->
	      %% Line 826
	      apply 'get_filename'/2
		  (Name, Type)
	  %% Line 827
	  <Name,'regular'> when 'true' ->
	      %% Line 828
	      Name
	  %% Line 829
	  <Name,'directory'> when 'true' ->
	      %% Line 831
	      case call 'lists':'reverse'
		       (Name) of
		%% Line 832
		<[47|_X_Rev]> when 'true' ->
		    Name
		%% Line 833
		<Rev> when 'true' ->
		    call 'lists':'reverse'
			([47|Rev])
	      end
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'get_filename',2}}] )
	    -| ['compiler_generated'] )
	end
'add_cwd'/2 =
    %% Line 836
    fun (_0,_1) ->
	case <_0,_1> of
	  <_X_CWD,F = {_X_Name,_4}> when 'true' ->
	      F
	  %% Line 837
	  <[],F> when 'true' ->
	      F
	  %% Line 838
	  <CWD,F> when 'true' ->
	      call 'filename':'join'
		  (CWD, F)
	end
'get_comp_method'/4 =
    %% Line 843
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <_21,N,_22,_23>
	      when let <_4> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_5> =
			call 'erlang':'<'
			    (N, 10)
		    in  call 'erlang':'and'
			    (_4, _5) ->
	      %% Line 844
	      0
	  %% Line 845
	  <_24,_25,_26,'directory'> when 'true' ->
	      %% Line 846
	      0
	  %% Line 847
	  <F,_27,{'zip_opts',_28,_29,_30,_31,_32,_33,Compress,Uncompress},_34> when 'true' ->
	      let <Ext> =
		  call %% Line 848
		       'filename':%% Line 848
				  'extension'
		      (%% Line 848
		       F)
	      in  let <Test> =
		      fun (_9) ->
			  %% Line 849
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (_9,
					   'all') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call 'lists':'member'
					(Ext, _9)
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		  in  let <_15> =
			  case %% Line 850
			       apply Test
				   (Compress) of
			    %% Line 850
			    ( <( 'true'
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_13> =
				      apply Test
					  (Uncompress)
				  in  call 'erlang':'not'
					  (_13)
			      -| ['compiler_generated'] )
			    %% Line 850
			    ( <( 'false'
				 -| ['compiler_generated'] )> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			    %% Line 850
			    ( <_12> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {( 'badarg'
					      -| ['compiler_generated'] ),_12}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      in  %% Line 850
			  case _15 of
			    %% Line 851
			    <'true'> when 'true' ->
				8
			    %% Line 852
			    <'false'> when 'true' ->
				0
			    ( <_16> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_16})
			      -| ['compiler_generated'] )
			  end
	  ( <_20,_19,_18,_17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_20,_19,_18,_17})
		  -| [{'function_name',{'get_comp_method',4}}] )
	    -| ['compiler_generated'] )
	end
'put_z_files'/6 =
    %% Line 855
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <[],_X_Z,Out,Pos,_X_Opts,Acc> when 'true' ->
	      let <_6> =
		  call %% Line 856
		       'lists':%% Line 856
			       'reverse'
		      (%% Line 856
		       Acc, %% Line 856
			    [])
	      in  %% Line 856
		  {Out,_6,Pos}
	  %% Line 857
	  <[F|Rest],Z,Out0,Pos0,%% Line 859
				Opts = %% Line 858
				       {'zip_opts',Output,Input,_69,OpO,%% Line 859
									FB,%% Line 859
									   CWD,_70,_71},%% Line 859
											Acc> when 'true' ->
	      let <F1> =
		  apply %% Line 861
			'add_cwd'/2
		      (%% Line 861
		       CWD, %% Line 861
			    F)
	      in  let <FileInfo> =
		      apply %% Line 862
			    Input
			  (%% Line 862
			   {'file_info',F1}, %% Line 860
					     [])
		  in  %% Line 863
		      ( case FileInfo of
			  ( <( {'file_info',_72,_rec34,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_15> =
				    case _rec34 of
				      %% Line 866
				      <'regular'> when 'true' ->
					  ( case FileInfo of
					      ( <( {'file_info',_rec35,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96}
						   -| ['compiler_generated'] )> when 'true' ->
						    _rec35
						-| ['compiler_generated'] )
					      ( <_97> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','file_info'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      %% Line 867
				      <'directory'> when 'true' ->
					  0
				      ( <_14> when 'true' ->
					    %% Line 865
					    primop 'match_fail'
						({'case_clause',_14})
					-| ['compiler_generated'] )
				    end
				in  let <FileName0> =
					apply %% Line 869
					      'get_filename'/2
					    (%% Line 869
					     F, _rec34)
				    in  %% Line 871
					case apply 'encode_string'/1
						 (FileName0) of
					  <{FileName,GPFlag}> when 'true' ->
					      let <CompMethod> =
						  apply %% Line 872
							'get_comp_method'/4
						      (%% Line 872
						       FileName, _15, %% Line 872
								      Opts, _rec34)
					      in  let <LH> =
						      apply %% Line 873
							    'local_file_header_from_info_method_name'/5
							  (%% Line 873
							   FileInfo, _15, %% Line 873
									  CompMethod, %% Line 873
										      FileName, %% Line 873
												GPFlag)
						  in  let <BLH> =
							  apply %% Line 874
								'local_file_header_to_bin'/1
							      (%% Line 874
							       LH)
						      in  let <B> =
							      [%% Line 875
							       #{#<80>(8,1,'integer',['unsigned'|['big']]),
								 #<75>(8,1,'integer',['unsigned'|['big']]),
								 #<3>(8,1,'integer',['unsigned'|['big']]),
								 #<4>(8,1,'integer',['unsigned'|['big']])}#|%% Line 875
													    [BLH|[]]]
							  in  let <Out1> =
								  apply %% Line 876
									Output
								      (%% Line 876
								       {'write',B}, %% Line 876
										    Out0)
							      in  let <Out2> =
								      apply %% Line 877
									    Output
									  (%% Line 877
									   {'write',FileName}, %% Line 877
											       Out1)
								  in  %% Line 878
								      case apply 'put_z_file'/10
									       (CompMethod, _15, Out2, F1, %% Line 879
													   0, %% Line 879
													      Input, %% Line 879
														     Output, %% Line 879
															     OpO, %% Line 879
																  Z, _rec34) of
									<{Out3,CompSize,CRC}> when 'true' ->
									    do  %% Line 880
										apply FB
										    (FileName0)
										let <Patch> =
										    #{#<%% Line 881
											CRC>(%% Line 881
											     32,1,'integer',['unsigned'|['little']]),
										      #<%% Line 881
											CompSize>(%% Line 881
												  32,1,'integer',['unsigned'|['little']])}#
										in  let <_27> =
											call %% Line 882
											     'erlang':%% Line 882
												      '+'
											    (%% Line 882
											     Pos0, %% Line 882
												   4)
										    in  let <_28> =
											    call %% Line 882
												 'erlang':%% Line 882
													  '+'
												(_27, %% Line 882
												      2)
											in  let <_29> =
												call %% Line 882
												     'erlang':%% Line 882
													      '+'
												    (_28, %% Line 882
													  2)
											    in  let <_30> =
												    call %% Line 882
													 'erlang':%% Line 882
														  '+'
													(_29, %% Line 882
													      2)
												in  let <_31> =
													call %% Line 882
													     'erlang':%% Line 882
														      '+'
													    (_30, %% Line 882
														  2)
												    in  let <_32> =
													    call %% Line 882
														 'erlang':%% Line 882
															  '+'
														(_31, %% Line 882
														      2)
													in  let <Out4> =
														apply %% Line 882
														      Output
														    (%% Line 882
														     {'pwrite',_32,Patch}, %% Line 882
																	   Out3)
													    in  let <Out5> =
														    apply %% Line 883
															  Output
															(%% Line 883
															 {'seek','eof',0}, %% Line 883
																	   Out4)
														in  let <_47> =
															call %% Line 884
															     'erlang':%% Line 884
																      '+'
															    (%% Line 884
															     Pos0, %% Line 884
																   30)
														    in  %% Line 884
															( case LH of
															    ( <( {'local_file_header',_98,_99,_100,_101,_102,_103,_104,_105,_rec36,_106}
																 -| ['compiler_generated'] )> when 'true' ->
																  let <Pos1> =
																      call 'erlang':'+'
																	  (_47, _rec36)
																  in  let <Pos2> =
																	  call %% Line 885
																	       'erlang':%% Line 885
																			'+'
																	      (%% Line 885
																	       Pos1, %% Line 885
																		     CompSize)
																      in  %% Line 886
																	  case LH of
																	    <{'local_file_header',_108,_109,_110,_111,_112,_113,_114,_115,_116,_117}> when 'true' ->
																		let <_51> =
																		    call 'erlang':'setelement'
																			(8, LH, CompSize)
																		in  let <_53> =
																			call 'erlang':'setelement'
																			    (7, _51, CRC)
																		    in  let <ThisAcc> =
																			    [%% Line 887
																			     {_53,FileName,Pos0}|%% Line 887
																						 []]
																			in  let <_59> =
																				case _rec34 of
																				  %% Line 890
																				  <'regular'> when 'true' ->
																				      %% Line 891
																				      {Out5,ThisAcc,Pos2}
																				  %% Line 892
																				  <'directory'> when 'true' ->
																				      let <Files> =
																					  apply %% Line 893
																						Input
																					      (%% Line 893
																					       {'list_dir',F1}, %% Line 893
																								[])
																				      in  let <RevFiles> =
																					      apply %% Line 894
																						    'reverse_join_files'/3
																						  (%% Line 894
																						   F, %% Line 894
																						      Files, %% Line 894
																							     [])
																					  in  %% Line 895
																					      apply 'put_z_files'/6
																						  (RevFiles, Z, Out5, Pos2, Opts, ThisAcc)
																				  ( <_58> when 'true' ->
																					%% Line 889
																					primop 'match_fail'
																					    ({'case_clause',_58})
																				    -| ['compiler_generated'] )
																				end
																			    in  %% Line 888
																				case _59 of
																				  <{Out6,SubAcc,Pos3}> when 'true' ->
																				      let <_61> =
																					  call %% Line 897
																					       'lists':%% Line 897
																						       'reverse'
																					      (%% Line 897
																					       SubAcc)
																				      in  let <Acc2> =
																					      call %% Line 897
																						   'erlang':%% Line 897
																							    '++'
																						  (_61, %% Line 897
																							Acc)
																					  in  %% Line 898
																					      apply 'put_z_files'/6
																						  (Rest, Z, Out6, Pos3, Opts, Acc2)
																				  ( <_60> when 'true' ->
																					primop 'match_fail'
																					    ({'badmatch',_60})
																				    -| ['compiler_generated'] )
																				end
																	    ( <_118> when 'true' ->
																		  ( call ( 'erlang'
																			   -| ['compiler_generated'] ):( 'error'
																							 -| ['compiler_generated'] )
																			(( {'badrecord','local_file_header'}
																			   -| ['compiler_generated'] ))
																		    -| ['compiler_generated'] )
																	      -| ['compiler_generated'] )
																	  end
															      -| ['compiler_generated'] )
															    ( <_107> when 'true' ->
																  ( call ( 'erlang'
																	   -| ['compiler_generated'] ):( 'error'
																					 -| ['compiler_generated'] )
																	(( {'badrecord','local_file_header'}
																	   -| ['compiler_generated'] ))
																    -| ['compiler_generated'] )
															      -| ['compiler_generated'] )
															  end
															  -| ['compiler_generated'] )
									( <_25> when 'true' ->
									      primop 'match_fail'
										  ({'badmatch',_25})
									  -| ['compiler_generated'] )
								      end
					  ( <_18> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_18})
					    -| ['compiler_generated'] )
					end
			    -| ['compiler_generated'] )
			  ( <_84> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','file_info'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  ( <_68,_67,_66,_65,_64,_63> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_68,_67,_66,_65,_64,_63})
		  -| [{'function_name',{'put_z_files',6}}] )
	    -| ['compiler_generated'] )
	end
'reverse_join_files'/3 =
    %% Line 900
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Dir,[File|Files],Acc> when 'true' ->
	      let <_3> =
		  call %% Line 901
		       'filename':%% Line 901
				  'join'
		      (%% Line 901
		       [Dir|[File|[]]])
	      in  %% Line 901
		  apply 'reverse_join_files'/3
		      (Dir, Files, [_3|Acc])
	  %% Line 902
	  <_X_Dir,[],Acc> when 'true' ->
	      %% Line 903
	      Acc
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'reverse_join_files',3}}] )
	    -| ['compiler_generated'] )
	end
'put_z_file'/10 =
    %% Line 909
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9> of
	  <_X_Method,Sz,Out,_X_F,Pos,_X_Input,_X_Output,_X_OpO,_X_Z,'directory'> when 'true' ->
	      let <_10> =
		  call %% Line 910
		       'erlang':%% Line 910
				'+'
		      (%% Line 910
		       Pos, %% Line 910
			    Sz)
	      in  %% Line 910
		  {Out,_10,0}
	  %% Line 911
	  <_X_Method,0,Out,_X_F,Pos,_X_Input,_X_Output,_X_OpO,_X_Z,'regular'> when 'true' ->
	      %% Line 912
	      {Out,Pos,0}
	  %% Line 913
	  <0,UncompSize,Out0,F,Pos0,Input,Output,OpO,Z,'regular'> when 'true' ->
	      let <_12> =
		  call %% Line 915
		       'erlang':%% Line 915
				'--'
		      (%% Line 915
		       OpO, %% Line 915
			    ['write'])
	      in  let <In1> =
		      apply %% Line 915
			    Input
			  (%% Line 915
			   {'open',F,_12}, %% Line 914
					   [])
		  in  let <CRC0> =
			  call %% Line 916
			       'zlib':%% Line 916
				      'crc32'
			      (%% Line 916
			       Z, %% Line 916
				  #{}#)
		      in  %% Line 917
			  case apply Input
				   ({'read',UncompSize}, In1) of
			    <{Data,In2}> when 'true' ->
				let <Out1> =
				    apply %% Line 918
					  Output
					(%% Line 918
					 {'write',Data}, %% Line 918
							 Out0)
				in  let <CRC> =
					call %% Line 919
					     'zlib':%% Line 919
						    'crc32'
					    (%% Line 919
					     Z, %% Line 919
						CRC0, %% Line 919
						      Data)
				    in  do  %% Line 920
					    apply Input
						('close', In2)
					    let <_18> =
						call %% Line 921
						     'erlang':%% Line 921
							      'iolist_size'
						    (%% Line 921
						     Data)
					    in  let <_19> =
						    call %% Line 921
							 'erlang':%% Line 921
								  '+'
							(%% Line 921
							 Pos0, _18)
						in  %% Line 921
						    {Out1,_19,CRC}
			    ( <_15> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_15})
			      -| ['compiler_generated'] )
			  end
	  %% Line 922
	  <8,UncompSize,Out0,F,Pos0,Input,Output,OpO,Z,'regular'> when 'true' ->
	      let <_21> =
		  call %% Line 924
		       'erlang':%% Line 924
				'--'
		      (%% Line 924
		       OpO, %% Line 924
			    ['write'])
	      in  let <In1> =
		      apply %% Line 924
			    Input
			  (%% Line 924
			   {'open',F,_21}, %% Line 923
					   [])
		  in  %% Line 925
		      case call 'zlib':'deflateInit'
			       (Z, 'default', 'deflated', -15, 8, 'default') of
			<'ok'> when 'true' ->
			    %% Line 926
			    case %% Line 927
				 apply 'put_z_data_loop'/7
				     (UncompSize, In1, Out0, Pos0, Input, Output, Z) of
			      <{Out1,Pos1}> when 'true' ->
				  let <CRC> =
				      call %% Line 928
					   'zlib':%% Line 928
						  'crc32'
					  (%% Line 928
					   Z)
				  in  %% Line 929
				      case call 'zlib':'deflateEnd'
					       (Z) of
					<'ok'> when 'true' ->
					    do  %% Line 930
						apply Input
						    ('close', In1)
						%% Line 931
						{Out1,Pos1,CRC}
					( <_27> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_27})
					  -| ['compiler_generated'] )
				      end
			      ( <_25> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_25})
				-| ['compiler_generated'] )
			    end
			( <_24> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_24})
			  -| ['compiler_generated'] )
		      end
	  ( <_37,_36,_35,_34,_33,_32,_31,_30,_29,_28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_37,_36,_35,_34,_33,_32,_31,_30,_29,_28})
		  -| [{'function_name',{'put_z_file',10}}] )
	    -| ['compiler_generated'] )
	end
'get_sync'/2 =
    %% Line 934
    fun (_0,_1) ->
	case <_0,_1> of
	  <N,_4>
	      when call 'erlang':'=:='
		    (_4,
		     N) ->
	      'finish'
	  %% Line 935
	  <_5,_6> when 'true' ->
	      'full'
	end
'put_z_data_loop'/7 =
    %% Line 938
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <0,_X_In,Out,Pos,_X_Input,_X_Output,_X_Z> when 'true' ->
	      %% Line 939
	      {Out,Pos}
	  %% Line 940
	  <UncompSize,In0,Out0,Pos0,Input,Output,Z> when 'true' ->
	      let <N> =
		  call %% Line 941
		       'erlang':%% Line 941
				'min'
		      (%% Line 941
		       8192, %% Line 941
			     UncompSize)
	      in  %% Line 942
		  case apply Input
			   ({'read',N}, In0) of
		    %% Line 943
		    <{'eof',_X_In1}> when 'true' ->
			%% Line 944
			{Out0,Pos0}
		    %% Line 945
		    <{Uncompressed,In1}> when 'true' ->
			let <_9> =
			    apply %% Line 946
				  'get_sync'/2
				(%% Line 946
				 N, %% Line 946
				    UncompSize)
			in  let <Compressed> =
				call %% Line 946
				     'zlib':%% Line 946
					    'deflate'
				    (%% Line 946
				     Z, %% Line 946
					Uncompressed, _9)
			    in  let <Sz> =
				    call %% Line 947
					 'erlang':%% Line 947
						  'iolist_size'
					(%% Line 947
					 Compressed)
				in  let <Out1> =
					apply %% Line 948
					      Output
					    (%% Line 948
					     {'write',Compressed}, %% Line 948
								   Out0)
				    in  let <_14> =
					    call %% Line 949
						 'erlang':%% Line 949
							  '-'
						(%% Line 949
						 UncompSize, %% Line 949
							     N)
					in  let <_13> =
						call %% Line 949
						     'erlang':%% Line 949
							      '+'
						    (%% Line 949
						     Pos0, %% Line 949
							   Sz)
					    in  %% Line 949
						apply 'put_z_data_loop'/7
						    (_14, In1, Out1, _13, %% Line 950
									  Input, %% Line 950
										 Output, %% Line 950
											 Z)
		    ( <_15> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_15})
		      -| ['compiler_generated'] )
		  end
	end
'raw_name_only'/5 =
    %% Line 956
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <CD = {'cd_file_header',_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25},FileName,_X_FileComment,_X_BExtraField,Acc> when %% Line 957
																		    ( 'true'
																		      -| ['compiler_generated'] ) ->
	      %% Line 958
	      [FileName|Acc]
	  %% Line 959
	  <EOCD = {'eocd',_26,_27,_28,_29,_30,_31,_32},_33,_X_Comment,_34,Acc> when ( 'true'
										      -| ['compiler_generated'] ) ->
	      %% Line 960
	      Acc
	  ( <_9,_8,_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6,_5})
		  -| [{'function_name',{'raw_name_only',5}}] )
	    -| ['compiler_generated'] )
	end
'raw_short_print_info_etc'/5 =
    %% Line 963
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <CD = {'cd_file_header',_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25},FileName,_X_FileComment,_X_BExtraField,Acc> when %% Line 964
																		    ( 'true'
																		      -| ['compiler_generated'] ) ->
	      do  %% Line 965
		  apply 'print_file_name'/1
		      (FileName)
		  %% Line 966
		  Acc
	  %% Line 967
	  <EOCD = {'eocd',_26,_27,_28,_29,_30,_31,_32},X,Comment,Y,Acc> when ( 'true'
									       -| ['compiler_generated'] ) ->
	      %% Line 968
	      apply 'raw_long_print_info_etc'/5
		  (EOCD, X, Comment, Y, Acc)
	  ( <_9,_8,_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6,_5})
		  -| [{'function_name',{'raw_short_print_info_etc',5}}] )
	    -| ['compiler_generated'] )
	end
'print_file_name'/1 =
    %% Line 970
    fun (_0) ->
	%% Line 971
	call 'io':'format'
	    ([126|[116|[115|[10]]]], [_0|[]])
'raw_long_print_info_etc'/5 =
    %% Line 975
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <{'cd_file_header',_11,_12,_13,_14,%% Line 978
					     LMTime,%% Line 977
						    LMDate,_15,CompSize,%% Line 976
									UncompSize,_16,_17,_18,_19,_20,_21,_22},%% Line 979
														FileName,%% Line 979
															 FileComment,%% Line 979
																     _X_BExtraField,%% Line 979
																		    Acc> when 'true' ->
	      let <MTime> =
		  apply %% Line 980
			'dos_date_time_to_datetime'/2
		      (%% Line 980
		       LMDate, %% Line 980
			       LMTime)
	      in  do  %% Line 981
		      apply 'print_header'/5
			  (CompSize, MTime, UncompSize, FileName, FileComment)
		      %% Line 982
		      Acc
	  %% Line 983
	  <EOCD = {'eocd',_23,_24,_25,_26,_27,_28,_29},_30,Comment,_31,Acc> when ( 'true'
										   -| ['compiler_generated'] ) ->
	      do  %% Line 984
		  apply 'print_comment'/1
		      (Comment)
		  %% Line 985
		  Acc
	  ( <_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8,_7,_6})
		  -| [{'function_name',{'raw_long_print_info_etc',5}}] )
	    -| ['compiler_generated'] )
	end
'print_header'/5 =
    %% Line 987
    fun (_0,_1,_2,_3,_4) ->
	let <_5> =
	    apply %% Line 989
		  'time_to_string'/1
		(_1)
	in  let <_6> =
		apply %% Line 990
		      'get_percent'/2
		    (_0, _2)
	    in  %% Line 988
		call 'io':'format'
		    ([126|[56|[119|[32|[126|[115|[32|[126|[56|[119|[32|[126|[50|[119|[37|[32|[126|[116|[115|[32|[126|[116|[115|[10]]]]]]]]]]]]]]]]]]]]]]]], %% Line 989
																			    [_0|[_5|[_2|%% Line 990
																					[_6|[_3|[_4|[]]]]]]])
'print_comment'/1 =
    %% Line 992
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      %% Line 993
	      'ok'
	  %% Line 994
	  <Comment> when 'true' ->
	      %% Line 995
	      call 'io':'format'
		  ([65|[114|[99|[104|[105|[118|[101|[32|[99|[111|[109|[109|[101|[110|[116|[58|[32|[126|[116|[115|[10]]]]]]]]]]]]]]]]]]]]], [Comment|[]])
	end
'get_percent'/2 =
    %% Line 997
    fun (_0,_1) ->
	case <_0,_1> of
	  <_6,0> when 'true' ->
	      100
	  %% Line 998
	  <CompSize,Size> when 'true' ->
	      let <_2> =
		  call 'erlang':'*'
		      (CompSize, 100)
	      in  let <_3> =
		      call 'erlang':'/'
			  (_2, Size)
		  in  call 'erlang':'round'
			  (_3)
	end
'time_to_string'/1 =
    %% Line 1001
    fun (_0) ->
	case _0 of
	  <{{Y,Mon,Day},{H,Min,_5}}> when 'true' ->
	      let <_1> =
		  apply %% Line 1003
			'month'/1
		      (%% Line 1003
		       Mon)
	      in  let <_2> =
		      apply %% Line 1003
			    'two_d'/1
			  (%% Line 1003
			   H)
		  in  let <_3> =
			  apply %% Line 1003
				'two_d'/1
			      (%% Line 1003
			       Min)
		      in  %% Line 1002
			  call 'io_lib':'format'
			      ([126|[115|[32|[126|[50|[119|[32|[126|[115|[58|[126|[115|[32|[126|[119]]]]]]]]]]]]]]], %% Line 1003
														     [_1|[Day|[_2|[_3|[Y|[]]]]]])
	  ( <_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4})
		  -| [{'function_name',{'time_to_string',1}}] )
	    -| ['compiler_generated'] )
	end
'two_d'/1 =
    %% Line 1005
    fun (_0) ->
	let <_1> =
	    call %% Line 1006
		 'erlang':%% Line 1006
			  '+'
		(_0, %% Line 1006
		     100)
	in  let <_2> =
		call %% Line 1006
		     'erlang':%% Line 1006
			      'integer_to_list'
		    (_1)
	    in  %% Line 1006
		call 'erlang':'tl'
		    (_2)
'month'/1 =
    %% Line 1008
    fun (_0) ->
	case _0 of
	  <1> when 'true' ->
	      [74|[97|[110]]]
	  %% Line 1009
	  <2> when 'true' ->
	      [70|[101|[98]]]
	  %% Line 1010
	  <3> when 'true' ->
	      [77|[97|[114]]]
	  %% Line 1011
	  <4> when 'true' ->
	      [65|[112|[114]]]
	  %% Line 1012
	  <5> when 'true' ->
	      [77|[97|[121]]]
	  %% Line 1013
	  <6> when 'true' ->
	      [74|[117|[110]]]
	  %% Line 1014
	  <7> when 'true' ->
	      [74|[117|[108]]]
	  %% Line 1015
	  <8> when 'true' ->
	      [65|[117|[103]]]
	  %% Line 1016
	  <9> when 'true' ->
	      [83|[101|[112]]]
	  %% Line 1017
	  <10> when 'true' ->
	      [79|[99|[116]]]
	  %% Line 1018
	  <11> when 'true' ->
	      [78|[111|[118]]]
	  %% Line 1019
	  <12> when 'true' ->
	      [68|[101|[99]]]
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'month',1}}] )
	    -| ['compiler_generated'] )
	end
'cd_file_header_from_lh_and_pos'/2 =
    %% Line 1022
    fun (_0,_1) ->
	%% Line 1032
	case _0 of
	  <{'local_file_header',VersionNeeded,GPFlag,CompMethod,LastModTime,LastModDate,CRC32,CompSize,UncompSize,FileNameLength,ExtraFieldLength}> when 'true' ->
	      %% Line 1033
	      {'cd_file_header',788,%% Line 1034
				    VersionNeeded,%% Line 1035
						  GPFlag,%% Line 1036
							 CompMethod,%% Line 1037
								    LastModTime,%% Line 1038
										LastModDate,%% Line 1039
											    CRC32,%% Line 1040
												  CompSize,%% Line 1041
													   UncompSize,%% Line 1042
														      FileNameLength,%% Line 1043
																     ExtraFieldLength,%% Line 1044
																		      0,%% Line 1045
																			0,%% Line 1046
																			  0,%% Line 1047
																			    27525120,_1}
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_2})
	    -| ['compiler_generated'] )
	end
'cd_file_header_to_bin'/1 =
    %% Line 1050
    fun (_0) ->
	case _0 of
	  <%% Line 1051
	   {'cd_file_header',VersionMadeBy,%% Line 1052
					   VersionNeeded,%% Line 1053
							 GPFlag,%% Line 1054
								CompMethod,%% Line 1055
									   LastModTime,%% Line 1056
										       LastModDate,%% Line 1057
												   CRC32,%% Line 1058
													 CompSize,%% Line 1059
														  UncompSize,%% Line 1060
															     FileNameLength,%% Line 1061
																	    ExtraFieldLength,%% Line 1062
																			     FileCommentLength,%% Line 1063
																					       DiskNumStart,%% Line 1064
																							    InternalAttr,%% Line 1065
																									 ExternalAttr,%% Line 1066
																										      LocalHeaderOffset}> when 'true' ->
	      %% Line 1067
	      #{#<VersionMadeBy>(16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1068
		  VersionNeeded>(%% Line 1068
				 16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1069
		  GPFlag>(%% Line 1069
			  16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1070
		  CompMethod>(%% Line 1070
			      16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1071
		  LastModTime>(%% Line 1071
			       16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1072
		  LastModDate>(%% Line 1072
			       16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1073
		  CRC32>(%% Line 1073
			 32,1,'integer',['unsigned'|['little']]),
		#<%% Line 1074
		  CompSize>(%% Line 1074
			    32,1,'integer',['unsigned'|['little']]),
		#<%% Line 1075
		  UncompSize>(%% Line 1075
			      32,1,'integer',['unsigned'|['little']]),
		#<%% Line 1076
		  FileNameLength>(%% Line 1076
				  16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1077
		  ExtraFieldLength>(%% Line 1077
				    16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1078
		  FileCommentLength>(%% Line 1078
				     16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1079
		  DiskNumStart>(%% Line 1079
				16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1080
		  InternalAttr>(%% Line 1080
				16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1081
		  ExternalAttr>(%% Line 1081
				32,1,'integer',['unsigned'|['little']]),
		#<%% Line 1082
		  LocalHeaderOffset>(%% Line 1082
				     32,1,'integer',['unsigned'|['little']])}#
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'cd_file_header_to_bin',1}}] )
	    -| ['compiler_generated'] )
	end
'local_file_header_to_bin'/1 =
    %% Line 1084
    fun (_0) ->
	case _0 of
	  <%% Line 1085
	   {'local_file_header',VersionNeeded,%% Line 1086
					      GPFlag,%% Line 1087
						     CompMethod,%% Line 1088
								LastModTime,%% Line 1089
									    LastModDate,%% Line 1090
											CRC32,%% Line 1091
											      CompSize,%% Line 1092
												       UncompSize,%% Line 1093
														  FileNameLength,%% Line 1094
																 ExtraFieldLength}> when 'true' ->
	      %% Line 1095
	      #{#<VersionNeeded>(16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1096
		  GPFlag>(%% Line 1096
			  16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1097
		  CompMethod>(%% Line 1097
			      16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1098
		  LastModTime>(%% Line 1098
			       16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1099
		  LastModDate>(%% Line 1099
			       16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1100
		  CRC32>(%% Line 1100
			 32,1,'integer',['unsigned'|['little']]),
		#<%% Line 1101
		  CompSize>(%% Line 1101
			    32,1,'integer',['unsigned'|['little']]),
		#<%% Line 1102
		  UncompSize>(%% Line 1102
			      32,1,'integer',['unsigned'|['little']]),
		#<%% Line 1103
		  FileNameLength>(%% Line 1103
				  16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1104
		  ExtraFieldLength>(%% Line 1104
				    16,1,'integer',['unsigned'|['little']])}#
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'local_file_header_to_bin',1}}] )
	    -| ['compiler_generated'] )
	end
'eocd_to_bin'/1 =
    %% Line 1106
    fun (_0) ->
	case _0 of
	  <{'eocd',DiskNum,%% Line 1107
			   StartDiskNum,%% Line 1108
					EntriesOnDisk,%% Line 1109
						      Entries,%% Line 1110
							      Size,%% Line 1111
								   Offset,%% Line 1112
									  ZipCommentLength}> when 'true' ->
	      %% Line 1113
	      #{#<DiskNum>(16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1114
		  StartDiskNum>(%% Line 1114
				16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1115
		  EntriesOnDisk>(%% Line 1115
				 16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1116
		  Entries>(%% Line 1116
			   16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1117
		  Size>(%% Line 1117
			32,1,'integer',['unsigned'|['little']]),
		#<%% Line 1118
		  Offset>(%% Line 1118
			  32,1,'integer',['unsigned'|['little']]),
		#<%% Line 1119
		  ZipCommentLength>(%% Line 1119
				    16,1,'integer',['unsigned'|['little']])}#
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'eocd_to_bin',1}}] )
	    -| ['compiler_generated'] )
	end
'local_file_header_from_info_method_name'/5 =
    %% Line 1122
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <{'file_info',_14,_15,_16,_17,MTime,_18,_19,_20,_21,_22,_23,_24,_25},%% Line 1123
									       UncompSize,%% Line 1124
											  CompMethod,%% Line 1124
												     Name,%% Line 1124
													  GPFlag> when 'true' ->
	      %% Line 1125
	      case apply 'dos_date_time_from_datetime'/1
		       (MTime) of
		<{ModDate,ModTime}> when 'true' ->
		    let <_6> =
			call %% Line 1134
			     'erlang':%% Line 1134
				      'length'
			    (%% Line 1134
			     Name)
		    in  %% Line 1126
			{'local_file_header',20,%% Line 1127
						GPFlag,%% Line 1128
						       CompMethod,%% Line 1129
								  ModTime,%% Line 1130
									  ModDate,%% Line 1131
										  -1,%% Line 1132
										     -1,%% Line 1133
											UncompSize,_6,%% Line 1135
												      0}
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_5})
		  -| ['compiler_generated'] )
	      end
	  ( <_13,_12,_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12,_11,_10,_9})
		  -| [{'function_name',{'local_file_header_from_info_method_name',5}}] )
	    -| ['compiler_generated'] )
	end
'server_init'/1 =
    %% Line 1137
    fun (_0) ->
	do  %% Line 1139
	    call 'erlang':'process_flag'
		('trap_exit', 'true')
	    %% Line 1140
	    apply 'server_loop'/2
		(_0, 'not_open')
'server_loop'/2 =
    %% Line 1143
    fun (_0,_1) ->
	%% Line 1144
	receive
	  %% Line 1145
	  <{From,{'open',Archive,Options}}> when 'true' ->
	      %% Line 1146
	      case apply 'openzip_open'/2
		       (Archive, Options) of
		%% Line 1147
		<{'ok',NewOpenZip}> when 'true' ->
		    let <_3> =
			call %% Line 1148
			     'erlang':%% Line 1148
				      'self'
			    ()
		    in  let <_2> =
			    call %% Line 1148
				 'erlang':%% Line 1148
					  'self'
				()
			in  do  %% Line 1148
				call 'erlang':'!'
				    (From, {_3,{'ok',_2}})
				%% Line 1149
				apply 'server_loop'/2
				    (_0, NewOpenZip)
		%% Line 1150
		<Error> when 'true' ->
		    let <_4> =
			call %% Line 1151
			     'erlang':%% Line 1151
				      'self'
			    ()
		    in  %% Line 1151
			call 'erlang':'!'
			    (From, {_4,Error})
	      end
	  %% Line 1153
	  <{From,'close'}> when 'true' ->
	      let <_7> =
		  call %% Line 1154
		       'erlang':%% Line 1154
				'self'
		      ()
	      in  let <_6> =
		      apply %% Line 1154
			    'openzip_close'/1
			  (_1)
		  in  %% Line 1154
		      call 'erlang':'!'
			  (From, {_7,_6})
	  %% Line 1155
	  <{From,'get'}> when 'true' ->
	      let <_9> =
		  call %% Line 1156
		       'erlang':%% Line 1156
				'self'
		      ()
	      in  let <_8> =
		      apply %% Line 1156
			    'openzip_get'/1
			  (_1)
		  in  do  %% Line 1156
			  call 'erlang':'!'
			      (From, {_9,_8})
			  %% Line 1157
			  apply 'server_loop'/2
			      (_0, _1)
	  %% Line 1158
	  <{From,{'get',FileName}}> when 'true' ->
	      let <_11> =
		  call %% Line 1159
		       'erlang':%% Line 1159
				'self'
		      ()
	      in  let <_10> =
		      apply %% Line 1159
			    'openzip_get'/2
			  (%% Line 1159
			   FileName, _1)
		  in  do  %% Line 1159
			  call 'erlang':'!'
			      (From, {_11,_10})
			  %% Line 1160
			  apply 'server_loop'/2
			      (_0, _1)
	  %% Line 1161
	  <{From,'list_dir'}> when 'true' ->
	      let <_13> =
		  call %% Line 1162
		       'erlang':%% Line 1162
				'self'
		      ()
	      in  let <_12> =
		      apply %% Line 1162
			    'openzip_list_dir'/1
			  (_1)
		  in  do  %% Line 1162
			  call 'erlang':'!'
			      (From, {_13,_12})
			  %% Line 1163
			  apply 'server_loop'/2
			      (_0, _1)
	  %% Line 1164
	  <{From,{'list_dir',Opts}}> when 'true' ->
	      let <_15> =
		  call %% Line 1165
		       'erlang':%% Line 1165
				'self'
		      ()
	      in  let <_14> =
		      apply %% Line 1165
			    'openzip_list_dir'/2
			  (_1, %% Line 1165
			       Opts)
		  in  do  %% Line 1165
			  call 'erlang':'!'
			      (From, {_15,_14})
			  %% Line 1166
			  apply 'server_loop'/2
			      (_0, _1)
	  %% Line 1167
	  <{From,'get_state'}> when 'true' ->
	      let <_16> =
		  call %% Line 1168
		       'erlang':%% Line 1168
				'self'
		      ()
	      in  do  %% Line 1168
		      call 'erlang':'!'
			  (From, {_16,_1})
		      %% Line 1169
		      apply 'server_loop'/2
			  (_0, _1)
	  %% Line 1170
	  <{'EXIT',_20,Reason}>
	      when call 'erlang':'=:='
		    (_20,
		     _0) ->
	      do  %% Line 1171
		  apply 'openzip_close'/1
		      (_1)
		  %% Line 1172
		  call 'erlang':'exit'
		      ({'parent_died',Reason})
	  %% Line 1173
	  <_21> when 'true' ->
	      %% Line 1174
	      {'error','bad_msg'}
	after 'infinity' ->
	  'true'
'zip_open'/1 =
    %% Line 1182
    fun (_0) ->
	apply 'zip_open'/2
	    (_0, [])
'zip_open'/2 =
    %% Line 1191
    fun (_0,_1) ->
	let <Self> =
	    call %% Line 1192
		 'erlang':%% Line 1192
			  'self'
		()
	in  let <_3> =
		fun () ->
		    %% Line 1193
		    apply 'server_init'/1
			(Self)
	    in  let <Pid> =
		    call %% Line 1193
			 'erlang':%% Line 1193
				  'spawn_link'
			(_3)
		in  %% Line 1194
		    apply 'request'/3
			(Self, Pid, {'open',_0,_1})
'zip_get'/1 =
    %% Line 1201
    fun (_0) ->
	case _0 of
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_0) ->
	      let <_1> =
		  call %% Line 1202
		       'erlang':%% Line 1202
				'self'
		      ()
	      in  %% Line 1202
		  apply 'request'/3
		      (_1, Pid, 'get')
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'zip_get',1}}] )
	    -| ['compiler_generated'] )
	end
'zip_close'/1 =
    %% Line 1207
    fun (_0) ->
	case _0 of
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_0) ->
	      let <_1> =
		  call %% Line 1208
		       'erlang':%% Line 1208
				'self'
		      ()
	      in  %% Line 1208
		  apply 'request'/3
		      (_1, Pid, 'close')
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'zip_close',1}}] )
	    -| ['compiler_generated'] )
	end
'zip_get'/2 =
    %% Line 1216
    fun (_0,_1) ->
	case <_0,_1> of
	  <FileName,Pid>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      let <_2> =
		  call %% Line 1217
		       'erlang':%% Line 1217
				'self'
		      ()
	      in  %% Line 1217
		  apply 'request'/3
		      (_2, Pid, {'get',FileName})
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'zip_get',2}}] )
	    -| ['compiler_generated'] )
	end
'zip_list_dir'/1 =
    %% Line 1224
    fun (_0) ->
	case _0 of
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_0) ->
	      let <_1> =
		  call %% Line 1225
		       'erlang':%% Line 1225
				'self'
		      ()
	      in  %% Line 1225
		  apply 'request'/3
		      (_1, Pid, 'list_dir')
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'zip_list_dir',1}}] )
	    -| ['compiler_generated'] )
	end
'zip_list_dir'/2 =
    %% Line 1227
    fun (_0,_1) ->
	case <_0,_1> of
	  <Pid,Opts>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      let <_2> =
		  call %% Line 1228
		       'erlang':%% Line 1228
				'self'
		      ()
	      in  %% Line 1228
		  apply 'request'/3
		      (_2, Pid, {'list_dir',Opts})
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'zip_list_dir',2}}] )
	    -| ['compiler_generated'] )
	end
'zip_get_state'/1 =
    %% Line 1230
    fun (_0) ->
	case _0 of
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_0) ->
	      let <_1> =
		  call %% Line 1231
		       'erlang':%% Line 1231
				'self'
		      ()
	      in  %% Line 1231
		  apply 'request'/3
		      (_1, Pid, 'get_state')
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'zip_get_state',1}}] )
	    -| ['compiler_generated'] )
	end
'request'/3 =
    %% Line 1233
    fun (_0,_1,_2) ->
	do  %% Line 1234
	    call 'erlang':'!'
		(_1, {_0,_2})
	    %% Line 1235
	    receive
	      %% Line 1236
	      <{_6,R}>
		  when call 'erlang':'=:='
			(_6,
			 _1) ->
		  R
	    after 'infinity' ->
	      'true'
'zip_t'/1 =
    %% Line 1239
    fun (_0) ->
	case _0 of
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_0) ->
	      let <_1> =
		  call %% Line 1240
		       'erlang':%% Line 1240
				'self'
		      ()
	      in  let <Openzip> =
		      apply %% Line 1240
			    'request'/3
			  (_1, %% Line 1240
			       Pid, %% Line 1240
				    'get_state')
		  in  %% Line 1241
		      apply 'openzip_t'/1
			  (Openzip)
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'zip_t',1}}] )
	    -| ['compiler_generated'] )
	end
'zip_tt'/1 =
    %% Line 1243
    fun (_0) ->
	case _0 of
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_0) ->
	      let <_1> =
		  call %% Line 1244
		       'erlang':%% Line 1244
				'self'
		      ()
	      in  let <Openzip> =
		      apply %% Line 1244
			    'request'/3
			  (_1, %% Line 1244
			       Pid, %% Line 1244
				    'get_state')
		  in  %% Line 1245
		      apply 'openzip_tt'/1
			  (Openzip)
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'zip_tt',1}}] )
	    -| ['compiler_generated'] )
	end
'openzip_tt'/1 =
    %% Line 1247
    fun (_0) ->
	case _0 of
	  <{'openzip',ZipComment,Files,_6,_7,_8,_9,_10}> when 'true' ->
	      do  %% Line 1248
		  apply 'print_comment'/1
		      (ZipComment)
		  let <_4> =
		      fun (_2) ->
			  %% Line 1249
			  case _2 of
			    <{{'zip_file',%% Line 1250
					  FileName,%% Line 1252
						   FI,%% Line 1251
						      FileComment,_11,CompSize},_12}> when 'true' ->
				%% Line 1253
				case FI of
				  <{'file_info',UncompSize,_13,_14,_15,MTime,_16,_17,_18,_19,_20,_21,_22,_23}> when 'true' ->
				      %% Line 1254
				      apply 'print_header'/5
					  (CompSize, MTime, UncompSize, %% Line 1255
									FileName, %% Line 1255
										  FileComment)
				  ( <_1> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_1})
				    -| ['compiler_generated'] )
				end
			    ( <_3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_3})
				    -| [{'function_name',{'-openzip_tt/1-fun-0-',1}}] )
			      -| ['compiler_generated'] )
			  end
		  in  do  %% Line 1249
			  apply 'lists_foreach'/2
			      (_4, %% Line 1256
				   Files)
			  %% Line 1257
			  'ok'
	  ( <_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5})
		  -| [{'function_name',{'openzip_tt',1}}] )
	    -| ['compiler_generated'] )
	end
'openzip_t'/1 =
    %% Line 1259
    fun (_0) ->
	case _0 of
	  <{'openzip',ZipComment,Files,_5,_6,_7,_8,_9}> when 'true' ->
	      do  %% Line 1260
		  apply 'print_comment'/1
		      (ZipComment)
		  let <_3> =
		      fun (_1) ->
			  %% Line 1261
			  case _1 of
			    <{{'zip_file',FileName,_10,_11,_12,_13},_14}> when 'true' ->
				%% Line 1262
				apply 'print_file_name'/1
				    (FileName)
			    ( <_2> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_2})
				    -| [{'function_name',{'-openzip_t/1-fun-0-',1}}] )
			      -| ['compiler_generated'] )
			  end
		  in  do  %% Line 1261
			  apply 'lists_foreach'/2
			      (_3, %% Line 1263
				   Files)
			  %% Line 1264
			  'ok'
	  ( <_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4})
		  -| [{'function_name',{'openzip_t',1}}] )
	    -| ['compiler_generated'] )
	end
'lists_foreach'/2 =
    %% Line 1266
    fun (_0,_1) ->
	case <_0,_1> of
	  <_4,[]> when 'true' ->
	      %% Line 1267
	      'ok'
	  %% Line 1268
	  <F,[Hd|Tl]> when 'true' ->
	      do  %% Line 1269
		  apply F
		      (Hd)
		  %% Line 1270
		  apply 'lists_foreach'/2
		      (F, Tl)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'lists_foreach',2}}] )
	    -| ['compiler_generated'] )
	end
'get_openzip_opt'/2 =
    %% Line 1273
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],Opts> when 'true' ->
	      %% Line 1274
	      Opts
	  %% Line 1275
	  <['cooked'|Rest],Opts = {'openzip_opts',_16,OO,_17}> when 'true' ->
	      let <_rec38> =
		  call %% Line 1276
		       'erlang':%% Line 1276
				'--'
		      (%% Line 1276
		       OO, %% Line 1276
			   ['raw'])
	      in  %% Line 1276
		  case Opts of
		    <{'openzip_opts',_18,_19,_20}> when 'true' ->
			let <_5> =
			    call 'erlang':'setelement'
				(3, Opts, _rec38)
			in  apply 'get_openzip_opt'/2
				(Rest, _5)
		    ( <_21> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','openzip_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1277
	  <['memory'|Rest],Opts> when 'true' ->
	      let <_6> = 'binary_io'/2
	      in  %% Line 1278
		  case Opts of
		    <{'openzip_opts',_22,_23,_24}> when 'true' ->
			let <_10> =
			    call 'erlang':'setelement'
				(2, Opts, _6)
			in  apply 'get_openzip_opt'/2
				(Rest, _10)
		    ( <_25> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','openzip_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1279
	  <[{'cwd',CWD}|Rest],Opts> when 'true' ->
	      %% Line 1280
	      case Opts of
		<{'openzip_opts',_26,_27,_28}> when 'true' ->
		    let <_13> =
			call 'erlang':'setelement'
			    (4, Opts, CWD)
		    in  apply 'get_openzip_opt'/2
			    (Rest, _13)
		( <_29> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','openzip_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1281
	  <[Unknown|_X_Rest],_X_Opts> when 'true' ->
	      %% Line 1282
	      call 'erlang':'throw'
		  ({'bad_option',Unknown})
	  ( <_15,_14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_15,_14})
		  -| [{'function_name',{'get_openzip_opt',2}}] )
	    -| ['compiler_generated'] )
	end
'get_central_dir'/3 =
    %% Line 1285
    fun (_0,_1,_2) ->
	%% Line 1286
	case apply 'get_end_of_central_dir'/3
		 (_0, 22, _2) of
	  <{B,In1}> when 'true' ->
	      %% Line 1287
	      case apply 'eocd_and_comment_from_bin'/1
		       (B) of
		<{EOCD,BComment}> when 'true' ->
		    %% Line 1288
		    ( case EOCD of
			( <( {'eocd',_24,_25,_26,_27,_28,_rec43,_29}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <In2> =
				  apply _2
				      ({'seek','bof',_rec43}, In1)
			      in  %% Line 1289
				  ( case EOCD of
				      ( <( {'eocd',_31,_32,_33,_rec44,_34,_35,_36}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <Comment> =
						apply %% Line 1292
						      'heuristic_to_string'/1
						    (%% Line 1292
						     BComment)
					    in  let <Out0> =
						    apply _1
							(%% Line 1293
							 EOCD, %% Line 1293
							       [], %% Line 1293
								   Comment, %% Line 1293
									    #{}#, %% Line 1290
										  [])
						in  %% Line 1294
						    apply 'get_cd_loop'/5
							(_rec44, In2, _1, _2, Out0)
					-| ['compiler_generated'] )
				      ( <_37> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','eocd'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			( <_30> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','eocd'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_11> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_11})
		  -| ['compiler_generated'] )
	      end
	  ( <_10> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_10})
	    -| ['compiler_generated'] )
	end
'get_cd_loop'/5 =
    %% Line 1296
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <0,In,_X_RawIterator,_X_Input,Acc> when 'true' ->
	      let <_5> =
		  call %% Line 1297
		       'lists':%% Line 1297
			       'reverse'
		      (%% Line 1297
		       Acc)
	      in  %% Line 1297
		  {_5,In}
	  %% Line 1298
	  <N,In0,RawIterator,Input,Acc0> when 'true' ->
	      %% Line 1299
	      case apply Input
		       ({'read',46}, In0) of
		<{B,In1}> when 'true' ->
		    %% Line 1300
		    case B of
		      %% Line 1301
		      <#{#<33639248>(32,1,'integer',['unsigned'|['little']]),
			 #<XBCD>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			  let <CD> =
			      apply %% Line 1304
				    'cd_file_header_from_bin'/1
				  (XBCD)
			  in  %% Line 1305
			      ( case CD of
				  ( <( {'cd_file_header',_51,_52,_53,_54,_55,_56,_57,_58,_59,_rec45,_60,_61,_62,_63,_64,_65}
				       -| ['compiler_generated'] )> when 'true' ->
					%% Line 1306
					( case CD of
					    ( <( {'cd_file_header',_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_rec46,_77,_78,_79,_80,_81}
						 -| ['compiler_generated'] )> when 'true' ->
						  %% Line 1307
						  ( case CD of
						      ( <( {'cd_file_header',_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_rec47,_94,_95,_96,_97}
							   -| ['compiler_generated'] )> when 'true' ->
							    let <_36> =
								call %% Line 1308
								     'erlang':%% Line 1308
									      '+'
								    (_rec45, _rec46)
							    in  let <ToRead> =
								    call %% Line 1308
									 'erlang':%% Line 1308
										  '+'
									(_36, _rec47)
								in  %% Line 1309
								    ( case CD of
									( <( {'cd_file_header',_99,_100,_rec48,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113}
									     -| ['compiler_generated'] )> when 'true' ->
									      %% Line 1310
									      case apply Input
										       ({'read',ToRead}, In1) of
										<{B2,In2}> when 'true' ->
										    %% Line 1311
										    case %% Line 1312
											 apply 'get_name_extra_comment'/5
											     (B2, _rec45, _rec46, _rec47, _rec48) of
										      <{FileName,Comment,BExtra}> when 'true' ->
											  let <Acc1> =
											      apply %% Line 1313
												    RawIterator
												  (%% Line 1313
												   CD, %% Line 1313
												       FileName, %% Line 1313
														 Comment, %% Line 1313
															  BExtra, %% Line 1313
																  Acc0)
											  in  let <_44> =
												  call %% Line 1314
												       'erlang':%% Line 1314
														'-'
												      (%% Line 1314
												       N, %% Line 1314
													  1)
											      in  %% Line 1314
												  apply 'get_cd_loop'/5
												      (_44, In2, RawIterator, Input, Acc1)
										      ( <_42> when 'true' ->
											    primop 'match_fail'
												({'badmatch',_42})
											-| ['compiler_generated'] )
										    end
										( <_41> when 'true' ->
										      primop 'match_fail'
											  ({'badmatch',_41})
										  -| ['compiler_generated'] )
									      end
									  -| ['compiler_generated'] )
									( <_114> when 'true' ->
									      ( call ( 'erlang'
										       -| ['compiler_generated'] ):( 'error'
														     -| ['compiler_generated'] )
										    (( {'badrecord','cd_file_header'}
										       -| ['compiler_generated'] ))
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								      end
								      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						      ( <_98> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','cd_file_header'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_82> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','cd_file_header'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <_66> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','cd_file_header'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
		      %% Line 1302
		      <_50> when 'true' ->
			  call 'erlang':'throw'
			      ('bad_central_directory')
		    end
		( <_22> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_22})
		  -| ['compiler_generated'] )
	      end
	end
'get_name_extra_comment'/5 =
    %% Line 1316
    fun (_0,_1,_2,_3,_4) ->
	%% Line 1317
	try
	    %% Line 1320
	    case _0 of
	      <#{#<BFileName>(_1,8,'binary',['unsigned'|['big']]),
		 #<BExtra>(_2,8,'binary',['unsigned'|['big']]),
		 #<BComment>(_3,8,'binary',['unsigned'|['big']])}#> when 'true' ->
		  let <_7> =
		      apply %% Line 1321
			    'binary_to_chars'/2
			  (%% Line 1321
			   BFileName, _4)
		  in  let <_6> =
			  apply %% Line 1330
				'heuristic_to_string'/1
			      (%% Line 1330
			       BComment)
		      in  %% Line 1321
			  {_7,_6,%% Line 1331
				 BExtra}
	      ( <_5> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_5})
		-| ['compiler_generated'] )
	    end
	of <_8> ->
	    _8
	catch <_11,_10,_9> ->
	    %% Line 1334
	    call 'erlang':'throw'
		('bad_central_directory')
'get_end_of_central_dir'/3 =
    %% Line 1340
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <_X_In,Sz,_X_Input>
	      when call 'erlang':'>'
		    (Sz,
		     65535) ->
	      %% Line 1341
	      call 'erlang':'throw'
		  ('bad_eocd')
	  %% Line 1342
	  <In0,Sz,Input> when 'true' ->
	      let <_3> =
		  call %% Line 1343
		       'erlang':%% Line 1343
				'-'
		      (%% Line 1343
		       Sz)
	      in  let <In1> =
		      apply %% Line 1343
			    Input
			  (%% Line 1343
			   {'seek','eof',_3}, %% Line 1343
					      In0)
		  in  %% Line 1344
		      case apply Input
			       ({'read',Sz}, In1) of
			<{B,In2}> when 'true' ->
			    %% Line 1345
			    case apply 'find_eocd_header'/1
				     (B) of
			      %% Line 1346
			      <'none'> when 'true' ->
				  let <_6> =
				      call %% Line 1347
					   'erlang':%% Line 1347
						    '+'
					  (%% Line 1347
					   Sz, %% Line 1347
					       Sz)
				  in  %% Line 1347
				      apply 'get_end_of_central_dir'/3
					  (In2, _6, Input)
			      %% Line 1348
			      <Header> when 'true' ->
				  %% Line 1349
				  {Header,In2}
			    end
			( <_5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_5})
			  -| ['compiler_generated'] )
		      end
	end
'find_eocd_header'/1 =
    %% Line 1353
    fun (_0) ->
	case _0 of
	  <#{#<101010256>(32,1,'integer',['unsigned'|['little']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1354
	      Rest
	  %% Line 1355
	  <#{#<_11>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#>
	      when %% Line 1356
		try
		    let <_9> =
			call 'erlang':'byte_size'
			    (Rest)
		    in  call 'erlang':'>'
			    (_9, 18)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1357
	      apply 'find_eocd_header'/1
		  (Rest)
	  %% Line 1358
	  <_12> when 'true' ->
	      %% Line 1359
	      'none'
	end
'raw_file_info_etc'/5 =
    %% Line 1364
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <CD = {'cd_file_header',_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27},FileName,FileComment,BExtraField,Acc> when %% Line 1365
																	      ( 'true'
																		-| ['compiler_generated'] ) ->
	      %% Line 1368
	      case CD of
		<{'cd_file_header',_28,_29,_30,_31,_32,_33,CRC,CompSize,_34,_35,_36,_37,_38,_39,_40,Offset}> when 'true' ->
		    let <FileInfo> =
			apply %% Line 1369
			      'cd_file_header_to_file_info'/3
			    (%% Line 1369
			     FileName, %% Line 1369
				       CD, %% Line 1369
					   BExtraField)
		    in  %% Line 1370
			[{{'zip_file',FileName,FileInfo,FileComment,%% Line 1371
								    Offset,%% Line 1371
									   CompSize},%% Line 1371
										     {'zip_file_extra',CRC}}|%% Line 1371
													     Acc]
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1372
	  <EOCD = {'eocd',_41,_42,_43,_44,_45,_46,_47},_48,Comment,_49,Acc> when ( 'true'
										   -| ['compiler_generated'] ) ->
	      %% Line 1373
	      [{'zip_comment',Comment}|Acc]
	  ( <_11,_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8,_7})
		  -| [{'function_name',{'raw_file_info_etc',5}}] )
	    -| ['compiler_generated'] )
	end
'raw_file_info_public'/5 =
    %% Line 1376
    fun (_0,_1,_2,_3,_4) ->
	%% Line 1377
	case apply 'raw_file_info_etc'/5
		 (_0, _1, _2, _3, _4) of
	  <[H1|T]> when 'true' ->
	      let <_7> =
		  case %% Line 1378
		       H1 of
		    %% Line 1379
		    <{ZF,Extra = {'zip_file_extra',_14}}> when ( 'true'
								 -| ['compiler_generated'] ) ->
			ZF
		    %% Line 1380
		    <Other> when 'true' ->
			Other
		  end
	      in  %% Line 1382
		  [_7|T]
	  ( <_5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_5})
	    -| ['compiler_generated'] )
	end
'cd_file_header_to_file_info'/3 =
    %% Line 1386
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <FileName,%% Line 1387
		    {'cd_file_header',_11,_12,_13,_14,%% Line 1388
						      ModTime,%% Line 1389
							      ModDate,_15,_16,UncompSize,_17,_18,_19,_20,_21,_22,_23},%% Line 1390
														      ExtraField> when 'true' ->
	      let <T> =
		  apply %% Line 1391
			'dos_date_time_to_datetime'/2
		      (%% Line 1391
		       ModDate, %% Line 1391
				ModTime)
	      in  let <_5> =
		      case %% Line 1393
			   call 'lists':'last'
			       (FileName) of
			%% Line 1394
			<47> when 'true' ->
			    'directory'
			%% Line 1395
			<_24> when 'true' ->
			    'regular'
		      end
		  in  let <FI> =
			  {%% Line 1397
			   'file_info',%% Line 1397
				       UncompSize,_5,%% Line 1399
						     'read_write',%% Line 1400
								  T,%% Line 1401
								    T,%% Line 1402
								      T,%% Line 1403
									54,%% Line 1404
									   1,%% Line 1405
									     0,%% Line 1406
									       0,%% Line 1407
										 0,%% Line 1408
										   0,%% Line 1409
										     0}
		      in  %% Line 1410
			  apply 'add_extra_info'/2
			      (FI, ExtraField)
	  ( <_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8})
		  -| [{'function_name',{'cd_file_header_to_file_info',3}}] )
	    -| ['compiler_generated'] )
	end
'add_extra_info'/2 =
    %% Line 1413
    fun (_0,_1) ->
	_0
'get_z_files'/5 =
    %% Line 1420
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <[],_X_Z,_X_In,_X_Opts,Acc> when 'true' ->
	      %% Line 1421
	      call 'lists':'reverse'
		  (Acc)
	  %% Line 1422
	  <[{'zip_comment',_15}|Rest],Z,In,Opts,Acc> when 'true' ->
	      %% Line 1423
	      apply 'get_z_files'/5
		  (Rest, Z, In, Opts, Acc)
	  %% Line 1424
	  <[ZFile = {{'zip_file',_16,_17,_18,Offset,_19},_20}|Rest],Z,In0,%% Line 1427
									  Opts = %% Line 1425
										 {'unzip_opts',Output,Input,%% Line 1426
													    Filter,OpO,%% Line 1426
														       FB,%% Line 1427
															  CWD},%% Line 1427
															       Acc0> when 'true' ->
	      %% Line 1428
	      case apply Filter
		       (ZFile) of
		%% Line 1429
		<'true'> when 'true' ->
		    let <In1> =
			apply %% Line 1430
			      Input
			    (%% Line 1430
			     {'seek','bof',Offset}, %% Line 1430
						    In0)
		    in  let <_23,_24> =
			    case %% Line 1432
				 apply 'get_z_file'/9
				     (In1, Z, Input, Output, OpO, FB, %% Line 1433
								      CWD, %% Line 1433
									   ZFile, %% Line 1433
										  Filter) of
			      %% Line 1434
			      <{'file',GZD,Inx}> when 'true' ->
				  <Inx,[GZD|Acc0]>
			      %% Line 1435
			      <{_21,Inx}> when 'true' ->
				  <Inx,Acc0>
			      ( <_6> when 'true' ->
				    %% Line 1432
				    primop 'match_fail'
					({'case_clause',_6})
				-| ['compiler_generated'] )
			    end
			in  %% Line 1437
			    apply 'get_z_files'/5
				(Rest, Z, ( _23
					    -| ['compiler_generated'] ), Opts, ( _24
										 -| ['compiler_generated'] ))
		%% Line 1438
		<_22> when 'true' ->
		    %% Line 1439
		    apply 'get_z_files'/5
			(Rest, Z, In0, Opts, Acc0)
	      end
	  ( <_14,_13,_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13,_12,_11,_10})
		  -| [{'function_name',{'get_z_files',5}}] )
	    -| ['compiler_generated'] )
	end
'get_z_file'/9 =
    %% Line 1443
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <In0,Z,Input,Output,OpO,FB,%% Line 1444
				     CWD,%% Line 1444
					 {ZipFile,Extra},%% Line 1444
							 Filter> when 'true' ->
	      %% Line 1445
	      case apply Input
		       ({'read',30}, In0) of
		%% Line 1446
		<_@r0 = {'eof',In1}> when 'true' ->
		    %% Line 1447
		    _@r0
		%% Line 1449
		<{#{#<67324752>(32,1,'integer',['unsigned'|['little']]),
		    #<B>('all',8,'binary',['unsigned'|['big']])}#,In1}> when 'true' ->
		    let <LH> =
			apply %% Line 1450
			      'local_file_header_from_bin'/1
			    (%% Line 1450
			     B)
		    in  %% Line 1454
			case LH of
			  <{'local_file_header',_58,GPFlag,CompMethod,_59,_60,_61,_62,_63,FileNameLen,ExtraLen}> when 'true' ->
			      let <_21> =
				  call %% Line 1456
				       'erlang':%% Line 1456
						'band'
				      (%% Line 1456
				       GPFlag, %% Line 1456
					       8)
			      in  let <_99,_100> =
				      case <> of
					%% Line 1457
					<>
					    when call 'erlang':'=:='
						  (_21,
						   8) ->
					    ( case ZipFile of
						( <( {'zip_file',_64,_65,_66,_67,_rec49}
						     -| ['compiler_generated'] )> when 'true' ->
						      %% Line 1458
						      ( case Extra of
							  ( <( {'zip_file_extra',_rec50}
							       -| ['compiler_generated'] )> when 'true' ->
								<_rec49,_rec50>
							    -| ['compiler_generated'] )
							  ( <_69> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','zip_file_extra'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <_68> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','zip_file'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					%% Line 1459
					<> when 'true' ->
					    ( case LH of
						( <( {'local_file_header',_70,_71,_72,_73,_74,_75,_rec51,_76,_77,_78}
						     -| ['compiler_generated'] )> when 'true' ->
						      %% Line 1460
						      ( case LH of
							  ( <( {'local_file_header',_80,_81,_82,_83,_84,_rec52,_85,_86,_87,_88}
							       -| ['compiler_generated'] )> when 'true' ->
								<_rec51,_rec52>
							    -| ['compiler_generated'] )
							  ( <_89> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','local_file_header'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <_79> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','local_file_header'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
				      end
				  in  let <_33> =
					  call %% Line 1462
					       'erlang':%% Line 1462
							'+'
					      (%% Line 1462
					       FileNameLen, %% Line 1462
							    ExtraLen)
				      in  %% Line 1462
					  case apply Input
						   ({'read',_33}, In1) of
					    <{BFileN,In3}> when 'true' ->
						%% Line 1463
						case %% Line 1464
						     apply 'get_file_name_extra'/4
							 (FileNameLen, ExtraLen, BFileN, GPFlag) of
						  <{FileName,_90}> when 'true' ->
						      let <_40,FileName1> =
							  case %% Line 1466
							       apply 'check_valid_location'/2
								   (CWD, FileName) of
							    %% Line 1467
							    <{'true',FileName1}> when 'true' ->
								%% Line 1468
								<'true',FileName1>
							    %% Line 1469
							    <{'false',FileName1}> when 'true' ->
								%% Line 1470
								case ZipFile of
								  <{'zip_file',_91,_92,_93,_94,_95}> when 'true' ->
								      let <_38> =
									  call 'erlang':'setelement'
									      (2, ZipFile, FileName1)
								      in  <apply Filter
									       ({_38,Extra}),FileName1>
								  ( <_96> when 'true' ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','zip_file'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
							    ( <_39> when 'true' ->
								  %% Line 1466
								  primop 'match_fail'
								      ({'case_clause',_39})
							      -| ['compiler_generated'] )
							  end
						      in  %% Line 1472
							  case _40 of
							    %% Line 1473
							    <'true'> when 'true' ->
								%% Line 1474
								case call 'lists':'last'
									 (FileName) of
								  %% Line 1475
								  <47> when 'true' ->
								      do  %% Line 1477
									  apply Output
									      ({'ensure_dir',FileName1}, [])
									  %% Line 1478
									  {'dir',In3}
								  %% Line 1479
								  <_97> when 'true' ->
								      %% Line 1482
								      case %% Line 1483
									   apply 'get_z_data'/8
									       (CompMethod, In3, FileName1, ( _99
													      -| ['compiler_generated'] ), %% Line 1484
																	   Input, %% Line 1484
																		  Output, %% Line 1484
																			  OpO, %% Line 1484
																			       Z) of
									<{Out,In4,CRC,_X_UncompSize}> when 'true' ->
									    let <In5> =
										apply %% Line 1485
										      'skip_z_data_descriptor'/3
										    (%% Line 1485
										     GPFlag, %% Line 1485
											     Input, %% Line 1485
												    In4)
									    in  do  %% Line 1489
										    apply FB
											(FileName)
										    do  %% Line 1490
											( case <> of
											    ( <>
												  when call 'erlang':'=:='
													(CRC,
													 ( _100
													   -| ['compiler_generated'] )) ->
												  'ok'
											      -| ['compiler_generated'] )
											    ( <> when 'true' ->
												  call 'erlang':'throw'
												      ({'bad_crc',FileName})
											      -| ['compiler_generated'] )
											  end
											  -| ['compiler_generated'] )
											%% Line 1491
											{'file',Out,In5}
									( <_42> when 'true' ->
									      primop 'match_fail'
										  ({'badmatch',_42})
									  -| ['compiler_generated'] )
								      end
								end
							    %% Line 1493
							    <'false'> when 'true' ->
								%% Line 1494
								{'ignore',In3}
							    ( <_47> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_47})
							      -| ['compiler_generated'] )
							  end
						  ( <_35> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_35})
						    -| ['compiler_generated'] )
						end
					    ( <_34> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_34})
					      -| ['compiler_generated'] )
					  end
			  ( <_20> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_20})
			    -| ['compiler_generated'] )
			end
		%% Line 1496
		<_98> when 'true' ->
		    %% Line 1497
		    call 'erlang':'throw'
			('bad_local_file_header')
	      end
	  ( <_57,_56,_55,_54,_53,_52,_51,_50,_49> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_57,_56,_55,_54,_53,_52,_51,_50,_49})
		  -| [{'function_name',{'get_z_file',9}}] )
	    -| ['compiler_generated'] )
	end
'check_valid_location'/2 =
    %% Line 1501
    fun (_0,_1) ->
	let <_2> =
	    call %% Line 1503
		 'filename':%% Line 1503
			    'split'
		(_1)
	in  %% Line 1503
	    case apply 'check_dir_level'/2
		     (_2, 0) of
	      %% Line 1504
	      <{FileOrDir,Level}>
		  when call 'erlang':'<'
			(Level,
			 0) ->
		  let <_3> =
		      case <> of
			%% Line 1505
			<>
			    when call 'erlang':'=:='
				  (_0,
				   []) ->
			    [46|[47]]
			%% Line 1506
			<> when 'true' ->
			    _0
		      end
		  in  let <_5> =
			  apply %% Line 1509
				'add_cwd'/2
			      (_0, _1)
		      in  do  %% Line 1508
			      call 'error_logger':'format'
				  ([73|[108|[108|[101|[103|[97|[108|[32|[112|[97|[116|[104|[58|[32|[126|[116|[115|[44|[32|[101|[120|[116|[114|[97|[99|[116|[105|[110|[103|[32|[105|[110|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1509
																															    [_5|[_3|[]]])
			      let <_6> =
				  apply %% Line 1510
					'add_cwd'/2
				      (_0, %% Line 1510
					   FileOrDir)
			      in  %% Line 1510
				  {'false',_6}
	      %% Line 1511
	      <_11> when 'true' ->
		  let <_7> =
		      apply %% Line 1512
			    'add_cwd'/2
			  (_0, _1)
		  in  %% Line 1512
		      {'true',_7}
	    end
'check_dir_level'/2 =
    %% Line 1515
    fun (_0,_1) ->
	case <_0,_1> of
	  <[FileOrDir|[]],Level> when 'true' ->
	      %% Line 1516
	      {FileOrDir,Level}
	  %% Line 1517
	  <[[46]|Parts],Level> when 'true' ->
	      %% Line 1518
	      apply 'check_dir_level'/2
		  (Parts, Level)
	  %% Line 1519
	  <[[46|[46]]|Parts],Level> when 'true' ->
	      let <_2> =
		  call %% Line 1520
		       'erlang':%% Line 1520
				'-'
		      (%% Line 1520
		       Level, %% Line 1520
			      1)
	      in  %% Line 1520
		  apply 'check_dir_level'/2
		      (Parts, _2)
	  %% Line 1521
	  <[_X_Dir|Parts],Level> when 'true' ->
	      let <_3> =
		  call %% Line 1522
		       'erlang':%% Line 1522
				'+'
		      (%% Line 1522
		       Level, %% Line 1522
			      1)
	      in  %% Line 1522
		  apply 'check_dir_level'/2
		      (Parts, _3)
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'check_dir_level',2}}] )
	    -| ['compiler_generated'] )
	end
'get_file_name_extra'/4 =
    %% Line 1524
    fun (_0,_1,_2,_3) ->
	%% Line 1525
	try
	    %% Line 1526
	    case _2 of
	      <#{#<BFileName>(_0,8,'binary',['unsigned'|['big']]),
		 #<BExtra>(_1,8,'binary',['unsigned'|['big']])}#> when 'true' ->
		  let <_5> =
		      apply %% Line 1527
			    'binary_to_chars'/2
			  (%% Line 1527
			   BFileName, _3)
		  in  %% Line 1527
		      {_5,BExtra}
	      ( <_4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_4})
		-| ['compiler_generated'] )
	    end
	of <_6> ->
	    _6
	catch <_9,_8,_7> ->
	    %% Line 1530
	    call 'erlang':'throw'
		('bad_file_header')
'get_z_data'/8 =
    %% Line 1534
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <8,In0,FileName,CompSize,Input,Output,OpO,Z> when 'true' ->
	      %% Line 1535
	      case call 'zlib':'inflateInit'
		       (Z, -15) of
		<'ok'> when 'true' ->
		    let <Out0> =
			apply %% Line 1536
			      Output
			    (%% Line 1536
			     {'open',FileName,['write'|OpO]}, %% Line 1536
							      [])
		    in  %% Line 1537
			case apply 'get_z_data_loop'/7
				 (CompSize, 0, In0, Out0, Input, Output, Z) of
			  <{In1,Out1,UncompSize}> when 'true' ->
			      let <CRC> =
				  call %% Line 1538
				       'zlib':%% Line 1538
					      'crc32'
				      (%% Line 1538
				       Z)
			      in  do  try
					  %% Line 1539
					  call 'zlib':'inflateEnd'
					      (Z)
				      of <_catch_value> ->
					  _catch_value
				      catch <Class,Reason,Stk> ->
					  'ok'
				      let <Out2> =
					  apply %% Line 1540
						Output
					      (%% Line 1540
					       {'close',FileName}, %% Line 1540
								   Out1)
				      in  %% Line 1541
					  {Out2,In1,CRC,UncompSize}
			  ( <_11> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_11})
			    -| ['compiler_generated'] )
			end
		( <_9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1542
	  <0,In0,FileName,CompSize,Input,Output,OpO,Z> when 'true' ->
	      let <Out0> =
		  apply %% Line 1543
			Output
		      (%% Line 1543
		       {'open',FileName,['write'|OpO]}, %% Line 1543
							[])
	      in  let <CRC0> =
		      call %% Line 1544
			   'zlib':%% Line 1544
				  'crc32'
			  (%% Line 1544
			   Z, %% Line 1544
			      #{}#)
		  in  %% Line 1545
		      case apply 'copy_data_loop'/7
			       (CompSize, In0, Out0, Input, Output, %% Line 1546
								    CRC0, %% Line 1546
									  Z) of
			<{In1,Out1,CRC}> when 'true' ->
			    let <Out2> =
				apply %% Line 1547
				      Output
				    (%% Line 1547
				     {'close',FileName}, %% Line 1547
							 Out1)
			    in  %% Line 1548
				{Out2,In1,CRC,CompSize}
			( <_16> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_16})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1549
	  <_26,_27,_28,_29,_30,_31,_32,_33> when 'true' ->
	      %% Line 1550
	      call 'erlang':'throw'
		  ('bad_file_header')
	end
'copy_data_loop'/7 =
    %% Line 1552
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <0,In,Out,_X_Input,_X_Output,CRC,_X_Z> when 'true' ->
	      %% Line 1553
	      {In,Out,CRC}
	  %% Line 1554
	  <CompSize,In0,Out0,Input,Output,CRC0,Z> when 'true' ->
	      let <N> =
		  call %% Line 1555
		       'erlang':%% Line 1555
				'min'
		      (%% Line 1555
		       16384, %% Line 1555
			      CompSize)
	      in  %% Line 1556
		  case apply Input
			   ({'read',N}, In0) of
		    %% Line 1557
		    <{'eof',In1}> when 'true' ->
			{Out0,In1}
		    %% Line 1558
		    <{Uncompressed,In1}> when 'true' ->
			let <CRC1> =
			    call %% Line 1559
				 'zlib':%% Line 1559
					'crc32'
				(%% Line 1559
				 Z, %% Line 1559
				    CRC0, %% Line 1559
					  Uncompressed)
			in  let <Out1> =
				apply %% Line 1560
				      Output
				    (%% Line 1560
				     {'write',Uncompressed}, %% Line 1560
							     Out0)
			    in  let <_11> =
				    call %% Line 1561
					 'erlang':%% Line 1561
						  '-'
					(%% Line 1561
					 CompSize, %% Line 1561
						   N)
				in  %% Line 1561
				    apply 'copy_data_loop'/7
					(_11, In1, Out1, Input, Output, CRC1, Z)
		    ( <_12> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_12})
		      -| ['compiler_generated'] )
		  end
	end
'get_z_data_loop'/7 =
    %% Line 1564
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <0,UncompSize,In,Out,_X_Input,_X_Output,_X_Z> when 'true' ->
	      %% Line 1565
	      {In,Out,UncompSize}
	  %% Line 1566
	  <CompSize,UncompSize,In0,Out0,Input,Output,Z> when 'true' ->
	      let <N> =
		  call %% Line 1567
		       'erlang':%% Line 1567
				'min'
		      (%% Line 1567
		       16384, %% Line 1567
			      CompSize)
	      in  %% Line 1568
		  case apply Input
			   ({'read',N}, In0) of
		    %% Line 1569
		    <{'eof',In1}> when 'true' ->
			%% Line 1570
			{Out0,In1}
		    %% Line 1571
		    <{Compressed,In1}> when 'true' ->
			let <Uncompressed> =
			    call %% Line 1572
				 'zlib':%% Line 1572
					'inflate'
				(%% Line 1572
				 Z, %% Line 1572
				    Compressed)
			in  let <Out1> =
				apply %% Line 1573
				      Output
				    (%% Line 1573
				     {'write',Uncompressed}, %% Line 1573
							     Out0)
			    in  let <_13> =
				    call %% Line 1574
					 'erlang':%% Line 1574
						  '-'
					(%% Line 1574
					 CompSize, %% Line 1574
						   N)
				in  let <_11> =
					call %% Line 1574
					     'erlang':%% Line 1574
						      'iolist_size'
					    (%% Line 1574
					     Uncompressed)
				    in  let <_12> =
					    call %% Line 1574
						 'erlang':%% Line 1574
							  '+'
						(%% Line 1574
						 UncompSize, _11)
					in  %% Line 1574
					    apply 'get_z_data_loop'/7
						(_13, _12, %% Line 1575
							   In1, %% Line 1575
								Out1, %% Line 1575
								      Input, %% Line 1575
									     Output, %% Line 1575
										     Z)
		    ( <_14> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_14})
		      -| ['compiler_generated'] )
		  end
	end
'skip_z_data_descriptor'/3 =
    %% Line 1580
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <GPFlag,Input,In0>
	      when try
		    let <_3> =
			call 'erlang':'band'
			    (GPFlag, 8)
		    in  call 'erlang':'=:='
			    (_3, 8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1581
	      apply Input
		  ({'seek','cur',12}, In0)
	  %% Line 1582
	  <_X_GPFlag,_X_Input,In0> when 'true' ->
	      %% Line 1583
	      In0
	end
'dos_date_time_to_datetime'/2 =
    %% Line 1590
    fun (_0,_1) ->
	%% Line 1591
	case #{#<_1>(16,1,'integer',['unsigned'|['big']])}# of
	  <#{#<Hour>(5,1,'integer',['unsigned'|['big']]),
	     #<Min>(6,1,'integer',['unsigned'|['big']]),
	     #<Sec>(5,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1592
	      case #{#<_0>(16,1,'integer',['unsigned'|['big']])}# of
		<#{#<YearFrom1980>(7,1,'integer',['unsigned'|['big']]),
		   #<Month>(4,1,'integer',['unsigned'|['big']]),
		   #<Day>(5,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		    let <_4> =
			call %% Line 1593
			     'erlang':%% Line 1593
				      '+'
			    (%% Line 1593
			     YearFrom1980, %% Line 1593
					   1980)
		    in  %% Line 1593
			{{_4,Month,Day},%% Line 1594
					{Hour,Min,Sec}}
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_2})
	    -| ['compiler_generated'] )
	end
'dos_date_time_from_datetime'/1 =
    %% Line 1596
    fun (_0) ->
	case _0 of
	  <{{Year,Month,Day},{Hour,Min,Sec}}> when 'true' ->
	      let <YearFrom1980> =
		  call %% Line 1597
		       'erlang':%% Line 1597
				'-'
		      (%% Line 1597
		       Year, %% Line 1597
			     1980)
	      in  %% Line 1598
		  case #{#<Hour>(5,1,'integer',['unsigned'|['big']]),
			 #<Min>(6,1,'integer',['unsigned'|['big']]),
			 #<Sec>(5,1,'integer',['unsigned'|['big']])}# of
		    <#{#<DosTime>(16,1,'integer',['unsigned'|['big']])}#> when 'true' ->
			%% Line 1599
			case #{#<YearFrom1980>(7,1,'integer',['unsigned'|['big']]),
			       #<Month>(4,1,'integer',['unsigned'|['big']]),
			       #<Day>(5,1,'integer',['unsigned'|['big']])}# of
			  <#{#<DosDate>(16,1,'integer',['unsigned'|['big']])}#> when 'true' ->
			      %% Line 1600
			      {DosDate,DosTime}
			  ( <_3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_3})
			    -| ['compiler_generated'] )
			end
		    ( <_2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_2})
		      -| ['compiler_generated'] )
		  end
	  ( <_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4})
		  -| [{'function_name',{'dos_date_time_from_datetime',1}}] )
	    -| ['compiler_generated'] )
	end
'pwrite_binary'/3 =
    %% Line 1604
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <B,Pos,Bin>
	      when try
		    let <_3> =
			call 'erlang':'byte_size'
			    (B)
		    in  call 'erlang':'=:='
			    (_3, Pos)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1605
	      apply 'append_bins'/2
		  (Bin, B)
	  %% Line 1606
	  <B,Pos,Bin> when 'true' ->
	      let <_4> =
		  apply %% Line 1607
			'pwrite_iolist'/3
		      (%% Line 1607
		       B, %% Line 1607
			  Pos, %% Line 1607
			       Bin)
	      in  %% Line 1607
		  call 'erlang':'iolist_to_binary'
		      (_4)
	end
'append_bins'/2 =
    %% Line 1609
    fun (_0,_1) ->
	case <_0,_1> of
	  <[Bin|Bins],B>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      let <_2> =
		  #{#<%% Line 1610
		      B>(%% Line 1610
			 'all',8,'binary',['unsigned'|['big']]),
		    #<%% Line 1610
		      Bin>(%% Line 1610
			   'all',8,'binary',['unsigned'|['big']])}#
	      in  %% Line 1610
		  apply 'append_bins'/2
		      (Bins, _2)
	  %% Line 1611
	  <[List|Bins],B>
	      when call 'erlang':'is_list'
		    (List) ->
	      let <_3> =
		  apply %% Line 1612
			'append_bins'/2
		      (%% Line 1612
		       List, %% Line 1612
			     B)
	      in  %% Line 1612
		  apply 'append_bins'/2
		      (Bins, _3)
	  %% Line 1613
	  <Bin,B>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 1614
	      #{#<B>('all',8,'binary',['unsigned'|['big']]),
		#<Bin>('all',8,'binary',['unsigned'|['big']])}#
	  %% Line 1615
	  <List = [_7|_8],B> when 'true' ->
	      let <_4> =
		  call %% Line 1616
		       'erlang':%% Line 1616
				'iolist_to_binary'
		      (%% Line 1616
		       List)
	      in  %% Line 1616
		  #{#<B>('all',8,'binary',['unsigned'|['big']]),
		    #<_4>('all',8,'binary',['unsigned'|['big']])}#
	  %% Line 1617
	  <[],B> when 'true' ->
	      %% Line 1618
	      B
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'append_bins',2}}] )
	    -| ['compiler_generated'] )
	end
'pwrite_iolist'/3 =
    %% Line 1622
    fun (_0,_1,_2) ->
	%% Line 1623
	case call 'erlang':'split_binary'
		 (_0, _1) of
	  <{Left,Right}> when 'true' ->
	      let <Sz> =
		  call %% Line 1624
		       'erlang':%% Line 1624
				'iolist_size'
		      (_2)
	      in  let <R> =
		      apply %% Line 1625
			    'skip_bin'/2
			  (%% Line 1625
			   Right, %% Line 1625
				  Sz)
		  in  %% Line 1626
		      [Left|[_2|R]]
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_3})
	    -| ['compiler_generated'] )
	end
'skip_bin'/2 =
    %% Line 1628
    fun (_0,_1) ->
	case <_0,_1> of
	  <B,Pos>
	      when call 'erlang':'is_binary'
		    (B) ->
	      %% Line 1629
	      case B of
		%% Line 1630
		<#{#<_5>(Pos,8,'binary',['unsigned'|['big']]),
		   #<Bin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    Bin
		%% Line 1631
		<_6> when 'true' ->
		    #{}#
	      end
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'skip_bin',2}}] )
	    -| ['compiler_generated'] )
	end
'binary_to_chars'/2 =
    %% Line 1634
    fun (_0,_1) ->
	%% Line 1636
	case call 'erlang':'band'
		 (_1, 2048) of
	  %% Line 1637
	  <0> when 'true' ->
	      %% Line 1638
	      call 'erlang':'binary_to_list'
		  (_0)
	  %% Line 1639
	  <2048> when 'true' ->
	      %% Line 1640
	      case call 'unicode':'characters_to_list'
		       (_0) of
		%% Line 1641
		<List>
		    when call 'erlang':'is_list'
			  (List) ->
		    %% Line 1642
		    List
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_3})
	    -| ['compiler_generated'] )
	end
'heuristic_to_string'/1 =
    %% Line 1646
    fun (_0) ->
	case _0 of
	  <B>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      %% Line 1647
	      case call 'unicode':'characters_to_binary'
		       (B) of
		%% Line 1648
		<_3>
		    when call 'erlang':'=:='
			  (_3,
			   B) ->
		    %% Line 1649
		    call 'unicode':'characters_to_list'
			(B)
		%% Line 1650
		<_4> when 'true' ->
		    %% Line 1651
		    call 'erlang':'binary_to_list'
			(B)
	      end
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'heuristic_to_string',1}}] )
	    -| ['compiler_generated'] )
	end
'encode_string'/1 =
    %% Line 1654
    fun (_0) ->
	let <_3> =
	    fun (_1) ->
		%% Line 1655
		call 'erlang':'>'
		    (_1, 127)
	in  %% Line 1655
	    case call 'lists':'any'
		     (_3, _0) of
	      %% Line 1656
	      <'true'> when 'true' ->
		  %% Line 1657
		  case call 'unicode':'characters_to_binary'
			   (_0) of
		    %% Line 1658
		    <B>
			when call 'erlang':'is_binary'
			      (B) ->
			let <_4> =
			    call %% Line 1659
				 'erlang':%% Line 1659
					  'binary_to_list'
				(%% Line 1659
				 B)
			in  %% Line 1659
			    {_4,2048}
		    %% Line 1660
		    <_8> when 'true' ->
			%% Line 1661
			call 'erlang':'throw'
			    ({'bad_unicode',_0})
		  end
	      %% Line 1663
	      <'false'> when 'true' ->
		  %% Line 1664
		  {_0,0}
	      ( <_6> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_6})
		-| ['compiler_generated'] )
	    end
'eocd_and_comment_from_bin'/1 =
    %% Line 1668
    fun (_0) ->
	case _0 of
	  <#{#<DiskNum>(16,1,'integer',['unsigned'|['little']]),
	     %% Line 1669
	     #<StartDiskNum>(16,1,'integer',['unsigned'|['little']]),
	     %% Line 1670
	     #<EntriesOnDisk>(16,1,'integer',['unsigned'|['little']]),
	     %% Line 1671
	     #<Entries>(16,1,'integer',['unsigned'|['little']]),
	     %% Line 1672
	     #<Size>(32,1,'integer',['unsigned'|['little']]),
	     %% Line 1673
	     #<Offset>(32,1,'integer',['unsigned'|['little']]),
	     %% Line 1674
	     #<ZipCommentLength>(16,1,'integer',['unsigned'|['little']]),
	     %% Line 1675
	     #<Comment>(ZipCommentLength,8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1676
	      {{'eocd',DiskNum,%% Line 1677
			       StartDiskNum,%% Line 1678
					    EntriesOnDisk,%% Line 1679
							  Entries,%% Line 1680
								  Size,%% Line 1681
								       Offset,%% Line 1682
									      ZipCommentLength},%% Line 1683
												Comment}
	  %% Line 1684
	  <_2> when 'true' ->
	      %% Line 1685
	      call 'erlang':'throw'
		  ('bad_eocd')
	end
'cd_file_header_from_bin'/1 =
    %% Line 1687
    fun (_0) ->
	case _0 of
	  <#{#<VersionMadeBy>(16,1,'integer',['unsigned'|['little']]),
	     %% Line 1688
	     #<VersionNeeded>(16,1,'integer',['unsigned'|['little']]),
	     %% Line 1689
	     #<GPFlag>(16,1,'integer',['unsigned'|['little']]),
	     %% Line 1690
	     #<CompMethod>(16,1,'integer',['unsigned'|['little']]),
	     %% Line 1691
	     #<LastModTime>(16,1,'integer',['unsigned'|['little']]),
	     %% Line 1692
	     #<LastModDate>(16,1,'integer',['unsigned'|['little']]),
	     %% Line 1693
	     #<CRC32>(32,1,'integer',['unsigned'|['little']]),
	     %% Line 1694
	     #<CompSize>(32,1,'integer',['unsigned'|['little']]),
	     %% Line 1695
	     #<UncompSize>(32,1,'integer',['unsigned'|['little']]),
	     %% Line 1696
	     #<FileNameLength>(16,1,'integer',['unsigned'|['little']]),
	     %% Line 1697
	     #<ExtraFieldLength>(16,1,'integer',['unsigned'|['little']]),
	     %% Line 1698
	     #<FileCommentLength>(16,1,'integer',['unsigned'|['little']]),
	     %% Line 1699
	     #<DiskNumStart>(16,1,'integer',['unsigned'|['little']]),
	     %% Line 1700
	     #<InternalAttr>(16,1,'integer',['unsigned'|['little']]),
	     %% Line 1701
	     #<ExternalAttr>(32,1,'integer',['unsigned'|['little']]),
	     %% Line 1702
	     #<LocalHeaderOffset>(32,1,'integer',['unsigned'|['little']])}#> when 'true' ->
	      %% Line 1703
	      {'cd_file_header',VersionMadeBy,%% Line 1704
					      VersionNeeded,%% Line 1705
							    GPFlag,%% Line 1706
								   CompMethod,%% Line 1707
									      LastModTime,%% Line 1708
											  LastModDate,%% Line 1709
												      CRC32,%% Line 1710
													    CompSize,%% Line 1711
														     UncompSize,%% Line 1712
																FileNameLength,%% Line 1713
																	       ExtraFieldLength,%% Line 1714
																				FileCommentLength,%% Line 1715
																						  DiskNumStart,%% Line 1716
																							       InternalAttr,%% Line 1717
																									    ExternalAttr,%% Line 1718
																											 LocalHeaderOffset}
	  %% Line 1719
	  <_2> when 'true' ->
	      %% Line 1720
	      call 'erlang':'throw'
		  ('bad_cd_file_header')
	end
'local_file_header_from_bin'/1 =
    %% Line 1722
    fun (_0) ->
	case _0 of
	  <#{#<VersionNeeded>(16,1,'integer',['unsigned'|['little']]),
	     %% Line 1723
	     #<GPFlag>(16,1,'integer',['unsigned'|['little']]),
	     %% Line 1724
	     #<CompMethod>(16,1,'integer',['unsigned'|['little']]),
	     %% Line 1725
	     #<LastModTime>(16,1,'integer',['unsigned'|['little']]),
	     %% Line 1726
	     #<LastModDate>(16,1,'integer',['unsigned'|['little']]),
	     %% Line 1727
	     #<CRC32>(32,1,'integer',['unsigned'|['little']]),
	     %% Line 1728
	     #<CompSize>(32,1,'integer',['unsigned'|['little']]),
	     %% Line 1729
	     #<UncompSize>(32,1,'integer',['unsigned'|['little']]),
	     %% Line 1730
	     #<FileNameLength>(16,1,'integer',['unsigned'|['little']]),
	     %% Line 1731
	     #<ExtraFieldLength>(16,1,'integer',['unsigned'|['little']])}#> when 'true' ->
	      %% Line 1732
	      {'local_file_header',VersionNeeded,%% Line 1733
						 GPFlag,%% Line 1734
							CompMethod,%% Line 1735
								   LastModTime,%% Line 1736
									       LastModDate,%% Line 1737
											   CRC32,%% Line 1738
												 CompSize,%% Line 1739
													  UncompSize,%% Line 1740
														     FileNameLength,%% Line 1741
																    ExtraFieldLength}
	  %% Line 1742
	  <_2> when 'true' ->
	      %% Line 1743
	      call 'erlang':'throw'
		  ('bad_local_file_header')
	end
'binary_io'/2 =
    %% Line 1767
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'file_info',{_X_Filename,_X_B,FI = {'file_info',_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37}}},_X_A> when 'true' ->
	      %% Line 1768
	      FI
	  %% Line 1769
	  <{'file_info',{_X_Filename,FI = {'file_info',_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50},_X_B}},_X_A> when 'true' ->
	      %% Line 1770
	      FI
	  %% Line 1771
	  <{'file_info',{_X_Filename,B}},A> when 'true' ->
	      %% Line 1772
	      apply 'binary_io'/2
		  ({'file_info',B}, A)
	  %% Line 1773
	  <{'file_info',B},_51> when 'true' ->
	      let <_62,_63> =
		  case <> of
		    %% Line 1776
		    <>
			when call 'erlang':'is_binary'
			      (B) ->
			let <_2> =
			    call 'erlang':'byte_size'
				(B)
			in  <'regular',_2>
		    %% Line 1777
		    <>
			when call 'erlang':'=:='
			      (B,
			       'directory') ->
			<'directory',0>
		    ( <> when 'true' ->
			  %% Line 1775
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	      in  let <Now> =
		      call %% Line 1779
			   'calendar':%% Line 1779
				      'local_time'
			  ()
		  in  %% Line 1780
		      {'file_info',( _63
				     -| ['compiler_generated'] ),( _62
								   -| ['compiler_generated'] ),%% Line 1781
											       'read_write',%% Line 1781
													    Now,%% Line 1782
														Now,%% Line 1782
														    Now,%% Line 1782
															0,%% Line 1783
															  1,%% Line 1783
															    0,%% Line 1784
															      0,%% Line 1784
																0,%% Line 1785
																  0,%% Line 1785
																    0}
	  %% Line 1786
	  <{'open',{_X_Filename,B,_X_FI},_X_Opts},_52>
	      when call 'erlang':'is_binary'
		    (B) ->
	      %% Line 1787
	      {0,B}
	  %% Line 1788
	  <{'open',{_X_Filename,_X_FI,B},_X_Opts},_53>
	      when call 'erlang':'is_binary'
		    (B) ->
	      %% Line 1789
	      {0,B}
	  %% Line 1790
	  <{'open',{_X_Filename,B},_X_Opts},_54>
	      when call 'erlang':'is_binary'
		    (B) ->
	      %% Line 1791
	      {0,B}
	  %% Line 1792
	  <{'open',B,_X_Opts},_55>
	      when call 'erlang':'is_binary'
		    (B) ->
	      %% Line 1793
	      {0,B}
	  %% Line 1794
	  <{'open',Filename,_X_Opts},_56>
	      when call 'erlang':'is_list'
		    (Filename) ->
	      %% Line 1795
	      {0,#{}#}
	  %% Line 1796
	  <{'read',N},{Pos,B}>
	      when try
		    let <_6> =
			call 'erlang':'byte_size'
			    (B)
		    in  call 'erlang':'>='
			    (Pos, _6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_7> =
		  call %% Line 1797
		       'erlang':%% Line 1797
				'+'
		      (%% Line 1797
		       Pos, %% Line 1797
			    N)
	      in  %% Line 1797
		  {'eof',{_7,B}}
	  %% Line 1798
	  <{'read',N},{Pos,B}>
	      when try
		    let <_9> =
			call 'erlang':'+'
			    (Pos, N)
		    in  let <_8> =
			    call 'erlang':'byte_size'
				(B)
			in  call 'erlang':'>'
				(_9, _8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1799
	      case B of
		<#{#<_57>(Pos,8,'binary',['unsigned'|['big']]),
		   #<Read>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_11> =
			call %% Line 1800
			     'erlang':%% Line 1800
				      'byte_size'
			    (%% Line 1800
			     B)
		    in  %% Line 1800
			{Read,{_11,B}}
		( <_10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1801
	  <{'pread',Pos,N},_@r0 = {OldPos,B}> when 'true' ->
	      %% Line 1802
	      case B of
		%% Line 1803
		<#{#<_58>(Pos,8,'binary',['unsigned'|['big']]),
		   #<Read>(N,8,'binary',['unsigned'|['big']]),
		   #<_X_Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_12> =
			call %% Line 1804
			     'erlang':%% Line 1804
				      '+'
			    (%% Line 1804
			     Pos, %% Line 1804
				  N)
		    in  %% Line 1804
			{Read,{_12,B}}
		%% Line 1805
		<_59> when 'true' ->
		    %% Line 1806
		    {'eof',_@r0}
	      end
	  %% Line 1808
	  <{'read',N},{Pos,B}> when 'true' ->
	      %% Line 1809
	      case B of
		<#{#<_60>(Pos,8,'binary',['unsigned'|['big']]),
		   #<Read>(N,8,'binary',['unsigned'|['big']]),
		   #<_61>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_15> =
			call %% Line 1810
			     'erlang':%% Line 1810
				      '+'
			    (%% Line 1810
			     Pos, %% Line 1810
				  N)
		    in  %% Line 1810
			{Read,{_15,B}}
		( <_14> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1811
	  <{'seek','bof',Pos},{_X_OldPos,B}> when 'true' ->
	      %% Line 1812
	      {Pos,B}
	  %% Line 1813
	  <{'seek','cur',Pos},{OldPos,B}> when 'true' ->
	      let <_16> =
		  call %% Line 1814
		       'erlang':%% Line 1814
				'+'
		      (%% Line 1814
		       OldPos, %% Line 1814
			       Pos)
	      in  %% Line 1814
		  {_16,B}
	  %% Line 1815
	  <{'seek','eof',Pos},{_X_OldPos,B}> when 'true' ->
	      let <_17> =
		  call %% Line 1816
		       'erlang':%% Line 1816
				'byte_size'
		      (%% Line 1816
		       B)
	      in  let <_18> =
		      call %% Line 1816
			   'erlang':%% Line 1816
				    '+'
			  (_17, %% Line 1816
				Pos)
		  in  %% Line 1816
		      {_18,B}
	  %% Line 1817
	  <{'pwrite',Pos,Data},{OldPos,B}> when 'true' ->
	      let <_19> =
		  apply %% Line 1818
			'pwrite_binary'/3
		      (%% Line 1818
		       B, %% Line 1818
			  Pos, %% Line 1818
			       Data)
	      in  %% Line 1818
		  {OldPos,_19}
	  %% Line 1819
	  <{'write',Data},{Pos,B}> when 'true' ->
	      let <_21> =
		  call %% Line 1820
		       'erlang':%% Line 1820
				'iolist_size'
		      (%% Line 1820
		       Data)
	      in  let <_22> =
		      call %% Line 1820
			   'erlang':%% Line 1820
				    '+'
			  (%% Line 1820
			   Pos, _21)
		  in  let <_20> =
			  apply %% Line 1820
				'pwrite_binary'/3
			      (%% Line 1820
			       B, %% Line 1820
				  Pos, %% Line 1820
				       Data)
		      in  %% Line 1820
			  {_22,_20}
	  %% Line 1821
	  <'close',{_X_Pos,B}> when 'true' ->
	      %% Line 1822
	      B
	  %% Line 1823
	  <{'close',FN},{_X_Pos,B}> when 'true' ->
	      %% Line 1824
	      {FN,B}
	  %% Line 1825
	  <{'list_dir',_X_F},_X_B> when 'true' ->
	      %% Line 1826
	      []
	  %% Line 1827
	  <{'set_file_info',_X_F,_X_FI},B> when 'true' ->
	      %% Line 1828
	      B
	  %% Line 1829
	  <{'ensure_dir',_X_Dir},B> when 'true' ->
	      %% Line 1830
	      B
	  ( <_24,_23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_24,_23})
		  -| [{'function_name',{'binary_io',2}}] )
	    -| ['compiler_generated'] )
	end
'file_io'/2 =
    %% Line 1832
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'file_info',F},_18> when 'true' ->
	      %% Line 1833
	      case call 'file':'read_file_info'
		       (F) of
		%% Line 1834
		<{'ok',Info}> when 'true' ->
		    Info
		%% Line 1835
		<{'error',E}> when 'true' ->
		    call 'erlang':'throw'
			(E)
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1837
	  <{'open',FN,Opts},_19> when 'true' ->
	      do  %% Line 1838
		  case call 'lists':'member'
			   ('write', Opts) of
		    %% Line 1839
		    <'true'> when 'true' ->
			case call 'filelib':'ensure_dir'
				 (FN) of
			  <'ok'> when 'true' ->
			      'ok'
			  ( <_3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_3})
			    -| ['compiler_generated'] )
			end
		    %% Line 1840
		    <_21> when 'true' ->
			'ok'
		  end
		  let <_5> =
		      call %% Line 1842
			   'erlang':%% Line 1842
				    '++'
			  (%% Line 1842
			   Opts, %% Line 1842
				 ['binary'])
		  in  %% Line 1842
		      case call 'file':'open'
			       (FN, _5) of
			%% Line 1843
			<{'ok',H}> when 'true' ->
			    H
			%% Line 1844
			<{'error',E}> when 'true' ->
			    call 'erlang':'throw'
				(E)
			( <_6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_6})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1846
	  <{'read',N},H> when 'true' ->
	      %% Line 1847
	      case call 'file':'read'
		       (H, N) of
		%% Line 1848
		<{'ok',B}> when 'true' ->
		    {B,H}
		%% Line 1849
		<'eof'> when 'true' ->
		    {'eof',H}
		%% Line 1850
		<{'error',E}> when 'true' ->
		    call 'erlang':'throw'
			(E)
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1852
	  <{'pread',Pos,N},H> when 'true' ->
	      %% Line 1853
	      case call 'file':'pread'
		       (H, Pos, N) of
		%% Line 1854
		<{'ok',B}> when 'true' ->
		    {B,H}
		%% Line 1855
		<'eof'> when 'true' ->
		    {'eof',H}
		%% Line 1856
		<{'error',E}> when 'true' ->
		    call 'erlang':'throw'
			(E)
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1858
	  <{'seek',S,Pos},H> when 'true' ->
	      %% Line 1859
	      case call 'file':'position'
		       (H, {S,Pos}) of
		%% Line 1860
		<{'ok',_X_NewPos}> when 'true' ->
		    H
		%% Line 1861
		<{'error',Error}> when 'true' ->
		    call 'erlang':'throw'
			(Error)
		( <_9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1863
	  <{'write',Data},H> when 'true' ->
	      %% Line 1864
	      case call 'file':'write'
		       (H, Data) of
		%% Line 1865
		<'ok'> when 'true' ->
		    H
		%% Line 1866
		<{'error',Error}> when 'true' ->
		    call 'erlang':'throw'
			(Error)
		( <_10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1868
	  <{'pwrite',Pos,Data},H> when 'true' ->
	      %% Line 1869
	      case call 'file':'pwrite'
		       (H, Pos, Data) of
		%% Line 1870
		<'ok'> when 'true' ->
		    H
		%% Line 1871
		<{'error',Error}> when 'true' ->
		    call 'erlang':'throw'
			(Error)
		( <_11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1873
	  <{'close',FN},H> when 'true' ->
	      %% Line 1874
	      case call 'file':'close'
		       (H) of
		%% Line 1875
		<'ok'> when 'true' ->
		    FN
		%% Line 1876
		<{'error',Error}> when 'true' ->
		    call 'erlang':'throw'
			(Error)
		( <_12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1878
	  <'close',H> when 'true' ->
	      %% Line 1879
	      apply 'file_io'/2
		  ({'close','ok'}, H)
	  %% Line 1880
	  <{'list_dir',F},_X_H> when 'true' ->
	      %% Line 1881
	      case call 'file':'list_dir'
		       (F) of
		%% Line 1882
		<{'ok',Files}> when 'true' ->
		    Files
		%% Line 1883
		<{'error',Error}> when 'true' ->
		    call 'erlang':'throw'
			(Error)
		( <_13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1885
	  <{'set_file_info',F,FI},H> when 'true' ->
	      %% Line 1886
	      case call 'file':'write_file_info'
		       (F, FI) of
		%% Line 1887
		<'ok'> when 'true' ->
		    H
		%% Line 1888
		<{'error',Error}> when 'true' ->
		    call 'erlang':'throw'
			(Error)
		( <_14> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1890
	  <{'ensure_dir',Dir},H> when 'true' ->
	      %% Line 1891
	      case call 'filelib':'ensure_dir'
		       (Dir) of
		<'ok'> when 'true' ->
		    %% Line 1892
		    H
		( <_15> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_15})
		  -| ['compiler_generated'] )
	      end
	  ( <_17,_16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_17,_16})
		  -| [{'function_name',{'file_io',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('zip')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('zip', _0)
end