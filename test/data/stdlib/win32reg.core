module 'win32reg' ['change_key'/2,
		   'change_key_create'/2,
		   'close'/1,
		   'current_key'/1,
		   'delete_key'/1,
		   'delete_value'/2,
		   'expand'/1,
		   'format_error'/1,
		   'module_info'/0,
		   'module_info'/1,
		   'open'/1,
		   'set_value'/3,
		   'sub_keys'/1,
		   'value'/2,
		   'values'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[119|[105|[110|[51|[50|[114|[101|[103|[46|[101|[114|[108]]]]]]]]]]]]]]]],1}],
		%% Line 29
		'export_type' =
		    %% Line 29
		    [{'reg_handle',0}],
		%% Line 58
		'opaque' =
		    %% Line 58
		    [{'reg_handle',{'type',58,'tuple',[{'atom',58,'win32reg'}|[{'type',58,'port',[]}]]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'name',{'type',59,'union',[{'type',59,'string',[]}|[{'atom',59,'default'}]]},[]}],
		%% Line 60
		'type' =
		    %% Line 60
		    [{'value',{'type',60,'union',[{'type',60,'string',[]}|[{'type',60,'integer',[]}|[{'type',60,'binary',[]}]]]},[]}],
		%% Line 64
		'spec' =
		    %% Line 64
		    [{{'open',1},[{'type',64,'bounded_fun',[{'type',64,'fun',[{'type',64,'product',[{'var',64,'OpenModeList'}]}|[{'var',64,'ReturnValue'}]]}|[[{'type',65,'constraint',[{'atom',65,'is_subtype'}|[[{'var',65,'OpenModeList'}|[{'type',65,'list',[{'var',65,'OpenMode'}]}]]]]}|[{'type',66,'constraint',[{'atom',66,'is_subtype'}|[[{'var',66,'OpenMode'}|[{'type',66,'union',[{'atom',66,'read'}|[{'atom',66,'write'}]]}]]]]}|[{'type',67,'constraint',[{'atom',67,'is_subtype'}|[[{'var',67,'ReturnValue'}|[{'type',67,'union',[{'type',67,'tuple',[{'atom',67,'ok'}|[{'var',67,'RegHandle'}]]}|[{'type',67,'tuple',[{'atom',67,'error'}|[{'ann_type',67,[{'var',67,'ErrorId'}|[{'atom',67,'enotsup'}]]}]]}]]}]]]]}|[{'type',68,'constraint',[{'atom',68,'is_subtype'}|[[{'var',68,'RegHandle'}|[{'user_type',68,'reg_handle',[]}]]]]}]]]]]]}]}],
		%% Line 84
		'spec' =
		    %% Line 84
		    [{{'close',1},[{'type',84,'bounded_fun',[{'type',84,'fun',[{'type',84,'product',[{'var',84,'RegHandle'}]}|[{'atom',84,'ok'}]]}|[[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'RegHandle'}|[{'user_type',85,'reg_handle',[]}]]]]}]]]}]}],
		%% Line 92
		'spec' =
		    %% Line 92
		    [{{'current_key',1},[{'type',92,'bounded_fun',[{'type',92,'fun',[{'type',92,'product',[{'var',92,'RegHandle'}]}|[{'var',92,'ReturnValue'}]]}|[[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'RegHandle'}|[{'user_type',93,'reg_handle',[]}]]]]}|[{'type',94,'constraint',[{'atom',94,'is_subtype'}|[[{'var',94,'ReturnValue'}|[{'type',94,'tuple',[{'atom',94,'ok'}|[{'type',94,'string',[]}]]}]]]]}]]]]}]}],
		%% Line 106
		'spec' =
		    %% Line 106
		    [{{'change_key',2},[{'type',106,'bounded_fun',[{'type',106,'fun',[{'type',106,'product',[{'var',106,'RegHandle'}|[{'var',106,'Key'}]]}|[{'var',106,'ReturnValue'}]]}|[[{'type',107,'constraint',[{'atom',107,'is_subtype'}|[[{'var',107,'RegHandle'}|[{'user_type',107,'reg_handle',[]}]]]]}|[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'Key'}|[{'type',108,'string',[]}]]]]}|[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'ReturnValue'}|[{'type',109,'union',[{'atom',109,'ok'}|[{'type',109,'tuple',[{'atom',109,'error'}|[{'ann_type',109,[{'var',109,'ErrorId'}|[{'type',109,'atom',[]}]]}]]}]]}]]]]}]]]]]}]}],
		%% Line 114
		'spec' =
		    %% Line 114
		    [{{'change_key_create',2},[{'type',114,'bounded_fun',[{'type',114,'fun',[{'type',114,'product',[{'var',114,'RegHandle'}|[{'var',114,'Key'}]]}|[{'var',114,'ReturnValue'}]]}|[[{'type',115,'constraint',[{'atom',115,'is_subtype'}|[[{'var',115,'RegHandle'}|[{'user_type',115,'reg_handle',[]}]]]]}|[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'Key'}|[{'type',116,'string',[]}]]]]}|[{'type',117,'constraint',[{'atom',117,'is_subtype'}|[[{'var',117,'ReturnValue'}|[{'type',117,'union',[{'atom',117,'ok'}|[{'type',117,'tuple',[{'atom',117,'error'}|[{'ann_type',117,[{'var',117,'ErrorId'}|[{'type',117,'atom',[]}]]}]]}]]}]]]]}]]]]]}]}],
		%% Line 131
		'spec' =
		    %% Line 131
		    [{{'sub_keys',1},[{'type',131,'bounded_fun',[{'type',131,'fun',[{'type',131,'product',[{'var',131,'RegHandle'}]}|[{'var',131,'ReturnValue'}]]}|[[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'RegHandle'}|[{'user_type',132,'reg_handle',[]}]]]]}|[{'type',133,'constraint',[{'atom',133,'is_subtype'}|[[{'var',133,'ReturnValue'}|[{'type',133,'union',[{'type',133,'tuple',[{'atom',133,'ok'}|[{'type',133,'list',[{'var',133,'SubKey'}]}]]}|[{'type',133,'tuple',[{'atom',133,'error'}|[{'ann_type',133,[{'var',133,'ErrorId'}|[{'type',133,'atom',[]}]]}]]}]]}]]]]}|[{'type',134,'constraint',[{'atom',134,'is_subtype'}|[[{'var',134,'SubKey'}|[{'type',134,'string',[]}]]]]}]]]]]}]}],
		%% Line 141
		'spec' =
		    %% Line 141
		    [{{'delete_key',1},[{'type',141,'bounded_fun',[{'type',141,'fun',[{'type',141,'product',[{'var',141,'RegHandle'}]}|[{'var',141,'ReturnValue'}]]}|[[{'type',142,'constraint',[{'atom',142,'is_subtype'}|[[{'var',142,'RegHandle'}|[{'user_type',142,'reg_handle',[]}]]]]}|[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'ReturnValue'}|[{'type',143,'union',[{'atom',143,'ok'}|[{'type',143,'tuple',[{'atom',143,'error'}|[{'ann_type',143,[{'var',143,'ErrorId'}|[{'type',143,'atom',[]}]]}]]}]]}]]]]}]]]]}]}],
		%% Line 150
		'spec' =
		    %% Line 150
		    [{{'set_value',3},[{'type',150,'bounded_fun',[{'type',150,'fun',[{'type',150,'product',[{'var',150,'RegHandle'}|[{'var',150,'Name'}|[{'var',150,'Value'}]]]}|[{'var',150,'ReturnValue'}]]}|[[{'type',151,'constraint',[{'atom',151,'is_subtype'}|[[{'var',151,'RegHandle'}|[{'user_type',151,'reg_handle',[]}]]]]}|[{'type',152,'constraint',[{'atom',152,'is_subtype'}|[[{'var',152,'Name'}|[{'user_type',152,'name',[]}]]]]}|[{'type',153,'constraint',[{'atom',153,'is_subtype'}|[[{'var',153,'Value'}|[{'user_type',153,'value',[]}]]]]}|[{'type',154,'constraint',[{'atom',154,'is_subtype'}|[[{'var',154,'ReturnValue'}|[{'type',154,'union',[{'atom',154,'ok'}|[{'type',154,'tuple',[{'atom',154,'error'}|[{'ann_type',154,[{'var',154,'ErrorId'}|[{'type',154,'atom',[]}]]}]]}]]}]]]]}]]]]]]}]}],
		%% Line 167
		'spec' =
		    %% Line 167
		    [{{'value',2},[{'type',167,'bounded_fun',[{'type',167,'fun',[{'type',167,'product',[{'var',167,'RegHandle'}|[{'var',167,'Name'}]]}|[{'var',167,'ReturnValue'}]]}|[[{'type',168,'constraint',[{'atom',168,'is_subtype'}|[[{'var',168,'RegHandle'}|[{'user_type',168,'reg_handle',[]}]]]]}|[{'type',169,'constraint',[{'atom',169,'is_subtype'}|[[{'var',169,'Name'}|[{'user_type',169,'name',[]}]]]]}|[{'type',170,'constraint',[{'atom',170,'is_subtype'}|[[{'var',170,'ReturnValue'}|[{'type',170,'union',[{'type',170,'tuple',[{'atom',170,'ok'}|[{'ann_type',170,[{'var',170,'Value'}|[{'user_type',170,'value',[]}]]}]]}|[{'type',170,'tuple',[{'atom',170,'error'}|[{'ann_type',170,[{'var',170,'ErrorId'}|[{'type',170,'atom',[]}]]}]]}]]}]]]]}]]]]]}]}],
		%% Line 182
		'spec' =
		    %% Line 182
		    [{{'values',1},[{'type',182,'bounded_fun',[{'type',182,'fun',[{'type',182,'product',[{'var',182,'RegHandle'}]}|[{'var',182,'ReturnValue'}]]}|[[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'RegHandle'}|[{'user_type',183,'reg_handle',[]}]]]]}|[{'type',184,'constraint',[{'atom',184,'is_subtype'}|[[{'var',184,'ReturnValue'}|[{'type',184,'union',[{'type',184,'tuple',[{'atom',184,'ok'}|[{'type',184,'list',[{'var',184,'ValuePair'}]}]]}|[{'type',184,'tuple',[{'atom',184,'error'}|[{'ann_type',184,[{'var',184,'ErrorId'}|[{'type',184,'atom',[]}]]}]]}]]}]]]]}|[{'type',185,'constraint',[{'atom',185,'is_subtype'}|[[{'var',185,'ValuePair'}|[{'type',185,'tuple',[{'ann_type',185,[{'var',185,'Name'}|[{'user_type',185,'name',[]}]]}|[{'ann_type',185,[{'var',185,'Value'}|[{'user_type',185,'value',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 192
		'spec' =
		    %% Line 192
		    [{{'delete_value',2},[{'type',192,'bounded_fun',[{'type',192,'fun',[{'type',192,'product',[{'var',192,'RegHandle'}|[{'var',192,'Name'}]]}|[{'var',192,'ReturnValue'}]]}|[[{'type',193,'constraint',[{'atom',193,'is_subtype'}|[[{'var',193,'RegHandle'}|[{'user_type',193,'reg_handle',[]}]]]]}|[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'Name'}|[{'user_type',194,'name',[]}]]]]}|[{'type',195,'constraint',[{'atom',195,'is_subtype'}|[[{'var',195,'ReturnValue'}|[{'type',195,'union',[{'atom',195,'ok'}|[{'type',195,'tuple',[{'atom',195,'error'}|[{'ann_type',195,[{'var',195,'ErrorId'}|[{'type',195,'atom',[]}]]}]]}]]}]]]]}]]]]]}]}],
		%% Line 207
		'spec' =
		    %% Line 207
		    [{{'expand',1},[{'type',207,'bounded_fun',[{'type',207,'fun',[{'type',207,'product',[{'var',207,'String'}]}|[{'var',207,'ExpandedString'}]]}|[[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'String'}|[{'type',208,'string',[]}]]]]}|[{'type',209,'constraint',[{'atom',209,'is_subtype'}|[[{'var',209,'ExpandedString'}|[{'type',209,'string',[]}]]]]}]]]]}]}],
		%% Line 228
		'spec' =
		    %% Line 228
		    [{{'format_error',1},[{'type',228,'bounded_fun',[{'type',228,'fun',[{'type',228,'product',[{'var',228,'ErrorId'}]}|[{'var',228,'ErrorString'}]]}|[[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'ErrorId'}|[{'type',229,'atom',[]}]]]]}|[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'ErrorString'}|[{'type',230,'string',[]}]]]]}]]]]}]}],
		%% Line 237
		'spec' =
		    %% Line 237
		    [{{'collect_values',2},[{'type',237,'fun',[{'type',237,'product',[{'type',237,'port',[]}|[{'type',237,'list',[{'type',237,'tuple',[{'user_type',237,'name',[]}|[{'user_type',237,'value',[]}]]}]}]]}|[{'type',238,'union',[{'type',238,'tuple',[{'atom',238,'ok'}|[{'type',238,'list',[{'type',238,'tuple',[{'user_type',238,'name',[]}|[{'user_type',238,'value',[]}]]}]}]]}|[{'type',238,'tuple',[{'atom',238,'error'}|[{'ann_type',238,[{'var',238,'ErrorId'}|[{'type',238,'atom',[]}]]}]]}]]}]]}]}],
		%% Line 250
		'spec' =
		    %% Line 250
		    [{{'collect_keys',2},[{'type',250,'fun',[{'type',250,'product',[{'type',250,'port',[]}|[{'type',250,'string',[]}]]}|[{'type',250,'union',[{'type',250,'tuple',[{'atom',250,'ok'}|[{'type',250,'list',[{'type',250,'string',[]}]}]]}|[{'type',250,'tuple',[{'atom',250,'error'}|[{'ann_type',250,[{'var',250,'ErrorId'}|[{'type',250,'atom',[]}]]}]]}]]}]]}]}]]
'open'/1 =
    %% Line 70
    fun (_0) ->
	%% Line 71
	case call 'os':'type'
		 () of
	  %% Line 72
	  <{'win32',_6}> when 'true' ->
	      %% Line 73
	      case apply 'open_mode'/2
		       (_0, []) of
		%% Line 74
		<_@r0 = {'error',Reason}> when 'true' ->
		    %% Line 75
		    _@r0
		%% Line 76
		<ModeStr> when 'true' ->
		    let <_1> =
			call %% Line 77
			     'erlang':%% Line 77
				      '++'
			    (%% Line 77
			     [114|[101|[103|[105|[115|[116|[114|[121|[95|[95|[100|[114|[118|[95|[95|[32]]]]]]]]]]]]]]]], %% Line 77
															 ModeStr)
		    in  let <P> =
			    call %% Line 77
				 'erlang':%% Line 77
					  'open_port'
				(%% Line 77
				 {'spawn',_1}, %% Line 77
					       [])
			in  %% Line 78
			    {'ok',{'win32reg',P}}
	      end
	  %% Line 80
	  <_7> when 'true' ->
	      %% Line 81
	      {'error','enotsup'}
	end
'close'/1 =
    %% Line 87
    fun (_0) ->
	case _0 of
	  <{'win32reg',Reg}>
	      when call 'erlang':'is_port'
		    (Reg) ->
	      do  %% Line 88
		  call 'erlang':'unlink'
		      (Reg)
		  do  %% Line 89
		      call 'erlang':'exit'
			  (Reg, 'die')
		      %% Line 90
		      'ok'
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'close',1}}] )
	    -| ['compiler_generated'] )
	end
'current_key'/1 =
    %% Line 96
    fun (_0) ->
	case _0 of
	  <{'win32reg',Reg}>
	      when call 'erlang':'is_port'
		    (Reg) ->
	      let <_2> =
		  call %% Line 98
		       'erlang':%% Line 98
				'self'
		      ()
	      in  do  %% Line 98
		      call 'erlang':'!'
			  (Reg, {_2,{'command',[0]}})
		      %% Line 99
		      case apply 'get_result'/1
			       (Reg) of
			<{'state',Hkey,Name}> when 'true' ->
			    let <Root> =
				apply %% Line 100
				      'hkey_to_string'/1
				    (%% Line 100
				     Hkey)
			    in  let <_6> =
				    case %% Line 101
					 Name of
				      %% Line 102
				      <[]> when 'true' ->
					  Root
				      %% Line 103
				      <_8> when 'true' ->
					  call 'erlang':'++'
					      (Root, [92|Name])
				    end
				in  %% Line 101
				    {'ok',_6}
			( <_3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_3})
			  -| ['compiler_generated'] )
		      end
	  ( <_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7})
		  -| [{'function_name',{'current_key',1}}] )
	    -| ['compiler_generated'] )
	end
'change_key'/2 =
    %% Line 111
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'win32reg',Reg},Key>
	      when call 'erlang':'is_port'
		    (Reg) ->
	      %% Line 112
	      apply 'change_key'/3
		  (Reg, 1, Key)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'change_key',2}}] )
	    -| ['compiler_generated'] )
	end
'change_key_create'/2 =
    %% Line 119
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'win32reg',Reg},Key>
	      when call 'erlang':'is_port'
		    (Reg) ->
	      %% Line 120
	      apply 'change_key'/3
		  (Reg, 2, Key)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'change_key_create',2}}] )
	    -| ['compiler_generated'] )
	end
'change_key'/3 =
    %% Line 122
    fun (_0,_1,_2) ->
	%% Line 123
	case apply 'parse_key'/2
		 (_2, _0) of
	  %% Line 124
	  <{'ok',Hkey,Path}> when 'true' ->
	      let <_4> =
		  call %% Line 125
		       'erlang':%% Line 125
				'self'
		      ()
	      in  let <_3> =
		      apply %% Line 125
			    'i32'/1
			  (%% Line 125
			   Hkey)
		  in  do  %% Line 125
			  call 'erlang':'!'
			      (_0, {_4,{'command',[_1|[_3|[Path|[0]]]]}})
			  %% Line 126
			  apply 'get_result'/1
			      (_0)
	  %% Line 127
	  <_@r0 = {'error',Reason}> when 'true' ->
	      %% Line 128
	      _@r0
	  ( <_5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_5})
	    -| ['compiler_generated'] )
	end
'sub_keys'/1 =
    %% Line 136
    fun (_0) ->
	case _0 of
	  <{'win32reg',Reg}>
	      when call 'erlang':'is_port'
		    (Reg) ->
	      let <_2> =
		  call %% Line 138
		       'erlang':%% Line 138
				'self'
		      ()
	      in  do  %% Line 138
		      call 'erlang':'!'
			  (Reg, {_2,{'command',[3]}})
		      %% Line 139
		      apply 'collect_keys'/2
			  (Reg, [])
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'sub_keys',1}}] )
	    -| ['compiler_generated'] )
	end
'delete_key'/1 =
    %% Line 145
    fun (_0) ->
	case _0 of
	  <{'win32reg',Reg}>
	      when call 'erlang':'is_port'
		    (Reg) ->
	      let <_2> =
		  call %% Line 147
		       'erlang':%% Line 147
				'self'
		      ()
	      in  do  %% Line 147
		      call 'erlang':'!'
			  (Reg, {_2,{'command',[7]}})
		      %% Line 148
		      apply 'get_result'/1
			  (Reg)
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'delete_key',1}}] )
	    -| ['compiler_generated'] )
	end
'set_value'/3 =
    %% Line 156
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{'win32reg',Reg},Name0,Value>
	      when call 'erlang':'is_port'
		    (Reg) ->
	      let <_4> =
		  case %% Line 158
		       Name0 of
		    %% Line 159
		    <'default'> when 'true' ->
			[]
		    %% Line 160
		    <_12> when 'true' ->
			Name0
		  end
	      in  %% Line 162
		  case apply 'term_to_value'/1
			   (Value) of
		    <{Type,V}> when 'true' ->
			let <Cmd> =
			    [%% Line 163
			     6|%% Line 163
			       [Type|[_4|[0|[V|[]]]]]]
			in  let <_8> =
				call %% Line 164
				     'erlang':%% Line 164
					      'self'
				    ()
			    in  do  %% Line 164
				    call 'erlang':'!'
					(Reg, {_8,{'command',Cmd}})
				    %% Line 165
				    apply 'get_result'/1
					(Reg)
		    ( <_6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_6})
		      -| ['compiler_generated'] )
		  end
	  ( <_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9})
		  -| [{'function_name',{'set_value',3}}] )
	    -| ['compiler_generated'] )
	end
'value'/2 =
    %% Line 172
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'win32reg',Reg},Name>
	      when call 'erlang':'is_port'
		    (Reg) ->
	      let <Cmd> =
		  [%% Line 173
		   4|%% Line 173
		     [Name|[0]]]
	      in  let <_3> =
		      call %% Line 174
			   'erlang':%% Line 174
				    'self'
			  ()
		  in  do  %% Line 174
			  call 'erlang':'!'
			      (Reg, {_3,{'command',Cmd}})
			  %% Line 175
			  case apply 'get_result'/1
				   (Reg) of
			    %% Line 176
			    <{'value',{_7,Value}}>
				when call 'erlang':'=:='
				      (_7,
				       Name) ->
				%% Line 177
				{'ok',Value}
			    %% Line 178
			    <_@r0 = {'error',Reason}> when 'true' ->
				%% Line 179
				_@r0
			    ( <_4> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_4})
			      -| ['compiler_generated'] )
			  end
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'value',2}}] )
	    -| ['compiler_generated'] )
	end
'values'/1 =
    %% Line 187
    fun (_0) ->
	case _0 of
	  <{'win32reg',Reg}>
	      when call 'erlang':'is_port'
		    (Reg) ->
	      let <_2> =
		  call %% Line 189
		       'erlang':%% Line 189
				'self'
		      ()
	      in  do  %% Line 189
		      call 'erlang':'!'
			  (Reg, {_2,{'command',[5]}})
		      %% Line 190
		      apply 'collect_values'/2
			  (Reg, [])
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'values',1}}] )
	    -| ['compiler_generated'] )
	end
'delete_value'/2 =
    %% Line 197
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'win32reg',Reg},Name0>
	      when call 'erlang':'is_port'
		    (Reg) ->
	      let <_3> =
		  case %% Line 199
		       Name0 of
		    %% Line 200
		    <'default'> when 'true' ->
			[]
		    %% Line 201
		    <_9> when 'true' ->
			Name0
		  end
	      in  let <Cmd> =
		      [%% Line 203
		       8|%% Line 203
			 [_3|[0]]]
		  in  let <_6> =
			  call %% Line 204
			       'erlang':%% Line 204
					'self'
			      ()
		      in  do  %% Line 204
			      call 'erlang':'!'
				  (Reg, {_6,{'command',Cmd}})
			      %% Line 205
			      apply 'get_result'/1
				  (Reg)
	  ( <_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7})
		  -| [{'function_name',{'delete_value',2}}] )
	    -| ['compiler_generated'] )
	end
'expand'/1 =
    %% Line 211
    fun (_0) ->
	%% Line 212
	apply 'expand'/3
	    (_0, [], [])
'expand'/3 =
    %% Line 214
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[37|[37|Rest]],[],Result> when 'true' ->
	      %% Line 215
	      apply 'expand'/3
		  (Rest, [], [37|Result])
	  %% Line 216
	  <[37|[C|Rest]],[],Result> when 'true' ->
	      %% Line 217
	      apply 'expand'/3
		  (Rest, [C|[]], Result)
	  %% Line 218
	  <[C|Rest],[],Result> when 'true' ->
	      %% Line 219
	      apply 'expand'/3
		  (Rest, [], [C|Result])
	  %% Line 220
	  <[37|Rest],Env0,Result> when 'true' ->
	      let <Env> =
		  call %% Line 221
		       'lists':%% Line 221
			       'reverse'
		      (%% Line 221
		       Env0)
	      in  let <_4> =
		      call %% Line 222
			   'os':%% Line 222
				'getenv'
			  (%% Line 222
			   Env, %% Line 222
				[])
		  in  let <_5> =
			  call %% Line 222
			       'lists':%% Line 222
				       'reverse'
			      (_4)
		      in  let <_6> =
			      call %% Line 222
				   'erlang':%% Line 222
					    '++'
				  (_5, %% Line 222
				       Result)
			  in  %% Line 222
			      apply 'expand'/3
				  (Rest, [], _6)
	  %% Line 223
	  <[C|Rest],Env,Result> when 'true' ->
	      %% Line 224
	      apply 'expand'/3
		  (Rest, [C|Env], Result)
	  %% Line 225
	  <[],[],Result> when 'true' ->
	      %% Line 226
	      call 'lists':'reverse'
		  (Result)
	  ( <_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7})
		  -| [{'function_name',{'expand',3}}] )
	    -| ['compiler_generated'] )
	end
'format_error'/1 =
    %% Line 232
    fun (_0) ->
	%% Line 233
	call 'erl_posix_msg':'message'
	    (_0)
'collect_values'/2 =
    %% Line 240
    fun (_0,_1) ->
	%% Line 241
	case apply 'get_result'/1
		 (_0) of
	  %% Line 242
	  <'ok'> when 'true' ->
	      let <_2> =
		  call %% Line 243
		       'lists':%% Line 243
			       'reverse'
		      (_1)
	      in  %% Line 243
		  {'ok',_2}
	  %% Line 244
	  <{'value',ValueData}> when 'true' ->
	      %% Line 245
	      apply 'collect_values'/2
		  (_0, [ValueData|_1])
	  %% Line 246
	  <_@r0 = {'error',Reason}> when 'true' ->
	      %% Line 247
	      _@r0
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_3})
	    -| ['compiler_generated'] )
	end
'collect_keys'/2 =
    %% Line 252
    fun (_0,_1) ->
	%% Line 253
	case apply 'get_result'/1
		 (_0) of
	  %% Line 254
	  <'ok'> when 'true' ->
	      let <_2> =
		  call %% Line 255
		       'lists':%% Line 255
			       'reverse'
		      (_1)
	      in  %% Line 255
		  {'ok',_2}
	  %% Line 256
	  <{'key',KeyData}> when 'true' ->
	      %% Line 257
	      apply 'collect_keys'/2
		  (_0, [KeyData|_1])
	  %% Line 258
	  <_@r0 = {'error',Reason}> when 'true' ->
	      %% Line 259
	      _@r0
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_3})
	    -| ['compiler_generated'] )
	end
'get_result'/1 =
    %% Line 262
    fun (_0) ->
	%% Line 263
	receive
	  %% Line 264
	  <{_2,{'data',Data}}>
	      when call 'erlang':'=:='
		    (_2,
		     _0) ->
	      %% Line 265
	      apply 'get_result1'/1
		  (Data)
	after 'infinity' ->
	  'true'
'get_result1'/1 =
    %% Line 268
    fun (_0) ->
	case _0 of
	  <[101|Reason]> when 'true' ->
	      let <_1> =
		  call %% Line 269
		       'erlang':%% Line 269
				'list_to_atom'
		      (%% Line 269
		       Reason)
	      in  %% Line 269
		  {'error',_1}
	  %% Line 270
	  <[111]> when 'true' ->
	      %% Line 271
	      'ok'
	  %% Line 272
	  <[107|Name]> when 'true' ->
	      %% Line 273
	      {'key',Name}
	  %% Line 274
	  <[118|Rest0]> when 'true' ->
	      %% Line 275
	      case apply 'i32_on_head'/1
		       (Rest0) of
		<{'ok',Type,Rest1}> when 'true' ->
		    %% Line 276
		    case apply 'get_cstring'/1
			     (Rest1) of
		      <{'ok',Name0,Value}> when 'true' ->
			  let <_5> =
			      case %% Line 278
				   Name0 of
				%% Line 279
				<[]> when 'true' ->
				    'default'
				%% Line 280
				<_10> when 'true' ->
				    Name0
			      end
			  in  let <_7> =
				  apply %% Line 282
					'encode_value'/2
				      (%% Line 282
				       Type, %% Line 282
					     Value)
			      in  %% Line 282
				  {'value',{_5,_7}}
		      ( <_3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_3})
			-| ['compiler_generated'] )
		    end
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 283
	  <[115|Rest0]> when 'true' ->
	      %% Line 284
	      case apply 'i32_on_head'/1
		       (Rest0) of
		<{'ok',Hkey,Name}> when 'true' ->
		    %% Line 285
		    {'state',Hkey,Name}
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_8})
		  -| ['compiler_generated'] )
	      end
	  ( <_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9})
		  -| [{'function_name',{'get_result1',1}}] )
	    -| ['compiler_generated'] )
	end
'encode_value'/2 =
    %% Line 287
    fun (_0,_1) ->
	case <_0,_1> of
	  <1,Value> when 'true' ->
	      %% Line 288
	      Value
	  %% Line 289
	  <2,Value> when 'true' ->
	      %% Line 290
	      Value
	  %% Line 291
	  <4,Value> when 'true' ->
	      %% Line 292
	      apply 'i32'/1
		  (Value)
	  %% Line 293
	  <_4,Value> when 'true' ->
	      %% Line 294
	      call 'erlang':'list_to_binary'
		  (Value)
	end
'term_to_value'/1 =
    %% Line 296
    fun (_0) ->
	case _0 of
	  <Int>
	      when call 'erlang':'is_integer'
		    (_0) ->
	      let <_2> =
		  apply %% Line 297
			'i32'/1
		      (%% Line 297
		       4)
	      in  let <_1> =
		      apply %% Line 297
			    'i32'/1
			  (%% Line 297
			   Int)
		  in  %% Line 297
		      {_2,_1}
	  %% Line 298
	  <String>
	      when call 'erlang':'is_list'
		    (_0) ->
	      let <_3> =
		  apply %% Line 299
			'i32'/1
		      (%% Line 299
		       1)
	      in  %% Line 299
		  {_3,[String|[0]]}
	  %% Line 300
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      let <_4> =
		  apply %% Line 301
			'i32'/1
		      (%% Line 301
		       3)
	      in  %% Line 301
		  {_4,Bin}
	  %% Line 302
	  <_6> when 'true' ->
	      %% Line 303
	      call 'erlang':'exit'
		  ('badarg')
	end
'get_cstring'/1 =
    %% Line 305
    fun (_0) ->
	%% Line 306
	apply 'get_cstring'/2
	    (_0, [])
'get_cstring'/2 =
    %% Line 308
    fun (_0,_1) ->
	case <_0,_1> of
	  <[0|Rest],Result> when 'true' ->
	      let <_2> =
		  call %% Line 309
		       'lists':%% Line 309
			       'reverse'
		      (%% Line 309
		       Result)
	      in  %% Line 309
		  {'ok',_2,Rest}
	  %% Line 310
	  <[C|Rest],Result> when 'true' ->
	      %% Line 311
	      apply 'get_cstring'/2
		  (Rest, [C|Result])
	  %% Line 312
	  <[],Result> when 'true' ->
	      let <_3> =
		  call %% Line 313
		       'lists':%% Line 313
			       'reverse'
		      (%% Line 313
		       Result)
	      in  %% Line 313
		  {'ok',_3,[]}
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'get_cstring',2}}] )
	    -| ['compiler_generated'] )
	end
'i32'/1 =
    %% Line 315
    fun (_0) ->
	case _0 of
	  <Int>
	      when call 'erlang':'is_integer'
		    (_0) ->
	      let <_1> =
		  call %% Line 316
		       'erlang':%% Line 316
				'bsr'
		      (%% Line 316
		       Int, %% Line 316
			    24)
	      in  let <_2> =
		      call %% Line 316
			   'erlang':%% Line 316
				    'band'
			  (_1, %% Line 316
			       255)
		  in  let <_3> =
			  call %% Line 317
			       'erlang':%% Line 317
					'bsr'
			      (%% Line 317
			       Int, %% Line 317
				    16)
		      in  let <_4> =
			      call %% Line 317
				   'erlang':%% Line 317
					    'band'
				  (_3, %% Line 317
				       255)
			  in  let <_5> =
				  call %% Line 318
				       'erlang':%% Line 318
						'bsr'
				      (%% Line 318
				       Int, %% Line 318
					    8)
			      in  let <_6> =
				      call %% Line 318
					   'erlang':%% Line 318
						    'band'
					  (_5, %% Line 318
					       255)
				  in  let <_7> =
					  call %% Line 319
					       'erlang':%% Line 319
							'band'
					      (%% Line 319
					       Int, %% Line 319
						    255)
				      in  %% Line 316
					  [_2|%% Line 317
					      [_4|%% Line 318
						  [_6|%% Line 319
						      [_7|[]]]]]
	  %% Line 320
	  <[X1|[X2|[X3|[X4|[]]]]]> when 'true' ->
	      let <_10> =
		  call %% Line 321
		       'erlang':%% Line 321
				'bsl'
		      (%% Line 321
		       X1, %% Line 321
			   24)
	      in  let <_9> =
		      call %% Line 321
			   'erlang':%% Line 321
				    'bsl'
			  (%% Line 321
			   X2, %% Line 321
			       16)
		  in  let <_11> =
			  call %% Line 321
			       'erlang':%% Line 321
					'bor'
			      (_10, _9)
		      in  let <_8> =
			      call %% Line 321
				   'erlang':%% Line 321
					    'bsl'
				  (%% Line 321
				   X3, %% Line 321
				       8)
			  in  let <_12> =
				  call %% Line 321
				       'erlang':%% Line 321
						'bor'
				      (_11, _8)
			      in  %% Line 321
				  call 'erlang':'bor'
				      (_12, X4)
	  ( <_13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13})
		  -| [{'function_name',{'i32',1}}] )
	    -| ['compiler_generated'] )
	end
'i32_on_head'/1 =
    %% Line 323
    fun (_0) ->
	case _0 of
	  <[X1|[X2|[X3|[X4|Rest]]]]> when 'true' ->
	      let <_3> =
		  call %% Line 324
		       'erlang':%% Line 324
				'bsl'
		      (%% Line 324
		       X1, %% Line 324
			   24)
	      in  let <_2> =
		      call %% Line 324
			   'erlang':%% Line 324
				    'bsl'
			  (%% Line 324
			   X2, %% Line 324
			       16)
		  in  let <_4> =
			  call %% Line 324
			       'erlang':%% Line 324
					'bor'
			      (_3, _2)
		      in  let <_1> =
			      call %% Line 324
				   'erlang':%% Line 324
					    'bsl'
				  (%% Line 324
				   X3, %% Line 324
				       8)
			  in  let <_5> =
				  call %% Line 324
				       'erlang':%% Line 324
						'bor'
				      (_4, _1)
			      in  let <_6> =
				      call %% Line 324
					   'erlang':%% Line 324
						    'bor'
					  (_5, %% Line 324
					       X4)
				  in  %% Line 324
				      {'ok',_6,Rest}
	  ( <_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7})
		  -| [{'function_name',{'i32_on_head',1}}] )
	    -| ['compiler_generated'] )
	end
'parse_key'/2 =
    %% Line 326
    fun (_0,_1) ->
	case <_0,_1> of
	  <[92|Rest],_4> when 'true' ->
	      %% Line 327
	      apply 'parse_root'/2
		  (Rest, [])
	  %% Line 328
	  <Key,Reg> when 'true' ->
	      %% Line 329
	      apply 'parse_relative'/2
		  (Key, Reg)
	end
'parse_relative'/2 =
    %% Line 331
    fun (_0,_1) ->
	let <_3> =
	    call %% Line 333
		 'erlang':%% Line 333
			  'self'
		()
	in  do  %% Line 333
		call 'erlang':'!'
		    (_1, {_3,{'command',[0]}})
		%% Line 334
		case apply 'get_result'/1
			 (_1) of
		  <{'state',RootHandle,Name}> when 'true' ->
		      let <Original> =
			  apply %% Line 335
				'split_key'/1
			      (%% Line 335
			       Name)
		      in  let <_6> =
			      apply %% Line 336
				    'split_key'/1
				  (_0)
			  in  let <Relative> =
				  call %% Line 336
				       'lists':%% Line 336
					       'reverse'
				      (_6)
			      in  let <_11> =
				      apply %% Line 337
					    'parse_relative1'/2
					  (%% Line 337
					   Relative, %% Line 337
						     Original)
				  in  %% Line 339
				      {'ok',RootHandle,_11}
		  ( <_4> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_4})
		    -| ['compiler_generated'] )
		end
'parse_relative1'/2 =
    %% Line 343
    fun (_0,_1) ->
	case <_0,_1> of
	  <[[46|[46]]|T1],[_4|T2]> when 'true' ->
	      %% Line 344
	      apply 'parse_relative1'/2
		  (T1, T2)
	  %% Line 345
	  <[Comp|Rest],Result> when 'true' ->
	      %% Line 346
	      apply 'parse_relative1'/2
		  (Rest, [Comp|Result])
	  %% Line 347
	  <[],Result> when 'true' ->
	      %% Line 348
	      apply 'reverse_and_join'/2
		  (Result, [])
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'parse_relative1',2}}] )
	    -| ['compiler_generated'] )
	end
'reverse_and_join'/2 =
    %% Line 350
    fun (_0,_1) ->
	case <_0,_1> of
	  <[X|Rest],[]> when 'true' ->
	      %% Line 351
	      apply 'reverse_and_join'/2
		  (Rest, [X|[]])
	  %% Line 352
	  <[X|Rest],Result> when 'true' ->
	      %% Line 353
	      apply 'reverse_and_join'/2
		  (Rest, [X|[[92]|Result]])
	  %% Line 354
	  <[],Result> when 'true' ->
	      %% Line 355
	      Result
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'reverse_and_join',2}}] )
	    -| ['compiler_generated'] )
	end
'split_key'/1 =
    %% Line 357
    fun (_0) ->
	%% Line 358
	apply 'split_key'/3
	    (_0, [], [])
'split_key'/3 =
    %% Line 360
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[92|Rest],Current,Result> when 'true' ->
	      let <_3> =
		  call %% Line 361
		       'lists':%% Line 361
			       'reverse'
		      (%% Line 361
		       Current)
	      in  %% Line 361
		  apply 'split_key'/3
		      (Rest, [], [_3|Result])
	  %% Line 362
	  <[C|Rest],Current,Result> when 'true' ->
	      %% Line 363
	      apply 'split_key'/3
		  (Rest, [C|Current], Result)
	  %% Line 364
	  <[],[],Result> when 'true' ->
	      %% Line 365
	      Result
	  %% Line 366
	  <[],Current,Result> when 'true' ->
	      let <_4> =
		  call %% Line 367
		       'lists':%% Line 367
			       'reverse'
		      (%% Line 367
		       Current)
	      in  %% Line 367
		  [_4|Result]
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'split_key',3}}] )
	    -| ['compiler_generated'] )
	end
'parse_root'/2 =
    %% Line 369
    fun (_0,_1) ->
	case <_0,_1> of
	  <[92|Rest],Result> when 'true' ->
	      let <_3> =
		  case %% Line 371
		       call 'lists':'reverse'
			   (Result) of
		    %% Line 372
		    <[104|[107|[101|[121|[95|Root0]]]]]> when 'true' ->
			%% Line 373
			Root0
		    %% Line 374
		    <Root0> when 'true' ->
			%% Line 375
			Root0
		  end
	      in  let <_5> =
		      call %% Line 377
			   'erlang':%% Line 377
				    'list_to_atom'
			  (_3)
		  in  %% Line 377
		      case apply 'root_to_handle'/1
			       (_5) of
			%% Line 378
			<'false'> when 'true' ->
			    %% Line 379
			    {'error','enoent'}
			%% Line 380
			<Handle> when 'true' ->
			    %% Line 381
			    {'ok',Handle,Rest}
		      end
	  %% Line 383
	  <[C|Rest],Result> when 'true' ->
	      %% Line 384
	      apply 'parse_root'/2
		  (Rest, [C|Result])
	  %% Line 385
	  <[],Result> when 'true' ->
	      %% Line 386
	      apply 'parse_root'/2
		  ([92], Result)
	  ( <_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7})
		  -| [{'function_name',{'parse_root',2}}] )
	    -| ['compiler_generated'] )
	end
'root_to_handle'/1 =
    %% Line 388
    fun (_0) ->
	case _0 of
	  <'classes_root'> when 'true' ->
	      2147483648
	  %% Line 389
	  <'hkcr'> when 'true' ->
	      2147483648
	  %% Line 390
	  <'current_user'> when 'true' ->
	      2147483649
	  %% Line 391
	  <'hkcu'> when 'true' ->
	      2147483649
	  %% Line 392
	  <'local_machine'> when 'true' ->
	      2147483650
	  %% Line 393
	  <'hklm'> when 'true' ->
	      2147483650
	  %% Line 394
	  <'users'> when 'true' ->
	      2147483651
	  %% Line 395
	  <'hku'> when 'true' ->
	      2147483651
	  %% Line 396
	  <'current_config'> when 'true' ->
	      2147483653
	  %% Line 397
	  <'hkcc'> when 'true' ->
	      2147483653
	  %% Line 398
	  <'dyn_data'> when 'true' ->
	      2147483654
	  %% Line 399
	  <'hkdd'> when 'true' ->
	      2147483654
	  %% Line 400
	  <'performance_data'> when 'true' ->
	      2147483652
	  %% Line 401
	  <_2> when 'true' ->
	      'false'
	end
'hkey_to_string'/1 =
    %% Line 403
    fun (_0) ->
	case _0 of
	  <2147483648> when 'true' ->
	      [92|[104|[107|[101|[121|[95|[99|[108|[97|[115|[115|[101|[115|[95|[114|[111|[111|[116]]]]]]]]]]]]]]]]]]
	  %% Line 404
	  <2147483649> when 'true' ->
	      [92|[104|[107|[101|[121|[95|[99|[117|[114|[114|[101|[110|[116|[95|[117|[115|[101|[114]]]]]]]]]]]]]]]]]]
	  %% Line 405
	  <2147483650> when 'true' ->
	      [92|[104|[107|[101|[121|[95|[108|[111|[99|[97|[108|[95|[109|[97|[99|[104|[105|[110|[101]]]]]]]]]]]]]]]]]]]
	  %% Line 406
	  <2147483651> when 'true' ->
	      [92|[104|[107|[101|[121|[95|[117|[115|[101|[114|[115]]]]]]]]]]]
	  %% Line 407
	  <2147483652> when 'true' ->
	      [92|[104|[107|[101|[121|[95|[112|[101|[114|[102|[111|[114|[109|[97|[110|[99|[101|[95|[100|[97|[116|[97]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 408
	  <2147483653> when 'true' ->
	      [92|[104|[107|[101|[121|[95|[99|[117|[114|[114|[101|[110|[116|[95|[99|[111|[110|[102|[105|[103]]]]]]]]]]]]]]]]]]]]
	  %% Line 409
	  <2147483654> when 'true' ->
	      [92|[104|[107|[101|[121|[95|[100|[121|[110|[95|[100|[97|[116|[97]]]]]]]]]]]]]]
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'hkey_to_string',1}}] )
	    -| ['compiler_generated'] )
	end
'open_mode'/2 =
    %% Line 411
    fun (_0,_1) ->
	case <_0,_1> of
	  <['read'|Rest],Result> when 'true' ->
	      %% Line 412
	      apply 'open_mode'/2
		  (Rest, [114|Result])
	  %% Line 413
	  <['write'|Rest],Result> when 'true' ->
	      %% Line 414
	      apply 'open_mode'/2
		  (Rest, [119|Result])
	  %% Line 415
	  <[],Result> when 'true' ->
	      %% Line 416
	      Result
	  %% Line 417
	  <_4,_5> when 'true' ->
	      %% Line 418
	      {'error','einval'}
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('win32reg')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('win32reg', _0)
end