module 'lists' ['all'/2,
		'any'/2,
		'append'/1,
		'append'/2,
		'concat'/1,
		'delete'/2,
		'droplast'/1,
		'dropwhile'/2,
		'duplicate'/2,
		'filter'/2,
		'filtermap'/2,
		'flatlength'/1,
		'flatmap'/2,
		'flatten'/1,
		'flatten'/2,
		'foldl'/3,
		'foldr'/3,
		'foreach'/2,
		'join'/2,
		'keydelete'/3,
		'keyfind'/3,
		'keymap'/3,
		'keymember'/3,
		'keymerge'/3,
		'keyreplace'/4,
		'keysearch'/3,
		'keysort'/2,
		'keystore'/4,
		'keytake'/3,
		'last'/1,
		'map'/2,
		'mapfoldl'/3,
		'mapfoldr'/3,
		'max'/1,
		'member'/2,
		'merge'/1,
		'merge'/2,
		'merge'/3,
		'merge3'/3,
		'min'/1,
		'module_info'/0,
		'module_info'/1,
		'nth'/2,
		'nthtail'/2,
		'partition'/2,
		'prefix'/2,
		'reverse'/1,
		'reverse'/2,
		'rkeymerge'/3,
		'rmerge'/2,
		'rmerge'/3,
		'rmerge3'/3,
		'rukeymerge'/3,
		'rumerge'/2,
		'rumerge'/3,
		'rumerge3'/3,
		'search'/2,
		'seq'/2,
		'seq'/3,
		'sort'/1,
		'sort'/2,
		'split'/2,
		'splitwith'/2,
		'sublist'/2,
		'sublist'/3,
		'subtract'/2,
		'suffix'/2,
		'sum'/1,
		'takewhile'/2,
		'ukeymerge'/3,
		'ukeysort'/2,
		'umerge'/1,
		'umerge'/2,
		'umerge'/3,
		'umerge3'/3,
		'unzip'/1,
		'unzip3'/1,
		'usort'/1,
		'usort'/2,
		'zf'/2,
		'zip'/2,
		'zip3'/3,
		'zipwith'/3,
		'zipwith3'/4]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[108|[105|[115|[116|[115|[46|[101|[114|[108]]]]]]]]]]]]],1}],
		%% Line 22
		'compile' =
		    %% Line 22
		    [{'no_auto_import',[{'max',2}]}],
		%% Line 23
		'compile' =
		    %% Line 23
		    [{'no_auto_import',[{'min',2}]}],
		%% Line 49
		'spec' =
		    %% Line 49
		    [{{'keyfind',3},[{'type',49,'bounded_fun',[{'type',49,'fun',[{'type',49,'product',[{'var',49,'Key'}|[{'var',49,'N'}|[{'var',49,'TupleList'}]]]}|[{'type',49,'union',[{'var',49,'Tuple'}|[{'atom',49,'false'}]]}]]}|[[{'type',50,'constraint',[{'atom',50,'is_subtype'}|[[{'var',50,'Key'}|[{'type',50,'term',[]}]]]]}|[{'type',51,'constraint',[{'atom',51,'is_subtype'}|[[{'var',51,'N'}|[{'type',51,'pos_integer',[]}]]]]}|[{'type',52,'constraint',[{'atom',52,'is_subtype'}|[[{'var',52,'TupleList'}|[{'type',52,'list',[{'var',52,'Tuple'}]}]]]]}|[{'type',53,'constraint',[{'atom',53,'is_subtype'}|[[{'var',53,'Tuple'}|[{'type',53,'tuple','any'}]]]]}]]]]]]}]}],
		%% Line 59
		'spec' =
		    %% Line 59
		    [{{'keymember',3},[{'type',59,'bounded_fun',[{'type',59,'fun',[{'type',59,'product',[{'var',59,'Key'}|[{'var',59,'N'}|[{'var',59,'TupleList'}]]]}|[{'type',59,'boolean',[]}]]}|[[{'type',60,'constraint',[{'atom',60,'is_subtype'}|[[{'var',60,'Key'}|[{'type',60,'term',[]}]]]]}|[{'type',61,'constraint',[{'atom',61,'is_subtype'}|[[{'var',61,'N'}|[{'type',61,'pos_integer',[]}]]]]}|[{'type',62,'constraint',[{'atom',62,'is_subtype'}|[[{'var',62,'TupleList'}|[{'type',62,'list',[{'var',62,'Tuple'}]}]]]]}|[{'type',63,'constraint',[{'atom',63,'is_subtype'}|[[{'var',63,'Tuple'}|[{'type',63,'tuple','any'}]]]]}]]]]]]}]}],
		%% Line 69
		'spec' =
		    %% Line 69
		    [{{'keysearch',3},[{'type',69,'bounded_fun',[{'type',69,'fun',[{'type',69,'product',[{'var',69,'Key'}|[{'var',69,'N'}|[{'var',69,'TupleList'}]]]}|[{'type',69,'union',[{'type',69,'tuple',[{'atom',69,'value'}|[{'var',69,'Tuple'}]]}|[{'atom',69,'false'}]]}]]}|[[{'type',70,'constraint',[{'atom',70,'is_subtype'}|[[{'var',70,'Key'}|[{'type',70,'term',[]}]]]]}|[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'N'}|[{'type',71,'pos_integer',[]}]]]]}|[{'type',72,'constraint',[{'atom',72,'is_subtype'}|[[{'var',72,'TupleList'}|[{'type',72,'list',[{'var',72,'Tuple'}]}]]]]}|[{'type',73,'constraint',[{'atom',73,'is_subtype'}|[[{'var',73,'Tuple'}|[{'type',73,'tuple','any'}]]]]}]]]]]]}]}],
		%% Line 79
		'spec' =
		    %% Line 79
		    [{{'member',2},[{'type',79,'bounded_fun',[{'type',79,'fun',[{'type',79,'product',[{'var',79,'Elem'}|[{'var',79,'List'}]]}|[{'type',79,'boolean',[]}]]}|[[{'type',80,'constraint',[{'atom',80,'is_subtype'}|[[{'var',80,'Elem'}|[{'var',80,'T'}]]]]}|[{'type',81,'constraint',[{'atom',81,'is_subtype'}|[[{'var',81,'List'}|[{'type',81,'list',[{'var',81,'T'}]}]]]]}|[{'type',82,'constraint',[{'atom',82,'is_subtype'}|[[{'var',82,'T'}|[{'type',82,'term',[]}]]]]}]]]]]}]}],
		%% Line 88
		'spec' =
		    %% Line 88
		    [{{'reverse',2},[{'type',88,'bounded_fun',[{'type',88,'fun',[{'type',88,'product',[{'var',88,'List1'}|[{'var',88,'Tail'}]]}|[{'var',88,'List2'}]]}|[[{'type',89,'constraint',[{'atom',89,'is_subtype'}|[[{'var',89,'List1'}|[{'type',89,'list',[{'var',89,'T'}]}]]]]}|[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'Tail'}|[{'type',90,'term',[]}]]]]}|[{'type',91,'constraint',[{'atom',91,'is_subtype'}|[[{'var',91,'List2'}|[{'type',91,'list',[{'var',91,'T'}]}]]]]}|[{'type',92,'constraint',[{'atom',92,'is_subtype'}|[[{'var',92,'T'}|[{'type',92,'term',[]}]]]]}]]]]]]}]}],
		%% Line 110
		'spec' =
		    %% Line 110
		    [{{'append',2},[{'type',110,'bounded_fun',[{'type',110,'fun',[{'type',110,'product',[{'var',110,'List1'}|[{'var',110,'List2'}]]}|[{'var',110,'List3'}]]}|[[{'type',111,'constraint',[{'atom',111,'is_subtype'}|[[{'var',111,'List1'}|[{'type',111,'list',[{'var',111,'T'}]}]]]]}|[{'type',112,'constraint',[{'atom',112,'is_subtype'}|[[{'var',112,'List2'}|[{'type',112,'list',[{'var',112,'T'}]}]]]]}|[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'List3'}|[{'type',113,'list',[{'var',113,'T'}]}]]]]}|[{'type',114,'constraint',[{'atom',114,'is_subtype'}|[[{'var',114,'T'}|[{'type',114,'term',[]}]]]]}]]]]]]}]}],
		%% Line 120
		'spec' =
		    %% Line 120
		    [{{'append',1},[{'type',120,'bounded_fun',[{'type',120,'fun',[{'type',120,'product',[{'var',120,'ListOfLists'}]}|[{'var',120,'List1'}]]}|[[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'ListOfLists'}|[{'type',121,'list',[{'var',121,'List'}]}]]]]}|[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'List'}|[{'type',122,'list',[{'var',122,'T'}]}]]]]}|[{'type',123,'constraint',[{'atom',123,'is_subtype'}|[[{'var',123,'List1'}|[{'type',123,'list',[{'var',123,'T'}]}]]]]}|[{'type',124,'constraint',[{'atom',124,'is_subtype'}|[[{'var',124,'T'}|[{'type',124,'term',[]}]]]]}]]]]]]}]}],
		%% Line 132
		'spec' =
		    %% Line 132
		    [{{'subtract',2},[{'type',132,'bounded_fun',[{'type',132,'fun',[{'type',132,'product',[{'var',132,'List1'}|[{'var',132,'List2'}]]}|[{'var',132,'List3'}]]}|[[{'type',133,'constraint',[{'atom',133,'is_subtype'}|[[{'var',133,'List1'}|[{'type',133,'list',[{'var',133,'T'}]}]]]]}|[{'type',134,'constraint',[{'atom',134,'is_subtype'}|[[{'var',134,'List2'}|[{'type',134,'list',[{'var',134,'T'}]}]]]]}|[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'List3'}|[{'type',135,'list',[{'var',135,'T'}]}]]]]}|[{'type',136,'constraint',[{'atom',136,'is_subtype'}|[[{'var',136,'T'}|[{'type',136,'term',[]}]]]]}]]]]]]}]}],
		%% Line 142
		'spec' =
		    %% Line 142
		    [{{'reverse',1},[{'type',142,'bounded_fun',[{'type',142,'fun',[{'type',142,'product',[{'var',142,'List1'}]}|[{'var',142,'List2'}]]}|[[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'List1'}|[{'type',143,'list',[{'var',143,'T'}]}]]]]}|[{'type',144,'constraint',[{'atom',144,'is_subtype'}|[[{'var',144,'List2'}|[{'type',144,'list',[{'var',144,'T'}]}]]]]}|[{'type',145,'constraint',[{'atom',145,'is_subtype'}|[[{'var',145,'T'}|[{'type',145,'term',[]}]]]]}]]]]]}]}],
		%% Line 164
		'spec' =
		    %% Line 164
		    [{{'nth',2},[{'type',164,'bounded_fun',[{'type',164,'fun',[{'type',164,'product',[{'var',164,'N'}|[{'var',164,'List'}]]}|[{'var',164,'Elem'}]]}|[[{'type',165,'constraint',[{'atom',165,'is_subtype'}|[[{'var',165,'N'}|[{'type',165,'pos_integer',[]}]]]]}|[{'type',166,'constraint',[{'atom',166,'is_subtype'}|[[{'var',166,'List'}|[{'type',166,'nonempty_list',[{'var',166,'T'}]}]]]]}|[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'Elem'}|[{'var',167,'T'}]]]]}|[{'type',168,'constraint',[{'atom',168,'is_subtype'}|[[{'var',168,'T'}|[{'type',168,'term',[]}]]]]}]]]]]]}]}],
		%% Line 174
		'spec' =
		    %% Line 174
		    [{{'nthtail',2},[{'type',174,'bounded_fun',[{'type',174,'fun',[{'type',174,'product',[{'var',174,'N'}|[{'var',174,'List'}]]}|[{'var',174,'Tail'}]]}|[[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'N'}|[{'type',175,'non_neg_integer',[]}]]]]}|[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'List'}|[{'type',176,'nonempty_list',[{'var',176,'T'}]}]]]]}|[{'type',177,'constraint',[{'atom',177,'is_subtype'}|[[{'var',177,'Tail'}|[{'type',177,'list',[{'var',177,'T'}]}]]]]}|[{'type',178,'constraint',[{'atom',178,'is_subtype'}|[[{'var',178,'T'}|[{'type',178,'term',[]}]]]]}]]]]]]}]}],
		%% Line 187
		'spec' =
		    %% Line 187
		    [{{'prefix',2},[{'type',187,'bounded_fun',[{'type',187,'fun',[{'type',187,'product',[{'var',187,'List1'}|[{'var',187,'List2'}]]}|[{'type',187,'boolean',[]}]]}|[[{'type',188,'constraint',[{'atom',188,'is_subtype'}|[[{'var',188,'List1'}|[{'type',188,'list',[{'var',188,'T'}]}]]]]}|[{'type',189,'constraint',[{'atom',189,'is_subtype'}|[[{'var',189,'List2'}|[{'type',189,'list',[{'var',189,'T'}]}]]]]}|[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'T'}|[{'type',190,'term',[]}]]]]}]]]]]}]}],
		%% Line 199
		'spec' =
		    %% Line 199
		    [{{'suffix',2},[{'type',199,'bounded_fun',[{'type',199,'fun',[{'type',199,'product',[{'var',199,'List1'}|[{'var',199,'List2'}]]}|[{'type',199,'boolean',[]}]]}|[[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'List1'}|[{'type',200,'list',[{'var',200,'T'}]}]]]]}|[{'type',201,'constraint',[{'atom',201,'is_subtype'}|[[{'var',201,'List2'}|[{'type',201,'list',[{'var',201,'T'}]}]]]]}|[{'type',202,'constraint',[{'atom',202,'is_subtype'}|[[{'var',202,'T'}|[{'type',202,'term',[]}]]]]}]]]]]}]}],
		%% Line 210
		'spec' =
		    %% Line 210
		    [{{'droplast',1},[{'type',210,'bounded_fun',[{'type',210,'fun',[{'type',210,'product',[{'var',210,'List'}]}|[{'var',210,'InitList'}]]}|[[{'type',211,'constraint',[{'atom',211,'is_subtype'}|[[{'var',211,'List'}|[{'type',211,'nonempty_list',[{'var',211,'T'}]}]]]]}|[{'type',212,'constraint',[{'atom',212,'is_subtype'}|[[{'var',212,'InitList'}|[{'type',212,'list',[{'var',212,'T'}]}]]]]}|[{'type',213,'constraint',[{'atom',213,'is_subtype'}|[[{'var',213,'T'}|[{'type',213,'term',[]}]]]]}]]]]]}]}],
		%% Line 223
		'spec' =
		    %% Line 223
		    [{{'last',1},[{'type',223,'bounded_fun',[{'type',223,'fun',[{'type',223,'product',[{'var',223,'List'}]}|[{'var',223,'Last'}]]}|[[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'List'}|[{'type',224,'nonempty_list',[{'var',224,'T'}]}]]]]}|[{'type',225,'constraint',[{'atom',225,'is_subtype'}|[[{'var',225,'Last'}|[{'var',225,'T'}]]]]}|[{'type',226,'constraint',[{'atom',226,'is_subtype'}|[[{'var',226,'T'}|[{'type',226,'term',[]}]]]]}]]]]]}]}],
		%% Line 238
		'spec' =
		    %% Line 238
		    [{{'seq',2},[{'type',238,'bounded_fun',[{'type',238,'fun',[{'type',238,'product',[{'var',238,'From'}|[{'var',238,'To'}]]}|[{'var',238,'Seq'}]]}|[[{'type',239,'constraint',[{'atom',239,'is_subtype'}|[[{'var',239,'From'}|[{'type',239,'integer',[]}]]]]}|[{'type',240,'constraint',[{'atom',240,'is_subtype'}|[[{'var',240,'To'}|[{'type',240,'integer',[]}]]]]}|[{'type',241,'constraint',[{'atom',241,'is_subtype'}|[[{'var',241,'Seq'}|[{'type',241,'list',[{'type',241,'integer',[]}]}]]]]}]]]]]}]}],
		%% Line 256
		'spec' =
		    %% Line 256
		    [{{'seq',3},[{'type',256,'bounded_fun',[{'type',256,'fun',[{'type',256,'product',[{'var',256,'From'}|[{'var',256,'To'}|[{'var',256,'Incr'}]]]}|[{'var',256,'Seq'}]]}|[[{'type',257,'constraint',[{'atom',257,'is_subtype'}|[[{'var',257,'From'}|[{'type',257,'integer',[]}]]]]}|[{'type',258,'constraint',[{'atom',258,'is_subtype'}|[[{'var',258,'To'}|[{'type',258,'integer',[]}]]]]}|[{'type',259,'constraint',[{'atom',259,'is_subtype'}|[[{'var',259,'Incr'}|[{'type',259,'integer',[]}]]]]}|[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'Seq'}|[{'type',260,'list',[{'type',260,'integer',[]}]}]]]]}]]]]]]}]}],
		%% Line 286
		'spec' =
		    %% Line 286
		    [{{'sum',1},[{'type',286,'bounded_fun',[{'type',286,'fun',[{'type',286,'product',[{'var',286,'List'}]}|[{'type',286,'number',[]}]]}|[[{'type',287,'constraint',[{'atom',287,'is_subtype'}|[[{'var',287,'List'}|[{'type',287,'list',[{'type',287,'number',[]}]}]]]]}]]]}]}],
		%% Line 297
		'spec' =
		    %% Line 297
		    [{{'duplicate',2},[{'type',297,'bounded_fun',[{'type',297,'fun',[{'type',297,'product',[{'var',297,'N'}|[{'var',297,'Elem'}]]}|[{'var',297,'List'}]]}|[[{'type',298,'constraint',[{'atom',298,'is_subtype'}|[[{'var',298,'N'}|[{'type',298,'non_neg_integer',[]}]]]]}|[{'type',299,'constraint',[{'atom',299,'is_subtype'}|[[{'var',299,'Elem'}|[{'var',299,'T'}]]]]}|[{'type',300,'constraint',[{'atom',300,'is_subtype'}|[[{'var',300,'List'}|[{'type',300,'list',[{'var',300,'T'}]}]]]]}|[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'T'}|[{'type',301,'term',[]}]]]]}]]]]]]}]}],
		%% Line 310
		'spec' =
		    %% Line 310
		    [{{'min',1},[{'type',310,'bounded_fun',[{'type',310,'fun',[{'type',310,'product',[{'var',310,'List'}]}|[{'var',310,'Min'}]]}|[[{'type',311,'constraint',[{'atom',311,'is_subtype'}|[[{'var',311,'List'}|[{'type',311,'nonempty_list',[{'var',311,'T'}]}]]]]}|[{'type',312,'constraint',[{'atom',312,'is_subtype'}|[[{'var',312,'Min'}|[{'var',312,'T'}]]]]}|[{'type',313,'constraint',[{'atom',313,'is_subtype'}|[[{'var',313,'T'}|[{'type',313,'term',[]}]]]]}]]]]]}]}],
		%% Line 323
		'spec' =
		    %% Line 323
		    [{{'max',1},[{'type',323,'bounded_fun',[{'type',323,'fun',[{'type',323,'product',[{'var',323,'List'}]}|[{'var',323,'Max'}]]}|[[{'type',324,'constraint',[{'atom',324,'is_subtype'}|[[{'var',324,'List'}|[{'type',324,'nonempty_list',[{'var',324,'T'}]}]]]]}|[{'type',325,'constraint',[{'atom',325,'is_subtype'}|[[{'var',325,'Max'}|[{'var',325,'T'}]]]]}|[{'type',326,'constraint',[{'atom',326,'is_subtype'}|[[{'var',326,'T'}|[{'type',326,'term',[]}]]]]}]]]]]}]}],
		%% Line 337
		'spec' =
		    %% Line 337
		    [{{'sublist',3},[{'type',337,'bounded_fun',[{'type',337,'fun',[{'type',337,'product',[{'var',337,'List1'}|[{'var',337,'Start'}|[{'var',337,'Len'}]]]}|[{'var',337,'List2'}]]}|[[{'type',338,'constraint',[{'atom',338,'is_subtype'}|[[{'var',338,'List1'}|[{'type',338,'list',[{'var',338,'T'}]}]]]]}|[{'type',339,'constraint',[{'atom',339,'is_subtype'}|[[{'var',339,'List2'}|[{'type',339,'list',[{'var',339,'T'}]}]]]]}|[{'type',340,'constraint',[{'atom',340,'is_subtype'}|[[{'var',340,'Start'}|[{'type',340,'pos_integer',[]}]]]]}|[{'type',341,'constraint',[{'atom',341,'is_subtype'}|[[{'var',341,'Len'}|[{'type',341,'non_neg_integer',[]}]]]]}|[{'type',342,'constraint',[{'atom',342,'is_subtype'}|[[{'var',342,'T'}|[{'type',342,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 347
		'spec' =
		    %% Line 347
		    [{{'sublist',2},[{'type',347,'bounded_fun',[{'type',347,'fun',[{'type',347,'product',[{'var',347,'List1'}|[{'var',347,'Len'}]]}|[{'var',347,'List2'}]]}|[[{'type',348,'constraint',[{'atom',348,'is_subtype'}|[[{'var',348,'List1'}|[{'type',348,'list',[{'var',348,'T'}]}]]]]}|[{'type',349,'constraint',[{'atom',349,'is_subtype'}|[[{'var',349,'List2'}|[{'type',349,'list',[{'var',349,'T'}]}]]]]}|[{'type',350,'constraint',[{'atom',350,'is_subtype'}|[[{'var',350,'Len'}|[{'type',350,'non_neg_integer',[]}]]]]}|[{'type',351,'constraint',[{'atom',351,'is_subtype'}|[[{'var',351,'T'}|[{'type',351,'term',[]}]]]]}]]]]]]}]}],
		%% Line 366
		'spec' =
		    %% Line 366
		    [{{'delete',2},[{'type',366,'bounded_fun',[{'type',366,'fun',[{'type',366,'product',[{'var',366,'Elem'}|[{'var',366,'List1'}]]}|[{'var',366,'List2'}]]}|[[{'type',367,'constraint',[{'atom',367,'is_subtype'}|[[{'var',367,'Elem'}|[{'var',367,'T'}]]]]}|[{'type',368,'constraint',[{'atom',368,'is_subtype'}|[[{'var',368,'List1'}|[{'type',368,'list',[{'var',368,'T'}]}]]]]}|[{'type',369,'constraint',[{'atom',369,'is_subtype'}|[[{'var',369,'List2'}|[{'type',369,'list',[{'var',369,'T'}]}]]]]}|[{'type',370,'constraint',[{'atom',370,'is_subtype'}|[[{'var',370,'T'}|[{'type',370,'term',[]}]]]]}]]]]]]}]}],
		%% Line 380
		'spec' =
		    %% Line 380
		    [{{'zip',2},[{'type',380,'bounded_fun',[{'type',380,'fun',[{'type',380,'product',[{'var',380,'List1'}|[{'var',380,'List2'}]]}|[{'var',380,'List3'}]]}|[[{'type',381,'constraint',[{'atom',381,'is_subtype'}|[[{'var',381,'List1'}|[{'type',381,'list',[{'var',381,'A'}]}]]]]}|[{'type',382,'constraint',[{'atom',382,'is_subtype'}|[[{'var',382,'List2'}|[{'type',382,'list',[{'var',382,'B'}]}]]]]}|[{'type',383,'constraint',[{'atom',383,'is_subtype'}|[[{'var',383,'List3'}|[{'type',383,'list',[{'type',383,'tuple',[{'var',383,'A'}|[{'var',383,'B'}]]}]}]]]]}|[{'type',384,'constraint',[{'atom',384,'is_subtype'}|[[{'var',384,'A'}|[{'type',384,'term',[]}]]]]}|[{'type',385,'constraint',[{'atom',385,'is_subtype'}|[[{'var',385,'B'}|[{'type',385,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 393
		'spec' =
		    %% Line 393
		    [{{'unzip',1},[{'type',393,'bounded_fun',[{'type',393,'fun',[{'type',393,'product',[{'var',393,'List1'}]}|[{'type',393,'tuple',[{'var',393,'List2'}|[{'var',393,'List3'}]]}]]}|[[{'type',394,'constraint',[{'atom',394,'is_subtype'}|[[{'var',394,'List1'}|[{'type',394,'list',[{'type',394,'tuple',[{'var',394,'A'}|[{'var',394,'B'}]]}]}]]]]}|[{'type',395,'constraint',[{'atom',395,'is_subtype'}|[[{'var',395,'List2'}|[{'type',395,'list',[{'var',395,'A'}]}]]]]}|[{'type',396,'constraint',[{'atom',396,'is_subtype'}|[[{'var',396,'List3'}|[{'type',396,'list',[{'var',396,'B'}]}]]]]}|[{'type',397,'constraint',[{'atom',397,'is_subtype'}|[[{'var',397,'A'}|[{'type',397,'term',[]}]]]]}|[{'type',398,'constraint',[{'atom',398,'is_subtype'}|[[{'var',398,'B'}|[{'type',398,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 408
		'spec' =
		    %% Line 408
		    [{{'zip3',3},[{'type',408,'bounded_fun',[{'type',408,'fun',[{'type',408,'product',[{'var',408,'List1'}|[{'var',408,'List2'}|[{'var',408,'List3'}]]]}|[{'var',408,'List4'}]]}|[[{'type',409,'constraint',[{'atom',409,'is_subtype'}|[[{'var',409,'List1'}|[{'type',409,'list',[{'var',409,'A'}]}]]]]}|[{'type',410,'constraint',[{'atom',410,'is_subtype'}|[[{'var',410,'List2'}|[{'type',410,'list',[{'var',410,'B'}]}]]]]}|[{'type',411,'constraint',[{'atom',411,'is_subtype'}|[[{'var',411,'List3'}|[{'type',411,'list',[{'var',411,'C'}]}]]]]}|[{'type',412,'constraint',[{'atom',412,'is_subtype'}|[[{'var',412,'List4'}|[{'type',412,'list',[{'type',412,'tuple',[{'var',412,'A'}|[{'var',412,'B'}|[{'var',412,'C'}]]]}]}]]]]}|[{'type',413,'constraint',[{'atom',413,'is_subtype'}|[[{'var',413,'A'}|[{'type',413,'term',[]}]]]]}|[{'type',414,'constraint',[{'atom',414,'is_subtype'}|[[{'var',414,'B'}|[{'type',414,'term',[]}]]]]}|[{'type',415,'constraint',[{'atom',415,'is_subtype'}|[[{'var',415,'C'}|[{'type',415,'term',[]}]]]]}]]]]]]]]]}]}],
		%% Line 423
		'spec' =
		    %% Line 423
		    [{{'unzip3',1},[{'type',423,'bounded_fun',[{'type',423,'fun',[{'type',423,'product',[{'var',423,'List1'}]}|[{'type',423,'tuple',[{'var',423,'List2'}|[{'var',423,'List3'}|[{'var',423,'List4'}]]]}]]}|[[{'type',424,'constraint',[{'atom',424,'is_subtype'}|[[{'var',424,'List1'}|[{'type',424,'list',[{'type',424,'tuple',[{'var',424,'A'}|[{'var',424,'B'}|[{'var',424,'C'}]]]}]}]]]]}|[{'type',425,'constraint',[{'atom',425,'is_subtype'}|[[{'var',425,'List2'}|[{'type',425,'list',[{'var',425,'A'}]}]]]]}|[{'type',426,'constraint',[{'atom',426,'is_subtype'}|[[{'var',426,'List3'}|[{'type',426,'list',[{'var',426,'B'}]}]]]]}|[{'type',427,'constraint',[{'atom',427,'is_subtype'}|[[{'var',427,'List4'}|[{'type',427,'list',[{'var',427,'C'}]}]]]]}|[{'type',428,'constraint',[{'atom',428,'is_subtype'}|[[{'var',428,'A'}|[{'type',428,'term',[]}]]]]}|[{'type',429,'constraint',[{'atom',429,'is_subtype'}|[[{'var',429,'B'}|[{'type',429,'term',[]}]]]]}|[{'type',430,'constraint',[{'atom',430,'is_subtype'}|[[{'var',430,'C'}|[{'type',430,'term',[]}]]]]}]]]]]]]]]}]}],
		%% Line 442
		'spec' =
		    %% Line 442
		    [{{'zipwith',3},[{'type',442,'bounded_fun',[{'type',442,'fun',[{'type',442,'product',[{'var',442,'Combine'}|[{'var',442,'List1'}|[{'var',442,'List2'}]]]}|[{'var',442,'List3'}]]}|[[{'type',443,'constraint',[{'atom',443,'is_subtype'}|[[{'var',443,'Combine'}|[{'type',443,'fun',[{'type',443,'product',[{'var',443,'X'}|[{'var',443,'Y'}]]}|[{'var',443,'T'}]]}]]]]}|[{'type',444,'constraint',[{'atom',444,'is_subtype'}|[[{'var',444,'List1'}|[{'type',444,'list',[{'var',444,'X'}]}]]]]}|[{'type',445,'constraint',[{'atom',445,'is_subtype'}|[[{'var',445,'List2'}|[{'type',445,'list',[{'var',445,'Y'}]}]]]]}|[{'type',446,'constraint',[{'atom',446,'is_subtype'}|[[{'var',446,'List3'}|[{'type',446,'list',[{'var',446,'T'}]}]]]]}|[{'type',447,'constraint',[{'atom',447,'is_subtype'}|[[{'var',447,'X'}|[{'type',447,'term',[]}]]]]}|[{'type',448,'constraint',[{'atom',448,'is_subtype'}|[[{'var',448,'Y'}|[{'type',448,'term',[]}]]]]}|[{'type',449,'constraint',[{'atom',449,'is_subtype'}|[[{'var',449,'T'}|[{'type',449,'term',[]}]]]]}]]]]]]]]]}]}],
		%% Line 457
		'spec' =
		    %% Line 457
		    [{{'zipwith3',4},[{'type',457,'bounded_fun',[{'type',457,'fun',[{'type',457,'product',[{'var',457,'Combine'}|[{'var',457,'List1'}|[{'var',457,'List2'}|[{'var',457,'List3'}]]]]}|[{'var',457,'List4'}]]}|[[{'type',458,'constraint',[{'atom',458,'is_subtype'}|[[{'var',458,'Combine'}|[{'type',458,'fun',[{'type',458,'product',[{'var',458,'X'}|[{'var',458,'Y'}|[{'var',458,'Z'}]]]}|[{'var',458,'T'}]]}]]]]}|[{'type',459,'constraint',[{'atom',459,'is_subtype'}|[[{'var',459,'List1'}|[{'type',459,'list',[{'var',459,'X'}]}]]]]}|[{'type',460,'constraint',[{'atom',460,'is_subtype'}|[[{'var',460,'List2'}|[{'type',460,'list',[{'var',460,'Y'}]}]]]]}|[{'type',461,'constraint',[{'atom',461,'is_subtype'}|[[{'var',461,'List3'}|[{'type',461,'list',[{'var',461,'Z'}]}]]]]}|[{'type',462,'constraint',[{'atom',462,'is_subtype'}|[[{'var',462,'List4'}|[{'type',462,'list',[{'var',462,'T'}]}]]]]}|[{'type',463,'constraint',[{'atom',463,'is_subtype'}|[[{'var',463,'X'}|[{'type',463,'term',[]}]]]]}|[{'type',464,'constraint',[{'atom',464,'is_subtype'}|[[{'var',464,'Y'}|[{'type',464,'term',[]}]]]]}|[{'type',465,'constraint',[{'atom',465,'is_subtype'}|[[{'var',465,'Z'}|[{'type',465,'term',[]}]]]]}|[{'type',466,'constraint',[{'atom',466,'is_subtype'}|[[{'var',466,'T'}|[{'type',466,'term',[]}]]]]}]]]]]]]]]]]}]}],
		%% Line 475
		'spec' =
		    %% Line 475
		    [{{'sort',1},[{'type',475,'bounded_fun',[{'type',475,'fun',[{'type',475,'product',[{'var',475,'List1'}]}|[{'var',475,'List2'}]]}|[[{'type',476,'constraint',[{'atom',476,'is_subtype'}|[[{'var',476,'List1'}|[{'type',476,'list',[{'var',476,'T'}]}]]]]}|[{'type',477,'constraint',[{'atom',477,'is_subtype'}|[[{'var',477,'List2'}|[{'type',477,'list',[{'var',477,'T'}]}]]]]}|[{'type',478,'constraint',[{'atom',478,'is_subtype'}|[[{'var',478,'T'}|[{'type',478,'term',[]}]]]]}]]]]]}]}],
		%% Line 525
		'spec' =
		    %% Line 525
		    [{{'merge',1},[{'type',525,'bounded_fun',[{'type',525,'fun',[{'type',525,'product',[{'var',525,'ListOfLists'}]}|[{'var',525,'List1'}]]}|[[{'type',526,'constraint',[{'atom',526,'is_subtype'}|[[{'var',526,'ListOfLists'}|[{'type',526,'list',[{'var',526,'List'}]}]]]]}|[{'type',527,'constraint',[{'atom',527,'is_subtype'}|[[{'var',527,'List'}|[{'type',527,'list',[{'var',527,'T'}]}]]]]}|[{'type',528,'constraint',[{'atom',528,'is_subtype'}|[[{'var',528,'List1'}|[{'type',528,'list',[{'var',528,'T'}]}]]]]}|[{'type',529,'constraint',[{'atom',529,'is_subtype'}|[[{'var',529,'T'}|[{'type',529,'term',[]}]]]]}]]]]]]}]}],
		%% Line 537
		'spec' =
		    %% Line 537
		    [{{'merge3',3},[{'type',537,'bounded_fun',[{'type',537,'fun',[{'type',537,'product',[{'var',537,'List1'}|[{'var',537,'List2'}|[{'var',537,'List3'}]]]}|[{'var',537,'List4'}]]}|[[{'type',538,'constraint',[{'atom',538,'is_subtype'}|[[{'var',538,'List1'}|[{'type',538,'list',[{'var',538,'X'}]}]]]]}|[{'type',539,'constraint',[{'atom',539,'is_subtype'}|[[{'var',539,'List2'}|[{'type',539,'list',[{'var',539,'Y'}]}]]]]}|[{'type',540,'constraint',[{'atom',540,'is_subtype'}|[[{'var',540,'List3'}|[{'type',540,'list',[{'var',540,'Z'}]}]]]]}|[{'type',541,'constraint',[{'atom',541,'is_subtype'}|[[{'var',541,'List4'}|[{'type',541,'list',[{'type',541,'union',[{'var',541,'X'}|[{'var',541,'Y'}|[{'var',541,'Z'}]]]}]}]]]]}|[{'type',542,'constraint',[{'atom',542,'is_subtype'}|[[{'var',542,'X'}|[{'type',542,'term',[]}]]]]}|[{'type',543,'constraint',[{'atom',543,'is_subtype'}|[[{'var',543,'Y'}|[{'type',543,'term',[]}]]]]}|[{'type',544,'constraint',[{'atom',544,'is_subtype'}|[[{'var',544,'Z'}|[{'type',544,'term',[]}]]]]}]]]]]]]]]}]}],
		%% Line 556
		'spec' =
		    %% Line 556
		    [{{'rmerge3',3},[{'type',556,'fun',[{'type',556,'product',[{'type',556,'list',[{'var',556,'X'}]}|[{'type',556,'list',[{'var',556,'Y'}]}|[{'type',556,'list',[{'var',556,'Z'}]}]]]}|[{'type',556,'list',[{'type',556,'union',[{'var',556,'X'}|[{'var',556,'Y'}|[{'var',556,'Z'}]]]}]}]]}]}],
		%% Line 568
		'spec' =
		    %% Line 568
		    [{{'merge',2},[{'type',568,'bounded_fun',[{'type',568,'fun',[{'type',568,'product',[{'var',568,'List1'}|[{'var',568,'List2'}]]}|[{'var',568,'List3'}]]}|[[{'type',569,'constraint',[{'atom',569,'is_subtype'}|[[{'var',569,'List1'}|[{'type',569,'list',[{'var',569,'X'}]}]]]]}|[{'type',570,'constraint',[{'atom',570,'is_subtype'}|[[{'var',570,'List2'}|[{'type',570,'list',[{'var',570,'Y'}]}]]]]}|[{'type',571,'constraint',[{'atom',571,'is_subtype'}|[[{'var',571,'List3'}|[{'type',571,'list',[{'type',571,'union',[{'var',571,'X'}|[{'var',571,'Y'}]]}]}]]]]}|[{'type',572,'constraint',[{'atom',572,'is_subtype'}|[[{'var',572,'X'}|[{'type',572,'term',[]}]]]]}|[{'type',573,'constraint',[{'atom',573,'is_subtype'}|[[{'var',573,'Y'}|[{'type',573,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 585
		'spec' =
		    %% Line 585
		    [{{'rmerge',2},[{'type',585,'fun',[{'type',585,'product',[{'type',585,'list',[{'var',585,'X'}]}|[{'type',585,'list',[{'var',585,'Y'}]}]]}|[{'type',585,'list',[{'type',585,'union',[{'var',585,'X'}|[{'var',585,'Y'}]]}]}]]}]}],
		%% Line 596
		'spec' =
		    %% Line 596
		    [{{'concat',1},[{'type',596,'bounded_fun',[{'type',596,'fun',[{'type',596,'product',[{'var',596,'Things'}]}|[{'type',596,'string',[]}]]}|[[{'type',597,'constraint',[{'atom',597,'is_subtype'}|[[{'var',597,'Things'}|[{'type',597,'list',[{'var',597,'Thing'}]}]]]]}|[{'type',598,'constraint',[{'atom',598,'is_subtype'}|[[{'var',598,'Thing'}|[{'type',598,'union',[{'type',598,'atom',[]}|[{'type',598,'integer',[]}|[{'type',598,'float',[]}|[{'type',598,'string',[]}]]]]}]]]]}]]]]}]}],
		%% Line 612
		'spec' =
		    %% Line 612
		    [{{'flatten',1},[{'type',612,'bounded_fun',[{'type',612,'fun',[{'type',612,'product',[{'var',612,'DeepList'}]}|[{'var',612,'List'}]]}|[[{'type',613,'constraint',[{'atom',613,'is_subtype'}|[[{'var',613,'DeepList'}|[{'type',613,'list',[{'type',613,'union',[{'type',613,'term',[]}|[{'var',613,'DeepList'}]]}]}]]]]}|[{'type',614,'constraint',[{'atom',614,'is_subtype'}|[[{'var',614,'List'}|[{'type',614,'list',[{'type',614,'term',[]}]}]]]]}]]]]}]}],
		%% Line 619
		'spec' =
		    %% Line 619
		    [{{'flatten',2},[{'type',619,'bounded_fun',[{'type',619,'fun',[{'type',619,'product',[{'var',619,'DeepList'}|[{'var',619,'Tail'}]]}|[{'var',619,'List'}]]}|[[{'type',620,'constraint',[{'atom',620,'is_subtype'}|[[{'var',620,'DeepList'}|[{'type',620,'list',[{'type',620,'union',[{'type',620,'term',[]}|[{'var',620,'DeepList'}]]}]}]]]]}|[{'type',621,'constraint',[{'atom',621,'is_subtype'}|[[{'var',621,'Tail'}|[{'type',621,'list',[{'type',621,'term',[]}]}]]]]}|[{'type',622,'constraint',[{'atom',622,'is_subtype'}|[[{'var',622,'List'}|[{'type',622,'list',[{'type',622,'term',[]}]}]]]]}]]]]]}]}],
		%% Line 637
		'spec' =
		    %% Line 637
		    [{{'flatlength',1},[{'type',637,'bounded_fun',[{'type',637,'fun',[{'type',637,'product',[{'var',637,'DeepList'}]}|[{'type',637,'non_neg_integer',[]}]]}|[[{'type',638,'constraint',[{'atom',638,'is_subtype'}|[[{'var',638,'DeepList'}|[{'type',638,'list',[{'type',638,'union',[{'type',638,'term',[]}|[{'var',638,'DeepList'}]]}]}]]]]}]]]}]}],
		%% Line 680
		'spec' =
		    %% Line 680
		    [{{'keydelete',3},[{'type',680,'bounded_fun',[{'type',680,'fun',[{'type',680,'product',[{'var',680,'Key'}|[{'var',680,'N'}|[{'var',680,'TupleList1'}]]]}|[{'var',680,'TupleList2'}]]}|[[{'type',681,'constraint',[{'atom',681,'is_subtype'}|[[{'var',681,'Key'}|[{'type',681,'term',[]}]]]]}|[{'type',682,'constraint',[{'atom',682,'is_subtype'}|[[{'var',682,'N'}|[{'type',682,'pos_integer',[]}]]]]}|[{'type',683,'constraint',[{'atom',683,'is_subtype'}|[[{'var',683,'TupleList1'}|[{'type',683,'list',[{'var',683,'Tuple'}]}]]]]}|[{'type',684,'constraint',[{'atom',684,'is_subtype'}|[[{'var',684,'TupleList2'}|[{'type',684,'list',[{'var',684,'Tuple'}]}]]]]}|[{'type',685,'constraint',[{'atom',685,'is_subtype'}|[[{'var',685,'Tuple'}|[{'type',685,'tuple','any'}]]]]}]]]]]]]}]}],
		%% Line 695
		'spec' =
		    %% Line 695
		    [{{'keyreplace',4},[{'type',695,'bounded_fun',[{'type',695,'fun',[{'type',695,'product',[{'var',695,'Key'}|[{'var',695,'N'}|[{'var',695,'TupleList1'}|[{'var',695,'NewTuple'}]]]]}|[{'var',695,'TupleList2'}]]}|[[{'type',696,'constraint',[{'atom',696,'is_subtype'}|[[{'var',696,'Key'}|[{'type',696,'term',[]}]]]]}|[{'type',697,'constraint',[{'atom',697,'is_subtype'}|[[{'var',697,'N'}|[{'type',697,'pos_integer',[]}]]]]}|[{'type',698,'constraint',[{'atom',698,'is_subtype'}|[[{'var',698,'TupleList1'}|[{'type',698,'list',[{'var',698,'Tuple'}]}]]]]}|[{'type',699,'constraint',[{'atom',699,'is_subtype'}|[[{'var',699,'TupleList2'}|[{'type',699,'list',[{'var',699,'Tuple'}]}]]]]}|[{'type',700,'constraint',[{'atom',700,'is_subtype'}|[[{'var',700,'NewTuple'}|[{'var',700,'Tuple'}]]]]}|[{'type',701,'constraint',[{'atom',701,'is_subtype'}|[[{'var',701,'Tuple'}|[{'type',701,'tuple','any'}]]]]}]]]]]]]]}]}],
		%% Line 712
		'spec' =
		    %% Line 712
		    [{{'keytake',3},[{'type',712,'bounded_fun',[{'type',712,'fun',[{'type',712,'product',[{'var',712,'Key'}|[{'var',712,'N'}|[{'var',712,'TupleList1'}]]]}|[{'type',712,'union',[{'type',712,'tuple',[{'atom',712,'value'}|[{'var',712,'Tuple'}|[{'var',712,'TupleList2'}]]]}|[{'atom',712,'false'}]]}]]}|[[{'type',713,'constraint',[{'atom',713,'is_subtype'}|[[{'var',713,'Key'}|[{'type',713,'term',[]}]]]]}|[{'type',714,'constraint',[{'atom',714,'is_subtype'}|[[{'var',714,'N'}|[{'type',714,'pos_integer',[]}]]]]}|[{'type',715,'constraint',[{'atom',715,'is_subtype'}|[[{'var',715,'TupleList1'}|[{'type',715,'list',[{'type',715,'tuple','any'}]}]]]]}|[{'type',716,'constraint',[{'atom',716,'is_subtype'}|[[{'var',716,'TupleList2'}|[{'type',716,'list',[{'type',716,'tuple','any'}]}]]]]}|[{'type',717,'constraint',[{'atom',717,'is_subtype'}|[[{'var',717,'Tuple'}|[{'type',717,'tuple','any'}]]]]}]]]]]]]}]}],
		%% Line 728
		'spec' =
		    %% Line 728
		    [{{'keystore',4},[{'type',728,'bounded_fun',[{'type',728,'fun',[{'type',728,'product',[{'var',728,'Key'}|[{'var',728,'N'}|[{'var',728,'TupleList1'}|[{'var',728,'NewTuple'}]]]]}|[{'var',728,'TupleList2'}]]}|[[{'type',729,'constraint',[{'atom',729,'is_subtype'}|[[{'var',729,'Key'}|[{'type',729,'term',[]}]]]]}|[{'type',730,'constraint',[{'atom',730,'is_subtype'}|[[{'var',730,'N'}|[{'type',730,'pos_integer',[]}]]]]}|[{'type',731,'constraint',[{'atom',731,'is_subtype'}|[[{'var',731,'TupleList1'}|[{'type',731,'list',[{'var',731,'Tuple'}]}]]]]}|[{'type',732,'constraint',[{'atom',732,'is_subtype'}|[[{'var',732,'TupleList2'}|[{'type',732,'nonempty_list',[{'var',732,'Tuple'}]}]]]]}|[{'type',733,'constraint',[{'atom',733,'is_subtype'}|[[{'var',733,'NewTuple'}|[{'var',733,'Tuple'}]]]]}|[{'type',734,'constraint',[{'atom',734,'is_subtype'}|[[{'var',734,'Tuple'}|[{'type',734,'tuple','any'}]]]]}]]]]]]]]}]}],
		%% Line 746
		'spec' =
		    %% Line 746
		    [{{'keysort',2},[{'type',746,'bounded_fun',[{'type',746,'fun',[{'type',746,'product',[{'var',746,'N'}|[{'var',746,'TupleList1'}]]}|[{'var',746,'TupleList2'}]]}|[[{'type',747,'constraint',[{'atom',747,'is_subtype'}|[[{'var',747,'N'}|[{'type',747,'pos_integer',[]}]]]]}|[{'type',748,'constraint',[{'atom',748,'is_subtype'}|[[{'var',748,'TupleList1'}|[{'type',748,'list',[{'var',748,'Tuple'}]}]]]]}|[{'type',749,'constraint',[{'atom',749,'is_subtype'}|[[{'var',749,'TupleList2'}|[{'type',749,'list',[{'var',749,'Tuple'}]}]]]]}|[{'type',750,'constraint',[{'atom',750,'is_subtype'}|[[{'var',750,'Tuple'}|[{'type',750,'tuple','any'}]]]]}]]]]]]}]}],
		%% Line 807
		'spec' =
		    %% Line 807
		    [{{'keymerge',3},[{'type',807,'bounded_fun',[{'type',807,'fun',[{'type',807,'product',[{'var',807,'N'}|[{'var',807,'TupleList1'}|[{'var',807,'TupleList2'}]]]}|[{'var',807,'TupleList3'}]]}|[[{'type',808,'constraint',[{'atom',808,'is_subtype'}|[[{'var',808,'N'}|[{'type',808,'pos_integer',[]}]]]]}|[{'type',809,'constraint',[{'atom',809,'is_subtype'}|[[{'var',809,'TupleList1'}|[{'type',809,'list',[{'var',809,'T1'}]}]]]]}|[{'type',810,'constraint',[{'atom',810,'is_subtype'}|[[{'var',810,'TupleList2'}|[{'type',810,'list',[{'var',810,'T2'}]}]]]]}|[{'type',811,'constraint',[{'atom',811,'is_subtype'}|[[{'var',811,'TupleList3'}|[{'type',811,'list',[{'type',811,'union',[{'var',811,'T1'}|[{'var',811,'T2'}]]}]}]]]]}|[{'type',812,'constraint',[{'atom',812,'is_subtype'}|[[{'var',812,'T1'}|[{'var',812,'Tuple'}]]]]}|[{'type',813,'constraint',[{'atom',813,'is_subtype'}|[[{'var',813,'T2'}|[{'var',813,'Tuple'}]]]]}|[{'type',814,'constraint',[{'atom',814,'is_subtype'}|[[{'var',814,'Tuple'}|[{'type',814,'tuple','any'}]]]]}]]]]]]]]]}]}],
		%% Line 828
		'spec' =
		    %% Line 828
		    [{{'rkeymerge',3},[{'type',828,'bounded_fun',[{'type',828,'fun',[{'type',828,'product',[{'type',828,'pos_integer',[]}|[{'type',828,'list',[{'var',828,'X'}]}|[{'type',828,'list',[{'var',828,'Y'}]}]]]}|[{'type',829,'list',[{'var',829,'R'}]}]]}|[[{'type',829,'constraint',[{'atom',829,'is_subtype'}|[[{'var',829,'X'}|[{'type',829,'tuple','any'}]]]]}|[{'type',829,'constraint',[{'atom',829,'is_subtype'}|[[{'var',829,'Y'}|[{'type',829,'tuple','any'}]]]]}|[{'type',829,'constraint',[{'atom',829,'is_subtype'}|[[{'var',829,'R'}|[{'type',829,'tuple','any'}]]]]}]]]]]}]}],
		%% Line 841
		'spec' =
		    %% Line 841
		    [{{'ukeysort',2},[{'type',841,'bounded_fun',[{'type',841,'fun',[{'type',841,'product',[{'var',841,'N'}|[{'var',841,'TupleList1'}]]}|[{'var',841,'TupleList2'}]]}|[[{'type',842,'constraint',[{'atom',842,'is_subtype'}|[[{'var',842,'N'}|[{'type',842,'pos_integer',[]}]]]]}|[{'type',843,'constraint',[{'atom',843,'is_subtype'}|[[{'var',843,'TupleList1'}|[{'type',843,'list',[{'var',843,'Tuple'}]}]]]]}|[{'type',844,'constraint',[{'atom',844,'is_subtype'}|[[{'var',844,'TupleList2'}|[{'type',844,'list',[{'var',844,'Tuple'}]}]]]]}|[{'type',845,'constraint',[{'atom',845,'is_subtype'}|[[{'var',845,'Tuple'}|[{'type',845,'tuple','any'}]]]]}]]]]]]}]}],
		%% Line 910
		'spec' =
		    %% Line 910
		    [{{'ukeymerge',3},[{'type',910,'bounded_fun',[{'type',910,'fun',[{'type',910,'product',[{'var',910,'N'}|[{'var',910,'TupleList1'}|[{'var',910,'TupleList2'}]]]}|[{'var',910,'TupleList3'}]]}|[[{'type',911,'constraint',[{'atom',911,'is_subtype'}|[[{'var',911,'N'}|[{'type',911,'pos_integer',[]}]]]]}|[{'type',912,'constraint',[{'atom',912,'is_subtype'}|[[{'var',912,'TupleList1'}|[{'type',912,'list',[{'var',912,'T1'}]}]]]]}|[{'type',913,'constraint',[{'atom',913,'is_subtype'}|[[{'var',913,'TupleList2'}|[{'type',913,'list',[{'var',913,'T2'}]}]]]]}|[{'type',914,'constraint',[{'atom',914,'is_subtype'}|[[{'var',914,'TupleList3'}|[{'type',914,'list',[{'type',914,'union',[{'var',914,'T1'}|[{'var',914,'T2'}]]}]}]]]]}|[{'type',915,'constraint',[{'atom',915,'is_subtype'}|[[{'var',915,'T1'}|[{'var',915,'Tuple'}]]]]}|[{'type',916,'constraint',[{'atom',916,'is_subtype'}|[[{'var',916,'T2'}|[{'var',916,'Tuple'}]]]]}|[{'type',917,'constraint',[{'atom',917,'is_subtype'}|[[{'var',917,'Tuple'}|[{'type',917,'tuple','any'}]]]]}]]]]]]]]]}]}],
		%% Line 931
		'spec' =
		    %% Line 931
		    [{{'rukeymerge',3},[{'type',931,'bounded_fun',[{'type',931,'fun',[{'type',931,'product',[{'type',931,'pos_integer',[]}|[{'type',931,'list',[{'var',931,'X'}]}|[{'type',931,'list',[{'var',931,'Y'}]}]]]}|[{'type',932,'list',[{'type',932,'union',[{'var',932,'X'}|[{'var',932,'Y'}]]}]}]]}|[[{'type',932,'constraint',[{'atom',932,'is_subtype'}|[[{'var',932,'X'}|[{'type',932,'tuple','any'}]]]]}|[{'type',932,'constraint',[{'atom',932,'is_subtype'}|[[{'var',932,'Y'}|[{'type',932,'tuple','any'}]]]]}]]]]}]}],
		%% Line 944
		'spec' =
		    %% Line 944
		    [{{'keymap',3},[{'type',944,'bounded_fun',[{'type',944,'fun',[{'type',944,'product',[{'var',944,'Fun'}|[{'var',944,'N'}|[{'var',944,'TupleList1'}]]]}|[{'var',944,'TupleList2'}]]}|[[{'type',945,'constraint',[{'atom',945,'is_subtype'}|[[{'var',945,'Fun'}|[{'type',945,'fun',[{'type',945,'product',[{'ann_type',945,[{'var',945,'Term1'}|[{'type',945,'term',[]}]]}]}|[{'ann_type',945,[{'var',945,'Term2'}|[{'type',945,'term',[]}]]}]]}]]]]}|[{'type',946,'constraint',[{'atom',946,'is_subtype'}|[[{'var',946,'N'}|[{'type',946,'pos_integer',[]}]]]]}|[{'type',947,'constraint',[{'atom',947,'is_subtype'}|[[{'var',947,'TupleList1'}|[{'type',947,'list',[{'var',947,'Tuple'}]}]]]]}|[{'type',948,'constraint',[{'atom',948,'is_subtype'}|[[{'var',948,'TupleList2'}|[{'type',948,'list',[{'var',948,'Tuple'}]}]]]]}|[{'type',949,'constraint',[{'atom',949,'is_subtype'}|[[{'var',949,'Tuple'}|[{'type',949,'tuple','any'}]]]]}]]]]]]]}]}],
		%% Line 958
		'spec' =
		    %% Line 958
		    [{{'sort',2},[{'type',958,'bounded_fun',[{'type',958,'fun',[{'type',958,'product',[{'var',958,'Fun'}|[{'var',958,'List1'}]]}|[{'var',958,'List2'}]]}|[[{'type',959,'constraint',[{'atom',959,'is_subtype'}|[[{'var',959,'Fun'}|[{'type',959,'fun',[{'type',959,'product',[{'ann_type',959,[{'var',959,'A'}|[{'var',959,'T'}]]}|[{'ann_type',959,[{'var',959,'B'}|[{'var',959,'T'}]]}]]}|[{'type',959,'boolean',[]}]]}]]]]}|[{'type',960,'constraint',[{'atom',960,'is_subtype'}|[[{'var',960,'List1'}|[{'type',960,'list',[{'var',960,'T'}]}]]]]}|[{'type',961,'constraint',[{'atom',961,'is_subtype'}|[[{'var',961,'List2'}|[{'type',961,'list',[{'var',961,'T'}]}]]]]}|[{'type',962,'constraint',[{'atom',962,'is_subtype'}|[[{'var',962,'T'}|[{'type',962,'term',[]}]]]]}]]]]]]}]}],
		%% Line 976
		'spec' =
		    %% Line 976
		    [{{'merge',3},[{'type',976,'bounded_fun',[{'type',976,'fun',[{'type',976,'product',[{'var',976,'Fun'}|[{'var',976,'List1'}|[{'var',976,'List2'}]]]}|[{'var',976,'List3'}]]}|[[{'type',977,'constraint',[{'atom',977,'is_subtype'}|[[{'var',977,'Fun'}|[{'type',977,'fun',[{'type',977,'product',[{'var',977,'A'}|[{'var',977,'B'}]]}|[{'type',977,'boolean',[]}]]}]]]]}|[{'type',978,'constraint',[{'atom',978,'is_subtype'}|[[{'var',978,'List1'}|[{'type',978,'list',[{'var',978,'A'}]}]]]]}|[{'type',979,'constraint',[{'atom',979,'is_subtype'}|[[{'var',979,'List2'}|[{'type',979,'list',[{'var',979,'B'}]}]]]]}|[{'type',980,'constraint',[{'atom',980,'is_subtype'}|[[{'var',980,'List3'}|[{'type',980,'list',[{'type',980,'union',[{'var',980,'A'}|[{'var',980,'B'}]]}]}]]]]}|[{'type',981,'constraint',[{'atom',981,'is_subtype'}|[[{'var',981,'A'}|[{'type',981,'term',[]}]]]]}|[{'type',982,'constraint',[{'atom',982,'is_subtype'}|[[{'var',982,'B'}|[{'type',982,'term',[]}]]]]}]]]]]]]]}]}],
		%% Line 991
		'spec' =
		    %% Line 991
		    [{{'rmerge',3},[{'type',991,'fun',[{'type',991,'product',[{'type',991,'fun',[{'type',991,'product',[{'var',991,'X'}|[{'var',991,'Y'}]]}|[{'type',991,'boolean',[]}]]}|[{'type',991,'list',[{'var',991,'X'}]}|[{'type',991,'list',[{'var',991,'Y'}]}]]]}|[{'type',991,'list',[{'type',991,'union',[{'var',991,'X'}|[{'var',991,'Y'}]]}]}]]}]}],
		%% Line 998
		'spec' =
		    %% Line 998
		    [{{'usort',2},[{'type',998,'bounded_fun',[{'type',998,'fun',[{'type',998,'product',[{'var',998,'Fun'}|[{'var',998,'List1'}]]}|[{'var',998,'List2'}]]}|[[{'type',999,'constraint',[{'atom',999,'is_subtype'}|[[{'var',999,'Fun'}|[{'type',999,'fun',[{'type',999,'product',[{'var',999,'T'}|[{'var',999,'T'}]]}|[{'type',999,'boolean',[]}]]}]]]]}|[{'type',1000,'constraint',[{'atom',1000,'is_subtype'}|[[{'var',1000,'List1'}|[{'type',1000,'list',[{'var',1000,'T'}]}]]]]}|[{'type',1001,'constraint',[{'atom',1001,'is_subtype'}|[[{'var',1001,'List2'}|[{'type',1001,'list',[{'var',1001,'T'}]}]]]]}|[{'type',1002,'constraint',[{'atom',1002,'is_subtype'}|[[{'var',1002,'T'}|[{'type',1002,'term',[]}]]]]}]]]]]]}]}],
		%% Line 1029
		'spec' =
		    %% Line 1029
		    [{{'umerge',3},[{'type',1029,'bounded_fun',[{'type',1029,'fun',[{'type',1029,'product',[{'var',1029,'Fun'}|[{'var',1029,'List1'}|[{'var',1029,'List2'}]]]}|[{'var',1029,'List3'}]]}|[[{'type',1030,'constraint',[{'atom',1030,'is_subtype'}|[[{'var',1030,'Fun'}|[{'type',1030,'fun',[{'type',1030,'product',[{'var',1030,'A'}|[{'var',1030,'B'}]]}|[{'type',1030,'boolean',[]}]]}]]]]}|[{'type',1031,'constraint',[{'atom',1031,'is_subtype'}|[[{'var',1031,'List1'}|[{'type',1031,'list',[{'var',1031,'A'}]}]]]]}|[{'type',1032,'constraint',[{'atom',1032,'is_subtype'}|[[{'var',1032,'List2'}|[{'type',1032,'list',[{'var',1032,'B'}]}]]]]}|[{'type',1033,'constraint',[{'atom',1033,'is_subtype'}|[[{'var',1033,'List3'}|[{'type',1033,'list',[{'type',1033,'union',[{'var',1033,'A'}|[{'var',1033,'B'}]]}]}]]]]}|[{'type',1034,'constraint',[{'atom',1034,'is_subtype'}|[[{'var',1034,'A'}|[{'type',1034,'term',[]}]]]]}|[{'type',1035,'constraint',[{'atom',1035,'is_subtype'}|[[{'var',1035,'B'}|[{'type',1035,'term',[]}]]]]}]]]]]]]]}]}],
		%% Line 1044
		'spec' =
		    %% Line 1044
		    [{{'rumerge',3},[{'type',1044,'fun',[{'type',1044,'product',[{'type',1044,'fun',[{'type',1044,'product',[{'var',1044,'X'}|[{'var',1044,'Y'}]]}|[{'type',1044,'boolean',[]}]]}|[{'type',1044,'list',[{'var',1044,'X'}]}|[{'type',1044,'list',[{'var',1044,'Y'}]}]]]}|[{'type',1044,'list',[{'type',1044,'union',[{'var',1044,'X'}|[{'var',1044,'Y'}]]}]}]]}]}],
		%% Line 1054
		'spec' =
		    %% Line 1054
		    [{{'usort',1},[{'type',1054,'bounded_fun',[{'type',1054,'fun',[{'type',1054,'product',[{'var',1054,'List1'}]}|[{'var',1054,'List2'}]]}|[[{'type',1055,'constraint',[{'atom',1055,'is_subtype'}|[[{'var',1055,'List1'}|[{'type',1055,'list',[{'var',1055,'T'}]}]]]]}|[{'type',1056,'constraint',[{'atom',1056,'is_subtype'}|[[{'var',1056,'List2'}|[{'type',1056,'list',[{'var',1056,'T'}]}]]]]}|[{'type',1057,'constraint',[{'atom',1057,'is_subtype'}|[[{'var',1057,'T'}|[{'type',1057,'term',[]}]]]]}]]]]]}]}],
		%% Line 1112
		'spec' =
		    %% Line 1112
		    [{{'umerge',1},[{'type',1112,'bounded_fun',[{'type',1112,'fun',[{'type',1112,'product',[{'var',1112,'ListOfLists'}]}|[{'var',1112,'List1'}]]}|[[{'type',1113,'constraint',[{'atom',1113,'is_subtype'}|[[{'var',1113,'ListOfLists'}|[{'type',1113,'list',[{'var',1113,'List'}]}]]]]}|[{'type',1114,'constraint',[{'atom',1114,'is_subtype'}|[[{'var',1114,'List'}|[{'type',1114,'list',[{'var',1114,'T'}]}]]]]}|[{'type',1115,'constraint',[{'atom',1115,'is_subtype'}|[[{'var',1115,'List1'}|[{'type',1115,'list',[{'var',1115,'T'}]}]]]]}|[{'type',1116,'constraint',[{'atom',1116,'is_subtype'}|[[{'var',1116,'T'}|[{'type',1116,'term',[]}]]]]}]]]]]]}]}],
		%% Line 1125
		'spec' =
		    %% Line 1125
		    [{{'umerge3',3},[{'type',1125,'bounded_fun',[{'type',1125,'fun',[{'type',1125,'product',[{'var',1125,'List1'}|[{'var',1125,'List2'}|[{'var',1125,'List3'}]]]}|[{'var',1125,'List4'}]]}|[[{'type',1126,'constraint',[{'atom',1126,'is_subtype'}|[[{'var',1126,'List1'}|[{'type',1126,'list',[{'var',1126,'X'}]}]]]]}|[{'type',1127,'constraint',[{'atom',1127,'is_subtype'}|[[{'var',1127,'List2'}|[{'type',1127,'list',[{'var',1127,'Y'}]}]]]]}|[{'type',1128,'constraint',[{'atom',1128,'is_subtype'}|[[{'var',1128,'List3'}|[{'type',1128,'list',[{'var',1128,'Z'}]}]]]]}|[{'type',1129,'constraint',[{'atom',1129,'is_subtype'}|[[{'var',1129,'List4'}|[{'type',1129,'list',[{'type',1129,'union',[{'var',1129,'X'}|[{'var',1129,'Y'}|[{'var',1129,'Z'}]]]}]}]]]]}|[{'type',1130,'constraint',[{'atom',1130,'is_subtype'}|[[{'var',1130,'X'}|[{'type',1130,'term',[]}]]]]}|[{'type',1131,'constraint',[{'atom',1131,'is_subtype'}|[[{'var',1131,'Y'}|[{'type',1131,'term',[]}]]]]}|[{'type',1132,'constraint',[{'atom',1132,'is_subtype'}|[[{'var',1132,'Z'}|[{'type',1132,'term',[]}]]]]}]]]]]]]]]}]}],
		%% Line 1145
		'spec' =
		    %% Line 1145
		    [{{'rumerge3',3},[{'type',1145,'fun',[{'type',1145,'product',[{'type',1145,'list',[{'var',1145,'X'}]}|[{'type',1145,'list',[{'var',1145,'Y'}]}|[{'type',1145,'list',[{'var',1145,'Z'}]}]]]}|[{'type',1145,'list',[{'type',1145,'union',[{'var',1145,'X'}|[{'var',1145,'Y'}|[{'var',1145,'Z'}]]]}]}]]}]}],
		%% Line 1157
		'spec' =
		    %% Line 1157
		    [{{'umerge',2},[{'type',1157,'bounded_fun',[{'type',1157,'fun',[{'type',1157,'product',[{'var',1157,'List1'}|[{'var',1157,'List2'}]]}|[{'var',1157,'List3'}]]}|[[{'type',1158,'constraint',[{'atom',1158,'is_subtype'}|[[{'var',1158,'List1'}|[{'type',1158,'list',[{'var',1158,'X'}]}]]]]}|[{'type',1159,'constraint',[{'atom',1159,'is_subtype'}|[[{'var',1159,'List2'}|[{'type',1159,'list',[{'var',1159,'Y'}]}]]]]}|[{'type',1160,'constraint',[{'atom',1160,'is_subtype'}|[[{'var',1160,'List3'}|[{'type',1160,'list',[{'type',1160,'union',[{'var',1160,'X'}|[{'var',1160,'Y'}]]}]}]]]]}|[{'type',1161,'constraint',[{'atom',1161,'is_subtype'}|[[{'var',1161,'X'}|[{'type',1161,'term',[]}]]]]}|[{'type',1162,'constraint',[{'atom',1162,'is_subtype'}|[[{'var',1162,'Y'}|[{'type',1162,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 1175
		'spec' =
		    %% Line 1175
		    [{{'rumerge',2},[{'type',1175,'fun',[{'type',1175,'product',[{'type',1175,'list',[{'var',1175,'X'}]}|[{'type',1175,'list',[{'var',1175,'Y'}]}]]}|[{'type',1175,'list',[{'type',1175,'union',[{'var',1175,'X'}|[{'var',1175,'Y'}]]}]}]]}]}],
		%% Line 1207
		'spec' =
		    %% Line 1207
		    [{{'all',2},[{'type',1207,'bounded_fun',[{'type',1207,'fun',[{'type',1207,'product',[{'var',1207,'Pred'}|[{'var',1207,'List'}]]}|[{'type',1207,'boolean',[]}]]}|[[{'type',1208,'constraint',[{'atom',1208,'is_subtype'}|[[{'var',1208,'Pred'}|[{'type',1208,'fun',[{'type',1208,'product',[{'ann_type',1208,[{'var',1208,'Elem'}|[{'var',1208,'T'}]]}]}|[{'type',1208,'boolean',[]}]]}]]]]}|[{'type',1209,'constraint',[{'atom',1209,'is_subtype'}|[[{'var',1209,'List'}|[{'type',1209,'list',[{'var',1209,'T'}]}]]]]}|[{'type',1210,'constraint',[{'atom',1210,'is_subtype'}|[[{'var',1210,'T'}|[{'type',1210,'term',[]}]]]]}]]]]]}]}],
		%% Line 1219
		'spec' =
		    %% Line 1219
		    [{{'any',2},[{'type',1219,'bounded_fun',[{'type',1219,'fun',[{'type',1219,'product',[{'var',1219,'Pred'}|[{'var',1219,'List'}]]}|[{'type',1219,'boolean',[]}]]}|[[{'type',1220,'constraint',[{'atom',1220,'is_subtype'}|[[{'var',1220,'Pred'}|[{'type',1220,'fun',[{'type',1220,'product',[{'ann_type',1220,[{'var',1220,'Elem'}|[{'var',1220,'T'}]]}]}|[{'type',1220,'boolean',[]}]]}]]]]}|[{'type',1221,'constraint',[{'atom',1221,'is_subtype'}|[[{'var',1221,'List'}|[{'type',1221,'list',[{'var',1221,'T'}]}]]]]}|[{'type',1222,'constraint',[{'atom',1222,'is_subtype'}|[[{'var',1222,'T'}|[{'type',1222,'term',[]}]]]]}]]]]]}]}],
		%% Line 1231
		'spec' =
		    %% Line 1231
		    [{{'map',2},[{'type',1231,'bounded_fun',[{'type',1231,'fun',[{'type',1231,'product',[{'var',1231,'Fun'}|[{'var',1231,'List1'}]]}|[{'var',1231,'List2'}]]}|[[{'type',1232,'constraint',[{'atom',1232,'is_subtype'}|[[{'var',1232,'Fun'}|[{'type',1232,'fun',[{'type',1232,'product',[{'var',1232,'A'}]}|[{'var',1232,'B'}]]}]]]]}|[{'type',1233,'constraint',[{'atom',1233,'is_subtype'}|[[{'var',1233,'List1'}|[{'type',1233,'list',[{'var',1233,'A'}]}]]]]}|[{'type',1234,'constraint',[{'atom',1234,'is_subtype'}|[[{'var',1234,'List2'}|[{'type',1234,'list',[{'var',1234,'B'}]}]]]]}|[{'type',1235,'constraint',[{'atom',1235,'is_subtype'}|[[{'var',1235,'A'}|[{'type',1235,'term',[]}]]]]}|[{'type',1236,'constraint',[{'atom',1236,'is_subtype'}|[[{'var',1236,'B'}|[{'type',1236,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 1242
		'spec' =
		    %% Line 1242
		    [{{'flatmap',2},[{'type',1242,'bounded_fun',[{'type',1242,'fun',[{'type',1242,'product',[{'var',1242,'Fun'}|[{'var',1242,'List1'}]]}|[{'var',1242,'List2'}]]}|[[{'type',1243,'constraint',[{'atom',1243,'is_subtype'}|[[{'var',1243,'Fun'}|[{'type',1243,'fun',[{'type',1243,'product',[{'var',1243,'A'}]}|[{'type',1243,'list',[{'var',1243,'B'}]}]]}]]]]}|[{'type',1244,'constraint',[{'atom',1244,'is_subtype'}|[[{'var',1244,'List1'}|[{'type',1244,'list',[{'var',1244,'A'}]}]]]]}|[{'type',1245,'constraint',[{'atom',1245,'is_subtype'}|[[{'var',1245,'List2'}|[{'type',1245,'list',[{'var',1245,'B'}]}]]]]}|[{'type',1246,'constraint',[{'atom',1246,'is_subtype'}|[[{'var',1246,'A'}|[{'type',1246,'term',[]}]]]]}|[{'type',1247,'constraint',[{'atom',1247,'is_subtype'}|[[{'var',1247,'B'}|[{'type',1247,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 1253
		'spec' =
		    %% Line 1253
		    [{{'foldl',3},[{'type',1253,'bounded_fun',[{'type',1253,'fun',[{'type',1253,'product',[{'var',1253,'Fun'}|[{'var',1253,'Acc0'}|[{'var',1253,'List'}]]]}|[{'var',1253,'Acc1'}]]}|[[{'type',1254,'constraint',[{'atom',1254,'is_subtype'}|[[{'var',1254,'Fun'}|[{'type',1254,'fun',[{'type',1254,'product',[{'ann_type',1254,[{'var',1254,'Elem'}|[{'var',1254,'T'}]]}|[{'var',1254,'AccIn'}]]}|[{'var',1254,'AccOut'}]]}]]]]}|[{'type',1255,'constraint',[{'atom',1255,'is_subtype'}|[[{'var',1255,'Acc0'}|[{'type',1255,'term',[]}]]]]}|[{'type',1256,'constraint',[{'atom',1256,'is_subtype'}|[[{'var',1256,'Acc1'}|[{'type',1256,'term',[]}]]]]}|[{'type',1257,'constraint',[{'atom',1257,'is_subtype'}|[[{'var',1257,'AccIn'}|[{'type',1257,'term',[]}]]]]}|[{'type',1258,'constraint',[{'atom',1258,'is_subtype'}|[[{'var',1258,'AccOut'}|[{'type',1258,'term',[]}]]]]}|[{'type',1259,'constraint',[{'atom',1259,'is_subtype'}|[[{'var',1259,'List'}|[{'type',1259,'list',[{'var',1259,'T'}]}]]]]}|[{'type',1260,'constraint',[{'atom',1260,'is_subtype'}|[[{'var',1260,'T'}|[{'type',1260,'term',[]}]]]]}]]]]]]]]]}]}],
		%% Line 1266
		'spec' =
		    %% Line 1266
		    [{{'foldr',3},[{'type',1266,'bounded_fun',[{'type',1266,'fun',[{'type',1266,'product',[{'var',1266,'Fun'}|[{'var',1266,'Acc0'}|[{'var',1266,'List'}]]]}|[{'var',1266,'Acc1'}]]}|[[{'type',1267,'constraint',[{'atom',1267,'is_subtype'}|[[{'var',1267,'Fun'}|[{'type',1267,'fun',[{'type',1267,'product',[{'ann_type',1267,[{'var',1267,'Elem'}|[{'var',1267,'T'}]]}|[{'var',1267,'AccIn'}]]}|[{'var',1267,'AccOut'}]]}]]]]}|[{'type',1268,'constraint',[{'atom',1268,'is_subtype'}|[[{'var',1268,'Acc0'}|[{'type',1268,'term',[]}]]]]}|[{'type',1269,'constraint',[{'atom',1269,'is_subtype'}|[[{'var',1269,'Acc1'}|[{'type',1269,'term',[]}]]]]}|[{'type',1270,'constraint',[{'atom',1270,'is_subtype'}|[[{'var',1270,'AccIn'}|[{'type',1270,'term',[]}]]]]}|[{'type',1271,'constraint',[{'atom',1271,'is_subtype'}|[[{'var',1271,'AccOut'}|[{'type',1271,'term',[]}]]]]}|[{'type',1272,'constraint',[{'atom',1272,'is_subtype'}|[[{'var',1272,'List'}|[{'type',1272,'list',[{'var',1272,'T'}]}]]]]}|[{'type',1273,'constraint',[{'atom',1273,'is_subtype'}|[[{'var',1273,'T'}|[{'type',1273,'term',[]}]]]]}]]]]]]]]]}]}],
		%% Line 1279
		'spec' =
		    %% Line 1279
		    [{{'filter',2},[{'type',1279,'bounded_fun',[{'type',1279,'fun',[{'type',1279,'product',[{'var',1279,'Pred'}|[{'var',1279,'List1'}]]}|[{'var',1279,'List2'}]]}|[[{'type',1280,'constraint',[{'atom',1280,'is_subtype'}|[[{'var',1280,'Pred'}|[{'type',1280,'fun',[{'type',1280,'product',[{'ann_type',1280,[{'var',1280,'Elem'}|[{'var',1280,'T'}]]}]}|[{'type',1280,'boolean',[]}]]}]]]]}|[{'type',1281,'constraint',[{'atom',1281,'is_subtype'}|[[{'var',1281,'List1'}|[{'type',1281,'list',[{'var',1281,'T'}]}]]]]}|[{'type',1282,'constraint',[{'atom',1282,'is_subtype'}|[[{'var',1282,'List2'}|[{'type',1282,'list',[{'var',1282,'T'}]}]]]]}|[{'type',1283,'constraint',[{'atom',1283,'is_subtype'}|[[{'var',1283,'T'}|[{'type',1283,'term',[]}]]]]}]]]]]]}]}],
		%% Line 1291
		'spec' =
		    %% Line 1291
		    [{{'partition',2},[{'type',1291,'bounded_fun',[{'type',1291,'fun',[{'type',1291,'product',[{'var',1291,'Pred'}|[{'var',1291,'List'}]]}|[{'type',1291,'tuple',[{'var',1291,'Satisfying'}|[{'var',1291,'NotSatisfying'}]]}]]}|[[{'type',1292,'constraint',[{'atom',1292,'is_subtype'}|[[{'var',1292,'Pred'}|[{'type',1292,'fun',[{'type',1292,'product',[{'ann_type',1292,[{'var',1292,'Elem'}|[{'var',1292,'T'}]]}]}|[{'type',1292,'boolean',[]}]]}]]]]}|[{'type',1293,'constraint',[{'atom',1293,'is_subtype'}|[[{'var',1293,'List'}|[{'type',1293,'list',[{'var',1293,'T'}]}]]]]}|[{'type',1294,'constraint',[{'atom',1294,'is_subtype'}|[[{'var',1294,'Satisfying'}|[{'type',1294,'list',[{'var',1294,'T'}]}]]]]}|[{'type',1295,'constraint',[{'atom',1295,'is_subtype'}|[[{'var',1295,'NotSatisfying'}|[{'type',1295,'list',[{'var',1295,'T'}]}]]]]}|[{'type',1296,'constraint',[{'atom',1296,'is_subtype'}|[[{'var',1296,'T'}|[{'type',1296,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 1309
		'spec' =
		    %% Line 1309
		    [{{'filtermap',2},[{'type',1309,'bounded_fun',[{'type',1309,'fun',[{'type',1309,'product',[{'var',1309,'Fun'}|[{'var',1309,'List1'}]]}|[{'var',1309,'List2'}]]}|[[{'type',1310,'constraint',[{'atom',1310,'is_subtype'}|[[{'var',1310,'Fun'}|[{'type',1310,'fun',[{'type',1310,'product',[{'var',1310,'Elem'}]}|[{'type',1310,'union',[{'type',1310,'boolean',[]}|[{'type',1310,'tuple',[{'atom',1310,'true'}|[{'var',1310,'Value'}]]}]]}]]}]]]]}|[{'type',1311,'constraint',[{'atom',1311,'is_subtype'}|[[{'var',1311,'List1'}|[{'type',1311,'list',[{'var',1311,'Elem'}]}]]]]}|[{'type',1312,'constraint',[{'atom',1312,'is_subtype'}|[[{'var',1312,'List2'}|[{'type',1312,'list',[{'type',1312,'union',[{'var',1312,'Elem'}|[{'var',1312,'Value'}]]}]}]]]]}|[{'type',1313,'constraint',[{'atom',1313,'is_subtype'}|[[{'var',1313,'Elem'}|[{'type',1313,'term',[]}]]]]}|[{'type',1314,'constraint',[{'atom',1314,'is_subtype'}|[[{'var',1314,'Value'}|[{'type',1314,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 1327
		'spec' =
		    %% Line 1327
		    [{{'zf',2},[{'type',1327,'fun',[{'type',1327,'product',[{'type',1327,'fun',[{'type',1327,'product',[{'var',1327,'T'}]}|[{'type',1327,'union',[{'type',1327,'boolean',[]}|[{'type',1327,'tuple',[{'atom',1327,'true'}|[{'var',1327,'X'}]]}]]}]]}|[{'type',1327,'list',[{'var',1327,'T'}]}]]}|[{'type',1327,'list',[{'type',1327,'union',[{'var',1327,'T'}|[{'var',1327,'X'}]]}]}]]}]}],
		%% Line 1332
		'spec' =
		    %% Line 1332
		    [{{'foreach',2},[{'type',1332,'bounded_fun',[{'type',1332,'fun',[{'type',1332,'product',[{'var',1332,'Fun'}|[{'var',1332,'List'}]]}|[{'atom',1332,'ok'}]]}|[[{'type',1333,'constraint',[{'atom',1333,'is_subtype'}|[[{'var',1333,'Fun'}|[{'type',1333,'fun',[{'type',1333,'product',[{'ann_type',1333,[{'var',1333,'Elem'}|[{'var',1333,'T'}]]}]}|[{'type',1333,'term',[]}]]}]]]]}|[{'type',1334,'constraint',[{'atom',1334,'is_subtype'}|[[{'var',1334,'List'}|[{'type',1334,'list',[{'var',1334,'T'}]}]]]]}|[{'type',1335,'constraint',[{'atom',1335,'is_subtype'}|[[{'var',1335,'T'}|[{'type',1335,'term',[]}]]]]}]]]]]}]}],
		%% Line 1342
		'spec' =
		    %% Line 1342
		    [{{'mapfoldl',3},[{'type',1342,'bounded_fun',[{'type',1342,'fun',[{'type',1342,'product',[{'var',1342,'Fun'}|[{'var',1342,'Acc0'}|[{'var',1342,'List1'}]]]}|[{'type',1342,'tuple',[{'var',1342,'List2'}|[{'var',1342,'Acc1'}]]}]]}|[[{'type',1343,'constraint',[{'atom',1343,'is_subtype'}|[[{'var',1343,'Fun'}|[{'type',1343,'fun',[{'type',1343,'product',[{'var',1343,'A'}|[{'var',1343,'AccIn'}]]}|[{'type',1343,'tuple',[{'var',1343,'B'}|[{'var',1343,'AccOut'}]]}]]}]]]]}|[{'type',1344,'constraint',[{'atom',1344,'is_subtype'}|[[{'var',1344,'Acc0'}|[{'type',1344,'term',[]}]]]]}|[{'type',1345,'constraint',[{'atom',1345,'is_subtype'}|[[{'var',1345,'Acc1'}|[{'type',1345,'term',[]}]]]]}|[{'type',1346,'constraint',[{'atom',1346,'is_subtype'}|[[{'var',1346,'AccIn'}|[{'type',1346,'term',[]}]]]]}|[{'type',1347,'constraint',[{'atom',1347,'is_subtype'}|[[{'var',1347,'AccOut'}|[{'type',1347,'term',[]}]]]]}|[{'type',1348,'constraint',[{'atom',1348,'is_subtype'}|[[{'var',1348,'List1'}|[{'type',1348,'list',[{'var',1348,'A'}]}]]]]}|[{'type',1349,'constraint',[{'atom',1349,'is_subtype'}|[[{'var',1349,'List2'}|[{'type',1349,'list',[{'var',1349,'B'}]}]]]]}|[{'type',1350,'constraint',[{'atom',1350,'is_subtype'}|[[{'var',1350,'A'}|[{'type',1350,'term',[]}]]]]}|[{'type',1351,'constraint',[{'atom',1351,'is_subtype'}|[[{'var',1351,'B'}|[{'type',1351,'term',[]}]]]]}]]]]]]]]]]]}]}],
		%% Line 1359
		'spec' =
		    %% Line 1359
		    [{{'mapfoldr',3},[{'type',1359,'bounded_fun',[{'type',1359,'fun',[{'type',1359,'product',[{'var',1359,'Fun'}|[{'var',1359,'Acc0'}|[{'var',1359,'List1'}]]]}|[{'type',1359,'tuple',[{'var',1359,'List2'}|[{'var',1359,'Acc1'}]]}]]}|[[{'type',1360,'constraint',[{'atom',1360,'is_subtype'}|[[{'var',1360,'Fun'}|[{'type',1360,'fun',[{'type',1360,'product',[{'var',1360,'A'}|[{'var',1360,'AccIn'}]]}|[{'type',1360,'tuple',[{'var',1360,'B'}|[{'var',1360,'AccOut'}]]}]]}]]]]}|[{'type',1361,'constraint',[{'atom',1361,'is_subtype'}|[[{'var',1361,'Acc0'}|[{'type',1361,'term',[]}]]]]}|[{'type',1362,'constraint',[{'atom',1362,'is_subtype'}|[[{'var',1362,'Acc1'}|[{'type',1362,'term',[]}]]]]}|[{'type',1363,'constraint',[{'atom',1363,'is_subtype'}|[[{'var',1363,'AccIn'}|[{'type',1363,'term',[]}]]]]}|[{'type',1364,'constraint',[{'atom',1364,'is_subtype'}|[[{'var',1364,'AccOut'}|[{'type',1364,'term',[]}]]]]}|[{'type',1365,'constraint',[{'atom',1365,'is_subtype'}|[[{'var',1365,'List1'}|[{'type',1365,'list',[{'var',1365,'A'}]}]]]]}|[{'type',1366,'constraint',[{'atom',1366,'is_subtype'}|[[{'var',1366,'List2'}|[{'type',1366,'list',[{'var',1366,'B'}]}]]]]}|[{'type',1367,'constraint',[{'atom',1367,'is_subtype'}|[[{'var',1367,'A'}|[{'type',1367,'term',[]}]]]]}|[{'type',1368,'constraint',[{'atom',1368,'is_subtype'}|[[{'var',1368,'B'}|[{'type',1368,'term',[]}]]]]}]]]]]]]]]]]}]}],
		%% Line 1376
		'spec' =
		    %% Line 1376
		    [{{'takewhile',2},[{'type',1376,'bounded_fun',[{'type',1376,'fun',[{'type',1376,'product',[{'var',1376,'Pred'}|[{'var',1376,'List1'}]]}|[{'var',1376,'List2'}]]}|[[{'type',1377,'constraint',[{'atom',1377,'is_subtype'}|[[{'var',1377,'Pred'}|[{'type',1377,'fun',[{'type',1377,'product',[{'ann_type',1377,[{'var',1377,'Elem'}|[{'var',1377,'T'}]]}]}|[{'type',1377,'boolean',[]}]]}]]]]}|[{'type',1378,'constraint',[{'atom',1378,'is_subtype'}|[[{'var',1378,'List1'}|[{'type',1378,'list',[{'var',1378,'T'}]}]]]]}|[{'type',1379,'constraint',[{'atom',1379,'is_subtype'}|[[{'var',1379,'List2'}|[{'type',1379,'list',[{'var',1379,'T'}]}]]]]}|[{'type',1380,'constraint',[{'atom',1380,'is_subtype'}|[[{'var',1380,'T'}|[{'type',1380,'term',[]}]]]]}]]]]]]}]}],
		%% Line 1389
		'spec' =
		    %% Line 1389
		    [{{'dropwhile',2},[{'type',1389,'bounded_fun',[{'type',1389,'fun',[{'type',1389,'product',[{'var',1389,'Pred'}|[{'var',1389,'List1'}]]}|[{'var',1389,'List2'}]]}|[[{'type',1390,'constraint',[{'atom',1390,'is_subtype'}|[[{'var',1390,'Pred'}|[{'type',1390,'fun',[{'type',1390,'product',[{'ann_type',1390,[{'var',1390,'Elem'}|[{'var',1390,'T'}]]}]}|[{'type',1390,'boolean',[]}]]}]]]]}|[{'type',1391,'constraint',[{'atom',1391,'is_subtype'}|[[{'var',1391,'List1'}|[{'type',1391,'list',[{'var',1391,'T'}]}]]]]}|[{'type',1392,'constraint',[{'atom',1392,'is_subtype'}|[[{'var',1392,'List2'}|[{'type',1392,'list',[{'var',1392,'T'}]}]]]]}|[{'type',1393,'constraint',[{'atom',1393,'is_subtype'}|[[{'var',1393,'T'}|[{'type',1393,'term',[]}]]]]}]]]]]]}]}],
		%% Line 1402
		'spec' =
		    %% Line 1402
		    [{{'search',2},[{'type',1402,'bounded_fun',[{'type',1402,'fun',[{'type',1402,'product',[{'var',1402,'Pred'}|[{'var',1402,'List'}]]}|[{'type',1402,'union',[{'type',1402,'tuple',[{'atom',1402,'value'}|[{'var',1402,'Value'}]]}|[{'atom',1402,'false'}]]}]]}|[[{'type',1403,'constraint',[{'atom',1403,'is_subtype'}|[[{'var',1403,'Pred'}|[{'type',1403,'fun',[{'type',1403,'product',[{'var',1403,'T'}]}|[{'type',1403,'boolean',[]}]]}]]]]}|[{'type',1404,'constraint',[{'atom',1404,'is_subtype'}|[[{'var',1404,'List'}|[{'type',1404,'list',[{'var',1404,'T'}]}]]]]}|[{'type',1405,'constraint',[{'atom',1405,'is_subtype'}|[[{'var',1405,'Value'}|[{'var',1405,'T'}]]]]}]]]]]}]}],
		%% Line 1415
		'spec' =
		    %% Line 1415
		    [{{'splitwith',2},[{'type',1415,'bounded_fun',[{'type',1415,'fun',[{'type',1415,'product',[{'var',1415,'Pred'}|[{'var',1415,'List'}]]}|[{'type',1415,'tuple',[{'var',1415,'List1'}|[{'var',1415,'List2'}]]}]]}|[[{'type',1416,'constraint',[{'atom',1416,'is_subtype'}|[[{'var',1416,'Pred'}|[{'type',1416,'fun',[{'type',1416,'product',[{'var',1416,'T'}]}|[{'type',1416,'boolean',[]}]]}]]]]}|[{'type',1417,'constraint',[{'atom',1417,'is_subtype'}|[[{'var',1417,'List'}|[{'type',1417,'list',[{'var',1417,'T'}]}]]]]}|[{'type',1418,'constraint',[{'atom',1418,'is_subtype'}|[[{'var',1418,'List1'}|[{'type',1418,'list',[{'var',1418,'T'}]}]]]]}|[{'type',1419,'constraint',[{'atom',1419,'is_subtype'}|[[{'var',1419,'List2'}|[{'type',1419,'list',[{'var',1419,'T'}]}]]]]}|[{'type',1420,'constraint',[{'atom',1420,'is_subtype'}|[[{'var',1420,'T'}|[{'type',1420,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 1433
		'spec' =
		    %% Line 1433
		    [{{'split',2},[{'type',1433,'bounded_fun',[{'type',1433,'fun',[{'type',1433,'product',[{'var',1433,'N'}|[{'var',1433,'List1'}]]}|[{'type',1433,'tuple',[{'var',1433,'List2'}|[{'var',1433,'List3'}]]}]]}|[[{'type',1434,'constraint',[{'atom',1434,'is_subtype'}|[[{'var',1434,'N'}|[{'type',1434,'non_neg_integer',[]}]]]]}|[{'type',1435,'constraint',[{'atom',1435,'is_subtype'}|[[{'var',1435,'List1'}|[{'type',1435,'list',[{'var',1435,'T'}]}]]]]}|[{'type',1436,'constraint',[{'atom',1436,'is_subtype'}|[[{'var',1436,'List2'}|[{'type',1436,'list',[{'var',1436,'T'}]}]]]]}|[{'type',1437,'constraint',[{'atom',1437,'is_subtype'}|[[{'var',1437,'List3'}|[{'type',1437,'list',[{'var',1437,'T'}]}]]]]}|[{'type',1438,'constraint',[{'atom',1438,'is_subtype'}|[[{'var',1438,'T'}|[{'type',1438,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 1456
		'spec' =
		    %% Line 1456
		    [{{'join',2},[{'type',1456,'bounded_fun',[{'type',1456,'fun',[{'type',1456,'product',[{'var',1456,'Sep'}|[{'var',1456,'List1'}]]}|[{'var',1456,'List2'}]]}|[[{'type',1457,'constraint',[{'atom',1457,'is_subtype'}|[[{'var',1457,'Sep'}|[{'var',1457,'T'}]]]]}|[{'type',1458,'constraint',[{'atom',1458,'is_subtype'}|[[{'var',1458,'List1'}|[{'type',1458,'list',[{'var',1458,'T'}]}]]]]}|[{'type',1459,'constraint',[{'atom',1459,'is_subtype'}|[[{'var',1459,'List2'}|[{'type',1459,'list',[{'var',1459,'T'}]}]]]]}|[{'type',1460,'constraint',[{'atom',1460,'is_subtype'}|[[{'var',1460,'T'}|[{'type',1460,'term',[]}]]]]}]]]]]]}]}],
		%% Line 1476
		'compile' =
		    %% Line 1476
		    [{'inline',[{'merge3_12',7}|[{'merge3_21',7}|[{'rmerge3_12',7}|[{'rmerge3_21',7}]]]]}],
		%% Line 1479
		'compile' =
		    %% Line 1479
		    [{'inline',[{'umerge3_12',8}|[{'umerge3_21',8}|[{'rumerge3_12a',7}|[{'rumerge3_12b',8}]]]]}],
		%% Line 1483
		'compile' =
		    %% Line 1483
		    [{'inline',[{'keymerge3_12',12}|[{'keymerge3_21',12}|[{'rkeymerge3_12',12}|[{'rkeymerge3_21',12}]]]]}],
		%% Line 1487
		'compile' =
		    %% Line 1487
		    [{'inline',[{'ukeymerge3_12',13}|[{'ukeymerge3_21',13}|[{'rukeymerge3_12a',11}|[{'rukeymerge3_21a',13}|[{'rukeymerge3_12b',12}|[{'rukeymerge3_21b',12}]]]]]]}],
		%% Line 2296
		'dialyzer' =
		    %% Line 2296
		    [{'no_improper_lists',{'ukeymergel',3}}]]
'keyfind'/3 =
    %% Line 55
    fun (_0,_1,_2) ->
	%% Line 56
	call 'erlang':'nif_error'
	    ('undef')
'keymember'/3 =
    %% Line 65
    fun (_0,_1,_2) ->
	%% Line 66
	call 'erlang':'nif_error'
	    ('undef')
'keysearch'/3 =
    %% Line 75
    fun (_0,_1,_2) ->
	%% Line 76
	call 'erlang':'nif_error'
	    ('undef')
'member'/2 =
    %% Line 84
    fun (_0,_1) ->
	%% Line 85
	call 'erlang':'nif_error'
	    ('undef')
'reverse'/2 =
    %% Line 94
    fun (_0,_1) ->
	%% Line 95
	call 'erlang':'nif_error'
	    ('undef')
'append'/2 =
    %% Line 116
    fun (_0,_1) ->
	call 'erlang':'++'
	    (_0, _1)
'append'/1 =
    %% Line 126
    fun (_0) ->
	case _0 of
	  <[E|[]]> when 'true' ->
	      E
	  %% Line 127
	  <[H|T]> when 'true' ->
	      let <_1> =
		  apply 'append'/1
		      (T)
	      in  call 'erlang':'++'
		      (H, _1)
	  %% Line 128
	  <[]> when 'true' ->
	      []
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'append',1}}] )
	    -| ['compiler_generated'] )
	end
'subtract'/2 =
    %% Line 138
    fun (_0,_1) ->
	call 'erlang':'--'
	    (_0, _1)
'reverse'/1 =
    %% Line 147
    fun (_0) ->
	case _0 of
	  <L = []> when 'true' ->
	      %% Line 148
	      L
	  %% Line 149
	  <L = [_2|[]]> when 'true' ->
	      %% Line 150
	      L
	  %% Line 151
	  <[A|[B|[]]]> when 'true' ->
	      %% Line 152
	      [B|[A|[]]]
	  %% Line 153
	  <[A|[B|L]]> when 'true' ->
	      %% Line 154
	      call 'lists':'reverse'
		  (L, [B|[A|[]]])
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'reverse',1}}] )
	    -| ['compiler_generated'] )
	end
'nth'/2 =
    %% Line 170
    fun (_0,_1) ->
	case <_0,_1> of
	  <1,[H|_5]> when 'true' ->
	      H
	  %% Line 171
	  <N,[_6|T]>
	      when call 'erlang':'>'
		    (N,
		     1) ->
	      let <_2> =
		  call %% Line 172
		       'erlang':%% Line 172
				'-'
		      (%% Line 172
		       N, %% Line 172
			  1)
	      in  %% Line 172
		  apply 'nth'/2
		      (_2, T)
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'nth',2}}] )
	    -| ['compiler_generated'] )
	end
'nthtail'/2 =
    %% Line 180
    fun (_0,_1) ->
	case <_0,_1> of
	  <1,[_5|T]> when 'true' ->
	      T
	  %% Line 181
	  <N,[_6|T]>
	      when call 'erlang':'>'
		    (N,
		     1) ->
	      let <_2> =
		  call %% Line 182
		       'erlang':%% Line 182
				'-'
		      (%% Line 182
		       N, %% Line 182
			  1)
	      in  %% Line 182
		  apply 'nthtail'/2
		      (_2, T)
	  %% Line 183
	  <0,L>
	      when call 'erlang':'is_list'
		    (L) ->
	      L
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'nthtail',2}}] )
	    -| ['compiler_generated'] )
	end
'prefix'/2 =
    %% Line 192
    fun (_0,_1) ->
	case <_0,_1> of
	  <[X|PreTail],[_4|Tail]>
	      when call 'erlang':'=:='
		    (_4,
		     X) ->
	      %% Line 193
	      apply 'prefix'/2
		  (PreTail, Tail)
	  %% Line 194
	  <[],List>
	      when call 'erlang':'is_list'
		    (List) ->
	      'true'
	  %% Line 195
	  <[_5|_6],List>
	      when call 'erlang':'is_list'
		    (List) ->
	      'false'
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'prefix',2}}] )
	    -| ['compiler_generated'] )
	end
'suffix'/2 =
    %% Line 204
    fun (_0,_1) ->
	let <_3> =
	    call %% Line 205
		 'erlang':%% Line 205
			  'length'
		(_1)
	in  let <_2> =
		call %% Line 205
		     'erlang':%% Line 205
			      'length'
		    (_0)
	    in  let <Delta> =
		    call %% Line 205
			 'erlang':%% Line 205
				  '-'
			(_3, _2)
		in  %% Line 206
		    ( case <> of
			( <>
			      when call 'erlang':'>='
				    (Delta,
				     0) ->
			      let <_6> =
				  apply 'nthtail'/2
				      (Delta, _1)
			      in  call 'erlang':'=:='
				      (_6, _0)
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      'false'
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
'droplast'/1 =
    %% Line 218
    fun (_0) ->
	case _0 of
	  <[_X_T|[]]> when 'true' ->
	      []
	  %% Line 219
	  <[H|T]> when 'true' ->
	      let <_1> =
		  apply 'droplast'/1
		      (T)
	      in  [H|_1]
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'droplast',1}}] )
	    -| ['compiler_generated'] )
	end
'last'/1 =
    %% Line 228
    fun (_0) ->
	case _0 of
	  <[E|Es]> when 'true' ->
	      apply 'last'/2
		  (E, Es)
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'last',1}}] )
	    -| ['compiler_generated'] )
	end
'last'/2 =
    %% Line 230
    fun (_0,_1) ->
	case <_0,_1> of
	  <_4,[E|Es]> when 'true' ->
	      apply 'last'/2
		  (E, Es)
	  %% Line 231
	  <E,[]> when 'true' ->
	      E
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'last',2}}] )
	    -| ['compiler_generated'] )
	end
'seq'/2 =
    %% Line 243
    fun (_0,_1) ->
	case <_0,_1> of
	  <First,Last>
	      when %% Line 244
		try
		    let <_2> =
			call 'erlang':'is_integer'
			    (First)
		    in  let <_3> =
			    call 'erlang':'is_integer'
				(Last)
			in  let <_4> =
				call 'erlang':'-'
				    (First, 1)
			    in  let <_5> =
				    call 'erlang':'=<'
					(_4, Last)
				in  let <_6> =
					call 'erlang':'and'
					    (_3, _5)
				    in  call 'erlang':'and'
					    (_2, _6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_7> =
		  call %% Line 245
		       'erlang':%% Line 245
				'-'
		      (%% Line 245
		       Last, %% Line 245
			     First)
	      in  let <_8> =
		      call %% Line 245
			   'erlang':%% Line 245
				    '+'
			  (_7, %% Line 245
			       1)
		  in  %% Line 245
		      apply 'seq_loop'/3
			  (_8, Last, [])
	  ( <_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9})
		  -| [{'function_name',{'seq',2}}] )
	    -| ['compiler_generated'] )
	end
'seq_loop'/3 =
    %% Line 247
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <N,X,L>
	      when call 'erlang':'>='
		    (N,
		     4) ->
	      let <_7> =
		  call %% Line 248
		       'erlang':%% Line 248
				'-'
		      (%% Line 248
		       N, %% Line 248
			  4)
	      in  let <_6> =
		      call %% Line 248
			   'erlang':%% Line 248
				    '-'
			  (%% Line 248
			   X, %% Line 248
			      4)
		  in  let <_3> =
			  call %% Line 248
			       'erlang':%% Line 248
					'-'
			      (%% Line 248
			       X, %% Line 248
				  3)
		      in  let <_4> =
			      call %% Line 248
				   'erlang':%% Line 248
					    '-'
				  (%% Line 248
				   X, %% Line 248
				      2)
			  in  let <_5> =
				  call %% Line 248
				       'erlang':%% Line 248
						'-'
				      (%% Line 248
				       X, %% Line 248
					  1)
			      in  %% Line 248
				  apply 'seq_loop'/3
				      (_7, _6, [_3|[_4|[_5|[X|L]]]])
	  %% Line 249
	  <N,X,L>
	      when call 'erlang':'>='
		    (N,
		     2) ->
	      let <_10> =
		  call %% Line 250
		       'erlang':%% Line 250
				'-'
		      (%% Line 250
		       N, %% Line 250
			  2)
	      in  let <_9> =
		      call %% Line 250
			   'erlang':%% Line 250
				    '-'
			  (%% Line 250
			   X, %% Line 250
			      2)
		  in  let <_8> =
			  call %% Line 250
			       'erlang':%% Line 250
					'-'
			      (%% Line 250
			       X, %% Line 250
				  1)
		      in  %% Line 250
			  apply 'seq_loop'/3
			      (_10, _9, [_8|[X|L]])
	  %% Line 251
	  <1,X,L> when 'true' ->
	      %% Line 252
	      [X|L]
	  %% Line 253
	  <0,_14,L> when 'true' ->
	      %% Line 254
	      L
	  ( <_13,_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12,_11})
		  -| [{'function_name',{'seq_loop',3}}] )
	    -| ['compiler_generated'] )
	end
'seq'/3 =
    %% Line 262
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <First,Last,Inc>
	      when %% Line 263
		try
		    let <_3> =
			call 'erlang':'is_integer'
			    (First)
		    in  let <_4> =
			    call 'erlang':'is_integer'
				(Last)
			in  let <_5> =
				call 'erlang':'is_integer'
				    (Inc)
			    in  let <_6> =
				    call 'erlang':'and'
					(_4, _5)
				in  call 'erlang':'and'
					(_3, _6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 264
	      case <> of
		%% Line 265
		<>
		    when let <_10> =
			  try
			      let <_7> =
				  call 'erlang':'>'
				      (Inc, 0)
			      in  let <_8> =
				      call 'erlang':'-'
					  (First, Inc)
				  in  let <_9> =
					  call 'erlang':'=<'
					      (_8, Last)
				      in  call 'erlang':'and'
					      (_7, _9)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false'
		      in  let <_14> =
			      try
				  let <_11> =
				      call %% Line 266
					   'erlang':%% Line 266
						    '<'
					  (%% Line 266
					   Inc, %% Line 266
						0)
				  in  let <_12> =
					  call %% Line 266
					       'erlang':%% Line 266
							'-'
					      (%% Line 266
					       First, %% Line 266
						      Inc)
				      in  let <_13> =
					      call %% Line 266
						   'erlang':%% Line 266
							    '>='
						  (_12, %% Line 266
							Last)
					  in  %% Line 266
					      call 'erlang':'and'
						  (_11, _13)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false'
			  in  call 'erlang':'or'
				  (_10, _14) ->
		    let <_15> =
			call %% Line 267
			     'erlang':%% Line 267
				      '-'
			    (%% Line 267
			     Last, %% Line 267
				   First)
		    in  let <_16> =
			    call %% Line 267
				 'erlang':%% Line 267
					  '+'
				(_15, %% Line 267
				      Inc)
			in  let <N> =
				call %% Line 267
				     'erlang':%% Line 267
					      'div'
				    (_16, %% Line 267
					  Inc)
			    in  let <_18> =
				    call %% Line 268
					 'erlang':%% Line 268
						  '-'
					(%% Line 268
					 N, %% Line 268
					    1)
				in  let <_19> =
					call %% Line 268
					     'erlang':%% Line 268
						      '*'
					    (%% Line 268
					     Inc, _18)
				    in  let <_20> =
					    call %% Line 268
						 'erlang':%% Line 268
							  '+'
						(_19, %% Line 268
						      First)
					in  %% Line 268
					    apply 'seq_loop'/4
						(N, _20, Inc, [])
		%% Line 269
		<>
		    when let <_21> =
			  call 'erlang':'=:='
			      (Inc, 0)
		      in  let <_22> =
			      call 'erlang':'=:='
				  (First, Last)
			  in  call 'erlang':'and'
				  (_21, _22) ->
		    %% Line 270
		    apply 'seq_loop'/4
			(1, First, Inc, [])
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	  ( <_25,_24,_23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_25,_24,_23})
		  -| [{'function_name',{'seq',3}}] )
	    -| ['compiler_generated'] )
	end
'seq_loop'/4 =
    %% Line 273
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <N,X,D,L>
	      when call 'erlang':'>='
		    (N,
		     4) ->
	      let <Y> =
		  call %% Line 274
		       'erlang':%% Line 274
				'-'
		      (%% Line 274
		       X, %% Line 274
			  D)
	      in  let <Z> =
		      call %% Line 274
			   'erlang':%% Line 274
				    '-'
			  (%% Line 274
			   Y, %% Line 274
			      D)
		  in  let <W> =
			  call %% Line 274
			       'erlang':%% Line 274
					'-'
			      (%% Line 274
			       Z, %% Line 274
				  D)
		      in  let <_8> =
			      call %% Line 275
				   'erlang':%% Line 275
					    '-'
				  (%% Line 275
				   N, %% Line 275
				      4)
			  in  let <_7> =
				  call %% Line 275
				       'erlang':%% Line 275
						'-'
				      (%% Line 275
				       W, %% Line 275
					  D)
			      in  %% Line 275
				  apply 'seq_loop'/4
				      (_8, _7, D, [W|[Z|[Y|[X|L]]]])
	  %% Line 276
	  <N,X,D,L>
	      when call 'erlang':'>='
		    (N,
		     2) ->
	      let <Y> =
		  call %% Line 277
		       'erlang':%% Line 277
				'-'
		      (%% Line 277
		       X, %% Line 277
			  D)
	      in  let <_11> =
		      call %% Line 278
			   'erlang':%% Line 278
				    '-'
			  (%% Line 278
			   N, %% Line 278
			      2)
		  in  let <_10> =
			  call %% Line 278
			       'erlang':%% Line 278
					'-'
			      (%% Line 278
			       Y, %% Line 278
				  D)
		      in  %% Line 278
			  apply 'seq_loop'/4
			      (_11, _10, D, [Y|[X|L]])
	  %% Line 279
	  <1,X,_16,L> when 'true' ->
	      %% Line 280
	      [X|L]
	  %% Line 281
	  <0,_17,_18,L> when 'true' ->
	      %% Line 282
	      L
	  ( <_15,_14,_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_15,_14,_13,_12})
		  -| [{'function_name',{'seq_loop',4}}] )
	    -| ['compiler_generated'] )
	end
'sum'/1 =
    %% Line 289
    fun (_0) ->
	apply 'sum'/2
	    (_0, 0)
'sum'/2 =
    %% Line 291
    fun (_0,_1) ->
	case <_0,_1> of
	  <[H|T],Sum> when 'true' ->
	      let <_2> =
		  call 'erlang':'+'
		      (Sum, H)
	      in  apply 'sum'/2
		      (T, _2)
	  %% Line 292
	  <[],Sum> when 'true' ->
	      Sum
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'sum',2}}] )
	    -| ['compiler_generated'] )
	end
'duplicate'/2 =
    %% Line 303
    fun (_0,_1) ->
	case <_0,_1> of
	  <N,X>
	      when let <_2> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_3> =
			call 'erlang':'>='
			    (N, 0)
		    in  call 'erlang':'and'
			    (_2, _3) ->
	      apply 'duplicate'/3
		  (N, X, [])
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'duplicate',2}}] )
	    -| ['compiler_generated'] )
	end
'duplicate'/3 =
    %% Line 305
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <0,_7,L> when 'true' ->
	      L
	  %% Line 306
	  <N,X,L> when 'true' ->
	      let <_3> =
		  call 'erlang':'-'
		      (N, 1)
	      in  apply 'duplicate'/3
		      (_3, X, [X|L])
	end
'min'/1 =
    %% Line 315
    fun (_0) ->
	case _0 of
	  <[H|T]> when 'true' ->
	      apply 'min'/2
		  (T, H)
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'min',1}}] )
	    -| ['compiler_generated'] )
	end
'min'/2 =
    %% Line 317
    fun (_0,_1) ->
	case <_0,_1> of
	  <[H|T],Min>
	      when call 'erlang':'<'
		    (H,
		     Min) ->
	      apply 'min'/2
		  (T, H)
	  %% Line 318
	  <[_4|T],Min> when 'true' ->
	      apply 'min'/2
		  (T, Min)
	  %% Line 319
	  <[],Min> when 'true' ->
	      Min
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'min',2}}] )
	    -| ['compiler_generated'] )
	end
'max'/1 =
    %% Line 328
    fun (_0) ->
	case _0 of
	  <[H|T]> when 'true' ->
	      apply 'max'/2
		  (T, H)
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'max',1}}] )
	    -| ['compiler_generated'] )
	end
'max'/2 =
    %% Line 330
    fun (_0,_1) ->
	case <_0,_1> of
	  <[H|T],Max>
	      when call 'erlang':'>'
		    (H,
		     Max) ->
	      apply 'max'/2
		  (T, H)
	  %% Line 331
	  <[_4|T],Max> when 'true' ->
	      apply 'max'/2
		  (T, Max)
	  %% Line 332
	  <[],Max> when 'true' ->
	      Max
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'max',2}}] )
	    -| ['compiler_generated'] )
	end
'sublist'/3 =
    %% Line 344
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <List,S,L>
	      when let <_3> =
		    call 'erlang':'is_integer'
			(L)
		in  let <_4> =
			call 'erlang':'>='
			    (L, 0)
		    in  call 'erlang':'and'
			    (_3, _4) ->
	      let <_5> =
		  call %% Line 345
		       'erlang':%% Line 345
				'-'
		      (%% Line 345
		       S, %% Line 345
			  1)
	      in  let <_6> =
		      apply %% Line 345
			    'nthtail'/2
			  (_5, %% Line 345
			       List)
		  in  %% Line 345
		      apply 'sublist'/2
			  (_6, L)
	  ( <_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7})
		  -| [{'function_name',{'sublist',3}}] )
	    -| ['compiler_generated'] )
	end
'sublist'/2 =
    %% Line 353
    fun (_0,_1) ->
	case <_0,_1> of
	  <List,L>
	      when let <_2> =
		    call 'erlang':'is_integer'
			(L)
		in  let <_3> =
			call 'erlang':'is_list'
			    (List)
		    in  call 'erlang':'and'
			    (_2, _3) ->
	      %% Line 354
	      apply 'sublist_2'/2
		  (List, L)
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'sublist',2}}] )
	    -| ['compiler_generated'] )
	end
'sublist_2'/2 =
    %% Line 356
    fun (_0,_1) ->
	case <_0,_1> of
	  <[H|T],L>
	      when call 'erlang':'>'
		    (L,
		     0) ->
	      let <_2> =
		  call %% Line 357
		       'erlang':%% Line 357
				'-'
		      (%% Line 357
		       L, %% Line 357
			  1)
	      in  let <_3> =
		      apply %% Line 357
			    'sublist_2'/2
			  (%% Line 357
			   T, _2)
		  in  %% Line 357
		      [H|_3]
	  %% Line 358
	  <_8,0> when 'true' ->
	      %% Line 359
	      []
	  %% Line 360
	  <List,L>
	      when let <_4> =
		    call 'erlang':'is_list'
			(List)
		in  let <_5> =
			call 'erlang':'>'
			    (L, 0)
		    in  call 'erlang':'and'
			    (_4, _5) ->
	      %% Line 361
	      []
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'sublist_2',2}}] )
	    -| ['compiler_generated'] )
	end
'delete'/2 =
    %% Line 372
    fun (_0,_1) ->
	case <_0,_1> of
	  <Item,[_5|Rest]>
	      when call 'erlang':'=:='
		    (_5,
		     Item) ->
	      Rest
	  %% Line 373
	  <Item,[H|Rest]> when 'true' ->
	      let <_2> =
		  apply %% Line 374
			'delete'/2
		      (%% Line 374
		       Item, %% Line 374
			     Rest)
	      in  %% Line 374
		  [H|_2]
	  %% Line 375
	  <_6,[]> when 'true' ->
	      []
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'delete',2}}] )
	    -| ['compiler_generated'] )
	end
'zip'/2 =
    %% Line 387
    fun (_0,_1) ->
	case <_0,_1> of
	  <[X|Xs],[Y|Ys]> when 'true' ->
	      let <_2> =
		  apply 'zip'/2
		      (Xs, Ys)
	      in  [{X,Y}|_2]
	  %% Line 388
	  <[],[]> when 'true' ->
	      []
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'zip',2}}] )
	    -| ['compiler_generated'] )
	end
'unzip'/1 =
    %% Line 400
    fun (_0) ->
	apply 'unzip'/3
	    (_0, [], [])
'unzip'/3 =
    %% Line 402
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[{X,Y}|Ts],Xs,Ys> when 'true' ->
	      apply 'unzip'/3
		  (Ts, [X|Xs], [Y|Ys])
	  %% Line 403
	  <[],Xs,Ys> when 'true' ->
	      let <_4> =
		  apply 'reverse'/1
		      (Xs)
	      in  let <_3> =
		      apply 'reverse'/1
			  (Ys)
		  in  {_4,_3}
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'unzip',3}}] )
	    -| ['compiler_generated'] )
	end
'zip3'/3 =
    %% Line 417
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[X|Xs],[Y|Ys],[Z|Zs]> when 'true' ->
	      let <_3> =
		  apply 'zip3'/3
		      (Xs, Ys, Zs)
	      in  [{X,Y,Z}|_3]
	  %% Line 418
	  <[],[],[]> when 'true' ->
	      []
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'zip3',3}}] )
	    -| ['compiler_generated'] )
	end
'unzip3'/1 =
    %% Line 432
    fun (_0) ->
	apply 'unzip3'/4
	    (_0, [], [], [])
'unzip3'/4 =
    %% Line 434
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[{X,Y,Z}|Ts],Xs,Ys,Zs> when 'true' ->
	      %% Line 435
	      apply 'unzip3'/4
		  (Ts, [X|Xs], [Y|Ys], [Z|Zs])
	  %% Line 436
	  <[],Xs,Ys,Zs> when 'true' ->
	      let <_6> =
		  apply %% Line 437
			'reverse'/1
		      (%% Line 437
		       Xs)
	      in  let <_5> =
		      apply %% Line 437
			    'reverse'/1
			  (%% Line 437
			   Ys)
		  in  let <_4> =
			  apply %% Line 437
				'reverse'/1
			      (%% Line 437
			       Zs)
		      in  %% Line 437
			  {_6,_5,_4}
	  ( <_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8,_7})
		  -| [{'function_name',{'unzip3',4}}] )
	    -| ['compiler_generated'] )
	end
'zipwith'/3 =
    %% Line 451
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <F,[X|Xs],[Y|Ys]> when 'true' ->
	      let <_3> =
		  apply F
		      (X, Y)
	      in  let <_4> =
		      apply 'zipwith'/3
			  (F, Xs, Ys)
		  in  [_3|_4]
	  %% Line 452
	  <F,[],[]>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      []
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'zipwith',3}}] )
	    -| ['compiler_generated'] )
	end
'zipwith3'/4 =
    %% Line 468
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <F,[X|Xs],[Y|Ys],[Z|Zs]> when 'true' ->
	      let <_4> =
		  apply %% Line 469
			F
		      (%% Line 469
		       X, %% Line 469
			  Y, %% Line 469
			     Z)
	      in  let <_5> =
		      apply %% Line 469
			    'zipwith3'/4
			  (%% Line 469
			   F, %% Line 469
			      Xs, %% Line 469
				  Ys, %% Line 469
				      Zs)
		  in  %% Line 469
		      [_4|_5]
	  %% Line 470
	  <F,[],[],[]>
	      when call 'erlang':'is_function'
		    (F,
		     3) ->
	      []
	  ( <_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6})
		  -| [{'function_name',{'zipwith3',4}}] )
	    -| ['compiler_generated'] )
	end
'sort'/1 =
    %% Line 480
    fun (_0) ->
	case _0 of
	  <L0 = [X|[Y|L]]>
	      when call 'erlang':'=<'
		    (X,
		     Y) ->
	      %% Line 481
	      case L of
		%% Line 482
		<[]> when 'true' ->
		    %% Line 483
		    L0
		%% Line 484
		<[Z|[]]>
		    when call 'erlang':'=<'
			  (Y,
			   Z) ->
		    %% Line 485
		    L0
		%% Line 486
		<[Z|[]]>
		    when call 'erlang':'=<'
			  (X,
			   Z) ->
		    %% Line 487
		    [X|[Z|[Y|[]]]]
		%% Line 488
		<[Z|[]]> when 'true' ->
		    %% Line 489
		    [Z|[X|[Y|[]]]]
		%% Line 490
		<_4>
		    when call 'erlang':'=='
			  (X,
			   Y) ->
		    %% Line 491
		    apply 'sort_1'/3
			(Y, L, [X|[]])
		%% Line 492
		<_5> when 'true' ->
		    %% Line 493
		    apply 'split_1'/5
			(X, Y, L, [], [])
	      end
	  %% Line 495
	  <[X|[Y|L]]> when 'true' ->
	      %% Line 496
	      case L of
		%% Line 497
		<[]> when 'true' ->
		    %% Line 498
		    [Y|[X|[]]]
		%% Line 499
		<[Z|[]]>
		    when call 'erlang':'=<'
			  (X,
			   Z) ->
		    %% Line 500
		    [Y|[X|L]]
		%% Line 501
		<[Z|[]]>
		    when call 'erlang':'=<'
			  (Y,
			   Z) ->
		    %% Line 502
		    [Y|[Z|[X|[]]]]
		%% Line 503
		<[Z|[]]> when 'true' ->
		    %% Line 504
		    [Z|[Y|[X|[]]]]
		%% Line 505
		<_6> when 'true' ->
		    %% Line 506
		    apply 'split_2'/5
			(X, Y, L, [], [])
	      end
	  %% Line 508
	  <L = [_7|[]]> when 'true' ->
	      %% Line 509
	      L
	  %% Line 510
	  <L = []> when 'true' ->
	      %% Line 511
	      L
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'sort',1}}] )
	    -| ['compiler_generated'] )
	end
'sort_1'/3 =
    %% Line 513
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <X,[Y|L],R>
	      when call 'erlang':'=='
		    (X,
		     Y) ->
	      %% Line 514
	      apply 'sort_1'/3
		  (Y, L, [X|R])
	  %% Line 515
	  <X,[Y|L],R>
	      when call 'erlang':'<'
		    (X,
		     Y) ->
	      %% Line 516
	      apply 'split_1'/5
		  (X, Y, L, R, [])
	  %% Line 517
	  <X,[Y|L],R> when 'true' ->
	      %% Line 518
	      apply 'split_2'/5
		  (X, Y, L, R, [])
	  %% Line 519
	  <X,[],R> when 'true' ->
	      %% Line 520
	      call 'lists':'reverse'
		  (R, [X|[]])
	  ( <_5,_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4,_3})
		  -| [{'function_name',{'sort_1',3}}] )
	    -| ['compiler_generated'] )
	end
'merge'/1 =
    %% Line 531
    fun (_0) ->
	%% Line 532
	apply 'mergel'/2
	    (_0, [])
'merge3'/3 =
    %% Line 546
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <L1,[],L3> when 'true' ->
	      %% Line 547
	      apply 'merge'/2
		  (L1, L3)
	  %% Line 548
	  <L1,L2,[]> when 'true' ->
	      %% Line 549
	      apply 'merge'/2
		  (L1, L2)
	  %% Line 550
	  <L1,[H2|T2],[H3|T3]> when 'true' ->
	      let <_3> =
		  apply %% Line 551
			'merge3_1'/6
		      (%% Line 551
		       L1, %% Line 551
			   [], %% Line 551
			       H2, %% Line 551
				   T2, %% Line 551
				       H3, %% Line 551
					   T3)
	      in  %% Line 551
		  call 'lists':'reverse'
		      (_3, [])
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'merge3',3}}] )
	    -| ['compiler_generated'] )
	end
'rmerge3'/3 =
    %% Line 558
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <L1,[],L3> when 'true' ->
	      %% Line 559
	      apply 'rmerge'/2
		  (L1, L3)
	  %% Line 560
	  <L1,L2,[]> when 'true' ->
	      %% Line 561
	      apply 'rmerge'/2
		  (L1, L2)
	  %% Line 562
	  <L1,[H2|T2],[H3|T3]> when 'true' ->
	      let <_3> =
		  apply %% Line 563
			'rmerge3_1'/6
		      (%% Line 563
		       L1, %% Line 563
			   [], %% Line 563
			       H2, %% Line 563
				   T2, %% Line 563
				       H3, %% Line 563
					   T3)
	      in  %% Line 563
		  call 'lists':'reverse'
		      (_3, [])
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'rmerge3',3}}] )
	    -| ['compiler_generated'] )
	end
'merge'/2 =
    %% Line 575
    fun (_0,_1) ->
	case <_0,_1> of
	  <T1,[]> when 'true' ->
	      %% Line 576
	      T1
	  %% Line 577
	  <T1,[H2|T2]> when 'true' ->
	      let <_2> =
		  apply %% Line 578
			'merge2_1'/4
		      (%% Line 578
		       T1, %% Line 578
			   H2, %% Line 578
			       T2, %% Line 578
				   [])
	      in  %% Line 578
		  call 'lists':'reverse'
		      (_2, [])
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'merge',2}}] )
	    -| ['compiler_generated'] )
	end
'rmerge'/2 =
    %% Line 587
    fun (_0,_1) ->
	case <_0,_1> of
	  <T1,[]> when 'true' ->
	      %% Line 588
	      T1
	  %% Line 589
	  <T1,[H2|T2]> when 'true' ->
	      let <_2> =
		  apply %% Line 590
			'rmerge2_1'/4
		      (%% Line 590
		       T1, %% Line 590
			   H2, %% Line 590
			       T2, %% Line 590
				   [])
	      in  %% Line 590
		  call 'lists':'reverse'
		      (_2, [])
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'rmerge',2}}] )
	    -| ['compiler_generated'] )
	end
'concat'/1 =
    %% Line 600
    fun (_0) ->
	let <_1> = 'thing_to_list'/1
	in  %% Line 601
	    apply 'flatmap'/2
		(_1, _0)
'thing_to_list'/1 =
    %% Line 603
    fun (_0) ->
	case _0 of
	  <X>
	      when call 'erlang':'is_integer'
		    (_0) ->
	      call 'erlang':'integer_to_list'
		  (X)
	  %% Line 604
	  <X>
	      when call 'erlang':'is_float'
		    (_0) ->
	      call 'erlang':'float_to_list'
		  (X)
	  %% Line 605
	  <X>
	      when call 'erlang':'is_atom'
		    (_0) ->
	      call 'erlang':'atom_to_list'
		  (X)
	  %% Line 606
	  <X>
	      when call 'erlang':'is_list'
		    (_0) ->
	      X
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'thing_to_list',1}}] )
	    -| ['compiler_generated'] )
	end
'flatten'/1 =
    %% Line 616
    fun (_0) ->
	case _0 of
	  <List>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 617
	      apply 'do_flatten'/2
		  (List, [])
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'flatten',1}}] )
	    -| ['compiler_generated'] )
	end
'flatten'/2 =
    %% Line 624
    fun (_0,_1) ->
	case <_0,_1> of
	  <List,Tail>
	      when let <_2> =
		    call 'erlang':'is_list'
			(List)
		in  let <_3> =
			call 'erlang':'is_list'
			    (Tail)
		    in  call 'erlang':'and'
			    (_2, _3) ->
	      %% Line 625
	      apply 'do_flatten'/2
		  (List, Tail)
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'flatten',2}}] )
	    -| ['compiler_generated'] )
	end
'do_flatten'/2 =
    %% Line 627
    fun (_0,_1) ->
	case <_0,_1> of
	  <[H|T],Tail>
	      when call 'erlang':'is_list'
		    (H) ->
	      let <_2> =
		  apply %% Line 628
			'do_flatten'/2
		      (%% Line 628
		       T, %% Line 628
			  Tail)
	      in  %% Line 628
		  apply 'do_flatten'/2
		      (H, _2)
	  %% Line 629
	  <[H|T],Tail> when 'true' ->
	      let <_3> =
		  apply %% Line 630
			'do_flatten'/2
		      (%% Line 630
		       T, %% Line 630
			  Tail)
	      in  %% Line 630
		  [H|_3]
	  %% Line 631
	  <[],Tail> when 'true' ->
	      %% Line 632
	      Tail
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'do_flatten',2}}] )
	    -| ['compiler_generated'] )
	end
'flatlength'/1 =
    %% Line 640
    fun (_0) ->
	%% Line 641
	apply 'flatlength'/2
	    (_0, 0)
'flatlength'/2 =
    %% Line 643
    fun (_0,_1) ->
	case <_0,_1> of
	  <[H|T],L>
	      when call 'erlang':'is_list'
		    (H) ->
	      let <_2> =
		  apply %% Line 644
			'flatlength'/2
		      (%% Line 644
		       T, %% Line 644
			  L)
	      in  %% Line 644
		  apply 'flatlength'/2
		      (H, _2)
	  %% Line 645
	  <[_6|T],L> when 'true' ->
	      let <_3> =
		  call %% Line 646
		       'erlang':%% Line 646
				'+'
		      (%% Line 646
		       L, %% Line 646
			  1)
	      in  %% Line 646
		  apply 'flatlength'/2
		      (T, _3)
	  %% Line 647
	  <[],L> when 'true' ->
	      L
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'flatlength',2}}] )
	    -| ['compiler_generated'] )
	end
'keydelete'/3 =
    %% Line 687
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <K,N,L>
	      when let <_3> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_4> =
			call 'erlang':'>'
			    (N, 0)
		    in  call 'erlang':'and'
			    (_3, _4) ->
	      %% Line 688
	      apply 'keydelete3'/3
		  (K, N, L)
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'keydelete',3}}] )
	    -| ['compiler_generated'] )
	end
'keydelete3'/3 =
    %% Line 690
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Key,N,[H|T]>
	      when try
		    let <_3> =
			call 'erlang':'element'
			    (N, H)
		    in  call 'erlang':'=='
			    (_3, Key)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      T
	  %% Line 691
	  <Key,N,[H|T]> when 'true' ->
	      let <_4> =
		  apply %% Line 692
			'keydelete3'/3
		      (%% Line 692
		       Key, %% Line 692
			    N, %% Line 692
			       T)
	      in  %% Line 692
		  [H|_4]
	  %% Line 693
	  <_8,_9,[]> when 'true' ->
	      []
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'keydelete3',3}}] )
	    -| ['compiler_generated'] )
	end
'keyreplace'/4 =
    %% Line 703
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <K,N,L,New>
	      when try
		    let <_4> =
			call 'erlang':'is_integer'
			    (N)
		    in  let <_5> =
			    call 'erlang':'>'
				(N, 0)
			in  let <_6> =
				call 'erlang':'is_tuple'
				    (New)
			    in  let <_7> =
				    call 'erlang':'and'
					(_5, _6)
				in  call 'erlang':'and'
					(_4, _7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 704
	      apply 'keyreplace3'/4
		  (K, N, L, New)
	  ( <_11,_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8})
		  -| [{'function_name',{'keyreplace',4}}] )
	    -| ['compiler_generated'] )
	end
'keyreplace3'/4 =
    %% Line 706
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Key,Pos,[Tup|Tail],New>
	      when try
		    let <_4> =
			call 'erlang':'element'
			    (Pos, Tup)
		    in  call 'erlang':'=='
			    (_4, Key)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 707
	      [New|Tail]
	  %% Line 708
	  <Key,Pos,[H|T],New> when 'true' ->
	      let <_5> =
		  apply %% Line 709
			'keyreplace3'/4
		      (%% Line 709
		       Key, %% Line 709
			    Pos, %% Line 709
				 T, %% Line 709
				    New)
	      in  %% Line 709
		  [H|_5]
	  %% Line 710
	  <_10,_11,[],_12> when 'true' ->
	      []
	  ( <_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6})
		  -| [{'function_name',{'keyreplace3',4}}] )
	    -| ['compiler_generated'] )
	end
'keytake'/3 =
    %% Line 719
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Key,N,L>
	      when let <_3> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_4> =
			call 'erlang':'>'
			    (N, 0)
		    in  call 'erlang':'and'
			    (_3, _4) ->
	      %% Line 720
	      apply 'keytake'/4
		  (Key, N, L, [])
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'keytake',3}}] )
	    -| ['compiler_generated'] )
	end
'keytake'/4 =
    %% Line 722
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Key,N,[H|T],L>
	      when try
		    let <_4> =
			call 'erlang':'element'
			    (N, H)
		    in  call 'erlang':'=='
			    (_4, Key)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_5> =
		  call %% Line 723
		       'lists':%% Line 723
			       'reverse'
		      (%% Line 723
		       L, %% Line 723
			  T)
	      in  %% Line 723
		  {'value',H,_5}
	  %% Line 724
	  <Key,N,[H|T],L> when 'true' ->
	      %% Line 725
	      apply 'keytake'/4
		  (Key, N, T, [H|L])
	  %% Line 726
	  <_X_K,_X_N,[],_X_L> when 'true' ->
	      'false'
	  ( <_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6})
		  -| [{'function_name',{'keytake',4}}] )
	    -| ['compiler_generated'] )
	end
'keystore'/4 =
    %% Line 736
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <K,N,L,New>
	      when try
		    let <_4> =
			call 'erlang':'is_integer'
			    (N)
		    in  let <_5> =
			    call 'erlang':'>'
				(N, 0)
			in  let <_6> =
				call 'erlang':'is_tuple'
				    (New)
			    in  let <_7> =
				    call 'erlang':'and'
					(_5, _6)
				in  call 'erlang':'and'
					(_4, _7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 737
	      apply 'keystore2'/4
		  (K, N, L, New)
	  ( <_11,_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8})
		  -| [{'function_name',{'keystore',4}}] )
	    -| ['compiler_generated'] )
	end
'keystore2'/4 =
    %% Line 739
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Key,N,[H|T],New>
	      when try
		    let <_4> =
			call 'erlang':'element'
			    (N, H)
		    in  call 'erlang':'=='
			    (_4, Key)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 740
	      [New|T]
	  %% Line 741
	  <Key,N,[H|T],New> when 'true' ->
	      let <_5> =
		  apply %% Line 742
			'keystore2'/4
		      (%% Line 742
		       Key, %% Line 742
			    N, %% Line 742
			       T, %% Line 742
				  New)
	      in  %% Line 742
		  [H|_5]
	  %% Line 743
	  <_X_Key,_X_N,[],New> when 'true' ->
	      %% Line 744
	      [New|[]]
	  ( <_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6})
		  -| [{'function_name',{'keystore2',4}}] )
	    -| ['compiler_generated'] )
	end
'keysort'/2 =
    %% Line 752
    fun (_0,_1) ->
	case <_0,_1> of
	  <I,L>
	      when let <_2> =
		    call 'erlang':'is_integer'
			(I)
		in  let <_3> =
			call 'erlang':'>'
			    (I, 0)
		    in  call 'erlang':'and'
			    (_2, _3) ->
	      %% Line 753
	      case L of
		%% Line 754
		<[]> when 'true' ->
		    L
		%% Line 755
		<[_14|[]]> when 'true' ->
		    L
		%% Line 756
		<[X|[Y|T]]> when 'true' ->
		    let <_5> =
			call %% Line 757
			     'erlang':%% Line 757
				      'element'
			    (%% Line 757
			     I, %% Line 757
				X)
		    in  let <_4> =
			    call %% Line 757
				 'erlang':%% Line 757
					  'element'
				(%% Line 757
				 I, %% Line 757
				    Y)
			in  %% Line 757
			    case <_5,_4> of
			      %% Line 758
			      <EX,EY>
				  when call 'erlang':'=<'
					(EX,
					 EY) ->
				  %% Line 759
				  case T of
				    %% Line 760
				    <[]> when 'true' ->
					%% Line 761
					L
				    %% Line 762
				    <[Z|[]]> when 'true' ->
					%% Line 763
					case call 'erlang':'element'
						 (I, Z) of
					  %% Line 764
					  <EZ>
					      when call 'erlang':'=<'
						    (EY,
						     EZ) ->
					      %% Line 765
					      L
					  %% Line 766
					  <EZ>
					      when call 'erlang':'=<'
						    (EX,
						     EZ) ->
					      %% Line 767
					      [X|[Z|[Y|[]]]]
					  %% Line 768
					  <_X_EZ> when 'true' ->
					      %% Line 769
					      [Z|[X|[Y|[]]]]
					end
				    %% Line 771
				    <_15>
					when call 'erlang':'=='
					      (X,
					       Y) ->
					%% Line 772
					apply 'keysort_1'/5
					    (I, Y, EY, T, [X|[]])
				    %% Line 773
				    <_16> when 'true' ->
					%% Line 774
					apply 'keysplit_1'/8
					    (I, X, EX, Y, EY, T, [], [])
				  end
			      %% Line 776
			      <EX,EY> when 'true' ->
				  %% Line 777
				  case T of
				    %% Line 778
				    <[]> when 'true' ->
					%% Line 779
					[Y|[X|[]]]
				    %% Line 780
				    <[Z|[]]> when 'true' ->
					%% Line 781
					case call 'erlang':'element'
						 (I, Z) of
					  %% Line 782
					  <EZ>
					      when call 'erlang':'=<'
						    (EX,
						     EZ) ->
					      %% Line 783
					      [Y|[X|T]]
					  %% Line 784
					  <EZ>
					      when call 'erlang':'=<'
						    (EY,
						     EZ) ->
					      %% Line 785
					      [Y|[Z|[X|[]]]]
					  %% Line 786
					  <_X_EZ> when 'true' ->
					      %% Line 787
					      [Z|[Y|[X|[]]]]
					end
				    %% Line 789
				    <_17> when 'true' ->
					%% Line 790
					apply 'keysplit_2'/8
					    (I, X, EX, Y, EY, T, [], [])
				  end
			    end
		( <_11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_11})
		  -| ['compiler_generated'] )
	      end
	  ( <_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12})
		  -| [{'function_name',{'keysort',2}}] )
	    -| ['compiler_generated'] )
	end
'keysort_1'/5 =
    %% Line 795
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <I,X,EX,[Y|L],R>
	      when call 'erlang':'=='
		    (X,
		     Y) ->
	      %% Line 796
	      apply 'keysort_1'/5
		  (I, Y, EX, L, [X|R])
	  %% Line 797
	  <I,X,EX,[Y|L],R> when 'true' ->
	      %% Line 798
	      case call 'erlang':'element'
		       (I, Y) of
		%% Line 799
		<EY>
		    when call 'erlang':'=<'
			  (EX,
			   EY) ->
		    %% Line 800
		    apply 'keysplit_1'/8
			(I, X, EX, Y, EY, L, R, [])
		%% Line 801
		<EY> when 'true' ->
		    %% Line 802
		    apply 'keysplit_2'/8
			(I, X, EX, Y, EY, L, R, [])
	      end
	  %% Line 804
	  <_X_I,X,_X_EX,[],R> when 'true' ->
	      %% Line 805
	      call 'lists':'reverse'
		  (R, [X|[]])
	  ( <_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8,_7,_6})
		  -| [{'function_name',{'keysort_1',5}}] )
	    -| ['compiler_generated'] )
	end
'keymerge'/3 =
    %% Line 816
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Index,T1,L2>
	      when let <_3> =
		    call 'erlang':'is_integer'
			(Index)
		in  let <_4> =
			call 'erlang':'>'
			    (Index, 0)
		    in  call 'erlang':'and'
			    (_3, _4) ->
	      %% Line 817
	      case L2 of
		%% Line 818
		<[]> when 'true' ->
		    %% Line 819
		    T1
		%% Line 820
		<[H2|T2]> when 'true' ->
		    let <E2> =
			call %% Line 821
			     'erlang':%% Line 821
				      'element'
			    (%% Line 821
			     Index, %% Line 821
				    H2)
		    in  let <M> =
			    apply %% Line 822
				  'keymerge2_1'/6
				(%% Line 822
				 Index, %% Line 822
					T1, %% Line 822
					    E2, %% Line 822
						H2, %% Line 822
						    T2, %% Line 822
							[])
			in  %% Line 823
			    call 'lists':'reverse'
				(M, [])
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_7})
		  -| ['compiler_generated'] )
	      end
	  ( <_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8})
		  -| [{'function_name',{'keymerge',3}}] )
	    -| ['compiler_generated'] )
	end
'rkeymerge'/3 =
    %% Line 831
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Index,T1,L2>
	      when let <_3> =
		    call 'erlang':'is_integer'
			(Index)
		in  let <_4> =
			call 'erlang':'>'
			    (Index, 0)
		    in  call 'erlang':'and'
			    (_3, _4) ->
	      %% Line 832
	      case L2 of
		%% Line 833
		<[]> when 'true' ->
		    %% Line 834
		    T1
		%% Line 835
		<[H2|T2]> when 'true' ->
		    let <E2> =
			call %% Line 836
			     'erlang':%% Line 836
				      'element'
			    (%% Line 836
			     Index, %% Line 836
				    H2)
		    in  let <M> =
			    apply %% Line 837
				  'rkeymerge2_1'/6
				(%% Line 837
				 Index, %% Line 837
					T1, %% Line 837
					    E2, %% Line 837
						H2, %% Line 837
						    T2, %% Line 837
							[])
			in  %% Line 838
			    call 'lists':'reverse'
				(M, [])
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_7})
		  -| ['compiler_generated'] )
	      end
	  ( <_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8})
		  -| [{'function_name',{'rkeymerge',3}}] )
	    -| ['compiler_generated'] )
	end
'ukeysort'/2 =
    %% Line 847
    fun (_0,_1) ->
	case <_0,_1> of
	  <I,L>
	      when let <_2> =
		    call 'erlang':'is_integer'
			(I)
		in  let <_3> =
			call 'erlang':'>'
			    (I, 0)
		    in  call 'erlang':'and'
			    (_2, _3) ->
	      %% Line 848
	      case L of
		%% Line 849
		<[]> when 'true' ->
		    L
		%% Line 850
		<[_14|[]]> when 'true' ->
		    L
		%% Line 851
		<[X|[Y|T]]> when 'true' ->
		    let <_5> =
			call %% Line 852
			     'erlang':%% Line 852
				      'element'
			    (%% Line 852
			     I, %% Line 852
				X)
		    in  let <_4> =
			    call %% Line 852
				 'erlang':%% Line 852
					  'element'
				(%% Line 852
				 I, %% Line 852
				    Y)
			in  %% Line 852
			    case <_5,_4> of
			      %% Line 853
			      <EX,EY>
				  when call 'erlang':'=='
					(EX,
					 EY) ->
				  %% Line 854
				  apply 'ukeysort_1'/4
				      (I, X, EX, T)
			      %% Line 855
			      <EX,EY>
				  when call 'erlang':'<'
					(EX,
					 EY) ->
				  %% Line 856
				  case T of
				    %% Line 857
				    <[]> when 'true' ->
					%% Line 858
					L
				    %% Line 859
				    <_@r0 = [Z|[]]> when 'true' ->
					%% Line 860
					case call 'erlang':'element'
						 (I, Z) of
					  %% Line 861
					  <EZ>
					      when call 'erlang':'=='
						    (EY,
						     EZ) ->
					      %% Line 862
					      [X|[Y|[]]]
					  %% Line 863
					  <EZ>
					      when call 'erlang':'<'
						    (EY,
						     EZ) ->
					      %% Line 864
					      [X|[Y|_@r0]]
					  %% Line 865
					  <EZ>
					      when call 'erlang':'=='
						    (EZ,
						     EX) ->
					      %% Line 866
					      [X|[Y|[]]]
					  %% Line 867
					  <EZ>
					      when call 'erlang':'=<'
						    (EX,
						     EZ) ->
					      %% Line 868
					      [X|[Z|[Y|[]]]]
					  %% Line 869
					  <_X_EZ> when 'true' ->
					      %% Line 870
					      [Z|[X|[Y|[]]]]
					end
				    %% Line 872
				    <_15> when 'true' ->
					%% Line 873
					apply 'ukeysplit_1'/8
					    (I, X, EX, Y, EY, T, [], [])
				  end
			      %% Line 875
			      <EX,EY> when 'true' ->
				  %% Line 876
				  case T of
				    %% Line 877
				    <[]> when 'true' ->
					%% Line 878
					[Y|[X|[]]]
				    %% Line 879
				    <_@r1 = [Z|[]]> when 'true' ->
					%% Line 880
					case call 'erlang':'element'
						 (I, Z) of
					  %% Line 881
					  <EZ>
					      when call 'erlang':'=='
						    (EX,
						     EZ) ->
					      %% Line 882
					      [Y|[X|[]]]
					  %% Line 883
					  <EZ>
					      when call 'erlang':'<'
						    (EX,
						     EZ) ->
					      %% Line 884
					      [Y|[X|_@r1]]
					  %% Line 885
					  <EZ>
					      when call 'erlang':'=='
						    (EY,
						     EZ) ->
					      %% Line 886
					      [Y|[X|[]]]
					  %% Line 887
					  <EZ>
					      when call 'erlang':'=<'
						    (EY,
						     EZ) ->
					      %% Line 888
					      [Y|[Z|[X|[]]]]
					  %% Line 889
					  <_X_EZ> when 'true' ->
					      %% Line 890
					      [Z|[Y|[X|[]]]]
					end
				    %% Line 892
				    <_16> when 'true' ->
					%% Line 893
					apply 'ukeysplit_2'/5
					    (I, Y, EY, T, [X|[]])
				  end
			    end
		( <_11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_11})
		  -| ['compiler_generated'] )
	      end
	  ( <_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12})
		  -| [{'function_name',{'ukeysort',2}}] )
	    -| ['compiler_generated'] )
	end
'ukeysort_1'/4 =
    %% Line 898
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <I,X,EX,[Y|L]> when 'true' ->
	      %% Line 899
	      case call 'erlang':'element'
		       (I, Y) of
		%% Line 900
		<EY>
		    when call 'erlang':'=='
			  (EX,
			   EY) ->
		    %% Line 901
		    apply 'ukeysort_1'/4
			(I, X, EX, L)
		%% Line 902
		<EY>
		    when call 'erlang':'<'
			  (EX,
			   EY) ->
		    %% Line 903
		    apply 'ukeysplit_1'/8
			(I, X, EX, Y, EY, L, [], [])
		%% Line 904
		<EY> when 'true' ->
		    %% Line 905
		    apply 'ukeysplit_2'/5
			(I, Y, EY, L, [X|[]])
	      end
	  %% Line 907
	  <_X_I,X,_X_EX,[]> when 'true' ->
	      %% Line 908
	      [X|[]]
	  ( <_8,_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7,_6,_5})
		  -| [{'function_name',{'ukeysort_1',4}}] )
	    -| ['compiler_generated'] )
	end
'ukeymerge'/3 =
    %% Line 919
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Index,L1,T2>
	      when let <_3> =
		    call 'erlang':'is_integer'
			(Index)
		in  let <_4> =
			call 'erlang':'>'
			    (Index, 0)
		    in  call 'erlang':'and'
			    (_3, _4) ->
	      %% Line 920
	      case L1 of
		%% Line 921
		<[]> when 'true' ->
		    %% Line 922
		    T2
		%% Line 923
		<[H1|T1]> when 'true' ->
		    let <E1> =
			call %% Line 924
			     'erlang':%% Line 924
				      'element'
			    (%% Line 924
			     Index, %% Line 924
				    H1)
		    in  let <M> =
			    apply %% Line 925
				  'ukeymerge2_2'/6
				(%% Line 925
				 Index, %% Line 925
					T1, %% Line 925
					    E1, %% Line 925
						H1, %% Line 925
						    T2, %% Line 925
							[])
			in  %% Line 926
			    call 'lists':'reverse'
				(M, [])
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_7})
		  -| ['compiler_generated'] )
	      end
	  ( <_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8})
		  -| [{'function_name',{'ukeymerge',3}}] )
	    -| ['compiler_generated'] )
	end
'rukeymerge'/3 =
    %% Line 934
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Index,T1,L2>
	      when let <_3> =
		    call 'erlang':'is_integer'
			(Index)
		in  let <_4> =
			call 'erlang':'>'
			    (Index, 0)
		    in  call 'erlang':'and'
			    (_3, _4) ->
	      %% Line 935
	      case L2 of
		%% Line 936
		<[]> when 'true' ->
		    %% Line 937
		    T1
		%% Line 938
		<[H2|T2]> when 'true' ->
		    let <E2> =
			call %% Line 939
			     'erlang':%% Line 939
				      'element'
			    (%% Line 939
			     Index, %% Line 939
				    H2)
		    in  let <M> =
			    apply %% Line 940
				  'rukeymerge2_1'/6
				(%% Line 940
				 Index, %% Line 940
					T1, %% Line 940
					    E2, %% Line 940
						T2, %% Line 940
						    [], %% Line 940
							H2)
			in  %% Line 941
			    call 'lists':'reverse'
				(M, [])
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_7})
		  -| ['compiler_generated'] )
	      end
	  ( <_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8})
		  -| [{'function_name',{'rukeymerge',3}}] )
	    -| ['compiler_generated'] )
	end
'keymap'/3 =
    %% Line 951
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Fun,Index,[Tup|Tail]> when 'true' ->
	      let <_3> =
		  call %% Line 952
		       'erlang':%% Line 952
				'element'
		      (%% Line 952
		       Index, %% Line 952
			      Tup)
	      in  let <_4> =
		      apply %% Line 952
			    Fun
			  (_3)
		  in  let <_5> =
			  call %% Line 952
			       'erlang':%% Line 952
					'setelement'
			      (%% Line 952
			       Index, %% Line 952
				      Tup, _4)
		      in  let <_6> =
			      apply %% Line 952
				    'keymap'/3
				  (%% Line 952
				   Fun, %% Line 952
					Index, %% Line 952
					       Tail)
			  in  %% Line 952
			      [_5|_6]
	  %% Line 953
	  <Fun,Index,[]>
	      when try
		    let <_7> =
			call 'erlang':'is_integer'
			    (Index)
		    in  let <_8> =
			    call 'erlang':'>='
				(Index, 1)
			in  let <_9> =
				call %% Line 954
				     'erlang':%% Line 954
					      'is_function'
				    (%% Line 954
				     Fun, %% Line 954
					  1)
			    in  let <_10> =
				    call 'erlang':'and'
					(_8, _9)
				in  call 'erlang':'and'
					(_7, _10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 954
	      []
	  ( <_13,_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12,_11})
		  -| [{'function_name',{'keymap',3}}] )
	    -| ['compiler_generated'] )
	end
'sort'/2 =
    %% Line 964
    fun (_0,_1) ->
	case <_0,_1> of
	  <Fun,[]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 965
	      []
	  %% Line 966
	  <Fun,L = [_5|[]]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 967
	      L
	  %% Line 968
	  <Fun,[X|[Y|T]]> when 'true' ->
	      %% Line 969
	      case apply Fun
		       (X, Y) of
		%% Line 970
		<'true'> when 'true' ->
		    %% Line 971
		    apply 'fsplit_1'/6
			(Y, X, Fun, T, [], [])
		%% Line 972
		<'false'> when 'true' ->
		    %% Line 973
		    apply 'fsplit_2'/6
			(Y, X, Fun, T, [], [])
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'sort',2}}] )
	    -| ['compiler_generated'] )
	end
'merge'/3 =
    %% Line 984
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Fun,T1,[H2|T2]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      let <_3> =
		  apply %% Line 985
			'fmerge2_1'/5
		      (%% Line 985
		       T1, %% Line 985
			   H2, %% Line 985
			       Fun, %% Line 985
				    T2, %% Line 985
					[])
	      in  %% Line 985
		  call 'lists':'reverse'
		      (_3, [])
	  %% Line 986
	  <Fun,T1,[]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 987
	      T1
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'merge',3}}] )
	    -| ['compiler_generated'] )
	end
'rmerge'/3 =
    %% Line 993
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Fun,T1,[H2|T2]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      let <_3> =
		  apply %% Line 994
			'rfmerge2_1'/5
		      (%% Line 994
		       T1, %% Line 994
			   H2, %% Line 994
			       Fun, %% Line 994
				    T2, %% Line 994
					[])
	      in  %% Line 994
		  call 'lists':'reverse'
		      (_3, [])
	  %% Line 995
	  <Fun,T1,[]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 996
	      T1
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'rmerge',3}}] )
	    -| ['compiler_generated'] )
	end
'usort'/2 =
    %% Line 1004
    fun (_0,_1) ->
	case <_0,_1> of
	  <Fun,L = [_4|[]]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 1005
	      L
	  %% Line 1006
	  <Fun,L = []>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 1007
	      L
	  %% Line 1008
	  <Fun,[X|L]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 1009
	      apply 'usort_1'/3
		  (Fun, X, L)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'usort',2}}] )
	    -| ['compiler_generated'] )
	end
'usort_1'/3 =
    %% Line 1011
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Fun,X,[Y|L]> when 'true' ->
	      %% Line 1012
	      case apply Fun
		       (X, Y) of
		%% Line 1013
		<'true'> when 'true' ->
		    %% Line 1014
		    case apply Fun
			     (Y, X) of
		      %% Line 1015
		      <'true'> when 'true' ->
			  %% Line 1016
			  case L of
			    %% Line 1017
			    <[]> when 'true' ->
				%% Line 1018
				[X|[]]
			    %% Line 1019
			    <_9> when 'true' ->
				%% Line 1020
				apply 'usort_1'/3
				    (Fun, X, L)
			  end
		      %% Line 1022
		      <'false'> when 'true' ->
			  %% Line 1023
			  apply 'ufsplit_1'/6
			      (Y, X, Fun, L, [], [])
		      ( <_4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_4})
			-| ['compiler_generated'] )
		    end
		%% Line 1025
		<'false'> when 'true' ->
		    %% Line 1026
		    apply 'ufsplit_2'/4
			(Y, L, Fun, [X|[]])
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  ( <_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7,_6})
		  -| [{'function_name',{'usort_1',3}}] )
	    -| ['compiler_generated'] )
	end
'umerge'/3 =
    %% Line 1037
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Fun,[],T2>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 1038
	      T2
	  %% Line 1039
	  <Fun,[H1|T1],T2>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      let <_3> =
		  apply %% Line 1040
			'ufmerge2_2'/5
		      (%% Line 1040
		       H1, %% Line 1040
			   T1, %% Line 1040
			       Fun, %% Line 1040
				    T2, %% Line 1040
					[])
	      in  %% Line 1040
		  call 'lists':'reverse'
		      (_3, [])
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'umerge',3}}] )
	    -| ['compiler_generated'] )
	end
'rumerge'/3 =
    %% Line 1046
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Fun,T1,[]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 1047
	      T1
	  %% Line 1048
	  <Fun,T1,[H2|T2]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      let <_3> =
		  apply %% Line 1049
			'rufmerge2_1'/5
		      (%% Line 1049
		       T1, %% Line 1049
			   H2, %% Line 1049
			       Fun, %% Line 1049
				    T2, %% Line 1049
					[])
	      in  %% Line 1049
		  call 'lists':'reverse'
		      (_3, [])
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'rumerge',3}}] )
	    -| ['compiler_generated'] )
	end
'usort'/1 =
    %% Line 1059
    fun (_0) ->
	case _0 of
	  <L0 = [X|[Y|L]]>
	      when call 'erlang':'<'
		    (X,
		     Y) ->
	      %% Line 1060
	      case L of
		%% Line 1061
		<[]> when 'true' ->
		    %% Line 1062
		    L0
		%% Line 1063
		<[Z|[]]>
		    when call 'erlang':'<'
			  (Y,
			   Z) ->
		    %% Line 1064
		    L0
		%% Line 1065
		<[Z|[]]>
		    when call 'erlang':'=='
			  (Y,
			   Z) ->
		    %% Line 1066
		    [X|[Y|[]]]
		%% Line 1067
		<[Z|[]]>
		    when call 'erlang':'<'
			  (Z,
			   X) ->
		    %% Line 1068
		    [Z|[X|[Y|[]]]]
		%% Line 1069
		<[Z|[]]>
		    when call 'erlang':'=='
			  (Z,
			   X) ->
		    %% Line 1070
		    [X|[Y|[]]]
		%% Line 1071
		<[Z|[]]> when 'true' ->
		    %% Line 1072
		    [X|[Z|[Y|[]]]]
		%% Line 1073
		<_4> when 'true' ->
		    %% Line 1074
		    apply 'usplit_1'/5
			(X, Y, L, [], [])
	      end
	  %% Line 1076
	  <[X|[Y|L]]>
	      when call 'erlang':'>'
		    (X,
		     Y) ->
	      %% Line 1077
	      case L of
		%% Line 1078
		<[]> when 'true' ->
		    %% Line 1079
		    [Y|[X|[]]]
		%% Line 1080
		<[Z|[]]>
		    when call 'erlang':'<'
			  (X,
			   Z) ->
		    %% Line 1081
		    [Y|[X|L]]
		%% Line 1082
		<[Z|[]]>
		    when call 'erlang':'=='
			  (X,
			   Z) ->
		    %% Line 1083
		    [Y|[X|[]]]
		%% Line 1084
		<[Z|[]]>
		    when call 'erlang':'<'
			  (Z,
			   Y) ->
		    %% Line 1085
		    [Z|[Y|[X|[]]]]
		%% Line 1086
		<[Z|[]]>
		    when call 'erlang':'=='
			  (Z,
			   Y) ->
		    %% Line 1087
		    [Y|[X|[]]]
		%% Line 1088
		<[Z|[]]> when 'true' ->
		    %% Line 1089
		    [Y|[Z|[X|[]]]]
		%% Line 1090
		<_5> when 'true' ->
		    %% Line 1091
		    apply 'usplit_2'/5
			(X, Y, L, [], [])
	      end
	  %% Line 1093
	  <[X|[_X_Y|L]]> when 'true' ->
	      %% Line 1094
	      apply 'usort_1'/2
		  (X, L)
	  %% Line 1095
	  <L = [_6|[]]> when 'true' ->
	      %% Line 1096
	      L
	  %% Line 1097
	  <[]> when 'true' ->
	      %% Line 1098
	      []
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'usort',1}}] )
	    -| ['compiler_generated'] )
	end
'usort_1'/2 =
    %% Line 1100
    fun (_0,_1) ->
	case <_0,_1> of
	  <X,[Y|L]>
	      when call 'erlang':'=='
		    (X,
		     Y) ->
	      %% Line 1101
	      apply 'usort_1'/2
		  (X, L)
	  %% Line 1102
	  <X,[Y|L]>
	      when call 'erlang':'<'
		    (X,
		     Y) ->
	      %% Line 1103
	      apply 'usplit_1'/5
		  (X, Y, L, [], [])
	  %% Line 1104
	  <X,[Y|L]> when 'true' ->
	      %% Line 1105
	      apply 'usplit_2'/5
		  (X, Y, L, [], [])
	  %% Line 1106
	  <X,[]> when 'true' ->
	      %% Line 1107
	      [X|[]]
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'usort_1',2}}] )
	    -| ['compiler_generated'] )
	end
'umerge'/1 =
    %% Line 1118
    fun (_0) ->
	%% Line 1119
	apply 'umergel'/1
	    (_0)
'umerge3'/3 =
    %% Line 1134
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <L1,[],L3> when 'true' ->
	      %% Line 1135
	      apply 'umerge'/2
		  (L1, L3)
	  %% Line 1136
	  <L1,L2,[]> when 'true' ->
	      %% Line 1137
	      apply 'umerge'/2
		  (L1, L2)
	  %% Line 1138
	  <L1,[H2|T2],[H3|T3]> when 'true' ->
	      let <_3> =
		  apply %% Line 1139
			'umerge3_1'/7
		      (%% Line 1139
		       L1, %% Line 1139
			   [H2|H3], %% Line 1139
				    T2, %% Line 1139
					H2, %% Line 1139
					    [], %% Line 1139
						T3, %% Line 1139
						    H3)
	      in  %% Line 1139
		  call 'lists':'reverse'
		      (_3, [])
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'umerge3',3}}] )
	    -| ['compiler_generated'] )
	end
'rumerge3'/3 =
    %% Line 1147
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <L1,[],L3> when 'true' ->
	      %% Line 1148
	      apply 'rumerge'/2
		  (L1, L3)
	  %% Line 1149
	  <L1,L2,[]> when 'true' ->
	      %% Line 1150
	      apply 'rumerge'/2
		  (L1, L2)
	  %% Line 1151
	  <L1,[H2|T2],[H3|T3]> when 'true' ->
	      let <_3> =
		  apply %% Line 1152
			'rumerge3_1'/6
		      (%% Line 1152
		       L1, %% Line 1152
			   T2, %% Line 1152
			       H2, %% Line 1152
				   [], %% Line 1152
				       T3, %% Line 1152
					   H3)
	      in  %% Line 1152
		  call 'lists':'reverse'
		      (_3, [])
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'rumerge3',3}}] )
	    -| ['compiler_generated'] )
	end
'umerge'/2 =
    %% Line 1164
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],T2> when 'true' ->
	      %% Line 1165
	      T2
	  %% Line 1166
	  <[H1|T1],T2> when 'true' ->
	      let <_2> =
		  apply %% Line 1167
			'umerge2_2'/4
		      (%% Line 1167
		       T1, %% Line 1167
			   T2, %% Line 1167
			       [], %% Line 1167
				   H1)
	      in  %% Line 1167
		  call 'lists':'reverse'
		      (_2, [])
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'umerge',2}}] )
	    -| ['compiler_generated'] )
	end
'rumerge'/2 =
    %% Line 1177
    fun (_0,_1) ->
	case <_0,_1> of
	  <T1,[]> when 'true' ->
	      %% Line 1178
	      T1
	  %% Line 1179
	  <T1,[H2|T2]> when 'true' ->
	      let <_2> =
		  apply %% Line 1180
			'rumerge2_1'/4
		      (%% Line 1180
		       T1, %% Line 1180
			   T2, %% Line 1180
			       [], %% Line 1180
				   H2)
	      in  %% Line 1180
		  call 'lists':'reverse'
		      (_2, [])
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'rumerge',2}}] )
	    -| ['compiler_generated'] )
	end
'all'/2 =
    %% Line 1212
    fun (_0,_1) ->
	case <_0,_1> of
	  <Pred,[Hd|Tail]> when 'true' ->
	      %% Line 1213
	      case apply Pred
		       (Hd) of
		%% Line 1214
		<'true'> when 'true' ->
		    apply 'all'/2
			(Pred, Tail)
		%% Line 1215
		<'false'> when 'true' ->
		    'false'
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1217
	  <Pred,[]>
	      when call 'erlang':'is_function'
		    (Pred,
		     1) ->
	      'true'
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'all',2}}] )
	    -| ['compiler_generated'] )
	end
'any'/2 =
    %% Line 1224
    fun (_0,_1) ->
	case <_0,_1> of
	  <Pred,[Hd|Tail]> when 'true' ->
	      %% Line 1225
	      case apply Pred
		       (Hd) of
		%% Line 1226
		<'true'> when 'true' ->
		    'true'
		%% Line 1227
		<'false'> when 'true' ->
		    apply 'any'/2
			(Pred, Tail)
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1229
	  <Pred,[]>
	      when call 'erlang':'is_function'
		    (Pred,
		     1) ->
	      'false'
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'any',2}}] )
	    -| ['compiler_generated'] )
	end
'map'/2 =
    %% Line 1238
    fun (_0,_1) ->
	case <_0,_1> of
	  <F,[H|T]> when 'true' ->
	      let <_2> =
		  apply %% Line 1239
			F
		      (%% Line 1239
		       H)
	      in  let <_3> =
		      apply %% Line 1239
			    'map'/2
			  (%% Line 1239
			   F, %% Line 1239
			      T)
		  in  %% Line 1239
		      [_2|_3]
	  %% Line 1240
	  <F,[]>
	      when call 'erlang':'is_function'
		    (F,
		     1) ->
	      []
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'map',2}}] )
	    -| ['compiler_generated'] )
	end
'flatmap'/2 =
    %% Line 1249
    fun (_0,_1) ->
	case <_0,_1> of
	  <F,[Hd|Tail]> when 'true' ->
	      let <_3> =
		  apply %% Line 1250
			F
		      (%% Line 1250
		       Hd)
	      in  let <_2> =
		      apply %% Line 1250
			    'flatmap'/2
			  (%% Line 1250
			   F, %% Line 1250
			      Tail)
		  in  %% Line 1250
		      call 'erlang':'++'
			  (_3, _2)
	  %% Line 1251
	  <F,[]>
	      when call 'erlang':'is_function'
		    (F,
		     1) ->
	      []
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'flatmap',2}}] )
	    -| ['compiler_generated'] )
	end
'foldl'/3 =
    %% Line 1262
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <F,Accu,[Hd|Tail]> when 'true' ->
	      let <_3> =
		  apply %% Line 1263
			F
		      (%% Line 1263
		       Hd, %% Line 1263
			   Accu)
	      in  %% Line 1263
		  apply 'foldl'/3
		      (F, _3, Tail)
	  %% Line 1264
	  <F,Accu,[]>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      Accu
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'foldl',3}}] )
	    -| ['compiler_generated'] )
	end
'foldr'/3 =
    %% Line 1275
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <F,Accu,[Hd|Tail]> when 'true' ->
	      let <_3> =
		  apply %% Line 1276
			'foldr'/3
		      (%% Line 1276
		       F, %% Line 1276
			  Accu, %% Line 1276
				Tail)
	      in  %% Line 1276
		  apply F
		      (Hd, _3)
	  %% Line 1277
	  <F,Accu,[]>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      Accu
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'foldr',3}}] )
	    -| ['compiler_generated'] )
	end
'filter'/2 =
    %% Line 1285
    fun (_0,_1) ->
	case <_0,_1> of
	  <Pred,List>
	      when call 'erlang':'is_function'
		    (Pred,
		     1) ->
	      %% Line 1286
	      ( letrec
		    'lc$^0'/1 =
			fun (_4) ->
			    case _4 of
			      <[E|_3]> when 'true' ->
				  ( case apply Pred
					     (E) of
				      <'true'> when 'true' ->
					  let <_5> =
					      apply 'lc$^0'/1
						  (_3)
					  in  ( [E|_5]
						-| ['compiler_generated'] )
				      ( <'false'> when 'true' ->
					    apply 'lc$^0'/1
						(_3)
					-| ['compiler_generated'] )
				      ( <_6> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_6})
					-| ['compiler_generated'] )
				    end
				    -| ['list_comprehension'] )
			      <[]> when 'true' ->
				  []
			      ( <_9> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_9})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(List)
		-| ['list_comprehension'] )
	  ( <_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7})
		  -| [{'function_name',{'filter',2}}] )
	    -| ['compiler_generated'] )
	end
'partition'/2 =
    %% Line 1298
    fun (_0,_1) ->
	%% Line 1299
	apply 'partition'/4
	    (_0, _1, [], [])
'partition'/4 =
    %% Line 1301
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Pred,[H|T],As,Bs> when 'true' ->
	      %% Line 1302
	      case apply Pred
		       (H) of
		%% Line 1303
		<'true'> when 'true' ->
		    apply 'partition'/4
			(Pred, T, [H|As], Bs)
		%% Line 1304
		<'false'> when 'true' ->
		    apply 'partition'/4
			(Pred, T, As, [H|Bs])
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1306
	  <Pred,[],As,Bs>
	      when call 'erlang':'is_function'
		    (Pred,
		     1) ->
	      let <_6> =
		  apply %% Line 1307
			'reverse'/1
		      (%% Line 1307
		       As)
	      in  let <_5> =
		      apply %% Line 1307
			    'reverse'/1
			  (%% Line 1307
			   Bs)
		  in  %% Line 1307
		      {_6,_5}
	  ( <_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8,_7})
		  -| [{'function_name',{'partition',4}}] )
	    -| ['compiler_generated'] )
	end
'filtermap'/2 =
    %% Line 1316
    fun (_0,_1) ->
	case <_0,_1> of
	  <F,[Hd|Tail]> when 'true' ->
	      %% Line 1317
	      case apply F
		       (Hd) of
		%% Line 1318
		<'true'> when 'true' ->
		    let <_2> =
			apply %% Line 1319
			      'filtermap'/2
			    (%% Line 1319
			     F, %% Line 1319
				Tail)
		    in  %% Line 1319
			[Hd|_2]
		%% Line 1320
		<{'true',Val}> when 'true' ->
		    let <_3> =
			apply %% Line 1321
			      'filtermap'/2
			    (%% Line 1321
			     F, %% Line 1321
				Tail)
		    in  %% Line 1321
			[Val|_3]
		%% Line 1322
		<'false'> when 'true' ->
		    %% Line 1323
		    apply 'filtermap'/2
			(F, Tail)
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1325
	  <F,[]>
	      when call 'erlang':'is_function'
		    (F,
		     1) ->
	      []
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'filtermap',2}}] )
	    -| ['compiler_generated'] )
	end
'zf'/2 =
    %% Line 1329
    fun (_0,_1) ->
	%% Line 1330
	apply 'filtermap'/2
	    (_0, _1)
'foreach'/2 =
    %% Line 1337
    fun (_0,_1) ->
	case <_0,_1> of
	  <F,[Hd|Tail]> when 'true' ->
	      do  %% Line 1338
		  apply F
		      (Hd)
		  %% Line 1339
		  apply 'foreach'/2
		      (F, Tail)
	  %% Line 1340
	  <F,[]>
	      when call 'erlang':'is_function'
		    (F,
		     1) ->
	      'ok'
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'foreach',2}}] )
	    -| ['compiler_generated'] )
	end
'mapfoldl'/3 =
    %% Line 1353
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <F,Accu0,[Hd|Tail]> when 'true' ->
	      %% Line 1354
	      case apply F
		       (Hd, Accu0) of
		<{R,Accu1}> when 'true' ->
		    %% Line 1355
		    case apply 'mapfoldl'/3
			     (F, Accu1, Tail) of
		      <{Rs,Accu2}> when 'true' ->
			  %% Line 1356
			  {[R|Rs],Accu2}
		      ( <_4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_4})
			-| ['compiler_generated'] )
		    end
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1357
	  <F,Accu,[]>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      {[],Accu}
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'mapfoldl',3}}] )
	    -| ['compiler_generated'] )
	end
'mapfoldr'/3 =
    %% Line 1370
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <F,Accu0,[Hd|Tail]> when 'true' ->
	      %% Line 1371
	      case apply 'mapfoldr'/3
		       (F, Accu0, Tail) of
		<{Rs,Accu1}> when 'true' ->
		    %% Line 1372
		    case apply F
			     (Hd, Accu1) of
		      <{R,Accu2}> when 'true' ->
			  %% Line 1373
			  {[R|Rs],Accu2}
		      ( <_4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_4})
			-| ['compiler_generated'] )
		    end
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1374
	  <F,Accu,[]>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      {[],Accu}
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'mapfoldr',3}}] )
	    -| ['compiler_generated'] )
	end
'takewhile'/2 =
    %% Line 1382
    fun (_0,_1) ->
	case <_0,_1> of
	  <Pred,[Hd|Tail]> when 'true' ->
	      %% Line 1383
	      case apply Pred
		       (Hd) of
		%% Line 1384
		<'true'> when 'true' ->
		    let <_2> =
			apply 'takewhile'/2
			    (Pred, Tail)
		    in  [Hd|_2]
		%% Line 1385
		<'false'> when 'true' ->
		    []
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1387
	  <Pred,[]>
	      when call 'erlang':'is_function'
		    (Pred,
		     1) ->
	      []
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'takewhile',2}}] )
	    -| ['compiler_generated'] )
	end
'dropwhile'/2 =
    %% Line 1395
    fun (_0,_1) ->
	case <_0,_1> of
	  <Pred,Rest = [Hd|Tail]> when 'true' ->
	      %% Line 1396
	      case apply Pred
		       (Hd) of
		%% Line 1397
		<'true'> when 'true' ->
		    apply 'dropwhile'/2
			(Pred, Tail)
		%% Line 1398
		<'false'> when 'true' ->
		    Rest
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1400
	  <Pred,[]>
	      when call 'erlang':'is_function'
		    (Pred,
		     1) ->
	      []
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'dropwhile',2}}] )
	    -| ['compiler_generated'] )
	end
'search'/2 =
    %% Line 1407
    fun (_0,_1) ->
	case <_0,_1> of
	  <Pred,[Hd|Tail]> when 'true' ->
	      %% Line 1408
	      case apply Pred
		       (Hd) of
		%% Line 1409
		<'true'> when 'true' ->
		    {'value',Hd}
		%% Line 1410
		<'false'> when 'true' ->
		    apply 'search'/2
			(Pred, Tail)
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1412
	  <Pred,[]>
	      when call 'erlang':'is_function'
		    (Pred,
		     1) ->
	      %% Line 1413
	      'false'
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'search',2}}] )
	    -| ['compiler_generated'] )
	end
'splitwith'/2 =
    %% Line 1422
    fun (_0,_1) ->
	case <_0,_1> of
	  <Pred,List>
	      when call 'erlang':'is_function'
		    (Pred,
		     1) ->
	      %% Line 1423
	      apply 'splitwith'/3
		  (Pred, List, [])
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'splitwith',2}}] )
	    -| ['compiler_generated'] )
	end
'splitwith'/3 =
    %% Line 1425
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Pred,_@r0 = [Hd|Tail],Taken> when 'true' ->
	      %% Line 1426
	      case apply Pred
		       (Hd) of
		%% Line 1427
		<'true'> when 'true' ->
		    apply 'splitwith'/3
			(Pred, Tail, [Hd|Taken])
		%% Line 1428
		<'false'> when 'true' ->
		    let <_3> =
			apply 'reverse'/1
			    (Taken)
		    in  {_3,_@r0}
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1430
	  <Pred,[],Taken>
	      when call 'erlang':'is_function'
		    (Pred,
		     1) ->
	      let <_5> =
		  apply %% Line 1431
			'reverse'/1
		      (%% Line 1431
		       Taken)
	      in  %% Line 1431
		  {_5,[]}
	  ( <_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7,_6})
		  -| [{'function_name',{'splitwith',3}}] )
	    -| ['compiler_generated'] )
	end
'split'/2 =
    %% Line 1440
    fun (_0,_1) ->
	case <_0,_1> of
	  <N,List>
	      when try
		    let <_2> =
			call 'erlang':'is_integer'
			    (N)
		    in  let <_3> =
			    call 'erlang':'>='
				(N, 0)
			in  let <_4> =
				call 'erlang':'is_list'
				    (List)
			    in  let <_5> =
				    call 'erlang':'and'
					(_3, _4)
				in  call 'erlang':'and'
					(_2, _5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1441
	      case apply 'split'/3
		       (N, List, []) of
		%% Line 1442
		<Result = {_9,_10}> when 'true' ->
		    Result
		%% Line 1443
		<Fault>
		    when call 'erlang':'is_atom'
			  (Fault) ->
		    %% Line 1444
		    call 'erlang':'error'
			(Fault, [N|[List|[]]])
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1446
	  <N,List> when 'true' ->
	      %% Line 1447
	      call 'erlang':'error'
		  ('badarg', [N|[List|[]]])
	end
'split'/3 =
    %% Line 1449
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <0,L,R> when 'true' ->
	      let <_3> =
		  call %% Line 1450
		       'lists':%% Line 1450
			       'reverse'
		      (%% Line 1450
		       R, %% Line 1450
			  [])
	      in  %% Line 1450
		  {_3,L}
	  %% Line 1451
	  <N,[H|T],R> when 'true' ->
	      let <_4> =
		  call %% Line 1452
		       'erlang':%% Line 1452
				'-'
		      (%% Line 1452
		       N, %% Line 1452
			  1)
	      in  %% Line 1452
		  apply 'split'/3
		      (_4, T, [H|R])
	  %% Line 1453
	  <_8,[],_9> when 'true' ->
	      %% Line 1454
	      'badarg'
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'split',3}}] )
	    -| ['compiler_generated'] )
	end
'join'/2 =
    %% Line 1462
    fun (_0,_1) ->
	case <_0,_1> of
	  <_X_Sep,[]> when 'true' ->
	      []
	  %% Line 1463
	  <Sep,[H|T]> when 'true' ->
	      let <_2> =
		  apply 'join_prepend'/2
		      (Sep, T)
	      in  [H|_2]
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'join',2}}] )
	    -| ['compiler_generated'] )
	end
'join_prepend'/2 =
    %% Line 1465
    fun (_0,_1) ->
	case <_0,_1> of
	  <_X_Sep,[]> when 'true' ->
	      []
	  %% Line 1466
	  <Sep,[H|T]> when 'true' ->
	      let <_2> =
		  apply 'join_prepend'/2
		      (Sep, T)
	      in  [Sep|[H|_2]]
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'join_prepend',2}}] )
	    -| ['compiler_generated'] )
	end
'split_1'/5 =
    %% Line 1495
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'>='
		    (Z,
		     Y) ->
	      %% Line 1496
	      apply 'split_1'/5
		  (Y, Z, L, [X|R], Rs)
	  %% Line 1497
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'>='
		    (Z,
		     X) ->
	      %% Line 1498
	      apply 'split_1'/5
		  (Z, Y, L, [X|R], Rs)
	  %% Line 1499
	  <X,Y,[Z|L],[],Rs> when 'true' ->
	      %% Line 1500
	      apply 'split_1'/5
		  (X, Y, L, [Z|[]], Rs)
	  %% Line 1501
	  <X,Y,[Z|L],R,Rs> when 'true' ->
	      %% Line 1502
	      apply 'split_1_1'/6
		  (X, Y, L, R, Rs, Z)
	  %% Line 1503
	  <X,Y,[],R,Rs> when 'true' ->
	      %% Line 1504
	      apply 'rmergel'/2
		  ([[Y|[X|R]]|Rs], [])
	  ( <_9,_8,_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6,_5})
		  -| [{'function_name',{'split_1',5}}] )
	    -| ['compiler_generated'] )
	end
'split_1_1'/6 =
    %% Line 1506
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'>='
		    (Z,
		     Y) ->
	      %% Line 1507
	      apply 'split_1_1'/6
		  (Y, Z, L, [X|R], Rs, S)
	  %% Line 1508
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'>='
		    (Z,
		     X) ->
	      %% Line 1509
	      apply 'split_1_1'/6
		  (Z, Y, L, [X|R], Rs, S)
	  %% Line 1510
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=<'
		    (S,
		     Z) ->
	      %% Line 1511
	      apply 'split_1'/5
		  (S, Z, L, [], [[Y|[X|R]]|Rs])
	  %% Line 1512
	  <X,Y,[Z|L],R,Rs,S> when 'true' ->
	      %% Line 1513
	      apply 'split_1'/5
		  (Z, S, L, [], [[Y|[X|R]]|Rs])
	  %% Line 1514
	  <X,Y,[],R,Rs,S> when 'true' ->
	      %% Line 1515
	      apply 'rmergel'/2
		  ([[S|[]]|[[Y|[X|R]]|Rs]], [])
	  ( <_11,_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8,_7,_6})
		  -| [{'function_name',{'split_1_1',6}}] )
	    -| ['compiler_generated'] )
	end
'split_2'/5 =
    %% Line 1518
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'=<'
		    (Z,
		     Y) ->
	      %% Line 1519
	      apply 'split_2'/5
		  (Y, Z, L, [X|R], Rs)
	  %% Line 1520
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'=<'
		    (Z,
		     X) ->
	      %% Line 1521
	      apply 'split_2'/5
		  (Z, Y, L, [X|R], Rs)
	  %% Line 1522
	  <X,Y,[Z|L],[],Rs> when 'true' ->
	      %% Line 1523
	      apply 'split_2'/5
		  (X, Y, L, [Z|[]], Rs)
	  %% Line 1524
	  <X,Y,[Z|L],R,Rs> when 'true' ->
	      %% Line 1525
	      apply 'split_2_1'/6
		  (X, Y, L, R, Rs, Z)
	  %% Line 1526
	  <X,Y,[],R,Rs> when 'true' ->
	      %% Line 1527
	      apply 'mergel'/2
		  ([[Y|[X|R]]|Rs], [])
	  ( <_9,_8,_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6,_5})
		  -| [{'function_name',{'split_2',5}}] )
	    -| ['compiler_generated'] )
	end
'split_2_1'/6 =
    %% Line 1529
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=<'
		    (Z,
		     Y) ->
	      %% Line 1530
	      apply 'split_2_1'/6
		  (Y, Z, L, [X|R], Rs, S)
	  %% Line 1531
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=<'
		    (Z,
		     X) ->
	      %% Line 1532
	      apply 'split_2_1'/6
		  (Z, Y, L, [X|R], Rs, S)
	  %% Line 1533
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'>'
		    (S,
		     Z) ->
	      %% Line 1534
	      apply 'split_2'/5
		  (S, Z, L, [], [[Y|[X|R]]|Rs])
	  %% Line 1535
	  <X,Y,[Z|L],R,Rs,S> when 'true' ->
	      %% Line 1536
	      apply 'split_2'/5
		  (Z, S, L, [], [[Y|[X|R]]|Rs])
	  %% Line 1537
	  <X,Y,[],R,Rs,S> when 'true' ->
	      %% Line 1538
	      apply 'mergel'/2
		  ([[S|[]]|[[Y|[X|R]]|Rs]], [])
	  ( <_11,_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8,_7,_6})
		  -| [{'function_name',{'split_2_1',6}}] )
	    -| ['compiler_generated'] )
	end
'mergel'/2 =
    %% Line 1542
    fun (_0,_1) ->
	case <_0,_1> of
	  <[[]|L],Acc> when 'true' ->
	      %% Line 1543
	      apply 'mergel'/2
		  (L, Acc)
	  %% Line 1544
	  <[T1|[[H2|T2]|[[H3|T3]|L]]],Acc> when 'true' ->
	      let <_2> =
		  apply %% Line 1545
			'merge3_1'/6
		      (%% Line 1545
		       T1, %% Line 1545
			   [], %% Line 1545
			       H2, %% Line 1545
				   T2, %% Line 1545
				       H3, %% Line 1545
					   T3)
	      in  %% Line 1545
		  apply 'mergel'/2
		      (L, [_2|Acc])
	  %% Line 1546
	  <[T1|[[H2|T2]|[]]],Acc> when 'true' ->
	      let <_3> =
		  apply %% Line 1547
			'merge2_1'/4
		      (%% Line 1547
		       T1, %% Line 1547
			   H2, %% Line 1547
			       T2, %% Line 1547
				   [])
	      in  %% Line 1547
		  apply 'rmergel'/2
		      ([_3|Acc], [])
	  %% Line 1548
	  <[L|[]],[]> when 'true' ->
	      %% Line 1549
	      L
	  %% Line 1550
	  <[L|[]],Acc> when 'true' ->
	      let <_4> =
		  call %% Line 1551
		       'lists':%% Line 1551
			       'reverse'
		      (%% Line 1551
		       L, %% Line 1551
			  [])
	      in  %% Line 1551
		  apply 'rmergel'/2
		      ([_4|Acc], [])
	  %% Line 1552
	  <[],[]> when 'true' ->
	      %% Line 1553
	      []
	  %% Line 1554
	  <[],Acc> when 'true' ->
	      %% Line 1555
	      apply 'rmergel'/2
		  (Acc, [])
	  %% Line 1556
	  <[A|[[]|L]],Acc> when 'true' ->
	      %% Line 1557
	      apply 'mergel'/2
		  ([A|L], Acc)
	  %% Line 1558
	  <[A|[B|[[]|L]]],Acc> when 'true' ->
	      %% Line 1559
	      apply 'mergel'/2
		  ([A|[B|L]], Acc)
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'mergel',2}}] )
	    -| ['compiler_generated'] )
	end
'rmergel'/2 =
    %% Line 1561
    fun (_0,_1) ->
	case <_0,_1> of
	  <[[H3|T3]|[[H2|T2]|[T1|L]]],Acc> when 'true' ->
	      let <_2> =
		  apply %% Line 1562
			'rmerge3_1'/6
		      (%% Line 1562
		       T1, %% Line 1562
			   [], %% Line 1562
			       H2, %% Line 1562
				   T2, %% Line 1562
				       H3, %% Line 1562
					   T3)
	      in  %% Line 1562
		  apply 'rmergel'/2
		      (L, [_2|Acc])
	  %% Line 1563
	  <[[H2|T2]|[T1|[]]],Acc> when 'true' ->
	      let <_3> =
		  apply %% Line 1564
			'rmerge2_1'/4
		      (%% Line 1564
		       T1, %% Line 1564
			   H2, %% Line 1564
			       T2, %% Line 1564
				   [])
	      in  %% Line 1564
		  apply 'mergel'/2
		      ([_3|Acc], [])
	  %% Line 1565
	  <[L|[]],Acc> when 'true' ->
	      let <_4> =
		  call %% Line 1566
		       'lists':%% Line 1566
			       'reverse'
		      (%% Line 1566
		       L, %% Line 1566
			  [])
	      in  %% Line 1566
		  apply 'mergel'/2
		      ([_4|Acc], [])
	  %% Line 1567
	  <[],Acc> when 'true' ->
	      %% Line 1568
	      apply 'mergel'/2
		  (Acc, [])
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'rmergel',2}}] )
	    -| ['compiler_generated'] )
	end
'merge3_1'/6 =
    %% Line 1573
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <[H1|T1],M,H2,T2,H3,T3>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1593
	      ( case <T1,H1,H2,T2,H3,T3,M> of
		  ( <_20,_21,_22,_23,_24,_25,_26>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_21,
				 _24)
			    -| ['compiler_generated'] ) ->
			%% Line 1594
			( apply 'merge3_1'/6
			      (_20, ( [_21|_26]
				      -| ['compiler_generated'] ), _22, _23, _24, _25)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1595
		  ( <_27,_28,_29,_30,_31,_32,_33> when ( 'true'
							 -| ['compiler_generated'] ) ->
			%% Line 1596
			( apply 'merge3_12_3'/6
			      (_27, _28, _29, _30, ( [_31|_33]
						     -| ['compiler_generated'] ), _32)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1575
	  <[H1|T1],M,H2,T2,H3,T3> when 'true' ->
	      %% Line 1607
	      ( case <T1,H1,H2,T2,H3,T3,M> of
		  ( <_40,_41,_42,_43,_44,_45,_46>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_42,
				 _44)
			    -| ['compiler_generated'] ) ->
			%% Line 1608
			( apply 'merge3_2'/6
			      (_40, _41, ( [_42|_46]
					   -| ['compiler_generated'] ), _43, _44, _45)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1609
		  ( <_47,_48,_49,_50,_51,_52,_53> when ( 'true'
							 -| ['compiler_generated'] ) ->
			%% Line 1610
			( apply 'merge3_21_3'/6
			      (_47, _48, _49, _50, ( [_51|_53]
						     -| ['compiler_generated'] ), _52)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1577
	  <[],M,H2,T2,H3,T3>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1578
	      apply 'merge2_1'/4
		  (T2, H3, T3, [H2|M])
	  %% Line 1579
	  <[],M,H2,T2,H3,T3> when 'true' ->
	      %% Line 1580
	      apply 'merge2_2'/5
		  (T2, H3, T3, M, H2)
	  ( <_11,_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8,_7,_6})
		  -| [{'function_name',{'merge3_1',6}}] )
	    -| ['compiler_generated'] )
	end
'merge3_2'/6 =
    %% Line 1583
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <T1,H1,M,[H2|T2],H3,T3>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1593
	      ( case <T1,H1,H2,T2,H3,T3,M> of
		  ( <_20,_21,_22,_23,_24,_25,_26>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_21,
				 _24)
			    -| ['compiler_generated'] ) ->
			%% Line 1594
			( apply 'merge3_1'/6
			      (_20, ( [_21|_26]
				      -| ['compiler_generated'] ), _22, _23, _24, _25)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1595
		  ( <_27,_28,_29,_30,_31,_32,_33> when ( 'true'
							 -| ['compiler_generated'] ) ->
			%% Line 1596
			( apply 'merge3_12_3'/6
			      (_27, _28, _29, _30, ( [_31|_33]
						     -| ['compiler_generated'] ), _32)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1585
	  <T1,H1,M,[H2|T2],H3,T3> when 'true' ->
	      %% Line 1607
	      ( case <T1,H1,H2,T2,H3,T3,M> of
		  ( <_40,_41,_42,_43,_44,_45,_46>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_42,
				 _44)
			    -| ['compiler_generated'] ) ->
			%% Line 1608
			( apply 'merge3_2'/6
			      (_40, _41, ( [_42|_46]
					   -| ['compiler_generated'] ), _43, _44, _45)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1609
		  ( <_47,_48,_49,_50,_51,_52,_53> when ( 'true'
							 -| ['compiler_generated'] ) ->
			%% Line 1610
			( apply 'merge3_21_3'/6
			      (_47, _48, _49, _50, ( [_51|_53]
						     -| ['compiler_generated'] ), _52)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1587
	  <T1,H1,M,[],H3,T3>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1588
	      apply 'merge2_1'/4
		  (T1, H3, T3, [H1|M])
	  %% Line 1589
	  <T1,H1,M,[],H3,T3> when 'true' ->
	      %% Line 1590
	      apply 'merge2_2'/5
		  (T1, H3, T3, M, H1)
	  ( <_11,_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8,_7,_6})
		  -| [{'function_name',{'merge3_2',6}}] )
	    -| ['compiler_generated'] )
	end
'merge3_12'/7 =
    %% Line 1593
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <T1,H1,H2,T2,H3,T3,M>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1594
	      apply 'merge3_1'/6
		  (T1, [H1|M], H2, T2, H3, T3)
	  %% Line 1595
	  <T1,H1,H2,T2,H3,T3,M> when 'true' ->
	      %% Line 1596
	      apply 'merge3_12_3'/6
		  (T1, H1, H2, T2, [H3|M], T3)
	end
'merge3_12_3'/6 =
    %% Line 1599
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <T1,H1,H2,T2,M,[H3|T3]>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1600
	      apply 'merge3_1'/6
		  (T1, [H1|M], H2, T2, H3, T3)
	  %% Line 1601
	  <T1,H1,H2,T2,M,[H3|T3]> when 'true' ->
	      %% Line 1602
	      apply 'merge3_12_3'/6
		  (T1, H1, H2, T2, [H3|M], T3)
	  %% Line 1603
	  <T1,H1,H2,T2,M,[]> when 'true' ->
	      %% Line 1604
	      apply 'merge2_1'/4
		  (T1, H2, T2, [H1|M])
	  ( <_11,_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8,_7,_6})
		  -| [{'function_name',{'merge3_12_3',6}}] )
	    -| ['compiler_generated'] )
	end
'merge3_21'/7 =
    %% Line 1607
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <T1,H1,H2,T2,H3,T3,M>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1608
	      apply 'merge3_2'/6
		  (T1, H1, [H2|M], T2, H3, T3)
	  %% Line 1609
	  <T1,H1,H2,T2,H3,T3,M> when 'true' ->
	      %% Line 1610
	      apply 'merge3_21_3'/6
		  (T1, H1, H2, T2, [H3|M], T3)
	end
'merge3_21_3'/6 =
    %% Line 1613
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <T1,H1,H2,T2,M,[H3|T3]>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1614
	      apply 'merge3_2'/6
		  (T1, H1, [H2|M], T2, H3, T3)
	  %% Line 1615
	  <T1,H1,H2,T2,M,[H3|T3]> when 'true' ->
	      %% Line 1616
	      apply 'merge3_21_3'/6
		  (T1, H1, H2, T2, [H3|M], T3)
	  %% Line 1617
	  <T1,H1,H2,T2,M,[]> when 'true' ->
	      %% Line 1618
	      apply 'merge2_2'/5
		  (T1, H2, T2, M, H1)
	  ( <_11,_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8,_7,_6})
		  -| [{'function_name',{'merge3_21_3',6}}] )
	    -| ['compiler_generated'] )
	end
'rmerge3_1'/6 =
    %% Line 1623
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <[H1|T1],M,H2,T2,H3,T3>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1643
	      ( case <T1,H1,H2,T2,H3,T3,M> of
		  ( <_20,_21,_22,_23,_24,_25,_26>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_22,
				 _24)
			    -| ['compiler_generated'] ) ->
			%% Line 1644
			( apply 'rmerge3_12_3'/6
			      (_20, _21, _22, _23, ( [_24|_26]
						     -| ['compiler_generated'] ), _25)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1645
		  ( <_27,_28,_29,_30,_31,_32,_33> when ( 'true'
							 -| ['compiler_generated'] ) ->
			%% Line 1646
			( apply 'rmerge3_2'/6
			      (_27, _28, ( [_29|_33]
					   -| ['compiler_generated'] ), _30, _31, _32)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1625
	  <[H1|T1],M,H2,T2,H3,T3> when 'true' ->
	      %% Line 1657
	      ( case <T1,H1,H2,T2,H3,T3,M> of
		  ( <_40,_41,_42,_43,_44,_45,_46>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_41,
				 _44)
			    -| ['compiler_generated'] ) ->
			%% Line 1658
			( apply 'rmerge3_21_3'/6
			      (_40, _41, _42, _43, ( [_44|_46]
						     -| ['compiler_generated'] ), _45)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1659
		  ( <_47,_48,_49,_50,_51,_52,_53> when ( 'true'
							 -| ['compiler_generated'] ) ->
			%% Line 1660
			( apply 'rmerge3_1'/6
			      (_47, ( [_48|_53]
				      -| ['compiler_generated'] ), _49, _50, _51, _52)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1627
	  <[],M,H2,T2,H3,T3>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1628
	      apply 'rmerge2_2'/5
		  (T2, H3, T3, M, H2)
	  %% Line 1629
	  <[],M,H2,T2,H3,T3> when 'true' ->
	      %% Line 1630
	      apply 'rmerge2_1'/4
		  (T2, H3, T3, [H2|M])
	  ( <_11,_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8,_7,_6})
		  -| [{'function_name',{'rmerge3_1',6}}] )
	    -| ['compiler_generated'] )
	end
'rmerge3_2'/6 =
    %% Line 1633
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <T1,H1,M,[H2|T2],H3,T3>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1643
	      ( case <T1,H1,H2,T2,H3,T3,M> of
		  ( <_20,_21,_22,_23,_24,_25,_26>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_22,
				 _24)
			    -| ['compiler_generated'] ) ->
			%% Line 1644
			( apply 'rmerge3_12_3'/6
			      (_20, _21, _22, _23, ( [_24|_26]
						     -| ['compiler_generated'] ), _25)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1645
		  ( <_27,_28,_29,_30,_31,_32,_33> when ( 'true'
							 -| ['compiler_generated'] ) ->
			%% Line 1646
			( apply 'rmerge3_2'/6
			      (_27, _28, ( [_29|_33]
					   -| ['compiler_generated'] ), _30, _31, _32)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1635
	  <T1,H1,M,[H2|T2],H3,T3> when 'true' ->
	      %% Line 1657
	      ( case <T1,H1,H2,T2,H3,T3,M> of
		  ( <_40,_41,_42,_43,_44,_45,_46>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_41,
				 _44)
			    -| ['compiler_generated'] ) ->
			%% Line 1658
			( apply 'rmerge3_21_3'/6
			      (_40, _41, _42, _43, ( [_44|_46]
						     -| ['compiler_generated'] ), _45)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1659
		  ( <_47,_48,_49,_50,_51,_52,_53> when ( 'true'
							 -| ['compiler_generated'] ) ->
			%% Line 1660
			( apply 'rmerge3_1'/6
			      (_47, ( [_48|_53]
				      -| ['compiler_generated'] ), _49, _50, _51, _52)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1637
	  <T1,H1,M,[],H3,T3>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1638
	      apply 'rmerge2_2'/5
		  (T1, H3, T3, M, H1)
	  %% Line 1639
	  <T1,H1,M,[],H3,T3> when 'true' ->
	      %% Line 1640
	      apply 'rmerge2_1'/4
		  (T1, H3, T3, [H1|M])
	  ( <_11,_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8,_7,_6})
		  -| [{'function_name',{'rmerge3_2',6}}] )
	    -| ['compiler_generated'] )
	end
'rmerge3_12'/7 =
    %% Line 1643
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <T1,H1,H2,T2,H3,T3,M>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1644
	      apply 'rmerge3_12_3'/6
		  (T1, H1, H2, T2, [H3|M], T3)
	  %% Line 1645
	  <T1,H1,H2,T2,H3,T3,M> when 'true' ->
	      %% Line 1646
	      apply 'rmerge3_2'/6
		  (T1, H1, [H2|M], T2, H3, T3)
	end
'rmerge3_12_3'/6 =
    %% Line 1649
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <T1,H1,H2,T2,M,[H3|T3]>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1650
	      apply 'rmerge3_12_3'/6
		  (T1, H1, H2, T2, [H3|M], T3)
	  %% Line 1651
	  <T1,H1,H2,T2,M,[H3|T3]> when 'true' ->
	      %% Line 1652
	      apply 'rmerge3_2'/6
		  (T1, H1, [H2|M], T2, H3, T3)
	  %% Line 1653
	  <T1,H1,H2,T2,M,[]> when 'true' ->
	      %% Line 1654
	      apply 'rmerge2_2'/5
		  (T1, H2, T2, M, H1)
	  ( <_11,_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8,_7,_6})
		  -| [{'function_name',{'rmerge3_12_3',6}}] )
	    -| ['compiler_generated'] )
	end
'rmerge3_21'/7 =
    %% Line 1657
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <T1,H1,H2,T2,H3,T3,M>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1658
	      apply 'rmerge3_21_3'/6
		  (T1, H1, H2, T2, [H3|M], T3)
	  %% Line 1659
	  <T1,H1,H2,T2,H3,T3,M> when 'true' ->
	      %% Line 1660
	      apply 'rmerge3_1'/6
		  (T1, [H1|M], H2, T2, H3, T3)
	end
'rmerge3_21_3'/6 =
    %% Line 1663
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <T1,H1,H2,T2,M,[H3|T3]>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1664
	      apply 'rmerge3_21_3'/6
		  (T1, H1, H2, T2, [H3|M], T3)
	  %% Line 1665
	  <T1,H1,H2,T2,M,[H3|T3]> when 'true' ->
	      %% Line 1666
	      apply 'rmerge3_1'/6
		  (T1, [H1|M], H2, T2, H3, T3)
	  %% Line 1667
	  <T1,H1,H2,T2,M,[]> when 'true' ->
	      %% Line 1668
	      apply 'rmerge2_1'/4
		  (T1, H2, T2, [H1|M])
	  ( <_11,_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8,_7,_6})
		  -| [{'function_name',{'rmerge3_21_3',6}}] )
	    -| ['compiler_generated'] )
	end
'merge2_1'/4 =
    %% Line 1672
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[H1|T1],H2,T2,M>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1673
	      apply 'merge2_1'/4
		  (T1, H2, T2, [H1|M])
	  %% Line 1674
	  <[H1|T1],H2,T2,M> when 'true' ->
	      %% Line 1675
	      apply 'merge2_2'/5
		  (T1, H2, T2, M, H1)
	  %% Line 1676
	  <[],H2,T2,M> when 'true' ->
	      %% Line 1677
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_7,_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5,_4})
		  -| [{'function_name',{'merge2_1',4}}] )
	    -| ['compiler_generated'] )
	end
'merge2_2'/5 =
    %% Line 1679
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <T1,HdM,[H2|T2],M,H1>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1680
	      apply 'merge2_1'/4
		  (T1, H2, T2, [H1|[HdM|M]])
	  %% Line 1681
	  <T1,HdM,[H2|T2],M,H1> when 'true' ->
	      %% Line 1682
	      apply 'merge2_2'/5
		  (T1, H2, T2, [HdM|M], H1)
	  %% Line 1683
	  <T1,HdM,[],M,H1> when 'true' ->
	      %% Line 1684
	      call 'lists':'reverse'
		  (T1, [H1|[HdM|M]])
	  ( <_9,_8,_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6,_5})
		  -| [{'function_name',{'merge2_2',5}}] )
	    -| ['compiler_generated'] )
	end
'rmerge2_1'/4 =
    %% Line 1688
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[H1|T1],H2,T2,M>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1689
	      apply 'rmerge2_2'/5
		  (T1, H2, T2, M, H1)
	  %% Line 1690
	  <[H1|T1],H2,T2,M> when 'true' ->
	      %% Line 1691
	      apply 'rmerge2_1'/4
		  (T1, H2, T2, [H1|M])
	  %% Line 1692
	  <[],H2,T2,M> when 'true' ->
	      %% Line 1693
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_7,_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5,_4})
		  -| [{'function_name',{'rmerge2_1',4}}] )
	    -| ['compiler_generated'] )
	end
'rmerge2_2'/5 =
    %% Line 1695
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <T1,HdM,[H2|T2],M,H1>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1696
	      apply 'rmerge2_2'/5
		  (T1, H2, T2, [HdM|M], H1)
	  %% Line 1697
	  <T1,HdM,[H2|T2],M,H1> when 'true' ->
	      %% Line 1698
	      apply 'rmerge2_1'/4
		  (T1, H2, T2, [H1|[HdM|M]])
	  %% Line 1699
	  <T1,HdM,[],M,H1> when 'true' ->
	      %% Line 1700
	      call 'lists':'reverse'
		  (T1, [H1|[HdM|M]])
	  ( <_9,_8,_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6,_5})
		  -| [{'function_name',{'rmerge2_2',5}}] )
	    -| ['compiler_generated'] )
	end
'usplit_1'/5 =
    %% Line 1705
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'>'
		    (Z,
		     Y) ->
	      %% Line 1706
	      apply 'usplit_1'/5
		  (Y, Z, L, [X|R], Rs)
	  %% Line 1707
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'=='
		    (Z,
		     Y) ->
	      %% Line 1708
	      apply 'usplit_1'/5
		  (X, Y, L, R, Rs)
	  %% Line 1709
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'>'
		    (Z,
		     X) ->
	      %% Line 1710
	      apply 'usplit_1'/5
		  (Z, Y, L, [X|R], Rs)
	  %% Line 1711
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'=='
		    (Z,
		     X) ->
	      %% Line 1712
	      apply 'usplit_1'/5
		  (X, Y, L, R, Rs)
	  %% Line 1713
	  <X,Y,[Z|L],[],Rs> when 'true' ->
	      %% Line 1714
	      apply 'usplit_1'/5
		  (X, Y, L, [Z|[]], Rs)
	  %% Line 1715
	  <X,Y,[Z|L],R,Rs> when 'true' ->
	      %% Line 1716
	      apply 'usplit_1_1'/6
		  (X, Y, L, R, Rs, Z)
	  %% Line 1717
	  <X,Y,[],R,Rs> when 'true' ->
	      %% Line 1718
	      apply 'rumergel'/3
		  ([[Y|[X|R]]|Rs], [], 'asc')
	  ( <_9,_8,_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6,_5})
		  -| [{'function_name',{'usplit_1',5}}] )
	    -| ['compiler_generated'] )
	end
'usplit_1_1'/6 =
    %% Line 1720
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'>'
		    (Z,
		     Y) ->
	      %% Line 1721
	      apply 'usplit_1_1'/6
		  (Y, Z, L, [X|R], Rs, S)
	  %% Line 1722
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=='
		    (Z,
		     Y) ->
	      %% Line 1723
	      apply 'usplit_1_1'/6
		  (X, Y, L, R, Rs, S)
	  %% Line 1724
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'>'
		    (Z,
		     X) ->
	      %% Line 1725
	      apply 'usplit_1_1'/6
		  (Z, Y, L, [X|R], Rs, S)
	  %% Line 1726
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=='
		    (Z,
		     X) ->
	      %% Line 1727
	      apply 'usplit_1_1'/6
		  (X, Y, L, R, Rs, S)
	  %% Line 1728
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'>'
		    (Z,
		     S) ->
	      %% Line 1729
	      apply 'usplit_1'/5
		  (S, Z, L, [], [[Y|[X|R]]|Rs])
	  %% Line 1730
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=='
		    (Z,
		     S) ->
	      %% Line 1731
	      apply 'usplit_1_1'/6
		  (X, Y, L, R, Rs, S)
	  %% Line 1732
	  <X,Y,[Z|L],R,Rs,S> when 'true' ->
	      %% Line 1733
	      apply 'usplit_1'/5
		  (Z, S, L, [], [[Y|[X|R]]|Rs])
	  %% Line 1734
	  <X,Y,[],R,Rs,S> when 'true' ->
	      %% Line 1735
	      apply 'rumergel'/3
		  ([[S|[]]|[[Y|[X|R]]|Rs]], [], 'asc')
	  ( <_11,_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8,_7,_6})
		  -| [{'function_name',{'usplit_1_1',6}}] )
	    -| ['compiler_generated'] )
	end
'usplit_2'/5 =
    %% Line 1738
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'<'
		    (Z,
		     Y) ->
	      %% Line 1739
	      apply 'usplit_2'/5
		  (Y, Z, L, [X|R], Rs)
	  %% Line 1740
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'=='
		    (Z,
		     Y) ->
	      %% Line 1741
	      apply 'usplit_2'/5
		  (X, Y, L, R, Rs)
	  %% Line 1742
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'<'
		    (Z,
		     X) ->
	      %% Line 1743
	      apply 'usplit_2'/5
		  (Z, Y, L, [X|R], Rs)
	  %% Line 1744
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'=='
		    (Z,
		     X) ->
	      %% Line 1745
	      apply 'usplit_2'/5
		  (X, Y, L, R, Rs)
	  %% Line 1746
	  <X,Y,[Z|L],[],Rs> when 'true' ->
	      %% Line 1747
	      apply 'usplit_2'/5
		  (X, Y, L, [Z|[]], Rs)
	  %% Line 1748
	  <X,Y,[Z|L],R,Rs> when 'true' ->
	      %% Line 1749
	      apply 'usplit_2_1'/6
		  (X, Y, L, R, Rs, Z)
	  %% Line 1750
	  <X,Y,[],R,Rs> when 'true' ->
	      %% Line 1751
	      apply 'umergel'/3
		  ([[Y|[X|R]]|Rs], [], 'desc')
	  ( <_9,_8,_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6,_5})
		  -| [{'function_name',{'usplit_2',5}}] )
	    -| ['compiler_generated'] )
	end
'usplit_2_1'/6 =
    %% Line 1753
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'<'
		    (Z,
		     Y) ->
	      %% Line 1754
	      apply 'usplit_2_1'/6
		  (Y, Z, L, [X|R], Rs, S)
	  %% Line 1755
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=='
		    (Z,
		     Y) ->
	      %% Line 1756
	      apply 'usplit_2_1'/6
		  (X, Y, L, R, Rs, S)
	  %% Line 1757
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'<'
		    (Z,
		     X) ->
	      %% Line 1758
	      apply 'usplit_2_1'/6
		  (Z, Y, L, [X|R], Rs, S)
	  %% Line 1759
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=='
		    (Z,
		     X) ->
	      %% Line 1760
	      apply 'usplit_2_1'/6
		  (X, Y, L, R, Rs, S)
	  %% Line 1761
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'<'
		    (Z,
		     S) ->
	      %% Line 1762
	      apply 'usplit_2'/5
		  (S, Z, L, [], [[Y|[X|R]]|Rs])
	  %% Line 1763
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=='
		    (Z,
		     S) ->
	      %% Line 1764
	      apply 'usplit_2_1'/6
		  (X, Y, L, R, Rs, S)
	  %% Line 1765
	  <X,Y,[Z|L],R,Rs,S> when 'true' ->
	      %% Line 1766
	      apply 'usplit_2'/5
		  (Z, S, L, [], [[Y|[X|R]]|Rs])
	  %% Line 1767
	  <X,Y,[],R,Rs,S> when 'true' ->
	      %% Line 1768
	      apply 'umergel'/3
		  ([[S|[]]|[[Y|[X|R]]|Rs]], [], 'desc')
	  ( <_11,_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8,_7,_6})
		  -| [{'function_name',{'usplit_2_1',6}}] )
	    -| ['compiler_generated'] )
	end
'umergel'/1 =
    %% Line 1772
    fun (_0) ->
	%% Line 1773
	apply 'umergel'/3
	    (_0, [], 'asc')
'umergel'/3 =
    %% Line 1775
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[[]|L],Acc,O> when 'true' ->
	      %% Line 1776
	      apply 'umergel'/3
		  (L, Acc, O)
	  %% Line 1777
	  <[T1|[[H2|T2]|[[H3|T3]|L]]],Acc,'asc'> when 'true' ->
	      let <_3> =
		  apply %% Line 1778
			'umerge3_1'/7
		      (%% Line 1778
		       T1, %% Line 1778
			   [H2|H3], %% Line 1778
				    T2, %% Line 1778
					H2, %% Line 1778
					    [], %% Line 1778
						T3, %% Line 1778
						    H3)
	      in  %% Line 1778
		  apply 'umergel'/3
		      (L, [_3|Acc], 'asc')
	  %% Line 1779
	  <[[H3|T3]|[[H2|T2]|[T1|L]]],Acc,'desc'> when 'true' ->
	      let <_4> =
		  apply %% Line 1780
			'umerge3_1'/7
		      (%% Line 1780
		       T1, %% Line 1780
			   [H2|H3], %% Line 1780
				    T2, %% Line 1780
					H2, %% Line 1780
					    [], %% Line 1780
						T3, %% Line 1780
						    H3)
	      in  %% Line 1780
		  apply 'umergel'/3
		      (L, [_4|Acc], 'desc')
	  %% Line 1781
	  <[A|[[]|L]],Acc,O> when 'true' ->
	      %% Line 1782
	      apply 'umergel'/3
		  ([A|L], Acc, O)
	  %% Line 1783
	  <[A|[B|[[]|L]]],Acc,O> when 'true' ->
	      %% Line 1784
	      apply 'umergel'/3
		  ([A|[B|L]], Acc, O)
	  %% Line 1785
	  <[[H1|T1]|[T2|L]],Acc,'asc'> when 'true' ->
	      let <_5> =
		  apply %% Line 1786
			'umerge2_2'/4
		      (%% Line 1786
		       T1, %% Line 1786
			   T2, %% Line 1786
			       [], %% Line 1786
				   H1)
	      in  %% Line 1786
		  apply 'umergel'/3
		      (L, [_5|Acc], 'asc')
	  %% Line 1787
	  <[T2|[[H1|T1]|L]],Acc,'desc'> when 'true' ->
	      let <_6> =
		  apply %% Line 1788
			'umerge2_2'/4
		      (%% Line 1788
		       T1, %% Line 1788
			   T2, %% Line 1788
			       [], %% Line 1788
				   H1)
	      in  %% Line 1788
		  apply 'umergel'/3
		      (L, [_6|Acc], 'desc')
	  %% Line 1789
	  <[L|[]],[],_X_O> when 'true' ->
	      %% Line 1790
	      L
	  %% Line 1791
	  <[L|[]],Acc,O> when 'true' ->
	      let <_7> =
		  call %% Line 1792
		       'lists':%% Line 1792
			       'reverse'
		      (%% Line 1792
		       L, %% Line 1792
			  [])
	      in  %% Line 1792
		  apply 'rumergel'/3
		      ([_7|Acc], [], O)
	  %% Line 1793
	  <[],[],_X_O> when 'true' ->
	      %% Line 1794
	      []
	  %% Line 1795
	  <[],Acc,O> when 'true' ->
	      %% Line 1796
	      apply 'rumergel'/3
		  (Acc, [], O)
	  ( <_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8})
		  -| [{'function_name',{'umergel',3}}] )
	    -| ['compiler_generated'] )
	end
'rumergel'/3 =
    %% Line 1798
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[[H3|T3]|[[H2|T2]|[T1|L]]],Acc,'asc'> when 'true' ->
	      let <_3> =
		  apply %% Line 1799
			'rumerge3_1'/6
		      (%% Line 1799
		       T1, %% Line 1799
			   T2, %% Line 1799
			       H2, %% Line 1799
				   [], %% Line 1799
				       T3, %% Line 1799
					   H3)
	      in  %% Line 1799
		  apply 'rumergel'/3
		      (L, [_3|Acc], 'asc')
	  %% Line 1800
	  <[T1|[[H2|T2]|[[H3|T3]|L]]],Acc,'desc'> when 'true' ->
	      let <_4> =
		  apply %% Line 1801
			'rumerge3_1'/6
		      (%% Line 1801
		       T1, %% Line 1801
			   T2, %% Line 1801
			       H2, %% Line 1801
				   [], %% Line 1801
				       T3, %% Line 1801
					   H3)
	      in  %% Line 1801
		  apply 'rumergel'/3
		      (L, [_4|Acc], 'desc')
	  %% Line 1802
	  <[[H2|T2]|[T1|L]],Acc,'asc'> when 'true' ->
	      let <_5> =
		  apply %% Line 1803
			'rumerge2_1'/4
		      (%% Line 1803
		       T1, %% Line 1803
			   T2, %% Line 1803
			       [], %% Line 1803
				   H2)
	      in  %% Line 1803
		  apply 'rumergel'/3
		      (L, [_5|Acc], 'asc')
	  %% Line 1804
	  <[T1|[[H2|T2]|L]],Acc,'desc'> when 'true' ->
	      let <_6> =
		  apply %% Line 1805
			'rumerge2_1'/4
		      (%% Line 1805
		       T1, %% Line 1805
			   T2, %% Line 1805
			       [], %% Line 1805
				   H2)
	      in  %% Line 1805
		  apply 'rumergel'/3
		      (L, [_6|Acc], 'desc')
	  %% Line 1806
	  <[L|[]],Acc,O> when 'true' ->
	      let <_7> =
		  call %% Line 1807
		       'lists':%% Line 1807
			       'reverse'
		      (%% Line 1807
		       L, %% Line 1807
			  [])
	      in  %% Line 1807
		  apply 'umergel'/3
		      ([_7|Acc], [], O)
	  %% Line 1808
	  <[],Acc,O> when 'true' ->
	      %% Line 1809
	      apply 'umergel'/3
		  (Acc, [], O)
	  ( <_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8})
		  -| [{'function_name',{'rumergel',3}}] )
	    -| ['compiler_generated'] )
	end
'umerge3_1'/7 =
    %% Line 1814
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <[H1|T1],HdM,T2,H2,M,T3,H3>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1842
	      ( case <T1,H1,T2,H2,M,T3,H3,HdM> of
		  ( <_23,_24,_25,_26,_27,_28,_29,_X_HdM>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_24,
				 _29)
			    -| ['compiler_generated'] ) ->
			%% Line 1843
			( apply 'umerge3_1'/7
			      (_23, _24, _25, _26, ( [_24|_27]
						     -| ['compiler_generated'] ), _28, _29)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1844
		  ( <_30,_31,_32,_33,_34,_35,_36,_37>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=='
								 -| ['compiler_generated'] )
				(_36,
				 _37)
			    -| ['compiler_generated'] ) ->
			%% Line 1845
			( apply 'umerge3_12_3'/6
			      (_30, _31, _32, _33, _34, _35)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1846
		  ( <_38,_39,_40,_41,_42,_43,_44,_X_HdM> when ( 'true'
								-| ['compiler_generated'] ) ->
			%% Line 1847
			( apply 'umerge3_12_3'/6
			      (_38, _39, _40, _41, ( [_44|_42]
						     -| ['compiler_generated'] ), _43)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1816
	  <[H1|T1],HdM,T2,H2,M,T3,H3>
	      when call 'erlang':'=='
		    (H2,
		     HdM) ->
	      %% Line 1817
	      apply 'umerge3_2'/7
		  (T1, H1, T2, H2, M, T3, H3)
	  %% Line 1818
	  <[H1|T1],HdM,T2,H2,M,T3,H3> when 'true' ->
	      %% Line 1858
	      ( case <T1,H1,T2,H2,M,T3,H3,HdM> of
		  ( <_52,_53,_54,_55,_56,_57,_58,_X_HdM>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_55,
				 _58)
			    -| ['compiler_generated'] ) ->
			%% Line 1859
			( apply 'umerge3_2'/7
			      (_52, _53, _54, _55, ( [_55|_56]
						     -| ['compiler_generated'] ), _57, _58)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1860
		  ( <_59,_60,_61,_62,_63,_64,_65,_66>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=='
								 -| ['compiler_generated'] )
				(_65,
				 _66)
			    -| ['compiler_generated'] ) ->
			%% Line 1861
			( apply 'umerge3_21_3'/6
			      (_59, _60, _61, _62, _63, _64)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1862
		  ( <_67,_68,_69,_70,_71,_72,_73,_X_HdM> when ( 'true'
								-| ['compiler_generated'] ) ->
			%% Line 1863
			( apply 'umerge3_21_3'/6
			      (_67, _68, _69, _70, ( [_73|_71]
						     -| ['compiler_generated'] ), _72)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1820
	  <[],HdM,T2,H2,M,T3,H3>
	      when call 'erlang':'=='
		    (H2,
		     HdM) ->
	      %% Line 1821
	      apply 'umerge2_1'/5
		  (T2, T3, M, HdM, H3)
	  %% Line 1822
	  <[],_X_HdM,T2,H2,M,T3,H3>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1823
	      apply 'umerge2_1'/5
		  (T2, T3, [H2|M], H2, H3)
	  %% Line 1824
	  <[],HdM,T2,H2,M,T3,H3>
	      when call 'erlang':'=='
		    (H3,
		     HdM) ->
	      %% Line 1825
	      apply 'umerge2_2'/4
		  (T2, T3, M, H2)
	  %% Line 1826
	  <[],_X_HdM,T2,H2,M,T3,H3> when 'true' ->
	      %% Line 1827
	      apply 'umerge2_2'/4
		  (T2, T3, [H3|M], H2)
	  ( <_13,_12,_11,_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12,_11,_10,_9,_8,_7})
		  -| [{'function_name',{'umerge3_1',7}}] )
	    -| ['compiler_generated'] )
	end
'umerge3_2'/7 =
    %% Line 1830
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <T1,H1,[H2|T2],HdM,M,T3,H3>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1842
	      ( case <T1,H1,T2,H2,M,T3,H3,HdM> of
		  ( <_23,_24,_25,_26,_27,_28,_29,_X_HdM>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_24,
				 _29)
			    -| ['compiler_generated'] ) ->
			%% Line 1843
			( apply 'umerge3_1'/7
			      (_23, _24, _25, _26, ( [_24|_27]
						     -| ['compiler_generated'] ), _28, _29)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1844
		  ( <_30,_31,_32,_33,_34,_35,_36,_37>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=='
								 -| ['compiler_generated'] )
				(_36,
				 _37)
			    -| ['compiler_generated'] ) ->
			%% Line 1845
			( apply 'umerge3_12_3'/6
			      (_30, _31, _32, _33, _34, _35)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1846
		  ( <_38,_39,_40,_41,_42,_43,_44,_X_HdM> when ( 'true'
								-| ['compiler_generated'] ) ->
			%% Line 1847
			( apply 'umerge3_12_3'/6
			      (_38, _39, _40, _41, ( [_44|_42]
						     -| ['compiler_generated'] ), _43)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1832
	  <T1,H1,[H2|T2],HdM,M,T3,H3> when 'true' ->
	      %% Line 1858
	      ( case <T1,H1,T2,H2,M,T3,H3,HdM> of
		  ( <_52,_53,_54,_55,_56,_57,_58,_X_HdM>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_55,
				 _58)
			    -| ['compiler_generated'] ) ->
			%% Line 1859
			( apply 'umerge3_2'/7
			      (_52, _53, _54, _55, ( [_55|_56]
						     -| ['compiler_generated'] ), _57, _58)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1860
		  ( <_59,_60,_61,_62,_63,_64,_65,_66>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=='
								 -| ['compiler_generated'] )
				(_65,
				 _66)
			    -| ['compiler_generated'] ) ->
			%% Line 1861
			( apply 'umerge3_21_3'/6
			      (_59, _60, _61, _62, _63, _64)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1862
		  ( <_67,_68,_69,_70,_71,_72,_73,_X_HdM> when ( 'true'
								-| ['compiler_generated'] ) ->
			%% Line 1863
			( apply 'umerge3_21_3'/6
			      (_67, _68, _69, _70, ( [_73|_71]
						     -| ['compiler_generated'] ), _72)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1834
	  <T1,H1,[],_X_HdM,M,T3,H3>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1835
	      apply 'umerge2_1'/5
		  (T1, T3, [H1|M], H1, H3)
	  %% Line 1836
	  <T1,H1,[],HdM,M,T3,H3>
	      when call 'erlang':'=='
		    (H3,
		     HdM) ->
	      %% Line 1837
	      apply 'umerge2_2'/4
		  (T1, T3, M, H1)
	  %% Line 1838
	  <T1,H1,[],_X_HdM,M,T3,H3> when 'true' ->
	      %% Line 1839
	      apply 'umerge2_2'/4
		  (T1, T3, [H3|M], H1)
	  ( <_13,_12,_11,_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12,_11,_10,_9,_8,_7})
		  -| [{'function_name',{'umerge3_2',7}}] )
	    -| ['compiler_generated'] )
	end
'umerge3_12'/8 =
    %% Line 1842
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <T1,H1,T2,H2,M,T3,H3,_X_HdM>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1843
	      apply 'umerge3_1'/7
		  (T1, H1, T2, H2, [H1|M], T3, H3)
	  %% Line 1844
	  <T1,H1,T2,H2,M,T3,H3,HdM>
	      when call 'erlang':'=='
		    (H3,
		     HdM) ->
	      %% Line 1845
	      apply 'umerge3_12_3'/6
		  (T1, H1, T2, H2, M, T3)
	  %% Line 1846
	  <T1,H1,T2,H2,M,T3,H3,_X_HdM> when 'true' ->
	      %% Line 1847
	      apply 'umerge3_12_3'/6
		  (T1, H1, T2, H2, [H3|M], T3)
	end
'umerge3_12_3'/6 =
    %% Line 1850
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <T1,H1,T2,H2,M,[H3|T3]>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1851
	      apply 'umerge3_1'/7
		  (T1, H1, T2, H2, [H1|M], T3, H3)
	  %% Line 1852
	  <T1,H1,T2,H2,M,[H3|T3]> when 'true' ->
	      %% Line 1853
	      apply 'umerge3_12_3'/6
		  (T1, H1, T2, H2, [H3|M], T3)
	  %% Line 1854
	  <T1,H1,T2,H2,M,[]> when 'true' ->
	      %% Line 1855
	      apply 'umerge2_1'/5
		  (T1, T2, [H1|M], H1, H2)
	  ( <_11,_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8,_7,_6})
		  -| [{'function_name',{'umerge3_12_3',6}}] )
	    -| ['compiler_generated'] )
	end
'umerge3_21'/8 =
    %% Line 1858
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <T1,H1,T2,H2,M,T3,H3,_X_HdM>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1859
	      apply 'umerge3_2'/7
		  (T1, H1, T2, H2, [H2|M], T3, H3)
	  %% Line 1860
	  <T1,H1,T2,H2,M,T3,H3,HdM>
	      when call 'erlang':'=='
		    (H3,
		     HdM) ->
	      %% Line 1861
	      apply 'umerge3_21_3'/6
		  (T1, H1, T2, H2, M, T3)
	  %% Line 1862
	  <T1,H1,T2,H2,M,T3,H3,_X_HdM> when 'true' ->
	      %% Line 1863
	      apply 'umerge3_21_3'/6
		  (T1, H1, T2, H2, [H3|M], T3)
	end
'umerge3_21_3'/6 =
    %% Line 1866
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <T1,H1,T2,H2,M,[H3|T3]>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1867
	      apply 'umerge3_2'/7
		  (T1, H1, T2, H2, [H2|M], T3, H3)
	  %% Line 1868
	  <T1,H1,T2,H2,M,[H3|T3]> when 'true' ->
	      %% Line 1869
	      apply 'umerge3_21_3'/6
		  (T1, H1, T2, H2, [H3|M], T3)
	  %% Line 1870
	  <T1,H1,T2,H2,M,[]> when 'true' ->
	      %% Line 1871
	      apply 'umerge2_2'/4
		  (T1, T2, [H2|M], H1)
	  ( <_11,_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8,_7,_6})
		  -| [{'function_name',{'umerge3_21_3',6}}] )
	    -| ['compiler_generated'] )
	end
'rumerge3_1'/6 =
    %% Line 1874
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <[H1|T1],T2,H2,M,T3,H3>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1886
	      ( case <T1,H1,T2,H2,M,T3,H3> of
		  ( <_20,_21,_22,_23,_24,_25,_26>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_23,
				 _26)
			    -| ['compiler_generated'] ) ->
			%% Line 1887
			( apply 'rumerge3_12_3'/7
			      (_20, _22, _23, _24, _25, _26, _21)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1888
		  ( <_27,_28,_29,_30,_31,_32,_33> when ( 'true'
							 -| ['compiler_generated'] ) ->
			%% Line 1889
			( apply 'rumerge3_2'/7
			      (_27, _29, _30, _31, _32, _33, _28)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1876
	  <[H1|T1],T2,H2,M,T3,H3>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1877
	      apply 'rumerge3_21_3'/7
		  (T1, T2, H2, M, T3, H3, H1)
	  %% Line 1878
	  <[H1|T1],T2,H2,M,T3,H3> when 'true' ->
	      %% Line 1879
	      apply 'rumerge3_1'/6
		  (T1, T2, H2, [H1|M], T3, H3)
	  %% Line 1880
	  <[],T2,H2,M,T3,H3>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1881
	      apply 'rumerge2_2'/5
		  (T2, T3, M, H3, H2)
	  %% Line 1882
	  <[],T2,H2,M,T3,H3> when 'true' ->
	      %% Line 1883
	      apply 'rumerge2_1'/4
		  (T2, T3, [H2|M], H3)
	  ( <_11,_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8,_7,_6})
		  -| [{'function_name',{'rumerge3_1',6}}] )
	    -| ['compiler_generated'] )
	end
'rumerge3_12a'/7 =
    %% Line 1886
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <T1,H1,T2,H2,M,T3,H3>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1887
	      apply 'rumerge3_12_3'/7
		  (T1, T2, H2, M, T3, H3, H1)
	  %% Line 1888
	  <T1,H1,T2,H2,M,T3,H3> when 'true' ->
	      %% Line 1889
	      apply 'rumerge3_2'/7
		  (T1, T2, H2, M, T3, H3, H1)
	end
'rumerge3_2'/7 =
    %% Line 1892
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <T1,[H2|T2],H2M,M,T3,H3,H1>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1911
	      ( case <T1,H1,T2,H2,M,T3,H3,H2M> of
		  ( <_23,_24,_25,_26,_27,_28,_29,_30>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_26,
				 _29)
			    -| ['compiler_generated'] ) ->
			%% Line 1912
			( apply 'rumerge3_12_3'/7
			      (_23, _25, _26, ( [_30|_27]
						-| ['compiler_generated'] ), _28, _29, _24)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1913
		  ( <_31,_32,_33,_34,_35,_36,_37,_38> when ( 'true'
							     -| ['compiler_generated'] ) ->
			%% Line 1914
			( apply 'rumerge3_2'/7
			      (_31, _33, _34, ( [_38|_35]
						-| ['compiler_generated'] ), _36, _37, _32)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1895
	  <T1,[H2|T2],H2M,M,T3,H3,H1>
	      when call 'erlang':'=='
		    (H1,
		     H2M) ->
	      %% Line 1896
	      apply 'rumerge3_1'/6
		  (T1, T2, H2, [H1|M], T3, H3)
	  %% Line 1897
	  <T1,[H2|T2],H2M,M,T3,H3,H1>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1899
	      apply 'rumerge3_21_3'/7
		  (T1, T2, H2, [H2M|M], T3, H3, H1)
	  %% Line 1900
	  <T1,[H2|T2],H2M,M,T3,H3,H1> when 'true' ->
	      %% Line 1902
	      apply 'rumerge3_1'/6
		  (T1, T2, H2, [H1|[H2M|M]], T3, H3)
	  %% Line 1903
	  <T1,[],H2M,M,T3,H3,H1>
	      when call 'erlang':'=='
		    (H1,
		     H2M) ->
	      %% Line 1904
	      apply 'rumerge2_1'/4
		  (T1, T3, [H1|M], H3)
	  %% Line 1905
	  <T1,[],H2M,M,T3,H3,H1>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1906
	      apply 'rumerge2_2'/5
		  (T1, T3, [H2M|M], H3, H1)
	  %% Line 1907
	  <T1,[],H2M,M,T3,H3,H1> when 'true' ->
	      %% Line 1908
	      apply 'rumerge2_1'/4
		  (T1, T3, [H1|[H2M|M]], H3)
	  ( <_13,_12,_11,_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12,_11,_10,_9,_8,_7})
		  -| [{'function_name',{'rumerge3_2',7}}] )
	    -| ['compiler_generated'] )
	end
'rumerge3_12b'/8 =
    %% Line 1911
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <T1,H1,T2,H2,M,T3,H3,H2M>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1912
	      apply 'rumerge3_12_3'/7
		  (T1, T2, H2, [H2M|M], T3, H3, H1)
	  %% Line 1913
	  <T1,H1,T2,H2,M,T3,H3,H2M> when 'true' ->
	      %% Line 1914
	      apply 'rumerge3_2'/7
		  (T1, T2, H2, [H2M|M], T3, H3, H1)
	end
'rumerge3_12_3'/7 =
    %% Line 1917
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <T1,T2,H2,M,[H3|T3],H3M,H1>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1918
	      apply 'rumerge3_12_3'/7
		  (T1, T2, H2, [H3M|M], T3, H3, H1)
	  %% Line 1919
	  <T1,T2,H2,M,[H3|T3],H3M,H1>
	      when call 'erlang':'=='
		    (H2,
		     H3M) ->
	      %% Line 1920
	      apply 'rumerge3_2'/7
		  (T1, T2, H2, M, T3, H3, H1)
	  %% Line 1921
	  <T1,T2,H2,M,[H3|T3],H3M,H1> when 'true' ->
	      %% Line 1922
	      apply 'rumerge3_2'/7
		  (T1, T2, H2, [H3M|M], T3, H3, H1)
	  %% Line 1923
	  <T1,T2,H2,M,[],H3M,H1>
	      when call 'erlang':'=='
		    (H2,
		     H3M) ->
	      %% Line 1924
	      apply 'rumerge2_2'/5
		  (T1, T2, M, H2, H1)
	  %% Line 1925
	  <T1,T2,H2,M,[],H3M,H1> when 'true' ->
	      %% Line 1926
	      apply 'rumerge2_2'/5
		  (T1, T2, [H3M|M], H2, H1)
	  ( <_13,_12,_11,_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12,_11,_10,_9,_8,_7})
		  -| [{'function_name',{'rumerge3_12_3',7}}] )
	    -| ['compiler_generated'] )
	end
'rumerge3_21_3'/7 =
    %% Line 1929
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <T1,T2,H2,M,[H3|T3],H3M,H1>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1930
	      apply 'rumerge3_21_3'/7
		  (T1, T2, H2, [H3M|M], T3, H3, H1)
	  %% Line 1931
	  <T1,T2,H2,M,[H3|T3],H3M,H1>
	      when call 'erlang':'=='
		    (H1,
		     H3M) ->
	      %% Line 1932
	      apply 'rumerge3_1'/6
		  (T1, T2, H2, [H1|M], T3, H3)
	  %% Line 1933
	  <T1,T2,H2,M,[H3|T3],H3M,H1> when 'true' ->
	      %% Line 1934
	      apply 'rumerge3_1'/6
		  (T1, T2, H2, [H1|[H3M|M]], T3, H3)
	  %% Line 1935
	  <T1,T2,H2,M,[],H3M,H1>
	      when call 'erlang':'=='
		    (H1,
		     H3M) ->
	      %% Line 1936
	      apply 'rumerge2_1'/4
		  (T1, T2, [H1|M], H2)
	  %% Line 1937
	  <T1,T2,H2,M,[],H3M,H1> when 'true' ->
	      %% Line 1938
	      apply 'rumerge2_1'/4
		  (T1, T2, [H1|[H3M|M]], H2)
	  ( <_13,_12,_11,_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12,_11,_10,_9,_8,_7})
		  -| [{'function_name',{'rumerge3_21_3',7}}] )
	    -| ['compiler_generated'] )
	end
'umerge2_1'/5 =
    %% Line 1943
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <[H1|T1],T2,M,_X_HdM,H2>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1944
	      apply 'umerge2_1'/5
		  (T1, T2, [H1|M], H1, H2)
	  %% Line 1945
	  <[H1|T1],T2,M,HdM,H2>
	      when call 'erlang':'=='
		    (H2,
		     HdM) ->
	      %% Line 1946
	      apply 'umerge2_2'/4
		  (T1, T2, M, H1)
	  %% Line 1947
	  <[H1|T1],T2,M,_X_HdM,H2> when 'true' ->
	      %% Line 1948
	      apply 'umerge2_2'/4
		  (T1, T2, [H2|M], H1)
	  %% Line 1949
	  <[],T2,M,HdM,H2>
	      when call 'erlang':'=='
		    (H2,
		     HdM) ->
	      %% Line 1950
	      call 'lists':'reverse'
		  (T2, M)
	  %% Line 1951
	  <[],T2,M,_X_HdM,H2> when 'true' ->
	      %% Line 1952
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_9,_8,_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6,_5})
		  -| [{'function_name',{'umerge2_1',5}}] )
	    -| ['compiler_generated'] )
	end
'umerge2_2'/4 =
    %% Line 1954
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <T1,[H2|T2],M,H1>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1955
	      apply 'umerge2_1'/5
		  (T1, T2, [H1|M], H1, H2)
	  %% Line 1956
	  <T1,[H2|T2],M,H1> when 'true' ->
	      %% Line 1957
	      apply 'umerge2_2'/4
		  (T1, T2, [H2|M], H1)
	  %% Line 1958
	  <T1,[],M,H1> when 'true' ->
	      %% Line 1959
	      call 'lists':'reverse'
		  (T1, [H1|M])
	  ( <_7,_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5,_4})
		  -| [{'function_name',{'umerge2_2',4}}] )
	    -| ['compiler_generated'] )
	end
'rumerge2_1'/4 =
    %% Line 1964
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[H1|T1],T2,M,H2>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1965
	      apply 'rumerge2_2'/5
		  (T1, T2, M, H2, H1)
	  %% Line 1966
	  <[H1|T1],T2,M,H2> when 'true' ->
	      %% Line 1967
	      apply 'rumerge2_1'/4
		  (T1, T2, [H1|M], H2)
	  %% Line 1968
	  <[],T2,M,H2> when 'true' ->
	      %% Line 1969
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_7,_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5,_4})
		  -| [{'function_name',{'rumerge2_1',4}}] )
	    -| ['compiler_generated'] )
	end
'rumerge2_2'/5 =
    %% Line 1972
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <T1,[H2|T2],M,H2M,H1>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1973
	      apply 'rumerge2_2'/5
		  (T1, T2, [H2M|M], H2, H1)
	  %% Line 1974
	  <T1,[H2|T2],M,H2M,H1>
	      when call 'erlang':'=='
		    (H1,
		     H2M) ->
	      %% Line 1975
	      apply 'rumerge2_1'/4
		  (T1, T2, [H1|M], H2)
	  %% Line 1976
	  <T1,[H2|T2],M,H2M,H1> when 'true' ->
	      %% Line 1977
	      apply 'rumerge2_1'/4
		  (T1, T2, [H1|[H2M|M]], H2)
	  %% Line 1978
	  <T1,[],M,H2M,H1>
	      when call 'erlang':'=='
		    (H1,
		     H2M) ->
	      %% Line 1979
	      call 'lists':'reverse'
		  (T1, [H1|M])
	  %% Line 1980
	  <T1,[],M,H2M,H1> when 'true' ->
	      %% Line 1981
	      call 'lists':'reverse'
		  (T1, [H1|[H2M|M]])
	  ( <_9,_8,_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6,_5})
		  -| [{'function_name',{'rumerge2_2',5}}] )
	    -| ['compiler_generated'] )
	end
'keysplit_1'/8 =
    %% Line 1986
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <I,X,EX,Y,EY,[Z|L],R,Rs> when 'true' ->
	      %% Line 1987
	      case call 'erlang':'element'
		       (I, Z) of
		%% Line 1988
		<EZ>
		    when call 'erlang':'=<'
			  (EY,
			   EZ) ->
		    %% Line 1989
		    apply 'keysplit_1'/8
			(I, Y, EY, Z, EZ, L, [X|R], Rs)
		%% Line 1990
		<EZ>
		    when call 'erlang':'=<'
			  (EX,
			   EZ) ->
		    %% Line 1991
		    apply 'keysplit_1'/8
			(I, Z, EZ, Y, EY, L, [X|R], Rs)
		%% Line 1992
		<_X_EZ>
		    when call 'erlang':'=:='
			  (R,
			   []) ->
		    %% Line 1993
		    apply 'keysplit_1'/8
			(I, X, EX, Y, EY, L, [Z|[]], Rs)
		%% Line 1994
		<EZ> when 'true' ->
		    %% Line 1995
		    apply 'keysplit_1_1'/10
			(I, X, EX, Y, EY, EZ, R, Rs, Z, L)
	      end
	  %% Line 1997
	  <I,X,_X_EX,Y,_X_EY,[],R,Rs> when 'true' ->
	      %% Line 1998
	      apply 'rkeymergel'/4
		  (I, [[Y|[X|R]]|Rs], [], 'asc')
	  ( <_16,_15,_14,_13,_12,_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15,_14,_13,_12,_11,_10,_9})
		  -| [{'function_name',{'keysplit_1',8}}] )
	    -| ['compiler_generated'] )
	end
'keysplit_1_1'/10 =
    %% Line 2000
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9> of
	  <I,X,EX,Y,EY,ES,R,Rs,S,[Z|L]> when 'true' ->
	      %% Line 2001
	      case call 'erlang':'element'
		       (I, Z) of
		%% Line 2002
		<EZ>
		    when call 'erlang':'=<'
			  (EY,
			   EZ) ->
		    %% Line 2003
		    apply 'keysplit_1_1'/10
			(I, Y, EY, Z, EZ, ES, [X|R], Rs, S, L)
		%% Line 2004
		<EZ>
		    when call 'erlang':'=<'
			  (EX,
			   EZ) ->
		    %% Line 2005
		    apply 'keysplit_1_1'/10
			(I, Z, EZ, Y, EY, ES, [X|R], Rs, S, L)
		%% Line 2006
		<EZ>
		    when call 'erlang':'=<'
			  (ES,
			   EZ) ->
		    %% Line 2007
		    apply 'keysplit_1'/8
			(I, S, ES, Z, EZ, L, [], [[Y|[X|R]]|Rs])
		%% Line 2008
		<EZ> when 'true' ->
		    %% Line 2009
		    apply 'keysplit_1'/8
			(I, Z, EZ, S, ES, L, [], [[Y|[X|R]]|Rs])
	      end
	  %% Line 2011
	  <I,X,_X_EX,Y,_X_EY,_X_ES,R,Rs,S,[]> when 'true' ->
	      %% Line 2012
	      apply 'rkeymergel'/4
		  (I, [[S|[]]|[[Y|[X|R]]|Rs]], [], 'asc')
	  ( <_20,_19,_18,_17,_16,_15,_14,_13,_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_20,_19,_18,_17,_16,_15,_14,_13,_12,_11})
		  -| [{'function_name',{'keysplit_1_1',10}}] )
	    -| ['compiler_generated'] )
	end
'keysplit_2'/8 =
    %% Line 2015
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <I,X,EX,Y,EY,[Z|L],R,Rs> when 'true' ->
	      %% Line 2016
	      case call 'erlang':'element'
		       (I, Z) of
		%% Line 2017
		<EZ>
		    when call 'erlang':'>'
			  (EY,
			   EZ) ->
		    %% Line 2018
		    apply 'keysplit_2'/8
			(I, Y, EY, Z, EZ, L, [X|R], Rs)
		%% Line 2019
		<EZ>
		    when call 'erlang':'>'
			  (EX,
			   EZ) ->
		    %% Line 2020
		    apply 'keysplit_2'/8
			(I, Z, EZ, Y, EY, L, [X|R], Rs)
		%% Line 2021
		<_X_EZ>
		    when call 'erlang':'=:='
			  (R,
			   []) ->
		    %% Line 2022
		    apply 'keysplit_2'/8
			(I, X, EX, Y, EY, L, [Z|[]], Rs)
		%% Line 2023
		<EZ> when 'true' ->
		    %% Line 2024
		    apply 'keysplit_2_1'/10
			(I, X, EX, Y, EY, EZ, R, Rs, Z, L)
	      end
	  %% Line 2026
	  <I,X,_X_EX,Y,_X_EY,[],R,Rs> when 'true' ->
	      %% Line 2027
	      apply 'keymergel'/4
		  (I, [[Y|[X|R]]|Rs], [], 'desc')
	  ( <_16,_15,_14,_13,_12,_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15,_14,_13,_12,_11,_10,_9})
		  -| [{'function_name',{'keysplit_2',8}}] )
	    -| ['compiler_generated'] )
	end
'keysplit_2_1'/10 =
    %% Line 2029
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9> of
	  <I,X,EX,Y,EY,ES,R,Rs,S,[Z|L]> when 'true' ->
	      %% Line 2030
	      case call 'erlang':'element'
		       (I, Z) of
		%% Line 2031
		<EZ>
		    when call 'erlang':'>'
			  (EY,
			   EZ) ->
		    %% Line 2032
		    apply 'keysplit_2_1'/10
			(I, Y, EY, Z, EZ, ES, [X|R], Rs, S, L)
		%% Line 2033
		<EZ>
		    when call 'erlang':'>'
			  (EX,
			   EZ) ->
		    %% Line 2034
		    apply 'keysplit_2_1'/10
			(I, Z, EZ, Y, EY, ES, [X|R], Rs, S, L)
		%% Line 2035
		<EZ>
		    when call 'erlang':'>'
			  (ES,
			   EZ) ->
		    %% Line 2036
		    apply 'keysplit_2'/8
			(I, S, ES, Z, EZ, L, [], [[Y|[X|R]]|Rs])
		%% Line 2037
		<EZ> when 'true' ->
		    %% Line 2038
		    apply 'keysplit_2'/8
			(I, Z, EZ, S, ES, L, [], [[Y|[X|R]]|Rs])
	      end
	  %% Line 2040
	  <I,X,_X_EX,Y,_X_EY,_X_ES,R,Rs,S,[]> when 'true' ->
	      %% Line 2041
	      apply 'keymergel'/4
		  (I, [[S|[]]|[[Y|[X|R]]|Rs]], [], 'desc')
	  ( <_20,_19,_18,_17,_16,_15,_14,_13,_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_20,_19,_18,_17,_16,_15,_14,_13,_12,_11})
		  -| [{'function_name',{'keysplit_2_1',10}}] )
	    -| ['compiler_generated'] )
	end
'keymergel'/4 =
    %% Line 2043
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <I,[T1|[[H2|T2]|[[H3|T3]|L]]],Acc,O>
	      when call 'erlang':'=:='
		    (O,
		     'asc') ->
	      let <_5> =
		  call %% Line 2044
		       'erlang':%% Line 2044
				'element'
		      (%% Line 2044
		       I, %% Line 2044
			  H2)
	      in  let <_4> =
		      call %% Line 2044
			   'erlang':%% Line 2044
				    'element'
			  (%% Line 2044
			   I, %% Line 2044
			      H3)
		  in  let <M> =
			  apply %% Line 2044
				'keymerge3_1'/10
			      (%% Line 2044
			       I, %% Line 2044
				  T1, %% Line 2044
				      [], %% Line 2044
					  O, _5, %% Line 2044
						 H2, %% Line 2044
						     T2, _4, %% Line 2044
							     H3, %% Line 2044
								 T3)
		      in  %% Line 2045
			  apply 'keymergel'/4
			      (I, L, [M|Acc], O)
	  %% Line 2046
	  <I,[[H3|T3]|[[H2|T2]|[T1|L]]],Acc,O>
	      when call 'erlang':'=:='
		    (O,
		     'desc') ->
	      let <_8> =
		  call %% Line 2047
		       'erlang':%% Line 2047
				'element'
		      (%% Line 2047
		       I, %% Line 2047
			  H2)
	      in  let <_7> =
		      call %% Line 2047
			   'erlang':%% Line 2047
				    'element'
			  (%% Line 2047
			   I, %% Line 2047
			      H3)
		  in  let <M> =
			  apply %% Line 2047
				'keymerge3_1'/10
			      (%% Line 2047
			       I, %% Line 2047
				  T1, %% Line 2047
				      [], %% Line 2047
					  O, _8, %% Line 2047
						 H2, %% Line 2047
						     T2, _7, %% Line 2047
							     H3, %% Line 2047
								 T3)
		      in  %% Line 2048
			  apply 'keymergel'/4
			      (I, L, [M|Acc], O)
	  %% Line 2049
	  <I,[T1|[[H2|T2]|L]],Acc,'asc'> when 'true' ->
	      let <_10> =
		  call %% Line 2050
		       'erlang':%% Line 2050
				'element'
		      (%% Line 2050
		       I, %% Line 2050
			  H2)
	      in  let <_11> =
		      apply %% Line 2050
			    'keymerge2_1'/6
			  (%% Line 2050
			   I, %% Line 2050
			      T1, _10, %% Line 2050
				       H2, %% Line 2050
					   T2, %% Line 2050
					       [])
		  in  %% Line 2050
		      apply 'keymergel'/4
			  (I, L, [_11|Acc], 'asc')
	  %% Line 2051
	  <I,[[H2|T2]|[T1|L]],Acc,'desc'> when 'true' ->
	      let <_12> =
		  call %% Line 2052
		       'erlang':%% Line 2052
				'element'
		      (%% Line 2052
		       I, %% Line 2052
			  H2)
	      in  let <_13> =
		      apply %% Line 2052
			    'keymerge2_1'/6
			  (%% Line 2052
			   I, %% Line 2052
			      T1, _12, %% Line 2052
				       H2, %% Line 2052
					   T2, %% Line 2052
					       [])
		  in  %% Line 2052
		      apply 'keymergel'/4
			  (I, L, [_13|Acc], 'desc')
	  %% Line 2053
	  <_X_I,[L|[]],[],_X_O> when 'true' ->
	      %% Line 2054
	      L
	  %% Line 2055
	  <I,[L|[]],Acc,O> when 'true' ->
	      let <_14> =
		  call %% Line 2056
		       'lists':%% Line 2056
			       'reverse'
		      (%% Line 2056
		       L, %% Line 2056
			  [])
	      in  %% Line 2056
		  apply 'rkeymergel'/4
		      (I, [_14|Acc], [], O)
	  %% Line 2057
	  <I,[],Acc,O> when 'true' ->
	      %% Line 2058
	      apply 'rkeymergel'/4
		  (I, Acc, [], O)
	  ( <_18,_17,_16,_15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_18,_17,_16,_15})
		  -| [{'function_name',{'keymergel',4}}] )
	    -| ['compiler_generated'] )
	end
'rkeymergel'/4 =
    %% Line 2060
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <I,[[H3|T3]|[[H2|T2]|[T1|L]]],Acc,O>
	      when call 'erlang':'=:='
		    (O,
		     'asc') ->
	      let <_5> =
		  call %% Line 2061
		       'erlang':%% Line 2061
				'element'
		      (%% Line 2061
		       I, %% Line 2061
			  H2)
	      in  let <_4> =
		      call %% Line 2061
			   'erlang':%% Line 2061
				    'element'
			  (%% Line 2061
			   I, %% Line 2061
			      H3)
		  in  let <M> =
			  apply %% Line 2061
				'rkeymerge3_1'/10
			      (%% Line 2061
			       I, %% Line 2061
				  T1, %% Line 2061
				      [], %% Line 2061
					  O, _5, %% Line 2061
						 H2, %% Line 2061
						     T2, _4, %% Line 2061
							     H3, %% Line 2061
								 T3)
		      in  %% Line 2062
			  apply 'rkeymergel'/4
			      (I, L, [M|Acc], O)
	  %% Line 2063
	  <I,[T1|[[H2|T2]|[[H3|T3]|L]]],Acc,O>
	      when call 'erlang':'=:='
		    (O,
		     'desc') ->
	      let <_8> =
		  call %% Line 2064
		       'erlang':%% Line 2064
				'element'
		      (%% Line 2064
		       I, %% Line 2064
			  H2)
	      in  let <_7> =
		      call %% Line 2064
			   'erlang':%% Line 2064
				    'element'
			  (%% Line 2064
			   I, %% Line 2064
			      H3)
		  in  let <M> =
			  apply %% Line 2064
				'rkeymerge3_1'/10
			      (%% Line 2064
			       I, %% Line 2064
				  T1, %% Line 2064
				      [], %% Line 2064
					  O, _8, %% Line 2064
						 H2, %% Line 2064
						     T2, _7, %% Line 2064
							     H3, %% Line 2064
								 T3)
		      in  %% Line 2065
			  apply 'rkeymergel'/4
			      (I, L, [M|Acc], O)
	  %% Line 2066
	  <I,[[H2|T2]|[T1|L]],Acc,'asc'> when 'true' ->
	      let <_10> =
		  call %% Line 2067
		       'erlang':%% Line 2067
				'element'
		      (%% Line 2067
		       I, %% Line 2067
			  H2)
	      in  let <_11> =
		      apply %% Line 2067
			    'rkeymerge2_1'/6
			  (%% Line 2067
			   I, %% Line 2067
			      T1, _10, %% Line 2067
				       H2, %% Line 2067
					   T2, %% Line 2067
					       [])
		  in  %% Line 2067
		      apply 'rkeymergel'/4
			  (I, L, [_11|Acc], 'asc')
	  %% Line 2068
	  <I,[T1|[[H2|T2]|L]],Acc,'desc'> when 'true' ->
	      let <_12> =
		  call %% Line 2069
		       'erlang':%% Line 2069
				'element'
		      (%% Line 2069
		       I, %% Line 2069
			  H2)
	      in  let <_13> =
		      apply %% Line 2069
			    'rkeymerge2_1'/6
			  (%% Line 2069
			   I, %% Line 2069
			      T1, _12, %% Line 2069
				       H2, %% Line 2069
					   T2, %% Line 2069
					       [])
		  in  %% Line 2069
		      apply 'rkeymergel'/4
			  (I, L, [_13|Acc], 'desc')
	  %% Line 2070
	  <I,[L|[]],Acc,O> when 'true' ->
	      let <_14> =
		  call %% Line 2071
		       'lists':%% Line 2071
			       'reverse'
		      (%% Line 2071
		       L, %% Line 2071
			  [])
	      in  %% Line 2071
		  apply 'keymergel'/4
		      (I, [_14|Acc], [], O)
	  %% Line 2072
	  <I,[],Acc,O> when 'true' ->
	      %% Line 2073
	      apply 'keymergel'/4
		  (I, Acc, [], O)
	  ( <_18,_17,_16,_15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_18,_17,_16,_15})
		  -| [{'function_name',{'rkeymergel',4}}] )
	    -| ['compiler_generated'] )
	end
'keymerge3_1'/10 =
    %% Line 2078
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9> of
	  <I,[H1|T1],M,D,E2,H2,T2,E3,H3,T3> when 'true' ->
	      %% Line 2079
	      case call 'erlang':'element'
		       (I, H1) of
		%% Line 2080
		<E1>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2104
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D> of
			( <_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_35,
				       _41)
				  -| ['compiler_generated'] ) ->
			      %% Line 2105
			      ( apply 'keymerge3_1'/10
				    (_34, _37, ( [_36|_44]
						 -| ['compiler_generated'] ), _45, _38, _39, _40, _41, _42, _43)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2106
			( <_46,_47,_48,_49,_50,_51,_52,_X_E3,_53,_54,_55,_X_D> when ( 'true'
										      -| ['compiler_generated'] ) ->
			      %% Line 2107
			      ( apply 'keymerge3_12_3'/9
				    (_46, _47, _48, _49, _50, _51, _52, _54, ( [_53|_55]
									       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2082
		<E1> when 'true' ->
		    %% Line 2121
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,T2> of
			( <_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_70,
				       _73)
				  -| ['compiler_generated'] ) ->
			      %% Line 2122
			      ( apply 'keymerge3_2'/10
				    (_66, _67, _68, _69, _72, ( [_71|_76]
								-| ['compiler_generated'] ), _77, _73, _74, _75)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2123
			( <_78,_79,_80,_81,_82,_83,_84,_X_E3,_85,_86,_87,_X_D> when ( 'true'
										      -| ['compiler_generated'] ) ->
			      %% Line 2124
			      ( apply 'keymerge3_21_3'/9
				    (_78, _79, _80, _81, _82, _83, _84, _86, ( [_85|_87]
									       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 2085
	  <I,[],M,_X_D,E2,H2,T2,E3,H3,T3>
	      when call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2086
	      apply 'keymerge2_1'/6
		  (I, T2, E3, H3, T3, [H2|M])
	  %% Line 2087
	  <I,[],M,_X_D,E2,H2,T2,_X_E3,H3,T3> when 'true' ->
	      %% Line 2088
	      apply 'keymerge2_2'/7
		  (I, T2, E2, H3, T3, M, H2)
	  ( <_20,_19,_18,_17,_16,_15,_14,_13,_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_20,_19,_18,_17,_16,_15,_14,_13,_12,_11})
		  -| [{'function_name',{'keymerge3_1',10}}] )
	    -| ['compiler_generated'] )
	end
'keymerge3_2'/10 =
    %% Line 2091
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9> of
	  <I,E1,H1,T1,[H2|T2],M,D,E3,H3,T3> when 'true' ->
	      %% Line 2092
	      case call 'erlang':'element'
		       (I, H2) of
		%% Line 2093
		<E2>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2104
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,T1> of
			( <_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_35,
				       _41)
				  -| ['compiler_generated'] ) ->
			      %% Line 2105
			      ( apply 'keymerge3_1'/10
				    (_34, _37, ( [_36|_44]
						 -| ['compiler_generated'] ), _45, _38, _39, _40, _41, _42, _43)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2106
			( <_46,_47,_48,_49,_50,_51,_52,_X_E3,_53,_54,_55,_X_D> when ( 'true'
										      -| ['compiler_generated'] ) ->
			      %% Line 2107
			      ( apply 'keymerge3_12_3'/9
				    (_46, _47, _48, _49, _50, _51, _52, _54, ( [_53|_55]
									       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2095
		<E2> when 'true' ->
		    %% Line 2121
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D> of
			( <_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_70,
				       _73)
				  -| ['compiler_generated'] ) ->
			      %% Line 2122
			      ( apply 'keymerge3_2'/10
				    (_66, _67, _68, _69, _72, ( [_71|_76]
								-| ['compiler_generated'] ), _77, _73, _74, _75)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2123
			( <_78,_79,_80,_81,_82,_83,_84,_X_E3,_85,_86,_87,_X_D> when ( 'true'
										      -| ['compiler_generated'] ) ->
			      %% Line 2124
			      ( apply 'keymerge3_21_3'/9
				    (_78, _79, _80, _81, _82, _83, _84, _86, ( [_85|_87]
									       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 2098
	  <I,E1,H1,T1,[],M,_X_D,E3,H3,T3>
	      when call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2099
	      apply 'keymerge2_1'/6
		  (I, T1, E3, H3, T3, [H1|M])
	  %% Line 2100
	  <I,E1,H1,T1,[],M,_X_D,_X_E3,H3,T3> when 'true' ->
	      %% Line 2101
	      apply 'keymerge2_2'/7
		  (I, T1, E1, H3, T3, M, H1)
	  ( <_20,_19,_18,_17,_16,_15,_14,_13,_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_20,_19,_18,_17,_16,_15,_14,_13,_12,_11})
		  -| [{'function_name',{'keymerge3_2',10}}] )
	    -| ['compiler_generated'] )
	end
'keymerge3_12'/12 =
    %% Line 2104
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11> of
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D>
	      when call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2105
	      apply 'keymerge3_1'/10
		  (I, T1, [H1|M], D, E2, H2, T2, E3, H3, T3)
	  %% Line 2106
	  <I,E1,H1,T1,E2,H2,T2,_X_E3,H3,T3,M,_X_D> when 'true' ->
	      %% Line 2107
	      apply 'keymerge3_12_3'/9
		  (I, E1, H1, T1, E2, H2, T2, T3, [H3|M])
	end
'keymerge3_12_3'/9 =
    %% Line 2110
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <I,E1,H1,T1,E2,H2,T2,[H3|T3],M> when 'true' ->
	      %% Line 2111
	      case call 'erlang':'element'
		       (I, H3) of
		%% Line 2112
		<E3>
		    when call 'erlang':'=<'
			  (E1,
			   E3) ->
		    %% Line 2113
		    apply 'keymerge3_1'/10
			(I, T1, [H1|M], T1, E2, H2, T2, E3, H3, T3)
		%% Line 2114
		<_X_E3> when 'true' ->
		    %% Line 2115
		    apply 'keymerge3_12_3'/9
			(I, E1, H1, T1, E2, H2, T2, T3, [H3|M])
	      end
	  %% Line 2117
	  <I,_X_E1,H1,T1,E2,H2,T2,[],M> when 'true' ->
	      %% Line 2118
	      apply 'keymerge2_1'/6
		  (I, T1, E2, H2, T2, [H1|M])
	  ( <_18,_17,_16,_15,_14,_13,_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_18,_17,_16,_15,_14,_13,_12,_11,_10})
		  -| [{'function_name',{'keymerge3_12_3',9}}] )
	    -| ['compiler_generated'] )
	end
'keymerge3_21'/12 =
    %% Line 2121
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11> of
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D>
	      when call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2122
	      apply 'keymerge3_2'/10
		  (I, E1, H1, T1, T2, [H2|M], D, E3, H3, T3)
	  %% Line 2123
	  <I,E1,H1,T1,E2,H2,T2,_X_E3,H3,T3,M,_X_D> when 'true' ->
	      %% Line 2124
	      apply 'keymerge3_21_3'/9
		  (I, E1, H1, T1, E2, H2, T2, T3, [H3|M])
	end
'keymerge3_21_3'/9 =
    %% Line 2127
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <I,E1,H1,T1,E2,H2,T2,[H3|T3],M> when 'true' ->
	      %% Line 2128
	      case call 'erlang':'element'
		       (I, H3) of
		%% Line 2129
		<E3>
		    when call 'erlang':'=<'
			  (E2,
			   E3) ->
		    %% Line 2130
		    apply 'keymerge3_2'/10
			(I, E1, H1, T1, T2, [H2|M], T2, E3, H3, T3)
		%% Line 2131
		<_X_E3> when 'true' ->
		    %% Line 2132
		    apply 'keymerge3_21_3'/9
			(I, E1, H1, T1, E2, H2, T2, T3, [H3|M])
	      end
	  %% Line 2134
	  <I,E1,H1,T1,_X_E2,H2,T2,[],M> when 'true' ->
	      %% Line 2135
	      apply 'keymerge2_2'/7
		  (I, T1, E1, H2, T2, M, H1)
	  ( <_18,_17,_16,_15,_14,_13,_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_18,_17,_16,_15,_14,_13,_12,_11,_10})
		  -| [{'function_name',{'keymerge3_21_3',9}}] )
	    -| ['compiler_generated'] )
	end
'rkeymerge3_1'/10 =
    %% Line 2138
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9> of
	  <I,[H1|T1],M,D,E2,H2,T2,E3,H3,T3> when 'true' ->
	      %% Line 2139
	      case call 'erlang':'element'
		       (I, H1) of
		%% Line 2140
		<E1>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2164
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,T2> of
			( <_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_X_D>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_38,
				       _41)
				  -| ['compiler_generated'] ) ->
			      %% Line 2165
			      ( apply 'rkeymerge3_12_3'/9
				    (_34, _35, _36, _37, _38, _39, _40, _43, ( [_42|_44]
									       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2166
			( <_45,_46,_47,_48,_X_E2,_49,_50,_51,_52,_53,_54,_55> when ( 'true'
										     -| ['compiler_generated'] ) ->
			      %% Line 2167
			      ( apply 'rkeymerge3_2'/10
				    (_45, _46, _47, _48, _50, ( [_49|_54]
								-| ['compiler_generated'] ), _55, _51, _52, _53)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2142
		<E1> when 'true' ->
		    %% Line 2181
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D> of
			( <_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_X_D>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_67,
				       _73)
				  -| ['compiler_generated'] ) ->
			      %% Line 2182
			      ( apply 'rkeymerge3_21_3'/9
				    (_66, _67, _68, _69, _70, _71, _72, _75, ( [_74|_76]
									       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2183
			( <_77,_X_E1,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87> when ( 'true'
										     -| ['compiler_generated'] ) ->
			      %% Line 2184
			      ( apply 'rkeymerge3_1'/10
				    (_77, _79, ( [_78|_86]
						 -| ['compiler_generated'] ), _87, _80, _81, _82, _83, _84, _85)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 2145
	  <I,[],M,_X_D,E2,H2,T2,E3,H3,T3>
	      when call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2146
	      apply 'rkeymerge2_2'/7
		  (I, E2, T2, H3, T3, M, H2)
	  %% Line 2147
	  <I,[],M,_X_D,_X_E2,H2,T2,E3,H3,T3> when 'true' ->
	      %% Line 2148
	      apply 'rkeymerge2_1'/6
		  (I, T2, E3, H3, T3, [H2|M])
	  ( <_20,_19,_18,_17,_16,_15,_14,_13,_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_20,_19,_18,_17,_16,_15,_14,_13,_12,_11})
		  -| [{'function_name',{'rkeymerge3_1',10}}] )
	    -| ['compiler_generated'] )
	end
'rkeymerge3_2'/10 =
    %% Line 2151
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9> of
	  <I,E1,H1,T1,[H2|T2],M,D,E3,H3,T3> when 'true' ->
	      %% Line 2152
	      case call 'erlang':'element'
		       (I, H2) of
		%% Line 2153
		<E2>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2164
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D> of
			( <_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_X_D>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_38,
				       _41)
				  -| ['compiler_generated'] ) ->
			      %% Line 2165
			      ( apply 'rkeymerge3_12_3'/9
				    (_34, _35, _36, _37, _38, _39, _40, _43, ( [_42|_44]
									       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2166
			( <_45,_46,_47,_48,_X_E2,_49,_50,_51,_52,_53,_54,_55> when ( 'true'
										     -| ['compiler_generated'] ) ->
			      %% Line 2167
			      ( apply 'rkeymerge3_2'/10
				    (_45, _46, _47, _48, _50, ( [_49|_54]
								-| ['compiler_generated'] ), _55, _51, _52, _53)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2155
		<E2> when 'true' ->
		    %% Line 2181
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,T1> of
			( <_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_X_D>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_67,
				       _73)
				  -| ['compiler_generated'] ) ->
			      %% Line 2182
			      ( apply 'rkeymerge3_21_3'/9
				    (_66, _67, _68, _69, _70, _71, _72, _75, ( [_74|_76]
									       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2183
			( <_77,_X_E1,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87> when ( 'true'
										     -| ['compiler_generated'] ) ->
			      %% Line 2184
			      ( apply 'rkeymerge3_1'/10
				    (_77, _79, ( [_78|_86]
						 -| ['compiler_generated'] ), _87, _80, _81, _82, _83, _84, _85)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 2158
	  <I,E1,H1,T1,[],M,_X_D,E3,H3,T3>
	      when call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2159
	      apply 'rkeymerge2_2'/7
		  (I, E1, T1, H3, T3, M, H1)
	  %% Line 2160
	  <I,_X_E1,H1,T1,[],M,_X_D,E3,H3,T3> when 'true' ->
	      %% Line 2161
	      apply 'rkeymerge2_1'/6
		  (I, T1, E3, H3, T3, [H1|M])
	  ( <_20,_19,_18,_17,_16,_15,_14,_13,_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_20,_19,_18,_17,_16,_15,_14,_13,_12,_11})
		  -| [{'function_name',{'rkeymerge3_2',10}}] )
	    -| ['compiler_generated'] )
	end
'rkeymerge3_12'/12 =
    %% Line 2164
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11> of
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,_X_D>
	      when call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2165
	      apply 'rkeymerge3_12_3'/9
		  (I, E1, H1, T1, E2, H2, T2, T3, [H3|M])
	  %% Line 2166
	  <I,E1,H1,T1,_X_E2,H2,T2,E3,H3,T3,M,D> when 'true' ->
	      %% Line 2167
	      apply 'rkeymerge3_2'/10
		  (I, E1, H1, T1, T2, [H2|M], D, E3, H3, T3)
	end
'rkeymerge3_12_3'/9 =
    %% Line 2170
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <I,E1,H1,T1,E2,H2,T2,[H3|T3],M> when 'true' ->
	      %% Line 2171
	      case call 'erlang':'element'
		       (I, H3) of
		%% Line 2172
		<E3>
		    when call 'erlang':'=<'
			  (E2,
			   E3) ->
		    %% Line 2173
		    apply 'rkeymerge3_12_3'/9
			(I, E1, H1, T1, E2, H2, T2, T3, [H3|M])
		%% Line 2174
		<E3> when 'true' ->
		    %% Line 2175
		    apply 'rkeymerge3_2'/10
			(I, E1, H1, T1, T2, [H2|M], T2, E3, H3, T3)
	      end
	  %% Line 2177
	  <I,E1,H1,T1,_X_E2,H2,T2,[],M> when 'true' ->
	      %% Line 2178
	      apply 'rkeymerge2_2'/7
		  (I, E1, T1, H2, T2, M, H1)
	  ( <_18,_17,_16,_15,_14,_13,_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_18,_17,_16,_15,_14,_13,_12,_11,_10})
		  -| [{'function_name',{'rkeymerge3_12_3',9}}] )
	    -| ['compiler_generated'] )
	end
'rkeymerge3_21'/12 =
    %% Line 2181
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11> of
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,_X_D>
	      when call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2182
	      apply 'rkeymerge3_21_3'/9
		  (I, E1, H1, T1, E2, H2, T2, T3, [H3|M])
	  %% Line 2183
	  <I,_X_E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D> when 'true' ->
	      %% Line 2184
	      apply 'rkeymerge3_1'/10
		  (I, T1, [H1|M], D, E2, H2, T2, E3, H3, T3)
	end
'rkeymerge3_21_3'/9 =
    %% Line 2187
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <I,E1,H1,T1,E2,H2,T2,[H3|T3],M> when 'true' ->
	      %% Line 2188
	      case call 'erlang':'element'
		       (I, H3) of
		%% Line 2189
		<E3>
		    when call 'erlang':'=<'
			  (E1,
			   E3) ->
		    %% Line 2190
		    apply 'rkeymerge3_21_3'/9
			(I, E1, H1, T1, E2, H2, T2, T3, [H3|M])
		%% Line 2191
		<E3> when 'true' ->
		    %% Line 2192
		    apply 'rkeymerge3_1'/10
			(I, T1, [H1|M], T1, E2, H2, T2, E3, H3, T3)
	      end
	  %% Line 2194
	  <I,_X_E1,H1,T1,E2,H2,T2,[],M> when 'true' ->
	      %% Line 2195
	      apply 'rkeymerge2_1'/6
		  (I, T1, E2, H2, T2, [H1|M])
	  ( <_18,_17,_16,_15,_14,_13,_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_18,_17,_16,_15,_14,_13,_12,_11,_10})
		  -| [{'function_name',{'rkeymerge3_21_3',9}}] )
	    -| ['compiler_generated'] )
	end
'keymerge2_1'/6 =
    %% Line 2200
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <I,[H1|T1],E2,H2,T2,M> when 'true' ->
	      %% Line 2201
	      case call 'erlang':'element'
		       (I, H1) of
		%% Line 2202
		<E1>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2203
		    apply 'keymerge2_1'/6
			(I, T1, E2, H2, T2, [H1|M])
		%% Line 2204
		<E1> when 'true' ->
		    %% Line 2205
		    apply 'keymerge2_2'/7
			(I, T1, E1, H2, T2, M, H1)
	      end
	  %% Line 2207
	  <_X_I,[],_X_E2,H2,T2,M> when 'true' ->
	      %% Line 2208
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_12,_11,_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11,_10,_9,_8,_7})
		  -| [{'function_name',{'keymerge2_1',6}}] )
	    -| ['compiler_generated'] )
	end
'keymerge2_2'/7 =
    %% Line 2210
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <I,T1,E1,HdM,[H2|T2],M,H1> when 'true' ->
	      %% Line 2211
	      case call 'erlang':'element'
		       (I, H2) of
		%% Line 2212
		<E2>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2213
		    apply 'keymerge2_1'/6
			(I, T1, E2, H2, T2, [H1|[HdM|M]])
		%% Line 2214
		<_X_E2> when 'true' ->
		    %% Line 2215
		    apply 'keymerge2_2'/7
			(I, T1, E1, H2, T2, [HdM|M], H1)
	      end
	  %% Line 2217
	  <_X_I,T1,_X_E1,HdM,[],M,H1> when 'true' ->
	      %% Line 2218
	      call 'lists':'reverse'
		  (T1, [H1|[HdM|M]])
	  ( <_14,_13,_12,_11,_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13,_12,_11,_10,_9,_8})
		  -| [{'function_name',{'keymerge2_2',7}}] )
	    -| ['compiler_generated'] )
	end
'rkeymerge2_1'/6 =
    %% Line 2222
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <I,[H1|T1],E2,H2,T2,M> when 'true' ->
	      %% Line 2223
	      case call 'erlang':'element'
		       (I, H1) of
		%% Line 2224
		<E1>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2225
		    apply 'rkeymerge2_2'/7
			(I, E1, T1, H2, T2, M, H1)
		%% Line 2226
		<_X_E1> when 'true' ->
		    %% Line 2227
		    apply 'rkeymerge2_1'/6
			(I, T1, E2, H2, T2, [H1|M])
	      end
	  %% Line 2229
	  <_X_I,[],_X_E2,H2,T2,M> when 'true' ->
	      %% Line 2230
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_12,_11,_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11,_10,_9,_8,_7})
		  -| [{'function_name',{'rkeymerge2_1',6}}] )
	    -| ['compiler_generated'] )
	end
'rkeymerge2_2'/7 =
    %% Line 2232
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <I,E1,T1,HdM,[H2|T2],M,H1> when 'true' ->
	      %% Line 2233
	      case call 'erlang':'element'
		       (I, H2) of
		%% Line 2234
		<E2>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2235
		    apply 'rkeymerge2_2'/7
			(I, E1, T1, H2, T2, [HdM|M], H1)
		%% Line 2236
		<E2> when 'true' ->
		    %% Line 2237
		    apply 'rkeymerge2_1'/6
			(I, T1, E2, H2, T2, [H1|[HdM|M]])
	      end
	  %% Line 2239
	  <_X_I,_X_E1,T1,HdM,[],M,H1> when 'true' ->
	      %% Line 2240
	      call 'lists':'reverse'
		  (T1, [H1|[HdM|M]])
	  ( <_14,_13,_12,_11,_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13,_12,_11,_10,_9,_8})
		  -| [{'function_name',{'rkeymerge2_2',7}}] )
	    -| ['compiler_generated'] )
	end
'ukeysplit_1'/8 =
    %% Line 2245
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <I,X,EX,Y,EY,[Z|L],R,Rs> when 'true' ->
	      %% Line 2246
	      case call 'erlang':'element'
		       (I, Z) of
		%% Line 2247
		<EZ>
		    when call 'erlang':'=='
			  (EY,
			   EZ) ->
		    %% Line 2248
		    apply 'ukeysplit_1'/8
			(I, X, EX, Y, EY, L, R, Rs)
		%% Line 2249
		<EZ>
		    when call 'erlang':'<'
			  (EY,
			   EZ) ->
		    %% Line 2250
		    apply 'ukeysplit_1'/8
			(I, Y, EY, Z, EZ, L, [X|R], Rs)
		%% Line 2251
		<EZ>
		    when call 'erlang':'=='
			  (EX,
			   EZ) ->
		    %% Line 2252
		    apply 'ukeysplit_1'/8
			(I, X, EX, Y, EY, L, R, Rs)
		%% Line 2253
		<EZ>
		    when call 'erlang':'<'
			  (EX,
			   EZ) ->
		    %% Line 2254
		    apply 'ukeysplit_1'/8
			(I, Z, EZ, Y, EY, L, [X|R], Rs)
		%% Line 2255
		<_X_EZ>
		    when call 'erlang':'=:='
			  (R,
			   []) ->
		    %% Line 2256
		    apply 'ukeysplit_1'/8
			(I, X, EX, Y, EY, L, [Z|[]], Rs)
		%% Line 2257
		<EZ> when 'true' ->
		    %% Line 2258
		    apply 'ukeysplit_1_1'/10
			(I, X, EX, Y, EY, L, R, Rs, Z, EZ)
	      end
	  %% Line 2260
	  <I,X,_X_EX,Y,_X_EY,[],R,Rs> when 'true' ->
	      %% Line 2261
	      apply 'rukeymergel'/3
		  (I, [[Y|[X|R]]|Rs], [])
	  ( <_16,_15,_14,_13,_12,_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15,_14,_13,_12,_11,_10,_9})
		  -| [{'function_name',{'ukeysplit_1',8}}] )
	    -| ['compiler_generated'] )
	end
'ukeysplit_1_1'/10 =
    %% Line 2263
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9> of
	  <I,X,EX,Y,EY,[Z|L],R,Rs,S,ES> when 'true' ->
	      %% Line 2264
	      case call 'erlang':'element'
		       (I, Z) of
		%% Line 2265
		<EZ>
		    when call 'erlang':'=='
			  (EY,
			   EZ) ->
		    %% Line 2266
		    apply 'ukeysplit_1_1'/10
			(I, X, EX, Y, EY, L, R, Rs, S, ES)
		%% Line 2267
		<EZ>
		    when call 'erlang':'<'
			  (EY,
			   EZ) ->
		    %% Line 2268
		    apply 'ukeysplit_1_1'/10
			(I, Y, EY, Z, EZ, L, [X|R], Rs, S, ES)
		%% Line 2269
		<EZ>
		    when call 'erlang':'=='
			  (EX,
			   EZ) ->
		    %% Line 2270
		    apply 'ukeysplit_1_1'/10
			(I, X, EX, Y, EY, L, R, Rs, S, ES)
		%% Line 2271
		<EZ>
		    when call 'erlang':'<'
			  (EX,
			   EZ) ->
		    %% Line 2272
		    apply 'ukeysplit_1_1'/10
			(I, Z, EZ, Y, EY, L, [X|R], Rs, S, ES)
		%% Line 2273
		<EZ>
		    when call 'erlang':'=='
			  (ES,
			   EZ) ->
		    %% Line 2274
		    apply 'ukeysplit_1_1'/10
			(I, X, EX, Y, EY, L, R, Rs, S, ES)
		%% Line 2275
		<EZ>
		    when call 'erlang':'<'
			  (ES,
			   EZ) ->
		    %% Line 2276
		    apply 'ukeysplit_1'/8
			(I, S, ES, Z, EZ, L, [], [[Y|[X|R]]|Rs])
		%% Line 2277
		<EZ> when 'true' ->
		    %% Line 2278
		    apply 'ukeysplit_1'/8
			(I, Z, EZ, S, ES, L, [], [[Y|[X|R]]|Rs])
	      end
	  %% Line 2280
	  <I,X,_X_EX,Y,_X_EY,[],R,Rs,S,_X_ES> when 'true' ->
	      %% Line 2281
	      apply 'rukeymergel'/3
		  (I, [[S|[]]|[[Y|[X|R]]|Rs]], [])
	  ( <_20,_19,_18,_17,_16,_15,_14,_13,_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_20,_19,_18,_17,_16,_15,_14,_13,_12,_11})
		  -| [{'function_name',{'ukeysplit_1_1',10}}] )
	    -| ['compiler_generated'] )
	end
'ukeysplit_2'/5 =
    %% Line 2284
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <I,Y,EY,[Z|L],R> when 'true' ->
	      %% Line 2285
	      case call 'erlang':'element'
		       (I, Z) of
		%% Line 2286
		<EZ>
		    when call 'erlang':'=='
			  (EY,
			   EZ) ->
		    %% Line 2287
		    apply 'ukeysplit_2'/5
			(I, Y, EY, L, R)
		%% Line 2288
		<EZ>
		    when call 'erlang':'<'
			  (EY,
			   EZ) ->
		    let <_5> =
			call %% Line 2289
			     'lists':%% Line 2289
				     'reverse'
			    (%% Line 2289
			     R, %% Line 2289
				[])
		    in  %% Line 2289
			apply 'ukeysplit_1'/8
			    (I, Y, EY, Z, EZ, L, [], [_5|[]])
		%% Line 2290
		<EZ> when 'true' ->
		    %% Line 2291
		    apply 'ukeysplit_2'/5
			(I, Z, EZ, L, [Y|R])
	      end
	  %% Line 2293
	  <_X_I,Y,_X_EY,[],R> when 'true' ->
	      %% Line 2294
	      [Y|R]
	  ( <_11,_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8,_7})
		  -| [{'function_name',{'ukeysplit_2',5}}] )
	    -| ['compiler_generated'] )
	end
'ukeymergel'/3 =
    %% Line 2298
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <I,[T1|[[H2|T2]|[[H3|T3]|L]]],Acc> when 'true' ->
	      let <_4> =
		  call %% Line 2302
		       'erlang':%% Line 2302
				'element'
		      (%% Line 2302
		       I, %% Line 2302
			  H2)
	      in  let <_3> =
		      call %% Line 2303
			   'erlang':%% Line 2303
				    'element'
			  (%% Line 2303
			   I, %% Line 2303
			      H3)
		  in  let <M> =
			  apply %% Line 2302
				'ukeymerge3_1'/11
			      (%% Line 2302
			       I, %% Line 2302
				  T1, %% Line 2302
				      Acc, %% Line 2302
					   [H2|H3], _4, %% Line 2302
							H2, %% Line 2302
							    T2, %% Line 2302
								[], _3, %% Line 2303
									H3, %% Line 2303
									    T3)
		      in  %% Line 2304
			  apply 'ukeymergel'/3
			      (I, L, [M|Acc])
	  %% Line 2305
	  <I,[[H1|T1]|[T2|L]],Acc> when 'true' ->
	      let <_6> =
		  call %% Line 2306
		       'erlang':%% Line 2306
				'element'
		      (%% Line 2306
		       I, %% Line 2306
			  H1)
	      in  let <_7> =
		      apply %% Line 2306
			    'ukeymerge2_2'/6
			  (%% Line 2306
			   I, %% Line 2306
			      T1, _6, %% Line 2306
				      H1, %% Line 2306
					  T2, %% Line 2306
					      [])
		  in  %% Line 2306
		      apply 'ukeymergel'/3
			  (I, L, [_7|Acc])
	  %% Line 2307
	  <_X_I,[L|[]],[]> when 'true' ->
	      %% Line 2308
	      L
	  %% Line 2309
	  <I,[L|[]],Acc> when 'true' ->
	      let <_8> =
		  call %% Line 2310
		       'lists':%% Line 2310
			       'reverse'
		      (%% Line 2310
		       L, %% Line 2310
			  [])
	      in  %% Line 2310
		  apply 'rukeymergel'/3
		      (I, [_8|Acc], [])
	  %% Line 2311
	  <I,[],Acc> when 'true' ->
	      %% Line 2312
	      apply 'rukeymergel'/3
		  (I, Acc, [])
	  ( <_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9})
		  -| [{'function_name',{'ukeymergel',3}}] )
	    -| ['compiler_generated'] )
	end
'rukeymergel'/3 =
    %% Line 2314
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <I,[[H3|T3]|[[H2|T2]|[T1|L]]],Acc> when 'true' ->
	      let <_4> =
		  call %% Line 2315
		       'erlang':%% Line 2315
				'element'
		      (%% Line 2315
		       I, %% Line 2315
			  H2)
	      in  let <_3> =
		      call %% Line 2316
			   'erlang':%% Line 2316
				    'element'
			  (%% Line 2316
			   I, %% Line 2316
			      H3)
		  in  let <M> =
			  apply %% Line 2315
				'rukeymerge3_1'/11
			      (%% Line 2315
			       I, %% Line 2315
				  T1, %% Line 2315
				      Acc, %% Line 2315
					   [], _4, %% Line 2315
						   H2, %% Line 2315
						       T2, %% Line 2315
							   [], _3, %% Line 2316
								   H3, %% Line 2316
								       T3)
		      in  %% Line 2317
			  apply 'rukeymergel'/3
			      (I, L, [M|Acc])
	  %% Line 2318
	  <I,[[H2|T2]|[T1|L]],Acc> when 'true' ->
	      let <_6> =
		  call %% Line 2319
		       'erlang':%% Line 2319
				'element'
		      (%% Line 2319
		       I, %% Line 2319
			  H2)
	      in  let <_7> =
		      apply %% Line 2319
			    'rukeymerge2_1'/6
			  (%% Line 2319
			   I, %% Line 2319
			      T1, _6, %% Line 2319
				      T2, %% Line 2319
					  [], %% Line 2319
					      H2)
		  in  %% Line 2319
		      apply 'rukeymergel'/3
			  (I, L, [_7|Acc])
	  %% Line 2320
	  <I,[L|[]],Acc> when 'true' ->
	      let <_8> =
		  call %% Line 2321
		       'lists':%% Line 2321
			       'reverse'
		      (%% Line 2321
		       L, %% Line 2321
			  [])
	      in  %% Line 2321
		  apply 'ukeymergel'/3
		      (I, [_8|Acc], [])
	  %% Line 2322
	  <I,[],Acc> when 'true' ->
	      %% Line 2323
	      apply 'ukeymergel'/3
		  (I, Acc, [])
	  ( <_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9})
		  -| [{'function_name',{'rukeymergel',3}}] )
	    -| ['compiler_generated'] )
	end
'ukeymerge3_1'/11 =
    %% Line 2328
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10> of
	  <I,[H1|T1],D,HdM,E2,H2,T2,M,E3,H3,T3> when 'true' ->
	      %% Line 2329
	      case call 'erlang':'element'
		       (I, H1) of
		%% Line 2330
		<E1>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2362
		    ( case <I,E1,T1,H1,E2,H2,T2,E3,H3,T3,M,HdM,D> of
			( <_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_X_HdM,_48>
			      when %% Line 2363
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_38,
				       _44)
				  -| ['compiler_generated'] ) ->
			      %% Line 2364
			      ( apply 'ukeymerge3_1'/11
				    (_37, _39, _48, _38, _41, _42, _43, ( [_40|_47]
									  -| ['compiler_generated'] ), _44, _45, _46)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2365
			( <_49,_50,_51,_52,_53,_54,_55,_56,_X_H3,_57,_58,_59,_X_D>
			      when %% Line 2366
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=='
								       -| ['compiler_generated'] )
				      (_56,
				       _59)
				  -| ['compiler_generated'] ) ->
			      %% Line 2367
			      ( apply 'ukeymerge3_12_3'/9
				    (_49, _50, _51, _52, _53, _54, _55, _58, _57)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2368
			( <_60,_61,_62,_63,_64,_65,_66,_X_E3,_67,_68,_69,_X_HdM,_X_D> when ( 'true'
											     -| ['compiler_generated'] ) ->
			      %% Line 2369
			      ( apply 'ukeymerge3_12_3'/9
				    (_60, _61, _62, _63, _64, _65, _66, ( [_67|_69]
									  -| ['compiler_generated'] ), _68)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2332
		<E1>
		    when call 'erlang':'=='
			  (E2,
			   HdM) ->
		    %% Line 2333
		    apply 'ukeymerge3_2'/11
			(I, E1, T1, H1, T2, HdM, T2, M, E3, H3, T3)
		%% Line 2334
		<E1> when 'true' ->
		    %% Line 2383
		    ( case <I,E1,T1,H1,E2,H2,T2,E3,H3,T3,M,HdM,T2> of
			( <_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_X_HdM,_92>
			      when %% Line 2384
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_85,
				       _88)
				  -| ['compiler_generated'] ) ->
			      %% Line 2385
			      ( apply 'ukeymerge3_2'/11
				    (_81, _82, _83, _84, _87, _85, _92, ( [_86|_91]
									  -| ['compiler_generated'] ), _88, _89, _90)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2386
			( <_93,_94,_95,_96,_97,_98,_99,_100,_X_H3,_101,_102,_103,_X_D>
			      when %% Line 2387
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=='
								       -| ['compiler_generated'] )
				      (_100,
				       _103)
				  -| ['compiler_generated'] ) ->
			      %% Line 2388
			      ( apply 'ukeymerge3_21_3'/9
				    (_93, _94, _95, _96, _97, _98, _99, _102, _101)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2389
			( <_104,_105,_106,_107,_108,_109,_110,_X_E3,_111,_112,_113,_X_HdM,_X_D> when ( 'true'
												       -| ['compiler_generated'] ) ->
			      %% Line 2390
			      ( apply 'ukeymerge3_21_3'/9
				    (_104, _105, _106, _107, _108, _109, _110, ( [_111|_113]
										 -| ['compiler_generated'] ), _112)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 2337
	  <I,[],_X_D,HdM,E2,_X_H2,T2,M,E3,H3,T3>
	      when call 'erlang':'=='
		    (E2,
		     HdM) ->
	      %% Line 2338
	      apply 'ukeymerge2_1'/7
		  (I, T2, E3, HdM, T3, M, H3)
	  %% Line 2339
	  <I,[],_X_D,_X_HdM,E2,H2,T2,M,E3,H3,T3>
	      when call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2340
	      apply 'ukeymerge2_1'/7
		  (I, T2, E3, E2, T3, [H2|M], H3)
	  %% Line 2341
	  <I,[],_X_D,HdM,E2,H2,T2,M,E3,_X_H3,T3>
	      when call 'erlang':'=='
		    (E3,
		     HdM) ->
	      %% Line 2342
	      apply 'ukeymerge2_2'/6
		  (I, T2, E2, H2, T3, M)
	  %% Line 2343
	  <I,[],_X_D,_X_HdM,E2,H2,T2,M,_X_E3,H3,T3> when 'true' ->
	      %% Line 2344
	      apply 'ukeymerge2_2'/6
		  (I, T2, E2, H2, T3, [H3|M])
	  ( <_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12})
		  -| [{'function_name',{'ukeymerge3_1',11}}] )
	    -| ['compiler_generated'] )
	end
'ukeymerge3_2'/11 =
    %% Line 2347
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10> of
	  <I,E1,T1,H1,[H2|T2],HdM,D,M,E3,H3,T3> when 'true' ->
	      %% Line 2348
	      case call 'erlang':'element'
		       (I, H2) of
		%% Line 2349
		<E2>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2362
		    ( case <I,E1,T1,H1,E2,H2,T2,E3,H3,T3,M,HdM,T1> of
			( <_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_X_HdM,_48>
			      when %% Line 2363
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_38,
				       _44)
				  -| ['compiler_generated'] ) ->
			      %% Line 2364
			      ( apply 'ukeymerge3_1'/11
				    (_37, _39, _48, _38, _41, _42, _43, ( [_40|_47]
									  -| ['compiler_generated'] ), _44, _45, _46)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2365
			( <_49,_50,_51,_52,_53,_54,_55,_56,_X_H3,_57,_58,_59,_X_D>
			      when %% Line 2366
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=='
								       -| ['compiler_generated'] )
				      (_56,
				       _59)
				  -| ['compiler_generated'] ) ->
			      %% Line 2367
			      ( apply 'ukeymerge3_12_3'/9
				    (_49, _50, _51, _52, _53, _54, _55, _58, _57)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2368
			( <_60,_61,_62,_63,_64,_65,_66,_X_E3,_67,_68,_69,_X_HdM,_X_D> when ( 'true'
											     -| ['compiler_generated'] ) ->
			      %% Line 2369
			      ( apply 'ukeymerge3_12_3'/9
				    (_60, _61, _62, _63, _64, _65, _66, ( [_67|_69]
									  -| ['compiler_generated'] ), _68)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2351
		<E2> when 'true' ->
		    %% Line 2383
		    ( case <I,E1,T1,H1,E2,H2,T2,E3,H3,T3,M,HdM,D> of
			( <_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_X_HdM,_92>
			      when %% Line 2384
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_85,
				       _88)
				  -| ['compiler_generated'] ) ->
			      %% Line 2385
			      ( apply 'ukeymerge3_2'/11
				    (_81, _82, _83, _84, _87, _85, _92, ( [_86|_91]
									  -| ['compiler_generated'] ), _88, _89, _90)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2386
			( <_93,_94,_95,_96,_97,_98,_99,_100,_X_H3,_101,_102,_103,_X_D>
			      when %% Line 2387
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=='
								       -| ['compiler_generated'] )
				      (_100,
				       _103)
				  -| ['compiler_generated'] ) ->
			      %% Line 2388
			      ( apply 'ukeymerge3_21_3'/9
				    (_93, _94, _95, _96, _97, _98, _99, _102, _101)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2389
			( <_104,_105,_106,_107,_108,_109,_110,_X_E3,_111,_112,_113,_X_HdM,_X_D> when ( 'true'
												       -| ['compiler_generated'] ) ->
			      %% Line 2390
			      ( apply 'ukeymerge3_21_3'/9
				    (_104, _105, _106, _107, _108, _109, _110, ( [_111|_113]
										 -| ['compiler_generated'] ), _112)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 2354
	  <I,E1,T1,H1,[],_X_HdM,_X_D,M,E3,H3,T3>
	      when call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2355
	      apply 'ukeymerge2_1'/7
		  (I, T1, E3, E1, T3, [H1|M], H3)
	  %% Line 2356
	  <I,E1,T1,H1,[],HdM,_X_D,M,E3,_X_H3,T3>
	      when call 'erlang':'=='
		    (E3,
		     HdM) ->
	      %% Line 2357
	      apply 'ukeymerge2_2'/6
		  (I, T1, E1, H1, T3, M)
	  %% Line 2358
	  <I,E1,T1,H1,[],_X_HdM,_X_D,M,_X_E3,H3,T3> when 'true' ->
	      %% Line 2359
	      apply 'ukeymerge2_2'/6
		  (I, T1, E1, H1, T3, [H3|M])
	  ( <_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12})
		  -| [{'function_name',{'ukeymerge3_2',11}}] )
	    -| ['compiler_generated'] )
	end
'ukeymerge3_12'/13 =
    %% Line 2362
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12> of
	  <I,E1,T1,H1,E2,H2,T2,E3,H3,T3,M,_X_HdM,D>
	      when %% Line 2363
		call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2364
	      apply 'ukeymerge3_1'/11
		  (I, T1, D, E1, E2, H2, T2, [H1|M], E3, H3, T3)
	  %% Line 2365
	  <I,E1,T1,H1,E2,H2,T2,E3,_X_H3,T3,M,HdM,_X_D>
	      when %% Line 2366
		call 'erlang':'=='
		    (E3,
		     HdM) ->
	      %% Line 2367
	      apply 'ukeymerge3_12_3'/9
		  (I, E1, T1, H1, E2, H2, T2, M, T3)
	  %% Line 2368
	  <I,E1,T1,H1,E2,H2,T2,_X_E3,H3,T3,M,_X_HdM,_X_D> when 'true' ->
	      %% Line 2369
	      apply 'ukeymerge3_12_3'/9
		  (I, E1, T1, H1, E2, H2, T2, [H3|M], T3)
	end
'ukeymerge3_12_3'/9 =
    %% Line 2372
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <I,E1,T1,H1,E2,H2,T2,M,[H3|T3]> when 'true' ->
	      %% Line 2373
	      case call 'erlang':'element'
		       (I, H3) of
		%% Line 2374
		<E3>
		    when call 'erlang':'=<'
			  (E1,
			   E3) ->
		    %% Line 2375
		    apply 'ukeymerge3_1'/11
			(I, T1, T1, E1, E2, H2, T2, [H1|M], E3, H3, T3)
		%% Line 2376
		<_X_E3> when 'true' ->
		    %% Line 2377
		    apply 'ukeymerge3_12_3'/9
			(I, E1, T1, H1, E2, H2, T2, [H3|M], T3)
	      end
	  %% Line 2379
	  <I,E1,T1,H1,E2,H2,T2,M,[]> when 'true' ->
	      %% Line 2380
	      apply 'ukeymerge2_1'/7
		  (I, T1, E2, E1, T2, [H1|M], H2)
	  ( <_18,_17,_16,_15,_14,_13,_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_18,_17,_16,_15,_14,_13,_12,_11,_10})
		  -| [{'function_name',{'ukeymerge3_12_3',9}}] )
	    -| ['compiler_generated'] )
	end
'ukeymerge3_21'/13 =
    %% Line 2383
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12> of
	  <I,E1,T1,H1,E2,H2,T2,E3,H3,T3,M,_X_HdM,D>
	      when %% Line 2384
		call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2385
	      apply 'ukeymerge3_2'/11
		  (I, E1, T1, H1, T2, E2, D, [H2|M], E3, H3, T3)
	  %% Line 2386
	  <I,E1,T1,H1,E2,H2,T2,E3,_X_H3,T3,M,HdM,_X_D>
	      when %% Line 2387
		call 'erlang':'=='
		    (E3,
		     HdM) ->
	      %% Line 2388
	      apply 'ukeymerge3_21_3'/9
		  (I, E1, T1, H1, E2, H2, T2, M, T3)
	  %% Line 2389
	  <I,E1,T1,H1,E2,H2,T2,_X_E3,H3,T3,M,_X_HdM,_X_D> when 'true' ->
	      %% Line 2390
	      apply 'ukeymerge3_21_3'/9
		  (I, E1, T1, H1, E2, H2, T2, [H3|M], T3)
	end
'ukeymerge3_21_3'/9 =
    %% Line 2393
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <I,E1,T1,H1,E2,H2,T2,M,[H3|T3]> when 'true' ->
	      %% Line 2394
	      case call 'erlang':'element'
		       (I, H3) of
		%% Line 2395
		<E3>
		    when call 'erlang':'=<'
			  (E2,
			   E3) ->
		    %% Line 2396
		    apply 'ukeymerge3_2'/11
			(I, E1, T1, H1, T2, E2, T2, [H2|M], E3, H3, T3)
		%% Line 2397
		<_X_E3> when 'true' ->
		    %% Line 2398
		    apply 'ukeymerge3_21_3'/9
			(I, E1, T1, H1, E2, H2, T2, [H3|M], T3)
	      end
	  %% Line 2400
	  <I,E1,T1,H1,_X_E2,H2,T2,M,[]> when 'true' ->
	      %% Line 2401
	      apply 'ukeymerge2_2'/6
		  (I, T1, E1, H1, T2, [H2|M])
	  ( <_18,_17,_16,_15,_14,_13,_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_18,_17,_16,_15,_14,_13,_12,_11,_10})
		  -| [{'function_name',{'ukeymerge3_21_3',9}}] )
	    -| ['compiler_generated'] )
	end
'rukeymerge3_1'/11 =
    %% Line 2406
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10> of
	  <I,[H1|T1],D1,D2,E2,H2,T2,M,E3,H3,T3> when 'true' ->
	      %% Line 2407
	      case call 'erlang':'element'
		       (I, H1) of
		%% Line 2408
		<E1>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2419
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M> of
			( <_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_41,
				       _44)
				  -| ['compiler_generated'] ) ->
			      %% Line 2420
			      ( apply 'rukeymerge3_12_3'/11
				    (_37, _38, _39, _40, _41, _42, _43, _47, _44, _45, _46)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2421
			( <_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58> when ( 'true'
									       -| ['compiler_generated'] ) ->
			      %% Line 2422
			      ( apply 'rukeymerge3_2'/11
				    (_48, _49, _50, _51, _54, _53, _52, _58, _55, _56, _57)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2410
		<E1> when 'true' ->
		    %% Line 2425
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D1,D2> of
			( <_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_X_D1,_X_D2>
			      when %% Line 2426
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_71,
				       _77)
				  -| ['compiler_generated'] ) ->
			      %% Line 2427
			      ( apply 'rukeymerge3_21_3'/11
				    (_70, _71, _72, _73, _74, _75, _76, _80, _77, _78, _79)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2428
			( <_81,_X_E1,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92> when ( 'true'
											 -| ['compiler_generated'] ) ->
			      %% Line 2429
			      ( apply 'rukeymerge3_1'/11
				    (_81, _83, _91, _92, _84, _85, _86, ( [_82|_90]
									  -| ['compiler_generated'] ), _87, _88, _89)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 2413
	  <I,[],_X_D1,_X_D2,E2,H2,T2,M,E3,H3,T3>
	      when call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2414
	      apply 'rukeymerge2_2'/8
		  (I, T2, E2, T3, M, E3, H3, H2)
	  %% Line 2415
	  <I,[],_X_D1,_X_D2,_X_E2,H2,T2,M,E3,H3,T3> when 'true' ->
	      %% Line 2416
	      apply 'rukeymerge2_1'/6
		  (I, T2, E3, T3, [H2|M], H3)
	  ( <_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12})
		  -| [{'function_name',{'rukeymerge3_1',11}}] )
	    -| ['compiler_generated'] )
	end
'rukeymerge3_12a'/11 =
    %% Line 2419
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10> of
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M>
	      when call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2420
	      apply 'rukeymerge3_12_3'/11
		  (I, E1, H1, T1, E2, H2, T2, M, E3, H3, T3)
	  %% Line 2421
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M> when 'true' ->
	      %% Line 2422
	      apply 'rukeymerge3_2'/11
		  (I, E1, H1, T1, T2, H2, E2, M, E3, H3, T3)
	end
'rukeymerge3_21a'/13 =
    %% Line 2425
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12> of
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,_X_D1,_X_D2>
	      when %% Line 2426
		call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2427
	      apply 'rukeymerge3_21_3'/11
		  (I, E1, H1, T1, E2, H2, T2, M, E3, H3, T3)
	  %% Line 2428
	  <I,_X_E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D1,D2> when 'true' ->
	      %% Line 2429
	      apply 'rukeymerge3_1'/11
		  (I, T1, D1, D2, E2, H2, T2, [H1|M], E3, H3, T3)
	end
'rukeymerge3_2'/11 =
    %% Line 2432
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10> of
	  <I,E1,H1,T1,[H2|T2],H2M,E2M,M,E3,H3,T3> when 'true' ->
	      %% Line 2433
	      case call 'erlang':'element'
		       (I, H2) of
		%% Line 2434
		<E2>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2451
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,H2M> of
			( <_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46>
			      when %% Line 2452
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_39,
				       _42)
				  -| ['compiler_generated'] ) ->
			      %% Line 2453
			      ( apply 'rukeymerge3_12_3'/11
				    (_35, _36, _37, _38, _39, _40, _41, ( [_46|_45]
									  -| ['compiler_generated'] ), _42, _43, _44)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2454
			( <_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58> when ( 'true'
										   -| ['compiler_generated'] ) ->
			      %% Line 2455
			      ( apply 'rukeymerge3_2'/11
				    (_47, _48, _49, _50, _53, _52, _51, ( [_58|_57]
									  -| ['compiler_generated'] ), _54, _55, _56)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2437
		<E2>
		    when call 'erlang':'=='
			  (E1,
			   E2M) ->
		    %% Line 2438
		    apply 'rukeymerge3_1'/11
			(I, T1, H1, T1, E2, H2, T2, [H1|M], E3, H3, T3)
		%% Line 2439
		<E2> when 'true' ->
		    %% Line 2458
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,H2M> of
			( <_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_71,
				       _77)
				  -| ['compiler_generated'] ) ->
			      %% Line 2459
			      ( apply 'rukeymerge3_21_3'/11
				    (_70, _71, _72, _73, _74, _75, _76, ( [_81|_80]
									  -| ['compiler_generated'] ), _77, _78, _79)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2460
			( <_82,_X_E1,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92> when ( 'true'
										     -| ['compiler_generated'] ) ->
			      %% Line 2461
			      ( apply 'rukeymerge3_1'/11
				    (_82, _84, _83, _84, _85, _86, _87, ( [_83|( [_92|_91]
										 -| ['compiler_generated'] )]
									  -| ['compiler_generated'] ), _88, _89, _90)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 2443
	  <I,E1,H1,T1,[],_X_H2M,E2M,M,E3,H3,T3>
	      when call 'erlang':'=='
		    (E1,
		     E2M) ->
	      %% Line 2444
	      apply 'rukeymerge2_1'/6
		  (I, T1, E3, T3, [H1|M], H3)
	  %% Line 2445
	  <I,E1,H1,T1,[],H2M,_X_E2M,M,E3,H3,T3>
	      when call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2446
	      apply 'rukeymerge2_2'/8
		  (I, T1, E1, T3, [H2M|M], E3, H3, H1)
	  %% Line 2447
	  <I,_X_E1,H1,T1,[],H2M,_X_E2M,M,E3,H3,T3> when 'true' ->
	      %% Line 2448
	      apply 'rukeymerge2_1'/6
		  (I, T1, E3, T3, [H1|[H2M|M]], H3)
	  ( <_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12})
		  -| [{'function_name',{'rukeymerge3_2',11}}] )
	    -| ['compiler_generated'] )
	end
'rukeymerge3_12b'/12 =
    %% Line 2451
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11> of
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,H2M>
	      when %% Line 2452
		call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2453
	      apply 'rukeymerge3_12_3'/11
		  (I, E1, H1, T1, E2, H2, T2, [H2M|M], E3, H3, T3)
	  %% Line 2454
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,H2M> when 'true' ->
	      %% Line 2455
	      apply 'rukeymerge3_2'/11
		  (I, E1, H1, T1, T2, H2, E2, [H2M|M], E3, H3, T3)
	end
'rukeymerge3_21b'/12 =
    %% Line 2458
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11> of
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,H2M>
	      when call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2459
	      apply 'rukeymerge3_21_3'/11
		  (I, E1, H1, T1, E2, H2, T2, [H2M|M], E3, H3, T3)
	  %% Line 2460
	  <I,_X_E1,H1,T1,E2,H2,T2,E3,H3,T3,M,H2M> when 'true' ->
	      %% Line 2461
	      apply 'rukeymerge3_1'/11
		  (I, T1, H1, T1, E2, H2, T2, [H1|[H2M|M]], E3, H3, T3)
	end
'rukeymerge3_12_3'/11 =
    %% Line 2464
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10> of
	  <I,E1,H1,T1,E2,H2,T2,M,E3M,H3M,[H3|T3]> when 'true' ->
	      %% Line 2465
	      case call 'erlang':'element'
		       (I, H3) of
		%% Line 2466
		<E3>
		    when call 'erlang':'=<'
			  (E2,
			   E3) ->
		    %% Line 2467
		    apply 'rukeymerge3_12_3'/11
			(I, E1, H1, T1, E2, H2, T2, [H3M|M], E3, H3, T3)
		%% Line 2468
		<E3>
		    when call 'erlang':'=='
			  (E2,
			   E3M) ->
		    %% Line 2469
		    apply 'rukeymerge3_2'/11
			(I, E1, H1, T1, T2, H2, E2, M, E3, H3, T3)
		%% Line 2470
		<E3> when 'true' ->
		    %% Line 2471
		    apply 'rukeymerge3_2'/11
			(I, E1, H1, T1, T2, H2, E2, [H3M|M], E3, H3, T3)
	      end
	  %% Line 2473
	  <I,E1,H1,T1,E2,H2,T2,M,E3M,_X_H3M,[]>
	      when call 'erlang':'=='
		    (E2,
		     E3M) ->
	      %% Line 2474
	      apply 'rukeymerge2_2'/8
		  (I, T1, E1, T2, M, E2, H2, H1)
	  %% Line 2475
	  <I,E1,H1,T1,E2,H2,T2,M,_X_E3M,H3M,[]> when 'true' ->
	      %% Line 2476
	      apply 'rukeymerge2_2'/8
		  (I, T1, E1, T2, [H3M|M], E2, H2, H1)
	  ( <_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12})
		  -| [{'function_name',{'rukeymerge3_12_3',11}}] )
	    -| ['compiler_generated'] )
	end
'rukeymerge3_21_3'/11 =
    %% Line 2479
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10> of
	  <I,E1,H1,T1,E2,H2,T2,M,E3M,H3M,[H3|T3]> when 'true' ->
	      %% Line 2480
	      case call 'erlang':'element'
		       (I, H3) of
		%% Line 2481
		<E3>
		    when call 'erlang':'=<'
			  (E1,
			   E3) ->
		    %% Line 2482
		    apply 'rukeymerge3_21_3'/11
			(I, E1, H1, T1, E2, H2, T2, [H3M|M], E3, H3, T3)
		%% Line 2483
		<E3>
		    when call 'erlang':'=='
			  (E1,
			   E3M) ->
		    %% Line 2484
		    apply 'rukeymerge3_1'/11
			(I, T1, H1, T1, E2, H2, T2, [H1|M], E3, H3, T3)
		%% Line 2485
		<E3> when 'true' ->
		    %% Line 2486
		    apply 'rukeymerge3_1'/11
			(I, T1, H1, T1, E2, H2, T2, [H1|[H3M|M]], E3, H3, T3)
	      end
	  %% Line 2488
	  <I,E1,H1,T1,E2,H2,T2,M,E3M,_X_H3M,[]>
	      when call 'erlang':'=='
		    (E1,
		     E3M) ->
	      %% Line 2489
	      apply 'rukeymerge2_1'/6
		  (I, T1, E2, T2, [H1|M], H2)
	  %% Line 2490
	  <I,_X_E1,H1,T1,E2,H2,T2,M,_X_E3M,H3M,[]> when 'true' ->
	      %% Line 2491
	      apply 'rukeymerge2_1'/6
		  (I, T1, E2, T2, [H1|[H3M|M]], H2)
	  ( <_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12})
		  -| [{'function_name',{'rukeymerge3_21_3',11}}] )
	    -| ['compiler_generated'] )
	end
'ukeymerge2_1'/7 =
    %% Line 2496
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <I,[H1|T1],E2,HdM,T2,M,H2> when 'true' ->
	      %% Line 2497
	      case call 'erlang':'element'
		       (I, H1) of
		%% Line 2498
		<E1>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2499
		    apply 'ukeymerge2_1'/7
			(I, T1, E2, E1, T2, [H1|M], H2)
		%% Line 2500
		<E1>
		    when call 'erlang':'=='
			  (E2,
			   HdM) ->
		    %% Line 2501
		    apply 'ukeymerge2_2'/6
			(I, T1, E1, H1, T2, M)
		%% Line 2502
		<E1> when 'true' ->
		    %% Line 2503
		    apply 'ukeymerge2_2'/6
			(I, T1, E1, H1, T2, [H2|M])
	      end
	  %% Line 2505
	  <_X_I,[],E2,HdM,T2,M,_X_H2>
	      when call 'erlang':'=='
		    (E2,
		     HdM) ->
	      %% Line 2506
	      call 'lists':'reverse'
		  (T2, M)
	  %% Line 2507
	  <_X_I,[],_X_E2,_X_HdM,T2,M,H2> when 'true' ->
	      %% Line 2508
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_14,_13,_12,_11,_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13,_12,_11,_10,_9,_8})
		  -| [{'function_name',{'ukeymerge2_1',7}}] )
	    -| ['compiler_generated'] )
	end
'ukeymerge2_2'/6 =
    %% Line 2510
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <I,T1,E1,H1,[H2|T2],M> when 'true' ->
	      %% Line 2511
	      case call 'erlang':'element'
		       (I, H2) of
		%% Line 2512
		<E2>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2513
		    apply 'ukeymerge2_1'/7
			(I, T1, E2, E1, T2, [H1|M], H2)
		%% Line 2514
		<_X_E2> when 'true' ->
		    %% Line 2515
		    apply 'ukeymerge2_2'/6
			(I, T1, E1, H1, T2, [H2|M])
	      end
	  %% Line 2517
	  <_X_I,T1,_X_E1,H1,[],M> when 'true' ->
	      %% Line 2518
	      call 'lists':'reverse'
		  (T1, [H1|M])
	  ( <_12,_11,_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11,_10,_9,_8,_7})
		  -| [{'function_name',{'ukeymerge2_2',6}}] )
	    -| ['compiler_generated'] )
	end
'rukeymerge2_1'/6 =
    %% Line 2522
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <I,[H1|T1],E2,T2,M,H2> when 'true' ->
	      %% Line 2523
	      case call 'erlang':'element'
		       (I, H1) of
		%% Line 2524
		<E1>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2525
		    apply 'rukeymerge2_2'/8
			(I, T1, E1, T2, M, E2, H2, H1)
		%% Line 2526
		<_X_E1> when 'true' ->
		    %% Line 2527
		    apply 'rukeymerge2_1'/6
			(I, T1, E2, T2, [H1|M], H2)
	      end
	  %% Line 2529
	  <_X_I,[],_X_E2,T2,M,H2> when 'true' ->
	      %% Line 2530
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_12,_11,_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11,_10,_9,_8,_7})
		  -| [{'function_name',{'rukeymerge2_1',6}}] )
	    -| ['compiler_generated'] )
	end
'rukeymerge2_2'/8 =
    %% Line 2532
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <I,T1,E1,[H2|T2],M,E2M,H2M,H1> when 'true' ->
	      %% Line 2533
	      case call 'erlang':'element'
		       (I, H2) of
		%% Line 2534
		<E2>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2535
		    apply 'rukeymerge2_2'/8
			(I, T1, E1, T2, [H2M|M], E2, H2, H1)
		%% Line 2536
		<E2>
		    when call 'erlang':'=='
			  (E1,
			   E2M) ->
		    %% Line 2537
		    apply 'rukeymerge2_1'/6
			(I, T1, E2, T2, [H1|M], H2)
		%% Line 2538
		<E2> when 'true' ->
		    %% Line 2539
		    apply 'rukeymerge2_1'/6
			(I, T1, E2, T2, [H1|[H2M|M]], H2)
	      end
	  %% Line 2541
	  <_X_I,T1,E1,[],M,E2M,_X_H2M,H1>
	      when call 'erlang':'=='
		    (E1,
		     E2M) ->
	      %% Line 2542
	      call 'lists':'reverse'
		  (T1, [H1|M])
	  %% Line 2543
	  <_X_I,T1,_X_E1,[],M,_X_E2M,H2M,H1> when 'true' ->
	      %% Line 2544
	      call 'lists':'reverse'
		  (T1, [H1|[H2M|M]])
	  ( <_16,_15,_14,_13,_12,_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15,_14,_13,_12,_11,_10,_9})
		  -| [{'function_name',{'rukeymerge2_2',8}}] )
	    -| ['compiler_generated'] )
	end
'fsplit_1'/6 =
    %% Line 2549
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <Y,X,Fun,[Z|L],R,Rs> when 'true' ->
	      %% Line 2550
	      case apply Fun
		       (Y, Z) of
		%% Line 2551
		<'true'> when 'true' ->
		    %% Line 2552
		    apply 'fsplit_1'/6
			(Z, Y, Fun, L, [X|R], Rs)
		%% Line 2553
		<'false'> when 'true' ->
		    %% Line 2554
		    case apply Fun
			     (X, Z) of
		      %% Line 2555
		      <'true'> when 'true' ->
			  %% Line 2556
			  apply 'fsplit_1'/6
			      (Y, Z, Fun, L, [X|R], Rs)
		      %% Line 2557
		      <'false'>
			  when call 'erlang':'=:='
				(R,
				 []) ->
			  %% Line 2558
			  apply 'fsplit_1'/6
			      (Y, X, Fun, L, [Z|[]], Rs)
		      %% Line 2559
		      <'false'> when 'true' ->
			  %% Line 2560
			  apply 'fsplit_1_1'/7
			      (Y, X, Fun, L, R, Rs, Z)
		      ( <_6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_6})
			-| ['compiler_generated'] )
		    end
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2563
	  <Y,X,Fun,[],R,Rs> when 'true' ->
	      %% Line 2564
	      apply 'rfmergel'/4
		  ([[Y|[X|R]]|Rs], [], Fun, 'asc')
	  ( <_13,_12,_11,_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12,_11,_10,_9,_8})
		  -| [{'function_name',{'fsplit_1',6}}] )
	    -| ['compiler_generated'] )
	end
'fsplit_1_1'/7 =
    %% Line 2566
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <Y,X,Fun,[Z|L],R,Rs,S> when 'true' ->
	      %% Line 2567
	      case apply Fun
		       (Y, Z) of
		%% Line 2568
		<'true'> when 'true' ->
		    %% Line 2569
		    apply 'fsplit_1_1'/7
			(Z, Y, Fun, L, [X|R], Rs, S)
		%% Line 2570
		<'false'> when 'true' ->
		    %% Line 2571
		    case apply Fun
			     (X, Z) of
		      %% Line 2572
		      <'true'> when 'true' ->
			  %% Line 2573
			  apply 'fsplit_1_1'/7
			      (Y, Z, Fun, L, [X|R], Rs, S)
		      %% Line 2574
		      <'false'> when 'true' ->
			  %% Line 2575
			  case apply Fun
				   (S, Z) of
			    %% Line 2576
			    <'true'> when 'true' ->
				%% Line 2577
				apply 'fsplit_1'/6
				    (Z, S, Fun, L, [], [[Y|[X|R]]|Rs])
			    %% Line 2578
			    <'false'> when 'true' ->
				%% Line 2579
				apply 'fsplit_1'/6
				    (S, Z, Fun, L, [], [[Y|[X|R]]|Rs])
			    ( <_7> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_7})
			      -| ['compiler_generated'] )
			  end
		      ( <_8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_8})
			-| ['compiler_generated'] )
		    end
		( <_9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2583
	  <Y,X,Fun,[],R,Rs,S> when 'true' ->
	      %% Line 2584
	      apply 'rfmergel'/4
		  ([[S|[]]|[[Y|[X|R]]|Rs]], [], Fun, 'asc')
	  ( <_16,_15,_14,_13,_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15,_14,_13,_12,_11,_10})
		  -| [{'function_name',{'fsplit_1_1',7}}] )
	    -| ['compiler_generated'] )
	end
'fsplit_2'/6 =
    %% Line 2587
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <Y,X,Fun,[Z|L],R,Rs> when 'true' ->
	      %% Line 2588
	      case apply Fun
		       (Y, Z) of
		%% Line 2589
		<'false'> when 'true' ->
		    %% Line 2590
		    apply 'fsplit_2'/6
			(Z, Y, Fun, L, [X|R], Rs)
		%% Line 2591
		<'true'> when 'true' ->
		    %% Line 2592
		    case apply Fun
			     (X, Z) of
		      %% Line 2593
		      <'false'> when 'true' ->
			  %% Line 2594
			  apply 'fsplit_2'/6
			      (Y, Z, Fun, L, [X|R], Rs)
		      %% Line 2595
		      <'true'>
			  when call 'erlang':'=:='
				(R,
				 []) ->
			  %% Line 2596
			  apply 'fsplit_2'/6
			      (Y, X, Fun, L, [Z|[]], Rs)
		      %% Line 2597
		      <'true'> when 'true' ->
			  %% Line 2598
			  apply 'fsplit_2_1'/7
			      (Y, X, Fun, L, R, Rs, Z)
		      ( <_6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_6})
			-| ['compiler_generated'] )
		    end
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2601
	  <Y,X,Fun,[],R,Rs> when 'true' ->
	      %% Line 2602
	      apply 'fmergel'/4
		  ([[Y|[X|R]]|Rs], [], Fun, 'desc')
	  ( <_13,_12,_11,_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12,_11,_10,_9,_8})
		  -| [{'function_name',{'fsplit_2',6}}] )
	    -| ['compiler_generated'] )
	end
'fsplit_2_1'/7 =
    %% Line 2604
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <Y,X,Fun,[Z|L],R,Rs,S> when 'true' ->
	      %% Line 2605
	      case apply Fun
		       (Y, Z) of
		%% Line 2606
		<'false'> when 'true' ->
		    %% Line 2607
		    apply 'fsplit_2_1'/7
			(Z, Y, Fun, L, [X|R], Rs, S)
		%% Line 2608
		<'true'> when 'true' ->
		    %% Line 2609
		    case apply Fun
			     (X, Z) of
		      %% Line 2610
		      <'false'> when 'true' ->
			  %% Line 2611
			  apply 'fsplit_2_1'/7
			      (Y, Z, Fun, L, [X|R], Rs, S)
		      %% Line 2612
		      <'true'> when 'true' ->
			  %% Line 2613
			  case apply Fun
				   (S, Z) of
			    %% Line 2614
			    <'false'> when 'true' ->
				%% Line 2615
				apply 'fsplit_2'/6
				    (Z, S, Fun, L, [], [[Y|[X|R]]|Rs])
			    %% Line 2616
			    <'true'> when 'true' ->
				%% Line 2617
				apply 'fsplit_2'/6
				    (S, Z, Fun, L, [], [[Y|[X|R]]|Rs])
			    ( <_7> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_7})
			      -| ['compiler_generated'] )
			  end
		      ( <_8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_8})
			-| ['compiler_generated'] )
		    end
		( <_9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2621
	  <Y,X,Fun,[],R,Rs,S> when 'true' ->
	      %% Line 2622
	      apply 'fmergel'/4
		  ([[S|[]]|[[Y|[X|R]]|Rs]], [], Fun, 'desc')
	  ( <_16,_15,_14,_13,_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15,_14,_13,_12,_11,_10})
		  -| [{'function_name',{'fsplit_2_1',7}}] )
	    -| ['compiler_generated'] )
	end
'fmergel'/4 =
    %% Line 2624
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[T1|[[H2|T2]|L]],Acc,Fun,'asc'> when 'true' ->
	      let <_4> =
		  apply %% Line 2625
			'fmerge2_1'/5
		      (%% Line 2625
		       T1, %% Line 2625
			   H2, %% Line 2625
			       Fun, %% Line 2625
				    T2, %% Line 2625
					[])
	      in  %% Line 2625
		  apply 'fmergel'/4
		      (L, [_4|Acc], Fun, 'asc')
	  %% Line 2626
	  <[[H2|T2]|[T1|L]],Acc,Fun,'desc'> when 'true' ->
	      let <_5> =
		  apply %% Line 2627
			'fmerge2_1'/5
		      (%% Line 2627
		       T1, %% Line 2627
			   H2, %% Line 2627
			       Fun, %% Line 2627
				    T2, %% Line 2627
					[])
	      in  %% Line 2627
		  apply 'fmergel'/4
		      (L, [_5|Acc], Fun, 'desc')
	  %% Line 2628
	  <[L|[]],[],_X_Fun,_X_O> when 'true' ->
	      %% Line 2629
	      L
	  %% Line 2630
	  <[L|[]],Acc,Fun,O> when 'true' ->
	      let <_6> =
		  call %% Line 2631
		       'lists':%% Line 2631
			       'reverse'
		      (%% Line 2631
		       L, %% Line 2631
			  [])
	      in  %% Line 2631
		  apply 'rfmergel'/4
		      ([_6|Acc], [], Fun, O)
	  %% Line 2632
	  <[],Acc,Fun,O> when 'true' ->
	      %% Line 2633
	      apply 'rfmergel'/4
		  (Acc, [], Fun, O)
	  ( <_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8,_7})
		  -| [{'function_name',{'fmergel',4}}] )
	    -| ['compiler_generated'] )
	end
'rfmergel'/4 =
    %% Line 2635
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[[H2|T2]|[T1|L]],Acc,Fun,'asc'> when 'true' ->
	      let <_4> =
		  apply %% Line 2636
			'rfmerge2_1'/5
		      (%% Line 2636
		       T1, %% Line 2636
			   H2, %% Line 2636
			       Fun, %% Line 2636
				    T2, %% Line 2636
					[])
	      in  %% Line 2636
		  apply 'rfmergel'/4
		      (L, [_4|Acc], Fun, 'asc')
	  %% Line 2637
	  <[T1|[[H2|T2]|L]],Acc,Fun,'desc'> when 'true' ->
	      let <_5> =
		  apply %% Line 2638
			'rfmerge2_1'/5
		      (%% Line 2638
		       T1, %% Line 2638
			   H2, %% Line 2638
			       Fun, %% Line 2638
				    T2, %% Line 2638
					[])
	      in  %% Line 2638
		  apply 'rfmergel'/4
		      (L, [_5|Acc], Fun, 'desc')
	  %% Line 2639
	  <[L|[]],Acc,Fun,O> when 'true' ->
	      let <_6> =
		  call %% Line 2640
		       'lists':%% Line 2640
			       'reverse'
		      (%% Line 2640
		       L, %% Line 2640
			  [])
	      in  %% Line 2640
		  apply 'fmergel'/4
		      ([_6|Acc], [], Fun, O)
	  %% Line 2641
	  <[],Acc,Fun,O> when 'true' ->
	      %% Line 2642
	      apply 'fmergel'/4
		  (Acc, [], Fun, O)
	  ( <_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8,_7})
		  -| [{'function_name',{'rfmergel',4}}] )
	    -| ['compiler_generated'] )
	end
'fmerge2_1'/5 =
    %% Line 2647
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <[H1|T1],H2,Fun,T2,M> when 'true' ->
	      %% Line 2648
	      case apply Fun
		       (H1, H2) of
		%% Line 2649
		<'true'> when 'true' ->
		    %% Line 2650
		    apply 'fmerge2_1'/5
			(T1, H2, Fun, T2, [H1|M])
		%% Line 2651
		<'false'> when 'true' ->
		    %% Line 2652
		    apply 'fmerge2_2'/5
			(H1, T1, Fun, T2, [H2|M])
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2654
	  <[],H2,_X_Fun,T2,M> when 'true' ->
	      %% Line 2655
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8,_7,_6})
		  -| [{'function_name',{'fmerge2_1',5}}] )
	    -| ['compiler_generated'] )
	end
'fmerge2_2'/5 =
    %% Line 2657
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <H1,T1,Fun,[H2|T2],M> when 'true' ->
	      %% Line 2658
	      case apply Fun
		       (H1, H2) of
		%% Line 2659
		<'true'> when 'true' ->
		    %% Line 2660
		    apply 'fmerge2_1'/5
			(T1, H2, Fun, T2, [H1|M])
		%% Line 2661
		<'false'> when 'true' ->
		    %% Line 2662
		    apply 'fmerge2_2'/5
			(H1, T1, Fun, T2, [H2|M])
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2664
	  <H1,T1,_X_Fun,[],M> when 'true' ->
	      %% Line 2665
	      call 'lists':'reverse'
		  (T1, [H1|M])
	  ( <_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8,_7,_6})
		  -| [{'function_name',{'fmerge2_2',5}}] )
	    -| ['compiler_generated'] )
	end
'rfmerge2_1'/5 =
    %% Line 2669
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <[H1|T1],H2,Fun,T2,M> when 'true' ->
	      %% Line 2670
	      case apply Fun
		       (H1, H2) of
		%% Line 2671
		<'true'> when 'true' ->
		    %% Line 2672
		    apply 'rfmerge2_2'/5
			(H1, T1, Fun, T2, [H2|M])
		%% Line 2673
		<'false'> when 'true' ->
		    %% Line 2674
		    apply 'rfmerge2_1'/5
			(T1, H2, Fun, T2, [H1|M])
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2676
	  <[],H2,_X_Fun,T2,M> when 'true' ->
	      %% Line 2677
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8,_7,_6})
		  -| [{'function_name',{'rfmerge2_1',5}}] )
	    -| ['compiler_generated'] )
	end
'rfmerge2_2'/5 =
    %% Line 2679
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <H1,T1,Fun,[H2|T2],M> when 'true' ->
	      %% Line 2680
	      case apply Fun
		       (H1, H2) of
		%% Line 2681
		<'true'> when 'true' ->
		    %% Line 2682
		    apply 'rfmerge2_2'/5
			(H1, T1, Fun, T2, [H2|M])
		%% Line 2683
		<'false'> when 'true' ->
		    %% Line 2684
		    apply 'rfmerge2_1'/5
			(T1, H2, Fun, T2, [H1|M])
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2686
	  <H1,T1,_X_Fun,[],M> when 'true' ->
	      %% Line 2687
	      call 'lists':'reverse'
		  (T1, [H1|M])
	  ( <_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8,_7,_6})
		  -| [{'function_name',{'rfmerge2_2',5}}] )
	    -| ['compiler_generated'] )
	end
'ufsplit_1'/6 =
    %% Line 2692
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <Y,X,Fun,[Z|L],R,Rs> when 'true' ->
	      %% Line 2693
	      case apply Fun
		       (Y, Z) of
		%% Line 2694
		<'true'> when 'true' ->
		    %% Line 2695
		    case apply Fun
			     (Z, Y) of
		      %% Line 2696
		      <'true'> when 'true' ->
			  %% Line 2697
			  apply 'ufsplit_1'/6
			      (Y, X, Fun, L, R, Rs)
		      %% Line 2698
		      <'false'> when 'true' ->
			  %% Line 2699
			  apply 'ufsplit_1'/6
			      (Z, Y, Fun, L, [X|R], Rs)
		      ( <_6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_6})
			-| ['compiler_generated'] )
		    end
		%% Line 2701
		<'false'> when 'true' ->
		    %% Line 2702
		    case apply Fun
			     (X, Z) of
		      %% Line 2703
		      <'true'> when 'true' ->
			  %% Line 2704
			  case apply Fun
				   (Z, X) of
			    %% Line 2705
			    <'true'> when 'true' ->
				%% Line 2706
				apply 'ufsplit_1'/6
				    (Y, X, Fun, L, R, Rs)
			    %% Line 2707
			    <'false'> when 'true' ->
				%% Line 2708
				apply 'ufsplit_1'/6
				    (Y, Z, Fun, L, [X|R], Rs)
			    ( <_7> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_7})
			      -| ['compiler_generated'] )
			  end
		      %% Line 2710
		      <'false'>
			  when call 'erlang':'=:='
				(R,
				 []) ->
			  %% Line 2711
			  apply 'ufsplit_1'/6
			      (Y, X, Fun, L, [Z|[]], Rs)
		      %% Line 2712
		      <'false'> when 'true' ->
			  %% Line 2713
			  apply 'ufsplit_1_1'/7
			      (Y, X, Fun, L, R, Rs, Z)
		      ( <_8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_8})
			-| ['compiler_generated'] )
		    end
		( <_9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2716
	  <Y,X,Fun,[],R,Rs> when 'true' ->
	      %% Line 2717
	      apply 'rufmergel'/3
		  ([[Y|[X|R]]|Rs], [], Fun)
	  ( <_15,_14,_13,_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_15,_14,_13,_12,_11,_10})
		  -| [{'function_name',{'ufsplit_1',6}}] )
	    -| ['compiler_generated'] )
	end
'ufsplit_1_1'/7 =
    %% Line 2720
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <Y,X,Fun,[Z|L],R,Rs,S> when 'true' ->
	      %% Line 2721
	      case apply Fun
		       (Y, Z) of
		%% Line 2722
		<'true'> when 'true' ->
		    %% Line 2723
		    case apply Fun
			     (Z, Y) of
		      %% Line 2724
		      <'true'> when 'true' ->
			  %% Line 2725
			  apply 'ufsplit_1_1'/7
			      (Y, X, Fun, L, R, Rs, S)
		      %% Line 2726
		      <'false'> when 'true' ->
			  %% Line 2727
			  apply 'ufsplit_1_1'/7
			      (Z, Y, Fun, L, [X|R], Rs, S)
		      ( <_7> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_7})
			-| ['compiler_generated'] )
		    end
		%% Line 2729
		<'false'> when 'true' ->
		    %% Line 2730
		    case apply Fun
			     (X, Z) of
		      %% Line 2731
		      <'true'> when 'true' ->
			  %% Line 2732
			  case apply Fun
				   (Z, X) of
			    %% Line 2733
			    <'true'> when 'true' ->
				%% Line 2734
				apply 'ufsplit_1_1'/7
				    (Y, X, Fun, L, R, Rs, S)
			    %% Line 2735
			    <'false'> when 'true' ->
				%% Line 2736
				apply 'ufsplit_1_1'/7
				    (Y, Z, Fun, L, [X|R], Rs, S)
			    ( <_8> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_8})
			      -| ['compiler_generated'] )
			  end
		      %% Line 2738
		      <'false'> when 'true' ->
			  %% Line 2739
			  case apply Fun
				   (S, Z) of
			    %% Line 2740
			    <'true'> when 'true' ->
				%% Line 2741
				case apply Fun
					 (Z, S) of
				  %% Line 2742
				  <'true'> when 'true' ->
				      %% Line 2743
				      apply 'ufsplit_1_1'/7
					  (Y, X, Fun, L, R, Rs, S)
				  %% Line 2744
				  <'false'> when 'true' ->
				      %% Line 2745
				      apply 'ufsplit_1'/6
					  (Z, S, Fun, L, [], [[Y|[X|R]]|Rs])
				  ( <_9> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_9})
				    -| ['compiler_generated'] )
				end
			    %% Line 2747
			    <'false'> when 'true' ->
				%% Line 2748
				apply 'ufsplit_1'/6
				    (S, Z, Fun, L, [], [[Y|[X|R]]|Rs])
			    ( <_10> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_10})
			      -| ['compiler_generated'] )
			  end
		      ( <_11> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_11})
			-| ['compiler_generated'] )
		    end
		( <_12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2752
	  <Y,X,Fun,[],R,Rs,S> when 'true' ->
	      %% Line 2753
	      apply 'rufmergel'/3
		  ([[S|[]]|[[Y|[X|R]]|Rs]], [], Fun)
	  ( <_19,_18,_17,_16,_15,_14,_13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_19,_18,_17,_16,_15,_14,_13})
		  -| [{'function_name',{'ufsplit_1_1',7}}] )
	    -| ['compiler_generated'] )
	end
'ufsplit_2'/4 =
    %% Line 2756
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Y,[Z|L],Fun,R> when 'true' ->
	      %% Line 2757
	      case apply Fun
		       (Y, Z) of
		%% Line 2758
		<'true'> when 'true' ->
		    %% Line 2759
		    case apply Fun
			     (Z, Y) of
		      %% Line 2760
		      <'true'> when 'true' ->
			  %% Line 2761
			  apply 'ufsplit_2'/4
			      (Y, L, Fun, R)
		      %% Line 2762
		      <'false'> when 'true' ->
			  let <_4> =
			      call %% Line 2763
				   'lists':%% Line 2763
					   'reverse'
				  (%% Line 2763
				   R, %% Line 2763
				      [])
			  in  %% Line 2763
			      apply 'ufsplit_1'/6
				  (Z, Y, Fun, L, [], [_4|[]])
		      ( <_5> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_5})
			-| ['compiler_generated'] )
		    end
		%% Line 2765
		<'false'> when 'true' ->
		    %% Line 2766
		    apply 'ufsplit_2'/4
			(Z, L, Fun, [Y|R])
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2768
	  <Y,[],_X_Fun,R> when 'true' ->
	      %% Line 2769
	      [Y|R]
	  ( <_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8,_7})
		  -| [{'function_name',{'ufsplit_2',4}}] )
	    -| ['compiler_generated'] )
	end
'ufmergel'/3 =
    %% Line 2771
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[[H1|T1]|[T2|L]],Acc,Fun> when 'true' ->
	      let <_3> =
		  apply %% Line 2772
			'ufmerge2_2'/5
		      (%% Line 2772
		       H1, %% Line 2772
			   T1, %% Line 2772
			       Fun, %% Line 2772
				    T2, %% Line 2772
					[])
	      in  %% Line 2772
		  apply 'ufmergel'/3
		      (L, [_3|Acc], Fun)
	  %% Line 2773
	  <[L|[]],[],_X_Fun> when 'true' ->
	      %% Line 2774
	      L
	  %% Line 2775
	  <[L|[]],Acc,Fun> when 'true' ->
	      let <_4> =
		  call %% Line 2776
		       'lists':%% Line 2776
			       'reverse'
		      (%% Line 2776
		       L, %% Line 2776
			  [])
	      in  %% Line 2776
		  apply 'rufmergel'/3
		      ([_4|Acc], [], Fun)
	  %% Line 2777
	  <[],Acc,Fun> when 'true' ->
	      %% Line 2778
	      apply 'rufmergel'/3
		  (Acc, [], Fun)
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'ufmergel',3}}] )
	    -| ['compiler_generated'] )
	end
'rufmergel'/3 =
    %% Line 2780
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[[H2|T2]|[T1|L]],Acc,Fun> when 'true' ->
	      let <_3> =
		  apply %% Line 2781
			'rufmerge2_1'/5
		      (%% Line 2781
		       T1, %% Line 2781
			   H2, %% Line 2781
			       Fun, %% Line 2781
				    T2, %% Line 2781
					[])
	      in  %% Line 2781
		  apply 'rufmergel'/3
		      (L, [_3|Acc], Fun)
	  %% Line 2782
	  <[L|[]],Acc,Fun> when 'true' ->
	      let <_4> =
		  call %% Line 2783
		       'lists':%% Line 2783
			       'reverse'
		      (%% Line 2783
		       L, %% Line 2783
			  [])
	      in  %% Line 2783
		  apply 'ufmergel'/3
		      ([_4|Acc], [], Fun)
	  %% Line 2784
	  <[],Acc,Fun> when 'true' ->
	      %% Line 2785
	      apply 'ufmergel'/3
		  (Acc, [], Fun)
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'rufmergel',3}}] )
	    -| ['compiler_generated'] )
	end
'ufmerge2_1'/6 =
    %% Line 2791
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <[H1|T1],H2,Fun,T2,M,HdM> when 'true' ->
	      %% Line 2792
	      case apply Fun
		       (H1, H2) of
		%% Line 2793
		<'true'> when 'true' ->
		    %% Line 2794
		    apply 'ufmerge2_1'/6
			(T1, H2, Fun, T2, [H1|M], H1)
		%% Line 2795
		<'false'> when 'true' ->
		    %% Line 2796
		    case apply Fun
			     (H2, HdM) of
		      %% Line 2797
		      <'true'> when 'true' ->
			  %% Line 2798
			  apply 'ufmerge2_2'/5
			      (H1, T1, Fun, T2, M)
		      %% Line 2799
		      <'false'> when 'true' ->
			  %% Line 2800
			  apply 'ufmerge2_2'/5
			      (H1, T1, Fun, T2, [H2|M])
		      ( <_6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_6})
			-| ['compiler_generated'] )
		    end
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2803
	  <[],H2,Fun,T2,M,HdM> when 'true' ->
	      %% Line 2804
	      case apply Fun
		       (H2, HdM) of
		%% Line 2805
		<'true'> when 'true' ->
		    %% Line 2806
		    call 'lists':'reverse'
			(T2, M)
		%% Line 2807
		<'false'> when 'true' ->
		    %% Line 2808
		    call 'lists':'reverse'
			(T2, [H2|M])
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_8})
		  -| ['compiler_generated'] )
	      end
	  ( <_14,_13,_12,_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13,_12,_11,_10,_9})
		  -| [{'function_name',{'ufmerge2_1',6}}] )
	    -| ['compiler_generated'] )
	end
'ufmerge2_2'/5 =
    %% Line 2811
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <H1,T1,Fun,[H2|T2],M> when 'true' ->
	      %% Line 2812
	      case apply Fun
		       (H1, H2) of
		%% Line 2813
		<'true'> when 'true' ->
		    %% Line 2814
		    apply 'ufmerge2_1'/6
			(T1, H2, Fun, T2, [H1|M], H1)
		%% Line 2815
		<'false'> when 'true' ->
		    %% Line 2816
		    apply 'ufmerge2_2'/5
			(H1, T1, Fun, T2, [H2|M])
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2818
	  <H1,T1,_X_Fun,[],M> when 'true' ->
	      %% Line 2819
	      call 'lists':'reverse'
		  (T1, [H1|M])
	  ( <_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8,_7,_6})
		  -| [{'function_name',{'ufmerge2_2',5}}] )
	    -| ['compiler_generated'] )
	end
'rufmerge2_1'/5 =
    %% Line 2823
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <[H1|T1],H2,Fun,T2,M> when 'true' ->
	      %% Line 2824
	      case apply Fun
		       (H1, H2) of
		%% Line 2825
		<'true'> when 'true' ->
		    %% Line 2826
		    apply 'rufmerge2_2'/6
			(H1, T1, Fun, T2, M, H2)
		%% Line 2827
		<'false'> when 'true' ->
		    %% Line 2828
		    apply 'rufmerge2_1'/5
			(T1, H2, Fun, T2, [H1|M])
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2830
	  <[],H2,_X_Fun,T2,M> when 'true' ->
	      %% Line 2831
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8,_7,_6})
		  -| [{'function_name',{'rufmerge2_1',5}}] )
	    -| ['compiler_generated'] )
	end
'rufmerge2_2'/6 =
    %% Line 2834
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <H1,T1,Fun,[H2|T2],M,H2M> when 'true' ->
	      %% Line 2835
	      case apply Fun
		       (H1, H2) of
		%% Line 2836
		<'true'> when 'true' ->
		    %% Line 2837
		    apply 'rufmerge2_2'/6
			(H1, T1, Fun, T2, [H2M|M], H2)
		%% Line 2838
		<'false'> when 'true' ->
		    %% Line 2839
		    case apply Fun
			     (H2M, H1) of
		      %% Line 2840
		      <'true'> when 'true' ->
			  %% Line 2841
			  apply 'rufmerge2_1'/5
			      (T1, H2, Fun, T2, [H1|M])
		      %% Line 2842
		      <'false'> when 'true' ->
			  %% Line 2843
			  apply 'rufmerge2_1'/5
			      (T1, H2, Fun, T2, [H1|[H2M|M]])
		      ( <_6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_6})
			-| ['compiler_generated'] )
		    end
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2846
	  <H1,T1,Fun,[],M,H2M> when 'true' ->
	      %% Line 2847
	      case apply Fun
		       (H2M, H1) of
		%% Line 2848
		<'true'> when 'true' ->
		    %% Line 2849
		    call 'lists':'reverse'
			(T1, [H1|M])
		%% Line 2850
		<'false'> when 'true' ->
		    %% Line 2851
		    call 'lists':'reverse'
			(T1, [H1|[H2M|M]])
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_8})
		  -| ['compiler_generated'] )
	      end
	  ( <_14,_13,_12,_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13,_12,_11,_10,_9})
		  -| [{'function_name',{'rufmerge2_2',6}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('lists')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('lists', _0)
end