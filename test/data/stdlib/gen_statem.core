module 'gen_statem' ['behaviour_info'/1,
		     'call'/2,
		     'call'/3,
		     'cast'/2,
		     'check_response'/2,
		     'enter_loop'/4,
		     'enter_loop'/5,
		     'enter_loop'/6,
		     'format_log'/1,
		     'format_log'/2,
		     'format_status'/2,
		     'init_it'/6,
		     'module_info'/0,
		     'module_info'/1,
		     'reply'/1,
		     'reply'/2,
		     'send_request'/2,
		     'start'/3,
		     'start'/4,
		     'start_link'/3,
		     'start_link'/4,
		     'start_monitor'/3,
		     'start_monitor'/4,
		     'stop'/1,
		     'stop'/3,
		     'system_code_change'/4,
		     'system_continue'/3,
		     'system_get_state'/1,
		     'system_replace_state'/2,
		     'system_terminate'/4,
		     'wait_response'/1,
		     'wait_response'/2,
		     'wakeup_from_hibernate'/3]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[103|[101|[110|[95|[115|[116|[97|[116|[101|[109|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],1}],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[47|[85|[115|[101|[114|[115|[47|[102|[101|[110|[103|[108|[101|[101|[47|[72|[97|[109|[108|[101|[114|[47|[111|[116|[112|[45|[79|[84|[80|[45|[50|[51|[46|[48|[45|[114|[99|[49|[47|[108|[105|[98|[47|[115|[116|[100|[108|[105|[98|[47|[46|[46|[47|[107|[101|[114|[110|[101|[108|[47|[105|[110|[99|[108|[117|[100|[101|[47|[108|[111|[103|[103|[101|[114|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 23
		'file' =
		    %% Line 23
		    [{[115|[114|[99|[47|[103|[101|[110|[95|[115|[116|[97|[116|[101|[109|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],23}],
		%% Line 60
		'export_type' =
		    %% Line 60
		    [{'event_type',0}|[{'callback_mode_result',0}|[{'init_result',1}|[{'state_enter_result',1}|[{'event_handler_result',1}|[{'reply_action',0}|[{'enter_action',0}|[{'action',0}]]]]]]]],
		%% Line 71
		'export_type' =
		    %% Line 71
		    [{'state_function_result',0}|[{'handle_event_result',0}]],
		%% Line 76
		'export_type' =
		    %% Line 76
		    [{'transition_option',0}],
		%% Line 79
		'export_type' =
		    %% Line 79
		    [{'server_name',0}|[{'server_ref',0}|[{'start_opt',0}|[{'start_ret',0}|[{'enter_loop_opt',0}]]]]],
		%% Line 90
		'type' =
		    %% Line 90
		    [{'from',{'type',91,'tuple',[{'ann_type',91,[{'var',91,'To'}|[{'type',91,'pid',[]}]]}|[{'ann_type',91,[{'var',91,'Tag'}|[{'type',91,'term',[]}]]}]]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{'state',{'type',94,'union',[{'user_type',94,'state_name',[]}|[{'type',95,'term',[]}]]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{'state_name',{'type',97,'atom',[]},[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{'data',{'type',99,'term',[]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'event_type',{'type',102,'union',[{'user_type',102,'external_event_type',[]}|[{'user_type',102,'timeout_event_type',[]}|[{'atom',102,'internal'}]]]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{'external_event_type',{'type',104,'union',[{'type',104,'tuple',[{'atom',104,'call'}|[{'ann_type',104,[{'var',104,'From'}|[{'user_type',104,'from',[]}]]}]]}|[{'atom',104,'cast'}|[{'atom',104,'info'}]]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'timeout_event_type',{'type',106,'union',[{'atom',106,'timeout'}|[{'type',106,'tuple',[{'atom',106,'timeout'}|[{'ann_type',106,[{'var',106,'Name'}|[{'type',106,'term',[]}]]}]]}|[{'atom',106,'state_timeout'}]]]},[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'callback_mode_result',{'type',109,'union',[{'user_type',109,'callback_mode',[]}|[{'type',109,'list',[{'type',109,'union',[{'user_type',109,'callback_mode',[]}|[{'user_type',109,'state_enter',[]}]]}]}]]},[]}],
		%% Line 110
		'type' =
		    %% Line 110
		    [{'callback_mode',{'type',110,'union',[{'atom',110,'state_functions'}|[{'atom',110,'handle_event_function'}]]},[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{'state_enter',{'atom',111,'state_enter'},[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{'transition_option',{'type',114,'union',[{'user_type',114,'postpone',[]}|[{'user_type',114,'hibernate',[]}|[{'user_type',115,'event_timeout',[]}|[{'user_type',115,'generic_timeout',[]}|[{'user_type',115,'state_timeout',[]}]]]]]},[]}],
		%% Line 116
		'type' =
		    %% Line 116
		    [{'postpone',{'type',119,'boolean',[]},[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{'hibernate',{'type',122,'boolean',[]},[]}],
		%% Line 123
		'type' =
		    %% Line 123
		    [{'event_timeout',{'ann_type',126,[{'var',126,'Time'}|[{'type',126,'union',[{'type',126,'timeout',[]}|[{'type',126,'integer',[]}]]}]]},[]}],
		%% Line 127
		'type' =
		    %% Line 127
		    [{'generic_timeout',{'ann_type',129,[{'var',129,'Time'}|[{'type',129,'union',[{'type',129,'timeout',[]}|[{'type',129,'integer',[]}]]}]]},[]}],
		%% Line 130
		'type' =
		    %% Line 130
		    [{'state_timeout',{'ann_type',133,[{'var',133,'Time'}|[{'type',133,'union',[{'type',133,'timeout',[]}|[{'type',133,'integer',[]}]]}]]},[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{'timeout_option',{'type',134,'tuple',[{'atom',134,'abs'}|[{'ann_type',134,[{'var',134,'Abs'}|[{'type',134,'boolean',[]}]]}]]},[]}],
		%% Line 136
		'type' =
		    %% Line 136
		    [{'action',{'type',151,'union',[{'atom',151,'postpone'}|[{'type',152,'tuple',[{'atom',152,'postpone'}|[{'ann_type',152,[{'var',152,'Postpone'}|[{'user_type',152,'postpone',[]}]]}]]}|[{'type',157,'tuple',[{'atom',157,'next_event'}|[{'ann_type',158,[{'var',158,'EventType'}|[{'user_type',158,'event_type',[]}]]}|[{'ann_type',159,[{'var',159,'EventContent'}|[{'type',159,'term',[]}]]}]]]}|[{'type',160,'tuple',[{'atom',160,'change_callback_module'}|[{'ann_type',160,[{'var',160,'NewModule'}|[{'type',160,'module',[]}]]}]]}|[{'user_type',161,'enter_action',[]}]]]]]},[]}],
		%% Line 162
		'type' =
		    %% Line 162
		    [{'enter_action',{'type',163,'union',[{'atom',163,'hibernate'}|[{'type',164,'tuple',[{'atom',164,'hibernate'}|[{'ann_type',164,[{'var',164,'Hibernate'}|[{'user_type',164,'hibernate',[]}]]}]]}|[{'user_type',165,'timeout_action',[]}|[{'user_type',166,'reply_action',[]}]]]]},[]}],
		%% Line 167
		'type' =
		    %% Line 167
		    [{'timeout_action',{'type',168,'union',[{'ann_type',168,[{'var',168,'Time'}|[{'user_type',168,'event_timeout',[]}]]}|[{'type',169,'tuple',[{'atom',169,'timeout'}|[{'ann_type',170,[{'var',170,'Time'}|[{'user_type',170,'event_timeout',[]}]]}|[{'ann_type',170,[{'var',170,'EventContent'}|[{'type',170,'term',[]}]]}]]]}|[{'type',171,'tuple',[{'atom',171,'timeout'}|[{'ann_type',172,[{'var',172,'Time'}|[{'user_type',172,'event_timeout',[]}]]}|[{'ann_type',173,[{'var',173,'EventContent'}|[{'type',173,'term',[]}]]}|[{'ann_type',174,[{'var',174,'Options'}|[{'type',174,'union',[{'user_type',174,'timeout_option',[]}|[{'type',174,'list',[{'user_type',174,'timeout_option',[]}]}]]}]]}]]]]}|[{'type',176,'tuple',[{'type',176,'tuple',[{'atom',176,'timeout'}|[{'ann_type',176,[{'var',176,'Name'}|[{'type',176,'term',[]}]]}]]}|[{'ann_type',177,[{'var',177,'Time'}|[{'user_type',177,'generic_timeout',[]}]]}|[{'ann_type',177,[{'var',177,'EventContent'}|[{'type',177,'term',[]}]]}]]]}|[{'type',178,'tuple',[{'type',178,'tuple',[{'atom',178,'timeout'}|[{'ann_type',178,[{'var',178,'Name'}|[{'type',178,'term',[]}]]}]]}|[{'ann_type',179,[{'var',179,'Time'}|[{'user_type',179,'generic_timeout',[]}]]}|[{'ann_type',180,[{'var',180,'EventContent'}|[{'type',180,'term',[]}]]}|[{'ann_type',181,[{'var',181,'Options'}|[{'type',181,'union',[{'user_type',181,'timeout_option',[]}|[{'type',181,'list',[{'user_type',181,'timeout_option',[]}]}]]}]]}]]]]}|[{'type',183,'tuple',[{'atom',183,'state_timeout'}|[{'ann_type',184,[{'var',184,'Time'}|[{'user_type',184,'state_timeout',[]}]]}|[{'ann_type',184,[{'var',184,'EventContent'}|[{'type',184,'term',[]}]]}]]]}|[{'type',185,'tuple',[{'atom',185,'state_timeout'}|[{'ann_type',186,[{'var',186,'Time'}|[{'user_type',186,'state_timeout',[]}]]}|[{'ann_type',187,[{'var',187,'EventContent'}|[{'type',187,'term',[]}]]}|[{'ann_type',188,[{'var',188,'Options'}|[{'type',188,'union',[{'user_type',188,'timeout_option',[]}|[{'type',188,'list',[{'user_type',188,'timeout_option',[]}]}]]}]]}]]]]}|[{'user_type',189,'timeout_cancel_action',[]}|[{'user_type',190,'timeout_update_action',[]}]]]]]]]]]},[]}],
		%% Line 191
		'type' =
		    %% Line 191
		    [{'timeout_cancel_action',{'type',192,'union',[{'type',192,'tuple',[{'atom',192,'timeout'}|[{'atom',192,'cancel'}]]}|[{'type',193,'tuple',[{'type',193,'tuple',[{'atom',193,'timeout'}|[{'ann_type',193,[{'var',193,'Name'}|[{'type',193,'term',[]}]]}]]}|[{'atom',193,'cancel'}]]}|[{'type',194,'tuple',[{'atom',194,'state_timeout'}|[{'atom',194,'cancel'}]]}]]]},[]}],
		%% Line 195
		'type' =
		    %% Line 195
		    [{'timeout_update_action',{'type',196,'union',[{'type',196,'tuple',[{'atom',196,'timeout'}|[{'atom',196,'update'}|[{'ann_type',196,[{'var',196,'EventContent'}|[{'type',196,'term',[]}]]}]]]}|[{'type',197,'tuple',[{'type',197,'tuple',[{'atom',197,'timeout'}|[{'ann_type',197,[{'var',197,'Name'}|[{'type',197,'term',[]}]]}]]}|[{'atom',197,'update'}|[{'ann_type',197,[{'var',197,'EventContent'}|[{'type',197,'term',[]}]]}]]]}|[{'type',198,'tuple',[{'atom',198,'state_timeout'}|[{'atom',198,'update'}|[{'ann_type',198,[{'var',198,'EventContent'}|[{'type',198,'term',[]}]]}]]]}]]]},[]}],
		%% Line 199
		'type' =
		    %% Line 199
		    [{'reply_action',{'type',200,'tuple',[{'atom',200,'reply'}|[{'ann_type',201,[{'var',201,'From'}|[{'user_type',201,'from',[]}]]}|[{'ann_type',201,[{'var',201,'Reply'}|[{'type',201,'term',[]}]]}]]]},[]}],
		%% Line 203
		'type' =
		    %% Line 203
		    [{'init_result',{'type',204,'union',[{'type',204,'tuple',[{'atom',204,'ok'}|[{'ann_type',204,[{'var',204,'State'}|[{'var',204,'StateType'}]]}|[{'ann_type',204,[{'var',204,'Data'}|[{'user_type',204,'data',[]}]]}]]]}|[{'type',205,'tuple',[{'atom',205,'ok'}|[{'ann_type',205,[{'var',205,'State'}|[{'var',205,'StateType'}]]}|[{'ann_type',205,[{'var',205,'Data'}|[{'user_type',205,'data',[]}]]}|[{'ann_type',206,[{'var',206,'Actions'}|[{'type',206,'union',[{'type',206,'list',[{'user_type',206,'action',[]}]}|[{'user_type',206,'action',[]}]]}]]}]]]]}|[{'atom',207,'ignore'}|[{'type',208,'tuple',[{'atom',208,'stop'}|[{'ann_type',208,[{'var',208,'Reason'}|[{'type',208,'term',[]}]]}]]}]]]]},[{'var',203,'StateType'}]}],
		%% Line 211
		'type' =
		    %% Line 211
		    [{'state_function_result',{'user_type',212,'event_handler_result',[{'user_type',212,'state_name',[]}]},[]}],
		%% Line 213
		'type' =
		    %% Line 213
		    [{'handle_event_result',{'user_type',214,'event_handler_result',[{'user_type',214,'state',[]}]},[]}],
		%% Line 216
		'type' =
		    %% Line 216
		    [{'state_enter_result',{'type',217,'union',[{'type',217,'tuple',[{'atom',217,'next_state'}|[{'var',218,'State'}|[{'ann_type',219,[{'var',219,'NewData'}|[{'user_type',219,'data',[]}]]}]]]}|[{'type',220,'tuple',[{'atom',220,'next_state'}|[{'var',221,'State'}|[{'ann_type',222,[{'var',222,'NewData'}|[{'user_type',222,'data',[]}]]}|[{'ann_type',223,[{'var',223,'Actions'}|[{'type',223,'union',[{'type',223,'list',[{'user_type',223,'enter_action',[]}]}|[{'user_type',223,'enter_action',[]}]]}]]}]]]]}|[{'user_type',224,'state_callback_result',[{'user_type',224,'enter_action',[]}]}]]]},[{'var',216,'State'}]}],
		%% Line 225
		'type' =
		    %% Line 225
		    [{'event_handler_result',{'type',226,'union',[{'type',226,'tuple',[{'atom',226,'next_state'}|[{'ann_type',227,[{'var',227,'NextState'}|[{'var',227,'StateType'}]]}|[{'ann_type',228,[{'var',228,'NewData'}|[{'user_type',228,'data',[]}]]}]]]}|[{'type',229,'tuple',[{'atom',229,'next_state'}|[{'ann_type',230,[{'var',230,'NextState'}|[{'var',230,'StateType'}]]}|[{'ann_type',231,[{'var',231,'NewData'}|[{'user_type',231,'data',[]}]]}|[{'ann_type',232,[{'var',232,'Actions'}|[{'type',232,'union',[{'type',232,'list',[{'user_type',232,'action',[]}]}|[{'user_type',232,'action',[]}]]}]]}]]]]}|[{'user_type',233,'state_callback_result',[{'user_type',233,'action',[]}]}]]]},[{'var',225,'StateType'}]}],
		%% Line 234
		'type' =
		    %% Line 234
		    [{'state_callback_result',{'type',235,'union',[{'type',235,'tuple',[{'atom',235,'keep_state'}|[{'ann_type',236,[{'var',236,'NewData'}|[{'user_type',236,'data',[]}]]}]]}|[{'type',237,'tuple',[{'atom',237,'keep_state'}|[{'ann_type',238,[{'var',238,'NewData'}|[{'user_type',238,'data',[]}]]}|[{'ann_type',239,[{'var',239,'Actions'}|[{'type',239,'union',[{'type',239,'list',[{'var',239,'ActionType'}]}|[{'var',239,'ActionType'}]]}]]}]]]}|[{'atom',240,'keep_state_and_data'}|[{'type',241,'tuple',[{'atom',241,'keep_state_and_data'}|[{'ann_type',242,[{'var',242,'Actions'}|[{'type',242,'union',[{'type',242,'list',[{'var',242,'ActionType'}]}|[{'var',242,'ActionType'}]]}]]}]]}|[{'type',244,'tuple',[{'atom',244,'repeat_state'}|[{'ann_type',245,[{'var',245,'NewData'}|[{'user_type',245,'data',[]}]]}]]}|[{'type',246,'tuple',[{'atom',246,'repeat_state'}|[{'ann_type',247,[{'var',247,'NewData'}|[{'user_type',247,'data',[]}]]}|[{'ann_type',248,[{'var',248,'Actions'}|[{'type',248,'union',[{'type',248,'list',[{'var',248,'ActionType'}]}|[{'var',248,'ActionType'}]]}]]}]]]}|[{'atom',249,'repeat_state_and_data'}|[{'type',250,'tuple',[{'atom',250,'repeat_state_and_data'}|[{'ann_type',251,[{'var',251,'Actions'}|[{'type',251,'union',[{'type',251,'list',[{'var',251,'ActionType'}]}|[{'var',251,'ActionType'}]]}]]}]]}|[{'atom',253,'stop'}|[{'type',254,'tuple',[{'atom',254,'stop'}|[{'ann_type',255,[{'var',255,'Reason'}|[{'type',255,'term',[]}]]}]]}|[{'type',256,'tuple',[{'atom',256,'stop'}|[{'ann_type',257,[{'var',257,'Reason'}|[{'type',257,'term',[]}]]}|[{'ann_type',258,[{'var',258,'NewData'}|[{'user_type',258,'data',[]}]]}]]]}|[{'type',260,'tuple',[{'atom',260,'stop_and_reply'}|[{'ann_type',261,[{'var',261,'Reason'}|[{'type',261,'term',[]}]]}|[{'ann_type',262,[{'var',262,'Replies'}|[{'type',262,'union',[{'type',262,'list',[{'user_type',262,'reply_action',[]}]}|[{'user_type',262,'reply_action',[]}]]}]]}]]]}|[{'type',263,'tuple',[{'atom',263,'stop_and_reply'}|[{'ann_type',264,[{'var',264,'Reason'}|[{'type',264,'term',[]}]]}|[{'ann_type',265,[{'var',265,'Replies'}|[{'type',265,'union',[{'type',265,'list',[{'user_type',265,'reply_action',[]}]}|[{'user_type',265,'reply_action',[]}]]}]]}|[{'ann_type',266,[{'var',266,'NewData'}|[{'user_type',266,'data',[]}]]}]]]]}]]]]]]]]]]]]]},[{'var',234,'ActionType'}]}],
		%% Line 268
		'type' =
		    %% Line 268
		    [{'request_id',{'type',268,'term',[]},[]}],
		%% Line 274
		'callback' =
		    %% Line 274
		    [{{'init',1},[{'type',274,'fun',[{'type',274,'product',[{'ann_type',274,[{'var',274,'Args'}|[{'type',274,'term',[]}]]}]}|[{'user_type',274,'init_result',[{'user_type',274,'state',[]}]}]]}]}],
		%% Line 280
		'callback' =
		    %% Line 280
		    [{{'callback_mode',0},[{'type',280,'fun',[{'type',280,'product',[]}|[{'user_type',280,'callback_mode_result',[]}]]}]}],
		%% Line 290
		'callback' =
		    %% Line 290
		    [{{'state_name',3},[{'type',290,'fun',[{'type',290,'product',[{'atom',291,'enter'}|[{'ann_type',292,[{'var',292,'OldStateName'}|[{'user_type',292,'state_name',[]}]]}|[{'ann_type',293,[{'var',293,'Data'}|[{'user_type',293,'data',[]}]]}]]]}|[{'user_type',294,'state_enter_result',[{'atom',294,'state_name'}]}]]}|[{'type',295,'fun',[{'type',295,'product',[{'user_type',295,'event_type',[]}|[{'ann_type',296,[{'var',296,'EventContent'}|[{'type',296,'term',[]}]]}|[{'ann_type',297,[{'var',297,'Data'}|[{'user_type',297,'data',[]}]]}]]]}|[{'user_type',298,'event_handler_result',[{'user_type',298,'state_name',[]}]}]]}]]}],
		%% Line 302
		'callback' =
		    %% Line 302
		    [{{'handle_event',4},[{'type',302,'fun',[{'type',302,'product',[{'atom',303,'enter'}|[{'ann_type',304,[{'var',304,'OldState'}|[{'user_type',304,'state',[]}]]}|[{'var',305,'State'}|[{'ann_type',306,[{'var',306,'Data'}|[{'user_type',306,'data',[]}]]}]]]]}|[{'user_type',307,'state_enter_result',[{'var',307,'State'}]}]]}|[{'type',308,'fun',[{'type',308,'product',[{'user_type',308,'event_type',[]}|[{'ann_type',309,[{'var',309,'EventContent'}|[{'type',309,'term',[]}]]}|[{'ann_type',310,[{'var',310,'State'}|[{'user_type',310,'state',[]}]]}|[{'ann_type',311,[{'var',311,'Data'}|[{'user_type',311,'data',[]}]]}]]]]}|[{'user_type',312,'event_handler_result',[{'user_type',312,'state',[]}]}]]}]]}],
		%% Line 315
		'callback' =
		    %% Line 315
		    [{{'terminate',3},[{'type',315,'fun',[{'type',315,'product',[{'ann_type',316,[{'var',316,'Reason'}|[{'type',316,'union',[{'atom',316,'normal'}|[{'atom',316,'shutdown'}|[{'type',316,'tuple',[{'atom',316,'shutdown'}|[{'type',316,'term',[]}]]}|[{'type',317,'term',[]}]]]]}]]}|[{'ann_type',318,[{'var',318,'State'}|[{'user_type',318,'state',[]}]]}|[{'ann_type',319,[{'var',319,'Data'}|[{'user_type',319,'data',[]}]]}]]]}|[{'type',320,'any',[]}]]}]}],
		%% Line 325
		'callback' =
		    %% Line 325
		    [{{'code_change',4},[{'type',325,'fun',[{'type',325,'product',[{'ann_type',326,[{'var',326,'OldVsn'}|[{'type',326,'union',[{'type',326,'term',[]}|[{'type',326,'tuple',[{'atom',326,'down'}|[{'type',326,'term',[]}]]}]]}]]}|[{'ann_type',327,[{'var',327,'OldState'}|[{'user_type',327,'state',[]}]]}|[{'ann_type',328,[{'var',328,'OldData'}|[{'user_type',328,'data',[]}]]}|[{'ann_type',329,[{'var',329,'Extra'}|[{'type',329,'term',[]}]]}]]]]}|[{'type',330,'union',[{'type',330,'tuple',[{'atom',330,'ok'}|[{'ann_type',330,[{'var',330,'NewState'}|[{'user_type',330,'state',[]}]]}|[{'ann_type',330,[{'var',330,'NewData'}|[{'user_type',330,'data',[]}]]}]]]}|[{'ann_type',331,[{'var',331,'Reason'}|[{'type',331,'term',[]}]]}]]}]]}]}],
		%% Line 337
		'callback' =
		    %% Line 337
		    [{{'format_status',2},[{'type',337,'bounded_fun',[{'type',337,'fun',[{'type',337,'product',[{'var',338,'StatusOption'}|[{'type',339,'list',[{'type',339,'union',[{'type',339,'list',[{'type',339,'tuple',[{'ann_type',339,[{'var',339,'Key'}|[{'type',339,'term',[]}]]}|[{'ann_type',339,[{'var',339,'Value'}|[{'type',339,'term',[]}]]}]]}]}|[{'user_type',340,'state',[]}|[{'user_type',341,'data',[]}]]]}]}]]}|[{'ann_type',342,[{'var',342,'Status'}|[{'type',342,'term',[]}]]}]]}|[[{'type',343,'constraint',[{'atom',343,'is_subtype'}|[[{'var',343,'StatusOption'}|[{'type',343,'union',[{'atom',343,'normal'}|[{'atom',343,'terminate'}]]}]]]]}]]]}]}],
		%% Line 345
		'optional_callbacks' =
		    %% Line 345
		    [{'format_status',2}|[{'terminate',3}|[{'code_change',4}|[{'state_name',3}|[{'handle_event',4}]]]]],
		%% Line 363
		'compile' =
		    %% Line 363
		    [{'inline',[{'callback_mode',1}|[{'state_enter',1}|[{'event_type',1}|[{'from',1}|[{'timeout_event_type',1}]]]]]}],
		%% Line 431
		'record' =
		    %% Line 431
		    [{'params',[{'typed_record_field',{'record_field',432,{'atom',432,'callback_mode'},{'atom',432,'undefined'}},{'type',432,'union',[{'user_type',432,'callback_mode',[]}|[{'atom',432,'undefined'}]]}}|[{'typed_record_field',{'record_field',433,{'atom',433,'state_enter'},{'atom',433,'false'}},{'type',433,'boolean',[]}}|[{'typed_record_field',{'record_field',434,{'atom',434,'parent'}},{'type',434,'pid',[]}}|[{'typed_record_field',{'record_field',435,{'atom',435,'module'}},{'type',435,'atom',[]}}|[{'typed_record_field',{'record_field',436,{'atom',436,'name'}},{'type',436,'union',[{'type',436,'atom',[]}|[{'type',436,'pid',[]}]]}}|[{'typed_record_field',{'record_field',437,{'atom',437,'hibernate_after'},{'atom',437,'infinity'}},{'type',437,'timeout',[]}}]]]]]]}],
		%% Line 440
		'record' =
		    %% Line 440
		    [{'state',[{'typed_record_field',{'record_field',441,{'atom',441,'state_data'},{'tuple',441,[{'atom',441,'undefined'}|[{'atom',441,'undefined'}]]}},{'type',442,'tuple',[{'ann_type',442,[{'var',442,'State'}|[{'type',442,'term',[]}]]}|[{'ann_type',442,[{'var',442,'Data'}|[{'type',442,'term',[]}]]}]]}}|[{'typed_record_field',{'record_field',443,{'atom',443,'postponed'},{'nil',443}},{'type',443,'list',[{'type',443,'tuple',[{'user_type',443,'event_type',[]}|[{'type',443,'term',[]}]]}]}}|[{'typed_record_field',{'record_field',444,{'atom',444,'timers'},{'map',444,[]}},{'type',445,'map',[{'type',445,'map_field_assoc',[{'ann_type',445,[{'var',445,'TimeoutType'}|[{'user_type',445,'timeout_event_type',[]}]]}|[{'type',446,'tuple',[{'ann_type',446,[{'var',446,'TimerRef'}|[{'type',446,'reference',[]}]]}|[{'ann_type',446,[{'var',446,'TimeoutMsg'}|[{'type',446,'term',[]}]]}]]}]]}]}}|[{'typed_record_field',{'record_field',447,{'atom',447,'hibernate'},{'atom',447,'false'}},{'type',447,'boolean',[]}}]]]]}],
		%% Line 453
		'type' =
		    %% Line 453
		    [{'server_name',{'type',454,'union',[{'type',454,'tuple',[{'atom',454,'global'}|[{'ann_type',454,[{'var',454,'GlobalName'}|[{'type',454,'term',[]}]]}]]}|[{'type',455,'tuple',[{'atom',455,'via'}|[{'ann_type',455,[{'var',455,'RegMod'}|[{'type',455,'module',[]}]]}|[{'ann_type',455,[{'var',455,'Name'}|[{'type',455,'term',[]}]]}]]]}|[{'type',456,'tuple',[{'atom',456,'local'}|[{'type',456,'atom',[]}]]}]]]},[]}],
		%% Line 457
		'type' =
		    %% Line 457
		    [{'server_ref',{'type',458,'union',[{'type',458,'pid',[]}|[{'ann_type',459,[{'var',459,'LocalName'}|[{'type',459,'atom',[]}]]}|[{'type',460,'tuple',[{'ann_type',460,[{'var',460,'Name'}|[{'type',460,'atom',[]}]]}|[{'ann_type',460,[{'var',460,'Node'}|[{'type',460,'atom',[]}]]}]]}|[{'type',461,'tuple',[{'atom',461,'global'}|[{'ann_type',461,[{'var',461,'GlobalName'}|[{'type',461,'term',[]}]]}]]}|[{'type',462,'tuple',[{'atom',462,'via'}|[{'ann_type',462,[{'var',462,'RegMod'}|[{'type',462,'module',[]}]]}|[{'ann_type',462,[{'var',462,'ViaName'}|[{'type',462,'term',[]}]]}]]]}]]]]]},[]}],
		%% Line 463
		'type' =
		    %% Line 463
		    [{'start_opt',{'type',464,'union',[{'type',464,'tuple',[{'atom',464,'timeout'}|[{'ann_type',464,[{'var',464,'Time'}|[{'type',464,'timeout',[]}]]}]]}|[{'type',465,'tuple',[{'atom',465,'spawn_opt'}|[{'type',465,'list',[{'remote_type',465,[{'atom',465,'proc_lib'}|[{'atom',465,'start_spawn_option'}|[[]]]]}]}]]}|[{'user_type',466,'enter_loop_opt',[]}]]]},[]}],
		%% Line 467
		'type' =
		    %% Line 467
		    [{'start_ret',{'type',468,'union',[{'type',468,'tuple',[{'atom',468,'ok'}|[{'type',468,'pid',[]}]]}|[{'atom',469,'ignore'}|[{'type',470,'tuple',[{'atom',470,'error'}|[{'type',470,'term',[]}]]}]]]},[]}],
		%% Line 471
		'type' =
		    %% Line 471
		    [{'start_mon_ret',{'type',472,'union',[{'type',472,'tuple',[{'atom',472,'ok'}|[{'type',472,'tuple',[{'type',472,'pid',[]}|[{'type',472,'reference',[]}]]}]]}|[{'atom',473,'ignore'}|[{'type',474,'tuple',[{'atom',474,'error'}|[{'type',474,'term',[]}]]}]]]},[]}],
		%% Line 475
		'type' =
		    %% Line 475
		    [{'enter_loop_opt',{'type',476,'union',[{'type',476,'tuple',[{'atom',476,'hibernate_after'}|[{'ann_type',476,[{'var',476,'HibernateAfterTimeout'}|[{'type',476,'timeout',[]}]]}]]}|[{'type',477,'tuple',[{'atom',477,'debug'}|[{'ann_type',477,[{'var',477,'Dbgs'}|[{'type',477,'list',[{'remote_type',477,[{'atom',477,'sys'}|[{'atom',477,'debug_option'}|[[]]]]}]}]]}]]}]]},[]}],
		%% Line 482
		'spec' =
		    %% Line 482
		    [{{'start',3},[{'type',482,'fun',[{'type',482,'product',[{'ann_type',483,[{'var',483,'Module'}|[{'type',483,'module',[]}]]}|[{'ann_type',483,[{'var',483,'Args'}|[{'type',483,'term',[]}]]}|[{'ann_type',483,[{'var',483,'Opts'}|[{'type',483,'list',[{'user_type',483,'start_opt',[]}]}]]}]]]}|[{'user_type',484,'start_ret',[]}]]}]}],
		%% Line 488
		'spec' =
		    %% Line 488
		    [{{'start',4},[{'type',488,'fun',[{'type',488,'product',[{'ann_type',489,[{'var',489,'ServerName'}|[{'user_type',489,'server_name',[]}]]}|[{'ann_type',490,[{'var',490,'Module'}|[{'type',490,'module',[]}]]}|[{'ann_type',490,[{'var',490,'Args'}|[{'type',490,'term',[]}]]}|[{'ann_type',490,[{'var',490,'Opts'}|[{'type',490,'list',[{'user_type',490,'start_opt',[]}]}]]}]]]]}|[{'user_type',491,'start_ret',[]}]]}]}],
		%% Line 496
		'spec' =
		    %% Line 496
		    [{{'start_link',3},[{'type',496,'fun',[{'type',496,'product',[{'ann_type',497,[{'var',497,'Module'}|[{'type',497,'module',[]}]]}|[{'ann_type',497,[{'var',497,'Args'}|[{'type',497,'term',[]}]]}|[{'ann_type',497,[{'var',497,'Opts'}|[{'type',497,'list',[{'user_type',497,'start_opt',[]}]}]]}]]]}|[{'user_type',498,'start_ret',[]}]]}]}],
		%% Line 502
		'spec' =
		    %% Line 502
		    [{{'start_link',4},[{'type',502,'fun',[{'type',502,'product',[{'ann_type',503,[{'var',503,'ServerName'}|[{'user_type',503,'server_name',[]}]]}|[{'ann_type',504,[{'var',504,'Module'}|[{'type',504,'module',[]}]]}|[{'ann_type',504,[{'var',504,'Args'}|[{'type',504,'term',[]}]]}|[{'ann_type',504,[{'var',504,'Opts'}|[{'type',504,'list',[{'user_type',504,'start_opt',[]}]}]]}]]]]}|[{'user_type',505,'start_ret',[]}]]}]}],
		%% Line 510
		'spec' =
		    %% Line 510
		    [{{'start_monitor',3},[{'type',510,'fun',[{'type',510,'product',[{'ann_type',511,[{'var',511,'Module'}|[{'type',511,'module',[]}]]}|[{'ann_type',511,[{'var',511,'Args'}|[{'type',511,'term',[]}]]}|[{'ann_type',511,[{'var',511,'Opts'}|[{'type',511,'list',[{'user_type',511,'start_opt',[]}]}]]}]]]}|[{'user_type',512,'start_mon_ret',[]}]]}]}],
		%% Line 516
		'spec' =
		    %% Line 516
		    [{{'start_monitor',4},[{'type',516,'fun',[{'type',516,'product',[{'ann_type',517,[{'var',517,'ServerName'}|[{'user_type',517,'server_name',[]}]]}|[{'ann_type',518,[{'var',518,'Module'}|[{'type',518,'module',[]}]]}|[{'ann_type',518,[{'var',518,'Args'}|[{'type',518,'term',[]}]]}|[{'ann_type',518,[{'var',518,'Opts'}|[{'type',518,'list',[{'user_type',518,'start_opt',[]}]}]]}]]]]}|[{'user_type',519,'start_mon_ret',[]}]]}]}],
		%% Line 524
		'spec' =
		    %% Line 524
		    [{{'stop',1},[{'type',524,'fun',[{'type',524,'product',[{'ann_type',524,[{'var',524,'ServerRef'}|[{'user_type',524,'server_ref',[]}]]}]}|[{'atom',524,'ok'}]]}]}],
		%% Line 528
		'spec' =
		    %% Line 528
		    [{{'stop',3},[{'type',528,'fun',[{'type',528,'product',[{'ann_type',529,[{'var',529,'ServerRef'}|[{'user_type',529,'server_ref',[]}]]}|[{'ann_type',530,[{'var',530,'Reason'}|[{'type',530,'term',[]}]]}|[{'ann_type',531,[{'var',531,'Timeout'}|[{'type',531,'timeout',[]}]]}]]]}|[{'atom',531,'ok'}]]}]}],
		%% Line 536
		'spec' =
		    %% Line 536
		    [{{'cast',2},[{'type',536,'fun',[{'type',536,'product',[{'ann_type',536,[{'var',536,'ServerRef'}|[{'user_type',536,'server_ref',[]}]]}|[{'ann_type',536,[{'var',536,'Msg'}|[{'type',536,'term',[]}]]}]]}|[{'atom',536,'ok'}]]}]}],
		%% Line 558
		'spec' =
		    %% Line 558
		    [{{'call',2},[{'type',558,'fun',[{'type',558,'product',[{'ann_type',558,[{'var',558,'ServerRef'}|[{'user_type',558,'server_ref',[]}]]}|[{'ann_type',558,[{'var',558,'Request'}|[{'type',558,'term',[]}]]}]]}|[{'ann_type',558,[{'var',558,'Reply'}|[{'type',558,'term',[]}]]}]]}]}],
		%% Line 562
		'spec' =
		    %% Line 562
		    [{{'call',3},[{'type',562,'fun',[{'type',562,'product',[{'ann_type',563,[{'var',563,'ServerRef'}|[{'user_type',563,'server_ref',[]}]]}|[{'ann_type',564,[{'var',564,'Request'}|[{'type',564,'term',[]}]]}|[{'ann_type',565,[{'var',565,'Timeout'}|[{'type',566,'union',[{'type',566,'timeout',[]}|[{'type',567,'tuple',[{'atom',567,'clean_timeout'}|[{'ann_type',567,[{'var',567,'T'}|[{'type',567,'timeout',[]}]]}]]}|[{'type',568,'tuple',[{'atom',568,'dirty_timeout'}|[{'ann_type',568,[{'var',568,'T'}|[{'type',568,'timeout',[]}]]}]]}]]]}]]}]]]}|[{'ann_type',569,[{'var',569,'Reply'}|[{'type',569,'term',[]}]]}]]}]}],
		%% Line 581
		'spec' =
		    %% Line 581
		    [{{'send_request',2},[{'type',581,'fun',[{'type',581,'product',[{'ann_type',581,[{'var',581,'ServerRef'}|[{'user_type',581,'server_ref',[]}]]}|[{'ann_type',581,[{'var',581,'Request'}|[{'type',581,'term',[]}]]}]]}|[{'ann_type',582,[{'var',582,'RequestId'}|[{'user_type',582,'request_id',[]}]]}]]}]}],
		%% Line 586
		'spec' =
		    %% Line 586
		    [{{'wait_response',1},[{'type',586,'fun',[{'type',586,'product',[{'ann_type',586,[{'var',586,'RequestId'}|[{'user_type',586,'request_id',[]}]]}]}|[{'type',587,'union',[{'type',587,'tuple',[{'atom',587,'reply'}|[{'ann_type',587,[{'var',587,'Reply'}|[{'type',587,'term',[]}]]}]]}|[{'type',587,'tuple',[{'atom',587,'error'}|[{'type',587,'tuple',[{'type',587,'term',[]}|[{'user_type',587,'server_ref',[]}]]}]]}]]}]]}]}],
		%% Line 591
		'spec' =
		    %% Line 591
		    [{{'wait_response',2},[{'type',591,'fun',[{'type',591,'product',[{'ann_type',591,[{'var',591,'RequestId'}|[{'user_type',591,'request_id',[]}]]}|[{'type',591,'timeout',[]}]]}|[{'type',592,'union',[{'type',592,'tuple',[{'atom',592,'reply'}|[{'ann_type',592,[{'var',592,'Reply'}|[{'type',592,'term',[]}]]}]]}|[{'atom',592,'timeout'}|[{'type',592,'tuple',[{'atom',592,'error'}|[{'type',592,'tuple',[{'type',592,'term',[]}|[{'user_type',592,'server_ref',[]}]]}]]}]]]}]]}]}],
		%% Line 596
		'spec' =
		    %% Line 596
		    [{{'check_response',2},[{'type',596,'fun',[{'type',596,'product',[{'ann_type',596,[{'var',596,'Msg'}|[{'type',596,'term',[]}]]}|[{'ann_type',596,[{'var',596,'RequestId'}|[{'user_type',596,'request_id',[]}]]}]]}|[{'type',597,'union',[{'type',597,'tuple',[{'atom',597,'reply'}|[{'ann_type',597,[{'var',597,'Reply'}|[{'type',597,'term',[]}]]}]]}|[{'atom',597,'no_reply'}|[{'type',597,'tuple',[{'atom',597,'error'}|[{'type',597,'tuple',[{'type',597,'term',[]}|[{'user_type',597,'server_ref',[]}]]}]]}]]]}]]}]}],
		%% Line 602
		'spec' =
		    %% Line 602
		    [{{'reply',1},[{'type',602,'fun',[{'type',602,'product',[{'type',602,'union',[{'type',602,'list',[{'user_type',602,'reply_action',[]}]}|[{'user_type',602,'reply_action',[]}]]}]}|[{'atom',602,'ok'}]]}]}],
		%% Line 608
		'compile' =
		    %% Line 608
		    [{'inline',[{'reply',2}]}],
		%% Line 609
		'spec' =
		    %% Line 609
		    [{{'reply',2},[{'type',609,'fun',[{'type',609,'product',[{'ann_type',609,[{'var',609,'From'}|[{'user_type',609,'from',[]}]]}|[{'ann_type',609,[{'var',609,'Reply'}|[{'type',609,'term',[]}]]}]]}|[{'atom',609,'ok'}]]}]}],
		%% Line 623
		'spec' =
		    %% Line 623
		    [{{'enter_loop',4},[{'type',623,'fun',[{'type',623,'product',[{'ann_type',624,[{'var',624,'Module'}|[{'type',624,'module',[]}]]}|[{'ann_type',624,[{'var',624,'Opts'}|[{'type',624,'list',[{'user_type',624,'enter_loop_opt',[]}]}]]}|[{'ann_type',625,[{'var',625,'State'}|[{'user_type',625,'state',[]}]]}|[{'ann_type',625,[{'var',625,'Data'}|[{'user_type',625,'data',[]}]]}]]]]}|[{'type',626,'no_return',[]}]]}]}],
		%% Line 630
		'spec' =
		    %% Line 630
		    [{{'enter_loop',5},[{'type',630,'fun',[{'type',630,'product',[{'ann_type',631,[{'var',631,'Module'}|[{'type',631,'module',[]}]]}|[{'ann_type',631,[{'var',631,'Opts'}|[{'type',631,'list',[{'user_type',631,'enter_loop_opt',[]}]}]]}|[{'ann_type',632,[{'var',632,'State'}|[{'user_type',632,'state',[]}]]}|[{'ann_type',632,[{'var',632,'Data'}|[{'user_type',632,'data',[]}]]}|[{'ann_type',633,[{'var',633,'Server_or_Actions'}|[{'type',634,'union',[{'user_type',634,'server_name',[]}|[{'type',634,'pid',[]}|[{'type',634,'list',[{'user_type',634,'action',[]}]}]]]}]]}]]]]]}|[{'type',635,'no_return',[]}]]}]}],
		%% Line 644
		'spec' =
		    %% Line 644
		    [{{'enter_loop',6},[{'type',644,'fun',[{'type',644,'product',[{'ann_type',645,[{'var',645,'Module'}|[{'type',645,'module',[]}]]}|[{'ann_type',645,[{'var',645,'Opts'}|[{'type',645,'list',[{'user_type',645,'enter_loop_opt',[]}]}]]}|[{'ann_type',646,[{'var',646,'State'}|[{'user_type',646,'state',[]}]]}|[{'ann_type',646,[{'var',646,'Data'}|[{'user_type',646,'data',[]}]]}|[{'ann_type',647,[{'var',647,'Server'}|[{'type',647,'union',[{'user_type',647,'server_name',[]}|[{'type',647,'pid',[]}]]}]]}|[{'ann_type',648,[{'var',648,'Actions'}|[{'type',648,'union',[{'type',648,'list',[{'user_type',648,'action',[]}]}|[{'user_type',648,'action',[]}]]}]]}]]]]]]}|[{'type',649,'no_return',[]}]]}]}],
		%% Line 663
		'compile' =
		    %% Line 663
		    [{'inline',[{'wrap_cast',1}]}],
		%% Line 886
		'compile' =
		    %% Line 886
		    [{'inline',{'update_parent',2}}],
		%% Line 1090
		'compile' =
		    %% Line 1090
		    [{'inline',[{'loop_event_handler',5}]}],
		%% Line 1409
		'compile' =
		    %% Line 1409
		    [{'inline',[{'loop_actions',10}]}],
		%% Line 2733
		'compile' =
		    %% Line 2733
		    [{'inline',[{'listify',1}]}],
		%% Line 2756
		'compile' =
		    %% Line 2756
		    [{'inline',[{'cancel_timer',1}]}],
		%% Line 2769
		'compile' =
		    %% Line 2769
		    [{'inline',[{'cancel_timer',3}]}],
		%% Line 2776
		'compile' =
		    %% Line 2776
		    [{'inline',[{'cancel_timer',2}]}]]
'callback_mode'/1 =
    %% Line 368
    fun (_0) ->
	%% Line 369
	case _0 of
	  %% Line 370
	  <'state_functions'> when 'true' ->
	      'true'
	  %% Line 371
	  <'handle_event_function'> when 'true' ->
	      'true'
	  %% Line 372
	  <_3> when 'true' ->
	      'false'
	end
'state_enter'/1 =
    %% Line 375
    fun (_0) ->
	%% Line 376
	case _0 of
	  %% Line 377
	  <'state_enter'> when 'true' ->
	      %% Line 378
	      'true'
	  %% Line 379
	  <_3> when 'true' ->
	      %% Line 380
	      'false'
	end
'event_type'/1 =
    %% Line 383
    fun (_0) ->
	%% Line 384
	case _0 of
	  %% Line 385
	  <{'call',From}> when 'true' ->
	      %% Line 393
	      ( case From of
		  ( <( {Pid,_2}
		       -| ['compiler_generated'] )>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'is_pid'
								 -| ['compiler_generated'] )
				(Pid)
			    -| ['compiler_generated'] ) ->
			( 'true'
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 394
		  ( <_3> when ( 'true'
				-| ['compiler_generated'] ) ->
			( 'false'
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 387
	  <'cast'> when 'true' ->
	      'true'
	  %% Line 388
	  <'info'> when 'true' ->
	      'true'
	  %% Line 389
	  <'internal'> when 'true' ->
	      'true'
	  %% Line 390
	  <_3> when 'true' ->
	      %% Line 397
	      ( case _0 of
		  %% Line 398
		  ( <( 'timeout'
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			( 'true'
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 399
		  ( <( 'state_timeout'
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			( 'true'
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 400
		  ( <( {( 'timeout'
			  -| ['compiler_generated'] ),_X_Name}
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			( 'true'
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 401
		  ( <_7> when ( 'true'
				-| ['compiler_generated'] ) ->
			( 'false'
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'from'/1 =
    %% Line 393
    fun (_0) ->
	case _0 of
	  <{Pid,_2}>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      'true'
	  %% Line 394
	  <_3> when 'true' ->
	      'false'
	end
'timeout_event_type'/1 =
    %% Line 396
    fun (_0) ->
	%% Line 397
	case _0 of
	  %% Line 398
	  <'timeout'> when 'true' ->
	      'true'
	  %% Line 399
	  <'state_timeout'> when 'true' ->
	      'true'
	  %% Line 400
	  <{'timeout',_X_Name}> when 'true' ->
	      'true'
	  %% Line 401
	  <_3> when 'true' ->
	      'false'
	end
'start'/3 =
    %% Line 485
    fun (_0,_1,_2) ->
	%% Line 486
	call 'gen':'start'
	    ('gen_statem', 'nolink', _0, _1, _2)
'start'/4 =
    %% Line 492
    fun (_0,_1,_2,_3) ->
	%% Line 493
	call 'gen':'start'
	    ('gen_statem', 'nolink', _0, _1, _2, _3)
'start_link'/3 =
    %% Line 499
    fun (_0,_1,_2) ->
	%% Line 500
	call 'gen':'start'
	    ('gen_statem', 'link', _0, _1, _2)
'start_link'/4 =
    %% Line 506
    fun (_0,_1,_2,_3) ->
	%% Line 507
	call 'gen':'start'
	    ('gen_statem', 'link', _0, _1, _2, _3)
'start_monitor'/3 =
    %% Line 513
    fun (_0,_1,_2) ->
	%% Line 514
	call 'gen':'start'
	    ('gen_statem', 'monitor', _0, _1, _2)
'start_monitor'/4 =
    %% Line 520
    fun (_0,_1,_2,_3) ->
	%% Line 521
	call 'gen':'start'
	    ('gen_statem', 'monitor', _0, _1, _2, _3)
'stop'/1 =
    %% Line 525
    fun (_0) ->
	%% Line 526
	call 'gen':'stop'
	    (_0)
'stop'/3 =
    %% Line 532
    fun (_0,_1,_2) ->
	%% Line 533
	call 'gen':'stop'
	    (_0, _1, _2)
'cast'/2 =
    %% Line 537
    fun (_0,_1) ->
	case <_0,_1> of
	  <ServerRef,Msg>
	      when call 'erlang':'is_pid'
		    (ServerRef) ->
	      let <_2> = {%% Line 665
		   ( '$gen_cast'
		     -| ['compiler_generated'] ),%% Line 538
						 Msg}
	      in  %% Line 538
		  apply 'send'/2
		      (ServerRef, _2)
	  %% Line 539
	  <ServerRef,Msg>
	      when call 'erlang':'is_atom'
		    (ServerRef) ->
	      let <_3> = {%% Line 665
		   ( '$gen_cast'
		     -| ['compiler_generated'] ),%% Line 540
						 Msg}
	      in  %% Line 540
		  apply 'send'/2
		      (ServerRef, _3)
	  %% Line 541
	  <{'global',Name},Msg> when 'true' ->
	      %% Line 542
	      try
		  let <_4> = {%% Line 665
		       ( '$gen_cast'
			 -| ['compiler_generated'] ),Msg}
		  in  call 'global':'send'
			  (Name, _4)
	      of <_5> ->
		  %% Line 543
		  'ok'
	      catch <_9,_8,_7> ->
		  %% Line 545
		  'ok'
	  %% Line 547
	  <{'via',RegMod,Name},Msg> when 'true' ->
	      %% Line 548
	      try
		  let <_10> = {%% Line 665
		       ( '$gen_cast'
			 -| ['compiler_generated'] ),Msg}
		  in  call RegMod:'send'
			  (Name, _10)
	      of <_11> ->
		  %% Line 549
		  'ok'
	      catch <_15,_14,_13> ->
		  %% Line 551
		  'ok'
	  %% Line 553
	  <ServerRef = {Name,Node},Msg>
	      when let <_16> =
		    call 'erlang':'is_atom'
			(Name)
		in  let <_17> =
			call 'erlang':'is_atom'
			    (Node)
		    in  call 'erlang':'and'
			    (_16, _17) ->
	      let <_18> = {%% Line 665
		   ( '$gen_cast'
		     -| ['compiler_generated'] ),%% Line 554
						 Msg}
	      in  %% Line 554
		  apply 'send'/2
		      (ServerRef, _18)
	  ( <_20,_19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_20,_19})
		  -| [{'function_name',{'cast',2}}] )
	    -| ['compiler_generated'] )
	end
'call'/2 =
    %% Line 559
    fun (_0,_1) ->
	%% Line 560
	apply 'call'/3
	    (_0, _1, 'infinity')
'call'/3 =
    %% Line 570
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <ServerRef,Request,T = Timeout = 'infinity'> when 'true' ->
	      %% Line 571
	      apply 'call_dirty'/4
		  (ServerRef, Request, Timeout, T)
	  %% Line 572
	  <ServerRef,Request,Timeout = {'dirty_timeout',T}> when 'true' ->
	      %% Line 573
	      apply 'call_dirty'/4
		  (ServerRef, Request, Timeout, T)
	  %% Line 574
	  <ServerRef,Request,Timeout = {'clean_timeout',T}> when 'true' ->
	      %% Line 575
	      apply 'call_clean'/4
		  (ServerRef, Request, Timeout, T)
	  %% Line 576
	  <ServerRef,Request,Timeout = {_6,_7}> when 'true' ->
	      %% Line 577
	      call 'erlang':'error'
		  ('badarg', [ServerRef|[Request|[Timeout|[]]]])
	  %% Line 578
	  <ServerRef,Request,Timeout> when 'true' ->
	      %% Line 579
	      apply 'call_clean'/4
		  (ServerRef, Request, Timeout, Timeout)
	end
'send_request'/2 =
    %% Line 583
    fun (_0,_1) ->
	%% Line 584
	call 'gen':'send_request'
	    (_0, '$gen_call', _1)
'wait_response'/1 =
    %% Line 588
    fun (_0) ->
	%% Line 589
	call 'gen':'wait_response'
	    (_0, 'infinity')
'wait_response'/2 =
    %% Line 593
    fun (_0,_1) ->
	%% Line 594
	call 'gen':'wait_response'
	    (_0, _1)
'check_response'/2 =
    %% Line 598
    fun (_0,_1) ->
	%% Line 599
	call 'gen':'check_response'
	    (_0, _1)
'reply'/1 =
    %% Line 603
    fun (_0) ->
	case _0 of
	  <{'reply',From,Reply}> when 'true' ->
	      %% Line 610
	      ( case <From,Reply> of
		  ( <( {To,Tag}
		       -| ['compiler_generated'] ),_15>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'is_pid'
								 -| ['compiler_generated'] )
				(To)
			    -| ['compiler_generated'] ) ->
			( let <Msg> = {%% Line 611
			       Tag,_15}
			  in  %% Line 612
			      ( try
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( '!'
									   -| ['compiler_generated'] )
					  (To, Msg)
				      -| ['compiler_generated'] )
				of <_3> ->
				    %% Line 614
				    ( 'ok'
				      -| ['compiler_generated'] )
				catch <_7,_6,_5> ->
				    %% Line 616
				    ( 'ok'
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_9,_8> when ( 'true'
				   -| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'function_clause'
				    -| ['compiler_generated'] ),_9,_8}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 605
	  <Replies>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 606
	      apply 'replies'/1
		  (Replies)
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'reply',1}}] )
	    -| ['compiler_generated'] )
	end
'reply'/2 =
    %% Line 610
    fun (_0,_1) ->
	case <_0,_1> of
	  <{To,Tag},Reply>
	      when call 'erlang':'is_pid'
		    (To) ->
	      let <Msg> = {%% Line 611
		   Tag,%% Line 611
		       Reply}
	      in  %% Line 612
		  try
		      call 'erlang':'!'
			  (To, Msg)
		  of <_3> ->
		      %% Line 614
		      'ok'
		  catch <_7,_6,_5> ->
		      %% Line 616
		      'ok'
	  ( <_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8})
		  -| [{'function_name',{'reply',2}}] )
	    -| ['compiler_generated'] )
	end
'enter_loop'/4 =
    %% Line 627
    fun (_0,_1,_2,_3) ->
	let <_4> =
	    call %% Line 628
		 'erlang':%% Line 628
			  'self'
		()
	in  %% Line 628
	    apply 'enter_loop'/5
		(_0, _1, _2, _3, _4)
'enter_loop'/5 =
    %% Line 636
    fun (_0,_1,_2,_3,_4) ->
	%% Line 637
	case <> of
	  %% Line 638
	  <>
	      when call 'erlang':'is_list'
		    (_4) ->
	      let <_5> =
		  call %% Line 639
		       'erlang':%% Line 639
				'self'
		      ()
	      in  %% Line 639
		  apply 'enter_loop'/6
		      (_0, _1, _2, _3, _5, _4)
	  %% Line 640
	  <> when 'true' ->
	      %% Line 641
	      apply 'enter_loop'/6
		  (_0, _1, _2, _3, _4, [])
	end
'enter_loop'/6 =
    %% Line 650
    fun (_0,_1,_2,_3,_4,_5) ->
	do  %% Line 651
	    ( case <> of
		( <>
		      when call 'erlang':'is_atom'
			    (_0) ->
		      'ok'
		  -| ['compiler_generated'] )
		( <> when 'true' ->
		      call 'erlang':'error'
			  ({'atom',_0})
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
	    let <Parent> =
		call %% Line 652
		     'gen':%% Line 652
			   'get_parent'
		    ()
	    in  let <Name> =
		    call %% Line 653
			 'gen':%% Line 653
			       'get_proc_name'
			(_4)
		in  let <Debug> =
			call %% Line 654
			     'gen':%% Line 654
				   'debug_options'
			    (%% Line 654
			     Name, _1)
		    in  let <HibernateAfterTimeout> =
			    call %% Line 655
				 'gen':%% Line 655
				       'hibernate_after'
				(_1)
			in  %% Line 656
			    apply 'enter'/8
				(%% Line 657
				 Parent, %% Line 657
					 Debug, _0, %% Line 657
						    Name, %% Line 657
							  HibernateAfterTimeout, _2, _3, _5)
'wrap_cast'/1 =
    %% Line 664
    fun (_0) ->
	%% Line 665
	{'$gen_cast',_0}
'call_dirty'/4 =
    %% Line 667
    fun (_0,_1,_2,_3) ->
	%% Line 668
	try
	    call 'gen':'call'
		(_0, '$gen_call', _1, _3)
	of <_4> ->
	    case _4 of
	      %% Line 669
	      <{'ok',Reply}> when 'true' ->
		  %% Line 670
		  Reply
	      ( <_5> when 'true' ->
		    primop 'match_fail'
			({'try_clause',_5})
		-| ['compiler_generated'] )
	    end
	catch <_8,_7,_6> ->
	    primop 'raw_raise'
		(_8, %% Line 675
		     {_7,{'gen_statem','call',[_0|[_1|[_2|[]]]]}}, _6)
'call_clean'/4 =
    %% Line 679
    fun (_0,_1,_2,_3) ->
	let <Ref> =
	    call %% Line 681
		 'erlang':%% Line 681
			  'make_ref'
		()
	in  let <Self> =
		call %% Line 682
		     'erlang':%% Line 682
			      'self'
		    ()
	    in  let <_12> =
		    fun () ->
			let <_11> =
			    try
				%% Line 686
				call 'gen':'call'
				    (_0, %% Line 687
					 '$gen_call', _1, _3)
			    of <_6> ->
				%% Line 689
				{Ref,_6}
			    catch <_10,_9,_8> ->
				let <Stacktrace> =
				    primop 'build_stacktrace'
					(_8)
				in  %% Line 691
				    {Ref,_10,_9,Stacktrace}
			in  %% Line 685
			    call 'erlang':'!'
				(Self, _11)
		in  let <Pid> =
			call %% Line 683
			     'erlang':%% Line 683
				      'spawn'
			    (_12)
		    in  let <Mref> =
			    call %% Line 694
				 'erlang':%% Line 694
					  'monitor'
				(%% Line 694
				 'process', %% Line 694
					    Pid)
			in  %% Line 695
			    receive
			      %% Line 696
			      <{_20,Result}>
				  when call 'erlang':'=:='
					(_20,
					 Ref) ->
				  do  %% Line 697
				      call 'erlang':'demonitor'
					  (Mref, ['flush'])
				      %% Line 698
				      case Result of
					%% Line 699
					<{'ok',Reply}> when 'true' ->
					    %% Line 700
					    Reply
					( <_15> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_15})
					  -| ['compiler_generated'] )
				      end
			      %% Line 702
			      <{_21,Class,Reason,Stacktrace}>
				  when call 'erlang':'=:='
					(_21,
					 Ref) ->
				  do  %% Line 703
				      call 'erlang':'demonitor'
					  (Mref, ['flush'])
				      %% Line 704
				      call 'erlang':'raise'
					  (%% Line 705
					   Class, %% Line 706
						  {Reason,{'gen_statem','call',[_0|[_1|[_2|[]]]]}}, %% Line 707
												    Stacktrace)
			      %% Line 708
			      <{'DOWN',_22,_23,_24,Reason}>
				  when call 'erlang':'=:='
					(_22,
					 Mref) ->
				  %% Line 712
				  call 'erlang':'exit'
				      (Reason)
			    after 'infinity' ->
			      'true'
'replies'/1 =
    %% Line 715
    fun (_0) ->
	case _0 of
	  <[{'reply',From,Reply}|Replies]> when 'true' ->
	      do  ( case %% Line 716
			 <From,Reply> of
		      ( <( {To,Tag}
			   -| ['compiler_generated'] ),_15>
			    when ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'is_pid'
								     -| ['compiler_generated'] )
				    (To)
				-| ['compiler_generated'] ) ->
			    ( let <Msg> = {Tag,_15}
			      in  ( try
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( '!'
									       -| ['compiler_generated'] )
					      (To, Msg)
					  -| ['compiler_generated'] )
				    of <_3> ->
					( 'ok'
					  -| ['compiler_generated'] )
				    catch <_7,_6,_5> ->
					( 'ok'
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_9,_8> when ( 'true'
				       -| ['compiler_generated'] ) ->
			    ( primop ( 'match_fail'
				       -| ['compiler_generated'] )
				  (( {( 'function_clause'
					-| ['compiler_generated'] ),_9,_8}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  %% Line 717
		  apply 'replies'/1
		      (Replies)
	  %% Line 718
	  <[]> when 'true' ->
	      %% Line 719
	      'ok'
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'replies',1}}] )
	    -| ['compiler_generated'] )
	end
'send'/2 =
    %% Line 722
    fun (_0,_1) ->
	do  %% Line 723
	    try
		call 'erlang':'send'
		    (_0, _1)
	    of <_2> ->
		_2
	    catch <_5,_4,_3> ->
		%% Line 725
		case <_5,_4,_3> of
		  <( 'error'
		     -| ['compiler_generated'] ),_8,_9> when 'true' ->
		      'ok'
		  ( <_10,_11,_12> when 'true' ->
			primop 'raise'
			    (_12, _11)
		    -| ['compiler_generated'] )
		end
	    %% Line 727
	    'ok'
'enter'/8 =
    %% Line 730
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	let <_9> =
	    case _7 of
	      %% Line 2734
	      ( <Item>
		    when ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'is_list'
							     -| ['compiler_generated'] )
			    (_7)
			-| ['compiler_generated'] ) ->
		    %% Line 2735
		    Item
		-| ['compiler_generated'] )
	      %% Line 2736
	      ( <Item> when ( 'true'
			      -| ['compiler_generated'] ) ->
		    %% Line 2737
		    ( [Item|( []
			      -| ['compiler_generated'] )]
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	in  let <Actions_1> =
		call %% Line 737
		     'erlang':%% Line 737
			      '++'
		    (_9, %% Line 737
			 [{'postpone','false'}])
	    in  let <P> =
		    {%% Line 739
		     'params','undefined','false',_0,_2,_3,_4}
		in  let <S> =
			{%% Line 744
			 'state',%% Line 744
				 {_5,_6},[],~{}~,'false'}
		    in  let <_14> =
			    case _1 of
			      %% Line 745
			      <[]> when 'true' ->
				  _1
			      %% Line 745
			      <_24> when 'true' ->
				  apply 'sys_debug'/3
				      (_1, _3, {'enter',_5})
			    end
			in  %% Line 746
			    apply 'loop_state_callback'/6
				(%% Line 747
				 P, _14, %% Line 747
					 S, [{'internal','init_state'}], %% Line 747
									 {_5,_6}, %% Line 752
										  Actions_1)
'init_it'/6 =
    %% Line 757
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <Starter,'self',ServerRef,Module,Args,Opts> when 'true' ->
	      let <_6> =
		  call %% Line 758
		       'erlang':%% Line 758
				'self'
		      ()
	      in  %% Line 758
		  apply 'init_it'/6
		      (Starter, _6, ServerRef, Module, Args, Opts)
	  %% Line 759
	  <Starter,Parent,ServerRef,Module,Args,Opts> when 'true' ->
	      let <Name> =
		  call %% Line 760
		       'gen':%% Line 760
			     'get_proc_name'
		      (%% Line 760
		       ServerRef)
	      in  let <Debug> =
		      call %% Line 761
			   'gen':%% Line 761
				 'debug_options'
			  (%% Line 761
			   Name, %% Line 761
				 Opts)
		  in  let <HibernateAfterTimeout> =
			  call %% Line 762
			       'gen':%% Line 762
				     'hibernate_after'
			      (%% Line 762
			       Opts)
		      in  %% Line 763
			  try
			      call Module:'init'
				  (Args)
			  of <_10> ->
			      %% Line 765
			      apply 'init_result'/8
				  (%% Line 766
				   Starter, %% Line 766
					    Parent, %% Line 766
						    ServerRef, %% Line 766
							       Module, _10, %% Line 767
									    Name, %% Line 767
										  Debug, %% Line 767
											 HibernateAfterTimeout)
			  catch <_14,_13,_12> ->
			      %% Line 769
			      case <_14,_13,_12> of
				<( 'throw'
				   -| ['compiler_generated'] ),Result,_21> when 'true' ->
				    %% Line 770
				    apply 'init_result'/8
					(%% Line 771
					 Starter, %% Line 771
						  Parent, %% Line 771
							  ServerRef, %% Line 771
								     Module, %% Line 771
									     Result, %% Line 772
										     Name, %% Line 772
											   Debug, %% Line 772
												  HibernateAfterTimeout)
				%% Line 773
				<Class,Reason,_23> when 'true' ->
				    do  %% Line 774
					call 'gen':'unregister_name'
					    (ServerRef)
					do  %% Line 775
					    call 'proc_lib':'init_ack'
						(Starter, {'error',Reason})
					    let <Stacktrace> =
						primop 'build_stacktrace'
						    (_23)
					    in  do  %% Line 776
						    apply 'error_info'/7
							(%% Line 777
							 Class, %% Line 777
								Reason, %% Line 777
									Stacktrace, %% Line 777
										    Debug, %% Line 778
											   {'params','undefined','false',Parent,Module,Name,'infinity'}, %% Line 779
																			 {'state',{'undefined','undefined'},[],~{}~,'false'}, %% Line 779
																									      [])
						    %% Line 780
						    call 'erlang':'raise'
							(Class, Reason, Stacktrace)
			      end
	end
'init_result'/8 =
    %% Line 786
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	%% Line 789
	case _4 of
	  %% Line 790
	  <{'ok',State,Data}> when 'true' ->
	      let <_8> =
		  call %% Line 791
		       'erlang':%% Line 791
				'self'
		      ()
	      in  do  %% Line 791
		      call 'proc_lib':'init_ack'
			  (_0, {'ok',_8})
		      %% Line 792
		      apply 'enter'/8
			  (_1, _6, _3, _5, _7, %% Line 794
					       State, %% Line 794
						      Data, %% Line 794
							    [])
	  %% Line 795
	  <{'ok',State,Data,Actions}> when 'true' ->
	      let <_9> =
		  call %% Line 796
		       'erlang':%% Line 796
				'self'
		      ()
	      in  do  %% Line 796
		      call 'proc_lib':'init_ack'
			  (_0, {'ok',_9})
		      %% Line 797
		      apply 'enter'/8
			  (_1, _6, _3, _5, _7, %% Line 799
					       State, %% Line 799
						      Data, %% Line 799
							    Actions)
	  %% Line 800
	  <{'stop',Reason}> when 'true' ->
	      do  %% Line 801
		  call 'gen':'unregister_name'
		      (_2)
		  do  %% Line 802
		      call 'proc_lib':'init_ack'
			  (_0, {'error',Reason})
		      %% Line 803
		      call 'erlang':'exit'
			  (Reason)
	  %% Line 804
	  <'ignore'> when 'true' ->
	      do  %% Line 805
		  call 'gen':'unregister_name'
		      (_2)
		  do  %% Line 806
		      call 'proc_lib':'init_ack'
			  (_0, 'ignore')
		      %% Line 807
		      call 'erlang':'exit'
			  ('normal')
	  %% Line 808
	  <_23> when 'true' ->
	      do  %% Line 809
		  call 'gen':'unregister_name'
		      (_2)
		  let <Error> = {%% Line 810
		       'bad_return_from_init',_4}
		  in  do  %% Line 811
			  call 'proc_lib':'init_ack'
			      (_0, {'error',Error})
			  let <_11> =
			      call %% Line 813
				   'erlang':%% Line 813
					    'self'
				  ()
			  in  let <_12> =
				  call %% Line 813
				       'erlang':%% Line 813
						'process_info'
				      (_11, %% Line 813
					    'current_stacktrace')
			      in  let <_13> =
				      call %% Line 813
					   'erlang':%% Line 813
						    'element'
					  (%% Line 813
					   2, _12)
				  in  do  %% Line 812
					  apply 'error_info'/7
					      (%% Line 813
					       'error', %% Line 813
							Error, _13, _6, %% Line 814
									{'params','undefined','false',_1,_3,_5,'infinity'}, %% Line 815
															    {'state',{'undefined','undefined'},[],~{}~,'false'}, %% Line 815
																						 [])
					  %% Line 816
					  call 'erlang':'exit'
					      (Error)
	end
'system_continue'/3 =
    %% Line 826
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Parent,Debug,{P,S}> when 'true' ->
	      let <_3> =
		  case %% Line 827
		       P of
		    %% Line 889
		    ( <( {( 'params'
			    -| ['compiler_generated'] ),_7,_8,_9,_10,_11,_12}
			 -| ['compiler_generated'] )>
			  when ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '=:='
								   -| ['compiler_generated'] )
				  (_9,
				   Parent)
			      -| ['compiler_generated'] ) ->
			  P
		      -| ['compiler_generated'] )
		    %% Line 891
		    ( <( {( 'params'
			    -| ['compiler_generated'] ),_13,_14,_15,_16,_17,_18}
			 -| ['compiler_generated'] )> when ( 'true'
							     -| ['compiler_generated'] ) ->
			  %% Line 892
			  ( case P of
			      ( <( {( 'params'
				      -| ['compiler_generated'] ),_19,_20,_21,_22,_23,_24}
				   -| ['compiler_generated'] )> when ( 'true'
								       -| ['compiler_generated'] ) ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'setelement'
									   -| ['compiler_generated'] )
					  (( 4
					     -| ['compiler_generated'] ), P, Parent)
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <_25> when ( 'true'
					     -| ['compiler_generated'] ) ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','params'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		    ( <_4> when ( 'true'
				  -| ['compiler_generated'] ) ->
			  %% Line 888
			  ( primop ( 'match_fail'
				     -| ['compiler_generated'] )
				(( {( 'case_clause'
				      -| ['compiler_generated'] ),_4}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 827
		  apply 'loop'/3
		      (_3, Debug, S)
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'system_continue',3}}] )
	    -| ['compiler_generated'] )
	end
'system_terminate'/4 =
    %% Line 829
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Reason,Parent,Debug,{P,S}> when 'true' ->
	      let <_5> =
		  call %% Line 831
		       'erlang':%% Line 831
				'self'
		      ()
	      in  let <_6> =
		      call %% Line 831
			   'erlang':%% Line 831
				    'process_info'
			  (_5, %% Line 831
			       'current_stacktrace')
		  in  let <_7> =
			  call %% Line 831
			       'erlang':%% Line 831
					'element'
			      (%% Line 831
			       2, _6)
		      in  let <_4> =
			      case %% Line 832
				   P of
				%% Line 889
				( <( {( 'params'
					-| ['compiler_generated'] ),_30,_8,_9,_10,_11,_12}
				     -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( '=:='
									       -| ['compiler_generated'] )
					      (_9,
					       Parent)
					  -| ['compiler_generated'] ) ->
				      P
				  -| ['compiler_generated'] )
				%% Line 891
				( <( {( 'params'
					-| ['compiler_generated'] ),_13,_14,_15,_16,_17,_18}
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      %% Line 892
				      ( case P of
					  ( <( {( 'params'
						  -| ['compiler_generated'] ),_19,_20,_21,_22,_23,_24}
					       -| ['compiler_generated'] )> when ( 'true'
										   -| ['compiler_generated'] ) ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'setelement'
										       -| ['compiler_generated'] )
						      (( 4
							 -| ['compiler_generated'] ), P, Parent)
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_25> when ( 'true'
							 -| ['compiler_generated'] ) ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','params'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_4> when ( 'true'
					      -| ['compiler_generated'] ) ->
				      %% Line 888
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'case_clause'
						  -| ['compiler_generated'] ),_4}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 830
			      apply 'terminate'/7
				  (%% Line 831
				   'exit', %% Line 831
					   Reason, _7, _4, %% Line 832
							   Debug, %% Line 832
								  S, %% Line 832
								     [])
	  ( <_11,_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8})
		  -| [{'function_name',{'system_terminate',4}}] )
	    -| ['compiler_generated'] )
	end
'system_code_change'/4 =
    %% Line 834
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <%% Line 835
	   {P = {'params',_21,_22,_23,Module,_24,_25},%% Line 836
						      S = %% Line 836
							  {'state',{State,Data},_26,_27,_28}},%% Line 837
											      _X_Mod,%% Line 837
												     OldVsn,%% Line 837
													    Extra> when 'true' ->
	      let <_8> =
		  try
		      %% Line 839
		      call Module:'code_change'
			  (OldVsn, State, Data, Extra)
		  of <_4> ->
		      _4
		  catch <_7,_6,_5> ->
		      %% Line 841
		      case <_7,_6,_5> of
			<( 'throw'
			   -| ['compiler_generated'] ),Result,_29> when 'true' ->
			    Result
			( <_43,_44,_45> when 'true' ->
			      primop 'raise'
				  (_45, _44)
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 838
		  case _8 of
		    %% Line 844
		    <{'ok',NewState,NewData}> when 'true' ->
			%% Line 846
			case P of
			  <{'params',_30,_31,_32,_33,_34,_35}> when 'true' ->
			      let <_15> =
				  call 'erlang':'setelement'
				      (2, P, 'undefined')
			      in  let <_rec1> = {%% Line 847
				       NewState,%% Line 847
						NewData}
				  in  %% Line 847
				      case S of
					<{'state',_37,_38,_39,_40}> when 'true' ->
					    let <_12> =
						call 'erlang':'setelement'
						    (2, S, _rec1)
					    in  {'ok',{_15,_12}}
					( <_41> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','state'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
			  ( <_36> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','params'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    %% Line 848
		    <Error = {'ok',_42}> when 'true' ->
			%% Line 849
			call 'erlang':'error'
			    ({'case_clause',Error})
		    %% Line 850
		    <Error> when 'true' ->
			%% Line 851
			Error
		  end
	  ( <_20,_19,_18,_17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_20,_19,_18,_17})
		  -| [{'function_name',{'system_code_change',4}}] )
	    -| ['compiler_generated'] )
	end
'system_get_state'/1 =
    %% Line 854
    fun (_0) ->
	case _0 of
	  <{_X_P,{'state',State_Data,_2,_3,_4}}> when 'true' ->
	      %% Line 855
	      {'ok',State_Data}
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'system_get_state',1}}] )
	    -| ['compiler_generated'] )
	end
'system_replace_state'/2 =
    %% Line 857
    fun (_0,_1) ->
	case <_0,_1> of
	  <%% Line 858
	   StateFun,%% Line 858
		    {P,S = {'state',State_Data,_8,_9,_10}}> when 'true' ->
	      let <NewState_NewData> =
		  apply %% Line 860
			StateFun
		      (%% Line 860
		       State_Data)
	      in  %% Line 861
		  case S of
		    <{'state',_11,_12,_13,_14}> when 'true' ->
			let <_5> =
			    call 'erlang':'setelement'
				(2, S, NewState_NewData)
			in  {'ok',NewState_NewData,{P,_5}}
		    ( <_15> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'system_replace_state',2}}] )
	    -| ['compiler_generated'] )
	end
'format_status'/2 =
    %% Line 863
    fun (_0,_1) ->
	case <_0,_1> of
	  <%% Line 864
	   Opt,%% Line 865
	       [PDict|[SysState|[Parent|[Debug|%% Line 866
					       [{P = {'params',_10,_11,_12,_13,Name,_14},%% Line 867
											 S = %% Line 867
											     {'state',_15,Postponed,Timers,_16}}|%% Line 867
																 []]]]]]> when 'true' ->
	      let <Header> =
		  call %% Line 868
		       'gen':%% Line 868
			     'format_status_header'
		      (%% Line 868
		       [83|[116|[97|[116|[117|[115|[32|[102|[111|[114|[32|[115|[116|[97|[116|[101|[32|[109|[97|[99|[104|[105|[110|[101]]]]]]]]]]]]]]]]]]]]]]]], %% Line 868
																				Name)
	      in  let <Log> =
		      call %% Line 869
			   'sys':%% Line 869
				 'get_log'
			  (%% Line 869
			   Debug)
		  in  let <_4> =
			  apply %% Line 874
				'list_timeouts'/1
			      (%% Line 874
			       Timers)
		      in  let <_5> =
			      case %% Line 877
				   P of
				%% Line 889
				( <( {( 'params'
					-| ['compiler_generated'] ),_7,_8,_9,_30,_31,_32}
				     -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( '=:='
									       -| ['compiler_generated'] )
					      (_9,
					       Parent)
					  -| ['compiler_generated'] ) ->
				      P
				  -| ['compiler_generated'] )
				%% Line 891
				( <( {( 'params'
					-| ['compiler_generated'] ),_33,_34,_35,_36,_17,_18}
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      %% Line 892
				      ( case P of
					  ( <( {( 'params'
						  -| ['compiler_generated'] ),_19,_20,_21,_22,_23,_24}
					       -| ['compiler_generated'] )> when ( 'true'
										   -| ['compiler_generated'] ) ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'setelement'
										       -| ['compiler_generated'] )
						      (( 4
							 -| ['compiler_generated'] ), P, Parent)
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_25> when ( 'true'
							 -| ['compiler_generated'] ) ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','params'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_37> when ( 'true'
					       -| ['compiler_generated'] ) ->
				      %% Line 888
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'case_clause'
						  -| ['compiler_generated'] ),_37}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  let <_7> =
				  case %% Line 877
				       apply 'format_status'/4
					   (Opt, PDict, _5, S) of
				    %% Line 878
				    <L>
					when call 'erlang':'is_list'
					      (L) ->
					L
				    %% Line 879
				    <T> when 'true' ->
					[T|[]]
				  end
			      in  %% Line 870
				  [{'header',Header}|%% Line 871
						     [{'data',%% Line 872
							      [{[83|[116|[97|[116|[117|[115]]]]]],SysState}|%% Line 873
													    [{[80|[97|[114|[101|[110|[116]]]]]],Parent}|%% Line 874
																			[{[84|[105|[109|[101|[45|[111|[117|[116|[115]]]]]]]]],_4}|%% Line 875
																										  [{[76|[111|[103|[103|[101|[100|[32|[69|[118|[101|[110|[116|[115]]]]]]]]]]]]],Log}|%% Line 876
																																				    [{[80|[111|[115|[116|[112|[111|[110|[101|[100]]]]]]]]],Postponed}|[]]]]]]}|_7]]
	  ( <_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8})
		  -| [{'function_name',{'format_status',2}}] )
	    -| ['compiler_generated'] )
	end
'update_parent'/2 =
    %% Line 887
    fun (_0,_1) ->
	%% Line 888
	case _0 of
	  %% Line 889
	  <{'params',_7,_8,_9,_10,_11,_12}>
	      when call 'erlang':'=:='
		    (_9,
		     _1) ->
	      _0
	  %% Line 891
	  <{'params',_13,_14,_15,_16,_17,_18}> when 'true' ->
	      %% Line 892
	      case _0 of
		<{'params',_19,_20,_21,_22,_23,_24}> when 'true' ->
		    call 'erlang':'setelement'
			(4, _0, _1)
		( <_25> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','params'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  ( <_4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_4})
	    -| ['compiler_generated'] )
	end
'sys_debug'/3 =
    %% Line 900
    fun (_0,_1,_2) ->
	let <_3> = 'print_event'/3
	in  %% Line 901
	    call 'sys':'handle_debug'
		(_0, _3, _1, _2)
'print_event'/3 =
    %% Line 903
    fun (_0,_1,_2) ->
	%% Line 904
	case _1 of
	  %% Line 905
	  <{'in',Event,State}> when 'true' ->
	      let <_3> =
		  apply %% Line 908
			'event_string'/1
		      (%% Line 908
		       Event)
	      in  %% Line 906
		  call 'io':'format'
		      (_0, %% Line 907
			   [42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[114|[101|[99|[101|[105|[118|[101|[32|[126|[116|[115|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 908
																												       [_2|[_3|[State|[]]]])
	  %% Line 909
	  <{'code_change',Event,State}> when 'true' ->
	      let <_4> =
		  apply %% Line 912
			'event_string'/1
		      (%% Line 912
		       Event)
	      in  %% Line 910
		  call 'io':'format'
		      (_0, %% Line 911
			   [42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[114|[101|[99|[101|[105|[118|[101|[32|[126|[116|[115|[32|[97|[102|[116|[101|[114|[32|[99|[111|[100|[101|[32|[99|[104|[97|[110|[103|[101|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 912
																																									    [_2|[_4|[State|[]]]])
	  %% Line 913
	  <{'out',Reply,{To,_X_Tag}}> when 'true' ->
	      %% Line 914
	      call 'io':'format'
		  (_0, %% Line 915
		       [42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[115|[101|[110|[100|[32|[126|[116|[112|[32|[116|[111|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 916
																						[_2|[Reply|[To|[]]]])
	  %% Line 917
	  <{'enter',State}> when 'true' ->
	      %% Line 918
	      call 'io':'format'
		  (_0, %% Line 919
		       [42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[101|[110|[116|[101|[114|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 920
																								 [_2|[State|[]]])
	  %% Line 921
	  <{'start_timer',Action,State}> when 'true' ->
	      %% Line 922
	      call 'io':'format'
		  (_0, %% Line 923
		       [42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[115|[116|[97|[114|[116|[95|[116|[105|[109|[101|[114|[32|[126|[116|[112|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 924
																															  [_2|[Action|[State|[]]]])
	  %% Line 925
	  <{'insert_timeout',Event,State}> when 'true' ->
	      %% Line 926
	      call 'io':'format'
		  (_0, %% Line 927
		       [42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[105|[110|[115|[101|[114|[116|[95|[116|[105|[109|[101|[111|[117|[116|[32|[126|[116|[112|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 928
																																	     [_2|[Event|[State|[]]]])
	  %% Line 929
	  <{'terminate',Reason,State}> when 'true' ->
	      %% Line 930
	      call 'io':'format'
		  (_0, %% Line 931
		       [42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[116|[101|[114|[109|[105|[110|[97|[116|[101|[32|[126|[116|[112|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 932
																													       [_2|[Reason|[State|[]]]])
	  %% Line 933
	  <{Tag,Event,State,NextState}>
	      when let <_5> =
		    call %% Line 934
			 'erlang':%% Line 934
				  '=:='
			(%% Line 934
			 Tag, %% Line 934
			      'postpone')
		in  let <_6> =
			call %% Line 934
			     'erlang':%% Line 934
				      '=:='
			    (%% Line 934
			     Tag, %% Line 934
				  'consume')
		    in  %% Line 934
			call 'erlang':'or'
			    (_5, _6) ->
	      let <_8> =
		  case %% Line 936
		       NextState of
		    %% Line 937
		    <_15>
			when call 'erlang':'=:='
			      (NextState,
			       State) ->
			%% Line 938
			call 'io_lib':'format'
			    ([126|[116|[112]]], [State|[]])
		    %% Line 939
		    <_16> when 'true' ->
			%% Line 940
			call 'io_lib':'format'
			    ([126|[116|[112|[32|[61|[62|[32|[126|[116|[112]]]]]]]]]], [State|[NextState|[]]])
		  end
	      in  let <_10> =
		      apply %% Line 944
			    'event_string'/1
			  (%% Line 944
			   Event)
		  in  %% Line 942
		      call 'io':'format'
			  (_0, %% Line 943
			       [42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[126|[116|[119|[32|[126|[116|[115|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 944
																										    [_2|[Tag|[_10|[_8|[]]]]])
	  ( <_11> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_11})
	    -| ['compiler_generated'] )
	end
'event_string'/1 =
    %% Line 947
    fun (_0) ->
	%% Line 948
	case _0 of
	  %% Line 949
	  <{{'call',{Pid,_X_Tag}},Request}> when 'true' ->
	      %% Line 950
	      call 'io_lib':'format'
		  ([99|[97|[108|[108|[32|[126|[116|[112|[32|[102|[114|[111|[109|[32|[126|[116|[119]]]]]]]]]]]]]]]]], [Request|[Pid|[]]])
	  %% Line 951
	  <{EventType,EventContent}> when 'true' ->
	      %% Line 952
	      call 'io_lib':'format'
		  ([126|[116|[119|[32|[126|[116|[112]]]]]]], [EventType|[EventContent|[]]])
	  ( <_1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_1})
	    -| ['compiler_generated'] )
	end
'wakeup_from_hibernate'/3 =
    %% Line 958
    fun (_0,_1,_2) ->
	%% Line 960
	apply 'loop_receive'/3
	    (_0, _1, _2)
'loop'/3 =
    %% Line 981
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <P,Debug,S = {'state',_6,_7,_8,'true'}> when 'true' ->
	      %% Line 982
	      apply 'loop_hibernate'/3
		  (P, Debug, S)
	  %% Line 983
	  <P,Debug,S> when 'true' ->
	      %% Line 984
	      apply 'loop_receive'/3
		  (P, Debug, S)
	end
'loop_hibernate'/3 =
    %% Line 988
    fun (_0,_1,_2) ->
	do  %% Line 993
	    call 'proc_lib':'hibernate'
		('gen_statem', 'wakeup_from_hibernate', [_0|[_1|[_2|[]]]])
	    %% Line 994
	    call 'erlang':'error'
		(%% Line 995
		 {'should_not_have_arrived_here_but_instead_in',{'gen_statem','wakeup_from_hibernate',3}})
'loop_receive'/3 =
    %% Line 1003
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <%% Line 1004
	   P = %% Line 1004
	       {'params',_25,_26,_27,_28,_29,HibernateAfterTimeout},%% Line 1004
								    Debug,%% Line 1004
									  S> when 'true' ->
	      %% Line 1006
	      receive
		%% Line 1007
		<Msg> when 'true' ->
		    %% Line 1008
		    case Msg of
		      %% Line 1009
		      <{'$gen_call',From,Request}> when 'true' ->
			  %% Line 1010
			  apply 'loop_receive_result'/4
			      (P, Debug, S, {{'call',From},Request})
		      %% Line 1011
		      <{'$gen_cast',Cast}> when 'true' ->
			  %% Line 1012
			  apply 'loop_receive_result'/4
			      (P, Debug, S, {'cast',Cast})
		      %% Line 1014
		      <{'timeout',TimerRef,TimeoutType}> when 'true' ->
			  %% Line 1015
			  ( case S of
			      ( <( {'state',_30,_31,_rec5,_32}
				   -| ['compiler_generated'] )> when 'true' ->
				    case _rec5 of
				      %% Line 1016
				      <Timers = ~{TimeoutType:={_34,TimeoutMsg}}~>
					  when call 'erlang':'=:='
						(_34,
						 TimerRef) ->
					  let <Timers_1> =
					      call %% Line 1018
						   'maps':%% Line 1018
							  'remove'
						  (%% Line 1018
						   TimeoutType, %% Line 1018
								Timers)
					  in  %% Line 1019
					      case S of
						<{'state',_35,_36,_37,_38}> when 'true' ->
						    let <_8> =
							call 'erlang':'setelement'
							    (4, S, Timers_1)
						    in  %% Line 1020
							apply 'loop_receive_result'/4
							    (%% Line 1021
							     P, %% Line 1021
								Debug, _8, %% Line 1021
									   {TimeoutType,TimeoutMsg})
						( <_39> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','state'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
				      %% Line 1022
				      <~{}~> when 'true' ->
					  %% Line 1023
					  apply 'loop_receive_result'/4
					      (P, Debug, S, {'info',Msg})
				      ( <_10> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_10})
					-| ['compiler_generated'] )
				    end
				-| ['compiler_generated'] )
			      ( <_33> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','state'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      %% Line 1026
		      <{'system',Pid,Req}> when 'true' ->
			  %% Line 1030
			  ( case P of
			      ( <( {'params',_40,_41,_rec7,_42,_43,_44}
				   -| ['compiler_generated'] )> when 'true' ->
				    %% Line 1032
				    ( case S of
					( <( {'state',_46,_47,_48,_rec8}
					     -| ['compiler_generated'] )> when 'true' ->
					      call 'sys':'handle_system_msg'
						  (Req, Pid, _rec7, 'gen_statem', Debug, {P,S}, _rec8)
					  -| ['compiler_generated'] )
					( <_49> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','state'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <_45> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','params'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      %% Line 1033
		      <{'EXIT',Pid,Reason}> when 'true' ->
			  %% Line 1034
			  ( case P of
			      ( <( {'params',_50,_51,_rec9,_52,_53,_54}
				   -| ['compiler_generated'] )> when 'true' ->
				    case _rec9 of
				      %% Line 1035
				      <_56>
					  when call 'erlang':'=:='
						(_rec9,
						 Pid) ->
					  let <_17> =
					      call %% Line 1037
						   'erlang':%% Line 1037
							    'self'
						  ()
					  in  let <_18> =
						  call %% Line 1037
						       'erlang':%% Line 1037
								'process_info'
						      (_17, %% Line 1037
							    'current_stacktrace')
					      in  let <_19> =
						      call %% Line 1037
							   'erlang':%% Line 1037
								    'element'
							  (%% Line 1037
							   2, _18)
						  in  %% Line 1036
						      apply 'terminate'/7
							  (%% Line 1037
							   'exit', %% Line 1037
								   Reason, _19, %% Line 1037
										P, %% Line 1037
										   Debug, %% Line 1037
											  S, %% Line 1037
											     [])
				      %% Line 1038
				      <_57> when 'true' ->
					  %% Line 1039
					  apply 'loop_receive_result'/4
					      (P, Debug, S, {'info',Msg})
				    end
				-| ['compiler_generated'] )
			      ( <_55> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','params'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      %% Line 1042
		      <_58> when 'true' ->
			  %% Line 1043
			  apply 'loop_receive_result'/4
			      (P, Debug, S, {'info',Msg})
		    end
	      after %% Line 1046
		    HibernateAfterTimeout ->
		%% Line 1047
		apply 'loop_hibernate'/3
		    (P, Debug, S)
	  ( <_24,_23,_22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_24,_23,_22})
		  -| [{'function_name',{'loop_receive',3}}] )
	    -| ['compiler_generated'] )
	end
'loop_receive_result'/4 =
    %% Line 1052
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <P,Debug = [],S,Event> when 'true' ->
	      %% Line 1055
	      apply 'loop_event'/5
		  (P, Debug, S, Event, [])
	  %% Line 1056
	  <%% Line 1057
	   P = %% Line 1057
	       {'params',CallbackMode,_13,_14,_15,Name,_16},%% Line 1057
							    Debug,%% Line 1058
								  S = %% Line 1058
								      {'state',{State,_X_Data},_17,_18,_19},%% Line 1058
													    Event> when 'true' ->
	      let <_6> =
		  case %% Line 1060
		       CallbackMode of
		    %% Line 1061
		    <'undefined'> when 'true' ->
			%% Line 1062
			apply 'sys_debug'/3
			    (Debug, Name, {'code_change',Event,State})
		    %% Line 1063
		    <_20> when 'true' ->
			%% Line 1064
			apply 'sys_debug'/3
			    (Debug, Name, {'in',Event,State})
		  end
	      in  %% Line 1068
		  apply 'loop_event'/5
		      (P, _6, S, Event, [])
	  ( <_12,_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11,_10,_9})
		  -| [{'function_name',{'loop_receive_result',4}}] )
	    -| ['compiler_generated'] )
	end
'loop_event'/5 =
    %% Line 1072
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <%% Line 1073
	   P,%% Line 1073
	     Debug,%% Line 1073
		   S = %% Line 1073
		       {'state',_11,_12,_13,'true'},%% Line 1073
						    Event,%% Line 1073
							  Events> when 'true' ->
	      do  %% Line 1083
		  ( call ( 'erlang'
			   -| ['result_not_wanted'] ):( 'garbage_collect'
							-| ['result_not_wanted'] )
			()
		    -| ['result_not_wanted'] )
		  %% Line 1091
		  ( case <P,Debug,S,Event,Events> of
		      ( <_19,_20,( _21 = %% Line 1092
					 ( {( 'state'
					      -| ['compiler_generated'] ),State_Data,_22,_23,_24}
					   -| ['compiler_generated'] )
				   -| ['compiler_generated'] ),_25,_26> when ( 'true'
									       -| ['compiler_generated'] ) ->
			    ( let <Q> =
				  [_25|_26]
			      in  %% Line 1098
				  ( apply 'loop_state_callback'/6
					(_19, _20, _21, Q, State_Data, _25)
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_10,_9,_8,_7,_6> when ( 'true'
						 -| ['compiler_generated'] ) ->
			    ( primop ( 'match_fail'
				       -| ['compiler_generated'] )
				  (( {( 'function_clause'
					-| ['compiler_generated'] ),_10,_9,_8,_7,_6}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 1085
	  <P,Debug,S,Event,Events> when 'true' ->
	      %% Line 1091
	      ( case <P,Debug,S,Event,Events> of
		  ( <_32,_33,( _34 = %% Line 1092
				     ( {( 'state'
					  -| ['compiler_generated'] ),State_Data,_11,_12,_13}
				       -| ['compiler_generated'] )
			       -| ['compiler_generated'] ),_35,_36> when ( 'true'
									   -| ['compiler_generated'] ) ->
			( let <Q> =
			      [_35|_36]
			  in  %% Line 1098
			      ( apply 'loop_state_callback'/6
				    (_32, _33, _34, Q, State_Data, _35)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_10,_9,_8,_7,_6> when ( 'true'
					     -| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'function_clause'
				    -| ['compiler_generated'] ),_10,_9,_8,_7,_6}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'loop_event_handler'/5 =
    %% Line 1091
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <%% Line 1092
	   P,%% Line 1092
	     Debug,%% Line 1092
		   S = %% Line 1092
		       {'state',State_Data,_11,_12,_13},%% Line 1092
							Event,%% Line 1092
							      Events> when 'true' ->
	      let <Q> =
		  [%% Line 1097
		   Event|%% Line 1097
			 Events]
	      in  %% Line 1098
		  apply 'loop_state_callback'/6
		      (P, Debug, S, Q, State_Data, Event)
	  ( <_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8,_7,_6})
		  -| [{'function_name',{'loop_event_handler',5}}] )
	    -| ['compiler_generated'] )
	end
'loop_state_enter'/9 =
    %% Line 1103
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <%% Line 1104
	   P,%% Line 1104
	     Debug,%% Line 1104
		   S = %% Line 1104
		       {'state',{PrevState,_X_PrevData},_20,_21,_22},%% Line 1105
								     Q,%% Line 1105
								       NextState_NewData,%% Line 1106
											 NextEventsR,%% Line 1106
												     Hibernate,%% Line 1106
													       TimeoutsR,%% Line 1106
															 Postpone> when 'true' ->
	      let <CallbackEvent> = {%% Line 1109
		   'enter',%% Line 1109
			   PrevState}
	      in  %% Line 1110
		  apply 'loop_state_callback'/11
		      (%% Line 1111
		       P, %% Line 1111
			  Debug, %% Line 1111
				 S, %% Line 1111
				    Q, %% Line 1111
				       NextState_NewData, %% Line 1112
							  NextEventsR, %% Line 1112
								       Hibernate, %% Line 1112
										  TimeoutsR, %% Line 1112
											     Postpone, 'false', %% Line 1113
														CallbackEvent)
	  ( <_19,_18,_17,_16,_15,_14,_13,_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_19,_18,_17,_16,_15,_14,_13,_12,_11})
		  -| [{'function_name',{'loop_state_enter',9}}] )
	    -| ['compiler_generated'] )
	end
'loop_state_callback'/6 =
    %% Line 1117
    fun (_0,_1,_2,_3,_4,_5) ->
	%% Line 1123
	apply 'loop_state_callback'/11
	    (_0, _1, _2, _3, _4, [], 'false', [], 'false', 'true', _5)
'loop_state_callback'/11 =
    %% Line 1128
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10> of
	  <%% Line 1129
	   P = %% Line 1129
	       {'params','undefined',_36,_37,Module,_38,_39},%% Line 1130
							     Debug,%% Line 1130
								   S,%% Line 1130
								     Q,%% Line 1130
								       State_Data,%% Line 1131
										  NextEventsR,%% Line 1131
											      Hibernate,%% Line 1131
													TimeoutsR,%% Line 1131
														  Postpone,%% Line 1132
															   StateCall,%% Line 1132
																     CallbackEvent> when 'true' ->
	      %% Line 1136
	      try
		  call Module:'callback_mode'
		      ()
	      of <_11> ->
		  let <_12> =
		      case _11 of
			%% Line 2734
			( <Item>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'is_list'
								       -| ['compiler_generated'] )
				      (_11)
				  -| ['compiler_generated'] ) ->
			      %% Line 2735
			      Item
			  -| ['compiler_generated'] )
			%% Line 2736
			( <Item> when ( 'true'
					-| ['compiler_generated'] ) ->
			      %% Line 2737
			      ( [Item|( []
					-| ['compiler_generated'] )]
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 1138
		      apply 'loop_callback_mode_result'/15
			  (%% Line 1139
			   P, %% Line 1139
			      Debug, %% Line 1139
				     S, %% Line 1139
					Q, %% Line 1139
					   State_Data, %% Line 1140
						       NextEventsR, %% Line 1140
								    Hibernate, %% Line 1140
									       TimeoutsR, %% Line 1140
											  Postpone, %% Line 1141
												    StateCall, %% Line 1141
													       CallbackEvent, _11, _12, %% Line 1142
																	'undefined', %% Line 1142
																		     'false')
	      catch <_16,_15,_14> ->
		  %% Line 1144
		  case <_16,_15,_14> of
		    <( 'throw'
		       -| ['compiler_generated'] ),CallbackMode,_40> when 'true' ->
			let <_17> =
			    case %% Line 1149
				 CallbackMode of
			      %% Line 2734
			      ( <Item>
				    when ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'is_list'
									     -| ['compiler_generated'] )
					    (CallbackMode)
					-| ['compiler_generated'] ) ->
				    %% Line 2735
				    Item
				-| ['compiler_generated'] )
			      %% Line 2736
			      ( <Item> when ( 'true'
					      -| ['compiler_generated'] ) ->
				    %% Line 2737
				    ( [Item|( []
					      -| ['compiler_generated'] )]
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			in  %% Line 1145
			    apply 'loop_callback_mode_result'/15
				(%% Line 1146
				 P, %% Line 1146
				    Debug, %% Line 1146
					   S, %% Line 1146
					      Q, %% Line 1146
						 State_Data, %% Line 1147
							     NextEventsR, %% Line 1147
									  Hibernate, %% Line 1147
										     TimeoutsR, %% Line 1147
												Postpone, %% Line 1148
													  StateCall, %% Line 1148
														     CallbackEvent, %% Line 1149
																    CallbackMode, _17, %% Line 1149
																		       'undefined', %% Line 1149
																				    'false')
		    %% Line 1150
		    <Class,Reason,_49> when 'true' ->
			let <Stacktrace> =
			    primop 'build_stacktrace'
				(_49)
			in  %% Line 1151
			    apply 'terminate'/7
				(%% Line 1152
				 Class, %% Line 1152
					Reason, %% Line 1152
						Stacktrace, %% Line 1152
							    P, %% Line 1152
							       Debug, %% Line 1152
								      S, %% Line 1152
									 Q)
		  end
	  %% Line 1154
	  <%% Line 1155
	   P = %% Line 1155
	       {'params',CallbackMode,_41,_42,Module,_43,_44},%% Line 1156
							      Debug,%% Line 1156
								    S,%% Line 1156
								      Q,%% Line 1156
									State_Data = %% Line 1156
										     {State,Data},%% Line 1157
												  NextEventsR,%% Line 1157
													      Hibernate,%% Line 1157
															TimeoutsR,%% Line 1157
																  Postpone,%% Line 1158
																	   StateCall,%% Line 1158
																		     {Type,Content}> when 'true' ->
	      %% Line 1159
	      try
		  %% Line 1160
		  case CallbackMode of
		    %% Line 1161
		    <'state_functions'> when 'true' ->
			%% Line 1162
			call Module:State
			    (Type, Content, Data)
		    %% Line 1163
		    <'handle_event_function'> when 'true' ->
			%% Line 1164
			call Module:'handle_event'
			    (Type, Content, State, Data)
		    ( <_18> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_18})
		      -| ['compiler_generated'] )
		  end
	      of <_19> ->
		  %% Line 1168
		  apply 'loop_state_callback_result'/11
		      (%% Line 1169
		       P, %% Line 1169
			  Debug, %% Line 1169
				 S, %% Line 1169
				    Q, %% Line 1169
				       State_Data, %% Line 1170
						   NextEventsR, %% Line 1170
								Hibernate, %% Line 1170
									   TimeoutsR, %% Line 1170
										      Postpone, %% Line 1171
												StateCall, _19)
	      catch <_23,_22,_21> ->
		  %% Line 1173
		  case <_23,_22,_21> of
		    <( 'throw'
		       -| ['compiler_generated'] ),Result,_45> when 'true' ->
			%% Line 1174
			apply 'loop_state_callback_result'/11
			    (%% Line 1175
			     P, %% Line 1175
				Debug, %% Line 1175
				       S, %% Line 1175
					  Q, %% Line 1175
					     State_Data, %% Line 1176
							 NextEventsR, %% Line 1176
								      Hibernate, %% Line 1176
										 TimeoutsR, %% Line 1176
											    Postpone, %% Line 1177
												      StateCall, %% Line 1177
														 Result)
		    %% Line 1178
		    <Class,Reason,_51> when 'true' ->
			let <Stacktrace> =
			    primop 'build_stacktrace'
				(_51)
			in  %% Line 1179
			    apply 'terminate'/7
				(Class, Reason, Stacktrace, P, Debug, S, Q)
		  end
	  %% Line 1181
	  <%% Line 1182
	   P,%% Line 1182
	     Debug,%% Line 1182
		   S,%% Line 1182
		     Q,%% Line 1182
		       State_Data,%% Line 1183
				  NextEventsR,%% Line 1183
					      Hibernate,%% Line 1183
							TimeoutsR,%% Line 1183
								  Postpone,%% Line 1184
									   StateCall,%% Line 1184
										     Actions>
	      when %% Line 1184
		call 'erlang':'is_list'
		    (Actions) ->
	      %% Line 1187
	      apply 'loop_actions_list'/12
		  (%% Line 1188
		   P, %% Line 1188
		      Debug, %% Line 1188
			     S, %% Line 1188
				Q, %% Line 1188
				   State_Data, %% Line 1189
					       NextEventsR, %% Line 1189
							    Hibernate, %% Line 1189
								       TimeoutsR, %% Line 1189
										  Postpone, 'true', %% Line 1190
												    StateCall, %% Line 1190
													       Actions)
	  ( <_35,_34,_33,_32,_31,_30,_29,_28,_27,_26,_25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_35,_34,_33,_32,_31,_30,_29,_28,_27,_26,_25})
		  -| [{'function_name',{'loop_state_callback',11}}] )
	    -| ['compiler_generated'] )
	end
'loop_callback_mode_result'/15 =
    %% Line 1194
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14> of
	  <%% Line 1195
	   P,%% Line 1195
	     Debug,%% Line 1195
		   S,%% Line 1195
		     Q,%% Line 1195
		       State_Data,%% Line 1196
				  NextEventsR,%% Line 1196
					      Hibernate,%% Line 1196
							TimeoutsR,%% Line 1196
								  Postpone,%% Line 1197
									   StateCall,%% Line 1197
										     CallbackEvent,%% Line 1198
												   CallbackMode,%% Line 1198
														[H|T],%% Line 1198
														      NewCallbackMode,%% Line 1198
																      NewStateEnter> when 'true' ->
	      %% Line 1200
	      case ( case H of
		       ( <( 'state_functions'
			    -| ['compiler_generated'] )> when ( 'true'
								-| ['compiler_generated'] ) ->
			     ( 'true'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       ( <( 'handle_event_function'
			    -| ['compiler_generated'] )> when ( 'true'
								-| ['compiler_generated'] ) ->
			     ( 'true'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       ( <_54> when ( 'true'
				      -| ['compiler_generated'] ) ->
			     ( 'false'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		     end
		     -| ['compiler_generated'] ) of
		%% Line 1201
		<'true'> when 'true' ->
		    %% Line 1202
		    apply 'loop_callback_mode_result'/15
			(%% Line 1203
			 P, %% Line 1203
			    Debug, %% Line 1203
				   S, %% Line 1203
				      Q, %% Line 1203
					 State_Data, %% Line 1204
						     NextEventsR, %% Line 1204
								  Hibernate, %% Line 1204
									     TimeoutsR, %% Line 1204
											Postpone, %% Line 1205
												  StateCall, %% Line 1205
													     CallbackEvent, %% Line 1206
															    CallbackMode, %% Line 1206
																	  T, %% Line 1206
																	     H, %% Line 1206
																		NewStateEnter)
		%% Line 1207
		<'false'> when 'true' ->
		    %% Line 1208
		    case ( case H of
			     ( <( 'state_enter'
				  -| ['compiler_generated'] )> when ( 'true'
								      -| ['compiler_generated'] ) ->
				   ( 'true'
				     -| ['compiler_generated'] )
			       -| ['compiler_generated'] )
			     ( <_57> when ( 'true'
					    -| ['compiler_generated'] ) ->
				   ( 'false'
				     -| ['compiler_generated'] )
			       -| ['compiler_generated'] )
			   end
			   -| ['compiler_generated'] ) of
		      %% Line 1209
		      <'true'> when 'true' ->
			  %% Line 1210
			  apply 'loop_callback_mode_result'/15
			      (%% Line 1211
			       P, %% Line 1211
				  Debug, %% Line 1211
					 S, %% Line 1211
					    Q, %% Line 1211
					       State_Data, %% Line 1212
							   NextEventsR, %% Line 1212
									Hibernate, %% Line 1212
										   TimeoutsR, %% Line 1212
											      Postpone, %% Line 1213
													StateCall, %% Line 1213
														   CallbackEvent, %% Line 1214
																  CallbackMode, %% Line 1214
																		T, %% Line 1214
																		   NewCallbackMode, %% Line 1214
																				    'true')
		      %% Line 1215
		      <'false'> when 'true' ->
			  let <_15> =
			      call %% Line 1219
				   'erlang':%% Line 1219
					    'self'
				  ()
			  in  let <_16> =
				  call %% Line 1219
				       'erlang':%% Line 1219
						'process_info'
				      (_15, %% Line 1219
					    'current_stacktrace')
			      in  let <_17> =
				      call %% Line 1219
					   'erlang':%% Line 1219
						    'element'
					  (%% Line 1219
					   2, _16)
				  in  %% Line 1216
				      apply 'terminate'/7
					  (%% Line 1217
					   'error', %% Line 1218
						    {'bad_return_from_callback_mode',CallbackMode}, _17, %% Line 1220
													 P, %% Line 1220
													    Debug, %% Line 1220
														   S, %% Line 1220
														      Q)
		    end
	      end
	  %% Line 1223
	  <%% Line 1224
	   P,%% Line 1224
	     Debug,%% Line 1224
		   S,%% Line 1224
		     Q,%% Line 1224
		       State_Data,%% Line 1225
				  NextEventsR,%% Line 1225
					      Hibernate,%% Line 1225
							TimeoutsR,%% Line 1225
								  Postpone,%% Line 1226
									   StateCall,%% Line 1226
										     CallbackEvent,%% Line 1227
												   CallbackMode,%% Line 1227
														[],%% Line 1227
														   NewCallbackMode,%% Line 1227
																   NewStateEnter> when 'true' ->
	      %% Line 1229
	      case NewCallbackMode of
		%% Line 1230
		<'undefined'> when 'true' ->
		    let <_20> =
			call %% Line 1234
			     'erlang':%% Line 1234
				      'self'
			    ()
		    in  let <_21> =
			    call %% Line 1234
				 'erlang':%% Line 1234
					  'process_info'
				(_20, %% Line 1234
				      'current_stacktrace')
			in  let <_22> =
				call %% Line 1234
				     'erlang':%% Line 1234
					      'element'
				    (%% Line 1234
				     2, _21)
			    in  %% Line 1231
				apply 'terminate'/7
				    (%% Line 1232
				     'error', %% Line 1233
					      {'bad_return_from_callback_mode',CallbackMode}, _22, %% Line 1235
												   P, %% Line 1235
												      Debug, %% Line 1235
													     S, %% Line 1235
														Q)
		%% Line 1236
		<_44> when 'true' ->
		    %% Line 1239
		    case P of
		      <{'params',_45,_46,_47,_48,_49,_50}> when 'true' ->
			  let <_24> =
			      call %% Line 1240
				   'erlang':%% Line 1240
					    'setelement'
				  (%% Line 1240
				   3, P, %% Line 1240
					 NewStateEnter)
			  in  let <_26> =
				  call 'erlang':'setelement'
				      (2, _24, NewCallbackMode)
			      in  %% Line 1241
				  apply 'loop_state_callback'/11
				      (_26, %% Line 1242
					    Debug, %% Line 1242
						   S, %% Line 1242
						      Q, %% Line 1242
							 State_Data, %% Line 1243
								     NextEventsR, %% Line 1243
										  Hibernate, %% Line 1243
											     TimeoutsR, %% Line 1243
													Postpone, %% Line 1244
														  StateCall, %% Line 1244
															     CallbackEvent)
		      ( <_51> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','params'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
	      end
	  ( <_43,_42,_41,_40,_39,_38,_37,_36,_35,_34,_33,_32,_31,_30,_29> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_43,_42,_41,_40,_39,_38,_37,_36,_35,_34,_33,_32,_31,_30,_29})
		  -| [{'function_name',{'loop_callback_mode_result',15}}] )
	    -| ['compiler_generated'] )
	end
'loop_state_callback_result'/11 =
    %% Line 1249
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10> of
	  <%% Line 1250
	   P,%% Line 1250
	     Debug,%% Line 1250
		   S,%% Line 1250
		     Q,%% Line 1250
		       State_Data = %% Line 1250
				    {State,_X_Data},%% Line 1251
						    NextEventsR,%% Line 1251
								Hibernate,%% Line 1251
									  TimeoutsR,%% Line 1251
										    Postpone,%% Line 1252
											     StateCall,%% Line 1252
												       Result> when 'true' ->
	      %% Line 1254
	      case Result of
		%% Line 1255
		<{'next_state',_81,NewData}>
		    when call 'erlang':'=:='
			  (_81,
			   State) ->
		    let <_128> = {%% Line 1257
			 State,%% Line 1257
			       NewData}
		    in  %% Line 1422
			( apply 'loop_state_transition'/9
			      (P, Debug, S, Q, _128, NextEventsR, Hibernate, TimeoutsR, Postpone)
			  -| ['compiler_generated'] )
		%% Line 1260
		<{'next_state',NextState,NewData}>
		    when ( call 'erlang':'=:='
			    (%% Line 1261
			     StateCall,
			     'true')
			-| ['compiler_generated'] ) ->
		    let <_155> = {%% Line 1263
			 NextState,%% Line 1263
				   NewData}
		    in  %% Line 1416
			( case P of
			    ( <( {( 'params'
				    -| ['compiler_generated'] ),_25,_rec21,_26,_27,_28,_29}
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  ( case _rec21 of
				      %% Line 1417
				      ( <( 'true'
					   -| ['compiler_generated'] )> when ( 'true'
									       -| ['compiler_generated'] ) ->
					    %% Line 1418
					    ( apply 'loop_state_enter'/9
						  (P, Debug, S, Q, _155, NextEventsR, Hibernate, TimeoutsR, Postpone)
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      %% Line 1421
				      ( <( 'false'
					   -| ['compiler_generated'] )> when ( 'true'
									       -| ['compiler_generated'] ) ->
					    %% Line 1422
					    ( apply 'loop_state_transition'/9
						  (P, Debug, S, Q, _155, NextEventsR, Hibernate, TimeoutsR, Postpone)
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <_14> when ( 'true'
						     -| ['compiler_generated'] ) ->
					    ( primop ( 'match_fail'
						       -| ['compiler_generated'] )
						  (( {( 'case_clause'
							-| ['compiler_generated'] ),_14}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_30> when ( 'true'
					   -| ['compiler_generated'] ) ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','params'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		%% Line 1266
		<{'next_state',_X_NextState,_X_NewData}> when 'true' ->
		    let <_15> =
			call %% Line 1270
			     'erlang':%% Line 1270
				      'self'
			    ()
		    in  let <_16> =
			    call %% Line 1270
				 'erlang':%% Line 1270
					  'process_info'
				(_15, %% Line 1270
				      'current_stacktrace')
			in  let <_17> =
				call %% Line 1270
				     'erlang':%% Line 1270
					      'element'
				    (%% Line 1270
				     2, _16)
			    in  %% Line 1272
				case S of
				  <{'state',_82,_83,_84,_85}> when 'true' ->
				      let <_12> =
					  call %% Line 1273
					       'erlang':%% Line 1273
							'setelement'
					      (%% Line 1273
					       5, S, %% Line 1273
						     Hibernate)
				      in  let <_14> =
					      call 'erlang':'setelement'
						  (2, _12, State_Data)
					  in  apply 'terminate'/7
						  ('error', {'bad_state_enter_return_from_state_function',Result}, _17, P, Debug, _14, %% Line 1274
																       Q)
				  ( <_86> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','state'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
		%% Line 1275
		<{'next_state',_87,NewData,Actions}>
		    when call 'erlang':'=:='
			  (_87,
			   State) ->
		    %% Line 1276
		    apply 'loop_actions'/12
			(%% Line 1277
			 P, %% Line 1277
			    Debug, %% Line 1277
				   S, %% Line 1277
				      Q, %% Line 1277
					 {State,NewData}, %% Line 1278
							  NextEventsR, %% Line 1278
								       Hibernate, %% Line 1278
										  TimeoutsR, %% Line 1278
											     Postpone, %% Line 1279
												       'false', %% Line 1279
														StateCall, %% Line 1279
															   Actions)
		%% Line 1280
		<{'next_state',NextState,NewData,Actions}>
		    when ( call 'erlang':'=:='
			    (%% Line 1281
			     StateCall,
			     'true')
			-| ['compiler_generated'] ) ->
		    %% Line 1282
		    apply 'loop_actions'/12
			(%% Line 1283
			 P, %% Line 1283
			    Debug, %% Line 1283
				   S, %% Line 1283
				      Q, %% Line 1283
					 {NextState,NewData}, %% Line 1284
							      NextEventsR, %% Line 1284
									   Hibernate, %% Line 1284
										      TimeoutsR, %% Line 1284
												 Postpone, %% Line 1285
													   'true', %% Line 1285
														   StateCall, %% Line 1285
															      Actions)
		%% Line 1286
		<{'next_state',_X_NextState,_X_NewData,_X_Actions}> when 'true' ->
		    let <_22> =
			call %% Line 1290
			     'erlang':%% Line 1290
				      'self'
			    ()
		    in  let <_23> =
			    call %% Line 1290
				 'erlang':%% Line 1290
					  'process_info'
				(_22, %% Line 1290
				      'current_stacktrace')
			in  let <_24> =
				call %% Line 1290
				     'erlang':%% Line 1290
					      'element'
				    (%% Line 1290
				     2, _23)
			    in  %% Line 1292
				case S of
				  <{'state',_88,_89,_90,_91}> when 'true' ->
				      let <_19> =
					  call %% Line 1293
					       'erlang':%% Line 1293
							'setelement'
					      (%% Line 1293
					       5, S, %% Line 1293
						     Hibernate)
				      in  let <_21> =
					      call 'erlang':'setelement'
						  (2, _19, State_Data)
					  in  apply 'terminate'/7
						  ('error', {'bad_state_enter_return_from_state_function',Result}, _24, P, Debug, _21, %% Line 1294
																       Q)
				  ( <_92> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','state'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
		%% Line 1296
		<{'keep_state',NewData}> when 'true' ->
		    let <_182> = {%% Line 1298
			 State,%% Line 1298
			       NewData}
		    in  %% Line 1422
			( apply 'loop_state_transition'/9
			      (P, Debug, S, Q, _182, NextEventsR, Hibernate, TimeoutsR, Postpone)
			  -| ['compiler_generated'] )
		%% Line 1301
		<{'keep_state',NewData,Actions}> when 'true' ->
		    %% Line 1302
		    apply 'loop_actions'/12
			(%% Line 1303
			 P, %% Line 1303
			    Debug, %% Line 1303
				   S, %% Line 1303
				      Q, %% Line 1303
					 {State,NewData}, %% Line 1304
							  NextEventsR, %% Line 1304
								       Hibernate, %% Line 1304
										  TimeoutsR, %% Line 1304
											     Postpone, %% Line 1305
												       'false', %% Line 1305
														StateCall, %% Line 1305
															   Actions)
		%% Line 1307
		<'keep_state_and_data'> when 'true' ->
		    %% Line 1422
		    ( apply 'loop_state_transition'/9
			  (P, Debug, S, Q, State_Data, NextEventsR, Hibernate, TimeoutsR, Postpone)
		      -| ['compiler_generated'] )
		%% Line 1312
		<{'keep_state_and_data',Actions}> when 'true' ->
		    %% Line 1313
		    apply 'loop_actions'/12
			(%% Line 1314
			 P, %% Line 1314
			    Debug, %% Line 1314
				   S, %% Line 1314
				      Q, %% Line 1314
					 State_Data, %% Line 1315
						     NextEventsR, %% Line 1315
								  Hibernate, %% Line 1315
									     TimeoutsR, %% Line 1315
											Postpone, %% Line 1316
												  'false', %% Line 1316
													   StateCall, %% Line 1316
														      Actions)
		%% Line 1318
		<{'repeat_state',NewData}> when 'true' ->
		    let <_236> = {%% Line 1320
			 State,%% Line 1320
			       NewData}
		    in  %% Line 1416
			( case P of
			    ( <( {( 'params'
				    -| ['compiler_generated'] ),_25,_rec21,_26,_27,_28,_29}
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  ( case _rec21 of
				      %% Line 1417
				      ( <( 'true'
					   -| ['compiler_generated'] )> when ( 'true'
									       -| ['compiler_generated'] ) ->
					    %% Line 1418
					    ( apply 'loop_state_enter'/9
						  (P, Debug, S, Q, _236, NextEventsR, Hibernate, TimeoutsR, Postpone)
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      %% Line 1421
				      ( <( 'false'
					   -| ['compiler_generated'] )> when ( 'true'
									       -| ['compiler_generated'] ) ->
					    %% Line 1422
					    ( apply 'loop_state_transition'/9
						  (P, Debug, S, Q, _236, NextEventsR, Hibernate, TimeoutsR, Postpone)
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <_14> when ( 'true'
						     -| ['compiler_generated'] ) ->
					    ( primop ( 'match_fail'
						       -| ['compiler_generated'] )
						  (( {( 'case_clause'
							-| ['compiler_generated'] ),_14}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_30> when ( 'true'
					   -| ['compiler_generated'] ) ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','params'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		%% Line 1323
		<{'repeat_state',NewData,Actions}> when 'true' ->
		    %% Line 1324
		    apply 'loop_actions'/12
			(%% Line 1325
			 P, %% Line 1325
			    Debug, %% Line 1325
				   S, %% Line 1325
				      Q, %% Line 1325
					 {State,NewData}, %% Line 1326
							  NextEventsR, %% Line 1326
								       Hibernate, %% Line 1326
										  TimeoutsR, %% Line 1326
											     Postpone, %% Line 1327
												       'true', %% Line 1327
													       StateCall, %% Line 1327
															  Actions)
		%% Line 1329
		<'repeat_state_and_data'> when 'true' ->
		    %% Line 1416
		    ( case P of
			( <( {( 'params'
				-| ['compiler_generated'] ),_25,_rec21,_26,_27,_28,_29}
			     -| ['compiler_generated'] )> when ( 'true'
								 -| ['compiler_generated'] ) ->
			      ( case _rec21 of
				  %% Line 1417
				  ( <( 'true'
				       -| ['compiler_generated'] )> when ( 'true'
									   -| ['compiler_generated'] ) ->
					%% Line 1418
					( apply 'loop_state_enter'/9
					      (P, Debug, S, Q, State_Data, NextEventsR, Hibernate, TimeoutsR, Postpone)
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  %% Line 1421
				  ( <( 'false'
				       -| ['compiler_generated'] )> when ( 'true'
									   -| ['compiler_generated'] ) ->
					%% Line 1422
					( apply 'loop_state_transition'/9
					      (P, Debug, S, Q, State_Data, NextEventsR, Hibernate, TimeoutsR, Postpone)
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <_14> when ( 'true'
						 -| ['compiler_generated'] ) ->
					( primop ( 'match_fail'
						   -| ['compiler_generated'] )
					      (( {( 'case_clause'
						    -| ['compiler_generated'] ),_14}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			( <_30> when ( 'true'
				       -| ['compiler_generated'] ) ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','params'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 1334
		<{'repeat_state_and_data',Actions}> when 'true' ->
		    %% Line 1335
		    apply 'loop_actions'/12
			(%% Line 1336
			 P, %% Line 1336
			    Debug, %% Line 1336
				   S, %% Line 1336
				      Q, %% Line 1336
					 State_Data, %% Line 1337
						     NextEventsR, %% Line 1337
								  Hibernate, %% Line 1337
									     TimeoutsR, %% Line 1337
											Postpone, %% Line 1338
												  'true', %% Line 1338
													  StateCall, %% Line 1338
														     Actions)
		%% Line 1340
		<'stop'> when 'true' ->
		    let <_29> =
			call %% Line 1342
			     'erlang':%% Line 1342
				      'self'
			    ()
		    in  let <_30> =
			    call %% Line 1342
				 'erlang':%% Line 1342
					  'process_info'
				(_29, %% Line 1342
				      'current_stacktrace')
			in  let <_31> =
				call %% Line 1342
				     'erlang':%% Line 1342
					      'element'
				    (%% Line 1342
				     2, _30)
			    in  %% Line 1344
				case S of
				  <{'state',_93,_94,_95,_96}> when 'true' ->
				      let <_26> =
					  call %% Line 1345
					       'erlang':%% Line 1345
							'setelement'
					      (%% Line 1345
					       5, S, %% Line 1345
						     Hibernate)
				      in  let <_28> =
					      call 'erlang':'setelement'
						  (2, _26, State_Data)
					  in  apply 'terminate'/7
						  ('exit', 'normal', _31, P, Debug, _28, %% Line 1346
											 Q)
				  ( <_97> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','state'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
		%% Line 1347
		<{'stop',Reason}> when 'true' ->
		    let <_36> =
			call %% Line 1349
			     'erlang':%% Line 1349
				      'self'
			    ()
		    in  let <_37> =
			    call %% Line 1349
				 'erlang':%% Line 1349
					  'process_info'
				(_36, %% Line 1349
				      'current_stacktrace')
			in  let <_38> =
				call %% Line 1349
				     'erlang':%% Line 1349
					      'element'
				    (%% Line 1349
				     2, _37)
			    in  %% Line 1351
				case S of
				  <{'state',_98,_99,_100,_101}> when 'true' ->
				      let <_33> =
					  call %% Line 1352
					       'erlang':%% Line 1352
							'setelement'
					      (%% Line 1352
					       5, S, %% Line 1352
						     Hibernate)
				      in  let <_35> =
					      call 'erlang':'setelement'
						  (2, _33, State_Data)
					  in  apply 'terminate'/7
						  ('exit', Reason, _38, P, Debug, _35, %% Line 1353
										       Q)
				  ( <_102> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','state'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
		%% Line 1354
		<{'stop',Reason,NewData}> when 'true' ->
		    let <_44> =
			call %% Line 1356
			     'erlang':%% Line 1356
				      'self'
			    ()
		    in  let <_45> =
			    call %% Line 1356
				 'erlang':%% Line 1356
					  'process_info'
				(_44, %% Line 1356
				      'current_stacktrace')
			in  let <_46> =
				call %% Line 1356
				     'erlang':%% Line 1356
					      'element'
				    (%% Line 1356
				     2, _45)
			    in  let <_rec15> = {%% Line 1358
				     State,%% Line 1358
					   NewData}
				in  %% Line 1358
				    case S of
				      <{'state',_103,_104,_105,_106}> when 'true' ->
					  let <_41> =
					      call %% Line 1359
						   'erlang':%% Line 1359
							    'setelement'
						  (%% Line 1359
						   5, S, %% Line 1359
							 Hibernate)
					  in  let <_43> =
						  call 'erlang':'setelement'
						      (2, _41, _rec15)
					      in  apply 'terminate'/7
						      ('exit', Reason, _46, P, Debug, _43, %% Line 1360
											   Q)
				      ( <_107> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','state'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
		%% Line 1362
		<{'stop_and_reply',Reason,Replies}> when 'true' ->
		    let <_51> =
			call %% Line 1364
			     'erlang':%% Line 1364
				      'self'
			    ()
		    in  let <_52> =
			    call %% Line 1364
				 'erlang':%% Line 1364
					  'process_info'
				(_51, %% Line 1364
				      'current_stacktrace')
			in  let <_53> =
				call %% Line 1364
				     'erlang':%% Line 1364
					      'element'
				    (%% Line 1364
				     2, _52)
			    in  %% Line 1366
				case S of
				  <{'state',_108,_109,_110,_111}> when 'true' ->
				      let <_48> =
					  call %% Line 1367
					       'erlang':%% Line 1367
							'setelement'
					      (%% Line 1367
					       5, S, %% Line 1367
						     Hibernate)
				      in  let <_50> =
					      call 'erlang':'setelement'
						  (2, _48, State_Data)
					  in  apply 'reply_then_terminate'/8
						  ('exit', Reason, _53, P, Debug, _50, %% Line 1368
										       Q, %% Line 1368
											  Replies)
				  ( <_112> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','state'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
		%% Line 1369
		<{'stop_and_reply',Reason,Replies,NewData}> when 'true' ->
		    let <_59> =
			call %% Line 1371
			     'erlang':%% Line 1371
				      'self'
			    ()
		    in  let <_60> =
			    call %% Line 1371
				 'erlang':%% Line 1371
					  'process_info'
				(_59, %% Line 1371
				      'current_stacktrace')
			in  let <_61> =
				call %% Line 1371
				     'erlang':%% Line 1371
					      'element'
				    (%% Line 1371
				     2, _60)
			    in  let <_rec18> = {%% Line 1373
				     State,%% Line 1373
					   NewData}
				in  %% Line 1373
				    case S of
				      <{'state',_113,_114,_115,_116}> when 'true' ->
					  let <_56> =
					      call %% Line 1374
						   'erlang':%% Line 1374
							    'setelement'
						  (%% Line 1374
						   5, S, %% Line 1374
							 Hibernate)
					  in  let <_58> =
						  call 'erlang':'setelement'
						      (2, _56, _rec18)
					      in  apply 'reply_then_terminate'/8
						      ('exit', Reason, _61, P, Debug, _58, %% Line 1375
											   Q, %% Line 1375
											      Replies)
				      ( <_117> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','state'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
		%% Line 1377
		<_118> when 'true' ->
		    let <_66> =
			call %% Line 1381
			     'erlang':%% Line 1381
				      'self'
			    ()
		    in  let <_67> =
			    call %% Line 1381
				 'erlang':%% Line 1381
					  'process_info'
				(_66, %% Line 1381
				      'current_stacktrace')
			in  let <_68> =
				call %% Line 1381
				     'erlang':%% Line 1381
					      'element'
				    (%% Line 1381
				     2, _67)
			    in  %% Line 1383
				case S of
				  <{'state',_119,_120,_121,_122}> when 'true' ->
				      let <_63> =
					  call %% Line 1384
					       'erlang':%% Line 1384
							'setelement'
					      (%% Line 1384
					       5, S, %% Line 1384
						     Hibernate)
				      in  let <_65> =
					      call 'erlang':'setelement'
						  (2, _63, State_Data)
					  in  apply 'terminate'/7
						  ('error', {'bad_return_from_state_function',Result}, _68, P, Debug, _65, %% Line 1385
															   Q)
				  ( <_123> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','state'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
	      end
	  ( <_80,_79,_78,_77,_76,_75,_74,_73,_72,_71,_70> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_80,_79,_78,_77,_76,_75,_74,_73,_72,_71,_70})
		  -| [{'function_name',{'loop_state_callback_result',11}}] )
	    -| ['compiler_generated'] )
	end
'loop_actions'/12 =
    %% Line 1390
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11> of
	  <%% Line 1391
	   P,%% Line 1391
	     Debug,%% Line 1391
		   S,%% Line 1391
		     Q,%% Line 1391
		       NextState_NewData,%% Line 1392
					 NextEventsR,%% Line 1392
						     Hibernate,%% Line 1392
							       TimeoutsR,%% Line 1392
									 Postpone,%% Line 1393
										  CallEnter,%% Line 1393
											    _X_StateCall,%% Line 1393
													 []> when 'true' ->
	      ( let <_13> =
		    case %% Line 1397
			 CallEnter of
		      %% Line 1416
		      ( <( 'true'
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    ( case P of
				( <( {( 'params'
					-| ['compiler_generated'] ),_25,_rec21,_26,_27,_28,_29}
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      _rec21
				  -| ['compiler_generated'] )
				( <_30> when ( 'true'
					       -| ['compiler_generated'] ) ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','params'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1416
		      ( <( 'false'
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    ( 'false'
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1416
		      ( <_51> when ( 'true'
				     -| ['compiler_generated'] ) ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_51}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		in  %% Line 1416
		    ( case _13 of
			%% Line 1417
			( <( 'true'
			     -| ['compiler_generated'] )> when ( 'true'
								 -| ['compiler_generated'] ) ->
			      %% Line 1418
			      ( apply 'loop_state_enter'/9
				    (P, Debug, S, Q, NextState_NewData, NextEventsR, Hibernate, TimeoutsR, Postpone)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 1421
			( <( 'false'
			     -| ['compiler_generated'] )> when ( 'true'
								 -| ['compiler_generated'] ) ->
			      %% Line 1422
			      ( apply 'loop_state_transition'/9
				    (P, Debug, S, Q, NextState_NewData, NextEventsR, Hibernate, TimeoutsR, Postpone)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			( <_14> when ( 'true'
				       -| ['compiler_generated'] ) ->
			      ( primop ( 'match_fail'
					 -| ['compiler_generated'] )
				    (( {( 'case_clause'
					  -| ['compiler_generated'] ),_14}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	  %% Line 1398
	  <%% Line 1399
	   P,%% Line 1399
	     Debug,%% Line 1399
		   S,%% Line 1399
		     Q,%% Line 1399
		       NextState_NewData,%% Line 1400
					 NextEventsR,%% Line 1400
						     Hibernate,%% Line 1400
							       TimeoutsR,%% Line 1400
									 Postpone,%% Line 1401
										  CallEnter,%% Line 1401
											    StateCall,%% Line 1401
												      Actions> when 'true' ->
	      let <_12> =
		  case %% Line 1406
		       Actions of
		    %% Line 2734
		    ( <Item>
			  when ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'is_list'
								   -| ['compiler_generated'] )
				  (Actions)
			      -| ['compiler_generated'] ) ->
			  %% Line 2735
			  Item
		      -| ['compiler_generated'] )
		    %% Line 2736
		    ( <Item> when ( 'true'
				    -| ['compiler_generated'] ) ->
			  %% Line 2737
			  ( [Item|( []
				    -| ['compiler_generated'] )]
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 1403
		  apply 'loop_actions_list'/12
		      (%% Line 1404
		       P, %% Line 1404
			  Debug, %% Line 1404
				 S, %% Line 1404
				    Q, %% Line 1404
				       NextState_NewData, %% Line 1405
							  NextEventsR, %% Line 1405
								       Hibernate, %% Line 1405
										  TimeoutsR, %% Line 1405
											     Postpone, %% Line 1406
												       CallEnter, %% Line 1406
														  StateCall, _12)
	end
'loop_actions'/10 =
    %% Line 1410
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) ->
	let <_13> =
	    case _9 of
	      %% Line 1416
	      ( <( 'true'
		   -| ['compiler_generated'] )> when 'true' ->
		    ( case _0 of
			( <( {'params',_25,_rec21,_26,_27,_28,_29}
			     -| ['compiler_generated'] )> when 'true' ->
			      _rec21
			  -| ['compiler_generated'] )
			( <_30> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','params'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	      %% Line 1416
	      ( <( 'false'
		   -| ['compiler_generated'] )> when 'true' ->
		    'false'
		-| ['compiler_generated'] )
	      %% Line 1416
	      ( <_10> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {( 'badarg'
				-| ['compiler_generated'] ),_10}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	in  %% Line 1416
	    case _13 of
	      %% Line 1417
	      <'true'> when 'true' ->
		  %% Line 1418
		  apply 'loop_state_enter'/9
		      (_0, _1, _2, _3, _4, _5, _6, _7, _8)
	      %% Line 1421
	      <'false'> when 'true' ->
		  %% Line 1422
		  apply 'loop_state_transition'/9
		      (_0, _1, _2, _3, _4, _5, _6, _7, _8)
	      ( <_14> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_14})
		-| ['compiler_generated'] )
	    end
'loop_actions_list'/12 =
    %% Line 1429
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11> of
	  <%% Line 1430
	   P,%% Line 1430
	     Debug,%% Line 1430
		   S,%% Line 1430
		     Q,%% Line 1430
		       NextState_NewData,%% Line 1431
					 NextEventsR,%% Line 1431
						     Hibernate,%% Line 1431
							       TimeoutsR,%% Line 1431
									 Postpone,%% Line 1432
										  CallEnter,%% Line 1432
											    _X_StateCall,%% Line 1432
													 []> when 'true' ->
	      %% Line 1434
	      ( case P of
		  ( <( {'params',_50,_rec22,_51,_52,_53,_54}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec22 of
			  %% Line 1435
			  <'true'>
			      when ( call 'erlang':'=:='
				      (CallEnter,
				       'true')
				  -| ['compiler_generated'] ) ->
			      %% Line 1436
			      apply 'loop_state_enter'/9
				  (%% Line 1437
				   P, %% Line 1437
				      Debug, %% Line 1437
					     S, %% Line 1437
						Q, %% Line 1437
						   NextState_NewData, %% Line 1438
								      NextEventsR, %% Line 1438
										   Hibernate, %% Line 1438
											      TimeoutsR, %% Line 1438
													 Postpone)
			  %% Line 1439
			  <_56> when 'true' ->
			      %% Line 1440
			      apply 'loop_state_transition'/9
				  (%% Line 1441
				   P, %% Line 1441
				      Debug, %% Line 1441
					     S, %% Line 1441
						Q, %% Line 1441
						   NextState_NewData, %% Line 1442
								      NextEventsR, %% Line 1442
										   Hibernate, %% Line 1442
											      TimeoutsR, %% Line 1442
													 Postpone)
			end
		    -| ['compiler_generated'] )
		  ( <_55> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','params'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1444
	  <%% Line 1445
	   P,%% Line 1445
	     Debug,%% Line 1445
		   S,%% Line 1445
		     Q,%% Line 1445
		       NextState_NewData,%% Line 1446
					 NextEventsR,%% Line 1446
						     Hibernate,%% Line 1446
							       TimeoutsR,%% Line 1446
									 Postpone,%% Line 1447
										  CallEnter,%% Line 1447
											    StateCall,%% Line 1447
												      [Action|Actions]> when 'true' ->
	      %% Line 1449
	      case Action of
		%% Line 1451
		<{'reply',From,Reply}> when 'true' ->
		    %% Line 1452
		    apply 'loop_actions_reply'/14
			(%% Line 1453
			 P, %% Line 1453
			    Debug, %% Line 1453
				   S, %% Line 1453
				      Q, %% Line 1453
					 NextState_NewData, %% Line 1454
							    NextEventsR, %% Line 1454
									 Hibernate, %% Line 1454
										    TimeoutsR, %% Line 1454
											       Postpone, %% Line 1455
													 CallEnter, %% Line 1455
														    StateCall, %% Line 1455
															       Actions, %% Line 1456
																	From, %% Line 1456
																	      Reply)
		%% Line 1459
		<{'hibernate',Hibernate_1}>
		    when call 'erlang':'is_boolean'
			  (Hibernate_1) ->
		    %% Line 1460
		    apply 'loop_actions_list'/12
			(%% Line 1461
			 P, %% Line 1461
			    Debug, %% Line 1461
				   S, %% Line 1461
				      Q, %% Line 1461
					 NextState_NewData, %% Line 1462
							    NextEventsR, %% Line 1462
									 Hibernate_1, %% Line 1462
										      TimeoutsR, %% Line 1462
												 Postpone, %% Line 1463
													   CallEnter, %% Line 1463
														      StateCall, %% Line 1463
																 Actions)
		%% Line 1464
		<'hibernate'> when 'true' ->
		    %% Line 1465
		    apply 'loop_actions_list'/12
			(%% Line 1466
			 P, %% Line 1466
			    Debug, %% Line 1466
				   S, %% Line 1466
				      Q, %% Line 1466
					 NextState_NewData, %% Line 1467
							    NextEventsR, %% Line 1467
									 'true', %% Line 1467
										 TimeoutsR, %% Line 1467
											    Postpone, %% Line 1468
												      CallEnter, %% Line 1468
														 StateCall, %% Line 1468
															    Actions)
		%% Line 1470
		<{'postpone',Postpone_1}>
		    when try
			  ( let <_17> =
				case call 'erlang':'not'
					 (Postpone_1) of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					'true'
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					StateCall
				    -| ['compiler_generated'] )
				  ( <_15> when 'true' ->
					_15
				    -| ['compiler_generated'] )
				end
			    in  ( call 'erlang':'=:='
				      (( _17
					 -| ['compiler_generated'] ), 'true')
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 1471
		    apply 'loop_actions_list'/12
			(%% Line 1472
			 P, %% Line 1472
			    Debug, %% Line 1472
				   S, %% Line 1472
				      Q, %% Line 1472
					 NextState_NewData, %% Line 1473
							    NextEventsR, %% Line 1473
									 Hibernate, %% Line 1473
										    TimeoutsR, %% Line 1473
											       Postpone_1, %% Line 1474
													   CallEnter, %% Line 1474
														      StateCall, %% Line 1474
																 Actions)
		%% Line 1475
		<'postpone'>
		    when ( call 'erlang':'=:='
			    (StateCall,
			     'true')
			-| ['compiler_generated'] ) ->
		    %% Line 1476
		    apply 'loop_actions_list'/12
			(%% Line 1477
			 P, %% Line 1477
			    Debug, %% Line 1477
				   S, %% Line 1477
				      Q, %% Line 1477
					 NextState_NewData, %% Line 1478
							    NextEventsR, %% Line 1478
									 Hibernate, %% Line 1478
										    TimeoutsR, %% Line 1478
											       'true', %% Line 1479
												       CallEnter, %% Line 1479
														  StateCall, %% Line 1479
															     Actions)
		%% Line 1480
		<'postpone'> when 'true' ->
		    let <_22> =
			call %% Line 1484
			     'erlang':%% Line 1484
				      'self'
			    ()
		    in  let <_23> =
			    call %% Line 1484
				 'erlang':%% Line 1484
					  'process_info'
				(_22, %% Line 1484
				      'current_stacktrace')
			in  let <_24> =
				call %% Line 1484
				     'erlang':%% Line 1484
					      'element'
				    (%% Line 1484
				     2, _23)
			    in  %% Line 1486
				case S of
				  <{'state',_57,_58,_59,_60}> when 'true' ->
				      let <_19> =
					  call %% Line 1487
					       'erlang':%% Line 1487
							'setelement'
					      (%% Line 1487
					       5, S, %% Line 1487
						     Hibernate)
				      in  let <_21> =
					      call 'erlang':'setelement'
						  (2, _19, NextState_NewData)
					  in  apply 'terminate'/7
						  ('error', {'bad_state_enter_action_from_state_function',Action}, _24, P, Debug, _21, %% Line 1488
																       Q)
				  ( <_61> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','state'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
		%% Line 1490
		<{'next_event',Type,Content}> when 'true' ->
		    %% Line 1491
		    apply 'loop_actions_next_event'/14
			(%% Line 1492
			 P, %% Line 1492
			    Debug, %% Line 1492
				   S, %% Line 1492
				      Q, %% Line 1492
					 NextState_NewData, %% Line 1493
							    NextEventsR, %% Line 1493
									 Hibernate, %% Line 1493
										    TimeoutsR, %% Line 1493
											       Postpone, %% Line 1494
													 CallEnter, %% Line 1494
														    StateCall, %% Line 1494
															       Actions, %% Line 1494
																	Type, %% Line 1494
																	      Content)
		%% Line 1496
		<{'change_callback_module',NewModule}>
		    when %% Line 1497
		      call 'erlang':'is_atom'
			  (NewModule) ->
		    %% Line 1498
		    case <> of
		      %% Line 1499
		      <>
			  when ( call 'erlang':'=:='
				  (StateCall,
				   'true')
			      -| ['compiler_generated'] ) ->
			  %% Line 1502
			  case P of
			    <{'params',_62,_63,_64,_65,_66,_67}> when 'true' ->
				let <_26> =
				    call 'erlang':'setelement'
					(5, P, NewModule)
				in  let <_28> =
					call 'erlang':'setelement'
					    (2, _26, 'undefined')
				    in  %% Line 1503
					apply 'loop_actions_list'/12
					    (_28, %% Line 1504
						  Debug, %% Line 1504
							 S, %% Line 1504
							    Q, %% Line 1504
							       NextState_NewData, %% Line 1505
										  NextEventsR, %% Line 1505
											       Hibernate, %% Line 1505
													  TimeoutsR, %% Line 1505
														     Postpone, %% Line 1506
															       CallEnter, %% Line 1506
																	  StateCall, %% Line 1506
																		     Actions)
			    ( <_68> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','params'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      %% Line 1507
		      <> when 'true' ->
			  let <_34> =
			      call %% Line 1511
				   'erlang':%% Line 1511
					    'self'
				  ()
			  in  let <_35> =
				  call %% Line 1511
				       'erlang':%% Line 1511
						'process_info'
				      (_34, %% Line 1511
					    'current_stacktrace')
			      in  let <_36> =
				      call %% Line 1511
					   'erlang':%% Line 1511
						    'element'
					  (%% Line 1511
					   2, _35)
				  in  %% Line 1513
				      case S of
					<{'state',_69,_70,_71,_72}> when 'true' ->
					    let <_31> =
						call %% Line 1514
						     'erlang':%% Line 1514
							      'setelement'
						    (%% Line 1514
						     5, S, %% Line 1514
							   Hibernate)
					    in  let <_33> =
						    call 'erlang':'setelement'
							(2, _31, NextState_NewData)
						in  apply 'terminate'/7
							('error', {'bad_state_enter_action_from_state_function',Action}, _36, P, Debug, _33, %% Line 1515
																	     Q)
					( <_73> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','state'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
		    end
		%% Line 1518
		<Timeout> when 'true' ->
		    %% Line 1519
		    apply 'loop_actions_timeout'/13
			(%% Line 1520
			 P, %% Line 1520
			    Debug, %% Line 1520
				   S, %% Line 1520
				      Q, %% Line 1520
					 NextState_NewData, %% Line 1521
							    NextEventsR, %% Line 1521
									 Hibernate, %% Line 1521
										    TimeoutsR, %% Line 1521
											       Postpone, %% Line 1522
													 CallEnter, %% Line 1522
														    StateCall, %% Line 1522
															       Actions, %% Line 1522
																	Timeout)
	      end
	  ( <_49,_48,_47,_46,_45,_44,_43,_42,_41,_40,_39,_38> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_49,_48,_47,_46,_45,_44,_43,_42,_41,_40,_39,_38})
		  -| [{'function_name',{'loop_actions_list',12}}] )
	    -| ['compiler_generated'] )
	end
'loop_actions_reply'/14 =
    %% Line 1527
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13) ->
	%% Line 1533
	case ( case _12 of
		 ( <( {Pid,_54}
		      -| ['compiler_generated'] )>
		       when ( call ( 'erlang'
				  -| ['compiler_generated'] ):( 'is_pid'
								-| ['compiler_generated'] )
			       (Pid)
			   -| ['compiler_generated'] ) ->
		       ( 'true'
			 -| ['compiler_generated'] )
		   -| ['compiler_generated'] )
		 ( <_55> when ( 'true'
				-| ['compiler_generated'] ) ->
		       ( 'false'
			 -| ['compiler_generated'] )
		   -| ['compiler_generated'] )
	       end
	       -| ['compiler_generated'] ) of
	  %% Line 1534
	  <'true'> when 'true' ->
	      do  ( case <_12,_13> of
		      ( <( {To,Tag}
			   -| ['compiler_generated'] ),_58>
			    when ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'is_pid'
								     -| ['compiler_generated'] )
				    (To)
				-| ['compiler_generated'] ) ->
			    ( let <Msg> = {Tag,_58}
			      in  ( try
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( '!'
									       -| ['compiler_generated'] )
					      (To, Msg)
					  -| ['compiler_generated'] )
				    of <_59> ->
					( 'ok'
					  -| ['compiler_generated'] )
				    catch <_62,_63,_64> ->
					( 'ok'
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_71,_72> when ( 'true'
					 -| ['compiler_generated'] ) ->
			    ( primop ( 'match_fail'
				       -| ['compiler_generated'] )
				  (( {( 'function_clause'
					-| ['compiler_generated'] ),_71,_72}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_17> =
		      case _1 of
			%% Line 1539
			<[]> when 'true' ->
			    _1
			%% Line 1539
			<_41> when 'true' ->
			    ( case _0 of
				( <( {'params',_42,_43,_44,_45,_rec26,_46}
				     -| ['compiler_generated'] )> when 'true' ->
				      apply 'sys_debug'/3
					  (_1, _rec26, {'out',_13,_12})
				  -| ['compiler_generated'] )
				( <_47> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','params'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		      end
		  in  %% Line 1540
		      apply 'loop_actions_list'/12
			  (_0, _17, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11)
	  %% Line 1544
	  <'false'> when 'true' ->
	      let <_23> =
		  call %% Line 1548
		       'erlang':%% Line 1548
				'self'
		      ()
	      in  let <_24> =
		      call %% Line 1548
			   'erlang':%% Line 1548
				    'process_info'
			  (_23, %% Line 1548
				'current_stacktrace')
		  in  let <_25> =
			  call %% Line 1548
			       'erlang':%% Line 1548
					'element'
			      (%% Line 1548
			       2, _24)
		      in  %% Line 1550
			  case _2 of
			    <{'state',_48,_49,_50,_51}> when 'true' ->
				let <_20> =
				    call %% Line 1551
					 'erlang':%% Line 1551
						  'setelement'
					(%% Line 1551
					 5, _2, _6)
				in  let <_22> =
					call 'erlang':'setelement'
					    (2, _20, _4)
				    in  apply 'terminate'/7
					    ('error', {'bad_action_from_state_function',{'reply',_12,_13}}, _25, _0, _1, _22, _3)
			    ( <_52> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
	end
'loop_actions_next_event'/14 =
    %% Line 1557
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13) ->
	%% Line 1561
	case ( case _12 of
		 ( <( {( 'call'
			 -| ['compiler_generated'] ),From}
		      -| ['compiler_generated'] )> when ( 'true'
							  -| ['compiler_generated'] ) ->
		       ( case From of
			   ( <( {Pid,_66}
				-| ['compiler_generated'] )>
				 when ( call ( 'erlang'
					    -| ['compiler_generated'] ):( 'is_pid'
									  -| ['compiler_generated'] )
					 (Pid)
				     -| ['compiler_generated'] ) ->
				 ( 'true'
				   -| ['compiler_generated'] )
			     -| ['compiler_generated'] )
			   ( <_67> when ( 'true'
					  -| ['compiler_generated'] ) ->
				 ( 'false'
				   -| ['compiler_generated'] )
			     -| ['compiler_generated'] )
			 end
			 -| ['compiler_generated'] )
		   -| ['compiler_generated'] )
		 ( <( 'cast'
		      -| ['compiler_generated'] )> when ( 'true'
							  -| ['compiler_generated'] ) ->
		       ( 'true'
			 -| ['compiler_generated'] )
		   -| ['compiler_generated'] )
		 ( <( 'info'
		      -| ['compiler_generated'] )> when ( 'true'
							  -| ['compiler_generated'] ) ->
		       ( 'true'
			 -| ['compiler_generated'] )
		   -| ['compiler_generated'] )
		 ( <( 'internal'
		      -| ['compiler_generated'] )> when ( 'true'
							  -| ['compiler_generated'] ) ->
		       ( 'true'
			 -| ['compiler_generated'] )
		   -| ['compiler_generated'] )
		 ( <_68> when ( 'true'
				-| ['compiler_generated'] ) ->
		       ( case _12 of
			   ( <( 'timeout'
				-| ['compiler_generated'] )> when ( 'true'
								    -| ['compiler_generated'] ) ->
				 ( 'true'
				   -| ['compiler_generated'] )
			     -| ['compiler_generated'] )
			   ( <( 'state_timeout'
				-| ['compiler_generated'] )> when ( 'true'
								    -| ['compiler_generated'] ) ->
				 ( 'true'
				   -| ['compiler_generated'] )
			     -| ['compiler_generated'] )
			   ( <( {( 'timeout'
				   -| ['compiler_generated'] ),_X_Name}
				-| ['compiler_generated'] )> when ( 'true'
								    -| ['compiler_generated'] ) ->
				 ( 'true'
				   -| ['compiler_generated'] )
			     -| ['compiler_generated'] )
			   ( <_71> when ( 'true'
					  -| ['compiler_generated'] ) ->
				 ( 'false'
				   -| ['compiler_generated'] )
			     -| ['compiler_generated'] )
			 end
			 -| ['compiler_generated'] )
		   -| ['compiler_generated'] )
	       end
	       -| ['compiler_generated'] ) of
	  %% Line 1562
	  <'true'>
	      when ( call 'erlang':'=:='
		      (_10,
		       'true')
		  -| ['compiler_generated'] ) ->
	      let <NextEvent> = {_12,_13}
	      in  %% Line 1564
		  case _1 of
		    %% Line 1565
		    <[]> when 'true' ->
			%% Line 1566
			apply 'loop_actions_list'/12
			    (_0, _1, _2, _3, _4, %% Line 1568
						 [NextEvent|_5], _6, _7, _8, _9, _10, _11)
		    %% Line 1571
		    <_46> when 'true' ->
			%% Line 1572
			( case _0 of
			    ( <( {'params',_47,_48,_49,_50,_rec28,_51}
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 1573
				  ( case _2 of
				      ( <( {'state',_rec29,_53,_54,_55}
					   -| ['compiler_generated'] )> when 'true' ->
					    case _rec29 of
					      <{State,_X_Data}> when 'true' ->
						  let <Debug_1> =
						      apply %% Line 1575
							    'sys_debug'/3
							  (_1, _rec28, %% Line 1575
								       {'in',{_12,_13},State})
						  in  %% Line 1576
						      apply 'loop_actions_list'/12
							  (_0, %% Line 1577
							       Debug_1, _2, _3, _4, %% Line 1578
										    [NextEvent|_5], _6, _7, _8, _9, _10, _11)
					      ( <_20> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_20})
						-| ['compiler_generated'] )
					    end
					-| ['compiler_generated'] )
				      ( <_56> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','state'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_52> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','params'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		  end
	  %% Line 1582
	  <_57> when 'true' ->
	      let <_30> =
		  case <> of
		    %% Line 1586
		    <>
			when ( call 'erlang':'=:='
				(_10,
				 'true')
			    -| ['compiler_generated'] ) ->
			%% Line 1587
			'bad_action_from_state_function'
		    %% Line 1588
		    <> when 'true' ->
			%% Line 1589
			'bad_state_enter_action_from_state_function'
		  end
	      in  let <_27> =
		      call %% Line 1592
			   'erlang':%% Line 1592
				    'self'
			  ()
		  in  let <_28> =
			  call %% Line 1592
			       'erlang':%% Line 1592
					'process_info'
			      (_27, %% Line 1592
				    'current_stacktrace')
		      in  let <_29> =
			      call %% Line 1592
				   'erlang':%% Line 1592
					    'element'
				  (%% Line 1592
				   2, _28)
			  in  %% Line 1594
			      case _2 of
				<{'state',_58,_59,_60,_61}> when 'true' ->
				    let <_24> =
					call %% Line 1595
					     'erlang':%% Line 1595
						      'setelement'
					    (%% Line 1595
					     5, _2, _6)
				    in  let <_26> =
					    call 'erlang':'setelement'
						(2, _24, _4)
					in  apply 'terminate'/7
						('error', {_30,{'next_event',_12,_13}}, _29, _0, _1, _26, _3)
				( <_62> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','state'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
	end
'loop_actions_timeout'/13 =
    %% Line 1601
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12> of
	  <%% Line 1602
	   P,%% Line 1602
	     Debug,%% Line 1602
		   S,%% Line 1602
		     Q,%% Line 1602
		       NextState_NewData,%% Line 1603
					 NextEventsR,%% Line 1603
						     Hibernate,%% Line 1603
							       TimeoutsR,%% Line 1603
									 Postpone,%% Line 1604
										  CallEnter,%% Line 1604
											    StateCall,%% Line 1604
												      Actions,%% Line 1605
													      Timeout = %% Line 1605
															{TimeoutType,Time,TimeoutMsg,TimeoutOpts}> when 'true' ->
	      %% Line 1607
	      case ( case TimeoutType of
		       ( <( 'timeout'
			    -| ['compiler_generated'] )> when ( 'true'
								-| ['compiler_generated'] ) ->
			     ( 'true'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       ( <( 'state_timeout'
			    -| ['compiler_generated'] )> when ( 'true'
								-| ['compiler_generated'] ) ->
			     ( 'true'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       ( <( {( 'timeout'
			       -| ['compiler_generated'] ),_X_Name}
			    -| ['compiler_generated'] )> when ( 'true'
								-| ['compiler_generated'] ) ->
			     ( 'true'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       ( <_137> when ( 'true'
				       -| ['compiler_generated'] ) ->
			     ( 'false'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		     end
		     -| ['compiler_generated'] ) of
		%% Line 1608
		<'true'> when 'true' ->
		    %% Line 1609
		    case %% Line 2734
			 ( case TimeoutOpts of
			     ( <Item>
				   when ( call ( 'erlang'
					      -| ['compiler_generated'] ):( 'is_list'
									    -| ['compiler_generated'] )
					   (TimeoutOpts)
				       -| ['compiler_generated'] ) ->
				   %% Line 2735
				   Item
			       -| ['compiler_generated'] )
			     %% Line 2736
			     ( <Item> when ( 'true'
					     -| ['compiler_generated'] ) ->
				   %% Line 2737
				   ( [Item|( []
					     -| ['compiler_generated'] )]
				     -| ['compiler_generated'] )
			       -| ['compiler_generated'] )
			   end
			   -| ['compiler_generated'] ) of
		      %% Line 1611
		      <[{'abs','true'}]>
			  when try
				( let <_15> =
				      case call 'erlang':'is_integer'
					       (Time) of
					( <( 'true'
					     -| ['compiler_generated'] )> when 'true' ->
					      'true'
					  -| ['compiler_generated'] )
					( <( 'false'
					     -| ['compiler_generated'] )> when 'true' ->
					      call 'erlang':'=:='
						  (Time, 'infinity')
					  -| ['compiler_generated'] )
					( <_13> when 'true' ->
					      _13
					  -| ['compiler_generated'] )
				      end
				  in  ( call 'erlang':'=:='
					    (( _15
					       -| ['compiler_generated'] ), 'true')
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false' ->
			  %% Line 1612
			  apply 'loop_actions_list'/12
			      (%% Line 1613
			       P, %% Line 1613
				  Debug, %% Line 1613
					 S, %% Line 1613
					    Q, %% Line 1613
					       NextState_NewData, %% Line 1614
								  NextEventsR, %% Line 1614
									       Hibernate, %% Line 1615
											  [Timeout|TimeoutsR], %% Line 1615
													       Postpone, %% Line 1616
															 CallEnter, %% Line 1616
																    StateCall, %% Line 1616
																	       Actions)
		      %% Line 1617
		      <[{'abs','false'}]>
			  when try
				let <_19> =
				    case call 'erlang':'is_integer'
					     (Time) of
				      ( <( 'true'
					   -| ['compiler_generated'] )> when 'true' ->
					    call 'erlang':'=<'
						(0, Time)
					-| ['compiler_generated'] )
				      ( <( 'false'
					   -| ['compiler_generated'] )> when 'true' ->
					    'false'
					-| ['compiler_generated'] )
				      ( <_17> when 'true' ->
					    _17
					-| ['compiler_generated'] )
				    end
				in  ( let <_21> =
					  case _19 of
					    ( <( 'true'
						 -| ['compiler_generated'] )> when 'true' ->
						  'true'
					      -| ['compiler_generated'] )
					    ( <( 'false'
						 -| ['compiler_generated'] )> when 'true' ->
						  call 'erlang':'=:='
						      (Time, 'infinity')
					      -| ['compiler_generated'] )
					    ( <_16> when 'true' ->
						  _16
					      -| ['compiler_generated'] )
					  end
				      in  ( call 'erlang':'=:='
						(( _21
						   -| ['compiler_generated'] ), 'true')
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false' ->
			  let <RelativeTimeout> = {%% Line 1618
			       TimeoutType,%% Line 1618
					   Time,%% Line 1618
						TimeoutMsg}
			  in  %% Line 1619
			      apply 'loop_actions_list'/12
				  (%% Line 1620
				   P, %% Line 1620
				      Debug, %% Line 1620
					     S, %% Line 1620
						Q, %% Line 1620
						   NextState_NewData, %% Line 1621
								      NextEventsR, %% Line 1621
										   Hibernate, %% Line 1622
											      [RelativeTimeout|TimeoutsR], %% Line 1622
															   Postpone, %% Line 1623
																     CallEnter, %% Line 1623
																		StateCall, %% Line 1623
																			   Actions)
		      %% Line 1624
		      <[]>
			  when try
				let <_26> =
				    case call 'erlang':'is_integer'
					     (Time) of
				      ( <( 'true'
					   -| ['compiler_generated'] )> when 'true' ->
					    call 'erlang':'=<'
						(0, Time)
					-| ['compiler_generated'] )
				      ( <( 'false'
					   -| ['compiler_generated'] )> when 'true' ->
					    'false'
					-| ['compiler_generated'] )
				      ( <_24> when 'true' ->
					    _24
					-| ['compiler_generated'] )
				    end
				in  ( let <_28> =
					  case _26 of
					    ( <( 'true'
						 -| ['compiler_generated'] )> when 'true' ->
						  'true'
					      -| ['compiler_generated'] )
					    ( <( 'false'
						 -| ['compiler_generated'] )> when 'true' ->
						  call 'erlang':'=:='
						      (Time, 'infinity')
					      -| ['compiler_generated'] )
					    ( <_23> when 'true' ->
						  _23
					      -| ['compiler_generated'] )
					  end
				      in  ( call 'erlang':'=:='
						(( _28
						   -| ['compiler_generated'] ), 'true')
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false' ->
			  let <RelativeTimeout> = {%% Line 1625
			       TimeoutType,%% Line 1625
					   Time,%% Line 1625
						TimeoutMsg}
			  in  %% Line 1626
			      apply 'loop_actions_list'/12
				  (%% Line 1627
				   P, %% Line 1627
				      Debug, %% Line 1627
					     S, %% Line 1627
						Q, %% Line 1627
						   NextState_NewData, %% Line 1628
								      NextEventsR, %% Line 1628
										   Hibernate, %% Line 1629
											      [RelativeTimeout|TimeoutsR], %% Line 1629
															   Postpone, %% Line 1630
																     CallEnter, %% Line 1630
																		StateCall, %% Line 1630
																			   Actions)
		      %% Line 1632
		      <TimeoutOptsList> when 'true' ->
			  %% Line 1633
			  case apply 'parse_timeout_opts_abs'/1
				   (TimeoutOptsList) of
			    %% Line 1634
			    <'true'>
				when try
				      ( let <_32> =
					    case call 'erlang':'is_integer'
						     (Time) of
					      ( <( 'true'
						   -| ['compiler_generated'] )> when 'true' ->
						    'true'
						-| ['compiler_generated'] )
					      ( <( 'false'
						   -| ['compiler_generated'] )> when 'true' ->
						    call 'erlang':'=:='
							(Time, 'infinity')
						-| ['compiler_generated'] )
					      ( <_30> when 'true' ->
						    _30
						-| ['compiler_generated'] )
					    end
					in  ( call 'erlang':'=:='
						  (( _32
						     -| ['compiler_generated'] ), 'true')
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false' ->
				%% Line 1635
				apply 'loop_actions_list'/12
				    (%% Line 1636
				     P, %% Line 1636
					Debug, %% Line 1636
					       S, %% Line 1636
						  Q, %% Line 1636
						     NextState_NewData, %% Line 1637
									NextEventsR, %% Line 1637
										     Hibernate, %% Line 1638
												[Timeout|TimeoutsR], %% Line 1638
														     Postpone, %% Line 1639
															       CallEnter, %% Line 1639
																	  StateCall, %% Line 1639
																		     Actions)
			    %% Line 1640
			    <'false'>
				when try
				      let <_36> =
					  case call 'erlang':'is_integer'
						   (Time) of
					    ( <( 'true'
						 -| ['compiler_generated'] )> when 'true' ->
						  call 'erlang':'=<'
						      (0, Time)
					      -| ['compiler_generated'] )
					    ( <( 'false'
						 -| ['compiler_generated'] )> when 'true' ->
						  'false'
					      -| ['compiler_generated'] )
					    ( <_34> when 'true' ->
						  _34
					      -| ['compiler_generated'] )
					  end
				      in  ( let <_38> =
						case _36 of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							'true'
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							call 'erlang':'=:='
							    (Time, 'infinity')
						    -| ['compiler_generated'] )
						  ( <_33> when 'true' ->
							_33
						    -| ['compiler_generated'] )
						end
					    in  ( call 'erlang':'=:='
						      (( _38
							 -| ['compiler_generated'] ), 'true')
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false' ->
				let <RelativeTimeout> = {%% Line 1641
				     TimeoutType,%% Line 1641
						 Time,%% Line 1641
						      TimeoutMsg}
				in  %% Line 1642
				    apply 'loop_actions_list'/12
					(%% Line 1643
					 P, %% Line 1643
					    Debug, %% Line 1643
						   S, %% Line 1643
						      Q, %% Line 1643
							 NextState_NewData, %% Line 1644
									    NextEventsR, %% Line 1644
											 Hibernate, %% Line 1645
												    [RelativeTimeout|TimeoutsR], %% Line 1645
																 Postpone, %% Line 1646
																	   CallEnter, %% Line 1646
																		      StateCall, %% Line 1646
																				 Actions)
			    %% Line 1647
			    <_109> when 'true' ->
				let <_44> =
				    call %% Line 1651
					 'erlang':%% Line 1651
						  'self'
					()
				in  let <_45> =
					call %% Line 1651
					     'erlang':%% Line 1651
						      'process_info'
					    (_44, %% Line 1651
						  'current_stacktrace')
				    in  let <_46> =
					    call %% Line 1651
						 'erlang':%% Line 1651
							  'element'
						(%% Line 1651
						 2, _45)
					in  %% Line 1653
					    case S of
					      <{'state',_110,_111,_112,_113}> when 'true' ->
						  let <_41> =
						      call %% Line 1654
							   'erlang':%% Line 1654
								    'setelement'
							  (%% Line 1654
							   5, S, %% Line 1654
								 Hibernate)
						  in  let <_43> =
							  call 'erlang':'setelement'
							      (2, _41, NextState_NewData)
						      in  apply 'terminate'/7
							      ('error', {'bad_action_from_state_function',Timeout}, _46, P, Debug, _43, %% Line 1655
																	Q)
					      ( <_114> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','state'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
			  end
		    end
		%% Line 1658
		<'false'> when 'true' ->
		    let <_53> =
			call %% Line 1662
			     'erlang':%% Line 1662
				      'self'
			    ()
		    in  let <_54> =
			    call %% Line 1662
				 'erlang':%% Line 1662
					  'process_info'
				(_53, %% Line 1662
				      'current_stacktrace')
			in  let <_55> =
				call %% Line 1662
				     'erlang':%% Line 1662
					      'element'
				    (%% Line 1662
				     2, _54)
			    in  %% Line 1664
				case S of
				  <{'state',_115,_116,_117,_118}> when 'true' ->
				      let <_50> =
					  call %% Line 1665
					       'erlang':%% Line 1665
							'setelement'
					      (%% Line 1665
					       5, S, %% Line 1665
						     Hibernate)
				      in  let <_52> =
					      call 'erlang':'setelement'
						  (2, _50, NextState_NewData)
					  in  apply 'terminate'/7
						  ('error', {'bad_action_from_state_function',Timeout}, _55, P, Debug, _52, %% Line 1666
															    Q)
				  ( <_119> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','state'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
	      end
	  %% Line 1668
	  <%% Line 1669
	   P,%% Line 1669
	     Debug,%% Line 1669
		   S,%% Line 1669
		     Q,%% Line 1669
		       NextState_NewData,%% Line 1670
					 NextEventsR,%% Line 1670
						     Hibernate,%% Line 1670
							       TimeoutsR,%% Line 1670
									 Postpone,%% Line 1671
										  CallEnter,%% Line 1671
											    StateCall,%% Line 1671
												      Actions,%% Line 1672
													      Timeout = %% Line 1672
															{TimeoutType,Time,_X_TimeoutMsg}> when 'true' ->
	      %% Line 1674
	      case ( case TimeoutType of
		       ( <( 'timeout'
			    -| ['compiler_generated'] )> when ( 'true'
								-| ['compiler_generated'] ) ->
			     ( 'true'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       ( <( 'state_timeout'
			    -| ['compiler_generated'] )> when ( 'true'
								-| ['compiler_generated'] ) ->
			     ( 'true'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       ( <( {( 'timeout'
			       -| ['compiler_generated'] ),_X_Name}
			    -| ['compiler_generated'] )> when ( 'true'
								-| ['compiler_generated'] ) ->
			     ( 'true'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       ( <_141> when ( 'true'
				       -| ['compiler_generated'] ) ->
			     ( 'false'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		     end
		     -| ['compiler_generated'] ) of
		%% Line 1675
		<'true'>
		    when let <_63> =
			  try
			      let <_60> =
				  case %% Line 1676
				       call 'erlang':'is_integer'
					   (Time) of
				    %% Line 1676
				    ( <( 'true'
					 -| ['compiler_generated'] )> when 'true' ->
					  call 'erlang':'=<'
					      (0, Time)
				      -| ['compiler_generated'] )
				    %% Line 1676
				    ( <( 'false'
					 -| ['compiler_generated'] )> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				    %% Line 1676
				    ( <_58> when 'true' ->
					  _58
				      -| ['compiler_generated'] )
				  end
			      in  ( let <_62> =
					case _60 of
					  %% Line 1676
					  ( <( 'true'
					       -| ['compiler_generated'] )> when 'true' ->
						'true'
					    -| ['compiler_generated'] )
					  %% Line 1676
					  ( <( 'false'
					       -| ['compiler_generated'] )> when 'true' ->
						call 'erlang':'=:='
						    (Time, 'infinity')
					    -| ['compiler_generated'] )
					  %% Line 1676
					  ( <_57> when 'true' ->
						_57
					    -| ['compiler_generated'] )
					end
				    in  ( call 'erlang':'=:='
					      (%% Line 1676
					       ( _62
						 -| ['compiler_generated'] ), 'true')
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false'
		      in  let <_64> =
			      call %% Line 1677
				   'erlang':%% Line 1677
					    '=:='
				  (%% Line 1677
				   Time, %% Line 1677
					 'update')
			  in  %% Line 1676
			      call 'erlang':'or'
				  (_63, _64) ->
		    %% Line 1678
		    apply 'loop_actions_list'/12
			(%% Line 1679
			 P, %% Line 1679
			    Debug, %% Line 1679
				   S, %% Line 1679
				      Q, %% Line 1679
					 NextState_NewData, %% Line 1680
							    NextEventsR, %% Line 1680
									 Hibernate, %% Line 1681
										    [Timeout|TimeoutsR], %% Line 1681
													 Postpone, %% Line 1682
														   CallEnter, %% Line 1682
															      StateCall, %% Line 1682
																	 Actions)
		%% Line 1683
		<_120> when 'true' ->
		    let <_69> =
			call %% Line 1687
			     'erlang':%% Line 1687
				      'self'
			    ()
		    in  let <_70> =
			    call %% Line 1687
				 'erlang':%% Line 1687
					  'process_info'
				(_69, %% Line 1687
				      'current_stacktrace')
			in  let <_71> =
				call %% Line 1687
				     'erlang':%% Line 1687
					      'element'
				    (%% Line 1687
				     2, _70)
			    in  %% Line 1689
				case S of
				  <{'state',_121,_122,_123,_124}> when 'true' ->
				      let <_66> =
					  call %% Line 1690
					       'erlang':%% Line 1690
							'setelement'
					      (%% Line 1690
					       5, S, %% Line 1690
						     Hibernate)
				      in  let <_68> =
					      call 'erlang':'setelement'
						  (2, _66, NextState_NewData)
					  in  apply 'terminate'/7
						  ('error', {'bad_action_from_state_function',Timeout}, _71, P, Debug, _68, %% Line 1691
															    Q)
				  ( <_125> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','state'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
	      end
	  %% Line 1693
	  <%% Line 1694
	   P,%% Line 1694
	     Debug,%% Line 1694
		   S,%% Line 1694
		     Q,%% Line 1694
		       NextState_NewData,%% Line 1695
					 NextEventsR,%% Line 1695
						     Hibernate,%% Line 1695
							       TimeoutsR,%% Line 1695
									 Postpone,%% Line 1696
										  CallEnter,%% Line 1696
											    StateCall,%% Line 1696
												      Actions,%% Line 1697
													      Action = %% Line 1697
														       {TimeoutType,'cancel'}> when 'true' ->
	      %% Line 1699
	      case ( case TimeoutType of
		       ( <( 'timeout'
			    -| ['compiler_generated'] )> when ( 'true'
								-| ['compiler_generated'] ) ->
			     ( 'true'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       ( <( 'state_timeout'
			    -| ['compiler_generated'] )> when ( 'true'
								-| ['compiler_generated'] ) ->
			     ( 'true'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       ( <( {( 'timeout'
			       -| ['compiler_generated'] ),_X_Name}
			    -| ['compiler_generated'] )> when ( 'true'
								-| ['compiler_generated'] ) ->
			     ( 'true'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       ( <_144> when ( 'true'
				       -| ['compiler_generated'] ) ->
			     ( 'false'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		     end
		     -| ['compiler_generated'] ) of
		%% Line 1700
		<'true'> when 'true' ->
		    let <Timeout> = {%% Line 1701
			 TimeoutType,%% Line 1701
				     'infinity',%% Line 1701
						'undefined'}
		    in  %% Line 1702
			apply 'loop_actions_list'/12
			    (%% Line 1703
			     P, %% Line 1703
				Debug, %% Line 1703
				       S, %% Line 1703
					  Q, %% Line 1703
					     NextState_NewData, %% Line 1704
								NextEventsR, %% Line 1704
									     Hibernate, %% Line 1705
											[Timeout|TimeoutsR], %% Line 1705
													     Postpone, %% Line 1706
														       CallEnter, %% Line 1706
																  StateCall, %% Line 1706
																	     Actions)
		%% Line 1707
		<'false'> when 'true' ->
		    let <_78> =
			call %% Line 1711
			     'erlang':%% Line 1711
				      'self'
			    ()
		    in  let <_79> =
			    call %% Line 1711
				 'erlang':%% Line 1711
					  'process_info'
				(_78, %% Line 1711
				      'current_stacktrace')
			in  let <_80> =
				call %% Line 1711
				     'erlang':%% Line 1711
					      'element'
				    (%% Line 1711
				     2, _79)
			    in  %% Line 1713
				case S of
				  <{'state',_126,_127,_128,_129}> when 'true' ->
				      let <_75> =
					  call %% Line 1714
					       'erlang':%% Line 1714
							'setelement'
					      (%% Line 1714
					       5, S, %% Line 1714
						     Hibernate)
				      in  let <_77> =
					      call 'erlang':'setelement'
						  (2, _75, NextState_NewData)
					  in  apply 'terminate'/7
						  ('error', {'bad_action_from_state_function',Action}, _80, P, Debug, _77, %% Line 1715
															   Q)
				  ( <_130> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','state'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
	      end
	  %% Line 1717
	  <%% Line 1718
	   P,%% Line 1718
	     Debug,%% Line 1718
		   S,%% Line 1718
		     Q,%% Line 1718
		       NextState_NewData,%% Line 1719
					 NextEventsR,%% Line 1719
						     Hibernate,%% Line 1719
							       TimeoutsR,%% Line 1719
									 Postpone,%% Line 1720
										  CallEnter,%% Line 1720
											    StateCall,%% Line 1720
												      Actions,%% Line 1721
													      Time> when 'true' ->
	      %% Line 1723
	      case <> of
		%% Line 1724
		<>
		    when try
			  let <_85> =
			      case call 'erlang':'is_integer'
				       (Time) of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      call 'erlang':'=<'
					  (0, Time)
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
				( <_83> when 'true' ->
				      _83
				  -| ['compiler_generated'] )
			      end
			  in  ( let <_87> =
				    case _85 of
				      ( <( 'true'
					   -| ['compiler_generated'] )> when 'true' ->
					    'true'
					-| ['compiler_generated'] )
				      ( <( 'false'
					   -| ['compiler_generated'] )> when 'true' ->
					    call 'erlang':'=:='
						(Time, 'infinity')
					-| ['compiler_generated'] )
				      ( <_82> when 'true' ->
					    _82
					-| ['compiler_generated'] )
				    end
				in  ( call 'erlang':'=:='
					  (( _87
					     -| ['compiler_generated'] ), 'true')
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <Timeout> = {%% Line 1725
			 'timeout',%% Line 1725
				   Time,%% Line 1725
					Time}
		    in  %% Line 1726
			apply 'loop_actions_list'/12
			    (%% Line 1727
			     P, %% Line 1727
				Debug, %% Line 1727
				       S, %% Line 1727
					  Q, %% Line 1727
					     NextState_NewData, %% Line 1728
								NextEventsR, %% Line 1728
									     Hibernate, %% Line 1729
											[Timeout|TimeoutsR], %% Line 1729
													     Postpone, %% Line 1730
														       CallEnter, %% Line 1730
																  StateCall, %% Line 1730
																	     Actions)
		%% Line 1731
		<> when 'true' ->
		    let <_93> =
			call %% Line 1735
			     'erlang':%% Line 1735
				      'self'
			    ()
		    in  let <_94> =
			    call %% Line 1735
				 'erlang':%% Line 1735
					  'process_info'
				(_93, %% Line 1735
				      'current_stacktrace')
			in  let <_95> =
				call %% Line 1735
				     'erlang':%% Line 1735
					      'element'
				    (%% Line 1735
				     2, _94)
			    in  %% Line 1737
				case S of
				  <{'state',_131,_132,_133,_134}> when 'true' ->
				      let <_90> =
					  call %% Line 1738
					       'erlang':%% Line 1738
							'setelement'
					      (%% Line 1738
					       5, S, %% Line 1738
						     Hibernate)
				      in  let <_92> =
					      call 'erlang':'setelement'
						  (2, _90, NextState_NewData)
					  in  apply 'terminate'/7
						  ('error', {'bad_action_from_state_function',Time}, _95, P, Debug, _92, %% Line 1739
															 Q)
				  ( <_135> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','state'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
	      end
	end
'loop_state_transition'/9 =
    %% Line 1744
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <%% Line 1745
	   P,%% Line 1745
	     Debug,%% Line 1745
		   S = %% Line 1745
		       {'state',{State,_X_Data},Postponed,_28,_29},%% Line 1746
								   [Event|Events],%% Line 1746
										  NextState_NewData = %% Line 1746
												      {NextState,_X_NewData},%% Line 1747
															     NextEventsR,%% Line 1747
																	 Hibernate,%% Line 1747
																		   TimeoutsR,%% Line 1747
																			     Postpone> when 'true' ->
	      let <_10> =
		  case %% Line 1753
		       Postpone of
		    %% Line 1754
		    <'true'> when 'true' ->
			%% Line 1755
			[Event|Postponed]
		    %% Line 1756
		    <'false'> when 'true' ->
			%% Line 1757
			Postponed
		    ( <_9> when 'true' ->
			  %% Line 1753
			  primop 'match_fail'
			      ({'case_clause',_9})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 1759
		  case Debug of
		    %% Line 1760
		    <[]> when 'true' ->
			%% Line 1763
			case <> of
			  %% Line 1764
			  <>
			      when call 'erlang':'=:='
				    (NextState,
				     State) ->
			      %% Line 1765
			      apply 'loop_keep_state'/9
				  (%% Line 1766
				   P, %% Line 1766
				      Debug, %% Line 1766
					     S, %% Line 1767
						Events, %% Line 1767
							NextState_NewData, %% Line 1768
									   NextEventsR, %% Line 1768
											Hibernate, %% Line 1768
												   TimeoutsR, _10)
			  %% Line 1769
			  <> when 'true' ->
			      %% Line 1770
			      apply 'loop_state_change'/9
				  (%% Line 1771
				   P, %% Line 1771
				      Debug, %% Line 1771
					     S, %% Line 1772
						Events, %% Line 1772
							NextState_NewData, %% Line 1773
									   NextEventsR, %% Line 1773
											Hibernate, %% Line 1773
												   TimeoutsR, _10)
			end
		    %% Line 1775
		    <_30> when 'true' ->
			%% Line 1777
			( case P of
			    ( <( {'params',_31,_32,_33,_34,_rec36,_35}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_16> =
				      case %% Line 1779
					   Postpone of
					%% Line 1780
					<'true'> when 'true' ->
					    %% Line 1781
					    apply 'sys_debug'/3
						(%% Line 1782
						 Debug, _rec36, %% Line 1783
								{'postpone',Event,State,NextState})
					%% Line 1784
					<'false'> when 'true' ->
					    %% Line 1785
					    apply 'sys_debug'/3
						(%% Line 1786
						 Debug, _rec36, %% Line 1787
								{'consume',Event,State,NextState})
					( <_15> when 'true' ->
					      %% Line 1779
					      primop 'match_fail'
						  ({'case_clause',_15})
					  -| ['compiler_generated'] )
				      end
				  in  %% Line 1789
				      case <> of
					%% Line 1790
					<>
					    when call 'erlang':'=:='
						  (NextState,
						   State) ->
					    %% Line 1791
					    apply 'loop_keep_state'/9
						(%% Line 1792
						 P, _16, %% Line 1792
							 S, %% Line 1793
							    Events, %% Line 1793
								    NextState_NewData, %% Line 1794
										       NextEventsR, %% Line 1794
												    Hibernate, %% Line 1794
													       TimeoutsR, _10)
					%% Line 1795
					<> when 'true' ->
					    %% Line 1796
					    apply 'loop_state_change'/9
						(%% Line 1797
						 P, _16, %% Line 1797
							 S, %% Line 1798
							    Events, %% Line 1798
								    NextState_NewData, %% Line 1799
										       NextEventsR, %% Line 1799
												    Hibernate, %% Line 1799
													       TimeoutsR, _10)
				      end
			      -| ['compiler_generated'] )
			    ( <_36> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','params'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		  end
	  ( <_27,_26,_25,_24,_23,_22,_21,_20,_19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_27,_26,_25,_24,_23,_22,_21,_20,_19})
		  -| [{'function_name',{'loop_state_transition',9}}] )
	    -| ['compiler_generated'] )
	end
'loop_keep_state'/9 =
    %% Line 1805
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of
	  <%% Line 1806
	   P,%% Line 1806
	     Debug,%% Line 1806
		   S = %% Line 1806
		       {'state',_20,_21,Timers,_22},%% Line 1807
						    Events,%% Line 1807
							   NextState_NewData,%% Line 1808
									     NextEventsR,%% Line 1808
											 Hibernate,%% Line 1808
												   TimeoutsR,%% Line 1808
													     Postponed> when 'true' ->
	      %% Line 1812
	      case Timers of
		%% Line 1813
		<~{'timeout':={TimerRef,_X_TimeoutMsg}}~> when 'true' ->
		    ( do  %% Line 2771
			  ( case ( call ( 'erlang'
					  -| ['compiler_generated'] ):( 'cancel_timer'
									-| ['compiler_generated'] )
				       (TimerRef)
				   -| ['compiler_generated'] ) of
			      ( <( 'false'
				   -| ['compiler_generated'] )> when ( 'true'
								       -| ['compiler_generated'] ) ->
				    ( receive
					( <( {( 'timeout'
						-| ['compiler_generated'] ),_29,_30}
					     -| ['compiler_generated'] )>
					      when ( call ( 'erlang'
							 -| ['compiler_generated'] ):( '=:='
										       -| ['compiler_generated'] )
						      (_29,
						       TimerRef)
						  -| ['compiler_generated'] ) ->
					      'ok'
					  -| ['compiler_generated'] )
				      after ( 'infinity'
					      -| ['compiler_generated'] ) ->
					'ok'
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <_9> when ( 'true'
					    -| ['compiler_generated'] ) ->
				    'ok'
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  let <_9> =
			      call %% Line 2771
				   ( 'maps'
				     -| ['compiler_generated'] ):%% Line 2771
								 ( 'remove'
								   -| ['compiler_generated'] )
				  (%% Line 1819
				   ( 'timeout'
				     -| ['compiler_generated'] ), %% Line 1819
								  Timers)
			  in  %% Line 1815
			      apply 'loop_next_events'/10
				  (%% Line 1816
				   P, %% Line 1816
				      Debug, %% Line 1816
					     S, %% Line 1817
						Events, %% Line 1817
							NextState_NewData, %% Line 1818
									   NextEventsR, %% Line 1818
											Hibernate, %% Line 1818
												   TimeoutsR, %% Line 1818
													      Postponed, _9)
		      -| ['compiler_generated'] )
		%% Line 1820
		<_23> when 'true' ->
		    %% Line 1822
		    apply 'loop_next_events'/10
			(%% Line 1823
			 P, %% Line 1823
			    Debug, %% Line 1823
				   S, %% Line 1824
				      Events, %% Line 1824
					      NextState_NewData, %% Line 1825
								 NextEventsR, %% Line 1825
									      Hibernate, %% Line 1825
											 TimeoutsR, %% Line 1825
												    Postponed, %% Line 1826
													       Timers)
	      end
	  ( <_19,_18,_17,_16,_15,_14,_13,_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_19,_18,_17,_16,_15,_14,_13,_12,_11})
		  -| [{'function_name',{'loop_keep_state',9}}] )
	    -| ['compiler_generated'] )
	end
'loop_state_change'/9 =
    %% Line 1831
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) ->
	%% Line 1837
	case _8 of
	  %% Line 1838
	  <[]> when 'true' ->
	      %% Line 1839
	      apply 'loop_state_change'/8
		  (_0, _1, _2, _3, _4, _5, _6, _7)
	  %% Line 1843
	  <[E1|[]]> when 'true' ->
	      %% Line 1844
	      apply 'loop_state_change'/8
		  (_0, _1, _2, %% Line 1846
			       [E1|_3], _4, _5, _6, _7)
	  %% Line 1848
	  <[E2|[E1|[]]]> when 'true' ->
	      %% Line 1849
	      apply 'loop_state_change'/8
		  (_0, _1, _2, %% Line 1851
			       [E1|[E2|_3]], _4, _5, _6, _7)
	  %% Line 1853
	  <_20> when 'true' ->
	      let <_9> =
		  call %% Line 1856
		       'lists':%% Line 1856
			       'reverse'
		      (_8, _3)
	      in  %% Line 1854
		  apply 'loop_state_change'/8
		      (_0, _1, _2, _9, _4, _5, _6, _7)
	end
'loop_state_change'/8 =
    %% Line 1860
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <%% Line 1861
	   P,%% Line 1861
	     Debug,%% Line 1861
		   S = %% Line 1861
		       {'state',_20,_21,Timers,_22},%% Line 1862
						    Events,%% Line 1862
							   NextState_NewData,%% Line 1863
									     NextEventsR,%% Line 1863
											 Hibernate,%% Line 1863
												   TimeoutsR> when 'true' ->
	      %% Line 1867
	      case Timers of
		%% Line 1871
		<~{'state_timeout':={TimerRef,_X_TimeoutMsg}}~> when 'true' ->
		    ( do  %% Line 2771
			  ( case ( call ( 'erlang'
					  -| ['compiler_generated'] ):( 'cancel_timer'
									-| ['compiler_generated'] )
				       (TimerRef)
				   -| ['compiler_generated'] ) of
			      ( <( 'false'
				   -| ['compiler_generated'] )> when ( 'true'
								       -| ['compiler_generated'] ) ->
				    ( receive
					( <( {( 'timeout'
						-| ['compiler_generated'] ),_29,_8}
					     -| ['compiler_generated'] )>
					      when ( call ( 'erlang'
							 -| ['compiler_generated'] ):( '=:='
										       -| ['compiler_generated'] )
						      (_29,
						       TimerRef)
						  -| ['compiler_generated'] ) ->
					      'ok'
					  -| ['compiler_generated'] )
				      after ( 'infinity'
					      -| ['compiler_generated'] ) ->
					'ok'
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <_9> when ( 'true'
					    -| ['compiler_generated'] ) ->
				    'ok'
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  let <_8> =
			      call %% Line 2771
				   ( 'maps'
				     -| ['compiler_generated'] ):%% Line 2771
								 ( 'remove'
								   -| ['compiler_generated'] )
				  (%% Line 1879
				   ( 'state_timeout'
				     -| ['compiler_generated'] ), %% Line 1879
								  Timers)
			  in  let <_9> =
				  case _8 of
				    %% Line 2779
				    ( <( ~{( ( 'timeout'
					       -| ['compiler_generated'] ):=( {_36,_37}
									   -| ['compiler_generated'] )
					    -| ['compiler_generated'] )}~
					 -| ['compiler_generated'] )> when ( 'true'
									     -| ['compiler_generated'] ) ->
					  ( do  %% Line 2780
						( case ( call ( 'erlang'
								-| ['compiler_generated'] ):( 'cancel_timer'
											      -| ['compiler_generated'] )
							     (_36)
							 -| ['compiler_generated'] ) of
						    ( <( 'false'
							 -| ['compiler_generated'] )> when ( 'true'
											     -| ['compiler_generated'] ) ->
							  ( receive
							      ( <( {( 'timeout'
								      -| ['compiler_generated'] ),_38,_39}
								   -| ['compiler_generated'] )>
								    when ( call ( 'erlang'
									       -| ['compiler_generated'] ):( '=:='
													     -| ['compiler_generated'] )
									    (_38,
									     _36)
									-| ['compiler_generated'] ) ->
								    'ok'
								-| ['compiler_generated'] )
							    after ( 'infinity'
								    -| ['compiler_generated'] ) ->
							      'ok'
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <_40> when ( 'true'
								   -| ['compiler_generated'] ) ->
							  'ok'
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
						%% Line 2780
						( call ( 'maps'
							 -| ['compiler_generated'] ):( 'remove'
										       -| ['compiler_generated'] )
						      (( 'timeout'
							 -| ['compiler_generated'] ), _8)
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    %% Line 2781
				    ( <( ~{}~
					 -| ['compiler_generated'] )> when ( 'true'
									     -| ['compiler_generated'] ) ->
					  _8
				      -| ['compiler_generated'] )
				    ( <_41> when ( 'true'
						   -| ['compiler_generated'] ) ->
					  %% Line 2778
					  ( primop ( 'match_fail'
						     -| ['compiler_generated'] )
						(( {( 'case_clause'
						      -| ['compiler_generated'] ),_41}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      in  %% Line 1874
				  apply 'loop_next_events'/10
				      (%% Line 1875
				       P, %% Line 1875
					  Debug, %% Line 1875
						 S, %% Line 1875
						    Events, %% Line 1875
							    NextState_NewData, %% Line 1876
									       NextEventsR, %% Line 1876
											    Hibernate, %% Line 1876
												       TimeoutsR, %% Line 1876
														  [], _9)
		      -| ['compiler_generated'] )
		%% Line 1880
		<~{'timeout':={TimerRef,_X_TimeoutMsg}}~> when 'true' ->
		    ( do  %% Line 2771
			  ( case ( call ( 'erlang'
					  -| ['compiler_generated'] ):( 'cancel_timer'
									-| ['compiler_generated'] )
				       (TimerRef)
				   -| ['compiler_generated'] ) of
			      ( <( 'false'
				   -| ['compiler_generated'] )> when ( 'true'
								       -| ['compiler_generated'] ) ->
				    ( receive
					( <( {( 'timeout'
						-| ['compiler_generated'] ),_49,_8}
					     -| ['compiler_generated'] )>
					      when ( call ( 'erlang'
							 -| ['compiler_generated'] ):( '=:='
										       -| ['compiler_generated'] )
						      (_49,
						       TimerRef)
						  -| ['compiler_generated'] ) ->
					      'ok'
					  -| ['compiler_generated'] )
				      after ( 'infinity'
					      -| ['compiler_generated'] ) ->
					'ok'
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <_9> when ( 'true'
					    -| ['compiler_generated'] ) ->
				    'ok'
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  let <_10> =
			      call %% Line 2771
				   ( 'maps'
				     -| ['compiler_generated'] ):%% Line 2771
								 ( 'remove'
								   -| ['compiler_generated'] )
				  (%% Line 1886
				   ( 'timeout'
				     -| ['compiler_generated'] ), %% Line 1886
								  Timers)
			  in  %% Line 1883
			      apply 'loop_next_events'/10
				  (%% Line 1884
				   P, %% Line 1884
				      Debug, %% Line 1884
					     S, %% Line 1884
						Events, %% Line 1884
							NextState_NewData, %% Line 1885
									   NextEventsR, %% Line 1885
											Hibernate, %% Line 1885
												   TimeoutsR, %% Line 1885
													      [], _10)
		      -| ['compiler_generated'] )
		%% Line 1887
		<_23> when 'true' ->
		    %% Line 1889
		    apply 'loop_next_events'/10
			(%% Line 1890
			 P, %% Line 1890
			    Debug, %% Line 1890
				   S, %% Line 1890
				      Events, %% Line 1890
					      NextState_NewData, %% Line 1891
								 NextEventsR, %% Line 1891
									      Hibernate, %% Line 1891
											 TimeoutsR, %% Line 1891
												    [], %% Line 1892
													Timers)
	      end
	  ( <_19,_18,_17,_16,_15,_14,_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_19,_18,_17,_16,_15,_14,_13,_12})
		  -| [{'function_name',{'loop_state_change',8}}] )
	    -| ['compiler_generated'] )
	end
'loop_next_events'/10 =
    %% Line 1898
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9> of
	  <%% Line 1899
	   P,%% Line 1899
	     Debug,%% Line 1899
		   S,%% Line 1900
		     Events,%% Line 1900
			    NextState_NewData,%% Line 1901
					      NextEventsR,%% Line 1901
							  Hibernate,%% Line 1901
								    [],%% Line 1901
								       Postponed,%% Line 1902
										 Timers> when 'true' ->
	      %% Line 1913
	      case S of
		<{'state',_rec38,_rec39,_rec40,_rec41}> when 'true' ->
		    let <_12> =
			{'state',NextState_NewData,Postponed,Timers,Hibernate}
		    in  apply 'loop_done'/5
			    (P, Debug, _12, %% Line 1914
					    NextEventsR, %% Line 1914
							 Events)
		( <_25> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1915
	  <%% Line 1916
	   P,%% Line 1916
	     Debug,%% Line 1916
		   S,%% Line 1917
		     Events,%% Line 1917
			    NextState_NewData,%% Line 1918
					      NextEventsR,%% Line 1918
							  Hibernate,%% Line 1918
								    TimeoutsR,%% Line 1918
									      Postponed,%% Line 1919
											Timers> when 'true' ->
	      %% Line 1923
	      apply 'loop_timeouts'/12
		  (%% Line 1924
		   P, %% Line 1924
		      Debug, %% Line 1924
			     S, %% Line 1925
				Events, %% Line 1925
					NextState_NewData, %% Line 1926
							   NextEventsR, %% Line 1926
									Hibernate, %% Line 1926
										   TimeoutsR, %% Line 1926
											      Postponed, %% Line 1927
													 Timers, ~{}~, [])
	end
'loop_timeouts'/12 =
    %% Line 1932
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11> of
	  <%% Line 1933
	   P,%% Line 1933
	     Debug,%% Line 1933
		   S,%% Line 1934
		     Events,%% Line 1934
			    NextState_NewData,%% Line 1935
					      NextEventsR,%% Line 1935
							  Hibernate,%% Line 1935
								    [],%% Line 1935
								       Postponed,%% Line 1936
										 Timers,%% Line 1936
											_X_Seen,%% Line 1936
												TimeoutEvents> when 'true' ->
	      %% Line 1945
	      case S of
		<{'state',_rec43,_rec44,_rec45,_rec46}> when 'true' ->
		    let <_14> =
			{'state',NextState_NewData,Postponed,Timers,Hibernate}
		    in  %% Line 1946
			case TimeoutEvents of
			  %% Line 1947
			  <[]> when 'true' ->
			      %% Line 1948
			      apply 'loop_done'/5
				  (P, Debug, _14, NextEventsR, Events)
			  %% Line 1949
			  <_36> when 'true' ->
			      %% Line 1950
			      case Events of
				%% Line 1951
				<[]> when 'true' ->
				    %% Line 1952
				    apply 'loop_prepend_timeout_events'/5
					(%% Line 1953
					 P, %% Line 1953
					    Debug, _14, %% Line 1953
							TimeoutEvents, %% Line 1954
								       NextEventsR)
				%% Line 1955
				<[E1|[]]> when 'true' ->
				    %% Line 1956
				    apply 'loop_prepend_timeout_events'/5
					(%% Line 1957
					 P, %% Line 1957
					    Debug, _14, %% Line 1957
							TimeoutEvents, %% Line 1958
								       [E1|NextEventsR])
				%% Line 1959
				<[E2|[E1|[]]]> when 'true' ->
				    %% Line 1960
				    apply 'loop_prepend_timeout_events'/5
					(%% Line 1961
					 P, %% Line 1961
					    Debug, _14, %% Line 1961
							TimeoutEvents, %% Line 1962
								       [E1|[E2|NextEventsR]])
				%% Line 1963
				<_37> when 'true' ->
				    let <_16> =
					call %% Line 1966
					     'lists':%% Line 1966
						     'reverse'
					    (%% Line 1966
					     Events, %% Line 1966
						     NextEventsR)
				    in  %% Line 1964
					apply 'loop_prepend_timeout_events'/5
					    (%% Line 1965
					     P, %% Line 1965
						Debug, _14, %% Line 1965
							    TimeoutEvents, _16)
			      end
			end
		( <_35> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1969
	  <%% Line 1970
	   P,%% Line 1970
	     Debug,%% Line 1970
		   S,%% Line 1971
		     Events,%% Line 1971
			    NextState_NewData,%% Line 1972
					      NextEventsR,%% Line 1972
							  Hibernate,%% Line 1972
								    [Timeout|TimeoutsR],%% Line 1972
											Postponed,%% Line 1973
												  Timers,%% Line 1973
													 Seen,%% Line 1973
													      TimeoutEvents> when 'true' ->
	      let <TimeoutType> =
		  call %% Line 1975
		       'erlang':%% Line 1975
				'element'
		      (%% Line 1975
		       1, %% Line 1975
			  Timeout)
	      in  %% Line 1976
		  case Seen of
		    %% Line 1977
		    <~{TimeoutType:=_38}~> when 'true' ->
			%% Line 1979
			apply 'loop_timeouts'/12
			    (%% Line 1980
			     P, %% Line 1980
				Debug, %% Line 1980
				       S, %% Line 1981
					  Events, %% Line 1981
						  NextState_NewData, %% Line 1982
								     NextEventsR, %% Line 1982
										  Hibernate, %% Line 1982
											     TimeoutsR, %% Line 1982
													Postponed, %% Line 1983
														   Timers, %% Line 1983
															   Seen, %% Line 1983
																 TimeoutEvents)
		    %% Line 1984
		    <~{}~> when 'true' ->
			%% Line 1985
			case Timeout of
			  %% Line 1986
			  <{_39,Time,TimeoutMsg}> when 'true' ->
			      %% Line 1988
			      apply 'loop_timeouts_start'/16
				  (%% Line 1989
				   P, %% Line 1989
				      Debug, %% Line 1989
					     S, %% Line 1990
						Events, %% Line 1990
							NextState_NewData, %% Line 1991
									   NextEventsR, %% Line 1991
											Hibernate, %% Line 1991
												   TimeoutsR, %% Line 1991
													      Postponed, %% Line 1992
															 Timers, %% Line 1992
																 Seen, %% Line 1992
																       TimeoutEvents, %% Line 1993
																		      TimeoutType, %% Line 1993
																				   Time, %% Line 1993
																					 TimeoutMsg, %% Line 1993
																						     [])
			  %% Line 1994
			  <{_40,Time,TimeoutMsg,TimeoutOpts}> when 'true' ->
			      let <_20> =
				  case %% Line 2001
				       TimeoutOpts of
				    %% Line 2734
				    ( <Item>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_list'
										   -| ['compiler_generated'] )
						  (TimeoutOpts)
					      -| ['compiler_generated'] ) ->
					  %% Line 2735
					  Item
				      -| ['compiler_generated'] )
				    %% Line 2736
				    ( <Item> when ( 'true'
						    -| ['compiler_generated'] ) ->
					  %% Line 2737
					  ( [Item|( []
						    -| ['compiler_generated'] )]
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      in  %% Line 1996
				  apply 'loop_timeouts_start'/16
				      (%% Line 1997
				       P, %% Line 1997
					  Debug, %% Line 1997
						 S, %% Line 1998
						    Events, %% Line 1998
							    NextState_NewData, %% Line 1999
									       NextEventsR, %% Line 1999
											    Hibernate, %% Line 1999
												       TimeoutsR, %% Line 1999
														  Postponed, %% Line 2000
															     Timers, %% Line 2000
																     Seen, %% Line 2000
																	   TimeoutEvents, %% Line 2001
																			  TimeoutType, %% Line 2001
																				       Time, %% Line 2001
																					     TimeoutMsg, _20)
			  ( <_21> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_21})
			    -| ['compiler_generated'] )
			end
		    ( <_22> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_22})
		      -| ['compiler_generated'] )
		  end
	  ( <_34,_33,_32,_31,_30,_29,_28,_27,_26,_25,_24,_23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_34,_33,_32,_31,_30,_29,_28,_27,_26,_25,_24,_23})
		  -| [{'function_name',{'loop_timeouts',12}}] )
	    -| ['compiler_generated'] )
	end
'loop_timeouts_start'/16 =
    %% Line 2007
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15) ->
	%% Line 2014
	case _13 of
	  %% Line 2015
	  <'infinity'> when 'true' ->
	      %% Line 2017
	      apply 'loop_timeouts_cancel'/13
		  (_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12)
	  %% Line 2023
	  <0>
	      when call 'erlang':'=:='
		    (_15,
		     []) ->
	      %% Line 2028
	      apply 'loop_timeouts_cancel'/13
		  (_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, %% Line 2032
								[{_12,_14}|_11], _12)
	  %% Line 2034
	  <'update'> when 'true' ->
	      %% Line 2035
	      apply 'loop_timeouts_update'/14
		  (_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _14)
	  %% Line 2041
	  <_40> when 'true' ->
	      let <_16> =
		  call %% Line 2044
		       'erlang':%% Line 2044
				'self'
		      ()
	      in  let <TimerRef> =
		      call %% Line 2044
			   'erlang':%% Line 2044
				    'start_timer'
			  (_13, _16, _12, _15)
		  in  %% Line 2045
		      case _1 of
			%% Line 2046
			<[]> when 'true' ->
			    %% Line 2047
			    apply 'loop_timeouts_register'/15
				(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, %% Line 2051
											TimerRef, _14)
			%% Line 2052
			<_41> when 'true' ->
			    %% Line 2053
			    case _4 of
			      <{State,_X_Data}> when 'true' ->
				  %% Line 2056
				  ( case _0 of
				      ( <( {'params',_42,_43,_44,_45,_rec47,_46}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <Debug_1> =
						apply 'sys_debug'/3
						    (_1, _rec47, %% Line 2057
								 {'start_timer',%% Line 2058
										{_12,_13,_14,_15},%% Line 2059
												  State})
					    in  %% Line 2060
						apply 'loop_timeouts_register'/15
						    (_0, %% Line 2061
							 Debug_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, %% Line 2064
														 TimerRef, _14)
					-| ['compiler_generated'] )
				      ( <_47> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','params'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      ( <_18> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_18})
				-| ['compiler_generated'] )
			    end
		      end
	end
'loop_timeouts_register'/15 =
    %% Line 2071
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14) ->
	%% Line 2077
	case _9 of
	  %% Line 2078
	  <~{_12:={OldTimerRef,_X_OldTimeoutMsg}}~> when 'true' ->
	      do  %% Line 2758
		  ( case ( call ( 'erlang'
				  -| ['compiler_generated'] ):( 'cancel_timer'
								-| ['compiler_generated'] )
			       (OldTimerRef)
			   -| ['compiler_generated'] ) of
		      ( <( 'false'
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    ( receive
				( <( {( 'timeout'
					-| ['compiler_generated'] ),_39,_40}
				     -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( '=:='
									       -| ['compiler_generated'] )
					      (_39,
					       OldTimerRef)
					  -| ['compiler_generated'] ) ->
				      'ok'
				  -| ['compiler_generated'] )
			      after ( 'infinity'
				      -| ['compiler_generated'] ) ->
				'ok'
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_41> when ( 'true'
				     -| ['compiler_generated'] ) ->
			    'ok'
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  %% Line 2082
		  case <> of
		    ( <>
			  when call 'erlang':'is_map'
				(_9) ->
			  let <_15> =
			      ~{_12:={_13,_14}|_9}~
			  in  %% Line 2087
			      case <> of
				( <>
				      when call 'erlang':'is_map'
					    (_10) ->
				      let <_17> =
					  ~{_12=>'true'|_10}~
				      in  apply 'loop_timeouts'/12
					      (_0, _1, _2, _3, _4, _5, _6, _7, _8, _15, _17, _11)
				  -| ['compiler_generated'] )
				( <> when 'true' ->
				      ( primop 'match_fail'
					    ({'badmap',_10})
					-| [{'eval_failure','badmap'}] )
				  -| ['compiler_generated'] )
			      end
		      -| ['compiler_generated'] )
		    ( <> when 'true' ->
			  ( primop 'match_fail'
				({'badmap',_9})
			    -| [{'eval_failure','badmap'}] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 2088
	  <~{}~> when 'true' ->
	      %% Line 2090
	      case <> of
		( <>
		      when call 'erlang':'is_map'
			    (_9) ->
		      let <_18> =
			  ~{_12=>{_13,_14}|_9}~
		      in  %% Line 2095
			  case <> of
			    ( <>
				  when call 'erlang':'is_map'
					(_10) ->
				  let <_20> =
				      ~{_12=>'true'|_10}~
				  in  apply 'loop_timeouts'/12
					  (_0, _1, _2, _3, _4, _5, _6, _7, _8, _18, _20, _11)
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  ( primop 'match_fail'
					({'badmap',_10})
				    -| [{'eval_failure','badmap'}] )
			      -| ['compiler_generated'] )
			  end
		  -| ['compiler_generated'] )
		( <> when 'true' ->
		      ( primop 'match_fail'
			    ({'badmap',_9})
			-| [{'eval_failure','badmap'}] )
		  -| ['compiler_generated'] )
	      end
	  ( <_21> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_21})
	    -| ['compiler_generated'] )
	end
'loop_timeouts_cancel'/13 =
    %% Line 2100
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12) ->
	%% Line 2119
	case _9 of
	  %% Line 2120
	  <~{_12:={TimerRef,_X_TimeoutMsg}}~> when 'true' ->
	      ( do  %% Line 2771
		    ( case ( call ( 'erlang'
				    -| ['compiler_generated'] ):( 'cancel_timer'
								  -| ['compiler_generated'] )
				 (TimerRef)
			     -| ['compiler_generated'] ) of
			( <( 'false'
			     -| ['compiler_generated'] )> when ( 'true'
								 -| ['compiler_generated'] ) ->
			      ( receive
				  ( <( {( 'timeout'
					  -| ['compiler_generated'] ),_36,_37}
				       -| ['compiler_generated'] )>
					when ( call ( 'erlang'
						   -| ['compiler_generated'] ):( '=:='
										 -| ['compiler_generated'] )
						(_36,
						 TimerRef)
					    -| ['compiler_generated'] ) ->
					'ok'
				    -| ['compiler_generated'] )
				after ( 'infinity'
					-| ['compiler_generated'] ) ->
				  'ok'
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			( <_38> when ( 'true'
				       -| ['compiler_generated'] ) ->
			      'ok'
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		    let <Timers_1> =
			call %% Line 2771
			     ( 'maps'
			       -| ['compiler_generated'] ):%% Line 2771
							   ( 'remove'
							     -| ['compiler_generated'] )
			    (_12, _9)
		    in  %% Line 2126
			case <> of
			  ( <>
				when call 'erlang':'is_map'
				      (_10) ->
				let <_14> =
				    ~{_12=>'true'|_10}~
				in  apply 'loop_timeouts'/12
					(_0, _1, _2, _3, _4, _5, _6, _7, _8, Timers_1, _14, _11)
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				( primop 'match_fail'
				      ({'badmap',_10})
				  -| [{'eval_failure','badmap'}] )
			    -| ['compiler_generated'] )
			end
		-| ['compiler_generated'] )
	  %% Line 2127
	  <~{}~> when 'true' ->
	      %% Line 2132
	      case <> of
		( <>
		      when call 'erlang':'is_map'
			    (_10) ->
		      let <_15> =
			  ~{_12=>'true'|_10}~
		      in  apply 'loop_timeouts'/12
			      (_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _15, _11)
		  -| ['compiler_generated'] )
		( <> when 'true' ->
		      ( primop 'match_fail'
			    ({'badmap',_10})
			-| [{'eval_failure','badmap'}] )
		  -| ['compiler_generated'] )
	      end
	  ( <_16> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_16})
	    -| ['compiler_generated'] )
	end
'loop_timeouts_update'/14 =
    %% Line 2138
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13) ->
	%% Line 2145
	case _9 of
	  %% Line 2146
	  <~{_12:={TimerRef,_X_OldTimeoutMsg}}~> when 'true' ->
	      %% Line 2147
	      case <> of
		( <>
		      when call 'erlang':'is_map'
			    (_9) ->
		      let <_14> =
			  ~{_12:={TimerRef,_13}|_9}~
		      in  %% Line 2152
			  case <> of
			    ( <>
				  when call 'erlang':'is_map'
					(_10) ->
				  let <_16> =
				      ~{_12=>'true'|_10}~
				  in  apply 'loop_timeouts'/12
					  (_0, _1, _2, _3, _4, _5, _6, _7, _8, _14, _16, _11)
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  ( primop 'match_fail'
					({'badmap',_10})
				    -| [{'eval_failure','badmap'}] )
			      -| ['compiler_generated'] )
			  end
		  -| ['compiler_generated'] )
		( <> when 'true' ->
		      ( primop 'match_fail'
			    ({'badmap',_9})
			-| [{'eval_failure','badmap'}] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 2154
	  <~{}~> when 'true' ->
	      let <TimeoutEvents_1> =
		  [%% Line 2156
		   {_12,_13}|_11]
	      in  %% Line 2161
		  case <> of
		    ( <>
			  when call 'erlang':'is_map'
				(_10) ->
			  let <_18> =
			      ~{_12=>'true'|_10}~
			  in  apply 'loop_timeouts'/12
				  (_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _18, %% Line 2162
										TimeoutEvents_1)
		      -| ['compiler_generated'] )
		    ( <> when 'true' ->
			  ( primop 'match_fail'
				({'badmap',_10})
			    -| [{'eval_failure','badmap'}] )
		      -| ['compiler_generated'] )
		  end
	  ( <_19> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_19})
	    -| ['compiler_generated'] )
	end
'loop_prepend_timeout_events'/5 =
    %% Line 2168
    fun (_0,_1,_2,_3,_4) ->
	%% Line 2169
	case %% Line 2170
	     apply 'prepend_timeout_events'/5
		 (_0, _1, _2, _3, _4) of
	  <{Debug_1,Events_1R}> when 'true' ->
	      %% Line 2171
	      apply 'loop_done'/5
		  (_0, Debug_1, _2, Events_1R, [])
	  ( <_5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_5})
	    -| ['compiler_generated'] )
	end
'loop_done'/5 =
    %% Line 2175
    fun (_0,_1,_2,_3,_4) ->
	%% Line 2176
	case _3 of
	  %% Line 2177
	  <[]> when 'true' ->
	      %% Line 2178
	      apply 'loop_done'/4
		  (_0, _1, _2, _4)
	  %% Line 2179
	  <[E1|[]]> when 'true' ->
	      %% Line 2180
	      apply 'loop_done'/4
		  (_0, _1, _2, [E1|_4])
	  %% Line 2181
	  <[E2|[E1|[]]]> when 'true' ->
	      %% Line 2182
	      apply 'loop_done'/4
		  (_0, _1, _2, [E1|[E2|_4]])
	  %% Line 2183
	  <_12> when 'true' ->
	      let <_5> =
		  call %% Line 2184
		       'lists':%% Line 2184
			       'reverse'
		      (_3, _4)
	      in  %% Line 2184
		  apply 'loop_done'/4
		      (_0, _1, _2, _5)
	end
'loop_done'/4 =
    %% Line 2190
    fun (_0,_1,_2,_3) ->
	%% Line 2196
	case _3 of
	  %% Line 2197
	  <[]> when 'true' ->
	      %% Line 2199
	      apply 'loop'/3
		  (_0, _1, _2)
	  %% Line 2200
	  <[Event|Events]> when 'true' ->
	      %% Line 2202
	      apply 'loop_event'/5
		  (_0, _1, _2, Event, Events)
	  ( <_4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_4})
	    -| ['compiler_generated'] )
	end
'parse_timeout_opts_abs'/1 =
    %% Line 2211
    fun (_0) ->
	%% Line 2212
	apply 'parse_timeout_opts_abs'/2
	    (_0, 'false')
'parse_timeout_opts_abs'/2 =
    %% Line 2214
    fun (_0,_1) ->
	%% Line 2215
	case _0 of
	  %% Line 2216
	  <[]> when 'true' ->
	      _1
	  %% Line 2218
	  <[{'abs',Abs_1}|_5]>
	      when let <_6> =
		    call 'erlang':'=:='
			(_5, _0)
		in  let <_7> =
			call 'erlang':'is_boolean'
			    (Abs_1)
		    in  call 'erlang':'and'
			    (_6, _7) ->
	      %% Line 2219
	      apply 'parse_timeout_opts_abs'/2
		  (_0, Abs_1)
	  %% Line 2220
	  <_8> when 'true' ->
	      %% Line 2221
	      'badarg'
	end
'prepend_timeout_events'/5 =
    %% Line 2236
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <_X_P,Debug,_X_S,[],EventsR> when 'true' ->
	      %% Line 2237
	      {Debug,EventsR}
	  %% Line 2238
	  <%% Line 2239
	   P,%% Line 2239
	     Debug,%% Line 2239
		   S,%% Line 2239
		     [TimeoutEvent = {'timeout',_24}|TimeoutEvents],%% Line 2239
								    []> when 'true' ->
	      %% Line 2241
	      case Debug of
		%% Line 2242
		<[]> when 'true' ->
		    %% Line 2243
		    apply 'prepend_timeout_events'/5
			(%% Line 2244
			 P, %% Line 2244
			    Debug, %% Line 2244
				   S, %% Line 2244
				      TimeoutEvents, %% Line 2244
						     [TimeoutEvent|[]])
		%% Line 2245
		<_25> when 'true' ->
		    %% Line 2246
		    ( case S of
			( <( {'state',_rec48,_26,_27,_28}
			     -| ['compiler_generated'] )> when 'true' ->
			      case _rec48 of
				<{State,_X_Data}> when 'true' ->
				    %% Line 2249
				    ( case P of
					( <( {'params',_30,_31,_32,_33,_rec49,_34}
					     -| ['compiler_generated'] )> when 'true' ->
					      let <Debug_1> =
						  apply 'sys_debug'/3
						      (Debug, _rec49, %% Line 2250
								      {'insert_timeout',TimeoutEvent,State})
					      in  %% Line 2251
						  apply 'prepend_timeout_events'/5
						      (%% Line 2252
						       P, %% Line 2252
							  Debug_1, %% Line 2252
								   S, %% Line 2252
								      TimeoutEvents, %% Line 2252
										     [TimeoutEvent|[]])
					  -| ['compiler_generated'] )
					( <_35> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','params'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				( <_7> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_7})
				  -| ['compiler_generated'] )
			      end
			  -| ['compiler_generated'] )
			( <_29> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 2254
	  <%% Line 2255
	   P,%% Line 2255
	     Debug,%% Line 2255
		   S,%% Line 2255
		     [{'timeout',_36}|TimeoutEvents],%% Line 2255
						     EventsR> when 'true' ->
	      %% Line 2258
	      apply 'prepend_timeout_events'/5
		  (P, Debug, S, TimeoutEvents, EventsR)
	  %% Line 2259
	  <%% Line 2260
	   P,%% Line 2260
	     Debug,%% Line 2260
		   S,%% Line 2260
		     [TimeoutEvent|TimeoutEvents],%% Line 2260
						  EventsR> when 'true' ->
	      %% Line 2262
	      case Debug of
		%% Line 2263
		<[]> when 'true' ->
		    %% Line 2264
		    apply 'prepend_timeout_events'/5
			(%% Line 2265
			 P, %% Line 2265
			    Debug, %% Line 2265
				   S, %% Line 2265
				      TimeoutEvents, %% Line 2265
						     [TimeoutEvent|EventsR])
		%% Line 2266
		<_37> when 'true' ->
		    %% Line 2267
		    ( case S of
			( <( {'state',_rec50,_38,_39,_40}
			     -| ['compiler_generated'] )> when 'true' ->
			      case _rec50 of
				<{State,_X_Data}> when 'true' ->
				    %% Line 2270
				    ( case P of
					( <( {'params',_42,_43,_44,_45,_rec51,_46}
					     -| ['compiler_generated'] )> when 'true' ->
					      let <Debug_1> =
						  apply 'sys_debug'/3
						      (Debug, _rec51, %% Line 2271
								      {'insert_timeout',TimeoutEvent,State})
					      in  %% Line 2272
						  apply 'prepend_timeout_events'/5
						      (%% Line 2273
						       P, %% Line 2273
							  Debug_1, %% Line 2273
								   S, %% Line 2273
								      TimeoutEvents, %% Line 2273
										     [TimeoutEvent|EventsR])
					  -| ['compiler_generated'] )
					( <_47> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','params'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				( <_14> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_14})
				  -| ['compiler_generated'] )
			      end
			  -| ['compiler_generated'] )
			( <_41> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  ( <_23,_22,_21,_20,_19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_23,_22,_21,_20,_19})
		  -| [{'function_name',{'prepend_timeout_events',5}}] )
	    -| ['compiler_generated'] )
	end
'reply_then_terminate'/8 =
    %% Line 2281
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	let <_8> =
	    case _7 of
	      %% Line 2734
	      ( <Item>
		    when ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'is_list'
							     -| ['compiler_generated'] )
			    (_7)
			-| ['compiler_generated'] ) ->
		    %% Line 2735
		    Item
		-| ['compiler_generated'] )
	      %% Line 2736
	      ( <Item> when ( 'true'
			      -| ['compiler_generated'] ) ->
		    %% Line 2737
		    ( [Item|( []
			      -| ['compiler_generated'] )]
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	in  %% Line 2282
	    apply 'do_reply_then_terminate'/8
		(_0, _1, _2, _3, _4, _5, _6, _8)
'do_reply_then_terminate'/8 =
    %% Line 2285
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <%% Line 2286
	   Class,%% Line 2286
		 Reason,%% Line 2286
			Stacktrace,%% Line 2286
				   P,%% Line 2286
				     Debug,%% Line 2286
					   S,%% Line 2286
					     Q,%% Line 2286
					       []> when 'true' ->
	      %% Line 2287
	      apply 'terminate'/7
		  (Class, Reason, Stacktrace, P, Debug, S, Q)
	  %% Line 2288
	  <%% Line 2289
	   Class,%% Line 2289
		 Reason,%% Line 2289
			Stacktrace,%% Line 2289
				   P,%% Line 2289
				     Debug,%% Line 2289
					   S,%% Line 2289
					     Q,%% Line 2289
					       [R|Rs]> when 'true' ->
	      %% Line 2290
	      case R of
		%% Line 2291
		<{'reply',From,Reply}> when 'true' ->
		    %% Line 2292
		    case ( case From of
			     ( <( {Pid,_38}
				  -| ['compiler_generated'] )>
				   when ( call ( 'erlang'
					      -| ['compiler_generated'] ):( 'is_pid'
									    -| ['compiler_generated'] )
					   (Pid)
				       -| ['compiler_generated'] ) ->
				   ( 'true'
				     -| ['compiler_generated'] )
			       -| ['compiler_generated'] )
			     ( <_39> when ( 'true'
					    -| ['compiler_generated'] ) ->
				   ( 'false'
				     -| ['compiler_generated'] )
			       -| ['compiler_generated'] )
			   end
			   -| ['compiler_generated'] ) of
		      %% Line 2293
		      <'true'> when 'true' ->
			  do  ( case %% Line 2294
				     <From,Reply> of
				  ( <( {To,Tag}
				       -| ['compiler_generated'] ),_42>
					when ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'is_pid'
										 -| ['compiler_generated'] )
						(To)
					    -| ['compiler_generated'] ) ->
					( let <Msg> = {Tag,_42}
					  in  ( try
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( '!'
											   -| ['compiler_generated'] )
							  (To, Msg)
						      -| ['compiler_generated'] )
						of <_43> ->
						    ( 'ok'
						      -| ['compiler_generated'] )
						catch <_45,_46,_47> ->
						    ( 'ok'
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <_9,_8> when ( 'true'
						   -| ['compiler_generated'] ) ->
					( primop ( 'match_fail'
						   -| ['compiler_generated'] )
					      (( {( 'function_clause'
						    -| ['compiler_generated'] ),_9,_8}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			      let <_11> =
				  case %% Line 2297
				       Debug of
				    %% Line 2297
				    <[]> when 'true' ->
					Debug
				    %% Line 2297
				    <_29> when 'true' ->
					%% Line 2298
					( case P of
					    ( <( {'params',_30,_31,_32,_33,_rec52,_34}
						 -| ['compiler_generated'] )> when 'true' ->
						  apply 'sys_debug'/3
						      (Debug, _rec52, %% Line 2299
								      {'out',Reply,From})
					      -| ['compiler_generated'] )
					    ( <_35> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','params'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				  end
			      in  %% Line 2300
				  apply 'do_reply_then_terminate'/8
				      (%% Line 2301
				       Class, %% Line 2301
					      Reason, %% Line 2301
						      Stacktrace, %% Line 2301
								  P, _11, %% Line 2301
									  S, %% Line 2301
									     Q, %% Line 2301
										Rs)
		      %% Line 2302
		      <'false'> when 'true' ->
			  let <_13> =
			      call %% Line 2306
				   'erlang':%% Line 2306
					    'self'
				  ()
			  in  let <_14> =
				  call %% Line 2306
				       'erlang':%% Line 2306
						'process_info'
				      (_13, %% Line 2306
					    'current_stacktrace')
			      in  let <_15> =
				      call %% Line 2306
					   'erlang':%% Line 2306
						    'element'
					  (%% Line 2306
					   2, _14)
				  in  %% Line 2303
				      apply 'terminate'/7
					  (%% Line 2304
					   'error', %% Line 2305
						    {'bad_reply_action_from_state_function',R}, _15, %% Line 2307
												     P, %% Line 2307
													Debug, %% Line 2307
													       S, %% Line 2307
														  Q)
		    end
		%% Line 2309
		<_36> when 'true' ->
		    let <_17> =
			call %% Line 2313
			     'erlang':%% Line 2313
				      'self'
			    ()
		    in  let <_18> =
			    call %% Line 2313
				 'erlang':%% Line 2313
					  'process_info'
				(_17, %% Line 2313
				      'current_stacktrace')
			in  let <_19> =
				call %% Line 2313
				     'erlang':%% Line 2313
					      'element'
				    (%% Line 2313
				     2, _18)
			    in  %% Line 2310
				apply 'terminate'/7
				    (%% Line 2311
				     'error', %% Line 2312
					      {'bad_reply_action_from_state_function',R}, _19, %% Line 2314
											       P, %% Line 2314
												  Debug, %% Line 2314
													 S, %% Line 2314
													    Q)
	      end
	  ( <_28,_27,_26,_25,_24,_23,_22,_21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_28,_27,_26,_25,_24,_23,_22,_21})
		  -| [{'function_name',{'do_reply_then_terminate',8}}] )
	    -| ['compiler_generated'] )
	end
'terminate'/7 =
    %% Line 2317
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <%% Line 2318
	   Class,%% Line 2318
		 Reason,%% Line 2318
			Stacktrace,%% Line 2319
				   P = %% Line 2319
				       {'params',_24,_25,_26,Module,_27,_28},%% Line 2319
									     Debug,%% Line 2320
										   S = %% Line 2320
										       {'state',{State,Data},_29,_30,_31},%% Line 2320
															  Q> when 'true' ->
	      do  %% Line 2321
		  case call 'erlang':'function_exported'
			   (Module, 'terminate', 3) of
		    %% Line 2322
		    <'true'> when 'true' ->
			%% Line 2323
			try
			    call Module:'terminate'
				(Reason, State, Data)
			of <_7> ->
			    %% Line 2324
			    'ok'
			catch <_11,_10,_9> ->
			    %% Line 2326
			    case <_11,_10,_9> of
			      <( 'throw'
				 -| ['compiler_generated'] ),_33,_34> when 'true' ->
				  'ok'
			      %% Line 2327
			      <C,R,_39> when 'true' ->
				  let <ST> =
				      primop 'build_stacktrace'
					  (_39)
				  in  do  %% Line 2328
					  apply 'error_info'/7
					      (C, R, ST, Debug, P, S, Q)
					  %% Line 2329
					  call 'erlang':'raise'
					      (C, R, ST)
			    end
		    %% Line 2331
		    <'false'> when 'true' ->
			'ok'
		    ( <_12> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_12})
		      -| ['compiler_generated'] )
		  end
		  do  %% Line 2335
		      case Reason of
			%% Line 2336
			<'normal'> when 'true' ->
			    %% Line 2337
			    apply 'terminate_sys_debug'/4
				(Debug, P, State, Reason)
			%% Line 2338
			<'shutdown'> when 'true' ->
			    %% Line 2339
			    apply 'terminate_sys_debug'/4
				(Debug, P, State, Reason)
			%% Line 2340
			<( {'shutdown',_35}
			   -| ['result_not_wanted'] )> when 'true' ->
			    %% Line 2341
			    apply 'terminate_sys_debug'/4
				(Debug, P, State, Reason)
			%% Line 2342
			<_36> when 'true' ->
			    %% Line 2343
			    apply 'error_info'/7
				(Class, Reason, Stacktrace, Debug, P, S, Q)
		      end
		      %% Line 2345
		      case Stacktrace of
			%% Line 2346
			<[]> when 'true' ->
			    %% Line 2347
			    call 'erlang':Class
				(Reason)
			%% Line 2348
			<_37> when 'true' ->
			    %% Line 2349
			    call 'erlang':'raise'
				(Class, Reason, Stacktrace)
		      end
	  ( <_23,_22,_21,_20,_19,_18,_17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_23,_22,_21,_20,_19,_18,_17})
		  -| [{'function_name',{'terminate',7}}] )
	    -| ['compiler_generated'] )
	end
'terminate_sys_debug'/4 =
    %% Line 2352
    fun (_0,_1,_2,_3) ->
	%% Line 2353
	case _0 of
	  <[]> when 'true' ->
	      _0
	  <_11> when 'true' ->
	      ( case _1 of
		  ( <( {'params',_12,_13,_14,_15,_rec53,_16}
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'sys_debug'/3
			    (_0, _rec53, {'terminate',_3,_2})
		    -| ['compiler_generated'] )
		  ( <_17> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','params'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'error_info'/7 =
    %% Line 2356
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <%% Line 2357
	   Class,%% Line 2357
		 Reason,%% Line 2357
			Stacktrace,%% Line 2357
				   Debug,%% Line 2361
					 P = %% Line 2358
					     {'params',%% Line 2360
						       CallbackMode,%% Line 2361
								    StateEnter,_25,_26,%% Line 2359
										       Name,_27},%% Line 2364
												 S = %% Line 2362
												     {'state',_28,%% Line 2363
														  Postponed,%% Line 2364
															    Timers,_29},%% Line 2365
																	Q> when 'true' ->
	      let <Log> =
		  call %% Line 2366
		       'sys':%% Line 2366
			     'get_log'
		      (%% Line 2366
		       Debug)
	      in  %% Line 2367
		  case call 'logger':'allow'
			   ('error', 'gen_statem') of
		    <'true'> when 'true' ->
			let <_8> =
			    call %% Line 2373
				 'erlang':%% Line 2373
					  'get'
				()
			in  let <_9> =
				apply %% Line 2373
				      'format_status'/4
				    (%% Line 2373
				     'terminate', _8, %% Line 2373
						      P, %% Line 2373
							 S)
			    in  let <_10> =
				    apply %% Line 2374
					  'list_timeouts'/1
					(%% Line 2374
					 Timers)
				in  let <_11> =
					apply %% Line 2377
					      'client_stacktrace'/1
					    (%% Line 2377
					     Q)
				    in  let <_12> =
					    ~{%% Line 2368
					     'name'=>Name,%% Line 2369
							  'queue'=>Q,%% Line 2370
								     'postponed'=>Postponed,%% Line 2371
											    'callback_mode'=>CallbackMode,%% Line 2372
															  'state_enter'=>StateEnter,%% Line 2373
																		    'state'=>_9,%% Line 2374
																				'timeouts'=>_10,%% Line 2375
																						'log'=>Log,%% Line 2376
																							   'reason'=>{Class,Reason,Stacktrace},%% Line 2377
																											       'client_info'=>_11|~{'label'=>{'gen_statem','terminate'}}~}~
					in  call 'logger':'macro_log'
						(~{'file'=>[115|[114|[99|[47|[103|[101|[110|[95|[115|[116|[97|[116|[101|[109|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],'line'=>2367,'mfa'=>{'gen_statem','error_info',7}}~, 'error', _12, ~{'domain'=>['otp'],'error_logger'=>~{'report_cb'=>fun 'gen_statem':'format_log'/1,'tag'=>'error'}~,'report_cb'=>fun 'gen_statem':'format_log'/2}~)
		    %% Line 2382
		    <'false'> when 'true' ->
			'ok'
		    ( <_17> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_17})
		      -| ['compiler_generated'] )
		  end
	  ( <_24,_23,_22,_21,_20,_19,_18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_24,_23,_22,_21,_20,_19,_18})
		  -| [{'function_name',{'error_info',7}}] )
	    -| ['compiler_generated'] )
	end
'client_stacktrace'/1 =
    %% Line 2384
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      %% Line 2385
	      'undefined'
	  %% Line 2386
	  <[{{'call',{Pid,_X_Tag}},_X_Req}|_5]>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      %% Line 2387
	      case <> of
		%% Line 2388
		<>
		    when try
			  let <_2> =
			      call 'erlang':'node'
				  (Pid)
			  in  let <_1> =
				  call 'erlang':'node'
				      ()
			      in  call 'erlang':'=:='
				      (_2, _1)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 2389
		    case %% Line 2390
			 call 'erlang':'process_info'
			     (Pid, ['current_stacktrace'|['registered_name']]) of
		      %% Line 2392
		      <'undefined'> when 'true' ->
			  %% Line 2393
			  {Pid,'dead'}
		      %% Line 2394
		      <[{'current_stacktrace',Stacktrace}|%% Line 2395
							  [{'registered_name',[]}]]> when 'true' ->
			  %% Line 2396
			  {Pid,{Pid,Stacktrace}}
		      %% Line 2397
		      <[{'current_stacktrace',Stacktrace}|%% Line 2398
							  [{'registered_name',Name}|[]]]> when 'true' ->
			  %% Line 2399
			  {Pid,{Name,Stacktrace}}
		      ( <_3> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_3})
			-| ['compiler_generated'] )
		    end
		%% Line 2401
		<> when 'true' ->
		    %% Line 2402
		    {Pid,'remote'}
	      end
	  %% Line 2404
	  <[_6|_7]> when 'true' ->
	      %% Line 2405
	      'undefined'
	  ( <_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4})
		  -| [{'function_name',{'client_stacktrace',1}}] )
	    -| ['compiler_generated'] )
	end
'format_log'/1 =
    %% Line 2413
    fun (_0) ->
	let <Depth> =
	    call %% Line 2414
		 'error_logger':%% Line 2414
				'get_format_depth'
		()
	in  let <FormatOpts> =
		~{%% Line 2416
		 'depth'=>Depth,%% Line 2417
				'single_line'=>'false',%% Line 2418
						       'encoding'=>'utf8'|%% Line 2415
		 ~{'chars_limit'=>'unlimited'}~}~
	    in  let <_3> =
		    apply %% Line 2419
			  'limit_report'/2
			(_0, %% Line 2419
			     Depth)
		in  %% Line 2419
		    apply 'format_log_multi'/2
			(_3, FormatOpts)
'limit_report'/2 =
    %% Line 2421
    fun (_0,_1) ->
	case <_0,_1> of
	  <Report,'unlimited'> when 'true' ->
	      %% Line 2422
	      Report
	  %% Line 2423
	  <%% Line 2430
	   Report = ~{%% Line 2429
		     'reason':={Class,Reason,Stacktrace},%% Line 2425
							 'postponed':=Postponed,%% Line 2428
										'log':=Log,%% Line 2427
											   'timeouts':=Timeouts,'label':={'gen_statem','terminate'},%% Line 2430
																		    'client_info':=ClientInfo,%% Line 2426
																					      'state':=FmtData,%% Line 2424
																							       'queue':=Q}~,%% Line 2431
																									    Depth> when 'true' ->
	      let <_5> =
		  case %% Line 2433
		       Q of
		    %% Line 2434
		    <[Event|Events]> when 'true' ->
			let <_2> =
			    call %% Line 2435
				 'io_lib':%% Line 2435
					  'limit_term'
				(%% Line 2435
				 Event, %% Line 2435
					Depth)
			in  let <_3> =
				call %% Line 2436
				     'io_lib':%% Line 2436
					      'limit_term'
				    (%% Line 2436
				     Events, %% Line 2436
					     Depth)
			    in  %% Line 2435
				[_2|_3]
		    %% Line 2437
		    <_23> when 'true' ->
			[]
		  end
	      in  let <_7> =
		      case %% Line 2440
			   Postponed of
			%% Line 2441
			<[]> when 'true' ->
			    []
			%% Line 2442
			<_24> when 'true' ->
			    call 'io_lib':'limit_term'
				(Postponed, Depth)
		      end
		  in  let <_8> =
			  call %% Line 2444
			       'io_lib':%% Line 2444
					'limit_term'
			      (%% Line 2444
			       FmtData, %% Line 2444
					Depth)
		      in  let <_10> =
			      case %% Line 2446
				   Timeouts of
				%% Line 2447
				<{0,_25}> when 'true' ->
				    Timeouts
				%% Line 2448
				<_26> when 'true' ->
				    call 'io_lib':'limit_term'
					(Timeouts, Depth)
			      end
			  in  let <_17> =
				  case %% Line 2451
				       Log of
				    %% Line 2452
				    <[]> when 'true' ->
					[]
				    %% Line 2453
				    <_27> when 'true' ->
					( letrec
					      'lc$^0'/1 =
						  fun (_13) ->
						      case _13 of
							<[T|_12]> when 'true' ->
							    let <_14> =
								call 'io_lib':'limit_term'
								    (T, Depth)
							    in  let <_15> =
								    apply 'lc$^0'/1
									(_12)
								in  ( [_14|_15]
								      -| ['compiler_generated'] )
							<[]> when 'true' ->
							    []
							( <_28> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_28})
								-| [{'function_name',{'lc$^0',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  apply 'lc$^0'/1
						  (Log)
					  -| ['list_comprehension'] )
				  end
			      in  let <_19> =
				      call %% Line 2457
					   'io_lib':%% Line 2457
						    'limit_term'
					  (%% Line 2457
					   Reason, %% Line 2457
						   Depth)
				  in  let <_18> =
					  call %% Line 2458
					       'io_lib':%% Line 2458
							'limit_term'
					      (%% Line 2458
					       Stacktrace, %% Line 2458
							   Depth)
				      in  let <_20> =
					      apply %% Line 2459
						    'limit_client_info'/2
						  (%% Line 2459
						   ClientInfo, %% Line 2459
							       Depth)
					  in  %% Line 2432
					      case <> of
						( <>
						      when call 'erlang':'is_map'
							    (Report) ->
						      ~{'queue'=>_5,%% Line 2439
								   'postponed'=>_7,%% Line 2444
										   'state'=>_8,%% Line 2445
											       'timeouts'=>_10,%% Line 2450
													       'log'=>_17,%% Line 2455
															  'reason'=>%% Line 2456
																  {Class,_19,_18},%% Line 2459
																		  'client_info'=>_20|Report}~
						  -| ['compiler_generated'] )
						( <> when 'true' ->
						      ( primop 'match_fail'
							    ({'badmap',Report})
							-| [{'eval_failure','badmap'}] )
						  -| ['compiler_generated'] )
					      end
	  ( <_22,_21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_22,_21})
		  -| [{'function_name',{'limit_report',2}}] )
	    -| ['compiler_generated'] )
	end
'limit_client_info'/2 =
    %% Line 2462
    fun (_0,_1) ->
	case <_0,_1> of
	  <{Pid,{Name,Stacktrace}},Depth> when 'true' ->
	      let <_2> =
		  call %% Line 2463
		       'io_lib':%% Line 2463
				'limit_term'
		      (%% Line 2463
		       Stacktrace, %% Line 2463
				   Depth)
	      in  %% Line 2463
		  {Pid,{Name,_2}}
	  %% Line 2464
	  <Client,_X_Depth> when 'true' ->
	      %% Line 2465
	      Client
	end
'format_log'/2 =
    %% Line 2469
    fun (_0,_1) ->
	let <FormatOpts> =
	    call %% Line 2474
		 'maps':%% Line 2474
			'merge'
		(%% Line 2470
		 ~{'chars_limit'=>'unlimited','depth'=>'unlimited','encoding'=>'utf8','single_line'=>'false'}~, _1)
	in  let <_5> =
		case %% Line 2476
		     FormatOpts of
		  %% Line 2477
		  <~{'chars_limit':='unlimited'}~> when 'true' ->
		      %% Line 2478
		      []
		  %% Line 2479
		  <~{'chars_limit':=Limit}~> when 'true' ->
		      %% Line 2480
		      [{'chars_limit',Limit}|[]]
		  ( <_4> when 'true' ->
			%% Line 2476
			primop 'match_fail'
			    ({'case_clause',_4})
		    -| ['compiler_generated'] )
		end
	    in  %% Line 2482
		case apply 'format_log_single'/2
			 (_0, FormatOpts) of
		  <{Format,Args}> when 'true' ->
		      %% Line 2483
		      call 'io_lib':'format'
			  (Format, Args, _5)
		  ( <_7> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_7})
		    -| ['compiler_generated'] )
		end
'format_log_single'/2 =
    %% Line 2485
    fun (_0,_1) ->
	case <_0,_1> of
	  <~{%% Line 2494
	    'reason':={Class,Reason,Stacktrace},%% Line 2493
						'log':=Log,'label':={'gen_statem','terminate'},%% Line 2495
											       'client_info':=ClientInfo,%% Line 2491
															 'state':=FmtData,%% Line 2487
																	  'queue':=Q,%% Line 2486
																		     'name':=Name}~,%% Line 2496
																				    FormatOpts = %% Line 2496
																						 ~{'depth':=Depth,'single_line':='true'}~> when 'true' ->
	      let <P> =
		  apply %% Line 2497
			'p'/1
		      (%% Line 2497
		       FormatOpts)
	      in  %% Line 2498
		  case apply 'fix_reason'/3
			   (Class, Reason, Stacktrace) of
		    <{FixedReason,FixedStacktrace}> when 'true' ->
			%% Line 2499
			case apply 'format_client_log_single'/3
				 (ClientInfo, P, Depth) of
			  <{ClientFmt,ClientArgs}> when 'true' ->
			      let <_6> =
				  case %% Line 2503
				       FixedStacktrace of
				    %% Line 2504
				    <[]> when 'true' ->
					[]
				    %% Line 2505
				    <_32> when 'true' ->
					call 'erlang':'++'
					    ([46|[32|[83|[116|[97|[99|[107|[58|[32]]]]]]]]], P)
				  end
			      in  let <_8> =
				      case %% Line 2507
					   Q of
					%% Line 2508
					<[]> when 'true' ->
					    []
					%% Line 2509
					<_33> when 'true' ->
					    call 'erlang':'++'
						([46|[32|[76|[97|[115|[116|[32|[101|[118|[101|[110|[116|[58|[32]]]]]]]]]]]]]], P)
				      end
				  in  let <_10> =
					  case %% Line 2512
					       Log of
					    %% Line 2513
					    <[]> when 'true' ->
						[]
					    %% Line 2514
					    <_34> when 'true' ->
						call 'erlang':'++'
						    ([46|[32|[76|[111|[103|[58|[32]]]]]]], P)
					  end
				      in  let <Format> =
					      call %% Line 2501
						   'lists':%% Line 2501
							   'append'
						  (%% Line 2502
						   [[83|[116|[97|[116|[101|[32|[109|[97|[99|[104|[105|[110|[101|[32]]]]]]]]]]]]]]|[P|[[32|[116|[101|[114|[109|[105|[110|[97|[116|[105|[110|[103|[46|[32|[82|[101|[97|[115|[111|[110|[58|[32]]]]]]]]]]]]]]]]]]]]]]|[P|%% Line 2503
																																     [_6|%% Line 2507
																																	 [_8|%% Line 2511
																																	     [[46|[32|[83|[116|[97|[116|[101|[58|[32]]]]]]]]]|[P|%% Line 2512
																																								 [_10|%% Line 2516
																																								      [[46]]]]]]]]]]])
					  in  let <_19> =
						  case %% Line 2519
						       FixedStacktrace of
						    %% Line 2520
						    <[]> when 'true' ->
							[]
						    %% Line 2521
						    <_35> when 'true' ->
							[FixedStacktrace|[]]
						  end
					      in  let <_16> =
						      case %% Line 2523
							   Q of
							%% Line 2524
							<[]> when 'true' ->
							    []
							%% Line 2525
							<[Event|_36]> when 'true' ->
							    [Event|[]]
							( <_15> when 'true' ->
							      %% Line 2523
							      primop 'match_fail'
								  ({'case_clause',_15})
							  -| ['compiler_generated'] )
						      end
						  in  let <_13> =
							  case %% Line 2528
							       Log of
							    %% Line 2529
							    <[]> when 'true' ->
								[]
							    %% Line 2530
							    <_37> when 'true' ->
								[Log|[]]
							  end
						      in  let <_14> =
							      [%% Line 2527
							       FmtData|_13]
							  in  let <_17> =
								  call %% Line 2526
								       'erlang':%% Line 2526
										'++'
								      (_16, _14)
							      in  let <_20> =
								      call %% Line 2522
									   'erlang':%% Line 2522
										    '++'
									  (_19, _17)
								  in  let <Args0> =
									  [%% Line 2518
									   Name|%% Line 2518
										[FixedReason|_20]]
								      in  let <_26> =
									      case %% Line 2532
										   Depth of
										%% Line 2533
										<'unlimited'> when 'true' ->
										    %% Line 2534
										    Args0
										%% Line 2535
										<_38> when 'true' ->
										    let <_24> =
											fun (_22) ->
											    %% Line 2536
											    [_22|[Depth|[]]]
										    in  %% Line 2536
											call 'lists':'flatmap'
											    (_24, Args0)
									      end
									  in  let <_29> =
										  call %% Line 2538
										       'erlang':%% Line 2538
												'++'
										      (%% Line 2538
										       Format, %% Line 2538
											       ClientFmt)
									      in  let <_28> =
										      call %% Line 2538
											   'erlang':%% Line 2538
												    '++'
											  (_26, %% Line 2538
												ClientArgs)
										  in  %% Line 2538
										      {_29,_28}
			  ( <_4> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_4})
			    -| ['compiler_generated'] )
			end
		    ( <_3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2539
	  <Report,FormatOpts> when 'true' ->
	      %% Line 2540
	      apply 'format_log_multi'/2
		  (Report, FormatOpts)
	end
'format_log_multi'/2 =
    %% Line 2542
    fun (_0,_1) ->
	case <_0,_1> of
	  <~{%% Line 2551
	    'reason':={Class,Reason,Stacktrace},%% Line 2545
						'postponed':=Postponed,%% Line 2550
								       'log':=Log,%% Line 2549
										  'timeouts':=Timeouts,'label':={'gen_statem','terminate'},%% Line 2552
																	   'client_info':=ClientInfo,%% Line 2547
																				     'state_enter':=StateEnter,%% Line 2548
																							       'state':=FmtData,%% Line 2546
																										'callback_mode':=CallbackMode,%% Line 2544
																													      'queue':=Q,%% Line 2543
																															 'name':=Name}~,%% Line 2553
																																	FormatOpts = %% Line 2553
																																		     ~{'depth':=Depth}~> when 'true' ->
	      let <P> =
		  apply %% Line 2554
			'p'/1
		      (%% Line 2554
		       FormatOpts)
	      in  %% Line 2555
		  case apply 'fix_reason'/3
			   (Class, Reason, Stacktrace) of
		    <{FixedReason,FixedStacktrace}> when 'true' ->
			%% Line 2556
			case apply 'format_client_log'/3
				 (ClientInfo, P, Depth) of
			  <{ClientFmt,ClientArgs}> when 'true' ->
			      let <_6> =
				  case %% Line 2558
				       StateEnter of
				    %% Line 2559
				    <'true'> when 'true' ->
					%% Line 2560
					[CallbackMode|['state_enter']]
				    %% Line 2561
				    <'false'> when 'true' ->
					%% Line 2562
					CallbackMode
				    ( <_5> when 'true' ->
					  %% Line 2558
					  primop 'match_fail'
					      ({'case_clause',_5})
				      -| ['compiler_generated'] )
				  end
			      in  let <_10> =
				      case %% Line 2567
					   Q of
					%% Line 2568
					<[]> when 'true' ->
					    []
					%% Line 2569
					<_55> when 'true' ->
					    let <_8> =
						call 'erlang':'++'
						    (P, [126|[110]])
					    in  call 'erlang':'++'
						    ([42|[42|[32|[76|[97|[115|[116|[32|[101|[118|[101|[110|[116|[32|[61|[32]]]]]]]]]]]]]]]], _8)
				      end
				  in  let <_13> =
					  case %% Line 2574
					       Q of
					    %% Line 2575
					    <[_56|[_57|_58]]> when 'true' ->
						let <_11> =
						    call 'erlang':'++'
							(P, [126|[110]])
						in  call 'erlang':'++'
							([42|[42|[32|[81|[117|[101|[117|[101|[100|[32|[61|[32]]]]]]]]]]]], _11)
					    %% Line 2576
					    <_59> when 'true' ->
						[]
					  end
				      in  let <_16> =
					      case %% Line 2578
						   Postponed of
						%% Line 2579
						<[]> when 'true' ->
						    []
						%% Line 2580
						<_60> when 'true' ->
						    let <_14> =
							call 'erlang':'++'
							    (P, [126|[110]])
						    in  call 'erlang':'++'
							    ([42|[42|[32|[80|[111|[115|[116|[112|[111|[110|[101|[100|[32|[61|[32]]]]]]]]]]]]]]], _14)
					      end
					  in  let <_19> =
						  case %% Line 2582
						       FixedStacktrace of
						    %% Line 2583
						    <[]> when 'true' ->
							[]
						    %% Line 2584
						    <_61> when 'true' ->
							let <_17> =
							    call 'erlang':'++'
								(P, [126|[110]])
							in  call 'erlang':'++'
								([42|[42|[32|[83|[116|[97|[99|[107|[116|[114|[97|[99|[101|[32|[61|[126|[110|[42|[42|[32|[32]]]]]]]]]]]]]]]]]]]]], _17)
						  end
					      in  let <_22> =
						      case %% Line 2586
							   Timeouts of
							%% Line 2587
							<{0,_62}> when 'true' ->
							    []
							%% Line 2588
							<_63> when 'true' ->
							    let <_20> =
								call 'erlang':'++'
								    (P, [126|[110]])
							    in  call 'erlang':'++'
								    ([42|[42|[32|[84|[105|[109|[101|[45|[111|[117|[116|[115|[58|[32]]]]]]]]]]]]]], _20)
						      end
						  in  let <_25> =
							  case %% Line 2590
							       Log of
							    %% Line 2591
							    <[]> when 'true' ->
								[]
							    %% Line 2592
							    <_64> when 'true' ->
								let <_23> =
								    call 'erlang':'++'
									(P, [126|[110]])
								in  call 'erlang':'++'
									([42|[42|[32|[76|[111|[103|[32|[61|[126|[110|[42|[42|[32|[32]]]]]]]]]]]]]], _23)
							  end
						      in  let <Format> =
							      call %% Line 2565
								   'lists':%% Line 2565
									   'append'
								  (%% Line 2566
								   [[42|[42|[32|[83|[116|[97|[116|[101|[32|[109|[97|[99|[104|[105|[110|[101|[32]]]]]]]]]]]]]]]]]|[P|[[32|[116|[101|[114|[109|[105|[110|[97|[116|[105|[110|[103|[126|[110]]]]]]]]]]]]]]|%% Line 2567
																														       [_10|%% Line 2571
																															    [[42|[42|[32|[87|[104|[101|[110|[32|[115|[101|[114|[118|[101|[114|[32|[115|[116|[97|[116|[101|[32|[32|[61|[32]]]]]]]]]]]]]]]]]]]]]]]]|[P|[[126|[110]]|%% Line 2572
																																																		  [[42|[42|[32|[82|[101|[97|[115|[111|[110|[32|[102|[111|[114|[32|[116|[101|[114|[109|[105|[110|[97|[116|[105|[111|[110|[32|[61|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[P|[[58]|[P|[[126|[110]]|%% Line 2573
																																																																									 [[42|[42|[32|[67|[97|[108|[108|[98|[97|[99|[107|[32|[109|[111|[100|[101|[32|[61|[32]]]]]]]]]]]]]]]]]]]|[P|[[126|[110]]|%% Line 2574
																																																																																								[_13|%% Line 2578
																																																																																								     [_16|%% Line 2582
																																																																																									  [_19|%% Line 2586
																																																																																									       [_22|%% Line 2590
																																																																																										    [_25|%% Line 2593
																																																																																											 []]]]]]]]]]]]]]]]]]]]])
							  in  let <_43> =
								  case %% Line 2596
								       Q of
								    %% Line 2597
								    <[]> when 'true' ->
									[]
								    %% Line 2598
								    <[Event|_65]> when 'true' ->
									[Event|[]]
								    ( <_42> when 'true' ->
									  %% Line 2596
									  primop 'match_fail'
									      ({'case_clause',_42})
								      -| ['compiler_generated'] )
								  end
							      in  let <_39> =
								      case %% Line 2603
									   Q of
									%% Line 2604
									<[_66|Events = [_67|_68]]> when 'true' ->
									    [Events|[]]
									%% Line 2605
									<_69> when 'true' ->
									    []
								      end
								  in  let <_36> =
									  case %% Line 2607
									       Postponed of
									    %% Line 2608
									    <[]> when 'true' ->
										[]
									    %% Line 2609
									    <_70> when 'true' ->
										[Postponed|[]]
									  end
								      in  let <_33> =
									      case %% Line 2611
										   FixedStacktrace of
										%% Line 2612
										<[]> when 'true' ->
										    []
										%% Line 2613
										<_71> when 'true' ->
										    [FixedStacktrace|[]]
									      end
									  in  let <_30> =
										  case %% Line 2615
										       Timeouts of
										    %% Line 2616
										    <{0,_72}> when 'true' ->
											[]
										    %% Line 2617
										    <_73> when 'true' ->
											[Timeouts|[]]
										  end
									      in  let <_28> =
										      case %% Line 2619
											   Log of
											%% Line 2620
											<[]> when 'true' ->
											    []
											%% Line 2621
											<_74> when 'true' ->
											    [Log|[]]
										      end
										  in  let <_31> =
											  call %% Line 2618
											       'erlang':%% Line 2618
													'++'
											      (_30, _28)
										      in  let <_34> =
											      call %% Line 2614
												   'erlang':%% Line 2614
													    '++'
												  (_33, _31)
											  in  let <_37> =
												  call %% Line 2610
												       'erlang':%% Line 2610
														'++'
												      (_36, _34)
											      in  let <_40> =
												      call %% Line 2606
													   'erlang':%% Line 2606
														    '++'
													  (_39, _37)
												  in  let <_41> =
													  [%% Line 2600
													   FmtData|%% Line 2601
														   [Class|[FixedReason|%% Line 2602
																       [_6|_40]]]]
												      in  let <Args0> =
													      [%% Line 2595
													       Name|%% Line 2599
														    call 'erlang':'++'
															(_43, _41)]
													  in  let <_49> =
														  case %% Line 2623
														       Depth of
														    %% Line 2624
														    <'unlimited'> when 'true' ->
															%% Line 2625
															Args0
														    %% Line 2626
														    <_75> when 'true' ->
															let <_47> =
															    fun (_45) ->
																%% Line 2627
																[_45|[Depth|[]]]
															in  %% Line 2627
															    call 'lists':'flatmap'
																(_47, Args0)
														  end
													      in  let <_52> =
														      call %% Line 2629
															   'erlang':%% Line 2629
																    '++'
															  (%% Line 2629
															   Format, %% Line 2629
																   ClientFmt)
														  in  let <_51> =
															  call %% Line 2629
															       'erlang':%% Line 2629
																	'++'
															      (_49, %% Line 2629
																    ClientArgs)
														      in  %% Line 2629
															  {_52,_51}
			  ( <_4> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_4})
			    -| ['compiler_generated'] )
			end
		    ( <_3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_3})
		      -| ['compiler_generated'] )
		  end
	  ( <_54,_53> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_54,_53})
		  -| [{'function_name',{'format_log_multi',2}}] )
	    -| ['compiler_generated'] )
	end
'fix_reason'/3 =
    %% Line 2631
    fun (_0,_1,_2) ->
	%% Line 2632
	case _2 of
	  %% Line 2633
	  <[{M,F,Args,_13}|ST]>
	      when let <_3> =
		    call %% Line 2634
			 'erlang':%% Line 2634
				  '=:='
			(_0, %% Line 2634
			     'error')
		in  let <_4> =
			call %% Line 2634
			     'erlang':%% Line 2634
				      '=:='
			    (_1, %% Line 2634
				 'undef')
		    in  %% Line 2634
			call 'erlang':'and'
			    (_3, _4) ->
	      %% Line 2635
	      case call 'code':'is_loaded'
		       (M) of
		%% Line 2636
		<'false'> when 'true' ->
		    %% Line 2637
		    {{'module could not be loaded',M},ST}
		%% Line 2638
		<_14> when 'true' ->
		    let <_5> =
			case <> of
			  %% Line 2641
			  <>
			      when call 'erlang':'is_list'
				    (Args) ->
			      %% Line 2642
			      call 'erlang':'length'
				  (Args)
			  %% Line 2643
			  <>
			      when call 'erlang':'is_integer'
				    (Args) ->
			      %% Line 2644
			      Args
			  ( <> when 'true' ->
				%% Line 2640
				primop 'match_fail'
				    ('if_clause')
			    -| ['compiler_generated'] )
			end
		    in  %% Line 2646
			case call 'erlang':'function_exported'
				 (M, F, _5) of
			  %% Line 2647
			  <'true'> when 'true' ->
			      %% Line 2648
			      {_1,_2}
			  %% Line 2649
			  <'false'> when 'true' ->
			      %% Line 2650
			      {{'function not exported',{M,F,_5}},ST}
			  ( <_7> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_7})
			    -| ['compiler_generated'] )
			end
	      end
	  %% Line 2653
	  <_15> when 'true' ->
	      {_1,_2}
	end
'format_client_log_single'/3 =
    %% Line 2656
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <'undefined',_12,_13> when 'true' ->
	      %% Line 2657
	      {[],[]}
	  %% Line 2658
	  <{Pid,'dead'},_14,_15> when 'true' ->
	      %% Line 2659
	      {[32|[67|[108|[105|[101|[110|[116|[32|[126|[48|[112|[32|[105|[115|[32|[100|[101|[97|[100|[46]]]]]]]]]]]]]]]]]]]],[Pid|[]]}
	  %% Line 2660
	  <{Pid,'remote'},_16,_17> when 'true' ->
	      let <_3> =
		  call %% Line 2661
		       'erlang':%% Line 2661
				'node'
		      (%% Line 2661
		       Pid)
	      in  %% Line 2661
		  {[32|[67|[108|[105|[101|[110|[116|[32|[126|[48|[112|[32|[105|[115|[32|[114|[101|[109|[111|[116|[101|[32|[111|[110|[32|[110|[111|[100|[101|[32|[126|[48|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Pid|[_3|[]]]}
	  %% Line 2662
	  <{_X_Pid,{Name,Stacktrace0}},P,Depth> when 'true' ->
	      let <Stacktrace> =
		  call %% Line 2665
		       'lists':%% Line 2665
			       'sublist'
		      (%% Line 2665
		       Stacktrace0, %% Line 2665
				    4)
	      in  let <Format> =
		      call %% Line 2666
			   'lists':%% Line 2666
				   'append'
			  (%% Line 2666
			   [[32|[67|[108|[105|[101|[110|[116|[32]]]]]]]]|[P|[[32|[115|[116|[97|[99|[107|[116|[114|[97|[99|[101|[58|[32]]]]]]]]]]]]]|[P|[[46]]]]]])
		  in  let <_7> =
			  case %% Line 2667
			       Depth of
			    %% Line 2668
			    <'unlimited'> when 'true' ->
				%% Line 2669
				[Name|[Stacktrace|[]]]
			    %% Line 2670
			    <_18> when 'true' ->
				%% Line 2671
				[Name|[Depth|[Stacktrace|[Depth|[]]]]]
			  end
		      in  %% Line 2673
			  {Format,_7}
	  ( <_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9})
		  -| [{'function_name',{'format_client_log_single',3}}] )
	    -| ['compiler_generated'] )
	end
'format_client_log'/3 =
    %% Line 2675
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <'undefined',_11,_12> when 'true' ->
	      %% Line 2676
	      {[],[]}
	  %% Line 2677
	  <{Pid,'dead'},_13,_14> when 'true' ->
	      %% Line 2678
	      {[42|[42|[32|[67|[108|[105|[101|[110|[116|[32|[126|[112|[32|[105|[115|[32|[100|[101|[97|[100|[126|[110]]]]]]]]]]]]]]]]]]]]]],[Pid|[]]}
	  %% Line 2679
	  <{Pid,'remote'},_15,_16> when 'true' ->
	      let <_3> =
		  call %% Line 2680
		       'erlang':%% Line 2680
				'node'
		      (%% Line 2680
		       Pid)
	      in  %% Line 2680
		  {[42|[42|[32|[67|[108|[105|[101|[110|[116|[32|[126|[112|[32|[105|[115|[32|[114|[101|[109|[111|[116|[101|[32|[111|[110|[32|[110|[111|[100|[101|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Pid|[_3|[]]]}
	  %% Line 2681
	  <{_X_Pid,{Name,Stacktrace}},P,Depth> when 'true' ->
	      let <Format> =
		  call %% Line 2682
		       'lists':%% Line 2682
			       'append'
		      (%% Line 2682
		       [[42|[42|[32|[67|[108|[105|[101|[110|[116|[32]]]]]]]]]]|[P|[[32|[115|[116|[97|[99|[107|[116|[114|[97|[99|[101|[126|[110|[42|[42|[32]]]]]]]]]]]]]]]]|[P|[[126|[110]]]]]]])
	      in  let <_6> =
		      case %% Line 2683
			   Depth of
			%% Line 2684
			<'unlimited'> when 'true' ->
			    %% Line 2685
			    [Name|[Stacktrace|[]]]
			%% Line 2686
			<_17> when 'true' ->
			    %% Line 2687
			    [Name|[Depth|[Stacktrace|[Depth|[]]]]]
		      end
		  in  %% Line 2689
		      {Format,_6}
	  ( <_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8})
		  -| [{'function_name',{'format_client_log',3}}] )
	    -| ['compiler_generated'] )
	end
'p'/1 =
    %% Line 2691
    fun (_0) ->
	case _0 of
	  <~{'depth':=Depth,'encoding':=Enc,'single_line':=Single}~> when 'true' ->
	      let <_4> =
		  apply %% Line 2692
			'single'/1
		      (%% Line 2692
		       Single)
	      in  let <_2> =
		      apply %% Line 2692
			    'mod'/1
			  (%% Line 2692
			   Enc)
		  in  let <_1> =
			  apply %% Line 2692
				'p'/1
			      (%% Line 2692
			       Depth)
		      in  let <_3> =
			      call %% Line 2692
				   'erlang':%% Line 2692
					    '++'
				  (_2, _1)
			  in  let <_5> =
				  call %% Line 2692
				       'erlang':%% Line 2692
						'++'
				      (_4, _3)
			      in  %% Line 2692
				  [126|_5]
	  %% Line 2693
	  <'unlimited'> when 'true' ->
	      %% Line 2694
	      [112]
	  %% Line 2695
	  <_X_Depth> when 'true' ->
	      %% Line 2696
	      [80]
	end
'single'/1 =
    %% Line 2698
    fun (_0) ->
	case _0 of
	  <'true'> when 'true' ->
	      [48]
	  %% Line 2699
	  <'false'> when 'true' ->
	      []
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'single',1}}] )
	    -| ['compiler_generated'] )
	end
'mod'/1 =
    %% Line 2701
    fun (_0) ->
	case _0 of
	  <'latin1'> when 'true' ->
	      []
	  %% Line 2702
	  <_2> when 'true' ->
	      [116]
	end
'format_status'/4 =
    %% Line 2705
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <%% Line 2706
	   Opt,%% Line 2706
	       PDict,%% Line 2707
		     {'params',_15,_16,_17,Module,_18,_19},%% Line 2708
							   {'state',State_Data = {State,Data},_20,_21,_22}> when 'true' ->
	      %% Line 2709
	      case call 'erlang':'function_exported'
		       (Module, 'format_status', 2) of
		%% Line 2710
		<'true'> when 'true' ->
		    %% Line 2711
		    try
			call Module:'format_status'
			    (Opt, [PDict|[State|[Data|[]]]])
		    of <_4> ->
			_4
		    catch <_7,_6,_5> ->
			%% Line 2713
			case <_7,_6,_5> of
			  <( 'throw'
			     -| ['compiler_generated'] ),Result,_23> when 'true' ->
			      Result
			  %% Line 2714
			  <_24,_25,_26> when 'true' ->
			      let <_8> =
				  call %% Line 2718
				       'erlang':%% Line 2718
						'atom_to_list'
				      (%% Line 2718
				       Module)
			      in  let <_9> =
				      call %% Line 2718
					   'erlang':%% Line 2718
						    '++'
					  (_8, %% Line 2718
					       [58|[102|[111|[114|[109|[97|[116|[95|[115|[116|[97|[116|[117|[115|[47|[50|[32|[99|[114|[97|[115|[104|[101|[100]]]]]]]]]]]]]]]]]]]]]]]])
				  in  %% Line 2715
				      apply 'format_status_default'/2
					  (%% Line 2716
					   Opt, %% Line 2717
						{State,_9})
			end
		%% Line 2720
		<'false'> when 'true' ->
		    %% Line 2721
		    apply 'format_status_default'/2
			(Opt, State_Data)
		( <_10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_10})
		  -| ['compiler_generated'] )
	      end
	  ( <_14,_13,_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13,_12,_11})
		  -| [{'function_name',{'format_status',4}}] )
	    -| ['compiler_generated'] )
	end
'format_status_default'/2 =
    %% Line 2725
    fun (_0,_1) ->
	%% Line 2726
	case _0 of
	  %% Line 2727
	  <'terminate'> when 'true' ->
	      _1
	  %% Line 2729
	  <_5> when 'true' ->
	      %% Line 2730
	      [{'data',[{[83|[116|[97|[116|[101]]]]],_1}|[]]}|[]]
	end
'listify'/1 =
    %% Line 2734
    fun (_0) ->
	case _0 of
	  <Item>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 2735
	      Item
	  %% Line 2736
	  <Item> when 'true' ->
	      %% Line 2737
	      [Item|[]]
	end
'cancel_timer'/1 =
    %% Line 2757
    fun (_0) ->
	%% Line 2758
	case call 'erlang':'cancel_timer'
		 (_0) of
	  <'false'> when 'true' ->
	      receive
		<{'timeout',_3,_4}>
		    when call 'erlang':'=:='
			  (_3,
			   _0) ->
		    'ok'
	      after 'infinity' ->
		'true'
	  <_5> when 'true' ->
	      'ok'
	end
'cancel_timer'/3 =
    %% Line 2770
    fun (_0,_1,_2) ->
	do  %% Line 2771
	    case call 'erlang':'cancel_timer'
		     (_1) of
	      <'false'> when 'true' ->
		  receive
		    <{'timeout',_7,_8}>
			when call 'erlang':'=:='
			      (_7,
			       _1) ->
			'ok'
		  after 'infinity' ->
		    'ok'
	      <_9> when 'true' ->
		  'ok'
	    end
	    %% Line 2771
	    call 'maps':'remove'
		(_0, _2)
'cancel_timer'/2 =
    %% Line 2777
    fun (_0,_1) ->
	%% Line 2778
	case _1 of
	  %% Line 2779
	  <~{_0:={TimerRef,_X_TimeoutMsg}}~> when 'true' ->
	      do  %% Line 2780
		  case call 'erlang':'cancel_timer'
			   (TimerRef) of
		    <'false'> when 'true' ->
			receive
			  <{'timeout',_6,_7}>
			      when call 'erlang':'=:='
				    (_6,
				     TimerRef) ->
			      'ok'
			after 'infinity' ->
			  'ok'
		    <_8> when 'true' ->
			'ok'
		  end
		  %% Line 2780
		  call 'maps':'remove'
		      (_0, _1)
	  %% Line 2781
	  <~{}~> when 'true' ->
	      _1
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_3})
	    -| ['compiler_generated'] )
	end
'list_timeouts'/1 =
    %% Line 2786
    fun (_0) ->
	let <_9> =
	    call %% Line 2787
		 'maps':%% Line 2787
			'size'
		(_0)
	in  let <_7> =
		fun (_3,_2,_1) ->
		    %% Line 2789
		    case <_3,_2,_1> of
		      <TimeoutType,{_X_TimerRef,TimeoutMsg},Acc> when 'true' ->
			  %% Line 2790
			  [{TimeoutType,TimeoutMsg}|Acc]
		      ( <_6,_5,_4> when 'true' ->
			    ( primop 'match_fail'
				  ({'function_clause',_6,_5,_4})
			      -| [{'function_name',{'-list_timeouts/1-fun-0-',3}}] )
			-| ['compiler_generated'] )
		    end
	    in  let <_8> =
		    call %% Line 2788
			 'maps':%% Line 2788
				'fold'
			(_7, %% Line 2791
			     [], _0)
		in  %% Line 2787
		    {_9,_8}
'behaviour_info'/1 =
    fun (_0) ->
	case _0 of
	  <'callbacks'> when 'true' ->
	      [{'init',1}|[{'callback_mode',0}|[{'state_name',3}|[{'handle_event',4}|[{'terminate',3}|[{'code_change',4}|[{'format_status',2}]]]]]]]
	  <'optional_callbacks'> when 'true' ->
	      [{'format_status',2}|[{'terminate',3}|[{'code_change',4}|[{'state_name',3}|[{'handle_event',4}]]]]]
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'behaviour_info',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('gen_statem')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('gen_statem', _0)
end