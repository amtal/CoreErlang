module 'rand' ['bc64'/1,
	       'export_seed'/0,
	       'export_seed_s'/1,
	       'exro928_jump_2pow20'/1,
	       'exro928_jump_2pow512'/1,
	       'exro928_next'/1,
	       'exro928_next_state'/1,
	       'exro928_seed'/1,
	       'float2str'/1,
	       'format_jumpconst58'/1,
	       'jump'/0,
	       'jump'/1,
	       'make_float'/3,
	       'module_info'/0,
	       'module_info'/1,
	       'normal'/0,
	       'normal'/2,
	       'normal_s'/1,
	       'normal_s'/3,
	       'seed'/1,
	       'seed'/2,
	       'seed58'/2,
	       'seed_s'/1,
	       'seed_s'/2,
	       'uniform'/0,
	       'uniform'/1,
	       'uniform_real'/0,
	       'uniform_real_s'/1,
	       'uniform_s'/1,
	       'uniform_s'/2]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[114|[97|[110|[100|[46|[101|[114|[108]]]]]]]]]]]],1}],
		%% Line 46
		'compile' =
		    %% Line 46
		    [{'inline',[{'exs64_next',1}|[{'exsplus_next',1}|[{'exsss_next',1}|[{'exs1024_next',1}|[{'exs1024_calc',2}|[{'exro928_next_state',4}|[{'exrop_next',1}|[{'exrop_next_s',2}|[{'get_52',1}|[{'normal_kiwi',1}]]]]]]]]]]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'uint64',{'type',84,'range',[{'integer',84,0}|[{'op',84,'-',{'op',84,'bsl',{'integer',84,1},{'integer',84,64}},{'integer',84,1}}]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'uint58',{'type',85,'range',[{'integer',85,0}|[{'op',85,'-',{'op',85,'bsl',{'integer',85,1},{'integer',85,58}},{'integer',85,1}}]]},[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{'alg_state',{'type',89,'union',[{'user_type',89,'exsplus_state',[]}|[{'user_type',89,'exro928_state',[]}|[{'user_type',89,'exrop_state',[]}|[{'user_type',89,'exs1024_state',[]}|[{'user_type',90,'exs64_state',[]}|[{'type',90,'term',[]}]]]]]]},[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{'alg_handler',{'type',118,'map',[{'type',118,'map_field_exact',[{'atom',118,'type'}|[{'user_type',118,'alg',[]}]]}|[{'type',119,'map_field_assoc',[{'atom',119,'bits'}|[{'type',119,'non_neg_integer',[]}]]}|[{'type',120,'map_field_assoc',[{'atom',120,'weak_low_bits'}|[{'type',120,'non_neg_integer',[]}]]}|[{'type',121,'map_field_assoc',[{'atom',121,'max'}|[{'type',121,'non_neg_integer',[]}]]}|[{'type',122,'map_field_exact',[{'atom',122,'next'}|[{'type',123,'fun',[{'type',123,'product',[{'user_type',123,'alg_state',[]}]}|[{'type',123,'tuple',[{'type',123,'non_neg_integer',[]}|[{'user_type',123,'alg_state',[]}]]}]]}]]}|[{'type',124,'map_field_assoc',[{'atom',124,'uniform'}|[{'type',125,'fun',[{'type',125,'product',[{'user_type',125,'state',[]}]}|[{'type',125,'tuple',[{'type',125,'float',[]}|[{'user_type',125,'state',[]}]]}]]}]]}|[{'type',126,'map_field_assoc',[{'atom',126,'uniform_n'}|[{'type',127,'fun',[{'type',127,'product',[{'type',127,'pos_integer',[]}|[{'user_type',127,'state',[]}]]}|[{'type',127,'tuple',[{'type',127,'pos_integer',[]}|[{'user_type',127,'state',[]}]]}]]}]]}|[{'type',128,'map_field_assoc',[{'atom',128,'jump'}|[{'type',129,'fun',[{'type',129,'product',[{'user_type',129,'state',[]}]}|[{'user_type',129,'state',[]}]]}]]}]]]]]]]]},[]}],
		%% Line 132
		'type' =
		    %% Line 132
		    [{'state',{'type',132,'tuple',[{'user_type',132,'alg_handler',[]}|[{'user_type',132,'alg_state',[]}]]},[]}],
		%% Line 133
		'type' =
		    %% Line 133
		    [{'builtin_alg',{'type',134,'union',[{'atom',134,'exsss'}|[{'atom',134,'exro928ss'}|[{'atom',134,'exrop'}|[{'atom',134,'exs1024s'}|[{'atom',134,'exsp'}|[{'atom',134,'exs64'}|[{'atom',134,'exsplus'}|[{'atom',134,'exs1024'}]]]]]]]]},[]}],
		%% Line 135
		'type' =
		    %% Line 135
		    [{'alg',{'type',135,'union',[{'user_type',135,'builtin_alg',[]}|[{'type',135,'atom',[]}]]},[]}],
		%% Line 136
		'type' =
		    %% Line 136
		    [{'export_state',{'type',136,'tuple',[{'user_type',136,'alg',[]}|[{'user_type',136,'alg_state',[]}]]},[]}],
		%% Line 137
		'type' =
		    %% Line 137
		    [{'seed',{'type',137,'union',[{'type',137,'list',[{'type',137,'integer',[]}]}|[{'type',137,'integer',[]}|[{'type',137,'tuple',[{'type',137,'integer',[]}|[{'type',137,'integer',[]}|[{'type',137,'integer',[]}]]]}]]]},[]}],
		%% Line 138
		'export_type' =
		    %% Line 138
		    [{'builtin_alg',0}|[{'alg',0}|[{'alg_handler',0}|[{'alg_state',0}|[{'state',0}|[{'export_state',0}|[{'seed',0}]]]]]]],
		%% Line 141
		'export_type' =
		    %% Line 141
		    [{'exsplus_state',0}|[{'exro928_state',0}|[{'exrop_state',0}|[{'exs1024_state',0}|[{'exs64_state',0}]]]]],
		%% Line 233
		'spec' =
		    %% Line 233
		    [{{'export_seed',0},[{'type',233,'fun',[{'type',233,'product',[]}|[{'type',233,'union',[{'atom',233,'undefined'}|[{'user_type',233,'export_state',[]}]]}]]}]}],
		%% Line 240
		'spec' =
		    %% Line 240
		    [{{'export_seed_s',1},[{'type',240,'fun',[{'type',240,'product',[{'ann_type',240,[{'var',240,'State'}|[{'user_type',240,'state',[]}]]}]}|[{'user_type',240,'export_state',[]}]]}]}],
		%% Line 249
		'spec' =
		    %% Line 249
		    [{{'seed',1},[{'type',249,'fun',[{'type',249,'product',[{'ann_type',250,[{'var',250,'AlgOrStateOrExpState'}|[{'type',250,'union',[{'user_type',250,'builtin_alg',[]}|[{'user_type',250,'state',[]}|[{'user_type',250,'export_state',[]}]]]}]]}]}|[{'user_type',251,'state',[]}]]}]}],
		%% Line 255
		'spec' =
		    %% Line 255
		    [{{'seed_s',1},[{'type',255,'fun',[{'type',255,'product',[{'ann_type',256,[{'var',256,'AlgOrStateOrExpState'}|[{'type',256,'union',[{'user_type',256,'builtin_alg',[]}|[{'user_type',256,'state',[]}|[{'user_type',256,'export_state',[]}]]]}]]}]}|[{'user_type',257,'state',[]}]]}]}],
		%% Line 271
		'spec' =
		    %% Line 271
		    [{{'seed',2},[{'type',271,'fun',[{'type',271,'product',[{'ann_type',271,[{'var',271,'Alg'}|[{'user_type',271,'builtin_alg',[]}]]}|[{'ann_type',271,[{'var',271,'Seed'}|[{'user_type',271,'seed',[]}]]}]]}|[{'user_type',271,'state',[]}]]}]}],
		%% Line 275
		'spec' =
		    %% Line 275
		    [{{'seed_s',2},[{'type',275,'fun',[{'type',275,'product',[{'ann_type',275,[{'var',275,'Alg'}|[{'user_type',275,'builtin_alg',[]}]]}|[{'ann_type',275,[{'var',275,'Seed'}|[{'user_type',275,'seed',[]}]]}]]}|[{'user_type',275,'state',[]}]]}]}],
		%% Line 287
		'spec' =
		    %% Line 287
		    [{{'uniform',0},[{'type',287,'fun',[{'type',287,'product',[]}|[{'ann_type',287,[{'var',287,'X'}|[{'type',287,'float',[]}]]}]]}]}],
		%% Line 297
		'spec' =
		    %% Line 297
		    [{{'uniform',1},[{'type',297,'fun',[{'type',297,'product',[{'ann_type',297,[{'var',297,'N'}|[{'type',297,'pos_integer',[]}]]}]}|[{'ann_type',297,[{'var',297,'X'}|[{'type',297,'pos_integer',[]}]]}]]}]}],
		%% Line 307
		'spec' =
		    %% Line 307
		    [{{'uniform_s',1},[{'type',307,'fun',[{'type',307,'product',[{'ann_type',307,[{'var',307,'State'}|[{'user_type',307,'state',[]}]]}]}|[{'type',307,'tuple',[{'ann_type',307,[{'var',307,'X'}|[{'type',307,'float',[]}]]}|[{'ann_type',307,[{'var',307,'NewState'}|[{'user_type',307,'state',[]}]]}]]}]]}]}],
		%% Line 324
		'spec' =
		    %% Line 324
		    [{{'uniform_s',2},[{'type',324,'fun',[{'type',324,'product',[{'ann_type',324,[{'var',324,'N'}|[{'type',324,'pos_integer',[]}]]}|[{'ann_type',324,[{'var',324,'State'}|[{'user_type',324,'state',[]}]]}]]}|[{'type',325,'tuple',[{'ann_type',325,[{'var',325,'X'}|[{'type',325,'pos_integer',[]}]]}|[{'ann_type',325,[{'var',325,'NewState'}|[{'user_type',325,'state',[]}]]}]]}]]}]}],
		%% Line 350
		'spec' =
		    %% Line 350
		    [{{'uniform_real',0},[{'type',350,'fun',[{'type',350,'product',[]}|[{'ann_type',350,[{'var',350,'X'}|[{'type',350,'float',[]}]]}]]}]}],
		%% Line 390
		'spec' =
		    %% Line 390
		    [{{'uniform_real_s',1},[{'type',390,'fun',[{'type',390,'product',[{'ann_type',390,[{'var',390,'State'}|[{'user_type',390,'state',[]}]]}]}|[{'type',390,'tuple',[{'ann_type',390,[{'var',390,'X'}|[{'type',390,'float',[]}]]}|[{'ann_type',390,[{'var',390,'NewState'}|[{'user_type',390,'state',[]}]]}]]}]]}]}],
		%% Line 535
		'spec' =
		    %% Line 535
		    [{{'jump',1},[{'type',535,'fun',[{'type',535,'product',[{'user_type',535,'state',[]}]}|[{'ann_type',535,[{'var',535,'NewState'}|[{'user_type',535,'state',[]}]]}]]}]}],
		%% Line 547
		'spec' =
		    %% Line 547
		    [{{'jump',0},[{'type',547,'fun',[{'type',547,'product',[]}|[{'ann_type',547,[{'var',547,'NewState'}|[{'user_type',547,'state',[]}]]}]]}]}],
		%% Line 554
		'spec' =
		    %% Line 554
		    [{{'normal',0},[{'type',554,'fun',[{'type',554,'product',[]}|[{'type',554,'float',[]}]]}]}],
		%% Line 563
		'spec' =
		    %% Line 563
		    [{{'normal',2},[{'type',563,'fun',[{'type',563,'product',[{'ann_type',563,[{'var',563,'Mean'}|[{'type',563,'number',[]}]]}|[{'ann_type',563,[{'var',563,'Variance'}|[{'type',563,'number',[]}]]}]]}|[{'type',563,'float',[]}]]}]}],
		%% Line 571
		'spec' =
		    %% Line 571
		    [{{'normal_s',1},[{'type',571,'fun',[{'type',571,'product',[{'ann_type',571,[{'var',571,'State'}|[{'user_type',571,'state',[]}]]}]}|[{'type',571,'tuple',[{'type',571,'float',[]}|[{'ann_type',571,[{'var',571,'NewState'}|[{'user_type',571,'state',[]}]]}]]}]]}]}],
		%% Line 589
		'spec' =
		    %% Line 589
		    [{{'normal_s',3},[{'type',589,'fun',[{'type',589,'product',[{'ann_type',589,[{'var',589,'Mean'}|[{'type',589,'number',[]}]]}|[{'ann_type',589,[{'var',589,'Variance'}|[{'type',589,'number',[]}]]}|[{'user_type',589,'state',[]}]]]}|[{'type',589,'tuple',[{'type',589,'float',[]}|[{'ann_type',589,[{'var',589,'NewS'}|[{'user_type',589,'state',[]}]]}]]}]]}]}],
		%% Line 597
		'spec' =
		    %% Line 597
		    [{{'seed_put',1},[{'type',597,'fun',[{'type',597,'product',[{'user_type',597,'state',[]}]}|[{'user_type',597,'state',[]}]]}]}],
		%% Line 652
		'opaque' =
		    %% Line 652
		    [{'exs64_state',{'user_type',652,'uint64',[]},[]}],
		%% Line 669
		'spec' =
		    %% Line 669
		    [{{'exs64_next',1},[{'type',669,'fun',[{'type',669,'product',[{'user_type',669,'exs64_state',[]}]}|[{'type',669,'tuple',[{'user_type',669,'uint64',[]}|[{'user_type',669,'exs64_state',[]}]]}]]}]}],
		%% Line 714
		'opaque' =
		    %% Line 714
		    [{'exsplus_state',{'type',714,'nonempty_improper_list',[{'user_type',714,'uint58',[]}|[{'user_type',714,'uint58',[]}]]},[]}],
		%% Line 716
		'dialyzer' =
		    %% Line 716
		    [{'no_improper_lists',{'exsplus_seed',1}}],
		%% Line 735
		'dialyzer' =
		    %% Line 735
		    [{'no_improper_lists',{'exsss_seed',1}}],
		%% Line 770
		'dialyzer' =
		    %% Line 770
		    [{'no_improper_lists',{'exsplus_next',1}}],
		%% Line 773
		'spec' =
		    %% Line 773
		    [{{'exsplus_next',1},[{'type',773,'fun',[{'type',773,'product',[{'user_type',773,'exsplus_state',[]}]}|[{'type',773,'tuple',[{'user_type',773,'uint58',[]}|[{'user_type',773,'exsplus_state',[]}]]}]]}]}],
		%% Line 783
		'dialyzer' =
		    %% Line 783
		    [{'no_improper_lists',{'exsss_next',1}}],
		%% Line 785
		'spec' =
		    %% Line 785
		    [{{'exsss_next',1},[{'type',785,'fun',[{'type',785,'product',[{'user_type',785,'exsplus_state',[]}]}|[{'type',785,'tuple',[{'user_type',785,'uint58',[]}|[{'user_type',785,'exsplus_state',[]}]]}]]}]}],
		%% Line 848
		'dialyzer' =
		    %% Line 848
		    [{'no_improper_lists',{'exsplus_jump',1}}],
		%% Line 849
		'spec' =
		    %% Line 849
		    [{{'exsplus_jump',1},[{'type',849,'fun',[{'type',849,'product',[{'type',849,'tuple',[{'user_type',849,'alg_handler',[]}|[{'user_type',849,'exsplus_state',[]}]]}]}|[{'type',850,'tuple',[{'user_type',850,'alg_handler',[]}|[{'user_type',850,'exsplus_state',[]}]]}]]}]}],
		%% Line 856
		'dialyzer' =
		    %% Line 856
		    [{'no_improper_lists',{'exsplus_jump',4}}],
		%% Line 875
		'opaque' =
		    %% Line 875
		    [{'exs1024_state',{'type',875,'tuple',[{'type',875,'list',[{'user_type',875,'uint64',[]}]}|[{'type',875,'list',[{'user_type',875,'uint64',[]}]}]]},[]}],
		%% Line 894
		'spec' =
		    %% Line 894
		    [{{'exs1024_gen1024',1},[{'type',894,'fun',[{'type',894,'product',[{'user_type',894,'uint64',[]}]}|[{'type',894,'list',[{'user_type',894,'uint64',[]}]}]]}]}],
		%% Line 907
		'spec' =
		    %% Line 907
		    [{{'exs1024_calc',2},[{'type',907,'fun',[{'type',907,'product',[{'user_type',907,'uint64',[]}|[{'user_type',907,'uint64',[]}]]}|[{'type',907,'tuple',[{'user_type',907,'uint64',[]}|[{'user_type',907,'uint64',[]}]]}]]}]}],
		%% Line 916
		'spec' =
		    %% Line 916
		    [{{'exs1024_next',1},[{'type',916,'fun',[{'type',916,'product',[{'user_type',916,'exs1024_state',[]}]}|[{'type',916,'tuple',[{'user_type',916,'uint64',[]}|[{'user_type',916,'exs1024_state',[]}]]}]]}]}],
		%% Line 954
		'spec' =
		    %% Line 954
		    [{{'exs1024_jump',1},[{'type',954,'fun',[{'type',954,'product',[{'type',954,'tuple',[{'user_type',954,'alg_handler',[]}|[{'user_type',954,'exs1024_state',[]}]]}]}|[{'type',955,'tuple',[{'user_type',955,'alg_handler',[]}|[{'user_type',955,'exs1024_state',[]}]]}]]}]}],
		%% Line 1061
		'opaque' =
		    %% Line 1061
		    [{'exro928_state',{'type',1061,'tuple',[{'type',1061,'list',[{'user_type',1061,'uint58',[]}]}|[{'type',1061,'list',[{'user_type',1061,'uint58',[]}]}]]},[]}],
		%% Line 1063
		'spec' =
		    %% Line 1063
		    [{{'exro928_seed',1},[{'type',1063,'fun',[{'type',1063,'product',[{'type',1064,'union',[{'type',1064,'list',[{'user_type',1064,'uint58',[]}]}|[{'type',1064,'integer',[]}|[{'type',1064,'tuple',[{'type',1064,'integer',[]}|[{'type',1064,'integer',[]}|[{'type',1064,'integer',[]}]]]}]]]}]}|[{'user_type',1065,'exro928_state',[]}]]}]}],
		%% Line 1080
		'spec' =
		    %% Line 1080
		    [{{'exro928ss_next',1},[{'type',1080,'fun',[{'type',1080,'product',[{'user_type',1080,'exro928_state',[]}]}|[{'type',1080,'tuple',[{'user_type',1080,'uint58',[]}|[{'user_type',1080,'exro928_state',[]}]]}]]}]}],
		%% Line 1098
		'spec' =
		    %% Line 1098
		    [{{'exro928_next',1},[{'type',1098,'fun',[{'type',1098,'product',[{'user_type',1098,'exro928_state',[]}]}|[{'type',1098,'tuple',[{'type',1098,'tuple',[{'user_type',1098,'uint58',[]}|[{'user_type',1098,'uint58',[]}]]}|[{'user_type',1098,'exro928_state',[]}]]}]]}]}],
		%% Line 1106
		'spec' =
		    %% Line 1106
		    [{{'exro928_next_state',1},[{'type',1106,'fun',[{'type',1106,'product',[{'user_type',1106,'exro928_state',[]}]}|[{'user_type',1106,'exro928_state',[]}]]}]}],
		%% Line 1135
		'spec' =
		    %% Line 1135
		    [{{'exro928_jump',1},[{'type',1135,'fun',[{'type',1135,'product',[{'type',1135,'tuple',[{'user_type',1135,'alg_handler',[]}|[{'user_type',1135,'exro928_state',[]}]]}]}|[{'type',1136,'tuple',[{'user_type',1136,'alg_handler',[]}|[{'user_type',1136,'exro928_state',[]}]]}]]}]}],
		%% Line 1140
		'spec' =
		    %% Line 1140
		    [{{'exro928_jump_2pow512',1},[{'type',1140,'fun',[{'type',1140,'product',[{'user_type',1140,'exro928_state',[]}]}|[{'user_type',1140,'exro928_state',[]}]]}]}],
		%% Line 1154
		'spec' =
		    %% Line 1154
		    [{{'exro928_jump_2pow20',1},[{'type',1154,'fun',[{'type',1154,'product',[{'user_type',1154,'exro928_state',[]}]}|[{'user_type',1154,'exro928_state',[]}]]}]}],
		%% Line 1233
		'opaque' =
		    %% Line 1233
		    [{'exrop_state',{'type',1233,'nonempty_improper_list',[{'user_type',1233,'uint58',[]}|[{'user_type',1233,'uint58',[]}]]},[]}],
		%% Line 1235
		'dialyzer' =
		    %% Line 1235
		    [{'no_improper_lists',{'exrop_seed',1}}],
		%% Line 1252
		'dialyzer' =
		    %% Line 1252
		    [{'no_improper_lists',{'exrop_next_s',2}}],
		%% Line 1265
		'dialyzer' =
		    %% Line 1265
		    [{'no_improper_lists',{'exrop_next',1}}],
		%% Line 1292
		'dialyzer' =
		    %% Line 1292
		    [{'no_improper_lists',{'exrop_jump',5}}],
		%% Line 1338
		'spec' =
		    %% Line 1338
		    [{{'seed58',2},[{'type',1338,'fun',[{'type',1338,'product',[{'type',1338,'non_neg_integer',[]}|[{'user_type',1338,'uint64',[]}]]}|[{'type',1338,'list',[{'user_type',1338,'uint58',[]}]}]]}]}],
		%% Line 1354
		'spec' =
		    %% Line 1354
		    [{{'seed64',2},[{'type',1354,'fun',[{'type',1354,'product',[{'type',1354,'non_neg_integer',[]}|[{'user_type',1354,'uint64',[]}]]}|[{'type',1354,'list',[{'user_type',1354,'uint64',[]}]}]]}]}]]
'uniform_range'/4 =
    %% Line 174
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Range,Alg = ~{'next':=Next,'bits':=Bits}~,R,V> when 'true' ->
	      let <WeakLowBits> =
		  call %% Line 175
		       'maps':%% Line 175
			      'get'
		      (%% Line 175
		       'weak_low_bits', %% Line 175
					Alg, %% Line 175
					     0)
	      in  let <Shift> =
		      call %% Line 177
			   'erlang':%% Line 177
				    '-'
			  (%% Line 177
			   Bits, %% Line 177
				 WeakLowBits)
		  in  let <_6> =
			  call %% Line 178
			       'erlang':%% Line 178
					'bsl'
			      (%% Line 178
			       1, %% Line 178
				  WeakLowBits)
		      in  let <_7> =
			      call %% Line 178
				   'erlang':%% Line 178
					    '-'
				  (_6, %% Line 178
				       1)
			  in  let <ShiftMask> =
				  call %% Line 178
				       'erlang':%% Line 178
						'bnot'
				      (_7)
			      in  let <RangeMinus1> =
				      call %% Line 179
					   'erlang':%% Line 179
						    '-'
					  (%% Line 179
					   Range, %% Line 179
						  1)
				  in  %% Line 180
				      case <> of
					%% Line 181
					<>
					    when try
						  let <_10> =
						      call 'erlang':'band'
							  (Range, RangeMinus1)
						  in  call 'erlang':'=:='
							  (_10, 0)
					      of <Try> ->
						  Try
					      catch <T,R> ->
						  'false' ->
					    let <_11> =
						call %% Line 185
						     'erlang':%% Line 185
							      'bsr'
						    (%% Line 185
						     Range, %% Line 185
							    Bits)
					    in  %% Line 183
						case %% Line 184
						     apply 'uniform_range'/7
							 (_11, %% Line 185
							       Next, %% Line 185
								     R, %% Line 185
									V, %% Line 185
									   ShiftMask, %% Line 185
										      Shift, %% Line 185
											     Bits) of
						  <{V1,R1,_28}> when 'true' ->
						      let <_13> =
							  call %% Line 186
							       'erlang':%% Line 186
									'band'
							      (%% Line 186
							       V1, %% Line 186
								   RangeMinus1)
						      in  let <_14> =
							      call %% Line 186
								   'erlang':%% Line 186
									    '+'
								  (_13, %% Line 186
									1)
							  in  %% Line 186
							      {_14,{Alg,R1}}
						  ( <_12> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_12})
						    -| ['compiler_generated'] )
						end
					%% Line 187
					<> when 'true' ->
					    let <_15> =
						call %% Line 202
						     'erlang':%% Line 202
							      '-'
						    (%% Line 202
						     Bits, %% Line 202
							   2)
					    in  let <_16> =
						    call %% Line 202
							 'erlang':%% Line 202
								  'bsr'
							(%% Line 202
							 Range, _15)
						in  %% Line 200
						    case %% Line 201
							 apply 'uniform_range'/7
							     (_16, %% Line 202
								   Next, %% Line 202
									 R, %% Line 202
									    V, %% Line 202
									       ShiftMask, %% Line 202
											  Shift, %% Line 202
												 Bits) of
						      <{V1,R1,B}> when 'true' ->
							  let <I> =
							      call %% Line 203
								   'erlang':%% Line 203
									    'rem'
								  (%% Line 203
								   V1, %% Line 203
								       Range)
							  in  %% Line 204
							      case <> of
								%% Line 205
								<>
								    when try
									  let <_21> =
									      call 'erlang':'-'
										  (V1, I)
									  in  let <_19> =
										  call 'erlang':'bsl'
										      (1, B)
									      in  let <_20> =
										      call 'erlang':'-'
											  (_19, Range)
										  in  call 'erlang':'=<'
											  (_21, _20)
								      of <Try> ->
									  Try
								      catch <T,R> ->
									  'false' ->
								    let <_22> =
									call %% Line 206
									     'erlang':%% Line 206
										      '+'
									    (%% Line 206
									     I, %% Line 206
										1)
								    in  %% Line 206
									{_22,{Alg,R1}}
								%% Line 207
								<> when 'true' ->
								    %% Line 210
								    case apply Next
									     (R1) of
								      <{V2,R2}> when 'true' ->
									  %% Line 211
									  apply 'uniform_range'/4
									      (Range, Alg, R2, V2)
								      ( <_23> when 'true' ->
									    primop 'match_fail'
										({'badmatch',_23})
									-| ['compiler_generated'] )
								    end
							      end
						      ( <_17> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_17})
							-| ['compiler_generated'] )
						    end
				      end
	  ( <_27,_26,_25,_24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_27,_26,_25,_24})
		  -| [{'function_name',{'uniform_range',4}}] )
	    -| ['compiler_generated'] )
	end
'uniform_range'/7 =
    %% Line 215
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	%% Line 216
	case <> of
	  %% Line 217
	  <>
	      when call 'erlang':'=<'
		    (_0,
		     1) ->
	      %% Line 218
	      {_3,_2,_6}
	  %% Line 219
	  <> when 'true' ->
	      %% Line 220
	      case apply _1
		       (_2) of
		<{V1,R1}> when 'true' ->
		    let <_12> =
			call %% Line 223
			     'erlang':%% Line 223
				      'bsr'
			    (_0, _5)
		    in  let <_9> =
			    call %% Line 224
				 'erlang':%% Line 224
					  'band'
				(_3, _4)
			in  let <_10> =
				call %% Line 224
				     'erlang':%% Line 224
					      'bsl'
				    (_9, _5)
			    in  let <_11> =
				    call %% Line 224
					 'erlang':%% Line 224
						  'bor'
					(_10, %% Line 224
					      V1)
				in  let <_8> =
					call %% Line 225
					     'erlang':%% Line 225
						      '+'
					    (_6, _5)
				    in  %% Line 222
					apply 'uniform_range'/7
					    (_12, _1, %% Line 223
						      R1, _11, _4, _5, _8)
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_7})
		  -| ['compiler_generated'] )
	      end
	end
'export_seed'/0 =
    %% Line 234
    fun () ->
	%% Line 235
	case call 'erlang':'get'
		 ('rand_seed') of
	  %% Line 236
	  <{~{'type':=Alg}~,Seed}> when 'true' ->
	      {Alg,Seed}
	  %% Line 237
	  <_1> when 'true' ->
	      'undefined'
	end
'export_seed_s'/1 =
    %% Line 241
    fun (_0) ->
	case _0 of
	  <{~{'type':=Alg}~,AlgState}> when 'true' ->
	      {Alg,AlgState}
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'export_seed_s',1}}] )
	    -| ['compiler_generated'] )
	end
'seed'/1 =
    %% Line 252
    fun (_0) ->
	let <_1> =
	    apply %% Line 253
		  'seed_s'/1
		(_0)
	in  %% Line 253
	    apply 'seed_put'/1
		(_1)
'seed_s'/1 =
    %% Line 258
    fun (_0) ->
	case _0 of
	  <State = {AlgHandler,_X_AlgState}>
	      when call 'erlang':'is_map'
		    (AlgHandler) ->
	      %% Line 259
	      State
	  %% Line 260
	  <{Alg,AlgState}>
	      when call 'erlang':'is_atom'
		    (Alg) ->
	      %% Line 261
	      case apply 'mk_alg'/1
		       (Alg) of
		<{AlgHandler,_X_SeedFun}> when 'true' ->
		    %% Line 262
		    {AlgHandler,AlgState}
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 263
	  <Alg> when 'true' ->
	      let <_5> =
		  call %% Line 264
		       'erlang':%% Line 264
				'node'
		      ()
	      in  let <_4> =
		      call %% Line 264
			   'erlang':%% Line 264
				    'self'
			  ()
		  in  let <_6> =
			  call %% Line 264
			       'erlang':%% Line 264
					'phash2'
			      (%% Line 264
			       [{_5,_4}|[]])
		      in  let <_3> =
			      call %% Line 265
				   'erlang':%% Line 265
					    'system_time'
				  ()
			  in  let <_2> =
				  call %% Line 266
				       'erlang':%% Line 266
						'unique_integer'
				      ()
			      in  %% Line 264
				  apply 'seed_s'/2
				      (Alg, {_6,_3,_2})
	end
'seed'/2 =
    %% Line 272
    fun (_0,_1) ->
	let <_2> =
	    apply %% Line 273
		  'seed_s'/2
		(_0, _1)
	in  %% Line 273
	    apply 'seed_put'/1
		(_2)
'seed_s'/2 =
    %% Line 276
    fun (_0,_1) ->
	%% Line 277
	case apply 'mk_alg'/1
		 (_0) of
	  <{AlgHandler,SeedFun}> when 'true' ->
	      let <AlgState> =
		  apply %% Line 278
			SeedFun
		      (_1)
	      in  %% Line 279
		  {AlgHandler,AlgState}
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_2})
	    -| ['compiler_generated'] )
	end
'uniform'/0 =
    %% Line 288
    fun () ->
	let <_0> =
	    apply %% Line 289
		  'seed_get'/0
		()
	in  %% Line 289
	    case apply 'uniform_s'/1
		     (_0) of
	      <{X,State}> when 'true' ->
		  do  %% Line 290
		      apply 'seed_put'/1
			  (State)
		      %% Line 291
		      X
	      ( <_1> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_1})
		-| ['compiler_generated'] )
	    end
'uniform'/1 =
    %% Line 298
    fun (_0) ->
	let <_1> =
	    apply %% Line 299
		  'seed_get'/0
		()
	in  %% Line 299
	    case apply 'uniform_s'/2
		     (_0, _1) of
	      <{X,State}> when 'true' ->
		  do  %% Line 300
		      apply 'seed_put'/1
			  (State)
		      %% Line 301
		      X
	      ( <_2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_2})
		-| ['compiler_generated'] )
	    end
'uniform_s'/1 =
    %% Line 308
    fun (_0) ->
	case _0 of
	  <State = {~{'uniform':=Uniform}~,_9}> when 'true' ->
	      %% Line 309
	      apply Uniform
		  (State)
	  %% Line 310
	  <{Alg = ~{'next':=Next,'bits':=Bits}~,R0}> when 'true' ->
	      %% Line 311
	      case apply Next
		       (R0) of
		<{V,R1}> when 'true' ->
		    let <_2> =
			call %% Line 313
			     'erlang':%% Line 313
				      '-'
			    (%% Line 313
			     Bits, %% Line 313
				   53)
		    in  let <_3> =
			    call %% Line 313
				 'erlang':%% Line 313
					  'bsr'
				(%% Line 313
				 V, _2)
			in  let <_4> =
				call %% Line 313
				     'erlang':%% Line 313
					      '*'
				    (_3, %% Line 313
					 1.11022302462515654042e-16)
			    in  %% Line 313
				{_4,{Alg,R1}}
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 314
	  <{Alg = ~{'max':=Max,'next':=Next}~,R0}> when 'true' ->
	      %% Line 315
	      case apply Next
		       (R0) of
		<{V,R1}> when 'true' ->
		    let <_6> =
			call %% Line 317
			     'erlang':%% Line 317
				      '+'
			    (%% Line 317
			     Max, %% Line 317
				  1)
		    in  let <_7> =
			    call %% Line 317
				 'erlang':%% Line 317
					  '/'
				(%% Line 317
				 V, _6)
			in  %% Line 317
			    {_7,{Alg,R1}}
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_5})
		  -| ['compiler_generated'] )
	      end
	  ( <_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8})
		  -| [{'function_name',{'uniform_s',1}}] )
	    -| ['compiler_generated'] )
	end
'uniform_s'/2 =
    %% Line 326
    fun (_0,_1) ->
	case <_0,_1> of
	  <N,State = {~{'uniform_n':=UniformN}~,_25}>
	      when let <_2> =
		    call %% Line 327
			 'erlang':%% Line 327
				  'is_integer'
			(%% Line 327
			 N)
		in  let <_3> =
			call %% Line 327
			     'erlang':%% Line 327
				      '=<'
			    (%% Line 327
			     1, %% Line 327
				N)
		    in  %% Line 327
			call 'erlang':'and'
			    (_2, _3) ->
	      %% Line 328
	      apply UniformN
		  (N, State)
	  %% Line 329
	  <N,{Alg = ~{'next':=Next,'bits':=Bits}~,R0}>
	      when let <_4> =
		    call %% Line 330
			 'erlang':%% Line 330
				  'is_integer'
			(%% Line 330
			 N)
		in  let <_5> =
			call %% Line 330
			     'erlang':%% Line 330
				      '=<'
			    (%% Line 330
			     1, %% Line 330
				N)
		    in  %% Line 330
			call 'erlang':'and'
			    (_4, _5) ->
	      %% Line 331
	      case apply Next
		       (R0) of
		<{V,R1}> when 'true' ->
		    let <_7> =
			call %% Line 332
			     'erlang':%% Line 332
				      'bsl'
			    (%% Line 332
			     1, %% Line 332
				Bits)
		    in  let <MaxMinusN> =
			    call %% Line 332
				 'erlang':%% Line 332
					  '-'
				(_7, %% Line 332
				     N)
			in  %% Line 333
			    case <> of
			      <>
				  when call 'erlang':'=<'
					(0,
					 MaxMinusN) ->
				  case <> of
				    <>
					when call 'erlang':'<'
					      (V,
					       N) ->
					let <_9> =
					    call 'erlang':'+'
						(V, 1)
					in  {_9,{Alg,R1}}
				    <> when 'true' ->
					let <I> =
					    call 'erlang':'rem'
						(V, N)
					in  case <> of
					      <>
						  when try
							let <_11> =
							    call 'erlang':'-'
								(V, I)
							in  call 'erlang':'=<'
								(_11, MaxMinusN)
						    of <Try> ->
							Try
						    catch <T,R> ->
							'false' ->
						  let <_12> =
						      call 'erlang':'+'
							  (I, 1)
						  in  {_12,{Alg,R1}}
					      <> when 'true' ->
						  apply 'uniform_s'/2
						      (N, {Alg,R1})
					    end
				  end
			      <> when 'true' ->
				  apply 'uniform_range'/4
				      (N, Alg, R1, V)
			    end
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 334
	  <N,{Alg = ~{'max':=Max,'next':=Next}~,R0}>
	      when let <_13> =
		    call %% Line 335
			 'erlang':%% Line 335
				  'is_integer'
			(%% Line 335
			 N)
		in  let <_14> =
			call %% Line 335
			     'erlang':%% Line 335
				      '=<'
			    (%% Line 335
			     1, %% Line 335
				N)
		    in  %% Line 335
			call 'erlang':'and'
			    (_13, _14) ->
	      %% Line 338
	      case apply Next
		       (R0) of
		<{V,R1}> when 'true' ->
		    %% Line 339
		    case <> of
		      %% Line 340
		      <>
			  when call 'erlang':'=<'
				(N,
				 Max) ->
			  let <_16> =
			      call %% Line 341
				   'erlang':%% Line 341
					    'rem'
				  (%% Line 341
				   V, %% Line 341
				      N)
			  in  let <_17> =
				  call %% Line 341
				       'erlang':%% Line 341
						'+'
				      (_16, %% Line 341
					    1)
			      in  %% Line 341
				  {_17,{Alg,R1}}
		      %% Line 342
		      <> when 'true' ->
			  let <_18> =
			      call %% Line 343
				   'erlang':%% Line 343
					    '+'
				  (%% Line 343
				   Max, %% Line 343
					1)
			  in  let <F> =
				  call %% Line 343
				       'erlang':%% Line 343
						'/'
				      (%% Line 343
				       V, _18)
			      in  let <_20> =
				      call %% Line 344
					   'erlang':%% Line 344
						    '*'
					  (%% Line 344
					   F, %% Line 344
					      N)
				  in  let <_21> =
					  call %% Line 344
					       'erlang':%% Line 344
							'trunc'
					      (_20)
				      in  let <_22> =
					      call %% Line 344
						   'erlang':%% Line 344
							    '+'
						  (_21, %% Line 344
							1)
					  in  %% Line 344
					      {_22,{Alg,R1}}
		    end
		( <_15> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_15})
		  -| ['compiler_generated'] )
	      end
	  ( <_24,_23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_24,_23})
		  -| [{'function_name',{'uniform_s',2}}] )
	    -| ['compiler_generated'] )
	end
'uniform_real'/0 =
    %% Line 351
    fun () ->
	let <_0> =
	    apply %% Line 352
		  'seed_get'/0
		()
	in  %% Line 352
	    case apply 'uniform_real_s'/1
		     (_0) of
	      <{X,Seed}> when 'true' ->
		  do  %% Line 353
		      apply 'seed_put'/1
			  (Seed)
		      %% Line 354
		      X
	      ( <_1> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_1})
		-| ['compiler_generated'] )
	    end
'uniform_real_s'/1 =
    %% Line 391
    fun (_0) ->
	case _0 of
	  <{Alg = ~{'next':=Next,'bits':=Bits}~,R0}> when 'true' ->
	      %% Line 398
	      case apply Next
		       (R0) of
		<{V1,R1}> when 'true' ->
		    let <_2> =
			call %% Line 399
			     'erlang':%% Line 399
				      '-'
			    (%% Line 399
			     Bits, %% Line 399
				   56)
		    in  let <M1> =
			    call %% Line 399
				 'erlang':%% Line 399
					  'bsr'
				(%% Line 399
				 V1, _2)
			in  %% Line 400
			    case <> of
			      %% Line 401
			      <>
				  when call 'erlang':'=<'
					(36028797018963968,
					 M1) ->
				  let <_7> =
				      call %% Line 403
					   'erlang':%% Line 403
						    'bsr'
					  (%% Line 403
					   M1, %% Line 403
					       3)
				  in  let <_8> =
					  call %% Line 403
					       'erlang':%% Line 403
							'*'
					      (_7, %% Line 403
						   1.11022302462515654042e-16)
				      in  %% Line 403
					  {_8,{Alg,R1}}
			      %% Line 404
			      <>
				  when call 'erlang':'=<'
					(18014398509481984,
					 M1) ->
				  let <_12> =
				      call %% Line 406
					   'erlang':%% Line 406
						    'bsr'
					  (%% Line 406
					   M1, %% Line 406
					       2)
				  in  let <_13> =
					  call %% Line 406
					       'erlang':%% Line 406
							'*'
					      (_12, %% Line 406
						    5.55111512312578270212e-17)
				      in  %% Line 406
					  {_13,{Alg,R1}}
			      %% Line 407
			      <>
				  when call 'erlang':'=<'
					(9007199254740992,
					 M1) ->
				  let <_17> =
				      call %% Line 409
					   'erlang':%% Line 409
						    'bsr'
					  (%% Line 409
					   M1, %% Line 409
					       1)
				  in  let <_18> =
					  call %% Line 409
					       'erlang':%% Line 409
							'*'
					      (_17, %% Line 409
						    2.77555756156289135106e-17)
				      in  %% Line 409
					  {_18,{Alg,R1}}
			      %% Line 410
			      <>
				  when call 'erlang':'=<'
					(4503599627370496,
					 M1) ->
				  let <_22> =
				      call %% Line 412
					   'erlang':%% Line 412
						    '*'
					  (%% Line 412
					   M1, %% Line 412
					       1.38777878078144567553e-17)
				  in  %% Line 412
				      {_22,{Alg,R1}}
			      %% Line 413
			      <> when 'true' ->
				  %% Line 415
				  case apply Next
					   (R1) of
				    <{V2,R2}> when 'true' ->
					%% Line 416
					apply 'uniform_real_s'/7
					    (Alg, Next, M1, -56, R2, V2, Bits)
				    ( <_23> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_23})
				      -| ['compiler_generated'] )
				  end
			    end
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 418
	  <{Alg = ~{'max':=_51,'next':=Next}~,R0}> when 'true' ->
	      %% Line 427
	      case apply Next
		       (R0) of
		<{V1,R1}> when 'true' ->
		    let <M1> =
			call %% Line 428
			     'erlang':%% Line 428
				      'band'
			    (%% Line 428
			     V1, %% Line 428
				 72057594037927935)
		    in  %% Line 429
			case <> of
			  %% Line 430
			  <>
			      when call 'erlang':'=<'
				    (36028797018963968,
				     M1) ->
			      let <_32> =
				  call %% Line 432
				       'erlang':%% Line 432
						'bsr'
				      (%% Line 432
				       M1, %% Line 432
					   3)
			      in  let <_33> =
				      call %% Line 432
					   'erlang':%% Line 432
						    '*'
					  (_32, %% Line 432
						1.11022302462515654042e-16)
				  in  %% Line 432
				      {_33,{Alg,R1}}
			  %% Line 433
			  <>
			      when call 'erlang':'=<'
				    (18014398509481984,
				     M1) ->
			      let <_37> =
				  call %% Line 435
				       'erlang':%% Line 435
						'bsr'
				      (%% Line 435
				       M1, %% Line 435
					   2)
			      in  let <_38> =
				      call %% Line 435
					   'erlang':%% Line 435
						    '*'
					  (_37, %% Line 435
						5.55111512312578270212e-17)
				  in  %% Line 435
				      {_38,{Alg,R1}}
			  %% Line 436
			  <>
			      when call 'erlang':'=<'
				    (9007199254740992,
				     M1) ->
			      let <_42> =
				  call %% Line 438
				       'erlang':%% Line 438
						'bsr'
				      (%% Line 438
				       M1, %% Line 438
					   1)
			      in  let <_43> =
				      call %% Line 438
					   'erlang':%% Line 438
						    '*'
					  (_42, %% Line 438
						2.77555756156289135106e-17)
				  in  %% Line 438
				      {_43,{Alg,R1}}
			  %% Line 439
			  <>
			      when call 'erlang':'=<'
				    (4503599627370496,
				     M1) ->
			      let <_47> =
				  call %% Line 441
				       'erlang':%% Line 441
						'*'
				      (%% Line 441
				       M1, %% Line 441
					   1.38777878078144567553e-17)
			      in  %% Line 441
				  {_47,{Alg,R1}}
			  %% Line 442
			  <> when 'true' ->
			      %% Line 444
			      case apply Next
				       (R1) of
				<{V2,R2}> when 'true' ->
				    %% Line 445
				    apply 'uniform_real_s'/7
					(Alg, Next, M1, -56, R2, V2, 56)
				( <_48> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_48})
				  -| ['compiler_generated'] )
			      end
			end
		( <_25> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_25})
		  -| ['compiler_generated'] )
	      end
	  ( <_50> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_50})
		  -| [{'function_name',{'uniform_real_s',1}}] )
	    -| ['compiler_generated'] )
	end
'uniform_real_s'/7 =
    %% Line 448
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <Alg,_X_Next,M0,-1064,R1,V1,Bits> when 'true' ->
	      let <_9> =
		  apply %% Line 455
			'bc'/3
		      (%% Line 455
		       M0, %% Line 455
			   2251799813685248, %% Line 455
					     52)
	      in  let <B0> =
		      call %% Line 455
			   'erlang':%% Line 455
				    '-'
			  (%% Line 455
			   53, _9)
		  in  let <_16> =
			  call %% Line 456
			       'erlang':%% Line 456
					'bsl'
			      (%% Line 456
			       M0, %% Line 456
				   B0)
		      in  let <_14> =
			      call %% Line 456
				   'erlang':%% Line 456
					    '-'
				  (%% Line 456
				   Bits, %% Line 456
					 B0)
			  in  let <_15> =
				  call %% Line 456
				       'erlang':%% Line 456
						'bsr'
				      (%% Line 456
				       V1, _14)
			      in  let <_17> =
				      call %% Line 456
					   'erlang':%% Line 456
						    'bor'
					  (_16, _15)
				  in  let <_12> =
					  call %% Line 456
					       'erlang':%% Line 456
							'-'
					      (%% Line 456
					       -1064, %% Line 456
						      B0)
				      in  let <_13> =
					      call %% Line 456
						   'math':%% Line 456
							  'pow'
						  (%% Line 456
						   2.00000000000000000000e+00, _12)
					  in  let <_18> =
						  call %% Line 456
						       'erlang':%% Line 456
								'*'
						      (_17, _13)
					      in  %% Line 456
						  {_18,%% Line 457
						       {Alg,R1}}
	  %% Line 458
	  <Alg,Next,M0,BitNo,R1,V1,Bits> when 'true' ->
	      %% Line 459
	      case <> of
		%% Line 462
		<>
		    when call 'erlang':'=<'
			  (2251799813685248,
			   M0) ->
		    let <_24> =
			call %% Line 464
			     'erlang':%% Line 464
				      'bsl'
			    (%% Line 464
			     M0, %% Line 464
				 1)
		    in  let <_22> =
			    call %% Line 464
				 'erlang':%% Line 464
					  '-'
				(%% Line 464
				 Bits, %% Line 464
				       1)
			in  let <_23> =
				call %% Line 464
				     'erlang':%% Line 464
					      'bsr'
				    (%% Line 464
				     V1, _22)
			    in  let <_25> =
				    call %% Line 464
					 'erlang':%% Line 464
						  'bor'
					(_24, _23)
				in  let <_20> =
					call %% Line 465
					     'erlang':%% Line 465
						      '-'
					    (%% Line 465
					     BitNo, %% Line 465
						    1)
				    in  let <_21> =
					    call %% Line 465
						 'math':%% Line 465
							'pow'
						(%% Line 465
						 2.00000000000000000000e+00, _20)
					in  let <_26> =
						call %% Line 465
						     'erlang':%% Line 465
							      '*'
						    (_25, _21)
					    in  %% Line 464
						{_26,%% Line 466
						     {Alg,R1}}
		%% Line 467
		<>
		    when call 'erlang':'=<'
			  (1125899906842624,
			   M0) ->
		    let <_32> =
			call %% Line 469
			     'erlang':%% Line 469
				      'bsl'
			    (%% Line 469
			     M0, %% Line 469
				 2)
		    in  let <_30> =
			    call %% Line 469
				 'erlang':%% Line 469
					  '-'
				(%% Line 469
				 Bits, %% Line 469
				       2)
			in  let <_31> =
				call %% Line 469
				     'erlang':%% Line 469
					      'bsr'
				    (%% Line 469
				     V1, _30)
			    in  let <_33> =
				    call %% Line 469
					 'erlang':%% Line 469
						  'bor'
					(_32, _31)
				in  let <_28> =
					call %% Line 470
					     'erlang':%% Line 470
						      '-'
					    (%% Line 470
					     BitNo, %% Line 470
						    2)
				    in  let <_29> =
					    call %% Line 470
						 'math':%% Line 470
							'pow'
						(%% Line 470
						 2.00000000000000000000e+00, _28)
					in  let <_34> =
						call %% Line 470
						     'erlang':%% Line 470
							      '*'
						    (_33, _29)
					    in  %% Line 469
						{_34,%% Line 471
						     {Alg,R1}}
		%% Line 472
		<>
		    when call 'erlang':'=<'
			  (562949953421312,
			   M0) ->
		    let <_40> =
			call %% Line 474
			     'erlang':%% Line 474
				      'bsl'
			    (%% Line 474
			     M0, %% Line 474
				 3)
		    in  let <_38> =
			    call %% Line 474
				 'erlang':%% Line 474
					  '-'
				(%% Line 474
				 Bits, %% Line 474
				       3)
			in  let <_39> =
				call %% Line 474
				     'erlang':%% Line 474
					      'bsr'
				    (%% Line 474
				     V1, _38)
			    in  let <_41> =
				    call %% Line 474
					 'erlang':%% Line 474
						  'bor'
					(_40, _39)
				in  let <_36> =
					call %% Line 475
					     'erlang':%% Line 475
						      '-'
					    (%% Line 475
					     BitNo, %% Line 475
						    3)
				    in  let <_37> =
					    call %% Line 475
						 'math':%% Line 475
							'pow'
						(%% Line 475
						 2.00000000000000000000e+00, _36)
					in  let <_42> =
						call %% Line 475
						     'erlang':%% Line 475
							      '*'
						    (_41, _37)
					    in  %% Line 474
						{_42,%% Line 476
						     {Alg,R1}}
		%% Line 477
		<>
		    when call 'erlang':'=='
			  (M0,
			   0) ->
		    let <_43> =
			call %% Line 478
			     'erlang':%% Line 478
				      '-'
			    (%% Line 478
			     Bits, %% Line 478
				   56)
		    in  let <M1> =
			    call %% Line 478
				 'erlang':%% Line 478
					  'bsr'
				(%% Line 478
				 V1, _43)
			in  %% Line 479
			    case <> of
			      %% Line 480
			      <>
				  when call 'erlang':'=<'
					(36028797018963968,
					 M1) ->
				  let <_48> =
				      call %% Line 482
					   'erlang':%% Line 482
						    'bsr'
					  (%% Line 482
					   M1, %% Line 482
					       3)
				  in  let <_46> =
					  call %% Line 482
					       'erlang':%% Line 482
							'-'
					      (%% Line 482
					       BitNo, %% Line 482
						      53)
				      in  let <_47> =
					      call %% Line 482
						   'math':%% Line 482
							  'pow'
						  (%% Line 482
						   2.00000000000000000000e+00, _46)
					  in  let <_49> =
						  call %% Line 482
						       'erlang':%% Line 482
								'*'
						      (_48, _47)
					      in  %% Line 482
						  {_49,{Alg,R1}}
			      %% Line 483
			      <>
				  when call 'erlang':'=<'
					(18014398509481984,
					 M1) ->
				  let <_53> =
				      call %% Line 485
					   'erlang':%% Line 485
						    'bsr'
					  (%% Line 485
					   M1, %% Line 485
					       2)
				  in  let <_51> =
					  call %% Line 485
					       'erlang':%% Line 485
							'-'
					      (%% Line 485
					       BitNo, %% Line 485
						      54)
				      in  let <_52> =
					      call %% Line 485
						   'math':%% Line 485
							  'pow'
						  (%% Line 485
						   2.00000000000000000000e+00, _51)
					  in  let <_54> =
						  call %% Line 485
						       'erlang':%% Line 485
								'*'
						      (_53, _52)
					      in  %% Line 485
						  {_54,{Alg,R1}}
			      %% Line 486
			      <>
				  when call 'erlang':'=<'
					(9007199254740992,
					 M1) ->
				  let <_58> =
				      call %% Line 488
					   'erlang':%% Line 488
						    'bsr'
					  (%% Line 488
					   M1, %% Line 488
					       1)
				  in  let <_56> =
					  call %% Line 488
					       'erlang':%% Line 488
							'-'
					      (%% Line 488
					       BitNo, %% Line 488
						      55)
				      in  let <_57> =
					      call %% Line 488
						   'math':%% Line 488
							  'pow'
						  (%% Line 488
						   2.00000000000000000000e+00, _56)
					  in  let <_59> =
						  call %% Line 488
						       'erlang':%% Line 488
								'*'
						      (_58, _57)
					      in  %% Line 488
						  {_59,{Alg,R1}}
			      %% Line 489
			      <>
				  when call 'erlang':'=<'
					(4503599627370496,
					 M1) ->
				  let <_61> =
				      call %% Line 491
					   'erlang':%% Line 491
						    '-'
					  (%% Line 491
					   BitNo, %% Line 491
						  56)
				  in  let <_62> =
					  call %% Line 491
					       'math':%% Line 491
						      'pow'
					      (%% Line 491
					       2.00000000000000000000e+00, _61)
				      in  let <_63> =
					      call %% Line 491
						   'erlang':%% Line 491
							    '*'
						  (%% Line 491
						   M1, _62)
					  in  %% Line 491
					      {_63,{Alg,R1}}
			      %% Line 492
			      <>
				  when call 'erlang':'=:='
					(BitNo,
					 -1008) ->
				  %% Line 497
				  case <> of
				    %% Line 498
				    <>
					when call 'erlang':'=<'
					      (4398046511104,
					       M1) ->
					let <_66> =
					    call %% Line 500
						 'erlang':%% Line 500
							  '-'
						(%% Line 500
						 BitNo, %% Line 500
							56)
					in  %% Line 500
					    apply 'uniform_real_s'/5
						(Alg, Next, M1, _66, R1)
				    %% Line 501
				    <> when 'true' ->
					%% Line 509
					apply 'uniform_real_s'/1
					    ({Alg,R1})
				  end
			      %% Line 511
			      <> when 'true' ->
				  let <_67> =
				      call %% Line 513
					   'erlang':%% Line 513
						    '-'
					  (%% Line 513
					   BitNo, %% Line 513
						  56)
				  in  %% Line 513
				      apply 'uniform_real_s'/5
					  (Alg, Next, M1, _67, R1)
			    end
		%% Line 515
		<> when 'true' ->
		    let <_70> =
			apply %% Line 517
			      'bc'/3
			    (%% Line 517
			     M0, %% Line 517
				 281474976710656, %% Line 517
						  49)
		    in  let <B0> =
			    call %% Line 517
				 'erlang':%% Line 517
					  '-'
				(%% Line 517
				 53, _70)
			in  let <_76> =
				call %% Line 518
				     'erlang':%% Line 518
					      'bsl'
				    (%% Line 518
				     M0, %% Line 518
					 B0)
			    in  let <_74> =
				    call %% Line 518
					 'erlang':%% Line 518
						  '-'
					(%% Line 518
					 Bits, %% Line 518
					       B0)
				in  let <_75> =
					call %% Line 518
					     'erlang':%% Line 518
						      'bsr'
					    (%% Line 518
					     V1, _74)
				    in  let <_77> =
					    call %% Line 518
						 'erlang':%% Line 518
							  'bor'
						(_76, _75)
					in  let <_72> =
						call %% Line 519
						     'erlang':%% Line 519
							      '-'
						    (%% Line 519
						     BitNo, %% Line 519
							    B0)
					    in  let <_73> =
						    call %% Line 519
							 'math':%% Line 519
								'pow'
							(%% Line 519
							 2.00000000000000000000e+00, _72)
						in  let <_78> =
							call %% Line 519
							     'erlang':%% Line 519
								      '*'
							    (_77, _73)
						    in  %% Line 518
							{_78,%% Line 520
							     {Alg,R1}}
	      end
	end
'uniform_real_s'/5 =
    %% Line 523
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <Alg = ~{'bits':=Bits}~,Next,M0,BitNo,R0> when 'true' ->
	      %% Line 524
	      case apply Next
		       (R0) of
		<{V1,R1}> when 'true' ->
		    %% Line 525
		    apply 'uniform_real_s'/7
			(Alg, Next, M0, BitNo, R1, V1, Bits)
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 526
	  <Alg = ~{'max':=_15}~,Next,M0,BitNo,R0> when 'true' ->
	      %% Line 527
	      case apply Next
		       (R0) of
		<{V1,R1}> when 'true' ->
		    let <_9> =
			call %% Line 528
			     'erlang':%% Line 528
				      'band'
			    (%% Line 528
			     V1, %% Line 528
				 72057594037927935)
		    in  %% Line 528
			apply 'uniform_real_s'/7
			    (Alg, Next, M0, BitNo, R1, _9, 56)
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_6})
		  -| ['compiler_generated'] )
	      end
	  ( <_14,_13,_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13,_12,_11,_10})
		  -| [{'function_name',{'uniform_real_s',5}}] )
	    -| ['compiler_generated'] )
	end
'jump'/1 =
    %% Line 536
    fun (_0) ->
	case _0 of
	  <State = {~{'jump':=Jump}~,_2}> when 'true' ->
	      %% Line 537
	      apply Jump
		  (State)
	  %% Line 538
	  <{~{}~,_3}> when 'true' ->
	      %% Line 539
	      call 'erlang':'error'
		  ('not_implemented')
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'jump',1}}] )
	    -| ['compiler_generated'] )
	end
'jump'/0 =
    %% Line 548
    fun () ->
	let <_0> =
	    apply %% Line 549
		  'seed_get'/0
		()
	in  let <_1> =
		apply %% Line 549
		      'jump'/1
		    (_0)
	    in  %% Line 549
		apply 'seed_put'/1
		    (_1)
'normal'/0 =
    %% Line 555
    fun () ->
	let <_0> =
	    apply %% Line 556
		  'seed_get'/0
		()
	in  %% Line 556
	    case apply 'normal_s'/1
		     (_0) of
	      <{X,Seed}> when 'true' ->
		  do  %% Line 557
		      apply 'seed_put'/1
			  (Seed)
		      %% Line 558
		      X
	      ( <_1> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_1})
		-| ['compiler_generated'] )
	    end
'normal'/2 =
    %% Line 564
    fun (_0,_1) ->
	let <_3> =
	    call %% Line 565
		 'math':%% Line 565
			'sqrt'
		(_1)
	in  let <_2> =
		apply %% Line 565
		      'normal'/0
		    ()
	    in  let <_4> =
		    call %% Line 565
			 'erlang':%% Line 565
				  '*'
			(_3, _2)
		in  %% Line 565
		    call 'erlang':'+'
			(_0, _4)
'normal_s'/1 =
    %% Line 572
    fun (_0) ->
	%% Line 573
	case %% Line 1450
	     ( case _0 of
		 ( <( {( Alg = ( ~{( ( 'next'
				       -| ['compiler_generated'] ):=Next
				    -| ['compiler_generated'] ),( ( 'bits'
								     -| ['compiler_generated'] ):=Bits
								  -| ['compiler_generated'] )}~
				 -| ['compiler_generated'] )
			 -| ['compiler_generated'] ),S0}
		      -| ['compiler_generated'] )> when ( 'true'
							  -| ['compiler_generated'] ) ->
		       %% Line 1452
		       ( case ( apply Next
				    (S0)
				-| ['compiler_generated'] ) of
			   ( <( {Int,S1}
				-| ['compiler_generated'] )> when ( 'true'
								    -| ['compiler_generated'] ) ->
				 ( let <_4> =
				       call %% Line 1453
					    ( 'erlang'
					      -| ['compiler_generated'] ):%% Line 1453
									  ( '-'
									    -| ['compiler_generated'] )
					   (%% Line 1453
					    Bits, %% Line 1453
						  ( 51
						    -| ['compiler_generated'] ))
				   in  ( let <_5> =
					     call %% Line 1453
						  ( 'erlang'
						    -| ['compiler_generated'] ):%% Line 1453
										( '-'
										  -| ['compiler_generated'] )
						 (_4, %% Line 1453
						      ( 1
							-| ['compiler_generated'] ))
					 in  ( let <_6> =
						   call %% Line 1453
							( 'erlang'
							  -| ['compiler_generated'] ):%% Line 1453
										      ( 'bsl'
											-| ['compiler_generated'] )
						       (%% Line 1453
							( 1
							  -| ['compiler_generated'] ), _5)
					       in  ( let <_7> =
							 call %% Line 1453
							      ( 'erlang'
								-| ['compiler_generated'] ):%% Line 1453
											    ( 'band'
											      -| ['compiler_generated'] )
							     (_6, %% Line 1453
								  Int)
						     in  ( let <_2> =
							       call %% Line 1453
								    ( 'erlang'
								      -| ['compiler_generated'] ):%% Line 1453
												  ( '-'
												    -| ['compiler_generated'] )
								   (%% Line 1453
								    Bits, %% Line 1453
									  ( 51
									    -| ['compiler_generated'] ))
							   in  ( let <_3> =
								     call %% Line 1453
									  ( 'erlang'
									    -| ['compiler_generated'] ):%% Line 1453
													( 'bsr'
													  -| ['compiler_generated'] )
									 (%% Line 1453
									  Int, _2)
								 in  %% Line 1453
								     ( {_7,_3,( {Alg,S1}
										-| ['compiler_generated'] )}
								       -| ['compiler_generated'] )
								 -| ['compiler_generated'] )
							   -| ['compiler_generated'] )
						     -| ['compiler_generated'] )
					       -| ['compiler_generated'] )
					 -| ['compiler_generated'] )
				   -| ['compiler_generated'] )
			     -| ['compiler_generated'] )
			   ( <_1> when ( 'true'
					 -| ['compiler_generated'] ) ->
				 ( primop ( 'match_fail'
					    -| ['compiler_generated'] )
				       (( {( 'badmatch'
					     -| ['compiler_generated'] ),_1}
					  -| ['compiler_generated'] ))
				   -| ['compiler_generated'] )
			     -| ['compiler_generated'] )
			 end
			 -| ['compiler_generated'] )
		   -| ['compiler_generated'] )
		 %% Line 1454
		 ( <( {( Alg = ( ~{( ( 'next'
				       -| ['compiler_generated'] ):=Next
				    -| ['compiler_generated'] )}~
				 -| ['compiler_generated'] )
			 -| ['compiler_generated'] ),S0}
		      -| ['compiler_generated'] )> when ( 'true'
							  -| ['compiler_generated'] ) ->
		       %% Line 1455
		       ( case ( apply Next
				    (S0)
				-| ['compiler_generated'] ) of
			   ( <( {Int,S1}
				-| ['compiler_generated'] )> when ( 'true'
								    -| ['compiler_generated'] ) ->
				 ( let <_13> =
				       call %% Line 1456
					    ( 'erlang'
					      -| ['compiler_generated'] ):%% Line 1456
									  ( 'band'
									    -| ['compiler_generated'] )
					   (%% Line 1456
					    ( 2251799813685248
					      -| ['compiler_generated'] ), %% Line 1456
									   Int)
				   in  ( let <_11> =
					     call %% Line 1456
						  ( 'erlang'
						    -| ['compiler_generated'] ):%% Line 1456
										( 'band'
										  -| ['compiler_generated'] )
						 (%% Line 1456
						  Int, %% Line 1456
						       ( 2251799813685247
							 -| ['compiler_generated'] ))
					 in  %% Line 1456
					     ( {_13,_11,( {Alg,S1}
							  -| ['compiler_generated'] )}
					       -| ['compiler_generated'] )
					 -| ['compiler_generated'] )
				   -| ['compiler_generated'] )
			     -| ['compiler_generated'] )
			   ( <_8> when ( 'true'
					 -| ['compiler_generated'] ) ->
				 ( primop ( 'match_fail'
					    -| ['compiler_generated'] )
				       (( {( 'badmatch'
					     -| ['compiler_generated'] ),_8}
					  -| ['compiler_generated'] ))
				   -| ['compiler_generated'] )
			     -| ['compiler_generated'] )
			 end
			 -| ['compiler_generated'] )
		   -| ['compiler_generated'] )
		 ( <_14> when ( 'true'
				-| ['compiler_generated'] ) ->
		       ( primop ( 'match_fail'
				  -| ['compiler_generated'] )
			     (( {( 'function_clause'
				   -| ['compiler_generated'] ),_14}
				-| ['compiler_generated'] ))
			 -| ['compiler_generated'] )
		   -| ['compiler_generated'] )
	       end
	       -| ['compiler_generated'] ) of
	  <{Sign,R,State}> when 'true' ->
	      let <Idx> =
		  call %% Line 574
		       'erlang':%% Line 574
				'band'
		      (%% Line 574
		       R, %% Line 574
			  255)
	      in  let <Idx1> =
		      call %% Line 575
			   'erlang':%% Line 575
				    '+'
			  (%% Line 575
			   Idx, %% Line 575
				1)
		  in  %% Line 576
		      case %% Line 1483
			   ( call ( 'erlang'
				    -| ['compiler_generated'] ):( 'element'
								  -| ['compiler_generated'] )
				 (Idx1, %% Line 1484
					( {{2104047571236786,1.73672541216026300829e-15},{0,9.55866035145563388593e-17},{1693657211986787,1.27087048348106232125e-16},{1919380038271141,1.49097409624954739056e-16},{2015384402196343,1.66587336315862684825e-16},{2068365869448128,1.81361208101190286598e-16},{2101878624052573,1.94297201531355877741e-16},{2124958784102998,2.05895006284820926559e-16},{2141808670795147,2.16468605768954222017e-16},{2154644611568301,2.26229403922181158232e-16},{2164744887587275,2.35327189140458915861e-16},{2172897953696594,2.43872345574287710295e-16},{2179616279372365,2.51948798292742250158e-16},{2185247251868649,2.59621997725281025263e-16},{2190034623107822,2.66944074736482849525e-16},{2194154434521197,2.73957296851424460024e-16},{2197736978774660,2.80696460024848035749e-16},{2200880740891961,2.87190589041139304275e-16},{2203661538010620,2.93464174847288832596e-16},{2206138681109102,2.99538093367821129281e-16},{2208359231806599,3.05430300071924403235e-16},{2210361007258210,3.11156363389215722701e-16},{2212174742388539,3.16729880185818151712e-16},{2213825672704646,3.22162803505499051688e-16},{2215334711002614,3.27465704079397507757e-16},{2216719334487595,3.32647981168417099987e-16},{2217994262139172,3.37718034173532322460e-16},{2219171977965032,3.42683403531193559494e-16},{2220263139538712,3.47550887317297581051e-16},{2221276900117330,3.52326638460020314094e-16},{2222221164932930,3.57016246339534940285e-16},{2223102796829069,3.61624805715983390475e-16},{2223927782546658,3.66156975296535397983e-16},{2224701368170060,3.70617027772360773203e-16},{2225428170204312,3.75008892787477978824e-16},{2226112267248242,3.79336194015495537551e-16},{2226757276105256,3.83602281296772790489e-16},{2227366415328399,3.87810258612502468569e-16},{2227942558554684,3.91963008532576783898e-16},{2228488279492521,3.96063213662563775295e-16},{2229005890047222,4.00113375525466896220e-16},{2229497472775193,4.04115831241433324136e-16},{2229964908627060,4.08072768309604483145e-16},{2230409900758597,4.11986237748074422111e-16},{2230833995044585,4.15858165808280641140e-16},{2231238597816133,4.19690364447407329203e-16},{2231624991250191,4.23484540715207084057e-16},{2231994346765928,4.27242305188997608562e-16},{2232347736722750,4.30965179571629408372e-16},{2232686144665934,4.34654603551287596498e-16},{2233010474325959,4.38311941008545712860e-16},{2233321557544881,4.41938485644706647812e-16},{2233620161276071,4.45535466095791365718e-16},{2233906993781271,4.49104050588287499193e-16},{2234182710130335,4.52645351185713967562e-16},{2234447917093496,4.56160427669003807995e-16},{2234703177503020,4.59650291088494072552e-16},{2234949014150181,4.63115907020816468447e-16},{2235185913274316,4.66558198560087516686e-16},{2235414327692884,4.69978049069419496306e-16},{2235634679614920,4.73376304715832370759e-16},{2235847363174595,4.76753776809085264392e-16},{2236052746716837,4.80111243962701550521e-16},{2236251174862869,4.83449454093500800172e-16},{2236442970379967,4.86769126274220868624e-16},{2236628435876762,4.90070952452299375578e-16},{2236807855342765,4.93355599046541390746e-16},{2236981495548562,4.96623708432217831361e-16},{2237149607321147,4.99875900324090879179e-16},{2237312426707209,5.03112773065931868701e-16},{2237470176035652,5.06334904834271949789e-16},{2237623064889403,5.09542854763389229036e-16},{2237771290995388,5.12737163997879663320e-16},{2237915041040597,5.15918356678573644216e-16},{2238054491421305,5.19086940867034337507e-16},{2238189808931712,5.22243409413404174016e-16},{2238321151397660,5.25388240771945425068e-16},{2238448668260432,5.28521899768238198395e-16},{2238572501115169,5.31644838321661755014e-16},{2238692784207942,5.34757496126472954545e-16},{2238809644895133,5.37860301294523479377e-16},{2238923204068402,5.40953670962399333412e-16},{2239033576548190,5.44038011865546709133e-16},{2239140871448443,5.47113720881736113194e-16},{2239245192514958,5.50181185546033624966e-16},{2239346638439541,5.53240784539278360189e-16},{2239445303151952,5.56292888151909017422e-16},{2239541276091442,5.59337858724846207834e-16},{2239634642459498,5.62376051069004345873e-16},{2239725483455293,5.65407812864896043333e-16},{2239813876495186,5.68433485043681410254e-16},{2239899895417494,5.71453402150920397185e-16},{2239983610673676,5.74467892694196087369e-16},{2240065089506935,5.77477279475696482238e-16},{2240144396119183,5.80481879910768565067e-16},{2240221591827230,5.83482006333389205125e-16},{2240296735208969,5.86477966289436525146e-16},{2240369882240293,5.89470062818587176437e-16},{2240441086423386,5.92458594725613394191e-16},{2240510398907004,5.95443856841805979446e-16},{2240577868599305,5.98426140277202811378e-16},{2240643542273726,6.01405732664266403201e-16},{2240707464668391,6.04382918393612501158e-16},{2240769678579486,6.07357978842360566070e-16},{2240830224948980,6.10331192595643943370e-16},{2240889142947082,6.13302835661791100703e-16},{2240946470049769,6.16273181681659631279e-16},{2241002242111691,6.19242502132584703827e-16},{2241056493434746,6.22211066527378790876e-16},{2241109256832602,6.25179142608799982782e-16},{2241160563691400,6.28146996539889530228e-16},{2241210444026879,6.31114893090560423885e-16},{2241258926538122,6.34083095820806000914e-16},{2241306038658137,6.37051867260881494958e-16},{2241351806601435,6.40021469088802472988e-16},{2241396255408788,6.42992162305489607018e-16},{2241439408989313,6.45964207407883213683e-16},{2241481290160038,6.48937864560339654762e-16},{2241521920683062,6.51913393764615873896e-16},{2241561321300462,6.54891055028741540820e-16},{2241599511767028,6.57871108535074132917e-16},{2241636510880960,6.60853814807825874393e-16},{2241672336512612,6.63839434880350565911e-16},{2241707005631362,6.66828230462474590443e-16},{2241740534330713,6.69820464108155789432e-16},{2241772937851689,6.72816399383753114503e-16},{2241804230604585,6.75816301037190058595e-16},{2241834426189161,6.78820435168298025779e-16},{2241863537413311,6.81829069400625404640e-16},{2241891576310281,6.84842473055003829332e-16},{2241918554154466,6.87860917325166366447e-16},{2241944481475843,6.90884675455716901816e-16},{2241969368073071,6.93914022922756903880e-16},{2241993223025298,6.96949237617482938615e-16},{2242016054702685,6.99990600033076396841e-16},{2242037870775710,7.03038393455215079165e-16},{2242058678223225,7.06092904156548215323e-16},{2242078483339331,7.09154421595487341536e-16},{2242097291739040,7.12223238619677884046e-16},{2242115108362774,7.15299651674530299286e-16},{2242131937479672,7.18383961017206285811e-16},{2242147782689725,7.21476470936470670108e-16},{2242162646924736,7.24577489978838698238e-16},{2242176532448092,7.27687331181469271523e-16},{2242189440853337,7.30806312312274287356e-16},{2242201373061537,7.33934756117740475864e-16},{2242212329317416,7.37072990578983098735e-16},{2242222309184237,7.40221349176579965727e-16},{2242231311537397,7.43380171164764792799e-16},{2242239334556717,7.46549801855588902443e-16},{2242246375717369,7.49730592913697934980e-16},{2242252431779415,7.52922902662405836870e-16},{2242257498775893,7.56127096401792173910e-16},{2242261571999416,7.59343546739588950455e-16},{2242264645987196,7.62572633935675575083e-16},{2242266714504453,7.65814746261048733621e-16},{2242267770526109,7.69070280372191911716e-16},{2242267806216711,7.72339641701829854238e-16},{2242266812908462,7.75623244867117442328e-16},{2242264781077289,7.78921514096385241347e-16},{2242261700316818,7.82234883675641084120e-16},{2242257559310145,7.85563798416108405147e-16},{2242252345799276,7.88908714144175521500e-16},{2242246046552082,7.92270098215227085966e-16},{2242238647326615,7.95648430052936617556e-16},{2242230132832625,7.99044201715713004887e-16},{2242220486690076,8.02457918492125913510e-16},{2242209691384458,8.05890099527265683393e-16},{2242197728218684,8.09341278482150088838e-16},{2242184577261310,8.12812004228450077447e-16},{2242170217290819,8.16302841580987746960e-16},{2242154625735679,8.19814372070653286895e-16},{2242137778609839,8.23347194760605041733e-16},{2242119650443327,8.26901927108847002541e-16},{2242100214207556,8.30479205880537371959e-16},{2242079441234906,8.34079688113662879173e-16},{2242057301132135,8.37704052142022163322e-16},{2242033761687079,8.41352998679802824740e-16},{2242008788768107,8.45027251972409677425e-16},{2241982346215682,8.48727561018615493666e-16},{2241954395725356,8.52454700869559619833e-16},{2241924896721443,8.56209474010623332794e-16},{2241893806220517,8.59992711832766460322e-16},{2241861078683830,8.63805276200525889234e-16},{2241826665857598,8.67648061124558160821e-16},{2241790516600041,8.71521994547369801105e-16},{2241752576693881,8.75428040251717494016e-16},{2241712788642916,8.79367199902104274846e-16},{2241671091451078,8.83340515230840795477e-16},{2241627420382235,8.87349070381313453209e-16},{2241581706698773,8.91393994422408613348e-16},{2241533877376767,8.95476464049506774624e-16},{2241483854795281,8.99597706489109936019e-16},{2241431556397035,9.03759002626011752555e-16},{2241376894317345,9.07961690374006801893e-16},{2241319774977817,9.12207168313484609982e-16},{2241260098640860,9.16496899621913531320e-16},{2241197758920538,9.20832416326230760072e-16},{2241132642244704,9.25215323909569332723e-16},{2241064627262652,9.29647306308641672775e-16},{2240993584191742,9.34130131342526512592e-16},{2240919374095536,9.38665656618665978610e-16},{2240841848084890,9.43255835967670653963e-16},{2240760846432232,9.47902726465173824760e-16},{2240676197587784,9.52608496106627869756e-16},{2240587717084782,9.57375432209744962925e-16},{2240495206318753,9.62205950629483835507e-16},{2240398451183567,9.67102605882305424755e-16},{2240297220544165,9.72068102290162588019e-16},{2240191264522612,9.77105306270720883776e-16},{2240080312570155,9.82217259919054108939e-16},{2239964071293331,9.87407196048067106672e-16},{2239842221996530,9.92678554880797648454e-16},{2239714417896699,9.98035002618364491509e-16},{2239580280957725,1.00348045214361808924e-15},{2239439398282193,1.00901908616374569449e-15},{2239291317986196,1.01465538314670861133e-15},{2239135544468203,1.02039414646831236830e-15},{2238971532964979,1.02624053726135674640e-15},{2238798683265269,1.03220011154864564914e-15},{2238616332424351,1.03827886235153991696e-15},{2238423746288095,1.04448326760004705473e-15},{2238220109591890,1.05082034483551946539e-15},{2238004514345216,1.05729771390098902296e-15},{2237775946143212,1.06392366906768007507e-15},{2237533267957822,1.07070726236329937629e-15},{2237275200846753,1.07765840026681064032e-15},{2237000300869952,1.08478795644034246815e-15},{2236706931309099,1.09210790381495627955e-15},{2236393229029147,1.09963147017856282141e-15},{2236057063479501,1.10737332249357520075e-15},{2235695986373246,1.11534978658531549289e-15},{2235307169458859,1.12357911071108333166e-15},{2234887326941578,1.13208178401648463069e-15},{2234432617919447,1.14088092425827801405e-15},{2233938522519765,1.15000275378397924458e-15},{2233399683022677,1.15947718914491892724e-15},{2232809697779198,1.16933857869109599762e-15},{2232160850599817,1.17962663529558008258e-15},{2231443750584641,1.19038762992828902828e-15},{2230646845562170,1.20167593925438186168e-15},{2229755753817986,1.21355608186668970279e-15},{2228752329126533,1.22610544174505612103e-15},{2227613325162504,1.23941797891632511077e-15},{2226308442121174,1.25360939266025668161e-15},{2224797391720399,1.26882448142550100004e-15},{2223025347823832,1.28524793190961088468e-15},{2220915633329809,1.30312066346899851655e-15},{2218357446087030,1.32276557701953263307e-15},{2215184158448668,1.34463009250111712861e-15},{2211132412537369,1.36936068351285175171e-15},{2205758503851065,1.39794366727752399083e-15},{2198248265654987,1.43199898696613284312e-15},{2186916352102141,1.47448486035975958423e-15},{2167562552481814,1.53178727416111435375e-15},{2125549880839716,1.62276986753129683713e-15}}
					  -| ['compiler_generated'] ))
			     -| ['compiler_generated'] ) of
			<{Ki,Wi}> when 'true' ->
			    let <X> =
				call %% Line 577
				     'erlang':%% Line 577
					      '*'
				    (%% Line 577
				     R, %% Line 577
					Wi)
			    in  %% Line 578
				case call 'erlang':'<'
					 (R, Ki) of
				  %% Line 580
				  <'true'>
				      when call 'erlang':'=:='
					    (Sign,
					     0) ->
				      {X,State}
				  %% Line 581
				  <'true'> when 'true' ->
				      let <_8> =
					  call 'erlang':'-'
					      (X)
				      in  {_8,State}
				  %% Line 583
				  <'false'>
				      when call 'erlang':'=:='
					    (Sign,
					     0) ->
				      apply 'normal_s'/4
					  (Idx, Sign, X, State)
				  %% Line 584
				  <'false'> when 'true' ->
				      let <_9> =
					  call 'erlang':'-'
					      (X)
				      in  apply 'normal_s'/4
					      (Idx, Sign, _9, State)
				  ( <_10> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_10})
				    -| ['compiler_generated'] )
				end
			( <_6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_6})
			  -| ['compiler_generated'] )
		      end
	  ( <_1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_1})
	    -| ['compiler_generated'] )
	end
'normal_s'/3 =
    %% Line 590
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Mean,Variance,State0>
	      when call 'erlang':'>'
		    (Variance,
		     0) ->
	      %% Line 591
	      case apply 'normal_s'/1
		       (State0) of
		<{X,State}> when 'true' ->
		    let <_4> =
			call %% Line 592
			     'math':%% Line 592
				    'sqrt'
			    (%% Line 592
			     Variance)
		    in  let <_5> =
			    call %% Line 592
				 'erlang':%% Line 592
					  '*'
				(_4, %% Line 592
				     X)
			in  let <_6> =
				call %% Line 592
				     'erlang':%% Line 592
					      '+'
				    (%% Line 592
				     Mean, _5)
			    in  %% Line 592
				{_6,State}
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  ( <_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7})
		  -| [{'function_name',{'normal_s',3}}] )
	    -| ['compiler_generated'] )
	end
'seed_put'/1 =
    %% Line 598
    fun (_0) ->
	do  %% Line 599
	    call 'erlang':'put'
		('rand_seed', _0)
	    _0
'seed_get'/0 =
    %% Line 602
    fun () ->
	%% Line 603
	case call 'erlang':'get'
		 ('rand_seed') of
	  %% Line 604
	  <'undefined'> when 'true' ->
	      apply 'seed'/1
		  ('exsss')
	  %% Line 605
	  <Old> when 'true' ->
	      Old
	end
'mk_alg'/1 =
    %% Line 609
    fun (_0) ->
	case _0 of
	  <'exs64'> when 'true' ->
	      let <_4> = 'exs64_next'/1
	      in  let <_5> =
		      ~{%% Line 610
		       'next'=>_4|%% Line 610
		       ~{'max'=>18446744073709551615,'type'=>'exs64'}~}~
		  in  let <_1> = 'exs64_seed'/1
		      in  %% Line 610
			  {_5,_1}
	  %% Line 612
	  <'exsplus'> when 'true' ->
	      let <_9> = 'exsplus_next'/1
	      in  let <_10> = 'exsplus_jump'/1
		  in  let <_11> =
			  ~{%% Line 613
			   'next'=>_9,%% Line 614
				      'jump'=>_10|%% Line 613
			   ~{'max'=>288230376151711743,'type'=>'exsplus'}~}~
		      in  let <_6> = 'exsplus_seed'/1
			  in  %% Line 613
			      {_11,_6}
	  %% Line 616
	  <'exsp'> when 'true' ->
	      let <_13> = 'exsplus_next'/1
	      in  let <_14> = 'exsp_uniform'/1
		  in  let <_15> = 'exsp_uniform'/2
		      in  let <_16> = 'exsplus_jump'/1
			  in  let <_17> =
				  ~{%% Line 617
				   'next'=>_13,%% Line 618
					       'uniform'=>_14,%% Line 618
							      'uniform_n'=>_15,%% Line 619
									       'jump'=>_16|%% Line 617
				   ~{'bits'=>58,'type'=>'exsp','weak_low_bits'=>1}~}~
			      in  let <_12> = 'exsplus_seed'/1
				  in  %% Line 617
				      {_17,_12}
	  %% Line 621
	  <'exsss'> when 'true' ->
	      let <_19> = 'exsss_next'/1
	      in  let <_20> = 'exsss_uniform'/1
		  in  let <_21> = 'exsss_uniform'/2
		      in  let <_22> = 'exsplus_jump'/1
			  in  let <_23> =
				  ~{%% Line 622
				   'next'=>_19,%% Line 623
					       'uniform'=>_20,%% Line 623
							      'uniform_n'=>_21,%% Line 624
									       'jump'=>_22|%% Line 622
				   ~{'bits'=>58,'type'=>'exsss'}~}~
			      in  let <_18> = 'exsss_seed'/1
				  in  %% Line 622
				      {_23,_18}
	  %% Line 626
	  <'exs1024'> when 'true' ->
	      let <_27> = 'exs1024_next'/1
	      in  let <_28> = 'exs1024_jump'/1
		  in  let <_29> =
			  ~{%% Line 627
			   'next'=>_27,%% Line 628
				       'jump'=>_28|%% Line 627
			   ~{'max'=>18446744073709551615,'type'=>'exs1024'}~}~
		      in  let <_24> = 'exs1024_seed'/1
			  in  %% Line 627
			      {_29,_24}
	  %% Line 630
	  <'exs1024s'> when 'true' ->
	      let <_31> = 'exs1024_next'/1
	      in  let <_32> = 'exs1024_jump'/1
		  in  let <_33> =
			  ~{%% Line 631
			   'next'=>_31,%% Line 632
				       'jump'=>_32|%% Line 631
			   ~{'bits'=>64,'type'=>'exs1024s','weak_low_bits'=>3}~}~
		      in  let <_30> = 'exs1024_seed'/1
			  in  %% Line 631
			      {_33,_30}
	  %% Line 634
	  <'exrop'> when 'true' ->
	      let <_35> = 'exrop_next'/1
	      in  let <_36> = 'exrop_uniform'/1
		  in  let <_37> = 'exrop_uniform'/2
		      in  let <_38> = 'exrop_jump'/1
			  in  let <_39> =
				  ~{%% Line 635
				   'next'=>_35,%% Line 636
					       'uniform'=>_36,%% Line 636
							      'uniform_n'=>_37,%% Line 637
									       'jump'=>_38|%% Line 635
				   ~{'bits'=>58,'type'=>'exrop','weak_low_bits'=>1}~}~
			      in  let <_34> = 'exrop_seed'/1
				  in  %% Line 635
				      {_39,_34}
	  %% Line 639
	  <'exro928ss'> when 'true' ->
	      let <_41> = 'exro928ss_next'/1
	      in  let <_42> = 'exro928ss_uniform'/1
		  in  let <_43> = 'exro928ss_uniform'/2
		      in  let <_44> = 'exro928_jump'/1
			  in  let <_45> =
				  ~{%% Line 640
				   'next'=>_41,%% Line 641
					       'uniform'=>_42,%% Line 642
							      'uniform_n'=>_43,%% Line 643
									       'jump'=>_44|%% Line 640
				   ~{'bits'=>58,'type'=>'exro928ss'}~}~
			      in  let <_40> = 'exro928_seed'/1
				  in  %% Line 640
				      {_45,_40}
	  ( <_46> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_46})
		  -| [{'function_name',{'mk_alg',1}}] )
	    -| ['compiler_generated'] )
	end
'exs64_seed'/1 =
    %% Line 654
    fun (_0) ->
	case _0 of
	  <L>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 655
	      case apply 'seed64_nz'/2
		       (1, L) of
		<[R|[]]> when 'true' ->
		    %% Line 656
		    R
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 657
	  <A>
	      when call 'erlang':'is_integer'
		    (_0) ->
	      let <_4> =
		  call %% Line 658
		       'erlang':%% Line 658
				'band'
		      (%% Line 658
		       A, %% Line 658
			  18446744073709551615)
	      in  %% Line 658
		  case apply 'seed64'/2
			   (1, _4) of
		    <[R|[]]> when 'true' ->
			%% Line 659
			R
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 662
	  <{A1,A2,A3}> when 'true' ->
	      let <_8> =
		  call %% Line 663
		       'erlang':%% Line 663
				'band'
		      (%% Line 663
		       A1, %% Line 663
			   4294967295)
	      in  let <_9> =
		      call %% Line 663
			   'erlang':%% Line 663
				    '*'
			  (_8, %% Line 663
			       4294967197)
		  in  let <_10> =
			  call %% Line 663
			       'erlang':%% Line 663
					'+'
			      (_9, %% Line 663
				   1)
		      in  ( let <_1> =
				call %% Line 671
				     ( 'erlang'
				       -| ['compiler_generated'] ):%% Line 671
								   ( 'bsr'
								     -| ['compiler_generated'] )
				    (_10, %% Line 671
					  ( 12
					    -| ['compiler_generated'] ))
			    in  ( let <R1> =
				      call %% Line 671
					   ( 'erlang'
					     -| ['compiler_generated'] ):%% Line 671
									 ( 'bxor'
									   -| ['compiler_generated'] )
					  (_10, _1)
				  in  ( let <_35> =
					    call %% Line 672
						 ( 'erlang'
						   -| ['compiler_generated'] ):%% Line 672
									       ( 'band'
										 -| ['compiler_generated'] )
						(%% Line 672
						 R1, %% Line 672
						     ( 549755813887
						       -| ['compiler_generated'] ))
					in  ( let <_36> =
						  call %% Line 672
						       ( 'erlang'
							 -| ['compiler_generated'] ):%% Line 672
										     ( 'bsl'
										       -| ['compiler_generated'] )
						      (_35, %% Line 672
							    ( 25
							      -| ['compiler_generated'] ))
					      in  ( let <R2> =
							call %% Line 672
							     ( 'erlang'
							       -| ['compiler_generated'] ):%% Line 672
											   ( 'bxor'
											     -| ['compiler_generated'] )
							    (%% Line 672
							     R1, _36)
						    in  ( let <_37> =
							      call %% Line 673
								   ( 'erlang'
								     -| ['compiler_generated'] ):%% Line 673
												 ( 'bsr'
												   -| ['compiler_generated'] )
								  (%% Line 673
								   R2, %% Line 673
								       ( 27
									 -| ['compiler_generated'] ))
							  in  ( let <R3> =
								    call %% Line 673
									 ( 'erlang'
									   -| ['compiler_generated'] ):%% Line 673
												       ( 'bxor'
													 -| ['compiler_generated'] )
									(%% Line 673
									 R2, _37)
								in  ( let <_13> =
									  call %% Line 674
									       ( 'erlang'
										 -| ['compiler_generated'] ):%% Line 674
													     ( '*'
													       -| ['compiler_generated'] )
									      (%% Line 674
									       R3, %% Line 674
										   ( 2685821657736338717
										     -| ['compiler_generated'] ))
								      in  ( let <_14> =
										call %% Line 674
										     ( 'erlang'
										       -| ['compiler_generated'] ):%% Line 674
														   ( 'band'
														     -| ['compiler_generated'] )
										    (_13, %% Line 674
											  ( 18446744073709551615
											    -| ['compiler_generated'] ))
									    in  let <_65> =
										    call %% Line 664
											 'erlang':%% Line 664
												  'band'
											(%% Line 664
											 A2, %% Line 664
											     4294967295)
										in  let <_15> =
											call %% Line 664
											     'erlang':%% Line 664
												      '*'
											    (_65, %% Line 664
												  4294967231)
										    in  let <_16> =
											    call %% Line 664
												 'erlang':%% Line 664
													  '+'
												(_15, %% Line 664
												      1)
											in  ( let <_55> =
												  call %% Line 671
												       ( 'erlang'
													 -| ['compiler_generated'] ):%% Line 671
																     ( 'bsr'
																       -| ['compiler_generated'] )
												      (_16, %% Line 671
													    ( 12
													      -| ['compiler_generated'] ))
											      in  ( let <_57> =
													call %% Line 671
													     ( 'erlang'
													       -| ['compiler_generated'] ):%% Line 671
																	   ( 'bxor'
																	     -| ['compiler_generated'] )
													    (_16, _55)
												    in  ( let <_40> =
													      call %% Line 672
														   ( 'erlang'
														     -| ['compiler_generated'] ):%% Line 672
																		 ( 'band'
																		   -| ['compiler_generated'] )
														  (_57, %% Line 672
															( 549755813887
															  -| ['compiler_generated'] ))
													  in  ( let <_41> =
														    call %% Line 672
															 ( 'erlang'
															   -| ['compiler_generated'] ):%% Line 672
																		       ( 'bsl'
																			 -| ['compiler_generated'] )
															(_40, %% Line 672
															      ( 25
																-| ['compiler_generated'] ))
														in  ( let <_59> =
															  call %% Line 672
															       ( 'erlang'
																 -| ['compiler_generated'] ):%% Line 672
																			     ( 'bxor'
																			       -| ['compiler_generated'] )
															      (_57, _41)
														      in  ( let <_42> =
																call %% Line 673
																     ( 'erlang'
																       -| ['compiler_generated'] ):%% Line 673
																				   ( 'bsr'
																				     -| ['compiler_generated'] )
																    (_59, %% Line 673
																	  ( 27
																	    -| ['compiler_generated'] ))
															    in  ( let <_61> =
																      call %% Line 673
																	   ( 'erlang'
																	     -| ['compiler_generated'] ):%% Line 673
																					 ( 'bxor'
																					   -| ['compiler_generated'] )
																	  (_59, _42)
																  in  ( let <_43> =
																	    call %% Line 674
																		 ( 'erlang'
																		   -| ['compiler_generated'] ):%% Line 674
																					       ( '*'
																						 -| ['compiler_generated'] )
																		(_61, %% Line 674
																		      ( 2685821657736338717
																			-| ['compiler_generated'] ))
																	in  ( let <_45> =
																		  call %% Line 674
																		       ( 'erlang'
																			 -| ['compiler_generated'] ):%% Line 674
																						     ( 'band'
																						       -| ['compiler_generated'] )
																		      (_43, %% Line 674
																			    ( 18446744073709551615
																			      -| ['compiler_generated'] ))
																	      in  let <_20> =
																		      call %% Line 665
																			   'erlang':%% Line 665
																				    'band'
																			  (%% Line 665
																			   A3, %% Line 665
																			       4294967295)
																		  in  let <_21> =
																			  call %% Line 665
																			       'erlang':%% Line 665
																					'*'
																			      (_20, %% Line 665
																				    4294967279)
																		      in  let <_22> =
																			      call %% Line 665
																				   'erlang':%% Line 665
																					    '+'
																				  (_21, %% Line 665
																					1)
																			  in  ( let <_56> =
																				    call %% Line 671
																					 ( 'erlang'
																					   -| ['compiler_generated'] ):%% Line 671
																								       ( 'bsr'
																									 -| ['compiler_generated'] )
																					(_22, %% Line 671
																					      ( 12
																						-| ['compiler_generated'] ))
																				in  ( let <_58> =
																					  call %% Line 671
																					       ( 'erlang'
																						 -| ['compiler_generated'] ):%% Line 671
																									     ( 'bxor'
																									       -| ['compiler_generated'] )
																					      (_22, _56)
																				      in  ( let <_48> =
																						call %% Line 672
																						     ( 'erlang'
																						       -| ['compiler_generated'] ):%% Line 672
																										   ( 'band'
																										     -| ['compiler_generated'] )
																						    (_58, %% Line 672
																							  ( 549755813887
																							    -| ['compiler_generated'] ))
																					    in  ( let <_49> =
																						      call %% Line 672
																							   ( 'erlang'
																							     -| ['compiler_generated'] ):%% Line 672
																											 ( 'bsl'
																											   -| ['compiler_generated'] )
																							  (_48, %% Line 672
																								( 25
																								  -| ['compiler_generated'] ))
																						  in  ( let <_60> =
																							    call %% Line 672
																								 ( 'erlang'
																								   -| ['compiler_generated'] ):%% Line 672
																											       ( 'bxor'
																												 -| ['compiler_generated'] )
																								(_58, _49)
																							in  ( let <_50> =
																								  call %% Line 673
																								       ( 'erlang'
																									 -| ['compiler_generated'] ):%% Line 673
																												     ( 'bsr'
																												       -| ['compiler_generated'] )
																								      (_60, %% Line 673
																									    ( 27
																									      -| ['compiler_generated'] ))
																							      in  ( let <_62> =
																									call %% Line 673
																									     ( 'erlang'
																									       -| ['compiler_generated'] ):%% Line 673
																													   ( 'bxor'
																													     -| ['compiler_generated'] )
																									    (_60, _50)
																								    in  ( let <_51> =
																									      call %% Line 674
																										   ( 'erlang'
																										     -| ['compiler_generated'] ):%% Line 674
																														 ( '*'
																														   -| ['compiler_generated'] )
																										  (_62, %% Line 674
																											( 2685821657736338717
																											  -| ['compiler_generated'] ))
																									  in  ( let <_53> =
																										    call %% Line 674
																											 ( 'erlang'
																											   -| ['compiler_generated'] ):%% Line 674
																														       ( 'band'
																															 -| ['compiler_generated'] )
																											(_51, %% Line 674
																											      ( 18446744073709551615
																												-| ['compiler_generated'] ))
																										in  let <_27> =
																											call %% Line 666
																											     'erlang':%% Line 666
																												      '*'
																											    (_14, _45)
																										    in  let <_28> =
																											    call %% Line 666
																												 'erlang':%% Line 666
																													  '*'
																												(_27, _53)
																											in  let <_29> =
																												call %% Line 666
																												     'erlang':%% Line 666
																													      'rem'
																												    (_28, %% Line 666
																													  18446744073709551614)
																											    in  %% Line 666
																												call 'erlang':'+'
																												    (_29, 1)
																										-| ['compiler_generated'] )
																									  -| ['compiler_generated'] )
																								    -| ['compiler_generated'] )
																							      -| ['compiler_generated'] )
																							-| ['compiler_generated'] )
																						  -| ['compiler_generated'] )
																					    -| ['compiler_generated'] )
																				      -| ['compiler_generated'] )
																				-| ['compiler_generated'] )
																	      -| ['compiler_generated'] )
																	-| ['compiler_generated'] )
																  -| ['compiler_generated'] )
															    -| ['compiler_generated'] )
														      -| ['compiler_generated'] )
														-| ['compiler_generated'] )
													  -| ['compiler_generated'] )
												    -| ['compiler_generated'] )
											      -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
	  ( <_30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_30})
		  -| [{'function_name',{'exs64_seed',1}}] )
	    -| ['compiler_generated'] )
	end
'exs64_next'/1 =
    %% Line 670
    fun (_0) ->
	let <_1> =
	    call %% Line 671
		 'erlang':%% Line 671
			  'bsr'
		(_0, %% Line 671
		     12)
	in  let <R1> =
		call %% Line 671
		     'erlang':%% Line 671
			      'bxor'
		    (_0, _1)
	    in  let <_6> =
		    call %% Line 672
			 'erlang':%% Line 672
				  'band'
			(%% Line 672
			 R1, %% Line 672
			     549755813887)
		in  let <_7> =
			call %% Line 672
			     'erlang':%% Line 672
				      'bsl'
			    (_6, %% Line 672
				 25)
		    in  let <R2> =
			    call %% Line 672
				 'erlang':%% Line 672
					  'bxor'
				(%% Line 672
				 R1, _7)
			in  let <_9> =
				call %% Line 673
				     'erlang':%% Line 673
					      'bsr'
				    (%% Line 673
				     R2, %% Line 673
					 27)
			    in  let <R3> =
				    call %% Line 673
					 'erlang':%% Line 673
						  'bxor'
					(%% Line 673
					 R2, _9)
				in  let <_13> =
					call %% Line 674
					     'erlang':%% Line 674
						      '*'
					    (%% Line 674
					     R3, %% Line 674
						 2685821657736338717)
				    in  let <_14> =
					    call %% Line 674
						 'erlang':%% Line 674
							  'band'
						(_13, %% Line 674
						      18446744073709551615)
					in  %% Line 674
					    {_14,R3}
'exsplus_seed'/1 =
    %% Line 718
    fun (_0) ->
	case _0 of
	  <L>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 719
	      case apply 'seed58_nz'/2
		       (2, L) of
		<[S0|[S1|[]]]> when 'true' ->
		    %% Line 720
		    [S0|S1]
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 721
	  <X>
	      when call 'erlang':'is_integer'
		    (_0) ->
	      let <_4> =
		  call %% Line 722
		       'erlang':%% Line 722
				'band'
		      (%% Line 722
		       X, %% Line 722
			  18446744073709551615)
	      in  %% Line 722
		  case apply 'seed58'/2
			   (2, _4) of
		    <[S0|[S1|[]]]> when 'true' ->
			%% Line 723
			[S0|S1]
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 726
	  <{A1,A2,A3}> when 'true' ->
	      let <_8> =
		  call %% Line 728
		       'erlang':%% Line 728
				'*'
		      (%% Line 728
		       A1, %% Line 728
			   4294967197)
	      in  let <_9> =
		      call %% Line 728
			   'erlang':%% Line 728
				    '+'
			  (_8, %% Line 728
			       1)
		  in  let <_10> =
			  call %% Line 728
			       'erlang':%% Line 728
					'band'
			      (_9, %% Line 728
				   288230376151711743)
		      in  let <_13> =
			      call %% Line 729
				   'erlang':%% Line 729
					    '*'
				  (%% Line 729
				   A2, %% Line 729
				       4294967231)
			  in  let <_14> =
				  call %% Line 729
				       'erlang':%% Line 729
						'+'
				      (_13, %% Line 729
					    1)
			      in  let <_15> =
				      call %% Line 729
					   'erlang':%% Line 729
						    'band'
					  (_14, %% Line 729
						288230376151711743)
				  in  ( let <_4> =
					    call %% Line 776
						 ( 'erlang'
						   -| ['compiler_generated'] ):%% Line 776
									       ( 'band'
										 -| ['compiler_generated'] )
						(_10, %% Line 776
						      ( 17179869183
							-| ['compiler_generated'] ))
					in  ( let <_5> =
						  call %% Line 776
						       ( 'erlang'
							 -| ['compiler_generated'] ):%% Line 776
										     ( 'bsl'
										       -| ['compiler_generated'] )
						      (_4, %% Line 776
							   ( 24
							     -| ['compiler_generated'] ))
					      in  ( let <S1_1> =
							call %% Line 776
							     ( 'erlang'
							       -| ['compiler_generated'] ):%% Line 776
											   ( 'bxor'
											     -| ['compiler_generated'] )
							    (_10, _5)
						    in  ( let <_28> =
							      call %% Line 776
								   ( 'erlang'
								     -| ['compiler_generated'] ):%% Line 776
												 ( 'bxor'
												   -| ['compiler_generated'] )
								  (%% Line 776
								   S1_1, _15)
							  in  ( let <_29> =
								    call %% Line 776
									 ( 'erlang'
									   -| ['compiler_generated'] ):%% Line 776
												       ( 'bsr'
													 -| ['compiler_generated'] )
									(%% Line 776
									 S1_1, %% Line 776
									       ( 11
										 -| ['compiler_generated'] ))
								in  ( let <_30> =
									  call %% Line 776
									       ( 'erlang'
										 -| ['compiler_generated'] ):%% Line 776
													     ( 'bxor'
													       -| ['compiler_generated'] )
									      (_28, _29)
								      in  ( let <_31> =
										call %% Line 776
										     ( 'erlang'
										       -| ['compiler_generated'] ):%% Line 776
														   ( 'bsr'
														     -| ['compiler_generated'] )
										    (_15, %% Line 776
											  ( 41
											    -| ['compiler_generated'] ))
									    in  ( let <NewS1> =
										      call %% Line 776
											   ( 'erlang'
											     -| ['compiler_generated'] ):%% Line 776
															 ( 'bxor'
															   -| ['compiler_generated'] )
											  (_30, _31)
										  in  ( let <_32> =
											    call %% Line 777
												 ( 'erlang'
												   -| ['compiler_generated'] ):%% Line 777
															       ( '+'
																 -| ['compiler_generated'] )
												(_15, %% Line 777
												      NewS1)
											in  do  %% Line 777
												( call ( 'erlang'
													 -| ['compiler_generated'] ):( 'band'
																       -| ['compiler_generated'] )
												      (_32, ( 288230376151711743
													      -| ['compiler_generated'] ))
												  -| ['compiler_generated'] )
												let <R1> =
												    [( _15
												       -| ['compiler_generated'] )|%% Line 777
																   ( NewS1
																     -| ['compiler_generated'] )]
												in  let <_19> =
													call %% Line 731
													     'erlang':%% Line 731
														      '*'
													    (%% Line 731
													     A3, %% Line 731
														 4294967279)
												    in  let <_20> =
													    call %% Line 731
														 'erlang':%% Line 731
															  '+'
														(_19, %% Line 731
														      1)
													in  let <_21> =
														call %% Line 731
														     'erlang':%% Line 731
															      'band'
														    (_20, %% Line 731
															  288230376151711743)
													    in  let <_22> =
														    call %% Line 732
															 'erlang':%% Line 732
																  'tl'
															(%% Line 732
															 R1)
														in  ( let <_55> =
															  call %% Line 776
															       ( 'erlang'
																 -| ['compiler_generated'] ):%% Line 776
																			     ( 'band'
																			       -| ['compiler_generated'] )
															      (_21, %% Line 776
																    ( 17179869183
																      -| ['compiler_generated'] ))
														      in  ( let <_56> =
																call %% Line 776
																     ( 'erlang'
																       -| ['compiler_generated'] ):%% Line 776
																				   ( 'bsl'
																				     -| ['compiler_generated'] )
																    (_55, %% Line 776
																	  ( 24
																	    -| ['compiler_generated'] ))
															    in  ( let <_57> =
																      call %% Line 776
																	   ( 'erlang'
																	     -| ['compiler_generated'] ):%% Line 776
																					 ( 'bxor'
																					   -| ['compiler_generated'] )
																	  (_21, _56)
																  in  ( let <_37> =
																	    call %% Line 776
																		 ( 'erlang'
																		   -| ['compiler_generated'] ):%% Line 776
																					       ( 'bxor'
																						 -| ['compiler_generated'] )
																		(_57, _22)
																	in  ( let <_38> =
																		  call %% Line 776
																		       ( 'erlang'
																			 -| ['compiler_generated'] ):%% Line 776
																						     ( 'bsr'
																						       -| ['compiler_generated'] )
																		      (_57, %% Line 776
																			    ( 11
																			      -| ['compiler_generated'] ))
																	      in  ( let <_39> =
																			call %% Line 776
																			     ( 'erlang'
																			       -| ['compiler_generated'] ):%% Line 776
																							   ( 'bxor'
																							     -| ['compiler_generated'] )
																			    (_37, _38)
																		    in  ( let <_40> =
																			      call %% Line 776
																				   ( 'erlang'
																				     -| ['compiler_generated'] ):%% Line 776
																								 ( 'bsr'
																								   -| ['compiler_generated'] )
																				  (_22, %% Line 776
																					( 41
																					  -| ['compiler_generated'] ))
																			  in  ( let <_58> =
																				    call %% Line 776
																					 ( 'erlang'
																					   -| ['compiler_generated'] ):%% Line 776
																								       ( 'bxor'
																									 -| ['compiler_generated'] )
																					(_39, _40)
																				in  ( let <_41> =
																					  call %% Line 777
																					       ( 'erlang'
																						 -| ['compiler_generated'] ):%% Line 777
																									     ( '+'
																									       -| ['compiler_generated'] )
																					      (_22, _58)
																				      in  do  %% Line 777
																					      ( call ( 'erlang'
																						       -| ['compiler_generated'] ):( 'band'
																										     -| ['compiler_generated'] )
																						    (_41, ( 288230376151711743
																							    -| ['compiler_generated'] ))
																						-| ['compiler_generated'] )
																					      ( [( _22
																						   -| ['compiler_generated'] )|( _58
																										 -| ['compiler_generated'] )]
																						-| ['compiler_generated'] )
																				      -| ['compiler_generated'] )
																				-| ['compiler_generated'] )
																			  -| ['compiler_generated'] )
																		    -| ['compiler_generated'] )
																	      -| ['compiler_generated'] )
																	-| ['compiler_generated'] )
																  -| ['compiler_generated'] )
															    -| ['compiler_generated'] )
														      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
	  ( <_24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_24})
		  -| [{'function_name',{'exsplus_seed',1}}] )
	    -| ['compiler_generated'] )
	end
'exsss_seed'/1 =
    %% Line 737
    fun (_0) ->
	case _0 of
	  <L>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 738
	      case apply 'seed58_nz'/2
		       (2, L) of
		<[S0|[S1|[]]]> when 'true' ->
		    %% Line 739
		    [S0|S1]
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 740
	  <X>
	      when call 'erlang':'is_integer'
		    (_0) ->
	      let <_4> =
		  call %% Line 741
		       'erlang':%% Line 741
				'band'
		      (%% Line 741
		       X, %% Line 741
			  18446744073709551615)
	      in  %% Line 741
		  case apply 'seed58'/2
			   (2, _4) of
		    <[S0|[S1|[]]]> when 'true' ->
			%% Line 742
			[S0|S1]
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 745
	  <{A1,A2,A3}> when 'true' ->
	      let <_8> =
		  call %% Line 746
		       'erlang':%% Line 746
				'band'
		      (%% Line 746
		       A1, %% Line 746
			   18446744073709551615)
	      in  %% Line 746
		  case apply 'seed58'/1
			   (_8) of
		    <{_21,X0}> when 'true' ->
			let <_12> =
			    call %% Line 747
				 'erlang':%% Line 747
					  'band'
				(%% Line 747
				 A2, %% Line 747
				     18446744073709551615)
			in  let <_13> =
				call %% Line 747
				     'erlang':%% Line 747
					      'bxor'
				    (_12, %% Line 747
					  X0)
			    in  %% Line 747
				case apply 'seed58'/1
					 (_13) of
				  <{S0,X1}> when 'true' ->
				      let <_17> =
					  call %% Line 748
					       'erlang':%% Line 748
							'band'
					      (%% Line 748
					       A3, %% Line 748
						   18446744073709551615)
				      in  let <_18> =
					      call %% Line 748
						   'erlang':%% Line 748
							    'bxor'
						  (_17, %% Line 748
							X1)
					  in  %% Line 748
					      case apply 'seed58'/1
						       (_18) of
						<{S1,_22}> when 'true' ->
						    %% Line 749
						    [S0|S1]
						( <_19> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_19})
						  -| ['compiler_generated'] )
					      end
				  ( <_14> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_14})
				    -| ['compiler_generated'] )
				end
		    ( <_9> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_9})
		      -| ['compiler_generated'] )
		  end
	  ( <_20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_20})
		  -| [{'function_name',{'exsss_seed',1}}] )
	    -| ['compiler_generated'] )
	end
'exsplus_next'/1 =
    %% Line 774
    fun (_0) ->
	case _0 of
	  <[S1|S0]> when 'true' ->
	      let <_4> =
		  call %% Line 776
		       'erlang':%% Line 776
				'band'
		      (%% Line 776
		       S1, %% Line 776
			   17179869183)
	      in  let <_5> =
		      call %% Line 776
			   'erlang':%% Line 776
				    'bsl'
			  (_4, %% Line 776
			       24)
		  in  let <S1_1> =
			  call %% Line 776
			       'erlang':%% Line 776
					'bxor'
			      (%% Line 776
			       S1, _5)
		      in  let <_9> =
			      call %% Line 776
				   'erlang':%% Line 776
					    'bxor'
				  (%% Line 776
				   S1_1, %% Line 776
					 S0)
			  in  let <_8> =
				  call %% Line 776
				       'erlang':%% Line 776
						'bsr'
				      (%% Line 776
				       S1_1, %% Line 776
					     11)
			      in  let <_10> =
				      call %% Line 776
					   'erlang':%% Line 776
						    'bxor'
					  (_9, _8)
				  in  let <_7> =
					  call %% Line 776
					       'erlang':%% Line 776
							'bsr'
					      (%% Line 776
					       S0, %% Line 776
						   41)
				      in  let <NewS1> =
					      call %% Line 776
						   'erlang':%% Line 776
							    'bxor'
						  (_10, _7)
					  in  let <_14> =
						  call %% Line 777
						       'erlang':%% Line 777
								'+'
						      (%% Line 777
						       S0, %% Line 777
							   NewS1)
					      in  let <_15> =
						      call %% Line 777
							   'erlang':%% Line 777
								    'band'
							  (_14, %% Line 777
								288230376151711743)
						  in  %% Line 777
						      {_15,[S0|NewS1]}
	  ( <_16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16})
		  -| [{'function_name',{'exsplus_next',1}}] )
	    -| ['compiler_generated'] )
	end
'exsss_next'/1 =
    %% Line 786
    fun (_0) ->
	case _0 of
	  <[S1|S0]> when 'true' ->
	      let <_4> =
		  call %% Line 788
		       'erlang':%% Line 788
				'band'
		      (%% Line 788
		       S1, %% Line 788
			   17179869183)
	      in  let <_5> =
		      call %% Line 788
			   'erlang':%% Line 788
				    'bsl'
			  (_4, %% Line 788
			       24)
		  in  let <S1_1> =
			  call %% Line 788
			       'erlang':%% Line 788
					'bxor'
			      (%% Line 788
			       S1, _5)
		      in  let <_9> =
			      call %% Line 788
				   'erlang':%% Line 788
					    'bxor'
				  (%% Line 788
				   S1_1, %% Line 788
					 S0)
			  in  let <_8> =
				  call %% Line 788
				       'erlang':%% Line 788
						'bsr'
				      (%% Line 788
				       S1_1, %% Line 788
					     11)
			      in  let <_10> =
				      call %% Line 788
					   'erlang':%% Line 788
						    'bxor'
					  (_9, _8)
				  in  let <_7> =
					  call %% Line 788
					       'erlang':%% Line 788
							'bsr'
					      (%% Line 788
					       S0, %% Line 788
						   41)
				      in  let <NewS1> =
					      call %% Line 788
						   'erlang':%% Line 788
							    'bxor'
						  (_10, _7)
					  in  let <_17> =
						  call %% Line 789
						       'erlang':%% Line 789
								'band'
						      (%% Line 789
						       S0, %% Line 789
							   72057594037927935)
					      in  let <_18> =
						      call %% Line 789
							   'erlang':%% Line 789
								    'bsl'
							  (_17, %% Line 789
								2)
						  in  let <_19> =
							  call %% Line 789
							       'erlang':%% Line 789
									'+'
							      (%% Line 789
							       S0, _18)
						      in  let <V_0> =
							      call %% Line 789
								   'erlang':%% Line 789
									    'band'
								  (_19, %% Line 789
									288230376151711743)
							  in  let <_26> =
								  call %% Line 789
								       'erlang':%% Line 789
										'band'
								      (%% Line 789
								       V_0, %% Line 789
									    2251799813685247)
							      in  let <_27> =
								      call %% Line 789
									   'erlang':%% Line 789
										    'bsl'
									  (_26, %% Line 789
										7)
								  in  let <_22> =
									  call %% Line 789
									       'erlang':%% Line 789
											'bsr'
									      (%% Line 789
									       V_0, %% Line 789
										    51)
								      in  let <V_1> =
									      call %% Line 789
										   'erlang':%% Line 789
											    'bor'
										  (_27, _22)
									  in  let <_34> =
										  call %% Line 789
										       'erlang':%% Line 789
												'band'
										      (%% Line 789
										       V_1, %% Line 789
											    36028797018963967)
									      in  let <_35> =
										      call %% Line 789
											   'erlang':%% Line 789
												    'bsl'
											  (_34, %% Line 789
												3)
										  in  let <_36> =
											  call %% Line 789
											       'erlang':%% Line 789
													'+'
											      (%% Line 789
											       V_1, _35)
										      in  let <_37> =
											      call %% Line 789
												   'erlang':%% Line 789
													    'band'
												  (_36, %% Line 789
													288230376151711743)
											  in  %% Line 789
											      {_37,[S0|NewS1]}
	  ( <_38> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_38})
		  -| [{'function_name',{'exsss_next',1}}] )
	    -| ['compiler_generated'] )
	end
'exsp_uniform'/1 =
    %% Line 792
    fun (_0) ->
	case _0 of
	  <{Alg,R0}> when 'true' ->
	      ( case %% Line 793
		     R0 of
		  ( <( [S1|S0]
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			( let <_4> =
			      call ( 'erlang'
				     -| ['compiler_generated'] ):( 'band'
								   -| ['compiler_generated'] )
				  (S1, ( 17179869183
					 -| ['compiler_generated'] ))
			  in  ( let <_5> =
				    call ( 'erlang'
					   -| ['compiler_generated'] ):( 'bsl'
									 -| ['compiler_generated'] )
					(_4, ( 24
					       -| ['compiler_generated'] ))
				in  ( let <S1_1> =
					  call ( 'erlang'
						 -| ['compiler_generated'] ):( 'bxor'
									       -| ['compiler_generated'] )
					      (S1, _5)
				      in  ( let <_9> =
						call ( 'erlang'
						       -| ['compiler_generated'] ):( 'bxor'
										     -| ['compiler_generated'] )
						    (S1_1, S0)
					    in  ( let <_8> =
						      call ( 'erlang'
							     -| ['compiler_generated'] ):( 'bsr'
											   -| ['compiler_generated'] )
							  (S1_1, ( 11
								   -| ['compiler_generated'] ))
						  in  ( let <_10> =
							    call ( 'erlang'
								   -| ['compiler_generated'] ):( 'bxor'
												 -| ['compiler_generated'] )
								(_9, _8)
							in  ( let <_7> =
								  call ( 'erlang'
									 -| ['compiler_generated'] ):( 'bsr'
												       -| ['compiler_generated'] )
								      (S0, ( 41
									     -| ['compiler_generated'] ))
							      in  ( let <NewS1> =
									call ( 'erlang'
									       -| ['compiler_generated'] ):( 'bxor'
													     -| ['compiler_generated'] )
									    (_10, _7)
								    in  ( let <_14> =
									      call ( 'erlang'
										     -| ['compiler_generated'] ):( '+'
														   -| ['compiler_generated'] )
										  (S0, NewS1)
									  in  ( let <_15> =
										    call ( 'erlang'
											   -| ['compiler_generated'] ):( 'band'
															 -| ['compiler_generated'] )
											(_14, ( 288230376151711743
												-| ['compiler_generated'] ))
										in  let <R1> =
											[( S0
											   -| ['compiler_generated'] )|( NewS1
															 -| ['compiler_generated'] )]
										    in  let <_3> =
											    call %% Line 796
												 'erlang':%% Line 796
													  'bsr'
												(_15, %% Line 796
												      5)
											in  let <_18> =
												call %% Line 796
												     'erlang':%% Line 796
													      '*'
												    (_3, %% Line 796
													 1.11022302462515654042e-16)
											    in  %% Line 796
												{_18,{Alg,R1}}
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_16> when ( 'true'
				 -| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'function_clause'
				    -| ['compiler_generated'] ),_16}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5})
		  -| [{'function_name',{'exsp_uniform',1}}] )
	    -| ['compiler_generated'] )
	end
'exsss_uniform'/1 =
    %% Line 798
    fun (_0) ->
	case _0 of
	  <{Alg,R0}> when 'true' ->
	      ( case %% Line 799
		     R0 of
		  ( <( [S1|S0]
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			( let <_4> =
			      call ( 'erlang'
				     -| ['compiler_generated'] ):( 'band'
								   -| ['compiler_generated'] )
				  (S1, ( 17179869183
					 -| ['compiler_generated'] ))
			  in  ( let <_5> =
				    call ( 'erlang'
					   -| ['compiler_generated'] ):( 'bsl'
									 -| ['compiler_generated'] )
					(_4, ( 24
					       -| ['compiler_generated'] ))
				in  ( let <S1_1> =
					  call ( 'erlang'
						 -| ['compiler_generated'] ):( 'bxor'
									       -| ['compiler_generated'] )
					      (S1, _5)
				      in  ( let <_9> =
						call ( 'erlang'
						       -| ['compiler_generated'] ):( 'bxor'
										     -| ['compiler_generated'] )
						    (S1_1, S0)
					    in  ( let <_8> =
						      call ( 'erlang'
							     -| ['compiler_generated'] ):( 'bsr'
											   -| ['compiler_generated'] )
							  (S1_1, ( 11
								   -| ['compiler_generated'] ))
						  in  ( let <_10> =
							    call ( 'erlang'
								   -| ['compiler_generated'] ):( 'bxor'
												 -| ['compiler_generated'] )
								(_9, _8)
							in  ( let <_7> =
								  call ( 'erlang'
									 -| ['compiler_generated'] ):( 'bsr'
												       -| ['compiler_generated'] )
								      (S0, ( 41
									     -| ['compiler_generated'] ))
							      in  ( let <NewS1> =
									call ( 'erlang'
									       -| ['compiler_generated'] ):( 'bxor'
													     -| ['compiler_generated'] )
									    (_10, _7)
								    in  ( let <_17> =
									      call ( 'erlang'
										     -| ['compiler_generated'] ):( 'band'
														   -| ['compiler_generated'] )
										  (S0, ( 72057594037927935
											 -| ['compiler_generated'] ))
									  in  ( let <_18> =
										    call ( 'erlang'
											   -| ['compiler_generated'] ):( 'bsl'
															 -| ['compiler_generated'] )
											(_17, ( 2
												-| ['compiler_generated'] ))
										in  ( let <_19> =
											  call ( 'erlang'
												 -| ['compiler_generated'] ):( '+'
															       -| ['compiler_generated'] )
											      (S0, _18)
										      in  ( let <V_0> =
												call ( 'erlang'
												       -| ['compiler_generated'] ):( 'band'
																     -| ['compiler_generated'] )
												    (_19, ( 288230376151711743
													    -| ['compiler_generated'] ))
											    in  ( let <_26> =
												      call ( 'erlang'
													     -| ['compiler_generated'] ):( 'band'
																	   -| ['compiler_generated'] )
													  (V_0, ( 2251799813685247
														  -| ['compiler_generated'] ))
												  in  ( let <_27> =
													    call ( 'erlang'
														   -| ['compiler_generated'] ):( 'bsl'
																		 -| ['compiler_generated'] )
														(_26, ( 7
															-| ['compiler_generated'] ))
													in  ( let <_22> =
														  call ( 'erlang'
															 -| ['compiler_generated'] ):( 'bsr'
																		       -| ['compiler_generated'] )
														      (V_0, ( 51
															      -| ['compiler_generated'] ))
													      in  ( let <V_1> =
															call ( 'erlang'
															       -| ['compiler_generated'] ):( 'bor'
																			     -| ['compiler_generated'] )
															    (_27, _22)
														    in  ( let <_34> =
															      call ( 'erlang'
																     -| ['compiler_generated'] ):( 'band'
																				   -| ['compiler_generated'] )
																  (V_1, ( 36028797018963967
																	  -| ['compiler_generated'] ))
															  in  ( let <_35> =
																    call ( 'erlang'
																	   -| ['compiler_generated'] ):( 'bsl'
																					 -| ['compiler_generated'] )
																	(_34, ( 3
																		-| ['compiler_generated'] ))
																in  ( let <_36> =
																	  call ( 'erlang'
																		 -| ['compiler_generated'] ):( '+'
																					       -| ['compiler_generated'] )
																	      (V_1, _35)
																      in  ( let <_37> =
																		call ( 'erlang'
																		       -| ['compiler_generated'] ):( 'band'
																						     -| ['compiler_generated'] )
																		    (_36, ( 288230376151711743
																			    -| ['compiler_generated'] ))
																	    in  let <R1> =
																		    [( S0
																		       -| ['compiler_generated'] )|( NewS1
																						     -| ['compiler_generated'] )]
																		in  let <_3> =
																			call %% Line 800
																			     'erlang':%% Line 800
																				      'bsr'
																			    (_37, %% Line 800
																				  5)
																		    in  let <_40> =
																			    call %% Line 800
																				 'erlang':%% Line 800
																					  '*'
																				(_3, %% Line 800
																				     1.11022302462515654042e-16)
																			in  %% Line 800
																			    {_40,{Alg,R1}}
																	    -| ['compiler_generated'] )
																      -| ['compiler_generated'] )
																-| ['compiler_generated'] )
															  -| ['compiler_generated'] )
														    -| ['compiler_generated'] )
													      -| ['compiler_generated'] )
													-| ['compiler_generated'] )
												  -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
										      -| ['compiler_generated'] )
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_38> when ( 'true'
				 -| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'function_clause'
				    -| ['compiler_generated'] ),_38}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5})
		  -| [{'function_name',{'exsss_uniform',1}}] )
	    -| ['compiler_generated'] )
	end
'exsp_uniform'/2 =
    %% Line 802
    fun (_0,_1) ->
	case <_0,_1> of
	  <Range,{Alg,R}> when 'true' ->
	      ( case %% Line 803
		     R of
		  ( <( [S1|S0]
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			( let <_4> =
			      call ( 'erlang'
				     -| ['compiler_generated'] ):( 'band'
								   -| ['compiler_generated'] )
				  (S1, ( 17179869183
					 -| ['compiler_generated'] ))
			  in  ( let <_5> =
				    call ( 'erlang'
					   -| ['compiler_generated'] ):( 'bsl'
									 -| ['compiler_generated'] )
					(_4, ( 24
					       -| ['compiler_generated'] ))
				in  ( let <S1_1> =
					  call ( 'erlang'
						 -| ['compiler_generated'] ):( 'bxor'
									       -| ['compiler_generated'] )
					      (S1, _5)
				      in  ( let <_9> =
						call ( 'erlang'
						       -| ['compiler_generated'] ):( 'bxor'
										     -| ['compiler_generated'] )
						    (S1_1, S0)
					    in  ( let <_8> =
						      call ( 'erlang'
							     -| ['compiler_generated'] ):( 'bsr'
											   -| ['compiler_generated'] )
							  (S1_1, ( 11
								   -| ['compiler_generated'] ))
						  in  ( let <_10> =
							    call ( 'erlang'
								   -| ['compiler_generated'] ):( 'bxor'
												 -| ['compiler_generated'] )
								(_9, _8)
							in  ( let <_7> =
								  call ( 'erlang'
									 -| ['compiler_generated'] ):( 'bsr'
												       -| ['compiler_generated'] )
								      (S0, ( 41
									     -| ['compiler_generated'] ))
							      in  ( let <NewS1> =
									call ( 'erlang'
									       -| ['compiler_generated'] ):( 'bxor'
													     -| ['compiler_generated'] )
									    (_10, _7)
								    in  ( let <_14> =
									      call ( 'erlang'
										     -| ['compiler_generated'] ):( '+'
														   -| ['compiler_generated'] )
										  (S0, NewS1)
									  in  ( let <_15> =
										    call ( 'erlang'
											   -| ['compiler_generated'] ):( 'band'
															 -| ['compiler_generated'] )
											(_14, ( 288230376151711743
												-| ['compiler_generated'] ))
										in  let <R1> =
											[( S0
											   -| ['compiler_generated'] )|( NewS1
															 -| ['compiler_generated'] )]
										    in  let <MaxMinusRange> =
											    call %% Line 804
												 'erlang':%% Line 804
													  '-'
												(%% Line 804
												 288230376151711744, %% Line 804
														     Range)
											in  %% Line 805
											    case <> of
											      <>
												  when call 'erlang':'=<'
													(0,
													 MaxMinusRange) ->
												  case <> of
												    <>
													when call 'erlang':'<'
													      (_15,
													       Range) ->
													let <_19> =
													    call 'erlang':'+'
														(_15, 1)
													in  {_19,{Alg,R1}}
												    <> when 'true' ->
													let <I> =
													    call 'erlang':'rem'
														(_15, Range)
													in  case <> of
													      <>
														  when try
															let <_21> =
															    call 'erlang':'-'
																(_15, I)
															in  call 'erlang':'=<'
																(_21, MaxMinusRange)
														    of <Try> ->
															Try
														    catch <T,R> ->
															'false' ->
														  let <_20> =
														      call 'erlang':'+'
															  (I, 1)
														  in  {_20,{Alg,R1}}
													      <> when 'true' ->
														  apply 'exsp_uniform'/2
														      (Range, {Alg,R1})
													    end
												  end
											      <> when 'true' ->
												  apply 'uniform_range'/4
												      (Range, Alg, R1, _15)
											    end
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_16> when ( 'true'
				 -| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'function_clause'
				    -| ['compiler_generated'] ),_16}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9})
		  -| [{'function_name',{'exsp_uniform',2}}] )
	    -| ['compiler_generated'] )
	end
'exsss_uniform'/2 =
    %% Line 807
    fun (_0,_1) ->
	case <_0,_1> of
	  <Range,{Alg,R}> when 'true' ->
	      ( case %% Line 808
		     R of
		  ( <( [S1|S0]
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			( let <_4> =
			      call ( 'erlang'
				     -| ['compiler_generated'] ):( 'band'
								   -| ['compiler_generated'] )
				  (S1, ( 17179869183
					 -| ['compiler_generated'] ))
			  in  ( let <_5> =
				    call ( 'erlang'
					   -| ['compiler_generated'] ):( 'bsl'
									 -| ['compiler_generated'] )
					(_4, ( 24
					       -| ['compiler_generated'] ))
				in  ( let <S1_1> =
					  call ( 'erlang'
						 -| ['compiler_generated'] ):( 'bxor'
									       -| ['compiler_generated'] )
					      (S1, _5)
				      in  ( let <_9> =
						call ( 'erlang'
						       -| ['compiler_generated'] ):( 'bxor'
										     -| ['compiler_generated'] )
						    (S1_1, S0)
					    in  ( let <_8> =
						      call ( 'erlang'
							     -| ['compiler_generated'] ):( 'bsr'
											   -| ['compiler_generated'] )
							  (S1_1, ( 11
								   -| ['compiler_generated'] ))
						  in  ( let <_10> =
							    call ( 'erlang'
								   -| ['compiler_generated'] ):( 'bxor'
												 -| ['compiler_generated'] )
								(_9, _8)
							in  ( let <_7> =
								  call ( 'erlang'
									 -| ['compiler_generated'] ):( 'bsr'
												       -| ['compiler_generated'] )
								      (S0, ( 41
									     -| ['compiler_generated'] ))
							      in  ( let <NewS1> =
									call ( 'erlang'
									       -| ['compiler_generated'] ):( 'bxor'
													     -| ['compiler_generated'] )
									    (_10, _7)
								    in  ( let <_17> =
									      call ( 'erlang'
										     -| ['compiler_generated'] ):( 'band'
														   -| ['compiler_generated'] )
										  (S0, ( 72057594037927935
											 -| ['compiler_generated'] ))
									  in  ( let <_18> =
										    call ( 'erlang'
											   -| ['compiler_generated'] ):( 'bsl'
															 -| ['compiler_generated'] )
											(_17, ( 2
												-| ['compiler_generated'] ))
										in  ( let <_19> =
											  call ( 'erlang'
												 -| ['compiler_generated'] ):( '+'
															       -| ['compiler_generated'] )
											      (S0, _18)
										      in  ( let <V_0> =
												call ( 'erlang'
												       -| ['compiler_generated'] ):( 'band'
																     -| ['compiler_generated'] )
												    (_19, ( 288230376151711743
													    -| ['compiler_generated'] ))
											    in  ( let <_26> =
												      call ( 'erlang'
													     -| ['compiler_generated'] ):( 'band'
																	   -| ['compiler_generated'] )
													  (V_0, ( 2251799813685247
														  -| ['compiler_generated'] ))
												  in  ( let <_27> =
													    call ( 'erlang'
														   -| ['compiler_generated'] ):( 'bsl'
																		 -| ['compiler_generated'] )
														(_26, ( 7
															-| ['compiler_generated'] ))
													in  ( let <_22> =
														  call ( 'erlang'
															 -| ['compiler_generated'] ):( 'bsr'
																		       -| ['compiler_generated'] )
														      (V_0, ( 51
															      -| ['compiler_generated'] ))
													      in  ( let <V_1> =
															call ( 'erlang'
															       -| ['compiler_generated'] ):( 'bor'
																			     -| ['compiler_generated'] )
															    (_27, _22)
														    in  ( let <_34> =
															      call ( 'erlang'
																     -| ['compiler_generated'] ):( 'band'
																				   -| ['compiler_generated'] )
																  (V_1, ( 36028797018963967
																	  -| ['compiler_generated'] ))
															  in  ( let <_35> =
																    call ( 'erlang'
																	   -| ['compiler_generated'] ):( 'bsl'
																					 -| ['compiler_generated'] )
																	(_34, ( 3
																		-| ['compiler_generated'] ))
																in  ( let <_36> =
																	  call ( 'erlang'
																		 -| ['compiler_generated'] ):( '+'
																					       -| ['compiler_generated'] )
																	      (V_1, _35)
																      in  ( let <_37> =
																		call ( 'erlang'
																		       -| ['compiler_generated'] ):( 'band'
																						     -| ['compiler_generated'] )
																		    (_36, ( 288230376151711743
																			    -| ['compiler_generated'] ))
																	    in  let <R1> =
																		    [( S0
																		       -| ['compiler_generated'] )|( NewS1
																						     -| ['compiler_generated'] )]
																		in  let <MaxMinusRange> =
																			call %% Line 809
																			     'erlang':%% Line 809
																				      '-'
																			    (%% Line 809
																			     288230376151711744, %% Line 809
																						 Range)
																		    in  %% Line 810
																			case <> of
																			  <>
																			      when call 'erlang':'=<'
																				    (0,
																				     MaxMinusRange) ->
																			      case <> of
																				<>
																				    when call 'erlang':'<'
																					  (_37,
																					   Range) ->
																				    let <_41> =
																					call 'erlang':'+'
																					    (_37, 1)
																				    in  {_41,{Alg,R1}}
																				<> when 'true' ->
																				    let <I> =
																					call 'erlang':'rem'
																					    (_37, Range)
																				    in  case <> of
																					  <>
																					      when try
																						    let <_43> =
																							call 'erlang':'-'
																							    (_37, I)
																						    in  call 'erlang':'=<'
																							    (_43, MaxMinusRange)
																						of <Try> ->
																						    Try
																						catch <T,R> ->
																						    'false' ->
																					      let <_42> =
																						  call 'erlang':'+'
																						      (I, 1)
																					      in  {_42,{Alg,R1}}
																					  <> when 'true' ->
																					      apply 'exsss_uniform'/2
																						  (Range, {Alg,R1})
																					end
																			      end
																			  <> when 'true' ->
																			      apply 'uniform_range'/4
																				  (Range, Alg, R1, _37)
																			end
																	    -| ['compiler_generated'] )
																      -| ['compiler_generated'] )
																-| ['compiler_generated'] )
															  -| ['compiler_generated'] )
														    -| ['compiler_generated'] )
													      -| ['compiler_generated'] )
													-| ['compiler_generated'] )
												  -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
										      -| ['compiler_generated'] )
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_38> when ( 'true'
				 -| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'function_clause'
				    -| ['compiler_generated'] ),_38}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9})
		  -| [{'function_name',{'exsss_uniform',2}}] )
	    -| ['compiler_generated'] )
	end
'exsplus_jump'/1 =
    %% Line 851
    fun (_0) ->
	case _0 of
	  <{Alg,S}> when 'true' ->
	      %% Line 852
	      case apply 'exsplus_jump'/4
		       (S, [0|0], 13386170678560663, 58) of
		<{S1,AS1}> when 'true' ->
		    %% Line 853
		    case apply 'exsplus_jump'/4
			     (S1, AS1, 235826144310425740, 58) of
		      <{_4,AS2}> when 'true' ->
			  %% Line 854
			  {Alg,AS2}
		      ( <_2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_2})
			-| ['compiler_generated'] )
		    end
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_1})
		  -| ['compiler_generated'] )
	      end
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'exsplus_jump',1}}] )
	    -| ['compiler_generated'] )
	end
'exsplus_jump'/4 =
    %% Line 857
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <S,AS,_19,0> when 'true' ->
	      %% Line 858
	      {S,AS}
	  %% Line 859
	  <S,_@r0 = [AS0|AS1],J,N> when 'true' ->
	      ( case %% Line 860
		     S of
		  ( <( [S1|S0]
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			( let <_4> =
			      call ( 'erlang'
				     -| ['compiler_generated'] ):( 'band'
								   -| ['compiler_generated'] )
				  (S1, ( 17179869183
					 -| ['compiler_generated'] ))
			  in  ( let <_5> =
				    call ( 'erlang'
					   -| ['compiler_generated'] ):( 'bsl'
									 -| ['compiler_generated'] )
					(_4, ( 24
					       -| ['compiler_generated'] ))
				in  ( let <S1_1> =
					  call ( 'erlang'
						 -| ['compiler_generated'] ):( 'bxor'
									       -| ['compiler_generated'] )
					      (S1, _5)
				      in  ( let <_9> =
						call ( 'erlang'
						       -| ['compiler_generated'] ):( 'bxor'
										     -| ['compiler_generated'] )
						    (S1_1, S0)
					    in  ( let <_8> =
						      call ( 'erlang'
							     -| ['compiler_generated'] ):( 'bsr'
											   -| ['compiler_generated'] )
							  (S1_1, ( 11
								   -| ['compiler_generated'] ))
						  in  ( let <_10> =
							    call ( 'erlang'
								   -| ['compiler_generated'] ):( 'bxor'
												 -| ['compiler_generated'] )
								(_9, _8)
							in  ( let <_7> =
								  call ( 'erlang'
									 -| ['compiler_generated'] ):( 'bsr'
												       -| ['compiler_generated'] )
								      (S0, ( 41
									     -| ['compiler_generated'] ))
							      in  ( let <NewS1> =
									call ( 'erlang'
									       -| ['compiler_generated'] ):( 'bxor'
													     -| ['compiler_generated'] )
									    (_10, _7)
								    in  ( let <_14> =
									      call ( 'erlang'
										     -| ['compiler_generated'] ):( '+'
														   -| ['compiler_generated'] )
										  (S0, NewS1)
									  in  do  ( call ( 'erlang'
											   -| ['compiler_generated'] ):( 'band'
															 -| ['compiler_generated'] )
											(_14, ( 288230376151711743
												-| ['compiler_generated'] ))
										    -| ['compiler_generated'] )
										  %% Line 861
										  let <NS> =
										      [( S0
											 -| ['compiler_generated'] )|( NewS1
														       -| ['compiler_generated'] )]
										  in  case call 'erlang':'band'
											       (J, 1) of
											%% Line 862
											<1> when 'true' ->
											    %% Line 863
											    case S of
											      <[_25|_26]> when 'true' ->
												  let <_30> =
												      call %% Line 864
													   'erlang':%% Line 864
														    'bxor'
													  (%% Line 864
													   AS0, _25)
												  in  let <_11> =
													  call %% Line 864
													       'erlang':%% Line 864
															'bxor'
													      (%% Line 864
													       AS1, _26)
												      in  let <_28> =
													      call %% Line 864
														   'erlang':%% Line 864
															    'bsr'
														  (%% Line 864
														   J, %% Line 864
														      1)
													  in  let <_29> =
														  call %% Line 864
														       'erlang':%% Line 864
																'-'
														      (%% Line 864
														       N, %% Line 864
															  1)
													      in  %% Line 864
														  apply 'exsplus_jump'/4
														      (NS, [_30|_11], _28, _29)
											      ( <_31> when 'true' ->
												    primop 'match_fail'
													({'badmatch',_31})
												-| ['compiler_generated'] )
											    end
											%% Line 865
											<0> when 'true' ->
											    let <_13> =
												call %% Line 866
												     'erlang':%% Line 866
													      'bsr'
												    (%% Line 866
												     J, %% Line 866
													1)
											    in  let <_12> =
												    call %% Line 866
													 'erlang':%% Line 866
														  '-'
													(%% Line 866
													 N, %% Line 866
													    1)
												in  %% Line 866
												    apply 'exsplus_jump'/4
													(NS, _@r0, _13, _12)
											( <_32> when 'true' ->
											      primop 'match_fail'
												  ({'case_clause',_32})
											  -| ['compiler_generated'] )
										      end
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_16> when ( 'true'
				 -| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'function_clause'
				    -| ['compiler_generated'] ),_16}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_18,_17,_16,_15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_18,_17,_16,_15})
		  -| [{'function_name',{'exsplus_jump',4}}] )
	    -| ['compiler_generated'] )
	end
'exs1024_seed'/1 =
    %% Line 877
    fun (_0) ->
	case _0 of
	  <L>
	      when call 'erlang':'is_list'
		    (_0) ->
	      let <_1> =
		  apply %% Line 878
			'seed64_nz'/2
		      (%% Line 878
		       16, %% Line 878
			   L)
	      in  %% Line 878
		  {_1,[]}
	  %% Line 879
	  <X>
	      when call 'erlang':'is_integer'
		    (_0) ->
	      let <_4> =
		  call %% Line 880
		       'erlang':%% Line 880
				'band'
		      (%% Line 880
		       X, %% Line 880
			  18446744073709551615)
	      in  let <_5> =
		      apply %% Line 880
			    'seed64'/2
			  (%% Line 880
			   16, _4)
		  in  %% Line 880
		      {_5,[]}
	  %% Line 883
	  <{A1,A2,A3}> when 'true' ->
	      let <_10> =
		  call %% Line 884
		       'erlang':%% Line 884
				'band'
		      (%% Line 884
		       A1, %% Line 884
			   2097151)
	      in  let <_11> =
		      call %% Line 884
			   'erlang':%% Line 884
				    '+'
			  (_10, %% Line 884
				1)
		  in  let <_12> =
			  call %% Line 884
			       'erlang':%% Line 884
					'*'
			      (_11, %% Line 884
				    2097131)
		      in  let <B1> =
			      call %% Line 884
				   'erlang':%% Line 884
					    'band'
				  (_12, %% Line 884
					2097151)
			  in  let <_18> =
				  call %% Line 885
				       'erlang':%% Line 885
						'band'
				      (%% Line 885
				       A2, %% Line 885
					   2097151)
			      in  let <_19> =
				      call %% Line 885
					   'erlang':%% Line 885
						    '+'
					  (_18, %% Line 885
						1)
				  in  let <_20> =
					  call %% Line 885
					       'erlang':%% Line 885
							'*'
					      (_19, %% Line 885
						    2097133)
				      in  let <B2> =
					      call %% Line 885
						   'erlang':%% Line 885
							    'band'
						  (_20, %% Line 885
							2097151)
					  in  let <_26> =
						  call %% Line 886
						       'erlang':%% Line 886
								'band'
						      (%% Line 886
						       A3, %% Line 886
							   2097151)
					      in  let <_27> =
						      call %% Line 886
							   'erlang':%% Line 886
								    '+'
							  (_26, %% Line 886
								1)
						  in  let <_28> =
							  call %% Line 886
							       'erlang':%% Line 886
									'*'
							      (_27, %% Line 886
								    2097143)
						      in  let <B3> =
							      call %% Line 886
								   'erlang':%% Line 886
									    'band'
								  (_28, %% Line 886
									2097151)
							  in  let <_32> =
								  call %% Line 887
								       'erlang':%% Line 887
										'bsl'
								      (%% Line 887
								       B1, %% Line 887
									   43)
							      in  let <_31> =
								      call %% Line 887
									   'erlang':%% Line 887
										    'bsl'
									  (%% Line 887
									   B2, %% Line 887
									       22)
								  in  let <_33> =
									  call %% Line 887
									       'erlang':%% Line 887
											'bor'
									      (_32, _31)
								      in  let <_30> =
									      call %% Line 887
										   'erlang':%% Line 887
											    'bsl'
										  (%% Line 887
										   B3, %% Line 887
										       1)
									  in  let <_34> =
										  call %% Line 887
										       'erlang':%% Line 887
												'bor'
										      (_33, _30)
									      in  let <_35> =
										      call %% Line 887
											   'erlang':%% Line 887
												    'bor'
											  (_34, %% Line 887
												1)
										  in  let <_36> =
											  apply %% Line 887
												'exs1024_gen1024'/1
											      (_35)
										      in  %% Line 887
											  {_36,%% Line 888
											       []}
	  ( <_37> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_37})
		  -| [{'function_name',{'exs1024_seed',1}}] )
	    -| ['compiler_generated'] )
	end
'exs1024_gen1024'/1 =
    %% Line 895
    fun (_0) ->
	%% Line 896
	apply 'exs1024_gen1024'/3
	    (16, _0, [])
'exs1024_gen1024'/3 =
    %% Line 898
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <0,_8,L> when 'true' ->
	      %% Line 899
	      L
	  %% Line 900
	  <N,R,L> when 'true' ->
	      ( let <_18> =
		    call ( 'erlang'
			   -| ['compiler_generated'] ):( 'bsr'
							 -| ['compiler_generated'] )
			(%% Line 901
			 R, ( 12
			      -| ['compiler_generated'] ))
		in  ( let <R1> =
			  call ( 'erlang'
				 -| ['compiler_generated'] ):( 'bxor'
							       -| ['compiler_generated'] )
			      (%% Line 901
			       R, _18)
		      in  ( let <_6> =
				call ( 'erlang'
				       -| ['compiler_generated'] ):( 'band'
								     -| ['compiler_generated'] )
				    (R1, ( 549755813887
					   -| ['compiler_generated'] ))
			    in  ( let <_7> =
				      call ( 'erlang'
					     -| ['compiler_generated'] ):( 'bsl'
									   -| ['compiler_generated'] )
					  (_6, ( 25
						 -| ['compiler_generated'] ))
				  in  ( let <R2> =
					    call ( 'erlang'
						   -| ['compiler_generated'] ):( 'bxor'
										 -| ['compiler_generated'] )
						(R1, _7)
					in  ( let <_9> =
						  call ( 'erlang'
							 -| ['compiler_generated'] ):( 'bsr'
										       -| ['compiler_generated'] )
						      (R2, ( 27
							     -| ['compiler_generated'] ))
					      in  ( let <R3> =
							call ( 'erlang'
							       -| ['compiler_generated'] ):( 'bxor'
											     -| ['compiler_generated'] )
							    (R2, _9)
						    in  ( let <_13> =
							      call ( 'erlang'
								     -| ['compiler_generated'] ):( '*'
												   -| ['compiler_generated'] )
								  (R3, ( 2685821657736338717
									 -| ['compiler_generated'] ))
							  in  ( let <_14> =
								    call ( 'erlang'
									   -| ['compiler_generated'] ):( 'band'
													 -| ['compiler_generated'] )
									(_13, ( 18446744073709551615
										-| ['compiler_generated'] ))
								in  let <_4> =
									call %% Line 902
									     'erlang':%% Line 902
										      '-'
									    (%% Line 902
									     N, %% Line 902
										1)
								    in  %% Line 902
									apply 'exs1024_gen1024'/3
									    (_4, R3, [_14|L])
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	end
'exs1024_calc'/2 =
    %% Line 908
    fun (_0,_1) ->
	let <_5> =
	    call %% Line 909
		 'erlang':%% Line 909
			  'band'
		(_1, %% Line 909
		     8589934591)
	in  let <_6> =
		call %% Line 909
		     'erlang':%% Line 909
			      'bsl'
		    (_5, %% Line 909
			 31)
	    in  let <S11> =
		    call %% Line 909
			 'erlang':%% Line 909
				  'bxor'
			(_1, _6)
		in  let <_8> =
			call %% Line 910
			     'erlang':%% Line 910
				      'bsr'
			    (%% Line 910
			     S11, %% Line 910
				  11)
		    in  let <S12> =
			    call %% Line 910
				 'erlang':%% Line 910
					  'bxor'
				(%% Line 910
				 S11, _8)
			in  let <_10> =
				call %% Line 911
				     'erlang':%% Line 911
					      'bsr'
				    (_0, %% Line 911
					 30)
			    in  let <S01> =
				    call %% Line 911
					 'erlang':%% Line 911
						  'bxor'
					(_0, _10)
				in  let <NS1> =
					call %% Line 912
					     'erlang':%% Line 912
						      'bxor'
					    (%% Line 912
					     S01, %% Line 912
						  S12)
				    in  let <_15> =
					    call %% Line 913
						 'erlang':%% Line 913
							  '*'
						(%% Line 913
						 NS1, %% Line 913
						      1181783497276652981)
					in  let <_16> =
						call %% Line 913
						     'erlang':%% Line 913
							      'band'
						    (_15, %% Line 913
							  18446744073709551615)
					    in  %% Line 913
						{_16,NS1}
'exs1024_next'/1 =
    %% Line 917
    fun (_0) ->
	case _0 of
	  <{[S0|[S1|L3]],RL}> when 'true' ->
	      ( let <_5> =
		    call ( 'erlang'
			   -| ['compiler_generated'] ):( 'band'
							 -| ['compiler_generated'] )
			(%% Line 918
			 S1, ( 8589934591
			       -| ['compiler_generated'] ))
		in  ( let <_6> =
			  call ( 'erlang'
				 -| ['compiler_generated'] ):( 'bsl'
							       -| ['compiler_generated'] )
			      (_5, ( 31
				     -| ['compiler_generated'] ))
		      in  ( let <S11> =
				call ( 'erlang'
				       -| ['compiler_generated'] ):( 'bxor'
								     -| ['compiler_generated'] )
				    (%% Line 918
				     S1, _6)
			    in  ( let <_8> =
				      call ( 'erlang'
					     -| ['compiler_generated'] ):( 'bsr'
									   -| ['compiler_generated'] )
					  (S11, ( 11
						  -| ['compiler_generated'] ))
				  in  ( let <S12> =
					    call ( 'erlang'
						   -| ['compiler_generated'] ):( 'bxor'
										 -| ['compiler_generated'] )
						(S11, _8)
					in  ( let <_10> =
						  call ( 'erlang'
							 -| ['compiler_generated'] ):( 'bsr'
										       -| ['compiler_generated'] )
						      (%% Line 918
						       S0, ( 30
							     -| ['compiler_generated'] ))
					      in  ( let <S01> =
							call ( 'erlang'
							       -| ['compiler_generated'] ):( 'bxor'
											     -| ['compiler_generated'] )
							    (%% Line 918
							     S0, _10)
						    in  ( let <NS1> =
							      call ( 'erlang'
								     -| ['compiler_generated'] ):( 'bxor'
												   -| ['compiler_generated'] )
								  (S01, S12)
							  in  ( let <_15> =
								    call ( 'erlang'
									   -| ['compiler_generated'] ):( '*'
													 -| ['compiler_generated'] )
									(NS1, ( 1181783497276652981
										-| ['compiler_generated'] ))
								in  ( let <_16> =
									  call ( 'erlang'
										 -| ['compiler_generated'] ):( 'band'
													       -| ['compiler_generated'] )
									      (_15, ( 18446744073709551615
										      -| ['compiler_generated'] ))
								      in  %% Line 919
									  {_16,{[NS1|L3],[S0|RL]}}
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	  %% Line 920
	  <{[H|[]],RL}> when 'true' ->
	      let <_2> =
		  call %% Line 921
		       'lists':%% Line 921
			       'reverse'
		      (%% Line 921
		       RL)
	      in  ( case %% Line 921
			 <H,_2> of
		      ( <S0,( [S1|L3]
			      -| ['compiler_generated'] )> when ( 'true'
								  -| ['compiler_generated'] ) ->
			    ( case ( apply 'exs1024_calc'/2
					 (S0, S1)
				     -| ['compiler_generated'] ) of
				( <( {X,NS1}
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( {X,( {( [NS1|L3]
						-| ['compiler_generated'] ),( [S0|( []
										    -| ['compiler_generated'] )]
									      -| ['compiler_generated'] )}
					     -| ['compiler_generated'] )}
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_1> when ( 'true'
					      -| ['compiler_generated'] ) ->
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'badmatch'
						  -| ['compiler_generated'] ),_1}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_29,( []
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
			    ( let <_32> =
				  call %% Line 921
				       ( 'lists'
					 -| ['compiler_generated'] ):%% Line 921
								     ( 'reverse'
								       -| ['compiler_generated'] )
				      (( []
					 -| ['compiler_generated'] ))
			      in  ( let <_33> =
					[_29|_32]
				    in  %% Line 922
					( apply 'exs1024_next'/1
					      (( {_33,( []
							-| ['compiler_generated'] )}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <( _34
			   -| ['compiler_generated'] ),( _35
							 -| ['compiler_generated'] )> when ( 'true'
											     -| ['compiler_generated'] ) ->
			    ( let <_25> =
				  [( _34
				     -| ['compiler_generated'] )|( _35
								   -| ['compiler_generated'] )]
			      in  ( let <_4> = {( _25
					   -| ['compiler_generated'] ),( []
									 -| ['compiler_generated'] )}
				    in  ( primop ( 'match_fail'
						   -| ['compiler_generated'] )
					      (( {( 'function_clause'
						    -| ['compiler_generated'] ),_4}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4})
		  -| [{'function_name',{'exs1024_next',1}}] )
	    -| ['compiler_generated'] )
	end
'exs1024_jump'/1 =
    %% Line 956
    fun (_0) ->
	case _0 of
	  <{Alg,_@r0 = {L,RL}}> when 'true' ->
	      let <P> =
		  call %% Line 957
		       'erlang':%% Line 957
				'length'
		      (%% Line 957
		       RL)
	      in  let <AS> =
		      apply %% Line 958
			    'exs1024_jump'/6
			  (%% Line 958
			   _@r0, %% Line 959
				 [0|[0|[0|[0|[0|[0|[0|[0|[0|[0|[0|[0|[0|[0|[0|[0]]]]]]]]]]]]]]]], %% Line 960
												  [114527183042123105|[160423628620659260|[284733707589872850|[164435740288387503|[259572741793888962|[215793509705812255|[228241955430903492|[221708554683218499|[212006596549813798|[139215019150089363|[23964000621384961|[55201052708218217|[112969240468397636|[22130735059088892|[244278597799509466|[220175845070832114|[43243288828]]]]]]]]]]]]]]]]], %% Line 960
																																																							      10185424423732253, %% Line 960
																																																										 58, %% Line 960
																																																										     1024)
		  in  let <_3> =
			  call %% Line 961
			       'erlang':%% Line 961
					'-'
			      (%% Line 961
			       16, %% Line 961
				   P)
		      in  %% Line 961
			  case call 'lists':'split'
				   (_3, AS) of
			    <{ASL,ASR}> when 'true' ->
				let <_5> =
				    call %% Line 962
					 'lists':%% Line 962
						 'reverse'
					(%% Line 962
					 ASR)
				in  %% Line 962
				    {Alg,{ASL,_5}}
			    ( <_4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_4})
			      -| ['compiler_generated'] )
			  end
	  ( <_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6})
		  -| [{'function_name',{'exs1024_jump',1}}] )
	    -| ['compiler_generated'] )
	end
'exs1024_jump'/6 =
    %% Line 964
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <_30,AS,_31,_32,_33,0> when 'true' ->
	      %% Line 965
	      AS
	  %% Line 966
	  <S,AS,[H|T],_34,0,TN> when 'true' ->
	      %% Line 967
	      apply 'exs1024_jump'/6
		  (S, AS, T, H, 58, TN)
	  %% Line 968
	  <{L,RL},AS,JL,J,N,TN> when 'true' ->
	      %% Line 969
	      case ( case <L,RL> of
		       ( <( [S0|( [S1|L3]
				  -| ['compiler_generated'] )]
			    -| ['compiler_generated'] ),_39> when ( 'true'
								    -| ['compiler_generated'] ) ->
			     ( case ( apply 'exs1024_calc'/2
					  (S0, S1)
				      -| ['compiler_generated'] ) of
				 ( <( {X,NS1}
				      -| ['compiler_generated'] )> when ( 'true'
									  -| ['compiler_generated'] ) ->
				       ( {X,( {( [NS1|L3]
						 -| ['compiler_generated'] ),( [S0|_39]
									       -| ['compiler_generated'] )}
					      -| ['compiler_generated'] )}
					 -| ['compiler_generated'] )
				   -| ['compiler_generated'] )
				 ( <_40> when ( 'true'
						-| ['compiler_generated'] ) ->
				       ( primop ( 'match_fail'
						  -| ['compiler_generated'] )
					     (( {( 'badmatch'
						   -| ['compiler_generated'] ),_40}
						-| ['compiler_generated'] ))
					 -| ['compiler_generated'] )
				   -| ['compiler_generated'] )
			       end
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       ( <( [H|( []
				 -| ['compiler_generated'] )]
			    -| ['compiler_generated'] ),_41> when ( 'true'
								    -| ['compiler_generated'] ) ->
			     ( let <_42> =
				   call ( 'lists'
					  -| ['compiler_generated'] ):( 'reverse'
									-| ['compiler_generated'] )
				       (_41)
			       in  ( let <NL> =
					 [H|_42]
				     in  ( apply 'exs1024_next'/1
					       (( {NL,( []
							-| ['compiler_generated'] )}
						  -| ['compiler_generated'] ))
					   -| ['compiler_generated'] )
				     -| ['compiler_generated'] )
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       ( <( _37
			    -| ['compiler_generated'] ),( _38
							  -| ['compiler_generated'] )> when ( 'true'
											      -| ['compiler_generated'] ) ->
			     ( let <_44> = {( _37
				      -| ['compiler_generated'] ),( _38
								    -| ['compiler_generated'] )}
			       in  ( primop ( 'match_fail'
					      -| ['compiler_generated'] )
					 (( {( 'function_clause'
					       -| ['compiler_generated'] ),_44}
					    -| ['compiler_generated'] ))
				     -| ['compiler_generated'] )
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		     end
		     -| ['compiler_generated'] ) of
		<{_35,NS}> when 'true' ->
		    %% Line 970
		    case call 'erlang':'band'
			     (J, 1) of
		      %% Line 971
		      <1> when 'true' ->
			  let <_15> =
			      fun (_12,_11) ->
				  %% Line 972
				  call 'erlang':'bxor'
				      (_12, _11)
			  in  let <_9> =
				  call %% Line 973
				       'lists':%% Line 973
					       'reverse'
				      (%% Line 973
				       RL)
			      in  let <_10> =
				      call %% Line 973
					   'erlang':%% Line 973
						    '++'
					  (%% Line 973
					   L, _9)
				  in  let <AS2> =
					  call %% Line 972
					       'lists':%% Line 972
						       'zipwith'
					      (_15, %% Line 973
						    AS, _10)
				      in  let <_19> =
					      call %% Line 974
						   'erlang':%% Line 974
							    'bsr'
						  (%% Line 974
						   J, %% Line 974
						      1)
					  in  let <_18> =
						  call %% Line 974
						       'erlang':%% Line 974
								'-'
						      (%% Line 974
						       N, %% Line 974
							  1)
					      in  let <_17> =
						      call %% Line 974
							   'erlang':%% Line 974
								    '-'
							  (%% Line 974
							   TN, %% Line 974
							       1)
						  in  %% Line 974
						      apply 'exs1024_jump'/6
							  (NS, AS2, JL, _19, _18, _17)
		      %% Line 975
		      <0> when 'true' ->
			  let <_22> =
			      call %% Line 976
				   'erlang':%% Line 976
					    'bsr'
				  (%% Line 976
				   J, %% Line 976
				      1)
			  in  let <_21> =
				  call %% Line 976
				       'erlang':%% Line 976
						'-'
				      (%% Line 976
				       N, %% Line 976
					  1)
			      in  let <_20> =
				      call %% Line 976
					   'erlang':%% Line 976
						    '-'
					  (%% Line 976
					   TN, %% Line 976
					       1)
				  in  %% Line 976
				      apply 'exs1024_jump'/6
					  (NS, AS, JL, _22, _21, _20)
		      ( <_23> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_23})
			-| ['compiler_generated'] )
		    end
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_6})
		  -| ['compiler_generated'] )
	      end
	  ( <_29,_28,_27,_26,_25,_24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_29,_28,_27,_26,_25,_24})
		  -| [{'function_name',{'exs1024_jump',6}}] )
	    -| ['compiler_generated'] )
	end
'exro928_seed'/1 =
    %% Line 1066
    fun (_0) ->
	case _0 of
	  <L>
	      when call 'erlang':'is_list'
		    (_0) ->
	      let <_1> =
		  apply %% Line 1067
			'seed58_nz'/2
		      (%% Line 1067
		       16, %% Line 1067
			   L)
	      in  %% Line 1067
		  {_1,[]}
	  %% Line 1068
	  <X>
	      when call 'erlang':'is_integer'
		    (_0) ->
	      let <_4> =
		  call %% Line 1069
		       'erlang':%% Line 1069
				'band'
		      (%% Line 1069
		       X, %% Line 1069
			  18446744073709551615)
	      in  let <_5> =
		      apply %% Line 1069
			    'seed58'/2
			  (%% Line 1069
			   16, _4)
		  in  %% Line 1069
		      {_5,[]}
	  %% Line 1072
	  <{A1,A2,A3}> when 'true' ->
	      let <_8> =
		  call %% Line 1073
		       'erlang':%% Line 1073
				'band'
		      (%% Line 1073
		       A1, %% Line 1073
			   18446744073709551615)
	      in  %% Line 1073
		  case apply 'seed58'/1
			   (_8) of
		    <{S0,X0}> when 'true' ->
			let <_12> =
			    call %% Line 1074
				 'erlang':%% Line 1074
					  'band'
				(%% Line 1074
				 A2, %% Line 1074
				     18446744073709551615)
			in  let <_13> =
				call %% Line 1074
				     'erlang':%% Line 1074
					      'bxor'
				    (_12, %% Line 1074
					  X0)
			    in  %% Line 1074
				case apply 'seed58'/1
					 (_13) of
				  <{S1,X1}> when 'true' ->
				      let <_17> =
					  call %% Line 1075
					       'erlang':%% Line 1075
							'band'
					      (%% Line 1075
					       A3, %% Line 1075
						   18446744073709551615)
				      in  let <_18> =
					      call %% Line 1075
						   'erlang':%% Line 1075
							    'bxor'
						  (_17, %% Line 1075
							X1)
					  in  %% Line 1075
					      case apply 'seed58'/1
						       (_18) of
						<{S2,X2}> when 'true' ->
						    let <_20> =
							apply %% Line 1076
							      'seed58'/2
							    (%% Line 1076
							     13, %% Line 1076
								 X2)
						    in  %% Line 1076
							{[S0|[S1|[S2|_20]]],[]}
						( <_19> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_19})
						  -| ['compiler_generated'] )
					      end
				  ( <_14> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_14})
				    -| ['compiler_generated'] )
				end
		    ( <_9> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_9})
		      -| ['compiler_generated'] )
		  end
	  ( <_21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_21})
		  -| [{'function_name',{'exro928_seed',1}}] )
	    -| ['compiler_generated'] )
	end
'exro928ss_next'/1 =
    %% Line 1081
    fun (_0) ->
	case _0 of
	  <{[S15|[S0|Ss]],Rs}> when 'true' ->
	      ( let <Q> =
		    call %% Line 1119
			 ( 'erlang'
			   -| ['compiler_generated'] ):%% Line 1119
						       ( 'bxor'
							 -| ['compiler_generated'] )
			(%% Line 1082
			 S15, %% Line 1082
			      S0)
		in  ( let <_15> =
			  call %% Line 1120
			       ( 'erlang'
				 -| ['compiler_generated'] ):%% Line 1120
							     ( 'band'
							       -| ['compiler_generated'] )
			      (%% Line 1082
			       S0, %% Line 1120
				   ( 16383
				     -| ['compiler_generated'] ))
		      in  ( let <_16> =
				call %% Line 1120
				     ( 'erlang'
				       -| ['compiler_generated'] ):%% Line 1120
								   ( 'bsl'
								     -| ['compiler_generated'] )
				    (_15, %% Line 1120
					  ( 44
					    -| ['compiler_generated'] ))
			    in  ( let <_11> =
				      call %% Line 1120
					   ( 'erlang'
					     -| ['compiler_generated'] ):%% Line 1120
									 ( 'bsr'
									   -| ['compiler_generated'] )
					  (%% Line 1082
					   S0, %% Line 1120
					       ( 14
						 -| ['compiler_generated'] ))
				  in  ( let <_17> =
					    call %% Line 1120
						 ( 'erlang'
						   -| ['compiler_generated'] ):%% Line 1120
									       ( 'bor'
										 -| ['compiler_generated'] )
						(_16, _11)
					in  ( let <_18> =
						  call %% Line 1120
						       ( 'erlang'
							 -| ['compiler_generated'] ):%% Line 1120
										     ( 'bxor'
										       -| ['compiler_generated'] )
						      (_17, %% Line 1120
							    Q)
					      in  ( let <_8> =
							call %% Line 1120
							     ( 'erlang'
							       -| ['compiler_generated'] ):%% Line 1120
											   ( 'band'
											     -| ['compiler_generated'] )
							    (%% Line 1120
							     Q, %% Line 1120
								( 562949953421311
								  -| ['compiler_generated'] ))
						    in  ( let <_9> =
							      call %% Line 1120
								   ( 'erlang'
								     -| ['compiler_generated'] ):%% Line 1120
												 ( 'bsl'
												   -| ['compiler_generated'] )
								  (_8, %% Line 1120
								       ( 9
									 -| ['compiler_generated'] ))
							  in  ( let <NewS15> =
								    call %% Line 1120
									 ( 'erlang'
									   -| ['compiler_generated'] ):%% Line 1120
												       ( 'bxor'
													 -| ['compiler_generated'] )
									(_18, _9)
								in  ( let <_25> =
									  call %% Line 1121
									       ( 'erlang'
										 -| ['compiler_generated'] ):%% Line 1121
													     ( 'band'
													       -| ['compiler_generated'] )
									      (%% Line 1121
									       Q, %% Line 1121
										  ( 8191
										    -| ['compiler_generated'] ))
								      in  ( let <_26> =
										call %% Line 1121
										     ( 'erlang'
										       -| ['compiler_generated'] ):%% Line 1121
														   ( 'bsl'
														     -| ['compiler_generated'] )
										    (_25, %% Line 1121
											  ( 45
											    -| ['compiler_generated'] ))
									    in  ( let <_21> =
										      call %% Line 1121
											   ( 'erlang'
											     -| ['compiler_generated'] ):%% Line 1121
															 ( 'bsr'
															   -| ['compiler_generated'] )
											  (%% Line 1121
											   Q, %% Line 1121
											      ( 13
												-| ['compiler_generated'] ))
										  in  ( let <NewS0> =
											    call %% Line 1121
												 ( 'erlang'
												   -| ['compiler_generated'] ):%% Line 1121
															       ( 'bor'
																 -| ['compiler_generated'] )
												(_26, _21)
											in  let <SR> =
												{%% Line 1122
												 ( [NewS0|Ss]
												   -| ['compiler_generated'] ),%% Line 1122
															       ( [NewS15|Rs]
																 -| ['compiler_generated'] )}
											    in  let <_7> =
												    call %% Line 1087
													 'erlang':%% Line 1087
														  'band'
													(%% Line 1087
													 S0, %% Line 1087
													     72057594037927935)
												in  let <_43> =
													call %% Line 1087
													     'erlang':%% Line 1087
														      'bsl'
													    (_7, %% Line 1087
														 2)
												    in  let <_44> =
													    call %% Line 1087
														 'erlang':%% Line 1087
															  '+'
														(%% Line 1087
														 S0, _43)
													in  let <V_0> =
														call %% Line 1087
														     'erlang':%% Line 1087
															      'band'
														    (_44, %% Line 1087
															  288230376151711743)
													    in  let <_41> =
														    call %% Line 1087
															 'erlang':%% Line 1087
																  'band'
															(%% Line 1087
															 V_0, %% Line 1087
															      2251799813685247)
														in  let <_42> =
															call %% Line 1087
															     'erlang':%% Line 1087
																      'bsl'
															    (_41, %% Line 1087
																  7)
														    in  let <_12> =
															    call %% Line 1087
																 'erlang':%% Line 1087
																	  'bsr'
																(%% Line 1087
																 V_0, %% Line 1087
																      51)
															in  let <V_1> =
																call %% Line 1087
																     'erlang':%% Line 1087
																	      'bor'
																    (_42, _12)
															    in  let <_24> =
																    call %% Line 1087
																	 'erlang':%% Line 1087
																		  'band'
																	(%% Line 1087
																	 V_1, %% Line 1087
																	      36028797018963967)
																in  let <_45> =
																	call %% Line 1087
																	     'erlang':%% Line 1087
																		      'bsl'
																	    (_24, %% Line 1087
																		  3)
																    in  let <_46> =
																	    call %% Line 1087
																		 'erlang':%% Line 1087
																			  '+'
																		(%% Line 1087
																		 V_1, _45)
																	in  let <_27> =
																		call %% Line 1087
																		     'erlang':%% Line 1087
																			      'band'
																		    (_46, %% Line 1087
																			  288230376151711743)
																	    in  %% Line 1087
																		{_27,SR}
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	  %% Line 1095
	  <{[S15|[]],Rs}> when 'true' ->
	      let <_28> =
		  call %% Line 1096
		       'lists':%% Line 1096
			       'reverse'
		      (%% Line 1096
		       Rs)
	      in  %% Line 1096
		  apply 'exro928ss_next'/1
		      ({[S15|_28],[]})
	  ( <_29> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_29})
		  -| [{'function_name',{'exro928ss_next',1}}] )
	    -| ['compiler_generated'] )
	end
'exro928_next'/1 =
    %% Line 1099
    fun (_0) ->
	case _0 of
	  <{[S15|[S0|Ss]],Rs}> when 'true' ->
	      ( let <Q> =
		    call %% Line 1119
			 ( 'erlang'
			   -| ['compiler_generated'] ):%% Line 1119
						       ( 'bxor'
							 -| ['compiler_generated'] )
			(%% Line 1100
			 S15, %% Line 1100
			      S0)
		in  ( let <_15> =
			  call %% Line 1120
			       ( 'erlang'
				 -| ['compiler_generated'] ):%% Line 1120
							     ( 'band'
							       -| ['compiler_generated'] )
			      (%% Line 1100
			       S0, %% Line 1120
				   ( 16383
				     -| ['compiler_generated'] ))
		      in  ( let <_16> =
				call %% Line 1120
				     ( 'erlang'
				       -| ['compiler_generated'] ):%% Line 1120
								   ( 'bsl'
								     -| ['compiler_generated'] )
				    (_15, %% Line 1120
					  ( 44
					    -| ['compiler_generated'] ))
			    in  ( let <_11> =
				      call %% Line 1120
					   ( 'erlang'
					     -| ['compiler_generated'] ):%% Line 1120
									 ( 'bsr'
									   -| ['compiler_generated'] )
					  (%% Line 1100
					   S0, %% Line 1120
					       ( 14
						 -| ['compiler_generated'] ))
				  in  ( let <_17> =
					    call %% Line 1120
						 ( 'erlang'
						   -| ['compiler_generated'] ):%% Line 1120
									       ( 'bor'
										 -| ['compiler_generated'] )
						(_16, _11)
					in  ( let <_18> =
						  call %% Line 1120
						       ( 'erlang'
							 -| ['compiler_generated'] ):%% Line 1120
										     ( 'bxor'
										       -| ['compiler_generated'] )
						      (_17, %% Line 1120
							    Q)
					      in  ( let <_8> =
							call %% Line 1120
							     ( 'erlang'
							       -| ['compiler_generated'] ):%% Line 1120
											   ( 'band'
											     -| ['compiler_generated'] )
							    (%% Line 1120
							     Q, %% Line 1120
								( 562949953421311
								  -| ['compiler_generated'] ))
						    in  ( let <_9> =
							      call %% Line 1120
								   ( 'erlang'
								     -| ['compiler_generated'] ):%% Line 1120
												 ( 'bsl'
												   -| ['compiler_generated'] )
								  (_8, %% Line 1120
								       ( 9
									 -| ['compiler_generated'] ))
							  in  ( let <NewS15> =
								    call %% Line 1120
									 ( 'erlang'
									   -| ['compiler_generated'] ):%% Line 1120
												       ( 'bxor'
													 -| ['compiler_generated'] )
									(_18, _9)
								in  ( let <_25> =
									  call %% Line 1121
									       ( 'erlang'
										 -| ['compiler_generated'] ):%% Line 1121
													     ( 'band'
													       -| ['compiler_generated'] )
									      (%% Line 1121
									       Q, %% Line 1121
										  ( 8191
										    -| ['compiler_generated'] ))
								      in  ( let <_26> =
										call %% Line 1121
										     ( 'erlang'
										       -| ['compiler_generated'] ):%% Line 1121
														   ( 'bsl'
														     -| ['compiler_generated'] )
										    (_25, %% Line 1121
											  ( 45
											    -| ['compiler_generated'] ))
									    in  ( let <_21> =
										      call %% Line 1121
											   ( 'erlang'
											     -| ['compiler_generated'] ):%% Line 1121
															 ( 'bsr'
															   -| ['compiler_generated'] )
											  (%% Line 1121
											   Q, %% Line 1121
											      ( 13
												-| ['compiler_generated'] ))
										  in  ( let <NewS0> =
											    call %% Line 1121
												 ( 'erlang'
												   -| ['compiler_generated'] ):%% Line 1121
															       ( 'bor'
																 -| ['compiler_generated'] )
												(_26, _21)
											in  let <SR> =
												{%% Line 1122
												 ( [NewS0|Ss]
												   -| ['compiler_generated'] ),%% Line 1122
															       ( [NewS15|Rs]
																 -| ['compiler_generated'] )}
											    in  %% Line 1101
												{{S15,S0},SR}
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	  %% Line 1102
	  <{[S15|[]],Rs}> when 'true' ->
	      let <_2> =
		  call %% Line 1103
		       'lists':%% Line 1103
			       'reverse'
		      (%% Line 1103
		       Rs)
	      in  %% Line 1103
		  apply 'exro928_next'/1
		      ({[S15|_2],[]})
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'exro928_next',1}}] )
	    -| ['compiler_generated'] )
	end
'exro928_next_state'/1 =
    %% Line 1107
    fun (_0) ->
	case _0 of
	  <{[S15|[S0|Ss]],Rs}> when 'true' ->
	      ( let <Q> =
		    call %% Line 1119
			 ( 'erlang'
			   -| ['compiler_generated'] ):%% Line 1119
						       ( 'bxor'
							 -| ['compiler_generated'] )
			(%% Line 1108
			 S15, %% Line 1108
			      S0)
		in  ( let <_15> =
			  call %% Line 1120
			       ( 'erlang'
				 -| ['compiler_generated'] ):%% Line 1120
							     ( 'band'
							       -| ['compiler_generated'] )
			      (%% Line 1108
			       S0, %% Line 1120
				   ( 16383
				     -| ['compiler_generated'] ))
		      in  ( let <_16> =
				call %% Line 1120
				     ( 'erlang'
				       -| ['compiler_generated'] ):%% Line 1120
								   ( 'bsl'
								     -| ['compiler_generated'] )
				    (_15, %% Line 1120
					  ( 44
					    -| ['compiler_generated'] ))
			    in  ( let <_11> =
				      call %% Line 1120
					   ( 'erlang'
					     -| ['compiler_generated'] ):%% Line 1120
									 ( 'bsr'
									   -| ['compiler_generated'] )
					  (%% Line 1108
					   S0, %% Line 1120
					       ( 14
						 -| ['compiler_generated'] ))
				  in  ( let <_17> =
					    call %% Line 1120
						 ( 'erlang'
						   -| ['compiler_generated'] ):%% Line 1120
									       ( 'bor'
										 -| ['compiler_generated'] )
						(_16, _11)
					in  ( let <_18> =
						  call %% Line 1120
						       ( 'erlang'
							 -| ['compiler_generated'] ):%% Line 1120
										     ( 'bxor'
										       -| ['compiler_generated'] )
						      (_17, %% Line 1120
							    Q)
					      in  ( let <_8> =
							call %% Line 1120
							     ( 'erlang'
							       -| ['compiler_generated'] ):%% Line 1120
											   ( 'band'
											     -| ['compiler_generated'] )
							    (%% Line 1120
							     Q, %% Line 1120
								( 562949953421311
								  -| ['compiler_generated'] ))
						    in  ( let <_9> =
							      call %% Line 1120
								   ( 'erlang'
								     -| ['compiler_generated'] ):%% Line 1120
												 ( 'bsl'
												   -| ['compiler_generated'] )
								  (_8, %% Line 1120
								       ( 9
									 -| ['compiler_generated'] ))
							  in  ( let <NewS15> =
								    call %% Line 1120
									 ( 'erlang'
									   -| ['compiler_generated'] ):%% Line 1120
												       ( 'bxor'
													 -| ['compiler_generated'] )
									(_18, _9)
								in  ( let <_25> =
									  call %% Line 1121
									       ( 'erlang'
										 -| ['compiler_generated'] ):%% Line 1121
													     ( 'band'
													       -| ['compiler_generated'] )
									      (%% Line 1121
									       Q, %% Line 1121
										  ( 8191
										    -| ['compiler_generated'] ))
								      in  ( let <_26> =
										call %% Line 1121
										     ( 'erlang'
										       -| ['compiler_generated'] ):%% Line 1121
														   ( 'bsl'
														     -| ['compiler_generated'] )
										    (_25, %% Line 1121
											  ( 45
											    -| ['compiler_generated'] ))
									    in  ( let <_21> =
										      call %% Line 1121
											   ( 'erlang'
											     -| ['compiler_generated'] ):%% Line 1121
															 ( 'bsr'
															   -| ['compiler_generated'] )
											  (%% Line 1121
											   Q, %% Line 1121
											      ( 13
												-| ['compiler_generated'] ))
										  in  ( let <NewS0> =
											    call %% Line 1121
												 ( 'erlang'
												   -| ['compiler_generated'] ):%% Line 1121
															       ( 'bor'
																 -| ['compiler_generated'] )
												(_26, _21)
											in  %% Line 1122
											    ( {( [NewS0|Ss]
												 -| ['compiler_generated'] ),( [NewS15|Rs]
															       -| ['compiler_generated'] )}
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	  %% Line 1109
	  <{[S15|[]],Rs}> when 'true' ->
	      %% Line 1110
	      case call 'lists':'reverse'
		       (Rs) of
		<[S0|Ss]> when 'true' ->
		    ( let <Q> =
			  call %% Line 1119
			       ( 'erlang'
				 -| ['compiler_generated'] ):%% Line 1119
							     ( 'bxor'
							       -| ['compiler_generated'] )
			      (%% Line 1111
			       S15, %% Line 1111
				    S0)
		      in  ( let <_15> =
				call %% Line 1120
				     ( 'erlang'
				       -| ['compiler_generated'] ):%% Line 1120
								   ( 'band'
								     -| ['compiler_generated'] )
				    (%% Line 1111
				     S0, %% Line 1120
					 ( 16383
					   -| ['compiler_generated'] ))
			    in  ( let <_16> =
				      call %% Line 1120
					   ( 'erlang'
					     -| ['compiler_generated'] ):%% Line 1120
									 ( 'bsl'
									   -| ['compiler_generated'] )
					  (_15, %% Line 1120
						( 44
						  -| ['compiler_generated'] ))
				  in  ( let <_11> =
					    call %% Line 1120
						 ( 'erlang'
						   -| ['compiler_generated'] ):%% Line 1120
									       ( 'bsr'
										 -| ['compiler_generated'] )
						(%% Line 1111
						 S0, %% Line 1120
						     ( 14
						       -| ['compiler_generated'] ))
					in  ( let <_17> =
						  call %% Line 1120
						       ( 'erlang'
							 -| ['compiler_generated'] ):%% Line 1120
										     ( 'bor'
										       -| ['compiler_generated'] )
						      (_16, _11)
					      in  ( let <_18> =
							call %% Line 1120
							     ( 'erlang'
							       -| ['compiler_generated'] ):%% Line 1120
											   ( 'bxor'
											     -| ['compiler_generated'] )
							    (_17, %% Line 1120
								  Q)
						    in  ( let <_8> =
							      call %% Line 1120
								   ( 'erlang'
								     -| ['compiler_generated'] ):%% Line 1120
												 ( 'band'
												   -| ['compiler_generated'] )
								  (%% Line 1120
								   Q, %% Line 1120
								      ( 562949953421311
									-| ['compiler_generated'] ))
							  in  ( let <_9> =
								    call %% Line 1120
									 ( 'erlang'
									   -| ['compiler_generated'] ):%% Line 1120
												       ( 'bsl'
													 -| ['compiler_generated'] )
									(_8, %% Line 1120
									     ( 9
									       -| ['compiler_generated'] ))
								in  ( let <NewS15> =
									  call %% Line 1120
									       ( 'erlang'
										 -| ['compiler_generated'] ):%% Line 1120
													     ( 'bxor'
													       -| ['compiler_generated'] )
									      (_18, _9)
								      in  ( let <_25> =
										call %% Line 1121
										     ( 'erlang'
										       -| ['compiler_generated'] ):%% Line 1121
														   ( 'band'
														     -| ['compiler_generated'] )
										    (%% Line 1121
										     Q, %% Line 1121
											( 8191
											  -| ['compiler_generated'] ))
									    in  ( let <_26> =
										      call %% Line 1121
											   ( 'erlang'
											     -| ['compiler_generated'] ):%% Line 1121
															 ( 'bsl'
															   -| ['compiler_generated'] )
											  (_25, %% Line 1121
												( 45
												  -| ['compiler_generated'] ))
										  in  ( let <_21> =
											    call %% Line 1121
												 ( 'erlang'
												   -| ['compiler_generated'] ):%% Line 1121
															       ( 'bsr'
																 -| ['compiler_generated'] )
												(%% Line 1121
												 Q, %% Line 1121
												    ( 13
												      -| ['compiler_generated'] ))
											in  ( let <NewS0> =
												  call %% Line 1121
												       ( 'erlang'
													 -| ['compiler_generated'] ):%% Line 1121
																     ( 'bor'
																       -| ['compiler_generated'] )
												      (_26, _21)
											      in  %% Line 1122
												  ( {( [NewS0|Ss]
												       -| ['compiler_generated'] ),( [NewS15|( []
																	       -| ['compiler_generated'] )]
																     -| ['compiler_generated'] )}
												    -| ['compiler_generated'] )
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_1})
		  -| ['compiler_generated'] )
	      end
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'exro928_next_state',1}}] )
	    -| ['compiler_generated'] )
	end
'exro928_next_state'/4 =
    %% Line 1113
    fun (_0,_1,_2,_3) ->
	let <Q> =
	    call %% Line 1119
		 'erlang':%% Line 1119
			  'bxor'
		(_2, _3)
	in  let <_15> =
		call %% Line 1120
		     'erlang':%% Line 1120
			      'band'
		    (_3, %% Line 1120
			 16383)
	    in  let <_16> =
		    call %% Line 1120
			 'erlang':%% Line 1120
				  'bsl'
			(_15, %% Line 1120
			      44)
		in  let <_11> =
			call %% Line 1120
			     'erlang':%% Line 1120
				      'bsr'
			    (_3, %% Line 1120
				 14)
		    in  let <_17> =
			    call %% Line 1120
				 'erlang':%% Line 1120
					  'bor'
				(_16, _11)
			in  let <_18> =
				call %% Line 1120
				     'erlang':%% Line 1120
					      'bxor'
				    (_17, %% Line 1120
					  Q)
			    in  let <_8> =
				    call %% Line 1120
					 'erlang':%% Line 1120
						  'band'
					(%% Line 1120
					 Q, %% Line 1120
					    562949953421311)
				in  let <_9> =
					call %% Line 1120
					     'erlang':%% Line 1120
						      'bsl'
					    (_8, %% Line 1120
						 9)
				    in  let <NewS15> =
					    call %% Line 1120
						 'erlang':%% Line 1120
							  'bxor'
						(_18, _9)
					in  let <_25> =
						call %% Line 1121
						     'erlang':%% Line 1121
							      'band'
						    (%% Line 1121
						     Q, %% Line 1121
							8191)
					    in  let <_26> =
						    call %% Line 1121
							 'erlang':%% Line 1121
								  'bsl'
							(_25, %% Line 1121
							      45)
						in  let <_21> =
							call %% Line 1121
							     'erlang':%% Line 1121
								      'bsr'
							    (%% Line 1121
							     Q, %% Line 1121
								13)
						    in  let <NewS0> =
							    call %% Line 1121
								 'erlang':%% Line 1121
									  'bor'
								(_26, _21)
							in  %% Line 1122
							    {[NewS0|_0],[NewS15|_1]}
'exro928ss_uniform'/1 =
    %% Line 1125
    fun (_0) ->
	case _0 of
	  <{Alg,SR}> when 'true' ->
	      %% Line 1126
	      case apply 'exro928ss_next'/1
		       (SR) of
		<{V,NewSR}> when 'true' ->
		    let <_3> =
			call %% Line 1127
			     'erlang':%% Line 1127
				      'bsr'
			    (%% Line 1127
			     V, %% Line 1127
				5)
		    in  let <_4> =
			    call %% Line 1127
				 'erlang':%% Line 1127
					  '*'
				(_3, %% Line 1127
				     1.11022302462515654042e-16)
			in  %% Line 1127
			    {_4,{Alg,NewSR}}
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_1})
		  -| ['compiler_generated'] )
	      end
	  ( <_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5})
		  -| [{'function_name',{'exro928ss_uniform',1}}] )
	    -| ['compiler_generated'] )
	end
'exro928ss_uniform'/2 =
    %% Line 1129
    fun (_0,_1) ->
	case <_0,_1> of
	  <Range,{Alg,SR}> when 'true' ->
	      %% Line 1130
	      case apply 'exro928ss_next'/1
		       (SR) of
		<{V,NewSR}> when 'true' ->
		    let <MaxMinusRange> =
			call %% Line 1131
			     'erlang':%% Line 1131
				      '-'
			    (%% Line 1131
			     288230376151711744, %% Line 1131
						 Range)
		    in  %% Line 1132
			case <> of
			  <>
			      when call 'erlang':'=<'
				    (0,
				     MaxMinusRange) ->
			      case <> of
				<>
				    when call 'erlang':'<'
					  (V,
					   Range) ->
				    let <_5> =
					call 'erlang':'+'
					    (V, 1)
				    in  {_5,{Alg,NewSR}}
				<> when 'true' ->
				    let <I> =
					call 'erlang':'rem'
					    (V, Range)
				    in  case <> of
					  <>
					      when try
						    let <_7> =
							call 'erlang':'-'
							    (V, I)
						    in  call 'erlang':'=<'
							    (_7, MaxMinusRange)
						of <Try> ->
						    Try
						catch <T,R> ->
						    'false' ->
					      let <_8> =
						  call 'erlang':'+'
						      (I, 1)
					      in  {_8,{Alg,NewSR}}
					  <> when 'true' ->
					      apply 'exro928ss_uniform'/2
						  (Range, {Alg,NewSR})
					end
			      end
			  <> when 'true' ->
			      apply 'uniform_range'/4
				  (Range, Alg, NewSR, V)
			end
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9})
		  -| [{'function_name',{'exro928ss_uniform',2}}] )
	    -| ['compiler_generated'] )
	end
'exro928_jump'/1 =
    %% Line 1137
    fun (_0) ->
	case _0 of
	  <{Alg,SR}> when 'true' ->
	      let <_1> =
		  apply %% Line 1138
			'exro928_jump_2pow512'/1
		      (%% Line 1138
		       SR)
	      in  %% Line 1138
		  {Alg,_1}
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'exro928_jump',1}}] )
	    -| ['compiler_generated'] )
	end
'exro928_jump_2pow512'/1 =
    %% Line 1141
    fun (_0) ->
	let <_1> = 'exro928_next_state'/1
	in  %% Line 1142
	    apply 'polyjump'/3
		(_0, _1, %% Line 1145
			 [290573448171827402|[382251779910418577|[423857156240780192|[317638803078791815|[312577798172065765|[305801842905235492|[450887821400921554|[490154825290594607|[507224882549817556|[305131922350994371|[524004876356613068|[399286492428034246|[556129459533271918|[302163523288674092|[295571835370094372|[487547435355635071]]]]]]]]]]]]]]]])
'exro928_jump_2pow20'/1 =
    %% Line 1155
    fun (_0) ->
	let <_1> = 'exro928_next_state'/1
	in  %% Line 1156
	    apply 'polyjump'/3
		(_0, _1, %% Line 1159
			 [412473694820566502|[432883605991317039|[525373508288112196|[403915169708599875|[319067783491633768|[301226760020322060|[311627678308842608|[376040681981803602|[339701046172540810|[406476937554306621|[319178240279900411|[538961455727032748|[343829982822907227|[562090186051299616|[294421712295949406|[517056752316592047]]]]]]]]]]]]]]]])
'exrop_seed'/1 =
    %% Line 1237
    fun (_0) ->
	case _0 of
	  <L>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 1238
	      case apply 'seed58_nz'/2
		       (2, L) of
		<[S0|[S1|[]]]> when 'true' ->
		    %% Line 1239
		    [S0|S1]
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1240
	  <X>
	      when call 'erlang':'is_integer'
		    (_0) ->
	      let <_4> =
		  call %% Line 1241
		       'erlang':%% Line 1241
				'band'
		      (%% Line 1241
		       X, %% Line 1241
			  18446744073709551615)
	      in  %% Line 1241
		  case apply 'seed58'/2
			   (2, _4) of
		    <[S0|[S1|[]]]> when 'true' ->
			%% Line 1242
			[S0|S1]
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1245
	  <{A1,A2,A3}> when 'true' ->
	      let <_13> =
		  call %% Line 1248
		       'erlang':%% Line 1248
				'*'
		      (%% Line 1248
		       A1, %% Line 1248
			   4294967197)
	      in  let <_14> =
		      call %% Line 1248
			   'erlang':%% Line 1248
				    '+'
			  (_13, %% Line 1248
				1)
		  in  let <_15> =
			  call %% Line 1248
			       'erlang':%% Line 1248
					'band'
			      (_14, %% Line 1248
				    288230376151711743)
		      in  let <_8> =
			      call %% Line 1249
				   'erlang':%% Line 1249
					    '*'
				  (%% Line 1249
				   A2, %% Line 1249
				       4294967231)
			  in  let <_9> =
				  call %% Line 1249
				       'erlang':%% Line 1249
						'+'
				      (_8, %% Line 1249
					   1)
			      in  let <_10> =
				      call %% Line 1249
					   'erlang':%% Line 1249
						    'band'
					  (_9, %% Line 1249
					       288230376151711743)
				  in  ( let <S1_a> =
					    call %% Line 1263
						 ( 'erlang'
						   -| ['compiler_generated'] ):%% Line 1263
									       ( 'bxor'
										 -| ['compiler_generated'] )
						(_10, _15)
					in  ( let <_32> =
						  call %% Line 1263
						       ( 'erlang'
							 -| ['compiler_generated'] ):%% Line 1263
										     ( 'band'
										       -| ['compiler_generated'] )
						      (_15, %% Line 1263
							    ( 17179869183
							      -| ['compiler_generated'] ))
					      in  ( let <_33> =
							call %% Line 1263
							     ( 'erlang'
							       -| ['compiler_generated'] ):%% Line 1263
											   ( 'bsl'
											     -| ['compiler_generated'] )
							    (_32, %% Line 1263
								  ( 24
								    -| ['compiler_generated'] ))
						    in  ( let <_35> =
							      call %% Line 1263
								   ( 'erlang'
								     -| ['compiler_generated'] ):%% Line 1263
												 ( 'bsr'
												   -| ['compiler_generated'] )
								  (_15, %% Line 1263
									( 34
									  -| ['compiler_generated'] ))
							  in  ( let <_36> =
								    call %% Line 1263
									 ( 'erlang'
									   -| ['compiler_generated'] ):%% Line 1263
												       ( 'bor'
													 -| ['compiler_generated'] )
									(_33, _35)
								in  ( let <_16> =
									  call %% Line 1263
									       ( 'erlang'
										 -| ['compiler_generated'] ):%% Line 1263
													     ( 'bxor'
													       -| ['compiler_generated'] )
									      (_36, %% Line 1263
										    S1_a)
								      in  ( let <_37> =
										call %% Line 1263
										     ( 'erlang'
										       -| ['compiler_generated'] ):%% Line 1263
														   ( 'band'
														     -| ['compiler_generated'] )
										    (%% Line 1263
										     S1_a, %% Line 1263
											   ( 72057594037927935
											     -| ['compiler_generated'] ))
									    in  ( let <_38> =
										      call %% Line 1263
											   ( 'erlang'
											     -| ['compiler_generated'] ):%% Line 1263
															 ( 'bsl'
															   -| ['compiler_generated'] )
											  (_37, %% Line 1263
												( 2
												  -| ['compiler_generated'] ))
										  in  do  %% Line 1263
											  ( call ( 'erlang'
												   -| ['compiler_generated'] ):( 'bxor'
																 -| ['compiler_generated'] )
												(_16, _38)
											    -| ['compiler_generated'] )
											  ( let <_23> =
												call %% Line 1263
												     ( 'erlang'
												       -| ['compiler_generated'] ):%% Line 1263
																   ( 'band'
																     -| ['compiler_generated'] )
												    (%% Line 1263
												     S1_a, %% Line 1263
													   ( 8388607
													     -| ['compiler_generated'] ))
											    in  ( let <_24> =
												      call %% Line 1263
													   ( 'erlang'
													     -| ['compiler_generated'] ):%% Line 1263
																	 ( 'bsl'
																	   -| ['compiler_generated'] )
													  (_23, %% Line 1263
														( 35
														  -| ['compiler_generated'] ))
												  in  ( let <_19> =
													    call %% Line 1263
														 ( 'erlang'
														   -| ['compiler_generated'] ):%% Line 1263
																	       ( 'bsr'
																		 -| ['compiler_generated'] )
														(%% Line 1263
														 S1_a, %% Line 1263
														       ( 23
															 -| ['compiler_generated'] ))
													in  ( let <_25> =
														  call %% Line 1263
														       ( 'erlang'
															 -| ['compiler_generated'] ):%% Line 1263
																		     ( 'bor'
																		       -| ['compiler_generated'] )
														      (_24, _19)
													      in  let <_66> =
														      call %% Line 1250
															   'erlang':%% Line 1250
																    '*'
															  (%% Line 1250
															   A3, %% Line 1250
															       4294967279)
														  in  let <_20> =
															  call %% Line 1250
															       'erlang':%% Line 1250
																	'+'
															      (_66, %% Line 1250
																    1)
														      in  let <_21> =
															      call %% Line 1250
																   'erlang':%% Line 1250
																	    'band'
																  (_20, %% Line 1250
																	288230376151711743)
															  in  ( let <_61> =
																    call %% Line 1263
																	 ( 'erlang'
																	   -| ['compiler_generated'] ):%% Line 1263
																				       ( 'bxor'
																					 -| ['compiler_generated'] )
																	(_25, _21)
																in  ( let <_46> =
																	  call %% Line 1263
																	       ( 'erlang'
																		 -| ['compiler_generated'] ):%% Line 1263
																					     ( 'band'
																					       -| ['compiler_generated'] )
																	      (_21, %% Line 1263
																		    ( 17179869183
																		      -| ['compiler_generated'] ))
																      in  ( let <_47> =
																		call %% Line 1263
																		     ( 'erlang'
																		       -| ['compiler_generated'] ):%% Line 1263
																						   ( 'bsl'
																						     -| ['compiler_generated'] )
																		    (_46, %% Line 1263
																			  ( 24
																			    -| ['compiler_generated'] ))
																	    in  ( let <_49> =
																		      call %% Line 1263
																			   ( 'erlang'
																			     -| ['compiler_generated'] ):%% Line 1263
																							 ( 'bsr'
																							   -| ['compiler_generated'] )
																			  (_21, %% Line 1263
																				( 34
																				  -| ['compiler_generated'] ))
																		  in  ( let <_50> =
																			    call %% Line 1263
																				 ( 'erlang'
																				   -| ['compiler_generated'] ):%% Line 1263
																							       ( 'bor'
																								 -| ['compiler_generated'] )
																				(_47, _49)
																			in  ( let <_62> =
																				  call %% Line 1263
																				       ( 'erlang'
																					 -| ['compiler_generated'] ):%% Line 1263
																								     ( 'bxor'
																								       -| ['compiler_generated'] )
																				      (_50, _61)
																			      in  ( let <_51> =
																					call %% Line 1263
																					     ( 'erlang'
																					       -| ['compiler_generated'] ):%% Line 1263
																									   ( 'band'
																									     -| ['compiler_generated'] )
																					    (_61, %% Line 1263
																						  ( 72057594037927935
																						    -| ['compiler_generated'] ))
																				    in  ( let <_52> =
																					      call %% Line 1263
																						   ( 'erlang'
																						     -| ['compiler_generated'] ):%% Line 1263
																										 ( 'bsl'
																										   -| ['compiler_generated'] )
																						  (_51, %% Line 1263
																							( 2
																							  -| ['compiler_generated'] ))
																					  in  ( let <_53> =
																						    call %% Line 1263
																							 ( 'erlang'
																							   -| ['compiler_generated'] ):%% Line 1263
																										       ( 'bxor'
																											 -| ['compiler_generated'] )
																							(_62, _52)
																						in  ( let <_56> =
																							  call %% Line 1263
																							       ( 'erlang'
																								 -| ['compiler_generated'] ):%% Line 1263
																											     ( 'band'
																											       -| ['compiler_generated'] )
																							      (_61, %% Line 1263
																								    ( 8388607
																								      -| ['compiler_generated'] ))
																						      in  ( let <_65> =
																								call %% Line 1263
																								     ( 'erlang'
																								       -| ['compiler_generated'] ):%% Line 1263
																												   ( 'bsl'
																												     -| ['compiler_generated'] )
																								    (_56, %% Line 1263
																									  ( 35
																									    -| ['compiler_generated'] ))
																							    in  ( let <_58> =
																								      call %% Line 1263
																									   ( 'erlang'
																									     -| ['compiler_generated'] ):%% Line 1263
																													 ( 'bsr'
																													   -| ['compiler_generated'] )
																									  (_61, %% Line 1263
																										( 23
																										  -| ['compiler_generated'] ))
																								  in  ( let <_69> =
																									    call %% Line 1263
																										 ( 'erlang'
																										   -| ['compiler_generated'] ):%% Line 1263
																													       ( 'bor'
																														 -| ['compiler_generated'] )
																										(_65, _58)
																									in  %% Line 1263
																									    ( [_53|_69]
																									      -| ['compiler_generated'] )
																									-| ['compiler_generated'] )
																								  -| ['compiler_generated'] )
																							    -| ['compiler_generated'] )
																						      -| ['compiler_generated'] )
																						-| ['compiler_generated'] )
																					  -| ['compiler_generated'] )
																				    -| ['compiler_generated'] )
																			      -| ['compiler_generated'] )
																			-| ['compiler_generated'] )
																		  -| ['compiler_generated'] )
																	    -| ['compiler_generated'] )
																      -| ['compiler_generated'] )
																-| ['compiler_generated'] )
													      -| ['compiler_generated'] )
													-| ['compiler_generated'] )
												  -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
	  ( <_22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_22})
		  -| [{'function_name',{'exrop_seed',1}}] )
	    -| ['compiler_generated'] )
	end
'exrop_next_s'/2 =
    %% Line 1262
    fun (_0,_1) ->
	let <S1_a> =
	    call %% Line 1263
		 'erlang':%% Line 1263
			  'bxor'
		(_1, _0)
	in  let <_13> =
		call %% Line 1263
		     'erlang':%% Line 1263
			      'band'
		    (_0, %% Line 1263
			 17179869183)
	    in  let <_14> =
		    call %% Line 1263
			 'erlang':%% Line 1263
				  'bsl'
			(_13, %% Line 1263
			      24)
		in  let <_9> =
			call %% Line 1263
			     'erlang':%% Line 1263
				      'bsr'
			    (_0, %% Line 1263
				 34)
		    in  let <_15> =
			    call %% Line 1263
				 'erlang':%% Line 1263
					  'bor'
				(_14, _9)
			in  let <_16> =
				call %% Line 1263
				     'erlang':%% Line 1263
					      'bxor'
				    (_15, %% Line 1263
					  S1_a)
			    in  let <_6> =
				    call %% Line 1263
					 'erlang':%% Line 1263
						  'band'
					(%% Line 1263
					 S1_a, %% Line 1263
					       72057594037927935)
				in  let <_7> =
					call %% Line 1263
					     'erlang':%% Line 1263
						      'bsl'
					    (_6, %% Line 1263
						 2)
				    in  let <_17> =
					    call %% Line 1263
						 'erlang':%% Line 1263
							  'bxor'
						(_16, _7)
					in  let <_23> =
						call %% Line 1263
						     'erlang':%% Line 1263
							      'band'
						    (%% Line 1263
						     S1_a, %% Line 1263
							   8388607)
					    in  let <_24> =
						    call %% Line 1263
							 'erlang':%% Line 1263
								  'bsl'
							(_23, %% Line 1263
							      35)
						in  let <_19> =
							call %% Line 1263
							     'erlang':%% Line 1263
								      'bsr'
							    (%% Line 1263
							     S1_a, %% Line 1263
								   23)
						    in  let <_25> =
							    call %% Line 1263
								 'erlang':%% Line 1263
									  'bor'
								(_24, _19)
							in  %% Line 1263
							    [_17|_25]
'exrop_next'/1 =
    %% Line 1268
    fun (_0) ->
	case _0 of
	  <[S0|S1]> when 'true' ->
	      let <_27> =
		  call %% Line 1269
		       'erlang':%% Line 1269
				'+'
		      (%% Line 1269
		       S0, %% Line 1269
			   S1)
	      in  let <_28> =
		      call %% Line 1269
			   'erlang':%% Line 1269
				    'band'
			  (_27, %% Line 1269
				288230376151711743)
		  in  let <S1_a> =
			  call %% Line 1269
			       'erlang':%% Line 1269
					'bxor'
			      (%% Line 1269
			       S1, %% Line 1269
				   S0)
		      in  let <_12> =
			      call %% Line 1269
				   'erlang':%% Line 1269
					    'band'
				  (%% Line 1269
				   S0, %% Line 1269
				       17179869183)
			  in  let <_13> =
				  call %% Line 1269
				       'erlang':%% Line 1269
						'bsl'
				      (_12, %% Line 1269
					    24)
			      in  let <_8> =
				      call %% Line 1269
					   'erlang':%% Line 1269
						    'bsr'
					  (%% Line 1269
					   S0, %% Line 1269
					       34)
				  in  let <_14> =
					  call %% Line 1269
					       'erlang':%% Line 1269
							'bor'
					      (_13, _8)
				      in  let <_15> =
					      call %% Line 1269
						   'erlang':%% Line 1269
							    'bxor'
						  (_14, %% Line 1269
							S1_a)
					  in  let <_5> =
						  call %% Line 1269
						       'erlang':%% Line 1269
								'band'
						      (%% Line 1269
						       S1_a, %% Line 1269
							     72057594037927935)
					      in  let <_6> =
						      call %% Line 1269
							   'erlang':%% Line 1269
								    'bsl'
							  (_5, %% Line 1269
							       2)
						  in  let <_16> =
							  call %% Line 1269
							       'erlang':%% Line 1269
									'bxor'
							      (_15, _6)
						      in  let <_22> =
							      call %% Line 1269
								   'erlang':%% Line 1269
									    'band'
								  (%% Line 1269
								   S1_a, %% Line 1269
									 8388607)
							  in  let <_23> =
								  call %% Line 1269
								       'erlang':%% Line 1269
										'bsl'
								      (_22, %% Line 1269
									    35)
							      in  let <_18> =
								      call %% Line 1269
									   'erlang':%% Line 1269
										    'bsr'
									  (%% Line 1269
									   S1_a, %% Line 1269
										 23)
								  in  let <_24> =
									  call %% Line 1269
									       'erlang':%% Line 1269
											'bor'
									      (_23, _18)
								      in  %% Line 1269
									  {_28,[_16|_24]}
	  ( <_29> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_29})
		  -| [{'function_name',{'exrop_next',1}}] )
	    -| ['compiler_generated'] )
	end
'exrop_uniform'/1 =
    %% Line 1271
    fun (_0) ->
	case _0 of
	  <{Alg,R}> when 'true' ->
	      ( case %% Line 1272
		     R of
		  ( <( [S0|S1]
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			( let <_27> =
			      call ( 'erlang'
				     -| ['compiler_generated'] ):( '+'
								   -| ['compiler_generated'] )
				  (S0, S1)
			  in  ( let <_28> =
				    call ( 'erlang'
					   -| ['compiler_generated'] ):( 'band'
									 -| ['compiler_generated'] )
					(_27, ( 288230376151711743
						-| ['compiler_generated'] ))
				in  ( let <S1_a> =
					  call ( 'erlang'
						 -| ['compiler_generated'] ):( 'bxor'
									       -| ['compiler_generated'] )
					      (S1, S0)
				      in  ( let <_12> =
						call ( 'erlang'
						       -| ['compiler_generated'] ):( 'band'
										     -| ['compiler_generated'] )
						    (S0, ( 17179869183
							   -| ['compiler_generated'] ))
					    in  ( let <_13> =
						      call ( 'erlang'
							     -| ['compiler_generated'] ):( 'bsl'
											   -| ['compiler_generated'] )
							  (_12, ( 24
								  -| ['compiler_generated'] ))
						  in  ( let <_8> =
							    call ( 'erlang'
								   -| ['compiler_generated'] ):( 'bsr'
												 -| ['compiler_generated'] )
								(S0, ( 34
								       -| ['compiler_generated'] ))
							in  ( let <_14> =
								  call ( 'erlang'
									 -| ['compiler_generated'] ):( 'bor'
												       -| ['compiler_generated'] )
								      (_13, _8)
							      in  ( let <_15> =
									call ( 'erlang'
									       -| ['compiler_generated'] ):( 'bxor'
													     -| ['compiler_generated'] )
									    (_14, S1_a)
								    in  ( let <_5> =
									      call ( 'erlang'
										     -| ['compiler_generated'] ):( 'band'
														   -| ['compiler_generated'] )
										  (S1_a, ( 72057594037927935
											   -| ['compiler_generated'] ))
									  in  ( let <_6> =
										    call ( 'erlang'
											   -| ['compiler_generated'] ):( 'bsl'
															 -| ['compiler_generated'] )
											(_5, ( 2
											       -| ['compiler_generated'] ))
										in  ( let <_16> =
											  call ( 'erlang'
												 -| ['compiler_generated'] ):( 'bxor'
															       -| ['compiler_generated'] )
											      (_15, _6)
										      in  ( let <_22> =
												call ( 'erlang'
												       -| ['compiler_generated'] ):( 'band'
																     -| ['compiler_generated'] )
												    (S1_a, ( 8388607
													     -| ['compiler_generated'] ))
											    in  ( let <_23> =
												      call ( 'erlang'
													     -| ['compiler_generated'] ):( 'bsl'
																	   -| ['compiler_generated'] )
													  (_22, ( 35
														  -| ['compiler_generated'] ))
												  in  ( let <_18> =
													    call ( 'erlang'
														   -| ['compiler_generated'] ):( 'bsr'
																		 -| ['compiler_generated'] )
														(S1_a, ( 23
															 -| ['compiler_generated'] ))
													in  ( let <_24> =
														  call ( 'erlang'
															 -| ['compiler_generated'] ):( 'bor'
																		       -| ['compiler_generated'] )
														      (_23, _18)
													      in  let <R1> =
														      [( _16
															 -| ['compiler_generated'] )|( _24
																		       -| ['compiler_generated'] )]
														  in  let <_3> =
															  call %% Line 1275
															       'erlang':%% Line 1275
																	'bsr'
															      (_28, %% Line 1275
																    5)
														      in  let <_4> =
															      call %% Line 1275
																   'erlang':%% Line 1275
																	    '*'
																  (_3, %% Line 1275
																       1.11022302462515654042e-16)
															  in  %% Line 1275
															      {_4,{Alg,R1}}
													      -| ['compiler_generated'] )
													-| ['compiler_generated'] )
												  -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
										      -| ['compiler_generated'] )
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_29> when ( 'true'
				 -| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'function_clause'
				    -| ['compiler_generated'] ),_29}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5})
		  -| [{'function_name',{'exrop_uniform',1}}] )
	    -| ['compiler_generated'] )
	end
'exrop_uniform'/2 =
    %% Line 1277
    fun (_0,_1) ->
	case <_0,_1> of
	  <Range,{Alg,R}> when 'true' ->
	      ( case %% Line 1278
		     R of
		  ( <( [S0|S1]
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			( let <_27> =
			      call ( 'erlang'
				     -| ['compiler_generated'] ):( '+'
								   -| ['compiler_generated'] )
				  (S0, S1)
			  in  ( let <_28> =
				    call ( 'erlang'
					   -| ['compiler_generated'] ):( 'band'
									 -| ['compiler_generated'] )
					(_27, ( 288230376151711743
						-| ['compiler_generated'] ))
				in  ( let <S1_a> =
					  call ( 'erlang'
						 -| ['compiler_generated'] ):( 'bxor'
									       -| ['compiler_generated'] )
					      (S1, S0)
				      in  ( let <_12> =
						call ( 'erlang'
						       -| ['compiler_generated'] ):( 'band'
										     -| ['compiler_generated'] )
						    (S0, ( 17179869183
							   -| ['compiler_generated'] ))
					    in  ( let <_13> =
						      call ( 'erlang'
							     -| ['compiler_generated'] ):( 'bsl'
											   -| ['compiler_generated'] )
							  (_12, ( 24
								  -| ['compiler_generated'] ))
						  in  ( let <_8> =
							    call ( 'erlang'
								   -| ['compiler_generated'] ):( 'bsr'
												 -| ['compiler_generated'] )
								(S0, ( 34
								       -| ['compiler_generated'] ))
							in  ( let <_14> =
								  call ( 'erlang'
									 -| ['compiler_generated'] ):( 'bor'
												       -| ['compiler_generated'] )
								      (_13, _8)
							      in  ( let <_15> =
									call ( 'erlang'
									       -| ['compiler_generated'] ):( 'bxor'
													     -| ['compiler_generated'] )
									    (_14, S1_a)
								    in  ( let <_5> =
									      call ( 'erlang'
										     -| ['compiler_generated'] ):( 'band'
														   -| ['compiler_generated'] )
										  (S1_a, ( 72057594037927935
											   -| ['compiler_generated'] ))
									  in  ( let <_6> =
										    call ( 'erlang'
											   -| ['compiler_generated'] ):( 'bsl'
															 -| ['compiler_generated'] )
											(_5, ( 2
											       -| ['compiler_generated'] ))
										in  ( let <_16> =
											  call ( 'erlang'
												 -| ['compiler_generated'] ):( 'bxor'
															       -| ['compiler_generated'] )
											      (_15, _6)
										      in  ( let <_22> =
												call ( 'erlang'
												       -| ['compiler_generated'] ):( 'band'
																     -| ['compiler_generated'] )
												    (S1_a, ( 8388607
													     -| ['compiler_generated'] ))
											    in  ( let <_23> =
												      call ( 'erlang'
													     -| ['compiler_generated'] ):( 'bsl'
																	   -| ['compiler_generated'] )
													  (_22, ( 35
														  -| ['compiler_generated'] ))
												  in  ( let <_18> =
													    call ( 'erlang'
														   -| ['compiler_generated'] ):( 'bsr'
																		 -| ['compiler_generated'] )
														(S1_a, ( 23
															 -| ['compiler_generated'] ))
													in  ( let <_24> =
														  call ( 'erlang'
															 -| ['compiler_generated'] ):( 'bor'
																		       -| ['compiler_generated'] )
														      (_23, _18)
													      in  let <R1> =
														      [( _16
															 -| ['compiler_generated'] )|( _24
																		       -| ['compiler_generated'] )]
														  in  let <MaxMinusRange> =
															  call %% Line 1279
															       'erlang':%% Line 1279
																	'-'
															      (%% Line 1279
															       288230376151711744, %% Line 1279
																		   Range)
														      in  %% Line 1280
															  case <> of
															    <>
																when call 'erlang':'=<'
																      (0,
																       MaxMinusRange) ->
																case <> of
																  <>
																      when call 'erlang':'<'
																	    (_28,
																	     Range) ->
																      let <_32> =
																	  call 'erlang':'+'
																	      (_28, 1)
																      in  {_32,{Alg,R1}}
																  <> when 'true' ->
																      let <I> =
																	  call 'erlang':'rem'
																	      (_28, Range)
																      in  case <> of
																	    <>
																		when try
																		      let <_7> =
																			  call 'erlang':'-'
																			      (_28, I)
																		      in  call 'erlang':'=<'
																			      (_7, MaxMinusRange)
																		  of <Try> ->
																		      Try
																		  catch <T,R> ->
																		      'false' ->
																		let <_31> =
																		    call 'erlang':'+'
																			(I, 1)
																		in  {_31,{Alg,R1}}
																	    <> when 'true' ->
																		apply 'exrop_uniform'/2
																		    (Range, {Alg,R1})
																	  end
																end
															    <> when 'true' ->
																apply 'uniform_range'/4
																    (Range, Alg, R1, _28)
															  end
													      -| ['compiler_generated'] )
													-| ['compiler_generated'] )
												  -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
										      -| ['compiler_generated'] )
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_29> when ( 'true'
				 -| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'function_clause'
				    -| ['compiler_generated'] ),_29}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9})
		  -| [{'function_name',{'exrop_uniform',2}}] )
	    -| ['compiler_generated'] )
	end
'exrop_jump'/1 =
    %% Line 1288
    fun (_0) ->
	case _0 of
	  <{Alg,S}> when 'true' ->
	      let <_8> =
		  apply %% Line 1290
			'exrop_jump'/5
		      (%% Line 1290
		       S, %% Line 1290
			  0, %% Line 1290
			     0, 437175934663831850, [171572743241724754])
	      in  %% Line 1290
		  {Alg,_8}
	  ( <_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9})
		  -| [{'function_name',{'exrop_jump',1}}] )
	    -| ['compiler_generated'] )
	end
'exrop_jump'/5 =
    %% Line 1293
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <_X_S,S0,S1,0,[]> when 'true' ->
	      %% Line 1294
	      [S0|S1]
	  %% Line 1295
	  <S,S0,S1,1,[J|Js]> when 'true' ->
	      %% Line 1296
	      apply 'exrop_jump'/5
		  (S, S0, S1, J, Js)
	  %% Line 1297
	  <_X_S = [S__0|S__1],S0,S1,J,Js> when 'true' ->
	      %% Line 1298
	      case call 'erlang':'band'
		       (J, 1) of
		%% Line 1299
		<1> when 'true' ->
		    ( let <S1_a> =
			  call ( 'erlang'
				 -| ['compiler_generated'] ):( 'bxor'
							       -| ['compiler_generated'] )
			      (%% Line 1300
			       S__1, %% Line 1300
				     S__0)
		      in  ( let <_13> =
				call ( 'erlang'
				       -| ['compiler_generated'] ):( 'band'
								     -| ['compiler_generated'] )
				    (%% Line 1300
				     S__0, ( 17179869183
					     -| ['compiler_generated'] ))
			    in  ( let <_14> =
				      call ( 'erlang'
					     -| ['compiler_generated'] ):( 'bsl'
									   -| ['compiler_generated'] )
					  (_13, ( 24
						  -| ['compiler_generated'] ))
				  in  ( let <_9> =
					    call ( 'erlang'
						   -| ['compiler_generated'] ):( 'bsr'
										 -| ['compiler_generated'] )
						(%% Line 1300
						 S__0, ( 34
							 -| ['compiler_generated'] ))
					in  ( let <_15> =
						  call ( 'erlang'
							 -| ['compiler_generated'] ):( 'bor'
										       -| ['compiler_generated'] )
						      (_14, _9)
					      in  ( let <_16> =
							call ( 'erlang'
							       -| ['compiler_generated'] ):( 'bxor'
											     -| ['compiler_generated'] )
							    (_15, S1_a)
						    in  ( let <_35> =
							      call ( 'erlang'
								     -| ['compiler_generated'] ):( 'band'
												   -| ['compiler_generated'] )
								  (S1_a, ( 72057594037927935
									   -| ['compiler_generated'] ))
							  in  ( let <_7> =
								    call ( 'erlang'
									   -| ['compiler_generated'] ):( 'bsl'
													 -| ['compiler_generated'] )
									(_35, ( 2
										-| ['compiler_generated'] ))
								in  ( let <_17> =
									  call ( 'erlang'
										 -| ['compiler_generated'] ):( 'bxor'
													       -| ['compiler_generated'] )
									      (_16, _7)
								      in  ( let <_23> =
										call ( 'erlang'
										       -| ['compiler_generated'] ):( 'band'
														     -| ['compiler_generated'] )
										    (S1_a, ( 8388607
											     -| ['compiler_generated'] ))
									    in  ( let <_24> =
										      call ( 'erlang'
											     -| ['compiler_generated'] ):( 'bsl'
															   -| ['compiler_generated'] )
											  (_23, ( 35
												  -| ['compiler_generated'] ))
										  in  ( let <_19> =
											    call ( 'erlang'
												   -| ['compiler_generated'] ):( 'bsr'
																 -| ['compiler_generated'] )
												(S1_a, ( 23
													 -| ['compiler_generated'] ))
											in  ( let <_25> =
												  call ( 'erlang'
													 -| ['compiler_generated'] ):( 'bor'
																       -| ['compiler_generated'] )
												      (_24, _19)
											      in  let <NewS> =
												      [_17|_25]
												  in  let <_10> =
													  call %% Line 1301
													       'erlang':%% Line 1301
															'bxor'
													      (%% Line 1301
													       S0, %% Line 1301
														   S__0)
												      in  let <_48> =
													      call %% Line 1301
														   'erlang':%% Line 1301
															    'bxor'
														  (%% Line 1301
														   S1, %% Line 1301
														       S__1)
													  in  let <_8> =
														  call %% Line 1301
														       'erlang':%% Line 1301
																'bsr'
														      (%% Line 1301
														       J, %% Line 1301
															  1)
													      in  %% Line 1301
														  apply 'exrop_jump'/5
														      (NewS, _10, _48, _8, Js)
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		%% Line 1302
		<0> when 'true' ->
		    ( let <S1_a> =
			  call ( 'erlang'
				 -| ['compiler_generated'] ):( 'bxor'
							       -| ['compiler_generated'] )
			      (%% Line 1303
			       S__1, %% Line 1303
				     S__0)
		      in  ( let <_13> =
				call ( 'erlang'
				       -| ['compiler_generated'] ):( 'band'
								     -| ['compiler_generated'] )
				    (%% Line 1303
				     S__0, ( 17179869183
					     -| ['compiler_generated'] ))
			    in  ( let <_14> =
				      call ( 'erlang'
					     -| ['compiler_generated'] ):( 'bsl'
									   -| ['compiler_generated'] )
					  (_13, ( 24
						  -| ['compiler_generated'] ))
				  in  ( let <_9> =
					    call ( 'erlang'
						   -| ['compiler_generated'] ):( 'bsr'
										 -| ['compiler_generated'] )
						(%% Line 1303
						 S__0, ( 34
							 -| ['compiler_generated'] ))
					in  ( let <_15> =
						  call ( 'erlang'
							 -| ['compiler_generated'] ):( 'bor'
										       -| ['compiler_generated'] )
						      (_14, _9)
					      in  ( let <_16> =
							call ( 'erlang'
							       -| ['compiler_generated'] ):( 'bxor'
											     -| ['compiler_generated'] )
							    (_15, S1_a)
						    in  ( let <_45> =
							      call ( 'erlang'
								     -| ['compiler_generated'] ):( 'band'
												   -| ['compiler_generated'] )
								  (S1_a, ( 72057594037927935
									   -| ['compiler_generated'] ))
							  in  ( let <_7> =
								    call ( 'erlang'
									   -| ['compiler_generated'] ):( 'bsl'
													 -| ['compiler_generated'] )
									(_45, ( 2
										-| ['compiler_generated'] ))
								in  ( let <_17> =
									  call ( 'erlang'
										 -| ['compiler_generated'] ):( 'bxor'
													       -| ['compiler_generated'] )
									      (_16, _7)
								      in  ( let <_23> =
										call ( 'erlang'
										       -| ['compiler_generated'] ):( 'band'
														     -| ['compiler_generated'] )
										    (S1_a, ( 8388607
											     -| ['compiler_generated'] ))
									    in  ( let <_24> =
										      call ( 'erlang'
											     -| ['compiler_generated'] ):( 'bsl'
															   -| ['compiler_generated'] )
											  (_23, ( 35
												  -| ['compiler_generated'] ))
										  in  ( let <_19> =
											    call ( 'erlang'
												   -| ['compiler_generated'] ):( 'bsr'
																 -| ['compiler_generated'] )
												(S1_a, ( 23
													 -| ['compiler_generated'] ))
											in  ( let <_25> =
												  call ( 'erlang'
													 -| ['compiler_generated'] ):( 'bor'
																       -| ['compiler_generated'] )
												      (_24, _19)
											      in  let <NewS> =
												      [_17|_25]
												  in  let <_12> =
													  call %% Line 1304
													       'erlang':%% Line 1304
															'bsr'
													      (%% Line 1304
													       J, %% Line 1304
														  1)
												      in  %% Line 1304
													  apply 'exrop_jump'/5
													      (NewS, S0, S1, _12, Js)
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		( <_13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_13})
		  -| ['compiler_generated'] )
	      end
	  ( <_18,_17,_16,_15,_14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_18,_17,_16,_15,_14})
		  -| [{'function_name',{'exrop_jump',5}}] )
	    -| ['compiler_generated'] )
	end
'seed58_nz'/2 =
    %% Line 1311
    fun (_0,_1) ->
	%% Line 1312
	apply 'seed_nz'/4
	    (_0, _1, 58, 'false')
'seed64_nz'/2 =
    %% Line 1314
    fun (_0,_1) ->
	%% Line 1315
	apply 'seed_nz'/4
	    (_0, _1, 64, 'false')
'seed_nz'/4 =
    %% Line 1317
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <_X_N,[],_X_M,'false'> when 'true' ->
	      %% Line 1318
	      call 'erlang':'error'
		  ('zero_seed')
	  %% Line 1319
	  <0,[_18|_19],_X_M,_X_NZ> when 'true' ->
	      %% Line 1320
	      call 'erlang':'error'
		  ('too_many_seed_integers')
	  %% Line 1321
	  <0,[],_X_M,_X_NZ> when 'true' ->
	      %% Line 1322
	      []
	  %% Line 1323
	  <N,[],M,'true'> when 'true' ->
	      let <_4> =
		  call %% Line 1324
		       'erlang':%% Line 1324
				'-'
		      (%% Line 1324
		       N, %% Line 1324
			  1)
	      in  let <_5> =
		      apply %% Line 1324
			    'seed_nz'/4
			  (_4, %% Line 1324
			       [], %% Line 1324
				   M, %% Line 1324
				      'true')
		  in  %% Line 1324
		      [0|_5]
	  %% Line 1325
	  <N,[S|Ss],M,NZ> when 'true' ->
	      %% Line 1326
	      case <> of
		%% Line 1327
		<>
		    when call 'erlang':'is_integer'
			  (S) ->
		    let <_6> =
			call %% Line 1328
			     'erlang':%% Line 1328
				      'bsl'
			    (%% Line 1328
			     1, %% Line 1328
				M)
		    in  let <_7> =
			    call %% Line 1328
				 'erlang':%% Line 1328
					  '-'
				(_6, %% Line 1328
				     1)
			in  let <R> =
				call %% Line 1328
				     'erlang':%% Line 1328
					      'band'
				    (%% Line 1328
				     S, _7)
			    in  let <_12> =
				    call %% Line 1329
					 'erlang':%% Line 1329
						  '-'
					(%% Line 1329
					 N, %% Line 1329
					    1)
				in  let <_11> =
					case %% Line 1329
					     NZ of
					  %% Line 1329
					  ( <( 'true'
					       -| ['compiler_generated'] )> when 'true' ->
						'true'
					    -| ['compiler_generated'] )
					  %% Line 1329
					  ( <( 'false'
					       -| ['compiler_generated'] )> when 'true' ->
						call 'erlang':'=/='
						    (R, 0)
					    -| ['compiler_generated'] )
					  %% Line 1329
					  ( <_9> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {( 'badarg'
							    -| ['compiler_generated'] ),_9}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
				    in  let <_13> =
					    apply %% Line 1329
						  'seed_nz'/4
						(_12, %% Line 1329
						      Ss, %% Line 1329
							  M, _11)
					in  %% Line 1329
					    [R|_13]
		%% Line 1330
		<> when 'true' ->
		    %% Line 1331
		    call 'erlang':'error'
			('non_integer_seed')
	      end
	  ( <_17,_16,_15,_14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_17,_16,_15,_14})
		  -| [{'function_name',{'seed_nz',4}}] )
	    -| ['compiler_generated'] )
	end
'seed58'/2 =
    %% Line 1339
    fun (_0,_1) ->
	case <_0,_1> of
	  <0,_X_X> when 'true' ->
	      %% Line 1340
	      []
	  %% Line 1341
	  <N,X> when 'true' ->
	      %% Line 1342
	      case apply 'seed58'/1
		       (X) of
		<{Z,NewX}> when 'true' ->
		    let <_3> =
			call %% Line 1343
			     'erlang':%% Line 1343
				      '-'
			    (%% Line 1343
			     N, %% Line 1343
				1)
		    in  let <_4> =
			    apply %% Line 1343
				  'seed58'/2
				(_3, %% Line 1343
				     NewX)
			in  %% Line 1343
			    [Z|_4]
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	end
'seed58'/1 =
    %% Line 1345
    fun (_0) ->
	%% Line 1346
	case apply 'splitmix64_next'/1
		 (_0) of
	  <{Z0,X}> when 'true' ->
	      %% Line 1347
	      case call 'erlang':'band'
		       (Z0, 288230376151711743) of
		%% Line 1348
		<0> when 'true' ->
		    %% Line 1349
		    apply 'seed58'/1
			(X)
		%% Line 1350
		<Z> when 'true' ->
		    %% Line 1351
		    {Z,X}
	      end
	  ( <_1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_1})
	    -| ['compiler_generated'] )
	end
'seed64'/2 =
    %% Line 1355
    fun (_0,_1) ->
	case <_0,_1> of
	  <0,_X_X> when 'true' ->
	      %% Line 1356
	      []
	  %% Line 1357
	  <N,X> when 'true' ->
	      %% Line 1358
	      case apply 'seed64'/1
		       (X) of
		<{Z,NewX}> when 'true' ->
		    let <_3> =
			call %% Line 1359
			     'erlang':%% Line 1359
				      '-'
			    (%% Line 1359
			     N, %% Line 1359
				1)
		    in  let <_4> =
			    apply %% Line 1359
				  'seed64'/2
				(_3, %% Line 1359
				     NewX)
			in  %% Line 1359
			    [Z|_4]
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	end
'seed64'/1 =
    %% Line 1361
    fun (_0) ->
	%% Line 1362
	case apply 'splitmix64_next'/1
		 (_0) of
	  <ZX = {Z,X}> when 'true' ->
	      %% Line 1363
	      case <> of
		%% Line 1364
		<>
		    when call 'erlang':'=:='
			  (Z,
			   0) ->
		    %% Line 1365
		    apply 'seed64'/1
			(X)
		%% Line 1366
		<> when 'true' ->
		    %% Line 1367
		    ZX
	      end
	  ( <_1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_1})
	    -| ['compiler_generated'] )
	end
'splitmix64_next'/1 =
    %% Line 1379
    fun (_0) ->
	let <_3> =
	    call %% Line 1380
		 'erlang':%% Line 1380
			  '+'
		(_0, %% Line 1380
		     11400714819323198485)
	in  let <X> =
		call %% Line 1380
		     'erlang':%% Line 1380
			      'band'
		    (_3, %% Line 1380
			 18446744073709551615)
	    in  let <_7> =
		    call %% Line 1381
			 'erlang':%% Line 1381
				  'bsr'
			(%% Line 1381
			 X, %% Line 1381
			    30)
		in  let <_8> =
			call %% Line 1381
			     'erlang':%% Line 1381
				      'bxor'
			    (%% Line 1381
			     X, _7)
		    in  let <_9> =
			    call %% Line 1381
				 'erlang':%% Line 1381
					  '*'
				(_8, %% Line 1381
				     13787848793156543929)
			in  let <Z_0> =
				call %% Line 1381
				     'erlang':%% Line 1381
					      'band'
				    (_9, %% Line 1381
					 18446744073709551615)
			    in  let <_13> =
				    call %% Line 1382
					 'erlang':%% Line 1382
						  'bsr'
					(%% Line 1382
					 Z_0, %% Line 1382
					      27)
				in  let <_14> =
					call %% Line 1382
					     'erlang':%% Line 1382
						      'bxor'
					    (%% Line 1382
					     Z_0, _13)
				    in  let <_15> =
					    call %% Line 1382
						 'erlang':%% Line 1382
							  '*'
						(_14, %% Line 1382
						      10723151780598845931)
					in  let <Z_1> =
						call %% Line 1382
						     'erlang':%% Line 1382
							      'band'
						    (_15, %% Line 1382
							  18446744073709551615)
					    in  let <_19> =
						    call %% Line 1383
							 'erlang':%% Line 1383
								  'bsr'
							(%% Line 1383
							 Z_1, %% Line 1383
							      31)
						in  let <_20> =
							call %% Line 1383
							     'erlang':%% Line 1383
								      'bxor'
							    (%% Line 1383
							     Z_1, _19)
						    in  let <_21> =
							    call %% Line 1383
								 'erlang':%% Line 1383
									  'band'
								(_20, %% Line 1383
								      18446744073709551615)
							in  %% Line 1383
							    {_21,X}
'polyjump'/3 =
    %% Line 1391
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <SR = {Ss,Rs},NextState,JumpConst> when 'true' ->
	      let <_4> =
		  call %% Line 1393
		       'erlang':%% Line 1393
				'length'
		      (%% Line 1393
		       Ss)
	      in  let <_3> =
		      call %% Line 1393
			   'erlang':%% Line 1393
				    'length'
			  (%% Line 1393
			   Rs)
		  in  let <_5> =
			  call %% Line 1393
			       'erlang':%% Line 1393
					'+'
			      (_4, _3)
		      in  let <Ts> =
			      call %% Line 1393
				   'lists':%% Line 1393
					   'duplicate'
				  (_5, %% Line 1393
				       0)
			  in  %% Line 1394
			      apply 'polyjump'/4
				  (SR, NextState, JumpConst, Ts)
	  ( <_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7})
		  -| [{'function_name',{'polyjump',3}}] )
	    -| ['compiler_generated'] )
	end
'polyjump'/4 =
    %% Line 1397
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <_X_SR,_X_NextState,[],Ts> when 'true' ->
	      %% Line 1399
	      {Ts,[]}
	  %% Line 1400
	  <SR,NextState,[J|Js],Ts> when 'true' ->
	      %% Line 1401
	      apply 'polyjump'/5
		  (SR, NextState, Js, Ts, J)
	  ( <_7,_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5,_4})
		  -| [{'function_name',{'polyjump',4}}] )
	    -| ['compiler_generated'] )
	end
'polyjump'/5 =
    %% Line 1404
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <SR,NextState,Js,Ts,1> when 'true' ->
	      %% Line 1405
	      apply 'polyjump'/4
		  (SR, NextState, Js, Ts)
	  %% Line 1406
	  <SR = {Ss,Rs},NextState,Js,Ts,J>
	      when call 'erlang':'=/='
		    (J,
		     0) ->
	      let <NewSR> =
		  apply %% Line 1407
			NextState
		      (%% Line 1407
		       SR)
	      in  let <NewJ> =
		      call %% Line 1408
			   'erlang':%% Line 1408
				    'bsr'
			  (%% Line 1408
			   J, %% Line 1408
			      1)
		  in  %% Line 1409
		      case call 'erlang':'band'
			       (J, 1) of
			%% Line 1410
			<0> when 'true' ->
			    %% Line 1411
			    apply 'polyjump'/5
				(NewSR, NextState, Js, Ts, NewJ)
			%% Line 1412
			<1> when 'true' ->
			    let <_9> =
				apply %% Line 1414
				      'xorzip_sr'/3
				    (%% Line 1414
				     Ts, %% Line 1414
					 Ss, %% Line 1414
					     Rs)
			    in  %% Line 1414
				apply 'polyjump'/5
				    (NewSR, NextState, Js, _9, NewJ)
			( <_10> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_10})
			  -| ['compiler_generated'] )
		      end
	  ( <_15,_14,_13,_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_15,_14,_13,_12,_11})
		  -| [{'function_name',{'polyjump',5}}] )
	    -| ['compiler_generated'] )
	end
'xorzip_sr'/3 =
    %% Line 1417
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[],[],'undefined'> when 'true' ->
	      %% Line 1418
	      []
	  %% Line 1419
	  <Ts,[],Rs> when 'true' ->
	      let <_3> =
		  call %% Line 1420
		       'lists':%% Line 1420
			       'reverse'
		      (%% Line 1420
		       Rs)
	      in  %% Line 1420
		  apply 'xorzip_sr'/3
		      (Ts, _3, 'undefined')
	  %% Line 1421
	  <[T|Ts],[S|Ss],Rs> when 'true' ->
	      let <_4> =
		  call %% Line 1422
		       'erlang':%% Line 1422
				'bxor'
		      (%% Line 1422
		       T, %% Line 1422
			  S)
	      in  let <_5> =
		      apply %% Line 1422
			    'xorzip_sr'/3
			  (%% Line 1422
			   Ts, %% Line 1422
			       Ss, %% Line 1422
				   Rs)
		  in  %% Line 1422
		      [_4|_5]
	  ( <_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7,_6})
		  -| [{'function_name',{'xorzip_sr',3}}] )
	    -| ['compiler_generated'] )
	end
'format_jumpconst58'/1 =
    %% Line 1426
    fun (_0) ->
	%% Line 1428
	case call 're':'run'
		 (_0, [48|[120|[40|[91|[97|[45|[122|[65|[45|[90|[48|[45|[57|[93|[43|[41]]]]]]]]]]]]]]]], [{'newline','any'}|[{'capture','all_but_first','binary'}|['global']]]) of
	  <{'match',Matches}> when 'true' ->
	      let <_3> =
		  call %% Line 1429
		       'lists':%% Line 1429
			       'reverse'
		      (%% Line 1429
		       Matches)
	      in  %% Line 1429
		  apply 'format_jumcons58_matches'/2
		      (_3, 0)
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_2})
	    -| ['compiler_generated'] )
	end
'format_jumcons58_matches'/2 =
    %% Line 1431
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],J> when 'true' ->
	      %% Line 1432
	      apply 'format_jumpconst58_value'/1
		  (J)
	  %% Line 1433
	  <[[Bin|[]]|Matches],J> when 'true' ->
	      let <_3> =
		  call %% Line 1434
		       'erlang':%% Line 1434
				'bsl'
		      (%% Line 1434
		       J, %% Line 1434
			  64)
	      in  let <_2> =
		      call %% Line 1434
			   'erlang':%% Line 1434
				    'binary_to_integer'
			  (%% Line 1434
			   Bin, %% Line 1434
				16)
		  in  let <NewJ> =
			  call %% Line 1434
			       'erlang':%% Line 1434
					'bor'
			      (_3, _2)
		      in  %% Line 1435
			  apply 'format_jumcons58_matches'/2
			      (Matches, NewJ)
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'format_jumcons58_matches',2}}] )
	    -| ['compiler_generated'] )
	end
'format_jumpconst58_value'/1 =
    %% Line 1437
    fun (_0) ->
	case _0 of
	  <0> when 'true' ->
	      %% Line 1438
	      'ok'
	  %% Line 1439
	  <J> when 'true' ->
	      let <_4> =
		  call %% Line 1440
		       'erlang':%% Line 1440
				'band'
		      (%% Line 1440
		       J, %% Line 1440
			  288230376151711743)
	      in  let <_5> =
		      call %% Line 1440
			   'erlang':%% Line 1440
				    'bor'
			  (_4, %% Line 1440
			       288230376151711744)
		  in  let <_6> =
			  call %% Line 1440
			       'erlang':%% Line 1440
					'integer_to_list'
			      (_5, %% Line 1440
				   16)
		      in  do  %% Line 1440
			      call 'io':'format'
				  ([49|[54|[35|[126|[115|[44|[126|[110]]]]]]]], [_6|[]])
			      let <_7> =
				  call %% Line 1441
				       'erlang':%% Line 1441
						'bsr'
				      (%% Line 1441
				       J, %% Line 1441
					  58)
			      in  %% Line 1441
				  apply 'format_jumpconst58_value'/1
				      (_7)
	end
'get_52'/1 =
    %% Line 1450
    fun (_0) ->
	case _0 of
	  <{Alg = ~{'next':=Next,'bits':=Bits}~,S0}> when 'true' ->
	      %% Line 1452
	      case apply Next
		       (S0) of
		<{Int,S1}> when 'true' ->
		    let <_4> =
			call %% Line 1453
			     'erlang':%% Line 1453
				      '-'
			    (%% Line 1453
			     Bits, %% Line 1453
				   51)
		    in  let <_5> =
			    call %% Line 1453
				 'erlang':%% Line 1453
					  '-'
				(_4, %% Line 1453
				     1)
			in  let <_6> =
				call %% Line 1453
				     'erlang':%% Line 1453
					      'bsl'
				    (%% Line 1453
				     1, _5)
			    in  let <_7> =
				    call %% Line 1453
					 'erlang':%% Line 1453
						  'band'
					(_6, %% Line 1453
					     Int)
				in  let <_2> =
					call %% Line 1453
					     'erlang':%% Line 1453
						      '-'
					    (%% Line 1453
					     Bits, %% Line 1453
						   51)
				    in  let <_3> =
					    call %% Line 1453
						 'erlang':%% Line 1453
							  'bsr'
						(%% Line 1453
						 Int, _2)
					in  %% Line 1453
					    {_7,_3,{Alg,S1}}
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1454
	  <{Alg = ~{'next':=Next}~,S0}> when 'true' ->
	      %% Line 1455
	      case apply Next
		       (S0) of
		<{Int,S1}> when 'true' ->
		    let <_13> =
			call %% Line 1456
			     'erlang':%% Line 1456
				      'band'
			    (%% Line 1456
			     2251799813685248, %% Line 1456
					       Int)
		    in  let <_11> =
			    call %% Line 1456
				 'erlang':%% Line 1456
					  'band'
				(%% Line 1456
				 Int, %% Line 1456
				      2251799813685247)
			in  %% Line 1456
			    {_13,_11,{Alg,S1}}
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_8})
		  -| ['compiler_generated'] )
	      end
	  ( <_14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14})
		  -| [{'function_name',{'get_52',1}}] )
	    -| ['compiler_generated'] )
	end
'normal_s'/4 =
    %% Line 1459
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <0,Sign,X0,State0> when 'true' ->
	      %% Line 1460
	      case apply 'uniform_s'/1
		       (State0) of
		<{U0,S1}> when 'true' ->
		    let <_5> =
			call %% Line 1461
			     'math':%% Line 1461
				    'log'
			    (%% Line 1461
			     U0)
		    in  let <X> =
			    call %% Line 1461
				 'erlang':%% Line 1461
					  '*'
				(%% Line 1461
				 -2.73661237329758277870e-01, _5)
			in  %% Line 1462
			    case apply 'uniform_s'/1
				     (S1) of
			      <{U1,S2}> when 'true' ->
				  let <_10> =
				      call %% Line 1463
					   'math':%% Line 1463
						  'log'
					  (%% Line 1463
					   U1)
				  in  let <Y> =
					  call %% Line 1463
					       'erlang':%% Line 1463
							'-'
					      (_10)
				      in  let <_13> =
					      call %% Line 1464
						   'erlang':%% Line 1464
							    '+'
						  (%% Line 1464
						   Y, %% Line 1464
						      Y)
					  in  let <_12> =
						  call %% Line 1464
						       'erlang':%% Line 1464
								'*'
						      (%% Line 1464
						       X, %% Line 1464
							  X)
					      in  %% Line 1464
						  case call 'erlang':'>'
							   (_13, _12) of
						    %% Line 1465
						    <'false'> when 'true' ->
							%% Line 1466
							apply 'normal_s'/4
							    (0, Sign, X0, S2)
						    %% Line 1467
						    <'true'>
							when call 'erlang':'=:='
							      (Sign,
							       0) ->
							let <_14> =
							    call %% Line 1468
								 'erlang':%% Line 1468
									  '+'
								(%% Line 1468
								 3.65415288536100879568e+00, %% Line 1468
											     X)
							in  %% Line 1468
							    {_14,S2}
						    %% Line 1469
						    <'true'> when 'true' ->
							let <_16> =
							    call %% Line 1470
								 'erlang':%% Line 1470
									  '-'
								(%% Line 1470
								 -3.65415288536100879568e+00, %% Line 1470
											      X)
							in  %% Line 1470
							    {_16,S2}
						    ( <_17> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_17})
						      -| ['compiler_generated'] )
						  end
			      ( <_9> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_9})
				-| ['compiler_generated'] )
			    end
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1472
	  <Idx,_X_Sign,X,State0> when 'true' ->
	      let <_18> =
		  call %% Line 1473
		       'erlang':%% Line 1473
				'+'
		      (%% Line 1473
		       Idx, %% Line 1473
			    1)
	      in  let <Fi2> =
		      apply %% Line 1473
			    'normal_fi'/1
			  (_18)
		  in  %% Line 1474
		      case apply 'uniform_s'/1
			       (State0) of
			<{U0,S1}> when 'true' ->
			    let <_25> =
				apply %% Line 1475
				      'normal_fi'/1
				    (%% Line 1475
				     Idx)
			    in  let <_26> =
				    call %% Line 1475
					 'erlang':%% Line 1475
						  '-'
					(_25, %% Line 1475
					      Fi2)
				in  let <_27> =
					call %% Line 1475
					     'erlang':%% Line 1475
						      '*'
					    (_26, %% Line 1475
						  U0)
				    in  let <_28> =
					    call %% Line 1475
						 'erlang':%% Line 1475
							  '+'
						(_27, %% Line 1475
						      Fi2)
					in  let <_22> =
						call %% Line 1475
						     'erlang':%% Line 1475
							      '*'
						    (%% Line 1475
						     -5.00000000000000000000e-01, %% Line 1475
										  X)
					    in  let <_23> =
						    call %% Line 1475
							 'erlang':%% Line 1475
								  '*'
							(_22, %% Line 1475
							      X)
						in  let <_24> =
							call %% Line 1475
							     'math':%% Line 1475
								    'exp'
							    (_23)
						    in  %% Line 1475
							case <> of
							  %% Line 1476
							  <>
							      when call 'erlang':'<'
								    (_28,
								     _24) ->
							      {X,S1}
							  %% Line 1477
							  <> when 'true' ->
							      apply 'normal_s'/1
								  (S1)
							end
			( <_20> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_20})
			  -| ['compiler_generated'] )
		      end
	end
'normal_kiwi'/1 =
    %% Line 1482
    fun (_0) ->
	%% Line 1483
	call 'erlang':'element'
	    (_0, %% Line 1484
		 {{2104047571236786,1.73672541216026300829e-15},{0,9.55866035145563388593e-17},{1693657211986787,1.27087048348106232125e-16},{1919380038271141,1.49097409624954739056e-16},{2015384402196343,1.66587336315862684825e-16},{2068365869448128,1.81361208101190286598e-16},{2101878624052573,1.94297201531355877741e-16},{2124958784102998,2.05895006284820926559e-16},{2141808670795147,2.16468605768954222017e-16},{2154644611568301,2.26229403922181158232e-16},{2164744887587275,2.35327189140458915861e-16},{2172897953696594,2.43872345574287710295e-16},{2179616279372365,2.51948798292742250158e-16},{2185247251868649,2.59621997725281025263e-16},{2190034623107822,2.66944074736482849525e-16},{2194154434521197,2.73957296851424460024e-16},{2197736978774660,2.80696460024848035749e-16},{2200880740891961,2.87190589041139304275e-16},{2203661538010620,2.93464174847288832596e-16},{2206138681109102,2.99538093367821129281e-16},{2208359231806599,3.05430300071924403235e-16},{2210361007258210,3.11156363389215722701e-16},{2212174742388539,3.16729880185818151712e-16},{2213825672704646,3.22162803505499051688e-16},{2215334711002614,3.27465704079397507757e-16},{2216719334487595,3.32647981168417099987e-16},{2217994262139172,3.37718034173532322460e-16},{2219171977965032,3.42683403531193559494e-16},{2220263139538712,3.47550887317297581051e-16},{2221276900117330,3.52326638460020314094e-16},{2222221164932930,3.57016246339534940285e-16},{2223102796829069,3.61624805715983390475e-16},{2223927782546658,3.66156975296535397983e-16},{2224701368170060,3.70617027772360773203e-16},{2225428170204312,3.75008892787477978824e-16},{2226112267248242,3.79336194015495537551e-16},{2226757276105256,3.83602281296772790489e-16},{2227366415328399,3.87810258612502468569e-16},{2227942558554684,3.91963008532576783898e-16},{2228488279492521,3.96063213662563775295e-16},{2229005890047222,4.00113375525466896220e-16},{2229497472775193,4.04115831241433324136e-16},{2229964908627060,4.08072768309604483145e-16},{2230409900758597,4.11986237748074422111e-16},{2230833995044585,4.15858165808280641140e-16},{2231238597816133,4.19690364447407329203e-16},{2231624991250191,4.23484540715207084057e-16},{2231994346765928,4.27242305188997608562e-16},{2232347736722750,4.30965179571629408372e-16},{2232686144665934,4.34654603551287596498e-16},{2233010474325959,4.38311941008545712860e-16},{2233321557544881,4.41938485644706647812e-16},{2233620161276071,4.45535466095791365718e-16},{2233906993781271,4.49104050588287499193e-16},{2234182710130335,4.52645351185713967562e-16},{2234447917093496,4.56160427669003807995e-16},{2234703177503020,4.59650291088494072552e-16},{2234949014150181,4.63115907020816468447e-16},{2235185913274316,4.66558198560087516686e-16},{2235414327692884,4.69978049069419496306e-16},{2235634679614920,4.73376304715832370759e-16},{2235847363174595,4.76753776809085264392e-16},{2236052746716837,4.80111243962701550521e-16},{2236251174862869,4.83449454093500800172e-16},{2236442970379967,4.86769126274220868624e-16},{2236628435876762,4.90070952452299375578e-16},{2236807855342765,4.93355599046541390746e-16},{2236981495548562,4.96623708432217831361e-16},{2237149607321147,4.99875900324090879179e-16},{2237312426707209,5.03112773065931868701e-16},{2237470176035652,5.06334904834271949789e-16},{2237623064889403,5.09542854763389229036e-16},{2237771290995388,5.12737163997879663320e-16},{2237915041040597,5.15918356678573644216e-16},{2238054491421305,5.19086940867034337507e-16},{2238189808931712,5.22243409413404174016e-16},{2238321151397660,5.25388240771945425068e-16},{2238448668260432,5.28521899768238198395e-16},{2238572501115169,5.31644838321661755014e-16},{2238692784207942,5.34757496126472954545e-16},{2238809644895133,5.37860301294523479377e-16},{2238923204068402,5.40953670962399333412e-16},{2239033576548190,5.44038011865546709133e-16},{2239140871448443,5.47113720881736113194e-16},{2239245192514958,5.50181185546033624966e-16},{2239346638439541,5.53240784539278360189e-16},{2239445303151952,5.56292888151909017422e-16},{2239541276091442,5.59337858724846207834e-16},{2239634642459498,5.62376051069004345873e-16},{2239725483455293,5.65407812864896043333e-16},{2239813876495186,5.68433485043681410254e-16},{2239899895417494,5.71453402150920397185e-16},{2239983610673676,5.74467892694196087369e-16},{2240065089506935,5.77477279475696482238e-16},{2240144396119183,5.80481879910768565067e-16},{2240221591827230,5.83482006333389205125e-16},{2240296735208969,5.86477966289436525146e-16},{2240369882240293,5.89470062818587176437e-16},{2240441086423386,5.92458594725613394191e-16},{2240510398907004,5.95443856841805979446e-16},{2240577868599305,5.98426140277202811378e-16},{2240643542273726,6.01405732664266403201e-16},{2240707464668391,6.04382918393612501158e-16},{2240769678579486,6.07357978842360566070e-16},{2240830224948980,6.10331192595643943370e-16},{2240889142947082,6.13302835661791100703e-16},{2240946470049769,6.16273181681659631279e-16},{2241002242111691,6.19242502132584703827e-16},{2241056493434746,6.22211066527378790876e-16},{2241109256832602,6.25179142608799982782e-16},{2241160563691400,6.28146996539889530228e-16},{2241210444026879,6.31114893090560423885e-16},{2241258926538122,6.34083095820806000914e-16},{2241306038658137,6.37051867260881494958e-16},{2241351806601435,6.40021469088802472988e-16},{2241396255408788,6.42992162305489607018e-16},{2241439408989313,6.45964207407883213683e-16},{2241481290160038,6.48937864560339654762e-16},{2241521920683062,6.51913393764615873896e-16},{2241561321300462,6.54891055028741540820e-16},{2241599511767028,6.57871108535074132917e-16},{2241636510880960,6.60853814807825874393e-16},{2241672336512612,6.63839434880350565911e-16},{2241707005631362,6.66828230462474590443e-16},{2241740534330713,6.69820464108155789432e-16},{2241772937851689,6.72816399383753114503e-16},{2241804230604585,6.75816301037190058595e-16},{2241834426189161,6.78820435168298025779e-16},{2241863537413311,6.81829069400625404640e-16},{2241891576310281,6.84842473055003829332e-16},{2241918554154466,6.87860917325166366447e-16},{2241944481475843,6.90884675455716901816e-16},{2241969368073071,6.93914022922756903880e-16},{2241993223025298,6.96949237617482938615e-16},{2242016054702685,6.99990600033076396841e-16},{2242037870775710,7.03038393455215079165e-16},{2242058678223225,7.06092904156548215323e-16},{2242078483339331,7.09154421595487341536e-16},{2242097291739040,7.12223238619677884046e-16},{2242115108362774,7.15299651674530299286e-16},{2242131937479672,7.18383961017206285811e-16},{2242147782689725,7.21476470936470670108e-16},{2242162646924736,7.24577489978838698238e-16},{2242176532448092,7.27687331181469271523e-16},{2242189440853337,7.30806312312274287356e-16},{2242201373061537,7.33934756117740475864e-16},{2242212329317416,7.37072990578983098735e-16},{2242222309184237,7.40221349176579965727e-16},{2242231311537397,7.43380171164764792799e-16},{2242239334556717,7.46549801855588902443e-16},{2242246375717369,7.49730592913697934980e-16},{2242252431779415,7.52922902662405836870e-16},{2242257498775893,7.56127096401792173910e-16},{2242261571999416,7.59343546739588950455e-16},{2242264645987196,7.62572633935675575083e-16},{2242266714504453,7.65814746261048733621e-16},{2242267770526109,7.69070280372191911716e-16},{2242267806216711,7.72339641701829854238e-16},{2242266812908462,7.75623244867117442328e-16},{2242264781077289,7.78921514096385241347e-16},{2242261700316818,7.82234883675641084120e-16},{2242257559310145,7.85563798416108405147e-16},{2242252345799276,7.88908714144175521500e-16},{2242246046552082,7.92270098215227085966e-16},{2242238647326615,7.95648430052936617556e-16},{2242230132832625,7.99044201715713004887e-16},{2242220486690076,8.02457918492125913510e-16},{2242209691384458,8.05890099527265683393e-16},{2242197728218684,8.09341278482150088838e-16},{2242184577261310,8.12812004228450077447e-16},{2242170217290819,8.16302841580987746960e-16},{2242154625735679,8.19814372070653286895e-16},{2242137778609839,8.23347194760605041733e-16},{2242119650443327,8.26901927108847002541e-16},{2242100214207556,8.30479205880537371959e-16},{2242079441234906,8.34079688113662879173e-16},{2242057301132135,8.37704052142022163322e-16},{2242033761687079,8.41352998679802824740e-16},{2242008788768107,8.45027251972409677425e-16},{2241982346215682,8.48727561018615493666e-16},{2241954395725356,8.52454700869559619833e-16},{2241924896721443,8.56209474010623332794e-16},{2241893806220517,8.59992711832766460322e-16},{2241861078683830,8.63805276200525889234e-16},{2241826665857598,8.67648061124558160821e-16},{2241790516600041,8.71521994547369801105e-16},{2241752576693881,8.75428040251717494016e-16},{2241712788642916,8.79367199902104274846e-16},{2241671091451078,8.83340515230840795477e-16},{2241627420382235,8.87349070381313453209e-16},{2241581706698773,8.91393994422408613348e-16},{2241533877376767,8.95476464049506774624e-16},{2241483854795281,8.99597706489109936019e-16},{2241431556397035,9.03759002626011752555e-16},{2241376894317345,9.07961690374006801893e-16},{2241319774977817,9.12207168313484609982e-16},{2241260098640860,9.16496899621913531320e-16},{2241197758920538,9.20832416326230760072e-16},{2241132642244704,9.25215323909569332723e-16},{2241064627262652,9.29647306308641672775e-16},{2240993584191742,9.34130131342526512592e-16},{2240919374095536,9.38665656618665978610e-16},{2240841848084890,9.43255835967670653963e-16},{2240760846432232,9.47902726465173824760e-16},{2240676197587784,9.52608496106627869756e-16},{2240587717084782,9.57375432209744962925e-16},{2240495206318753,9.62205950629483835507e-16},{2240398451183567,9.67102605882305424755e-16},{2240297220544165,9.72068102290162588019e-16},{2240191264522612,9.77105306270720883776e-16},{2240080312570155,9.82217259919054108939e-16},{2239964071293331,9.87407196048067106672e-16},{2239842221996530,9.92678554880797648454e-16},{2239714417896699,9.98035002618364491509e-16},{2239580280957725,1.00348045214361808924e-15},{2239439398282193,1.00901908616374569449e-15},{2239291317986196,1.01465538314670861133e-15},{2239135544468203,1.02039414646831236830e-15},{2238971532964979,1.02624053726135674640e-15},{2238798683265269,1.03220011154864564914e-15},{2238616332424351,1.03827886235153991696e-15},{2238423746288095,1.04448326760004705473e-15},{2238220109591890,1.05082034483551946539e-15},{2238004514345216,1.05729771390098902296e-15},{2237775946143212,1.06392366906768007507e-15},{2237533267957822,1.07070726236329937629e-15},{2237275200846753,1.07765840026681064032e-15},{2237000300869952,1.08478795644034246815e-15},{2236706931309099,1.09210790381495627955e-15},{2236393229029147,1.09963147017856282141e-15},{2236057063479501,1.10737332249357520075e-15},{2235695986373246,1.11534978658531549289e-15},{2235307169458859,1.12357911071108333166e-15},{2234887326941578,1.13208178401648463069e-15},{2234432617919447,1.14088092425827801405e-15},{2233938522519765,1.15000275378397924458e-15},{2233399683022677,1.15947718914491892724e-15},{2232809697779198,1.16933857869109599762e-15},{2232160850599817,1.17962663529558008258e-15},{2231443750584641,1.19038762992828902828e-15},{2230646845562170,1.20167593925438186168e-15},{2229755753817986,1.21355608186668970279e-15},{2228752329126533,1.22610544174505612103e-15},{2227613325162504,1.23941797891632511077e-15},{2226308442121174,1.25360939266025668161e-15},{2224797391720399,1.26882448142550100004e-15},{2223025347823832,1.28524793190961088468e-15},{2220915633329809,1.30312066346899851655e-15},{2218357446087030,1.32276557701953263307e-15},{2215184158448668,1.34463009250111712861e-15},{2211132412537369,1.36936068351285175171e-15},{2205758503851065,1.39794366727752399083e-15},{2198248265654987,1.43199898696613284312e-15},{2186916352102141,1.47448486035975958423e-15},{2167562552481814,1.53178727416111435375e-15},{2125549880839716,1.62276986753129683713e-15}})
'normal_fi'/1 =
    %% Line 1613
    fun (_0) ->
	%% Line 1614
	call 'erlang':'element'
	    (_0, %% Line 1615
		 {1.00000000000000000000e+00,9.77101701267670819107e-01,9.59879091800105999077e-01,9.45198953442299094618e-01,9.32060075959229905607e-01,9.19991505039346457728e-01,9.08726440052130324254e-01,8.98095921898342974821e-01,8.87984660755832821977e-01,8.78309655808916844855e-01,8.69008688036856491443e-01,8.60033621196331088399e-01,8.51346258458677507264e-01,8.42915653112203733244e-01,8.34716292986882990590e-01,8.26726833946220929228e-01,8.18929191603701922553e-01,8.11307874312655719073e-01,8.03849483170963829970e-01,7.96542330422958411162e-01,7.89376143566024035536e-01,7.82341832654801949687e-01,7.75431304981186619862e-01,7.68637315798485709628e-01,7.61953346836794831454e-01,7.55373506507095671125e-01,7.48892447219156376370e-01,7.42505296340150611201e-01,7.36207598126862095000e-01,7.29995264561475676324e-01,7.23864533468629667290e-01,7.17811932630721516446e-01,7.11834248878247977110e-01,7.05928501332753755015e-01,7.00091918136511170978e-01,6.94321916126116267520e-01,6.88616083004671364343e-01,6.82972161644994302243e-01,6.77388036218773081920e-01,6.71861719897081655084e-01,6.66391343908749766989e-01,6.60975147776662774746e-01,6.55611470579696931082e-01,6.50298743110816368507e-01,6.45035480820821960357e-01,6.39820277453056140970e-01,6.34651799287623274992e-01,6.29528779924836245918e-01,6.24450015547026060503e-01,6.19414360605833991258e-01,6.14420723888913444810e-01,6.09468064925773100882e-01,6.04555390697467331940e-01,5.99681752619124819326e-01,5.94846243767986893047e-01,5.90047996332825452903e-01,5.85286179263370898163e-01,5.80559996100790343121e-01,5.75868682972353163052e-01,5.71211506735252672051e-01,5.66587763256163889913e-01,5.61996775814523896742e-01,5.57437893618765500925e-01,5.52910490425831846473e-01,5.48413963255265368701e-01,5.43947731190025818293e-01,5.39511234256951577315e-01,5.35103932380457170126e-01,5.30725304403661501951e-01,5.26374847171684034919e-01,5.22052074672321397841e-01,5.17756517229755908183e-01,5.13487720747326514825e-01,5.09245245995747608525e-01,5.05028667943467901580e-01,5.00837575126148348836e-01,4.96671569052489325635e-01,4.92530263643868149170e-01,4.88413284705457584334e-01,4.84320269426682881164e-01,4.80250865909046420477e-01,4.76204732719505474670e-01,4.72181538467729755570e-01,4.68180961405693207844e-01,4.64202689048173910980e-01,4.60246417812842478767e-01,4.56311852678716101117e-01,4.52398706861848243221e-01,4.48506701507202731882e-01,4.44635565395739118522e-01,4.40785034665803765463e-01,4.36954852547985328481e-01,4.33144769112652094911e-01,4.29354541029441261202e-01,4.25583931338021803636e-01,4.21832709229495728120e-01,4.18100649837847948564e-01,4.14387534040890903597e-01,4.10693148270187990967e-01,4.07017284329473150173e-01,4.03359739221114288465e-01,3.99720314980197000132e-01,3.96098818515832229448e-01,3.92495061459315397467e-01,3.88908860018788549162e-01,3.85340034840077061418e-01,3.81788410873393435629e-01,3.78253817245618961795e-01,3.74736087137890860888e-01,3.71235057668239221140e-01,3.67750569779032254747e-01,3.64282468129003722535e-01,3.60830600989647753973e-01,3.57394820145780223175e-01,3.53974980800076555187e-01,3.50570941481405884410e-01,3.47182563956793477367e-01,3.43809713146850548515e-01,3.40452257044521644502e-01,3.37110066637005878487e-01,3.33783015830718232664e-01,3.30470981379163419867e-01,3.27173842813601289947e-01,3.23891482376391037779e-01,3.20623784956905300003e-01,3.17370638029913498812e-01,3.14131931596337066193e-01,3.10907558126286343025e-01,3.07697412504291889501e-01,3.04501391976649826709e-01,3.01319396100802883165e-01,2.98151326696685314843e-01,2.94997087799961643650e-01,2.91856585617094987928e-01,2.88729728482182701477e-01,2.85616426815501589509e-01,2.82516593083707412415e-01,2.79430141761637718112e-01,2.76356989295668098450e-01,2.73297054068576905639e-01,2.70250256365875185516e-01,2.67216518343561137971e-01,2.64195763997260801847e-01,2.61187919132720824944e-01,2.58192911337618902223e-01,2.55210669954661684145e-01,2.52241126055941899953e-01,2.49284212418528244859e-01,2.46339863501263633960e-01,2.43408015422750118040e-01,2.40488605940500393965e-01,2.37581574431237951828e-01,2.34686861872329899370e-01,2.31804410824338585906e-01,2.28934165414680229622e-01,2.26076071322380195427e-01,2.23230075763917457099e-01,2.20396127480151943212e-01,2.17574176724331130872e-01,2.14764175251173583536e-01,2.11966076307030154569e-01,2.09179834621124993710e-01,2.06405406397880714087e-01,2.03642749310334852941e-01,2.00891822494656563380e-01,1.98152586545775111215e-01,1.95425003514134276728e-01,1.92709036903589120415e-01,1.90004651670464957958e-01,1.87311814223800249257e-01,1.84630492426799269756e-01,1.81960655599522541648e-01,1.79302274522847665539e-01,1.76655321443734997233e-01,1.74019770081838748288e-01,1.71395595637505948616e-01,1.68782774801211510329e-01,1.66181285764482045142e-01,1.63591108232365695097e-01,1.61012223437511065027e-01,1.58444614155924312637e-01,1.55888264724479197465e-01,1.53343161060262828110e-01,1.50809290681845675763e-01,1.48286642732574525105e-01,1.45775208005994028060e-01,1.43274978973513406055e-01,1.40785949814444699690e-01,1.38308116448550705302e-01,1.35841476571253727545e-01,1.33386029691669127928e-01,1.30941777173644302579e-01,1.28508722279999515470e-01,1.26086870220185859326e-01,1.23676228201596544176e-01,1.21276805484790209388e-01,1.18888613442909976681e-01,1.16511665625610799646e-01,1.14145977827838349117e-01,1.11791568163838006544e-01,1.09448457146811631291e-01,1.07116667774683635428e-01,1.04796225622486902096e-01,1.02487158941935080358e-01,1.00189498768809809315e-01,9.79032790388622842226e-02,9.56285367130088187482e-02,9.33653119126908598302e-02,9.11136480663736342267e-02,8.88735920682757890576e-02,8.66451944505579607636e-02,8.44285095703533744471e-02,8.22235958132028627032e-02,8.00305158146630557514e-02,7.78493367020960391756e-02,7.56801303589270668581e-02,7.35229737139812683511e-02,7.13779490588903747783e-02,6.92451443970067692657e-02,6.71246538277884968737e-02,6.50165779712428421044e-02,6.29210244377581134900e-02,6.08381083495398641836e-02,5.87679529209337581097e-02,5.67106901062029017391e-02,5.46664613248889139085e-02,5.26354182767921757735e-02,5.06177238609477608833e-02,4.86135532158685212956e-02,4.66230949019303675396e-02,4.46465522512944426592e-02,4.26841449164744313194e-02,4.07361106559409325012e-02,3.88027074045261127777e-02,3.68842156885672844968e-02,3.49809414617160835403e-02,3.30932194585785224850e-02,3.12214171919202448935e-02,2.93659397581333136973e-02,2.75272356696030819079e-02,2.57058040085488964666e-02,2.39022033057958820101e-02,2.21170627073088640890e-02,2.03510962300445172324e-02,1.86051212757246432761e-02,1.68800831525431661861e-02,1.51770883079353248457e-02,1.34974506017398795249e-02,1.18427578579078877224e-02,1.02149714397014711870e-02,8.61658276939873159217e-03,7.05087547137322676050e-03,5.52240329925099675962e-03,4.03797259336303050042e-03,2.60907274610216273134e-03,1.26028593049859753868e-03})
'bc64'/1 =
    %% Line 1722
    fun (_0) ->
	apply 'bc'/3
	    (_0, 9223372036854775808, 64)
'bc'/3 =
    %% Line 1725
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <V,B,N>
	      when call 'erlang':'=<'
		    (B,
		     V) ->
	      N
	  %% Line 1726
	  <V,B,N> when 'true' ->
	      let <_4> =
		  call 'erlang':'bsr'
		      (B, 1)
	      in  let <_3> =
		      call 'erlang':'-'
			  (N, 1)
		  in  apply 'bc'/3
			  (V, _4, _3)
	end
'make_float'/3 =
    %% Line 1728
    fun (_0,_1,_2) ->
	%% Line 1729
	case #{#<_0>(1,1,'integer',['unsigned'|['big']]),
	       #<_1>(11,1,'integer',['unsigned'|['big']]),
	       #<_2>(52,1,'integer',['unsigned'|['big']])}# of
	  <#{#<F>(64,1,'float',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1730
	      F
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_3})
	    -| ['compiler_generated'] )
	end
'float2str'/1 =
    %% Line 1732
    fun (_0) ->
	let <_1> =
	    call %% Line 1733
		 'erlang':%% Line 1733
			  'float'
		(_0)
	in  %% Line 1733
	    case #{#<_1>(64,1,'float',['unsigned'|['big']])}# of
	      <#{#<S>(1,1,'integer',['unsigned'|['big']]),
		 #<E>(11,1,'integer',['unsigned'|['big']]),
		 #<M>(52,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		  let <_4> =
		      case %% Line 1737
			   S of
			%% Line 1737
			<1> when 'true' ->
			    45
			%% Line 1737
			<0> when 'true' ->
			    43
			( <_3> when 'true' ->
			      %% Line 1737
			      primop 'match_fail'
				  ({'case_clause',_3})
			  -| ['compiler_generated'] )
		      end
		  in  let <_6> =
			  case %% Line 1738
			       E of
			    %% Line 1738
			    <0> when 'true' ->
				48
			    %% Line 1738
			    <_10> when 'true' ->
				49
			  end
		      in  let <_7> =
			      call %% Line 1739
				   'erlang':%% Line 1739
					    '-'
				  (%% Line 1739
				   E, %% Line 1739
				      1023)
			  in  let <_8> =
				  call %% Line 1735
				       'io_lib':%% Line 1735
						'format'
				      (%% Line 1736
				       [126|[99|[126|[99|[46|[126|[49|[51|[46|[49|[54|[46|[48|[98|[69|[126|[98]]]]]]]]]]]]]]]]], %% Line 1737
																 [_4|%% Line 1738
																     [_6|%% Line 1739
																	 [M|[_7|[]]]]])
			      in  %% Line 1734
				  call 'lists':'flatten'
				      (_8)
	      ( <_2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_2})
		-| ['compiler_generated'] )
	    end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('rand')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('rand', _0)
end