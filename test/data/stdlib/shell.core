module 'shell' ['catch_exception'/1,
		'history'/1,
		'local_allowed'/3,
		'module_info'/0,
		'module_info'/1,
		'non_local_allowed'/3,
		'prompt_func'/1,
		'results'/1,
		'server'/1,
		'server'/2,
		'start'/0,
		'start'/1,
		'start'/2,
		'start_restricted'/1,
		'stop_restricted'/0,
		'strings'/1,
		'whereis_evaluator'/0,
		'whereis_evaluator'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[115|[104|[101|[108|[108|[46|[101|[114|[108]]]]]]]]]]]]],1}],
		%% Line 51
		'spec' =
		    %% Line 51
		    [{{'start',0},[{'type',51,'fun',[{'type',51,'product',[]}|[{'type',51,'pid',[]}]]}]}],
		%% Line 66
		'spec' =
		    %% Line 66
		    [{{'whereis_evaluator',0},[{'type',66,'fun',[{'type',66,'product',[]}|[{'type',66,'union',[{'atom',66,'undefined'}|[{'type',66,'pid',[]}]]}]]}]}],
		%% Line 103
		'spec' =
		    %% Line 103
		    [{{'whereis_evaluator',1},[{'type',103,'fun',[{'type',103,'product',[{'type',103,'pid',[]}]}|[{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'pid',[]}]]}]]}]}],
		%% Line 120
		'spec' =
		    %% Line 120
		    [{{'start_restricted',1},[{'type',120,'bounded_fun',[{'type',120,'fun',[{'type',120,'product',[{'var',120,'Module'}]}|[{'type',120,'tuple',[{'atom',120,'error'}|[{'var',120,'Reason'}]]}]]}|[[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'Module'}|[{'type',121,'module',[]}]]]]}|[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'Reason'}|[{'remote_type',122,[{'atom',122,'code'}|[{'atom',122,'load_error_rsn'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 138
		'spec' =
		    %% Line 138
		    [{{'stop_restricted',0},[{'type',138,'fun',[{'type',138,'product',[]}|[{'type',138,'no_return',[]}]]}]}],
		%% Line 144
		'spec' =
		    %% Line 144
		    [{{'server',2},[{'type',144,'fun',[{'type',144,'product',[{'type',144,'boolean',[]}|[{'type',144,'boolean',[]}]]}|[{'atom',144,'terminated'}]]}]}],
		%% Line 161
		'spec' =
		    %% Line 161
		    [{{'server',1},[{'type',161,'fun',[{'type',161,'product',[{'type',161,'boolean',[]}]}|[{'atom',161,'terminated'}]]}]}],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[47|[117|[115|[114|[47|[108|[111|[99|[97|[108|[47|[67|[101|[108|[108|[97|[114|[47|[101|[114|[108|[97|[110|[103|[47|[50|[50|[46|[50|[47|[108|[105|[98|[47|[101|[114|[108|[97|[110|[103|[47|[108|[105|[98|[47|[107|[101|[114|[110|[101|[108|[45|[54|[46|[53|[46|[49|[47|[105|[110|[99|[108|[117|[100|[101|[47|[102|[105|[108|[101|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 25
		'record' =
		    %% Line 25
		    [{'file_info',[{'typed_record_field',{'record_field',26,{'atom',26,'size'}},{'type',26,'union',[{'type',26,'non_neg_integer',[]}|[{'atom',26,'undefined'}]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'type'}},{'type',27,'union',[{'atom',27,'device'}|[{'atom',27,'directory'}|[{'atom',27,'other'}|[{'atom',27,'regular'}|[{'atom',27,'symlink'}|[{'atom',28,'undefined'}]]]]]]}}|[{'typed_record_field',{'record_field',29,{'atom',29,'access'}},{'type',29,'union',[{'atom',29,'read'}|[{'atom',29,'write'}|[{'atom',29,'read_write'}|[{'atom',29,'none'}|[{'atom',29,'undefined'}]]]]]}}|[{'typed_record_field',{'record_field',30,{'atom',30,'atime'}},{'type',30,'union',[{'remote_type',30,[{'atom',30,'file'}|[{'atom',30,'date_time'}|[[]]]]}|[{'type',30,'non_neg_integer',[]}|[{'atom',30,'undefined'}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'mtime'}},{'type',34,'union',[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}|[{'atom',34,'undefined'}]]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'ctime'}},{'type',36,'union',[{'remote_type',36,[{'atom',36,'file'}|[{'atom',36,'date_time'}|[[]]]]}|[{'type',36,'non_neg_integer',[]}|[{'atom',36,'undefined'}]]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'mode'}},{'type',42,'union',[{'type',42,'non_neg_integer',[]}|[{'atom',42,'undefined'}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'links'}},{'type',46,'union',[{'type',46,'non_neg_integer',[]}|[{'atom',46,'undefined'}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'major_device'}},{'type',49,'union',[{'type',49,'non_neg_integer',[]}|[{'atom',49,'undefined'}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'minor_device'}},{'type',55,'union',[{'type',55,'non_neg_integer',[]}|[{'atom',55,'undefined'}]]}}|[{'typed_record_field',{'record_field',57,{'atom',57,'inode'}},{'type',57,'union',[{'type',57,'non_neg_integer',[]}|[{'atom',57,'undefined'}]]}}|[{'typed_record_field',{'record_field',58,{'atom',58,'uid'}},{'type',58,'union',[{'type',58,'non_neg_integer',[]}|[{'atom',58,'undefined'}]]}}|[{'typed_record_field',{'record_field',59,{'atom',59,'gid'}},{'type',59,'union',[{'type',59,'non_neg_integer',[]}|[{'atom',59,'undefined'}]]}}]]]]]]]]]]]]]}],
		%% Line 62
		'record' =
		    %% Line 62
		    [{'file_descriptor',[{'typed_record_field',{'record_field',63,{'atom',63,'module'}},{'type',63,'module',[]}}|[{'typed_record_field',{'record_field',64,{'atom',64,'data'}},{'type',64,'term',[]}}]]}],
		%% Line 1203
		'file' =
		    %% Line 1203
		    [{[115|[114|[99|[47|[115|[104|[101|[108|[108|[46|[101|[114|[108]]]]]]]]]]]]],1203}],
		%% Line 1477
		'spec' =
		    %% Line 1477
		    [{{'history',1},[{'type',1477,'bounded_fun',[{'type',1477,'fun',[{'type',1477,'product',[{'var',1477,'N'}]}|[{'type',1477,'non_neg_integer',[]}]]}|[[{'type',1478,'constraint',[{'atom',1478,'is_subtype'}|[[{'var',1478,'N'}|[{'type',1478,'non_neg_integer',[]}]]]]}]]]}]}],
		%% Line 1483
		'spec' =
		    %% Line 1483
		    [{{'results',1},[{'type',1483,'bounded_fun',[{'type',1483,'fun',[{'type',1483,'product',[{'var',1483,'N'}]}|[{'type',1483,'non_neg_integer',[]}]]}|[[{'type',1484,'constraint',[{'atom',1484,'is_subtype'}|[[{'var',1484,'N'}|[{'type',1484,'non_neg_integer',[]}]]]]}]]]}]}],
		%% Line 1489
		'spec' =
		    %% Line 1489
		    [{{'catch_exception',1},[{'type',1489,'bounded_fun',[{'type',1489,'fun',[{'type',1489,'product',[{'var',1489,'Bool'}]}|[{'type',1489,'boolean',[]}]]}|[[{'type',1490,'constraint',[{'atom',1490,'is_subtype'}|[[{'var',1490,'Bool'}|[{'type',1490,'boolean',[]}]]]]}]]]}]}],
		%% Line 1495
		'spec' =
		    %% Line 1495
		    [{{'prompt_func',1},[{'type',1495,'bounded_fun',[{'type',1495,'fun',[{'type',1495,'product',[{'var',1495,'PromptFunc'}]}|[{'var',1495,'PromptFunc2'}]]}|[[{'type',1496,'constraint',[{'atom',1496,'is_subtype'}|[[{'var',1496,'PromptFunc'}|[{'type',1496,'union',[{'atom',1496,'default'}|[{'type',1496,'tuple',[{'type',1496,'module',[]}|[{'type',1496,'atom',[]}]]}]]}]]]]}|[{'type',1497,'constraint',[{'atom',1497,'is_subtype'}|[[{'var',1497,'PromptFunc2'}|[{'type',1497,'union',[{'atom',1497,'default'}|[{'type',1497,'tuple',[{'type',1497,'module',[]}|[{'type',1497,'atom',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 1502
		'spec' =
		    %% Line 1502
		    [{{'strings',1},[{'type',1502,'bounded_fun',[{'type',1502,'fun',[{'type',1502,'product',[{'var',1502,'Strings'}]}|[{'var',1502,'Strings2'}]]}|[[{'type',1503,'constraint',[{'atom',1503,'is_subtype'}|[[{'var',1503,'Strings'}|[{'type',1503,'boolean',[]}]]]]}|[{'type',1504,'constraint',[{'atom',1504,'is_subtype'}|[[{'var',1504,'Strings2'}|[{'type',1504,'boolean',[]}]]]]}]]]]}]}]]
'local_allowed'/3 =
    %% Line 41
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <'q',[],State> when 'true' ->
	      %% Line 42
	      {'true',State}
	  %% Line 43
	  <_6,_7,State> when 'true' ->
	      %% Line 44
	      {'false',State}
	end
'non_local_allowed'/3 =
    %% Line 46
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{'init','stop'},[],State> when 'true' ->
	      %% Line 47
	      {'true',State}
	  %% Line 48
	  <_6,_7,State> when 'true' ->
	      %% Line 49
	      {'false',State}
	end
'start'/0 =
    %% Line 53
    fun () ->
	%% Line 54
	apply 'start'/2
	    ('false', 'false')
'start'/1 =
    %% Line 56
    fun (_0) ->
	case _0 of
	  <'init'> when 'true' ->
	      %% Line 57
	      apply 'start'/2
		  ('false', 'true')
	  %% Line 58
	  <NoCtrlG> when 'true' ->
	      %% Line 59
	      apply 'start'/2
		  (NoCtrlG, 'false')
	end
'start'/2 =
    %% Line 61
    fun (_0,_1) ->
	do  %% Line 62
	    ( call ( 'code'
		     -| ['result_not_wanted'] ):( 'ensure_loaded'
						  -| ['result_not_wanted'] )
		  (( 'user_default'
		     -| ['result_not_wanted'] ))
	      -| ['result_not_wanted'] )
	    let <_3> =
		fun () ->
		    %% Line 63
		    apply 'server'/2
			(_0, _1)
	    in  %% Line 63
		call 'erlang':'spawn'
		    (_3)
'whereis_evaluator'/0 =
    %% Line 68
    fun () ->
	%% Line 72
	case call 'erlang':'whereis'
		 ('user') of
	  %% Line 73
	  <'undefined'> when 'true' ->
	      %% Line 74
	      'undefined'
	  %% Line 75
	  <User> when 'true' ->
	      %% Line 77
	      case call 'group':'interfaces'
		       (User) of
		%% Line 78
		<[]> when 'true' ->
		    %% Line 79
		    case call 'user':'interfaces'
			     (User) of
		      %% Line 80
		      <[]> when 'true' ->
			  %% Line 81
			  'undefined'
		      %% Line 82
		      <[{'shell',Shell}|[]]> when 'true' ->
			  %% Line 83
			  apply 'whereis_evaluator'/1
			      (Shell)
		      ( <_0> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_0})
			-| ['compiler_generated'] )
		    end
		%% Line 85
		<[{'user_drv',UserDrv}|[]]> when 'true' ->
		    %% Line 87
		    case call 'user_drv':'interfaces'
			     (UserDrv) of
		      %% Line 88
		      <[]> when 'true' ->
			  %% Line 89
			  'undefined'
		      %% Line 90
		      <[{'current_group',Group}|[]]> when 'true' ->
			  let <GrIfs> =
			      call %% Line 92
				   'group':%% Line 92
					   'interfaces'
				  (%% Line 92
				   Group)
			  in  %% Line 93
			      case call 'lists':'keyfind'
				       ('shell', 1, GrIfs) of
				%% Line 94
				<{'shell',Shell}> when 'true' ->
				    %% Line 95
				    apply 'whereis_evaluator'/1
					(Shell)
				%% Line 96
				<'false'> when 'true' ->
				    %% Line 97
				    'undefined'
				( <_2> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_2})
				  -| ['compiler_generated'] )
			      end
		      ( <_3> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_3})
			-| ['compiler_generated'] )
		    end
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
	end
'whereis_evaluator'/1 =
    %% Line 105
    fun (_0) ->
	%% Line 106
	case call 'erlang':'process_info'
		 (_0, 'dictionary') of
	  %% Line 107
	  <{'dictionary',Dict}> when 'true' ->
	      %% Line 108
	      case call 'lists':'keyfind'
		       ('evaluator', 1, Dict) of
		%% Line 109
		<{_4,Eval}>
		    when call 'erlang':'is_pid'
			  (Eval) ->
		    %% Line 110
		    Eval
		%% Line 111
		<_5> when 'true' ->
		    %% Line 112
		    'undefined'
	      end
	  %% Line 114
	  <_6> when 'true' ->
	      %% Line 115
	      'undefined'
	end
'start_restricted'/1 =
    %% Line 124
    fun (_0) ->
	case _0 of
	  <RShMod>
	      when call 'erlang':'is_atom'
		    (_0) ->
	      %% Line 125
	      case call 'code':'ensure_loaded'
		       (RShMod) of
		%% Line 126
		<{'module',_5}>
		    when call 'erlang':'=:='
			  (_5,
			   RShMod) ->
		    do  %% Line 127
			call 'application':'set_env'
			    ('stdlib', 'restricted_shell', RShMod)
			%% Line 128
			call 'erlang':'exit'
			    ('restricted_shell_started')
		%% Line 129
		<Error = {'error',What}> when 'true' ->
		    let <_1> =
			call %% Line 132
			     'io_lib':%% Line 132
				      'fwrite'
			    (%% Line 133
			     [82|[101|[115|[116|[114|[105|[99|[116|[101|[100|[32|[115|[104|[101|[108|[108|[32|[109|[111|[100|[117|[108|[101|[32|[126|[119|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100|[58|[32|[126|[116|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 134
																																		[RShMod|[What|[]]])
		    in  let <_2> =
			    call %% Line 131
				 'lists':%% Line 131
					 'flatten'
				(_1)
			in  do  %% Line 130
				call 'error_logger':'error_report'
				    (_2)
				%% Line 135
				Error
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_3})
		  -| ['compiler_generated'] )
	      end
	  ( <_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4})
		  -| [{'function_name',{'start_restricted',1}}] )
	    -| ['compiler_generated'] )
	end
'stop_restricted'/0 =
    %% Line 140
    fun () ->
	do  %% Line 141
	    call 'application':'unset_env'
		('stdlib', 'restricted_shell')
	    %% Line 142
	    call 'erlang':'exit'
		('restricted_shell_stopped')
'server'/2 =
    %% Line 146
    fun (_0,_1) ->
	do  %% Line 147
	    call 'erlang':'put'
		('no_control_g', _0)
	    %% Line 148
	    apply 'server'/1
		(_1)
'server'/1 =
    %% Line 163
    fun (_0) ->
	do  %% Line 164
	    case call 'init':'get_argument'
		     ('async_shell_start') of
	      %% Line 165
	      <{'ok',_19}> when 'true' ->
		  'ok'
	      %% Line 167
	      <_20>
		  when ( call 'erlang':'=:='
			  (_0,
			   'false')
		      -| ['compiler_generated'] ) ->
		  'ok'
	      %% Line 169
	      <_21> when 'true' ->
		  let <_2> =
		      call %% Line 170
			   'erlang':%% Line 170
				    'self'
			  ()
		  in  %% Line 170
		      case call 'init':'notify_when_started'
			       (_2) of
			%% Line 171
			<'started'> when 'true' ->
			    'ok'
			%% Line 173
			<_22> when 'true' ->
			    %% Line 174
			    call 'init':'wait_until_started'
				()
		      end
	    end
	    let <Bs> =
		call %% Line 178
		     'erl_eval':%% Line 178
				'new_bindings'
		    ()
	    in  let <RT> =
		    call %% Line 183
			 'ets':%% Line 183
			       'new'
			(%% Line 183
			 'shell_records', %% Line 183
					  ['public'|['ordered_set']])
		in  do  %% Line 184
			apply 'initiate_records'/2
			    (Bs, RT)
			do  %% Line 185
			    call 'erlang':'process_flag'
				('trap_exit', 'true')
			    let <_10> =
				case %% Line 189
				     call 'application':'get_env'
					 ('stdlib', 'restricted_shell') of
				  %% Line 190
				  <{'ok',RShMod}>
				      when call 'erlang':'is_atom'
					    (RShMod) ->
				      do  %% Line 191
					  call 'io':'fwrite'
					      (#{#<82>(8,1,'integer',['unsigned'|['big']]),
						 #<101>(8,1,'integer',['unsigned'|['big']]),
						 #<115>(8,1,'integer',['unsigned'|['big']]),
						 #<116>(8,1,'integer',['unsigned'|['big']]),
						 #<114>(8,1,'integer',['unsigned'|['big']]),
						 #<105>(8,1,'integer',['unsigned'|['big']]),
						 #<99>(8,1,'integer',['unsigned'|['big']]),
						 #<116>(8,1,'integer',['unsigned'|['big']]),
						 #<101>(8,1,'integer',['unsigned'|['big']]),
						 #<100>(8,1,'integer',['unsigned'|['big']]),
						 #<32>(8,1,'integer',['unsigned'|['big']])}#, [])
					  %% Line 192
					  case call 'code':'ensure_loaded'
						   (RShMod) of
					    %% Line 193
					    <{'module',_23}>
						when call 'erlang':'=:='
						      (_23,
						       RShMod) ->
						%% Line 194
						'undefined'
					    %% Line 195
					    <{'error',What}> when 'true' ->
						%% Line 196
						{RShMod,What}
					    ( <_8> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_8})
					      -| ['compiler_generated'] )
					  end
				  %% Line 198
				  <{'ok',Term}> when 'true' ->
				      %% Line 199
				      {Term,'not_an_atom'}
				  %% Line 200
				  <'undefined'> when 'true' ->
				      %% Line 201
				      'undefined'
				  ( <_9> when 'true' ->
					%% Line 189
					primop 'match_fail'
					    ({'case_clause',_9})
				    -| ['compiler_generated'] )
				end
			    in  do  %% Line 204
				    case call 'erlang':'get'
					     ('no_control_g') of
				      %% Line 205
				      <'true'> when 'true' ->
					  let <_12> =
					      call %% Line 206
						   'erlang':%% Line 206
							    'system_info'
						  (%% Line 206
						   'version')
					  in  %% Line 206
					      call 'io':'fwrite'
						  (#{#<69>(8,1,'integer',['unsigned'|['big']]),
						     #<115>(8,1,'integer',['unsigned'|['big']]),
						     #<104>(8,1,'integer',['unsigned'|['big']]),
						     #<101>(8,1,'integer',['unsigned'|['big']]),
						     #<108>(8,1,'integer',['unsigned'|['big']]),
						     #<108>(8,1,'integer',['unsigned'|['big']]),
						     #<32>(8,1,'integer',['unsigned'|['big']]),
						     #<86>(8,1,'integer',['unsigned'|['big']]),
						     #<126>(8,1,'integer',['unsigned'|['big']]),
						     #<115>(8,1,'integer',['unsigned'|['big']]),
						     #<10>(8,1,'integer',['unsigned'|['big']])}#, [_12|[]])
				      %% Line 207
				      <_X_undefined_or_false> when 'true' ->
					  let <_13> =
					      call %% Line 209
						   'erlang':%% Line 209
							    'system_info'
						  (%% Line 209
						   'version')
					  in  %% Line 208
					      call 'io':'fwrite'
						  (#{#<69>(8,1,'integer',['unsigned'|['big']]),
						     #<115>(8,1,'integer',['unsigned'|['big']]),
						     #<104>(8,1,'integer',['unsigned'|['big']]),
						     #<101>(8,1,'integer',['unsigned'|['big']]),
						     #<108>(8,1,'integer',['unsigned'|['big']]),
						     #<108>(8,1,'integer',['unsigned'|['big']]),
						     #<32>(8,1,'integer',['unsigned'|['big']]),
						     #<86>(8,1,'integer',['unsigned'|['big']]),
						     #<126>(8,1,'integer',['unsigned'|['big']]),
						     #<115>(8,1,'integer',['unsigned'|['big']]),
						     #<32>(8,1,'integer',['unsigned'|['big']]),
						     #<32>(8,1,'integer',['unsigned'|['big']]),
						     #<40>(8,1,'integer',['unsigned'|['big']]),
						     #<97>(8,1,'integer',['unsigned'|['big']]),
						     #<98>(8,1,'integer',['unsigned'|['big']]),
						     #<111>(8,1,'integer',['unsigned'|['big']]),
						     #<114>(8,1,'integer',['unsigned'|['big']]),
						     #<116>(8,1,'integer',['unsigned'|['big']]),
						     #<32>(8,1,'integer',['unsigned'|['big']]),
						     #<119>(8,1,'integer',['unsigned'|['big']]),
						     #<105>(8,1,'integer',['unsigned'|['big']]),
						     #<116>(8,1,'integer',['unsigned'|['big']]),
						     #<104>(8,1,'integer',['unsigned'|['big']]),
						     #<32>(8,1,'integer',['unsigned'|['big']]),
						     #<94>(8,1,'integer',['unsigned'|['big']]),
						     #<71>(8,1,'integer',['unsigned'|['big']]),
						     #<41>(8,1,'integer',['unsigned'|['big']]),
						     #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 209
												  [_13|[]])
				    end
				    do  %% Line 211
					call 'erlang':'erase'
					    ('no_control_g')
					do  %% Line 213
					    case _10 of
					      %% Line 214
					      <'undefined'> when 'true' ->
						  'ok'
					      %% Line 216
					      <{RShMod2,What2}> when 'true' ->
						  do  %% Line 217
						      call 'io':'fwrite'
							  (%% Line 218
							   [87|[97|[114|[110|[105|[110|[103|[33|[32|[82|[101|[115|[116|[114|[105|[99|[116|[101|[100|[32|[115|[104|[101|[108|[108|[32|[109|[111|[100|[117|[108|[101|[32|[126|[119|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100|[58|[32|[126|[116|[112|[46|[10|[79|[110|[108|[121|[32|[116|[104|[101|[32|[99|[111|[109|[109|[97|[110|[100|[115|[32|[113|[40|[41|[32|[97|[110|[100|[32|[105|[110|[105|[116|[58|[115|[116|[111|[112|[40|[41|[32|[119|[105|[108|[108|[32|[98|[101|[32|[97|[108|[108|[111|[119|[101|[100|[33|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 220
																																																																																			  [RShMod2|[What2|[]]])
						      %% Line 221
						      call 'application':'set_env'
							  ('stdlib', 'restricted_shell', 'shell')
					      ( <_15> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_15})
						-| ['compiler_generated'] )
					    end
					    %% Line 224
					    case apply 'check_and_get_history_and_results'/0
						     () of
					      <{History,Results}> when 'true' ->
						  let <_17> =
						      apply %% Line 225
							    'start_eval'/3
							  (%% Line 225
							   Bs, %% Line 225
							       RT, %% Line 225
								   [])
						  in  %% Line 225
						      apply 'server_loop'/7
							  (0, _17, Bs, RT, [], History, Results)
					      ( <_16> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_16})
						-| ['compiler_generated'] )
					    end
'server_loop'/7 =
    %% Line 227
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	let <N> =
	    call %% Line 228
		 'erlang':%% Line 228
			  '+'
		(_0, %% Line 228
		     1)
	in  %% Line 229
	    case apply 'prompt'/5
		     (N, _1, _2, _3, _4) of
	      <{Eval_1,Bs0,Ds0,Prompt}> when 'true' ->
		  %% Line 230
		  case apply 'get_command'/5
			   (Prompt, Eval_1, Bs0, _3, Ds0) of
		    <{Res,Eval0}> when 'true' ->
			%% Line 231
			case Res of
			  %% Line 232
			  <{'ok',Es0,XBs}> when 'true' ->
			      let <Es1> =
				  call %% Line 233
				       'erl_eval':%% Line 233
						  'subst_values_for_vars'
				      (%% Line 233
				       Es0, %% Line 233
					    XBs)
			      in  %% Line 234
				  case apply 'expand_hist'/2
					   (Es1, N) of
				    %% Line 235
				    <{'ok',Es}> when 'true' ->
					%% Line 236
					case apply 'shell_cmd'/6
						 (Es, Eval0, Bs0, _3, Ds0, 'cmd') of
					  <{V,Eval,Bs,Ds}> when 'true' ->
					      %% Line 237
					      case apply 'check_and_get_history_and_results'/0
						       () of
						<{History,Results}> when 'true' ->
						    do  %% Line 238
							apply 'add_cmd'/3
							    (N, Es, V)
							let <_14> =
							    call %% Line 239
								 'erlang':%% Line 239
									  '-'
								(%% Line 239
								 N, %% Line 239
								    History)
							in  let <_13> =
								call %% Line 239
								     'erlang':%% Line 239
									      '-'
								    (%% Line 239
								     N, _5)
							    in  let <HB1> =
								    apply %% Line 239
									  'del_cmd'/4
									(%% Line 239
									 'command', _14, _13, %% Line 239
											      'false')
								in  let <_17> =
									call %% Line 240
									     'erlang':%% Line 240
										      '-'
									    (%% Line 240
									     N, %% Line 240
										Results)
								    in  let <_16> =
									    call %% Line 240
										 'erlang':%% Line 240
											  '-'
										(%% Line 240
										 N, _6)
									in  let <HB> =
										apply %% Line 240
										      'del_cmd'/4
										    (%% Line 240
										     'result', _17, _16, %% Line 240
													 HB1)
									    in  do  %% Line 244
										    case <> of
										      %% Line 245
										      <>
											  when ( call 'erlang':'=:='
												  (HB,
												   'true')
											      -| ['compiler_generated'] ) ->
											  let <_19> =
											      call %% Line 246
												   'erlang':%% Line 246
													    'self'
												  ()
											  in  %% Line 246
											      apply 'garb'/1
												  (_19)
										      %% Line 247
										      <> when 'true' ->
											  'ok'
										    end
										    %% Line 250
										    apply 'server_loop'/7
											(N, Eval, Bs, _3, Ds, History, Results)
						( <_12> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_12})
						  -| ['compiler_generated'] )
					      end
					  ( <_11> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_11})
					    -| ['compiler_generated'] )
					end
				    %% Line 251
				    <{'error',E}> when 'true' ->
					do  %% Line 252
					    apply 'fwrite_severity'/3
						('benign', #{#<126>(8,1,'integer',['unsigned'|['big']]),
							     #<116>(8,1,'integer',['unsigned'|['big']]),
							     #<115>(8,1,'integer',['unsigned'|['big']])}#, [E|[]])
					    %% Line 253
					    apply 'server_loop'/7
						(_0, Eval0, Bs0, _3, Ds0, _5, _6)
				    ( <_20> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_20})
				      -| ['compiler_generated'] )
				  end
			  %% Line 255
			  <{'error',{Line,Mod,What}}> when 'true' ->
			      let <_21> =
				  call %% Line 257
				       Mod:%% Line 257
					   'format_error'
				      (%% Line 257
				       What)
			      in  do  %% Line 256
				      apply 'fwrite_severity'/3
					  ('benign', #{#<126>(8,1,'integer',['unsigned'|['big']]),
						       #<119>(8,1,'integer',['unsigned'|['big']]),
						       #<58>(8,1,'integer',['unsigned'|['big']]),
						       #<32>(8,1,'integer',['unsigned'|['big']]),
						       #<126>(8,1,'integer',['unsigned'|['big']]),
						       #<116>(8,1,'integer',['unsigned'|['big']]),
						       #<115>(8,1,'integer',['unsigned'|['big']])}#, %% Line 257
												     [Line|[_21|[]]])
				      %% Line 258
				      apply 'server_loop'/7
					  (_0, Eval0, Bs0, _3, Ds0, _5, _6)
			  %% Line 259
			  <{'error','terminated'}> when 'true' ->
			      do  %% Line 260
				  call 'erlang':'exit'
				      (Eval0, 'kill')
				  %% Line 261
				  'terminated'
			  %% Line 262
			  <{'error','interrupted'}> when 'true' ->
			      do  %% Line 263
				  call 'erlang':'exit'
				      (Eval0, 'kill')
				  %% Line 264
				  case apply 'shell_rep'/4
					   (Eval0, Bs0, _3, Ds0) of
				    <{_32,Eval,_33,_34}> when 'true' ->
					%% Line 265
					apply 'server_loop'/7
					    (_0, Eval, Bs0, _3, Ds0, _5, _6)
				    ( <_22> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_22})
				      -| ['compiler_generated'] )
				  end
			  %% Line 266
			  <{'error','tokens'}> when 'true' ->
			      do  %% Line 267
				  apply 'fwrite_severity'/3
				      ('benign', #{#<126>(8,1,'integer',['unsigned'|['big']]),
						   #<119>(8,1,'integer',['unsigned'|['big']]),
						   #<58>(8,1,'integer',['unsigned'|['big']]),
						   #<32>(8,1,'integer',['unsigned'|['big']]),
						   #<73>(8,1,'integer',['unsigned'|['big']]),
						   #<110>(8,1,'integer',['unsigned'|['big']]),
						   #<118>(8,1,'integer',['unsigned'|['big']]),
						   #<97>(8,1,'integer',['unsigned'|['big']]),
						   #<108>(8,1,'integer',['unsigned'|['big']]),
						   #<105>(8,1,'integer',['unsigned'|['big']]),
						   #<100>(8,1,'integer',['unsigned'|['big']]),
						   #<32>(8,1,'integer',['unsigned'|['big']]),
						   #<116>(8,1,'integer',['unsigned'|['big']]),
						   #<111>(8,1,'integer',['unsigned'|['big']]),
						   #<107>(8,1,'integer',['unsigned'|['big']]),
						   #<101>(8,1,'integer',['unsigned'|['big']]),
						   #<110>(8,1,'integer',['unsigned'|['big']]),
						   #<115>(8,1,'integer',['unsigned'|['big']]),
						   #<46>(8,1,'integer',['unsigned'|['big']])}#, %% Line 268
												[N|[]])
				  %% Line 269
				  apply 'server_loop'/7
				      (_0, Eval0, Bs0, _3, Ds0, _5, _6)
			  %% Line 270
			  <'eof'> when 'true' ->
			      let <_23> =
				  call %% Line 271
				       'erlang':%% Line 271
						'node'
				      ()
			      in  do  %% Line 271
				      apply 'fwrite_severity'/3
					  ('fatal', #{#<84>(8,1,'integer',['unsigned'|['big']]),
						      #<101>(8,1,'integer',['unsigned'|['big']]),
						      #<114>(8,1,'integer',['unsigned'|['big']]),
						      #<109>(8,1,'integer',['unsigned'|['big']]),
						      #<105>(8,1,'integer',['unsigned'|['big']]),
						      #<110>(8,1,'integer',['unsigned'|['big']]),
						      #<97>(8,1,'integer',['unsigned'|['big']]),
						      #<116>(8,1,'integer',['unsigned'|['big']]),
						      #<105>(8,1,'integer',['unsigned'|['big']]),
						      #<110>(8,1,'integer',['unsigned'|['big']]),
						      #<103>(8,1,'integer',['unsigned'|['big']]),
						      #<32>(8,1,'integer',['unsigned'|['big']]),
						      #<101>(8,1,'integer',['unsigned'|['big']]),
						      #<114>(8,1,'integer',['unsigned'|['big']]),
						      #<108>(8,1,'integer',['unsigned'|['big']]),
						      #<97>(8,1,'integer',['unsigned'|['big']]),
						      #<110>(8,1,'integer',['unsigned'|['big']]),
						      #<103>(8,1,'integer',['unsigned'|['big']]),
						      #<32>(8,1,'integer',['unsigned'|['big']]),
						      #<40>(8,1,'integer',['unsigned'|['big']]),
						      #<126>(8,1,'integer',['unsigned'|['big']]),
						      #<119>(8,1,'integer',['unsigned'|['big']]),
						      #<41>(8,1,'integer',['unsigned'|['big']])}#, [_23|[]])
				      %% Line 272
				      call 'erlang':'halt'
					  ()
			  ( <_24> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_24})
			    -| ['compiler_generated'] )
			end
		    ( <_9> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_9})
		      -| ['compiler_generated'] )
		  end
	      ( <_8> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_8})
		-| ['compiler_generated'] )
	    end
'get_command'/5 =
    %% Line 275
    fun (_0,_1,_2,_3,_4) ->
	let <Parse> =
	    fun () ->
		let <_5> =
		    call %% Line 280
			 'erlang':%% Line 280
				  'group_leader'
			()
		in  let <_12> =
			case %% Line 280
			     call 'io':'scan_erl_exprs'
				 (_5, _0, 1, ['text']) of
			  %% Line 282
			  <{'ok',Toks,_X_EndPos}> when 'true' ->
			      %% Line 283
			      call 'erl_eval':'extended_parse_exprs'
				  (Toks)
			  %% Line 284
			  <{'eof',_X_EndPos}> when 'true' ->
			      %% Line 285
			      'eof'
			  %% Line 286
			  <{'error',ErrorInfo,_X_EndPos}> when 'true' ->
			      let <Opts> =
				  call %% Line 288
				       'io':%% Line 288
					    'getopts'
				      ()
			      in  let <TmpOpts> =
				      call %% Line 289
					   'lists':%% Line 289
						   'keyreplace'
					  (%% Line 289
					   'echo', %% Line 289
						   1, %% Line 289
						      Opts, %% Line 290
							    {'echo','false'})
				  in  do  %% Line 291
					  ( call ( 'io'
						   -| ['result_not_wanted'] ):( 'setopts'
										-| ['result_not_wanted'] )
						(TmpOpts)
					    -| ['result_not_wanted'] )
					  do  %% Line 292
					      ( call ( 'io'
						       -| ['result_not_wanted'] ):( 'get_line'
										    -| ['result_not_wanted'] )
						    (( ''
						       -| ['result_not_wanted'] ))
						-| ['result_not_wanted'] )
					      do  %% Line 293
						  ( call ( 'io'
							   -| ['result_not_wanted'] ):( 'setopts'
											-| ['result_not_wanted'] )
							(Opts)
						    -| ['result_not_wanted'] )
						  %% Line 294
						  {'error',ErrorInfo}
			  %% Line 295
			  <Else> when 'true' ->
			      %% Line 296
			      Else
			end
		    in  %% Line 278
			call 'erlang':'exit'
			    (_12)
	in  let <Pid> =
		call %% Line 300
		     'erlang':%% Line 300
			      'spawn_link'
		    (%% Line 300
		     Parse)
	    in  %% Line 301
		apply 'get_command1'/5
		    (Pid, _1, _2, _3, _4)
'get_command1'/5 =
    %% Line 303
    fun (_0,_1,_2,_3,_4) ->
	%% Line 304
	receive
	  %% Line 305
	  <{'EXIT',_12,Res}>
	      when call 'erlang':'=:='
		    (_12,
		     _0) ->
	      %% Line 306
	      {Res,_1}
	  %% Line 307
	  <{'EXIT',_13,_@r0 = {Reason,Stacktrace}}>
	      when call 'erlang':'=:='
		    (_13,
		     _1) ->
	      do  %% Line 308
		  apply 'report_exception'/3
		      ('error', _@r0, _3)
		  let <_5> =
		      apply %% Line 309
			    'start_eval'/3
			  (_2, _3, _4)
		  in  %% Line 309
		      apply 'get_command1'/5
			  (_0, _5, _2, _3, _4)
	  %% Line 310
	  <{'EXIT',_14,Reason}>
	      when call 'erlang':'=:='
		    (_14,
		     _1) ->
	      do  %% Line 311
		  apply 'report_exception'/3
		      ('error', {Reason,[]}, _3)
		  let <_6> =
		      apply %% Line 312
			    'start_eval'/3
			  (_2, _3, _4)
		  in  %% Line 312
		      apply 'get_command1'/5
			  (_0, _6, _2, _3, _4)
	after 'infinity' ->
	  'true'
'prompt'/5 =
    %% Line 315
    fun (_0,_1,_2,_3,_4) ->
	%% Line 316
	case apply 'get_prompt_func'/0
		 () of
	  %% Line 317
	  <_@r0 = {M,F}> when 'true' ->
	      let <L> =
		  [%% Line 318
		   {'history',_0}|%% Line 318
				  []]
	      in  let <A> =
		      call %% Line 319
			   'erl_anno':%% Line 319
				      'new'
			  (%% Line 319
			   1)
		  in  let <C> =
			  {%% Line 320
			   'call',%% Line 320
				  A,%% Line 320
				    {'remote',A,{'atom',A,M},{'atom',A,F}},%% Line 320
									   [{'value',A,L}|[]]}
		      in  %% Line 321
			  case apply 'shell_cmd'/6
				   ([C|[]], _1, _2, _3, _4, 'pmt') of
			    <{V,Eval,Bs,Ds}> when 'true' ->
				let <_10> =
				    case %% Line 322
					 V of
				      %% Line 323
				      <{'pmt',Val}> when 'true' ->
					  %% Line 324
					  Val
				      %% Line 325
				      <_18> when 'true' ->
					  do  %% Line 326
					      apply 'bad_prompt_func'/1
						  (_@r0)
					      %% Line 327
					      apply 'default_prompt'/1
						  (_0)
				    end
				in  %% Line 322
				    {Eval,Bs,Ds,_10}
			    ( <_8> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_8})
			      -| ['compiler_generated'] )
			  end
	  %% Line 329
	  <'default'> when 'true' ->
	      let <_11> =
		  apply %% Line 330
			'default_prompt'/1
		      (_0)
	      in  %% Line 330
		  {_1,_2,_4,_11}
	  ( <_12> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_12})
	    -| ['compiler_generated'] )
	end
'get_prompt_func'/0 =
    %% Line 333
    fun () ->
	%% Line 334
	case call 'application':'get_env'
		 ('stdlib', 'shell_prompt_func') of
	  %% Line 335
	  <{'ok',PromptFunc = {M,F}}>
	      when let <_0> =
		    call 'erlang':'is_atom'
			(M)
		in  let <_1> =
			call 'erlang':'is_atom'
			    (F)
		    in  call 'erlang':'and'
			    (_0, _1) ->
	      %% Line 336
	      PromptFunc
	  %% Line 337
	  <{'ok',Default = 'default'}> when 'true' ->
	      %% Line 338
	      Default
	  %% Line 339
	  <{'ok',Term}> when 'true' ->
	      do  %% Line 340
		  apply 'bad_prompt_func'/1
		      (Term)
		  %% Line 341
		  'default'
	  %% Line 342
	  <'undefined'> when 'true' ->
	      %% Line 343
	      'default'
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_2})
	    -| ['compiler_generated'] )
	end
'bad_prompt_func'/1 =
    %% Line 346
    fun (_0) ->
	%% Line 347
	apply 'fwrite_severity'/3
	    ('benign', [66|[97|[100|[32|[112|[114|[111|[109|[112|[116|[32|[102|[117|[110|[99|[116|[105|[111|[110|[58|[32|[126|[116|[112]]]]]]]]]]]]]]]]]]]]]]]], [_0|[]])
'default_prompt'/1 =
    %% Line 349
    fun (_0) ->
	%% Line 352
	case call 'erlang':'is_alive'
		 () of
	  %% Line 353
	  <'true'> when 'true' ->
	      let <_1> =
		  call 'erlang':'node'
		      ()
	      in  call 'io_lib':'format'
		      (#{#<40>(8,1,'integer',['unsigned'|['big']]),
			 #<126>(8,1,'integer',['unsigned'|['big']]),
			 #<115>(8,1,'integer',['unsigned'|['big']]),
			 #<41>(8,1,'integer',['unsigned'|['big']]),
			 #<126>(8,1,'integer',['unsigned'|['big']]),
			 #<119>(8,1,'integer',['unsigned'|['big']]),
			 #<62>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']])}#, [_1|[_0|[]]])
	  %% Line 354
	  <'false'> when 'true' ->
	      call 'io_lib':'format'
		  (#{#<126>(8,1,'integer',['unsigned'|['big']]),
		     #<119>(8,1,'integer',['unsigned'|['big']]),
		     #<62>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']])}#, [_0|[]])
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_2})
	    -| ['compiler_generated'] )
	end
'expand_hist'/2 =
    %% Line 361
    fun (_0,_1) ->
	catch
	    let <_2> =
		apply %% Line 362
		      'expand_exprs'/2
		    (_0, _1)
	    in  %% Line 362
		{'ok',_2}
'expand_exprs'/2 =
    %% Line 364
    fun (_0,_1) ->
	case <_0,_1> of
	  <[E|Es],C> when 'true' ->
	      let <_2> =
		  apply %% Line 365
			'expand_expr'/2
		      (%% Line 365
		       E, %% Line 365
			  C)
	      in  let <_3> =
		      apply %% Line 365
			    'expand_exprs'/2
			  (%% Line 365
			   Es, %% Line 365
			       C)
		  in  %% Line 365
		      [_2|_3]
	  %% Line 366
	  <[],_X_C> when 'true' ->
	      %% Line 367
	      []
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'expand_exprs',2}}] )
	    -| ['compiler_generated'] )
	end
'expand_expr'/2 =
    %% Line 369
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'cons',L,H,T},C> when 'true' ->
	      let <_3> =
		  apply %% Line 370
			'expand_expr'/2
		      (%% Line 370
		       H, %% Line 370
			  C)
	      in  let <_2> =
		      apply %% Line 370
			    'expand_expr'/2
			  (%% Line 370
			   T, %% Line 370
			      C)
		  in  %% Line 370
		      {'cons',L,_3,_2}
	  %% Line 371
	  <{'lc',L,E,Qs},C> when 'true' ->
	      let <_5> =
		  apply %% Line 372
			'expand_expr'/2
		      (%% Line 372
		       E, %% Line 372
			  C)
	      in  let <_4> =
		      apply %% Line 372
			    'expand_quals'/2
			  (%% Line 372
			   Qs, %% Line 372
			       C)
		  in  %% Line 372
		      {'lc',L,_5,_4}
	  %% Line 373
	  <{'bc',L,E,Qs},C> when 'true' ->
	      let <_7> =
		  apply %% Line 374
			'expand_expr'/2
		      (%% Line 374
		       E, %% Line 374
			  C)
	      in  let <_6> =
		      apply %% Line 374
			    'expand_quals'/2
			  (%% Line 374
			   Qs, %% Line 374
			       C)
		  in  %% Line 374
		      {'bc',L,_7,_6}
	  %% Line 375
	  <{'tuple',L,Elts},C> when 'true' ->
	      let <_8> =
		  apply %% Line 376
			'expand_exprs'/2
		      (%% Line 376
		       Elts, %% Line 376
			     C)
	      in  %% Line 376
		  {'tuple',L,_8}
	  %% Line 377
	  <{'map',L,Es},C> when 'true' ->
	      let <_9> =
		  apply %% Line 378
			'expand_exprs'/2
		      (%% Line 378
		       Es, %% Line 378
			   C)
	      in  %% Line 378
		  {'map',L,_9}
	  %% Line 379
	  <{'map',L,Arg,Es},C> when 'true' ->
	      let <_11> =
		  apply %% Line 380
			'expand_expr'/2
		      (%% Line 380
		       Arg, %% Line 380
			    C)
	      in  let <_10> =
		      apply %% Line 380
			    'expand_exprs'/2
			  (%% Line 380
			   Es, %% Line 380
			       C)
		  in  %% Line 380
		      {'map',L,_11,_10}
	  %% Line 381
	  <{'map_field_assoc',L,K,V},C> when 'true' ->
	      let <_13> =
		  apply %% Line 382
			'expand_expr'/2
		      (%% Line 382
		       K, %% Line 382
			  C)
	      in  let <_12> =
		      apply %% Line 382
			    'expand_expr'/2
			  (%% Line 382
			   V, %% Line 382
			      C)
		  in  %% Line 382
		      {'map_field_assoc',L,_13,_12}
	  %% Line 383
	  <{'map_field_exact',L,K,V},C> when 'true' ->
	      let <_15> =
		  apply %% Line 384
			'expand_expr'/2
		      (%% Line 384
		       K, %% Line 384
			  C)
	      in  let <_14> =
		      apply %% Line 384
			    'expand_expr'/2
			  (%% Line 384
			   V, %% Line 384
			      C)
		  in  %% Line 384
		      {'map_field_exact',L,_15,_14}
	  %% Line 385
	  <{'record_index',L,Name,F},C> when 'true' ->
	      let <_16> =
		  apply %% Line 386
			'expand_expr'/2
		      (%% Line 386
		       F, %% Line 386
			  C)
	      in  %% Line 386
		  {'record_index',L,Name,_16}
	  %% Line 387
	  <{'record',L,Name,Is},C> when 'true' ->
	      let <_17> =
		  apply %% Line 388
			'expand_fields'/2
		      (%% Line 388
		       Is, %% Line 388
			   C)
	      in  %% Line 388
		  {'record',L,Name,_17}
	  %% Line 389
	  <{'record_field',L,R,Name,F},C> when 'true' ->
	      let <_19> =
		  apply %% Line 390
			'expand_expr'/2
		      (%% Line 390
		       R, %% Line 390
			  C)
	      in  let <_18> =
		      apply %% Line 390
			    'expand_expr'/2
			  (%% Line 390
			   F, %% Line 390
			      C)
		  in  %% Line 390
		      {'record_field',L,_19,Name,_18}
	  %% Line 391
	  <{'record',L,R,Name,Ups},C> when 'true' ->
	      let <_21> =
		  apply %% Line 392
			'expand_expr'/2
		      (%% Line 392
		       R, %% Line 392
			  C)
	      in  let <_20> =
		      apply %% Line 392
			    'expand_fields'/2
			  (%% Line 392
			   Ups, %% Line 392
				C)
		  in  %% Line 392
		      {'record',L,_21,Name,_20}
	  %% Line 393
	  <{'record_field',L,R,F},C> when 'true' ->
	      let <_23> =
		  apply %% Line 394
			'expand_expr'/2
		      (%% Line 394
		       R, %% Line 394
			  C)
	      in  let <_22> =
		      apply %% Line 394
			    'expand_expr'/2
			  (%% Line 394
			   F, %% Line 394
			      C)
		  in  %% Line 394
		      {'record_field',L,_23,_22}
	  %% Line 395
	  <{'block',L,Es},C> when 'true' ->
	      let <_24> =
		  apply %% Line 396
			'expand_exprs'/2
		      (%% Line 396
		       Es, %% Line 396
			   C)
	      in  %% Line 396
		  {'block',L,_24}
	  %% Line 397
	  <{'if',L,Cs},C> when 'true' ->
	      let <_25> =
		  apply %% Line 398
			'expand_cs'/2
		      (%% Line 398
		       Cs, %% Line 398
			   C)
	      in  %% Line 398
		  {'if',L,_25}
	  %% Line 399
	  <{'case',L,E,Cs},C> when 'true' ->
	      let <_27> =
		  apply %% Line 400
			'expand_expr'/2
		      (%% Line 400
		       E, %% Line 400
			  C)
	      in  let <_26> =
		      apply %% Line 400
			    'expand_cs'/2
			  (%% Line 400
			   Cs, %% Line 400
			       C)
		  in  %% Line 400
		      {'case',L,_27,_26}
	  %% Line 401
	  <{'try',L,Es,Scs,Ccs,As},C> when 'true' ->
	      let <_31> =
		  apply %% Line 402
			'expand_exprs'/2
		      (%% Line 402
		       Es, %% Line 402
			   C)
	      in  let <_30> =
		      apply %% Line 402
			    'expand_cs'/2
			  (%% Line 402
			   Scs, %% Line 402
				C)
		  in  let <_29> =
			  apply %% Line 403
				'expand_cs'/2
			      (%% Line 403
			       Ccs, %% Line 403
				    C)
		      in  let <_28> =
			      apply %% Line 403
				    'expand_exprs'/2
				  (%% Line 403
				   As, %% Line 403
				       C)
			  in  %% Line 402
			      {'try',L,_31,_30,_29,_28}
	  %% Line 404
	  <{'receive',L,Cs},C> when 'true' ->
	      let <_32> =
		  apply %% Line 405
			'expand_cs'/2
		      (%% Line 405
		       Cs, %% Line 405
			   C)
	      in  %% Line 405
		  {'receive',L,_32}
	  %% Line 406
	  <{'receive',L,Cs,To,ToEs},C> when 'true' ->
	      let <_35> =
		  apply %% Line 407
			'expand_cs'/2
		      (%% Line 407
		       Cs, %% Line 407
			   C)
	      in  let <_34> =
		      apply %% Line 407
			    'expand_expr'/2
			  (%% Line 407
			   To, %% Line 407
			       C)
		  in  let <_33> =
			  apply %% Line 407
				'expand_exprs'/2
			      (%% Line 407
			       ToEs, %% Line 407
				     C)
		      in  %% Line 407
			  {'receive',L,_35,_34,_33}
	  %% Line 408
	  <{'call',L,{'atom',_54,'e'},[N|[]]},C> when 'true' ->
	      %% Line 409
	      case apply 'get_cmd'/2
		       (N, C) of
		%% Line 410
		<{'undefined',_55,_56}> when 'true' ->
		    %% Line 411
		    apply 'no_command'/1
			(N)
		%% Line 412
		<{[Ce|[]],_X_V,_X_CommandN}> when 'true' ->
		    %% Line 413
		    Ce
		%% Line 414
		<{Ces,_X_V,_X_CommandN}>
		    when call 'erlang':'is_list'
			  (Ces) ->
		    %% Line 415
		    {'block',L,Ces}
		( <_36> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_36})
		  -| ['compiler_generated'] )
	      end
	  %% Line 417
	  <{'call',_X_L,{'atom',_57,'v'},[N|[]]},C> when 'true' ->
	      %% Line 418
	      case apply 'get_cmd'/2
		       (N, C) of
		%% Line 419
		<{_58,'undefined',_59}> when 'true' ->
		    %% Line 420
		    apply 'no_command'/1
			(N)
		%% Line 421
		<{Ces,V,CommandN}>
		    when call 'erlang':'is_list'
			  (Ces) ->
		    let <_37> =
			call %% Line 422
			     'erl_anno':%% Line 422
					'new'
			    (%% Line 422
			     CommandN)
		    in  %% Line 422
			{'value',_37,V}
		( <_38> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_38})
		  -| ['compiler_generated'] )
	      end
	  %% Line 424
	  <{'call',L,F,Args},C> when 'true' ->
	      let <_40> =
		  apply %% Line 425
			'expand_expr'/2
		      (%% Line 425
		       F, %% Line 425
			  C)
	      in  let <_39> =
		      apply %% Line 425
			    'expand_exprs'/2
			  (%% Line 425
			   Args, %% Line 425
				 C)
		  in  %% Line 425
		      {'call',L,_40,_39}
	  %% Line 426
	  <{'catch',L,E},C> when 'true' ->
	      let <_41> =
		  apply %% Line 427
			'expand_expr'/2
		      (%% Line 427
		       E, %% Line 427
			  C)
	      in  %% Line 427
		  {'catch',L,_41}
	  %% Line 428
	  <{'match',L,Lhs,Rhs},C> when 'true' ->
	      let <_42> =
		  apply %% Line 429
			'expand_expr'/2
		      (%% Line 429
		       Rhs, %% Line 429
			    C)
	      in  %% Line 429
		  {'match',L,Lhs,_42}
	  %% Line 430
	  <{'op',L,Op,Arg},C> when 'true' ->
	      let <_43> =
		  apply %% Line 431
			'expand_expr'/2
		      (%% Line 431
		       Arg, %% Line 431
			    C)
	      in  %% Line 431
		  {'op',L,Op,_43}
	  %% Line 432
	  <{'op',L,Op,Larg,Rarg},C> when 'true' ->
	      let <_45> =
		  apply %% Line 433
			'expand_expr'/2
		      (%% Line 433
		       Larg, %% Line 433
			     C)
	      in  let <_44> =
		      apply %% Line 433
			    'expand_expr'/2
			  (%% Line 433
			   Rarg, %% Line 433
				 C)
		  in  %% Line 433
		      {'op',L,Op,_45,_44}
	  %% Line 434
	  <{'remote',L,M,F},C> when 'true' ->
	      let <_47> =
		  apply %% Line 435
			'expand_expr'/2
		      (%% Line 435
		       M, %% Line 435
			  C)
	      in  let <_46> =
		      apply %% Line 435
			    'expand_expr'/2
			  (%% Line 435
			   F, %% Line 435
			      C)
		  in  %% Line 435
		      {'remote',L,_47,_46}
	  %% Line 436
	  <{'fun',L,{'clauses',Cs}},C> when 'true' ->
	      let <_48> =
		  apply %% Line 437
			'expand_exprs'/2
		      (%% Line 437
		       Cs, %% Line 437
			   C)
	      in  %% Line 437
		  {'fun',L,{'clauses',_48}}
	  %% Line 438
	  <{'named_fun',L,Name,Cs},C> when 'true' ->
	      let <_49> =
		  apply %% Line 439
			'expand_exprs'/2
		      (%% Line 439
		       Cs, %% Line 439
			   C)
	      in  %% Line 439
		  {'named_fun',L,Name,_49}
	  %% Line 440
	  <{'clause',L,H,G,B},C> when 'true' ->
	      let <_50> =
		  apply %% Line 442
			'expand_exprs'/2
		      (%% Line 442
		       B, %% Line 442
			  C)
	      in  %% Line 442
		  {'clause',L,H,G,_50}
	  %% Line 443
	  <{'bin',L,Fs},C> when 'true' ->
	      let <_51> =
		  apply %% Line 444
			'expand_bin_elements'/2
		      (%% Line 444
		       Fs, %% Line 444
			   C)
	      in  %% Line 444
		  {'bin',L,_51}
	  %% Line 445
	  <E,_X_C> when 'true' ->
	      %% Line 446
	      E
	end
'expand_cs'/2 =
    %% Line 448
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{'clause',L,P,G,B}|Cs],C> when 'true' ->
	      let <_2> =
		  apply %% Line 449
			'expand_exprs'/2
		      (%% Line 449
		       B, %% Line 449
			  C)
	      in  let <_3> =
		      apply %% Line 449
			    'expand_cs'/2
			  (%% Line 449
			   Cs, %% Line 449
			       C)
		  in  %% Line 449
		      [{'clause',L,P,G,_2}|_3]
	  %% Line 450
	  <[],_X_C> when 'true' ->
	      %% Line 451
	      []
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'expand_cs',2}}] )
	    -| ['compiler_generated'] )
	end
'expand_fields'/2 =
    %% Line 453
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{'record_field',L,F,V}|Fs],C> when 'true' ->
	      let <_3> =
		  apply %% Line 454
			'expand_expr'/2
		      (%% Line 454
		       F, %% Line 454
			  C)
	      in  let <_2> =
		      apply %% Line 454
			    'expand_expr'/2
			  (%% Line 454
			   V, %% Line 454
			      C)
		  in  let <_4> =
			  apply %% Line 455
				'expand_fields'/2
			      (%% Line 455
			       Fs, %% Line 455
				   C)
		      in  %% Line 454
			  [{'record_field',L,_3,_2}|_4]
	  %% Line 456
	  <[],_X_C> when 'true' ->
	      []
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'expand_fields',2}}] )
	    -| ['compiler_generated'] )
	end
'expand_quals'/2 =
    %% Line 458
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{'generate',L,P,E}|Qs],C> when 'true' ->
	      let <_2> =
		  apply %% Line 459
			'expand_expr'/2
		      (%% Line 459
		       E, %% Line 459
			  C)
	      in  let <_3> =
		      apply %% Line 459
			    'expand_quals'/2
			  (%% Line 459
			   Qs, %% Line 459
			       C)
		  in  %% Line 459
		      [{'generate',L,P,_2}|_3]
	  %% Line 460
	  <[{'b_generate',L,P,E}|Qs],C> when 'true' ->
	      let <_4> =
		  apply %% Line 461
			'expand_expr'/2
		      (%% Line 461
		       E, %% Line 461
			  C)
	      in  let <_5> =
		      apply %% Line 461
			    'expand_quals'/2
			  (%% Line 461
			   Qs, %% Line 461
			       C)
		  in  %% Line 461
		      [{'b_generate',L,P,_4}|_5]
	  %% Line 462
	  <[E|Qs],C> when 'true' ->
	      let <_6> =
		  apply %% Line 463
			'expand_expr'/2
		      (%% Line 463
		       E, %% Line 463
			  C)
	      in  let <_7> =
		      apply %% Line 463
			    'expand_quals'/2
			  (%% Line 463
			   Qs, %% Line 463
			       C)
		  in  %% Line 463
		      [_6|_7]
	  %% Line 464
	  <[],_X_C> when 'true' ->
	      []
	  ( <_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8})
		  -| [{'function_name',{'expand_quals',2}}] )
	    -| ['compiler_generated'] )
	end
'expand_bin_elements'/2 =
    %% Line 466
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],_X_C> when 'true' ->
	      %% Line 467
	      []
	  %% Line 468
	  <[{'bin_element',L,E,Sz,Ts}|Fs],C> when 'true' ->
	      let <_2> =
		  apply %% Line 469
			'expand_expr'/2
		      (%% Line 469
		       E, %% Line 469
			  C)
	      in  let <_3> =
		      apply %% Line 469
			    'expand_bin_elements'/2
			  (%% Line 469
			   Fs, %% Line 469
			       C)
		  in  %% Line 469
		      [{'bin_element',L,_2,Sz,Ts}|_3]
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'expand_bin_elements',2}}] )
	    -| ['compiler_generated'] )
	end
'no_command'/1 =
    %% Line 471
    fun (_0) ->
	let <_1> =
	    apply %% Line 474
		  'enc'/0
		()
	in  let <_2> =
		call %% Line 474
		     'erl_pp':%% Line 474
			      'expr'
		    (_0, _1)
	    in  let <_3> =
		    call %% Line 473
			 'io_lib':%% Line 473
				  'fwrite'
			(%% Line 473
			 #{#<126>(8,1,'integer',['unsigned'|['big']]),
			   #<116>(8,1,'integer',['unsigned'|['big']]),
			   #<115>(8,1,'integer',['unsigned'|['big']]),
			   #<58>(8,1,'integer',['unsigned'|['big']]),
			   #<32>(8,1,'integer',['unsigned'|['big']]),
			   #<99>(8,1,'integer',['unsigned'|['big']]),
			   #<111>(8,1,'integer',['unsigned'|['big']]),
			   #<109>(8,1,'integer',['unsigned'|['big']]),
			   #<109>(8,1,'integer',['unsigned'|['big']]),
			   #<97>(8,1,'integer',['unsigned'|['big']]),
			   #<110>(8,1,'integer',['unsigned'|['big']]),
			   #<100>(8,1,'integer',['unsigned'|['big']]),
			   #<32>(8,1,'integer',['unsigned'|['big']]),
			   #<110>(8,1,'integer',['unsigned'|['big']]),
			   #<111>(8,1,'integer',['unsigned'|['big']]),
			   #<116>(8,1,'integer',['unsigned'|['big']]),
			   #<32>(8,1,'integer',['unsigned'|['big']]),
			   #<102>(8,1,'integer',['unsigned'|['big']]),
			   #<111>(8,1,'integer',['unsigned'|['big']]),
			   #<117>(8,1,'integer',['unsigned'|['big']]),
			   #<110>(8,1,'integer',['unsigned'|['big']]),
			   #<100>(8,1,'integer',['unsigned'|['big']])}#, %% Line 474
									 [_2|[]])
		in  %% Line 472
		    call 'erlang':'throw'
			({'error',_3})
'add_cmd'/3 =
    %% Line 480
    fun (_0,_1,_2) ->
	do  %% Line 481
	    call 'erlang':'put'
		({'command',_0}, _1)
	    %% Line 482
	    call 'erlang':'put'
		({'result',_0}, _2)
'getc'/1 =
    %% Line 484
    fun (_0) ->
	let <_2> =
	    call %% Line 485
		 'erlang':%% Line 485
			  'get'
		(%% Line 485
		 {'command',_0})
	in  let <_1> =
		call %% Line 485
		     'erlang':%% Line 485
			      'get'
		    (%% Line 485
		     {'result',_0})
	    in  %% Line 485
		{_2,_1,_0}
'get_cmd'/2 =
    %% Line 487
    fun (_0,_1) ->
	let <_3> =
	    catch
		let <_2> =
		    call %% Line 488
			 'erl_eval':%% Line 488
				    'new_bindings'
			()
		in  %% Line 488
		    call 'erl_eval':'expr'
			(_0, _2)
	in  %% Line 488
	    case _3 of
	      %% Line 489
	      <{'value',N,_8}>
		  when call 'erlang':'<'
			(N,
			 0) ->
		  let <_4> =
		      call 'erlang':'+'
			  (_1, N)
		  in  apply 'getc'/1
			  (_4)
	      %% Line 490
	      <{'value',N,_9}> when 'true' ->
		  apply 'getc'/1
		      (N)
	      %% Line 491
	      <_X_Other> when 'true' ->
		  {'undefined','undefined','undefined'}
	    end
'del_cmd'/4 =
    %% Line 494
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <_X_Type,N,N0,HasBin>
	      when call 'erlang':'<'
		    (N,
		     N0) ->
	      %% Line 495
	      HasBin
	  %% Line 496
	  <Type,N,N0,HasBin0> when 'true' ->
	      let <T> =
		  call %% Line 497
		       'erlang':%% Line 497
				'erase'
		      (%% Line 497
		       {Type,N})
	      in  let <_7> =
		      case %% Line 498
			   HasBin0 of
			%% Line 498
			( <( 'true'
			     -| ['compiler_generated'] )> when 'true' ->
			      'true'
			  -| ['compiler_generated'] )
			%% Line 498
			( <( 'false'
			     -| ['compiler_generated'] )> when 'true' ->
			      apply 'has_binary'/1
				  (T)
			  -| ['compiler_generated'] )
			%% Line 498
			( <_5> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {( 'badarg'
					  -| ['compiler_generated'] ),_5}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		  in  let <_9> =
			  call %% Line 499
			       'erlang':%% Line 499
					'-'
			      (%% Line 499
			       N, %% Line 499
				  1)
		      in  %% Line 499
			  apply 'del_cmd'/4
			      (Type, _9, N0, _7)
	end
'has_binary'/1 =
    %% Line 501
    fun (_0) ->
	%% Line 502
	try
	    do  apply 'has_bin'/1
		    (_0)
		'false'
	of <_1> ->
	    _1
	catch <_4,_3,_2> ->
	    %% Line 503
	    case <_4,_3,_2> of
	      <( 'throw'
		 -| ['compiler_generated'] ),Thrown = ( 'true'
							-| ['compiler_generated'] ),_6> when 'true' ->
		  Thrown
	      ( <_7,_8,_9> when 'true' ->
		    primop 'raise'
			(_9, _8)
		-| ['compiler_generated'] )
	    end
'has_bin'/1 =
    %% Line 506
    fun (_0) ->
	case _0 of
	  <T>
	      when call 'erlang':'is_tuple'
		    (_0) ->
	      let <_1> =
		  call %% Line 507
		       'erlang':%% Line 507
				'tuple_size'
		      (%% Line 507
		       T)
	      in  %% Line 507
		  apply 'has_bin'/2
		      (T, _1)
	  %% Line 508
	  <[E|Es]> when 'true' ->
	      do  %% Line 509
		  apply 'has_bin'/1
		      (E)
		  %% Line 510
		  apply 'has_bin'/1
		      (Es)
	  %% Line 511
	  <B>
	      when try
		    let <_2> =
			call 'erlang':'byte_size'
			    (_0)
		    in  call 'erlang':'>'
			    (_2, 64)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 512
	      call 'erlang':'throw'
		  ('true')
	  %% Line 513
	  <T> when 'true' ->
	      %% Line 514
	      T
	end
'has_bin'/2 =
    %% Line 516
    fun (_0,_1) ->
	case <_0,_1> of
	  <T,0> when 'true' ->
	      %% Line 517
	      T
	  %% Line 518
	  <T,I> when 'true' ->
	      let <_2> =
		  call %% Line 519
		       'erlang':%% Line 519
				'element'
		      (%% Line 519
		       I, %% Line 519
			  T)
	      in  do  %% Line 519
		      apply 'has_bin'/1
			  (_2)
		      let <_3> =
			  call %% Line 520
			       'erlang':%% Line 520
					'-'
			      (%% Line 520
			       I, %% Line 520
				  1)
		      in  %% Line 520
			  apply 'has_bin'/2
			      (T, _3)
	end
'shell_cmd'/6 =
    %% Line 530
    fun (_0,_1,_2,_3,_4,_5) ->
	let <_6> =
	    call %% Line 531
		 'erlang':%% Line 531
			  'self'
		()
	in  do  %% Line 531
		call 'erlang':'!'
		    (_1, {'shell_cmd',_6,{'eval',_0},_5})
		%% Line 532
		apply 'shell_rep'/4
		    (_1, _2, _3, _4)
'shell_rep'/4 =
    %% Line 534
    fun (_0,_1,_2,_3) ->
	%% Line 535
	receive
	  %% Line 536
	  <{'shell_rep',_18,{'value',V,Bs,Ds}}>
	      when call 'erlang':'=:='
		    (_18,
		     _0) ->
	      %% Line 537
	      {V,_0,Bs,Ds}
	  %% Line 538
	  <{'shell_rep',_19,{'command_error',{Line,M,Error}}}>
	      when call 'erlang':'=:='
		    (_19,
		     _0) ->
	      let <_4> =
		  call %% Line 540
		       M:%% Line 540
			 'format_error'
		      (%% Line 540
		       Error)
	      in  do  %% Line 539
		      apply 'fwrite_severity'/3
			  ('benign', #{#<126>(8,1,'integer',['unsigned'|['big']]),
				       #<119>(8,1,'integer',['unsigned'|['big']]),
				       #<58>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<126>(8,1,'integer',['unsigned'|['big']]),
				       #<116>(8,1,'integer',['unsigned'|['big']]),
				       #<115>(8,1,'integer',['unsigned'|['big']])}#, %% Line 540
										     [Line|[_4|[]]])
		      %% Line 541
		      {{'EXIT',Error},_0,_1,_3}
	  %% Line 542
	  <{'shell_req',_20,'get_cmd'}>
	      when call 'erlang':'=:='
		    (_20,
		     _0) ->
	      let <_6> =
		  call %% Line 543
		       'erlang':%% Line 543
				'self'
		      ()
	      in  let <_5> =
		      call %% Line 543
			   'erlang':%% Line 543
				    'get'
			  ()
		  in  do  %% Line 543
			  call 'erlang':'!'
			      (_0, {'shell_rep',_6,_5})
			  %% Line 544
			  apply 'shell_rep'/4
			      (_0, _1, _2, _3)
	  %% Line 545
	  <{'shell_req',_21,'exit'}>
	      when call 'erlang':'=:='
		    (_21,
		     _0) ->
	      let <_7> =
		  call %% Line 546
		       'erlang':%% Line 546
				'self'
		      ()
	      in  do  %% Line 546
		      call 'erlang':'!'
			  (_0, {'shell_rep',_7,'exit'})
		      %% Line 547
		      call 'erlang':'exit'
			  ('normal')
	  %% Line 548
	  <{'shell_req',_22,{'update_dict',Ds}}>
	      when call 'erlang':'=:='
		    (_22,
		     _0) ->
	      let <_8> =
		  call %% Line 549
		       'erlang':%% Line 549
				'self'
		      ()
	      in  do  %% Line 549
		      call 'erlang':'!'
			  (_0, {'shell_rep',_8,'ok'})
		      %% Line 550
		      apply 'shell_rep'/4
			  (_0, _1, _2, Ds)
	  %% Line 551
	  <{'ev_exit',{_23,Class,Reason0}}>
	      when call 'erlang':'=:='
		    (_23,
		     _0) ->
	      do  %% Line 552
		  receive
		    <{'EXIT',_24,'normal'}>
			when call 'erlang':'=:='
			      (_24,
			       _0) ->
			'ok'
		  after 'infinity' ->
		    'ok'
		  do  %% Line 553
		      apply 'report_exception'/3
			  (Class, Reason0, _2)
		      let <Reason> =
			  apply %% Line 554
				'nocatch'/2
			      (%% Line 554
			       Class, %% Line 554
				      Reason0)
		      in  let <_10> =
			      apply %% Line 555
				    'start_eval'/3
				  (_1, _2, _3)
			  in  %% Line 555
			      {{'EXIT',Reason},_10,_1,_3}
	  %% Line 556
	  <{'ev_caught',{_25,Class,Reason0}}>
	      when call 'erlang':'=:='
		    (_25,
		     _0) ->
	      do  %% Line 557
		  apply 'report_exception'/4
		      (Class, 'benign', Reason0, _2)
		  let <Reason> =
		      apply %% Line 558
			    'nocatch'/2
			  (%% Line 558
			   Class, %% Line 558
				  Reason0)
		  in  %% Line 559
		      {{'EXIT',Reason},_0,_1,_3}
	  %% Line 560
	  <{'EXIT',_X_Id,'interrupt'}> when 'true' ->
	      do  %% Line 561
		  call 'erlang':'exit'
		      (_0, 'kill')
		  %% Line 562
		  apply 'shell_rep'/4
		      (_0, _1, _2, _3)
	  %% Line 563
	  <{'EXIT',_26,_@r0 = {Reason,Stacktrace}}>
	      when call 'erlang':'=:='
		    (_26,
		     _0) ->
	      do  %% Line 564
		  apply 'report_exception'/3
		      ('exit', _@r0, _2)
		  let <_12> =
		      apply %% Line 565
			    'start_eval'/3
			  (_1, _2, _3)
		  in  %% Line 565
		      {{'EXIT',Reason},_12,_1,_3}
	  %% Line 566
	  <{'EXIT',_27,Reason}>
	      when call 'erlang':'=:='
		    (_27,
		     _0) ->
	      do  %% Line 567
		  apply 'report_exception'/3
		      ('exit', {Reason,[]}, _2)
		  let <_13> =
		      apply %% Line 568
			    'start_eval'/3
			  (_1, _2, _3)
		  in  %% Line 568
		      {{'EXIT',Reason},_13,_1,_3}
	  %% Line 569
	  <{'EXIT',_X_Id,R}> when 'true' ->
	      do  %% Line 570
		  call 'erlang':'exit'
		      (_0, R)
		  %% Line 571
		  call 'erlang':'exit'
		      (R)
	  %% Line 572
	  <_X_Other> when 'true' ->
	      %% Line 573
	      apply 'shell_rep'/4
		  (_0, _1, _2, _3)
	after 'infinity' ->
	  'true'
'nocatch'/2 =
    %% Line 576
    fun (_0,_1) ->
	case <_0,_1> of
	  <'throw',{Term,Stack}> when 'true' ->
	      %% Line 577
	      {{'nocatch',Term},Stack}
	  %% Line 578
	  <'error',Reason> when 'true' ->
	      %% Line 579
	      Reason
	  %% Line 580
	  <'exit',Reason> when 'true' ->
	      %% Line 581
	      Reason
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'nocatch',2}}] )
	    -| ['compiler_generated'] )
	end
'report_exception'/3 =
    %% Line 583
    fun (_0,_1,_2) ->
	%% Line 584
	apply 'report_exception'/4
	    (_0, 'serious', _1, _2)
'report_exception'/4 =
    %% Line 586
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Class,Severity,{Reason,Stacktrace},RT> when 'true' ->
	      let <Tag> =
		  apply %% Line 587
			'severity_tag'/1
		      (%% Line 587
		       Severity)
	      in  let <_5> =
		      call %% Line 588
			   'erlang':%% Line 588
				    'iolist_size'
			  (%% Line 588
			   Tag)
		  in  let <I> =
			  call %% Line 588
			       'erlang':%% Line 588
					'+'
			      (_5, %% Line 588
				   1)
		      in  let <PF> =
			      fun (_8,_7) ->
				  %% Line 589
				  apply 'pp'/3
				      (_8, _7, RT)
			  in  let <SF> =
				  fun (_16,_15,_14) ->
				      let <_13> =
					  call %% Line 590
					       'erlang':%% Line 590
							'=:='
					      (_16, %% Line 590
						    'erl_eval')
				      in  let <_12> =
					      call %% Line 590
						   'erlang':%% Line 590
							    '=:='
						  (_16, %% Line 590
							'shell')
					  in  %% Line 590
					      call 'erlang':'or'
						  (_13, _12)
			      in  let <Enc> =
				      apply %% Line 591
					    'encoding'/0
					  ()
				  in  let <Str> =
					  call %% Line 592
					       'erl_error':%% Line 592
							   'format_exception'
					      (%% Line 592
					       I, %% Line 592
						  Class, %% Line 592
							 Reason, %% Line 592
								 Stacktrace, %% Line 592
									     SF, %% Line 592
										 PF, %% Line 592
										     Enc)
				      in  %% Line 593
					  call 'io':'requests'
					      ([{'put_chars','latin1',Tag}|%% Line 594
									   [{'put_chars','unicode',Str}|%% Line 595
													['nl']]])
	  ( <_26,_25,_24,_23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_26,_25,_24,_23})
		  -| [{'function_name',{'report_exception',4}}] )
	    -| ['compiler_generated'] )
	end
'start_eval'/3 =
    %% Line 597
    fun (_0,_1,_2) ->
	let <Self> =
	    call %% Line 598
		 'erlang':%% Line 598
			  'self'
		()
	in  let <_4> =
		fun () ->
		    %% Line 599
		    apply 'evaluator'/4
			(Self, _0, _1, _2)
	    in  let <Eval> =
		    call %% Line 599
			 'erlang':%% Line 599
				  'spawn_link'
			(_4)
		in  do  %% Line 600
			call 'erlang':'put'
			    ('evaluator', Eval)
			%% Line 601
			Eval
'evaluator'/4 =
    %% Line 607
    fun (_0,_1,_2,_3) ->
	do  %% Line 608
	    apply 'init_dict'/1
		(_3)
	    %% Line 609
	    case call 'application':'get_env'
		     ('stdlib', 'restricted_shell') of
	      %% Line 610
	      <'undefined'> when 'true' ->
		  %% Line 611
		  apply 'eval_loop'/3
		      (_0, _1, _2)
	      %% Line 612
	      <{'ok',RShMod}> when 'true' ->
		  do  %% Line 613
		      case call 'erlang':'get'
			       ('restricted_shell_state') of
			%% Line 614
			<'undefined'> when 'true' ->
			    call 'erlang':'put'
				('restricted_shell_state', [])
			%% Line 615
			<_10> when 'true' ->
			    'ok'
		      end
		      do  %% Line 617
			  call 'erlang':'put'
			      ('restricted_expr_state', [])
			  %% Line 618
			  apply 'restricted_eval_loop'/4
			      (_0, _1, _2, RShMod)
	      ( <_5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_5})
		-| ['compiler_generated'] )
	    end
'eval_loop'/3 =
    %% Line 621
    fun (_0,_1,_2) ->
	%% Line 622
	receive
	  %% Line 623
	  <{'shell_cmd',_14,{'eval',Es},W}>
	      when call 'erlang':'=:='
		    (_14,
		     _0) ->
	      let <_7> =
		  fun (_4,_3) ->
		      %% Line 625
		      apply 'apply_fun'/3
			  (_4, _3, _0)
	      in  let <Ef> = {%% Line 624
		       'value',_7}
		  in  let <Lf> =
			  apply %% Line 626
				'local_func_handler'/3
			      (_0, _2, %% Line 626
				       Ef)
		      in  let <Bs> =
			      apply %% Line 627
				    'eval_exprs'/7
				  (%% Line 627
				   Es, _0, _1, _2, %% Line 627
						   Lf, %% Line 627
						       Ef, %% Line 627
							   W)
			  in  %% Line 628
			      apply 'eval_loop'/3
				  (_0, Bs, _2)
	after 'infinity' ->
	  'true'
'restricted_eval_loop'/4 =
    %% Line 631
    fun (_0,_1,_2,_3) ->
	%% Line 632
	receive
	  %% Line 633
	  <{'shell_cmd',_10,{'eval',Es},W}>
	      when call 'erlang':'=:='
		    (_10,
		     _0) ->
	      %% Line 634
	      case apply 'restrict_handlers'/3
		       (_3, _0, _2) of
		<{LFH,NLFH}> when 'true' ->
		    do  %% Line 635
			call 'erlang':'put'
			    ('restricted_expr_state', [])
			let <Bs> =
			    apply %% Line 636
				  'eval_exprs'/7
				(%% Line 636
				 Es, _0, _1, _2, %% Line 636
						 {'eval',LFH}, %% Line 636
							       {'value',NLFH}, %% Line 636
									       W)
			in  %% Line 637
			    apply 'restricted_eval_loop'/4
				(_0, Bs, _2, _3)
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	after 'infinity' ->
	  'true'
'eval_exprs'/7 =
    %% Line 640
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	%% Line 641
	try
	    %% Line 642
	    case apply 'exprs'/6
		     (_0, _2, _3, _4, _5, _6) of
	      <{R,Bs2}> when 'true' ->
		  let <_8> =
		      call %% Line 643
			   'erlang':%% Line 643
				    'self'
			  ()
		  in  do  %% Line 643
			  call 'erlang':'!'
			      (_1, {'shell_rep',_8,R})
			  %% Line 644
			  Bs2
	      ( <_7> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_7})
		-| ['compiler_generated'] )
	    end
	of <_9> ->
	    _9
	catch <_12,_11,_10> ->
	    %% Line 646
	    case <_12,_11,_10> of
	      <( 'exit'
		 -| ['compiler_generated'] ),( 'normal'
					       -| ['compiler_generated'] ),_30> when 'true' ->
		  %% Line 647
		  call 'erlang':'exit'
		      ('normal')
	      %% Line 648
	      <Class,Reason,_31> when 'true' ->
		  let <_13> =
		      call %% Line 649
			   'erlang':%% Line 649
				    'self'
			  ()
		  in  let <Stacktrace> =
			  primop 'build_stacktrace'
			      (_31)
		      in  let <M> = {_13,%% Line 649
				   Class,%% Line 649
					 {Reason,Stacktrace}}
			  in  %% Line 650
			      case apply 'do_catch'/2
				       (Class, Reason) of
				%% Line 651
				<'true'> when 'true' ->
				    do  %% Line 652
					call 'erlang':'!'
					    (_1, {'ev_caught',M})
					_2
				%% Line 654
				<'false'> when 'true' ->
				    let <_15> =
					call %% Line 657
					     'erlang':%% Line 657
						      'self'
					    ()
				    in  %% Line 657
					case call 'erlang':'process_info'
						 (_15, 'links') of
					  <{'links',LPs}> when 'true' ->
					      let <ER> =
						  apply %% Line 658
							'nocatch'/2
						      (%% Line 658
						       Class, %% Line 658
							      {Reason,Stacktrace})
					      in  let <_21> =
						      fun (_19) ->
							  %% Line 659
							  call 'erlang':'exit'
							      (_19, ER)
						  in  let <_18> =
							  call %% Line 659
							       'erlang':%% Line 659
									'--'
							      (%% Line 659
							       LPs, %% Line 659
								    [_1|[]])
						      in  do  %% Line 659
							      call 'lists':'foreach'
								  (_21, _18)
							      do  %% Line 660
								  call 'erlang':'!'
								      (_1, {'ev_exit',M})
								  %% Line 661
								  call 'erlang':'exit'
								      ('normal')
					  ( <_16> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_16})
					    -| ['compiler_generated'] )
					end
				( <_22> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_22})
				  -| ['compiler_generated'] )
			      end
	    end
'do_catch'/2 =
    %% Line 665
    fun (_0,_1) ->
	case <_0,_1> of
	  <'exit','restricted_shell_stopped'> when 'true' ->
	      %% Line 666
	      'false'
	  %% Line 667
	  <'exit','restricted_shell_started'> when 'true' ->
	      %% Line 668
	      'false'
	  %% Line 669
	  <_X_Class,_X_Reason> when 'true' ->
	      %% Line 670
	      case call 'application':'get_env'
		       ('stdlib', 'shell_catch_exception') of
		%% Line 671
		<{'ok','true'}> when 'true' ->
		    %% Line 672
		    'true'
		%% Line 673
		<_5> when 'true' ->
		    %% Line 674
		    'false'
	      end
	end
'exprs'/6 =
    %% Line 677
    fun (_0,_1,_2,_3,_4,_5) ->
	%% Line 678
	apply 'exprs'/7
	    (_0, _1, _2, _3, _4, _1, _5)
'exprs'/7 =
    %% Line 680
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <[E0|Es],Bs1,RT,Lf,Ef,Bs0,W> when 'true' ->
	      let <UsedRecords> =
		  apply %% Line 681
			'used_record_defs'/2
		      (%% Line 681
		       E0, %% Line 681
			   RT)
	      in  let <RBs> =
		      apply %% Line 682
			    'record_bindings'/2
			  (%% Line 682
			   UsedRecords, %% Line 682
					Bs1)
		  in  let <_9> =
			  apply %% Line 683
				'prep_check'/1
			      (%% Line 683
			       [E0|[]])
		      in  %% Line 683
			  case apply 'check_command'/2
				   (_9, RBs) of
			    %% Line 684
			    <'ok'> when 'true' ->
				let <E1> =
				    apply %% Line 685
					  'expand_records'/2
					(%% Line 685
					 UsedRecords, %% Line 685
						      E0)
				in  %% Line 686
				    case apply 'expr'/4
					     (E1, Bs1, Lf, Ef) of
				      <{'value',V0,Bs2}> when 'true' ->
					  let <_19> =
					      letrec
						  'lc$^0'/1 =
						      %% Line 687
						      fun (_16) ->
							  case _16 of
							    <[VV = {X,_35}|_13]> when 'true' ->
								%% Line 688
								( case apply 'is_expand_variable'/1
									   (X) of
								    <'false'> when 'true' ->
									let <_17> =
									    apply 'lc$^0'/1
										(_13)
									in  ( [VV|_17]
									      -| ['compiler_generated'] )
								    ( <'true'> when 'true' ->
									  apply 'lc$^0'/1
									      (_13)
								      -| ['compiler_generated'] )
								    ( <_cor_variable> when 'true' ->
									  call 'erlang':'error'
									      ('badarg')
								      -| ['compiler_generated'] )
								  end
								  -| ['list_comprehension'] )
							    ( <[_12|_13]> when 'true' ->
								  apply 'lc$^0'/1
								      (_13)
							      -| ['compiler_generated'] )
							    <[]> when 'true' ->
								[]
							    ( <_36> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_36})
								    -| [{'function_name',{'lc$^0',1}}] )
							      -| ['compiler_generated'] )
							  end
					      in  let <_14> =
						      call %% Line 687
							   'erl_eval':%% Line 687
								      'bindings'
							  (%% Line 687
							   Bs2)
						  in  %% Line 687
						      apply 'lc$^0'/1
							  (_14)
					  in  let <Bs> =
						  call %% Line 687
						       'orddict':%% Line 687
								 'from_list'
						      (_19)
					      in  %% Line 689
						  case <> of
						    %% Line 690
						    <>
							when call 'erlang':'=:='
							      (Es,
							       []) ->
							let <VS> =
							    apply %% Line 691
								  'pp'/3
								(%% Line 691
								 V0, %% Line 691
								     1, %% Line 691
									RT)
							in  do  %% Line 692
								case W of
								  %% Line 693
								  <'cmd'> when 'true' ->
								      call 'io':'requests'
									  ([{'put_chars','unicode',VS}|['nl']])
								  %% Line 694
								  <'pmt'> when 'true' ->
								      'ok'
								  ( <_22> when 'true' ->
									primop 'match_fail'
									    ({'case_clause',_22})
								    -| ['compiler_generated'] )
								end
								let <_24> =
								    case <> of
								      %% Line 699
								      <>
									  when call 'erlang':'=:='
										(W,
										 'pmt') ->
									  %% Line 700
									  {W,V0}
								      %% Line 701
								      <> when 'true' ->
									  case apply 'result_will_be_saved'/0
										   () of
									    %% Line 702
									    <'true'> when 'true' ->
										V0
									    %% Line 703
									    <'false'> when 'true' ->
										do  %% Line 704
										    call 'erlang':'garbage_collect'
											()
										    %% Line 705
										    'ignored'
									    ( <_23> when 'true' ->
										  primop 'match_fail'
										      ({'case_clause',_23})
									      -| ['compiler_generated'] )
									  end
								    end
								in  let <_26> =
									call %% Line 708
									     'erlang':%% Line 708
										      'get'
									    ()
								    in  %% Line 708
									{{'value',_24,Bs,_26},Bs}
						    %% Line 709
						    <> when 'true' ->
							%% Line 710
							apply 'exprs'/7
							    (Es, Bs, RT, Lf, Ef, Bs0, W)
						  end
				      ( <_11> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_11})
					-| ['compiler_generated'] )
				    end
			    %% Line 712
			    <{'error',Error}> when 'true' ->
				%% Line 713
				{{'command_error',Error},Bs0}
			    ( <_27> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_27})
			      -| ['compiler_generated'] )
			  end
	  ( <_34,_33,_32,_31,_30,_29,_28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_34,_33,_32,_31,_30,_29,_28})
		  -| [{'function_name',{'exprs',7}}] )
	    -| ['compiler_generated'] )
	end
'is_expand_variable'/1 =
    %% Line 716
    fun (_0) ->
	let <_1> =
	    catch
		%% Line 717
		call 'erlang':'atom_to_list'
		    (_0)
	in  %% Line 717
	    case _1 of
	      %% Line 718
	      <[114|[101|[99|_X_Integer]]]> when 'true' ->
		  'true'
	      %% Line 719
	      <_4> when 'true' ->
		  'false'
	    end
'result_will_be_saved'/0 =
    %% Line 722
    fun () ->
	%% Line 723
	case apply 'get_history_and_results'/0
		 () of
	  %% Line 724
	  <{_1,0}> when 'true' ->
	      'false'
	  %% Line 725
	  <_2> when 'true' ->
	      'true'
	end
'used_record_defs'/2 =
    %% Line 728
    fun (_0,_1) ->
	let <_12> =
	    case %% Line 731
		 apply 'used_records'/4
		     (_0, [], _1, []) of
	      %% Line 732
	      <[]> when 'true' ->
		  %% Line 733
		  []
	      %% Line 734
	      <L0> when 'true' ->
		  let <_2> =
		      call %% Line 735
			   'erlang':%% Line 735
				    'length'
			  (%% Line 735
			   L0)
		  in  let <_3> =
			  call %% Line 735
			       'lists':%% Line 735
				       'seq'
			      (%% Line 735
			       1, _2)
		      in  let <L1> =
			      call %% Line 735
				   'lists':%% Line 735
					   'zip'
				  (%% Line 735
				   L0, _3)
			  in  let <_5> =
				  call %% Line 736
				       'lists':%% Line 736
					       'ukeysort'
				      (%% Line 736
				       1, %% Line 736
					  L1)
			      in  let <L2> =
				      call %% Line 736
					   'lists':%% Line 736
						   'keysort'
					  (%% Line 736
					   2, _5)
				  in  %% Line 737
				      ( letrec
					    'lc$^0'/1 =
						fun (_9) ->
						    case _9 of
						      <[{R,_16}|_8]> when 'true' ->
							  let <_10> =
							      apply 'lc$^0'/1
								  (_8)
							  in  ( [R|_10]
								-| ['compiler_generated'] )
						      ( <[_7|_8]> when 'true' ->
							    apply 'lc$^0'/1
								(_8)
							-| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_17> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_17})
							      -| [{'function_name',{'lc$^0',1}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lc$^0'/1
						(L2)
					-| ['list_comprehension'] )
	    end
	in  %% Line 739
	    apply 'record_defs'/2
		(_1, _12)
'used_records'/4 =
    %% Line 741
    fun (_0,_1,_2,_3) ->
	%% Line 742
	case apply 'used_records'/1
		 (_0) of
	  %% Line 743
	  <{'name',Name,E1}> when 'true' ->
	      let <_6> =
		  case %% Line 744
		       call 'lists':'member'
			   (Name, _3) of
		    %% Line 745
		    <'true'> when 'true' ->
			_1
		    %% Line 747
		    <'false'> when 'true' ->
			let <R> =
			    call %% Line 748
				 'ets':%% Line 748
				       'lookup'
				(_2, %% Line 748
				     Name)
			in  %% Line 749
			    apply 'used_records'/4
				(R, [Name|_1], _2, [Name|_3])
		    ( <_5> when 'true' ->
			  %% Line 744
			  primop 'match_fail'
			      ({'case_clause',_5})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 751
		  apply 'used_records'/4
		      (E1, _6, _2, _3)
	  %% Line 752
	  <{'expr',[E1|Es]}> when 'true' ->
	      let <_8> =
		  apply %% Line 753
			'used_records'/4
		      (%% Line 753
		       E1, _1, _2, _3)
	      in  %% Line 753
		  apply 'used_records'/4
		      (Es, _8, _2, _3)
	  %% Line 754
	  <_14> when 'true' ->
	      _1
	end
'used_records'/1 =
    %% Line 758
    fun (_0) ->
	case _0 of
	  <{'record_index',_3,Name,F}> when 'true' ->
	      %% Line 759
	      {'name',Name,F}
	  %% Line 760
	  <{'record',_4,Name,Is}> when 'true' ->
	      %% Line 761
	      {'name',Name,Is}
	  %% Line 762
	  <{'record_field',_5,R,Name,F}> when 'true' ->
	      %% Line 763
	      {'name',Name,[R|F]}
	  %% Line 764
	  <{'record',_6,R,Name,Ups}> when 'true' ->
	      %% Line 765
	      {'name',Name,[R|Ups]}
	  %% Line 766
	  <{'record_field',_7,R,F}> when 'true' ->
	      %% Line 767
	      {'expr',[R|F]}
	  %% Line 768
	  <{'call',_8,{'atom',_9,'record'},[A|[{'atom',_10,Name}|[]]]}> when 'true' ->
	      %% Line 769
	      {'name',Name,A}
	  %% Line 770
	  <{'call',_11,{'atom',_12,'is_record'},[A|[{'atom',_13,Name}|[]]]}> when 'true' ->
	      %% Line 771
	      {'name',Name,A}
	  %% Line 772
	  <{'call',_14,{'remote',_15,{'atom',_16,'erlang'},{'atom',_17,'is_record'}},%% Line 773
										     [A|[{'atom',_18,Name}|[]]]}> when 'true' ->
	      %% Line 774
	      {'name',Name,A}
	  %% Line 775
	  <{'call',_19,{'atom',_20,'record_info'},[A|[{'atom',_21,Name}|[]]]}> when 'true' ->
	      %% Line 776
	      {'name',Name,A}
	  %% Line 777
	  <{'call',Line,{'tuple',_22,[M|[F|[]]]},As}> when 'true' ->
	      %% Line 778
	      apply 'used_records'/1
		  ({'call',Line,{'remote',Line,M,F},As})
	  %% Line 779
	  <{'type',_23,'record',[{'atom',_24,Name}|Fs]}> when 'true' ->
	      %% Line 780
	      {'name',Name,Fs}
	  %% Line 781
	  <T>
	      when call 'erlang':'is_tuple'
		    (_0) ->
	      let <_1> =
		  call %% Line 782
		       'erlang':%% Line 782
				'tuple_to_list'
		      (%% Line 782
		       T)
	      in  %% Line 782
		  {'expr',_1}
	  %% Line 783
	  <E> when 'true' ->
	      %% Line 784
	      {'expr',E}
	end
'fwrite_severity'/3 =
    %% Line 786
    fun (_0,_1,_2) ->
	let <_3> =
	    apply %% Line 787
		  'format_severity'/3
		(_0, _1, _2)
	in  %% Line 787
	    call 'io':'fwrite'
		(#{#<126>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<10>(8,1,'integer',['unsigned'|['big']])}#, [_3|[]])
'format_severity'/3 =
    %% Line 789
    fun (_0,_1,_2) ->
	let <_3> =
	    call %% Line 790
		 'io_lib':%% Line 790
			  'fwrite'
		(_1, _2)
	in  %% Line 790
	    apply 'add_severity'/2
		(_0, _3)
'add_severity'/2 =
    %% Line 792
    fun (_0,_1) ->
	let <_2> =
	    apply %% Line 793
		  'severity_tag'/1
		(_0)
	in  %% Line 793
	    [_2|[_1|[]]]
'severity_tag'/1 =
    %% Line 795
    fun (_0) ->
	case _0 of
	  <'fatal'> when 'true' ->
	      #{#<42>(8,1,'integer',['unsigned'|['big']]),
		#<42>(8,1,'integer',['unsigned'|['big']]),
		#<42>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 796
	  <'serious'> when 'true' ->
	      #{#<42>(8,1,'integer',['unsigned'|['big']]),
		#<42>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 797
	  <'benign'> when 'true' ->
	      #{#<42>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']])}#
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'severity_tag',1}}] )
	    -| ['compiler_generated'] )
	end
'restrict_handlers'/3 =
    %% Line 799
    fun (_0,_1,_2) ->
	let <_14> =
	    fun (_10,_9,_8) ->
		%% Line 801
		apply 'local_allowed'/6
		    (_10, _9, _0, _8, _1, _2)
	in  let <_7> =
		fun (_4,_3) ->
		    %% Line 804
		    apply 'non_local_allowed'/4
			(_4, _3, _0, _1)
	    in  %% Line 800
		{_14,_7}
'local_allowed'/6 =
    %% Line 813
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <F,As,RShMod,Bs,Shell,RT>
	      when call 'erlang':'is_atom'
		    (F) ->
	      %% Line 814
	      case apply 'restrict_handlers'/3
		       (RShMod, Shell, RT) of
		<{LFH,NLFH}> when 'true' ->
		    %% Line 815
		    case apply 'not_restricted'/2
			     (F, As) of
		      %% Line 819
		      <'true'> when 'true' ->
			  %% Line 820
			  apply 'local_func'/7
			      (F, As, Bs, Shell, RT, {'eval',LFH}, {'value',NLFH})
		      %% Line 821
		      <'false'> when 'true' ->
			  %% Line 822
			  case apply 'expr_list'/4
				   (As, Bs, {'eval',LFH}, {'value',NLFH}) of
			    <{AsEv,Bs1}> when 'true' ->
				let <_9> =
				    call %% Line 823
					 'erlang':%% Line 823
						  'get'
					(%% Line 823
					 'restricted_shell_state')
				in  let <_8> =
					call %% Line 824
					     'erlang':%% Line 824
						      'get'
					    (%% Line 824
					     'restricted_expr_state')
				    in  %% Line 823
					case call RShMod:'local_allowed'
						 (F, AsEv, {_9,_8}) of
					  %% Line 825
					  <{Result,{RShShSt,RShExprSt}}> when 'true' ->
					      do  %% Line 826
						  call 'erlang':'put'
						      ('restricted_shell_state', RShShSt)
						  do  %% Line 827
						      call 'erlang':'put'
							  ('restricted_expr_state', RShExprSt)
						      %% Line 828
						      case <> of
							<>
							    when ( call 'erlang':'=:='
								    (Result,
								     'false')
								-| ['compiler_generated'] ) ->
							    let <_11> =
								call %% Line 829
								     'erlang':%% Line 829
									      'get'
								    ()
							    in  do  %% Line 829
								    apply 'shell_req'/2
									(Shell, {'update_dict',_11})
								    %% Line 830
								    call 'erlang':'exit'
									({'restricted_shell_disallowed',{F,AsEv}})
							%% Line 831
							<> when 'true' ->
							    %% Line 833
							    apply 'non_builtin_local_func'/3
								(F, AsEv, Bs1)
						      end
					  %% Line 835
					  <Unexpected> when 'true' ->
					      %% Line 836
					      try
						  call 'erlang':'error'
						      ('reason')
					      of <_12> ->
						  _12
					      catch <_15,_14,_13> ->
						  let <S> =
						      primop 'build_stacktrace'
							  (_13)
						  in  call 'erlang':'raise'
							  ('exit', {'restricted_shell_bad_return',Unexpected}, [{RShMod,'local_allowed',3}|S])
					end
			    ( <_7> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_7})
			      -| ['compiler_generated'] )
			  end
		      ( <_17> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_17})
			-| ['compiler_generated'] )
		    end
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_6})
		  -| ['compiler_generated'] )
	      end
	  ( <_23,_22,_21,_20,_19,_18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_23,_22,_21,_20,_19,_18})
		  -| [{'function_name',{'local_allowed',6}}] )
	    -| ['compiler_generated'] )
	end
'non_local_allowed'/4 =
    %% Line 840
    fun (_0,_1,_2,_3) ->
	let <_5> =
	    call %% Line 841
		 'erlang':%% Line 841
			  'get'
		(%% Line 841
		 'restricted_shell_state')
	in  let <_4> =
		call %% Line 842
		     'erlang':%% Line 842
			      'get'
		    (%% Line 842
		     'restricted_expr_state')
	    in  %% Line 841
		case call _2:'non_local_allowed'
			 (_0, _1, {_5,_4}) of
		  %% Line 843
		  <{Result,{RShShSt,RShExprSt}}> when 'true' ->
		      do  %% Line 844
			  call 'erlang':'put'
			      ('restricted_shell_state', RShShSt)
			  do  %% Line 845
			      call 'erlang':'put'
				  ('restricted_expr_state', RShExprSt)
			      %% Line 846
			      case Result of
				%% Line 847
				<'false'> when 'true' ->
				    let <_6> =
					call %% Line 848
					     'erlang':%% Line 848
						      'get'
					    ()
				    in  do  %% Line 848
					    apply 'shell_req'/2
						(_3, {'update_dict',_6})
					    %% Line 849
					    call 'erlang':'exit'
						({'restricted_shell_disallowed',{_0,_1}})
				%% Line 850
				<{'redirect',NewMForFun,NewAs}> when 'true' ->
				    %% Line 851
				    apply 'apply_fun'/3
					(NewMForFun, NewAs, _3)
				%% Line 852
				<_17> when 'true' ->
				    %% Line 853
				    apply 'apply_fun'/3
					(_0, _1, _3)
			      end
		  %% Line 855
		  <Unexpected> when 'true' ->
		      %% Line 856
		      try
			  call 'erlang':'error'
			      ('reason')
		      of <_8> ->
			  _8
		      catch <_11,_10,_9> ->
			  let <S> =
			      primop 'build_stacktrace'
				  (_9)
			  in  call 'erlang':'raise'
				  ('exit', {'restricted_shell_bad_return',Unexpected}, [{_2,'non_local_allowed',3}|S])
		end
'not_restricted'/2 =
    %% Line 862
    fun (_0,_1) ->
	case <_0,_1> of
	  <'f',[]> when 'true' ->
	      %% Line 863
	      'true'
	  %% Line 864
	  <'f',[_4|[]]> when 'true' ->
	      %% Line 865
	      'true'
	  %% Line 866
	  <'h',[]> when 'true' ->
	      %% Line 867
	      'true'
	  %% Line 868
	  <'b',[]> when 'true' ->
	      %% Line 869
	      'true'
	  %% Line 870
	  <'history',[_5|[]]> when 'true' ->
	      %% Line 871
	      'true'
	  %% Line 872
	  <'results',[_6|[]]> when 'true' ->
	      %% Line 873
	      'true'
	  %% Line 874
	  <'catch_exception',[_7|[]]> when 'true' ->
	      %% Line 875
	      'true'
	  %% Line 876
	  <'exit',[]> when 'true' ->
	      %% Line 877
	      'true'
	  %% Line 878
	  <'rd',[_8|[_9|[]]]> when 'true' ->
	      %% Line 879
	      'true'
	  %% Line 880
	  <'rf',[]> when 'true' ->
	      %% Line 881
	      'true'
	  %% Line 882
	  <'rf',[_10|[]]> when 'true' ->
	      %% Line 883
	      'true'
	  %% Line 884
	  <'rl',[]> when 'true' ->
	      %% Line 885
	      'true'
	  %% Line 886
	  <'rl',[_11|[]]> when 'true' ->
	      %% Line 887
	      'true'
	  %% Line 888
	  <'rp',[_12|[]]> when 'true' ->
	      %% Line 889
	      'true'
	  %% Line 890
	  <'rr',[_13|[]]> when 'true' ->
	      %% Line 891
	      'true'
	  %% Line 892
	  <'rr',[_14|[_15|[]]]> when 'true' ->
	      %% Line 893
	      'true'
	  %% Line 894
	  <'rr',[_16|[_17|[_18|[]]]]> when 'true' ->
	      %% Line 895
	      'true'
	  %% Line 896
	  <_19,_20> when 'true' ->
	      %% Line 897
	      'false'
	end
'apply_fun'/3 =
    %% Line 904
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{'erlang','garbage_collect'},[],Shell> when 'true' ->
	      %% Line 905
	      apply 'garb'/1
		  (Shell)
	  %% Line 906
	  <{M,F},As,_X_Shell> when 'true' ->
	      %% Line 907
	      call 'erlang':'apply'
		  (M, F, As)
	  %% Line 908
	  <MForFun,As,_X_Shell> when 'true' ->
	      %% Line 909
	      call 'erlang':'apply'
		  (MForFun, As)
	end
'prep_check'/1 =
    %% Line 911
    fun (_0) ->
	case _0 of
	  <{'call',Line,{'atom',_7,'f'},[{'var',_8,_X_Name}|[]]}> when 'true' ->
	      %% Line 913
	      {'atom',Line,'ok'}
	  %% Line 914
	  <{'value',_X_CommandN,_X_Val}> when 'true' ->
	      let <_1> =
		  apply %% Line 916
			'a0'/0
		      ()
	      in  %% Line 916
		  {'atom',_1,'ok'}
	  %% Line 917
	  <T>
	      when call 'erlang':'is_tuple'
		    (_0) ->
	      let <_2> =
		  call %% Line 918
		       'erlang':%% Line 918
				'tuple_to_list'
		      (%% Line 918
		       T)
	      in  let <_3> =
		      apply %% Line 918
			    'prep_check'/1
			  (_2)
		  in  %% Line 918
		      call 'erlang':'list_to_tuple'
			  (_3)
	  %% Line 919
	  <[E|Es]> when 'true' ->
	      let <_4> =
		  apply %% Line 920
			'prep_check'/1
		      (%% Line 920
		       E)
	      in  let <_5> =
		      apply %% Line 920
			    'prep_check'/1
			  (%% Line 920
			   Es)
		  in  %% Line 920
		      [_4|_5]
	  %% Line 921
	  <E> when 'true' ->
	      %% Line 922
	      E
	end
'expand_records'/2 =
    %% Line 924
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],E0> when 'true' ->
	      %% Line 925
	      E0
	  %% Line 926
	  <UsedRecords,E0> when 'true' ->
	      let <_6> =
		  letrec
		      'lc$^0'/1 =
			  %% Line 927
			  fun (_4) ->
			      case _4 of
				<[{_X_Name,Def}|_3]> when 'true' ->
				    let <_5> =
					apply 'lc$^0'/1
					    (_3)
				    in  ( [Def|_5]
					  -| ['compiler_generated'] )
				( <[_2|_3]> when 'true' ->
				      apply 'lc$^0'/1
					  (_3)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_19> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_19})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  %% Line 927
		      apply 'lc$^0'/1
			  (UsedRecords)
	      in  let <L> =
		      call %% Line 928
			   'erl_anno':%% Line 928
				      'new'
			  (%% Line 928
			   1)
		  in  let <E> =
			  apply %% Line 929
				'prep_rec'/1
			      (%% Line 929
			       E0)
		      in  let <Forms0> =
			      call %% Line 930
				   'erlang':%% Line 930
					    '++'
				  (_6, %% Line 930
				       [{'function',L,'foo',0,[{'clause',L,[],[],[E|[]]}|[]]}|[]])
			  in  let <Forms> =
				  call %% Line 931
				       'erl_expand_records':%% Line 931
							    'module'
				      (%% Line 931
				       Forms0, %% Line 931
					       ['strict_record_tests'])
			      in  %% Line 932
				  case call 'lists':'last'
					   (Forms) of
				    <{'function',_15,'foo',0,[{'clause',_16,[],[],[NE|[]]}|[]]}>
					when let <_17> =
					      call 'erlang':'=:='
						  (_15, L)
					  in  let <_18> =
						  call 'erlang':'=:='
						      (_16, L)
					      in  call 'erlang':'and'
						      (_17, _18) ->
					%% Line 933
					apply 'prep_rec'/1
					    (NE)
				    ( <_12> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_12})
				      -| ['compiler_generated'] )
				  end
	end
'prep_rec'/1 =
    %% Line 935
    fun (_0) ->
	case _0 of
	  <Value = {'value',_X_CommandN,_X_V}> when 'true' ->
	      %% Line 937
	      {'atom',Value,'ok'}
	  %% Line 938
	  <{'atom',Value = {'value',_X_CommandN,_X_V},'ok'}> when 'true' ->
	      %% Line 940
	      Value
	  %% Line 941
	  <T>
	      when call 'erlang':'is_tuple'
		    (_0) ->
	      let <_1> =
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  let <_2> =
		      apply 'prep_rec'/1
			  (_1)
		  in  call 'erlang':'list_to_tuple'
			  (_2)
	  %% Line 942
	  <[E|Es]> when 'true' ->
	      let <_3> =
		  apply 'prep_rec'/1
		      (E)
	      in  let <_4> =
		      apply 'prep_rec'/1
			  (Es)
		  in  [_3|_4]
	  %% Line 943
	  <E> when 'true' ->
	      E
	end
'init_dict'/1 =
    %% Line 945
    fun (_0) ->
	case _0 of
	  <[{K,V}|Ds]> when 'true' ->
	      do  %% Line 946
		  call 'erlang':'put'
		      (K, V)
		  %% Line 947
		  apply 'init_dict'/1
		      (Ds)
	  %% Line 948
	  <[]> when 'true' ->
	      'true'
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'init_dict',1}}] )
	    -| ['compiler_generated'] )
	end
'local_func'/7 =
    %% Line 959
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <'h',[],Bs,Shell,RT,_X_Lf,_X_Ef> when 'true' ->
	      let <Cs> =
		  apply %% Line 960
			'shell_req'/2
		      (%% Line 960
		       Shell, %% Line 960
			      'get_cmd')
	      in  let <_10> =
		      fun (_8) ->
			  %% Line 961
			  case _8 of
			    <{{'command',_74},_75}> when 'true' ->
				'true'
			    %% Line 962
			    <{{'result',_76},_77}> when 'true' ->
				'true'
			    %% Line 963
			    <_78> when 'true' ->
				'false'
			  end
		  in  let <Cs1> =
			  call %% Line 961
			       'lists':%% Line 961
				       'filter'
			      (_10, %% Line 965
				    Cs)
		      in  let <_14> =
			      fun (_12) ->
				  %% Line 966
				  case _12 of
				    <{{T,N},V}> when 'true' ->
					{{N,T},V}
				    ( <_13> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_13})
					    -| [{'function_name',{'-local_func/7-fun-1-',1}}] )
				      -| ['compiler_generated'] )
				  end
			  in  let <Cs2> =
				  call %% Line 966
				       'lists':%% Line 966
					       'map'
				      (_14, %% Line 967
					    Cs1)
			      in  let <Cs3> =
				      call %% Line 968
					   'lists':%% Line 968
						   'keysort'
					  (%% Line 968
					   1, %% Line 968
					      Cs2)
				  in  let <_17> =
					  apply %% Line 969
						'list_commands'/2
					      (%% Line 969
					       Cs3, %% Line 969
						    RT)
				      in  %% Line 969
					  {'value',_17,Bs}
	  %% Line 970
	  <'b',[],Bs,_X_Shell,RT,_X_Lf,_X_Ef> when 'true' ->
	      let <_18> =
		  call %% Line 971
		       'erl_eval':%% Line 971
				  'bindings'
		      (%% Line 971
		       Bs)
	      in  let <_19> =
		      apply %% Line 971
			    'list_bindings'/2
			  (_18, %% Line 971
				RT)
		  in  %% Line 971
		      {'value',_19,Bs}
	  %% Line 972
	  <'f',[],_X_Bs,_X_Shell,_X_RT,_X_Lf,_X_Ef> when 'true' ->
	      let <_20> =
		  call %% Line 973
		       'erl_eval':%% Line 973
				  'new_bindings'
		      ()
	      in  %% Line 973
		  {'value','ok',_20}
	  %% Line 974
	  <'f',[{'var',_79,Name}|[]],Bs,_X_Shell,_X_RT,_X_Lf,_X_Ef> when 'true' ->
	      let <_21> =
		  call %% Line 975
		       'erl_eval':%% Line 975
				  'del_binding'
		      (%% Line 975
		       Name, %% Line 975
			     Bs)
	      in  %% Line 975
		  {'value','ok',_21}
	  %% Line 976
	  <'f',[_X_Other|[]],_X_Bs,_X_Shell,_X_RT,_X_Lf,_X_Ef> when 'true' ->
	      %% Line 977
	      call 'erlang':'raise'
		  ('error', 'function_clause', [{'shell','f',1}])
	  %% Line 978
	  <'rd',[{'atom',_80,RecName0}|[RecDef0|[]]],Bs,_X_Shell,RT,_X_Lf,_X_Ef> when 'true' ->
	      let <RecDef> =
		  apply %% Line 979
			'expand_value'/1
		      (%% Line 979
		       RecDef0)
	      in  let <_23> =
		      call %% Line 980
			   'erl_pp':%% Line 980
				    'expr'
			  (%% Line 980
			   RecDef)
		  in  let <RDs> =
			  call %% Line 980
			       'lists':%% Line 980
				       'flatten'
			      (_23)
		      in  let <RecName> =
			      call %% Line 981
				   'io_lib':%% Line 981
					    'write_atom_as_latin1'
				  (%% Line 981
				   RecName0)
			  in  let <Attr> =
				  call %% Line 982
				       'lists':%% Line 982
					       'concat'
				      (%% Line 982
				       [[45|[114|[101|[99|[111|[114|[100|[40]]]]]]]]|[RecName|[[44]|[RDs|[[41|[46]]]]]]])
			      in  %% Line 983
				  case call 'erl_scan':'string'
					   (Attr) of
				    <{'ok',Tokens,_81}> when 'true' ->
					%% Line 984
					case call 'erl_parse':'parse_form'
						 (Tokens) of
					  %% Line 985
					  <{'ok',AttrForm}> when 'true' ->
					      %% Line 986
					      case apply 'add_records'/3
						       ([AttrForm|[]], Bs, RT) of
						<[RN|[]]> when 'true' ->
						    %% Line 987
						    {'value',RN,Bs}
						( <_28> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_28})
						  -| ['compiler_generated'] )
					      end
					  %% Line 988
					  <{'error',{_X_Line,M,ErrDesc}}> when 'true' ->
					      let <_29> =
						  call %% Line 989
						       M:%% Line 989
							 'format_error'
						      (%% Line 989
						       ErrDesc)
					      in  let <ErrStr> =
						      call %% Line 989
							   'io_lib':%% Line 989
								    'fwrite'
							  (%% Line 989
							   #{#<126>(8,1,'integer',['unsigned'|['big']]),
							     #<116>(8,1,'integer',['unsigned'|['big']]),
							     #<115>(8,1,'integer',['unsigned'|['big']])}#, %% Line 989
													   [_29|[]])
						  in  let <_31> =
							  call %% Line 990
							       'lists':%% Line 990
								       'flatten'
							      (%% Line 990
							       ErrStr)
						      in  %% Line 990
							  call 'erlang':'exit'
							      (_31)
					  ( <_32> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_32})
					    -| ['compiler_generated'] )
					end
				    ( <_27> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_27})
				      -| ['compiler_generated'] )
				  end
	  %% Line 992
	  <'rd',[_82|[_83|[]]],_X_Bs,_X_Shell,_X_RT,_X_Lf,_X_Ef> when 'true' ->
	      %% Line 993
	      call 'erlang':'raise'
		  ('error', 'function_clause', [{'shell','rd',2}])
	  %% Line 994
	  <'rf',[],Bs,_X_Shell,RT,_X_Lf,_X_Ef> when 'true' ->
	      %% Line 995
	      case call 'ets':'delete_all_objects'
		       (RT) of
		<'true'> when 'true' ->
		    let <_34> =
			apply %% Line 996
			      'initiate_records'/2
			    (%% Line 996
			     Bs, %% Line 996
				 RT)
		    in  %% Line 996
			{'value',_34,Bs}
		( <_33> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_33})
		  -| ['compiler_generated'] )
	      end
	  %% Line 997
	  <'rf',_@r0 = [A|[]],Bs0,_X_Shell,RT,Lf,Ef> when 'true' ->
	      %% Line 998
	      case apply 'expr_list'/4
		       (_@r0, Bs0, Lf, Ef) of
		<{[Recs|[]],Bs}> when 'true' ->
		    do  %% Line 999
			case <> of
			  <>
			      when call 'erlang':'=:='
				    ('_',
				     Recs) ->
			      %% Line 1000
			      case call 'ets':'delete_all_objects'
				       (RT) of
				<'true'> when 'true' ->
				    'ok'
				( <_36> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_36})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1001
			  <> when 'true' ->
			      let <_41> =
				  fun (_39) ->
				      let <_85> =
					  call %% Line 1002
					       'ets':%% Line 1002
						     'delete'
					      (%% Line 1002
					       RT, %% Line 1002
						   _39)
				      in  %% Line 1002
					  case _85 of
					    <'true'> when 'true' ->
						( _85
						  -| ['compiler_generated'] )
					    ( <_38> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_38})
					      -| ['compiler_generated'] )
					  end
			      in  let <_37> =
				      apply %% Line 1003
					    'listify'/1
					  (%% Line 1003
					   Recs)
				  in  %% Line 1002
				      call 'lists':'foreach'
					  (_41, _37)
			end
			%% Line 1005
			{'value','ok',Bs}
		( <_35> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_35})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1006
	  <'rl',[],Bs,_X_Shell,RT,_X_Lf,_X_Ef> when 'true' ->
	      let <_42> =
		  call %% Line 1007
		       'ets':%% Line 1007
			     'tab2list'
		      (%% Line 1007
		       RT)
	      in  let <_43> =
		      apply %% Line 1007
			    'list_records'/1
			  (_42)
		  in  %% Line 1007
		      {'value',_43,Bs}
	  %% Line 1008
	  <'rl',_@r1 = [A|[]],Bs0,_X_Shell,RT,Lf,Ef> when 'true' ->
	      %% Line 1009
	      case apply 'expr_list'/4
		       (_@r1, Bs0, Lf, Ef) of
		<{[Recs|[]],Bs}> when 'true' ->
		    let <_45> =
			apply %% Line 1010
			      'listify'/1
			    (%% Line 1010
			     Recs)
		    in  let <_46> =
			    apply %% Line 1010
				  'record_defs'/2
				(%% Line 1010
				 RT, _45)
			in  let <_47> =
				apply %% Line 1010
				      'list_records'/1
				    (_46)
			    in  %% Line 1010
				{'value',_47,Bs}
		( <_44> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_44})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1011
	  <'rp',_@r2 = [A|[]],Bs0,_X_Shell,RT,Lf,Ef> when 'true' ->
	      %% Line 1012
	      case apply 'expr_list'/4
		       (_@r2, Bs0, Lf, Ef) of
		<{[V|[]],Bs}> when 'true' ->
		    let <Cs> =
			apply %% Line 1013
			      'pp'/4
			    (%% Line 1013
			     V, ( 1
				  -| ['compiler_generated'] ), %% Line 1013
							       -1, %% Line 1013
								   RT)
		    in  do  %% Line 1014
			    call 'io':'requests'
				([{'put_chars','unicode',Cs}|['nl']])
			    %% Line 1015
			    {'value','ok',Bs}
		( <_48> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_48})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1016
	  <'rr',_@r3 = [A|[]],Bs0,_X_Shell,RT,Lf,Ef> when 'true' ->
	      %% Line 1017
	      case apply 'expr_list'/4
		       (_@r3, Bs0, Lf, Ef) of
		<{[File|[]],Bs}> when 'true' ->
		    let <_55> =
			apply %% Line 1018
			      'read_and_add_records'/5
			    (%% Line 1018
			     File, %% Line 1018
				   '_', %% Line 1018
					[], %% Line 1018
					    Bs, %% Line 1018
						RT)
		    in  %% Line 1018
			{'value',_55,Bs}
		( <_54> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_54})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1019
	  <'rr',As0 = [_86|[_87|[]]],Bs0,_X_Shell,RT,Lf,Ef> when 'true' ->
	      %% Line 1020
	      case apply 'expr_list'/4
		       (As0, Bs0, Lf, Ef) of
		<{[File|[Sel|[]]],Bs}> when 'true' ->
		    let <_57> =
			apply %% Line 1021
			      'read_and_add_records'/5
			    (%% Line 1021
			     File, %% Line 1021
				   Sel, %% Line 1021
					[], %% Line 1021
					    Bs, %% Line 1021
						RT)
		    in  %% Line 1021
			{'value',_57,Bs}
		( <_56> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_56})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1022
	  <'rr',As0 = [_88|[_89|[_90|[]]]],Bs0,_X_Shell,RT,Lf,Ef> when 'true' ->
	      %% Line 1023
	      case apply 'expr_list'/4
		       (As0, Bs0, Lf, Ef) of
		<{[File|[Sel|[Options|[]]]],Bs}> when 'true' ->
		    let <_59> =
			apply %% Line 1024
			      'read_and_add_records'/5
			    (%% Line 1024
			     File, %% Line 1024
				   Sel, %% Line 1024
					Options, %% Line 1024
						 Bs, %% Line 1024
						     RT)
		    in  %% Line 1024
			{'value',_59,Bs}
		( <_58> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_58})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1025
	  <'history',[{'integer',_91,N}|[]],Bs,_X_Shell,_X_RT,_X_Lf,_X_Ef> when 'true' ->
	      let <_60> =
		  apply %% Line 1026
			'history'/1
		      (%% Line 1026
		       N)
	      in  %% Line 1026
		  {'value',_60,Bs}
	  %% Line 1027
	  <'history',[_X_Other|[]],_X_Bs,_X_Shell,_X_RT,_X_Lf,_X_Ef> when 'true' ->
	      %% Line 1028
	      call 'erlang':'raise'
		  ('error', 'function_clause', [{'shell','history',1}])
	  %% Line 1029
	  <'results',[{'integer',_92,N}|[]],Bs,_X_Shell,_X_RT,_X_Lf,_X_Ef> when 'true' ->
	      let <_61> =
		  apply %% Line 1030
			'results'/1
		      (%% Line 1030
		       N)
	      in  %% Line 1030
		  {'value',_61,Bs}
	  %% Line 1031
	  <'results',[_X_Other|[]],_X_Bs,_X_Shell,_X_RT,_X_Lf,_X_Ef> when 'true' ->
	      %% Line 1032
	      call 'erlang':'raise'
		  ('error', 'function_clause', [{'shell','results',1}])
	  %% Line 1033
	  <'catch_exception',[{'atom',_93,Bool}|[]],Bs,_X_Shell,_X_RT,_X_Lf,_X_Ef>
	      when let <_62> =
		    call 'erlang':'=:='
			(%% Line 1034
			 Bool, 'true')
		in  let <_64> =
			call 'erlang':'=:='
			    (%% Line 1034
			     Bool, 'false')
		    in  %% Line 1034
			call 'erlang':'or'
			    (_62, _64) ->
	      let <_65> =
		  apply %% Line 1035
			'catch_exception'/1
		      (%% Line 1035
		       Bool)
	      in  %% Line 1035
		  {'value',_65,Bs}
	  %% Line 1036
	  <'catch_exception',[_X_Other|[]],_X_Bs,_X_Shell,_X_RT,_X_Lf,_X_Ef> when 'true' ->
	      %% Line 1037
	      call 'erlang':'raise'
		  ('error', 'function_clause', [{'shell','catch_exception',1}])
	  %% Line 1038
	  <'exit',[],_X_Bs,Shell,_X_RT,_X_Lf,_X_Ef> when 'true' ->
	      do  %% Line 1039
		  apply 'shell_req'/2
		      (Shell, 'exit')
		  %% Line 1040
		  call 'erlang':'exit'
		      ('normal')
	  %% Line 1041
	  <F,As0,Bs0,_X_Shell,_X_RT,Lf,Ef>
	      when call 'erlang':'is_atom'
		    (F) ->
	      %% Line 1042
	      case apply 'expr_list'/4
		       (As0, Bs0, Lf, Ef) of
		<{As,Bs}> when 'true' ->
		    %% Line 1043
		    apply 'non_builtin_local_func'/3
			(F, As, Bs)
		( <_66> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_66})
		  -| ['compiler_generated'] )
	      end
	  ( <_73,_72,_71,_70,_69,_68,_67> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_73,_72,_71,_70,_69,_68,_67})
		  -| [{'function_name',{'local_func',7}}] )
	    -| ['compiler_generated'] )
	end
'non_builtin_local_func'/3 =
    %% Line 1045
    fun (_0,_1,_2) ->
	let <Arity> =
	    call %% Line 1046
		 'erlang':%% Line 1046
			  'length'
		(_1)
	in  %% Line 1047
	    case call 'erlang':'function_exported'
		     ('user_default', _0, Arity) of
	      %% Line 1048
	      <'true'> when 'true' ->
		  let <_4> =
		      call %% Line 1049
			   'erlang':%% Line 1049
				    'make_fun'
			  (%% Line 1049
			   'user_default', _0, %% Line 1049
					       Arity)
		  in  %% Line 1049
		      {'eval',_4,_1,_2}
	      %% Line 1050
	      <'false'> when 'true' ->
		  %% Line 1051
		  apply 'shell_default'/3
		      (_0, _1, _2)
	      ( <_5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_5})
		-| ['compiler_generated'] )
	    end
'shell_default'/3 =
    %% Line 1054
    fun (_0,_1,_2) ->
	let <A> =
	    call %% Line 1056
		 'erlang':%% Line 1056
			  'length'
		(_1)
	in  %% Line 1057
	    case call 'code':'ensure_loaded'
		     ('shell_default') of
	      %% Line 1058
	      <{'module',_11}> when 'true' ->
		  %% Line 1059
		  case call 'erlang':'function_exported'
			   ('shell_default', _0, A) of
		    %% Line 1060
		    <'true'> when 'true' ->
			let <_5> =
			    call %% Line 1061
				 'erlang':%% Line 1061
					  'make_fun'
				('shell_default', _0, %% Line 1061
						      A)
			in  %% Line 1061
			    {'eval',_5,_1,_2}
		    %% Line 1062
		    <'false'> when 'true' ->
			%% Line 1063
			apply 'shell_undef'/2
			    (_0, A)
		    ( <_6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_6})
		      -| ['compiler_generated'] )
		  end
	      %% Line 1065
	      <{'error',_12}> when 'true' ->
		  %% Line 1066
		  apply 'shell_undef'/2
		      (_0, A)
	      ( <_7> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_7})
		-| ['compiler_generated'] )
	    end
'shell_undef'/2 =
    %% Line 1069
    fun (_0,_1) ->
	%% Line 1070
	call 'erlang':'error'
	    ({'shell_undef',_0,_1,[]})
'local_func_handler'/3 =
    %% Line 1072
    fun (_0,_1,_2) ->
	let <H> =
	    fun (_10) ->
		%% Line 1074
		( fun (_6,_5,_4) ->
		      let <_3> =
			  apply _10
			      (_10)
		      in  %% Line 1075
			  apply 'local_func'/7
			      (_6, _5, _4, _0, _1, {'eval',_3}, _2)
		  -| [{'id',{0,0,'-local_func_handler/3-fun-0-'}}] )
	in  let <_13> =
		apply %% Line 1078
		      H
		    (%% Line 1078
		     H)
	    in  %% Line 1078
		{'eval',_13}
'record_print_fun'/1 =
    %% Line 1080
    fun (_0) ->
	%% Line 1081
	( fun (_4,_3) ->
	      %% Line 1082
	      case call 'ets':'lookup'
		       (_0, _4) of
		%% Line 1083
		<[{_8,{'attribute',_9,'record',{_10,Fields}}}|[]]>
		    when let <_11> =
			  call 'erlang':'=:='
			      (_10, _4)
		      in  let <_12> =
			      try
				  let <_1> =
				      call %% Line 1084
					   'erlang':%% Line 1084
						    'length'
					  (%% Line 1084
					   Fields)
				  in  %% Line 1084
				      call 'erlang':'=:='
					  (_1, _3)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false'
			  in  call 'erlang':'and'
				  (_11, _12) ->
		    %% Line 1085
		    apply 'record_fields'/1
			(Fields)
		%% Line 1086
		<_13> when 'true' ->
		    %% Line 1087
		    'no'
	      end
	  -| [{'id',{0,0,'-record_print_fun/1-fun-0-'}}] )
'record_fields'/1 =
    %% Line 1091
    fun (_0) ->
	case _0 of
	  <[{'record_field',_4,{'atom',_5,Field}}|Fs]> when 'true' ->
	      let <_1> =
		  apply %% Line 1092
			'record_fields'/1
		      (%% Line 1092
		       Fs)
	      in  %% Line 1092
		  [Field|_1]
	  %% Line 1093
	  <[{'record_field',_6,{'atom',_7,Field},_8}|Fs]> when 'true' ->
	      let <_2> =
		  apply %% Line 1094
			'record_fields'/1
		      (%% Line 1094
		       Fs)
	      in  %% Line 1094
		  [Field|_2]
	  %% Line 1095
	  <[{'typed_record_field',Field,_X_Type}|Fs]> when 'true' ->
	      %% Line 1096
	      apply 'record_fields'/1
		  ([Field|Fs])
	  %% Line 1097
	  <[]> when 'true' ->
	      %% Line 1098
	      []
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'record_fields',1}}] )
	    -| ['compiler_generated'] )
	end
'initiate_records'/2 =
    %% Line 1100
    fun (_0,_1) ->
	let <RNs1> =
	    apply %% Line 1101
		  'init_rec'/3
		(%% Line 1101
		 'shell_default', _0, _1)
	in  let <_4> =
		case %% Line 1102
		     call 'code':'is_loaded'
			 ('user_default') of
		  %% Line 1103
		  <{'file',_X_File}> when 'true' ->
		      %% Line 1104
		      apply 'init_rec'/3
			  ('user_default', _0, _1)
		  %% Line 1105
		  <'false'> when 'true' ->
		      %% Line 1106
		      []
		  ( <_3> when 'true' ->
			%% Line 1102
			primop 'match_fail'
			    ({'case_clause',_3})
		    -| ['compiler_generated'] )
		end
	    in  let <_6> =
		    call %% Line 1108
			 'erlang':%% Line 1108
				  '++'
			(%% Line 1108
			 RNs1, _4)
		in  %% Line 1108
		    call 'lists':'usort'
			(_6)
'init_rec'/3 =
    %% Line 1110
    fun (_0,_1,_2) ->
	%% Line 1111
	case apply 'read_records'/2
		 (_0, []) of
	  %% Line 1112
	  <RAs>
	      when call 'erlang':'is_list'
		    (RAs) ->
	      let <_3> =
		  catch
		      %% Line 1113
		      apply 'add_records'/3
			  (RAs, _1, _2)
	      in  %% Line 1113
		  case _3 of
		    %% Line 1114
		    <{'EXIT',_9}> when 'true' ->
			%% Line 1115
			[]
		    %% Line 1116
		    <RNs> when 'true' ->
			%% Line 1117
			RNs
		  end
	  %% Line 1119
	  <_X_Error> when 'true' ->
	      %% Line 1120
	      []
	end
'read_and_add_records'/5 =
    %% Line 1123
    fun (_0,_1,_2,_3,_4) ->
	%% Line 1124
	case apply 'read_records'/3
		 (_0, _1, _2) of
	  %% Line 1125
	  <RAs>
	      when call 'erlang':'is_list'
		    (RAs) ->
	      %% Line 1126
	      apply 'add_records'/3
		  (RAs, _3, _4)
	  %% Line 1127
	  <Error> when 'true' ->
	      %% Line 1128
	      Error
	end
'read_records'/3 =
    %% Line 1131
    fun (_0,_1,_2) ->
	let <_3> =
	    apply %% Line 1132
		  'listify'/1
		(_2)
	in  %% Line 1132
	    case apply 'read_records'/2
		     (_0, _3) of
	      %% Line 1133
	      <Error>
		  when call 'erlang':'is_tuple'
			(Error) ->
		  %% Line 1134
		  Error
	      %% Line 1135
	      <RAs>
		  when call 'erlang':'=:='
			(_1,
			 '_') ->
		  %% Line 1136
		  RAs
	      %% Line 1137
	      <RAs> when 'true' ->
		  let <Sel> =
		      apply %% Line 1138
			    'listify'/1
			  (_1)
		  in  %% Line 1139
		      ( letrec
			    'lc$^0'/1 =
				fun (_7) ->
				    case _7 of
				      <[RA = {'attribute',_14,_15,{Name,_16}}|_6]> when 'true' ->
					  %% Line 1140
					  ( case call 'lists':'member'
						     (Name, Sel) of
					      <'true'> when 'true' ->
						  let <_8> =
						      apply 'lc$^0'/1
							  (_6)
						  in  ( [RA|_8]
							-| ['compiler_generated'] )
					      ( <'false'> when 'true' ->
						    apply 'lc$^0'/1
							(_6)
						-| ['compiler_generated'] )
					      ( <_9> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_9})
						-| ['compiler_generated'] )
					    end
					    -| ['list_comprehension'] )
				      ( <[_5|_6]> when 'true' ->
					    apply 'lc$^0'/1
						(_6)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_17> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_17})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(RAs)
			-| ['list_comprehension'] )
	    end
'add_records'/3 =
    %% Line 1143
    fun (_0,_1,_2) ->
	let <_7> =
	    letrec
		'lc$^0'/1 =
		    %% Line 1144
		    fun (_5) ->
			case _5 of
			  <[D = {'attribute',_23,_24,{Name,_25}}|_4]> when 'true' ->
			      let <_6> =
				  apply 'lc$^0'/1
				      (_4)
			      in  ( [{Name,D}|_6]
				    -| ['compiler_generated'] )
			  ( <[_3|_4]> when 'true' ->
				apply 'lc$^0'/1
				    (_4)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_27> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_27})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 1144
		apply 'lc$^0'/1
		    (_0)
	in  let <Bs1> =
		apply %% Line 1145
		      'record_bindings'/2
		    (_7, _1)
	    in  %% Line 1146
		case apply 'check_command'/2
			 ([], Bs1) of
		  %% Line 1147
		  <{'error',{_X_Line,M,ErrDesc}}> when 'true' ->
		      let <_10> =
			  call %% Line 1149
			       M:%% Line 1149
				 'format_error'
			      (%% Line 1149
			       ErrDesc)
		      in  let <ErrStr> =
			      call %% Line 1149
				   'io_lib':%% Line 1149
					    'fwrite'
				  (%% Line 1149
				   #{#<126>(8,1,'integer',['unsigned'|['big']]),
				     #<116>(8,1,'integer',['unsigned'|['big']]),
				     #<115>(8,1,'integer',['unsigned'|['big']])}#, %% Line 1149
										   [_10|[]])
			  in  let <_12> =
				  call %% Line 1150
				       'lists':%% Line 1150
					       'flatten'
				      (%% Line 1150
				       ErrStr)
			      in  %% Line 1150
				  call 'erlang':'exit'
				      (_12)
		  %% Line 1151
		  <'ok'> when 'true' ->
		      %% Line 1152
		      case call 'ets':'insert'
			       (_2, _7) of
			<'true'> when 'true' ->
			    let <_18> =
				letrec
				    'lc$^1'/1 =
					%% Line 1153
					fun (_16) ->
					    case _16 of
					      <[{Name,_26}|_15]> when 'true' ->
						  let <_17> =
						      apply 'lc$^1'/1
							  (_15)
						  in  ( [Name|_17]
							-| ['compiler_generated'] )
					      ( <[_14|_15]> when 'true' ->
						    apply 'lc$^1'/1
							(_15)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_28> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_28})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  %% Line 1153
				    apply 'lc$^1'/1
					(_7)
			    in  %% Line 1153
				call 'lists':'usort'
				    (_18)
			( <_13> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_13})
			  -| ['compiler_generated'] )
		      end
		  ( <_19> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_19})
		    -| ['compiler_generated'] )
		end
'listify'/1 =
    %% Line 1156
    fun (_0) ->
	case _0 of
	  <L>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 1157
	      L
	  %% Line 1158
	  <E> when 'true' ->
	      %% Line 1159
	      [E|[]]
	end
'check_command'/2 =
    %% Line 1161
    fun (_0,_1) ->
	%% Line 1162
	call 'erl_eval':'check_command'
	    (_0, _1)
'expr'/4 =
    %% Line 1164
    fun (_0,_1,_2,_3) ->
	%% Line 1165
	call 'erl_eval':'expr'
	    (_0, _1, _2, _3)
'expr_list'/4 =
    %% Line 1167
    fun (_0,_1,_2,_3) ->
	%% Line 1168
	call 'erl_eval':'expr_list'
	    (_0, _1, _2, _3)
'record_bindings'/2 =
    %% Line 1174
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],Bs> when 'true' ->
	      %% Line 1175
	      Bs
	  %% Line 1176
	  <Recs0,Bs0> when 'true' ->
	      let <_7> =
		  fun (_4,_3) ->
		      %% Line 1177
		      case <_4,_3> of
			<{Name,Def},I> when 'true' ->
			    let <_2> =
				call 'erlang':'+'
				    (I, 1)
			    in  {{Name,I,Def},_2}
			( <_6,_5> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_6,_5})
				-| [{'function_name',{'-record_bindings/2-fun-0-',2}}] )
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 1177
		  case call 'lists':'mapfoldl'
			   (_7, %% Line 1178
				0, %% Line 1178
				   Recs0) of
		    <{Recs1,_18}> when 'true' ->
			let <_9> =
			    call %% Line 1179
				 'lists':%% Line 1179
					 'ukeysort'
				(%% Line 1179
				 1, %% Line 1179
				    Recs1)
			in  let <Recs2> =
				call %% Line 1179
				     'lists':%% Line 1179
					     'keysort'
				    (%% Line 1179
				     2, _9)
			    in  let <_15> =
				    fun (_12,_11) ->
					%% Line 1180
					case <_12,_11> of
					  <{Name,I,Def},Bs> when 'true' ->
					      %% Line 1181
					      call 'erl_eval':'add_binding'
						  ({'record',I,Name}, Def, Bs)
					  ( <_14,_13> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_14,_13})
						  -| [{'function_name',{'-record_bindings/2-fun-1-',2}}] )
					    -| ['compiler_generated'] )
					end
				in  %% Line 1180
				    call 'lists':'foldl'
					(_15, %% Line 1182
					      Bs0, %% Line 1182
						   Recs2)
		    ( <_8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_8})
		      -| ['compiler_generated'] )
		  end
	end
'read_records'/2 =
    %% Line 1186
    fun (_0,_1) ->
	let <Opts> =
	    call %% Line 1187
		 'lists':%% Line 1187
			 'delete'
		(%% Line 1187
		 'report_warnings', _1)
	in  %% Line 1188
	    case apply 'find_file'/1
		     (_0) of
	      %% Line 1189
	      <{'files',[File|[]]}> when 'true' ->
		  %% Line 1190
		  apply 'read_file_records'/2
		      (File, Opts)
	      %% Line 1191
	      <{'files',Files}> when 'true' ->
		  let <_6> =
		      fun (_4) ->
			  %% Line 1193
			  case apply 'read_file_records'/2
				   (_4, Opts) of
			    %% Line 1194
			    <RAs>
				when call 'erlang':'is_list'
				      (RAs) ->
				RAs
			    %% Line 1195
			    <_10> when 'true' ->
				[]
			  end
		  in  %% Line 1192
		      call 'lists':'flatmap'
			  (_6, %% Line 1197
			       Files)
	      %% Line 1198
	      <Error> when 'true' ->
		  %% Line 1199
		  Error
	    end
'find_file'/1 =
    %% Line 1204
    fun (_0) ->
	case _0 of
	  <Mod>
	      when call 'erlang':'is_atom'
		    (_0) ->
	      %% Line 1205
	      case call 'code':'which'
		       (Mod) of
		%% Line 1206
		<File>
		    when call 'erlang':'is_list'
			  (File) ->
		    %% Line 1207
		    {'files',[File|[]]}
		%% Line 1208
		<'preloaded'> when 'true' ->
		    %% Line 1209
		    case call 'code':'get_object_code'
			     (Mod) of
		      <{_X_M,_X_Bin,File}> when 'true' ->
			  %% Line 1210
			  {'files',[File|[]]}
		      ( <_1> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_1})
			-| ['compiler_generated'] )
		    end
		%% Line 1211
		<_X_Else> when 'true' ->
		    %% Line 1212
		    {'error','nofile'}
	      end
	  %% Line 1214
	  <File> when 'true' ->
	      let <_3> =
		  catch
		      %% Line 1215
		      call 'filelib':'wildcard'
			  (File)
	      in  %% Line 1215
		  case _3 of
		    %% Line 1216
		    <{'EXIT',_6}> when 'true' ->
			%% Line 1217
			{'error','invalid_filename'}
		    %% Line 1218
		    <Files> when 'true' ->
			%% Line 1219
			{'files',Files}
		  end
	end
'read_file_records'/2 =
    %% Line 1222
    fun (_0,_1) ->
	%% Line 1223
	case call 'filename':'extension'
		 (_0) of
	  %% Line 1224
	  <[46|[98|[101|[97|[109]]]]]> when 'true' ->
	      %% Line 1225
	      case call 'beam_lib':'chunks'
		       (_0, ['abstract_code'|[[67|[73|[110|[102]]]]]]) of
		%% Line 1226
		<{'ok',{_X_Mod,[{'abstract_code',{Version,Forms}}|[{[67|[73|[110|[102]]]],CB}|[]]]}}> when 'true' ->
		    %% Line 1227
		    case apply 'record_attrs'/1
			     (Forms) of
		      %% Line 1228
		      <[]>
			  when call 'erlang':'=:='
				(Version,
				 'raw_abstract_v1') ->
			  %% Line 1229
			  []
		      %% Line 1230
		      <[]> when 'true' ->
			  %% Line 1233
			  apply 'try_source'/2
			      (_0, CB)
		      %% Line 1234
		      <Records> when 'true' ->
			  %% Line 1235
			  Records
		    end
		%% Line 1237
		<{'ok',{_X_Mod,[{'abstract_code','no_abstract_code'}|[{[67|[73|[110|[102]]]],CB}|[]]]}}> when 'true' ->
		    %% Line 1238
		    apply 'try_source'/2
			(_0, CB)
		%% Line 1239
		<Error> when 'true' ->
		    %% Line 1241
		    Error
	      end
	  %% Line 1243
	  <_7> when 'true' ->
	      %% Line 1244
	      apply 'parse_file'/2
		  (_0, _1)
	end
'try_source'/2 =
    %% Line 1248
    fun (_0,_1) ->
	let <EbinDir> =
	    call %% Line 1249
		 'filename':%% Line 1249
			    'dirname'
		(_0)
	in  let <CB> =
		call %% Line 1250
		     'erlang':%% Line 1250
			      'binary_to_term'
		    (_1)
	    in  let <Os> =
		    call %% Line 1251
			 'proplists':%% Line 1251
				     'get_value'
			(%% Line 1251
			 'options', %% Line 1251
				    CB, %% Line 1251
					[])
		in  let <_5> =
			call %% Line 1252
			     'filename':%% Line 1252
					'rootname'
			    (_0)
		    in  let <Src0> =
			    call %% Line 1252
				 'erlang':%% Line 1252
					  '++'
				(_5, %% Line 1252
				     [46|[101|[114|[108]]]])
			in  let <_7> =
				call %% Line 1253
				     'filename':%% Line 1253
						'dirname'
				    (%% Line 1253
				     EbinDir)
			    in  let <_8> =
				    call %% Line 1254
					 'filename':%% Line 1254
						    'basename'
					(%% Line 1254
					 Src0)
				in  let <Src1> =
					call %% Line 1253
					     'filename':%% Line 1253
							'join'
					    (%% Line 1253
					     [_7|[[115|[114|[99]]]|%% Line 1254
								   [_8|[]]]])
				    in  let <Src2> =
					    call %% Line 1255
						 'proplists':%% Line 1255
							     'get_value'
						(%% Line 1255
						 'source', %% Line 1255
							   CB, %% Line 1255
							       [])
					in  %% Line 1256
					    apply 'try_sources'/2
						([Src0|[Src1|[Src2|[]]]], Os)
'try_sources'/2 =
    %% Line 1258
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],_5> when 'true' ->
	      %% Line 1259
	      {'error','nofile'}
	  %% Line 1260
	  <[Src|Rest],Os> when 'true' ->
	      %% Line 1261
	      case apply 'is_file'/1
		       (Src) of
		%% Line 1262
		<'true'> when 'true' ->
		    apply 'parse_file'/2
			(Src, Os)
		%% Line 1263
		<'false'> when 'true' ->
		    apply 'try_sources'/2
			(Rest, Os)
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'try_sources',2}}] )
	    -| ['compiler_generated'] )
	end
'is_file'/1 =
    %% Line 1266
    fun (_0) ->
	%% Line 1267
	case call 'filelib':'is_file'
		 (_0) of
	  %% Line 1268
	  <'true'> when 'true' ->
	      let <_1> =
		  call %% Line 1269
		       'filelib':%% Line 1269
				 'is_dir'
		      (_0)
	      in  %% Line 1269
		  call 'erlang':'not'
		      (_1)
	  %% Line 1270
	  <'false'> when 'true' ->
	      %% Line 1271
	      'false'
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_2})
	    -| ['compiler_generated'] )
	end
'parse_file'/2 =
    %% Line 1274
    fun (_0,_1) ->
	let <Dir> =
	    call %% Line 1276
		 'filename':%% Line 1276
			    'dirname'
		(_0)
	in  let <_4> =
		apply %% Line 1277
		      'inc_paths'/1
		    (_1)
	    in  let <IncludePath> =
		    [%% Line 1275
		     [46]|%% Line 1277
			  [Dir|_4]]
		in  let <_6> =
			apply %% Line 1278
			      'pre_defs'/1
			    (_1)
		    in  %% Line 1278
			case call 'epp':'parse_file'
				 (_0, IncludePath, _6) of
			  %% Line 1279
			  <{'ok',Forms}> when 'true' ->
			      %% Line 1280
			      apply 'record_attrs'/1
				  (Forms)
			  %% Line 1281
			  <Error> when 'true' ->
			      %% Line 1282
			      Error
			end
'pre_defs'/1 =
    %% Line 1285
    fun (_0) ->
	case _0 of
	  <[{'d',M,V}|Opts]> when 'true' ->
	      let <_1> =
		  apply %% Line 1286
			'pre_defs'/1
		      (%% Line 1286
		       Opts)
	      in  %% Line 1286
		  [{M,V}|_1]
	  %% Line 1287
	  <[{'d',M}|Opts]> when 'true' ->
	      let <_2> =
		  apply %% Line 1288
			'pre_defs'/1
		      (%% Line 1288
		       Opts)
	      in  %% Line 1288
		  [M|_2]
	  %% Line 1289
	  <[_4|Opts]> when 'true' ->
	      %% Line 1290
	      apply 'pre_defs'/1
		  (Opts)
	  %% Line 1291
	  <[]> when 'true' ->
	      []
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'pre_defs',1}}] )
	    -| ['compiler_generated'] )
	end
'inc_paths'/1 =
    %% Line 1293
    fun (_0) ->
	%% Line 1294
	( letrec
	      'lc$^0'/1 =
		  fun (_3) ->
		      case _3 of
			<[{'i',P}|_2]>
			    when call 'erlang':'is_list'
				  (P) ->
			    let <_4> =
				apply 'lc$^0'/1
				    (_2)
			    in  ( [P|_4]
				  -| ['compiler_generated'] )
			( <[_1|_2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_6> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_6})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_0)
	  -| ['list_comprehension'] )
'record_attrs'/1 =
    %% Line 1296
    fun (_0) ->
	%% Line 1297
	( letrec
	      'lc$^0'/1 =
		  fun (_3) ->
		      case _3 of
			<[A = {'attribute',_6,'record',_X_D}|_2]> when 'true' ->
			    let <_4> =
				apply 'lc$^0'/1
				    (_2)
			    in  ( [A|_4]
				  -| ['compiler_generated'] )
			( <[_1|_2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_7> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_7})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_0)
	  -| ['list_comprehension'] )
'shell_req'/2 =
    %% Line 1301
    fun (_0,_1) ->
	let <_2> =
	    call %% Line 1302
		 'erlang':%% Line 1302
			  'self'
		()
	in  do  %% Line 1302
		call 'erlang':'!'
		    (_0, {'shell_req',_2,_1})
		%% Line 1303
		receive
		  %% Line 1304
		  <{'shell_rep',_5,Rep}>
		      when call 'erlang':'=:='
			    (_5,
			     _0) ->
		      Rep
		after 'infinity' ->
		  'true'
'list_commands'/2 =
    %% Line 1307
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{{N,'command'},Es0}|[{{_15,'result'},V}|Ds]],RT>
	      when call 'erlang':'=:='
		    (_15,
		     N) ->
	      let <Es> =
		  apply %% Line 1308
			'prep_list_commands'/1
		      (%% Line 1308
		       Es0)
	      in  let <VS> =
		      apply %% Line 1309
			    'pp'/3
			  (%% Line 1309
			   V, %% Line 1309
			      4, %% Line 1309
				 RT)
		  in  let <Ns> =
			  call %% Line 1310
			       'io_lib':%% Line 1310
					'fwrite'
			      (%% Line 1310
			       #{#<126>(8,1,'integer',['unsigned'|['big']]),
				 #<119>(8,1,'integer',['unsigned'|['big']]),
				 #<58>(8,1,'integer',['unsigned'|['big']]),
				 #<32>(8,1,'integer',['unsigned'|['big']])}#, %% Line 1310
									      [N|[]])
		      in  let <I> =
			      call %% Line 1311
				   'erlang':%% Line 1311
					    'iolist_size'
				  (%% Line 1311
				   Ns)
			  in  let <_6> =
				  apply %% Line 1313
					'enc'/0
				      ()
			      in  let <_7> =
				      call %% Line 1313
					   'erl_pp':%% Line 1313
						    'exprs'
					  (%% Line 1313
					   Es, %% Line 1313
					       I, _6)
				  in  do  %% Line 1312
					  call 'io':'requests'
					      ([{'put_chars','latin1',Ns}|%% Line 1313
									  [{'format',#{#<126>(8,1,'integer',['unsigned'|['big']]),
										       #<116>(8,1,'integer',['unsigned'|['big']]),
										       #<115>(8,1,'integer',['unsigned'|['big']]),
										       #<10>(8,1,'integer',['unsigned'|['big']])}#,[_7|[]]}|%% Line 1314
																	    [{'format',#{#<45>(8,1,'integer',['unsigned'|['big']]),
																			 #<62>(8,1,'integer',['unsigned'|['big']]),
																			 #<32>(8,1,'integer',['unsigned'|['big']])}#,[]}|%% Line 1315
																									 [{'put_chars','unicode',VS}|%% Line 1316
																												     ['nl']]]]])
					  %% Line 1317
					  apply 'list_commands'/2
					      (Ds, RT)
	  %% Line 1318
	  <[{{N,'command'},Es0}|Ds],RT> when 'true' ->
	      let <Es> =
		  apply %% Line 1319
			'prep_list_commands'/1
		      (%% Line 1319
		       Es0)
	      in  let <Ns> =
		      call %% Line 1320
			   'io_lib':%% Line 1320
				    'fwrite'
			  (%% Line 1320
			   #{#<126>(8,1,'integer',['unsigned'|['big']]),
			     #<119>(8,1,'integer',['unsigned'|['big']]),
			     #<58>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']])}#, %% Line 1320
									  [N|[]])
		  in  let <I> =
			  call %% Line 1321
			       'erlang':%% Line 1321
					'iolist_size'
			      (%% Line 1321
			       Ns)
		      in  let <_11> =
			      apply %% Line 1323
				    'enc'/0
				  ()
			  in  let <_12> =
				  call %% Line 1323
				       'erl_pp':%% Line 1323
						'exprs'
				      (%% Line 1323
				       Es, %% Line 1323
					   I, _11)
			      in  do  %% Line 1322
				      call 'io':'requests'
					  ([{'put_chars','latin1',Ns}|%% Line 1323
								      [{'format',#{#<126>(8,1,'integer',['unsigned'|['big']]),
										   #<116>(8,1,'integer',['unsigned'|['big']]),
										   #<115>(8,1,'integer',['unsigned'|['big']]),
										   #<10>(8,1,'integer',['unsigned'|['big']])}#,[_12|[]]}|[]]])
				      %% Line 1324
				      apply 'list_commands'/2
					  (Ds, RT)
	  %% Line 1325
	  <[_X_D|Ds],RT> when 'true' ->
	      %% Line 1326
	      apply 'list_commands'/2
		  (Ds, RT)
	  %% Line 1327
	  <[],_X_RT> when 'true' ->
	      'ok'
	  ( <_14,_13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13})
		  -| [{'function_name',{'list_commands',2}}] )
	    -| ['compiler_generated'] )
	end
'list_bindings'/2 =
    %% Line 1329
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{Name,Val}|Bs],RT> when 'true' ->
	      do  %% Line 1330
		  case call 'erl_eval':'fun_data'
			   (Val) of
		    %% Line 1331
		    <{'fun_data',_X_FBs,FCs0}> when 'true' ->
			let <FCs> =
			    apply %% Line 1332
				  'expand_value'/1
				(%% Line 1332
				 FCs0)
			in  let <A> =
				apply %% Line 1333
				      'a0'/0
				    ()
			    in  let <F> = {%% Line 1334
				     'fun',%% Line 1334
					   A,%% Line 1334
					     {'clauses',FCs}}
				in  let <M> =
					{%% Line 1335
					 'match',%% Line 1335
						 A,%% Line 1335
						   {'var',A,Name},%% Line 1335
								  F}
				    in  let <_6> =
					    apply %% Line 1336
						  'enc'/0
						()
					in  let <_7> =
						call %% Line 1336
						     'erl_pp':%% Line 1336
							      'expr'
						    (%% Line 1336
						     M, _6)
					    in  %% Line 1336
						call 'io':'fwrite'
						    (#{#<126>(8,1,'integer',['unsigned'|['big']]),
						       #<116>(8,1,'integer',['unsigned'|['big']]),
						       #<115>(8,1,'integer',['unsigned'|['big']]),
						       #<10>(8,1,'integer',['unsigned'|['big']])}#, [_7|[]])
		    %% Line 1337
		    <{'named_fun_data',_X_FBs,FName,FCs0}> when 'true' ->
			let <FCs> =
			    apply %% Line 1338
				  'expand_value'/1
				(%% Line 1338
				 FCs0)
			in  let <A> =
				apply %% Line 1339
				      'a0'/0
				    ()
			    in  let <F> =
				    {%% Line 1340
				     'named_fun',%% Line 1340
						 A,%% Line 1340
						   FName,%% Line 1340
							 FCs}
				in  let <M> =
					{%% Line 1341
					 'match',%% Line 1341
						 A,%% Line 1341
						   {'var',A,Name},%% Line 1341
								  F}
				    in  let <_12> =
					    apply %% Line 1342
						  'enc'/0
						()
					in  let <_13> =
						call %% Line 1342
						     'erl_pp':%% Line 1342
							      'expr'
						    (%% Line 1342
						     M, _12)
					    in  %% Line 1342
						call 'io':'fwrite'
						    (#{#<126>(8,1,'integer',['unsigned'|['big']]),
						       #<116>(8,1,'integer',['unsigned'|['big']]),
						       #<115>(8,1,'integer',['unsigned'|['big']]),
						       #<10>(8,1,'integer',['unsigned'|['big']])}#, [_13|[]])
		    %% Line 1343
		    <'false'> when 'true' ->
			let <Namel> =
			    call %% Line 1344
				 'io_lib':%% Line 1344
					  'fwrite'
				(%% Line 1344
				 #{#<126>(8,1,'integer',['unsigned'|['big']]),
				   #<115>(8,1,'integer',['unsigned'|['big']]),
				   #<32>(8,1,'integer',['unsigned'|['big']]),
				   #<61>(8,1,'integer',['unsigned'|['big']]),
				   #<32>(8,1,'integer',['unsigned'|['big']])}#, %% Line 1344
										[Name|[]])
			in  let <_15> =
				call %% Line 1345
				     'erlang':%% Line 1345
					      'iolist_size'
				    (%% Line 1345
				     Namel)
			    in  let <Nl> =
				    call %% Line 1345
					 'erlang':%% Line 1345
						  '+'
					(_15, %% Line 1345
					      1)
				in  let <ValS> =
					apply %% Line 1346
					      'pp'/3
					    (%% Line 1346
					     Val, %% Line 1346
						  Nl, %% Line 1346
						      RT)
				    in  %% Line 1347
					call 'io':'requests'
					    ([{'put_chars','latin1',Namel}|%% Line 1348
									   [{'put_chars','unicode',ValS}|%% Line 1349
													 ['nl']]])
		    ( <_18> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_18})
		      -| ['compiler_generated'] )
		  end
		  %% Line 1351
		  apply 'list_bindings'/2
		      (Bs, RT)
	  %% Line 1352
	  <[],_X_RT> when 'true' ->
	      %% Line 1353
	      'ok'
	  ( <_20,_19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_20,_19})
		  -| [{'function_name',{'list_bindings',2}}] )
	    -| ['compiler_generated'] )
	end
'list_records'/1 =
    %% Line 1355
    fun (_0) ->
	let <_5> =
	    fun (_3) ->
		%% Line 1356
		case _3 of
		  <{_X_Name,Attr}> when 'true' ->
		      let <_1> =
			  apply %% Line 1357
				'enc'/0
			      ()
		      in  let <_2> =
			      call %% Line 1357
				   'erl_pp':%% Line 1357
					    'attribute'
				  (%% Line 1357
				   Attr, _1)
			  in  %% Line 1357
			      call 'io':'fwrite'
				  (#{#<126>(8,1,'integer',['unsigned'|['big']]),
				     #<116>(8,1,'integer',['unsigned'|['big']]),
				     #<115>(8,1,'integer',['unsigned'|['big']])}#, [_2|[]])
		  ( <_4> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_4})
			  -| [{'function_name',{'-list_records/1-fun-0-',1}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 1356
	    call 'lists':'foreach'
		(_5, _0)
'record_defs'/2 =
    %% Line 1360
    fun (_0,_1) ->
	let <_4> =
	    fun (_2) ->
		%% Line 1361
		call 'ets':'lookup'
		    (_0, _2)
	in  %% Line 1361
	    call 'lists':'flatmap'
		(_4, _1)
'expand_value'/1 =
    %% Line 1364
    fun (_0) ->
	let <_3> =
	    fun (_1) ->
		%% Line 1365
		case _1 of
		  <{'value',CommandN,V}> when 'true' ->
		      apply 'try_abstract'/2
			  (V, CommandN)
		  ( <_2> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_2})
			  -| [{'function_name',{'-expand_value/1-fun-0-',1}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 1365
	    apply 'substitute_v1'/2
		(_3, _0)
'try_abstract'/2 =
    %% Line 1369
    fun (_0,_1) ->
	%% Line 1370
	try
	    call 'erl_parse':'abstract'
		(_0)
	of <_2> ->
	    _2
	catch <_5,_4,_3> ->
	    let <A> =
		apply %% Line 1373
		      'a0'/0
		    ()
	    in  %% Line 1374
		{'call',A,{'atom',A,'v'},[{'integer',A,_1}|[]]}
'prep_list_commands'/1 =
    %% Line 1378
    fun (_0) ->
	let <A> =
	    apply %% Line 1379
		  'a0'/0
		()
	in  let <_5> =
		fun (_3) ->
		    %% Line 1380
		    case _3 of
		      <{'value',Anno,_X_V}> when 'true' ->
			  let <CommandN> =
			      call %% Line 1381
				   'erl_anno':%% Line 1381
					      'line'
				  (%% Line 1381
				   Anno)
			  in  %% Line 1382
			      {'call',A,{'atom',A,'v'},[{'integer',A,CommandN}|[]]}
		      ( <_4> when 'true' ->
			    ( primop 'match_fail'
				  ({'function_clause',_4})
			      -| [{'function_name',{'-prep_list_commands/1-fun-0-',1}}] )
			-| ['compiler_generated'] )
		    end
	    in  %% Line 1380
		apply 'substitute_v1'/2
		    (_5, _0)
'substitute_v1'/2 =
    %% Line 1385
    fun (_0,_1) ->
	case <_0,_1> of
	  <F,Value = {'value',_8,_9}> when 'true' ->
	      %% Line 1386
	      apply F
		  (Value)
	  %% Line 1387
	  <F,T>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_2> =
		  call %% Line 1388
		       'erlang':%% Line 1388
				'tuple_to_list'
		      (%% Line 1388
		       T)
	      in  let <_3> =
		      apply %% Line 1388
			    'substitute_v1'/2
			  (%% Line 1388
			   F, _2)
		  in  %% Line 1388
		      call 'erlang':'list_to_tuple'
			  (_3)
	  %% Line 1389
	  <F,[E|Es]> when 'true' ->
	      let <_4> =
		  apply %% Line 1390
			'substitute_v1'/2
		      (%% Line 1390
		       F, %% Line 1390
			  E)
	      in  let <_5> =
		      apply %% Line 1390
			    'substitute_v1'/2
			  (%% Line 1390
			   F, %% Line 1390
			      Es)
		  in  %% Line 1390
		      [_4|_5]
	  %% Line 1391
	  <_X_F,E> when 'true' ->
	      %% Line 1392
	      E
	end
'a0'/0 =
    %% Line 1394
    fun () ->
	%% Line 1395
	call 'erl_anno':'new'
	    (0)
'check_and_get_history_and_results'/0 =
    %% Line 1397
    fun () ->
	do  %% Line 1398
	    apply 'check_env'/1
		('shell_history_length')
	    do  %% Line 1399
		apply 'check_env'/1
		    ('shell_saved_results')
		%% Line 1400
		apply 'get_history_and_results'/0
		    ()
'get_history_and_results'/0 =
    %% Line 1402
    fun () ->
	let <History> =
	    apply %% Line 1403
		  'get_env'/2
		(%% Line 1403
		 'shell_history_length', %% Line 1403
					 20)
	in  let <Results> =
		apply %% Line 1404
		      'get_env'/2
		    (%% Line 1404
		     'shell_saved_results', %% Line 1404
					    20)
	    in  let <_2> =
		    call %% Line 1405
			 'erlang':%% Line 1405
				  'min'
			(%% Line 1405
			 Results, %% Line 1405
				  History)
		in  %% Line 1405
		    {History,_2}
'pp'/3 =
    %% Line 1407
    fun (_0,_1,_2) ->
	%% Line 1408
	apply 'pp'/4
	    (_0, _1, ( 30
		       -| ['compiler_generated'] ), _2)
'pp'/4 =
    %% Line 1410
    fun (_0,_1,_2,_3) ->
	let <_5> =
	    case %% Line 1412
		 call 'application':'get_env'
		     ('stdlib', 'shell_strings') of
	      %% Line 1413
	      <{'ok','false'}> when 'true' ->
		  %% Line 1414
		  'false'
	      %% Line 1415
	      <_15> when 'true' ->
		  %% Line 1416
		  'true'
	    end
	in  let <_8> =
		apply %% Line 1418
		      'columns'/0
		    ()
	    in  let <_9> =
		    apply %% Line 1421
			  'record_print_fun'/1
			(_3)
		in  let <_7> =
			apply %% Line 1422
			      'enc'/0
			    ()
		    in  let <_10> =
			    [%% Line 1418
			     {'column',_1}|%% Line 1418
					   [{'line_length',_8}|%% Line 1419
							       [{'depth',_2}|[{'line_max_chars',60}|%% Line 1420
												    [{'strings',_5}|%% Line 1421
														    [{'record_print_fun',_9}|_7]]]]]]
			in  %% Line 1418
			    call 'io_lib_pretty':'print'
				(_0, _10)
'columns'/0 =
    %% Line 1424
    fun () ->
	%% Line 1425
	case call 'io':'columns'
		 () of
	  %% Line 1426
	  <{'ok',N}> when 'true' ->
	      N
	  %% Line 1427
	  <_1> when 'true' ->
	      80
	end
'encoding'/0 =
    %% Line 1430
    fun () ->
	%% Line 1431
	case apply 'enc'/0
		 () of
	  <[{'encoding',Encoding}|[]]> when 'true' ->
	      %% Line 1432
	      Encoding
	  ( <_0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_0})
	    -| ['compiler_generated'] )
	end
'enc'/0 =
    %% Line 1434
    fun () ->
	let <_0> =
	    call %% Line 1435
		 'io':%% Line 1435
		      'getopts'
		()
	in  %% Line 1435
	    case call 'lists':'keyfind'
		     ('encoding', 1, _0) of
	      %% Line 1436
	      <'false'> when 'true' ->
		  [{'encoding','latin1'}]
	      %% Line 1437
	      <Enc> when 'true' ->
		  [Enc|[]]
	    end
'garb'/1 =
    %% Line 1440
    fun (_0) ->
	do  %% Line 1441
	    call 'erlang':'garbage_collect'
		(_0)
	    do  try
		    let <_1> =
			call %% Line 1442
			     'erlang':%% Line 1442
				      'whereis'
			    (%% Line 1442
			     'user')
		    in  %% Line 1442
			call 'erlang':'garbage_collect'
			    (_1)
		of <_catch_value> ->
		    _catch_value
		catch <Class,Reason,Stk> ->
		    'ok'
		do  try
			let <_2> =
			    call %% Line 1443
				 'erlang':%% Line 1443
					  'group_leader'
				()
			in  %% Line 1443
			    call 'erlang':'garbage_collect'
				(_2)
		    of <_catch_value> ->
			_catch_value
		    catch <Class,Reason,Stk> ->
			'ok'
		    %% Line 1444
		    call 'erlang':'garbage_collect'
			()
'get_env'/2 =
    %% Line 1446
    fun (_0,_1) ->
	%% Line 1447
	case call 'application':'get_env'
		 ('stdlib', _0) of
	  %% Line 1448
	  <{'ok',Val}>
	      when let <_2> =
		    call 'erlang':'is_integer'
			(Val)
		in  let <_3> =
			call 'erlang':'>='
			    (Val, 0)
		    in  call 'erlang':'and'
			    (_2, _3) ->
	      %% Line 1449
	      Val
	  %% Line 1450
	  <_7> when 'true' ->
	      _1
	end
'check_env'/1 =
    %% Line 1454
    fun (_0) ->
	%% Line 1455
	case call 'application':'get_env'
		 ('stdlib', _0) of
	  %% Line 1456
	  <'undefined'> when 'true' ->
	      %% Line 1457
	      'ok'
	  %% Line 1458
	  <{'ok',Val}>
	      when let <_1> =
		    call 'erlang':'is_integer'
			(Val)
		in  let <_2> =
			call 'erlang':'>='
			    (Val, 0)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 1459
	      'ok'
	  %% Line 1460
	  <{'ok',Val}> when 'true' ->
	      let <Txt> =
		  call %% Line 1461
		       'io_lib':%% Line 1461
				'fwrite'
		      (%% Line 1462
		       [73|[110|[118|[97|[108|[105|[100|[32|[118|[97|[108|[117|[101|[32|[111|[102|[32|[83|[84|[68|[76|[73|[66|[32|[99|[111|[110|[102|[105|[103|[117|[114|[97|[116|[105|[111|[110|[32|[112|[97|[114|[97|[109|[101|[116|[101|[114|[126|[116|[119|[58|[32|[126|[116|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1463
																																										   [_0|[Val|[]]])
	      in  let <_4> =
		      call %% Line 1464
			   'lists':%% Line 1464
				   'flatten'
			  (%% Line 1464
			   Txt)
		  in  %% Line 1464
		      call 'error_logger':'info_report'
			  (_4)
	  ( <_5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_5})
	    -| ['compiler_generated'] )
	end
'set_env'/4 =
    %% Line 1467
    fun (_0,_1,_2,_3) ->
	let <_5> =
	    case %% Line 1468
		 call 'application':'get_env'
		     (_0, _1) of
	      %% Line 1469
	      <'undefined'> when 'true' ->
		  _3
	      %% Line 1471
	      <{'ok',Old}> when 'true' ->
		  %% Line 1472
		  Old
	      ( <_4> when 'true' ->
		    %% Line 1468
		    primop 'match_fail'
			({'case_clause',_4})
		-| ['compiler_generated'] )
	    end
	in  do  %% Line 1474
		call 'application_controller':'set_env'
		    (_0, _1, _2)
		_5
'history'/1 =
    %% Line 1480
    fun (_0) ->
	case _0 of
	  <L>
	      when let <_1> =
		    call 'erlang':'is_integer'
			(_0)
		in  let <_2> =
			call 'erlang':'>='
			    (_0, 0)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 1481
	      apply 'set_env'/4
		  ('stdlib', 'shell_history_length', L, 20)
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'history',1}}] )
	    -| ['compiler_generated'] )
	end
'results'/1 =
    %% Line 1486
    fun (_0) ->
	case _0 of
	  <L>
	      when let <_1> =
		    call 'erlang':'is_integer'
			(_0)
		in  let <_2> =
			call 'erlang':'>='
			    (_0, 0)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 1487
	      apply 'set_env'/4
		  ('stdlib', 'shell_saved_results', L, 20)
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'results',1}}] )
	    -| ['compiler_generated'] )
	end
'catch_exception'/1 =
    %% Line 1492
    fun (_0) ->
	%% Line 1493
	apply 'set_env'/4
	    ('stdlib', 'shell_catch_exception', _0, 'false')
'prompt_func'/1 =
    %% Line 1499
    fun (_0) ->
	%% Line 1500
	apply 'set_env'/4
	    ('stdlib', 'shell_prompt_func', _0, 'default')
'strings'/1 =
    %% Line 1506
    fun (_0) ->
	%% Line 1507
	apply 'set_env'/4
	    ('stdlib', 'shell_strings', _0, 'true')
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('shell')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('shell', _0)
end