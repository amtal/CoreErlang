module 'io_lib_format' ['build'/1,
			'build'/2,
			'fwrite'/2,
			'fwrite'/3,
			'fwrite_g'/1,
			'indentation'/2,
			'module_info'/0,
			'module_info'/1,
			'scan'/2,
			'unscan'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[105|[111|[95|[108|[105|[98|[95|[102|[111|[114|[109|[97|[116|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 41
		'spec' =
		    %% Line 41
		    [{{'fwrite',2},[{'type',41,'bounded_fun',[{'type',41,'fun',[{'type',41,'product',[{'var',41,'Format'}|[{'var',41,'Data'}]]}|[{'remote_type',41,[{'atom',41,'io_lib'}|[{'atom',41,'chars'}|[[]]]]}]]}|[[{'type',42,'constraint',[{'atom',42,'is_subtype'}|[[{'var',42,'Format'}|[{'remote_type',42,[{'atom',42,'io'}|[{'atom',42,'format'}|[[]]]]}]]]]}|[{'type',43,'constraint',[{'atom',43,'is_subtype'}|[[{'var',43,'Data'}|[{'type',43,'list',[{'type',43,'term',[]}]}]]]]}]]]]}]}],
		%% Line 48
		'spec' =
		    %% Line 48
		    [{{'fwrite',3},[{'type',48,'bounded_fun',[{'type',48,'fun',[{'type',48,'product',[{'var',48,'Format'}|[{'var',48,'Data'}|[{'var',48,'Options'}]]]}|[{'remote_type',48,[{'atom',48,'io_lib'}|[{'atom',48,'chars'}|[[]]]]}]]}|[[{'type',49,'constraint',[{'atom',49,'is_subtype'}|[[{'var',49,'Format'}|[{'remote_type',49,[{'atom',49,'io'}|[{'atom',49,'format'}|[[]]]]}]]]]}|[{'type',50,'constraint',[{'atom',50,'is_subtype'}|[[{'var',50,'Data'}|[{'type',50,'list',[{'type',50,'term',[]}]}]]]]}|[{'type',51,'constraint',[{'atom',51,'is_subtype'}|[[{'var',51,'Options'}|[{'type',51,'list',[{'var',51,'Option'}]}]]]]}|[{'type',52,'constraint',[{'atom',52,'is_subtype'}|[[{'var',52,'Option'}|[{'type',52,'tuple',[{'atom',52,'chars_limit'}|[{'var',52,'CharsLimit'}]]}]]]]}|[{'type',53,'constraint',[{'atom',53,'is_subtype'}|[[{'var',53,'CharsLimit'}|[{'remote_type',53,[{'atom',53,'io_lib'}|[{'atom',53,'chars_limit'}|[[]]]]}]]]]}]]]]]]]}]}],
		%% Line 60
		'spec' =
		    %% Line 60
		    [{{'build',1},[{'type',60,'bounded_fun',[{'type',60,'fun',[{'type',60,'product',[{'var',60,'FormatList'}]}|[{'remote_type',60,[{'atom',60,'io_lib'}|[{'atom',60,'chars'}|[[]]]]}]]}|[[{'type',61,'constraint',[{'atom',61,'is_subtype'}|[[{'var',61,'FormatList'}|[{'type',61,'list',[{'type',61,'union',[{'type',61,'char',[]}|[{'remote_type',61,[{'atom',61,'io_lib'}|[{'atom',61,'format_spec'}|[[]]]]}]]}]}]]]]}]]]}]}],
		%% Line 66
		'spec' =
		    %% Line 66
		    [{{'build',2},[{'type',66,'bounded_fun',[{'type',66,'fun',[{'type',66,'product',[{'var',66,'FormatList'}|[{'var',66,'Options'}]]}|[{'remote_type',66,[{'atom',66,'io_lib'}|[{'atom',66,'chars'}|[[]]]]}]]}|[[{'type',67,'constraint',[{'atom',67,'is_subtype'}|[[{'var',67,'FormatList'}|[{'type',67,'list',[{'type',67,'union',[{'type',67,'char',[]}|[{'remote_type',67,[{'atom',67,'io_lib'}|[{'atom',67,'format_spec'}|[[]]]]}]]}]}]]]]}|[{'type',68,'constraint',[{'atom',68,'is_subtype'}|[[{'var',68,'Options'}|[{'type',68,'list',[{'var',68,'Option'}]}]]]]}|[{'type',69,'constraint',[{'atom',69,'is_subtype'}|[[{'var',69,'Option'}|[{'type',69,'tuple',[{'atom',69,'chars_limit'}|[{'var',69,'CharsLimit'}]]}]]]]}|[{'type',70,'constraint',[{'atom',70,'is_subtype'}|[[{'var',70,'CharsLimit'}|[{'remote_type',70,[{'atom',70,'io_lib'}|[{'atom',70,'chars_limit'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 86
		'spec' =
		    %% Line 86
		    [{{'scan',2},[{'type',86,'bounded_fun',[{'type',86,'fun',[{'type',86,'product',[{'var',86,'Format'}|[{'var',86,'Data'}]]}|[{'var',86,'FormatList'}]]}|[[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'Format'}|[{'remote_type',87,[{'atom',87,'io'}|[{'atom',87,'format'}|[[]]]]}]]]]}|[{'type',88,'constraint',[{'atom',88,'is_subtype'}|[[{'var',88,'Data'}|[{'type',88,'list',[{'type',88,'term',[]}]}]]]]}|[{'type',89,'constraint',[{'atom',89,'is_subtype'}|[[{'var',89,'FormatList'}|[{'type',89,'list',[{'type',89,'union',[{'type',89,'char',[]}|[{'remote_type',89,[{'atom',89,'io_lib'}|[{'atom',89,'format_spec'}|[[]]]]}]]}]}]]]]}]]]]]}]}],
		%% Line 101
		'spec' =
		    %% Line 101
		    [{{'unscan',1},[{'type',101,'bounded_fun',[{'type',101,'fun',[{'type',101,'product',[{'var',101,'FormatList'}]}|[{'type',101,'tuple',[{'var',101,'Format'}|[{'var',101,'Data'}]]}]]}|[[{'type',102,'constraint',[{'atom',102,'is_subtype'}|[[{'var',102,'FormatList'}|[{'type',102,'list',[{'type',102,'union',[{'type',102,'char',[]}|[{'remote_type',102,[{'atom',102,'io_lib'}|[{'atom',102,'format_spec'}|[[]]]]}]]}]}]]]]}|[{'type',103,'constraint',[{'atom',103,'is_subtype'}|[[{'var',103,'Format'}|[{'remote_type',103,[{'atom',103,'io'}|[{'atom',103,'format'}|[[]]]]}]]]]}|[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'Data'}|[{'type',104,'list',[{'type',104,'term',[]}]}]]]]}]]]]]}]}],
		%% Line 312
		'spec' =
		    %% Line 312
		    [{{'indentation',2},[{'type',312,'bounded_fun',[{'type',312,'fun',[{'type',312,'product',[{'var',312,'String'}|[{'var',312,'StartIndent'}]]}|[{'type',312,'integer',[]}]]}|[[{'type',313,'constraint',[{'atom',313,'is_subtype'}|[[{'var',313,'String'}|[{'remote_type',313,[{'atom',313,'io_lib'}|[{'atom',313,'chars'}|[[]]]]}]]]]}|[{'type',314,'constraint',[{'atom',314,'is_subtype'}|[[{'var',314,'StartIndent'}|[{'type',314,'integer',[]}]]]]}]]]]}]}],
		%% Line 535
		'spec' =
		    %% Line 535
		    [{{'fwrite_g',1},[{'type',535,'fun',[{'type',535,'product',[{'type',535,'float',[]}]}|[{'type',535,'string',[]}]]}]}]]
'fwrite'/2 =
    %% Line 45
    fun (_0,_1) ->
	let <_2> =
	    apply %% Line 46
		  'scan'/2
		(_0, _1)
	in  %% Line 46
	    apply 'build'/1
		(_2)
'fwrite'/3 =
    %% Line 55
    fun (_0,_1,_2) ->
	let <_3> =
	    apply %% Line 56
		  'scan'/2
		(_0, _1)
	in  %% Line 56
	    apply 'build'/2
		(_3, _2)
'build'/1 =
    %% Line 63
    fun (_0) ->
	%% Line 64
	apply 'build'/2
	    (_0, [])
'build'/2 =
    %% Line 72
    fun (_0,_1) ->
	let <CharsLimit> =
	    apply %% Line 73
		  'get_option'/3
		(%% Line 73
		 'chars_limit', _1, %% Line 73
				    -1)
	in  let <Res1> =
		apply %% Line 74
		      'build_small'/1
		    (_0)
	    in  %% Line 75
		case apply 'count_small'/1
			 (Res1) of
		  <{P,S,W,Other}> when 'true' ->
		      let <_6> =
			  call %% Line 76
			       'erlang':%% Line 76
					'+'
			      (%% Line 76
			       P, %% Line 76
				  S)
		      in  %% Line 76
			  case call 'erlang':'+'
				   (_6, W) of
			    %% Line 77
			    <0> when 'true' ->
				%% Line 78
				Res1
			    %% Line 79
			    <NumOfLimited> when 'true' ->
				let <RemainingChars> =
				    apply %% Line 80
					  'sub'/2
					(%% Line 80
					 CharsLimit, %% Line 80
						     Other)
				in  %% Line 81
				    apply 'build_limited'/5
					(Res1, P, NumOfLimited, RemainingChars, 0)
			  end
		  ( <_5> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_5})
		    -| ['compiler_generated'] )
		end
'scan'/2 =
    %% Line 91
    fun (_0,_1) ->
	case <_0,_1> of
	  <Format,Args>
	      when call 'erlang':'is_atom'
		    (Format) ->
	      let <_2> =
		  call %% Line 92
		       'erlang':%% Line 92
				'atom_to_list'
		      (%% Line 92
		       Format)
	      in  %% Line 92
		  apply 'scan'/2
		      (_2, Args)
	  %% Line 93
	  <Format,Args>
	      when call 'erlang':'is_binary'
		    (Format) ->
	      let <_3> =
		  call %% Line 94
		       'erlang':%% Line 94
				'binary_to_list'
		      (%% Line 94
		       Format)
	      in  %% Line 94
		  apply 'scan'/2
		      (_3, Args)
	  %% Line 95
	  <Format,Args> when 'true' ->
	      %% Line 96
	      apply 'collect'/2
		  (Format, Args)
	end
'unscan'/1 =
    %% Line 106
    fun (_0) ->
	let <_2> =
	    apply %% Line 107
		  'print'/1
		(_0)
	in  let <_1> =
		apply %% Line 107
		      'args'/1
		    (_0)
	    in  %% Line 107
		{_2,_1}
'args'/1 =
    %% Line 109
    fun (_0) ->
	case _0 of
	  <[~{'args':=As}~|Cs]> when 'true' ->
	      let <_1> =
		  apply %% Line 110
			'args'/1
		      (%% Line 110
		       Cs)
	      in  %% Line 110
		  call 'erlang':'++'
		      (As, _1)
	  %% Line 111
	  <[_X_C|Cs]> when 'true' ->
	      %% Line 112
	      apply 'args'/1
		  (Cs)
	  %% Line 113
	  <[]> when 'true' ->
	      %% Line 114
	      []
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'args',1}}] )
	    -| ['compiler_generated'] )
	end
'print'/1 =
    %% Line 116
    fun (_0) ->
	case _0 of
	  <[~{'width':=F,'precision':=P,'adjust':=Ad,%% Line 117
						    'encoding':=Encoding,%% Line 117
									 'strings':=Strings,%% Line 117
											    'pad_char':=Pad,'control_char':=C}~|%% Line 117
																Cs]> when 'true' ->
	      let <_2> =
		  apply %% Line 118
			'print'/7
		      (%% Line 118
		       C, %% Line 118
			  F, %% Line 118
			     Ad, %% Line 118
				 P, %% Line 118
				    Pad, %% Line 118
					 Encoding, %% Line 118
						   Strings)
	      in  let <_1> =
		      apply %% Line 118
			    'print'/1
			  (%% Line 118
			   Cs)
		  in  %% Line 118
		      call 'erlang':'++'
			  (_2, _1)
	  %% Line 119
	  <[C|Cs]> when 'true' ->
	      let <_3> =
		  apply %% Line 120
			'print'/1
		      (%% Line 120
		       Cs)
	      in  %% Line 120
		  [C|_3]
	  %% Line 121
	  <[]> when 'true' ->
	      %% Line 122
	      []
	  ( <_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4})
		  -| [{'function_name',{'print',1}}] )
	    -| ['compiler_generated'] )
	end
'print'/7 =
    %% Line 124
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	let <_15> =
	    apply %% Line 125
		  'print_field_width'/2
		(_1, _2)
	in  let <_13> =
		apply %% Line 125
		      'print_precision'/2
		    (_3, _4)
	    in  let <_11> =
		    apply %% Line 126
			  'print_pad_char'/1
			(_4)
		in  let <_9> =
			apply %% Line 126
			      'print_encoding'/1
			    (_5)
		    in  let <_7> =
			    apply %% Line 127
				  'print_strings'/1
				(_6)
			in  let <_8> =
				call %% Line 127
				     'erlang':%% Line 127
					      '++'
				    (_7, %% Line 127
					 [_0|[]])
			    in  let <_10> =
				    call %% Line 126
					 'erlang':%% Line 126
						  '++'
					(_9, _8)
				in  let <_12> =
					call %% Line 126
					     'erlang':%% Line 126
						      '++'
					    (_11, _10)
				    in  let <_14> =
					    call %% Line 125
						 'erlang':%% Line 125
							  '++'
						(_13, _12)
					in  let <_16> =
						call %% Line 125
						     'erlang':%% Line 125
							      '++'
						    (_15, _14)
					    in  %% Line 125
						[126|_16]
'print_field_width'/2 =
    %% Line 129
    fun (_0,_1) ->
	case <_0,_1> of
	  <'none',_X_Ad> when 'true' ->
	      []
	  %% Line 130
	  <F,'left'> when 'true' ->
	      let <_2> =
		  call 'erlang':'-'
		      (F)
	      in  call 'erlang':'integer_to_list'
		      (_2)
	  %% Line 131
	  <F,'right'> when 'true' ->
	      call 'erlang':'integer_to_list'
		  (F)
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'print_field_width',2}}] )
	    -| ['compiler_generated'] )
	end
'print_precision'/2 =
    %% Line 133
    fun (_0,_1) ->
	case <_0,_1> of
	  <'none',32> when 'true' ->
	      []
	  %% Line 134
	  <'none',_X_Pad> when 'true' ->
	      [46]
	  %% Line 135
	  <P,_X_Pad> when 'true' ->
	      let <_2> =
		  call 'erlang':'integer_to_list'
		      (P)
	      in  [46|_2]
	end
'print_pad_char'/1 =
    %% Line 137
    fun (_0) ->
	case _0 of
	  <32> when 'true' ->
	      []
	  %% Line 138
	  <Pad> when 'true' ->
	      [46|[Pad|[]]]
	end
'print_encoding'/1 =
    %% Line 140
    fun (_0) ->
	case _0 of
	  <'unicode'> when 'true' ->
	      [116]
	  %% Line 141
	  <'latin1'> when 'true' ->
	      []
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'print_encoding',1}}] )
	    -| ['compiler_generated'] )
	end
'print_strings'/1 =
    %% Line 143
    fun (_0) ->
	case _0 of
	  <'false'> when 'true' ->
	      [108]
	  %% Line 144
	  <'true'> when 'true' ->
	      []
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'print_strings',1}}] )
	    -| ['compiler_generated'] )
	end
'collect'/2 =
    %% Line 146
    fun (_0,_1) ->
	case <_0,_1> of
	  <[126|Fmt0],Args0> when 'true' ->
	      %% Line 147
	      case apply 'collect_cseq'/2
		       (Fmt0, Args0) of
		<{C,Fmt1,Args1}> when 'true' ->
		    let <_3> =
			apply %% Line 148
			      'collect'/2
			    (%% Line 148
			     Fmt1, %% Line 148
				   Args1)
		    in  %% Line 148
			[C|_3]
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 149
	  <[C|Fmt],Args> when 'true' ->
	      let <_4> =
		  apply %% Line 150
			'collect'/2
		      (%% Line 150
		       Fmt, %% Line 150
			    Args)
	      in  %% Line 150
		  [C|_4]
	  %% Line 151
	  <[],[]> when 'true' ->
	      []
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'collect',2}}] )
	    -| ['compiler_generated'] )
	end
'collect_cseq'/2 =
    %% Line 153
    fun (_0,_1) ->
	%% Line 154
	case apply 'field_width'/2
		 (_0, _1) of
	  <{F,Ad,Fmt1,Args1}> when 'true' ->
	      %% Line 155
	      case apply 'precision'/2
		       (Fmt1, Args1) of
		<{P,Fmt2,Args2}> when 'true' ->
		    %% Line 156
		    case apply 'pad_char'/2
			     (Fmt2, Args2) of
		      <{Pad,Fmt3,Args3}> when 'true' ->
			  let <Spec0> =
			      ~{%% Line 157
			       'width'=>F,%% Line 158
					  'adjust'=>Ad,%% Line 159
						       'precision'=>P,%% Line 160
								      'pad_char'=>Pad,%% Line 161
										      'encoding'=>'latin1',%% Line 162
													   'strings'=>'true'}~
			  in  %% Line 163
			      case apply 'modifiers'/2
				       (Fmt3, Spec0) of
				<{Spec1,Fmt4}> when 'true' ->
				    %% Line 164
				    case apply 'collect_cc'/2
					     (Fmt4, Args3) of
				      <{C,As,Fmt5,Args4}> when 'true' ->
					  %% Line 165
					  case <> of
					    ( <>
						  when call 'erlang':'is_map'
							(Spec1) ->
						  let <_8> =
						      ~{'control_char'=>C,'args'=>As|Spec1}~
						  in  %% Line 166
						      {_8,Fmt5,Args4}
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  ( primop 'match_fail'
							({'badmap',Spec1})
						    -| [{'eval_failure','badmap'}] )
					      -| ['compiler_generated'] )
					  end
				      ( <_7> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_7})
					-| ['compiler_generated'] )
				    end
				( <_6> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_6})
				  -| ['compiler_generated'] )
			      end
		      ( <_4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_4})
			-| ['compiler_generated'] )
		    end
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_2})
	    -| ['compiler_generated'] )
	end
'modifiers'/2 =
    %% Line 168
    fun (_0,_1) ->
	case <_0,_1> of
	  <[116|Fmt],Spec> when 'true' ->
	      %% Line 169
	      case <> of
		( <>
		      when call 'erlang':'is_map'
			    (Spec) ->
		      let <_2> =
			  ~{'encoding'=>'unicode'|Spec}~
		      in  apply 'modifiers'/2
			      (Fmt, _2)
		  -| ['compiler_generated'] )
		( <> when 'true' ->
		      ( primop 'match_fail'
			    ({'badmap',Spec})
			-| [{'eval_failure','badmap'}] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 170
	  <[108|Fmt],Spec> when 'true' ->
	      %% Line 171
	      case <> of
		( <>
		      when call 'erlang':'is_map'
			    (Spec) ->
		      let <_3> =
			  ~{'strings'=>'false'|Spec}~
		      in  apply 'modifiers'/2
			      (Fmt, _3)
		  -| ['compiler_generated'] )
		( <> when 'true' ->
		      ( primop 'match_fail'
			    ({'badmap',Spec})
			-| [{'eval_failure','badmap'}] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 172
	  <Fmt,Spec> when 'true' ->
	      %% Line 173
	      {Spec,Fmt}
	end
'field_width'/2 =
    %% Line 175
    fun (_0,_1) ->
	case <_0,_1> of
	  <[45|Fmt0],Args0> when 'true' ->
	      %% Line 176
	      case apply 'field_value'/2
		       (Fmt0, Args0) of
		<{F,Fmt,Args}> when 'true' ->
		    let <_3> =
			call %% Line 177
			     'erlang':%% Line 177
				      '-'
			    (%% Line 177
			     F)
		    in  %% Line 177
			apply 'field_width'/3
			    (_3, Fmt, Args)
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 178
	  <Fmt0,Args0> when 'true' ->
	      %% Line 179
	      case apply 'field_value'/2
		       (Fmt0, Args0) of
		<{F,Fmt,Args}> when 'true' ->
		    %% Line 180
		    apply 'field_width'/3
			(F, Fmt, Args)
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	end
'field_width'/3 =
    %% Line 182
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <F,Fmt,Args>
	      when call 'erlang':'<'
		    (F,
		     0) ->
	      let <_3> =
		  call %% Line 183
		       'erlang':%% Line 183
				'-'
		      (%% Line 183
		       F)
	      in  %% Line 183
		  {_3,'left',Fmt,Args}
	  %% Line 184
	  <F,Fmt,Args>
	      when call 'erlang':'>='
		    (F,
		     0) ->
	      %% Line 185
	      {F,'right',Fmt,Args}
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'field_width',3}}] )
	    -| ['compiler_generated'] )
	end
'precision'/2 =
    %% Line 187
    fun (_0,_1) ->
	case <_0,_1> of
	  <[46|Fmt],Args> when 'true' ->
	      %% Line 188
	      apply 'field_value'/2
		  (Fmt, Args)
	  %% Line 189
	  <Fmt,Args> when 'true' ->
	      %% Line 190
	      {'none',Fmt,Args}
	end
'field_value'/2 =
    %% Line 192
    fun (_0,_1) ->
	case <_0,_1> of
	  <[42|Fmt],[A|Args]>
	      when call 'erlang':'is_integer'
		    (A) ->
	      %% Line 193
	      {A,Fmt,Args}
	  %% Line 194
	  <_@r0 = [C|Fmt],Args>
	      when try
		    let <_2> =
			call 'erlang':'is_integer'
			    (C)
		    in  let <_3> =
			    call 'erlang':'>='
				(C, 48)
			in  let <_4> =
				call 'erlang':'=<'
				    (C, 57)
			    in  let <_5> =
				    call 'erlang':'and'
					(_3, _4)
				in  call 'erlang':'and'
					(_2, _5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 195
	      apply 'field_value'/3
		  (_@r0, Args, 0)
	  %% Line 196
	  <Fmt,Args> when 'true' ->
	      %% Line 197
	      {'none',Fmt,Args}
	end
'field_value'/3 =
    %% Line 199
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[C|Fmt],Args,F>
	      when try
		    let <_3> =
			call 'erlang':'is_integer'
			    (C)
		    in  let <_4> =
			    call 'erlang':'>='
				(C, 48)
			in  let <_5> =
				call 'erlang':'=<'
				    (C, 57)
			    in  let <_6> =
				    call 'erlang':'and'
					(_4, _5)
				in  call 'erlang':'and'
					(_3, _6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_8> =
		  call %% Line 200
		       'erlang':%% Line 200
				'*'
		      (%% Line 200
		       10, %% Line 200
			   F)
	      in  let <_7> =
		      call %% Line 200
			   'erlang':%% Line 200
				    '-'
			  (%% Line 200
			   C, %% Line 200
			      48)
		  in  let <_9> =
			  call %% Line 200
			       'erlang':%% Line 200
					'+'
			      (_8, _7)
		      in  %% Line 200
			  apply 'field_value'/3
			      (Fmt, Args, _9)
	  %% Line 201
	  <Fmt,Args,F> when 'true' ->
	      %% Line 202
	      {F,Fmt,Args}
	end
'pad_char'/2 =
    %% Line 204
    fun (_0,_1) ->
	case <_0,_1> of
	  <[46|[42|Fmt]],[Pad|Args]> when 'true' ->
	      {Pad,Fmt,Args}
	  %% Line 205
	  <[46|[Pad|Fmt]],Args> when 'true' ->
	      {Pad,Fmt,Args}
	  %% Line 206
	  <Fmt,Args> when 'true' ->
	      {32,Fmt,Args}
	end
'collect_cc'/2 =
    %% Line 213
    fun (_0,_1) ->
	case <_0,_1> of
	  <[119|Fmt],[A|Args]> when 'true' ->
	      {119,[A|[]],Fmt,Args}
	  %% Line 214
	  <[112|Fmt],[A|Args]> when 'true' ->
	      {112,[A|[]],Fmt,Args}
	  %% Line 215
	  <[87|Fmt],[A|[Depth|Args]]> when 'true' ->
	      {87,[A|[Depth|[]]],Fmt,Args}
	  %% Line 216
	  <[80|Fmt],[A|[Depth|Args]]> when 'true' ->
	      {80,[A|[Depth|[]]],Fmt,Args}
	  %% Line 217
	  <[115|Fmt],[A|Args]> when 'true' ->
	      {115,[A|[]],Fmt,Args}
	  %% Line 218
	  <[101|Fmt],[A|Args]> when 'true' ->
	      {101,[A|[]],Fmt,Args}
	  %% Line 219
	  <[102|Fmt],[A|Args]> when 'true' ->
	      {102,[A|[]],Fmt,Args}
	  %% Line 220
	  <[103|Fmt],[A|Args]> when 'true' ->
	      {103,[A|[]],Fmt,Args}
	  %% Line 221
	  <[98|Fmt],[A|Args]> when 'true' ->
	      {98,[A|[]],Fmt,Args}
	  %% Line 222
	  <[66|Fmt],[A|Args]> when 'true' ->
	      {66,[A|[]],Fmt,Args}
	  %% Line 223
	  <[120|Fmt],[A|[Prefix|Args]]> when 'true' ->
	      {120,[A|[Prefix|[]]],Fmt,Args}
	  %% Line 224
	  <[88|Fmt],[A|[Prefix|Args]]> when 'true' ->
	      {88,[A|[Prefix|[]]],Fmt,Args}
	  %% Line 225
	  <[43|Fmt],[A|Args]> when 'true' ->
	      {43,[A|[]],Fmt,Args}
	  %% Line 226
	  <[35|Fmt],[A|Args]> when 'true' ->
	      {35,[A|[]],Fmt,Args}
	  %% Line 227
	  <[99|Fmt],[A|Args]> when 'true' ->
	      {99,[A|[]],Fmt,Args}
	  %% Line 228
	  <[126|Fmt],Args>
	      when call 'erlang':'is_list'
		    (Args) ->
	      {126,[],Fmt,Args}
	  %% Line 229
	  <[110|Fmt],Args>
	      when call 'erlang':'is_list'
		    (Args) ->
	      {110,[],Fmt,Args}
	  %% Line 230
	  <[105|Fmt],[A|Args]> when 'true' ->
	      {105,[A|[]],Fmt,Args}
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'collect_cc',2}}] )
	    -| ['compiler_generated'] )
	end
'count_small'/1 =
    %% Line 236
    fun (_0) ->
	%% Line 237
	apply 'count_small'/2
	    (_0, ~{'other'=>0,'p'=>0,'s'=>0,'w'=>0}~)
'count_small'/2 =
    %% Line 239
    fun (_0,_1) ->
	case <_0,_1> of
	  <[~{'control_char':=112}~|Cs],Cnts = ~{'p':=P}~> when 'true' ->
	      let <_2> =
		  call %% Line 240
		       'erlang':%% Line 240
				'+'
		      (%% Line 240
		       P, %% Line 240
			  1)
	      in  %% Line 240
		  case <> of
		    ( <>
			  when call 'erlang':'is_map'
				(Cnts) ->
			  let <_3> =
			      ~{'p':=_2|Cnts}~
			  in  apply 'count_small'/2
				  (Cs, _3)
		      -| ['compiler_generated'] )
		    ( <> when 'true' ->
			  ( primop 'match_fail'
				({'badmap',Cnts})
			    -| [{'eval_failure','badmap'}] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 241
	  <[~{'control_char':=80}~|Cs],Cnts = ~{'p':=P}~> when 'true' ->
	      let <_4> =
		  call %% Line 242
		       'erlang':%% Line 242
				'+'
		      (%% Line 242
		       P, %% Line 242
			  1)
	      in  %% Line 242
		  case <> of
		    ( <>
			  when call 'erlang':'is_map'
				(Cnts) ->
			  let <_5> =
			      ~{'p':=_4|Cnts}~
			  in  apply 'count_small'/2
				  (Cs, _5)
		      -| ['compiler_generated'] )
		    ( <> when 'true' ->
			  ( primop 'match_fail'
				({'badmap',Cnts})
			    -| [{'eval_failure','badmap'}] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 243
	  <[~{'control_char':=119}~|Cs],Cnts = ~{'w':=W}~> when 'true' ->
	      let <_6> =
		  call %% Line 244
		       'erlang':%% Line 244
				'+'
		      (%% Line 244
		       W, %% Line 244
			  1)
	      in  %% Line 244
		  case <> of
		    ( <>
			  when call 'erlang':'is_map'
				(Cnts) ->
			  let <_7> =
			      ~{'w':=_6|Cnts}~
			  in  apply 'count_small'/2
				  (Cs, _7)
		      -| ['compiler_generated'] )
		    ( <> when 'true' ->
			  ( primop 'match_fail'
				({'badmap',Cnts})
			    -| [{'eval_failure','badmap'}] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 245
	  <[~{'control_char':=87}~|Cs],Cnts = ~{'w':=W}~> when 'true' ->
	      let <_8> =
		  call %% Line 246
		       'erlang':%% Line 246
				'+'
		      (%% Line 246
		       W, %% Line 246
			  1)
	      in  %% Line 246
		  case <> of
		    ( <>
			  when call 'erlang':'is_map'
				(Cnts) ->
			  let <_9> =
			      ~{'w':=_8|Cnts}~
			  in  apply 'count_small'/2
				  (Cs, _9)
		      -| ['compiler_generated'] )
		    ( <> when 'true' ->
			  ( primop 'match_fail'
				({'badmap',Cnts})
			    -| [{'eval_failure','badmap'}] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 247
	  <[~{'control_char':=115}~|Cs],Cnts = ~{'w':=W}~> when 'true' ->
	      let <_10> =
		  call %% Line 248
		       'erlang':%% Line 248
				'+'
		      (%% Line 248
		       W, %% Line 248
			  1)
	      in  %% Line 248
		  case <> of
		    ( <>
			  when call 'erlang':'is_map'
				(Cnts) ->
			  let <_11> =
			      ~{'w':=_10|Cnts}~
			  in  apply 'count_small'/2
				  (Cs, _11)
		      -| ['compiler_generated'] )
		    ( <> when 'true' ->
			  ( primop 'match_fail'
				({'badmap',Cnts})
			    -| [{'eval_failure','badmap'}] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 249
	  <[S|Cs],Cnts = ~{'other':=Other}~>
	      when let <_12> =
		    call 'erlang':'is_list'
			(S)
		in  let <_13> =
			call %% Line 250
			     'erlang':%% Line 250
				      'is_binary'
			    (%% Line 250
			     S)
		    in  call 'erlang':'or'
			    (_12, _13) ->
	      let <_14> =
		  call %% Line 251
		       'io_lib':%% Line 251
				'chars_length'
		      (%% Line 251
		       S)
	      in  let <_15> =
		      call %% Line 251
			   'erlang':%% Line 251
				    '+'
			  (%% Line 251
			   Other, _14)
		  in  %% Line 251
		      case <> of
			( <>
			      when call 'erlang':'is_map'
				    (Cnts) ->
			      let <_16> =
				  ~{'other':=_15|Cnts}~
			      in  apply 'count_small'/2
				      (Cs, _16)
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      ( primop 'match_fail'
				    ({'badmap',Cnts})
				-| [{'eval_failure','badmap'}] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 252
	  <[C|Cs],Cnts = ~{'other':=Other}~>
	      when call 'erlang':'is_integer'
		    (C) ->
	      let <_17> =
		  call %% Line 253
		       'erlang':%% Line 253
				'+'
		      (%% Line 253
		       Other, %% Line 253
			      1)
	      in  %% Line 253
		  case <> of
		    ( <>
			  when call 'erlang':'is_map'
				(Cnts) ->
			  let <_18> =
			      ~{'other':=_17|Cnts}~
			  in  apply 'count_small'/2
				  (Cs, _18)
		      -| ['compiler_generated'] )
		    ( <> when 'true' ->
			  ( primop 'match_fail'
				({'badmap',Cnts})
			    -| [{'eval_failure','badmap'}] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 254
	  <[],~{'w':=W,'p':=P,'s':=S,'other':=Other}~> when 'true' ->
	      %% Line 255
	      {P,S,W,Other}
	  ( <_20,_19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_20,_19})
		  -| [{'function_name',{'count_small',2}}] )
	    -| ['compiler_generated'] )
	end
'build_small'/1 =
    %% Line 266
    fun (_0) ->
	case _0 of
	  <[%% Line 267
	    CC = ~{'width':=F,%% Line 267
			     'precision':=P,'adjust':=Ad,%% Line 267
							 'encoding':=Enc,'args':=As,%% Line 267
										    'pad_char':=Pad,'control_char':=C}~|%% Line 267
															Cs]> when 'true' ->
	      %% Line 268
	      case apply 'control_small'/7
		       (C, As, F, Ad, P, Pad, Enc) of
		%% Line 269
		<'not_small'> when 'true' ->
		    let <_1> =
			apply 'build_small'/1
			    (Cs)
		    in  [CC|_1]
		%% Line 270
		<S> when 'true' ->
		    let <_3> =
			call 'lists':'flatten'
			    (S)
		    in  let <_2> =
			    apply 'build_small'/1
				(Cs)
			in  call 'erlang':'++'
				(_3, _2)
	      end
	  %% Line 272
	  <[C|Cs]> when 'true' ->
	      let <_5> =
		  apply 'build_small'/1
		      (Cs)
	      in  [C|_5]
	  %% Line 273
	  <[]> when 'true' ->
	      []
	  ( <_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6})
		  -| [{'function_name',{'build_small',1}}] )
	    -| ['compiler_generated'] )
	end
'build_limited'/5 =
    %% Line 275
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <[~{'width':=F,%% Line 276
			'precision':=P,'adjust':=Ad,%% Line 276
						    'encoding':=Enc,%% Line 277
								    'strings':=Str,'args':=As,%% Line 276
											      'pad_char':=Pad,'control_char':=C}~|%% Line 277
																  Cs],%% Line 277
																      NumOfPs0,%% Line 277
																	       Count0,%% Line 277
																		      MaxLen0,%% Line 277
																			      I> when 'true' ->
	      let <_5> =
		  case <> of
		    %% Line 279
		    <>
			when call 'erlang':'<'
			      (MaxLen0,
			       0) ->
			MaxLen0
		    %% Line 280
		    <> when 'true' ->
			call 'erlang':'div'
			    (MaxLen0, Count0)
		  end
	      in  let <S> =
		      apply %% Line 282
			    'control_limited'/10
			  (%% Line 282
			   C, %% Line 282
			      As, %% Line 282
				  F, %% Line 282
				     Ad, %% Line 282
					 P, %% Line 282
					    Pad, %% Line 282
						 Enc, %% Line 282
						      Str, _5, %% Line 282
							       I)
		  in  let <NumOfPs> =
			  apply %% Line 283
				'decr_pc'/2
			      (%% Line 283
			       C, %% Line 283
				  NumOfPs0)
		      in  let <Count> =
			      call %% Line 284
				   'erlang':%% Line 284
					    '-'
				  (%% Line 284
				   Count0, %% Line 284
					   1)
			  in  let <_11> =
				  case <> of
				    %% Line 286
				    <>
					when call 'erlang':'<'
					      (MaxLen0,
					       0) ->
					%% Line 287
					MaxLen0
				    %% Line 288
				    <> when 'true' ->
					let <Len> =
					    call %% Line 289
						 'io_lib':%% Line 289
							  'chars_length'
						(%% Line 289
						 S)
					in  %% Line 290
					    apply 'sub'/2
						(MaxLen0, Len)
				  end
			      in  %% Line 292
				  case <> of
				    %% Line 293
				    <>
					when call 'erlang':'>'
					      (NumOfPs,
					       0) ->
					let <_13> =
					    apply %% Line 294
						  'indentation'/2
						(%% Line 294
						 S, %% Line 294
						    I)
					in  let <_14> =
						apply 'build_limited'/5
						    (Cs, NumOfPs, Count, _11, _13)
					    in  [S|_14]
				    %% Line 295
				    <> when 'true' ->
					let <_15> =
					    apply 'build_limited'/5
						(Cs, NumOfPs, Count, _11, I)
					in  [S|_15]
				  end
	  %% Line 297
	  <[10|Cs],NumOfPs,Count,MaxLen,_X_I> when 'true' ->
	      let <_16> =
		  apply %% Line 298
			'build_limited'/5
		      (%% Line 298
		       Cs, %% Line 298
			   NumOfPs, %% Line 298
				    Count, %% Line 298
					   MaxLen, %% Line 298
						   0)
	      in  %% Line 298
		  [10|_16]
	  %% Line 299
	  <[9|Cs],NumOfPs,Count,MaxLen,I> when 'true' ->
	      let <_17> =
		  call %% Line 300
		       'erlang':%% Line 300
				'+'
		      (%% Line 300
		       I, %% Line 300
			  8)
	      in  let <_18> =
		      call %% Line 300
			   'erlang':%% Line 300
				    'div'
			  (_17, %% Line 300
				8)
		  in  let <_19> =
			  call %% Line 300
			       'erlang':%% Line 300
					'*'
			      (_18, %% Line 300
				    8)
		      in  let <_20> =
			      apply %% Line 300
				    'build_limited'/5
				  (%% Line 300
				   Cs, %% Line 300
				       NumOfPs, %% Line 300
						Count, %% Line 300
						       MaxLen, _19)
			  in  %% Line 300
			      [9|_20]
	  %% Line 301
	  <[C|Cs],NumOfPs,Count,MaxLen,I> when 'true' ->
	      let <_21> =
		  call %% Line 302
		       'erlang':%% Line 302
				'+'
		      (%% Line 302
		       I, %% Line 302
			  1)
	      in  let <_22> =
		      apply %% Line 302
			    'build_limited'/5
			  (%% Line 302
			   Cs, %% Line 302
			       NumOfPs, %% Line 302
					Count, %% Line 302
					       MaxLen, _21)
		  in  %% Line 302
		      [C|_22]
	  %% Line 303
	  <[],_28,_29,_30,_31> when 'true' ->
	      []
	  ( <_27,_26,_25,_24,_23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_27,_26,_25,_24,_23})
		  -| [{'function_name',{'build_limited',5}}] )
	    -| ['compiler_generated'] )
	end
'decr_pc'/2 =
    %% Line 305
    fun (_0,_1) ->
	case <_0,_1> of
	  <112,Pc> when 'true' ->
	      call 'erlang':'-'
		  (Pc, 1)
	  %% Line 306
	  <80,Pc> when 'true' ->
	      call 'erlang':'-'
		  (Pc, 1)
	  %% Line 307
	  <_4,Pc> when 'true' ->
	      Pc
	end
'indentation'/2 =
    %% Line 316
    fun (_0,_1) ->
	case <_0,_1> of
	  <[10|Cs],_X_I> when 'true' ->
	      apply 'indentation'/2
		  (Cs, 0)
	  %% Line 317
	  <[9|Cs],I> when 'true' ->
	      let <_2> =
		  call 'erlang':'+'
		      (I, 8)
	      in  let <_3> =
		      call 'erlang':'div'
			  (_2, 8)
		  in  let <_4> =
			  call 'erlang':'*'
			      (_3, 8)
		      in  apply 'indentation'/2
			      (Cs, _4)
	  %% Line 318
	  <[C|Cs],I>
	      when call 'erlang':'is_integer'
		    (C) ->
	      let <_5> =
		  call %% Line 319
		       'erlang':%% Line 319
				'+'
		      (%% Line 319
		       I, %% Line 319
			  1)
	      in  %% Line 319
		  apply 'indentation'/2
		      (Cs, _5)
	  %% Line 320
	  <[C|Cs],I> when 'true' ->
	      let <_6> =
		  apply %% Line 321
			'indentation'/2
		      (%% Line 321
		       C, %% Line 321
			  I)
	      in  %% Line 321
		  apply 'indentation'/2
		      (Cs, _6)
	  %% Line 322
	  <[],I> when 'true' ->
	      I
	  ( <_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7})
		  -| [{'function_name',{'indentation',2}}] )
	    -| ['compiler_generated'] )
	end
'control_small'/7 =
    %% Line 330
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <115,[A|[]],F,Adj,P,Pad,Enc = 'latin1'>
	      when call 'erlang':'is_atom'
		    (A) ->
	      let <_7> =
		  call %% Line 331
		       'erlang':%% Line 331
				'atom_to_list'
		      (%% Line 331
		       A)
	      in  let <L> =
		      apply %% Line 331
			    'iolist_to_chars'/1
			  (_7)
		  in  %% Line 332
		      apply 'string'/6
			  (L, F, Adj, P, Pad, Enc)
	  %% Line 333
	  <115,[A|[]],F,Adj,P,Pad,Enc = 'unicode'>
	      when call 'erlang':'is_atom'
		    (A) ->
	      let <_9> =
		  call %% Line 334
		       'erlang':%% Line 334
				'atom_to_list'
		      (%% Line 334
		       A)
	      in  %% Line 334
		  apply 'string'/6
		      (_9, F, Adj, P, Pad, Enc)
	  %% Line 335
	  <101,[A|[]],F,Adj,P,Pad,_X_Enc>
	      when call 'erlang':'is_float'
		    (A) ->
	      %% Line 336
	      apply 'fwrite_e'/5
		  (A, F, Adj, P, Pad)
	  %% Line 337
	  <102,[A|[]],F,Adj,P,Pad,_X_Enc>
	      when call 'erlang':'is_float'
		    (A) ->
	      %% Line 338
	      apply 'fwrite_f'/5
		  (A, F, Adj, P, Pad)
	  %% Line 339
	  <103,[A|[]],F,Adj,P,Pad,_X_Enc>
	      when call 'erlang':'is_float'
		    (A) ->
	      %% Line 340
	      apply 'fwrite_g'/5
		  (A, F, Adj, P, Pad)
	  %% Line 341
	  <98,[A|[]],F,Adj,P,Pad,_X_Enc>
	      when call 'erlang':'is_integer'
		    (A) ->
	      let <_10> =
		  apply %% Line 342
			'base'/1
		      (%% Line 342
		       P)
	      in  %% Line 342
		  apply 'unprefixed_integer'/6
		      (A, F, Adj, _10, Pad, 'true')
	  %% Line 343
	  <66,[A|[]],F,Adj,P,Pad,_X_Enc>
	      when call 'erlang':'is_integer'
		    (A) ->
	      let <_11> =
		  apply %% Line 344
			'base'/1
		      (%% Line 344
		       P)
	      in  %% Line 344
		  apply 'unprefixed_integer'/6
		      (A, F, Adj, _11, Pad, 'false')
	  %% Line 345
	  <120,[A|[Prefix|[]]],F,Adj,P,Pad,_X_Enc>
	      when let <_12> =
		    call 'erlang':'is_integer'
			(A)
		in  let <_13> =
			call %% Line 346
			     'erlang':%% Line 346
				      'is_atom'
			    (%% Line 346
			     Prefix)
		    in  call 'erlang':'and'
			    (_12, _13) ->
	      let <_15> =
		  apply %% Line 347
			'base'/1
		      (%% Line 347
		       P)
	      in  let <_14> =
		      call %% Line 347
			   'erlang':%% Line 347
				    'atom_to_list'
			  (%% Line 347
			   Prefix)
		  in  %% Line 347
		      apply 'prefixed_integer'/7
			  (A, F, Adj, _15, Pad, _14, 'true')
	  %% Line 348
	  <120,[A|[Prefix|[]]],F,Adj,P,Pad,_X_Enc>
	      when call 'erlang':'is_integer'
		    (A) ->
	      %% Line 349
	      case call 'io_lib':'deep_char_list'
		       (Prefix) of
		<'true'> when 'true' ->
		    let <_17> =
			apply %% Line 350
			      'base'/1
			    (%% Line 350
			     P)
		    in  %% Line 350
			apply 'prefixed_integer'/7
			    (A, F, Adj, _17, Pad, Prefix, 'true')
		( <_16> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_16})
		  -| ['compiler_generated'] )
	      end
	  %% Line 351
	  <88,[A|[Prefix|[]]],F,Adj,P,Pad,_X_Enc>
	      when let <_18> =
		    call 'erlang':'is_integer'
			(A)
		in  let <_19> =
			call %% Line 352
			     'erlang':%% Line 352
				      'is_atom'
			    (%% Line 352
			     Prefix)
		    in  call 'erlang':'and'
			    (_18, _19) ->
	      let <_21> =
		  apply %% Line 353
			'base'/1
		      (%% Line 353
		       P)
	      in  let <_20> =
		      call %% Line 353
			   'erlang':%% Line 353
				    'atom_to_list'
			  (%% Line 353
			   Prefix)
		  in  %% Line 353
		      apply 'prefixed_integer'/7
			  (A, F, Adj, _21, Pad, _20, 'false')
	  %% Line 354
	  <88,[A|[Prefix|[]]],F,Adj,P,Pad,_X_Enc>
	      when call 'erlang':'is_integer'
		    (A) ->
	      %% Line 355
	      case call 'io_lib':'deep_char_list'
		       (Prefix) of
		<'true'> when 'true' ->
		    let <_23> =
			apply %% Line 356
			      'base'/1
			    (%% Line 356
			     P)
		    in  %% Line 356
			apply 'prefixed_integer'/7
			    (A, F, Adj, _23, Pad, Prefix, 'false')
		( <_22> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_22})
		  -| ['compiler_generated'] )
	      end
	  %% Line 357
	  <43,[A|[]],F,Adj,P,Pad,_X_Enc>
	      when call 'erlang':'is_integer'
		    (A) ->
	      let <Base> =
		  apply %% Line 358
			'base'/1
		      (%% Line 358
		       P)
	      in  let <_25> =
		      call %% Line 359
			   'erlang':%% Line 359
				    'integer_to_list'
			  (%% Line 359
			   Base)
		  in  let <Prefix> =
			  [_25|%% Line 359
			       [35]]
		      in  %% Line 360
			  apply 'prefixed_integer'/7
			      (A, F, Adj, Base, Pad, Prefix, 'true')
	  %% Line 361
	  <35,[A|[]],F,Adj,P,Pad,_X_Enc>
	      when call 'erlang':'is_integer'
		    (A) ->
	      let <Base> =
		  apply %% Line 362
			'base'/1
		      (%% Line 362
		       P)
	      in  let <_28> =
		      call %% Line 363
			   'erlang':%% Line 363
				    'integer_to_list'
			  (%% Line 363
			   Base)
		  in  let <Prefix> =
			  [_28|%% Line 363
			       [35]]
		      in  %% Line 364
			  apply 'prefixed_integer'/7
			      (A, F, Adj, Base, Pad, Prefix, 'false')
	  %% Line 365
	  <99,[A|[]],F,Adj,P,Pad,'unicode'>
	      when call 'erlang':'is_integer'
		    (A) ->
	      %% Line 366
	      apply 'char'/5
		  (A, F, Adj, P, Pad)
	  %% Line 367
	  <99,[A|[]],F,Adj,P,Pad,_X_Enc>
	      when call 'erlang':'is_integer'
		    (A) ->
	      let <_30> =
		  call %% Line 368
		       'erlang':%% Line 368
				'band'
		      (%% Line 368
		       A, %% Line 368
			  255)
	      in  %% Line 368
		  apply 'char'/5
		      (_30, F, Adj, P, Pad)
	  %% Line 369
	  <126,[],F,Adj,P,Pad,_X_Enc> when 'true' ->
	      apply 'char'/5
		  (126, F, Adj, P, Pad)
	  %% Line 370
	  <110,[],F,Adj,P,Pad,_X_Enc> when 'true' ->
	      apply 'newline'/4
		  (F, Adj, P, Pad)
	  %% Line 371
	  <105,[_X_A|[]],_X_F,_X_Adj,_X_P,_X_Pad,_X_Enc> when 'true' ->
	      []
	  %% Line 372
	  <_X_C,_X_As,_X_F,_X_Adj,_X_P,_X_Pad,_X_Enc> when 'true' ->
	      'not_small'
	end
'control_limited'/10 =
    %% Line 374
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9> of
	  <115,[L0|[]],F,Adj,P,Pad,Enc = 'latin1',_X_Str,CL,_X_I> when 'true' ->
	      let <L> =
		  apply %% Line 375
			'iolist_to_chars'/3
		      (%% Line 375
		       L0, %% Line 375
			   F, %% Line 375
			      CL)
	      in  let <_11> =
		      apply %% Line 376
			    'limit_field'/2
			  (%% Line 376
			   F, %% Line 376
			      CL)
		  in  %% Line 376
		      apply 'string'/6
			  (L, _11, Adj, P, Pad, Enc)
	  %% Line 377
	  <115,[L0|[]],F,Adj,P,Pad,Enc = 'unicode',_X_Str,CL,_X_I> when 'true' ->
	      let <L> =
		  apply %% Line 378
			'cdata_to_chars'/3
		      (%% Line 378
		       L0, %% Line 378
			   F, %% Line 378
			      CL)
	      in  let <_13> =
		      apply %% Line 379
			    'limit_field'/2
			  (%% Line 379
			   F, %% Line 379
			      CL)
		  in  let <_14> =
			  apply %% Line 379
				'string'/6
			      (%% Line 379
			       L, _13, %% Line 379
				       Adj, %% Line 379
					    P, %% Line 379
					       Pad, %% Line 379
						    Enc)
		      in  %% Line 379
			  apply 'uniconv'/1
			      (_14)
	  %% Line 380
	  <119,[A|[]],F,Adj,P,Pad,Enc,_X_Str,CL,_X_I> when 'true' ->
	      let <Chars> =
		  call %% Line 381
		       'io_lib':%% Line 381
				'write'
		      (%% Line 381
		       A, %% Line 381
			  [{'depth',-1}|[{'encoding',Enc}|[{'chars_limit',CL}|[]]]])
	      in  %% Line 382
		  apply 'term'/5
		      (Chars, F, Adj, P, Pad)
	  %% Line 383
	  <112,[A|[]],F,Adj,P,Pad,Enc,Str,CL,I> when 'true' ->
	      %% Line 384
	      apply 'print'/10
		  (A, -1, F, Adj, P, Pad, Enc, Str, CL, I)
	  %% Line 385
	  <87,[A|[Depth|[]]],F,Adj,P,Pad,Enc,_X_Str,CL,_X_I>
	      when %% Line 386
		call 'erlang':'is_integer'
		    (Depth) ->
	      let <Chars> =
		  call %% Line 387
		       'io_lib':%% Line 387
				'write'
		      (%% Line 387
		       A, %% Line 387
			  [{'depth',Depth}|[{'encoding',Enc}|[{'chars_limit',CL}|[]]]])
	      in  %% Line 388
		  apply 'term'/5
		      (Chars, F, Adj, P, Pad)
	  %% Line 389
	  <80,[A|[Depth|[]]],F,Adj,P,Pad,Enc,Str,CL,I>
	      when %% Line 390
		call 'erlang':'is_integer'
		    (Depth) ->
	      %% Line 391
	      apply 'print'/10
		  (A, Depth, F, Adj, P, Pad, Enc, Str, CL, I)
	  ( <_28,_27,_26,_25,_24,_23,_22,_21,_20,_19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_28,_27,_26,_25,_24,_23,_22,_21,_20,_19})
		  -| [{'function_name',{'control_limited',10}}] )
	    -| ['compiler_generated'] )
	end
'uniconv'/1 =
    %% Line 397
    fun (_0) ->
	_0
'base'/1 =
    %% Line 401
    fun (_0) ->
	case _0 of
	  <'none'> when 'true' ->
	      %% Line 402
	      10
	  %% Line 403
	  <B>
	      when call 'erlang':'is_integer'
		    (_0) ->
	      %% Line 404
	      B
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'base',1}}] )
	    -| ['compiler_generated'] )
	end
'term'/5 =
    %% Line 411
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <T,'none',_X_Adj,'none',_X_Pad> when 'true' ->
	      T
	  %% Line 412
	  <T,'none',Adj,P,Pad> when 'true' ->
	      apply 'term'/5
		  (T, P, Adj, P, Pad)
	  %% Line 413
	  <T,F,Adj,P0,Pad> when 'true' ->
	      let <L> =
		  call %% Line 414
		       'io_lib':%% Line 414
				'chars_length'
		      (%% Line 414
		       T)
	      in  let <_7> =
		      case %% Line 415
			   P0 of
			%% Line 415
			<'none'> when 'true' ->
			    F
			%% Line 415
			<_19> when 'true' ->
			    call 'erlang':'min'
				(P0, F)
		      end
		  in  let <P> =
			  call %% Line 415
			       'erlang':%% Line 415
					'min'
			      (%% Line 415
			       L, _7)
		      in  %% Line 416
			  case <> of
			    %% Line 417
			    <>
				when call 'erlang':'>'
				      (L,
				       P) ->
				let <_11> =
				    apply %% Line 418
					  'chars'/2
					(%% Line 418
					 42, %% Line 418
					     P)
				in  let <_9> =
					call %% Line 418
					     'erlang':%% Line 418
						      '-'
					    (%% Line 418
					     F, %% Line 418
						P)
				    in  let <_10> =
					    apply %% Line 418
						  'chars'/2
						(%% Line 418
						 Pad, _9)
					in  %% Line 418
					    apply 'adjust'/3
						(_11, _10, Adj)
			    %% Line 419
			    <>
				when call 'erlang':'>='
				      (F,
				       P) ->
				let <_12> =
				    call %% Line 420
					 'erlang':%% Line 420
						  '-'
					(%% Line 420
					 F, %% Line 420
					    L)
				in  let <_13> =
					apply %% Line 420
					      'chars'/2
					    (%% Line 420
					     Pad, _12)
				    in  %% Line 420
					apply 'adjust'/3
					    (T, _13, Adj)
			    ( <> when 'true' ->
				  primop 'match_fail'
				      ('if_clause')
			      -| ['compiler_generated'] )
			  end
	end
'print'/10 =
    %% Line 428
    fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9> of
	  <T,D,'none',Adj,P,Pad,E,Str,ChLim,I> when 'true' ->
	      %% Line 429
	      apply 'print'/10
		  (T, D, 80, Adj, P, Pad, E, Str, ChLim, I)
	  %% Line 430
	  <T,D,F,Adj,'none',Pad,E,Str,ChLim,I> when 'true' ->
	      let <_10> =
		  call %% Line 431
		       'erlang':%% Line 431
				'+'
		      (%% Line 431
		       I, %% Line 431
			  1)
	      in  %% Line 431
		  apply 'print'/10
		      (T, D, F, Adj, _10, Pad, E, Str, ChLim, I)
	  %% Line 432
	  <T,D,F,'right',P,_X_Pad,Enc,Str,ChLim,_X_I> when 'true' ->
	      let <Options> =
		  [%% Line 433
		   {'chars_limit',ChLim}|%% Line 434
					 [{'column',P}|%% Line 435
						       [{'line_length',F}|%% Line 436
									  [{'depth',D}|%% Line 437
										       [{'encoding',Enc}|%% Line 438
													 [{'strings',Str}|[]]]]]]]
	      in  %% Line 439
		  call 'io_lib_pretty':'print'
		      (T, Options)
	  ( <_21,_20,_19,_18,_17,_16,_15,_14,_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_21,_20,_19,_18,_17,_16,_15,_14,_13,_12})
		  -| [{'function_name',{'print',10}}] )
	    -| ['compiler_generated'] )
	end
'fwrite_e'/5 =
    %% Line 443
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <Fl,'none',Adj,'none',Pad> when 'true' ->
	      %% Line 444
	      apply 'fwrite_e'/5
		  (Fl, 'none', Adj, 6, Pad)
	  %% Line 445
	  <Fl,'none',_X_Adj,P,_X_Pad>
	      when call 'erlang':'>='
		    (P,
		     2) ->
	      let <_5> =
		  apply %% Line 446
			'float_data'/1
		      (%% Line 446
		       Fl)
	      in  %% Line 446
		  apply 'float_e'/3
		      (Fl, _5, P)
	  %% Line 447
	  <Fl,F,Adj,'none',Pad> when 'true' ->
	      %% Line 448
	      apply 'fwrite_e'/5
		  (Fl, F, Adj, 6, Pad)
	  %% Line 449
	  <Fl,F,Adj,P,Pad>
	      when call 'erlang':'>='
		    (P,
		     2) ->
	      let <_6> =
		  apply %% Line 450
			'float_data'/1
		      (%% Line 450
		       Fl)
	      in  let <_7> =
		      apply %% Line 450
			    'float_e'/3
			  (%% Line 450
			   Fl, _6, %% Line 450
				   P)
		  in  %% Line 450
		      apply 'term'/5
			  (_7, F, Adj, F, Pad)
	  ( <_12,_11,_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11,_10,_9,_8})
		  -| [{'function_name',{'fwrite_e',5}}] )
	    -| ['compiler_generated'] )
	end
'float_e'/3 =
    %% Line 452
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Fl,Fd,P>
	      when call 'erlang':'<'
		    (Fl,
		     0.00000000000000000000e+00) ->
	      let <_3> =
		  call %% Line 453
		       'erlang':%% Line 453
				'-'
		      (%% Line 453
		       Fl)
	      in  let <_4> =
		      apply %% Line 453
			    'float_e'/3
			  (_3, %% Line 453
			       Fd, %% Line 453
				   P)
		  in  %% Line 453
		      [45|_4]
	  %% Line 454
	  <_X_Fl,{Ds,E},P> when 'true' ->
	      let <_5> =
		  call %% Line 455
		       'erlang':%% Line 455
				'-'
		      (%% Line 455
		       P, %% Line 455
			  1)
	      in  %% Line 455
		  case apply 'float_man'/3
			   (Ds, 1, _5) of
		    %% Line 456
		    <{[48|Fs],'true'}> when 'true' ->
			let <_6> =
			    apply 'float_exp'/1
				(E)
			in  [[49|Fs]|_6]
		    %% Line 457
		    <{Fs,'false'}> when 'true' ->
			let <_7> =
			    call 'erlang':'-'
				(E, 1)
			in  let <_8> =
				apply 'float_exp'/1
				    (_7)
			    in  [Fs|_8]
		    ( <_9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_9})
		      -| ['compiler_generated'] )
		  end
	  ( <_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11,_10})
		  -| [{'function_name',{'float_e',3}}] )
	    -| ['compiler_generated'] )
	end
'float_man'/3 =
    %% Line 465
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Ds,0,Dc> when 'true' ->
	      %% Line 466
	      case apply 'float_man'/2
		       (Ds, Dc) of
		<{Cs,C}> when 'true' ->
		    %% Line 467
		    {[46|Cs],C}
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 468
	  <[D|Ds],I,Dc> when 'true' ->
	      let <_4> =
		  call %% Line 469
		       'erlang':%% Line 469
				'-'
		      (%% Line 469
		       I, %% Line 469
			  1)
	      in  %% Line 469
		  case apply 'float_man'/3
			   (Ds, _4, Dc) of
		    %% Line 470
		    <{Cs,'true'}>
			when call 'erlang':'=:='
			      (D,
			       57) ->
			{[48|Cs],'true'}
		    %% Line 471
		    <{Cs,'true'}> when 'true' ->
			let <_5> =
			    call 'erlang':'+'
				(D, 1)
			in  {[_5|Cs],'false'}
		    %% Line 472
		    <{Cs,'false'}> when 'true' ->
			{[D|Cs],'false'}
		    ( <_6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 474
	  <[],I,Dc> when 'true' ->
	      let <_8> =
		  call %% Line 475
		       'lists':%% Line 475
			       'duplicate'
		      (%% Line 475
		       I, %% Line 475
			  48)
	      in  let <_7> =
		      call %% Line 475
			   'lists':%% Line 475
				   'duplicate'
			  (%% Line 475
			   Dc, %% Line 475
			       48)
		  in  let <_9> =
			  call %% Line 475
			       'erlang':%% Line 475
					'++'
			      (_8, %% Line 475
				   [46|_7])
		      in  %% Line 475
			  {_9,'false'}
	  ( <_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11,_10})
		  -| [{'function_name',{'float_man',3}}] )
	    -| ['compiler_generated'] )
	end
'float_man'/2 =
    %% Line 477
    fun (_0,_1) ->
	case <_0,_1> of
	  <[D|_8],0>
	      when call 'erlang':'>='
		    (D,
		     53) ->
	      {[],'true'}
	  %% Line 478
	  <[_9|_10],0> when 'true' ->
	      {[],'false'}
	  %% Line 479
	  <[D|Ds],Dc> when 'true' ->
	      let <_2> =
		  call %% Line 480
		       'erlang':%% Line 480
				'-'
		      (%% Line 480
		       Dc, %% Line 480
			   1)
	      in  %% Line 480
		  case apply 'float_man'/2
			   (Ds, _2) of
		    %% Line 481
		    <{Cs,'true'}>
			when call 'erlang':'=:='
			      (D,
			       57) ->
			{[48|Cs],'true'}
		    %% Line 482
		    <{Cs,'true'}> when 'true' ->
			let <_3> =
			    call 'erlang':'+'
				(D, 1)
			in  {[_3|Cs],'false'}
		    %% Line 483
		    <{Cs,'false'}> when 'true' ->
			{[D|Cs],'false'}
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 485
	  <[],Dc> when 'true' ->
	      let <_5> =
		  call 'lists':'duplicate'
		      (Dc, 48)
	      in  {_5,'false'}
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'float_man',2}}] )
	    -| ['compiler_generated'] )
	end
'float_exp'/1 =
    %% Line 490
    fun (_0) ->
	case _0 of
	  <E>
	      when call 'erlang':'>='
		    (_0,
		     0) ->
	      let <_1> =
		  call %% Line 491
		       'erlang':%% Line 491
				'integer_to_list'
		      (%% Line 491
		       E)
	      in  %% Line 491
		  [101|[43|_1]]
	  %% Line 492
	  <E> when 'true' ->
	      let <_2> =
		  call %% Line 493
		       'erlang':%% Line 493
				'integer_to_list'
		      (%% Line 493
		       E)
	      in  %% Line 493
		  [101|_2]
	end
'fwrite_f'/5 =
    %% Line 497
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <Fl,'none',Adj,'none',Pad> when 'true' ->
	      %% Line 498
	      apply 'fwrite_f'/5
		  (Fl, 'none', Adj, 6, Pad)
	  %% Line 499
	  <Fl,'none',_X_Adj,P,_X_Pad>
	      when call 'erlang':'>='
		    (P,
		     1) ->
	      let <_5> =
		  apply %% Line 500
			'float_data'/1
		      (%% Line 500
		       Fl)
	      in  %% Line 500
		  apply 'float_f'/3
		      (Fl, _5, P)
	  %% Line 501
	  <Fl,F,Adj,'none',Pad> when 'true' ->
	      %% Line 502
	      apply 'fwrite_f'/5
		  (Fl, F, Adj, 6, Pad)
	  %% Line 503
	  <Fl,F,Adj,P,Pad>
	      when call 'erlang':'>='
		    (P,
		     1) ->
	      let <_6> =
		  apply %% Line 504
			'float_data'/1
		      (%% Line 504
		       Fl)
	      in  let <_7> =
		      apply %% Line 504
			    'float_f'/3
			  (%% Line 504
			   Fl, _6, %% Line 504
				   P)
		  in  %% Line 504
		      apply 'term'/5
			  (_7, F, Adj, F, Pad)
	  ( <_12,_11,_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11,_10,_9,_8})
		  -| [{'function_name',{'fwrite_f',5}}] )
	    -| ['compiler_generated'] )
	end
'float_f'/3 =
    %% Line 506
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Fl,Fd,P>
	      when call 'erlang':'<'
		    (Fl,
		     0.00000000000000000000e+00) ->
	      let <_3> =
		  call %% Line 507
		       'erlang':%% Line 507
				'-'
		      (%% Line 507
		       Fl)
	      in  let <_4> =
		      apply %% Line 507
			    'float_f'/3
			  (_3, %% Line 507
			       Fd, %% Line 507
				   P)
		  in  %% Line 507
		      [45|_4]
	  %% Line 508
	  <Fl,{Ds,E},P>
	      when call 'erlang':'=<'
		    (E,
		     0) ->
	      let <_5> =
		  call %% Line 509
		       'erlang':%% Line 509
				'-'
		      (%% Line 509
		       E)
	      in  let <_6> =
		      call %% Line 509
			   'erlang':%% Line 509
				    '+'
			  (_5, %% Line 509
			       1)
		  in  let <_7> =
			  call %% Line 509
			       'lists':%% Line 509
				       'duplicate'
			      (_6, %% Line 509
				   48)
		      in  let <_8> =
			      call %% Line 509
				   'erlang':%% Line 509
					    '++'
				  (_7, %% Line 509
				       Ds)
			  in  %% Line 509
			      apply 'float_f'/3
				  (Fl, {_8,1}, P)
	  %% Line 510
	  <_X_Fl,{Ds,E},P> when 'true' ->
	      %% Line 511
	      case apply 'float_man'/3
		       (Ds, E, P) of
		%% Line 512
		<{Fs,'true'}> when 'true' ->
		    [49|Fs]
		%% Line 513
		<{Fs,'false'}> when 'true' ->
		    Fs
		( <_9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_9})
		  -| ['compiler_generated'] )
	      end
	  ( <_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11,_10})
		  -| [{'function_name',{'float_f',3}}] )
	    -| ['compiler_generated'] )
	end
'float_data'/1 =
    %% Line 518
    fun (_0) ->
	let <_1> =
	    call %% Line 519
		 'erlang':%% Line 519
			  'float_to_list'
		(_0)
	in  %% Line 519
	    apply 'float_data'/2
		(_1, [])
'float_data'/2 =
    %% Line 521
    fun (_0,_1) ->
	case <_0,_1> of
	  <[101|E],Ds> when 'true' ->
	      let <_4> =
		  call %% Line 522
		       'lists':%% Line 522
			       'reverse'
		      (%% Line 522
		       Ds)
	      in  let <_2> =
		      call %% Line 522
			   'erlang':%% Line 522
				    'list_to_integer'
			  (%% Line 522
			   E)
		  in  let <_3> =
			  call %% Line 522
			       'erlang':%% Line 522
					'+'
			      (_2, %% Line 522
				   1)
		      in  %% Line 522
			  {_4,_3}
	  %% Line 523
	  <[D|Cs],Ds>
	      when let <_5> =
		    call 'erlang':'>='
			(D, 48)
		in  let <_6> =
			call 'erlang':'=<'
			    (D, 57)
		    in  call 'erlang':'and'
			    (_5, _6) ->
	      %% Line 524
	      apply 'float_data'/2
		  (Cs, [D|Ds])
	  %% Line 525
	  <[_9|Cs],Ds> when 'true' ->
	      %% Line 526
	      apply 'float_data'/2
		  (Cs, Ds)
	  ( <_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7})
		  -| [{'function_name',{'float_data',2}}] )
	    -| ['compiler_generated'] )
	end
'fwrite_g'/1 =
    %% Line 537
    fun (_0) ->
	case _0 of
	  <0.00000000000000000000e+00> when 'true' ->
	      %% Line 538
	      [48|[46|[48]]]
	  %% Line 539
	  <Float>
	      when call 'erlang':'is_float'
		    (_0) ->
	      %% Line 540
	      case apply 'mantissa_exponent'/1
		       (Float) of
		<{Frac,Exp}> when 'true' ->
		    %% Line 541
		    case apply 'fwrite_g_1'/3
			     (Float, Exp, Frac) of
		      <{Place,Digits}> when 'true' ->
			  let <_8> =
			      letrec
				  'lc$^0'/1 =
				      %% Line 542
				      fun (_5) ->
					  case _5 of
					    <[D|_4]> when 'true' ->
						let <_6> =
						    call 'erlang':'+'
							(48, D)
						in  let <_7> =
							apply 'lc$^0'/1
							    (_4)
						    in  ( [_6|_7]
							  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_16> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_16})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  %% Line 542
				  apply 'lc$^0'/1
				      (Digits)
			  in  let <R> =
				  apply %% Line 542
					'insert_decimal'/2
				      (%% Line 542
				       Place, _8)
			      in  %% Line 543
				  ( letrec
					'lc$^1'/1 =
					    fun (_13) ->
						case _13 of
						  <['true'|_11]> when 'true' ->
						      let <_14> =
							  apply 'lc$^1'/1
							      (_11)
						      in  ( [45|_14]
							    -| ['compiler_generated'] )
						  ( <[_10|_11]> when 'true' ->
							apply 'lc$^1'/1
							    (_11)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      R
						  ( <_17> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_17})
							  -| [{'function_name',{'lc$^1',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  let <_12> =
					    call 'erlang':'<'
						(Float, 0.00000000000000000000e+00)
					in  apply 'lc$^1'/1
						([_12|[]])
				    -| ['list_comprehension'] )
		      ( <_2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_2})
			-| ['compiler_generated'] )
		    end
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_1})
		  -| ['compiler_generated'] )
	      end
	  ( <_15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_15})
		  -| [{'function_name',{'fwrite_g',1}}] )
	    -| ['compiler_generated'] )
	end
'mantissa_exponent'/1 =
    %% Line 548
    fun (_0) ->
	%% Line 549
	case #{#<_0>(64,1,'float',['unsigned'|['big']])}# of
	  %% Line 550
	  <#{#<_X_S>(1,1,'integer',['unsigned'|['big']]),
	     #<0>(11,1,'integer',['unsigned'|['big']]),
	     #<M>(52,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      let <E> =
		  apply %% Line 551
			'log2floor'/1
		      (%% Line 551
		       M)
	      in  let <_4> =
		      call %% Line 552
			   'erlang':%% Line 552
				    '-'
			  (%% Line 552
			   53, %% Line 552
			       E)
		  in  let <_5> =
			  call %% Line 552
			       'erlang':%% Line 552
					'bsl'
			      (%% Line 552
			       M, _4)
		      in  let <_2> =
			      call %% Line 552
				   'erlang':%% Line 552
					    '-'
				  (%% Line 552
				   E, %% Line 552
				      52)
			  in  let <_3> =
				  call %% Line 552
				       'erlang':%% Line 552
						'-'
				      (_2, %% Line 552
					   1075)
			      in  %% Line 552
				  {_5,_3}
	  %% Line 553
	  <#{#<_X_S>(1,1,'integer',['unsigned'|['big']]),
	     #<BE>(11,1,'integer',['unsigned'|['big']]),
	     #<M>(52,1,'integer',['unsigned'|['big']])}#>
	      when call 'erlang':'<'
		    (BE,
		     2047) ->
	      let <_8> =
		  call %% Line 554
		       'erlang':%% Line 554
				'+'
		      (%% Line 554
		       M, %% Line 554
			  4503599627370496)
	      in  let <_6> =
		      call %% Line 554
			   'erlang':%% Line 554
				    '-'
			  (%% Line 554
			   BE, %% Line 554
			       1075)
		  in  %% Line 554
		      {_8,_6}
	  ( <_9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_9})
	    -| ['compiler_generated'] )
	end
'fwrite_g_1'/3 =
    %% Line 557
    fun (_0,_1,_2) ->
	let <_3> =
	    call %% Line 558
		 'erlang':%% Line 558
			  'band'
		(_2, %% Line 558
		     1)
	in  let <Round> =
		call %% Line 558
		     'erlang':%% Line 558
			      '=:='
		    (_3, %% Line 558
			 0)
	    in  %% Line 559
		case <> of
		  %% Line 560
		  <>
		      when call 'erlang':'>='
			    (_1,
			     0) ->
		      let <BExp> =
			  call %% Line 561
			       'erlang':%% Line 561
					'bsl'
			      (%% Line 561
			       1, _1)
		      in  %% Line 562
			  case <> of
			    %% Line 563
			    <>
				when call 'erlang':'=:='
				      (_2,
				       4503599627370496) ->
				let <_8> =
				    call %% Line 564
					 'erlang':%% Line 564
						  '*'
					(_2, %% Line 564
					     BExp)
				in  let <_9> =
					call %% Line 564
					     'erlang':%% Line 564
						      '*'
					    (_8, %% Line 564
						 4)
				    in  let <_7> =
					    call %% Line 564
						 'erlang':%% Line 564
							  '*'
						(%% Line 564
						 BExp, %% Line 564
						       2)
					in  %% Line 564
					    apply 'scale'/7
						(_9, 4, _7, BExp, %% Line 565
								  Round, %% Line 565
									 Round, _0)
			    %% Line 566
			    <> when 'true' ->
				let <_10> =
				    call %% Line 567
					 'erlang':%% Line 567
						  '*'
					(_2, %% Line 567
					     BExp)
				in  let <_11> =
					call %% Line 567
					     'erlang':%% Line 567
						      '*'
					    (_10, %% Line 567
						  2)
				    in  %% Line 567
					apply 'scale'/7
					    (_11, 2, BExp, BExp, %% Line 568
								 Round, %% Line 568
									Round, _0)
			  end
		  %% Line 570
		  <>
		      when call 'erlang':'<'
			    (_1,
			     -1074) ->
		      let <_14> =
			  call %% Line 571
			       'erlang':%% Line 571
					'-'
			      (%% Line 571
			       -1074, _1)
		      in  let <BExp> =
			      call %% Line 571
				   'erlang':%% Line 571
					    'bsl'
				  (%% Line 571
				   1, _14)
			  in  let <_18> =
				  call %% Line 572
				       'erlang':%% Line 572
						'*'
				      (_2, %% Line 572
					   2)
			      in  let <_16> =
				      call %% Line 572
					   'erlang':%% Line 572
						    '-'
					  (%% Line 572
					   1, _1)
				  in  let <_17> =
					  call %% Line 572
					       'erlang':%% Line 572
							'bsl'
					      (%% Line 572
					       1, _16)
				      in  %% Line 572
					  apply 'scale'/7
					      (_18, _17, BExp, BExp, %% Line 573
								     Round, %% Line 573
									    Round, _0)
		  %% Line 574
		  <>
		      when let <_20> =
			    call 'erlang':'>'
				(_1, -1074)
			in  let <_22> =
				call 'erlang':'=:='
				    (_2, 4503599627370496)
			    in  call 'erlang':'and'
				    (_20, _22) ->
		      let <_25> =
			  call %% Line 575
			       'erlang':%% Line 575
					'*'
			      (_2, %% Line 575
				   4)
		      in  let <_23> =
			      call %% Line 575
				   'erlang':%% Line 575
					    '-'
				  (%% Line 575
				   2, _1)
			  in  let <_24> =
				  call %% Line 575
				       'erlang':%% Line 575
						'bsl'
				      (%% Line 575
				       1, _23)
			      in  %% Line 575
				  apply 'scale'/7
				      (_25, _24, 2, 1, %% Line 576
						       Round, %% Line 576
							      Round, _0)
		  %% Line 577
		  <> when 'true' ->
		      let <_28> =
			  call %% Line 578
			       'erlang':%% Line 578
					'*'
			      (_2, %% Line 578
				   2)
		      in  let <_26> =
			      call %% Line 578
				   'erlang':%% Line 578
					    '-'
				  (%% Line 578
				   1, _1)
			  in  let <_27> =
				  call %% Line 578
				       'erlang':%% Line 578
						'bsl'
				      (%% Line 578
				       1, _26)
			      in  %% Line 578
				  apply 'scale'/7
				      (_28, _27, 1, 1, %% Line 579
						       Round, %% Line 579
							      Round, _0)
		end
'scale'/7 =
    %% Line 582
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	let <_7> =
	    call %% Line 583
		 'erlang':%% Line 583
			  'abs'
		(_6)
	in  let <_8> =
		call %% Line 583
		     'math':%% Line 583
			    'log10'
		    (_7)
	    in  let <_9> =
		    call %% Line 583
			 'erlang':%% Line 583
				  '-'
			(_8, %% Line 583
			     1.00000000000000003643e-10)
		in  let <Est> =
			apply %% Line 583
			      'int_ceil'/1
			    (_9)
		    in  %% Line 586
			case <> of
			  %% Line 587
			  <>
			      when call 'erlang':'>='
				    (Est,
				     0) ->
			      let <_11> =
				  apply %% Line 588
					'int_pow'/2
				      (%% Line 588
				       10, %% Line 588
					   Est)
			      in  let <_12> =
				      call %% Line 588
					   'erlang':%% Line 588
						    '*'
					  (_1, _11)
				  in  %% Line 588
				      apply 'fixup'/7
					  (_0, _12, _2, _3, Est, _4, _5)
			  %% Line 590
			  <> when 'true' ->
			      let <_13> =
				  call %% Line 591
				       'erlang':%% Line 591
						'-'
				      (%% Line 591
				       Est)
			      in  let <Scale> =
				      apply %% Line 591
					    'int_pow'/2
					  (%% Line 591
					   10, _13)
				  in  let <_17> =
					  call %% Line 592
					       'erlang':%% Line 592
							'*'
					      (_0, %% Line 592
						   Scale)
				      in  let <_16> =
					      call %% Line 592
						   'erlang':%% Line 592
							    '*'
						  (_2, %% Line 592
						       Scale)
					  in  let <_15> =
						  call %% Line 592
						       'erlang':%% Line 592
								'*'
						      (_3, %% Line 592
							   Scale)
					      in  %% Line 592
						  apply 'fixup'/7
						      (_17, _1, _16, _15, Est, _4, _5)
			end
'fixup'/7 =
    %% Line 596
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	let <_9> =
	    case <> of
	      %% Line 598
	      <>
		  when ( call 'erlang':'=:='
			  (_6,
			   'true')
		      -| ['compiler_generated'] ) ->
		  let <_7> =
		      call 'erlang':'+'
			  (_0, _2)
		  in  call 'erlang':'>='
			  (_7, _1)
	      %% Line 599
	      <> when 'true' ->
		  let <_8> =
		      call 'erlang':'+'
			  (_0, _2)
		  in  call 'erlang':'>'
			  (_8, _1)
	    end
	in  %% Line 601
	    case _9 of
	      %% Line 602
	      <'true'> when 'true' ->
		  let <_12> =
		      call %% Line 603
			   'erlang':%% Line 603
				    '+'
			  (_4, %% Line 603
			       1)
		  in  let <_11> =
			  apply %% Line 603
				'generate'/6
			      (_0, _1, _2, _3, _5, _6)
		      in  %% Line 603
			  {_12,_11}
	      %% Line 604
	      <'false'> when 'true' ->
		  let <_15> =
		      call %% Line 605
			   'erlang':%% Line 605
				    '*'
			  (_0, %% Line 605
			       10)
		  in  let <_14> =
			  call %% Line 605
			       'erlang':%% Line 605
					'*'
			      (_2, %% Line 605
				   10)
		      in  let <_13> =
			      call %% Line 605
				   'erlang':%% Line 605
					    '*'
				  (_3, %% Line 605
				       10)
			  in  let <_16> =
				  apply %% Line 605
					'generate'/6
				      (_15, _1, _14, _13, _5, _6)
			      in  %% Line 605
				  {_4,_16}
	      ( <_17> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_17})
		-| ['compiler_generated'] )
	    end
'generate'/6 =
    %% Line 608
    fun (_0,_1,_2,_3,_4,_5) ->
	let <D> =
	    call %% Line 609
		 'erlang':%% Line 609
			  'div'
		(_0, _1)
	in  let <R> =
		call %% Line 610
		     'erlang':%% Line 610
			      'rem'
		    (_0, _1)
	    in  let <_8> =
		    case <> of
		      %% Line 612
		      <>
			  when ( call 'erlang':'=:='
				  (_4,
				   'true')
			      -| ['compiler_generated'] ) ->
			  call 'erlang':'=<'
			      (R, _3)
		      %% Line 613
		      <> when 'true' ->
			  call 'erlang':'<'
			      (R, _3)
		    end
		in  let <_12> =
			case <> of
			  %% Line 616
			  <>
			      when ( call 'erlang':'=:='
				      (_5,
				       'true')
				  -| ['compiler_generated'] ) ->
			      let <_10> =
				  call 'erlang':'+'
				      (R, _2)
			      in  call 'erlang':'>='
				      (_10, _1)
			  %% Line 617
			  <> when 'true' ->
			      let <_11> =
				  call 'erlang':'+'
				      (R, _2)
			      in  call 'erlang':'>'
				      (_11, _1)
			end
		    in  %% Line 619
			case <_8,_12> of
			  %% Line 620
			  <'false','false'> when 'true' ->
			      let <_16> =
				  call %% Line 621
				       'erlang':%% Line 621
						'*'
				      (%% Line 621
				       R, %% Line 621
					  10)
			      in  let <_15> =
				      call %% Line 621
					   'erlang':%% Line 621
						    '*'
					  (_2, %% Line 621
					       10)
				  in  let <_14> =
					  call %% Line 621
					       'erlang':%% Line 621
							'*'
					      (_3, %% Line 621
						   10)
				      in  let <_17> =
					      apply %% Line 621
						    'generate'/6
						  (_16, _1, _15, _14, _4, _5)
					  in  %% Line 621
					      [D|_17]
			  %% Line 622
			  <'false','true'> when 'true' ->
			      let <_18> =
				  call %% Line 623
				       'erlang':%% Line 623
						'+'
				      (%% Line 623
				       D, %% Line 623
					  1)
			      in  %% Line 623
				  [_18|[]]
			  %% Line 624
			  <'true','false'> when 'true' ->
			      %% Line 625
			      [D|[]]
			  %% Line 626
			  <'true','true'>
			      when try
				    let <_19> =
					call 'erlang':'*'
					    (R, 2)
				    in  call 'erlang':'<'
					    (_19, _1)
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false' ->
			      %% Line 627
			      [D|[]]
			  %% Line 628
			  <'true','true'> when 'true' ->
			      let <_20> =
				  call %% Line 629
				       'erlang':%% Line 629
						'+'
				      (%% Line 629
				       D, %% Line 629
					  1)
			      in  %% Line 629
				  [_20|[]]
			  ( <( _28
			       -| ['compiler_generated'] ),( _29
							     -| ['compiler_generated'] )> when 'true' ->
				let <_21> = {( _28
				       -| ['compiler_generated'] ),( _29
								     -| ['compiler_generated'] )}
				in  primop 'match_fail'
					({'case_clause',_21})
			    -| ['compiler_generated'] )
			end
'insert_decimal'/2 =
    %% Line 632
    fun (_0,_1) ->
	case <_0,_1> of
	  <0,S> when 'true' ->
	      %% Line 633
	      [48|[46|S]]
	  %% Line 634
	  <Place,S> when 'true' ->
	      let <L> =
		  call %% Line 635
		       'erlang':%% Line 635
				'length'
		      (%% Line 635
		       S)
	      in  %% Line 636
		  case <> of
		    %% Line 637
		    <>
			when let <_3> =
			      call 'erlang':'<'
				  (Place, 0)
			  in  let <_4> =
				  call %% Line 638
				       'erlang':%% Line 638
						'>='
				      (%% Line 638
				       Place, %% Line 638
					      L)
			      in  call 'erlang':'or'
				      (_3, _4) ->
			let <_5> =
			    call %% Line 639
				 'erlang':%% Line 639
					  '-'
				(%% Line 639
				 Place, %% Line 639
					1)
			in  let <ExpL> =
				call %% Line 639
				     'erlang':%% Line 639
					      'integer_to_list'
				    (_5)
			    in  let <_7> =
				    case <> of
				      %% Line 640
				      <>
					  when call 'erlang':'=:='
						(L,
						 1) ->
					  2
				      %% Line 640
				      <> when 'true' ->
					  1
				    end
				in  let <_9> =
					call %% Line 641
					     'erlang':%% Line 641
						      'length'
					    (%% Line 641
					     ExpL)
				    in  let <_10> =
					    call %% Line 641
						 'erlang':%% Line 641
							  '+'
						(_9, %% Line 641
						     1)
					in  let <ExpCost> =
						call %% Line 641
						     'erlang':%% Line 641
							      '+'
						    (_10, _7)
					    in  %% Line 642
						case <> of
						  %% Line 643
						  <>
						      when call 'erlang':'<'
							    (Place,
							     0) ->
						      %% Line 644
						      case <> of
							%% Line 645
							<>
							    when try
								  let <_12> =
								      call 'erlang':'-'
									  (2, Place)
								  in  call 'erlang':'=<'
									  (_12, ExpCost)
							      of <Try> ->
								  Try
							      catch <T,R> ->
								  'false' ->
							    let <_13> =
								call %% Line 646
								     'erlang':%% Line 646
									      '-'
								    (%% Line 646
								     Place)
							    in  let <_14> =
								    call %% Line 646
									 'lists':%% Line 646
										 'duplicate'
									(_13, %% Line 646
									      48)
								in  let <_15> =
									call %% Line 646
									     'erlang':%% Line 646
										      '++'
									    (_14, %% Line 646
										  S)
								    in  %% Line 646
									[48|[46|_15]]
							%% Line 647
							<> when 'true' ->
							    %% Line 648
							    apply 'insert_exp'/2
								(ExpL, S)
						      end
						  %% Line 650
						  <> when 'true' ->
						      %% Line 651
						      case <> of
							%% Line 652
							<>
							    when try
								  let <_16> =
								      call 'erlang':'-'
									  (Place, L)
								  in  let <_17> =
									  call 'erlang':'+'
									      (_16, 2)
								      in  call 'erlang':'=<'
									      (_17, ExpCost)
							      of <Try> ->
								  Try
							      catch <T,R> ->
								  'false' ->
							    let <_18> =
								call %% Line 653
								     'erlang':%% Line 653
									      '-'
								    (%% Line 653
								     Place, %% Line 653
									    L)
							    in  let <_19> =
								    call %% Line 653
									 'lists':%% Line 653
										 'duplicate'
									(_18, %% Line 653
									      48)
								in  let <_20> =
									call %% Line 653
									     'erlang':%% Line 653
										      '++'
									    (_19, %% Line 653
										  [46|[48]])
								    in  %% Line 653
									call 'erlang':'++'
									    (S, _20)
							%% Line 654
							<> when 'true' ->
							    %% Line 655
							    apply 'insert_exp'/2
								(ExpL, S)
						      end
						end
		    %% Line 658
		    <> when 'true' ->
			%% Line 659
			case call 'lists':'split'
				 (Place, S) of
			  <{S0,S1}> when 'true' ->
			      let <_22> =
				  [46|%% Line 660
				      S1]
			      in  %% Line 660
				  call 'erlang':'++'
				      (S0, _22)
			  ( <_21> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_21})
			    -| ['compiler_generated'] )
			end
		  end
	end
'insert_exp'/2 =
    %% Line 663
    fun (_0,_1) ->
	case <_0,_1> of
	  <ExpL,[C|[]]> when 'true' ->
	      let <_2> =
		  [46|%% Line 664
		      [48|[101|ExpL]]]
	      in  %% Line 664
		  [C|_2]
	  %% Line 665
	  <ExpL,[C|S]> when 'true' ->
	      let <_3> =
		  [101|%% Line 666
		       ExpL]
	      in  let <_4> =
		      call %% Line 666
			   'erlang':%% Line 666
				    '++'
			  (%% Line 666
			   S, _3)
		  in  let <_5> =
			  [46|_4]
		      in  %% Line 666
			  [C|_5]
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'insert_exp',2}}] )
	    -| ['compiler_generated'] )
	end
'int_ceil'/1 =
    %% Line 668
    fun (_0) ->
	case _0 of
	  <X>
	      when call 'erlang':'is_float'
		    (_0) ->
	      let <T> =
		  call %% Line 669
		       'erlang':%% Line 669
				'trunc'
		      (%% Line 669
		       X)
	      in  %% Line 670
		  case call 'erlang':'-'
			   (X, T) of
		    %% Line 671
		    <Neg>
			when call 'erlang':'<'
			      (Neg,
			       0) ->
			T
		    %% Line 672
		    <Pos>
			when call 'erlang':'>'
			      (Pos,
			       0) ->
			call 'erlang':'+'
			    (T, 1)
		    %% Line 673
		    <_4> when 'true' ->
			T
		  end
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'int_ceil',1}}] )
	    -| ['compiler_generated'] )
	end
'int_pow'/2 =
    %% Line 676
    fun (_0,_1) ->
	case <_0,_1> of
	  <X,0>
	      when call 'erlang':'is_integer'
		    (X) ->
	      %% Line 677
	      1
	  %% Line 678
	  <X,N>
	      when try
		    let <_2> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_3> =
			    call 'erlang':'is_integer'
				(N)
			in  let <_4> =
				call 'erlang':'>'
				    (N, 0)
			    in  let <_5> =
				    call 'erlang':'and'
					(_3, _4)
				in  call 'erlang':'and'
					(_2, _5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 679
	      apply 'int_pow'/3
		  (X, N, 1)
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'int_pow',2}}] )
	    -| ['compiler_generated'] )
	end
'int_pow'/3 =
    %% Line 681
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <X,N,R>
	      when call 'erlang':'<'
		    (N,
		     2) ->
	      %% Line 682
	      call 'erlang':'*'
		  (R, X)
	  %% Line 683
	  <X,N,R> when 'true' ->
	      let <_6> =
		  call %% Line 684
		       'erlang':%% Line 684
				'*'
		      (%% Line 684
		       X, %% Line 684
			  X)
	      in  let <_5> =
		      call %% Line 684
			   'erlang':%% Line 684
				    'bsr'
			  (%% Line 684
			   N, %% Line 684
			      1)
		  in  let <_4> =
			  case %% Line 684
			       call 'erlang':'band'
				   (N, 1) of
			    %% Line 684
			    <1> when 'true' ->
				call 'erlang':'*'
				    (R, X)
			    %% Line 684
			    <0> when 'true' ->
				R
			    ( <_3> when 'true' ->
				  %% Line 684
				  primop 'match_fail'
				      ({'case_clause',_3})
			      -| ['compiler_generated'] )
			  end
		      in  %% Line 684
			  apply 'int_pow'/3
			      (_6, _5, _4)
	end
'log2floor'/1 =
    %% Line 686
    fun (_0) ->
	case _0 of
	  <Int>
	      when let <_1> =
		    call 'erlang':'is_integer'
			(_0)
		in  let <_2> =
			call 'erlang':'>'
			    (_0, 0)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 687
	      apply 'log2floor'/2
		  (Int, 0)
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'log2floor',1}}] )
	    -| ['compiler_generated'] )
	end
'log2floor'/2 =
    %% Line 689
    fun (_0,_1) ->
	case <_0,_1> of
	  <0,N> when 'true' ->
	      %% Line 690
	      N
	  %% Line 691
	  <Int,N> when 'true' ->
	      let <_3> =
		  call %% Line 692
		       'erlang':%% Line 692
				'bsr'
		      (%% Line 692
		       Int, %% Line 692
			    1)
	      in  let <_2> =
		      call %% Line 692
			   'erlang':%% Line 692
				    '+'
			  (%% Line 692
			   1, %% Line 692
			      N)
		  in  %% Line 692
		      apply 'log2floor'/2
			  (_3, _2)
	end
'fwrite_g'/5 =
    %% Line 699
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <Fl,F,Adj,'none',Pad> when 'true' ->
	      %% Line 700
	      apply 'fwrite_g'/5
		  (Fl, F, Adj, 6, Pad)
	  %% Line 701
	  <Fl,F,Adj,P,Pad>
	      when call 'erlang':'>='
		    (P,
		     1) ->
	      let <A> =
		  call %% Line 702
		       'erlang':%% Line 702
				'abs'
		      (%% Line 702
		       Fl)
	      in  let <_6> =
		      case <> of
			%% Line 703
			<>
			    when call 'erlang':'<'
				  (A,
				   1.00000000000000005551e-01) ->
			    -2
			%% Line 704
			<>
			    when call 'erlang':'<'
				  (A,
				   1.00000000000000000000e+00) ->
			    -1
			%% Line 705
			<>
			    when call 'erlang':'<'
				  (A,
				   1.00000000000000000000e+01) ->
			    0
			%% Line 706
			<>
			    when call 'erlang':'<'
				  (A,
				   1.00000000000000000000e+02) ->
			    1
			%% Line 707
			<>
			    when call 'erlang':'<'
				  (A,
				   1.00000000000000000000e+03) ->
			    2
			%% Line 708
			<>
			    when call 'erlang':'<'
				  (A,
				   1.00000000000000000000e+04) ->
			    3
			%% Line 709
			<> when 'true' ->
			    'fwrite_f'
		      end
		  in  %% Line 711
		      case <> of
			<>
			    when let <_8> =
				  call 'erlang':'=<'
				      (P, 1)
			      in  let <_10> =
				      call 'erlang':'=:='
					  (_6, -1)
				  in  let <_11> =
					  call 'erlang':'and'
					      (_8, _10)
				      in  let <_16> =
					      try
						  let <_12> =
						      call %% Line 712
							   'erlang':%% Line 712
								    '-'
							  (%% Line 712
							   P, %% Line 712
							      1)
						  in  let <_13> =
							  call %% Line 712
							       'erlang':%% Line 712
									'>'
							      (_12, _6)
						      in  let <_15> =
							      call %% Line 712
								   'erlang':%% Line 712
									    '>='
								  (_6, %% Line 712
								       -1)
							  in  %% Line 712
							      call 'erlang':'and'
								  (_13, _15)
					      of <Try> ->
						  Try
					      catch <T,R> ->
						  'false'
					  in  call 'erlang':'or'
						  (_11, _16) ->
			    let <_17> =
				call %% Line 713
				     'erlang':%% Line 713
					      '-'
				    (%% Line 713
				     P, %% Line 713
					1)
			    in  let <_18> =
				    call %% Line 713
					 'erlang':%% Line 713
						  '-'
					(_17, _6)
				in  %% Line 713
				    apply 'fwrite_f'/5
					(Fl, F, Adj, _18, Pad)
			%% Line 714
			<>
			    when call 'erlang':'=<'
				  (P,
				   1) ->
			    %% Line 715
			    apply 'fwrite_e'/5
				(Fl, F, Adj, 2, Pad)
			%% Line 716
			<> when 'true' ->
			    %% Line 717
			    apply 'fwrite_e'/5
				(Fl, F, Adj, P, Pad)
		      end
	  ( <_23,_22,_21,_20,_19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_23,_22,_21,_20,_19})
		  -| [{'function_name',{'fwrite_g',5}}] )
	    -| ['compiler_generated'] )
	end
'iolist_to_chars'/3 =
    %% Line 721
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Cs,F,CharsLimit>
	      when let <_3> =
		    call 'erlang':'<'
			(CharsLimit, 0)
		in  let <_4> =
			call 'erlang':'>='
			    (CharsLimit, F)
		    in  call 'erlang':'or'
			    (_3, _4) ->
	      %% Line 722
	      apply 'iolist_to_chars'/1
		  (Cs)
	  %% Line 723
	  <Cs,_9,CharsLimit> when 'true' ->
	      let <_5> =
		  apply %% Line 724
			'sub'/2
		      (%% Line 724
		       CharsLimit, %% Line 724
				   3)
	      in  %% Line 724
		  apply 'limit_iolist_to_chars'/4
		      (Cs, _5, [], 'normal')
	end
'iolist_to_chars'/1 =
    %% Line 726
    fun (_0) ->
	case _0 of
	  <[C|Cs]>
	      when try
		    let <_1> =
			call 'erlang':'is_integer'
			    (C)
		    in  let <_2> =
			    call 'erlang':'>='
				(C, 0)
			in  let <_3> =
				call 'erlang':'=<'
				    (C, 255)
			    in  let <_4> =
				    call 'erlang':'and'
					(_2, _3)
				in  call 'erlang':'and'
					(_1, _4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_5> =
		  apply %% Line 727
			'iolist_to_chars'/1
		      (%% Line 727
		       Cs)
	      in  %% Line 727
		  [C|_5]
	  %% Line 728
	  <[I|Cs]> when 'true' ->
	      let <_6> =
		  apply %% Line 729
			'iolist_to_chars'/1
		      (%% Line 729
		       I)
	      in  let <_7> =
		      apply %% Line 729
			    'iolist_to_chars'/1
			  (%% Line 729
			   Cs)
		  in  %% Line 729
		      [_6|_7]
	  %% Line 730
	  <[]> when 'true' ->
	      %% Line 731
	      []
	  %% Line 732
	  <B>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      %% Line 733
	      call 'erlang':'binary_to_list'
		  (B)
	  ( <_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8})
		  -| [{'function_name',{'iolist_to_chars',1}}] )
	    -| ['compiler_generated'] )
	end
'limit_iolist_to_chars'/4 =
    %% Line 735
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Cs,0,S,'normal'> when 'true' ->
	      let <L> =
		  apply %% Line 736
			'limit_iolist_to_chars'/4
		      (%% Line 736
		       Cs, %% Line 736
			   4, %% Line 736
			      S, %% Line 736
				 'final')
	      in  %% Line 737
		  case call 'erlang':'iolist_size'
			   (L) of
		    %% Line 738
		    <N>
			when call 'erlang':'<'
			      (N,
			       4) ->
			L
		    %% Line 739
		    <4> when 'true' ->
			[46|[46|[46]]]
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 741
	  <_X_Cs,0,_X_S,'final'> when 'true' ->
	      []
	  %% Line 742
	  <[C|Cs],Limit,S,Mode>
	      when let <_6> =
		    call 'erlang':'>='
			(C, 0)
		in  let <_7> =
			call 'erlang':'=<'
			    (C, 255)
		    in  call 'erlang':'and'
			    (_6, _7) ->
	      let <_8> =
		  call %% Line 743
		       'erlang':%% Line 743
				'-'
		      (%% Line 743
		       Limit, %% Line 743
			      1)
	      in  let <_9> =
		      apply %% Line 743
			    'limit_iolist_to_chars'/4
			  (%% Line 743
			   Cs, _8, %% Line 743
				   S, %% Line 743
				      Mode)
		  in  %% Line 743
		      [C|_9]
	  %% Line 744
	  <[I|Cs],Limit,S,Mode> when 'true' ->
	      %% Line 745
	      apply 'limit_iolist_to_chars'/4
		  (I, Limit, [Cs|S], Mode)
	  %% Line 746
	  <[],_X_Limit,[],_X_Mode> when 'true' ->
	      %% Line 747
	      []
	  %% Line 748
	  <[],Limit,[Cs|S],Mode> when 'true' ->
	      %% Line 749
	      apply 'limit_iolist_to_chars'/4
		  (Cs, Limit, S, Mode)
	  %% Line 750
	  <B,Limit,S,Mode>
	      when call 'erlang':'is_binary'
		    (B) ->
	      %% Line 751
	      case call 'erlang':'byte_size'
		       (B) of
		%% Line 752
		<Sz>
		    when call 'erlang':'>'
			  (Sz,
			   Limit) ->
		    %% Line 753
		    case call 'erlang':'split_binary'
			     (B, Limit) of
		      <{B1,B2}> when 'true' ->
			  let <_11> =
			      call %% Line 754
				   'erlang':%% Line 754
					    'binary_to_list'
				  (%% Line 754
				   B1)
			  in  let <_12> =
				  apply %% Line 754
					'limit_iolist_to_chars'/4
				      (%% Line 754
				       B2, %% Line 754
					   0, %% Line 754
					      S, %% Line 754
						 Mode)
			      in  %% Line 754
				  [_11|_12]
		      ( <_10> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_10})
			-| ['compiler_generated'] )
		    end
		%% Line 755
		<Sz> when 'true' ->
		    let <_13> =
			call %% Line 756
			     'erlang':%% Line 756
				      'binary_to_list'
			    (%% Line 756
			     B)
		    in  let <_14> =
			    call %% Line 756
				 'erlang':%% Line 756
					  '-'
				(%% Line 756
				 Limit, %% Line 756
					Sz)
			in  let <_15> =
				apply %% Line 756
				      'limit_iolist_to_chars'/4
				    (%% Line 756
				     [], _14, %% Line 756
					      S, %% Line 756
						 Mode)
			    in  %% Line 756
				[_13|_15]
	      end
	  ( <_20,_19,_18,_17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_20,_19,_18,_17})
		  -| [{'function_name',{'limit_iolist_to_chars',4}}] )
	    -| ['compiler_generated'] )
	end
'cdata_to_chars'/3 =
    %% Line 759
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Cs,F,CharsLimit>
	      when let <_3> =
		    call 'erlang':'<'
			(CharsLimit, 0)
		in  let <_4> =
			call 'erlang':'>='
			    (CharsLimit, F)
		    in  call 'erlang':'or'
			    (_3, _4) ->
	      %% Line 760
	      apply 'cdata_to_chars'/1
		  (Cs)
	  %% Line 761
	  <Cs,_9,CharsLimit> when 'true' ->
	      let <_5> =
		  apply %% Line 762
			'sub'/2
		      (%% Line 762
		       CharsLimit, %% Line 762
				   3)
	      in  %% Line 762
		  apply 'limit_cdata_to_chars'/3
		      (Cs, _5, 'normal')
	end
'cdata_to_chars'/1 =
    %% Line 764
    fun (_0) ->
	case _0 of
	  <[C|Cs]>
	      when let <_1> =
		    call 'erlang':'is_integer'
			(C)
		in  let <_2> =
			call 'erlang':'>='
			    (C, 0)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      let <_3> =
		  apply %% Line 765
			'cdata_to_chars'/1
		      (%% Line 765
		       Cs)
	      in  %% Line 765
		  [C|_3]
	  %% Line 766
	  <[I|Cs]> when 'true' ->
	      let <_4> =
		  apply %% Line 767
			'cdata_to_chars'/1
		      (%% Line 767
		       I)
	      in  let <_5> =
		      apply %% Line 767
			    'cdata_to_chars'/1
			  (%% Line 767
			   Cs)
		  in  %% Line 767
		      [_4|_5]
	  %% Line 768
	  <[]> when 'true' ->
	      %% Line 769
	      []
	  %% Line 770
	  <B>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      let <_6> =
		  catch
		      %% Line 771
		      call 'unicode':'characters_to_list'
			  (B)
	      in  %% Line 771
		  case _6 of
		    %% Line 772
		    <L>
			when call 'erlang':'is_list'
			      (_6) ->
			L
		    %% Line 773
		    <_9> when 'true' ->
			call 'erlang':'binary_to_list'
			    (B)
		  end
	  ( <_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8})
		  -| [{'function_name',{'cdata_to_chars',1}}] )
	    -| ['compiler_generated'] )
	end
'limit_cdata_to_chars'/3 =
    %% Line 776
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Cs,0,'normal'> when 'true' ->
	      let <L> =
		  apply %% Line 777
			'limit_cdata_to_chars'/3
		      (%% Line 777
		       Cs, %% Line 777
			   4, %% Line 777
			      'final')
	      in  %% Line 778
		  case call 'string':'length'
			   (L) of
		    %% Line 779
		    <N>
			when call 'erlang':'<'
			      (N,
			       4) ->
			L
		    %% Line 780
		    <4> when 'true' ->
			[46|[46|[46]]]
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 782
	  <_X_Cs,0,'final'> when 'true' ->
	      []
	  %% Line 783
	  <Cs,Limit,Mode> when 'true' ->
	      %% Line 784
	      case call 'string':'next_grapheme'
		       (Cs) of
		%% Line 785
		<{'error',#{#<C>(8,1,'integer',['unsigned'|['big']]),
			    #<Cs1>('all',8,'binary',['unsigned'|['big']])}#}> when 'true' ->
		    let <_5> =
			call %% Line 788
			     'erlang':%% Line 788
				      '-'
			    (%% Line 788
			     Limit, %% Line 788
				    1)
		    in  let <_6> =
			    apply %% Line 788
				  'limit_cdata_to_chars'/3
				(%% Line 788
				 Cs1, _5, %% Line 788
					  Mode)
			in  %% Line 788
			    [C|_6]
		%% Line 789
		<{'error',[C|Cs1]}> when 'true' ->
		    let <_7> =
			call %% Line 790
			     'erlang':%% Line 790
				      '-'
			    (%% Line 790
			     Limit, %% Line 790
				    1)
		    in  let <_8> =
			    apply %% Line 790
				  'limit_cdata_to_chars'/3
				(%% Line 790
				 Cs1, _7, %% Line 790
					  Mode)
			in  %% Line 790
			    [C|_8]
		%% Line 791
		<[]> when 'true' ->
		    %% Line 792
		    []
		%% Line 793
		<[GC|Cs1]> when 'true' ->
		    let <_9> =
			call %% Line 794
			     'erlang':%% Line 794
				      '-'
			    (%% Line 794
			     Limit, %% Line 794
				    1)
		    in  let <_10> =
			    apply %% Line 794
				  'limit_cdata_to_chars'/3
				(%% Line 794
				 Cs1, _9, %% Line 794
					  Mode)
			in  %% Line 794
			    [GC|_10]
		( <_11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_11})
		  -| ['compiler_generated'] )
	      end
	end
'limit_field'/2 =
    %% Line 797
    fun (_0,_1) ->
	case <_0,_1> of
	  <F,CharsLimit>
	      when let <_2> =
		    call 'erlang':'<'
			(CharsLimit, 0)
		in  let <_3> =
			call 'erlang':'=:='
			    (F, 'none')
		    in  call 'erlang':'or'
			    (_2, _3) ->
	      %% Line 798
	      F
	  %% Line 799
	  <F,CharsLimit> when 'true' ->
	      let <_4> =
		  call %% Line 800
		       'erlang':%% Line 800
				'min'
		      (%% Line 800
		       F, %% Line 800
			  CharsLimit)
	      in  %% Line 800
		  call 'erlang':'max'
		      (3, _4)
	end
'string'/6 =
    %% Line 804
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <S,'none',_X_Adj,'none',_X_Pad,_X_Enc> when 'true' ->
	      S
	  %% Line 805
	  <S,F,Adj,'none',Pad,Enc> when 'true' ->
	      let <_6> =
		  call %% Line 806
		       'io_lib':%% Line 806
				'chars_length'
		      (%% Line 806
		       S)
	      in  %% Line 806
		  apply 'string_field'/6
		      (S, F, Adj, _6, Pad, Enc)
	  %% Line 807
	  <S,'none',_X_Adj,P,Pad,Enc> when 'true' ->
	      let <_7> =
		  call %% Line 808
		       'io_lib':%% Line 808
				'chars_length'
		      (%% Line 808
		       S)
	      in  %% Line 808
		  apply 'string_field'/6
		      (S, P, 'left', _7, Pad, Enc)
	  %% Line 809
	  <S,F,Adj,P,Pad,Enc>
	      when call 'erlang':'>='
		    (F,
		     P) ->
	      let <N> =
		  call %% Line 810
		       'io_lib':%% Line 810
				'chars_length'
		      (%% Line 810
		       S)
	      in  %% Line 811
		  case <> of
		    <>
			when call 'erlang':'>'
			      (F,
			       P) ->
			%% Line 812
			case <> of
			  <>
			      when call 'erlang':'>'
				    (N,
				     P) ->
			      let <_11> =
				  apply %% Line 813
					'flat_trunc'/3
				      (%% Line 813
				       S, %% Line 813
					  P, %% Line 813
					     Enc)
			      in  let <_9> =
				      call %% Line 813
					   'erlang':%% Line 813
						    '-'
					  (%% Line 813
					   F, %% Line 813
					      P)
				  in  let <_10> =
					  apply %% Line 813
						'chars'/2
					      (%% Line 813
					       Pad, _9)
				      in  %% Line 813
					  apply 'adjust'/3
					      (_11, _10, Adj)
			  %% Line 814
			  <>
			      when call 'erlang':'<'
				    (N,
				     P) ->
			      let <_14> =
				  call %% Line 815
				       'erlang':%% Line 815
						'-'
				      (%% Line 815
				       P, %% Line 815
					  N)
			      in  let <_15> =
				      apply %% Line 815
					    'chars'/2
					  (%% Line 815
					   Pad, _14)
				  in  let <_12> =
					  call %% Line 815
					       'erlang':%% Line 815
							'-'
					      (%% Line 815
					       F, %% Line 815
						  P)
				      in  let <_13> =
					      apply %% Line 815
						    'chars'/2
						  (%% Line 815
						   Pad, _12)
					  in  %% Line 815
					      apply 'adjust'/3
						  ([S|_15], _13, Adj)
			  %% Line 816
			  <> when 'true' ->
			      let <_16> =
				  call %% Line 817
				       'erlang':%% Line 817
						'-'
				      (%% Line 817
				       F, %% Line 817
					  P)
			      in  let <_17> =
				      apply %% Line 817
					    'chars'/2
					  (%% Line 817
					   Pad, _16)
				  in  %% Line 817
				      apply 'adjust'/3
					  (S, _17, Adj)
			end
		    %% Line 819
		    <> when 'true' ->
			%% Line 820
			apply 'string_field'/6
			    (S, F, Adj, N, Pad, Enc)
		  end
	  ( <_23,_22,_21,_20,_19,_18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_23,_22,_21,_20,_19,_18})
		  -| [{'function_name',{'string',6}}] )
	    -| ['compiler_generated'] )
	end
'string_field'/6 =
    %% Line 823
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <S,F,_X_Adj,N,_X_Pad,Enc>
	      when call 'erlang':'>'
		    (N,
		     F) ->
	      %% Line 824
	      apply 'flat_trunc'/3
		  (S, F, Enc)
	  %% Line 825
	  <S,F,Adj,N,Pad,_X_Enc>
	      when call 'erlang':'<'
		    (N,
		     F) ->
	      let <_6> =
		  call %% Line 826
		       'erlang':%% Line 826
				'-'
		      (%% Line 826
		       F, %% Line 826
			  N)
	      in  let <_7> =
		      apply %% Line 826
			    'chars'/2
			  (%% Line 826
			   Pad, _6)
		  in  %% Line 826
		      apply 'adjust'/3
			  (S, _7, Adj)
	  %% Line 827
	  <S,_14,_15,_16,_17,_18> when 'true' ->
	      %% Line 828
	      S
	end
'unprefixed_integer'/6 =
    %% Line 833
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <Int,F,Adj,Base,Pad,Lowercase>
	      when let <_6> =
		    call %% Line 834
			 'erlang':%% Line 834
				  '>='
			(%% Line 834
			 Base, %% Line 834
			       2)
		in  let <_10> =
			call %% Line 834
			     'erlang':%% Line 834
				      '=<'
			    (%% Line 834
			     Base, %% Line 834
				   36)
		    in  %% Line 834
			call 'erlang':'and'
			    (_6, _10) ->
	      %% Line 835
	      case <> of
		<>
		    when call 'erlang':'<'
			  (Int,
			   0) ->
		    let <_11> =
			call %% Line 836
			     'erlang':%% Line 836
				      '-'
			    (%% Line 836
			     Int)
		    in  let <_12> =
			    call %% Line 836
				 'erlang':%% Line 836
					  'integer_to_list'
				(_11, %% Line 836
				      Base)
			in  let <S> =
				apply %% Line 836
				      'cond_lowercase'/2
				    (_12, %% Line 836
					  Lowercase)
			    in  %% Line 837
				apply 'term'/5
				    ([45|S], F, Adj, 'none', Pad)
		%% Line 838
		<> when 'true' ->
		    let <_14> =
			call %% Line 839
			     'erlang':%% Line 839
				      'integer_to_list'
			    (%% Line 839
			     Int, %% Line 839
				  Base)
		    in  let <S> =
			    apply %% Line 839
				  'cond_lowercase'/2
				(_14, %% Line 839
				      Lowercase)
			in  %% Line 840
			    apply 'term'/5
				(S, F, Adj, 'none', Pad)
	      end
	  ( <_21,_20,_19,_18,_17,_16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_21,_20,_19,_18,_17,_16})
		  -| [{'function_name',{'unprefixed_integer',6}}] )
	    -| ['compiler_generated'] )
	end
'prefixed_integer'/7 =
    %% Line 846
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	case <_0,_1,_2,_3,_4,_5,_6> of
	  <Int,F,Adj,Base,Pad,Prefix,Lowercase>
	      when let <_7> =
		    call %% Line 847
			 'erlang':%% Line 847
				  '>='
			(%% Line 847
			 Base, %% Line 847
			       2)
		in  let <_11> =
			call %% Line 847
			     'erlang':%% Line 847
				      '=<'
			    (%% Line 847
			     Base, %% Line 847
				   36)
		    in  %% Line 847
			call 'erlang':'and'
			    (_7, _11) ->
	      %% Line 848
	      case <> of
		<>
		    when call 'erlang':'<'
			  (Int,
			   0) ->
		    let <_12> =
			call %% Line 849
			     'erlang':%% Line 849
				      '-'
			    (%% Line 849
			     Int)
		    in  let <_13> =
			    call %% Line 849
				 'erlang':%% Line 849
					  'integer_to_list'
				(_12, %% Line 849
				      Base)
			in  let <S> =
				apply %% Line 849
				      'cond_lowercase'/2
				    (_13, %% Line 849
					  Lowercase)
			    in  %% Line 850
				apply 'term'/5
				    ([45|[Prefix|S]], F, Adj, 'none', Pad)
		%% Line 851
		<> when 'true' ->
		    let <_15> =
			call %% Line 852
			     'erlang':%% Line 852
				      'integer_to_list'
			    (%% Line 852
			     Int, %% Line 852
				  Base)
		    in  let <S> =
			    apply %% Line 852
				  'cond_lowercase'/2
				(_15, %% Line 852
				      Lowercase)
			in  %% Line 853
			    apply 'term'/5
				([Prefix|S], F, Adj, 'none', Pad)
	      end
	  ( <_23,_22,_21,_20,_19,_18,_17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_23,_22,_21,_20,_19,_18,_17})
		  -| [{'function_name',{'prefixed_integer',7}}] )
	    -| ['compiler_generated'] )
	end
'char'/5 =
    %% Line 858
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <C,'none',_X_Adj,'none',_X_Pad> when 'true' ->
	      [C|[]]
	  %% Line 859
	  <C,F,_X_Adj,'none',_X_Pad> when 'true' ->
	      apply 'chars'/2
		  (C, F)
	  %% Line 860
	  <C,'none',_X_Adj,P,_X_Pad> when 'true' ->
	      apply 'chars'/2
		  (C, P)
	  %% Line 861
	  <C,F,Adj,P,Pad>
	      when call 'erlang':'>='
		    (F,
		     P) ->
	      let <_7> =
		  apply %% Line 862
			'chars'/2
		      (%% Line 862
		       C, %% Line 862
			  P)
	      in  let <_5> =
		      call %% Line 862
			   'erlang':%% Line 862
				    '-'
			  (%% Line 862
			   F, %% Line 862
			      P)
		  in  let <_6> =
			  apply %% Line 862
				'chars'/2
			      (%% Line 862
			       Pad, _5)
		      in  %% Line 862
			  apply 'adjust'/3
			      (_7, _6, Adj)
	  ( <_12,_11,_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11,_10,_9,_8})
		  -| [{'function_name',{'char',5}}] )
	    -| ['compiler_generated'] )
	end
'newline'/4 =
    %% Line 866
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <'none',_X_Adj,_X_P,_X_Pad> when 'true' ->
	      [10]
	  %% Line 867
	  <F,'right',_X_P,_X_Pad> when 'true' ->
	      apply 'chars'/2
		  (10, F)
	  ( <_7,_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5,_4})
		  -| [{'function_name',{'newline',4}}] )
	    -| ['compiler_generated'] )
	end
'adjust'/3 =
    %% Line 873
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Data,[],_6> when 'true' ->
	      Data
	  %% Line 874
	  <Data,Pad,'left'> when 'true' ->
	      [Data|Pad]
	  %% Line 875
	  <Data,Pad,'right'> when 'true' ->
	      [Pad|Data]
	  ( <_5,_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4,_3})
		  -| [{'function_name',{'adjust',3}}] )
	    -| ['compiler_generated'] )
	end
'flat_trunc'/3 =
    %% Line 879
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <List,N,'latin1'>
	      when let <_3> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_4> =
			call 'erlang':'>='
			    (N, 0)
		    in  call 'erlang':'and'
			    (_3, _4) ->
	      let <_5> =
		  call %% Line 880
		       'lists':%% Line 880
			       'flatten'
		      (%% Line 880
		       List)
	      in  %% Line 880
		  case call 'lists':'split'
			   (N, _5) of
		    <{S,_12}> when 'true' ->
			%% Line 881
			S
		    ( <_6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 882
	  <List,N,'unicode'>
	      when let <_7> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_8> =
			call 'erlang':'>='
			    (N, 0)
		    in  call 'erlang':'and'
			    (_7, _8) ->
	      %% Line 883
	      call 'string':'slice'
		  (List, 0, N)
	  ( <_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9})
		  -| [{'function_name',{'flat_trunc',3}}] )
	    -| ['compiler_generated'] )
	end
'chars'/2 =
    %% Line 887
    fun (_0,_1) ->
	case <_0,_1> of
	  <_X_C,0> when 'true' ->
	      %% Line 888
	      []
	  %% Line 889
	  <C,1> when 'true' ->
	      %% Line 890
	      [C|[]]
	  %% Line 891
	  <C,2> when 'true' ->
	      %% Line 892
	      [C|[C|[]]]
	  %% Line 893
	  <C,3> when 'true' ->
	      %% Line 894
	      [C|[C|[C|[]]]]
	  %% Line 895
	  <C,N>
	      when try
		    let <_2> =
			call 'erlang':'is_integer'
			    (N)
		    in  let <_3> =
			    call 'erlang':'band'
				(N, 1)
			in  let <_4> =
				call 'erlang':'=:='
				    (_3, 0)
			    in  call 'erlang':'and'
				    (_2, _4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_5> =
		  call %% Line 896
		       'erlang':%% Line 896
				'bsr'
		      (%% Line 896
		       N, %% Line 896
			  1)
	      in  let <S> =
		      apply %% Line 896
			    'chars'/2
			  (%% Line 896
			   C, _5)
		  in  %% Line 897
		      [S|S]
	  %% Line 898
	  <C,N>
	      when call 'erlang':'is_integer'
		    (N) ->
	      let <_7> =
		  call %% Line 899
		       'erlang':%% Line 899
				'bsr'
		      (%% Line 899
		       N, %% Line 899
			  1)
	      in  let <S> =
		      apply %% Line 899
			    'chars'/2
			  (%% Line 899
			   C, _7)
		  in  %% Line 900
		      [C|[S|S]]
	  ( <_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9})
		  -| [{'function_name',{'chars',2}}] )
	    -| ['compiler_generated'] )
	end
'cond_lowercase'/2 =
    %% Line 907
    fun (_0,_1) ->
	case <_0,_1> of
	  <String,'true'> when 'true' ->
	      %% Line 908
	      apply 'lowercase'/1
		  (String)
	  %% Line 909
	  <String,'false'> when 'true' ->
	      %% Line 910
	      String
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'cond_lowercase',2}}] )
	    -| ['compiler_generated'] )
	end
'lowercase'/1 =
    %% Line 912
    fun (_0) ->
	case _0 of
	  <[H|T]>
	      when try
		    let <_1> =
			call 'erlang':'is_integer'
			    (H)
		    in  let <_2> =
			    call 'erlang':'>='
				(H, 65)
			in  let <_3> =
				call 'erlang':'=<'
				    (H, 90)
			    in  let <_4> =
				    call 'erlang':'and'
					(_2, _3)
				in  call 'erlang':'and'
					(_1, _4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_5> =
		  call %% Line 913
		       'erlang':%% Line 913
				'-'
		      (%% Line 913
		       H, %% Line 913
			  65)
	      in  let <_6> =
		      call %% Line 913
			   'erlang':%% Line 913
				    '+'
			  (_5, %% Line 913
			       97)
		  in  let <_7> =
			  apply %% Line 913
				'lowercase'/1
			      (%% Line 913
			       T)
		      in  %% Line 913
			  [_6|_7]
	  %% Line 914
	  <[H|T]> when 'true' ->
	      let <_8> =
		  apply %% Line 915
			'lowercase'/1
		      (%% Line 915
		       T)
	      in  %% Line 915
		  [H|_8]
	  %% Line 916
	  <[]> when 'true' ->
	      %% Line 917
	      []
	  ( <_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9})
		  -| [{'function_name',{'lowercase',1}}] )
	    -| ['compiler_generated'] )
	end
'sub'/2 =
    %% Line 920
    fun (_0,_1) ->
	case <_0,_1> of
	  <T,_4>
	      when call 'erlang':'<'
		    (T,
		     0) ->
	      T
	  %% Line 921
	  <T,E>
	      when call 'erlang':'>='
		    (T,
		     E) ->
	      call 'erlang':'-'
		  (T, E)
	  %% Line 922
	  <_5,_6> when 'true' ->
	      0
	end
'get_option'/3 =
    %% Line 924
    fun (_0,_1,_2) ->
	%% Line 925
	case call 'lists':'keyfind'
		 (_0, 1, _1) of
	  %% Line 926
	  <'false'> when 'true' ->
	      _2
	  %% Line 927
	  <{_7,Value}>
	      when call 'erlang':'=:='
		    (_7,
		     _0) ->
	      Value
	  %% Line 928
	  <_8> when 'true' ->
	      _2
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('io_lib_format')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('io_lib_format', _0)
end