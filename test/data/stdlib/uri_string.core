module 'uri_string' ['compose_query'/1,
		     'compose_query'/2,
		     'dissect_query'/1,
		     'is_host'/1,
		     'is_path'/1,
		     'module_info'/0,
		     'module_info'/1,
		     'normalize'/1,
		     'normalize'/2,
		     'parse'/1,
		     'recompose'/1,
		     'resolve'/2,
		     'resolve'/3,
		     'transcode'/2]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[117|[114|[105|[95|[115|[116|[114|[105|[110|[103|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],1}],
		%% Line 232
		'export_type' =
		    %% Line 232
		    [{'error',0}|[{'uri_map',0}|[{'uri_string',0}]]],
		%% Line 275
		'type' =
		    %% Line 275
		    [{'uri_string',{'type',275,'iodata',[]},[]}],
		%% Line 276
		'type' =
		    %% Line 276
		    [{'error',{'type',276,'tuple',[{'atom',276,'error'}|[{'type',276,'atom',[]}|[{'type',276,'term',[]}]]]},[]}],
		%% Line 282
		'type' =
		    %% Line 282
		    [{'uri_map',{'type',283,'union',[{'type',283,'map',[{'type',283,'map_field_assoc',[{'atom',283,'fragment'}|[{'remote_type',283,[{'atom',283,'unicode'}|[{'atom',283,'chardata'}|[[]]]]}]]}|[{'type',284,'map_field_assoc',[{'atom',284,'host'}|[{'remote_type',284,[{'atom',284,'unicode'}|[{'atom',284,'chardata'}|[[]]]]}]]}|[{'type',285,'map_field_assoc',[{'atom',285,'path'}|[{'remote_type',285,[{'atom',285,'unicode'}|[{'atom',285,'chardata'}|[[]]]]}]]}|[{'type',286,'map_field_assoc',[{'atom',286,'port'}|[{'type',286,'union',[{'type',286,'non_neg_integer',[]}|[{'atom',286,'undefined'}]]}]]}|[{'type',287,'map_field_assoc',[{'atom',287,'query'}|[{'remote_type',287,[{'atom',287,'unicode'}|[{'atom',287,'chardata'}|[[]]]]}]]}|[{'type',288,'map_field_assoc',[{'atom',288,'scheme'}|[{'remote_type',288,[{'atom',288,'unicode'}|[{'atom',288,'chardata'}|[[]]]]}]]}|[{'type',289,'map_field_assoc',[{'atom',289,'userinfo'}|[{'remote_type',289,[{'atom',289,'unicode'}|[{'atom',289,'chardata'}|[[]]]]}]]}]]]]]]]}|[{'type',289,'map',[]}]]},[]}],
		%% Line 295
		'spec' =
		    %% Line 295
		    [{{'normalize',1},[{'type',295,'bounded_fun',[{'type',295,'fun',[{'type',295,'product',[{'var',295,'URI'}]}|[{'var',295,'NormalizedURI'}]]}|[[{'type',296,'constraint',[{'atom',296,'is_subtype'}|[[{'var',296,'URI'}|[{'type',296,'union',[{'user_type',296,'uri_string',[]}|[{'user_type',296,'uri_map',[]}]]}]]]]}|[{'type',297,'constraint',[{'atom',297,'is_subtype'}|[[{'var',297,'NormalizedURI'}|[{'type',297,'union',[{'user_type',297,'uri_string',[]}|[{'user_type',298,'error',[]}]]}]]]]}]]]]}]}],
		%% Line 303
		'spec' =
		    %% Line 303
		    [{{'normalize',2},[{'type',303,'bounded_fun',[{'type',303,'fun',[{'type',303,'product',[{'var',303,'URI'}|[{'var',303,'Options'}]]}|[{'var',303,'NormalizedURI'}]]}|[[{'type',304,'constraint',[{'atom',304,'is_subtype'}|[[{'var',304,'URI'}|[{'type',304,'union',[{'user_type',304,'uri_string',[]}|[{'user_type',304,'uri_map',[]}]]}]]]]}|[{'type',305,'constraint',[{'atom',305,'is_subtype'}|[[{'var',305,'Options'}|[{'type',305,'list',[{'atom',305,'return_map'}]}]]]]}|[{'type',306,'constraint',[{'atom',306,'is_subtype'}|[[{'var',306,'NormalizedURI'}|[{'type',306,'union',[{'user_type',306,'uri_string',[]}|[{'user_type',306,'uri_map',[]}|[{'user_type',307,'error',[]}]]]}]]]]}]]]]]}]}],
		%% Line 343
		'spec' =
		    %% Line 343
		    [{{'parse',1},[{'type',343,'bounded_fun',[{'type',343,'fun',[{'type',343,'product',[{'var',343,'URIString'}]}|[{'var',343,'URIMap'}]]}|[[{'type',344,'constraint',[{'atom',344,'is_subtype'}|[[{'var',344,'URIString'}|[{'user_type',344,'uri_string',[]}]]]]}|[{'type',345,'constraint',[{'atom',345,'is_subtype'}|[[{'var',345,'URIMap'}|[{'type',345,'union',[{'user_type',345,'uri_map',[]}|[{'user_type',346,'error',[]}]]}]]]]}]]]]}]}],
		%% Line 365
		'spec' =
		    %% Line 365
		    [{{'recompose',1},[{'type',365,'bounded_fun',[{'type',365,'fun',[{'type',365,'product',[{'var',365,'URIMap'}]}|[{'var',365,'URIString'}]]}|[[{'type',366,'constraint',[{'atom',366,'is_subtype'}|[[{'var',366,'URIMap'}|[{'user_type',366,'uri_map',[]}]]]]}|[{'type',367,'constraint',[{'atom',367,'is_subtype'}|[[{'var',367,'URIString'}|[{'type',367,'union',[{'user_type',367,'uri_string',[]}|[{'user_type',368,'error',[]}]]}]]]]}]]]]}]}],
		%% Line 391
		'spec' =
		    %% Line 391
		    [{{'resolve',2},[{'type',391,'bounded_fun',[{'type',391,'fun',[{'type',391,'product',[{'var',391,'RefURI'}|[{'var',391,'BaseURI'}]]}|[{'var',391,'TargetURI'}]]}|[[{'type',392,'constraint',[{'atom',392,'is_subtype'}|[[{'var',392,'RefURI'}|[{'type',392,'union',[{'user_type',392,'uri_string',[]}|[{'user_type',392,'uri_map',[]}]]}]]]]}|[{'type',393,'constraint',[{'atom',393,'is_subtype'}|[[{'var',393,'BaseURI'}|[{'type',393,'union',[{'user_type',393,'uri_string',[]}|[{'user_type',393,'uri_map',[]}]]}]]]]}|[{'type',394,'constraint',[{'atom',394,'is_subtype'}|[[{'var',394,'TargetURI'}|[{'type',394,'union',[{'user_type',394,'uri_string',[]}|[{'user_type',395,'error',[]}]]}]]]]}]]]]]}]}],
		%% Line 400
		'spec' =
		    %% Line 400
		    [{{'resolve',3},[{'type',400,'bounded_fun',[{'type',400,'fun',[{'type',400,'product',[{'var',400,'RefURI'}|[{'var',400,'BaseURI'}|[{'var',400,'Options'}]]]}|[{'var',400,'TargetURI'}]]}|[[{'type',401,'constraint',[{'atom',401,'is_subtype'}|[[{'var',401,'RefURI'}|[{'type',401,'union',[{'user_type',401,'uri_string',[]}|[{'user_type',401,'uri_map',[]}]]}]]]]}|[{'type',402,'constraint',[{'atom',402,'is_subtype'}|[[{'var',402,'BaseURI'}|[{'type',402,'union',[{'user_type',402,'uri_string',[]}|[{'user_type',402,'uri_map',[]}]]}]]]]}|[{'type',403,'constraint',[{'atom',403,'is_subtype'}|[[{'var',403,'Options'}|[{'type',403,'list',[{'atom',403,'return_map'}]}]]]]}|[{'type',404,'constraint',[{'atom',404,'is_subtype'}|[[{'var',404,'TargetURI'}|[{'type',404,'union',[{'user_type',404,'uri_string',[]}|[{'user_type',404,'uri_map',[]}|[{'user_type',405,'error',[]}]]]}]]]]}]]]]]]}]}],
		%% Line 430
		'spec' =
		    %% Line 430
		    [{{'transcode',2},[{'type',430,'bounded_fun',[{'type',430,'fun',[{'type',430,'product',[{'var',430,'URIString'}|[{'var',430,'Options'}]]}|[{'var',430,'Result'}]]}|[[{'type',431,'constraint',[{'atom',431,'is_subtype'}|[[{'var',431,'URIString'}|[{'user_type',431,'uri_string',[]}]]]]}|[{'type',432,'constraint',[{'atom',432,'is_subtype'}|[[{'var',432,'Options'}|[{'type',432,'list',[{'type',432,'union',[{'type',432,'tuple',[{'atom',432,'in_encoding'}|[{'remote_type',432,[{'atom',432,'unicode'}|[{'atom',432,'encoding'}|[[]]]]}]]}|[{'type',432,'tuple',[{'atom',432,'out_encoding'}|[{'remote_type',432,[{'atom',432,'unicode'}|[{'atom',432,'encoding'}|[[]]]]}]]}]]}]}]]]]}|[{'type',433,'constraint',[{'atom',433,'is_subtype'}|[[{'var',433,'Result'}|[{'type',433,'union',[{'user_type',433,'uri_string',[]}|[{'user_type',434,'error',[]}]]}]]]]}]]]]]}]}],
		%% Line 466
		'spec' =
		    %% Line 466
		    [{{'compose_query',1},[{'type',466,'bounded_fun',[{'type',466,'fun',[{'type',466,'product',[{'var',466,'QueryList'}]}|[{'var',466,'QueryString'}]]}|[[{'type',467,'constraint',[{'atom',467,'is_subtype'}|[[{'var',467,'QueryList'}|[{'type',467,'list',[{'type',467,'tuple',[{'remote_type',467,[{'atom',467,'unicode'}|[{'atom',467,'chardata'}|[[]]]]}|[{'type',467,'union',[{'remote_type',467,[{'atom',467,'unicode'}|[{'atom',467,'chardata'}|[[]]]]}|[{'atom',467,'true'}]]}]]}]}]]]]}|[{'type',468,'constraint',[{'atom',468,'is_subtype'}|[[{'var',468,'QueryString'}|[{'type',468,'union',[{'user_type',468,'uri_string',[]}|[{'user_type',469,'error',[]}]]}]]]]}]]]]}]}],
		%% Line 474
		'spec' =
		    %% Line 474
		    [{{'compose_query',2},[{'type',474,'bounded_fun',[{'type',474,'fun',[{'type',474,'product',[{'var',474,'QueryList'}|[{'var',474,'Options'}]]}|[{'var',474,'QueryString'}]]}|[[{'type',475,'constraint',[{'atom',475,'is_subtype'}|[[{'var',475,'QueryList'}|[{'type',475,'list',[{'type',475,'tuple',[{'remote_type',475,[{'atom',475,'unicode'}|[{'atom',475,'chardata'}|[[]]]]}|[{'type',475,'union',[{'remote_type',475,[{'atom',475,'unicode'}|[{'atom',475,'chardata'}|[[]]]]}|[{'atom',475,'true'}]]}]]}]}]]]]}|[{'type',476,'constraint',[{'atom',476,'is_subtype'}|[[{'var',476,'Options'}|[{'type',476,'list',[{'type',476,'tuple',[{'atom',476,'encoding'}|[{'type',476,'atom',[]}]]}]}]]]]}|[{'type',477,'constraint',[{'atom',477,'is_subtype'}|[[{'var',477,'QueryString'}|[{'type',477,'union',[{'user_type',477,'uri_string',[]}|[{'user_type',478,'error',[]}]]}]]]]}]]]]]}]}],
		%% Line 509
		'spec' =
		    %% Line 509
		    [{{'dissect_query',1},[{'type',509,'bounded_fun',[{'type',509,'fun',[{'type',509,'product',[{'var',509,'QueryString'}]}|[{'var',509,'QueryList'}]]}|[[{'type',510,'constraint',[{'atom',510,'is_subtype'}|[[{'var',510,'QueryString'}|[{'user_type',510,'uri_string',[]}]]]]}|[{'type',511,'constraint',[{'atom',511,'is_subtype'}|[[{'var',511,'QueryList'}|[{'type',511,'union',[{'type',511,'list',[{'type',511,'tuple',[{'remote_type',511,[{'atom',511,'unicode'}|[{'atom',511,'chardata'}|[[]]]]}|[{'type',511,'union',[{'remote_type',511,[{'atom',511,'unicode'}|[{'atom',511,'chardata'}|[[]]]]}|[{'atom',511,'true'}]]}]]}]}|[{'user_type',512,'error',[]}]]}]]]]}]]]]}]}],
		%% Line 552
		'spec' =
		    %% Line 552
		    [{{'parse_uri_reference',2},[{'type',552,'fun',[{'type',552,'product',[{'type',552,'binary',[]}|[{'user_type',552,'uri_map',[]}]]}|[{'user_type',552,'uri_map',[]}]]}]}],
		%% Line 576
		'spec' =
		    %% Line 576
		    [{{'parse_relative_part',2},[{'type',576,'fun',[{'type',576,'product',[{'type',576,'binary',[]}|[{'user_type',576,'uri_map',[]}]]}|[{'user_type',576,'uri_map',[]}]]}]}],
		%% Line 647
		'spec' =
		    %% Line 647
		    [{{'parse_segment',2},[{'type',647,'fun',[{'type',647,'product',[{'type',647,'binary',[]}|[{'user_type',647,'uri_map',[]}]]}|[{'type',647,'tuple',[{'type',647,'binary',[]}|[{'user_type',647,'uri_map',[]}]]}]]}]}],
		%% Line 670
		'spec' =
		    %% Line 670
		    [{{'parse_segment_nz_nc',2},[{'type',670,'fun',[{'type',670,'product',[{'type',670,'binary',[]}|[{'user_type',670,'uri_map',[]}]]}|[{'type',670,'tuple',[{'type',670,'binary',[]}|[{'user_type',670,'uri_map',[]}]]}]]}]}],
		%% Line 691
		'spec' =
		    %% Line 691
		    [{{'is_pchar',1},[{'type',691,'fun',[{'type',691,'product',[{'type',691,'char',[]}]}|[{'type',691,'boolean',[]}]]}]}],
		%% Line 698
		'spec' =
		    %% Line 698
		    [{{'is_segment_nz_nc',1},[{'type',698,'fun',[{'type',698,'product',[{'type',698,'char',[]}]}|[{'type',698,'boolean',[]}]]}]}],
		%% Line 712
		'spec' =
		    %% Line 712
		    [{{'parse_scheme_start',2},[{'type',712,'fun',[{'type',712,'product',[{'type',712,'binary',[]}|[{'user_type',712,'uri_map',[]}]]}|[{'user_type',712,'uri_map',[]}]]}]}],
		%% Line 736
		'spec' =
		    %% Line 736
		    [{{'parse_scheme',2},[{'type',736,'fun',[{'type',736,'product',[{'type',736,'binary',[]}|[{'user_type',736,'uri_map',[]}]]}|[{'type',736,'tuple',[{'type',736,'binary',[]}|[{'user_type',736,'uri_map',[]}]]}]]}]}],
		%% Line 750
		'spec' =
		    %% Line 750
		    [{{'is_scheme',1},[{'type',750,'fun',[{'type',750,'product',[{'type',750,'char',[]}]}|[{'type',750,'boolean',[]}]]}]}],
		%% Line 763
		'spec' =
		    %% Line 763
		    [{{'parse_hier',2},[{'type',763,'fun',[{'type',763,'product',[{'type',763,'binary',[]}|[{'user_type',763,'uri_map',[]}]]}|[{'type',763,'tuple',[{'type',763,'binary',[]}|[{'user_type',763,'uri_map',[]}]]}]]}]}],
		%% Line 824
		'spec' =
		    %% Line 824
		    [{{'parse_userinfo',2},[{'type',824,'fun',[{'type',824,'product',[{'type',824,'binary',[]}|[{'user_type',824,'uri_map',[]}]]}|[{'type',824,'tuple',[{'type',824,'binary',[]}|[{'user_type',824,'uri_map',[]}]]}]]}]}],
		%% Line 842
		'spec' =
		    %% Line 842
		    [{{'is_userinfo',1},[{'type',842,'fun',[{'type',842,'product',[{'type',842,'char',[]}]}|[{'type',842,'boolean',[]}]]}]}],
		%% Line 887
		'spec' =
		    %% Line 887
		    [{{'parse_host',2},[{'type',887,'fun',[{'type',887,'product',[{'type',887,'binary',[]}|[{'user_type',887,'uri_map',[]}]]}|[{'type',887,'tuple',[{'type',887,'binary',[]}|[{'user_type',887,'uri_map',[]}]]}]]}]}],
		%% Line 921
		'spec' =
		    %% Line 921
		    [{{'parse_reg_name',2},[{'type',921,'fun',[{'type',921,'product',[{'type',921,'binary',[]}|[{'user_type',921,'uri_map',[]}]]}|[{'type',921,'tuple',[{'type',921,'binary',[]}|[{'user_type',921,'uri_map',[]}]]}]]}]}],
		%% Line 948
		'spec' =
		    %% Line 948
		    [{{'is_reg_name',1},[{'type',948,'fun',[{'type',948,'product',[{'type',948,'char',[]}]}|[{'type',948,'boolean',[]}]]}]}],
		%% Line 953
		'spec' =
		    %% Line 953
		    [{{'parse_ipv4_bin',3},[{'type',953,'fun',[{'type',953,'product',[{'type',953,'binary',[]}|[{'type',953,'list',[]}|[{'user_type',953,'uri_map',[]}]]]}|[{'type',953,'tuple',[{'type',953,'binary',[]}|[{'user_type',953,'uri_map',[]}]]}]]}]}],
		%% Line 986
		'spec' =
		    %% Line 986
		    [{{'is_ipv4',1},[{'type',986,'fun',[{'type',986,'product',[{'type',986,'char',[]}]}|[{'type',986,'boolean',[]}]]}]}],
		%% Line 990
		'spec' =
		    %% Line 990
		    [{{'validate_ipv4_address',1},[{'type',990,'fun',[{'type',990,'product',[{'type',990,'list',[]}]}|[{'type',990,'list',[]}]]}]}],
		%% Line 998
		'spec' =
		    %% Line 998
		    [{{'parse_ipv6_bin',3},[{'type',998,'fun',[{'type',998,'product',[{'type',998,'binary',[]}|[{'type',998,'list',[]}|[{'user_type',998,'uri_map',[]}]]]}|[{'type',998,'tuple',[{'type',998,'binary',[]}|[{'user_type',998,'uri_map',[]}]]}]]}]}],
		%% Line 1011
		'spec' =
		    %% Line 1011
		    [{{'is_ipv6',1},[{'type',1011,'fun',[{'type',1011,'product',[{'type',1011,'char',[]}]}|[{'type',1011,'boolean',[]}]]}]}],
		%% Line 1017
		'spec' =
		    %% Line 1017
		    [{{'parse_ipv6_bin_end',2},[{'type',1017,'fun',[{'type',1017,'product',[{'type',1017,'binary',[]}|[{'user_type',1017,'uri_map',[]}]]}|[{'type',1017,'tuple',[{'type',1017,'binary',[]}|[{'user_type',1017,'uri_map',[]}]]}]]}]}],
		%% Line 1043
		'spec' =
		    %% Line 1043
		    [{{'validate_ipv6_address',1},[{'type',1043,'fun',[{'type',1043,'product',[{'type',1043,'list',[]}]}|[{'type',1043,'list',[]}]]}]}],
		%% Line 1060
		'spec' =
		    %% Line 1060
		    [{{'parse_port',2},[{'type',1060,'fun',[{'type',1060,'product',[{'type',1060,'binary',[]}|[{'user_type',1060,'uri_map',[]}]]}|[{'type',1060,'tuple',[{'type',1060,'binary',[]}|[{'user_type',1060,'uri_map',[]}]]}]]}]}],
		%% Line 1094
		'spec' =
		    %% Line 1094
		    [{{'parse_query',2},[{'type',1094,'fun',[{'type',1094,'product',[{'type',1094,'binary',[]}|[{'user_type',1094,'uri_map',[]}]]}|[{'type',1094,'tuple',[{'type',1094,'binary',[]}|[{'user_type',1094,'uri_map',[]}]]}]]}]}],
		%% Line 1109
		'spec' =
		    %% Line 1109
		    [{{'is_query',1},[{'type',1109,'fun',[{'type',1109,'product',[{'type',1109,'char',[]}]}|[{'type',1109,'boolean',[]}]]}]}],
		%% Line 1124
		'spec' =
		    %% Line 1124
		    [{{'parse_fragment',2},[{'type',1124,'fun',[{'type',1124,'product',[{'type',1124,'binary',[]}|[{'user_type',1124,'uri_map',[]}]]}|[{'type',1124,'tuple',[{'type',1124,'binary',[]}|[{'user_type',1124,'uri_map',[]}]]}]]}]}],
		%% Line 1135
		'spec' =
		    %% Line 1135
		    [{{'is_fragment',1},[{'type',1135,'fun',[{'type',1135,'product',[{'type',1135,'char',[]}]}|[{'type',1135,'boolean',[]}]]}]}],
		%% Line 1154
		'spec' =
		    %% Line 1154
		    [{{'is_reserved',1},[{'type',1154,'fun',[{'type',1154,'product',[{'type',1154,'char',[]}]}|[{'type',1154,'boolean',[]}]]}]}],
		%% Line 1179
		'spec' =
		    %% Line 1179
		    [{{'is_sub_delim',1},[{'type',1179,'fun',[{'type',1179,'product',[{'type',1179,'char',[]}]}|[{'type',1179,'boolean',[]}]]}]}],
		%% Line 1201
		'spec' =
		    %% Line 1201
		    [{{'is_unreserved',1},[{'type',1201,'fun',[{'type',1201,'product',[{'type',1201,'char',[]}]}|[{'type',1201,'boolean',[]}]]}]}],
		%% Line 1208
		'spec' =
		    %% Line 1208
		    [{{'is_alpha',1},[{'type',1208,'fun',[{'type',1208,'product',[{'type',1208,'char',[]}]}|[{'type',1208,'boolean',[]}]]}]}],
		%% Line 1214
		'spec' =
		    %% Line 1214
		    [{{'is_digit',1},[{'type',1214,'fun',[{'type',1214,'product',[{'type',1214,'char',[]}]}|[{'type',1214,'boolean',[]}]]}]}],
		%% Line 1219
		'spec' =
		    %% Line 1219
		    [{{'is_hex_digit',1},[{'type',1219,'fun',[{'type',1219,'product',[{'type',1219,'char',[]}]}|[{'type',1219,'boolean',[]}]]}]}],
		%% Line 1226
		'spec' =
		    %% Line 1226
		    [{{'remove_brackets',1},[{'type',1226,'fun',[{'type',1226,'product',[{'type',1226,'binary',[]}]}|[{'type',1226,'binary',[]}]]}]}],
		%% Line 1239
		'spec' =
		    %% Line 1239
		    [{{'calculate_parsed_scheme',2},[{'type',1239,'fun',[{'type',1239,'product',[{'type',1239,'binary',[]}|[{'type',1239,'binary',[]}]]}|[{'type',1239,'binary',[]}]]}]}],
		%% Line 1246
		'spec' =
		    %% Line 1246
		    [{{'calculate_parsed_part',2},[{'type',1246,'fun',[{'type',1246,'product',[{'type',1246,'binary',[]}|[{'type',1246,'binary',[]}]]}|[{'type',1246,'binary',[]}]]}]}],
		%% Line 1253
		'spec' =
		    %% Line 1253
		    [{{'calculate_parsed_userinfo',2},[{'type',1253,'fun',[{'type',1253,'product',[{'type',1253,'binary',[]}|[{'type',1253,'binary',[]}]]}|[{'type',1253,'binary',[]}]]}]}],
		%% Line 1260
		'spec' =
		    %% Line 1260
		    [{{'calculate_parsed_host_port',2},[{'type',1260,'fun',[{'type',1260,'product',[{'type',1260,'binary',[]}|[{'type',1260,'binary',[]}]]}|[{'type',1260,'binary',[]}]]}]}],
		%% Line 1345
		'spec' =
		    %% Line 1345
		    [{{'byte_size_exl_head',1},[{'type',1345,'fun',[{'type',1345,'product',[{'type',1345,'binary',[]}]}|[{'type',1345,'number',[]}]]}]}],
		%% Line 1372
		'spec' =
		    %% Line 1372
		    [{{'encode_scheme',1},[{'type',1372,'fun',[{'type',1372,'product',[{'type',1372,'union',[{'type',1372,'list',[]}|[{'type',1372,'binary',[]}]]}]}|[{'type',1372,'union',[{'type',1372,'list',[]}|[{'type',1372,'binary',[]}]]}]]}]}],
		%% Line 1383
		'spec' =
		    %% Line 1383
		    [{{'encode_userinfo',1},[{'type',1383,'fun',[{'type',1383,'product',[{'type',1383,'union',[{'type',1383,'list',[]}|[{'type',1383,'binary',[]}]]}]}|[{'type',1383,'union',[{'type',1383,'list',[]}|[{'type',1383,'binary',[]}]]}]]}]}],
		%% Line 1387
		'spec' =
		    %% Line 1387
		    [{{'encode_host',1},[{'type',1387,'fun',[{'type',1387,'product',[{'type',1387,'union',[{'type',1387,'list',[]}|[{'type',1387,'binary',[]}]]}]}|[{'type',1387,'union',[{'type',1387,'list',[]}|[{'type',1387,'binary',[]}]]}]]}]}],
		%% Line 1396
		'spec' =
		    %% Line 1396
		    [{{'encode_path',1},[{'type',1396,'fun',[{'type',1396,'product',[{'type',1396,'union',[{'type',1396,'list',[]}|[{'type',1396,'binary',[]}]]}]}|[{'type',1396,'union',[{'type',1396,'list',[]}|[{'type',1396,'binary',[]}]]}]]}]}],
		%% Line 1400
		'spec' =
		    %% Line 1400
		    [{{'encode_query',1},[{'type',1400,'fun',[{'type',1400,'product',[{'type',1400,'union',[{'type',1400,'list',[]}|[{'type',1400,'binary',[]}]]}]}|[{'type',1400,'union',[{'type',1400,'list',[]}|[{'type',1400,'binary',[]}]]}]]}]}],
		%% Line 1404
		'spec' =
		    %% Line 1404
		    [{{'encode_fragment',1},[{'type',1404,'fun',[{'type',1404,'product',[{'type',1404,'union',[{'type',1404,'list',[]}|[{'type',1404,'binary',[]}]]}]}|[{'type',1404,'union',[{'type',1404,'list',[]}|[{'type',1404,'binary',[]}]]}]]}]}],
		%% Line 1412
		'spec' =
		    %% Line 1412
		    [{{'decode',1},[{'type',1412,'fun',[{'type',1412,'product',[{'type',1412,'union',[{'type',1412,'list',[]}|[{'type',1412,'binary',[]}]]}]}|[{'type',1412,'union',[{'type',1412,'list',[]}|[{'type',1412,'binary',[]}]]}]]}]}],
		%% Line 1463
		'spec' =
		    %% Line 1463
		    [{{'is_host',1},[{'type',1463,'fun',[{'type',1463,'product',[{'type',1463,'char',[]}]}|[{'type',1463,'boolean',[]}]]}]}],
		%% Line 1468
		'spec' =
		    %% Line 1468
		    [{{'is_path',1},[{'type',1468,'fun',[{'type',1468,'product',[{'type',1468,'char',[]}]}|[{'type',1468,'boolean',[]}]]}]}],
		%% Line 1476
		'spec' =
		    %% Line 1476
		    [{{'encode',2},[{'type',1476,'fun',[{'type',1476,'product',[{'type',1476,'union',[{'type',1476,'list',[]}|[{'type',1476,'binary',[]}]]}|[{'type',1476,'fun',[]}]]}|[{'type',1476,'union',[{'type',1476,'list',[]}|[{'type',1476,'binary',[]}]]}]]}]}],
		%% Line 1492
		'spec' =
		    %% Line 1492
		    [{{'encode_codepoint_binary',2},[{'type',1492,'fun',[{'type',1492,'product',[{'type',1492,'integer',[]}|[{'type',1492,'fun',[]}]]}|[{'type',1492,'binary',[]}]]}]}],
		%% Line 1500
		'spec' =
		    %% Line 1500
		    [{{'percent_encode_binary',1},[{'type',1500,'fun',[{'type',1500,'product',[{'type',1500,'integer',[]}]}|[{'type',1500,'binary',[]}]]}]}]]
'normalize'/1 =
    %% Line 299
    fun (_0) ->
	%% Line 300
	apply 'normalize'/2
	    (_0, [])
'normalize'/2 =
    %% Line 308
    fun (_0,_1) ->
	case <_0,_1> of
	  <URIMap,[]>
	      when call 'erlang':'is_map'
		    (URIMap) ->
	      %% Line 309
	      try
		  let <_2> =
		      apply 'normalize_map'/1
			  (URIMap)
		  in  apply 'recompose'/1
			  (_2)
	      of <_3> ->
		  _3
	      catch <_6,_5,_4> ->
		  %% Line 311
		  case <_6,_5,_4> of
		    <( 'throw'
		       -| ['compiler_generated'] ),( ( _@r0
						       -| ['compiler_generated'] ) = ( {( 'error'
											  -| ['compiler_generated'] ),Atom,RestData}
										       -| ['compiler_generated'] )
						     -| ['compiler_generated'] ),_24> when 'true' ->
			_@r0
		    ( <_28,_29,_30> when 'true' ->
			  primop 'raise'
			      (_30, _29)
		      -| ['compiler_generated'] )
		  end
	  %% Line 313
	  <URIMap,['return_map']>
	      when call 'erlang':'is_map'
		    (URIMap) ->
	      %% Line 314
	      try
		  apply 'normalize_map'/1
		      (URIMap)
	      of <_7> ->
		  _7
	      catch <_10,_9,_8> ->
		  %% Line 316
		  case <_10,_9,_8> of
		    <( 'throw'
		       -| ['compiler_generated'] ),( ( _@r1
						       -| ['compiler_generated'] ) = ( {( 'error'
											  -| ['compiler_generated'] ),Atom,RestData}
										       -| ['compiler_generated'] )
						     -| ['compiler_generated'] ),_25> when 'true' ->
			_@r1
		    ( <_31,_32,_33> when 'true' ->
			  primop 'raise'
			      (_33, _32)
		      -| ['compiler_generated'] )
		  end
	  %% Line 318
	  <URIString,[]> when 'true' ->
	      %% Line 319
	      case apply 'parse'/1
		       (URIString) of
		%% Line 320
		<Value>
		    when call 'erlang':'is_map'
			  (Value) ->
		    %% Line 321
		    try
			let <_11> =
			    apply 'normalize_map'/1
				(Value)
			in  apply 'recompose'/1
				(_11)
		    of <_12> ->
			_12
		    catch <_15,_14,_13> ->
			%% Line 323
			case <_15,_14,_13> of
			  <( 'throw'
			     -| ['compiler_generated'] ),( ( _@r2
							     -| ['compiler_generated'] ) = ( {( 'error'
												-| ['compiler_generated'] ),Atom,RestData}
											     -| ['compiler_generated'] )
							   -| ['compiler_generated'] ),_26> when 'true' ->
			      _@r2
			  ( <_34,_35,_36> when 'true' ->
				primop 'raise'
				    (_36, _35)
			    -| ['compiler_generated'] )
			end
		%% Line 325
		<Error> when 'true' ->
		    %% Line 326
		    Error
	      end
	  %% Line 328
	  <URIString,['return_map']> when 'true' ->
	      %% Line 329
	      case apply 'parse'/1
		       (URIString) of
		%% Line 330
		<Value>
		    when call 'erlang':'is_map'
			  (Value) ->
		    %% Line 331
		    try
			apply 'normalize_map'/1
			    (Value)
		    of <_17> ->
			_17
		    catch <_20,_19,_18> ->
			%% Line 333
			case <_20,_19,_18> of
			  <( 'throw'
			     -| ['compiler_generated'] ),( ( _@r3
							     -| ['compiler_generated'] ) = ( {( 'error'
												-| ['compiler_generated'] ),Atom,RestData}
											     -| ['compiler_generated'] )
							   -| ['compiler_generated'] ),_27> when 'true' ->
			      _@r3
			  ( <_37,_38,_39> when 'true' ->
				primop 'raise'
				    (_39, _38)
			    -| ['compiler_generated'] )
			end
		%% Line 335
		<Error> when 'true' ->
		    %% Line 336
		    Error
	      end
	  ( <_23,_22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_23,_22})
		  -| [{'function_name',{'normalize',2}}] )
	    -| ['compiler_generated'] )
	end
'parse'/1 =
    %% Line 347
    fun (_0) ->
	case _0 of
	  <URIString>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      %% Line 348
	      try
		  apply 'parse_uri_reference'/2
		      (URIString, ~{}~)
	      of <_1> ->
		  _1
	      catch <_4,_3,_2> ->
		  %% Line 350
		  case <_4,_3,_2> of
		    <( 'throw'
		       -| ['compiler_generated'] ),( ( _@r0
						       -| ['compiler_generated'] ) = ( {( 'error'
											  -| ['compiler_generated'] ),Atom,RestData}
										       -| ['compiler_generated'] )
						     -| ['compiler_generated'] ),_12> when 'true' ->
			_@r0
		    ( <_14,_15,_16> when 'true' ->
			  primop 'raise'
			      (_16, _15)
		      -| ['compiler_generated'] )
		  end
	  %% Line 352
	  <URIString>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 353
	      try
		  let <Binary> =
		      call %% Line 354
			   'unicode':%% Line 354
				     'characters_to_binary'
			  (%% Line 354
			   URIString)
		  in  let <Map> =
			  apply %% Line 355
				'parse_uri_reference'/2
			      (%% Line 355
			       Binary, %% Line 355
				       ~{}~)
		      in  %% Line 356
			  apply 'convert_mapfields_to_list'/1
			      (Map)
	      of <_7> ->
		  _7
	      catch <_10,_9,_8> ->
		  %% Line 358
		  case <_10,_9,_8> of
		    <( 'throw'
		       -| ['compiler_generated'] ),( ( _@r1
						       -| ['compiler_generated'] ) = ( {( 'error'
											  -| ['compiler_generated'] ),Atom,RestData}
										       -| ['compiler_generated'] )
						     -| ['compiler_generated'] ),_13> when 'true' ->
			_@r1
		    ( <_17,_18,_19> when 'true' ->
			  primop 'raise'
			      (_19, _18)
		      -| ['compiler_generated'] )
		  end
	  ( <_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11})
		  -| [{'function_name',{'parse',1}}] )
	    -| ['compiler_generated'] )
	end
'recompose'/1 =
    %% Line 369
    fun (_0) ->
	%% Line 370
	case apply 'is_valid_map'/1
		 (_0) of
	  %% Line 371
	  <'false'> when 'true' ->
	      %% Line 372
	      {'error','invalid_map',_0}
	  %% Line 373
	  <'true'> when 'true' ->
	      %% Line 374
	      try
		  let <T0> =
		      apply %% Line 375
			    'update_scheme'/2
			  (_0, %% Line 375
			       'empty')
		  in  let <T1> =
			  apply %% Line 376
				'update_userinfo'/2
			      (_0, %% Line 376
				   T0)
		      in  let <T2> =
			      apply %% Line 377
				    'update_host'/2
				  (_0, %% Line 377
				       T1)
			  in  let <T3> =
				  apply %% Line 378
					'update_port'/2
				      (_0, %% Line 378
					   T2)
			      in  let <T4> =
				      apply %% Line 379
					    'update_path'/2
					  (_0, %% Line 379
					       T3)
				  in  let <T5> =
					  apply %% Line 380
						'update_query'/2
					      (_0, %% Line 380
						   T4)
				      in  %% Line 381
					  apply 'update_fragment'/2
					      (_0, T5)
	      of <_7> ->
		  _7
	      catch <_10,_9,_8> ->
		  %% Line 383
		  case <_10,_9,_8> of
		    <( 'throw'
		       -| ['compiler_generated'] ),( ( _@r0
						       -| ['compiler_generated'] ) = ( {( 'error'
											  -| ['compiler_generated'] ),Atom,RestData}
										       -| ['compiler_generated'] )
						     -| ['compiler_generated'] ),_13> when 'true' ->
			_@r0
		    ( <_14,_15,_16> when 'true' ->
			  primop 'raise'
			      (_16, _15)
		      -| ['compiler_generated'] )
		  end
	  ( <_11> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_11})
	    -| ['compiler_generated'] )
	end
'resolve'/2 =
    %% Line 396
    fun (_0,_1) ->
	%% Line 397
	apply 'resolve'/3
	    (_0, _1, [])
'resolve'/3 =
    %% Line 406
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <URIMap,BaseURIMap,Options>
	      when call 'erlang':'is_map'
		    (URIMap) ->
	      %% Line 407
	      case apply 'resolve_map'/2
		       (URIMap, BaseURIMap) of
		%% Line 408
		<TargetURIMap>
		    when call 'erlang':'is_map'
			  (TargetURIMap) ->
		    %% Line 409
		    case Options of
		      %% Line 410
		      <['return_map']> when 'true' ->
			  %% Line 411
			  TargetURIMap
		      %% Line 412
		      <[]> when 'true' ->
			  %% Line 413
			  apply 'recompose'/1
			      (TargetURIMap)
		      ( <_3> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_3})
			-| ['compiler_generated'] )
		    end
		%% Line 415
		<Error> when 'true' ->
		    %% Line 416
		    Error
	      end
	  %% Line 418
	  <URIString,BaseURIMap,Options> when 'true' ->
	      %% Line 419
	      case apply 'parse'/1
		       (URIString) of
		%% Line 420
		<URIMap>
		    when call 'erlang':'is_map'
			  (URIMap) ->
		    %% Line 421
		    apply 'resolve'/3
			(URIMap, BaseURIMap, Options)
		%% Line 422
		<Error> when 'true' ->
		    %% Line 423
		    Error
	      end
	end
'transcode'/2 =
    %% Line 435
    fun (_0,_1) ->
	case <_0,_1> of
	  <URIString,Options>
	      when call 'erlang':'is_binary'
		    (URIString) ->
	      %% Line 436
	      try
		  let <InEnc> =
		      call %% Line 437
			   'proplists':%% Line 437
				       'get_value'
			  (%% Line 437
			   'in_encoding', %% Line 437
					  Options, %% Line 437
						   'utf8')
		  in  let <OutEnc> =
			  call %% Line 438
			       'proplists':%% Line 438
					   'get_value'
			      (%% Line 438
			       'out_encoding', %% Line 438
					       Options, %% Line 438
							'utf8')
		      in  let <List> =
			      apply %% Line 439
				    'convert_to_list'/2
				  (%% Line 439
				   URIString, %% Line 439
					      InEnc)
			  in  let <Output> =
				  apply %% Line 440
					'transcode'/4
				      (%% Line 440
				       List, %% Line 440
					     [], %% Line 440
						 InEnc, %% Line 440
							OutEnc)
			      in  %% Line 441
				  apply 'convert_to_binary'/3
				      (Output, 'utf8', OutEnc)
	      of <_6> ->
		  _6
	      catch <_9,_8,_7> ->
		  %% Line 443
		  case <_9,_8,_7> of
		    <( 'throw'
		       -| ['compiler_generated'] ),( ( _@r0
						       -| ['compiler_generated'] ) = ( {( 'error'
											  -| ['compiler_generated'] ),Atom,RestData}
										       -| ['compiler_generated'] )
						     -| ['compiler_generated'] ),_19> when 'true' ->
			_@r0
		    ( <_21,_22,_23> when 'true' ->
			  primop 'raise'
			      (_23, _22)
		      -| ['compiler_generated'] )
		  end
	  %% Line 445
	  <URIString,Options>
	      when call 'erlang':'is_list'
		    (URIString) ->
	      let <InEnc> =
		  call %% Line 446
		       'proplists':%% Line 446
				   'get_value'
		      (%% Line 446
		       'in_encoding', %% Line 446
				      Options, %% Line 446
					       'utf8')
	      in  let <OutEnc> =
		      call %% Line 447
			   'proplists':%% Line 447
				       'get_value'
			  (%% Line 447
			   'out_encoding', %% Line 447
					   Options, %% Line 447
						    'utf8')
		  in  let <Flattened> =
			  apply %% Line 448
				'flatten_list'/2
			      (%% Line 448
			       URIString, %% Line 448
					  InEnc)
		      in  %% Line 449
			  try
			      apply 'transcode'/4
				  (Flattened, [], InEnc, OutEnc)
			  of <_13> ->
			      _13
			  catch <_16,_15,_14> ->
			      %% Line 451
			      case <_16,_15,_14> of
				<( 'throw'
				   -| ['compiler_generated'] ),( ( _@r1
								   -| ['compiler_generated'] ) = ( {( 'error'
												      -| ['compiler_generated'] ),Atom,RestData}
												   -| ['compiler_generated'] )
								 -| ['compiler_generated'] ),_20> when 'true' ->
				    _@r1
				( <_24,_25,_26> when 'true' ->
				      primop 'raise'
					  (_26, _25)
				  -| ['compiler_generated'] )
			      end
	  ( <_18,_17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_18,_17})
		  -| [{'function_name',{'transcode',2}}] )
	    -| ['compiler_generated'] )
	end
'compose_query'/1 =
    %% Line 470
    fun (_0) ->
	%% Line 471
	apply 'compose_query'/2
	    (_0, [{'encoding','utf8'}])
'compose_query'/2 =
    %% Line 479
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],_X_Options> when 'true' ->
	      %% Line 480
	      []
	  %% Line 481
	  <List,Options> when 'true' ->
	      %% Line 482
	      try
		  apply 'compose_query'/4
		      (List, Options, 'false', #{}#)
	      of <_2> ->
		  _2
	      catch <_5,_4,_3> ->
		  %% Line 484
		  case <_5,_4,_3> of
		    <( 'throw'
		       -| ['compiler_generated'] ),( ( _@r0
						       -| ['compiler_generated'] ) = ( {( 'error'
											  -| ['compiler_generated'] ),Atom,RestData}
										       -| ['compiler_generated'] )
						     -| ['compiler_generated'] ),_8> when 'true' ->
			_@r0
		    ( <_9,_10,_11> when 'true' ->
			  primop 'raise'
			      (_11, _10)
		      -| ['compiler_generated'] )
		  end
	end
'compose_query'/4 =
    %% Line 487
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[{Key,'true'}|Rest],Options,IsList,Acc> when 'true' ->
	      let <Separator> =
		  apply %% Line 488
			'get_separator'/1
		      (%% Line 488
		       Rest)
	      in  let <K> =
		      apply %% Line 489
			    'form_urlencode'/2
			  (%% Line 489
			   Key, %% Line 489
				Options)
		  in  let <_8> =
			  case %% Line 490
			       IsList of
			    %% Line 490
			    ( <( 'true'
				 -| ['compiler_generated'] )> when 'true' ->
				  'true'
			      -| ['compiler_generated'] )
			    %% Line 490
			    ( <( 'false'
				 -| ['compiler_generated'] )> when 'true' ->
				  call 'erlang':'is_list'
				      (Key)
			      -| ['compiler_generated'] )
			    %% Line 490
			    ( <_6> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {( 'badarg'
					      -| ['compiler_generated'] ),_6}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      in  let <_10> =
			      #{#<%% Line 491
				  Acc>(%% Line 491
				       'all',8,'binary',['unsigned'|['big']]),
				#<%% Line 491
				  K>(%% Line 491
				     'all',8,'binary',['unsigned'|['big']]),
				#<%% Line 491
				  Separator>(%% Line 491
					     'all',8,'binary',['unsigned'|['big']])}#
			  in  %% Line 491
			      apply 'compose_query'/4
				  (Rest, Options, _8, _10)
	  %% Line 492
	  <[{Key,Value}|Rest],Options,IsList,Acc> when 'true' ->
	      let <Separator> =
		  apply %% Line 493
			'get_separator'/1
		      (%% Line 493
		       Rest)
	      in  let <K> =
		      apply %% Line 494
			    'form_urlencode'/2
			  (%% Line 494
			   Key, %% Line 494
				Options)
		  in  let <V> =
			  apply %% Line 495
				'form_urlencode'/2
			      (%% Line 495
			       Value, %% Line 495
				      Options)
		      in  let <_18> =
			      case %% Line 496
				   IsList of
				%% Line 496
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      'true'
				  -| ['compiler_generated'] )
				%% Line 496
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( case <> of
					  ( <>
						when call 'erlang':'is_list'
						      (Key) ->
						'true'
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						call 'erlang':'is_list'
						    (Value)
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 496
				( <_14> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),_14}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  let <_20> =
				  #{#<%% Line 497
				      Acc>(%% Line 497
					   'all',8,'binary',['unsigned'|['big']]),
				    #<%% Line 497
				      K>(%% Line 497
					 'all',8,'binary',['unsigned'|['big']]),
				    #<%% Line 497
				      61>(%% Line 497
					  8,1,'integer',['unsigned'|['big']]),
				    #<%% Line 497
				      V>(%% Line 497
					 'all',8,'binary',['unsigned'|['big']]),
				    #<%% Line 497
				      Separator>(%% Line 497
						 'all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 497
				  apply 'compose_query'/4
				      (Rest, Options, _18, _20)
	  %% Line 498
	  <[],_X_Options,IsList,Acc> when 'true' ->
	      %% Line 499
	      case IsList of
		%% Line 500
		<'true'> when 'true' ->
		    apply 'convert_to_list'/2
			(Acc, 'utf8')
		%% Line 501
		<'false'> when 'true' ->
		    Acc
		( <_21> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_21})
		  -| ['compiler_generated'] )
	      end
	  ( <_25,_24,_23,_22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_25,_24,_23,_22})
		  -| [{'function_name',{'compose_query',4}}] )
	    -| ['compiler_generated'] )
	end
'dissect_query'/1 =
    %% Line 513
    fun (_0) ->
	case _0 of
	  <#{}#> when 'true' ->
	      %% Line 514
	      []
	  %% Line 515
	  <[]> when 'true' ->
	      %% Line 516
	      []
	  %% Line 517
	  <QueryString>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 518
	      try
		  let <B> =
		      apply %% Line 519
			    'convert_to_binary'/3
			  (%% Line 519
			   QueryString, %% Line 519
					'utf8', %% Line 519
						'utf8')
		  in  %% Line 520
		      apply 'dissect_query_key'/5
			  (B, 'true', [], #{}#, #{}#)
	      of <_2> ->
		  _2
	      catch <_5,_4,_3> ->
		  %% Line 522
		  case <_5,_4,_3> of
		    <( 'throw'
		       -| ['compiler_generated'] ),( ( _@r0
						       -| ['compiler_generated'] ) = ( {( 'error'
											  -| ['compiler_generated'] ),Atom,RestData}
										       -| ['compiler_generated'] )
						     -| ['compiler_generated'] ),_11> when 'true' ->
			_@r0
		    ( <_13,_14,_15> when 'true' ->
			  primop 'raise'
			      (_15, _14)
		      -| ['compiler_generated'] )
		  end
	  %% Line 524
	  <QueryString> when 'true' ->
	      %% Line 525
	      try
		  apply 'dissect_query_key'/5
		      (QueryString, 'false', [], #{}#, #{}#)
	      of <_6> ->
		  _6
	      catch <_9,_8,_7> ->
		  %% Line 527
		  case <_9,_8,_7> of
		    <( 'throw'
		       -| ['compiler_generated'] ),( ( _@r1
						       -| ['compiler_generated'] ) = ( {( 'error'
											  -| ['compiler_generated'] ),Atom,RestData}
										       -| ['compiler_generated'] )
						     -| ['compiler_generated'] ),_12> when 'true' ->
			_@r1
		    ( <_16,_17,_18> when 'true' ->
			  primop 'raise'
			      (_18, _17)
		      -| ['compiler_generated'] )
		  end
	end
'convert_mapfields_to_list'/1 =
    %% Line 538
    fun (_0) ->
	let <Fun> =
	    fun (_2,_1) ->
		%% Line 539
		case <_2,_1> of
		  <_7,V>
		      when call 'erlang':'is_binary'
			    (V) ->
		      call 'unicode':'characters_to_list'
			  (V)
		  %% Line 540
		  <_8,V> when 'true' ->
		      V
		end
	in  %% Line 541
	    call 'maps':'map'
		(Fun, _0)
'parse_uri_reference'/2 =
    %% Line 553
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{}#,_8> when 'true' ->
	      ~{'path'=>#{}#}~
	  %% Line 554
	  <URIString,URI> when 'true' ->
	      %% Line 555
	      try
		  apply 'parse_scheme_start'/2
		      (URIString, URI)
	      of <_2> ->
		  _2
	      catch <_5,_4,_3> ->
		  %% Line 557
		  case <_5,_4,_3> of
		    <( 'throw'
		       -| ['compiler_generated'] ),( {_9,_10,_11}
						     -| ['compiler_generated'] ),_12> when 'true' ->
			%% Line 558
			apply 'parse_relative_part'/2
			    (URIString, URI)
		    ( <_13,_14,_15> when 'true' ->
			  primop 'raise'
			      (_15, _14)
		      -| ['compiler_generated'] )
		  end
	end
'parse_relative_part'/2 =
    %% Line 577
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{#<47>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<47>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 579
	      try
		  apply 'parse_userinfo'/2
		      (Rest, URI)
	      of <_2> ->
		  case _2 of
		    %% Line 580
		    <{T,URI1}> when 'true' ->
			let <Userinfo> =
			    apply %% Line 581
				  'calculate_parsed_userinfo'/2
				(%% Line 581
				 Rest, %% Line 581
				       T)
			in  let <URI2> =
				apply %% Line 582
				      'maybe_add_path'/1
				    (%% Line 582
				     URI1)
			    in  %% Line 583
				case <> of
				  ( <>
					when call 'erlang':'is_map'
					      (URI2) ->
					~{'userinfo'=>Userinfo|URI2}~
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					( primop 'match_fail'
					      ({'badmap',URI2})
					  -| [{'eval_failure','badmap'}] )
				    -| ['compiler_generated'] )
				end
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'try_clause',_5})
		      -| ['compiler_generated'] )
		  end
	      catch <_8,_7,_6> ->
		  %% Line 585
		  case <_8,_7,_6> of
		    <( 'throw'
		       -| ['compiler_generated'] ),( {_28,_29,_30}
						     -| ['compiler_generated'] ),_31> when 'true' ->
			%% Line 586
			case apply 'parse_host'/2
				 (Rest, URI) of
			  <{T,URI1}> when 'true' ->
			      let <Host> =
				  apply %% Line 587
					'calculate_parsed_host_port'/2
				      (%% Line 587
				       Rest, %% Line 587
					     T)
			      in  let <URI2> =
				      apply %% Line 588
					    'maybe_add_path'/1
					  (%% Line 588
					   URI1)
				  in  let <_12> =
					  apply %% Line 589
						'remove_brackets'/1
					      (%% Line 589
					       Host)
				      in  %% Line 589
					  case <> of
					    ( <>
						  when call 'erlang':'is_map'
							(URI2) ->
						  ~{'host'=>_12|URI2}~
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  ( primop 'match_fail'
							({'badmap',URI2})
						    -| [{'eval_failure','badmap'}] )
					      -| ['compiler_generated'] )
					  end
			  ( <_9> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_9})
			    -| ['compiler_generated'] )
			end
		    ( <_32,_33,_34> when 'true' ->
			  primop 'raise'
			      (_34, _33)
		      -| ['compiler_generated'] )
		  end
	  %% Line 591
	  <#{#<47>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 592
	      case apply 'parse_segment'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <Path> =
			apply %% Line 593
			      'calculate_parsed_part'/2
			    (%% Line 593
			     Rest, %% Line 593
				   T)
		    in  let <_15> =
			    #{%% Line 594
			      #<47>(8,1,'integer',['unsigned'|['big']]),
			      #<%% Line 594
				Path>(%% Line 594
				      'all',8,'binary',['unsigned'|['big']])}#
			in  %% Line 594
			    case <> of
			      ( <>
				    when call 'erlang':'is_map'
					  (URI1) ->
				    ~{'path'=>_15|URI1}~
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    ( primop 'match_fail'
					  ({'badmap',URI1})
				      -| [{'eval_failure','badmap'}] )
				-| ['compiler_generated'] )
			    end
		( <_13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 595
	  <#{#<63>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 596
	      case apply 'parse_query'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <Query> =
			apply %% Line 597
			      'calculate_parsed_query_fragment'/2
			    (%% Line 597
			     Rest, %% Line 597
				   T)
		    in  let <URI2> =
			    apply %% Line 598
				  'maybe_add_path'/1
				(%% Line 598
				 URI1)
			in  %% Line 599
			    case <> of
			      ( <>
				    when call 'erlang':'is_map'
					  (URI2) ->
				    ~{'query'=>Query|URI2}~
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    ( primop 'match_fail'
					  ({'badmap',URI2})
				      -| [{'eval_failure','badmap'}] )
				-| ['compiler_generated'] )
			    end
		( <_16> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_16})
		  -| ['compiler_generated'] )
	      end
	  %% Line 600
	  <#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 601
	      case apply 'parse_fragment'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <Fragment> =
			apply %% Line 602
			      'calculate_parsed_query_fragment'/2
			    (%% Line 602
			     Rest, %% Line 602
				   T)
		    in  let <URI2> =
			    apply %% Line 603
				  'maybe_add_path'/1
				(%% Line 603
				 URI1)
			in  %% Line 604
			    case <> of
			      ( <>
				    when call 'erlang':'is_map'
					  (URI2) ->
				    ~{'fragment'=>Fragment|URI2}~
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    ( primop 'match_fail'
					  ({'badmap',URI2})
				      -| [{'eval_failure','badmap'}] )
				-| ['compiler_generated'] )
			    end
		( <_19> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_19})
		  -| ['compiler_generated'] )
	      end
	  %% Line 605
	  <#{#<Char>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 606
	      case apply 'is_segment_nz_nc'/1
		       (Char) of
		%% Line 607
		<'true'> when 'true' ->
		    %% Line 608
		    case apply 'parse_segment_nz_nc'/2
			     (Rest, URI) of
		      <{T,URI1}> when 'true' ->
			  let <Path> =
			      apply %% Line 609
				    'calculate_parsed_part'/2
				  (%% Line 609
				   Rest, %% Line 609
					 T)
			  in  let <_24> =
				  #{#<%% Line 610
				      Char>(%% Line 610
					    'undefined','undefined','utf8',['unsigned'|['big']]),
				    #<%% Line 610
				      Path>(%% Line 610
					    'all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 610
				  case <> of
				    ( <>
					  when call 'erlang':'is_map'
						(URI1) ->
					  ~{'path'=>_24|URI1}~
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  ( primop 'match_fail'
						({'badmap',URI1})
					    -| [{'eval_failure','badmap'}] )
				      -| ['compiler_generated'] )
				  end
		      ( <_22> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_22})
			-| ['compiler_generated'] )
		    end
		%% Line 611
		<'false'> when 'true' ->
		    call 'erlang':'throw'
			({'error','invalid_uri',[Char|[]]})
		( <_25> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_25})
		  -| ['compiler_generated'] )
	      end
	  ( <_27,_26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_27,_26})
		  -| [{'function_name',{'parse_relative_part',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_segment'/2 =
    %% Line 648
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{#<47>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 649
	      apply 'parse_segment'/2
		  (Rest, URI)
	  %% Line 650
	  <#{#<63>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 651
	      case apply 'parse_query'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <Query> =
			apply %% Line 652
			      'calculate_parsed_query_fragment'/2
			    (%% Line 652
			     Rest, %% Line 652
				   T)
		    in  %% Line 653
			case <> of
			  ( <>
				when call 'erlang':'is_map'
				      (URI1) ->
				let <_4> =
				    ~{'query'=>Query|URI1}~
				in  {Rest,_4}
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				( primop 'match_fail'
				      ({'badmap',URI1})
				  -| [{'eval_failure','badmap'}] )
			    -| ['compiler_generated'] )
			end
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 654
	  <#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 655
	      case apply 'parse_fragment'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <Fragment> =
			apply %% Line 656
			      'calculate_parsed_query_fragment'/2
			    (%% Line 656
			     Rest, %% Line 656
				   T)
		    in  %% Line 657
			case <> of
			  ( <>
				when call 'erlang':'is_map'
				      (URI1) ->
				let <_7> =
				    ~{'fragment'=>Fragment|URI1}~
				in  {Rest,_7}
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				( primop 'match_fail'
				      ({'badmap',URI1})
				  -| [{'eval_failure','badmap'}] )
			    -| ['compiler_generated'] )
			end
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 658
	  <#{#<Char>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 659
	      case apply 'is_pchar'/1
		       (Char) of
		%% Line 660
		<'true'> when 'true' ->
		    apply 'parse_segment'/2
			(Rest, URI)
		%% Line 661
		<'false'> when 'true' ->
		    call 'erlang':'throw'
			({'error','invalid_uri',[Char|[]]})
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 663
	  <#{}#,URI> when 'true' ->
	      %% Line 664
	      {#{}#,URI}
	  ( <_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9})
		  -| [{'function_name',{'parse_segment',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_segment_nz_nc'/2 =
    %% Line 671
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{#<47>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 672
	      apply 'parse_segment'/2
		  (Rest, URI)
	  %% Line 673
	  <#{#<63>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 674
	      case apply 'parse_query'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <Query> =
			apply %% Line 675
			      'calculate_parsed_query_fragment'/2
			    (%% Line 675
			     Rest, %% Line 675
				   T)
		    in  %% Line 676
			case <> of
			  ( <>
				when call 'erlang':'is_map'
				      (URI1) ->
				let <_4> =
				    ~{'query'=>Query|URI1}~
				in  {Rest,_4}
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				( primop 'match_fail'
				      ({'badmap',URI1})
				  -| [{'eval_failure','badmap'}] )
			    -| ['compiler_generated'] )
			end
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 677
	  <#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 678
	      case apply 'parse_fragment'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <Fragment> =
			apply %% Line 679
			      'calculate_parsed_query_fragment'/2
			    (%% Line 679
			     Rest, %% Line 679
				   T)
		    in  %% Line 680
			case <> of
			  ( <>
				when call 'erlang':'is_map'
				      (URI1) ->
				let <_7> =
				    ~{'fragment'=>Fragment|URI1}~
				in  {Rest,_7}
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				( primop 'match_fail'
				      ({'badmap',URI1})
				  -| [{'eval_failure','badmap'}] )
			    -| ['compiler_generated'] )
			end
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 681
	  <#{#<Char>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 682
	      case apply 'is_segment_nz_nc'/1
		       (Char) of
		%% Line 683
		<'true'> when 'true' ->
		    apply 'parse_segment_nz_nc'/2
			(Rest, URI)
		%% Line 684
		<'false'> when 'true' ->
		    call 'erlang':'throw'
			({'error','invalid_uri',[Char|[]]})
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 686
	  <#{}#,URI> when 'true' ->
	      %% Line 687
	      {#{}#,URI}
	  ( <_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9})
		  -| [{'function_name',{'parse_segment_nz_nc',2}}] )
	    -| ['compiler_generated'] )
	end
'is_pchar'/1 =
    %% Line 692
    fun (_0) ->
	case _0 of
	  <37> when 'true' ->
	      'true'
	  %% Line 693
	  <58> when 'true' ->
	      'true'
	  %% Line 694
	  <64> when 'true' ->
	      'true'
	  %% Line 695
	  <Char> when 'true' ->
	      ( case apply 'is_unreserved'/1
			 (Char) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			'true'
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'is_sub_delim'/1
			    (Char)
		    -| ['compiler_generated'] )
		  ( <_1> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_1}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'is_segment_nz_nc'/1 =
    %% Line 699
    fun (_0) ->
	case _0 of
	  <37> when 'true' ->
	      'true'
	  %% Line 700
	  <64> when 'true' ->
	      'true'
	  %% Line 701
	  <Char> when 'true' ->
	      ( case apply 'is_unreserved'/1
			 (Char) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			'true'
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'is_sub_delim'/1
			    (Char)
		    -| ['compiler_generated'] )
		  ( <_1> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_1}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'parse_scheme_start'/2 =
    %% Line 713
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{#<Char>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 714
	      case apply 'is_alpha'/1
		       (Char) of
		%% Line 715
		<'true'> when 'true' ->
		    case apply 'parse_scheme'/2
			     (Rest, URI) of
		      <{T,URI1}> when 'true' ->
			  let <Scheme> =
			      apply %% Line 716
				    'calculate_parsed_scheme'/2
				  (%% Line 716
				   Rest, %% Line 716
					 T)
			  in  let <URI2> =
				  apply %% Line 717
					'maybe_add_path'/1
				      (%% Line 717
				       URI1)
			      in  let <_5> =
				      #{#<%% Line 718
					  Char>(%% Line 718
						'undefined','undefined','utf8',['unsigned'|['big']]),
					#<%% Line 718
					  Scheme>(%% Line 718
						  'all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 718
				      case <> of
					( <>
					      when call 'erlang':'is_map'
						    (URI2) ->
					      ~{'scheme'=>_5|URI2}~
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      ( primop 'match_fail'
						    ({'badmap',URI2})
						-| [{'eval_failure','badmap'}] )
					  -| ['compiler_generated'] )
				      end
		      ( <_2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_2})
			-| ['compiler_generated'] )
		    end
		%% Line 719
		<'false'> when 'true' ->
		    call 'erlang':'throw'
			({'error','invalid_uri',[Char|[]]})
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_6})
		  -| ['compiler_generated'] )
	      end
	  ( <_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7})
		  -| [{'function_name',{'parse_scheme_start',2}}] )
	    -| ['compiler_generated'] )
	end
'maybe_add_path'/1 =
    %% Line 726
    fun (_0) ->
	%% Line 727
	case call 'maps':'is_key'
		 ('path', _0) of
	  %% Line 728
	  <'false'> when 'true' ->
	      %% Line 729
	      case <> of
		( <>
		      when call 'erlang':'is_map'
			    (_0) ->
		      ~{'path'=>#{}#|_0}~
		  -| ['compiler_generated'] )
		( <> when 'true' ->
		      ( primop 'match_fail'
			    ({'badmap',_0})
			-| [{'eval_failure','badmap'}] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 730
	  <_X_Else> when 'true' ->
	      _0
	end
'parse_scheme'/2 =
    %% Line 737
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{#<58>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 738
	      case apply 'parse_hier'/2
		       (Rest, URI) of
		<{_6,URI1}> when 'true' ->
		    %% Line 739
		    {Rest,URI1}
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 740
	  <#{#<Char>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 741
	      case apply 'is_scheme'/1
		       (Char) of
		%% Line 742
		<'true'> when 'true' ->
		    apply 'parse_scheme'/2
			(Rest, URI)
		%% Line 743
		<'false'> when 'true' ->
		    call 'erlang':'throw'
			({'error','invalid_uri',[Char|[]]})
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 745
	  <#{}#,_X_URI> when 'true' ->
	      %% Line 746
	      call 'erlang':'throw'
		  ({'error','invalid_uri',#{}#})
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'parse_scheme',2}}] )
	    -| ['compiler_generated'] )
	end
'is_scheme'/1 =
    %% Line 751
    fun (_0) ->
	case _0 of
	  <43> when 'true' ->
	      'true'
	  %% Line 752
	  <45> when 'true' ->
	      'true'
	  %% Line 753
	  <46> when 'true' ->
	      'true'
	  %% Line 754
	  <Char> when 'true' ->
	      ( case apply 'is_alpha'/1
			 (Char) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			'true'
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'is_digit'/1
			    (Char)
		    -| ['compiler_generated'] )
		  ( <_1> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_1}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'parse_hier'/2 =
    %% Line 764
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{#<47>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<47>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 766
	      try
		  apply 'parse_userinfo'/2
		      (Rest, URI)
	      of <_2> ->
		  case _2 of
		    %% Line 767
		    <{T,URI1}> when 'true' ->
			let <Userinfo> =
			    apply %% Line 768
				  'calculate_parsed_userinfo'/2
				(%% Line 768
				 Rest, %% Line 768
				       T)
			in  %% Line 769
			    case <> of
			      ( <>
				    when call 'erlang':'is_map'
					  (URI1) ->
				    let <_4> =
					~{'userinfo'=>Userinfo|URI1}~
				    in  {Rest,_4}
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    ( primop 'match_fail'
					  ({'badmap',URI1})
				      -| [{'eval_failure','badmap'}] )
				-| ['compiler_generated'] )
			    end
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'try_clause',_5})
		      -| ['compiler_generated'] )
		  end
	      catch <_8,_7,_6> ->
		  %% Line 771
		  case <_8,_7,_6> of
		    <( 'throw'
		       -| ['compiler_generated'] ),( {_30,_31,_32}
						     -| ['compiler_generated'] ),_33> when 'true' ->
			%% Line 772
			case apply 'parse_host'/2
				 (Rest, URI) of
			  <{T,URI1}> when 'true' ->
			      let <Host> =
				  apply %% Line 773
					'calculate_parsed_host_port'/2
				      (%% Line 773
				       Rest, %% Line 773
					     T)
			      in  let <_11> =
				      apply %% Line 774
					    'remove_brackets'/1
					  (%% Line 774
					   Host)
				  in  %% Line 774
				      case <> of
					( <>
					      when call 'erlang':'is_map'
						    (URI1) ->
					      let <_12> =
						  ~{'host'=>_11|URI1}~
					      in  {Rest,_12}
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      ( primop 'match_fail'
						    ({'badmap',URI1})
						-| [{'eval_failure','badmap'}] )
					  -| ['compiler_generated'] )
				      end
			  ( <_9> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_9})
			    -| ['compiler_generated'] )
			end
		    ( <_34,_35,_36> when 'true' ->
			  primop 'raise'
			      (_36, _35)
		      -| ['compiler_generated'] )
		  end
	  %% Line 776
	  <#{#<47>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 777
	      case apply 'parse_segment'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <Path> =
			apply %% Line 778
			      'calculate_parsed_part'/2
			    (%% Line 778
			     Rest, %% Line 778
				   T)
		    in  let <_15> =
			    #{%% Line 779
			      #<47>(8,1,'integer',['unsigned'|['big']]),
			      #<%% Line 779
				Path>(%% Line 779
				      'all',8,'binary',['unsigned'|['big']])}#
			in  %% Line 779
			    case <> of
			      ( <>
				    when call 'erlang':'is_map'
					  (URI1) ->
				    let <_16> =
					~{'path'=>_15|URI1}~
				    in  {Rest,_16}
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    ( primop 'match_fail'
					  ({'badmap',URI1})
				      -| [{'eval_failure','badmap'}] )
				-| ['compiler_generated'] )
			    end
		( <_13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 780
	  <#{#<63>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 781
	      case apply 'parse_query'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <Query> =
			apply %% Line 782
			      'calculate_parsed_query_fragment'/2
			    (%% Line 782
			     Rest, %% Line 782
				   T)
		    in  %% Line 783
			case <> of
			  ( <>
				when call 'erlang':'is_map'
				      (URI1) ->
				let <_19> =
				    ~{'query'=>Query|URI1}~
				in  {Rest,_19}
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				( primop 'match_fail'
				      ({'badmap',URI1})
				  -| [{'eval_failure','badmap'}] )
			    -| ['compiler_generated'] )
			end
		( <_17> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_17})
		  -| ['compiler_generated'] )
	      end
	  %% Line 784
	  <#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 785
	      case apply 'parse_fragment'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <Fragment> =
			apply %% Line 786
			      'calculate_parsed_query_fragment'/2
			    (%% Line 786
			     Rest, %% Line 786
				   T)
		    in  %% Line 787
			case <> of
			  ( <>
				when call 'erlang':'is_map'
				      (URI1) ->
				let <_22> =
				    ~{'fragment'=>Fragment|URI1}~
				in  {Rest,_22}
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				( primop 'match_fail'
				      ({'badmap',URI1})
				  -| [{'eval_failure','badmap'}] )
			    -| ['compiler_generated'] )
			end
		( <_20> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_20})
		  -| ['compiler_generated'] )
	      end
	  %% Line 788
	  <#{#<Char>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 789
	      case apply 'is_pchar'/1
		       (Char) of
		%% Line 790
		<'true'> when 'true' ->
		    %% Line 791
		    case apply 'parse_segment'/2
			     (Rest, URI) of
		      <{T,URI1}> when 'true' ->
			  let <Path> =
			      apply %% Line 792
				    'calculate_parsed_part'/2
				  (%% Line 792
				   Rest, %% Line 792
					 T)
			  in  let <_25> =
				  #{#<%% Line 793
				      Char>(%% Line 793
					    'undefined','undefined','utf8',['unsigned'|['big']]),
				    #<%% Line 793
				      Path>(%% Line 793
					    'all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 793
				  case <> of
				    ( <>
					  when call 'erlang':'is_map'
						(URI1) ->
					  let <_26> =
					      ~{'path'=>_25|URI1}~
					  in  {Rest,_26}
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  ( primop 'match_fail'
						({'badmap',URI1})
					    -| [{'eval_failure','badmap'}] )
				      -| ['compiler_generated'] )
				  end
		      ( <_23> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_23})
			-| ['compiler_generated'] )
		    end
		%% Line 794
		<'false'> when 'true' ->
		    call 'erlang':'throw'
			({'error','invalid_uri',[Char|[]]})
		( <_27> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_27})
		  -| ['compiler_generated'] )
	      end
	  %% Line 796
	  <#{}#,URI> when 'true' ->
	      %% Line 797
	      {#{}#,URI}
	  ( <_29,_28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_29,_28})
		  -| [{'function_name',{'parse_hier',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_userinfo'/2 =
    %% Line 825
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{#<64>('undefined','undefined','utf8',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 826
	      case <> of
		( <>
		      when call 'erlang':'is_map'
			    (URI) ->
		      let <_2> =
			  ~{'host'=>#{}#|URI}~
		      in  {#{}#,_2}
		  -| ['compiler_generated'] )
		( <> when 'true' ->
		      ( primop 'match_fail'
			    ({'badmap',URI})
			-| [{'eval_failure','badmap'}] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 827
	  <#{#<64>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 828
	      case apply 'parse_host'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <Host> =
			apply %% Line 829
			      'calculate_parsed_host_port'/2
			    (%% Line 829
			     Rest, %% Line 829
				   T)
		    in  let <_5> =
			    apply %% Line 830
				  'remove_brackets'/1
				(%% Line 830
				 Host)
			in  %% Line 830
			    case <> of
			      ( <>
				    when call 'erlang':'is_map'
					  (URI1) ->
				    let <_6> =
					~{'host'=>_5|URI1}~
				    in  {Rest,_6}
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    ( primop 'match_fail'
					  ({'badmap',URI1})
				      -| [{'eval_failure','badmap'}] )
				-| ['compiler_generated'] )
			    end
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 831
	  <#{#<Char>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 832
	      case apply 'is_userinfo'/1
		       (Char) of
		%% Line 833
		<'true'> when 'true' ->
		    apply 'parse_userinfo'/2
			(Rest, URI)
		%% Line 834
		<'false'> when 'true' ->
		    call 'erlang':'throw'
			({'error','invalid_uri',[Char|[]]})
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 836
	  <#{}#,_X_URI> when 'true' ->
	      %% Line 838
	      call 'erlang':'throw'
		  ({'error','invalid_uri',#{}#})
	  ( <_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8})
		  -| [{'function_name',{'parse_userinfo',2}}] )
	    -| ['compiler_generated'] )
	end
'is_userinfo'/1 =
    %% Line 843
    fun (_0) ->
	case _0 of
	  <37> when 'true' ->
	      'true'
	  %% Line 844
	  <58> when 'true' ->
	      'true'
	  %% Line 845
	  <Char> when 'true' ->
	      ( case apply 'is_unreserved'/1
			 (Char) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			'true'
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'is_sub_delim'/1
			    (Char)
		    -| ['compiler_generated'] )
		  ( <_1> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_1}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'parse_host'/2 =
    %% Line 888
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{#<58>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 889
	      case apply 'parse_port'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <H> =
			apply %% Line 890
			      'calculate_parsed_host_port'/2
			    (%% Line 890
			     Rest, %% Line 890
				   T)
		    in  let <Port> =
			    apply %% Line 891
				  'get_port'/1
				(%% Line 891
				 H)
			in  %% Line 892
			    case <> of
			      ( <>
				    when call 'erlang':'is_map'
					  (URI1) ->
				    let <_5> =
					~{'port'=>Port|URI1}~
				    in  {Rest,_5}
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    ( primop 'match_fail'
					  ({'badmap',URI1})
				      -| [{'eval_failure','badmap'}] )
				-| ['compiler_generated'] )
			    end
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 893
	  <#{#<47>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 894
	      case apply 'parse_segment'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <Path> =
			apply %% Line 895
			      'calculate_parsed_part'/2
			    (%% Line 895
			     Rest, %% Line 895
				   T)
		    in  let <_8> =
			    #{%% Line 896
			      #<47>(8,1,'integer',['unsigned'|['big']]),
			      #<%% Line 896
				Path>(%% Line 896
				      'all',8,'binary',['unsigned'|['big']])}#
			in  %% Line 896
			    case <> of
			      ( <>
				    when call 'erlang':'is_map'
					  (URI1) ->
				    let <_9> =
					~{'path'=>_8|URI1}~
				    in  {Rest,_9}
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    ( primop 'match_fail'
					  ({'badmap',URI1})
				      -| [{'eval_failure','badmap'}] )
				-| ['compiler_generated'] )
			    end
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 897
	  <#{#<63>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 898
	      case apply 'parse_query'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <Query> =
			apply %% Line 899
			      'calculate_parsed_query_fragment'/2
			    (%% Line 899
			     Rest, %% Line 899
				   T)
		    in  %% Line 900
			case <> of
			  ( <>
				when call 'erlang':'is_map'
				      (URI1) ->
				let <_12> =
				    ~{'query'=>Query|URI1}~
				in  {Rest,_12}
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				( primop 'match_fail'
				      ({'badmap',URI1})
				  -| [{'eval_failure','badmap'}] )
			    -| ['compiler_generated'] )
			end
		( <_10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 901
	  <#{#<91>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 902
	      apply 'parse_ipv6_bin'/3
		  (Rest, [], URI)
	  %% Line 903
	  <#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 904
	      case apply 'parse_fragment'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <Fragment> =
			apply %% Line 905
			      'calculate_parsed_query_fragment'/2
			    (%% Line 905
			     Rest, %% Line 905
				   T)
		    in  %% Line 906
			case <> of
			  ( <>
				when call 'erlang':'is_map'
				      (URI1) ->
				let <_15> =
				    ~{'fragment'=>Fragment|URI1}~
				in  {Rest,_15}
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				( primop 'match_fail'
				      ({'badmap',URI1})
				  -| [{'eval_failure','badmap'}] )
			    -| ['compiler_generated'] )
			end
		( <_13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 907
	  <#{#<Char>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 908
	      case apply 'is_digit'/1
		       (Char) of
		%% Line 909
		<'true'> when 'true' ->
		    %% Line 910
		    try
			apply 'parse_ipv4_bin'/3
			    (Rest, [Char|[]], URI)
		    of <_16> ->
			_16
		    catch <_19,_18,_17> ->
			%% Line 912
			case <_19,_18,_17> of
			  <( 'throw'
			     -| ['compiler_generated'] ),( {_25,_26,_27}
							   -| ['compiler_generated'] ),_28> when 'true' ->
			      let <_20> =
				  #{#<%% Line 913
				      Char>(%% Line 913
					    'undefined','undefined','utf8',['unsigned'|['big']]),
				    #<%% Line 913
				      Rest>(%% Line 913
					    'all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 913
				  apply 'parse_reg_name'/2
				      (_20, URI)
			  ( <_29,_30,_31> when 'true' ->
				primop 'raise'
				    (_31, _30)
			    -| ['compiler_generated'] )
			end
		%% Line 915
		<'false'> when 'true' ->
		    let <_21> =
			#{#<Char>('undefined','undefined','utf8',['unsigned'|['big']]),
			  #<Rest>('all',8,'binary',['unsigned'|['big']])}#
		    in  apply 'parse_reg_name'/2
			    (_21, URI)
		( <_22> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_22})
		  -| ['compiler_generated'] )
	      end
	  %% Line 917
	  <#{}#,URI> when 'true' ->
	      %% Line 918
	      {#{}#,URI}
	  ( <_24,_23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_24,_23})
		  -| [{'function_name',{'parse_host',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_reg_name'/2 =
    %% Line 922
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{#<58>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 923
	      case apply 'parse_port'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <H> =
			apply %% Line 924
			      'calculate_parsed_host_port'/2
			    (%% Line 924
			     Rest, %% Line 924
				   T)
		    in  let <Port> =
			    apply %% Line 925
				  'get_port'/1
				(%% Line 925
				 H)
			in  %% Line 926
			    case <> of
			      ( <>
				    when call 'erlang':'is_map'
					  (URI1) ->
				    let <_5> =
					~{'port'=>Port|URI1}~
				    in  {Rest,_5}
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    ( primop 'match_fail'
					  ({'badmap',URI1})
				      -| [{'eval_failure','badmap'}] )
				-| ['compiler_generated'] )
			    end
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 927
	  <#{#<47>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 928
	      case apply 'parse_segment'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <Path> =
			apply %% Line 929
			      'calculate_parsed_part'/2
			    (%% Line 929
			     Rest, %% Line 929
				   T)
		    in  let <_8> =
			    #{%% Line 930
			      #<47>(8,1,'integer',['unsigned'|['big']]),
			      #<%% Line 930
				Path>(%% Line 930
				      'all',8,'binary',['unsigned'|['big']])}#
			in  %% Line 930
			    case <> of
			      ( <>
				    when call 'erlang':'is_map'
					  (URI1) ->
				    let <_9> =
					~{'path'=>_8|URI1}~
				    in  {Rest,_9}
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    ( primop 'match_fail'
					  ({'badmap',URI1})
				      -| [{'eval_failure','badmap'}] )
				-| ['compiler_generated'] )
			    end
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 931
	  <#{#<63>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 932
	      case apply 'parse_query'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <Query> =
			apply %% Line 933
			      'calculate_parsed_query_fragment'/2
			    (%% Line 933
			     Rest, %% Line 933
				   T)
		    in  %% Line 934
			case <> of
			  ( <>
				when call 'erlang':'is_map'
				      (URI1) ->
				let <_12> =
				    ~{'query'=>Query|URI1}~
				in  {Rest,_12}
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				( primop 'match_fail'
				      ({'badmap',URI1})
				  -| [{'eval_failure','badmap'}] )
			    -| ['compiler_generated'] )
			end
		( <_10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 935
	  <#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 936
	      case apply 'parse_fragment'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <Fragment> =
			apply %% Line 937
			      'calculate_parsed_query_fragment'/2
			    (%% Line 937
			     Rest, %% Line 937
				   T)
		    in  %% Line 938
			case <> of
			  ( <>
				when call 'erlang':'is_map'
				      (URI1) ->
				let <_15> =
				    ~{'fragment'=>Fragment|URI1}~
				in  {Rest,_15}
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				( primop 'match_fail'
				      ({'badmap',URI1})
				  -| [{'eval_failure','badmap'}] )
			    -| ['compiler_generated'] )
			end
		( <_13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 939
	  <#{#<Char>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 940
	      case apply 'is_reg_name'/1
		       (Char) of
		%% Line 941
		<'true'> when 'true' ->
		    apply 'parse_reg_name'/2
			(Rest, URI)
		%% Line 942
		<'false'> when 'true' ->
		    call 'erlang':'throw'
			({'error','invalid_uri',[Char|[]]})
		( <_16> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_16})
		  -| ['compiler_generated'] )
	      end
	  %% Line 944
	  <#{}#,URI> when 'true' ->
	      %% Line 945
	      {#{}#,URI}
	  ( <_18,_17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_18,_17})
		  -| [{'function_name',{'parse_reg_name',2}}] )
	    -| ['compiler_generated'] )
	end
'is_reg_name'/1 =
    %% Line 949
    fun (_0) ->
	case _0 of
	  <37> when 'true' ->
	      'true'
	  %% Line 950
	  <Char> when 'true' ->
	      ( case apply 'is_unreserved'/1
			 (Char) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			'true'
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'is_sub_delim'/1
			    (Char)
		    -| ['compiler_generated'] )
		  ( <_1> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_1}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'parse_ipv4_bin'/3 =
    %% Line 954
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <#{#<58>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,URI> when 'true' ->
	      let <_3> =
		  call %% Line 955
		       ( 'lists'
			 -| ['result_not_wanted'] ):%% Line 955
						    ( 'reverse'
						      -| ['result_not_wanted'] )
		      (%% Line 955
		       Acc)
	      in  do  %% Line 955
		      apply 'validate_ipv4_address'/1
			  (_3)
		      %% Line 956
		      case apply 'parse_port'/2
			       (Rest, URI) of
			<{T,URI1}> when 'true' ->
			    let <H> =
				apply %% Line 957
				      'calculate_parsed_host_port'/2
				    (%% Line 957
				     Rest, %% Line 957
					   T)
			    in  let <Port> =
				    apply %% Line 958
					  'get_port'/1
					(%% Line 958
					 H)
				in  %% Line 959
				    case <> of
				      ( <>
					    when call 'erlang':'is_map'
						  (URI1) ->
					    let <_8> =
						~{'port'=>Port|URI1}~
					    in  {Rest,_8}
					-| ['compiler_generated'] )
				      ( <> when 'true' ->
					    ( primop 'match_fail'
						  ({'badmap',URI1})
					      -| [{'eval_failure','badmap'}] )
					-| ['compiler_generated'] )
				    end
			( <_5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_5})
			  -| ['compiler_generated'] )
		      end
	  %% Line 960
	  <#{#<47>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,URI> when 'true' ->
	      let <_9> =
		  call %% Line 961
		       ( 'lists'
			 -| ['result_not_wanted'] ):%% Line 961
						    ( 'reverse'
						      -| ['result_not_wanted'] )
		      (%% Line 961
		       Acc)
	      in  do  %% Line 961
		      apply 'validate_ipv4_address'/1
			  (_9)
		      %% Line 962
		      case apply 'parse_segment'/2
			       (Rest, URI) of
			<{T,URI1}> when 'true' ->
			    let <Path> =
				apply %% Line 963
				      'calculate_parsed_part'/2
				    (%% Line 963
				     Rest, %% Line 963
					   T)
			    in  let <_13> =
				    #{%% Line 964
				      #<47>(8,1,'integer',['unsigned'|['big']]),
				      #<%% Line 964
					Path>(%% Line 964
					      'all',8,'binary',['unsigned'|['big']])}#
				in  %% Line 964
				    case <> of
				      ( <>
					    when call 'erlang':'is_map'
						  (URI1) ->
					    let <_14> =
						~{'path'=>_13|URI1}~
					    in  {Rest,_14}
					-| ['compiler_generated'] )
				      ( <> when 'true' ->
					    ( primop 'match_fail'
						  ({'badmap',URI1})
					      -| [{'eval_failure','badmap'}] )
					-| ['compiler_generated'] )
				    end
			( <_11> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_11})
			  -| ['compiler_generated'] )
		      end
	  %% Line 965
	  <#{#<63>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,URI> when 'true' ->
	      let <_15> =
		  call %% Line 966
		       ( 'lists'
			 -| ['result_not_wanted'] ):%% Line 966
						    ( 'reverse'
						      -| ['result_not_wanted'] )
		      (%% Line 966
		       Acc)
	      in  do  %% Line 966
		      apply 'validate_ipv4_address'/1
			  (_15)
		      %% Line 967
		      case apply 'parse_query'/2
			       (Rest, URI) of
			<{T,URI1}> when 'true' ->
			    let <Query> =
				apply %% Line 968
				      'calculate_parsed_query_fragment'/2
				    (%% Line 968
				     Rest, %% Line 968
					   T)
			    in  %% Line 969
				case <> of
				  ( <>
					when call 'erlang':'is_map'
					      (URI1) ->
					let <_19> =
					    ~{'query'=>Query|URI1}~
					in  {Rest,_19}
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					( primop 'match_fail'
					      ({'badmap',URI1})
					  -| [{'eval_failure','badmap'}] )
				    -| ['compiler_generated'] )
				end
			( <_17> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_17})
			  -| ['compiler_generated'] )
		      end
	  %% Line 970
	  <#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,URI> when 'true' ->
	      let <_20> =
		  call %% Line 971
		       ( 'lists'
			 -| ['result_not_wanted'] ):%% Line 971
						    ( 'reverse'
						      -| ['result_not_wanted'] )
		      (%% Line 971
		       Acc)
	      in  do  %% Line 971
		      apply 'validate_ipv4_address'/1
			  (_20)
		      %% Line 972
		      case apply 'parse_fragment'/2
			       (Rest, URI) of
			<{T,URI1}> when 'true' ->
			    let <Fragment> =
				apply %% Line 973
				      'calculate_parsed_query_fragment'/2
				    (%% Line 973
				     Rest, %% Line 973
					   T)
			    in  %% Line 974
				case <> of
				  ( <>
					when call 'erlang':'is_map'
					      (URI1) ->
					let <_24> =
					    ~{'fragment'=>Fragment|URI1}~
					in  {Rest,_24}
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					( primop 'match_fail'
					      ({'badmap',URI1})
					  -| [{'eval_failure','badmap'}] )
				    -| ['compiler_generated'] )
				end
			( <_22> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_22})
			  -| ['compiler_generated'] )
		      end
	  %% Line 975
	  <#{#<Char>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,URI> when 'true' ->
	      %% Line 976
	      case apply 'is_ipv4'/1
		       (Char) of
		%% Line 977
		<'true'> when 'true' ->
		    apply 'parse_ipv4_bin'/3
			(Rest, [Char|Acc], URI)
		%% Line 978
		<'false'> when 'true' ->
		    call 'erlang':'throw'
			({'error','invalid_uri',[Char|[]]})
		( <_25> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_25})
		  -| ['compiler_generated'] )
	      end
	  %% Line 980
	  <#{}#,Acc,URI> when 'true' ->
	      let <_26> =
		  call %% Line 981
		       ( 'lists'
			 -| ['result_not_wanted'] ):%% Line 981
						    ( 'reverse'
						      -| ['result_not_wanted'] )
		      (%% Line 981
		       Acc)
	      in  do  %% Line 981
		      apply 'validate_ipv4_address'/1
			  (_26)
		      %% Line 982
		      {#{}#,URI}
	  ( <_30,_29,_28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_30,_29,_28})
		  -| [{'function_name',{'parse_ipv4_bin',3}}] )
	    -| ['compiler_generated'] )
	end
'is_ipv4'/1 =
    %% Line 987
    fun (_0) ->
	case _0 of
	  <46> when 'true' ->
	      'true'
	  %% Line 988
	  <Char> when 'true' ->
	      apply 'is_digit'/1
		  (Char)
	end
'validate_ipv4_address'/1 =
    %% Line 991
    fun (_0) ->
	%% Line 992
	case call 'inet':'parse_ipv4strict_address'
		 (_0) of
	  %% Line 993
	  <{'ok',_3}> when 'true' ->
	      _0
	  %% Line 994
	  <{'error',_4}> when 'true' ->
	      call 'erlang':'throw'
		  ({'error','invalid_uri',_0})
	  ( <_1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_1})
	    -| ['compiler_generated'] )
	end
'parse_ipv6_bin'/3 =
    %% Line 999
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <#{#<93>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,URI> when 'true' ->
	      let <_3> =
		  call %% Line 1000
		       ( 'lists'
			 -| ['result_not_wanted'] ):%% Line 1000
						    ( 'reverse'
						      -| ['result_not_wanted'] )
		      (%% Line 1000
		       Acc)
	      in  do  %% Line 1000
		      apply 'validate_ipv6_address'/1
			  (_3)
		      %% Line 1001
		      apply 'parse_ipv6_bin_end'/2
			  (Rest, URI)
	  %% Line 1002
	  <#{#<Char>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,URI> when 'true' ->
	      %% Line 1003
	      case apply 'is_ipv6'/1
		       (Char) of
		%% Line 1004
		<'true'> when 'true' ->
		    apply 'parse_ipv6_bin'/3
			(Rest, [Char|Acc], URI)
		%% Line 1005
		<'false'> when 'true' ->
		    call 'erlang':'throw'
			({'error','invalid_uri',[Char|[]]})
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1007
	  <#{}#,_X_Acc,_X_URI> when 'true' ->
	      %% Line 1008
	      call 'erlang':'throw'
		  ({'error','invalid_uri',#{}#})
	  ( <_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7,_6})
		  -| [{'function_name',{'parse_ipv6_bin',3}}] )
	    -| ['compiler_generated'] )
	end
'is_ipv6'/1 =
    %% Line 1012
    fun (_0) ->
	case _0 of
	  <58> when 'true' ->
	      'true'
	  %% Line 1013
	  <46> when 'true' ->
	      'true'
	  %% Line 1014
	  <Char> when 'true' ->
	      apply 'is_hex_digit'/1
		  (Char)
	end
'parse_ipv6_bin_end'/2 =
    %% Line 1018
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{#<58>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 1019
	      case apply 'parse_port'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <H> =
			apply %% Line 1020
			      'calculate_parsed_host_port'/2
			    (%% Line 1020
			     Rest, %% Line 1020
				   T)
		    in  let <Port> =
			    apply %% Line 1021
				  'get_port'/1
				(%% Line 1021
				 H)
			in  %% Line 1022
			    case <> of
			      ( <>
				    when call 'erlang':'is_map'
					  (URI1) ->
				    let <_5> =
					~{'port'=>Port|URI1}~
				    in  {Rest,_5}
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    ( primop 'match_fail'
					  ({'badmap',URI1})
				      -| [{'eval_failure','badmap'}] )
				-| ['compiler_generated'] )
			    end
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1023
	  <#{#<47>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 1024
	      case apply 'parse_segment'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <Path> =
			apply %% Line 1025
			      'calculate_parsed_part'/2
			    (%% Line 1025
			     Rest, %% Line 1025
				   T)
		    in  let <_8> =
			    #{%% Line 1026
			      #<47>(8,1,'integer',['unsigned'|['big']]),
			      #<%% Line 1026
				Path>(%% Line 1026
				      'all',8,'binary',['unsigned'|['big']])}#
			in  %% Line 1026
			    case <> of
			      ( <>
				    when call 'erlang':'is_map'
					  (URI1) ->
				    let <_9> =
					~{'path'=>_8|URI1}~
				    in  {Rest,_9}
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    ( primop 'match_fail'
					  ({'badmap',URI1})
				      -| [{'eval_failure','badmap'}] )
				-| ['compiler_generated'] )
			    end
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1027
	  <#{#<63>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 1028
	      case apply 'parse_query'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <Query> =
			apply %% Line 1029
			      'calculate_parsed_query_fragment'/2
			    (%% Line 1029
			     Rest, %% Line 1029
				   T)
		    in  %% Line 1030
			case <> of
			  ( <>
				when call 'erlang':'is_map'
				      (URI1) ->
				let <_12> =
				    ~{'query'=>Query|URI1}~
				in  {Rest,_12}
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				( primop 'match_fail'
				      ({'badmap',URI1})
				  -| [{'eval_failure','badmap'}] )
			    -| ['compiler_generated'] )
			end
		( <_10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1031
	  <#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 1032
	      case apply 'parse_fragment'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <Fragment> =
			apply %% Line 1033
			      'calculate_parsed_query_fragment'/2
			    (%% Line 1033
			     Rest, %% Line 1033
				   T)
		    in  %% Line 1034
			case <> of
			  ( <>
				when call 'erlang':'is_map'
				      (URI1) ->
				let <_15> =
				    ~{'fragment'=>Fragment|URI1}~
				in  {Rest,_15}
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				( primop 'match_fail'
				      ({'badmap',URI1})
				  -| [{'eval_failure','badmap'}] )
			    -| ['compiler_generated'] )
			end
		( <_13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1035
	  <#{#<Char>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 1036
	      case apply 'is_ipv6'/1
		       (Char) of
		%% Line 1037
		<'true'> when 'true' ->
		    apply 'parse_ipv6_bin_end'/2
			(Rest, URI)
		%% Line 1038
		<'false'> when 'true' ->
		    call 'erlang':'throw'
			({'error','invalid_uri',[Char|[]]})
		( <_16> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_16})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1040
	  <#{}#,URI> when 'true' ->
	      %% Line 1041
	      {#{}#,URI}
	  ( <_18,_17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_18,_17})
		  -| [{'function_name',{'parse_ipv6_bin_end',2}}] )
	    -| ['compiler_generated'] )
	end
'validate_ipv6_address'/1 =
    %% Line 1044
    fun (_0) ->
	%% Line 1045
	case call 'inet':'parse_ipv6strict_address'
		 (_0) of
	  %% Line 1046
	  <{'ok',_3}> when 'true' ->
	      _0
	  %% Line 1047
	  <{'error',_4}> when 'true' ->
	      call 'erlang':'throw'
		  ({'error','invalid_uri',_0})
	  ( <_1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_1})
	    -| ['compiler_generated'] )
	end
'parse_port'/2 =
    %% Line 1061
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{#<47>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 1062
	      case apply 'parse_segment'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <Path> =
			apply %% Line 1063
			      'calculate_parsed_part'/2
			    (%% Line 1063
			     Rest, %% Line 1063
				   T)
		    in  let <_4> =
			    #{%% Line 1064
			      #<47>(8,1,'integer',['unsigned'|['big']]),
			      #<%% Line 1064
				Path>(%% Line 1064
				      'all',8,'binary',['unsigned'|['big']])}#
			in  %% Line 1064
			    case <> of
			      ( <>
				    when call 'erlang':'is_map'
					  (URI1) ->
				    let <_5> =
					~{'path'=>_4|URI1}~
				    in  {Rest,_5}
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    ( primop 'match_fail'
					  ({'badmap',URI1})
				      -| [{'eval_failure','badmap'}] )
				-| ['compiler_generated'] )
			    end
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1065
	  <#{#<63>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 1066
	      case apply 'parse_query'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <Query> =
			apply %% Line 1067
			      'calculate_parsed_query_fragment'/2
			    (%% Line 1067
			     Rest, %% Line 1067
				   T)
		    in  %% Line 1068
			case <> of
			  ( <>
				when call 'erlang':'is_map'
				      (URI1) ->
				let <_8> =
				    ~{'query'=>Query|URI1}~
				in  {Rest,_8}
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				( primop 'match_fail'
				      ({'badmap',URI1})
				  -| [{'eval_failure','badmap'}] )
			    -| ['compiler_generated'] )
			end
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1069
	  <#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 1070
	      case apply 'parse_fragment'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <Fragment> =
			apply %% Line 1071
			      'calculate_parsed_query_fragment'/2
			    (%% Line 1071
			     Rest, %% Line 1071
				   T)
		    in  %% Line 1072
			case <> of
			  ( <>
				when call 'erlang':'is_map'
				      (URI1) ->
				let <_11> =
				    ~{'fragment'=>Fragment|URI1}~
				in  {Rest,_11}
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				( primop 'match_fail'
				      ({'badmap',URI1})
				  -| [{'eval_failure','badmap'}] )
			    -| ['compiler_generated'] )
			end
		( <_9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1073
	  <#{#<Char>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 1074
	      case apply 'is_digit'/1
		       (Char) of
		%% Line 1075
		<'true'> when 'true' ->
		    apply 'parse_port'/2
			(Rest, URI)
		%% Line 1076
		<'false'> when 'true' ->
		    call 'erlang':'throw'
			({'error','invalid_uri',[Char|[]]})
		( <_12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1078
	  <#{}#,URI> when 'true' ->
	      %% Line 1079
	      {#{}#,URI}
	  ( <_14,_13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13})
		  -| [{'function_name',{'parse_port',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_query'/2 =
    %% Line 1095
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 1096
	      case apply 'parse_fragment'/2
		       (Rest, URI) of
		<{T,URI1}> when 'true' ->
		    let <Fragment> =
			apply %% Line 1097
			      'calculate_parsed_query_fragment'/2
			    (%% Line 1097
			     Rest, %% Line 1097
				   T)
		    in  %% Line 1098
			case <> of
			  ( <>
				when call 'erlang':'is_map'
				      (URI1) ->
				let <_4> =
				    ~{'fragment'=>Fragment|URI1}~
				in  {Rest,_4}
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				( primop 'match_fail'
				      ({'badmap',URI1})
				  -| [{'eval_failure','badmap'}] )
			    -| ['compiler_generated'] )
			end
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1099
	  <#{#<Char>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 1100
	      case apply 'is_query'/1
		       (Char) of
		%% Line 1101
		<'true'> when 'true' ->
		    apply 'parse_query'/2
			(Rest, URI)
		%% Line 1102
		<'false'> when 'true' ->
		    call 'erlang':'throw'
			({'error','invalid_uri',[Char|[]]})
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1104
	  <#{}#,URI> when 'true' ->
	      %% Line 1105
	      {#{}#,URI}
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'parse_query',2}}] )
	    -| ['compiler_generated'] )
	end
'is_query'/1 =
    %% Line 1110
    fun (_0) ->
	case _0 of
	  <47> when 'true' ->
	      'true'
	  %% Line 1111
	  <63> when 'true' ->
	      'true'
	  %% Line 1112
	  <Char> when 'true' ->
	      apply 'is_pchar'/1
		  (Char)
	end
'parse_fragment'/2 =
    %% Line 1125
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{#<Char>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,URI> when 'true' ->
	      %% Line 1126
	      case apply 'is_fragment'/1
		       (Char) of
		%% Line 1127
		<'true'> when 'true' ->
		    apply 'parse_fragment'/2
			(Rest, URI)
		%% Line 1128
		<'false'> when 'true' ->
		    call 'erlang':'throw'
			({'error','invalid_uri',[Char|[]]})
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1130
	  <#{}#,URI> when 'true' ->
	      %% Line 1131
	      {#{}#,URI}
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'parse_fragment',2}}] )
	    -| ['compiler_generated'] )
	end
'is_fragment'/1 =
    %% Line 1136
    fun (_0) ->
	case _0 of
	  <47> when 'true' ->
	      'true'
	  %% Line 1137
	  <63> when 'true' ->
	      'true'
	  %% Line 1138
	  <Char> when 'true' ->
	      apply 'is_pchar'/1
		  (Char)
	end
'is_reserved'/1 =
    %% Line 1155
    fun (_0) ->
	case _0 of
	  <58> when 'true' ->
	      'true'
	  %% Line 1156
	  <47> when 'true' ->
	      'true'
	  %% Line 1157
	  <63> when 'true' ->
	      'true'
	  %% Line 1158
	  <35> when 'true' ->
	      'true'
	  %% Line 1159
	  <91> when 'true' ->
	      'true'
	  %% Line 1160
	  <93> when 'true' ->
	      'true'
	  %% Line 1161
	  <64> when 'true' ->
	      'true'
	  %% Line 1163
	  <33> when 'true' ->
	      'true'
	  %% Line 1164
	  <36> when 'true' ->
	      'true'
	  %% Line 1165
	  <38> when 'true' ->
	      'true'
	  %% Line 1166
	  <39> when 'true' ->
	      'true'
	  %% Line 1167
	  <40> when 'true' ->
	      'true'
	  %% Line 1168
	  <41> when 'true' ->
	      'true'
	  %% Line 1170
	  <42> when 'true' ->
	      'true'
	  %% Line 1171
	  <43> when 'true' ->
	      'true'
	  %% Line 1172
	  <44> when 'true' ->
	      'true'
	  %% Line 1173
	  <59> when 'true' ->
	      'true'
	  %% Line 1174
	  <61> when 'true' ->
	      'true'
	  %% Line 1175
	  <_2> when 'true' ->
	      'false'
	end
'is_sub_delim'/1 =
    %% Line 1180
    fun (_0) ->
	case _0 of
	  <33> when 'true' ->
	      'true'
	  %% Line 1181
	  <36> when 'true' ->
	      'true'
	  %% Line 1182
	  <38> when 'true' ->
	      'true'
	  %% Line 1183
	  <39> when 'true' ->
	      'true'
	  %% Line 1184
	  <40> when 'true' ->
	      'true'
	  %% Line 1185
	  <41> when 'true' ->
	      'true'
	  %% Line 1187
	  <42> when 'true' ->
	      'true'
	  %% Line 1188
	  <43> when 'true' ->
	      'true'
	  %% Line 1189
	  <44> when 'true' ->
	      'true'
	  %% Line 1190
	  <59> when 'true' ->
	      'true'
	  %% Line 1191
	  <61> when 'true' ->
	      'true'
	  %% Line 1192
	  <_2> when 'true' ->
	      'false'
	end
'is_unreserved'/1 =
    %% Line 1202
    fun (_0) ->
	case _0 of
	  <45> when 'true' ->
	      'true'
	  %% Line 1203
	  <46> when 'true' ->
	      'true'
	  %% Line 1204
	  <95> when 'true' ->
	      'true'
	  %% Line 1205
	  <126> when 'true' ->
	      'true'
	  %% Line 1206
	  <Char> when 'true' ->
	      ( case apply 'is_alpha'/1
			 (Char) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			'true'
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'is_digit'/1
			    (Char)
		    -| ['compiler_generated'] )
		  ( <_1> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_1}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'is_alpha'/1 =
    %% Line 1209
    fun (_0) ->
	case _0 of
	  <C>
	      when let <_1> =
		    call %% Line 1210
			 'erlang':%% Line 1210
				  '=<'
			(%% Line 1210
			 65, _0)
		in  let <_2> =
			call %% Line 1210
			     'erlang':%% Line 1210
				      '=<'
			    (_0, %% Line 1210
				 90)
		    in  let <_3> =
			    call %% Line 1210
				 'erlang':%% Line 1210
					  'and'
				(_1, _2)
			in  let <_4> =
				call %% Line 1211
				     'erlang':%% Line 1211
					      '=<'
				    (%% Line 1211
				     97, _0)
			    in  let <_5> =
				    call %% Line 1211
					 'erlang':%% Line 1211
						  '=<'
					(_0, %% Line 1211
					     122)
				in  let <_6> =
					call %% Line 1211
					     'erlang':%% Line 1211
						      'and'
					    (_4, _5)
				    in  %% Line 1210
					call 'erlang':'or'
					    (_3, _6) ->
	      %% Line 1211
	      'true'
	  %% Line 1212
	  <_8> when 'true' ->
	      'false'
	end
'is_digit'/1 =
    %% Line 1215
    fun (_0) ->
	case _0 of
	  <C>
	      when let <_1> =
		    call %% Line 1216
			 'erlang':%% Line 1216
				  '=<'
			(%% Line 1216
			 48, _0)
		in  let <_2> =
			call %% Line 1216
			     'erlang':%% Line 1216
				      '=<'
			    (_0, %% Line 1216
				 57)
		    in  %% Line 1216
			call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 1216
	      'true'
	  %% Line 1217
	  <_4> when 'true' ->
	      'false'
	end
'is_hex_digit'/1 =
    %% Line 1220
    fun (_0) ->
	case _0 of
	  <C>
	      when let <_1> =
		    call %% Line 1221
			 'erlang':%% Line 1221
				  '=<'
			(%% Line 1221
			 48, _0)
		in  let <_2> =
			call %% Line 1221
			     'erlang':%% Line 1221
				      '=<'
			    (_0, %% Line 1221
				 57)
		    in  let <_3> =
			    call %% Line 1221
				 'erlang':%% Line 1221
					  'and'
				(_1, _2)
			in  let <_4> =
				call %% Line 1221
				     'erlang':%% Line 1221
					      '=<'
				    (%% Line 1221
				     97, _0)
			    in  let <_5> =
				    call %% Line 1221
					 'erlang':%% Line 1221
						  '=<'
					(_0, %% Line 1221
					     102)
				in  let <_6> =
					call %% Line 1221
					     'erlang':%% Line 1221
						      'and'
					    (_4, _5)
				    in  let <_7> =
					    call %% Line 1221
						 'erlang':%% Line 1221
							  '=<'
						(%% Line 1221
						 65, _0)
					in  let <_8> =
						call %% Line 1221
						     'erlang':%% Line 1221
							      '=<'
						    (_0, %% Line 1221
							 70)
					    in  let <_9> =
						    call %% Line 1221
							 'erlang':%% Line 1221
								  'and'
							(_7, _8)
						in  let <_10> =
							call %% Line 1221
							     'erlang':%% Line 1221
								      'or'
							    (_6, _9)
						    in  %% Line 1221
							call 'erlang':'or'
							    (_3, _10) ->
	      %% Line 1221
	      'true'
	  %% Line 1222
	  <_12> when 'true' ->
	      'false'
	end
'remove_brackets'/1 =
    %% Line 1227
    fun (_0) ->
	case _0 of
	  <#{#<91>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_1> =
		  call %% Line 1228
		       'erlang':%% Line 1228
				'byte_size'
		      (%% Line 1228
		       Rest)
	      in  let <_2> =
		      call %% Line 1228
			   'erlang':%% Line 1228
				    '-'
			  (_1, %% Line 1228
			       1)
		  in  %% Line 1228
		      case call 'erlang':'split_binary'
			       (Rest, _2) of
			<{H,T}> when 'true' ->
			    %% Line 1229
			    case <> of
			      %% Line 1230
			      <>
				  when call 'erlang':'=:='
					(T,
					 #{#<93>(8,1,'integer',['unsigned'|['big']])}#) ->
				  H
			      %% Line 1231
			      <> when 'true' ->
				  Rest
			    end
			( <_3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_3})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1233
	  <Addr> when 'true' ->
	      Addr
	end
'calculate_parsed_scheme'/2 =
    %% Line 1240
    fun (_0,_1) ->
	case <_0,_1> of
	  <Input,#{}#> when 'true' ->
	      %% Line 1241
	      apply 'strip_last_char'/2
		  (Input, [58])
	  %% Line 1242
	  <Input,Unparsed> when 'true' ->
	      %% Line 1243
	      apply 'get_parsed_binary'/2
		  (Input, Unparsed)
	end
'calculate_parsed_part'/2 =
    %% Line 1247
    fun (_0,_1) ->
	case <_0,_1> of
	  <Input,#{}#> when 'true' ->
	      %% Line 1248
	      apply 'strip_last_char'/2
		  (Input, [63|[35]])
	  %% Line 1249
	  <Input,Unparsed> when 'true' ->
	      %% Line 1250
	      apply 'get_parsed_binary'/2
		  (Input, Unparsed)
	end
'calculate_parsed_userinfo'/2 =
    %% Line 1254
    fun (_0,_1) ->
	case <_0,_1> of
	  <Input,#{}#> when 'true' ->
	      %% Line 1255
	      apply 'strip_last_char'/2
		  (Input, [63|[35|[64]]])
	  %% Line 1256
	  <Input,Unparsed> when 'true' ->
	      %% Line 1257
	      apply 'get_parsed_binary'/2
		  (Input, Unparsed)
	end
'calculate_parsed_host_port'/2 =
    %% Line 1261
    fun (_0,_1) ->
	case <_0,_1> of
	  <Input,#{}#> when 'true' ->
	      %% Line 1262
	      apply 'strip_last_char'/2
		  (Input, [58|[63|[35|[47]]]])
	  %% Line 1263
	  <Input,Unparsed> when 'true' ->
	      %% Line 1264
	      apply 'get_parsed_binary'/2
		  (Input, Unparsed)
	end
'calculate_parsed_query_fragment'/2 =
    %% Line 1267
    fun (_0,_1) ->
	case <_0,_1> of
	  <Input,#{}#> when 'true' ->
	      %% Line 1268
	      apply 'strip_last_char'/2
		  (Input, [35])
	  %% Line 1269
	  <Input,Unparsed> when 'true' ->
	      %% Line 1270
	      apply 'get_parsed_binary'/2
		  (Input, Unparsed)
	end
'get_port'/1 =
    %% Line 1273
    fun (_0) ->
	case _0 of
	  <#{}#> when 'true' ->
	      %% Line 1274
	      'undefined'
	  %% Line 1275
	  <B> when 'true' ->
	      %% Line 1276
	      try
		  call 'erlang':'binary_to_integer'
		      (B)
	      of <_1> ->
		  _1
	      catch <_4,_3,_2> ->
		  %% Line 1278
		  case <_4,_3,_2> of
		    <( 'error'
		       -| ['compiler_generated'] ),( 'badarg'
						     -| ['compiler_generated'] ),_6> when 'true' ->
			%% Line 1279
			call 'erlang':'throw'
			    ({'error','invalid_uri',B})
		    ( <_7,_8,_9> when 'true' ->
			  primop 'raise'
			      (_9, _8)
		      -| ['compiler_generated'] )
		  end
	end
'strip_last_char'/2 =
    %% Line 1287
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{}#,_8> when 'true' ->
	      #{}#
	  %% Line 1288
	  <Input,[C0|[]]> when 'true' ->
	      %% Line 1289
	      case call 'binary':'last'
		       (Input) of
		%% Line 1290
		<_9>
		    when call 'erlang':'=:='
			  (_9,
			   C0) ->
		    %% Line 1291
		    apply 'init_binary'/1
			(Input)
		%% Line 1292
		<_X_Else> when 'true' ->
		    %% Line 1293
		    Input
	      end
	  %% Line 1295
	  <Input,[C0|[C1|[]]]> when 'true' ->
	      %% Line 1296
	      case call 'binary':'last'
		       (Input) of
		%% Line 1297
		<_10>
		    when call 'erlang':'=:='
			  (_10,
			   C0) ->
		    %% Line 1298
		    apply 'init_binary'/1
			(Input)
		%% Line 1299
		<_11>
		    when call 'erlang':'=:='
			  (_11,
			   C1) ->
		    %% Line 1300
		    apply 'init_binary'/1
			(Input)
		%% Line 1301
		<_X_Else> when 'true' ->
		    %% Line 1302
		    Input
	      end
	  %% Line 1304
	  <Input,[C0|[C1|[C2|[]]]]> when 'true' ->
	      %% Line 1305
	      case call 'binary':'last'
		       (Input) of
		%% Line 1306
		<_12>
		    when call 'erlang':'=:='
			  (_12,
			   C0) ->
		    %% Line 1307
		    apply 'init_binary'/1
			(Input)
		%% Line 1308
		<_13>
		    when call 'erlang':'=:='
			  (_13,
			   C1) ->
		    %% Line 1309
		    apply 'init_binary'/1
			(Input)
		%% Line 1310
		<_14>
		    when call 'erlang':'=:='
			  (_14,
			   C2) ->
		    %% Line 1311
		    apply 'init_binary'/1
			(Input)
		%% Line 1312
		<_X_Else> when 'true' ->
		    %% Line 1313
		    Input
	      end
	  %% Line 1315
	  <Input,[C0|[C1|[C2|[C3|[]]]]]> when 'true' ->
	      %% Line 1316
	      case call 'binary':'last'
		       (Input) of
		%% Line 1317
		<_15>
		    when call 'erlang':'=:='
			  (_15,
			   C0) ->
		    %% Line 1318
		    apply 'init_binary'/1
			(Input)
		%% Line 1319
		<_16>
		    when call 'erlang':'=:='
			  (_16,
			   C1) ->
		    %% Line 1320
		    apply 'init_binary'/1
			(Input)
		%% Line 1321
		<_17>
		    when call 'erlang':'=:='
			  (_17,
			   C2) ->
		    %% Line 1322
		    apply 'init_binary'/1
			(Input)
		%% Line 1323
		<_18>
		    when call 'erlang':'=:='
			  (_18,
			   C3) ->
		    %% Line 1324
		    apply 'init_binary'/1
			(Input)
		%% Line 1325
		<_X_Else> when 'true' ->
		    %% Line 1326
		    Input
	      end
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'strip_last_char',2}}] )
	    -| ['compiler_generated'] )
	end
'get_parsed_binary'/2 =
    %% Line 1331
    fun (_0,_1) ->
	let <_3> =
	    call %% Line 1332
		 'erlang':%% Line 1332
			  'byte_size'
		(_0)
	in  let <_2> =
		apply %% Line 1332
		      'byte_size_exl_head'/1
		    (_1)
	    in  let <_4> =
		    call %% Line 1332
			 'erlang':%% Line 1332
				  '-'
			(_3, _2)
		in  %% Line 1332
		    case call 'erlang':'split_binary'
			     (_0, _4) of
		      <{First,_8}> when 'true' ->
			  %% Line 1333
			  First
		      ( <_5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_5})
			-| ['compiler_generated'] )
		    end
'init_binary'/1 =
    %% Line 1337
    fun (_0) ->
	let <_1> =
	    call %% Line 1339
		 'erlang':%% Line 1339
			  'byte_size'
		(_0)
	in  let <_2> =
		call %% Line 1339
		     'erlang':%% Line 1339
			      '-'
		    (_1, %% Line 1339
			 1)
	    in  %% Line 1338
		case %% Line 1339
		     call 'erlang':'split_binary'
			 (_0, _2) of
		  <{Init,_5}> when 'true' ->
		      %% Line 1340
		      Init
		  ( <_3> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_3})
		    -| ['compiler_generated'] )
		end
'byte_size_exl_head'/1 =
    %% Line 1346
    fun (_0) ->
	case _0 of
	  <#{}#> when 'true' ->
	      0
	  %% Line 1347
	  <Binary> when 'true' ->
	      let <_1> =
		  call 'erlang':'byte_size'
		      (Binary)
	      in  call 'erlang':'+'
		      (_1, 1)
	end
'encode_scheme'/1 =
    %% Line 1373
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      %% Line 1374
	      call 'erlang':'throw'
		  ({'error','invalid_scheme',[]})
	  %% Line 1375
	  <#{}#> when 'true' ->
	      %% Line 1376
	      call 'erlang':'throw'
		  ({'error','invalid_scheme',#{}#})
	  %% Line 1377
	  <Scheme> when 'true' ->
	      %% Line 1378
	      case apply 'validate_scheme'/1
		       (Scheme) of
		%% Line 1379
		<'true'> when 'true' ->
		    Scheme
		%% Line 1380
		<'false'> when 'true' ->
		    call 'erlang':'throw'
			({'error','invalid_scheme',Scheme})
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_1})
		  -| ['compiler_generated'] )
	      end
	end
'encode_userinfo'/1 =
    %% Line 1384
    fun (_0) ->
	let <_1> = 'is_userinfo'/1
	in  %% Line 1385
	    apply 'encode'/2
		(_0, _1)
'encode_host'/1 =
    %% Line 1388
    fun (_0) ->
	%% Line 1389
	case apply 'classify_host'/1
		 (_0) of
	  %% Line 1390
	  <'regname'> when 'true' ->
	      _0
	  %% Line 1391
	  <'ipv4'> when 'true' ->
	      _0
	  %% Line 1392
	  <'ipv6'> when 'true' ->
	      apply 'bracket_ipv6'/1
		  (_0)
	  %% Line 1393
	  <'other'> when 'true' ->
	      let <_1> = 'is_reg_name'/1
	      in  apply 'encode'/2
		      (_0, _1)
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_2})
	    -| ['compiler_generated'] )
	end
'encode_path'/1 =
    %% Line 1397
    fun (_0) ->
	let <_1> = 'is_path'/1
	in  %% Line 1398
	    apply 'encode'/2
		(_0, _1)
'encode_query'/1 =
    %% Line 1401
    fun (_0) ->
	let <_1> = 'is_query'/1
	in  %% Line 1402
	    apply 'encode'/2
		(_0, _1)
'encode_fragment'/1 =
    %% Line 1405
    fun (_0) ->
	let <_1> = 'is_fragment'/1
	in  %% Line 1406
	    apply 'encode'/2
		(_0, _1)
'decode'/1 =
    %% Line 1413
    fun (_0) ->
	%% Line 1414
	apply 'decode'/2
	    (_0, #{}#)
'decode'/2 =
    %% Line 1416
    fun (_0,_1) ->
	case <_0,_1> of
	  <L,Acc>
	      when call 'erlang':'is_list'
		    (L) ->
	      let <B0> =
		  call %% Line 1417
		       'unicode':%% Line 1417
				 'characters_to_binary'
		      (%% Line 1417
		       L)
	      in  let <B1> =
		      apply %% Line 1418
			    'decode'/2
			  (%% Line 1418
			   B0, %% Line 1418
			       Acc)
		  in  %% Line 1419
		      call 'unicode':'characters_to_list'
			  (B1)
	  %% Line 1420
	  <#{#<37>(8,1,'integer',['unsigned'|['big']]),
	     #<C0>(8,1,'integer',['unsigned'|['big']]),
	     #<C1>(8,1,'integer',['unsigned'|['big']]),
	     #<Cs>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      let <_6> =
		  case %% Line 1421
		       apply 'is_hex_digit'/1
			   (C0) of
		    %% Line 1421
		    ( <( 'true'
			 -| ['compiler_generated'] )> when 'true' ->
			  apply 'is_hex_digit'/1
			      (C1)
		      -| ['compiler_generated'] )
		    %% Line 1421
		    ( <( 'false'
			 -| ['compiler_generated'] )> when 'true' ->
			  'false'
		      -| ['compiler_generated'] )
		    %% Line 1421
		    ( <_4> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {( 'badarg'
				      -| ['compiler_generated'] ),_4}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 1421
		  case _6 of
		    %% Line 1422
		    <'true'> when 'true' ->
			let <_30> =
			    case <> of
			      %% Line 1423
			      <>
				  when try
					( let <_21> =
					      case call 'erlang':'>='
						       (C0, 48) of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      call 'erlang':'=<'
							  (C0, 57)
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
						( <_19> when 'true' ->
						      _19
						  -| ['compiler_generated'] )
					      end
					  in  ( call 'erlang':'=:='
						    (( _21
						       -| ['compiler_generated'] ), 'true')
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  call 'erlang':'-'
				      (C0, 48)
			      %% Line 1423
			      <>
				  when try
					( let <_24> =
					      case call 'erlang':'>='
						       (C0, 65) of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      call 'erlang':'=<'
							  (C0, 70)
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
						( <_22> when 'true' ->
						      _22
						  -| ['compiler_generated'] )
					      end
					  in  ( call 'erlang':'=:='
						    (( _24
						       -| ['compiler_generated'] ), 'true')
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  let <_25> =
				      call 'erlang':'-'
					  (C0, 65)
				  in  call 'erlang':'+'
					  (_25, 10)
			      %% Line 1423
			      <>
				  when try
					( let <_28> =
					      case call 'erlang':'>='
						       (C0, 97) of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      call 'erlang':'=<'
							  (C0, 102)
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
						( <_26> when 'true' ->
						      _26
						  -| ['compiler_generated'] )
					      end
					  in  ( call 'erlang':'=:='
						    (( _28
						       -| ['compiler_generated'] ), 'true')
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  let <_29> =
				      call 'erlang':'-'
					  (C0, 97)
				  in  call 'erlang':'+'
					  (_29, 10)
			      ( <> when 'true' ->
				    %% Line 1423
				    primop 'match_fail'
					('if_clause')
				-| ['compiler_generated'] )
			    end
			in  let <_31> =
				call %% Line 1423
				     'erlang':%% Line 1423
					      '*'
				    (_30, %% Line 1423
					  16)
			    in  let <_18> =
				    case <> of
				      %% Line 1423
				      <>
					  when try
						( let <_9> =
						      case call 'erlang':'>='
							       (C1, 48) of
							( <( 'true'
							     -| ['compiler_generated'] )> when 'true' ->
							      call 'erlang':'=<'
								  (C1, 57)
							  -| ['compiler_generated'] )
							( <( 'false'
							     -| ['compiler_generated'] )> when 'true' ->
							      'false'
							  -| ['compiler_generated'] )
							( <_7> when 'true' ->
							      _7
							  -| ['compiler_generated'] )
						      end
						  in  ( call 'erlang':'=:='
							    (( _9
							       -| ['compiler_generated'] ), 'true')
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  call 'erlang':'-'
					      (C1, 48)
				      %% Line 1423
				      <>
					  when try
						( let <_12> =
						      case call 'erlang':'>='
							       (C1, 65) of
							( <( 'true'
							     -| ['compiler_generated'] )> when 'true' ->
							      call 'erlang':'=<'
								  (C1, 70)
							  -| ['compiler_generated'] )
							( <( 'false'
							     -| ['compiler_generated'] )> when 'true' ->
							      'false'
							  -| ['compiler_generated'] )
							( <_10> when 'true' ->
							      _10
							  -| ['compiler_generated'] )
						      end
						  in  ( call 'erlang':'=:='
							    (( _12
							       -| ['compiler_generated'] ), 'true')
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  let <_13> =
					      call 'erlang':'-'
						  (C1, 65)
					  in  call 'erlang':'+'
						  (_13, 10)
				      %% Line 1423
				      <>
					  when try
						( let <_16> =
						      case call 'erlang':'>='
							       (C1, 97) of
							( <( 'true'
							     -| ['compiler_generated'] )> when 'true' ->
							      call 'erlang':'=<'
								  (C1, 102)
							  -| ['compiler_generated'] )
							( <( 'false'
							     -| ['compiler_generated'] )> when 'true' ->
							      'false'
							  -| ['compiler_generated'] )
							( <_14> when 'true' ->
							      _14
							  -| ['compiler_generated'] )
						      end
						  in  ( call 'erlang':'=:='
							    (( _16
							       -| ['compiler_generated'] ), 'true')
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  let <_17> =
					      call 'erlang':'-'
						  (C1, 97)
					  in  call 'erlang':'+'
						  (_17, 10)
				      ( <> when 'true' ->
					    %% Line 1423
					    primop 'match_fail'
						('if_clause')
					-| ['compiler_generated'] )
				    end
				in  let <B> =
					call %% Line 1423
					     'erlang':%% Line 1423
						      '+'
					    (_31, _18)
				    in  %% Line 1424
					case apply 'is_reserved'/1
						 (B) of
					  %% Line 1425
					  <'true'> when 'true' ->
					      let <H0> =
						  apply %% Line 1431
							'hex_to_upper'/1
						      (%% Line 1431
						       C0)
					      in  let <H1> =
						      apply %% Line 1432
							    'hex_to_upper'/1
							  (%% Line 1432
							   C1)
						  in  let <_35> =
							  #{#<%% Line 1433
							      Acc>(%% Line 1433
								   'all',8,'binary',['unsigned'|['big']]),
							    #<%% Line 1433
							      37>(%% Line 1433
								  8,1,'integer',['unsigned'|['big']]),
							    #<%% Line 1433
							      H0>(%% Line 1433
								  8,1,'integer',['unsigned'|['big']]),
							    #<%% Line 1433
							      H1>(%% Line 1433
								  8,1,'integer',['unsigned'|['big']])}#
						      in  %% Line 1433
							  apply 'decode'/2
							      (Cs, _35)
					  %% Line 1434
					  <'false'> when 'true' ->
					      let <_36> =
						  #{#<%% Line 1435
						      Acc>(%% Line 1435
							   'all',8,'binary',['unsigned'|['big']]),
						    #<%% Line 1435
						      B>(%% Line 1435
							 8,1,'integer',['unsigned'|['big']])}#
					      in  %% Line 1435
						  apply 'decode'/2
						      (Cs, _36)
					  ( <_37> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_37})
					    -| ['compiler_generated'] )
					end
		    %% Line 1437
		    <'false'> when 'true' ->
			let <_38> =
			    #{#<37>(8,1,'integer',['unsigned'|['big']]),
			      #<C0>(8,1,'integer',['unsigned'|['big']]),
			      #<C1>(8,1,'integer',['unsigned'|['big']])}#
			in  call 'erlang':'throw'
				({'error','invalid_percent_encoding',_38})
		    ( <_39> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_39})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1439
	  <#{#<C>(8,1,'integer',['unsigned'|['big']]),
	     #<Cs>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      let <_40> =
		  #{#<%% Line 1440
		      Acc>(%% Line 1440
			   'all',8,'binary',['unsigned'|['big']]),
		    #<%% Line 1440
		      C>(%% Line 1440
			 8,1,'integer',['unsigned'|['big']])}#
	      in  %% Line 1440
		  apply 'decode'/2
		      (Cs, _40)
	  %% Line 1441
	  <#{}#,Acc> when 'true' ->
	      %% Line 1442
	      apply 'check_utf8'/1
		  (Acc)
	  ( <_42,_41> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_42,_41})
		  -| [{'function_name',{'decode',2}}] )
	    -| ['compiler_generated'] )
	end
'check_utf8'/1 =
    %% Line 1445
    fun (_0) ->
	%% Line 1446
	case call 'unicode':'characters_to_list'
		 (_0) of
	  %% Line 1447
	  <{'incomplete',_3,_4}> when 'true' ->
	      %% Line 1448
	      call 'erlang':'throw'
		  ({'error','invalid_utf8',_0})
	  %% Line 1449
	  <{'error',_5,_6}> when 'true' ->
	      %% Line 1450
	      call 'erlang':'throw'
		  ({'error','invalid_utf8',_0})
	  %% Line 1451
	  <_7> when 'true' ->
	      _0
	end
'hex_to_upper'/1 =
    %% Line 1455
    fun (_0) ->
	case _0 of
	  <H>
	      when let <_1> =
		    call 'erlang':'=<'
			(97, _0)
		in  let <_2> =
			call 'erlang':'=<'
			    (_0, 102)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 1456
	      call 'erlang':'-'
		  (H, 32)
	  %% Line 1457
	  <H>
	      when let <_3> =
		    call 'erlang':'=<'
			(48, _0)
		in  let <_4> =
			call 'erlang':'=<'
			    (_0, 57)
		    in  let <_5> =
			    call 'erlang':'and'
				(_3, _4)
			in  let <_6> =
				call 'erlang':'=<'
				    (65, _0)
			    in  let <_7> =
				    call 'erlang':'=<'
					(_0, 70)
				in  let <_8> =
					call 'erlang':'and'
					    (_6, _7)
				    in  call 'erlang':'or'
					    (_5, _8) ->
	      %% Line 1458
	      H
	  %% Line 1459
	  <H> when 'true' ->
	      %% Line 1460
	      call 'erlang':'throw'
		  ({'error','invalid_input',H})
	end
'is_host'/1 =
    %% Line 1464
    fun (_0) ->
	case _0 of
	  <58> when 'true' ->
	      'true'
	  %% Line 1465
	  <Char> when 'true' ->
	      ( case apply 'is_unreserved'/1
			 (Char) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			'true'
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'is_sub_delim'/1
			    (Char)
		    -| ['compiler_generated'] )
		  ( <_1> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_1}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'is_path'/1 =
    %% Line 1469
    fun (_0) ->
	case _0 of
	  <47> when 'true' ->
	      'true'
	  %% Line 1470
	  <Char> when 'true' ->
	      apply 'is_pchar'/1
		  (Char)
	end
'encode'/2 =
    %% Line 1477
    fun (_0,_1) ->
	case <_0,_1> of
	  <Component,Fun>
	      when call 'erlang':'is_list'
		    (Component) ->
	      let <B> =
		  call %% Line 1478
		       'unicode':%% Line 1478
				 'characters_to_binary'
		      (%% Line 1478
		       Component)
	      in  let <_3> =
		      apply %% Line 1479
			    'encode'/3
			  (%% Line 1479
			   B, %% Line 1479
			      Fun, %% Line 1479
				   #{}#)
		  in  %% Line 1479
		      call 'unicode':'characters_to_list'
			  (_3)
	  %% Line 1480
	  <Component,Fun>
	      when call 'erlang':'is_binary'
		    (Component) ->
	      %% Line 1481
	      apply 'encode'/3
		  (Component, Fun, #{}#)
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'encode',2}}] )
	    -| ['compiler_generated'] )
	end
'encode'/3 =
    %% Line 1483
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <#{#<Char>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Fun,Acc> when 'true' ->
	      let <C> =
		  apply %% Line 1484
			'encode_codepoint_binary'/2
		      (%% Line 1484
		       Char, %% Line 1484
			     Fun)
	      in  let <_4> =
		      #{#<%% Line 1485
			  Acc>(%% Line 1485
			       'all',8,'binary',['unsigned'|['big']]),
			#<%% Line 1485
			  C>(%% Line 1485
			     'all',8,'binary',['unsigned'|['big']])}#
		  in  %% Line 1485
		      apply 'encode'/3
			  (Rest, Fun, _4)
	  %% Line 1486
	  <#{#<Char>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,_X_Fun,_X_Acc> when 'true' ->
	      let <_5> =
		  #{#<%% Line 1487
		      Char>(%% Line 1487
			    8,1,'integer',['unsigned'|['big']]),
		    #<%% Line 1487
		      Rest>(%% Line 1487
			    'all',8,'binary',['unsigned'|['big']])}#
	      in  %% Line 1487
		  call 'erlang':'throw'
		      ({'error','invalid_input',_5})
	  %% Line 1488
	  <#{}#,_X_Fun,Acc> when 'true' ->
	      %% Line 1489
	      Acc
	  ( <_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7,_6})
		  -| [{'function_name',{'encode',3}}] )
	    -| ['compiler_generated'] )
	end
'encode_codepoint_binary'/2 =
    %% Line 1493
    fun (_0,_1) ->
	%% Line 1494
	case apply _1
		 (_0) of
	  %% Line 1495
	  <'false'> when 'true' ->
	      apply 'percent_encode_binary'/1
		  (_0)
	  %% Line 1496
	  <'true'> when 'true' ->
	      #{#<_0>(8,1,'integer',['unsigned'|['big']])}#
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_2})
	    -| ['compiler_generated'] )
	end
'percent_encode_binary'/1 =
    %% Line 1501
    fun (_0) ->
	let <_1> =
	    #{#<_0>(%% Line 1502
		    'undefined','undefined','utf8',['unsigned'|['big']])}#
	in  %% Line 1502
	    apply 'percent_encode_binary'/2
		(_1, #{}#)
'percent_encode_binary'/2 =
    %% Line 1505
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{#<A>(4,1,'integer',['unsigned'|['big']]),
	     #<B>(4,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      let <_17> =
		  case <> of
		    %% Line 1506
		    <>
			when try
			      ( let <_12> =
				    case call 'erlang':'>='
					     (A, 0) of
				      ( <( 'true'
					   -| ['compiler_generated'] )> when 'true' ->
					    call 'erlang':'=<'
						(A, 9)
					-| ['compiler_generated'] )
				      ( <( 'false'
					   -| ['compiler_generated'] )> when 'true' ->
					    'false'
					-| ['compiler_generated'] )
				      ( <_10> when 'true' ->
					    _10
					-| ['compiler_generated'] )
				    end
				in  ( call 'erlang':'=:='
					  (( _12
					     -| ['compiler_generated'] ), 'true')
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			call 'erlang':'+'
			    (A, 48)
		    %% Line 1506
		    <>
			when try
			      ( let <_15> =
				    case call 'erlang':'>='
					     (A, 10) of
				      ( <( 'true'
					   -| ['compiler_generated'] )> when 'true' ->
					    call 'erlang':'=<'
						(A, 15)
					-| ['compiler_generated'] )
				      ( <( 'false'
					   -| ['compiler_generated'] )> when 'true' ->
					    'false'
					-| ['compiler_generated'] )
				      ( <_13> when 'true' ->
					    _13
					-| ['compiler_generated'] )
				    end
				in  ( call 'erlang':'=:='
					  (( _15
					     -| ['compiler_generated'] ), 'true')
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			let <_16> =
			    call 'erlang':'+'
				(A, 65)
			in  call 'erlang':'-'
				(_16, 10)
		    ( <> when 'true' ->
			  %% Line 1506
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	      in  let <_9> =
		      case <> of
			%% Line 1506
			<>
			    when try
				  ( let <_4> =
					case call 'erlang':'>='
						 (B, 0) of
					  ( <( 'true'
					       -| ['compiler_generated'] )> when 'true' ->
						call 'erlang':'=<'
						    (B, 9)
					    -| ['compiler_generated'] )
					  ( <( 'false'
					       -| ['compiler_generated'] )> when 'true' ->
						'false'
					    -| ['compiler_generated'] )
					  ( <_2> when 'true' ->
						_2
					    -| ['compiler_generated'] )
					end
				    in  ( call 'erlang':'=:='
					      (( _4
						 -| ['compiler_generated'] ), 'true')
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    call 'erlang':'+'
				(B, 48)
			%% Line 1506
			<>
			    when try
				  ( let <_7> =
					case call 'erlang':'>='
						 (B, 10) of
					  ( <( 'true'
					       -| ['compiler_generated'] )> when 'true' ->
						call 'erlang':'=<'
						    (B, 15)
					    -| ['compiler_generated'] )
					  ( <( 'false'
					       -| ['compiler_generated'] )> when 'true' ->
						'false'
					    -| ['compiler_generated'] )
					  ( <_5> when 'true' ->
						_5
					    -| ['compiler_generated'] )
					end
				    in  ( call 'erlang':'=:='
					      (( _7
						 -| ['compiler_generated'] ), 'true')
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    let <_8> =
				call 'erlang':'+'
				    (B, 65)
			    in  call 'erlang':'-'
				    (_8, 10)
			( <> when 'true' ->
			      %% Line 1506
			      primop 'match_fail'
				  ('if_clause')
			  -| ['compiler_generated'] )
		      end
		  in  let <_18> =
			  #{#<%% Line 1506
			      Acc>(%% Line 1506
				   'all',8,'binary',['unsigned'|['big']]),
			    #<%% Line 1506
			      37>(%% Line 1506
				  8,1,'integer',['unsigned'|['big']]),
			    #<_17>(%% Line 1506
				   8,1,'integer',['unsigned'|['big']]),
			    #<_9>(%% Line 1506
				  8,1,'integer',['unsigned'|['big']])}#
		      in  %% Line 1506
			  apply 'percent_encode_binary'/2
			      (Rest, _18)
	  %% Line 1507
	  <#{}#,Acc> when 'true' ->
	      %% Line 1508
	      Acc
	  ( <_20,_19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_20,_19})
		  -| [{'function_name',{'percent_encode_binary',2}}] )
	    -| ['compiler_generated'] )
	end
'validate_scheme'/1 =
    %% Line 1513
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      'true'
	  %% Line 1514
	  <[H|T]> when 'true' ->
	      %% Line 1515
	      case apply 'is_scheme'/1
		       (H) of
		%% Line 1516
		<'true'> when 'true' ->
		    apply 'validate_scheme'/1
			(T)
		%% Line 1517
		<'false'> when 'true' ->
		    'false'
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1519
	  <#{}#> when 'true' ->
	      'true'
	  %% Line 1520
	  <#{#<H>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1521
	      case apply 'is_scheme'/1
		       (H) of
		%% Line 1522
		<'true'> when 'true' ->
		    apply 'validate_scheme'/1
			(Rest)
		%% Line 1523
		<'false'> when 'true' ->
		    'false'
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'validate_scheme',1}}] )
	    -| ['compiler_generated'] )
	end
'classify_host'/1 =
    %% Line 1535
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      'other'
	  %% Line 1536
	  <Addr>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      let <A> =
		  call %% Line 1537
		       'unicode':%% Line 1537
				 'characters_to_list'
		      (%% Line 1537
		       Addr)
	      in  %% Line 1538
		  apply 'classify_host_ipv6'/1
		      (A)
	  %% Line 1539
	  <Addr> when 'true' ->
	      %% Line 1540
	      apply 'classify_host_ipv6'/1
		  (Addr)
	end
'classify_host_ipv6'/1 =
    %% Line 1542
    fun (_0) ->
	%% Line 1543
	case apply 'is_ipv6_address'/1
		 (_0) of
	  %% Line 1544
	  <'true'> when 'true' ->
	      'ipv6'
	  %% Line 1545
	  <'false'> when 'true' ->
	      apply 'classify_host_ipv4'/1
		  (_0)
	  ( <_1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_1})
	    -| ['compiler_generated'] )
	end
'classify_host_ipv4'/1 =
    %% Line 1548
    fun (_0) ->
	%% Line 1549
	case apply 'is_ipv4_address'/1
		 (_0) of
	  %% Line 1550
	  <'true'> when 'true' ->
	      'ipv4'
	  %% Line 1551
	  <'false'> when 'true' ->
	      apply 'classify_host_regname'/1
		  (_0)
	  ( <_1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_1})
	    -| ['compiler_generated'] )
	end
'classify_host_regname'/1 =
    %% Line 1554
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      'regname'
	  %% Line 1555
	  <[H|T]> when 'true' ->
	      %% Line 1556
	      case apply 'is_reg_name'/1
		       (H) of
		%% Line 1557
		<'true'> when 'true' ->
		    apply 'classify_host_regname'/1
			(T)
		%% Line 1558
		<'false'> when 'true' ->
		    'other'
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_1})
		  -| ['compiler_generated'] )
	      end
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'classify_host_regname',1}}] )
	    -| ['compiler_generated'] )
	end
'is_ipv4_address'/1 =
    %% Line 1561
    fun (_0) ->
	%% Line 1562
	case call 'inet':'parse_ipv4strict_address'
		 (_0) of
	  %% Line 1563
	  <{'ok',_3}> when 'true' ->
	      'true'
	  %% Line 1564
	  <{'error',_4}> when 'true' ->
	      'false'
	  ( <_1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_1})
	    -| ['compiler_generated'] )
	end
'is_ipv6_address'/1 =
    %% Line 1567
    fun (_0) ->
	%% Line 1568
	case call 'inet':'parse_ipv6strict_address'
		 (_0) of
	  %% Line 1569
	  <{'ok',_3}> when 'true' ->
	      'true'
	  %% Line 1570
	  <{'error',_4}> when 'true' ->
	      'false'
	  ( <_1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_1})
	    -| ['compiler_generated'] )
	end
'bracket_ipv6'/1 =
    %% Line 1573
    fun (_0) ->
	case _0 of
	  <Addr>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      let <_1> =
		  #{#<%% Line 1574
		      91>(%% Line 1574
			  8,1,'integer',['unsigned'|['big']]),
		    #<%% Line 1574
		      Addr>(%% Line 1574
			    'all',8,'binary',['unsigned'|['big']])}#
	      in  %% Line 1574
		  apply 'concat'/2
		      (_1, #{#<93>(8,1,'integer',['unsigned'|['big']])}#)
	  %% Line 1575
	  <Addr>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 1576
	      [91|call 'erlang':'++'
		      (Addr, [93])]
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'bracket_ipv6',1}}] )
	    -| ['compiler_generated'] )
	end
'is_valid_map'/1 =
    %% Line 1609
    fun (_0) ->
	case _0 of
	  <Map = ~{'path':=Path}~> when 'true' ->
	      let <_4> =
		  case %% Line 1610
		       apply 'starts_with_two_slash'/1
			   (Path) of
		    %% Line 1610
		    ( <( 'true'
			 -| ['compiler_generated'] )> when 'true' ->
			  apply 'is_valid_map_host'/1
			      (Map)
		      -| ['compiler_generated'] )
		    %% Line 1610
		    ( <( 'false'
			 -| ['compiler_generated'] )> when 'true' ->
			  'false'
		      -| ['compiler_generated'] )
		    %% Line 1610
		    ( <_2> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {( 'badarg'
				      -| ['compiler_generated'] ),_2}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 1611
		  ( case _4 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    'true'
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_8> =
				case %% Line 1612
				     call 'maps':'is_key'
					 ('userinfo', Map) of
				  %% Line 1612
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					apply 'is_valid_map_host'/1
					    (Map)
				    -| ['compiler_generated'] )
				  %% Line 1612
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				  %% Line 1612
				  ( <_6> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {( 'badarg'
						    -| ['compiler_generated'] ),_6}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			    in  %% Line 1613
				( case _8 of
				    ( <( 'true'
					 -| ['compiler_generated'] )> when 'true' ->
					  'true'
				      -| ['compiler_generated'] )
				    ( <( 'false'
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_12> =
					      case %% Line 1614
						   call 'maps':'is_key'
						       ('port', Map) of
						%% Line 1614
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      apply 'is_valid_map_host'/1
							  (Map)
						  -| ['compiler_generated'] )
						%% Line 1614
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
						%% Line 1614
						( <_10> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {( 'badarg'
								  -| ['compiler_generated'] ),_10}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					  in  %% Line 1615
					      ( case _12 of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							'true'
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							%% Line 1616
							apply 'all_fields_valid'/1
							    (Map)
						    -| ['compiler_generated'] )
						  ( <_9> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {( 'badarg'
								    -| ['compiler_generated'] ),_9}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <_5> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {( 'badarg'
						      -| ['compiler_generated'] ),_5}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_1> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_1}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 1617
	  <~{}~> when 'true' ->
	      %% Line 1618
	      'false'
	  ( <_16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16})
		  -| [{'function_name',{'is_valid_map',1}}] )
	    -| ['compiler_generated'] )
	end
'is_valid_map_host'/1 =
    %% Line 1621
    fun (_0) ->
	%% Line 1622
	( case call 'maps':'is_key'
		   ('host', _0) of
	    ( <( 'true'
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'all_fields_valid'/1
		      (_0)
	      -| ['compiler_generated'] )
	    ( <( 'false'
		 -| ['compiler_generated'] )> when 'true' ->
		  'false'
	      -| ['compiler_generated'] )
	    ( <_1> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {( 'badarg'
			      -| ['compiler_generated'] ),_1}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'all_fields_valid'/1 =
    %% Line 1625
    fun (_0) ->
	let <Fun> =
	    fun (_3,_2,_1) ->
		%% Line 1626
		case <_3,_2,_1> of
		  <'scheme',_9,Acc> when 'true' ->
		      Acc
		  %% Line 1627
		  <'userinfo',_10,Acc> when 'true' ->
		      Acc
		  %% Line 1628
		  <'host',_11,Acc> when 'true' ->
		      Acc
		  %% Line 1629
		  <'port',_12,Acc> when 'true' ->
		      Acc
		  %% Line 1630
		  <'path',_13,Acc> when 'true' ->
		      Acc
		  %% Line 1631
		  <'query',_14,Acc> when 'true' ->
		      Acc
		  %% Line 1632
		  <'fragment',_15,Acc> when 'true' ->
		      Acc
		  %% Line 1633
		  <_16,_17,_18> when 'true' ->
		      'false'
		end
	in  %% Line 1635
	    call 'maps':'fold'
		(Fun, 'true', _0)
'starts_with_two_slash'/1 =
    %% Line 1638
    fun (_0) ->
	case _0 of
	  <[47|[47|_2]]> when 'true' ->
	      %% Line 1639
	      'true'
	  %% Line 1640
	  <#{#<47>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<47>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<_3>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1641
	      'true'
	  %% Line 1642
	  <_4> when 'true' ->
	      'false'
	end
'update_scheme'/2 =
    %% Line 1645
    fun (_0,_1) ->
	case <_0,_1> of
	  <~{'scheme':=Scheme}~,_5> when 'true' ->
	      let <_2> =
		  apply %% Line 1646
			'encode_scheme'/1
		      (%% Line 1646
		       Scheme)
	      in  %% Line 1646
		  apply 'add_colon_postfix'/1
		      (_2)
	  %% Line 1647
	  <~{}~,_6> when 'true' ->
	      %% Line 1648
	      'empty'
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'update_scheme',2}}] )
	    -| ['compiler_generated'] )
	end
'update_userinfo'/2 =
    %% Line 1651
    fun (_0,_1) ->
	case <_0,_1> of
	  <~{'userinfo':=Userinfo}~,'empty'> when 'true' ->
	      let <_2> =
		  apply %% Line 1652
			'encode_userinfo'/1
		      (%% Line 1652
		       Userinfo)
	      in  %% Line 1652
		  apply 'add_auth_prefix'/1
		      (_2)
	  %% Line 1653
	  <~{'userinfo':=Userinfo}~,URI> when 'true' ->
	      let <_3> =
		  apply %% Line 1654
			'encode_userinfo'/1
		      (%% Line 1654
		       Userinfo)
	      in  let <_4> =
		      apply %% Line 1654
			    'add_auth_prefix'/1
			  (_3)
		  in  %% Line 1654
		      apply 'concat'/2
			  (URI, _4)
	  %% Line 1655
	  <~{}~,'empty'> when 'true' ->
	      %% Line 1656
	      'empty'
	  %% Line 1657
	  <~{}~,URI> when 'true' ->
	      %% Line 1658
	      URI
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'update_userinfo',2}}] )
	    -| ['compiler_generated'] )
	end
'update_host'/2 =
    %% Line 1661
    fun (_0,_1) ->
	case <_0,_1> of
	  <~{'host':=Host}~,'empty'> when 'true' ->
	      let <_2> =
		  apply %% Line 1662
			'encode_host'/1
		      (%% Line 1662
		       Host)
	      in  %% Line 1662
		  apply 'add_auth_prefix'/1
		      (_2)
	  %% Line 1663
	  <Map = ~{'host':=Host}~,URI> when 'true' ->
	      let <_3> =
		  apply %% Line 1664
			'encode_host'/1
		      (%% Line 1664
		       Host)
	      in  let <_4> =
		      apply %% Line 1664
			    'add_host_prefix'/2
			  (%% Line 1664
			   Map, _3)
		  in  %% Line 1664
		      apply 'concat'/2
			  (URI, _4)
	  %% Line 1665
	  <~{}~,'empty'> when 'true' ->
	      %% Line 1666
	      'empty'
	  %% Line 1667
	  <~{}~,URI> when 'true' ->
	      %% Line 1668
	      URI
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'update_host',2}}] )
	    -| ['compiler_generated'] )
	end
'update_port'/2 =
    %% Line 1672
    fun (_0,_1) ->
	case <_0,_1> of
	  <~{'port':='undefined'}~,URI> when 'true' ->
	      %% Line 1673
	      apply 'concat'/2
		  (URI, #{#<58>(8,1,'integer',['unsigned'|['big']])}#)
	  %% Line 1674
	  <~{'port':=Port}~,URI> when 'true' ->
	      let <_2> =
		  apply %% Line 1675
			'encode_port'/1
		      (%% Line 1675
		       Port)
	      in  let <_3> =
		      apply %% Line 1675
			    'add_colon'/1
			  (_2)
		  in  %% Line 1675
		      apply 'concat'/2
			  (URI, _3)
	  %% Line 1676
	  <~{}~,URI> when 'true' ->
	      %% Line 1677
	      URI
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'update_port',2}}] )
	    -| ['compiler_generated'] )
	end
'update_path'/2 =
    %% Line 1680
    fun (_0,_1) ->
	case <_0,_1> of
	  <~{'path':=Path}~,'empty'> when 'true' ->
	      %% Line 1681
	      apply 'encode_path'/1
		  (Path)
	  %% Line 1682
	  <~{'path':=Path}~,URI> when 'true' ->
	      let <_2> =
		  apply %% Line 1683
			'encode_path'/1
		      (%% Line 1683
		       Path)
	      in  %% Line 1683
		  apply 'concat'/2
		      (URI, _2)
	  %% Line 1684
	  <~{}~,'empty'> when 'true' ->
	      %% Line 1685
	      'empty'
	  %% Line 1686
	  <~{}~,URI> when 'true' ->
	      %% Line 1687
	      URI
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'update_path',2}}] )
	    -| ['compiler_generated'] )
	end
'update_query'/2 =
    %% Line 1690
    fun (_0,_1) ->
	case <_0,_1> of
	  <~{'query':=Query}~,'empty'> when 'true' ->
	      %% Line 1691
	      apply 'encode_query'/1
		  (Query)
	  %% Line 1692
	  <~{'query':=Query}~,URI> when 'true' ->
	      let <_2> =
		  apply %% Line 1693
			'encode_query'/1
		      (%% Line 1693
		       Query)
	      in  let <_3> =
		      apply %% Line 1693
			    'add_question_mark'/1
			  (_2)
		  in  %% Line 1693
		      apply 'concat'/2
			  (URI, _3)
	  %% Line 1694
	  <~{}~,'empty'> when 'true' ->
	      %% Line 1695
	      'empty'
	  %% Line 1696
	  <~{}~,URI> when 'true' ->
	      %% Line 1697
	      URI
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'update_query',2}}] )
	    -| ['compiler_generated'] )
	end
'update_fragment'/2 =
    %% Line 1700
    fun (_0,_1) ->
	case <_0,_1> of
	  <~{'fragment':=Fragment}~,'empty'> when 'true' ->
	      let <_2> =
		  apply %% Line 1701
			'encode_fragment'/1
		      (%% Line 1701
		       Fragment)
	      in  %% Line 1701
		  apply 'add_hashmark'/1
		      (_2)
	  %% Line 1702
	  <~{'fragment':=Fragment}~,URI> when 'true' ->
	      let <_3> =
		  apply %% Line 1703
			'encode_fragment'/1
		      (%% Line 1703
		       Fragment)
	      in  let <_4> =
		      apply %% Line 1703
			    'add_hashmark'/1
			  (_3)
		  in  %% Line 1703
		      apply 'concat'/2
			  (URI, _4)
	  %% Line 1704
	  <~{}~,'empty'> when 'true' ->
	      %% Line 1705
	      []
	  %% Line 1706
	  <~{}~,URI> when 'true' ->
	      %% Line 1707
	      URI
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'update_fragment',2}}] )
	    -| ['compiler_generated'] )
	end
'concat'/2 =
    %% Line 1714
    fun (_0,_1) ->
	case <_0,_1> of
	  <A,B>
	      when let <_2> =
		    call 'erlang':'is_binary'
			(A)
		in  let <_3> =
			call 'erlang':'is_binary'
			    (B)
		    in  call 'erlang':'and'
			    (_2, _3) ->
	      %% Line 1715
	      #{#<A>('all',8,'binary',['unsigned'|['big']]),
		#<B>('all',8,'binary',['unsigned'|['big']])}#
	  %% Line 1716
	  <A,B>
	      when let <_4> =
		    call 'erlang':'is_binary'
			(A)
		in  let <_5> =
			call 'erlang':'is_list'
			    (B)
		    in  call 'erlang':'and'
			    (_4, _5) ->
	      let <_6> =
		  call %% Line 1717
		       'unicode':%% Line 1717
				 'characters_to_list'
		      (%% Line 1717
		       A)
	      in  %% Line 1717
		  call 'erlang':'++'
		      (_6, B)
	  %% Line 1718
	  <A,B>
	      when call 'erlang':'is_list'
		    (A) ->
	      let <_7> =
		  apply %% Line 1719
			'maybe_to_list'/1
		      (%% Line 1719
		       B)
	      in  %% Line 1719
		  call 'erlang':'++'
		      (A, _7)
	  ( <_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8})
		  -| [{'function_name',{'concat',2}}] )
	    -| ['compiler_generated'] )
	end
'add_hashmark'/1 =
    %% Line 1721
    fun (_0) ->
	case _0 of
	  <Comp>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      %% Line 1722
	      #{#<35>(8,1,'integer',['unsigned'|['big']]),
		#<Comp>('all',8,'binary',['unsigned'|['big']])}#
	  %% Line 1723
	  <Comp>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 1724
	      [35|Comp]
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'add_hashmark',1}}] )
	    -| ['compiler_generated'] )
	end
'add_question_mark'/1 =
    %% Line 1726
    fun (_0) ->
	case _0 of
	  <Comp>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      %% Line 1727
	      #{#<63>(8,1,'integer',['unsigned'|['big']]),
		#<Comp>('all',8,'binary',['unsigned'|['big']])}#
	  %% Line 1728
	  <Comp>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 1729
	      [63|Comp]
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'add_question_mark',1}}] )
	    -| ['compiler_generated'] )
	end
'add_colon'/1 =
    %% Line 1731
    fun (_0) ->
	case _0 of
	  <Comp>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      %% Line 1732
	      #{#<58>(8,1,'integer',['unsigned'|['big']]),
		#<Comp>('all',8,'binary',['unsigned'|['big']])}#
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'add_colon',1}}] )
	    -| ['compiler_generated'] )
	end
'add_colon_postfix'/1 =
    %% Line 1734
    fun (_0) ->
	case _0 of
	  <Comp>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      %% Line 1735
	      #{#<Comp>('all',8,'binary',['unsigned'|['big']]),
		#<58>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 1736
	  <Comp>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 1737
	      call 'erlang':'++'
		  (Comp, [58])
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'add_colon_postfix',1}}] )
	    -| ['compiler_generated'] )
	end
'add_auth_prefix'/1 =
    %% Line 1739
    fun (_0) ->
	case _0 of
	  <Comp>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      %% Line 1740
	      #{#<12079>(16,1,'integer',['unsigned'|['big']]),
		#<Comp>('all',8,'binary',['unsigned'|['big']])}#
	  %% Line 1741
	  <Comp>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 1742
	      [47|[47|Comp]]
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'add_auth_prefix',1}}] )
	    -| ['compiler_generated'] )
	end
'add_host_prefix'/2 =
    %% Line 1744
    fun (_0,_1) ->
	case <_0,_1> of
	  <~{'userinfo':=_4}~,Host>
	      when call 'erlang':'is_binary'
		    (Host) ->
	      %% Line 1745
	      #{#<64>(8,1,'integer',['unsigned'|['big']]),
		#<Host>('all',8,'binary',['unsigned'|['big']])}#
	  %% Line 1746
	  <~{}~,Host>
	      when call 'erlang':'is_binary'
		    (Host) ->
	      %% Line 1747
	      #{#<12079>(16,1,'integer',['unsigned'|['big']]),
		#<Host>('all',8,'binary',['unsigned'|['big']])}#
	  %% Line 1748
	  <~{'userinfo':=_5}~,Host>
	      when call 'erlang':'is_list'
		    (Host) ->
	      %% Line 1749
	      [64|Host]
	  %% Line 1750
	  <~{}~,Host>
	      when call 'erlang':'is_list'
		    (Host) ->
	      %% Line 1751
	      [47|[47|Host]]
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'add_host_prefix',2}}] )
	    -| ['compiler_generated'] )
	end
'maybe_to_list'/1 =
    %% Line 1753
    fun (_0) ->
	case _0 of
	  <Comp>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      call 'unicode':'characters_to_list'
		  (Comp)
	  %% Line 1754
	  <Comp> when 'true' ->
	      Comp
	end
'encode_port'/1 =
    %% Line 1756
    fun (_0) ->
	%% Line 1757
	call 'erlang':'integer_to_binary'
	    (_0)
'resolve_map'/2 =
    %% Line 1764
    fun (_0,_1) ->
	case <_0,_1> of
	  <URIMap = ~{'scheme':=_7}~,_8> when 'true' ->
	      %% Line 1765
	      apply 'normalize_path_segment'/1
		  (URIMap)
	  %% Line 1766
	  <URIMap,BaseURIMap = ~{'scheme':=_9}~> when 'true' ->
	      let <_2> =
		  apply %% Line 1767
			'resolve_path_type'/1
		      (%% Line 1767
		       URIMap)
	      in  %% Line 1767
		  apply 'resolve_map'/3
		      (URIMap, BaseURIMap, _2)
	  %% Line 1768
	  <_X_URIMap,BaseURIMap>
	      when call 'erlang':'is_map'
		    (BaseURIMap) ->
	      %% Line 1769
	      {'error','invalid_scheme',[]}
	  %% Line 1770
	  <URIMap,BaseURIString> when 'true' ->
	      %% Line 1771
	      case apply 'parse'/1
		       (BaseURIString) of
		%% Line 1772
		<BaseURIMap = ~{'scheme':=_10}~> when 'true' ->
		    let <_3> =
			apply %% Line 1773
			      'resolve_path_type'/1
			    (%% Line 1773
			     URIMap)
		    in  %% Line 1773
			apply 'resolve_map'/3
			    (URIMap, BaseURIMap, _3)
		%% Line 1774
		<BaseURIMap>
		    when call 'erlang':'is_map'
			  (BaseURIMap) ->
		    %% Line 1775
		    {'error','invalid_scheme',[]}
		%% Line 1776
		<Error> when 'true' ->
		    %% Line 1777
		    Error
	      end
	end
'resolve_path_type'/1 =
    %% Line 1780
    fun (_0) ->
	let <_1> =
	    call %% Line 1781
		 'maps':%% Line 1781
			'get'
		(%% Line 1781
		 'path', _0, %% Line 1781
			     #{}#)
	in  %% Line 1781
	    case call 'erlang':'iolist_to_binary'
		     (_1) of
	      %% Line 1782
	      <#{}#> when 'true' ->
		  'empty_path'
	      %% Line 1783
	      <#{#<47>(8,1,'integer',['unsigned'|['big']]),
		 #<_4>('all',1,'binary',['unsigned'|['big']])}#> when 'true' ->
		  'absolute_path'
	      %% Line 1784
	      <_5> when 'true' ->
		  'relative_path'
	    end
'resolve_map'/3 =
    %% Line 1787
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <URI = ~{'host':=_17}~,~{'scheme':=Scheme}~,_18> when 'true' ->
	      %% Line 1788
	      case <> of
		( <>
		      when call 'erlang':'is_map'
			    (URI) ->
		      let <_3> =
			  ~{'scheme'=>Scheme|URI}~
		      in  apply 'normalize_path_segment'/1
			      (_3)
		  -| ['compiler_generated'] )
		( <> when 'true' ->
		      ( primop 'match_fail'
			    ({'badmap',URI})
			-| [{'eval_failure','badmap'}] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1789
	  <URI,BaseURI,'empty_path'> when 'true' ->
	      let <_5> =
		  case %% Line 1790
		       call 'maps':'is_key'
			   ('query', URI) of
		    %% Line 1791
		    <'true'> when 'true' ->
			['scheme'|['userinfo'|['host'|['port'|['path']]]]]
		    %% Line 1792
		    <'false'> when 'true' ->
			['scheme'|['userinfo'|['host'|['port'|['path'|['query']]]]]]
		    ( <_4> when 'true' ->
			  %% Line 1790
			  primop 'match_fail'
			      ({'case_clause',_4})
		      -| ['compiler_generated'] )
		  end
	      in  let <_7> =
		      call %% Line 1794
			   'maps':%% Line 1794
				  'with'
			  (_5, %% Line 1794
			       BaseURI)
		  in  %% Line 1794
		      call 'maps':'merge'
			  (URI, _7)
	  %% Line 1795
	  <URI,BaseURI,'absolute_path'> when 'true' ->
	      let <_8> =
		  call %% Line 1798
		       'maps':%% Line 1798
			      'with'
		      (%% Line 1798
		       ['scheme'|['userinfo'|['host'|['port']]]], %% Line 1798
								  BaseURI)
	      in  let <_9> =
		      call %% Line 1796
			   'maps':%% Line 1796
				  'merge'
			  (%% Line 1797
			   URI, _8)
		  in  %% Line 1796
		      apply 'normalize_path_segment'/1
			  (_9)
	  %% Line 1799
	  <URI = ~{'path':=Path}~,BaseURI,'relative_path'> when 'true' ->
	      let <_11> =
		  apply %% Line 1801
			'merge_paths'/2
		      (%% Line 1801
		       Path, %% Line 1801
			     BaseURI)
	      in  %% Line 1801
		  case <> of
		    ( <>
			  when call 'erlang':'is_map'
				(URI) ->
			  let <_12> =
			      ~{'path'=>_11|URI}~
			  in  let <_10> =
				  call %% Line 1802
				       'maps':%% Line 1802
					      'with'
				      (%% Line 1802
				       ['scheme'|['userinfo'|['host'|['port']]]], %% Line 1802
										  BaseURI)
			      in  let <_13> =
				      call 'maps':'merge'
					  (_12, _10)
				  in  apply 'normalize_path_segment'/1
					  (_13)
		      -| ['compiler_generated'] )
		    ( <> when 'true' ->
			  ( primop 'match_fail'
				({'badmap',URI})
			    -| [{'eval_failure','badmap'}] )
		      -| ['compiler_generated'] )
		  end
	  ( <_16,_15,_14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15,_14})
		  -| [{'function_name',{'resolve_map',3}}] )
	    -| ['compiler_generated'] )
	end
'merge_paths'/2 =
    %% Line 1804
    fun (_0,_1) ->
	case <_0,_1> of
	  <Path,BaseURI = ~{'path':=BasePath0}~> when 'true' ->
	      let <_2> =
		  call %% Line 1805
		       'erlang':%% Line 1805
				'iolist_size'
		      (%% Line 1805
		       BasePath0)
	      in  %% Line 1805
		  case <BaseURI,_2> of
		    %% Line 1806
		    <( ~{( ( 'host'
			     -| ['compiler_generated'] ):=_7
			  -| ['compiler_generated'] )}~
		       -| ['compiler_generated'] ),( 0
						     -| ['compiler_generated'] )> when 'true' ->
			%% Line 1807
			apply 'merge_paths_absolute'/1
			    (Path)
		    %% Line 1808
		    <( _12
		       -| ['compiler_generated'] ),( _13
						     -| ['compiler_generated'] )> when 'true' ->
			%% Line 1809
			case call 'string':'split'
				 (BasePath0, #{#<47>(8,1,'integer',['unsigned'|['big']])}#, 'trailing') of
			  %% Line 1810
			  <[BasePath|[_9|[]]]>
			      when call 'erlang':'is_binary'
				    (Path) ->
			      call 'unicode':'characters_to_binary'
				  ([BasePath|[47|[Path|[]]]])
			  %% Line 1811
			  <[BasePath|[_10|[]]]>
			      when call 'erlang':'is_list'
				    (Path) ->
			      call 'unicode':'characters_to_list'
				  ([BasePath|[47|[Path|[]]]])
			  %% Line 1812
			  <[_11|[]]> when 'true' ->
			      Path
			  ( <_3> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_3})
			    -| ['compiler_generated'] )
			end
		  end
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'merge_paths',2}}] )
	    -| ['compiler_generated'] )
	end
'merge_paths_absolute'/1 =
    %% Line 1816
    fun (_0) ->
	case _0 of
	  <Path>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      %% Line 1817
	      #{#<47>(8,1,'integer',['unsigned'|['big']]),
		#<Path>('all',8,'binary',['unsigned'|['big']])}#
	  %% Line 1818
	  <Path>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 1819
	      call 'unicode':'characters_to_list'
		  ([47|[Path|[]]])
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'merge_paths_absolute',1}}] )
	    -| ['compiler_generated'] )
	end
'transcode'/4 =
    %% Line 1842
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <L = [37|[_X_C0|[_X_C1|_X_Rest]]],Acc,InEnc,OutEnc> when 'true' ->
	      %% Line 1843
	      apply 'transcode_pct'/5
		  (L, Acc, #{}#, InEnc, OutEnc)
	  %% Line 1844
	  <L = [_X_C|_X_Rest],Acc,InEnc,OutEnc> when 'true' ->
	      %% Line 1845
	      apply 'transcode'/5
		  (L, Acc, [], InEnc, OutEnc)
	  ( <_7,_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5,_4})
		  -| [{'function_name',{'transcode',4}}] )
	    -| ['compiler_generated'] )
	end
'transcode'/5 =
    %% Line 1847
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <L = [37|[_X_C0|[_X_C1|_X_Rest]]],Acc,List,InEncoding,OutEncoding> when 'true' ->
	      let <_5> =
		  call %% Line 1848
		       'erlang':%% Line 1848
				'++'
		      (%% Line 1848
		       List, %% Line 1848
			     Acc)
	      in  %% Line 1848
		  apply 'transcode_pct'/5
		      (L, _5, #{}#, InEncoding, OutEncoding)
	  %% Line 1849
	  <[C|Rest],Acc,List,InEncoding,OutEncoding> when 'true' ->
	      %% Line 1850
	      apply 'transcode'/5
		  (Rest, Acc, [C|List], InEncoding, OutEncoding)
	  %% Line 1851
	  <[],Acc,List,_X_InEncoding,_X_OutEncoding> when 'true' ->
	      let <_6> =
		  call %% Line 1852
		       'erlang':%% Line 1852
				'++'
		      (%% Line 1852
		       List, %% Line 1852
			     Acc)
	      in  %% Line 1852
		  call 'lists':'reverse'
		      (_6)
	  ( <_11,_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8,_7})
		  -| [{'function_name',{'transcode',5}}] )
	    -| ['compiler_generated'] )
	end
'transcode_pct'/5 =
    %% Line 1856
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <L = [37|[C0|[C1|Rest]]],Acc,B,InEncoding,OutEncoding> when 'true' ->
	      let <_7> =
		  case %% Line 1857
		       apply 'is_hex_digit'/1
			   (C0) of
		    %% Line 1857
		    ( <( 'true'
			 -| ['compiler_generated'] )> when 'true' ->
			  apply 'is_hex_digit'/1
			      (C1)
		      -| ['compiler_generated'] )
		    %% Line 1857
		    ( <( 'false'
			 -| ['compiler_generated'] )> when 'true' ->
			  'false'
		      -| ['compiler_generated'] )
		    %% Line 1857
		    ( <_5> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {( 'badarg'
				      -| ['compiler_generated'] ),_5}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 1857
		  case _7 of
		    %% Line 1858
		    <'true'> when 'true' ->
			let <_31> =
			    case <> of
			      %% Line 1859
			      <>
				  when try
					( let <_22> =
					      case call 'erlang':'>='
						       (C0, 48) of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      call 'erlang':'=<'
							  (C0, 57)
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
						( <_20> when 'true' ->
						      _20
						  -| ['compiler_generated'] )
					      end
					  in  ( call 'erlang':'=:='
						    (( _22
						       -| ['compiler_generated'] ), 'true')
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  call 'erlang':'-'
				      (C0, 48)
			      %% Line 1859
			      <>
				  when try
					( let <_25> =
					      case call 'erlang':'>='
						       (C0, 65) of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      call 'erlang':'=<'
							  (C0, 70)
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
						( <_23> when 'true' ->
						      _23
						  -| ['compiler_generated'] )
					      end
					  in  ( call 'erlang':'=:='
						    (( _25
						       -| ['compiler_generated'] ), 'true')
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  let <_26> =
				      call 'erlang':'-'
					  (C0, 65)
				  in  call 'erlang':'+'
					  (_26, 10)
			      %% Line 1859
			      <>
				  when try
					( let <_29> =
					      case call 'erlang':'>='
						       (C0, 97) of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      call 'erlang':'=<'
							  (C0, 102)
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
						( <_27> when 'true' ->
						      _27
						  -| ['compiler_generated'] )
					      end
					  in  ( call 'erlang':'=:='
						    (( _29
						       -| ['compiler_generated'] ), 'true')
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  let <_30> =
				      call 'erlang':'-'
					  (C0, 97)
				  in  call 'erlang':'+'
					  (_30, 10)
			      ( <> when 'true' ->
				    %% Line 1859
				    primop 'match_fail'
					('if_clause')
				-| ['compiler_generated'] )
			    end
			in  let <_32> =
				call %% Line 1859
				     'erlang':%% Line 1859
					      '*'
				    (_31, %% Line 1859
					  16)
			    in  let <_19> =
				    case <> of
				      %% Line 1859
				      <>
					  when try
						( let <_10> =
						      case call 'erlang':'>='
							       (C1, 48) of
							( <( 'true'
							     -| ['compiler_generated'] )> when 'true' ->
							      call 'erlang':'=<'
								  (C1, 57)
							  -| ['compiler_generated'] )
							( <( 'false'
							     -| ['compiler_generated'] )> when 'true' ->
							      'false'
							  -| ['compiler_generated'] )
							( <_8> when 'true' ->
							      _8
							  -| ['compiler_generated'] )
						      end
						  in  ( call 'erlang':'=:='
							    (( _10
							       -| ['compiler_generated'] ), 'true')
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  call 'erlang':'-'
					      (C1, 48)
				      %% Line 1859
				      <>
					  when try
						( let <_13> =
						      case call 'erlang':'>='
							       (C1, 65) of
							( <( 'true'
							     -| ['compiler_generated'] )> when 'true' ->
							      call 'erlang':'=<'
								  (C1, 70)
							  -| ['compiler_generated'] )
							( <( 'false'
							     -| ['compiler_generated'] )> when 'true' ->
							      'false'
							  -| ['compiler_generated'] )
							( <_11> when 'true' ->
							      _11
							  -| ['compiler_generated'] )
						      end
						  in  ( call 'erlang':'=:='
							    (( _13
							       -| ['compiler_generated'] ), 'true')
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  let <_14> =
					      call 'erlang':'-'
						  (C1, 65)
					  in  call 'erlang':'+'
						  (_14, 10)
				      %% Line 1859
				      <>
					  when try
						( let <_17> =
						      case call 'erlang':'>='
							       (C1, 97) of
							( <( 'true'
							     -| ['compiler_generated'] )> when 'true' ->
							      call 'erlang':'=<'
								  (C1, 102)
							  -| ['compiler_generated'] )
							( <( 'false'
							     -| ['compiler_generated'] )> when 'true' ->
							      'false'
							  -| ['compiler_generated'] )
							( <_15> when 'true' ->
							      _15
							  -| ['compiler_generated'] )
						      end
						  in  ( call 'erlang':'=:='
							    (( _17
							       -| ['compiler_generated'] ), 'true')
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  let <_18> =
					      call 'erlang':'-'
						  (C1, 97)
					  in  call 'erlang':'+'
						  (_18, 10)
				      ( <> when 'true' ->
					    %% Line 1859
					    primop 'match_fail'
						('if_clause')
					-| ['compiler_generated'] )
				    end
				in  let <Int> =
					call %% Line 1859
					     'erlang':%% Line 1859
						      '+'
					    (_32, _19)
				    in  let <_34> =
					    #{#<%% Line 1860
						B>(%% Line 1860
						   'all',8,'binary',['unsigned'|['big']]),
					      #<%% Line 1860
						Int>(%% Line 1860
						     8,1,'integer',['unsigned'|['big']])}#
					in  %% Line 1860
					    apply 'transcode_pct'/5
						(Rest, Acc, _34, InEncoding, OutEncoding)
		    %% Line 1861
		    <'false'> when 'true' ->
			call 'erlang':'throw'
			    ({'error','invalid_percent_encoding',L})
		    ( <_35> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_35})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1863
	  <L = [_X_C|_X_Rest],Acc,B,InEncoding,OutEncoding> when 'true' ->
	      let <OutBinary> =
		  apply %% Line 1864
			'convert_to_binary'/3
		      (%% Line 1864
		       B, %% Line 1864
			  InEncoding, %% Line 1864
				      OutEncoding)
	      in  let <PctEncUtf8> =
		      apply %% Line 1865
			    'percent_encode_segment'/1
			  (%% Line 1865
			   OutBinary)
		  in  let <_38> =
			  apply %% Line 1866
				'convert_to_list'/2
			      (%% Line 1866
			       PctEncUtf8, %% Line 1866
					   'utf8')
		      in  let <Out> =
			      call %% Line 1866
				   'lists':%% Line 1866
					   'reverse'
				  (_38)
			  in  let <_40> =
				  call %% Line 1867
				       'erlang':%% Line 1867
						'++'
				      (%% Line 1867
				       Out, %% Line 1867
					    Acc)
			      in  %% Line 1867
				  apply 'transcode'/5
				      (L, _40, [], InEncoding, OutEncoding)
	  %% Line 1868
	  <[],Acc,B,InEncoding,OutEncoding> when 'true' ->
	      let <OutBinary> =
		  apply %% Line 1869
			'convert_to_binary'/3
		      (%% Line 1869
		       B, %% Line 1869
			  InEncoding, %% Line 1869
				      OutEncoding)
	      in  let <PctEncUtf8> =
		      apply %% Line 1870
			    'percent_encode_segment'/1
			  (%% Line 1870
			   OutBinary)
		  in  let <Out> =
			  apply %% Line 1871
				'convert_to_list'/2
			      (%% Line 1871
			       PctEncUtf8, %% Line 1871
					   'utf8')
		      in  let <_44> =
			      call %% Line 1872
				   'lists':%% Line 1872
					   'reverse'
				  (%% Line 1872
				   Acc)
			  in  %% Line 1872
			      call 'erlang':'++'
				  (_44, Out)
	  ( <_49,_48,_47,_46,_45> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_49,_48,_47,_46,_45})
		  -| [{'function_name',{'transcode_pct',5}}] )
	    -| ['compiler_generated'] )
	end
'convert_to_binary'/3 =
    %% Line 1876
    fun (_0,_1,_2) ->
	%% Line 1877
	case call 'unicode':'characters_to_binary'
		 (_0, _1, _2) of
	  %% Line 1878
	  <{'error',_X_List,RestData}> when 'true' ->
	      %% Line 1879
	      call 'erlang':'throw'
		  ({'error','invalid_input',RestData})
	  %% Line 1880
	  <{'incomplete',_X_List,RestData}> when 'true' ->
	      %% Line 1881
	      call 'erlang':'throw'
		  ({'error','invalid_input',RestData})
	  %% Line 1882
	  <Result> when 'true' ->
	      %% Line 1883
	      Result
	end
'convert_to_list'/2 =
    %% Line 1888
    fun (_0,_1) ->
	%% Line 1889
	case call 'unicode':'characters_to_list'
		 (_0, _1) of
	  %% Line 1890
	  <{'error',_X_List,RestData}> when 'true' ->
	      %% Line 1891
	      call 'erlang':'throw'
		  ({'error','invalid_input',RestData})
	  %% Line 1892
	  <{'incomplete',_X_List,RestData}> when 'true' ->
	      %% Line 1893
	      call 'erlang':'throw'
		  ({'error','invalid_input',RestData})
	  %% Line 1894
	  <Result> when 'true' ->
	      %% Line 1895
	      Result
	end
'flatten_list'/2 =
    %% Line 1900
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],_4> when 'true' ->
	      %% Line 1901
	      []
	  %% Line 1902
	  <L,InEnc> when 'true' ->
	      %% Line 1903
	      apply 'flatten_list'/3
		  (L, InEnc, [])
	end
'flatten_list'/3 =
    %% Line 1905
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[H|T],InEnc,Acc>
	      when call 'erlang':'is_binary'
		    (H) ->
	      let <L> =
		  apply %% Line 1906
			'convert_to_list'/2
		      (%% Line 1906
		       H, %% Line 1906
			  InEnc)
	      in  let <_4> =
		      call %% Line 1907
			   'lists':%% Line 1907
				   'reverse'
			  (%% Line 1907
			   L)
		  in  let <_5> =
			  call %% Line 1907
			       'erlang':%% Line 1907
					'++'
			      (_4, %% Line 1907
				   Acc)
		      in  %% Line 1907
			  apply 'flatten_list'/3
			      (T, InEnc, _5)
	  %% Line 1908
	  <[H|T],InEnc,Acc>
	      when call 'erlang':'is_list'
		    (H) ->
	      let <_6> =
		  call %% Line 1909
		       'erlang':%% Line 1909
				'++'
		      (%% Line 1909
		       H, %% Line 1909
			  T)
	      in  %% Line 1909
		  apply 'flatten_list'/3
		      (_6, InEnc, Acc)
	  %% Line 1910
	  <[H|T],InEnc,Acc> when 'true' ->
	      %% Line 1911
	      apply 'flatten_list'/3
		  (T, InEnc, [H|Acc])
	  %% Line 1912
	  <[],_X_InEnc,Acc> when 'true' ->
	      %% Line 1913
	      call 'lists':'reverse'
		  (Acc)
	  %% Line 1914
	  <Arg,_10,_11> when 'true' ->
	      %% Line 1915
	      call 'erlang':'throw'
		  ({'error','invalid_input',Arg})
	end
'percent_encode_segment'/1 =
    %% Line 1918
    fun (_0) ->
	%% Line 1919
	apply 'percent_encode_binary'/2
	    (_0, #{}#)
'get_separator'/1 =
    %% Line 1927
    fun (_0) ->
	case _0 of
	  <L>
	      when try
		    let <_1> =
			call 'erlang':'length'
			    (_0)
		    in  call 'erlang':'=:='
			    (_1, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1928
	      #{}#
	  %% Line 1929
	  <_X_L> when 'true' ->
	      %% Line 1930
	      #{#<38>(8,1,'integer',['unsigned'|['big']])}#
	end
'form_urlencode'/2 =
    %% Line 1935
    fun (_0,_1) ->
	case <_0,_1> of
	  <Cs,[{'encoding','latin1'}]>
	      when call 'erlang':'is_list'
		    (Cs) ->
	      let <B> =
		  apply %% Line 1936
			'convert_to_binary'/3
		      (%% Line 1936
		       Cs, %% Line 1936
			   'utf8', %% Line 1936
				   'utf8')
	      in  let <_3> =
		      apply %% Line 1937
			    'base10_encode'/1
			  (%% Line 1937
			   B)
		  in  %% Line 1937
		      apply 'html5_byte_encode'/1
			  (_3)
	  %% Line 1938
	  <Cs,[{'encoding','latin1'}]>
	      when call 'erlang':'is_binary'
		    (Cs) ->
	      let <_4> =
		  apply %% Line 1939
			'base10_encode'/1
		      (%% Line 1939
		       Cs)
	      in  %% Line 1939
		  apply 'html5_byte_encode'/1
		      (_4)
	  %% Line 1940
	  <Cs,[{'encoding',Encoding}|[]]>
	      when let <_5> =
		    call %% Line 1941
			 'erlang':%% Line 1941
				  'is_list'
			(%% Line 1941
			 Cs)
		in  let <_6> =
			call %% Line 1941
			     'erlang':%% Line 1941
				      '=:='
			    (%% Line 1941
			     Encoding, %% Line 1941
				       'utf8')
		    in  let <_7> =
			    call %% Line 1941
				 'erlang':%% Line 1941
					  'and'
				(_5, _6)
			in  let <_8> =
				call %% Line 1941
				     'erlang':%% Line 1941
					      '=:='
				    (%% Line 1941
				     Encoding, %% Line 1941
					       'unicode')
			    in  %% Line 1941
				call 'erlang':'or'
				    (_7, _8) ->
	      let <B> =
		  apply %% Line 1942
			'convert_to_binary'/3
		      (%% Line 1942
		       Cs, %% Line 1942
			   'utf8', %% Line 1942
				   Encoding)
	      in  %% Line 1943
		  apply 'html5_byte_encode'/1
		      (B)
	  %% Line 1944
	  <Cs,[{'encoding',Encoding}|[]]>
	      when let <_10> =
		    call %% Line 1945
			 'erlang':%% Line 1945
				  'is_binary'
			(%% Line 1945
			 Cs)
		in  let <_11> =
			call %% Line 1945
			     'erlang':%% Line 1945
				      '=:='
			    (%% Line 1945
			     Encoding, %% Line 1945
				       'utf8')
		    in  let <_12> =
			    call %% Line 1945
				 'erlang':%% Line 1945
					  'and'
				(_10, _11)
			in  let <_13> =
				call %% Line 1945
				     'erlang':%% Line 1945
					      '=:='
				    (%% Line 1945
				     Encoding, %% Line 1945
					       'unicode')
			    in  %% Line 1945
				call 'erlang':'or'
				    (_12, _13) ->
	      %% Line 1946
	      apply 'html5_byte_encode'/1
		  (Cs)
	  %% Line 1947
	  <Cs,[{'encoding',Encoding}|[]]>
	      when let <_14> =
		    call 'erlang':'is_list'
			(Cs)
		in  let <_15> =
			call 'erlang':'is_binary'
			    (Cs)
		    in  call 'erlang':'or'
			    (_14, _15) ->
	      %% Line 1948
	      call 'erlang':'throw'
		  ({'error','invalid_encoding',Encoding})
	  %% Line 1949
	  <Cs,_18> when 'true' ->
	      %% Line 1950
	      call 'erlang':'throw'
		  ({'error','invalid_input',Cs})
	end
'base10_encode'/1 =
    %% Line 1958
    fun (_0) ->
	%% Line 1959
	apply 'base10_encode'/2
	    (_0, #{}#)
'base10_encode'/2 =
    %% Line 1961
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{}#,Acc> when 'true' ->
	      %% Line 1962
	      Acc
	  %% Line 1963
	  <#{#<H>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Acc>
	      when call 'erlang':'>'
		    (H,
		     255) ->
	      let <_2> =
		  call %% Line 1964
		       'erlang':%% Line 1964
				'integer_to_list'
		      (%% Line 1964
		       H, %% Line 1964
			  10)
	      in  let <Base10> =
		      apply %% Line 1964
			    'convert_to_binary'/3
			  (_2, %% Line 1964
			       'utf8', %% Line 1964
				       'utf8')
		  in  let <_4> =
			  #{#<%% Line 1965
			      Acc>(%% Line 1965
				   'all',8,'binary',['unsigned'|['big']]),
			    #<%% Line 1965
			      9763>(%% Line 1965
				    16,1,'integer',['unsigned'|['big']]),
			    #<%% Line 1965
			      Base10>(%% Line 1965
				      'all',8,'binary',['unsigned'|['big']]),
			    #<%% Line 1965
			      59>(%% Line 1965
				  8,1,'integer',['unsigned'|['big']])}#
		      in  %% Line 1965
			  apply 'base10_encode'/2
			      (T, _4)
	  %% Line 1966
	  <#{#<H>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      let <_5> =
		  #{#<%% Line 1967
		      Acc>(%% Line 1967
			   'all',8,'binary',['unsigned'|['big']]),
		    #<%% Line 1967
		      H>(%% Line 1967
			 8,1,'integer',['unsigned'|['big']])}#
	      in  %% Line 1967
		  apply 'base10_encode'/2
		      (T, _5)
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'base10_encode',2}}] )
	    -| ['compiler_generated'] )
	end
'html5_byte_encode'/1 =
    %% Line 1970
    fun (_0) ->
	%% Line 1971
	apply 'html5_byte_encode'/2
	    (_0, #{}#)
'html5_byte_encode'/2 =
    %% Line 1973
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{}#,Acc> when 'true' ->
	      %% Line 1974
	      Acc
	  %% Line 1975
	  <#{#<32>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      let <_2> =
		  #{#<%% Line 1976
		      Acc>(%% Line 1976
			   'all',8,'binary',['unsigned'|['big']]),
		    #<%% Line 1976
		      43>(%% Line 1976
			  8,1,'integer',['unsigned'|['big']])}#
	      in  %% Line 1976
		  apply 'html5_byte_encode'/2
		      (T, _2)
	  %% Line 1977
	  <#{#<H>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      %% Line 1978
	      case apply 'is_url_char'/1
		       (H) of
		%% Line 1979
		<'true'> when 'true' ->
		    let <_3> =
			#{#<%% Line 1980
			    Acc>(%% Line 1980
				 'all',8,'binary',['unsigned'|['big']]),
			  #<%% Line 1980
			    H>(%% Line 1980
			       8,1,'integer',['unsigned'|['big']])}#
		    in  %% Line 1980
			apply 'html5_byte_encode'/2
			    (T, _3)
		%% Line 1981
		<'false'> when 'true' ->
		    %% Line 1982
		    case #{#<H>(8,1,'integer',['unsigned'|['big']])}# of
		      <#{#<A>(4,1,'integer',['unsigned'|['big']]),
			 #<B>(4,1,'integer',['unsigned'|['big']])}#> when 'true' ->
			  let <_20> =
			      case <> of
				%% Line 1983
				<>
				    when try
					  ( let <_15> =
						case call 'erlang':'>='
							 (A, 0) of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							call 'erlang':'=<'
							    (A, 9)
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							'false'
						    -| ['compiler_generated'] )
						  ( <_13> when 'true' ->
							_13
						    -| ['compiler_generated'] )
						end
					    in  ( call 'erlang':'=:='
						      (( _15
							 -| ['compiler_generated'] ), 'true')
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false' ->
				    call 'erlang':'+'
					(A, 48)
				%% Line 1983
				<>
				    when try
					  ( let <_18> =
						case call 'erlang':'>='
							 (A, 10) of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							call 'erlang':'=<'
							    (A, 15)
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							'false'
						    -| ['compiler_generated'] )
						  ( <_16> when 'true' ->
							_16
						    -| ['compiler_generated'] )
						end
					    in  ( call 'erlang':'=:='
						      (( _18
							 -| ['compiler_generated'] ), 'true')
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false' ->
				    let <_19> =
					call 'erlang':'+'
					    (A, 65)
				    in  call 'erlang':'-'
					    (_19, 10)
				( <> when 'true' ->
				      %% Line 1983
				      primop 'match_fail'
					  ('if_clause')
				  -| ['compiler_generated'] )
			      end
			  in  let <_12> =
				  case <> of
				    %% Line 1983
				    <>
					when try
					      ( let <_7> =
						    case call 'erlang':'>='
							     (B, 0) of
						      ( <( 'true'
							   -| ['compiler_generated'] )> when 'true' ->
							    call 'erlang':'=<'
								(B, 9)
							-| ['compiler_generated'] )
						      ( <( 'false'
							   -| ['compiler_generated'] )> when 'true' ->
							    'false'
							-| ['compiler_generated'] )
						      ( <_5> when 'true' ->
							    _5
							-| ['compiler_generated'] )
						    end
						in  ( call 'erlang':'=:='
							  (( _7
							     -| ['compiler_generated'] ), 'true')
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      'false' ->
					call 'erlang':'+'
					    (B, 48)
				    %% Line 1983
				    <>
					when try
					      ( let <_10> =
						    case call 'erlang':'>='
							     (B, 10) of
						      ( <( 'true'
							   -| ['compiler_generated'] )> when 'true' ->
							    call 'erlang':'=<'
								(B, 15)
							-| ['compiler_generated'] )
						      ( <( 'false'
							   -| ['compiler_generated'] )> when 'true' ->
							    'false'
							-| ['compiler_generated'] )
						      ( <_8> when 'true' ->
							    _8
							-| ['compiler_generated'] )
						    end
						in  ( call 'erlang':'=:='
							  (( _10
							     -| ['compiler_generated'] ), 'true')
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      'false' ->
					let <_11> =
					    call 'erlang':'+'
						(B, 65)
					in  call 'erlang':'-'
						(_11, 10)
				    ( <> when 'true' ->
					  %% Line 1983
					  primop 'match_fail'
					      ('if_clause')
				      -| ['compiler_generated'] )
				  end
			      in  let <_21> =
				      #{#<%% Line 1983
					  Acc>(%% Line 1983
					       'all',8,'binary',['unsigned'|['big']]),
					#<%% Line 1983
					  37>(%% Line 1983
					      8,1,'integer',['unsigned'|['big']]),
					#<_20>(%% Line 1983
					       8,1,'integer',['unsigned'|['big']]),
					#<_12>(%% Line 1983
					       8,1,'integer',['unsigned'|['big']])}#
				  in  %% Line 1983
				      apply 'html5_byte_encode'/2
					  (T, _21)
		      ( <_4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_4})
			-| ['compiler_generated'] )
		    end
		( <_22> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_22})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1985
	  <H,_X_Acc> when 'true' ->
	      %% Line 1986
	      call 'erlang':'throw'
		  ({'error','invalid_input',H})
	end
'is_url_char'/1 =
    %% Line 1993
    fun (_0) ->
	case _0 of
	  <C>
	      when let <_1> =
		    call %% Line 1994
			 'erlang':%% Line 1994
				  '=:='
			(_0, %% Line 1994
			     42)
		in  let <_2> =
			call %% Line 1994
			     'erlang':%% Line 1994
				      '=:='
			    (_0, %% Line 1994
				 45)
		    in  let <_3> =
			    call %% Line 1995
				 'erlang':%% Line 1995
					  '=:='
				(_0, %% Line 1995
				     46)
			in  let <_4> =
				call %% Line 1995
				     'erlang':%% Line 1995
					      '=:='
				    (_0, %% Line 1995
					 95)
			    in  let <_5> =
				    call %% Line 1996
					 'erlang':%% Line 1996
						  '=<'
					(%% Line 1996
					 48, _0)
				in  let <_6> =
					call %% Line 1996
					     'erlang':%% Line 1996
						      '=<'
					    (_0, %% Line 1996
						 57)
				    in  let <_7> =
					    call %% Line 1996
						 'erlang':%% Line 1996
							  'and'
						(_5, _6)
					in  let <_8> =
						call %% Line 1997
						     'erlang':%% Line 1997
							      '=<'
						    (%% Line 1997
						     65, _0)
					    in  let <_9> =
						    call %% Line 1997
							 'erlang':%% Line 1997
								  '=<'
							(_0, %% Line 1997
							     90)
						in  let <_10> =
							call %% Line 1997
							     'erlang':%% Line 1997
								      'and'
							    (_8, _9)
						    in  let <_11> =
							    call %% Line 1998
								 'erlang':%% Line 1998
									  '=<'
								(%% Line 1998
								 97, _0)
							in  let <_12> =
								call %% Line 1998
								     'erlang':%% Line 1998
									      '=<'
								    (_0, %% Line 1998
									 122)
							    in  let <_13> =
								    call %% Line 1998
									 'erlang':%% Line 1998
										  'and'
									(_11, _12)
								in  let <_14> =
									call %% Line 1997
									     'erlang':%% Line 1997
										      'or'
									    (_10, _13)
								    in  let <_15> =
									    call %% Line 1996
										 'erlang':%% Line 1996
											  'or'
										(_7, _14)
									in  let <_16> =
										call %% Line 1995
										     'erlang':%% Line 1995
											      'or'
										    (_4, _15)
									    in  let <_17> =
										    call %% Line 1995
											 'erlang':%% Line 1995
												  'or'
											(_3, _16)
										in  let <_18> =
											call %% Line 1994
											     'erlang':%% Line 1994
												      'or'
											    (_2, _17)
										    in  %% Line 1994
											call 'erlang':'or'
											    (_1, _18) ->
	      %% Line 1998
	      'true'
	  %% Line 1999
	  <_20> when 'true' ->
	      'false'
	end
'dissect_query_key'/5 =
    %% Line 2005
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <#{#<61>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,IsList,Acc,Key,Value> when 'true' ->
	      %% Line 2006
	      apply 'dissect_query_value'/5
		  (T, IsList, Acc, Key, Value)
	  %% Line 2007
	  <#{#<38>(8,1,'integer',['unsigned'|['big']]),
	     #<35>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,IsList,Acc,Key,Value> when 'true' ->
	      let <_5> =
		  #{#<%% Line 2008
		      Key>(%% Line 2008
			   'all',8,'binary',['unsigned'|['big']]),
		    #<%% Line 2008
		      9763>(%% Line 2008
			    16,1,'integer',['unsigned'|['big']])}#
	      in  %% Line 2008
		  apply 'dissect_query_key'/5
		      (T, IsList, Acc, _5, Value)
	  %% Line 2009
	  <T = #{#<38>(8,1,'integer',['unsigned'|['big']]),
		 #<_12>('all',8,'binary',['unsigned'|['big']])}#,IsList,Acc,Key,#{}#> when 'true' ->
	      %% Line 2010
	      apply 'dissect_query_value'/5
		  (T, IsList, Acc, Key, 'true')
	  %% Line 2011
	  <#{#<H>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,IsList,Acc,Key,Value> when 'true' ->
	      let <_6> =
		  #{#<%% Line 2012
		      Key>(%% Line 2012
			   'all',8,'binary',['unsigned'|['big']]),
		    #<%% Line 2012
		      H>(%% Line 2012
			 8,1,'integer',['unsigned'|['big']])}#
	      in  %% Line 2012
		  apply 'dissect_query_key'/5
		      (T, IsList, Acc, _6, Value)
	  %% Line 2013
	  <T = #{}#,IsList,Acc,Key,#{}#> when 'true' ->
	      %% Line 2014
	      apply 'dissect_query_value'/5
		  (T, IsList, Acc, Key, 'true')
	  ( <_11,_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8,_7})
		  -| [{'function_name',{'dissect_query_key',5}}] )
	    -| ['compiler_generated'] )
	end
'dissect_query_value'/5 =
    %% Line 2016
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <#{#<38>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,IsList,Acc,Key,Value> when 'true' ->
	      let <K> =
		  apply %% Line 2017
			'form_urldecode'/2
		      (%% Line 2017
		       IsList, %% Line 2017
			       Key)
	      in  let <V> =
		      apply %% Line 2018
			    'form_urldecode'/2
			  (%% Line 2018
			   IsList, %% Line 2018
				   Value)
		  in  %% Line 2019
		      apply 'dissect_query_key'/5
			  (T, IsList, [{K,V}|Acc], #{}#, #{}#)
	  %% Line 2020
	  <#{#<H>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,IsList,Acc,Key,Value> when 'true' ->
	      let <_7> =
		  #{#<%% Line 2021
		      Value>(%% Line 2021
			     'all',8,'binary',['unsigned'|['big']]),
		    #<%% Line 2021
		      H>(%% Line 2021
			 8,1,'integer',['unsigned'|['big']])}#
	      in  %% Line 2021
		  apply 'dissect_query_value'/5
		      (T, IsList, Acc, Key, _7)
	  %% Line 2022
	  <#{}#,IsList,Acc,Key,Value> when 'true' ->
	      let <K> =
		  apply %% Line 2023
			'form_urldecode'/2
		      (%% Line 2023
		       IsList, %% Line 2023
			       Key)
	      in  let <V> =
		      apply %% Line 2024
			    'form_urldecode'/2
			  (%% Line 2024
			   IsList, %% Line 2024
				   Value)
		  in  %% Line 2025
		      call 'lists':'reverse'
			  ([{K,V}|Acc])
	  ( <_14,_13,_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13,_12,_11,_10})
		  -| [{'function_name',{'dissect_query_value',5}}] )
	    -| ['compiler_generated'] )
	end
'form_urldecode'/2 =
    %% Line 2029
    fun (_0,_1) ->
	case <_0,_1> of
	  <_42,'true'> when 'true' ->
	      %% Line 2030
	      'true'
	  %% Line 2031
	  <'true',B> when 'true' ->
	      let <_2> =
		  apply %% Line 2032
			'form_urldecode'/2
		      (%% Line 2032
		       B, %% Line 2032
			  #{}#)
	      in  let <Result> =
		      apply %% Line 2032
			    'base10_decode'/1
			  (_2)
		  in  %% Line 2033
		      apply 'convert_to_list'/2
			  (Result, 'utf8')
	  %% Line 2034
	  <'false',B> when 'true' ->
	      let <_4> =
		  apply %% Line 2035
			'form_urldecode'/2
		      (%% Line 2035
		       B, %% Line 2035
			  #{}#)
	      in  %% Line 2035
		  apply 'base10_decode'/1
		      (_4)
	  %% Line 2036
	  <#{}#,Acc> when 'true' ->
	      %% Line 2037
	      Acc
	  %% Line 2038
	  <#{#<43>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      let <_5> =
		  #{#<%% Line 2039
		      Acc>(%% Line 2039
			   'all',8,'binary',['unsigned'|['big']]),
		    #<%% Line 2039
		      32>(%% Line 2039
			  8,1,'integer',['unsigned'|['big']])}#
	      in  %% Line 2039
		  apply 'form_urldecode'/2
		      (T, _5)
	  %% Line 2040
	  <#{#<37>(8,1,'integer',['unsigned'|['big']]),
	     #<C0>(8,1,'integer',['unsigned'|['big']]),
	     #<C1>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      let <_8> =
		  case %% Line 2041
		       apply 'is_hex_digit'/1
			   (C0) of
		    %% Line 2041
		    ( <( 'true'
			 -| ['compiler_generated'] )> when 'true' ->
			  apply 'is_hex_digit'/1
			      (C1)
		      -| ['compiler_generated'] )
		    %% Line 2041
		    ( <( 'false'
			 -| ['compiler_generated'] )> when 'true' ->
			  'false'
		      -| ['compiler_generated'] )
		    %% Line 2041
		    ( <_6> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {( 'badarg'
				      -| ['compiler_generated'] ),_6}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 2041
		  case _8 of
		    %% Line 2042
		    <'true'> when 'true' ->
			let <_32> =
			    case <> of
			      %% Line 2043
			      <>
				  when try
					( let <_23> =
					      case call 'erlang':'>='
						       (C0, 48) of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      call 'erlang':'=<'
							  (C0, 57)
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
						( <_21> when 'true' ->
						      _21
						  -| ['compiler_generated'] )
					      end
					  in  ( call 'erlang':'=:='
						    (( _23
						       -| ['compiler_generated'] ), 'true')
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  call 'erlang':'-'
				      (C0, 48)
			      %% Line 2043
			      <>
				  when try
					( let <_26> =
					      case call 'erlang':'>='
						       (C0, 65) of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      call 'erlang':'=<'
							  (C0, 70)
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
						( <_24> when 'true' ->
						      _24
						  -| ['compiler_generated'] )
					      end
					  in  ( call 'erlang':'=:='
						    (( _26
						       -| ['compiler_generated'] ), 'true')
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  let <_27> =
				      call 'erlang':'-'
					  (C0, 65)
				  in  call 'erlang':'+'
					  (_27, 10)
			      %% Line 2043
			      <>
				  when try
					( let <_30> =
					      case call 'erlang':'>='
						       (C0, 97) of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      call 'erlang':'=<'
							  (C0, 102)
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
						( <_28> when 'true' ->
						      _28
						  -| ['compiler_generated'] )
					      end
					  in  ( call 'erlang':'=:='
						    (( _30
						       -| ['compiler_generated'] ), 'true')
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  let <_31> =
				      call 'erlang':'-'
					  (C0, 97)
				  in  call 'erlang':'+'
					  (_31, 10)
			      ( <> when 'true' ->
				    %% Line 2043
				    primop 'match_fail'
					('if_clause')
				-| ['compiler_generated'] )
			    end
			in  let <_33> =
				call %% Line 2043
				     'erlang':%% Line 2043
					      '*'
				    (_32, %% Line 2043
					  16)
			    in  let <_20> =
				    case <> of
				      %% Line 2043
				      <>
					  when try
						( let <_11> =
						      case call 'erlang':'>='
							       (C1, 48) of
							( <( 'true'
							     -| ['compiler_generated'] )> when 'true' ->
							      call 'erlang':'=<'
								  (C1, 57)
							  -| ['compiler_generated'] )
							( <( 'false'
							     -| ['compiler_generated'] )> when 'true' ->
							      'false'
							  -| ['compiler_generated'] )
							( <_9> when 'true' ->
							      _9
							  -| ['compiler_generated'] )
						      end
						  in  ( call 'erlang':'=:='
							    (( _11
							       -| ['compiler_generated'] ), 'true')
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  call 'erlang':'-'
					      (C1, 48)
				      %% Line 2043
				      <>
					  when try
						( let <_14> =
						      case call 'erlang':'>='
							       (C1, 65) of
							( <( 'true'
							     -| ['compiler_generated'] )> when 'true' ->
							      call 'erlang':'=<'
								  (C1, 70)
							  -| ['compiler_generated'] )
							( <( 'false'
							     -| ['compiler_generated'] )> when 'true' ->
							      'false'
							  -| ['compiler_generated'] )
							( <_12> when 'true' ->
							      _12
							  -| ['compiler_generated'] )
						      end
						  in  ( call 'erlang':'=:='
							    (( _14
							       -| ['compiler_generated'] ), 'true')
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  let <_15> =
					      call 'erlang':'-'
						  (C1, 65)
					  in  call 'erlang':'+'
						  (_15, 10)
				      %% Line 2043
				      <>
					  when try
						( let <_18> =
						      case call 'erlang':'>='
							       (C1, 97) of
							( <( 'true'
							     -| ['compiler_generated'] )> when 'true' ->
							      call 'erlang':'=<'
								  (C1, 102)
							  -| ['compiler_generated'] )
							( <( 'false'
							     -| ['compiler_generated'] )> when 'true' ->
							      'false'
							  -| ['compiler_generated'] )
							( <_16> when 'true' ->
							      _16
							  -| ['compiler_generated'] )
						      end
						  in  ( call 'erlang':'=:='
							    (( _18
							       -| ['compiler_generated'] ), 'true')
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  let <_19> =
					      call 'erlang':'-'
						  (C1, 97)
					  in  call 'erlang':'+'
						  (_19, 10)
				      ( <> when 'true' ->
					    %% Line 2043
					    primop 'match_fail'
						('if_clause')
					-| ['compiler_generated'] )
				    end
				in  let <V> =
					call %% Line 2043
					     'erlang':%% Line 2043
						      '+'
					    (_33, _20)
				    in  let <_35> =
					    #{#<%% Line 2044
						Acc>(%% Line 2044
						     'all',8,'binary',['unsigned'|['big']]),
					      #<%% Line 2044
						V>(%% Line 2044
						   8,1,'integer',['unsigned'|['big']])}#
					in  %% Line 2044
					    apply 'form_urldecode'/2
						(T, _35)
		    %% Line 2045
		    <'false'> when 'true' ->
			let <_36> =
			    #{#<%% Line 2046
				37>(%% Line 2046
				    8,1,'integer',['unsigned'|['big']]),
			      #<%% Line 2046
				C0>(%% Line 2046
				    8,1,'integer',['unsigned'|['big']]),
			      #<%% Line 2046
				C1>(%% Line 2046
				    8,1,'integer',['unsigned'|['big']]),
			      #<%% Line 2046
				T>(%% Line 2046
				   'all',8,'binary',['unsigned'|['big']])}#
			in  let <L> =
				apply %% Line 2046
				      'convert_to_list'/2
				    (_36, %% Line 2046
					  'utf8')
			    in  %% Line 2047
				call 'erlang':'throw'
				    ({'error','invalid_percent_encoding',L})
		    ( <_38> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_38})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2049
	  <#{#<H>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      let <_39> =
		  #{#<%% Line 2050
		      Acc>(%% Line 2050
			   'all',8,'binary',['unsigned'|['big']]),
		    #<%% Line 2050
		      H>(%% Line 2050
			 'undefined','undefined','utf8',['unsigned'|['big']])}#
	      in  %% Line 2050
		  apply 'form_urldecode'/2
		      (T, _39)
	  %% Line 2051
	  <#{#<H>(8,1,'integer',['unsigned'|['big']]),
	     #<_43>('all',8,'binary',['unsigned'|['big']])}#,_X_Acc> when 'true' ->
	      %% Line 2052
	      call 'erlang':'throw'
		  ({'error','invalid_character',[H|[]]})
	  ( <_41,_40> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_41,_40})
		  -| [{'function_name',{'form_urldecode',2}}] )
	    -| ['compiler_generated'] )
	end
'base10_decode'/1 =
    %% Line 2054
    fun (_0) ->
	%% Line 2055
	apply 'base10_decode'/2
	    (_0, #{}#)
'base10_decode'/2 =
    %% Line 2057
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{}#,Acc> when 'true' ->
	      %% Line 2058
	      Acc
	  %% Line 2059
	  <#{#<38>(8,1,'integer',['unsigned'|['big']]),
	     #<35>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      %% Line 2060
	      apply 'base10_decode_unicode'/2
		  (T, Acc)
	  %% Line 2061
	  <#{#<H>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      let <_2> =
		  #{#<%% Line 2062
		      Acc>(%% Line 2062
			   'all',8,'binary',['unsigned'|['big']]),
		    #<%% Line 2062
		      H>(%% Line 2062
			 'undefined','undefined','utf8',['unsigned'|['big']])}#
	      in  %% Line 2062
		  apply 'base10_decode'/2
		      (T, _2)
	  %% Line 2063
	  <#{#<H>(8,1,'integer',['unsigned'|['big']]),
	     #<_5>('all',8,'binary',['unsigned'|['big']])}#,_6> when 'true' ->
	      %% Line 2064
	      call 'erlang':'throw'
		  ({'error','invalid_input',[H|[]]})
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'base10_decode',2}}] )
	    -| ['compiler_generated'] )
	end
'base10_decode_unicode'/2 =
    %% Line 2067
    fun (_0,_1) ->
	%% Line 2068
	apply 'base10_decode_unicode'/3
	    (_0, 0, _1)
'base10_decode_unicode'/3 =
    %% Line 2070
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <#{#<H>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Codepoint,Acc>
	      when let <_3> =
		    call 'erlang':'=<'
			(48, H)
		in  let <_4> =
			call 'erlang':'=<'
			    (H, 57)
		    in  call 'erlang':'and'
			    (_3, _4) ->
	      let <_6> =
		  call %% Line 2071
		       'erlang':%% Line 2071
				'*'
		      (%% Line 2071
		       Codepoint, %% Line 2071
				  10)
	      in  let <_5> =
		      call %% Line 2071
			   'erlang':%% Line 2071
				    '-'
			  (%% Line 2071
			   H, %% Line 2071
			      48)
		  in  let <Res> =
			  call %% Line 2071
			       'erlang':%% Line 2071
					'+'
			      (_6, _5)
		      in  %% Line 2072
			  apply 'base10_decode_unicode'/3
			      (T, Res, Acc)
	  %% Line 2073
	  <#{#<59>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Codepoint,Acc> when 'true' ->
	      let <_8> =
		  #{#<%% Line 2074
		      Acc>(%% Line 2074
			   'all',8,'binary',['unsigned'|['big']]),
		    #<%% Line 2074
		      Codepoint>(%% Line 2074
				 'undefined','undefined','utf8',['unsigned'|['big']])}#
	      in  %% Line 2074
		  apply 'base10_decode'/2
		      (T, _8)
	  %% Line 2075
	  <#{#<H>(8,1,'integer',['unsigned'|['big']]),
	     #<_12>('all',8,'binary',['unsigned'|['big']])}#,_13,_14> when 'true' ->
	      %% Line 2076
	      call 'erlang':'throw'
		  ({'error','invalid_input',[H|[]]})
	  ( <_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9})
		  -| [{'function_name',{'base10_decode_unicode',3}}] )
	    -| ['compiler_generated'] )
	end
'normalize_map'/1 =
    %% Line 2083
    fun (_0) ->
	let <_1> =
	    apply %% Line 2087
		  'normalize_case'/1
		(_0)
	in  let <_2> =
		apply %% Line 2086
		      'normalize_percent_encoding'/1
		    (_1)
	    in  let <_3> =
		    apply %% Line 2085
			  'normalize_scheme_based'/1
			(_2)
		in  %% Line 2084
		    apply 'normalize_path_segment'/1
			(_3)
'normalize_case'/1 =
    %% Line 2091
    fun (_0) ->
	case _0 of
	  <Map = ~{'host':=Host,'scheme':=Scheme}~> when 'true' ->
	      let <_1> =
		  apply %% Line 2092
			'to_lower'/1
		      (%% Line 2092
		       Scheme)
	      in  let <_2> =
		      apply %% Line 2093
			    'to_lower'/1
			  (%% Line 2093
			   Host)
		  in  %% Line 2092
		      case <> of
			( <>
			      when call 'erlang':'is_map'
				    (Map) ->
			      ~{'scheme'=>_1,%% Line 2093
					    'host'=>_2|Map}~
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      ( primop 'match_fail'
				    ({'badmap',Map})
				-| [{'eval_failure','badmap'}] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 2094
	  <Map = ~{'host':=Host}~> when 'true' ->
	      let <_3> =
		  apply %% Line 2095
			'to_lower'/1
		      (%% Line 2095
		       Host)
	      in  %% Line 2095
		  case <> of
		    ( <>
			  when call 'erlang':'is_map'
				(Map) ->
			  ~{'host'=>_3|Map}~
		      -| ['compiler_generated'] )
		    ( <> when 'true' ->
			  ( primop 'match_fail'
				({'badmap',Map})
			    -| [{'eval_failure','badmap'}] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 2096
	  <Map = ~{'scheme':=Scheme}~> when 'true' ->
	      let <_4> =
		  apply %% Line 2097
			'to_lower'/1
		      (%% Line 2097
		       Scheme)
	      in  %% Line 2097
		  case <> of
		    ( <>
			  when call 'erlang':'is_map'
				(Map) ->
			  ~{'scheme'=>_4|Map}~
		      -| ['compiler_generated'] )
		    ( <> when 'true' ->
			  ( primop 'match_fail'
				({'badmap',Map})
			    -| [{'eval_failure','badmap'}] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 2098
	  <Map = ~{}~> when 'true' ->
	      %% Line 2099
	      Map
	  ( <_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5})
		  -| [{'function_name',{'normalize_case',1}}] )
	    -| ['compiler_generated'] )
	end
'normalize_percent_encoding'/1 =
    %% Line 2103
    fun (_0) ->
	let <Fun> =
	    fun (_10,_9) ->
		%% Line 2104
		case <_10,_9> of
		  <K,V>
		      when let <_1> =
			    call 'erlang':'=:='
				(K, 'userinfo')
			in  let <_2> =
				call 'erlang':'=:='
				    (K, 'host')
			    in  let <_3> =
				    call 'erlang':'=:='
					(K, 'path')
				in  let <_4> =
					call %% Line 2105
					     'erlang':%% Line 2105
						      '=:='
					    (%% Line 2105
					     K, %% Line 2105
						'query')
				    in  let <_5> =
					    call %% Line 2105
						 'erlang':%% Line 2105
							  '=:='
						(%% Line 2105
						 K, %% Line 2105
						    'fragment')
					in  let <_6> =
						call %% Line 2105
						     'erlang':%% Line 2105
							      'or'
						    (_4, _5)
					    in  let <_7> =
						    call 'erlang':'or'
							(_3, _6)
						in  let <_8> =
							call 'erlang':'or'
							    (_2, _7)
						    in  call 'erlang':'or'
							    (_1, _8) ->
		      %% Line 2106
		      apply 'decode'/1
			  (V)
		  %% Line 2108
		  <_15,V> when 'true' ->
		      %% Line 2109
		      V
		end
	in  %% Line 2111
	    call 'maps':'map'
		(Fun, _0)
'to_lower'/1 =
    %% Line 2114
    fun (_0) ->
	case _0 of
	  <Cs>
	      when call 'erlang':'is_list'
		    (_0) ->
	      let <B> =
		  apply %% Line 2115
			'convert_to_binary'/3
		      (%% Line 2115
		       Cs, %% Line 2115
			   'utf8', %% Line 2115
				   'utf8')
	      in  let <_2> =
		      apply %% Line 2116
			    'to_lower'/1
			  (%% Line 2116
			   B)
		  in  %% Line 2116
		      apply 'convert_to_list'/2
			  (_2, 'utf8')
	  %% Line 2117
	  <Cs>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      %% Line 2118
	      apply 'to_lower'/2
		  (Cs, #{}#)
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'to_lower',1}}] )
	    -| ['compiler_generated'] )
	end
'to_lower'/2 =
    %% Line 2120
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{#<C>(8,1,'integer',['unsigned'|['big']]),
	     #<Cs>('all',8,'binary',['unsigned'|['big']])}#,Acc>
	      when let <_2> =
		    call 'erlang':'=<'
			(65, C)
		in  let <_3> =
			call 'erlang':'=<'
			    (C, 90)
		    in  call 'erlang':'and'
			    (_2, _3) ->
	      let <_4> =
		  call %% Line 2121
		       'erlang':%% Line 2121
				'+'
		      (%% Line 2121
		       C, %% Line 2121
			  32)
	      in  let <_5> =
		      #{#<%% Line 2121
			  Acc>(%% Line 2121
			       'all',8,'binary',['unsigned'|['big']]),
			#<_4>(%% Line 2121
			      8,1,'integer',['unsigned'|['big']])}#
		  in  %% Line 2121
		      apply 'to_lower'/2
			  (Cs, _5)
	  %% Line 2122
	  <#{#<C>(8,1,'integer',['unsigned'|['big']]),
	     #<Cs>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      let <_6> =
		  #{#<%% Line 2123
		      Acc>(%% Line 2123
			   'all',8,'binary',['unsigned'|['big']]),
		    #<%% Line 2123
		      C>(%% Line 2123
			 8,1,'integer',['unsigned'|['big']])}#
	      in  %% Line 2123
		  apply 'to_lower'/2
		      (Cs, _6)
	  %% Line 2124
	  <#{}#,Acc> when 'true' ->
	      %% Line 2125
	      Acc
	  ( <_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7})
		  -| [{'function_name',{'to_lower',2}}] )
	    -| ['compiler_generated'] )
	end
'normalize_path_segment'/1 =
    %% Line 2130
    fun (_0) ->
	let <Path> =
	    call %% Line 2131
		 'maps':%% Line 2131
			'get'
		(%% Line 2131
		 'path', _0, %% Line 2131
			     'undefined')
	in  let <_2> =
		apply %% Line 2132
		      'remove_dot_segments'/1
		    (%% Line 2132
		     Path)
	    in  %% Line 2132
		case <> of
		  ( <>
			when call 'erlang':'is_map'
			      (_0) ->
			~{'path'=>_2|_0}~
		    -| ['compiler_generated'] )
		  ( <> when 'true' ->
			( primop 'match_fail'
			      ({'badmap',_0})
			  -| [{'eval_failure','badmap'}] )
		    -| ['compiler_generated'] )
		end
'remove_dot_segments'/1 =
    %% Line 2135
    fun (_0) ->
	case _0 of
	  <Path>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      %% Line 2136
	      apply 'remove_dot_segments'/2
		  (Path, #{}#)
	  %% Line 2137
	  <Path>
	      when call 'erlang':'is_list'
		    (_0) ->
	      let <B> =
		  apply %% Line 2138
			'convert_to_binary'/3
		      (%% Line 2138
		       Path, %% Line 2138
			     'utf8', %% Line 2138
				     'utf8')
	      in  let <B1> =
		      apply %% Line 2139
			    'remove_dot_segments'/2
			  (%% Line 2139
			   B, %% Line 2139
			      #{}#)
		  in  %% Line 2140
		      apply 'convert_to_list'/2
			  (B1, 'utf8')
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'remove_dot_segments',1}}] )
	    -| ['compiler_generated'] )
	end
'remove_dot_segments'/2 =
    %% Line 2142
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{}#,Output> when 'true' ->
	      %% Line 2143
	      Output
	  %% Line 2144
	  <#{#<46>(8,1,'integer',['unsigned'|['big']]),
	     #<46>(8,1,'integer',['unsigned'|['big']]),
	     #<47>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Output> when 'true' ->
	      %% Line 2145
	      apply 'remove_dot_segments'/2
		  (T, Output)
	  %% Line 2146
	  <#{#<46>(8,1,'integer',['unsigned'|['big']]),
	     #<47>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Output> when 'true' ->
	      %% Line 2147
	      apply 'remove_dot_segments'/2
		  (T, Output)
	  %% Line 2148
	  <#{#<47>(8,1,'integer',['unsigned'|['big']]),
	     #<46>(8,1,'integer',['unsigned'|['big']]),
	     #<47>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Output> when 'true' ->
	      let <_2> =
		  #{#<%% Line 2149
		      47>(%% Line 2149
			  8,1,'integer',['unsigned'|['big']]),
		    #<%% Line 2149
		      T>(%% Line 2149
			 'all',8,'binary',['unsigned'|['big']])}#
	      in  %% Line 2149
		  apply 'remove_dot_segments'/2
		      (_2, Output)
	  %% Line 2150
	  <#{#<47>(8,1,'integer',['unsigned'|['big']]),
	     #<46>(8,1,'integer',['unsigned'|['big']])}#,Output> when 'true' ->
	      %% Line 2151
	      apply 'remove_dot_segments'/2
		  (#{#<47>(8,1,'integer',['unsigned'|['big']])}#, Output)
	  %% Line 2152
	  <#{#<47>(8,1,'integer',['unsigned'|['big']]),
	     #<46>(8,1,'integer',['unsigned'|['big']]),
	     #<46>(8,1,'integer',['unsigned'|['big']]),
	     #<47>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Output> when 'true' ->
	      let <Out1> =
		  apply %% Line 2153
			'remove_last_segment'/1
		      (%% Line 2153
		       Output)
	      in  let <_4> =
		      #{#<%% Line 2154
			  47>(%% Line 2154
			      8,1,'integer',['unsigned'|['big']]),
			#<%% Line 2154
			  T>(%% Line 2154
			     'all',8,'binary',['unsigned'|['big']])}#
		  in  %% Line 2154
		      apply 'remove_dot_segments'/2
			  (_4, Out1)
	  %% Line 2155
	  <#{#<47>(8,1,'integer',['unsigned'|['big']]),
	     #<46>(8,1,'integer',['unsigned'|['big']]),
	     #<46>(8,1,'integer',['unsigned'|['big']])}#,Output> when 'true' ->
	      let <Out1> =
		  apply %% Line 2156
			'remove_last_segment'/1
		      (%% Line 2156
		       Output)
	      in  %% Line 2157
		  apply 'remove_dot_segments'/2
		      (#{#<47>(8,1,'integer',['unsigned'|['big']])}#, Out1)
	  %% Line 2158
	  <#{#<46>(8,1,'integer',['unsigned'|['big']])}#,Output> when 'true' ->
	      %% Line 2159
	      apply 'remove_dot_segments'/2
		  (#{}#, Output)
	  %% Line 2160
	  <#{#<46>(8,1,'integer',['unsigned'|['big']]),
	     #<46>(8,1,'integer',['unsigned'|['big']])}#,Output> when 'true' ->
	      %% Line 2161
	      apply 'remove_dot_segments'/2
		  (#{}#, Output)
	  %% Line 2162
	  <Input,Output> when 'true' ->
	      %% Line 2163
	      case apply 'first_path_segment'/1
		       (Input) of
		<{First,Rest}> when 'true' ->
		    let <_7> =
			#{#<%% Line 2164
			    Output>(%% Line 2164
				    'all',8,'binary',['unsigned'|['big']]),
			  #<%% Line 2164
			    First>(%% Line 2164
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  %% Line 2164
			apply 'remove_dot_segments'/2
			    (Rest, _7)
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_6})
		  -| ['compiler_generated'] )
	      end
	end
'first_path_segment'/1 =
    %% Line 2167
    fun (_0) ->
	let <F> =
	    apply %% Line 2168
		  'first_path_segment'/2
		(_0, %% Line 2168
		     #{}#)
	in  let <_2> =
		call %% Line 2169
		     'erlang':%% Line 2169
			      'byte_size'
		    (%% Line 2169
		     F)
	    in  %% Line 2169
		call 'erlang':'split_binary'
		    (_0, _2)
'first_path_segment'/2 =
    %% Line 2171
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{#<47>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      let <_3> =
		  #{#<%% Line 2172
		      T>(%% Line 2172
			 'all',8,'binary',['unsigned'|['big']])}#
	      in  let <_2> =
		      #{#<%% Line 2172
			  Acc>(%% Line 2172
			       'all',8,'binary',['unsigned'|['big']]),
			#<%% Line 2172
			  47>(%% Line 2172
			      8,1,'integer',['unsigned'|['big']])}#
		  in  %% Line 2172
		      apply 'first_path_segment_end'/2
			  (_3, _2)
	  %% Line 2173
	  <#{#<C>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      let <_5> =
		  #{#<%% Line 2174
		      T>(%% Line 2174
			 'all',8,'binary',['unsigned'|['big']])}#
	      in  let <_4> =
		      #{#<%% Line 2174
			  Acc>(%% Line 2174
			       'all',8,'binary',['unsigned'|['big']]),
			#<%% Line 2174
			  C>(%% Line 2174
			     8,1,'integer',['unsigned'|['big']])}#
		  in  %% Line 2174
		      apply 'first_path_segment_end'/2
			  (_5, _4)
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'first_path_segment',2}}] )
	    -| ['compiler_generated'] )
	end
'first_path_segment_end'/2 =
    %% Line 2177
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{}#,Acc> when 'true' ->
	      %% Line 2178
	      Acc
	  %% Line 2179
	  <#{#<47>(8,1,'integer',['unsigned'|['big']]),
	     #<_6>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      %% Line 2180
	      Acc
	  %% Line 2181
	  <#{#<C>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      let <_3> =
		  #{#<%% Line 2182
		      T>(%% Line 2182
			 'all',8,'binary',['unsigned'|['big']])}#
	      in  let <_2> =
		      #{#<%% Line 2182
			  Acc>(%% Line 2182
			       'all',8,'binary',['unsigned'|['big']]),
			#<%% Line 2182
			  C>(%% Line 2182
			     8,1,'integer',['unsigned'|['big']])}#
		  in  %% Line 2182
		      apply 'first_path_segment_end'/2
			  (_3, _2)
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'first_path_segment_end',2}}] )
	    -| ['compiler_generated'] )
	end
'remove_last_segment'/1 =
    %% Line 2185
    fun (_0) ->
	case _0 of
	  <#{}#> when 'true' ->
	      %% Line 2186
	      #{}#
	  %% Line 2187
	  <B> when 'true' ->
	      let <_1> =
		  call %% Line 2188
		       'erlang':%% Line 2188
				'byte_size'
		      (%% Line 2188
		       B)
	      in  let <_2> =
		      call %% Line 2188
			   'erlang':%% Line 2188
				    '-'
			  (_1, %% Line 2188
			       1)
		  in  %% Line 2188
		      case call 'erlang':'split_binary'
			       (B, _2) of
			<{Init,Last}> when 'true' ->
			    %% Line 2189
			    case Last of
			      %% Line 2190
			      <#{#<47>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
				  %% Line 2191
				  Init
			      %% Line 2192
			      <_X_Char> when 'true' ->
				  %% Line 2193
				  apply 'remove_last_segment'/1
				      (Init)
			    end
			( <_3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_3})
			  -| ['compiler_generated'] )
		      end
	end
'normalize_scheme_based'/1 =
    %% Line 2198
    fun (_0) ->
	let <Scheme> =
	    call %% Line 2199
		 'maps':%% Line 2199
			'get'
		(%% Line 2199
		 'scheme', _0, %% Line 2199
			       'undefined')
	in  let <Port> =
		call %% Line 2200
		     'maps':%% Line 2200
			    'get'
		    (%% Line 2200
		     'port', _0, %% Line 2200
				 'undefined')
	    in  let <Path> =
		    call %% Line 2201
			 'maps':%% Line 2201
				'get'
			(%% Line 2201
			 'path', _0, %% Line 2201
				     'undefined')
		in  %% Line 2202
		    apply 'normalize_scheme_based'/4
			(_0, Scheme, Port, Path)
'normalize_scheme_based'/4 =
    %% Line 2204
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Map,Scheme,Port,Path>
	      when let <_4> =
		    call %% Line 2205
			 'erlang':%% Line 2205
				  '=:='
			(%% Line 2205
			 Scheme, %% Line 2205
				 [104|[116|[116|[112]]]])
		in  let <_5> =
			call %% Line 2205
			     'erlang':%% Line 2205
				      '=:='
			    (%% Line 2205
			     Scheme, %% Line 2205
				     #{#<104>(8,1,'integer',['unsigned'|['big']]),
				       #<116>(8,1,'integer',['unsigned'|['big']]),
				       #<116>(8,1,'integer',['unsigned'|['big']]),
				       #<112>(8,1,'integer',['unsigned'|['big']])}#)
		    in  %% Line 2205
			call 'erlang':'or'
			    (_4, _5) ->
	      %% Line 2206
	      apply 'normalize_http'/3
		  (Map, Port, Path)
	  %% Line 2207
	  <Map,Scheme,Port,Path>
	      when let <_6> =
		    call %% Line 2208
			 'erlang':%% Line 2208
				  '=:='
			(%% Line 2208
			 Scheme, %% Line 2208
				 [104|[116|[116|[112|[115]]]]])
		in  let <_7> =
			call %% Line 2208
			     'erlang':%% Line 2208
				      '=:='
			    (%% Line 2208
			     Scheme, %% Line 2208
				     #{#<104>(8,1,'integer',['unsigned'|['big']]),
				       #<116>(8,1,'integer',['unsigned'|['big']]),
				       #<116>(8,1,'integer',['unsigned'|['big']]),
				       #<112>(8,1,'integer',['unsigned'|['big']]),
				       #<115>(8,1,'integer',['unsigned'|['big']])}#)
		    in  %% Line 2208
			call 'erlang':'or'
			    (_6, _7) ->
	      %% Line 2209
	      apply 'normalize_https'/3
		  (Map, Port, Path)
	  %% Line 2210
	  <Map,Scheme,Port,_X_Path>
	      when let <_8> =
		    call %% Line 2211
			 'erlang':%% Line 2211
				  '=:='
			(%% Line 2211
			 Scheme, %% Line 2211
				 [102|[116|[112]]])
		in  let <_9> =
			call %% Line 2211
			     'erlang':%% Line 2211
				      '=:='
			    (%% Line 2211
			     Scheme, %% Line 2211
				     #{#<102>(8,1,'integer',['unsigned'|['big']]),
				       #<116>(8,1,'integer',['unsigned'|['big']]),
				       #<112>(8,1,'integer',['unsigned'|['big']])}#)
		    in  %% Line 2211
			call 'erlang':'or'
			    (_8, _9) ->
	      %% Line 2212
	      apply 'normalize_ftp'/2
		  (Map, Port)
	  %% Line 2213
	  <Map,Scheme,Port,_X_Path>
	      when let <_10> =
		    call %% Line 2214
			 'erlang':%% Line 2214
				  '=:='
			(%% Line 2214
			 Scheme, %% Line 2214
				 [115|[115|[104]]])
		in  let <_11> =
			call %% Line 2214
			     'erlang':%% Line 2214
				      '=:='
			    (%% Line 2214
			     Scheme, %% Line 2214
				     #{#<115>(8,1,'integer',['unsigned'|['big']]),
				       #<115>(8,1,'integer',['unsigned'|['big']]),
				       #<104>(8,1,'integer',['unsigned'|['big']])}#)
		    in  %% Line 2214
			call 'erlang':'or'
			    (_10, _11) ->
	      %% Line 2215
	      apply 'normalize_ssh_sftp'/2
		  (Map, Port)
	  %% Line 2216
	  <Map,Scheme,Port,_X_Path>
	      when let <_12> =
		    call %% Line 2217
			 'erlang':%% Line 2217
				  '=:='
			(%% Line 2217
			 Scheme, %% Line 2217
				 [115|[102|[116|[112]]]])
		in  let <_13> =
			call %% Line 2217
			     'erlang':%% Line 2217
				      '=:='
			    (%% Line 2217
			     Scheme, %% Line 2217
				     #{#<115>(8,1,'integer',['unsigned'|['big']]),
				       #<102>(8,1,'integer',['unsigned'|['big']]),
				       #<116>(8,1,'integer',['unsigned'|['big']]),
				       #<112>(8,1,'integer',['unsigned'|['big']])}#)
		    in  %% Line 2217
			call 'erlang':'or'
			    (_12, _13) ->
	      %% Line 2218
	      apply 'normalize_ssh_sftp'/2
		  (Map, Port)
	  %% Line 2219
	  <Map,Scheme,Port,_X_Path>
	      when let <_14> =
		    call %% Line 2220
			 'erlang':%% Line 2220
				  '=:='
			(%% Line 2220
			 Scheme, %% Line 2220
				 [116|[102|[116|[112]]]])
		in  let <_15> =
			call %% Line 2220
			     'erlang':%% Line 2220
				      '=:='
			    (%% Line 2220
			     Scheme, %% Line 2220
				     #{#<116>(8,1,'integer',['unsigned'|['big']]),
				       #<102>(8,1,'integer',['unsigned'|['big']]),
				       #<116>(8,1,'integer',['unsigned'|['big']]),
				       #<112>(8,1,'integer',['unsigned'|['big']])}#)
		    in  %% Line 2220
			call 'erlang':'or'
			    (_14, _15) ->
	      %% Line 2221
	      apply 'normalize_tftp'/2
		  (Map, Port)
	  %% Line 2222
	  <Map,_20,_21,_22> when 'true' ->
	      %% Line 2223
	      Map
	end
'normalize_http'/3 =
    %% Line 2226
    fun (_0,_1,_2) ->
	let <M1> =
	    apply %% Line 2227
		  'normalize_port'/3
		(_0, _1, %% Line 2227
			 80)
	in  %% Line 2228
	    apply 'normalize_http_path'/2
		(M1, _2)
'normalize_https'/3 =
    %% Line 2231
    fun (_0,_1,_2) ->
	let <M1> =
	    apply %% Line 2232
		  'normalize_port'/3
		(_0, _1, %% Line 2232
			 443)
	in  %% Line 2233
	    apply 'normalize_http_path'/2
		(M1, _2)
'normalize_ftp'/2 =
    %% Line 2236
    fun (_0,_1) ->
	%% Line 2237
	apply 'normalize_port'/3
	    (_0, _1, 21)
'normalize_ssh_sftp'/2 =
    %% Line 2240
    fun (_0,_1) ->
	%% Line 2241
	apply 'normalize_port'/3
	    (_0, _1, 22)
'normalize_tftp'/2 =
    %% Line 2244
    fun (_0,_1) ->
	%% Line 2245
	apply 'normalize_port'/3
	    (_0, _1, 69)
'normalize_port'/3 =
    %% Line 2248
    fun (_0,_1,_2) ->
	%% Line 2249
	case _1 of
	  %% Line 2250
	  <_7>
	      when call 'erlang':'=:='
		    (_1,
		     _2) ->
	      %% Line 2251
	      call 'maps':'remove'
		  ('port', _0)
	  %% Line 2252
	  <_X_Else> when 'true' ->
	      _0
	end
'normalize_http_path'/2 =
    %% Line 2257
    fun (_0,_1) ->
	%% Line 2258
	case _1 of
	  %% Line 2259
	  <[]> when 'true' ->
	      %% Line 2260
	      case <> of
		( <>
		      when call 'erlang':'is_map'
			    (_0) ->
		      ~{'path'=>[47]|_0}~
		  -| ['compiler_generated'] )
		( <> when 'true' ->
		      ( primop 'match_fail'
			    ({'badmap',_0})
			-| [{'eval_failure','badmap'}] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 2261
	  <#{}#> when 'true' ->
	      %% Line 2262
	      case <> of
		( <>
		      when call 'erlang':'is_map'
			    (_0) ->
		      ~{'path'=>#{#<47>(8,1,'integer',['unsigned'|['big']])}#|_0}~
		  -| ['compiler_generated'] )
		( <> when 'true' ->
		      ( primop 'match_fail'
			    ({'badmap',_0})
			-| [{'eval_failure','badmap'}] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 2263
	  <_X_Else> when 'true' ->
	      _0
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('uri_string')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('uri_string', _0)
end