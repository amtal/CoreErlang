module 'ms_transform' ['format_error'/1,
		       'module_info'/0,
		       'module_info'/1,
		       'parse_transform'/2,
		       'transform_from_shell'/3]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[109|[115|[95|[116|[114|[97|[110|[115|[102|[111|[114|[109|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 71
		'spec' =
		    %% Line 71
		    [{{'format_error',1},[{'type',71,'bounded_fun',[{'type',71,'fun',[{'type',71,'product',[{'var',71,'Error'}]}|[{'var',71,'Chars'}]]}|[[{'type',72,'constraint',[{'atom',72,'is_subtype'}|[[{'var',72,'Error'}|[{'type',72,'tuple',[{'atom',72,'error'}|[{'type',72,'module',[]}|[{'type',72,'term',[]}]]]}]]]]}|[{'type',73,'constraint',[{'atom',73,'is_subtype'}|[[{'var',73,'Chars'}|[{'remote_type',73,[{'atom',73,'io_lib'}|[{'atom',73,'chars'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 196
		'spec' =
		    %% Line 196
		    [{{'transform_from_shell',3},[{'type',196,'bounded_fun',[{'type',196,'fun',[{'type',196,'product',[{'var',196,'Dialect'}|[{'var',196,'Clauses'}|[{'var',196,'BoundEnvironment'}]]]}|[{'type',196,'term',[]}]]}|[[{'type',197,'constraint',[{'atom',197,'is_subtype'}|[[{'var',197,'Dialect'}|[{'type',197,'union',[{'atom',197,'ets'}|[{'atom',197,'dbg'}]]}]]]]}|[{'type',198,'constraint',[{'atom',198,'is_subtype'}|[[{'var',198,'Clauses'}|[{'type',198,'list',[{'remote_type',198,[{'atom',198,'erl_parse'}|[{'atom',198,'abstract_clause'}|[[]]]]}]}]]]]}|[{'type',199,'constraint',[{'atom',199,'is_subtype'}|[[{'var',199,'BoundEnvironment'}|[{'remote_type',199,[{'atom',199,'erl_eval'}|[{'atom',199,'binding_struct'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 227
		'spec' =
		    %% Line 227
		    [{{'parse_transform',2},[{'type',227,'bounded_fun',[{'type',227,'fun',[{'type',227,'product',[{'var',227,'Forms'}|[{'var',227,'Options'}]]}|[{'type',227,'union',[{'var',227,'Forms2'}|[{'var',227,'Errors'}|[{'var',227,'Warnings'}]]]}]]}|[[{'type',228,'constraint',[{'atom',228,'is_subtype'}|[[{'var',228,'Forms'}|[{'type',228,'list',[{'type',228,'union',[{'remote_type',228,[{'atom',228,'erl_parse'}|[{'atom',228,'abstract_form'}|[[]]]]}|[{'remote_type',228,[{'atom',228,'erl_parse'}|[{'atom',228,'form_info'}|[[]]]]}]]}]}]]]]}|[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'Forms2'}|[{'type',229,'list',[{'type',229,'union',[{'remote_type',229,[{'atom',229,'erl_parse'}|[{'atom',229,'abstract_form'}|[[]]]]}|[{'remote_type',229,[{'atom',229,'erl_parse'}|[{'atom',229,'form_info'}|[[]]]]}]]}]}]]]]}|[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'Options'}|[{'type',230,'term',[]}]]]]}|[{'type',231,'constraint',[{'atom',231,'is_subtype'}|[[{'var',231,'Errors'}|[{'type',231,'tuple',[{'atom',231,'error'}|[{'ann_type',231,[{'var',231,'ErrInfo'}|[{'type',231,'list',[{'type',231,'tuple','any'}]}]]}|[{'ann_type',231,[{'var',231,'WarnInfo'}|[{'type',231,'nil',[]}]]}]]]}]]]]}|[{'type',232,'constraint',[{'atom',232,'is_subtype'}|[[{'var',232,'Warnings'}|[{'type',232,'tuple',[{'atom',232,'warning'}|[{'var',232,'Forms2'}|[{'ann_type',232,[{'var',232,'WarnInfo'}|[{'type',232,'list',[{'type',232,'tuple','any'}]}]]}]]]}]]]]}]]]]]]]}]}],
		%% Line 462
		'record' =
		    %% Line 462
		    [{'tgd',[{'record_field',462,{'atom',462,'b'}}|[{'record_field',463,{'atom',463,'p'}}|[{'record_field',464,{'atom',464,'eb'}}]]]}]]
'format_error'/1 =
    %% Line 75
    fun (_0) ->
	case _0 of
	  <{50,Name}> when 'true' ->
	      let <_1> =
		  call %% Line 77
		       'io_lib':%% Line 77
				'format'
		      (%% Line 77
		       [118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[112|[32|[115|[104|[97|[100|[111|[119|[101|[100|[32|[105|[110|[32|[109|[115|[95|[116|[114|[97|[110|[115|[102|[111|[114|[109|[32|[102|[117|[110|[32|[104|[101|[97|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 78
																																			 [Name|[]])
	      in  %% Line 76
		  call 'lists':'flatten'
		      (_1)
	  %% Line 80
	  <1> when 'true' ->
	      %% Line 81
	      [80|[97|[114|[97|[109|[101|[116|[101|[114|[32|[111|[102|[32|[101|[116|[115|[47|[100|[98|[103|[58|[102|[117|[110|[50|[109|[115|[47|[49|[32|[105|[115|[32|[110|[111|[116|[32|[97|[32|[108|[105|[116|[101|[114|[97|[108|[32|[102|[117|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 82
	  <2> when 'true' ->
	      %% Line 83
	      [101|[116|[115|[58|[102|[117|[110|[50|[109|[115|[32|[114|[101|[113|[117|[105|[114|[101|[115|[32|[102|[117|[110|[32|[119|[105|[116|[104|[32|[115|[105|[110|[103|[108|[101|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[111|[114|[32|[116|[117|[112|[108|[101|[32|[112|[97|[114|[97|[109|[101|[116|[101|[114]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 84
	  <3> when 'true' ->
	      %% Line 85
	      [100|[98|[103|[58|[102|[117|[110|[50|[109|[115|[32|[114|[101|[113|[117|[105|[114|[101|[115|[32|[102|[117|[110|[32|[119|[105|[116|[104|[32|[115|[105|[110|[103|[108|[101|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[111|[114|[32|[108|[105|[115|[116|[32|[112|[97|[114|[97|[109|[101|[116|[101|[114]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 86
	  <4> when 'true' ->
	      %% Line 87
	      [105|[110|[32|[102|[117|[110|[32|[104|[101|[97|[100|[44|[32|[111|[110|[108|[121|[32|[109|[97|[116|[99|[104|[105|[110|[103|[32|[40|[61|[41|[32|[111|[110|[32|[116|[111|[112|[108|[101|[118|[101|[108|[32|[99|[97|[110|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 88
	  <5> when 'true' ->
	      %% Line 89
	      [102|[117|[110|[32|[119|[105|[116|[104|[32|[115|[101|[109|[105|[99|[111|[108|[111|[110|[32|[40|[59|[41|[32|[105|[110|[32|[103|[117|[97|[114|[100|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 90
	  <16> when 'true' ->
	      %% Line 91
	      [102|[117|[110|[32|[119|[105|[116|[104|[32|[103|[117|[97|[114|[100|[32|[109|[97|[116|[99|[104|[105|[110|[103|[32|[40|[39|[61|[39|[32|[105|[110|[32|[103|[117|[97|[114|[100|[41|[32|[105|[115|[32|[105|[108|[108|[101|[103|[97|[108|[32|[97|[115|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99|[32|[97|[115|[32|[119|[101|[108|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 92
	  <{17,Name,Arithy}> when 'true' ->
	      let <_2> =
		  call %% Line 93
		       'io_lib':%% Line 93
				'format'
		      (%% Line 93
		       [102|[117|[110|[32|[99|[111|[110|[116|[97|[105|[110|[105|[110|[103|[32|[116|[104|[101|[32|[108|[111|[99|[97|[108|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[99|[97|[108|[108|[32|[39|[126|[116|[119|[47|[126|[119|[39|[32|[40|[99|[97|[108|[108|[101|[100|[32|[105|[110|[32|[103|[117|[97|[114|[100|[41|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 96
																																																																										      [Name|[Arithy|[]]])
	      in  %% Line 93
		  call 'lists':'flatten'
		      (_2)
	  %% Line 97
	  <{22,Module,Name,Arithy}> when 'true' ->
	      let <_3> =
		  call %% Line 98
		       'io_lib':%% Line 98
				'format'
		      (%% Line 98
		       [102|[117|[110|[32|[99|[111|[110|[116|[97|[105|[110|[105|[110|[103|[32|[116|[104|[101|[32|[114|[101|[109|[111|[116|[101|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[99|[97|[108|[108|[32|[39|[126|[119|[58|[126|[116|[119|[47|[126|[119|[39|[32|[40|[99|[97|[108|[108|[101|[100|[32|[105|[110|[32|[103|[117|[97|[114|[100|[41|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 101
																																																																													       [Module|[Name|[Arithy|[]]]])
	      in  %% Line 98
		  call 'lists':'flatten'
		      (_3)
	  %% Line 102
	  <{18,Str}> when 'true' ->
	      let <_4> =
		  call %% Line 104
		       'io_lib':%% Line 104
				'format'
		      (%% Line 104
		       [116|[104|[101|[32|[108|[97|[110|[103|[117|[97|[103|[101|[32|[101|[108|[101|[109|[101|[110|[116|[32|[126|[116|[115|[32|[40|[105|[110|[32|[103|[117|[97|[114|[100|[41|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 105
																																																						[Str|[]])
	      in  %% Line 103
		  call 'lists':'flatten'
		      (_4)
	  %% Line 106
	  <{23,Var}> when 'true' ->
	      let <_5> =
		  call %% Line 108
		       'io_lib':%% Line 108
				'format'
		      (%% Line 108
		       [98|[105|[116|[32|[115|[121|[110|[116|[97|[120|[32|[99|[111|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[32|[119|[105|[116|[104|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[40|[105|[110|[32|[103|[117|[97|[114|[100|[41|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 110
																																																																	 [Var|[]])
	      in  %% Line 107
		  call 'lists':'flatten'
		      (_5)
	  %% Line 111
	  <{24,Operator}> when 'true' ->
	      let <_6> =
		  call %% Line 115
		       'io_lib':%% Line 115
				'format'
		      (%% Line 115
		       [116|[104|[101|[32|[111|[112|[101|[114|[97|[116|[111|[114|[32|[126|[119|[32|[105|[115|[32|[110|[111|[116|[32|[97|[108|[108|[111|[119|[101|[100|[32|[105|[110|[32|[103|[117|[97|[114|[100|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 115
																															      [Operator|[]])
	      in  %% Line 114
		  call 'lists':'flatten'
		      (_6)
	  %% Line 116
	  <116> when 'true' ->
	      %% Line 117
	      [102|[117|[110|[32|[119|[105|[116|[104|[32|[98|[111|[100|[121|[32|[109|[97|[116|[99|[104|[105|[110|[103|[32|[40|[39|[61|[39|[32|[105|[110|[32|[98|[111|[100|[121|[41|[32|[105|[115|[32|[105|[108|[108|[101|[103|[97|[108|[32|[97|[115|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 118
	  <{117,Name,Arithy}> when 'true' ->
	      let <_7> =
		  call %% Line 119
		       'io_lib':%% Line 119
				'format'
		      (%% Line 119
		       [102|[117|[110|[32|[99|[111|[110|[116|[97|[105|[110|[105|[110|[103|[32|[116|[104|[101|[32|[108|[111|[99|[97|[108|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[99|[97|[108|[108|[32|[39|[126|[116|[119|[47|[126|[119|[39|[32|[40|[99|[97|[108|[108|[101|[100|[32|[105|[110|[32|[98|[111|[100|[121|[41|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 122
																																																																										[Name|[Arithy|[]]])
	      in  %% Line 119
		  call 'lists':'flatten'
		      (_7)
	  %% Line 123
	  <{122,Module,Name,Arithy}> when 'true' ->
	      let <_8> =
		  call %% Line 124
		       'io_lib':%% Line 124
				'format'
		      (%% Line 124
		       [102|[117|[110|[32|[99|[111|[110|[116|[97|[105|[110|[105|[110|[103|[32|[116|[104|[101|[32|[114|[101|[109|[111|[116|[101|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[99|[97|[108|[108|[32|[39|[126|[119|[58|[126|[116|[119|[47|[126|[119|[39|[32|[40|[99|[97|[108|[108|[101|[100|[32|[105|[110|[32|[98|[111|[100|[121|[41|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 127
																																																																													 [Module|[Name|[Arithy|[]]]])
	      in  %% Line 124
		  call 'lists':'flatten'
		      (_8)
	  %% Line 128
	  <{118,Str}> when 'true' ->
	      let <_9> =
		  call %% Line 130
		       'io_lib':%% Line 130
				'format'
		      (%% Line 130
		       [116|[104|[101|[32|[108|[97|[110|[103|[117|[97|[103|[101|[32|[101|[108|[101|[109|[101|[110|[116|[32|[126|[116|[115|[32|[40|[105|[110|[32|[98|[111|[100|[121|[41|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 131
																																																					  [Str|[]])
	      in  %% Line 129
		  call 'lists':'flatten'
		      (_9)
	  %% Line 132
	  <{123,Var}> when 'true' ->
	      let <_10> =
		  call %% Line 134
		       'io_lib':%% Line 134
				'format'
		      (%% Line 134
		       [98|[105|[116|[32|[115|[121|[110|[116|[97|[120|[32|[99|[111|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[32|[119|[105|[116|[104|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[40|[105|[110|[32|[98|[111|[100|[121|[41|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 136
																																																																   [Var|[]])
	      in  %% Line 133
		  call 'lists':'flatten'
		      (_10)
	  %% Line 137
	  <{124,Operator}> when 'true' ->
	      let <_11> =
		  call %% Line 141
		       'io_lib':%% Line 141
				'format'
		      (%% Line 141
		       [116|[104|[101|[32|[111|[112|[101|[114|[97|[116|[111|[114|[32|[126|[119|[32|[105|[115|[32|[110|[111|[116|[32|[97|[108|[108|[111|[119|[101|[100|[32|[105|[110|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[98|[111|[100|[105|[101|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 142
																																						  [Operator|[]])
	      in  %% Line 140
		  call 'lists':'flatten'
		      (_11)
	  %% Line 144
	  <{6,Str}> when 'true' ->
	      let <_12> =
		  call %% Line 146
		       'io_lib':%% Line 146
				'format'
		      (%% Line 146
		       [116|[104|[101|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[115|[32|[105|[115|[32|[117|[110|[98|[111|[117|[110|[100|[44|[32|[99|[97|[110|[110|[111|[116|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 147
																																													   [Str|[]])
	      in  %% Line 145
		  call 'lists':'flatten'
		      (_12)
	  %% Line 148
	  <{7,Name}> when 'true' ->
	      let <_13> =
		  call %% Line 150
		       'io_lib':%% Line 150
				'format'
		      (%% Line 150
		       [102|[117|[110|[32|[104|[101|[97|[100|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[117|[110|[107|[110|[111|[119|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 150
																																    [Name|[]])
	      in  %% Line 149
		  call 'lists':'flatten'
		      (_13)
	  %% Line 151
	  <{8,RName,FName}> when 'true' ->
	      let <_14> =
		  call %% Line 153
		       'io_lib':%% Line 153
				'format'
		      (%% Line 153
		       [102|[117|[110|[32|[104|[101|[97|[100|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[114|[101|[102|[101|[114|[101|[110|[99|[101|[32|[116|[111|[32|[117|[110|[107|[110|[111|[119|[110|[32|[102|[105|[101|[108|[100|[32|[126|[116|[119|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 154
																																																			  [FName|[RName|[]]])
	      in  %% Line 152
		  call 'lists':'flatten'
		      (_14)
	  %% Line 155
	  <{9,RName,FName}> when 'true' ->
	      let <_15> =
		  call %% Line 157
		       'io_lib':%% Line 157
				'format'
		      (%% Line 157
		       [102|[117|[110|[32|[104|[101|[97|[100|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100|[32|[102|[105|[101|[108|[100|[32|[126|[116|[119|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 158
																																															    [FName|[RName|[]]])
	      in  %% Line 156
		  call 'lists':'flatten'
		      (_15)
	  %% Line 159
	  <{10,Atom}> when 'true' ->
	      let <_16> =
		  call %% Line 161
		       'io_lib':%% Line 161
				'format'
		      (%% Line 161
		       [102|[117|[110|[32|[104|[101|[97|[100|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[97|[116|[111|[109|[32|[126|[119|[44|[32|[119|[104|[105|[99|[104|[32|[99|[111|[110|[102|[108|[105|[99|[115|[32|[119|[105|[116|[104|[32|[114|[101|[115|[101|[114|[118|[101|[100|[32|[97|[116|[111|[109|[115|[32|[105|[110|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99|[32|[104|[101|[97|[100|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 162
																																																												    [Atom|[]])
	      in  %% Line 160
		  call 'lists':'flatten'
		      (_16)
	  %% Line 163
	  <{11,Atom}> when 'true' ->
	      let <_17> =
		  call %% Line 165
		       'io_lib':%% Line 165
				'format'
		      (%% Line 165
		       [102|[117|[110|[32|[104|[101|[97|[100|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[98|[105|[116|[32|[115|[121|[110|[116|[97|[120|[32|[109|[97|[116|[99|[104|[105|[110|[103|[32|[111|[102|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[44|[32|[119|[104|[105|[99|[104|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 166
																																																																						     [Atom|[]])
	      in  %% Line 164
		  call 'lists':'flatten'
		      (_17)
	  %% Line 167
	  <{20,Name}> when 'true' ->
	      let <_18> =
		  call %% Line 169
		       'io_lib':%% Line 169
				'format'
		      (%% Line 169
		       [102|[117|[110|[32|[103|[117|[97|[114|[100|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[117|[110|[107|[110|[111|[119|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 169
																																	  [Name|[]])
	      in  %% Line 168
		  call 'lists':'flatten'
		      (_18)
	  %% Line 170
	  <{19,RName,FName}> when 'true' ->
	      let <_19> =
		  call %% Line 172
		       'io_lib':%% Line 172
				'format'
		      (%% Line 172
		       [102|[117|[110|[32|[103|[117|[97|[114|[100|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[114|[101|[102|[101|[114|[101|[110|[99|[101|[32|[116|[111|[32|[117|[110|[107|[110|[111|[119|[110|[32|[102|[105|[101|[108|[100|[32|[126|[116|[119|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 173
																																																				[FName|[RName|[]]])
	      in  %% Line 171
		  call 'lists':'flatten'
		      (_19)
	  %% Line 174
	  <{21,RName,FName}> when 'true' ->
	      let <_20> =
		  call %% Line 176
		       'io_lib':%% Line 176
				'format'
		      (%% Line 176
		       [102|[117|[110|[32|[103|[117|[97|[114|[100|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100|[32|[102|[105|[101|[108|[100|[32|[126|[116|[119|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 177
																																																  [FName|[RName|[]]])
	      in  %% Line 175
		  call 'lists':'flatten'
		      (_20)
	  %% Line 178
	  <{120,Name}> when 'true' ->
	      let <_21> =
		  call %% Line 180
		       'io_lib':%% Line 180
				'format'
		      (%% Line 180
		       [102|[117|[110|[32|[98|[111|[100|[121|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[117|[110|[107|[110|[111|[119|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 180
																																    [Name|[]])
	      in  %% Line 179
		  call 'lists':'flatten'
		      (_21)
	  %% Line 181
	  <{119,RName,FName}> when 'true' ->
	      let <_22> =
		  call %% Line 183
		       'io_lib':%% Line 183
				'format'
		      (%% Line 183
		       [102|[117|[110|[32|[98|[111|[100|[121|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[114|[101|[102|[101|[114|[101|[110|[99|[101|[32|[116|[111|[32|[117|[110|[107|[110|[111|[119|[110|[32|[102|[105|[101|[108|[100|[32|[126|[116|[119|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 184
																																																			  [FName|[RName|[]]])
	      in  %% Line 182
		  call 'lists':'flatten'
		      (_22)
	  %% Line 185
	  <{121,RName,FName}> when 'true' ->
	      let <_23> =
		  call %% Line 187
		       'io_lib':%% Line 187
				'format'
		      (%% Line 187
		       [102|[117|[110|[32|[98|[111|[100|[121|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100|[32|[102|[105|[101|[108|[100|[32|[126|[116|[119|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 188
																																															    [FName|[RName|[]]])
	      in  %% Line 186
		  call 'lists':'flatten'
		      (_23)
	  %% Line 189
	  <Else> when 'true' ->
	      let <_24> =
		  call %% Line 190
		       'io_lib':%% Line 190
				'format'
		      (%% Line 190
		       [85|[110|[107|[110|[111|[119|[110|[32|[101|[114|[114|[111|[114|[32|[99|[111|[100|[101|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]], %% Line 190
																		       [Else|[]])
	      in  %% Line 190
		  call 'lists':'flatten'
		      (_24)
	end
'transform_from_shell'/3 =
    %% Line 201
    fun (_0,_1,_2) ->
	let <SaveFilename> =
	    apply %% Line 202
		  'setup_filename'/0
		()
	in  let <_5> =
		catch
		    let <_4> =
			call %% Line 203
			     'gb_sets':%% Line 203
				       'new'
			    ()
		    in  %% Line 203
			apply 'ms_clause_list'/4
			    (1, _1, _0, _4)
	    in  %% Line 203
		case _5 of
		  %% Line 204
		  <{'EXIT',Reason}> when 'true' ->
		      do  %% Line 205
			  apply 'cleanup_filename'/1
			      (SaveFilename)
			  %% Line 206
			  call 'erlang':'exit'
			      (Reason)
		  %% Line 207
		  <{'error',Line,R}> when 'true' ->
		      let <_6> =
			  apply %% Line 208
				'cleanup_filename'/1
			      (%% Line 208
			       SaveFilename)
		      in  %% Line 208
			  {'error',[{_6,%% Line 209
					[{Line,'ms_transform',R}|[]]}|%% Line 209
								      []],%% Line 209
									  []}
		  %% Line 210
		  <Else> when 'true' ->
		      let <_7> =
			  catch
			      %% Line 211
			      apply 'fixup_environment'/2
				  (Else, _2)
		      in  %% Line 211
			  case _7 of
			    %% Line 212
			    <{'error',Line1,R1}> when 'true' ->
				let <_8> =
				    apply %% Line 213
					  'cleanup_filename'/1
					(%% Line 213
					 SaveFilename)
				in  %% Line 213
				    {'error',[{_8,%% Line 214
						  [{Line1,'ms_transform',R1}|[]]}|%% Line 214
										  []],%% Line 214
										      []}
			    %% Line 215
			    <Else1> when 'true' ->
				let <Ret> =
				    apply %% Line 216
					  'normalise'/1
					(%% Line 216
					 Else1)
				in  do  %% Line 217
					apply 'cleanup_filename'/1
					    (SaveFilename)
					%% Line 218
					Ret
			  end
		end
'parse_transform'/2 =
    %% Line 234
    fun (_0,_1) ->
	let <SaveFilename> =
	    apply %% Line 235
		  'setup_filename'/0
		()
	in  let <_3> =
		catch
		    %% Line 237
		    apply 'forms'/1
			(_0)
	    in  %% Line 237
		case _3 of
		  %% Line 238
		  <{'EXIT',Reason}> when 'true' ->
		      do  %% Line 239
			  apply 'cleanup_filename'/1
			      (SaveFilename)
			  %% Line 240
			  call 'erlang':'exit'
			      (Reason)
		  %% Line 241
		  <{'error',Line,R}> when 'true' ->
		      let <_4> =
			  apply %% Line 242
				'cleanup_filename'/1
			      (%% Line 242
			       SaveFilename)
		      in  %% Line 242
			  {'error',[{_4,%% Line 243
					[{Line,'ms_transform',R}|[]]}|%% Line 243
								      []],%% Line 243
									  []}
		  %% Line 244
		  <Else> when 'true' ->
		      %% Line 246
		      case apply 'get_warnings'/0
			       () of
			%% Line 247
			<[]> when 'true' ->
			    do  %% Line 248
				apply 'cleanup_filename'/1
				    (SaveFilename)
				%% Line 249
				Else
			%% Line 250
			<WL> when 'true' ->
			    let <FName> =
				apply %% Line 251
				      'cleanup_filename'/1
				    (%% Line 251
				     SaveFilename)
			    in  let <_10> =
				    letrec
					'lc$^0'/1 =
					    %% Line 252
					    fun (_8) ->
						case _8 of
						  <[{L,R}|_7]> when 'true' ->
						      let <_9> =
							  apply 'lc$^0'/1
							      (_7)
						      in  ( [{FName,[{L,'ms_transform',R}|[]]}|_9]
							    -| ['compiler_generated'] )
						  ( <[_6|_7]> when 'true' ->
							apply 'lc$^0'/1
							    (_7)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_16> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_16})
							  -| [{'function_name',{'lc$^0',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  %% Line 252
					apply 'lc$^0'/1
					    (WL)
				in  %% Line 253
				    {'warning',Else,_10}
		      end
		end
'get_warnings'/0 =
    %% Line 257
    fun () ->
	%% Line 258
	case call 'erlang':'get'
		 ('warnings') of
	  %% Line 259
	  <'undefined'> when 'true' ->
	      %% Line 260
	      []
	  %% Line 261
	  <Else> when 'true' ->
	      %% Line 262
	      Else
	end
'add_warning'/2 =
    %% Line 265
    fun (_0,_1) ->
	let <_2> =
	    apply %% Line 266
		  'get_warnings'/0
		()
	in  %% Line 266
	    call 'erlang':'put'
		('warnings', [{_0,_1}|_2])
'setup_filename'/0 =
    %% Line 268
    fun () ->
	let <_2> =
	    call %% Line 269
		 'erlang':%% Line 269
			  'erase'
		(%% Line 269
		 'filename')
	in  let <_1> =
		call %% Line 269
		     'erlang':%% Line 269
			      'erase'
		    (%% Line 269
		     'records')
	    in  let <_0> =
		    call %% Line 269
			 'erlang':%% Line 269
				  'erase'
			(%% Line 269
			 'warnings')
		in  %% Line 269
		    {_2,_1,_0}
'put_filename'/1 =
    %% Line 271
    fun (_0) ->
	%% Line 272
	call 'erlang':'put'
	    ('filename', _0)
'put_records'/1 =
    %% Line 274
    fun (_0) ->
	do  %% Line 275
	    call 'erlang':'put'
		('records', _0)
	    %% Line 276
	    'ok'
'get_records'/0 =
    %% Line 277
    fun () ->
	%% Line 278
	case call 'erlang':'get'
		 ('records') of
	  %% Line 279
	  <'undefined'> when 'true' ->
	      %% Line 280
	      []
	  %% Line 281
	  <Else> when 'true' ->
	      %% Line 282
	      Else
	end
'cleanup_filename'/1 =
    %% Line 284
    fun (_0) ->
	case _0 of
	  <{Old,OldRec,OldWarnings}> when 'true' ->
	      let <_2> =
		  case %% Line 285
		       call 'erlang':'erase'
			   ('filename') of
		    %% Line 286
		    <'undefined'> when 'true' ->
			%% Line 287
			[84|[79|[80|[95|[76|[69|[86|[69|[76]]]]]]]]]
		    %% Line 288
		    <X> when 'true' ->
			%% Line 289
			X
		  end
	      in  do  %% Line 291
		      case OldRec of
			%% Line 292
			<'undefined'> when 'true' ->
			    %% Line 293
			    call 'erlang':'erase'
				('records')
			%% Line 294
			<Rec> when 'true' ->
			    %% Line 295
			    call 'erlang':'put'
				('records', Rec)
		      end
		      do  %% Line 297
			  case OldWarnings of
			    %% Line 298
			    <'undefined'> when 'true' ->
				%% Line 299
				call 'erlang':'erase'
				    ('warnings')
			    %% Line 300
			    <Warn> when 'true' ->
				%% Line 301
				call 'erlang':'put'
				    ('warnings', Warn)
			  end
			  %% Line 303
			  case Old of
			    %% Line 304
			    <'undefined'> when 'true' ->
				_2
			    %% Line 306
			    <Y> when 'true' ->
				do  %% Line 307
				    call 'erlang':'put'
					('filename', Y)
				    _2
			  end
	  ( <_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7})
		  -| [{'function_name',{'cleanup_filename',1}}] )
	    -| ['compiler_generated'] )
	end
'add_record_definition'/1 =
    %% Line 311
    fun (_0) ->
	case _0 of
	  <{Name,FieldList}> when 'true' ->
	      let <_7> =
		  fun (_4,_3) ->
		      %% Line 313
		      case <_4,_3> of
			<F,{L,C}> when 'true' ->
			    let <_2> =
				apply 'record_field'/2
				    (F, C)
			    in  let <_1> =
				    call 'erlang':'+'
					(C, 1)
				in  {[_2|L],_1}
			( <_6,_5> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_6,_5})
				-| [{'function_name',{'-add_record_definition/1-fun-0-',2}}] )
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 312
		  case call 'lists':'foldl'
			   (_7, %% Line 314
				{[],2}, %% Line 315
					FieldList) of
		    <{KeyList,_11}> when 'true' ->
			let <_9> =
			    apply %% Line 316
				  'get_records'/0
				()
			in  %% Line 316
			    apply 'put_records'/1
				([{Name,KeyList}|_9])
		    ( <_8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_8})
		      -| ['compiler_generated'] )
		  end
	  ( <_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10})
		  -| [{'function_name',{'add_record_definition',1}}] )
	    -| ['compiler_generated'] )
	end
'record_field'/2 =
    %% Line 318
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'record_field',_4,{'atom',Line0,FieldName}},C> when 'true' ->
	      %% Line 319
	      {FieldName,C,{'atom',Line0,'undefined'}}
	  %% Line 320
	  <{'record_field',_5,{'atom',_6,FieldName},Def},C> when 'true' ->
	      %% Line 321
	      {FieldName,C,Def}
	  %% Line 322
	  <{'typed_record_field',Field,_X_Type},C> when 'true' ->
	      %% Line 323
	      apply 'record_field'/2
		  (Field, C)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'record_field',2}}] )
	    -| ['compiler_generated'] )
	end
'forms'/1 =
    %% Line 325
    fun (_0) ->
	case _0 of
	  <[F0|Fs0]> when 'true' ->
	      let <F1> =
		  apply %% Line 326
			'form'/1
		      (%% Line 326
		       F0)
	      in  let <Fs1> =
		      apply %% Line 327
			    'forms'/1
			  (%% Line 327
			   Fs0)
		  in  %% Line 328
		      [F1|Fs1]
	  %% Line 329
	  <[]> when 'true' ->
	      []
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'forms',1}}] )
	    -| ['compiler_generated'] )
	end
'form'/1 =
    %% Line 331
    fun (_0) ->
	case _0 of
	  <Form = {'attribute',_3,'file',{Filename,_4}}> when 'true' ->
	      do  %% Line 332
		  apply 'put_filename'/1
		      (Filename)
		  %% Line 333
		  Form
	  %% Line 334
	  <Form = {'attribute',_5,'record',Definition}> when 'true' ->
	      do  %% Line 335
		  apply 'add_record_definition'/1
		      (Definition)
		  %% Line 336
		  Form
	  %% Line 337
	  <{'function',Line,Name0,Arity0,Clauses0}> when 'true' ->
	      %% Line 338
	      case apply 'function'/3
		       (Name0, Arity0, Clauses0) of
		<{Name,Arity,Clauses}> when 'true' ->
		    %% Line 339
		    {'function',Line,Name,Arity,Clauses}
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 340
	  <AnyOther> when 'true' ->
	      %% Line 341
	      AnyOther
	end
'function'/3 =
    %% Line 342
    fun (_0,_1,_2) ->
	let <Clauses1> =
	    apply %% Line 343
		  'clauses'/1
		(_2)
	in  %% Line 344
	    {_0,_1,Clauses1}
'clauses'/1 =
    %% Line 345
    fun (_0) ->
	case _0 of
	  <[C0|Cs]> when 'true' ->
	      let <_1> =
		  call %% Line 346
		       'gb_sets':%% Line 346
				 'new'
		      ()
	      in  let <C1> =
		      apply %% Line 346
			    'clause'/2
			  (%% Line 346
			   C0, _1)
		  in  let <C2> =
			  apply %% Line 347
				'clauses'/1
			      (%% Line 347
			       Cs)
		      in  %% Line 348
			  [C1|C2]
	  %% Line 349
	  <[]> when 'true' ->
	      []
	  ( <_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4})
		  -| [{'function_name',{'clauses',1}}] )
	    -| ['compiler_generated'] )
	end
'clause'/2 =
    %% Line 351
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'clause',Line,H0,G0,B0},Bound> when 'true' ->
	      %% Line 352
	      case apply 'copy'/2
		       (H0, Bound) of
		<{H1,Bound1}> when 'true' ->
		    %% Line 353
		    case apply 'copy'/2
			     (B0, Bound1) of
		      <{B1,_X_Bound2}> when 'true' ->
			  %% Line 354
			  {'clause',Line,H1,G0,B1}
		      ( <_3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_3})
			-| ['compiler_generated'] )
		    end
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'clause',2}}] )
	    -| ['compiler_generated'] )
	end
'copy'/2 =
    %% Line 356
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'call',Line,{'remote',_X_Line2,{'atom',_X_Line3,'ets'},{'atom',_X_Line4,'fun2ms'}},%% Line 357
											       As0},%% Line 357
												    Bound> when 'true' ->
	      let <_2> =
		  apply %% Line 358
			'transform_call'/4
		      (%% Line 358
		       'ets', %% Line 358
			      Line, %% Line 358
				    As0, %% Line 358
					 Bound)
	      in  %% Line 358
		  {_2,Bound}
	  %% Line 359
	  <{'call',Line,{'remote',_X_Line2,{'atom',_X_Line3,'dbg'},{'atom',_X_Line4,'fun2ms'}},%% Line 360
											       As0},%% Line 360
												    Bound> when 'true' ->
	      let <_3> =
		  apply %% Line 361
			'transform_call'/4
		      (%% Line 361
		       'dbg', %% Line 361
			      Line, %% Line 361
				    As0, %% Line 361
					 Bound)
	      in  %% Line 361
		  {_3,Bound}
	  %% Line 362
	  <{'match',Line,A,B},Bound> when 'true' ->
	      %% Line 363
	      case apply 'copy'/2
		       (B, Bound) of
		<{B1,Bound1}> when 'true' ->
		    %% Line 364
		    case apply 'copy'/2
			     (A, Bound) of
		      <{A1,Bound2}> when 'true' ->
			  let <_6> =
			      call %% Line 365
				   'gb_sets':%% Line 365
					     'union'
				  (%% Line 365
				   Bound1, %% Line 365
					   Bound2)
			  in  %% Line 365
			      {{'match',Line,A1,B1},_6}
		      ( <_5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_5})
			-| ['compiler_generated'] )
		    end
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 366
	  <VarDef = {'var',_X_Line,'_'},Bound> when 'true' ->
	      %% Line 367
	      {VarDef,Bound}
	  %% Line 368
	  <VarDef = {'var',_X_Line,Name},Bound> when 'true' ->
	      let <Bound1> =
		  call %% Line 369
		       'gb_sets':%% Line 369
				 'add'
		      (%% Line 369
		       Name, %% Line 369
			     Bound)
	      in  %% Line 370
		  {VarDef,Bound1}
	  %% Line 371
	  <{'fun',Line,{'clauses',Clauses}},Bound> when 'true' ->
	      %% Line 372
	      case apply 'copy_list'/2
		       (Clauses, Bound) of
		<{NewClauses,_X_IgnoredBindings}> when 'true' ->
		    %% Line 373
		    {{'fun',Line,{'clauses',NewClauses}},Bound}
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 374
	  <{'named_fun',Line,Name,Clauses},Bound> when 'true' ->
	      let <_10> =
		  case %% Line 375
		       Name of
		    %% Line 376
		    <'_'> when 'true' ->
			Bound
		    %% Line 377
		    <_20> when 'true' ->
			call 'gb_sets':'add'
			    (Name, Bound)
		  end
	      in  %% Line 379
		  case apply 'copy_list'/2
			   (Clauses, _10) of
		    <{NewClauses,_X_IgnoredBindings}> when 'true' ->
			%% Line 380
			{{'named_fun',Line,Name,NewClauses},Bound}
		    ( <_12> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_12})
		      -| ['compiler_generated'] )
		  end
	  %% Line 381
	  <{'case',Line,Of,ClausesList},Bound> when 'true' ->
	      %% Line 382
	      case apply 'copy'/2
		       (Of, Bound) of
		<{NewOf,NewBind0}> when 'true' ->
		    %% Line 383
		    case apply 'copy_case_clauses'/3
			     (ClausesList, NewBind0, []) of
		      <{NewClausesList,NewBindings}> when 'true' ->
			  %% Line 384
			  {{'case',Line,NewOf,NewClausesList},NewBindings}
		      ( <_14> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_14})
			-| ['compiler_generated'] )
		    end
		( <_13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 385
	  <T,Bound>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_15> =
		  call %% Line 386
		       'erlang':%% Line 386
				'tuple_to_list'
		      (%% Line 386
		       T)
	      in  %% Line 386
		  case apply 'copy_list'/2
			   (_15, Bound) of
		    <{L,Bound1}> when 'true' ->
			let <_17> =
			    call %% Line 387
				 'erlang':%% Line 387
					  'list_to_tuple'
				(%% Line 387
				 L)
			in  %% Line 387
			    {_17,Bound1}
		    ( <_16> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_16})
		      -| ['compiler_generated'] )
		  end
	  %% Line 388
	  <L,Bound>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 389
	      apply 'copy_list'/2
		  (L, Bound)
	  %% Line 390
	  <AnyOther,Bound> when 'true' ->
	      %% Line 391
	      {AnyOther,Bound}
	end
'copy_case_clauses'/3 =
    %% Line 393
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[],Bound,AddSets> when 'true' ->
	      let <ReallyAdded> =
		  call %% Line 394
		       'gb_sets':%% Line 394
				 'intersection'
		      (%% Line 394
		       AddSets)
	      in  let <_4> =
		      call %% Line 395
			   'gb_sets':%% Line 395
				     'union'
			  (%% Line 395
			   Bound, %% Line 395
				  ReallyAdded)
		  in  %% Line 395
		      {[],_4}
	  %% Line 396
	  <[{'clause',Line,Match,Guard,Clauses}|T],Bound,AddSets> when 'true' ->
	      %% Line 397
	      case apply 'copy'/2
		       (Match, Bound) of
		<{NewMatch,MatchBinds}> when 'true' ->
		    %% Line 398
		    case apply 'copy'/2
			     (Guard, MatchBinds) of
		      <{NewGuard,GuardBinds}> when 'true' ->
			  %% Line 399
			  case apply 'copy'/2
				   (Clauses, GuardBinds) of
			    <{NewClauses,AllBinds}> when 'true' ->
				let <AddedBinds> =
				    call %% Line 402
					 'gb_sets':%% Line 402
						   'subtract'
					(%% Line 402
					 AllBinds, %% Line 402
						   Bound)
				in  %% Line 403
				    case %% Line 404
					 apply 'copy_case_clauses'/3
					     (T, Bound, [AddedBinds|AddSets]) of
				      <{NewTail,ExportedBindings}> when 'true' ->
					  %% Line 405
					  {[{'clause',Line,NewMatch,NewGuard,NewClauses}|NewTail],ExportedBindings}
				      ( <_9> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_9})
					-| ['compiler_generated'] )
				    end
			    ( <_7> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_7})
			      -| ['compiler_generated'] )
			  end
		      ( <_6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_6})
			-| ['compiler_generated'] )
		    end
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_5})
		  -| ['compiler_generated'] )
	      end
	  ( <_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11,_10})
		  -| [{'function_name',{'copy_case_clauses',3}}] )
	    -| ['compiler_generated'] )
	end
'copy_list'/2 =
    %% Line 407
    fun (_0,_1) ->
	case <_0,_1> of
	  <[H|T],Bound> when 'true' ->
	      %% Line 408
	      case apply 'copy'/2
		       (H, Bound) of
		<{C1,Bound1}> when 'true' ->
		    %% Line 409
		    case apply 'copy_list'/2
			     (T, Bound1) of
		      <{C2,Bound2}> when 'true' ->
			  %% Line 410
			  {[C1|C2],Bound2}
		      ( <_3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_3})
			-| ['compiler_generated'] )
		    end
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 411
	  <[],Bound> when 'true' ->
	      %% Line 412
	      {[],Bound}
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'copy_list',2}}] )
	    -| ['compiler_generated'] )
	end
'transform_call'/4 =
    %% Line 414
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Type,_X_Line,[{'fun',Line2,{'clauses',ClauseList}}|[]],Bound> when 'true' ->
	      %% Line 415
	      apply 'ms_clause_list'/4
		  (Line2, ClauseList, Type, Bound)
	  %% Line 416
	  <_X_Type,Line,_X_NoAbstractFun,_8> when 'true' ->
	      %% Line 417
	      call 'erlang':'throw'
		  ({'error',Line,1})
	end
'ms_clause_expand'/1 =
    %% Line 420
    fun (_0) ->
	case _0 of
	  <{'clause',Line,Parameters,Guard = [_6|[_7|_8]],Body}> when 'true' ->
	      %% Line 421
	      ( letrec
		    'lc$^0'/1 =
			fun (_3) ->
			    case _3 of
			      <[X|_2]> when 'true' ->
				  let <_4> =
				      apply 'lc$^0'/1
					  (_2)
				  in  ( [{'clause',Line,Parameters,[X|[]],Body}|_4]
					-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_9> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_9})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(Guard)
		-| ['list_comprehension'] )
	  %% Line 422
	  <_X_Other> when 'true' ->
	      %% Line 423
	      'false'
	end
'ms_clause_list'/4 =
    %% Line 425
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Line,[H|T],Type,Bound> when 'true' ->
	      %% Line 426
	      case apply 'ms_clause_expand'/1
		       (H) of
		%% Line 427
		<NewHead>
		    when call 'erlang':'is_list'
			  (NewHead) ->
		    let <_4> =
			call %% Line 428
			     'erlang':%% Line 428
				      '++'
			    (%% Line 428
			     NewHead, %% Line 428
				      T)
		    in  %% Line 428
			apply 'ms_clause_list'/4
			    (Line, _4, Type, Bound)
		%% Line 429
		<'false'> when 'true' ->
		    let <_6> =
			apply %% Line 430
			      'ms_clause'/3
			    (%% Line 430
			     H, %% Line 430
				Type, %% Line 430
				      Bound)
		    in  let <_5> =
			    apply %% Line 431
				  'ms_clause_list'/4
				(%% Line 431
				 Line, %% Line 431
				       T, %% Line 431
					  Type, %% Line 431
						Bound)
			in  %% Line 430
			    {'cons',Line,_6,_5}
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 433
	  <Line,[],_12,_13> when 'true' ->
	      %% Line 434
	      {'nil',Line}
	  ( <_11,_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8})
		  -| [{'function_name',{'ms_clause_list',4}}] )
	    -| ['compiler_generated'] )
	end
'ms_clause'/3 =
    %% Line 435
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{'clause',Line,Parameters,Guards,Body},Type,Bound> when 'true' ->
	      do  %% Line 436
		  apply 'check_type'/3
		      (Line, Parameters, Type)
		  %% Line 437
		  case apply 'transform_head'/2
			   (Parameters, Bound) of
		    <{MSHead,Bindings}> when 'true' ->
			let <MSGuards> =
			    apply %% Line 438
				  'transform_guards'/3
				(%% Line 438
				 Line, %% Line 438
				       Guards, %% Line 438
					       Bindings)
			in  let <MSBody> =
				apply %% Line 439
				      'transform_body'/3
				    (%% Line 439
				     Line, %% Line 439
					   Body, %% Line 439
						 Bindings)
			    in  %% Line 440
				{'tuple',Line,[MSHead|[MSGuards|[MSBody|[]]]]}
		    ( <_3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_3})
		      -| ['compiler_generated'] )
		  end
	  ( <_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7,_6})
		  -| [{'function_name',{'ms_clause',3}}] )
	    -| ['compiler_generated'] )
	end
'check_type'/3 =
    %% Line 443
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <_6,[{'var',_7,_8}|[]],_9> when 'true' ->
	      %% Line 444
	      'ok'
	  %% Line 445
	  <_10,[{'tuple',_11,_12}|[]],'ets'> when 'true' ->
	      %% Line 446
	      'ok'
	  %% Line 447
	  <_13,[{'record',_14,_15,_16}|[]],'ets'> when 'true' ->
	      %% Line 448
	      'ok'
	  %% Line 449
	  <_17,[{'cons',_18,_19,_20}|[]],'dbg'> when 'true' ->
	      %% Line 450
	      'ok'
	  %% Line 451
	  <_21,[{'nil',_22}|[]],'dbg'> when 'true' ->
	      %% Line 452
	      'ok'
	  %% Line 453
	  <Line0,[{'match',_23,{'var',_24,_25},X}|[]],Any> when 'true' ->
	      %% Line 454
	      apply 'check_type'/3
		  (Line0, [X|[]], Any)
	  %% Line 455
	  <Line0,[{'match',_26,X,{'var',_27,_28}}|[]],Any> when 'true' ->
	      %% Line 456
	      apply 'check_type'/3
		  (Line0, [X|[]], Any)
	  %% Line 457
	  <Line,_X_Type,'ets'> when 'true' ->
	      %% Line 458
	      call 'erlang':'throw'
		  ({'error',Line,2})
	  %% Line 459
	  <Line,_29,'dbg'> when 'true' ->
	      %% Line 460
	      call 'erlang':'throw'
		  ({'error',Line,3})
	  ( <_5,_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4,_3})
		  -| [{'function_name',{'check_type',3}}] )
	    -| ['compiler_generated'] )
	end
'transform_guards'/3 =
    %% Line 467
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Line,[],_X_Bindings> when 'true' ->
	      %% Line 468
	      {'nil',Line}
	  %% Line 469
	  <Line,[G|[]],Bindings> when 'true' ->
	      let <B> =
		  {%% Line 470
		   'tgd',%% Line 470
			 Bindings,%% Line 470
				  'guard',%% Line 470
					  0}
	      in  %% Line 471
		  apply 'tg0'/3
		      (Line, G, B)
	  %% Line 472
	  <Line,_7,_8> when 'true' ->
	      %% Line 473
	      call 'erlang':'throw'
		  ({'error',Line,5})
	end
'transform_body'/3 =
    %% Line 475
    fun (_0,_1,_2) ->
	let <B> =
	    {%% Line 476
	     'tgd',_2,%% Line 476
		      'body',%% Line 476
			     100}
	in  %% Line 477
	    apply 'tg0'/3
		(_0, _1, B)
'guard_top_trans'/1 =
    %% Line 480
    fun (_0) ->
	case _0 of
	  <_@r0 = {'call',Line0,{'atom',Line1,OldTest},Params}> when 'true' ->
	      let <_1> =
		  call %% Line 481
		       'erlang':%% Line 481
				'length'
		      (%% Line 481
		       Params)
	      in  %% Line 481
		  case apply 'old_bool_test'/2
			   (OldTest, _1) of
		    %% Line 482
		    <'undefined'> when 'true' ->
			%% Line 483
			_@r0
		    %% Line 484
		    <Trans> when 'true' ->
			%% Line 485
			{'call',Line0,{'atom',Line1,Trans},Params}
		  end
	  %% Line 487
	  <Else> when 'true' ->
	      %% Line 488
	      Else
	end
'tg0'/3 =
    %% Line 490
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Line,[],_17> when 'true' ->
	      %% Line 491
	      {'nil',Line}
	  %% Line 492
	  <Line,[H0|T],B = {'tgd',_18,_19,_20}>
	      when ( try
		      let <_7> =
			  call 'erlang':'element'
			      (3, B)
		      in  call 'erlang':'=:='
			      (_7, 'guard')
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      let <H> =
		  apply %% Line 493
			'guard_top_trans'/1
		      (%% Line 493
		       H0)
	      in  let <_11> =
		      apply %% Line 494
			    'tg'/2
			  (%% Line 494
			   H, %% Line 494
			      B)
		  in  let <_10> =
			  apply %% Line 494
				'tg0'/3
			      (%% Line 494
			       Line, %% Line 494
				     T, %% Line 494
					B)
		      in  %% Line 494
			  {'cons',Line,_11,_10}
	  %% Line 495
	  <Line,[H|T],B> when 'true' ->
	      let <_13> =
		  apply %% Line 496
			'tg'/2
		      (%% Line 496
		       H, %% Line 496
			  B)
	      in  let <_12> =
		      apply %% Line 496
			    'tg0'/3
			  (%% Line 496
			   Line, %% Line 496
				 T, %% Line 496
				    B)
		  in  %% Line 496
		      {'cons',Line,_13,_12}
	  ( <_16,_15,_14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15,_14})
		  -| [{'function_name',{'tg0',3}}] )
	    -| ['compiler_generated'] )
	end
'tg'/2 =
    %% Line 499
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'match',Line,_172,_173},B> when 'true' ->
	      %% Line 500
	      ( case B of
		  ( <( {'tgd',_174,_175,_rec0}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_4> =
			    call 'erlang':'+'
				(16, _rec0)
			in  call 'erlang':'throw'
				({'error',Line,_4})
		    -| ['compiler_generated'] )
		  ( <_176> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','tgd'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 501
	  <Expr = {'op',Line,Operator,O1,O2},B> when 'true' ->
	      %% Line 502
	      case call 'erl_eval':'partial_eval'
		       (Expr) of
		%% Line 503
		<_177>
		    when call 'erlang':'=:='
			  (_177,
			   Expr) ->
		    let <_5> =
			apply %% Line 504
			      'tg'/2
			    (%% Line 504
			     O1, %% Line 504
				 B)
		    in  let <_6> =
			    apply %% Line 504
				  'tg'/2
				(%% Line 504
				 O2, %% Line 504
				     B)
			in  %% Line 504
			    {'tuple',Line,[{'atom',Line,Operator}|[_5|[_6|[]]]]}
		%% Line 505
		<Value> when 'true' ->
		    %% Line 506
		    Value
	      end
	  %% Line 508
	  <Expr = {'op',Line,Operator,O1},B> when 'true' ->
	      %% Line 509
	      case call 'erl_eval':'partial_eval'
		       (Expr) of
		%% Line 510
		<_178>
		    when call 'erlang':'=:='
			  (_178,
			   Expr) ->
		    let <_8> =
			apply %% Line 511
			      'tg'/2
			    (%% Line 511
			     O1, %% Line 511
				 B)
		    in  %% Line 511
			{'tuple',Line,[{'atom',Line,Operator}|[_8|[]]]}
		%% Line 512
		<Value> when 'true' ->
		    %% Line 513
		    Value
	      end
	  %% Line 515
	  <{'call',_X_Line,{'atom',Line2,'bindings'},[]},_X_B> when 'true' ->
	      %% Line 516
	      {'atom',Line2,'$*'}
	  %% Line 517
	  <{'call',_X_Line,{'atom',Line2,'object'},[]},_X_B> when 'true' ->
	      %% Line 518
	      {'atom',Line2,'$_'}
	  %% Line 519
	  <{'call',Line,Call = {'atom',_179,'is_record'},[Object|[R = {'atom',Line3,RName}|[]]]},B> when 'true' ->
	      let <MSObject> =
		  apply %% Line 520
			'tg'/2
		      (%% Line 520
		       Object, %% Line 520
			       B)
	      in  let <RDefs> =
		      apply %% Line 521
			    'get_records'/0
			  ()
		  in  %% Line 522
		      case call 'lists':'keysearch'
			       (RName, 1, RDefs) of
			%% Line 523
			<{'value',{_180,FieldList}}>
			    when call 'erlang':'=:='
				  (_180,
				   RName) ->
			    let <_12> =
				call %% Line 524
				     'erlang':%% Line 524
					      'length'
				    (%% Line 524
				     FieldList)
			    in  let <RSize> =
				    call %% Line 524
					 'erlang':%% Line 524
						  '+'
					(_12, %% Line 524
					      1)
				in  %% Line 525
				    {'tuple',Line,[Call|[MSObject|[R|[{'integer',Line3,RSize}|[]]]]]}
			%% Line 526
			<_181> when 'true' ->
			    %% Line 527
			    ( case B of
				( <( {'tgd',_182,_183,_rec1}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_16> =
					  call 'erlang':'+'
					      (20, _rec1)
				      in  call 'erlang':'throw'
					      ({'error',Line3,{_16,RName}})
				  -| ['compiler_generated'] )
				( <_184> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','tgd'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		      end
	  %% Line 529
	  <{'call',Line,_@r0 = {'atom',Line2,FunName},ParaList},B> when 'true' ->
	      let <_20> =
		  call %% Line 530
		       'erlang':%% Line 530
				'length'
		      (%% Line 530
		       ParaList)
	      in  %% Line 530
		  ( case B of
		      ( <( {'tgd',_185,_rec2,_186}
			   -| ['compiler_generated'] )> when 'true' ->
			    case apply 'is_ms_function'/3
				     (FunName, _20, _rec2) of
			      %% Line 531
			      <'true'> when 'true' ->
				  let <_23> =
				      fun (_21) ->
					  %% Line 533
					  apply 'tg'/2
					      (_21, B)
				  in  let <_24> =
					  call %% Line 533
					       'lists':%% Line 533
						       'map'
					      (_23, %% Line 533
						    ParaList)
				      in  %% Line 532
					  {'tuple',Line,[_@r0|_24]}
			      %% Line 534
			      <_188> when 'true' ->
				  %% Line 535
				  ( case B of
				      ( <( {'tgd',_189,_190,_rec3}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_28> =
						call 'erlang':'+'
						    (17, _rec3)
					    in  let <_25> =
						    call %% Line 536
							 'erlang':%% Line 536
								  'length'
							(%% Line 536
							 ParaList)
						in  call 'erlang':'throw'
							({'error',Line,{_28,%% Line 536
									    FunName,_25}})
					-| ['compiler_generated'] )
				      ( <_191> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','tgd'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_187> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','tgd'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 538
	  <{'call',Line,{'remote',_192,{'atom',_193,'erlang'},_@r1 = {'atom',Line2,FunName}},ParaList},%% Line 539
												       B> when 'true' ->
	      let <L> =
		  call %% Line 540
		       'erlang':%% Line 540
				'length'
		      (%% Line 540
		       ParaList)
	      in  %% Line 541
		  ( case B of
		      ( <( {'tgd',_194,_rec4,_195}
			   -| ['compiler_generated'] )> when 'true' ->
			    case apply 'is_imported_from_erlang'/3
				     (FunName, L, _rec4) of
			      %% Line 542
			      <'true'> when 'true' ->
				  %% Line 543
				  ( case B of
				      ( <( {'tgd',_197,_rec5,_198}
					   -| ['compiler_generated'] )> when 'true' ->
					    case apply 'is_operator'/3
						     (FunName, L, _rec5) of
					      %% Line 544
					      <'false'> when 'true' ->
						  %% Line 545
						  apply 'tg'/2
						      ({'call',Line,_@r1,ParaList}, B)
					      %% Line 546
					      <'true'> when 'true' ->
						  let <_35> =
						      call %% Line 547
							   'erlang':%% Line 547
								    'list_to_tuple'
							  (%% Line 547
							   ['op'|[Line2|[FunName|ParaList]]])
						  in  %% Line 547
						      apply 'tg'/2
							  (_35, B)
					      ( <_36> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_36})
						-| ['compiler_generated'] )
					    end
					-| ['compiler_generated'] )
				      ( <_199> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','tgd'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 549
			      <_200> when 'true' ->
				  %% Line 550
				  ( case B of
				      ( <( {'tgd',_201,_202,_rec6}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_40> =
						call 'erlang':'+'
						    (22, _rec6)
					    in  let <_37> =
						    call %% Line 551
							 'erlang':%% Line 551
								  'length'
							(%% Line 551
							 ParaList)
						in  call 'erlang':'throw'
							({'error',Line,{_40,'erlang',%% Line 551
										     FunName,_37}})
					-| ['compiler_generated'] )
				      ( <_203> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','tgd'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_196> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','tgd'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 553
	  <{'call',Line,{'remote',_204,{'atom',_205,ModuleName},%% Line 554
								{'atom',_206,FunName}},%% Line 554
										       ParaList},%% Line 554
												 B> when 'true' ->
	      %% Line 555
	      ( case B of
		  ( <( {'tgd',_207,_208,_rec7}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_45> =
			    call 'erlang':'+'
				(22, _rec7)
			in  let <_42> =
				call 'erlang':'length'
				    (ParaList)
			    in  call 'erlang':'throw'
				    ({'error',Line,{_45,ModuleName,FunName,_42}})
		    -| ['compiler_generated'] )
		  ( <_209> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','tgd'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 556
	  <{'cons',Line,H,T},B> when 'true' ->
	      let <_47> =
		  apply %% Line 557
			'tg'/2
		      (%% Line 557
		       H, %% Line 557
			  B)
	      in  let <_46> =
		      apply %% Line 557
			    'tg'/2
			  (%% Line 557
			   T, %% Line 557
			      B)
		  in  %% Line 557
		      {'cons',Line,_47,_46}
	  %% Line 558
	  <_@r2 = {'nil',Line},_X_B> when 'true' ->
	      %% Line 559
	      _@r2
	  %% Line 560
	  <{'tuple',Line,L},B> when 'true' ->
	      let <_50> =
		  fun (_48) ->
		      %% Line 561
		      apply 'tg'/2
			  (_48, B)
	      in  let <_51> =
		      call %% Line 561
			   'lists':%% Line 561
				   'map'
			  (_50, %% Line 561
				L)
		  in  %% Line 561
		      {'tuple',Line,[{'tuple',Line,_51}|[]]}
	  %% Line 562
	  <_@r3 = {'integer',Line,I},_210> when 'true' ->
	      %% Line 563
	      _@r3
	  %% Line 564
	  <_@r4 = {'char',Line,C},_211> when 'true' ->
	      %% Line 565
	      _@r4
	  %% Line 566
	  <_@r5 = {'float',Line,F},_212> when 'true' ->
	      %% Line 567
	      _@r5
	  %% Line 568
	  <_@r6 = {'atom',Line,A},_213> when 'true' ->
	      %% Line 569
	      case call 'erlang':'atom_to_list'
		       (A) of
		%% Line 570
		<[36|_214]> when 'true' ->
		    %% Line 571
		    {'tuple',Line,[{'atom',Line,'const'}|[_@r6|[]]]}
		%% Line 572
		<_215> when 'true' ->
		    %% Line 573
		    _@r6
	      end
	  %% Line 575
	  <_@r7 = {'string',Line,S},_216> when 'true' ->
	      %% Line 576
	      _@r7
	  %% Line 577
	  <_@r8 = {'var',Line,VarName},B> when 'true' ->
	      %% Line 578
	      ( case B of
		  ( <( {'tgd',_rec8,_217,_218}
		       -| ['compiler_generated'] )> when 'true' ->
			case apply 'lkup_bind'/2
				 (VarName, _rec8) of
			  %% Line 579
			  <'undefined'> when 'true' ->
			      %% Line 580
			      {'tuple',Line,[{'atom',Line,'const'}|[_@r8|[]]]}
			  %% Line 581
			  <AtomName> when 'true' ->
			      %% Line 582
			      {'atom',Line,AtomName}
			end
		    -| ['compiler_generated'] )
		  ( <_219> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','tgd'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 584
	  <{'record_field',Line,Object,RName,{'atom',_X_Line1,KeyName}},B> when 'true' ->
	      let <RDefs> =
		  apply %% Line 585
			'get_records'/0
		      ()
	      in  %% Line 586
		  case call 'lists':'keysearch'
			   (RName, 1, RDefs) of
		    %% Line 587
		    <{'value',{_220,FieldList}}>
			when call 'erlang':'=:='
			      (_220,
			       RName) ->
			%% Line 588
			case call 'lists':'keysearch'
				 (KeyName, 1, FieldList) of
			  %% Line 589
			  <{'value',{_221,Position,_222}}>
			      when call 'erlang':'=:='
				    (_221,
				     KeyName) ->
			      let <NewObject> =
				  apply %% Line 590
					'tg'/2
				      (%% Line 590
				       Object, %% Line 590
					       B)
			      in  %% Line 591
				  {'tuple',Line,[{'atom',Line,'element'}|%% Line 592
									 [{'integer',Line,Position}|[NewObject|[]]]]}
			  %% Line 593
			  <_223> when 'true' ->
			      %% Line 594
			      ( case B of
				  ( <( {'tgd',_224,_225,_rec9}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_60> =
					    call 'erlang':'+'
						(19, _rec9)
					in  call 'erlang':'throw'
						({'error',Line,{_60,RName,%% Line 595
									  KeyName}})
				    -| ['compiler_generated'] )
				  ( <_226> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','tgd'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			end
		    %% Line 597
		    <_227> when 'true' ->
			%% Line 598
			( case B of
			    ( <( {'tgd',_228,_229,_rec10}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_64> =
				      call 'erlang':'+'
					  (20, _rec10)
				  in  call 'erlang':'throw'
					  ({'error',Line,{_64,RName}})
			      -| ['compiler_generated'] )
			    ( <_230> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','tgd'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		  end
	  %% Line 601
	  <{'record',Line,RName,RFields},B> when 'true' ->
	      let <RDefs> =
		  apply %% Line 602
			'get_records'/0
		      ()
	      in  let <_76> =
		      fun (_73,_72) ->
			  %% Line 603
			  case <_73,_72> of
			    <{'record_field',_231,{'atom',_232,Key},Value},%% Line 604
									   L> when 'true' ->
				let <NV> =
				    apply %% Line 605
					  'tg'/2
					(%% Line 605
					 Value, %% Line 605
						B)
				in  %% Line 606
				    [{Key,NV}|L]
			    %% Line 607
			    <{'record_field',_233,{'var',_234,'_'},Value},%% Line 608
									  L> when 'true' ->
				let <NV> =
				    apply %% Line 609
					  'tg'/2
					(%% Line 609
					 Value, %% Line 609
						B)
				in  %% Line 610
				    [{{'default'},NV}|L]
			    %% Line 611
			    <_235,_236> when 'true' ->
				%% Line 613
				( case B of
				    ( <( {'tgd',_237,_238,_rec11}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_71> =
					      call 'erlang':'+'
						  (20, _rec11)
					  in  call 'erlang':'throw'
						  ({'error',Line,{_71,%% Line 614
								      RName}})
				      -| ['compiler_generated'] )
				    ( <_239> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','tgd'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			  end
		  in  let <KeyList0> =
			  call %% Line 603
			       'lists':%% Line 603
				       'foldl'
			      (_76, %% Line 616
				    [], %% Line 617
					RFields)
		      in  let <_79> =
			      case %% Line 618
				   call 'lists':'keysearch'
				       ({'default'}, 1, KeyList0) of
				%% Line 619
				<{'value',{{'default'},OverriddenDefValue}}> when 'true' ->
				    %% Line 620
				    {'true',OverriddenDefValue}
				%% Line 621
				<_240> when 'true' ->
				    %% Line 622
				    'false'
			      end
			  in  let <KeyList> =
				  call %% Line 624
				       'lists':%% Line 624
					       'keydelete'
				      (%% Line 624
				       {'default'}, %% Line 624
						    1, %% Line 624
						       KeyList0)
			      in  do  %% Line 625
				      case call 'lists':'keysearch'
					       ({'default'}, 1, KeyList) of
					%% Line 626
					<{'value',{{'default'},_241}}> when 'true' ->
					    %% Line 627
					    ( case B of
						( <( {'tgd',_242,_243,_rec12}
						     -| ['compiler_generated'] )> when 'true' ->
						      let <_84> =
							  call 'erlang':'+'
							      (21, _rec12)
						      in  call 'erlang':'throw'
							      ({'error',Line,{_84,RName,'_'}})
						  -| ['compiler_generated'] )
						( <_244> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','tgd'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					%% Line 628
					<_245> when 'true' ->
					    'ok'
				      end
				      %% Line 631
				      case call 'lists':'keysearch'
					       (RName, 1, RDefs) of
					%% Line 632
					<{'value',{_246,FieldList0}}>
					    when call 'erlang':'=:='
						  (_246,
						   RName) ->
					    let <_94> =
						fun (_91,_90) ->
						    %% Line 634
						    case <_91,_90> of
						      <{FN,_247,Def},Acc> when 'true' ->
							  let <_88> =
							      case %% Line 635
								   call 'lists':'keysearch'
								       (FN, 1, KeyList) of
								%% Line 636
								<{'value',{_248,X0}}>
								    when call 'erlang':'=:='
									  (_248,
									   FN) ->
								    %% Line 637
								    X0
								%% Line 638
								<_249> when 'true' ->
								    %% Line 639
								    case _79 of
								      %% Line 640
								      <{'true',Overridden}> when 'true' ->
									  %% Line 641
									  Overridden
								      %% Line 642
								      <'false'> when 'true' ->
									  %% Line 643
									  Def
								      ( <_86> when 'true' ->
									    primop 'match_fail'
										({'case_clause',_86})
									-| ['compiler_generated'] )
								    end
							      end
							  in  %% Line 646
							      [_88|Acc]
						      ( <_93,_92> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_93,_92})
							      -| [{'function_name',{'-tg/2-fun-3-',2}}] )
							-| ['compiler_generated'] )
						    end
					    in  let <FieldList1> =
						    call %% Line 633
							 'lists':%% Line 633
								 'foldl'
							(_94, %% Line 648
							      [], %% Line 649
								  FieldList0)
						in  %% Line 651
						    ( case B of
							( <( {'tgd',_250,_251,_rec13}
							     -| ['compiler_generated'] )> when 'true' ->
							      let <_98> =
								  call 'erlang':'+'
								      (21, _rec13)
							      in  do  apply 'check_multi_field'/4
									  (RName, Line, KeyList, _98)
								      %% Line 653
								      ( case B of
									  ( <( {'tgd',_253,_254,_rec14}
									       -| ['compiler_generated'] )> when 'true' ->
										let <_101> =
										    call 'erlang':'+'
											(19, _rec14)
										in  do  apply 'check_undef_field'/5
											    (RName, Line, KeyList, FieldList0, _101)
											%% Line 654
											{'tuple',Line,[{'tuple',Line,[{'atom',Line,RName}|FieldList1]}|[]]}
									    -| ['compiler_generated'] )
									  ( <_255> when 'true' ->
										( call ( 'erlang'
											 -| ['compiler_generated'] ):( 'error'
														       -| ['compiler_generated'] )
										      (( {'badrecord','tgd'}
											 -| ['compiler_generated'] ))
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									end
									-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
							( <_252> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','tgd'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
					%% Line 655
					<_256> when 'true' ->
					    %% Line 656
					    ( case B of
						( <( {'tgd',_257,_258,_rec15}
						     -| ['compiler_generated'] )> when 'true' ->
						      let <_104> =
							  call 'erlang':'+'
							      (20, _rec15)
						      in  call 'erlang':'throw'
							      ({'error',Line,{_104,RName}})
						  -| ['compiler_generated'] )
						( <_259> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','tgd'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
				      end
	  %% Line 659
	  <{'record_index',Line,RName,{'atom',Line2,KeyName}},B> when 'true' ->
	      let <RDefs> =
		  apply %% Line 660
			'get_records'/0
		      ()
	      in  %% Line 661
		  case call 'lists':'keysearch'
			   (RName, 1, RDefs) of
		    %% Line 662
		    <{'value',{_260,FieldList}}>
			when call 'erlang':'=:='
			      (_260,
			       RName) ->
			%% Line 663
			case call 'lists':'keysearch'
				 (KeyName, 1, FieldList) of
			  %% Line 664
			  <{'value',{_261,Position,_262}}>
			      when call 'erlang':'=:='
				    (_261,
				     KeyName) ->
			      %% Line 665
			      {'integer',Line2,Position}
			  %% Line 666
			  <_263> when 'true' ->
			      %% Line 667
			      ( case B of
				  ( <( {'tgd',_264,_265,_rec16}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_109> =
					    call 'erlang':'+'
						(19, _rec16)
					in  call 'erlang':'throw'
						({'error',Line2,{_109,RName,%% Line 668
									    KeyName}})
				    -| ['compiler_generated'] )
				  ( <_266> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','tgd'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			end
		    %% Line 670
		    <_267> when 'true' ->
			%% Line 671
			( case B of
			    ( <( {'tgd',_268,_269,_rec17}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_113> =
				      call 'erlang':'+'
					  (20, _rec17)
				  in  call 'erlang':'throw'
					  ({'error',Line,{_113,RName}})
			      -| ['compiler_generated'] )
			    ( <_270> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','tgd'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		  end
	  %% Line 674
	  <{'record',Line,AVName = {'var',Line2,_X_VName},RName,RFields},B> when 'true' ->
	      let <RDefs> =
		  apply %% Line 675
			'get_records'/0
		      ()
	      in  let <MSVName> =
		      apply %% Line 676
			    'tg'/2
			  (%% Line 676
			   AVName, %% Line 676
				   B)
		  in  let <_122> =
			  fun (_119,_118) ->
			      %% Line 677
			      case <_119,_118> of
				<{'record_field',_271,{'atom',_272,Key},Value},%% Line 678
									       L> when 'true' ->
				    let <NV> =
					apply %% Line 679
					      'tg'/2
					    (%% Line 679
					     Value, %% Line 679
						    B)
				    in  %% Line 680
					[{Key,NV}|L]
				%% Line 681
				<_273,_274> when 'true' ->
				    %% Line 682
				    call 'erlang':'throw'
					({'error',Line,7})
			      end
		      in  let <KeyList> =
			      call %% Line 677
				   'lists':%% Line 677
					   'foldl'
				  (_122, %% Line 684
					 [], %% Line 685
					     RFields)
			  in  %% Line 686
			      case call 'lists':'keysearch'
				       (RName, 1, RDefs) of
				%% Line 687
				<{'value',{_275,FieldList0}}>
				    when call 'erlang':'=:='
					  (_275,
					   RName) ->
				    let <_131> =
					fun (_128,_127) ->
					    %% Line 689
					    case <_128,_127> of
					      <{FN,Pos,_276},Acc> when 'true' ->
						  let <_125> =
						      case %% Line 690
							   call 'lists':'keysearch'
							       (FN, 1, KeyList) of
							%% Line 691
							<{'value',{_277,X0}}>
							    when call 'erlang':'=:='
								  (_277,
								   FN) ->
							    %% Line 692
							    X0
							%% Line 693
							<_278> when 'true' ->
							    %% Line 694
							    {'tuple',Line2,%% Line 695
									   [{'atom',Line2,'element'}|%% Line 696
												     [{'integer',Line2,Pos}|%% Line 697
															    [MSVName|[]]]]}
						      end
						  in  %% Line 699
						      [_125|Acc]
					      ( <_130,_129> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_130,_129})
						      -| [{'function_name',{'-tg/2-fun-5-',2}}] )
						-| ['compiler_generated'] )
					    end
				    in  let <FieldList1> =
					    call %% Line 688
						 'lists':%% Line 688
							 'foldl'
						(_131, %% Line 701
						       [], %% Line 702
							   FieldList0)
					in  %% Line 704
					    ( case B of
						( <( {'tgd',_279,_280,_rec18}
						     -| ['compiler_generated'] )> when 'true' ->
						      let <_135> =
							  call 'erlang':'+'
							      (21, _rec18)
						      in  do  apply 'check_multi_field'/4
								  (RName, Line, KeyList, _135)
							      %% Line 706
							      ( case B of
								  ( <( {'tgd',_282,_283,_rec19}
								       -| ['compiler_generated'] )> when 'true' ->
									let <_138> =
									    call 'erlang':'+'
										(19, _rec19)
									in  do  apply 'check_undef_field'/5
										    (RName, Line, KeyList, FieldList0, _138)
										%% Line 707
										{'tuple',Line,[{'tuple',Line,[{'atom',Line,RName}|FieldList1]}|[]]}
								    -| ['compiler_generated'] )
								  ( <_284> when 'true' ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','tgd'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <_281> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','tgd'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
				%% Line 708
				<_285> when 'true' ->
				    %% Line 709
				    ( case B of
					( <( {'tgd',_286,_287,_rec20}
					     -| ['compiler_generated'] )> when 'true' ->
					      let <_141> =
						  call 'erlang':'+'
						      (20, _rec20)
					      in  call 'erlang':'throw'
						      ({'error',Line,{_141,RName}})
					  -| ['compiler_generated'] )
					( <_288> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','tgd'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
			      end
	  %% Line 712
	  <Whole = {'bin_element',_X_Line0,{'var',Line,A},_289,_290},B> when 'true' ->
	      %% Line 713
	      ( case B of
		  ( <( {'tgd',_rec21,_291,_292}
		       -| ['compiler_generated'] )> when 'true' ->
			case apply 'lkup_bind'/2
				 (A, _rec21) of
			  %% Line 714
			  <'undefined'> when 'true' ->
			      %% Line 715
			      Whole
			  %% Line 716
			  <_X_AtomName> when 'true' ->
			      %% Line 717
			      ( case B of
				  ( <( {'tgd',_294,_295,_rec22}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_147> =
					    call 'erlang':'+'
						(23, _rec22)
					in  call 'erlang':'throw'
						({'error',Line,{_147,A}})
				    -| ['compiler_generated'] )
				  ( <_296> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','tgd'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_293> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','tgd'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 719
	  <'default',_X_B> when 'true' ->
	      %% Line 720
	      'default'
	  %% Line 721
	  <{'bin_element',Line,X,Y,Z},B> when 'true' ->
	      let <_150> =
		  apply %% Line 722
			'tg'/2
		      (%% Line 722
		       X, %% Line 722
			  B)
	      in  let <_149> =
		      apply %% Line 722
			    'tg'/2
			  (%% Line 722
			   Y, %% Line 722
			      B)
		  in  %% Line 722
		      {'bin_element',Line,_150,_149,Z}
	  %% Line 724
	  <{'bin',Line,List},B> when 'true' ->
	      let <_156> =
		  letrec
		      'lc$^6'/1 =
			  %% Line 725
			  fun (_153) ->
			      case _153 of
				<[X|_152]> when 'true' ->
				    let <_154> =
					apply 'tg'/2
					    (X, B)
				    in  let <_155> =
					    apply 'lc$^6'/1
						(_152)
					in  ( [_154|_155]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_305> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_305})
					-| [{'function_name',{'lc$^6',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  %% Line 725
		      apply 'lc$^6'/1
			  (List)
	      in  %% Line 725
		  {'bin',Line,_156}
	  %% Line 727
	  <T,B>
	      when try
		    let <_157> =
			call 'erlang':'is_tuple'
			    (T)
		    in  let <_158> =
			    call 'erlang':'tuple_size'
				(T)
			in  let <_159> =
				call 'erlang':'>='
				    (_158, 2)
			    in  call 'erlang':'and'
				    (_157, _159)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Element> =
		  call %% Line 728
		       'erlang':%% Line 728
				'element'
		      (%% Line 728
		       1, %% Line 728
			  T)
	      in  let <Line> =
		      call %% Line 729
			   'erlang':%% Line 729
				    'element'
			  (%% Line 729
			   2, %% Line 729
			      T)
		  in  %% Line 730
		      ( case B of
			  ( <( {'tgd',_297,_298,_rec23}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_165> =
				    call 'erlang':'+'
					(18, _rec23)
				in  let <_162> =
					apply %% Line 731
					      'translate_language_element'/1
					    (%% Line 731
					     Element)
				    in  call 'erlang':'throw'
					    ({'error',Line,{_165,_162}})
			    -| ['compiler_generated'] )
			  ( <_299> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','tgd'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 732
	  <Other,B> when 'true' ->
	      let <Element> =
		  call %% Line 733
		       'io_lib':%% Line 733
				'format'
		      (%% Line 733
		       [117|[110|[107|[110|[111|[119|[110|[32|[101|[108|[101|[109|[101|[110|[116|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]], %% Line 733
																	[Other|[]])
	      in  %% Line 734
		  ( case B of
		      ( <( {'tgd',_300,_301,_rec24}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_169> =
				call 'erlang':'+'
				    (18, _rec24)
			    in  call 'erlang':'throw'
				    ({'error','unknown',{_169,Element}})
			-| ['compiler_generated'] )
		      ( <_302> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','tgd'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	end
'transform_head'/2 =
    %% Line 736
    fun (_0,_1) ->
	case <_0,_1> of
	  <[V|[]],OuterBound> when 'true' ->
	      let <Bind> =
		  apply %% Line 737
			'cre_bind'/0
		      ()
	      in  %% Line 738
		  case apply 'toplevel_head_match'/3
			   (V, Bind, OuterBound) of
		    <{NewV,NewBind}> when 'true' ->
			%% Line 739
			apply 'th'/3
			    (NewV, NewBind, OuterBound)
		    ( <_3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_3})
		      -| ['compiler_generated'] )
		  end
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'transform_head',2}}] )
	    -| ['compiler_generated'] )
	end
'toplevel_head_match'/3 =
    %% Line 742
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{'match',_8,{'var',Line,VName},Expr},B,OB> when 'true' ->
	      do  %% Line 743
		  apply 'warn_var_clash'/3
		      (Line, VName, OB)
		  let <_3> =
		      apply %% Line 744
			    'new_bind'/2
			  (%% Line 744
			   {VName,'$_'}, %% Line 744
					 B)
		  in  %% Line 744
		      {Expr,_3}
	  %% Line 745
	  <{'match',_9,Expr,{'var',Line,VName}},B,OB> when 'true' ->
	      do  %% Line 746
		  apply 'warn_var_clash'/3
		      (Line, VName, OB)
		  let <_4> =
		      apply %% Line 747
			    'new_bind'/2
			  (%% Line 747
			   {VName,'$_'}, %% Line 747
					 B)
		  in  %% Line 747
		      {Expr,_4}
	  %% Line 748
	  <Other,B,_X_OB> when 'true' ->
	      %% Line 749
	      {Other,B}
	end
'th'/3 =
    %% Line 751
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{'record',Line,RName,RFields},B,OB> when 'true' ->
	      let <RDefs> =
		  apply %% Line 753
			'get_records'/0
		      ()
	      in  let <_10> =
		      fun (_7,_6) ->
			  %% Line 754
			  case <_7,_6> of
			    <{'record_field',_41,{'atom',_42,Key},Value},%% Line 755
									 {L,B0}> when 'true' ->
				%% Line 756
				case apply 'th'/3
					 (Value, B0, OB) of
				  <{NV,B1}> when 'true' ->
				      %% Line 757
				      {[{Key,NV}|L],B1}
				  ( <_4> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_4})
				    -| ['compiler_generated'] )
				end
			    %% Line 758
			    <{'record_field',_43,{'var',_44,'_'},Value},%% Line 759
									{L,B0}> when 'true' ->
				%% Line 760
				case apply 'th'/3
					 (Value, B0, OB) of
				  <{NV,B1}> when 'true' ->
				      %% Line 761
				      {[{{'default'},NV}|L],B1}
				  ( <_5> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_5})
				    -| ['compiler_generated'] )
				end
			    %% Line 762
			    <_45,_46> when 'true' ->
				%% Line 763
				call 'erlang':'throw'
				    ({'error',Line,{7,%% Line 764
						      RName}})
			  end
		  in  %% Line 754
		      case call 'lists':'foldl'
			       (_10, %% Line 766
				     {[],B}, %% Line 767
					     RFields) of
			<{KeyList0,NewB}> when 'true' ->
			    let <_13> =
				case %% Line 768
				     call 'lists':'keysearch'
					 ({'default'}, 1, KeyList0) of
				  %% Line 769
				  <{'value',{{'default'},OverriddenDefValue}}> when 'true' ->
				      %% Line 770
				      OverriddenDefValue
				  %% Line 771
				  <_47> when 'true' ->
				      %% Line 772
				      {'atom',Line,'_'}
				end
			    in  let <KeyList> =
				    call %% Line 774
					 'lists':%% Line 774
						 'keydelete'
					(%% Line 774
					 {'default'}, %% Line 774
						      1, %% Line 774
							 KeyList0)
				in  do  %% Line 775
					case call 'lists':'keysearch'
						 ({'default'}, 1, KeyList) of
					  %% Line 776
					  <{'value',{{'default'},_48}}> when 'true' ->
					      %% Line 777
					      call 'erlang':'throw'
						  ({'error',Line,{9,RName,'_'}})
					  %% Line 778
					  <_49> when 'true' ->
					      'ok'
					end
					%% Line 781
					case call 'lists':'keysearch'
						 (RName, 1, RDefs) of
					  %% Line 782
					  <{'value',{_50,FieldList0}}>
					      when call 'erlang':'=:='
						    (_50,
						     RName) ->
					      let <_24> =
						  fun (_21,_20) ->
						      %% Line 784
						      case <_21,_20> of
							<{FN,_51,_52},Acc> when 'true' ->
							    let <_18> =
								case %% Line 785
								     call 'lists':'keysearch'
									 (FN, 1, KeyList) of
								  %% Line 786
								  <{'value',{_53,X0}}>
								      when call 'erlang':'=:='
									    (_53,
									     FN) ->
								      %% Line 787
								      X0
								  %% Line 788
								  <_54> when 'true' ->
								      _13
								end
							    in  %% Line 791
								[_18|Acc]
							( <_23,_22> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_23,_22})
								-| [{'function_name',{'-th/3-fun-1-',2}}] )
							  -| ['compiler_generated'] )
						      end
					      in  let <FieldList1> =
						      call %% Line 783
							   'lists':%% Line 783
								   'foldl'
							  (_24, %% Line 793
								[], %% Line 794
								    FieldList0)
						  in  do  %% Line 795
							  apply 'check_multi_field'/4
							      (RName, Line, KeyList, %% Line 796
										     9)
							  do  %% Line 797
							      apply 'check_undef_field'/5
								  (RName, Line, KeyList, FieldList0, %% Line 798
												     8)
							      %% Line 799
							      {{'tuple',Line,[{'atom',Line,RName}|FieldList1]},NewB}
					  %% Line 800
					  <_55> when 'true' ->
					      %% Line 801
					      call 'erlang':'throw'
						  ({'error',Line,{7,RName}})
					end
			( <_11> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_11})
			  -| ['compiler_generated'] )
		      end
	  %% Line 803
	  <{'match',Line,_56,_57},_58,_59> when 'true' ->
	      %% Line 804
	      call 'erlang':'throw'
		  ({'error',Line,4})
	  %% Line 805
	  <_@r0 = {'atom',Line,A},B,_X_OB> when 'true' ->
	      %% Line 806
	      case call 'erlang':'atom_to_list'
		       (A) of
		%% Line 807
		<[36|NL]> when 'true' ->
		    let <_27> =
			catch
			    %% Line 808
			    call 'erlang':'list_to_integer'
				(NL)
		    in  %% Line 808
			case _27 of
			  %% Line 809
			  <N>
			      when call 'erlang':'is_integer'
				    (_27) ->
			      %% Line 810
			      call 'erlang':'throw'
				  ({'error',Line,{10,A}})
			  %% Line 811
			  <_60> when 'true' ->
			      %% Line 812
			      {_@r0,B}
			end
		%% Line 814
		<_61> when 'true' ->
		    %% Line 815
		    {_@r0,B}
	      end
	  %% Line 817
	  <{'bin_element',_X_Line0,{'var',Line,A},_62,_63},_64,_65> when 'true' ->
	      %% Line 818
	      call 'erlang':'throw'
		  ({'error',Line,{11,A}})
	  %% Line 820
	  <{'var',Line,Name},B,OB> when 'true' ->
	      do  %% Line 821
		  apply 'warn_var_clash'/3
		      (Line, Name, OB)
		  %% Line 822
		  case apply 'lkup_bind'/2
			   (Name, B) of
		    %% Line 823
		    <'undefined'> when 'true' ->
			let <NewB> =
			    apply %% Line 824
				  'new_bind'/2
				(%% Line 824
				 Name, %% Line 824
				       B)
			in  let <_31> =
				apply %% Line 825
				      'lkup_bind'/2
				    (%% Line 825
				     Name, %% Line 825
					   NewB)
			    in  %% Line 825
				{{'atom',Line,_31},NewB}
		    %% Line 826
		    <Trans> when 'true' ->
			%% Line 827
			{{'atom',Line,Trans},B}
		  end
	  %% Line 829
	  <[H|T],B,OB> when 'true' ->
	      %% Line 830
	      case apply 'th'/3
		       (H, B, OB) of
		<{NH,NB}> when 'true' ->
		    %% Line 831
		    case apply 'th'/3
			     (T, NB, OB) of
		      <{NT,NNB}> when 'true' ->
			  %% Line 832
			  {[NH|NT],NNB}
		      ( <_34> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_34})
			-| ['compiler_generated'] )
		    end
		( <_33> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_33})
		  -| ['compiler_generated'] )
	      end
	  %% Line 833
	  <T,B,OB>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_35> =
		  call %% Line 834
		       'erlang':%% Line 834
				'tuple_to_list'
		      (%% Line 834
		       T)
	      in  %% Line 834
		  case apply 'th'/3
			   (_35, B, OB) of
		    <{L,NB}> when 'true' ->
			let <_37> =
			    call %% Line 835
				 'erlang':%% Line 835
					  'list_to_tuple'
				(%% Line 835
				 L)
			in  %% Line 835
			    {_37,NB}
		    ( <_36> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_36})
		      -| ['compiler_generated'] )
		  end
	  %% Line 836
	  <Nonstruct,B,_X_OB> when 'true' ->
	      %% Line 837
	      {Nonstruct,B}
	end
'warn_var_clash'/3 =
    %% Line 839
    fun (_0,_1,_2) ->
	%% Line 840
	case call 'gb_sets':'is_member'
		 (_1, _2) of
	  %% Line 841
	  <'true'> when 'true' ->
	      let <Line> =
		  call %% Line 842
		       'erl_anno':%% Line 842
				  'line'
		      (_0)
	      in  %% Line 843
		  apply 'add_warning'/2
		      (Line, {50,_1})
	  %% Line 844
	  <_8> when 'true' ->
	      %% Line 845
	      'ok'
	end
'check_multi_field'/4 =
    %% Line 849
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <_9,_10,[],_11> when 'true' ->
	      %% Line 850
	      'ok'
	  %% Line 851
	  <RName,Line,[{Key,_12}|T],ErrCode> when 'true' ->
	      %% Line 852
	      case call 'lists':'keymember'
		       (Key, 1, T) of
		%% Line 853
		<'true'> when 'true' ->
		    %% Line 854
		    call 'erlang':'throw'
			({'error',Line,{ErrCode,RName,Key}})
		%% Line 855
		<'false'> when 'true' ->
		    %% Line 856
		    apply 'check_multi_field'/4
			(RName, Line, T, ErrCode)
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
	  ( <_8,_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7,_6,_5})
		  -| [{'function_name',{'check_multi_field',4}}] )
	    -| ['compiler_generated'] )
	end
'check_undef_field'/5 =
    %% Line 858
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <_11,_12,[],_13,_14> when 'true' ->
	      %% Line 859
	      'ok'
	  %% Line 860
	  <RName,Line,[{Key,_15}|T],FieldList,ErrCode> when 'true' ->
	      %% Line 861
	      case call 'lists':'keymember'
		       (Key, 1, FieldList) of
		%% Line 862
		<'true'> when 'true' ->
		    %% Line 863
		    apply 'check_undef_field'/5
			(RName, Line, T, FieldList, ErrCode)
		%% Line 864
		<'false'> when 'true' ->
		    %% Line 865
		    call 'erlang':'throw'
			({'error',Line,{ErrCode,RName,Key}})
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  ( <_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8,_7,_6})
		  -| [{'function_name',{'check_undef_field',5}}] )
	    -| ['compiler_generated'] )
	end
'cre_bind'/0 =
    %% Line 868
    fun () ->
	%% Line 869
	{1,[{'_','_'}]}
'lkup_bind'/2 =
    %% Line 871
    fun (_0,_1) ->
	case <_0,_1> of
	  <Name,{_5,List}> when 'true' ->
	      %% Line 872
	      case call 'lists':'keysearch'
		       (Name, 1, List) of
		%% Line 873
		<{'value',{_6,Trans}}>
		    when call 'erlang':'=:='
			  (_6,
			   Name) ->
		    %% Line 874
		    Trans
		%% Line 875
		<_7> when 'true' ->
		    %% Line 876
		    'undefined'
	      end
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'lkup_bind',2}}] )
	    -| ['compiler_generated'] )
	end
'new_bind'/2 =
    %% Line 879
    fun (_0,_1) ->
	case <_0,_1> of
	  <_@r0 = {Name,Trans},{Next,L}> when 'true' ->
	      %% Line 880
	      {Next,[_@r0|L]}
	  %% Line 881
	  <Name,{Next,L}> when 'true' ->
	      let <_2> =
		  call %% Line 882
		       'erlang':%% Line 882
				'integer_to_list'
		      (%% Line 882
		       Next)
	      in  let <Trans> =
		      call %% Line 882
			   'erlang':%% Line 882
				    'list_to_atom'
			  (%% Line 882
			   [36|_2])
		  in  let <_4> =
			  call %% Line 883
			       'erlang':%% Line 883
					'+'
			      (%% Line 883
			       Next, %% Line 883
				     1)
		      in  %% Line 883
			  {_4,[{Name,Trans}|L]}
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'new_bind',2}}] )
	    -| ['compiler_generated'] )
	end
'translate_language_element'/1 =
    %% Line 885
    fun (_0) ->
	%% Line 898
	case call 'lists':'keysearch'
		 (_0, 1, [{'lc',[108|[105|[115|[116|[32|[99|[111|[109|[112|[114|[101|[104|[101|[110|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]}|[{'bc',[98|[105|[110|[97|[114|[121|[32|[99|[111|[109|[112|[114|[101|[104|[101|[110|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]]]}|[{'block',[98|[101|[103|[105|[110|[47|[101|[110|[100|[32|[98|[108|[111|[99|[107]]]]]]]]]]]]]]]}|[{'if',[105|[102]]}|[{'case',[99|[97|[115|[101]]]]}|[{'receive',[114|[101|[99|[101|[105|[118|[101]]]]]]]}|[{'try',[116|[114|[121]]]}|[{'catch',[99|[97|[116|[99|[104]]]]]}|[{'match',[109|[97|[116|[99|[104|[32|[40|[61|[41]]]]]]]]]}|[{'remote',[101|[120|[116|[101|[114|[110|[97|[108|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[99|[97|[108|[108]]]]]]]]]]]]]]]]]]]]]]}]]]]]]]]]]) of
	  %% Line 899
	  <{'value',{_4,String}}>
	      when call 'erlang':'=:='
		    (_4,
		     _0) ->
	      %% Line 900
	      String
	  %% Line 901
	  <_5> when 'true' ->
	      %% Line 902
	      call 'erlang':'atom_to_list'
		  (_0)
	end
'old_bool_test'/2 =
    %% Line 905
    fun (_0,_1) ->
	case <_0,_1> of
	  <'atom',1> when 'true' ->
	      'is_atom'
	  %% Line 906
	  <'float',1> when 'true' ->
	      'is_float'
	  %% Line 907
	  <'integer',1> when 'true' ->
	      'is_integer'
	  %% Line 908
	  <'list',1> when 'true' ->
	      'is_list'
	  %% Line 909
	  <'number',1> when 'true' ->
	      'is_number'
	  %% Line 910
	  <'pid',1> when 'true' ->
	      'is_pid'
	  %% Line 911
	  <'port',1> when 'true' ->
	      'is_port'
	  %% Line 912
	  <'reference',1> when 'true' ->
	      'is_reference'
	  %% Line 913
	  <'tuple',1> when 'true' ->
	      'is_tuple'
	  %% Line 914
	  <'binary',1> when 'true' ->
	      'is_binary'
	  %% Line 915
	  <'function',1> when 'true' ->
	      'is_function'
	  %% Line 916
	  <'record',2> when 'true' ->
	      'is_record'
	  %% Line 917
	  <_4,_5> when 'true' ->
	      'undefined'
	end
'bool_test'/2 =
    %% Line 919
    fun (_0,_1) ->
	case <_0,_1> of
	  <'is_atom',1> when 'true' ->
	      'true'
	  %% Line 920
	  <'is_float',1> when 'true' ->
	      'true'
	  %% Line 921
	  <'is_integer',1> when 'true' ->
	      'true'
	  %% Line 922
	  <'is_list',1> when 'true' ->
	      'true'
	  %% Line 923
	  <'is_number',1> when 'true' ->
	      'true'
	  %% Line 924
	  <'is_pid',1> when 'true' ->
	      'true'
	  %% Line 925
	  <'is_port',1> when 'true' ->
	      'true'
	  %% Line 926
	  <'is_reference',1> when 'true' ->
	      'true'
	  %% Line 927
	  <'is_tuple',1> when 'true' ->
	      'true'
	  %% Line 928
	  <'is_map',1> when 'true' ->
	      'true'
	  %% Line 929
	  <'is_map_key',2> when 'true' ->
	      'true'
	  %% Line 930
	  <'is_binary',1> when 'true' ->
	      'true'
	  %% Line 931
	  <'is_function',1> when 'true' ->
	      'true'
	  %% Line 932
	  <'is_record',2> when 'true' ->
	      'true'
	  %% Line 933
	  <'is_seq_trace',0> when 'true' ->
	      'true'
	  %% Line 934
	  <_4,_5> when 'true' ->
	      'false'
	end
'real_guard_function'/2 =
    %% Line 936
    fun (_0,_1) ->
	case <_0,_1> of
	  <'abs',1> when 'true' ->
	      'true'
	  %% Line 937
	  <'element',2> when 'true' ->
	      'true'
	  %% Line 938
	  <'hd',1> when 'true' ->
	      'true'
	  %% Line 939
	  <'length',1> when 'true' ->
	      'true'
	  %% Line 940
	  <'node',0> when 'true' ->
	      'true'
	  %% Line 941
	  <'node',1> when 'true' ->
	      'true'
	  %% Line 942
	  <'round',1> when 'true' ->
	      'true'
	  %% Line 943
	  <'size',1> when 'true' ->
	      'true'
	  %% Line 944
	  <'bit_size',1> when 'true' ->
	      'true'
	  %% Line 945
	  <'map_size',1> when 'true' ->
	      'true'
	  %% Line 946
	  <'map_get',2> when 'true' ->
	      'true'
	  %% Line 947
	  <'tl',1> when 'true' ->
	      'true'
	  %% Line 948
	  <'trunc',1> when 'true' ->
	      'true'
	  %% Line 949
	  <'self',0> when 'true' ->
	      'true'
	  %% Line 950
	  <'float',1> when 'true' ->
	      'true'
	  %% Line 951
	  <_4,_5> when 'true' ->
	      'false'
	end
'pseudo_guard_function'/2 =
    %% Line 953
    fun (_0,_1) ->
	case <_0,_1> of
	  <'get_tcw',0> when 'true' ->
	      'true'
	  %% Line 954
	  <_4,_5> when 'true' ->
	      'false'
	end
'guard_function'/2 =
    %% Line 956
    fun (_0,_1) ->
	let <_3> =
	    apply %% Line 957
		  'real_guard_function'/2
		(_0, _1)
	in  let <_2> =
		apply %% Line 957
		      'pseudo_guard_function'/2
		    (_0, _1)
	    in  %% Line 957
		call 'erlang':'or'
		    (_3, _2)
'action_function'/2 =
    %% Line 959
    fun (_0,_1) ->
	case <_0,_1> of
	  <'set_seq_token',2> when 'true' ->
	      'true'
	  %% Line 960
	  <'get_seq_token',0> when 'true' ->
	      'true'
	  %% Line 961
	  <'message',1> when 'true' ->
	      'true'
	  %% Line 962
	  <'return_trace',0> when 'true' ->
	      'true'
	  %% Line 963
	  <'exception_trace',0> when 'true' ->
	      'true'
	  %% Line 964
	  <'process_dump',0> when 'true' ->
	      'true'
	  %% Line 965
	  <'enable_trace',1> when 'true' ->
	      'true'
	  %% Line 966
	  <'enable_trace',2> when 'true' ->
	      'true'
	  %% Line 967
	  <'disable_trace',1> when 'true' ->
	      'true'
	  %% Line 968
	  <'disable_trace',2> when 'true' ->
	      'true'
	  %% Line 969
	  <'display',1> when 'true' ->
	      'true'
	  %% Line 970
	  <'caller',0> when 'true' ->
	      'true'
	  %% Line 971
	  <'set_tcw',1> when 'true' ->
	      'true'
	  %% Line 972
	  <'silent',1> when 'true' ->
	      'true'
	  %% Line 973
	  <'trace',2> when 'true' ->
	      'true'
	  %% Line 974
	  <'trace',3> when 'true' ->
	      'true'
	  %% Line 975
	  <_4,_5> when 'true' ->
	      'false'
	end
'bool_operator'/2 =
    %% Line 977
    fun (_0,_1) ->
	case <_0,_1> of
	  <'and',2> when 'true' ->
	      %% Line 978
	      'true'
	  %% Line 979
	  <'or',2> when 'true' ->
	      %% Line 980
	      'true'
	  %% Line 981
	  <'xor',2> when 'true' ->
	      %% Line 982
	      'true'
	  %% Line 983
	  <'not',1> when 'true' ->
	      %% Line 984
	      'true'
	  %% Line 985
	  <'andalso',2> when 'true' ->
	      %% Line 986
	      'true'
	  %% Line 987
	  <'orelse',2> when 'true' ->
	      %% Line 988
	      'true'
	  %% Line 989
	  <_4,_5> when 'true' ->
	      %% Line 990
	      'false'
	end
'arith_operator'/2 =
    %% Line 992
    fun (_0,_1) ->
	case <_0,_1> of
	  <'+',1> when 'true' ->
	      %% Line 993
	      'true'
	  %% Line 994
	  <'+',2> when 'true' ->
	      %% Line 995
	      'true'
	  %% Line 996
	  <'-',1> when 'true' ->
	      %% Line 997
	      'true'
	  %% Line 998
	  <'-',2> when 'true' ->
	      %% Line 999
	      'true'
	  %% Line 1000
	  <'*',2> when 'true' ->
	      %% Line 1001
	      'true'
	  %% Line 1002
	  <'/',2> when 'true' ->
	      %% Line 1003
	      'true'
	  %% Line 1004
	  <'div',2> when 'true' ->
	      %% Line 1005
	      'true'
	  %% Line 1006
	  <'rem',2> when 'true' ->
	      %% Line 1007
	      'true'
	  %% Line 1008
	  <'band',2> when 'true' ->
	      %% Line 1009
	      'true'
	  %% Line 1010
	  <'bor',2> when 'true' ->
	      %% Line 1011
	      'true'
	  %% Line 1012
	  <'bxor',2> when 'true' ->
	      %% Line 1013
	      'true'
	  %% Line 1014
	  <'bnot',1> when 'true' ->
	      %% Line 1015
	      'true'
	  %% Line 1016
	  <'bsl',2> when 'true' ->
	      %% Line 1017
	      'true'
	  %% Line 1018
	  <'bsr',2> when 'true' ->
	      %% Line 1019
	      'true'
	  %% Line 1020
	  <_4,_5> when 'true' ->
	      %% Line 1021
	      'false'
	end
'cmp_operator'/2 =
    %% Line 1023
    fun (_0,_1) ->
	case <_0,_1> of
	  <'>',2> when 'true' ->
	      %% Line 1024
	      'true'
	  %% Line 1025
	  <'>=',2> when 'true' ->
	      %% Line 1026
	      'true'
	  %% Line 1027
	  <'<',2> when 'true' ->
	      %% Line 1028
	      'true'
	  %% Line 1029
	  <'=<',2> when 'true' ->
	      %% Line 1030
	      'true'
	  %% Line 1031
	  <'==',2> when 'true' ->
	      %% Line 1032
	      'true'
	  %% Line 1033
	  <'=:=',2> when 'true' ->
	      %% Line 1034
	      'true'
	  %% Line 1035
	  <'/=',2> when 'true' ->
	      %% Line 1036
	      'true'
	  %% Line 1037
	  <'=/=',2> when 'true' ->
	      %% Line 1038
	      'true'
	  %% Line 1039
	  <_4,_5> when 'true' ->
	      %% Line 1040
	      'false'
	end
'is_operator'/3 =
    %% Line 1042
    fun (_0,_1,_2) ->
	let <_5> =
	    apply %% Line 1043
		  'bool_operator'/2
		(_0, _1)
	in  let <_4> =
		apply %% Line 1043
		      'arith_operator'/2
		    (_0, _1)
	    in  let <_6> =
		    call %% Line 1043
			 'erlang':%% Line 1043
				  'or'
			(_5, _4)
		in  let <_3> =
			apply %% Line 1043
			      'cmp_operator'/2
			    (_0, _1)
		    in  %% Line 1043
			call 'erlang':'or'
			    (_6, _3)
'is_imported_from_erlang'/3 =
    %% Line 1045
    fun (_0,_1,_2) ->
	let <_7> =
	    apply %% Line 1046
		  'real_guard_function'/2
		(_0, _1)
	in  let <_6> =
		apply %% Line 1046
		      'bool_test'/2
		    (_0, _1)
	    in  let <_8> =
		    call %% Line 1046
			 'erlang':%% Line 1046
				  'or'
			(_7, _6)
		in  let <_5> =
			apply %% Line 1046
			      'bool_operator'/2
			    (_0, _1)
		    in  let <_9> =
			    call %% Line 1046
				 'erlang':%% Line 1046
					  'or'
				(_8, _5)
			in  let <_4> =
				apply %% Line 1047
				      'arith_operator'/2
				    (_0, _1)
			    in  let <_10> =
				    call %% Line 1046
					 'erlang':%% Line 1046
						  'or'
					(_9, _4)
				in  let <_3> =
					apply %% Line 1047
					      'cmp_operator'/2
					    (_0, _1)
				    in  %% Line 1047
					call 'erlang':'or'
					    (_10, _3)
'is_ms_function'/3 =
    %% Line 1049
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <X,A,'body'> when 'true' ->
	      let <_5> =
		  apply %% Line 1050
			'action_function'/2
		      (%% Line 1050
		       X, %% Line 1050
			  A)
	      in  let <_4> =
		      apply %% Line 1050
			    'guard_function'/2
			  (%% Line 1050
			   X, %% Line 1050
			      A)
		  in  let <_6> =
			  call %% Line 1050
			       'erlang':%% Line 1050
					'or'
			      (_5, _4)
		      in  let <_3> =
			      apply %% Line 1050
				    'bool_test'/2
				  (%% Line 1050
				   X, %% Line 1050
				      A)
			  in  %% Line 1050
			      call 'erlang':'or'
				  (_6, _3)
	  %% Line 1052
	  <X,A,'guard'> when 'true' ->
	      let <_8> =
		  apply %% Line 1053
			'guard_function'/2
		      (%% Line 1053
		       X, %% Line 1053
			  A)
	      in  let <_7> =
		      apply %% Line 1053
			    'bool_test'/2
			  (%% Line 1053
			   X, %% Line 1053
			      A)
		  in  %% Line 1053
		      call 'erlang':'or'
			  (_8, _7)
	  ( <_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9})
		  -| [{'function_name',{'is_ms_function',3}}] )
	    -| ['compiler_generated'] )
	end
'fixup_environment'/2 =
    %% Line 1055
    fun (_0,_1) ->
	case <_0,_1> of
	  <L,B>
	      when call 'erlang':'is_list'
		    (L) ->
	      let <_4> =
		  fun (_2) ->
		      %% Line 1057
		      apply 'fixup_environment'/2
			  (_2, B)
	      in  %% Line 1056
		  call 'lists':'map'
		      (_4, %% Line 1059
			   L)
	  %% Line 1060
	  <{'var',Line,Name},B> when 'true' ->
	      %% Line 1061
	      case call 'lists':'keysearch'
		       (Name, 1, B) of
		%% Line 1062
		<{'value',{_14,Value}}>
		    when call 'erlang':'=:='
			  (_14,
			   Name) ->
		    %% Line 1063
		    apply 'freeze'/2
			(Line, Value)
		%% Line 1064
		<_15> when 'true' ->
		    let <_5> =
			call %% Line 1065
			     'erlang':%% Line 1065
				      'atom_to_list'
			    (%% Line 1065
			     Name)
		    in  %% Line 1065
			call 'erlang':'throw'
			    ({'error',Line,{6,_5}})
	      end
	  %% Line 1067
	  <T,B>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_10> =
		  fun (_8) ->
		      %% Line 1070
		      apply 'fixup_environment'/2
			  (_8, B)
	      in  let <_7> =
		      call %% Line 1072
			   'erlang':%% Line 1072
				    'tuple_to_list'
			  (%% Line 1072
			   T)
		  in  let <_11> =
			  call %% Line 1069
			       'lists':%% Line 1069
				       'map'
			      (_10, _7)
		      in  %% Line 1068
			  call 'erlang':'list_to_tuple'
			      (_11)
	  %% Line 1073
	  <Other,_X_B> when 'true' ->
	      %% Line 1074
	      Other
	end
'freeze'/2 =
    %% Line 1076
    fun (_0,_1) ->
	%% Line 1077
	{'frozen',_0,_1}
'normalise'/1 =
    %% Line 1081
    fun (_0) ->
	case _0 of
	  <{'frozen',_20,Term}> when 'true' ->
	      %% Line 1082
	      Term
	  %% Line 1083
	  <{'char',_21,C}> when 'true' ->
	      C
	  %% Line 1084
	  <{'integer',_22,I}> when 'true' ->
	      I
	  %% Line 1085
	  <{'float',_23,F}> when 'true' ->
	      F
	  %% Line 1086
	  <{'atom',_24,A}> when 'true' ->
	      A
	  %% Line 1087
	  <{'string',_25,S}> when 'true' ->
	      S
	  %% Line 1088
	  <{'nil',_26}> when 'true' ->
	      []
	  %% Line 1089
	  <{'bin',_27,Fs}> when 'true' ->
	      let <_6> =
		  fun (_3,_2) ->
		      let <_1> =
			  apply %% Line 1093
				'normalise'/1
			      (_3)
		      in  %% Line 1093
			  {'value',_1,[]}
	      in  %% Line 1090
		  case %% Line 1091
		       call 'eval_bits':'expr_grp'
			   (Fs, [], _6, %% Line 1094
					[], %% Line 1094
					    'true') of
		    <{'value',B,_29}> when 'true' ->
			%% Line 1095
			B
		    ( <_7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_7})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1096
	  <{'cons',_30,Head,Tail}> when 'true' ->
	      let <_8> =
		  apply %% Line 1097
			'normalise'/1
		      (%% Line 1097
		       Head)
	      in  let <_9> =
		      apply %% Line 1097
			    'normalise'/1
			  (%% Line 1097
			   Tail)
		  in  %% Line 1097
		      [_8|_9]
	  %% Line 1098
	  <{'op',_31,'++',A,B}> when 'true' ->
	      let <_11> =
		  apply %% Line 1099
			'normalise'/1
		      (%% Line 1099
		       A)
	      in  let <_10> =
		      apply %% Line 1099
			    'normalise'/1
			  (%% Line 1099
			   B)
		  in  %% Line 1099
		      call 'erlang':'++'
			  (_11, _10)
	  %% Line 1100
	  <{'tuple',_32,Args}> when 'true' ->
	      let <_12> =
		  apply %% Line 1101
			'normalise_list'/1
		      (%% Line 1101
		       Args)
	      in  %% Line 1101
		  call 'erlang':'list_to_tuple'
		      (_12)
	  %% Line 1102
	  <{'map',_33,Pairs0}> when 'true' ->
	      let <_17> =
		  fun (_15) ->
		      %% Line 1103
		      case _15 of
			<{'map_field_exact',_34,K,V}> when 'true' ->
			    let <_14> =
				apply %% Line 1104
				      'normalise'/1
				    (%% Line 1104
				     K)
			    in  let <_13> =
				    apply %% Line 1104
					  'normalise'/1
					(%% Line 1104
					 V)
				in  %% Line 1104
				    {_14,_13}
			( <_16> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_16})
				-| [{'function_name',{'-normalise/1-fun-1-',1}}] )
			  -| ['compiler_generated'] )
		      end
	      in  let <Pairs1> =
		      call %% Line 1103
			   'lists':%% Line 1103
				   'map'
			  (_17, %% Line 1106
				Pairs0)
		  in  %% Line 1107
		      call 'maps':'from_list'
			  (Pairs1)
	  %% Line 1109
	  <{'op',_35,'+',{'char',_36,I}}> when 'true' ->
	      I
	  %% Line 1110
	  <{'op',_37,'+',{'integer',_38,I}}> when 'true' ->
	      I
	  %% Line 1111
	  <{'op',_39,'+',{'float',_40,F}}> when 'true' ->
	      F
	  %% Line 1112
	  <{'op',_41,'-',{'char',_42,I}}> when 'true' ->
	      call 'erlang':'-'
		  (I)
	  %% Line 1113
	  <{'op',_43,'-',{'integer',_44,I}}> when 'true' ->
	      call 'erlang':'-'
		  (I)
	  %% Line 1114
	  <{'op',_45,'-',{'float',_46,F}}> when 'true' ->
	      call 'erlang':'-'
		  (F)
	  ( <_19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_19})
		  -| [{'function_name',{'normalise',1}}] )
	    -| ['compiler_generated'] )
	end
'normalise_list'/1 =
    %% Line 1116
    fun (_0) ->
	case _0 of
	  <[H|T]> when 'true' ->
	      let <_1> =
		  apply %% Line 1117
			'normalise'/1
		      (%% Line 1117
		       H)
	      in  let <_2> =
		      apply %% Line 1117
			    'normalise_list'/1
			  (%% Line 1117
			   T)
		  in  %% Line 1117
		      [_1|_2]
	  %% Line 1118
	  <[]> when 'true' ->
	      %% Line 1119
	      []
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'normalise_list',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ms_transform')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('ms_transform', _0)
end