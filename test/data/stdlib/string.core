module 'string' ['casefold'/1,
		 'centre'/2,
		 'centre'/3,
		 'chars'/2,
		 'chars'/3,
		 'chomp'/1,
		 'chr'/2,
		 'concat'/2,
		 'copies'/2,
		 'cspan'/2,
		 'equal'/2,
		 'equal'/3,
		 'equal'/4,
		 'find'/2,
		 'find'/3,
		 'is_empty'/1,
		 'join'/2,
		 'left'/2,
		 'left'/3,
		 'len'/1,
		 'length'/1,
		 'lexemes'/2,
		 'list_to_float'/1,
		 'list_to_integer'/1,
		 'lowercase'/1,
		 'module_info'/0,
		 'module_info'/1,
		 'next_codepoint'/1,
		 'next_grapheme'/1,
		 'nth_lexeme'/3,
		 'pad'/2,
		 'pad'/3,
		 'pad'/4,
		 'prefix'/2,
		 'rchr'/2,
		 'replace'/3,
		 'replace'/4,
		 'reverse'/1,
		 'right'/2,
		 'right'/3,
		 'rstr'/2,
		 'slice'/2,
		 'slice'/3,
		 'span'/2,
		 'split'/2,
		 'split'/3,
		 'str'/2,
		 'strip'/1,
		 'strip'/2,
		 'strip'/3,
		 'sub_string'/2,
		 'sub_string'/3,
		 'sub_word'/2,
		 'sub_word'/3,
		 'substr'/2,
		 'substr'/3,
		 'take'/2,
		 'take'/3,
		 'take'/4,
		 'titlecase'/1,
		 'to_float'/1,
		 'to_graphemes'/1,
		 'to_integer'/1,
		 'to_lower'/1,
		 'to_upper'/1,
		 'tokens'/2,
		 'trim'/1,
		 'trim'/2,
		 'trim'/3,
		 'uppercase'/1,
		 'words'/1,
		 'words'/2]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[115|[116|[114|[105|[110|[103|[46|[101|[114|[108]]]]]]]]]]]]]],1}],
		%% Line 77
		'compile' =
		    %% Line 77
		    [{'no_auto_import',[{'length',1}]}],
		%% Line 78
		'compile' =
		    %% Line 78
		    [{'inline',[{'btoken',2}|[{'rev',1}|[{'append',2}|[{'stack',2}|[{'search_compile',1}]]]]]}],
		%% Line 81
		'export_type' =
		    %% Line 81
		    [{'grapheme_cluster',0}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'grapheme_cluster',{'type',83,'union',[{'type',83,'char',[]}|[{'type',83,'list',[{'type',83,'char',[]}]}]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'direction',{'type',84,'union',[{'atom',84,'leading'}|[{'atom',84,'trailing'}]]},[]}],
		%% Line 86
		'dialyzer' =
		    %% Line 86
		    [{'no_improper_lists',[{'stack',2}|[{'length_b',3}]]}],
		%% Line 92
		'spec' =
		    %% Line 92
		    [{{'list_to_float',1},[{'type',92,'bounded_fun',[{'type',92,'fun',[{'type',92,'product',[{'var',92,'String'}]}|[{'type',92,'union',[{'type',92,'tuple',[{'var',92,'Float'}|[{'var',92,'Rest'}]]}|[{'type',92,'tuple',[{'atom',92,'error'}|[{'var',92,'Reason'}]]}]]}]]}|[[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'String'}|[{'type',93,'string',[]}]]]]}|[{'type',94,'constraint',[{'atom',94,'is_subtype'}|[[{'var',94,'Float'}|[{'type',94,'float',[]}]]]]}|[{'type',95,'constraint',[{'atom',95,'is_subtype'}|[[{'var',95,'Rest'}|[{'type',95,'string',[]}]]]]}|[{'type',96,'constraint',[{'atom',96,'is_subtype'}|[[{'var',96,'Reason'}|[{'type',96,'union',[{'atom',96,'no_float'}|[{'atom',96,'not_a_list'}]]}]]]]}]]]]]]}]}],
		%% Line 101
		'spec' =
		    %% Line 101
		    [{{'list_to_integer',1},[{'type',101,'bounded_fun',[{'type',101,'fun',[{'type',101,'product',[{'var',101,'String'}]}|[{'type',101,'union',[{'type',101,'tuple',[{'var',101,'Int'}|[{'var',101,'Rest'}]]}|[{'type',101,'tuple',[{'atom',101,'error'}|[{'var',101,'Reason'}]]}]]}]]}|[[{'type',102,'constraint',[{'atom',102,'is_subtype'}|[[{'var',102,'String'}|[{'type',102,'string',[]}]]]]}|[{'type',103,'constraint',[{'atom',103,'is_subtype'}|[[{'var',103,'Int'}|[{'type',103,'integer',[]}]]]]}|[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'Rest'}|[{'type',104,'string',[]}]]]]}|[{'type',105,'constraint',[{'atom',105,'is_subtype'}|[[{'var',105,'Reason'}|[{'type',105,'union',[{'atom',105,'no_integer'}|[{'atom',105,'not_a_list'}]]}]]]]}]]]]]]}]}],
		%% Line 113
		'spec' =
		    %% Line 113
		    [{{'is_empty',1},[{'type',113,'fun',[{'type',113,'product',[{'ann_type',113,[{'var',113,'String'}|[{'remote_type',113,[{'atom',113,'unicode'}|[{'atom',113,'chardata'}|[[]]]]}]]}]}|[{'type',113,'boolean',[]}]]}]}],
		%% Line 120
		'spec' =
		    %% Line 120
		    [{{'length',1},[{'type',120,'fun',[{'type',120,'product',[{'ann_type',120,[{'var',120,'String'}|[{'remote_type',120,[{'atom',120,'unicode'}|[{'atom',120,'chardata'}|[[]]]]}]]}]}|[{'type',120,'non_neg_integer',[]}]]}]}],
		%% Line 127
		'spec' =
		    %% Line 127
		    [{{'to_graphemes',1},[{'type',127,'fun',[{'type',127,'product',[{'ann_type',127,[{'var',127,'String'}|[{'remote_type',127,[{'atom',127,'unicode'}|[{'atom',127,'chardata'}|[[]]]]}]]}]}|[{'type',127,'list',[{'user_type',127,'grapheme_cluster',[]}]}]]}]}],
		%% Line 137
		'spec' =
		    %% Line 137
		    [{{'equal',2},[{'type',137,'bounded_fun',[{'type',137,'fun',[{'type',137,'product',[{'var',137,'A'}|[{'var',137,'B'}]]}|[{'type',137,'boolean',[]}]]}|[[{'type',138,'constraint',[{'atom',138,'is_subtype'}|[[{'var',138,'A'}|[{'remote_type',138,[{'atom',138,'unicode'}|[{'atom',138,'chardata'}|[[]]]]}]]]]}|[{'type',139,'constraint',[{'atom',139,'is_subtype'}|[[{'var',139,'B'}|[{'remote_type',139,[{'atom',139,'unicode'}|[{'atom',139,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 148
		'spec' =
		    %% Line 148
		    [{{'equal',3},[{'type',148,'bounded_fun',[{'type',148,'fun',[{'type',148,'product',[{'var',148,'A'}|[{'var',148,'B'}|[{'var',148,'IgnoreCase'}]]]}|[{'type',148,'boolean',[]}]]}|[[{'type',149,'constraint',[{'atom',149,'is_subtype'}|[[{'var',149,'A'}|[{'remote_type',149,[{'atom',149,'unicode'}|[{'atom',149,'chardata'}|[[]]]]}]]]]}|[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'B'}|[{'remote_type',150,[{'atom',150,'unicode'}|[{'atom',150,'chardata'}|[[]]]]}]]]]}|[{'type',151,'constraint',[{'atom',151,'is_subtype'}|[[{'var',151,'IgnoreCase'}|[{'type',151,'boolean',[]}]]]]}]]]]]}]}],
		%% Line 159
		'spec' =
		    %% Line 159
		    [{{'equal',4},[{'type',159,'bounded_fun',[{'type',159,'fun',[{'type',159,'product',[{'var',159,'A'}|[{'var',159,'B'}|[{'var',159,'IgnoreCase'}|[{'var',159,'Norm'}]]]]}|[{'type',159,'boolean',[]}]]}|[[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'A'}|[{'remote_type',160,[{'atom',160,'unicode'}|[{'atom',160,'chardata'}|[[]]]]}]]]]}|[{'type',161,'constraint',[{'atom',161,'is_subtype'}|[[{'var',161,'B'}|[{'remote_type',161,[{'atom',161,'unicode'}|[{'atom',161,'chardata'}|[[]]]]}]]]]}|[{'type',162,'constraint',[{'atom',162,'is_subtype'}|[[{'var',162,'IgnoreCase'}|[{'type',162,'boolean',[]}]]]]}|[{'type',163,'constraint',[{'atom',163,'is_subtype'}|[[{'var',163,'Norm'}|[{'type',163,'union',[{'atom',163,'none'}|[{'atom',163,'nfc'}|[{'atom',163,'nfd'}|[{'atom',163,'nfkc'}|[{'atom',163,'nfkd'}]]]]]}]]]]}]]]]]]}]}],
		%% Line 172
		'spec' =
		    %% Line 172
		    [{{'reverse',1},[{'type',172,'fun',[{'type',172,'product',[{'ann_type',172,[{'var',172,'String'}|[{'remote_type',172,[{'atom',172,'unicode'}|[{'atom',172,'chardata'}|[[]]]]}]]}]}|[{'type',172,'list',[{'user_type',172,'grapheme_cluster',[]}]}]]}]}],
		%% Line 180
		'spec' =
		    %% Line 180
		    [{{'slice',2},[{'type',180,'bounded_fun',[{'type',180,'fun',[{'type',180,'product',[{'var',180,'String'}|[{'var',180,'Start'}]]}|[{'var',180,'Slice'}]]}|[[{'type',181,'constraint',[{'atom',181,'is_subtype'}|[[{'var',181,'String'}|[{'remote_type',181,[{'atom',181,'unicode'}|[{'atom',181,'chardata'}|[[]]]]}]]]]}|[{'type',182,'constraint',[{'atom',182,'is_subtype'}|[[{'var',182,'Start'}|[{'type',182,'non_neg_integer',[]}]]]]}|[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'Slice'}|[{'remote_type',183,[{'atom',183,'unicode'}|[{'atom',183,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 190
		'spec' =
		    %% Line 190
		    [{{'slice',3},[{'type',190,'bounded_fun',[{'type',190,'fun',[{'type',190,'product',[{'var',190,'String'}|[{'var',190,'Start'}|[{'var',190,'Length'}]]]}|[{'var',190,'Slice'}]]}|[[{'type',191,'constraint',[{'atom',191,'is_subtype'}|[[{'var',191,'String'}|[{'remote_type',191,[{'atom',191,'unicode'}|[{'atom',191,'chardata'}|[[]]]]}]]]]}|[{'type',192,'constraint',[{'atom',192,'is_subtype'}|[[{'var',192,'Start'}|[{'type',192,'non_neg_integer',[]}]]]]}|[{'type',193,'constraint',[{'atom',193,'is_subtype'}|[[{'var',193,'Length'}|[{'type',193,'union',[{'atom',193,'infinity'}|[{'type',193,'non_neg_integer',[]}]]}]]]]}|[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'Slice'}|[{'remote_type',194,[{'atom',194,'unicode'}|[{'atom',194,'chardata'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 213
		'spec' =
		    %% Line 213
		    [{{'pad',2},[{'type',213,'bounded_fun',[{'type',213,'fun',[{'type',213,'product',[{'var',213,'String'}|[{'var',213,'Length'}]]}|[{'remote_type',213,[{'atom',213,'unicode'}|[{'atom',213,'charlist'}|[[]]]]}]]}|[[{'type',214,'constraint',[{'atom',214,'is_subtype'}|[[{'var',214,'String'}|[{'remote_type',214,[{'atom',214,'unicode'}|[{'atom',214,'chardata'}|[[]]]]}]]]]}|[{'type',215,'constraint',[{'atom',215,'is_subtype'}|[[{'var',215,'Length'}|[{'type',215,'integer',[]}]]]]}]]]]}]}],
		%% Line 219
		'spec' =
		    %% Line 219
		    [{{'pad',3},[{'type',219,'bounded_fun',[{'type',219,'fun',[{'type',219,'product',[{'var',219,'String'}|[{'var',219,'Length'}|[{'var',219,'Dir'}]]]}|[{'remote_type',219,[{'atom',219,'unicode'}|[{'atom',219,'charlist'}|[[]]]]}]]}|[[{'type',220,'constraint',[{'atom',220,'is_subtype'}|[[{'var',220,'String'}|[{'remote_type',220,[{'atom',220,'unicode'}|[{'atom',220,'chardata'}|[[]]]]}]]]]}|[{'type',221,'constraint',[{'atom',221,'is_subtype'}|[[{'var',221,'Length'}|[{'type',221,'integer',[]}]]]]}|[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'Dir'}|[{'type',222,'union',[{'user_type',222,'direction',[]}|[{'atom',222,'both'}]]}]]]]}]]]]]}]}],
		%% Line 226
		'spec' =
		    %% Line 226
		    [{{'pad',4},[{'type',226,'bounded_fun',[{'type',226,'fun',[{'type',226,'product',[{'var',226,'String'}|[{'var',226,'Length'}|[{'var',226,'Dir'}|[{'var',226,'Char'}]]]]}|[{'remote_type',226,[{'atom',226,'unicode'}|[{'atom',226,'charlist'}|[[]]]]}]]}|[[{'type',227,'constraint',[{'atom',227,'is_subtype'}|[[{'var',227,'String'}|[{'remote_type',227,[{'atom',227,'unicode'}|[{'atom',227,'chardata'}|[[]]]]}]]]]}|[{'type',228,'constraint',[{'atom',228,'is_subtype'}|[[{'var',228,'Length'}|[{'type',228,'integer',[]}]]]]}|[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'Dir'}|[{'type',229,'union',[{'user_type',229,'direction',[]}|[{'atom',229,'both'}]]}]]]]}|[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'Char'}|[{'user_type',230,'grapheme_cluster',[]}]]]]}]]]]]]}]}],
		%% Line 248
		'spec' =
		    %% Line 248
		    [{{'trim',1},[{'type',248,'bounded_fun',[{'type',248,'fun',[{'type',248,'product',[{'var',248,'String'}]}|[{'remote_type',248,[{'atom',248,'unicode'}|[{'atom',248,'chardata'}|[[]]]]}]]}|[[{'type',249,'constraint',[{'atom',249,'is_subtype'}|[[{'var',249,'String'}|[{'remote_type',249,[{'atom',249,'unicode'}|[{'atom',249,'chardata'}|[[]]]]}]]]]}]]]}]}],
		%% Line 253
		'spec' =
		    %% Line 253
		    [{{'trim',2},[{'type',253,'bounded_fun',[{'type',253,'fun',[{'type',253,'product',[{'var',253,'String'}|[{'var',253,'Dir'}]]}|[{'remote_type',253,[{'atom',253,'unicode'}|[{'atom',253,'chardata'}|[[]]]]}]]}|[[{'type',254,'constraint',[{'atom',254,'is_subtype'}|[[{'var',254,'String'}|[{'remote_type',254,[{'atom',254,'unicode'}|[{'atom',254,'chardata'}|[[]]]]}]]]]}|[{'type',255,'constraint',[{'atom',255,'is_subtype'}|[[{'var',255,'Dir'}|[{'type',255,'union',[{'user_type',255,'direction',[]}|[{'atom',255,'both'}]]}]]]]}]]]]}]}],
		%% Line 259
		'spec' =
		    %% Line 259
		    [{{'trim',3},[{'type',259,'bounded_fun',[{'type',259,'fun',[{'type',259,'product',[{'var',259,'String'}|[{'var',259,'Dir'}|[{'var',259,'Characters'}]]]}|[{'remote_type',259,[{'atom',259,'unicode'}|[{'atom',259,'chardata'}|[[]]]]}]]}|[[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'String'}|[{'remote_type',260,[{'atom',260,'unicode'}|[{'atom',260,'chardata'}|[[]]]]}]]]]}|[{'type',261,'constraint',[{'atom',261,'is_subtype'}|[[{'var',261,'Dir'}|[{'type',261,'union',[{'user_type',261,'direction',[]}|[{'atom',261,'both'}]]}]]]]}|[{'type',262,'constraint',[{'atom',262,'is_subtype'}|[[{'var',262,'Characters'}|[{'type',262,'list',[{'user_type',262,'grapheme_cluster',[]}]}]]]]}]]]]]}]}],
		%% Line 277
		'spec' =
		    %% Line 277
		    [{{'chomp',1},[{'type',277,'fun',[{'type',277,'product',[{'ann_type',277,[{'var',277,'String'}|[{'remote_type',277,[{'atom',277,'unicode'}|[{'atom',277,'chardata'}|[[]]]]}]]}]}|[{'remote_type',277,[{'atom',277,'unicode'}|[{'atom',277,'chardata'}|[[]]]]}]]}]}],
		%% Line 282
		'spec' =
		    %% Line 282
		    [{{'take',2},[{'type',282,'bounded_fun',[{'type',282,'fun',[{'type',282,'product',[{'var',282,'String'}|[{'var',282,'Characters'}]]}|[{'type',282,'tuple',[{'var',282,'Leading'}|[{'var',282,'Trailing'}]]}]]}|[[{'type',283,'constraint',[{'atom',283,'is_subtype'}|[[{'var',283,'String'}|[{'remote_type',283,[{'atom',283,'unicode'}|[{'atom',283,'chardata'}|[[]]]]}]]]]}|[{'type',284,'constraint',[{'atom',284,'is_subtype'}|[[{'var',284,'Characters'}|[{'type',284,'list',[{'user_type',284,'grapheme_cluster',[]}]}]]]]}|[{'type',285,'constraint',[{'atom',285,'is_subtype'}|[[{'var',285,'Leading'}|[{'remote_type',285,[{'atom',285,'unicode'}|[{'atom',285,'chardata'}|[[]]]]}]]]]}|[{'type',286,'constraint',[{'atom',286,'is_subtype'}|[[{'var',286,'Trailing'}|[{'remote_type',286,[{'atom',286,'unicode'}|[{'atom',286,'chardata'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 289
		'spec' =
		    %% Line 289
		    [{{'take',3},[{'type',289,'bounded_fun',[{'type',289,'fun',[{'type',289,'product',[{'var',289,'String'}|[{'var',289,'Characters'}|[{'var',289,'Complement'}]]]}|[{'type',289,'tuple',[{'var',289,'Leading'}|[{'var',289,'Trailing'}]]}]]}|[[{'type',290,'constraint',[{'atom',290,'is_subtype'}|[[{'var',290,'String'}|[{'remote_type',290,[{'atom',290,'unicode'}|[{'atom',290,'chardata'}|[[]]]]}]]]]}|[{'type',291,'constraint',[{'atom',291,'is_subtype'}|[[{'var',291,'Characters'}|[{'type',291,'list',[{'user_type',291,'grapheme_cluster',[]}]}]]]]}|[{'type',292,'constraint',[{'atom',292,'is_subtype'}|[[{'var',292,'Complement'}|[{'type',292,'boolean',[]}]]]]}|[{'type',293,'constraint',[{'atom',293,'is_subtype'}|[[{'var',293,'Leading'}|[{'remote_type',293,[{'atom',293,'unicode'}|[{'atom',293,'chardata'}|[[]]]]}]]]]}|[{'type',294,'constraint',[{'atom',294,'is_subtype'}|[[{'var',294,'Trailing'}|[{'remote_type',294,[{'atom',294,'unicode'}|[{'atom',294,'chardata'}|[[]]]]}]]]]}]]]]]]]}]}],
		%% Line 297
		'spec' =
		    %% Line 297
		    [{{'take',4},[{'type',297,'bounded_fun',[{'type',297,'fun',[{'type',297,'product',[{'var',297,'String'}|[{'var',297,'Characters'}|[{'var',297,'Complement'}|[{'var',297,'Dir'}]]]]}|[{'type',297,'tuple',[{'var',297,'Leading'}|[{'var',297,'Trailing'}]]}]]}|[[{'type',298,'constraint',[{'atom',298,'is_subtype'}|[[{'var',298,'String'}|[{'remote_type',298,[{'atom',298,'unicode'}|[{'atom',298,'chardata'}|[[]]]]}]]]]}|[{'type',299,'constraint',[{'atom',299,'is_subtype'}|[[{'var',299,'Characters'}|[{'type',299,'list',[{'user_type',299,'grapheme_cluster',[]}]}]]]]}|[{'type',300,'constraint',[{'atom',300,'is_subtype'}|[[{'var',300,'Complement'}|[{'type',300,'boolean',[]}]]]]}|[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'Dir'}|[{'user_type',301,'direction',[]}]]]]}|[{'type',302,'constraint',[{'atom',302,'is_subtype'}|[[{'var',302,'Leading'}|[{'remote_type',302,[{'atom',302,'unicode'}|[{'atom',302,'chardata'}|[[]]]]}]]]]}|[{'type',303,'constraint',[{'atom',303,'is_subtype'}|[[{'var',303,'Trailing'}|[{'remote_type',303,[{'atom',303,'unicode'}|[{'atom',303,'chardata'}|[[]]]]}]]]]}]]]]]]]]}]}],
		%% Line 325
		'spec' =
		    %% Line 325
		    [{{'uppercase',1},[{'type',325,'fun',[{'type',325,'product',[{'ann_type',325,[{'var',325,'String'}|[{'remote_type',325,[{'atom',325,'unicode'}|[{'atom',325,'chardata'}|[[]]]]}]]}]}|[{'remote_type',325,[{'atom',325,'unicode'}|[{'atom',325,'chardata'}|[[]]]]}]]}]}],
		%% Line 342
		'spec' =
		    %% Line 342
		    [{{'lowercase',1},[{'type',342,'fun',[{'type',342,'product',[{'ann_type',342,[{'var',342,'String'}|[{'remote_type',342,[{'atom',342,'unicode'}|[{'atom',342,'chardata'}|[[]]]]}]]}]}|[{'remote_type',342,[{'atom',342,'unicode'}|[{'atom',342,'chardata'}|[[]]]]}]]}]}],
		%% Line 359
		'spec' =
		    %% Line 359
		    [{{'titlecase',1},[{'type',359,'fun',[{'type',359,'product',[{'ann_type',359,[{'var',359,'String'}|[{'remote_type',359,[{'atom',359,'unicode'}|[{'atom',359,'chardata'}|[[]]]]}]]}]}|[{'remote_type',359,[{'atom',359,'unicode'}|[{'atom',359,'chardata'}|[[]]]]}]]}]}],
		%% Line 374
		'spec' =
		    %% Line 374
		    [{{'casefold',1},[{'type',374,'fun',[{'type',374,'product',[{'ann_type',374,[{'var',374,'String'}|[{'remote_type',374,[{'atom',374,'unicode'}|[{'atom',374,'chardata'}|[[]]]]}]]}]}|[{'remote_type',374,[{'atom',374,'unicode'}|[{'atom',374,'chardata'}|[[]]]]}]]}]}],
		%% Line 389
		'spec' =
		    %% Line 389
		    [{{'to_integer',1},[{'type',389,'bounded_fun',[{'type',389,'fun',[{'type',389,'product',[{'var',389,'String'}]}|[{'type',389,'union',[{'type',389,'tuple',[{'var',389,'Int'}|[{'var',389,'Rest'}]]}|[{'type',389,'tuple',[{'atom',389,'error'}|[{'var',389,'Reason'}]]}]]}]]}|[[{'type',390,'constraint',[{'atom',390,'is_subtype'}|[[{'var',390,'String'}|[{'remote_type',390,[{'atom',390,'unicode'}|[{'atom',390,'chardata'}|[[]]]]}]]]]}|[{'type',391,'constraint',[{'atom',391,'is_subtype'}|[[{'var',391,'Int'}|[{'type',391,'integer',[]}]]]]}|[{'type',392,'constraint',[{'atom',392,'is_subtype'}|[[{'var',392,'Rest'}|[{'remote_type',392,[{'atom',392,'unicode'}|[{'atom',392,'chardata'}|[[]]]]}]]]]}|[{'type',393,'constraint',[{'atom',393,'is_subtype'}|[[{'var',393,'Reason'}|[{'type',393,'union',[{'atom',393,'no_integer'}|[{'atom',393,'badarg'}]]}]]]]}]]]]]]}]}],
		%% Line 411
		'spec' =
		    %% Line 411
		    [{{'to_float',1},[{'type',411,'bounded_fun',[{'type',411,'fun',[{'type',411,'product',[{'var',411,'String'}]}|[{'type',411,'union',[{'type',411,'tuple',[{'var',411,'Float'}|[{'var',411,'Rest'}]]}|[{'type',411,'tuple',[{'atom',411,'error'}|[{'var',411,'Reason'}]]}]]}]]}|[[{'type',412,'constraint',[{'atom',412,'is_subtype'}|[[{'var',412,'String'}|[{'remote_type',412,[{'atom',412,'unicode'}|[{'atom',412,'chardata'}|[[]]]]}]]]]}|[{'type',413,'constraint',[{'atom',413,'is_subtype'}|[[{'var',413,'Float'}|[{'type',413,'float',[]}]]]]}|[{'type',414,'constraint',[{'atom',414,'is_subtype'}|[[{'var',414,'Rest'}|[{'remote_type',414,[{'atom',414,'unicode'}|[{'atom',414,'chardata'}|[[]]]]}]]]]}|[{'type',415,'constraint',[{'atom',415,'is_subtype'}|[[{'var',415,'Reason'}|[{'type',415,'union',[{'atom',415,'no_float'}|[{'atom',415,'badarg'}]]}]]]]}]]]]]]}]}],
		%% Line 441
		'spec' =
		    %% Line 441
		    [{{'prefix',2},[{'type',441,'fun',[{'type',441,'product',[{'ann_type',441,[{'var',441,'String'}|[{'remote_type',441,[{'atom',441,'unicode'}|[{'atom',441,'chardata'}|[[]]]]}]]}|[{'ann_type',441,[{'var',441,'Prefix'}|[{'remote_type',441,[{'atom',441,'unicode'}|[{'atom',441,'chardata'}|[[]]]]}]]}]]}|[{'type',442,'union',[{'atom',442,'nomatch'}|[{'remote_type',442,[{'atom',442,'unicode'}|[{'atom',442,'chardata'}|[[]]]]}]]}]]}]}],
		%% Line 454
		'spec' =
		    %% Line 454
		    [{{'split',2},[{'type',454,'bounded_fun',[{'type',454,'fun',[{'type',454,'product',[{'var',454,'String'}|[{'var',454,'SearchPattern'}]]}|[{'type',454,'list',[{'remote_type',454,[{'atom',454,'unicode'}|[{'atom',454,'chardata'}|[[]]]]}]}]]}|[[{'type',455,'constraint',[{'atom',455,'is_subtype'}|[[{'var',455,'String'}|[{'remote_type',455,[{'atom',455,'unicode'}|[{'atom',455,'chardata'}|[[]]]]}]]]]}|[{'type',456,'constraint',[{'atom',456,'is_subtype'}|[[{'var',456,'SearchPattern'}|[{'remote_type',456,[{'atom',456,'unicode'}|[{'atom',456,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 461
		'spec' =
		    %% Line 461
		    [{{'split',3},[{'type',461,'bounded_fun',[{'type',461,'fun',[{'type',461,'product',[{'var',461,'String'}|[{'var',461,'SearchPattern'}|[{'var',461,'Where'}]]]}|[{'type',461,'list',[{'remote_type',461,[{'atom',461,'unicode'}|[{'atom',461,'chardata'}|[[]]]]}]}]]}|[[{'type',462,'constraint',[{'atom',462,'is_subtype'}|[[{'var',462,'String'}|[{'remote_type',462,[{'atom',462,'unicode'}|[{'atom',462,'chardata'}|[[]]]]}]]]]}|[{'type',463,'constraint',[{'atom',463,'is_subtype'}|[[{'var',463,'SearchPattern'}|[{'remote_type',463,[{'atom',463,'unicode'}|[{'atom',463,'chardata'}|[[]]]]}]]]]}|[{'type',464,'constraint',[{'atom',464,'is_subtype'}|[[{'var',464,'Where'}|[{'type',464,'union',[{'user_type',464,'direction',[]}|[{'atom',464,'all'}]]}]]]]}]]]]]}]}],
		%% Line 479
		'spec' =
		    %% Line 479
		    [{{'replace',3},[{'type',479,'bounded_fun',[{'type',479,'fun',[{'type',479,'product',[{'var',479,'String'}|[{'var',479,'SearchPattern'}|[{'var',479,'Replacement'}]]]}|[{'type',480,'list',[{'remote_type',480,[{'atom',480,'unicode'}|[{'atom',480,'chardata'}|[[]]]]}]}]]}|[[{'type',481,'constraint',[{'atom',481,'is_subtype'}|[[{'var',481,'String'}|[{'remote_type',481,[{'atom',481,'unicode'}|[{'atom',481,'chardata'}|[[]]]]}]]]]}|[{'type',482,'constraint',[{'atom',482,'is_subtype'}|[[{'var',482,'SearchPattern'}|[{'remote_type',482,[{'atom',482,'unicode'}|[{'atom',482,'chardata'}|[[]]]]}]]]]}|[{'type',483,'constraint',[{'atom',483,'is_subtype'}|[[{'var',483,'Replacement'}|[{'remote_type',483,[{'atom',483,'unicode'}|[{'atom',483,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 488
		'spec' =
		    %% Line 488
		    [{{'replace',4},[{'type',488,'bounded_fun',[{'type',488,'fun',[{'type',488,'product',[{'var',488,'String'}|[{'var',488,'SearchPattern'}|[{'var',488,'Replacement'}|[{'var',488,'Where'}]]]]}|[{'type',489,'list',[{'remote_type',489,[{'atom',489,'unicode'}|[{'atom',489,'chardata'}|[[]]]]}]}]]}|[[{'type',490,'constraint',[{'atom',490,'is_subtype'}|[[{'var',490,'String'}|[{'remote_type',490,[{'atom',490,'unicode'}|[{'atom',490,'chardata'}|[[]]]]}]]]]}|[{'type',491,'constraint',[{'atom',491,'is_subtype'}|[[{'var',491,'SearchPattern'}|[{'remote_type',491,[{'atom',491,'unicode'}|[{'atom',491,'chardata'}|[[]]]]}]]]]}|[{'type',492,'constraint',[{'atom',492,'is_subtype'}|[[{'var',492,'Replacement'}|[{'remote_type',492,[{'atom',492,'unicode'}|[{'atom',492,'chardata'}|[[]]]]}]]]]}|[{'type',493,'constraint',[{'atom',493,'is_subtype'}|[[{'var',493,'Where'}|[{'type',493,'union',[{'user_type',493,'direction',[]}|[{'atom',493,'all'}]]}]]]]}]]]]]]}]}],
		%% Line 499
		'spec' =
		    %% Line 499
		    [{{'lexemes',2},[{'type',499,'fun',[{'type',499,'product',[{'ann_type',499,[{'var',499,'String'}|[{'remote_type',499,[{'atom',499,'unicode'}|[{'atom',499,'chardata'}|[[]]]]}]]}|[{'ann_type',500,[{'var',500,'SeparatorList'}|[{'type',500,'list',[{'user_type',500,'grapheme_cluster',[]}]}]]}]]}|[{'type',501,'list',[{'remote_type',501,[{'atom',501,'unicode'}|[{'atom',501,'chardata'}|[[]]]]}]}]]}]}],
		%% Line 508
		'spec' =
		    %% Line 508
		    [{{'nth_lexeme',3},[{'type',508,'bounded_fun',[{'type',508,'fun',[{'type',508,'product',[{'var',508,'String'}|[{'var',508,'N'}|[{'var',508,'SeparatorList'}]]]}|[{'remote_type',508,[{'atom',508,'unicode'}|[{'atom',508,'chardata'}|[[]]]]}]]}|[[{'type',509,'constraint',[{'atom',509,'is_subtype'}|[[{'var',509,'String'}|[{'remote_type',509,[{'atom',509,'unicode'}|[{'atom',509,'chardata'}|[[]]]]}]]]]}|[{'type',510,'constraint',[{'atom',510,'is_subtype'}|[[{'var',510,'N'}|[{'type',510,'non_neg_integer',[]}]]]]}|[{'type',511,'constraint',[{'atom',511,'is_subtype'}|[[{'var',511,'SeparatorList'}|[{'type',511,'list',[{'user_type',511,'grapheme_cluster',[]}]}]]]]}]]]]]}]}],
		%% Line 519
		'spec' =
		    %% Line 519
		    [{{'find',2},[{'type',519,'bounded_fun',[{'type',519,'fun',[{'type',519,'product',[{'var',519,'String'}|[{'var',519,'SearchPattern'}]]}|[{'type',519,'union',[{'remote_type',519,[{'atom',519,'unicode'}|[{'atom',519,'chardata'}|[[]]]]}|[{'atom',519,'nomatch'}]]}]]}|[[{'type',520,'constraint',[{'atom',520,'is_subtype'}|[[{'var',520,'String'}|[{'remote_type',520,[{'atom',520,'unicode'}|[{'atom',520,'chardata'}|[[]]]]}]]]]}|[{'type',521,'constraint',[{'atom',521,'is_subtype'}|[[{'var',521,'SearchPattern'}|[{'remote_type',521,[{'atom',521,'unicode'}|[{'atom',521,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 526
		'spec' =
		    %% Line 526
		    [{{'find',3},[{'type',526,'bounded_fun',[{'type',526,'fun',[{'type',526,'product',[{'var',526,'String'}|[{'var',526,'SearchPattern'}|[{'var',526,'Dir'}]]]}|[{'type',526,'union',[{'remote_type',526,[{'atom',526,'unicode'}|[{'atom',526,'chardata'}|[[]]]]}|[{'atom',526,'nomatch'}]]}]]}|[[{'type',527,'constraint',[{'atom',527,'is_subtype'}|[[{'var',527,'String'}|[{'remote_type',527,[{'atom',527,'unicode'}|[{'atom',527,'chardata'}|[[]]]]}]]]]}|[{'type',528,'constraint',[{'atom',528,'is_subtype'}|[[{'var',528,'SearchPattern'}|[{'remote_type',528,[{'atom',528,'unicode'}|[{'atom',528,'chardata'}|[[]]]]}]]]]}|[{'type',529,'constraint',[{'atom',529,'is_subtype'}|[[{'var',529,'Dir'}|[{'user_type',529,'direction',[]}]]]]}]]]]]}]}],
		%% Line 538
		'spec' =
		    %% Line 538
		    [{{'next_grapheme',1},[{'type',538,'fun',[{'type',538,'product',[{'ann_type',538,[{'var',538,'String'}|[{'remote_type',538,[{'atom',538,'unicode'}|[{'atom',538,'chardata'}|[[]]]]}]]}]}|[{'type',539,'union',[{'type',539,'maybe_improper_list',[{'user_type',539,'grapheme_cluster',[]}|[{'remote_type',539,[{'atom',539,'unicode'}|[{'atom',539,'chardata'}|[[]]]]}]]}|[{'type',540,'tuple',[{'atom',540,'error'}|[{'remote_type',540,[{'atom',540,'unicode'}|[{'atom',540,'chardata'}|[[]]]]}]]}]]}]]}]}],
		%% Line 544
		'spec' =
		    %% Line 544
		    [{{'next_codepoint',1},[{'type',544,'fun',[{'type',544,'product',[{'ann_type',544,[{'var',544,'String'}|[{'remote_type',544,[{'atom',544,'unicode'}|[{'atom',544,'chardata'}|[[]]]]}]]}]}|[{'type',545,'union',[{'type',545,'maybe_improper_list',[{'type',545,'char',[]}|[{'remote_type',545,[{'atom',545,'unicode'}|[{'atom',545,'chardata'}|[[]]]]}]]}|[{'type',546,'tuple',[{'atom',546,'error'}|[{'remote_type',546,[{'atom',546,'unicode'}|[{'atom',546,'chardata'}|[[]]]]}]]}]]}]]}]}],
		%% Line 1764
		'spec' =
		    %% Line 1764
		    [{{'len',1},[{'type',1764,'bounded_fun',[{'type',1764,'fun',[{'type',1764,'product',[{'var',1764,'String'}]}|[{'var',1764,'Length'}]]}|[[{'type',1765,'constraint',[{'atom',1765,'is_subtype'}|[[{'var',1765,'String'}|[{'type',1765,'string',[]}]]]]}|[{'type',1766,'constraint',[{'atom',1766,'is_subtype'}|[[{'var',1766,'Length'}|[{'type',1766,'non_neg_integer',[]}]]]]}]]]]}]}],
		%% Line 1783
		'spec' =
		    %% Line 1783
		    [{{'concat',2},[{'type',1783,'bounded_fun',[{'type',1783,'fun',[{'type',1783,'product',[{'var',1783,'String1'}|[{'var',1783,'String2'}]]}|[{'var',1783,'String3'}]]}|[[{'type',1784,'constraint',[{'atom',1784,'is_subtype'}|[[{'var',1784,'String1'}|[{'type',1784,'string',[]}]]]]}|[{'type',1785,'constraint',[{'atom',1785,'is_subtype'}|[[{'var',1785,'String2'}|[{'type',1785,'string',[]}]]]]}|[{'type',1786,'constraint',[{'atom',1786,'is_subtype'}|[[{'var',1786,'String3'}|[{'type',1786,'string',[]}]]]]}]]]]]}]}],
		%% Line 1794
		'spec' =
		    %% Line 1794
		    [{{'chr',2},[{'type',1794,'bounded_fun',[{'type',1794,'fun',[{'type',1794,'product',[{'var',1794,'String'}|[{'var',1794,'Character'}]]}|[{'var',1794,'Index'}]]}|[[{'type',1795,'constraint',[{'atom',1795,'is_subtype'}|[[{'var',1795,'String'}|[{'type',1795,'string',[]}]]]]}|[{'type',1796,'constraint',[{'atom',1796,'is_subtype'}|[[{'var',1796,'Character'}|[{'type',1796,'char',[]}]]]]}|[{'type',1797,'constraint',[{'atom',1797,'is_subtype'}|[[{'var',1797,'Index'}|[{'type',1797,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 1805
		'spec' =
		    %% Line 1805
		    [{{'rchr',2},[{'type',1805,'bounded_fun',[{'type',1805,'fun',[{'type',1805,'product',[{'var',1805,'String'}|[{'var',1805,'Character'}]]}|[{'var',1805,'Index'}]]}|[[{'type',1806,'constraint',[{'atom',1806,'is_subtype'}|[[{'var',1806,'String'}|[{'type',1806,'string',[]}]]]]}|[{'type',1807,'constraint',[{'atom',1807,'is_subtype'}|[[{'var',1807,'Character'}|[{'type',1807,'char',[]}]]]]}|[{'type',1808,'constraint',[{'atom',1808,'is_subtype'}|[[{'var',1808,'Index'}|[{'type',1808,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 1824
		'spec' =
		    %% Line 1824
		    [{{'str',2},[{'type',1824,'bounded_fun',[{'type',1824,'fun',[{'type',1824,'product',[{'var',1824,'String'}|[{'var',1824,'SubString'}]]}|[{'var',1824,'Index'}]]}|[[{'type',1825,'constraint',[{'atom',1825,'is_subtype'}|[[{'var',1825,'String'}|[{'type',1825,'string',[]}]]]]}|[{'type',1826,'constraint',[{'atom',1826,'is_subtype'}|[[{'var',1826,'SubString'}|[{'type',1826,'string',[]}]]]]}|[{'type',1827,'constraint',[{'atom',1827,'is_subtype'}|[[{'var',1827,'Index'}|[{'type',1827,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 1839
		'spec' =
		    %% Line 1839
		    [{{'rstr',2},[{'type',1839,'bounded_fun',[{'type',1839,'fun',[{'type',1839,'product',[{'var',1839,'String'}|[{'var',1839,'SubString'}]]}|[{'var',1839,'Index'}]]}|[[{'type',1840,'constraint',[{'atom',1840,'is_subtype'}|[[{'var',1840,'String'}|[{'type',1840,'string',[]}]]]]}|[{'type',1841,'constraint',[{'atom',1841,'is_subtype'}|[[{'var',1841,'SubString'}|[{'type',1841,'string',[]}]]]]}|[{'type',1842,'constraint',[{'atom',1842,'is_subtype'}|[[{'var',1842,'Index'}|[{'type',1842,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 1861
		'spec' =
		    %% Line 1861
		    [{{'span',2},[{'type',1861,'bounded_fun',[{'type',1861,'fun',[{'type',1861,'product',[{'var',1861,'String'}|[{'var',1861,'Chars'}]]}|[{'var',1861,'Length'}]]}|[[{'type',1862,'constraint',[{'atom',1862,'is_subtype'}|[[{'var',1862,'String'}|[{'type',1862,'string',[]}]]]]}|[{'type',1863,'constraint',[{'atom',1863,'is_subtype'}|[[{'var',1863,'Chars'}|[{'type',1863,'string',[]}]]]]}|[{'type',1864,'constraint',[{'atom',1864,'is_subtype'}|[[{'var',1864,'Length'}|[{'type',1864,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 1875
		'spec' =
		    %% Line 1875
		    [{{'cspan',2},[{'type',1875,'bounded_fun',[{'type',1875,'fun',[{'type',1875,'product',[{'var',1875,'String'}|[{'var',1875,'Chars'}]]}|[{'var',1875,'Length'}]]}|[[{'type',1876,'constraint',[{'atom',1876,'is_subtype'}|[[{'var',1876,'String'}|[{'type',1876,'string',[]}]]]]}|[{'type',1877,'constraint',[{'atom',1877,'is_subtype'}|[[{'var',1877,'Chars'}|[{'type',1877,'string',[]}]]]]}|[{'type',1878,'constraint',[{'atom',1878,'is_subtype'}|[[{'var',1878,'Length'}|[{'type',1878,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 1893
		'spec' =
		    %% Line 1893
		    [{{'substr',2},[{'type',1893,'bounded_fun',[{'type',1893,'fun',[{'type',1893,'product',[{'var',1893,'String'}|[{'var',1893,'Start'}]]}|[{'var',1893,'SubString'}]]}|[[{'type',1894,'constraint',[{'atom',1894,'is_subtype'}|[[{'var',1894,'String'}|[{'type',1894,'string',[]}]]]]}|[{'type',1895,'constraint',[{'atom',1895,'is_subtype'}|[[{'var',1895,'SubString'}|[{'type',1895,'string',[]}]]]]}|[{'type',1896,'constraint',[{'atom',1896,'is_subtype'}|[[{'var',1896,'Start'}|[{'type',1896,'pos_integer',[]}]]]]}]]]]]}]}],
		%% Line 1903
		'spec' =
		    %% Line 1903
		    [{{'substr',3},[{'type',1903,'bounded_fun',[{'type',1903,'fun',[{'type',1903,'product',[{'var',1903,'String'}|[{'var',1903,'Start'}|[{'var',1903,'Length'}]]]}|[{'var',1903,'SubString'}]]}|[[{'type',1904,'constraint',[{'atom',1904,'is_subtype'}|[[{'var',1904,'String'}|[{'type',1904,'string',[]}]]]]}|[{'type',1905,'constraint',[{'atom',1905,'is_subtype'}|[[{'var',1905,'SubString'}|[{'type',1905,'string',[]}]]]]}|[{'type',1906,'constraint',[{'atom',1906,'is_subtype'}|[[{'var',1906,'Start'}|[{'type',1906,'pos_integer',[]}]]]]}|[{'type',1907,'constraint',[{'atom',1907,'is_subtype'}|[[{'var',1907,'Length'}|[{'type',1907,'non_neg_integer',[]}]]]]}]]]]]]}]}],
		%% Line 1921
		'spec' =
		    %% Line 1921
		    [{{'tokens',2},[{'type',1921,'bounded_fun',[{'type',1921,'fun',[{'type',1921,'product',[{'var',1921,'String'}|[{'var',1921,'SeparatorList'}]]}|[{'var',1921,'Tokens'}]]}|[[{'type',1922,'constraint',[{'atom',1922,'is_subtype'}|[[{'var',1922,'String'}|[{'type',1922,'string',[]}]]]]}|[{'type',1923,'constraint',[{'atom',1923,'is_subtype'}|[[{'var',1923,'SeparatorList'}|[{'type',1923,'string',[]}]]]]}|[{'type',1924,'constraint',[{'atom',1924,'is_subtype'}|[[{'var',1924,'Tokens'}|[{'type',1924,'list',[{'ann_type',1924,[{'var',1924,'Token'}|[{'type',1924,'nonempty_string',[]}]]}]}]]]]}]]]]]}]}],
		%% Line 1969
		'spec' =
		    %% Line 1969
		    [{{'chars',2},[{'type',1969,'bounded_fun',[{'type',1969,'fun',[{'type',1969,'product',[{'var',1969,'Character'}|[{'var',1969,'Number'}]]}|[{'var',1969,'String'}]]}|[[{'type',1970,'constraint',[{'atom',1970,'is_subtype'}|[[{'var',1970,'Character'}|[{'type',1970,'char',[]}]]]]}|[{'type',1971,'constraint',[{'atom',1971,'is_subtype'}|[[{'var',1971,'Number'}|[{'type',1971,'non_neg_integer',[]}]]]]}|[{'type',1972,'constraint',[{'atom',1972,'is_subtype'}|[[{'var',1972,'String'}|[{'type',1972,'string',[]}]]]]}]]]]]}]}],
		%% Line 1976
		'spec' =
		    %% Line 1976
		    [{{'chars',3},[{'type',1976,'bounded_fun',[{'type',1976,'fun',[{'type',1976,'product',[{'var',1976,'Character'}|[{'var',1976,'Number'}|[{'var',1976,'Tail'}]]]}|[{'var',1976,'String'}]]}|[[{'type',1977,'constraint',[{'atom',1977,'is_subtype'}|[[{'var',1977,'Character'}|[{'type',1977,'char',[]}]]]]}|[{'type',1978,'constraint',[{'atom',1978,'is_subtype'}|[[{'var',1978,'Number'}|[{'type',1978,'non_neg_integer',[]}]]]]}|[{'type',1979,'constraint',[{'atom',1979,'is_subtype'}|[[{'var',1979,'Tail'}|[{'type',1979,'string',[]}]]]]}|[{'type',1980,'constraint',[{'atom',1980,'is_subtype'}|[[{'var',1980,'String'}|[{'type',1980,'string',[]}]]]]}]]]]]]}]}],
		%% Line 1991
		'spec' =
		    %% Line 1991
		    [{{'copies',2},[{'type',1991,'bounded_fun',[{'type',1991,'fun',[{'type',1991,'product',[{'var',1991,'String'}|[{'var',1991,'Number'}]]}|[{'var',1991,'Copies'}]]}|[[{'type',1992,'constraint',[{'atom',1992,'is_subtype'}|[[{'var',1992,'String'}|[{'type',1992,'string',[]}]]]]}|[{'type',1993,'constraint',[{'atom',1993,'is_subtype'}|[[{'var',1993,'Copies'}|[{'type',1993,'string',[]}]]]]}|[{'type',1994,'constraint',[{'atom',1994,'is_subtype'}|[[{'var',1994,'Number'}|[{'type',1994,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 2006
		'spec' =
		    %% Line 2006
		    [{{'words',1},[{'type',2006,'bounded_fun',[{'type',2006,'fun',[{'type',2006,'product',[{'var',2006,'String'}]}|[{'var',2006,'Count'}]]}|[[{'type',2007,'constraint',[{'atom',2007,'is_subtype'}|[[{'var',2007,'String'}|[{'type',2007,'string',[]}]]]]}|[{'type',2008,'constraint',[{'atom',2008,'is_subtype'}|[[{'var',2008,'Count'}|[{'type',2008,'pos_integer',[]}]]]]}]]]]}]}],
		%% Line 2012
		'spec' =
		    %% Line 2012
		    [{{'words',2},[{'type',2012,'bounded_fun',[{'type',2012,'fun',[{'type',2012,'product',[{'var',2012,'String'}|[{'var',2012,'Character'}]]}|[{'var',2012,'Count'}]]}|[[{'type',2013,'constraint',[{'atom',2013,'is_subtype'}|[[{'var',2013,'String'}|[{'type',2013,'string',[]}]]]]}|[{'type',2014,'constraint',[{'atom',2014,'is_subtype'}|[[{'var',2014,'Character'}|[{'type',2014,'char',[]}]]]]}|[{'type',2015,'constraint',[{'atom',2015,'is_subtype'}|[[{'var',2015,'Count'}|[{'type',2015,'pos_integer',[]}]]]]}]]]]]}]}],
		%% Line 2026
		'spec' =
		    %% Line 2026
		    [{{'sub_word',2},[{'type',2026,'bounded_fun',[{'type',2026,'fun',[{'type',2026,'product',[{'var',2026,'String'}|[{'var',2026,'Number'}]]}|[{'var',2026,'Word'}]]}|[[{'type',2027,'constraint',[{'atom',2027,'is_subtype'}|[[{'var',2027,'String'}|[{'type',2027,'string',[]}]]]]}|[{'type',2028,'constraint',[{'atom',2028,'is_subtype'}|[[{'var',2028,'Word'}|[{'type',2028,'string',[]}]]]]}|[{'type',2029,'constraint',[{'atom',2029,'is_subtype'}|[[{'var',2029,'Number'}|[{'type',2029,'integer',[]}]]]]}]]]]]}]}],
		%% Line 2033
		'spec' =
		    %% Line 2033
		    [{{'sub_word',3},[{'type',2033,'bounded_fun',[{'type',2033,'fun',[{'type',2033,'product',[{'var',2033,'String'}|[{'var',2033,'Number'}|[{'var',2033,'Character'}]]]}|[{'var',2033,'Word'}]]}|[[{'type',2034,'constraint',[{'atom',2034,'is_subtype'}|[[{'var',2034,'String'}|[{'type',2034,'string',[]}]]]]}|[{'type',2035,'constraint',[{'atom',2035,'is_subtype'}|[[{'var',2035,'Word'}|[{'type',2035,'string',[]}]]]]}|[{'type',2036,'constraint',[{'atom',2036,'is_subtype'}|[[{'var',2036,'Number'}|[{'type',2036,'integer',[]}]]]]}|[{'type',2037,'constraint',[{'atom',2037,'is_subtype'}|[[{'var',2037,'Character'}|[{'type',2037,'char',[]}]]]]}]]]]]]}]}],
		%% Line 2057
		'spec' =
		    %% Line 2057
		    [{{'strip',1},[{'type',2057,'fun',[{'type',2057,'product',[{'type',2057,'string',[]}]}|[{'type',2057,'string',[]}]]}]}],
		%% Line 2061
		'spec' =
		    %% Line 2061
		    [{{'strip',2},[{'type',2061,'bounded_fun',[{'type',2061,'fun',[{'type',2061,'product',[{'var',2061,'String'}|[{'var',2061,'Direction'}]]}|[{'var',2061,'Stripped'}]]}|[[{'type',2062,'constraint',[{'atom',2062,'is_subtype'}|[[{'var',2062,'String'}|[{'type',2062,'string',[]}]]]]}|[{'type',2063,'constraint',[{'atom',2063,'is_subtype'}|[[{'var',2063,'Stripped'}|[{'type',2063,'string',[]}]]]]}|[{'type',2064,'constraint',[{'atom',2064,'is_subtype'}|[[{'var',2064,'Direction'}|[{'type',2064,'union',[{'atom',2064,'left'}|[{'atom',2064,'right'}|[{'atom',2064,'both'}]]]}]]]]}]]]]]}]}],
		%% Line 2071
		'spec' =
		    %% Line 2071
		    [{{'strip',3},[{'type',2071,'bounded_fun',[{'type',2071,'fun',[{'type',2071,'product',[{'var',2071,'String'}|[{'var',2071,'Direction'}|[{'var',2071,'Character'}]]]}|[{'var',2071,'Stripped'}]]}|[[{'type',2072,'constraint',[{'atom',2072,'is_subtype'}|[[{'var',2072,'String'}|[{'type',2072,'string',[]}]]]]}|[{'type',2073,'constraint',[{'atom',2073,'is_subtype'}|[[{'var',2073,'Stripped'}|[{'type',2073,'string',[]}]]]]}|[{'type',2074,'constraint',[{'atom',2074,'is_subtype'}|[[{'var',2074,'Direction'}|[{'type',2074,'union',[{'atom',2074,'left'}|[{'atom',2074,'right'}|[{'atom',2074,'both'}]]]}]]]]}|[{'type',2075,'constraint',[{'atom',2075,'is_subtype'}|[[{'var',2075,'Character'}|[{'type',2075,'char',[]}]]]]}]]]]]]}]}],
		%% Line 2099
		'spec' =
		    %% Line 2099
		    [{{'left',2},[{'type',2099,'bounded_fun',[{'type',2099,'fun',[{'type',2099,'product',[{'var',2099,'String'}|[{'var',2099,'Number'}]]}|[{'var',2099,'Left'}]]}|[[{'type',2100,'constraint',[{'atom',2100,'is_subtype'}|[[{'var',2100,'String'}|[{'type',2100,'string',[]}]]]]}|[{'type',2101,'constraint',[{'atom',2101,'is_subtype'}|[[{'var',2101,'Left'}|[{'type',2101,'string',[]}]]]]}|[{'type',2102,'constraint',[{'atom',2102,'is_subtype'}|[[{'var',2102,'Number'}|[{'type',2102,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 2106
		'spec' =
		    %% Line 2106
		    [{{'left',3},[{'type',2106,'bounded_fun',[{'type',2106,'fun',[{'type',2106,'product',[{'var',2106,'String'}|[{'var',2106,'Number'}|[{'var',2106,'Character'}]]]}|[{'var',2106,'Left'}]]}|[[{'type',2107,'constraint',[{'atom',2107,'is_subtype'}|[[{'var',2107,'String'}|[{'type',2107,'string',[]}]]]]}|[{'type',2108,'constraint',[{'atom',2108,'is_subtype'}|[[{'var',2108,'Left'}|[{'type',2108,'string',[]}]]]]}|[{'type',2109,'constraint',[{'atom',2109,'is_subtype'}|[[{'var',2109,'Number'}|[{'type',2109,'non_neg_integer',[]}]]]]}|[{'type',2110,'constraint',[{'atom',2110,'is_subtype'}|[[{'var',2110,'Character'}|[{'type',2110,'char',[]}]]]]}]]]]]]}]}],
		%% Line 2124
		'spec' =
		    %% Line 2124
		    [{{'right',2},[{'type',2124,'bounded_fun',[{'type',2124,'fun',[{'type',2124,'product',[{'var',2124,'String'}|[{'var',2124,'Number'}]]}|[{'var',2124,'Right'}]]}|[[{'type',2125,'constraint',[{'atom',2125,'is_subtype'}|[[{'var',2125,'String'}|[{'type',2125,'string',[]}]]]]}|[{'type',2126,'constraint',[{'atom',2126,'is_subtype'}|[[{'var',2126,'Right'}|[{'type',2126,'string',[]}]]]]}|[{'type',2127,'constraint',[{'atom',2127,'is_subtype'}|[[{'var',2127,'Number'}|[{'type',2127,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 2131
		'spec' =
		    %% Line 2131
		    [{{'right',3},[{'type',2131,'bounded_fun',[{'type',2131,'fun',[{'type',2131,'product',[{'var',2131,'String'}|[{'var',2131,'Number'}|[{'var',2131,'Character'}]]]}|[{'var',2131,'Right'}]]}|[[{'type',2132,'constraint',[{'atom',2132,'is_subtype'}|[[{'var',2132,'String'}|[{'type',2132,'string',[]}]]]]}|[{'type',2133,'constraint',[{'atom',2133,'is_subtype'}|[[{'var',2133,'Right'}|[{'type',2133,'string',[]}]]]]}|[{'type',2134,'constraint',[{'atom',2134,'is_subtype'}|[[{'var',2134,'Number'}|[{'type',2134,'non_neg_integer',[]}]]]]}|[{'type',2135,'constraint',[{'atom',2135,'is_subtype'}|[[{'var',2135,'Character'}|[{'type',2135,'char',[]}]]]]}]]]]]]}]}],
		%% Line 2149
		'spec' =
		    %% Line 2149
		    [{{'centre',2},[{'type',2149,'bounded_fun',[{'type',2149,'fun',[{'type',2149,'product',[{'var',2149,'String'}|[{'var',2149,'Number'}]]}|[{'var',2149,'Centered'}]]}|[[{'type',2150,'constraint',[{'atom',2150,'is_subtype'}|[[{'var',2150,'String'}|[{'type',2150,'string',[]}]]]]}|[{'type',2151,'constraint',[{'atom',2151,'is_subtype'}|[[{'var',2151,'Centered'}|[{'type',2151,'string',[]}]]]]}|[{'type',2152,'constraint',[{'atom',2152,'is_subtype'}|[[{'var',2152,'Number'}|[{'type',2152,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 2156
		'spec' =
		    %% Line 2156
		    [{{'centre',3},[{'type',2156,'bounded_fun',[{'type',2156,'fun',[{'type',2156,'product',[{'var',2156,'String'}|[{'var',2156,'Number'}|[{'var',2156,'Character'}]]]}|[{'var',2156,'Centered'}]]}|[[{'type',2157,'constraint',[{'atom',2157,'is_subtype'}|[[{'var',2157,'String'}|[{'type',2157,'string',[]}]]]]}|[{'type',2158,'constraint',[{'atom',2158,'is_subtype'}|[[{'var',2158,'Centered'}|[{'type',2158,'string',[]}]]]]}|[{'type',2159,'constraint',[{'atom',2159,'is_subtype'}|[[{'var',2159,'Number'}|[{'type',2159,'non_neg_integer',[]}]]]]}|[{'type',2160,'constraint',[{'atom',2160,'is_subtype'}|[[{'var',2160,'Character'}|[{'type',2160,'char',[]}]]]]}]]]]]]}]}],
		%% Line 2176
		'spec' =
		    %% Line 2176
		    [{{'sub_string',2},[{'type',2176,'bounded_fun',[{'type',2176,'fun',[{'type',2176,'product',[{'var',2176,'String'}|[{'var',2176,'Start'}]]}|[{'var',2176,'SubString'}]]}|[[{'type',2177,'constraint',[{'atom',2177,'is_subtype'}|[[{'var',2177,'String'}|[{'type',2177,'string',[]}]]]]}|[{'type',2178,'constraint',[{'atom',2178,'is_subtype'}|[[{'var',2178,'SubString'}|[{'type',2178,'string',[]}]]]]}|[{'type',2179,'constraint',[{'atom',2179,'is_subtype'}|[[{'var',2179,'Start'}|[{'type',2179,'pos_integer',[]}]]]]}]]]]]}]}],
		%% Line 2183
		'spec' =
		    %% Line 2183
		    [{{'sub_string',3},[{'type',2183,'bounded_fun',[{'type',2183,'fun',[{'type',2183,'product',[{'var',2183,'String'}|[{'var',2183,'Start'}|[{'var',2183,'Stop'}]]]}|[{'var',2183,'SubString'}]]}|[[{'type',2184,'constraint',[{'atom',2184,'is_subtype'}|[[{'var',2184,'String'}|[{'type',2184,'string',[]}]]]]}|[{'type',2185,'constraint',[{'atom',2185,'is_subtype'}|[[{'var',2185,'SubString'}|[{'type',2185,'string',[]}]]]]}|[{'type',2186,'constraint',[{'atom',2186,'is_subtype'}|[[{'var',2186,'Start'}|[{'type',2186,'pos_integer',[]}]]]]}|[{'type',2187,'constraint',[{'atom',2187,'is_subtype'}|[[{'var',2187,'Stop'}|[{'type',2187,'pos_integer',[]}]]]]}]]]]]]}]}],
		%% Line 2212
		'spec' =
		    %% Line 2212
		    [{{'to_lower',1},[{'type',2212,'bounded_fun',[{'type',2212,'fun',[{'type',2212,'product',[{'var',2212,'String'}]}|[{'var',2212,'Result'}]]}|[[{'type',2213,'constraint',[{'atom',2213,'is_subtype'}|[[{'var',2213,'String'}|[{'remote_type',2213,[{'atom',2213,'io_lib'}|[{'atom',2213,'latin1_string'}|[[]]]]}]]]]}|[{'type',2214,'constraint',[{'atom',2214,'is_subtype'}|[[{'var',2214,'Result'}|[{'remote_type',2214,[{'atom',2214,'io_lib'}|[{'atom',2214,'latin1_string'}|[[]]]]}]]]]}]]]]}|[{'type',2215,'bounded_fun',[{'type',2215,'fun',[{'type',2215,'product',[{'var',2215,'Char'}]}|[{'var',2215,'CharResult'}]]}|[[{'type',2216,'constraint',[{'atom',2216,'is_subtype'}|[[{'var',2216,'Char'}|[{'type',2216,'char',[]}]]]]}|[{'type',2217,'constraint',[{'atom',2217,'is_subtype'}|[[{'var',2217,'CharResult'}|[{'type',2217,'char',[]}]]]]}]]]]}]]}],
		%% Line 2224
		'spec' =
		    %% Line 2224
		    [{{'to_upper',1},[{'type',2224,'bounded_fun',[{'type',2224,'fun',[{'type',2224,'product',[{'var',2224,'String'}]}|[{'var',2224,'Result'}]]}|[[{'type',2225,'constraint',[{'atom',2225,'is_subtype'}|[[{'var',2225,'String'}|[{'remote_type',2225,[{'atom',2225,'io_lib'}|[{'atom',2225,'latin1_string'}|[[]]]]}]]]]}|[{'type',2226,'constraint',[{'atom',2226,'is_subtype'}|[[{'var',2226,'Result'}|[{'remote_type',2226,[{'atom',2226,'io_lib'}|[{'atom',2226,'latin1_string'}|[[]]]]}]]]]}]]]]}|[{'type',2227,'bounded_fun',[{'type',2227,'fun',[{'type',2227,'product',[{'var',2227,'Char'}]}|[{'var',2227,'CharResult'}]]}|[[{'type',2228,'constraint',[{'atom',2228,'is_subtype'}|[[{'var',2228,'Char'}|[{'type',2228,'char',[]}]]]]}|[{'type',2229,'constraint',[{'atom',2229,'is_subtype'}|[[{'var',2229,'CharResult'}|[{'type',2229,'char',[]}]]]]}]]]]}]]}],
		%% Line 2236
		'spec' =
		    %% Line 2236
		    [{{'join',2},[{'type',2236,'bounded_fun',[{'type',2236,'fun',[{'type',2236,'product',[{'var',2236,'StringList'}|[{'var',2236,'Separator'}]]}|[{'var',2236,'String'}]]}|[[{'type',2237,'constraint',[{'atom',2237,'is_subtype'}|[[{'var',2237,'StringList'}|[{'type',2237,'list',[{'type',2237,'string',[]}]}]]]]}|[{'type',2238,'constraint',[{'atom',2238,'is_subtype'}|[[{'var',2238,'Separator'}|[{'type',2238,'string',[]}]]]]}|[{'type',2239,'constraint',[{'atom',2239,'is_subtype'}|[[{'var',2239,'String'}|[{'type',2239,'string',[]}]]]]}]]]]]}]}]]
'list_to_float'/1 =
    %% Line 98
    fun (_0) ->
	%% Line 99
	call 'erlang':'nif_error'
	    ('undef')
'list_to_integer'/1 =
    %% Line 107
    fun (_0) ->
	%% Line 108
	call 'erlang':'nif_error'
	    ('undef')
'is_empty'/1 =
    %% Line 114
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      'true'
	  %% Line 115
	  <#{}#> when 'true' ->
	      'true'
	  %% Line 116
	  <[L|R]> when 'true' ->
	      ( case apply 'is_empty'/1
			 (L) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'is_empty'/1
			    (R)
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_1> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_1}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 117
	  <_4> when 'true' ->
	      'false'
	end
'length'/1 =
    %% Line 121
    fun (_0) ->
	case _0 of
	  <#{#<CP1>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Bin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 122
	      apply 'length_b'/3
		  (Bin, CP1, 0)
	  %% Line 123
	  <CD> when 'true' ->
	      %% Line 124
	      apply 'length_1'/2
		  (CD, 0)
	end
'to_graphemes'/1 =
    %% Line 128
    fun (_0) ->
	%% Line 129
	case call 'unicode_util':'gc'
		 (_0) of
	  %% Line 130
	  <[GC|CD]> when 'true' ->
	      let <_1> =
		  apply 'to_graphemes'/1
		      (CD)
	      in  [GC|_1]
	  %% Line 131
	  <[]> when 'true' ->
	      []
	  %% Line 132
	  <{'error',Err}> when 'true' ->
	      call 'erlang':'error'
		  ({'badarg',Err})
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_2})
	    -| ['compiler_generated'] )
	end
'equal'/2 =
    %% Line 140
    fun (_0,_1) ->
	case <_0,_1> of
	  <A,B>
	      when let <_2> =
		    call 'erlang':'is_binary'
			(A)
		in  let <_3> =
			call 'erlang':'is_binary'
			    (B)
		    in  call 'erlang':'and'
			    (_2, _3) ->
	      %% Line 141
	      call 'erlang':'=:='
		  (A, B)
	  %% Line 142
	  <A,B> when 'true' ->
	      %% Line 143
	      apply 'equal_1'/2
		  (A, B)
	end
'equal'/3 =
    %% Line 152
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <A,B,'false'> when 'true' ->
	      %% Line 153
	      apply 'equal'/2
		  (A, B)
	  %% Line 154
	  <A,B,'true'> when 'true' ->
	      %% Line 155
	      apply 'equal_nocase'/2
		  (A, B)
	  ( <_5,_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4,_3})
		  -| [{'function_name',{'equal',3}}] )
	    -| ['compiler_generated'] )
	end
'equal'/4 =
    %% Line 164
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <A,B,Case,'none'> when 'true' ->
	      %% Line 165
	      apply 'equal'/3
		  (A, B, Case)
	  %% Line 166
	  <A,B,'false',Norm> when 'true' ->
	      %% Line 167
	      apply 'equal_norm'/3
		  (A, B, Norm)
	  %% Line 168
	  <A,B,'true',Norm> when 'true' ->
	      %% Line 169
	      apply 'equal_norm_nocase'/3
		  (A, B, Norm)
	  ( <_7,_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5,_4})
		  -| [{'function_name',{'equal',4}}] )
	    -| ['compiler_generated'] )
	end
'reverse'/1 =
    %% Line 173
    fun (_0) ->
	case _0 of
	  <#{#<CP1>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 174
	      apply 'reverse_b'/3
		  (Rest, CP1, [])
	  %% Line 175
	  <CD> when 'true' ->
	      %% Line 176
	      apply 'reverse_1'/2
		  (CD, [])
	end
'slice'/2 =
    %% Line 184
    fun (_0,_1) ->
	case <_0,_1> of
	  <CD,N>
	      when let <_2> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_3> =
			call 'erlang':'>='
			    (N, 0)
		    in  call 'erlang':'and'
			    (_2, _3) ->
	      %% Line 185
	      case apply 'slice_l0'/2
		       (CD, N) of
		%% Line 186
		<[]>
		    when call 'erlang':'is_binary'
			  (CD) ->
		    #{}#
		%% Line 187
		<Res> when 'true' ->
		    Res
	      end
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'slice',2}}] )
	    -| ['compiler_generated'] )
	end
'slice'/3 =
    %% Line 195
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <CD,N,Length>
	      when %% Line 196
		try
		    let <_3> =
			call 'erlang':'is_integer'
			    (N)
		    in  let <_4> =
			    call 'erlang':'>='
				(N, 0)
			in  let <_5> =
				call 'erlang':'is_integer'
				    (Length)
			    in  let <_6> =
				    call 'erlang':'>'
					(Length, 0)
				in  let <_7> =
					call 'erlang':'and'
					    (_5, _6)
				    in  let <_8> =
					    call 'erlang':'and'
						(_4, _7)
					in  call 'erlang':'and'
						(_3, _8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 197
	      case apply 'slice_l0'/2
		       (CD, N) of
		%% Line 198
		<[]>
		    when call 'erlang':'is_binary'
			  (CD) ->
		    #{}#
		%% Line 199
		<L> when 'true' ->
		    apply 'slice_trail'/2
			(L, Length)
	      end
	  %% Line 201
	  <CD,N,'infinity'> when 'true' ->
	      %% Line 202
	      case apply 'slice_l0'/2
		       (CD, N) of
		%% Line 203
		<[]>
		    when call 'erlang':'is_binary'
			  (CD) ->
		    #{}#
		%% Line 204
		<Res> when 'true' ->
		    Res
	      end
	  %% Line 206
	  <CD,_15,0> when 'true' ->
	      %% Line 207
	      case <> of
		%% Line 208
		<>
		    when call 'erlang':'is_binary'
			  (CD) ->
		    #{}#
		%% Line 209
		<> when 'true' ->
		    []
	      end
	  ( <_14,_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13,_12})
		  -| [{'function_name',{'slice',3}}] )
	    -| ['compiler_generated'] )
	end
'pad'/2 =
    %% Line 216
    fun (_0,_1) ->
	%% Line 217
	apply 'pad'/4
	    (_0, _1, 'trailing', 32)
'pad'/3 =
    %% Line 223
    fun (_0,_1,_2) ->
	%% Line 224
	apply 'pad'/4
	    (_0, _1, _2, 32)
'pad'/4 =
    %% Line 231
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <CD,Length,'leading',Char>
	      when call 'erlang':'is_integer'
		    (Length) ->
	      let <Len> =
		  apply %% Line 232
			'length'/1
		      (%% Line 232
		       CD)
	      in  let <_5> =
		      call %% Line 233
			   'erlang':%% Line 233
				    '-'
			  (%% Line 233
			   Length, %% Line 233
				   Len)
		  in  let <_6> =
			  call %% Line 233
			       'erlang':%% Line 233
					'max'
			      (%% Line 233
			       0, _5)
		      in  let <_7> =
			      call %% Line 233
				   'lists':%% Line 233
					   'duplicate'
				  (_6, %% Line 233
				       Char)
			  in  %% Line 233
			      [_7|[CD|[]]]
	  %% Line 234
	  <CD,Length,'trailing',Char>
	      when call 'erlang':'is_integer'
		    (Length) ->
	      let <Len> =
		  apply %% Line 235
			'length'/1
		      (%% Line 235
		       CD)
	      in  let <_9> =
		      call %% Line 236
			   'erlang':%% Line 236
				    '-'
			  (%% Line 236
			   Length, %% Line 236
				   Len)
		  in  let <_10> =
			  call %% Line 236
			       'erlang':%% Line 236
					'max'
			      (%% Line 236
			       0, _9)
		      in  let <_11> =
			      call %% Line 236
				   'lists':%% Line 236
					   'duplicate'
				  (_10, %% Line 236
					Char)
			  in  %% Line 236
			      [CD|_11]
	  %% Line 237
	  <CD,Length,'both',Char>
	      when call 'erlang':'is_integer'
		    (Length) ->
	      let <Len> =
		  apply %% Line 238
			'length'/1
		      (%% Line 238
		       CD)
	      in  let <_13> =
		      call %% Line 239
			   'erlang':%% Line 239
				    '-'
			  (%% Line 239
			   Length, %% Line 239
				   Len)
		  in  let <Size> =
			  call %% Line 239
			       'erlang':%% Line 239
					'max'
			      (%% Line 239
			       0, _13)
		      in  let <_15> =
			      call %% Line 240
				   'erlang':%% Line 240
					    'div'
				  (%% Line 240
				   Size, %% Line 240
					 2)
			  in  let <Pre> =
				  call %% Line 240
				       'lists':%% Line 240
					       'duplicate'
				      (_15, %% Line 240
					    Char)
			      in  let <_18> =
				      case %% Line 241
					   call 'erlang':'rem'
					       (Size, 2) of
					%% Line 242
					<1> when 'true' ->
					    [Char|[]]
					%% Line 243
					<_24> when 'true' ->
					    []
				      end
				  in  %% Line 245
				      [Pre|[CD|[Pre|_18]]]
	  ( <_23,_22,_21,_20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_23,_22,_21,_20})
		  -| [{'function_name',{'pad',4}}] )
	    -| ['compiler_generated'] )
	end
'trim'/1 =
    %% Line 250
    fun (_0) ->
	let <_1> =
	    call %% Line 251
		 'unicode_util':%% Line 251
				'whitespace'
		()
	in  %% Line 251
	    apply 'trim'/3
		(_0, 'both', _1)
'trim'/2 =
    %% Line 256
    fun (_0,_1) ->
	let <_2> =
	    call %% Line 257
		 'unicode_util':%% Line 257
				'whitespace'
		()
	in  %% Line 257
	    apply 'trim'/3
		(_0, _1, _2)
'trim'/3 =
    %% Line 263
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Str,_12,[]> when 'true' ->
	      Str
	  %% Line 264
	  <Str,'leading',[Sep|[]]>
	      when let <_3> =
		    call 'erlang':'is_list'
			(Str)
		in  let <_4> =
			call 'erlang':'<'
			    (Sep, 256)
		    in  call 'erlang':'and'
			    (_3, _4) ->
	      %% Line 265
	      apply 'trim_ls'/2
		  (Str, Sep)
	  %% Line 266
	  <Str,'leading',Sep>
	      when call 'erlang':'is_list'
		    (Sep) ->
	      %% Line 267
	      apply 'trim_l'/2
		  (Str, Sep)
	  %% Line 268
	  <Str,'trailing',[Sep|[]]>
	      when let <_5> =
		    call 'erlang':'is_list'
			(Str)
		in  let <_6> =
			call 'erlang':'<'
			    (Sep, 256)
		    in  call 'erlang':'and'
			    (_5, _6) ->
	      %% Line 269
	      apply 'trim_ts'/2
		  (Str, Sep)
	  %% Line 270
	  <Str,'trailing',Seps0>
	      when call 'erlang':'is_list'
		    (Seps0) ->
	      let <Seps> =
		  apply %% Line 271
			'search_pattern'/1
		      (%% Line 271
		       Seps0)
	      in  %% Line 272
		  apply 'trim_t'/3
		      (Str, 0, Seps)
	  %% Line 273
	  <Str,'both',Sep>
	      when call 'erlang':'is_list'
		    (Sep) ->
	      let <_8> =
		  apply %% Line 274
			'trim'/3
		      (%% Line 274
		       Str, %% Line 274
			    'leading', %% Line 274
				       Sep)
	      in  %% Line 274
		  apply 'trim'/3
		      (_8, 'trailing', Sep)
	  ( <_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9})
		  -| [{'function_name',{'trim',3}}] )
	    -| ['compiler_generated'] )
	end
'chomp'/1 =
    %% Line 278
    fun (_0) ->
	%% Line 279
	apply 'trim'/3
	    (_0, 'trailing', [[13|[10]]|[10]])
'take'/2 =
    %% Line 287
    fun (_0,_1) ->
	%% Line 288
	apply 'take'/4
	    (_0, _1, 'false', 'leading')
'take'/3 =
    %% Line 295
    fun (_0,_1,_2) ->
	%% Line 296
	apply 'take'/4
	    (_0, _1, _2, 'leading')
'take'/4 =
    %% Line 304
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Str,[],Complement,Dir> when 'true' ->
	      let <_5> =
		  case <> of
		    %% Line 305
		    <>
			when call 'erlang':'is_binary'
			      (Str) ->
			#{}#
		    %% Line 305
		    <> when 'true' ->
			[]
		  end
	      in  %% Line 306
		  case <Complement,Dir> of
		    %% Line 307
		    <'false','leading'> when 'true' ->
			{_5,Str}
		    %% Line 308
		    <'false','trailing'> when 'true' ->
			{Str,_5}
		    %% Line 309
		    <'true','leading'> when 'true' ->
			{Str,_5}
		    %% Line 310
		    <'true','trailing'> when 'true' ->
			{_5,Str}
		    ( <( _15
			 -| ['compiler_generated'] ),( _16
						       -| ['compiler_generated'] )> when 'true' ->
			  let <_7> = {( _15
				 -| ['compiler_generated'] ),( _16
							       -| ['compiler_generated'] )}
			  in  primop 'match_fail'
				  ({'case_clause',_7})
		      -| ['compiler_generated'] )
		  end
	  %% Line 312
	  <Str,Sep,'false','leading'> when 'true' ->
	      %% Line 313
	      apply 'take_l'/3
		  (Str, Sep, [])
	  %% Line 314
	  <Str,Sep0,'true','leading'> when 'true' ->
	      let <Sep> =
		  apply %% Line 315
			'search_pattern'/1
		      (%% Line 315
		       Sep0)
	      in  %% Line 316
		  apply 'take_lc'/3
		      (Str, Sep, [])
	  %% Line 317
	  <Str,Sep0,'false','trailing'> when 'true' ->
	      let <Sep> =
		  apply %% Line 318
			'search_pattern'/1
		      (%% Line 318
		       Sep0)
	      in  %% Line 319
		  apply 'take_t'/3
		      (Str, 0, Sep)
	  %% Line 320
	  <Str,Sep0,'true','trailing'> when 'true' ->
	      let <Sep> =
		  apply %% Line 321
			'search_pattern'/1
		      (%% Line 321
		       Sep0)
	      in  %% Line 322
		  apply 'take_tc'/3
		      (Str, 0, Sep)
	  ( <_14,_13,_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13,_12,_11})
		  -| [{'function_name',{'take',4}}] )
	    -| ['compiler_generated'] )
	end
'uppercase'/1 =
    %% Line 326
    fun (_0) ->
	case _0 of
	  <CD>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 327
	      try
		  apply 'uppercase_list'/2
		      (CD, 'false')
	      of <_1> ->
		  _1
	      catch <_4,_3,_2> ->
		  %% Line 328
		  case <_4,_3,_2> of
		    <( 'throw'
		       -| ['compiler_generated'] ),( 'unchanged'
						     -| ['compiler_generated'] ),_11> when 'true' ->
			CD
		    ( <_13,_14,_15> when 'true' ->
			  primop 'raise'
			      (_15, _14)
		      -| ['compiler_generated'] )
		  end
	  %% Line 330
	  <Orig = #{#<CP1>('undefined','undefined','utf8',['unsigned'|['big']]),
		    #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 331
	      try
		  apply 'uppercase_bin'/3
		      (CP1, Rest, 'false')
	      of <_5> ->
		  %% Line 332
		  call 'unicode':'characters_to_binary'
		      (_5)
	      catch <_9,_8,_7> ->
		  %% Line 333
		  case <_9,_8,_7> of
		    <( 'throw'
		       -| ['compiler_generated'] ),( 'unchanged'
						     -| ['compiler_generated'] ),_12> when 'true' ->
			Orig
		    ( <_17,_18,_19> when 'true' ->
			  primop 'raise'
			      (_19, _18)
		      -| ['compiler_generated'] )
		  end
	  %% Line 335
	  <#{}#> when 'true' ->
	      %% Line 336
	      #{}#
	  %% Line 337
	  <Bin> when 'true' ->
	      %% Line 338
	      call 'erlang':'error'
		  ({'badarg',Bin})
	end
'lowercase'/1 =
    %% Line 343
    fun (_0) ->
	case _0 of
	  <CD>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 344
	      try
		  apply 'lowercase_list'/2
		      (CD, 'false')
	      of <_1> ->
		  _1
	      catch <_4,_3,_2> ->
		  %% Line 345
		  case <_4,_3,_2> of
		    <( 'throw'
		       -| ['compiler_generated'] ),( 'unchanged'
						     -| ['compiler_generated'] ),_11> when 'true' ->
			CD
		    ( <_13,_14,_15> when 'true' ->
			  primop 'raise'
			      (_15, _14)
		      -| ['compiler_generated'] )
		  end
	  %% Line 347
	  <Orig = #{#<CP1>('undefined','undefined','utf8',['unsigned'|['big']]),
		    #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 348
	      try
		  apply 'lowercase_bin'/3
		      (CP1, Rest, 'false')
	      of <_5> ->
		  %% Line 349
		  call 'unicode':'characters_to_binary'
		      (_5)
	      catch <_9,_8,_7> ->
		  %% Line 350
		  case <_9,_8,_7> of
		    <( 'throw'
		       -| ['compiler_generated'] ),( 'unchanged'
						     -| ['compiler_generated'] ),_12> when 'true' ->
			Orig
		    ( <_17,_18,_19> when 'true' ->
			  primop 'raise'
			      (_19, _18)
		      -| ['compiler_generated'] )
		  end
	  %% Line 352
	  <#{}#> when 'true' ->
	      %% Line 353
	      #{}#
	  %% Line 354
	  <Bin> when 'true' ->
	      %% Line 355
	      call 'erlang':'error'
		  ({'badarg',Bin})
	end
'titlecase'/1 =
    %% Line 360
    fun (_0) ->
	case _0 of
	  <CD>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 361
	      case call 'unicode_util':'titlecase'
		       (CD) of
		%% Line 362
		<[GC|Tail]> when 'true' ->
		    %% Line 1541
		    ( case <GC,Tail> of
			( <Char,( #{}#
				  -| ['compiler_generated'] )>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'is_integer'
								       -| ['compiler_generated'] )
				      (Char)
				  -| ['compiler_generated'] ) ->
			      ( [Char|( []
					-| ['compiler_generated'] )]
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 1542
			( <Char,( #{}#
				  -| ['compiler_generated'] )>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'is_list'
								       -| ['compiler_generated'] )
				      (Char)
				  -| ['compiler_generated'] ) ->
			      Char
			  -| ['compiler_generated'] )
			%% Line 1543
			( <Char,Bin>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'is_binary'
								       -| ['compiler_generated'] )
				      (Bin)
				  -| ['compiler_generated'] ) ->
			      ( [Char|( [Bin|( []
					       -| ['compiler_generated'] )]
					-| ['compiler_generated'] )]
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 1544
			( <Char,Str>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'is_integer'
								       -| ['compiler_generated'] )
				      (Char)
				  -| ['compiler_generated'] ) ->
			      ( [Char|Str]
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 1545
			( <_11,Str>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'is_list'
								       -| ['compiler_generated'] )
				      (_11)
				  -| ['compiler_generated'] ) ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '++'
								     -| ['compiler_generated'] )
				    (_11, Str)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			( <_3,_2> when ( 'true'
					 -| ['compiler_generated'] ) ->
			      ( primop ( 'match_fail'
					 -| ['compiler_generated'] )
				    (( {( 'function_clause'
					  -| ['compiler_generated'] ),_3,_2}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 363
		<Empty> when 'true' ->
		    Empty
	      end
	  %% Line 365
	  <CD>
	      when call 'erlang':'is_binary'
		    (_0) ->
	      %% Line 366
	      case call 'unicode_util':'titlecase'
		       (CD) of
		%% Line 367
		<[CP|Chars]>
		    when call 'erlang':'is_integer'
			  (CP) ->
		    #{#<CP>('undefined','undefined','utf8',['unsigned'|['big']]),
		      #<Chars>('all',8,'binary',['unsigned'|['big']])}#
		%% Line 368
		<[CPs|Chars]> when 'true' ->
		    let <_2> =
			primop 'bs_init_writable'
			    (256)
		    in  let <_7> =
			    letrec
				'lbc$^0'/2 =
				    %% Line 369
				    fun (_6,_5) ->
					case <_6,_5> of
					  <[CP|_4],_12> when 'true' ->
					      let <_13> =
						  #{#<_12>('all',1,'binary',['unsigned'|['big']]),
						    #<CP>('undefined','undefined','utf8',['unsigned'|['big']])}#
					      in  apply 'lbc$^0'/2
						      (_4, _13)
					  <[],_14> when 'true' ->
					      _14
					  ( <_15,_16> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_15,_16})
						  -| [{'function_name',{'lbc$^0',2}}] )
					    -| ['compiler_generated'] )
					end
			    in  %% Line 369
				apply 'lbc$^0'/2
				    (CPs, _2)
			in  %% Line 369
			    #{#<_7>('all',8,'binary',['unsigned'|['big']]),
			      #<Chars>('all',8,'binary',['unsigned'|['big']])}#
		%% Line 370
		<[]> when 'true' ->
		    #{}#
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_8})
		  -| ['compiler_generated'] )
	      end
	  ( <_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9})
		  -| [{'function_name',{'titlecase',1}}] )
	    -| ['compiler_generated'] )
	end
'casefold'/1 =
    %% Line 375
    fun (_0) ->
	case _0 of
	  <CD>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 376
	      try
		  apply 'casefold_list'/2
		      (CD, 'false')
	      of <_1> ->
		  _1
	      catch <_4,_3,_2> ->
		  %% Line 377
		  case <_4,_3,_2> of
		    <( 'throw'
		       -| ['compiler_generated'] ),( 'unchanged'
						     -| ['compiler_generated'] ),_11> when 'true' ->
			CD
		    ( <_13,_14,_15> when 'true' ->
			  primop 'raise'
			      (_15, _14)
		      -| ['compiler_generated'] )
		  end
	  %% Line 379
	  <Orig = #{#<CP1>('undefined','undefined','utf8',['unsigned'|['big']]),
		    #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 380
	      try
		  apply 'casefold_bin'/3
		      (CP1, Rest, 'false')
	      of <_5> ->
		  %% Line 381
		  call 'unicode':'characters_to_binary'
		      (_5)
	      catch <_9,_8,_7> ->
		  %% Line 382
		  case <_9,_8,_7> of
		    <( 'throw'
		       -| ['compiler_generated'] ),( 'unchanged'
						     -| ['compiler_generated'] ),_12> when 'true' ->
			Orig
		    ( <_17,_18,_19> when 'true' ->
			  primop 'raise'
			      (_19, _18)
		      -| ['compiler_generated'] )
		  end
	  %% Line 384
	  <#{}#> when 'true' ->
	      %% Line 385
	      #{}#
	  %% Line 386
	  <Bin> when 'true' ->
	      %% Line 387
	      call 'erlang':'error'
		  ({'badarg',Bin})
	end
'to_integer'/1 =
    %% Line 395
    fun (_0) ->
	%% Line 396
	try
	    apply 'take'/2
		(_0, [43|[45|[48|[49|[50|[51|[52|[53|[54|[55|[56|[57]]]]]]]]]]]])
	of <_1> ->
	    case _1 of
	      %% Line 397
	      <{Head,Tail}> when 'true' ->
		  %% Line 398
		  case apply 'is_empty'/1
			   (Head) of
		    %% Line 399
		    <'true'> when 'true' ->
			{'error','no_integer'}
		    %% Line 400
		    <'false'> when 'true' ->
			let <List> =
			    call %% Line 401
				 'unicode':%% Line 401
					   'characters_to_list'
				(%% Line 401
				 Head)
			in  %% Line 402
			    case call 'string':'list_to_integer'
				     (List) of
			      %% Line 403
			      <Err = {'error',_10}> when 'true' ->
				  Err
			      %% Line 404
			      <{Int,Rest}> when 'true' ->
				  %% Line 405
				  apply 'to_number'/5
				      (_0, Int, Rest, List, Tail)
			      ( <_3> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_3})
				-| ['compiler_generated'] )
			    end
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_4})
		      -| ['compiler_generated'] )
		  end
	      ( <_5> when 'true' ->
		    primop 'match_fail'
			({'try_clause',_5})
		-| ['compiler_generated'] )
	    end
	catch <_8,_7,_6> ->
	    %% Line 408
	    {'error','badarg'}
'to_float'/1 =
    %% Line 417
    fun (_0) ->
	%% Line 418
	try
	    apply 'take'/2
		(_0, [43|[45|[48|[49|[50|[51|[52|[53|[54|[55|[56|[57|[101|[69|[46|[44]]]]]]]]]]]]]]]])
	of <_1> ->
	    case _1 of
	      %% Line 419
	      <{Head,Tail}> when 'true' ->
		  %% Line 420
		  case apply 'is_empty'/1
			   (Head) of
		    %% Line 421
		    <'true'> when 'true' ->
			{'error','no_float'}
		    %% Line 422
		    <'false'> when 'true' ->
			let <List> =
			    call %% Line 423
				 'unicode':%% Line 423
					   'characters_to_list'
				(%% Line 423
				 Head)
			in  %% Line 424
			    case call 'string':'list_to_float'
				     (List) of
			      %% Line 425
			      <Err = {'error',_10}> when 'true' ->
				  Err
			      %% Line 426
			      <{Float,Rest}> when 'true' ->
				  %% Line 427
				  apply 'to_number'/5
				      (_0, Float, Rest, List, Tail)
			      ( <_3> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_3})
				-| ['compiler_generated'] )
			    end
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_4})
		      -| ['compiler_generated'] )
		  end
	      ( <_5> when 'true' ->
		    primop 'match_fail'
			({'try_clause',_5})
		-| ['compiler_generated'] )
	    end
	catch <_8,_7,_6> ->
	    %% Line 430
	    {'error','badarg'}
'to_number'/5 =
    %% Line 433
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <String,Number,Rest,List,_X_Tail>
	      when call 'erlang':'is_binary'
		    (String) ->
	      let <_6> =
		  call %% Line 434
		       'erlang':%% Line 434
				'length'
		      (%% Line 434
		       List)
	      in  let <_5> =
		      call %% Line 434
			   'erlang':%% Line 434
				    'length'
			  (%% Line 434
			   Rest)
		  in  let <BSz> =
			  call %% Line 434
			       'erlang':%% Line 434
					'-'
			      (_6, _5)
		      in  %% Line 435
			  case String of
			    <#{#<_15>(BSz,8,'binary',['unsigned'|['big']]),
			       #<Cont>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				%% Line 436
				{Number,Cont}
			    ( <_8> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_8})
			      -| ['compiler_generated'] )
			  end
	  %% Line 437
	  <_16,Number,Rest,_17,Tail> when 'true' ->
	      let <_9> =
		  apply %% Line 438
			'concat'/2
		      (%% Line 438
		       Rest, %% Line 438
			     Tail)
	      in  %% Line 438
		  {Number,_9}
	end
'prefix'/2 =
    %% Line 443
    fun (_0,_1) ->
	let <_3> =
	    case %% Line 444
		 call 'unicode':'characters_to_list'
		     (_1) of
	      %% Line 445
	      <[]> when 'true' ->
		  _0
	      %% Line 446
	      <Prefix> when 'true' ->
		  apply 'prefix_1'/2
		      (_0, Prefix)
	    end
	in  %% Line 448
	    case _3 of
	      %% Line 449
	      <[]>
		  when call 'erlang':'is_binary'
			(_0) ->
		  #{}#
	      %% Line 450
	      <Res> when 'true' ->
		  Res
	    end
'split'/2 =
    %% Line 457
    fun (_0,_1) ->
	%% Line 458
	apply 'split'/3
	    (_0, _1, 'leading')
'split'/3 =
    %% Line 465
    fun (_0,_1,_2) ->
	%% Line 466
	case apply 'is_empty'/1
		 (_1) of
	  %% Line 467
	  <'true'> when 'true' ->
	      [_0|[]]
	  %% Line 468
	  <'false'> when 'true' ->
	      let <SearchPatternCPs> =
		  call %% Line 469
		       'unicode':%% Line 469
				 'characters_to_list'
		      (_1)
	      in  %% Line 470
		  case apply 'split_1'/6
			   (_0, SearchPatternCPs, 0, _2, [], []) of
		    %% Line 471
		    <{_X_Curr,[]}> when 'true' ->
			[_0|[]]
		    %% Line 472
		    <{_X_Curr,Acc}>
			when call 'erlang':'=:='
			      (_2,
			       'trailing') ->
			Acc
		    %% Line 473
		    <{Curr,Acc}>
			when call 'erlang':'=:='
			      (_2,
			       'all') ->
			call 'lists':'reverse'
			    ([Curr|Acc])
		    %% Line 474
		    <Acc>
			when call 'erlang':'is_list'
			      (Acc) ->
			Acc
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_4})
		      -| ['compiler_generated'] )
		  end
	  ( <_5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_5})
	    -| ['compiler_generated'] )
	end
'replace'/3 =
    %% Line 484
    fun (_0,_1,_2) ->
	let <_3> =
	    apply %% Line 485
		  'split'/2
		(_0, _1)
	in  %% Line 485
	    call 'lists':'join'
		(_2, _3)
'replace'/4 =
    %% Line 494
    fun (_0,_1,_2,_3) ->
	let <_4> =
	    apply %% Line 495
		  'split'/3
		(_0, _1, _3)
	in  %% Line 495
	    call 'lists':'join'
		(_2, _4)
'lexemes'/2 =
    %% Line 502
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],_5> when 'true' ->
	      []
	  %% Line 503
	  <Str,[]> when 'true' ->
	      [Str|[]]
	  %% Line 504
	  <Str,Seps0>
	      when call 'erlang':'is_list'
		    (Seps0) ->
	      let <Seps> =
		  apply %% Line 505
			'search_pattern'/1
		      (%% Line 505
		       Seps0)
	      in  %% Line 506
		  apply 'lexemes_m'/3
		      (Str, Seps, [])
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'lexemes',2}}] )
	    -| ['compiler_generated'] )
	end
'nth_lexeme'/3 =
    %% Line 513
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Str,1,[]> when 'true' ->
	      Str
	  %% Line 514
	  <Str,N,Seps0>
	      when try
		    let <_3> =
			call 'erlang':'is_list'
			    (Seps0)
		    in  let <_4> =
			    call 'erlang':'is_integer'
				(N)
			in  let <_5> =
				call 'erlang':'>'
				    (N, 0)
			    in  let <_6> =
				    call 'erlang':'and'
					(_4, _5)
				in  call 'erlang':'and'
					(_3, _6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Seps> =
		  apply %% Line 515
			'search_pattern'/1
		      (%% Line 515
		       Seps0)
	      in  %% Line 516
		  apply 'nth_lexeme_m'/3
		      (Str, Seps, N)
	  ( <_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8})
		  -| [{'function_name',{'nth_lexeme',3}}] )
	    -| ['compiler_generated'] )
	end
'find'/2 =
    %% Line 522
    fun (_0,_1) ->
	%% Line 523
	apply 'find'/3
	    (_0, _1, 'leading')
'find'/3 =
    %% Line 530
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <String,[],_8> when 'true' ->
	      String
	  %% Line 531
	  <String,#{}#,_9> when 'true' ->
	      String
	  %% Line 532
	  <String,SearchPattern,'leading'> when 'true' ->
	      let <_3> =
		  call %% Line 533
		       'unicode':%% Line 533
				 'characters_to_list'
		      (%% Line 533
		       SearchPattern)
	      in  %% Line 533
		  apply 'find_l'/2
		      (String, _3)
	  %% Line 534
	  <String,SearchPattern,'trailing'> when 'true' ->
	      let <_4> =
		  call %% Line 535
		       'unicode':%% Line 535
				 'characters_to_list'
		      (%% Line 535
		       SearchPattern)
	      in  %% Line 535
		  apply 'find_r'/3
		      (String, _4, 'nomatch')
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'find',3}}] )
	    -| ['compiler_generated'] )
	end
'next_grapheme'/1 =
    %% Line 541
    fun (_0) ->
	call 'unicode_util':'gc'
	    (_0)
'next_codepoint'/1 =
    %% Line 547
    fun (_0) ->
	call 'unicode_util':'cp'
	    (_0)
'length_1'/2 =
    %% Line 551
    fun (_0,_1) ->
	case <_0,_1> of
	  <[CP1|Cont = [CP2|_11]],N>
	      when try
		    let <_2> =
			call 'erlang':'<'
			    (CP1, 256)
		    in  let <_3> =
			    call 'erlang':'<'
				(CP2, 256)
			in  let <_4> =
				call 'erlang':'=/='
				    (CP1, 13)
			    in  let <_5> =
				    call 'erlang':'and'
					(_3, _4)
				in  call 'erlang':'and'
					(_2, _5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_6> =
		  call %% Line 552
		       'erlang':%% Line 552
				'+'
		      (%% Line 552
		       N, %% Line 552
			  1)
	      in  %% Line 552
		  apply 'length_1'/2
		      (Cont, _6)
	  %% Line 553
	  <Str,N> when 'true' ->
	      %% Line 554
	      case call 'unicode_util':'gc'
		       (Str) of
		%% Line 555
		<[]> when 'true' ->
		    N
		%% Line 556
		<[_12|Rest]> when 'true' ->
		    let <_7> =
			call 'erlang':'+'
			    (N, 1)
		    in  apply 'length_1'/2
			    (Rest, _7)
		%% Line 557
		<{'error',Err}> when 'true' ->
		    call 'erlang':'error'
			({'badarg',Err})
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_8})
		  -| ['compiler_generated'] )
	      end
	end
'length_b'/3 =
    %% Line 560
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <#{#<CP2>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,CP1,N>
	      when %% Line 561
		try
		    let <_3> =
			call 'erlang':'<'
			    (CP1, 256)
		    in  let <_4> =
			    call 'erlang':'<'
				(CP2, 256)
			in  let <_5> =
				call 'erlang':'=/='
				    (CP1, 13)
			    in  let <_6> =
				    call 'erlang':'and'
					(_4, _5)
				in  call 'erlang':'and'
					(_3, _6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_7> =
		  call %% Line 562
		       'erlang':%% Line 562
				'+'
		      (%% Line 562
		       N, %% Line 562
			  1)
	      in  %% Line 562
		  apply 'length_b'/3
		      (Rest, CP2, _7)
	  %% Line 563
	  <Bin0,CP1,N> when 'true' ->
	      %% Line 564
	      case call 'unicode_util':'gc'
		       ([CP1|Bin0]) of
		<[_14|Bin1]> when 'true' ->
		    %% Line 565
		    case call 'unicode_util':'cp'
			     (Bin1) of
		      %% Line 566
		      <[]> when 'true' ->
			  call 'erlang':'+'
			      (N, 1)
		      %% Line 567
		      <[CP3|Bin]> when 'true' ->
			  let <_9> =
			      call 'erlang':'+'
				  (N, 1)
			  in  apply 'length_b'/3
				  (Bin, CP3, _9)
		      %% Line 568
		      <{'error',Err}> when 'true' ->
			  call 'erlang':'error'
			      ({'badarg',Err})
		      ( <_10> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_10})
			-| ['compiler_generated'] )
		    end
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_8})
		  -| ['compiler_generated'] )
	      end
	end
'equal_1'/2 =
    %% Line 571
    fun (_0,_1) ->
	case <_0,_1> of
	  <[A|AR],[B|BR]>
	      when let <_2> =
		    call 'erlang':'is_integer'
			(A)
		in  let <_3> =
			call 'erlang':'is_integer'
			    (B)
		    in  call 'erlang':'and'
			    (_2, _3) ->
	      %% Line 572
	      ( case <> of
		  ( <>
			when call 'erlang':'=:='
			      (A,
			       B) ->
			apply 'equal_1'/2
			    (AR, BR)
		    -| ['compiler_generated'] )
		  ( <> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 573
	  <[],BR> when 'true' ->
	      apply 'is_empty'/1
		  (BR)
	  %% Line 574
	  <A0,B0> when 'true' ->
	      let <_7> =
		  call %% Line 575
		       'unicode_util':%% Line 575
				      'cp'
		      (%% Line 575
		       A0)
	      in  let <_6> =
		      call %% Line 575
			   'unicode_util':%% Line 575
					  'cp'
			  (%% Line 575
			   B0)
		  in  %% Line 575
		      case <_7,_6> of
			%% Line 576
			<( [CP|A]
			   -| ['compiler_generated'] ),( [_13|B]
							 -| ['compiler_generated'] )>
			    when call 'erlang':'=:='
				  (_13,
				   CP) ->
			    apply 'equal_1'/2
				(A, B)
			%% Line 577
			<[],[]> when 'true' ->
			    'true'
			%% Line 578
			<L1,L2>
			    when let <_8> =
				  call 'erlang':'is_list'
				      (L1)
			      in  let <_9> =
				      call 'erlang':'is_list'
					  (L2)
				  in  call 'erlang':'and'
					  (_8, _9) ->
			    'false'
			( <( _14
			     -| ['compiler_generated'] ),( _15
							   -| ['compiler_generated'] )> when 'true' ->
			      let <_10> = {( _14
				     -| ['compiler_generated'] ),( _15
								   -| ['compiler_generated'] )}
			      in  primop 'match_fail'
				      ({'case_clause',_10})
			  -| ['compiler_generated'] )
		      end
	end
'equal_nocase'/2 =
    %% Line 581
    fun (_0,_1) ->
	case <_0,_1> of
	  <A,_11>
	      when call 'erlang':'=:='
		    (_11,
		     A) ->
	      'true'
	  %% Line 582
	  <A0,B0> when 'true' ->
	      let <_4> =
		  call %% Line 583
		       'unicode_util':%% Line 583
				      'casefold'
		      (%% Line 583
		       A0)
	      in  let <_5> =
		      call %% Line 583
			   'unicode_util':%% Line 583
					  'cp'
			  (_4)
		  in  let <_2> =
			  call %% Line 584
			       'unicode_util':%% Line 584
					      'casefold'
			      (%% Line 584
			       B0)
		      in  let <_3> =
			      call %% Line 584
				   'unicode_util':%% Line 584
						  'cp'
				  (_2)
			  in  %% Line 583
			      case <_5,_3> of
				%% Line 585
				<( [CP|A]
				   -| ['compiler_generated'] ),( [_12|B]
								 -| ['compiler_generated'] )>
				    when call 'erlang':'=:='
					  (_12,
					   CP) ->
				    apply 'equal_nocase'/2
					(A, B)
				%% Line 586
				<[],[]> when 'true' ->
				    'true'
				%% Line 587
				<L1,L2>
				    when let <_6> =
					  call 'erlang':'is_list'
					      (L1)
				      in  let <_7> =
					      call 'erlang':'is_list'
						  (L2)
					  in  call 'erlang':'and'
						  (_6, _7) ->
				    'false'
				( <( _13
				     -| ['compiler_generated'] ),( _14
								   -| ['compiler_generated'] )> when 'true' ->
				      let <_8> = {( _13
					     -| ['compiler_generated'] ),( _14
									   -| ['compiler_generated'] )}
				      in  primop 'match_fail'
					      ({'case_clause',_8})
				  -| ['compiler_generated'] )
			      end
	end
'equal_norm'/3 =
    %% Line 590
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <A,_13,_X_Norm>
	      when call 'erlang':'=:='
		    (_13,
		     A) ->
	      'true'
	  %% Line 591
	  <A0,B0,Norm> when 'true' ->
	      let <_5> =
		  call %% Line 592
		       'unicode_util':%% Line 592
				      Norm
		      (%% Line 592
		       A0)
	      in  let <_6> =
		      call %% Line 592
			   'unicode_util':%% Line 592
					  'cp'
			  (_5)
		  in  let <_3> =
			  call %% Line 593
			       'unicode_util':%% Line 593
					      Norm
			      (%% Line 593
			       B0)
		      in  let <_4> =
			      call %% Line 593
				   'unicode_util':%% Line 593
						  'cp'
				  (_3)
			  in  %% Line 592
			      case <_6,_4> of
				%% Line 594
				<( [CP|A]
				   -| ['compiler_generated'] ),( [_14|B]
								 -| ['compiler_generated'] )>
				    when call 'erlang':'=:='
					  (_14,
					   CP) ->
				    apply 'equal_norm'/3
					(A, B, Norm)
				%% Line 595
				<[],[]> when 'true' ->
				    'true'
				%% Line 596
				<L1,L2>
				    when let <_7> =
					  call 'erlang':'is_list'
					      (L1)
				      in  let <_8> =
					      call 'erlang':'is_list'
						  (L2)
					  in  call 'erlang':'and'
						  (_7, _8) ->
				    'false'
				( <( _15
				     -| ['compiler_generated'] ),( _16
								   -| ['compiler_generated'] )> when 'true' ->
				      let <_9> = {( _15
					     -| ['compiler_generated'] ),( _16
									   -| ['compiler_generated'] )}
				      in  primop 'match_fail'
					      ({'case_clause',_9})
				  -| ['compiler_generated'] )
			      end
	end
'equal_norm_nocase'/3 =
    %% Line 599
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <A,_15,_X_Norm>
	      when call 'erlang':'=:='
		    (_15,
		     A) ->
	      'true'
	  %% Line 600
	  <A0,B0,Norm> when 'true' ->
	      let <_6> =
		  call %% Line 601
		       'unicode_util':%% Line 601
				      Norm
		      (%% Line 601
		       A0)
	      in  let <_7> =
		      call %% Line 601
			   'unicode_util':%% Line 601
					  'casefold'
			  (_6)
		  in  let <_8> =
			  call %% Line 601
			       'unicode_util':%% Line 601
					      'cp'
			      (_7)
		      in  let <_3> =
			      call %% Line 602
				   'unicode_util':%% Line 602
						  Norm
				  (%% Line 602
				   B0)
			  in  let <_4> =
				  call %% Line 602
				       'unicode_util':%% Line 602
						      'casefold'
				      (_3)
			      in  let <_5> =
				      call %% Line 602
					   'unicode_util':%% Line 602
							  'cp'
					  (_4)
				  in  %% Line 601
				      case <_8,_5> of
					%% Line 603
					<( [CP|A]
					   -| ['compiler_generated'] ),( [_16|B]
									 -| ['compiler_generated'] )>
					    when call 'erlang':'=:='
						  (_16,
						   CP) ->
					    apply 'equal_norm_nocase'/3
						(A, B, Norm)
					%% Line 604
					<[],[]> when 'true' ->
					    'true'
					%% Line 605
					<L1,L2>
					    when let <_9> =
						  call 'erlang':'is_list'
						      (L1)
					      in  let <_10> =
						      call 'erlang':'is_list'
							  (L2)
						  in  call 'erlang':'and'
							  (_9, _10) ->
					    'false'
					( <( _17
					     -| ['compiler_generated'] ),( _18
									   -| ['compiler_generated'] )> when 'true' ->
					      let <_11> = {( _17
						     -| ['compiler_generated'] ),( _18
										   -| ['compiler_generated'] )}
					      in  primop 'match_fail'
						      ({'case_clause',_11})
					  -| ['compiler_generated'] )
				      end
	end
'reverse_1'/2 =
    %% Line 608
    fun (_0,_1) ->
	case <_0,_1> of
	  <[CP1|Cont = [CP2|_9]],Acc>
	      when try
		    let <_2> =
			call 'erlang':'<'
			    (CP1, 256)
		    in  let <_3> =
			    call 'erlang':'<'
				(CP2, 256)
			in  let <_4> =
				call 'erlang':'=/='
				    (CP1, 13)
			    in  let <_5> =
				    call 'erlang':'and'
					(_3, _4)
				in  call 'erlang':'and'
					(_2, _5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 609
	      apply 'reverse_1'/2
		  (Cont, [CP1|Acc])
	  %% Line 610
	  <CD,Acc> when 'true' ->
	      %% Line 611
	      case call 'unicode_util':'gc'
		       (CD) of
		%% Line 612
		<[GC|Rest]> when 'true' ->
		    apply 'reverse_1'/2
			(Rest, [GC|Acc])
		%% Line 613
		<[]> when 'true' ->
		    Acc
		%% Line 614
		<{'error',Err}> when 'true' ->
		    call 'erlang':'error'
			({'badarg',Err})
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_6})
		  -| ['compiler_generated'] )
	      end
	end
'reverse_b'/3 =
    %% Line 617
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <#{#<CP2>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,CP1,Acc>
	      when %% Line 618
		try
		    let <_3> =
			call 'erlang':'<'
			    (CP1, 256)
		    in  let <_4> =
			    call 'erlang':'<'
				(CP2, 256)
			in  let <_5> =
				call 'erlang':'=/='
				    (CP1, 13)
			    in  let <_6> =
				    call 'erlang':'and'
					(_4, _5)
				in  call 'erlang':'and'
					(_3, _6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 619
	      apply 'reverse_b'/3
		  (Rest, CP2, [CP1|Acc])
	  %% Line 620
	  <Bin0,CP1,Acc> when 'true' ->
	      %% Line 621
	      case call 'unicode_util':'gc'
		       ([CP1|Bin0]) of
		<[GC|Bin1]> when 'true' ->
		    %% Line 622
		    case call 'unicode_util':'cp'
			     (Bin1) of
		      %% Line 623
		      <[]> when 'true' ->
			  [GC|Acc]
		      %% Line 624
		      <[CP3|Bin]> when 'true' ->
			  apply 'reverse_b'/3
			      (Bin, CP3, [GC|Acc])
		      %% Line 625
		      <{'error',Err}> when 'true' ->
			  call 'erlang':'error'
			      ({'badarg',Err})
		      ( <_8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_8})
			-| ['compiler_generated'] )
		    end
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_7})
		  -| ['compiler_generated'] )
	      end
	end
'slice_l0'/2 =
    %% Line 628
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{#<CP1>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Bin>('all',8,'binary',['unsigned'|['big']])}#,N>
	      when call 'erlang':'>'
		    (N,
		     0) ->
	      %% Line 629
	      apply 'slice_lb'/3
		  (Bin, CP1, N)
	  %% Line 630
	  <L,N> when 'true' ->
	      %% Line 631
	      apply 'slice_l'/2
		  (L, N)
	end
'slice_l'/2 =
    %% Line 633
    fun (_0,_1) ->
	case <_0,_1> of
	  <[CP1|Cont = [CP2|_13]],N>
	      when try
		    let <_2> =
			call 'erlang':'<'
			    (CP1, 256)
		    in  let <_3> =
			    call 'erlang':'<'
				(CP2, 256)
			in  let <_4> =
				call 'erlang':'=/='
				    (CP1, 13)
			    in  let <_5> =
				    call 'erlang':'>'
					(N, 0)
				in  let <_6> =
					call 'erlang':'and'
					    (_4, _5)
				    in  let <_7> =
					    call 'erlang':'and'
						(_3, _6)
					in  call 'erlang':'and'
						(_2, _7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_8> =
		  call %% Line 634
		       'erlang':%% Line 634
				'-'
		      (%% Line 634
		       N, %% Line 634
			  1)
	      in  %% Line 634
		  apply 'slice_l'/2
		      (Cont, _8)
	  %% Line 635
	  <CD,N>
	      when call 'erlang':'>'
		    (N,
		     0) ->
	      %% Line 636
	      case call 'unicode_util':'gc'
		       (CD) of
		%% Line 637
		<[_14|Cont]> when 'true' ->
		    let <_9> =
			call 'erlang':'-'
			    (N, 1)
		    in  apply 'slice_l'/2
			    (Cont, _9)
		%% Line 638
		<[]> when 'true' ->
		    []
		%% Line 639
		<{'error',Err}> when 'true' ->
		    call 'erlang':'error'
			({'badarg',Err})
		( <_10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 641
	  <Cont,0> when 'true' ->
	      %% Line 642
	      Cont
	  ( <_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11})
		  -| [{'function_name',{'slice_l',2}}] )
	    -| ['compiler_generated'] )
	end
'slice_lb'/3 =
    %% Line 644
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <#{#<CP2>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Bin>('all',8,'binary',['unsigned'|['big']])}#,CP1,N>
	      when try
		    let <_3> =
			call 'erlang':'<'
			    (CP1, 256)
		    in  let <_4> =
			    call 'erlang':'<'
				(CP2, 256)
			in  let <_5> =
				call 'erlang':'=/='
				    (CP1, 13)
			    in  let <_6> =
				    call 'erlang':'>'
					(N, 1)
				in  let <_7> =
					call 'erlang':'and'
					    (_5, _6)
				    in  let <_8> =
					    call 'erlang':'and'
						(_4, _7)
					in  call 'erlang':'and'
						(_3, _8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_9> =
		  call %% Line 645
		       'erlang':%% Line 645
				'-'
		      (%% Line 645
		       N, %% Line 645
			  1)
	      in  %% Line 645
		  apply 'slice_lb'/3
		      (Bin, CP2, _9)
	  %% Line 646
	  <Bin,CP1,N> when 'true' ->
	      %% Line 647
	      case call 'unicode_util':'gc'
		       ([CP1|Bin]) of
		<[_16|Rest]> when 'true' ->
		    %% Line 648
		    case <> of
		      <>
			  when call 'erlang':'>'
				(N,
				 1) ->
			  %% Line 649
			  case call 'unicode_util':'cp'
				   (Rest) of
			    %% Line 650
			    <[CP2|Cont]> when 'true' ->
				let <_11> =
				    call 'erlang':'-'
					(N, 1)
				in  apply 'slice_lb'/3
					(Cont, CP2, _11)
			    %% Line 651
			    <[]> when 'true' ->
				#{}#
			    %% Line 652
			    <{'error',Err}> when 'true' ->
				call 'erlang':'error'
				    ({'badarg',Err})
			    ( <_12> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_12})
			      -| ['compiler_generated'] )
			  end
		      %% Line 654
		      <>
			  when call 'erlang':'=:='
				(N,
				 1) ->
			  %% Line 655
			  Rest
		      ( <> when 'true' ->
			    primop 'match_fail'
				('if_clause')
			-| ['compiler_generated'] )
		    end
		( <_10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_10})
		  -| ['compiler_generated'] )
	      end
	end
'slice_trail'/2 =
    %% Line 658
    fun (_0,_1) ->
	case <_0,_1> of
	  <Orig,N>
	      when call 'erlang':'is_binary'
		    (Orig) ->
	      %% Line 659
	      case Orig of
		%% Line 660
		<#{#<CP1>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<Bin>('all',8,'binary',['unsigned'|['big']])}#>
		    when call 'erlang':'>'
			  (N,
			   0) ->
		    let <Length> =
			apply %% Line 661
			      'slice_bin'/3
			    (%% Line 661
			     Bin, %% Line 661
				  CP1, %% Line 661
				       N)
		    in  let <_3> =
			    call %% Line 662
				 'erlang':%% Line 662
					  'byte_size'
				(%% Line 662
				 Orig)
			in  let <Sz> =
				call %% Line 662
				     'erlang':%% Line 662
					      '-'
				    (_3, %% Line 662
					 Length)
			    in  %% Line 663
				case Orig of
				  <#{#<Keep>(Sz,8,'binary',['unsigned'|['big']]),
				     #<_9>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				      %% Line 664
				      Keep
				  ( <_5> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_5})
				    -| ['compiler_generated'] )
				end
		%% Line 665
		<#{#<_10>(8,1,'integer',['unsigned'|['big']]),
		   #<_11>('all',8,'binary',['unsigned'|['big']])}#>
		    when call 'erlang':'>'
			  (N,
			   0) ->
		    %% Line 666
		    call 'erlang':'error'
			({'badarg',Orig})
		%% Line 667
		<_12> when 'true' ->
		    %% Line 668
		    #{}#
	      end
	  %% Line 670
	  <CD,N>
	      when call 'erlang':'is_list'
		    (CD) ->
	      %% Line 671
	      apply 'slice_list'/2
		  (CD, N)
	  ( <_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7})
		  -| [{'function_name',{'slice_trail',2}}] )
	    -| ['compiler_generated'] )
	end
'slice_list'/2 =
    %% Line 673
    fun (_0,_1) ->
	case <_0,_1> of
	  <[CP1|Cont = [CP2|_15]],N>
	      when try
		    let <_2> =
			call 'erlang':'<'
			    (CP1, 256)
		    in  let <_3> =
			    call 'erlang':'<'
				(CP2, 256)
			in  let <_4> =
				call 'erlang':'=/='
				    (CP1, 13)
			    in  let <_5> =
				    call 'erlang':'>'
					(N, 0)
				in  let <_6> =
					call 'erlang':'and'
					    (_4, _5)
				    in  let <_7> =
					    call 'erlang':'and'
						(_3, _6)
					in  call 'erlang':'and'
						(_2, _7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_8> =
		  call %% Line 674
		       'erlang':%% Line 674
				'-'
		      (%% Line 674
		       N, %% Line 674
			  1)
	      in  let <_9> =
		      apply %% Line 674
			    'slice_list'/2
			  (%% Line 674
			   Cont, _8)
		  in  %% Line 674
		      [CP1|_9]
	  %% Line 675
	  <CD,N>
	      when call 'erlang':'>'
		    (N,
		     0) ->
	      %% Line 676
	      case call 'unicode_util':'gc'
		       (CD) of
		%% Line 677
		<[GC|Cont]> when 'true' ->
		    let <_10> =
			call 'erlang':'-'
			    (N, 1)
		    in  let <_11> =
			    apply 'slice_list'/2
				(Cont, _10)
			in  %% Line 1541
			    ( case <GC,_11> of
				( <Char,( #{}#
					  -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_integer'
									       -| ['compiler_generated'] )
					      (Char)
					  -| ['compiler_generated'] ) ->
				      ( [Char|( []
						-| ['compiler_generated'] )]
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1542
				( <Char,( #{}#
					  -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_list'
									       -| ['compiler_generated'] )
					      (Char)
					  -| ['compiler_generated'] ) ->
				      Char
				  -| ['compiler_generated'] )
				%% Line 1543
				( <Char,Bin>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_binary'
									       -| ['compiler_generated'] )
					      (Bin)
					  -| ['compiler_generated'] ) ->
				      ( [Char|( [Bin|( []
						       -| ['compiler_generated'] )]
						-| ['compiler_generated'] )]
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1544
				( <Char,Str>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_integer'
									       -| ['compiler_generated'] )
					      (Char)
					  -| ['compiler_generated'] ) ->
				      ( [Char|Str]
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1545
				( <_19,Str>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_list'
									       -| ['compiler_generated'] )
					      (_19)
					  -| ['compiler_generated'] ) ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '++'
									     -| ['compiler_generated'] )
					    (_19, Str)
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_3,_2> when ( 'true'
						 -| ['compiler_generated'] ) ->
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'function_clause'
						  -| ['compiler_generated'] ),_3,_2}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		%% Line 678
		<[]> when 'true' ->
		    []
		%% Line 679
		<{'error',Err}> when 'true' ->
		    call 'erlang':'error'
			({'badarg',Err})
		( <_12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 681
	  <_16,0> when 'true' ->
	      %% Line 682
	      []
	  ( <_14,_13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13})
		  -| [{'function_name',{'slice_list',2}}] )
	    -| ['compiler_generated'] )
	end
'slice_bin'/3 =
    %% Line 684
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <#{#<CP2>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Bin>('all',8,'binary',['unsigned'|['big']])}#,CP1,N>
	      when try
		    let <_3> =
			call 'erlang':'<'
			    (CP1, 256)
		    in  let <_4> =
			    call 'erlang':'<'
				(CP2, 256)
			in  let <_5> =
				call 'erlang':'=/='
				    (CP1, 13)
			    in  let <_6> =
				    call 'erlang':'>'
					(N, 0)
				in  let <_7> =
					call 'erlang':'and'
					    (_5, _6)
				    in  let <_8> =
					    call 'erlang':'and'
						(_4, _7)
					in  call 'erlang':'and'
						(_3, _8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_9> =
		  call %% Line 685
		       'erlang':%% Line 685
				'-'
		      (%% Line 685
		       N, %% Line 685
			  1)
	      in  %% Line 685
		  apply 'slice_bin'/3
		      (Bin, CP2, _9)
	  %% Line 686
	  <CD,CP1,N>
	      when call 'erlang':'>'
		    (N,
		     0) ->
	      %% Line 687
	      case call 'unicode_util':'gc'
		       ([CP1|CD]) of
		<[_19|Bin]> when 'true' ->
		    %% Line 688
		    case call 'unicode_util':'cp'
			     (Bin) of
		      %% Line 689
		      <[CP2|Cont]> when 'true' ->
			  let <_11> =
			      call 'erlang':'-'
				  (N, 1)
			  in  apply 'slice_bin'/3
				  (Cont, CP2, _11)
		      %% Line 690
		      <[]> when 'true' ->
			  0
		      %% Line 691
		      <{'error',Err}> when 'true' ->
			  call 'erlang':'error'
			      ({'badarg',Err})
		      ( <_12> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_12})
			-| ['compiler_generated'] )
		    end
		( <_10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 693
	  <CD,CP1,0> when 'true' ->
	      let <_15> =
		  call %% Line 694
		       'erlang':%% Line 694
				'byte_size'
		      (%% Line 694
		       CD)
	      in  let <_13> =
		      #{#<%% Line 694
			  CP1>(%% Line 694
			       'undefined','undefined','utf8',['unsigned'|['big']])}#
		  in  let <_14> =
			  call %% Line 694
			       'erlang':%% Line 694
					'byte_size'
			      (_13)
		      in  %% Line 694
			  call 'erlang':'+'
			      (_15, _14)
	  ( <_18,_17,_16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_18,_17,_16})
		  -| [{'function_name',{'slice_bin',3}}] )
	    -| ['compiler_generated'] )
	end
'uppercase_list'/2 =
    %% Line 696
    fun (_0,_1) ->
	case <_0,_1> of
	  <[CP1|Cont = [CP2|_17]],_X_Changed>
	      when try
		    let <_2> =
			call 'erlang':'=<'
			    (97, CP1)
		    in  let <_3> =
			    call 'erlang':'=<'
				(CP1, 122)
			in  let <_4> =
				call 'erlang':'<'
				    (CP2, 256)
			    in  let <_5> =
				    call 'erlang':'and'
					(_3, _4)
				in  call 'erlang':'and'
					(_2, _5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_6> =
		  call %% Line 697
		       'erlang':%% Line 697
				'-'
		      (%% Line 697
		       CP1, %% Line 697
			    32)
	      in  let <_7> =
		      apply %% Line 697
			    'uppercase_list'/2
			  (%% Line 697
			   Cont, %% Line 697
				 'true')
		  in  %% Line 697
		      [_6|_7]
	  %% Line 698
	  <[CP1|Cont = [CP2|_18]],Changed>
	      when let <_8> =
		    call 'erlang':'<'
			(CP1, 128)
		in  let <_9> =
			call 'erlang':'<'
			    (CP2, 256)
		    in  call 'erlang':'and'
			    (_8, _9) ->
	      let <_10> =
		  apply %% Line 699
			'uppercase_list'/2
		      (%% Line 699
		       Cont, %% Line 699
			     Changed)
	      in  %% Line 699
		  [CP1|_10]
	  %% Line 700
	  <[],'true'> when 'true' ->
	      %% Line 701
	      []
	  %% Line 702
	  <[],'false'> when 'true' ->
	      %% Line 703
	      call 'erlang':'throw'
		  ('unchanged')
	  %% Line 704
	  <CPs0,Changed> when 'true' ->
	      %% Line 705
	      case call 'unicode_util':'uppercase'
		       (CPs0) of
		%% Line 706
		<[Char|CPs]>
		    when try
			  let <_11> =
			      call 'erlang':'hd'
				  (CPs0)
			  in  call 'erlang':'=:='
				  (Char, _11)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_12> =
			apply 'uppercase_list'/2
			    (CPs, Changed)
		    in  [Char|_12]
		%% Line 707
		<[Char|CPs]> when 'true' ->
		    let <_13> =
			apply 'uppercase_list'/2
			    (CPs, 'true')
		    in  %% Line 1541
			( case <Char,_13> of
			    ( <_21,( #{}#
				     -| ['compiler_generated'] )>
				  when ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'is_integer'
									   -| ['compiler_generated'] )
					  (_21)
				      -| ['compiler_generated'] ) ->
				  ( [_21|( []
					   -| ['compiler_generated'] )]
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 1542
			    ( <_22,( #{}#
				     -| ['compiler_generated'] )>
				  when ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'is_list'
									   -| ['compiler_generated'] )
					  (_22)
				      -| ['compiler_generated'] ) ->
				  _22
			      -| ['compiler_generated'] )
			    %% Line 1543
			    ( <_23,Bin>
				  when ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'is_binary'
									   -| ['compiler_generated'] )
					  (Bin)
				      -| ['compiler_generated'] ) ->
				  ( [_23|( [Bin|( []
						  -| ['compiler_generated'] )]
					   -| ['compiler_generated'] )]
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 1544
			    ( <_24,Str>
				  when ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'is_integer'
									   -| ['compiler_generated'] )
					  (_24)
				      -| ['compiler_generated'] ) ->
				  ( [_24|Str]
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 1545
			    ( <GC,Str>
				  when ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'is_list'
									   -| ['compiler_generated'] )
					  (GC)
				      -| ['compiler_generated'] ) ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( '++'
									 -| ['compiler_generated'] )
					(GC, Str)
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_3,_2> when ( 'true'
					     -| ['compiler_generated'] ) ->
				  ( primop ( 'match_fail'
					     -| ['compiler_generated'] )
					(( {( 'function_clause'
					      -| ['compiler_generated'] ),_3,_2}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		%% Line 708
		<[]> when 'true' ->
		    apply 'uppercase_list'/2
			([], Changed)
		( <_14> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_14})
		  -| ['compiler_generated'] )
	      end
	end
'uppercase_bin'/3 =
    %% Line 711
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <CP1,#{#<CP2>('undefined','undefined','utf8',['unsigned'|['big']]),
		 #<Bin>('all',8,'binary',['unsigned'|['big']])}#,_X_Changed>
	      when %% Line 712
		try
		    let <_3> =
			call 'erlang':'=<'
			    (97, CP1)
		    in  let <_4> =
			    call 'erlang':'=<'
				(CP1, 122)
			in  let <_5> =
				call 'erlang':'<'
				    (CP2, 256)
			    in  let <_6> =
				    call 'erlang':'and'
					(_4, _5)
				in  call 'erlang':'and'
					(_3, _6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_7> =
		  call %% Line 713
		       'erlang':%% Line 713
				'-'
		      (%% Line 713
		       CP1, %% Line 713
			    32)
	      in  let <_8> =
		      apply %% Line 713
			    'uppercase_bin'/3
			  (%% Line 713
			   CP2, %% Line 713
				Bin, %% Line 713
				     'true')
		  in  %% Line 713
		      [_7|_8]
	  %% Line 714
	  <CP1,#{#<CP2>('undefined','undefined','utf8',['unsigned'|['big']]),
		 #<Bin>('all',8,'binary',['unsigned'|['big']])}#,Changed>
	      when let <_9> =
		    call %% Line 715
			 'erlang':%% Line 715
				  '<'
			(%% Line 715
			 CP1, %% Line 715
			      128)
		in  let <_10> =
			call %% Line 715
			     'erlang':%% Line 715
				      '<'
			    (%% Line 715
			     CP2, %% Line 715
				  256)
		    in  %% Line 715
			call 'erlang':'and'
			    (_9, _10) ->
	      let <_11> =
		  apply %% Line 716
			'uppercase_bin'/3
		      (%% Line 716
		       CP2, %% Line 716
			    Bin, %% Line 716
				 Changed)
	      in  %% Line 716
		  [CP1|_11]
	  %% Line 717
	  <CP1,Bin,Changed> when 'true' ->
	      %% Line 718
	      case call 'unicode_util':'uppercase'
		       ([CP1|Bin]) of
		%% Line 719
		<[_20|CPs]>
		    when call 'erlang':'=:='
			  (_20,
			   CP1) ->
		    %% Line 720
		    case call 'unicode_util':'cp'
			     (CPs) of
		      %% Line 721
		      <[Next|Rest]> when 'true' ->
			  let <_12> =
			      apply %% Line 722
				    'uppercase_bin'/3
				  (%% Line 722
				   Next, %% Line 722
					 Rest, %% Line 722
					       Changed)
			  in  %% Line 722
			      [CP1|_12]
		      %% Line 723
		      <[]>
			  when ( call 'erlang':'=:='
				  (Changed,
				   'true')
			      -| ['compiler_generated'] ) ->
			  %% Line 724
			  [CP1|[]]
		      %% Line 725
		      <[]> when 'true' ->
			  %% Line 726
			  call 'erlang':'throw'
			      ('unchanged')
		      %% Line 727
		      <{'error',Err}> when 'true' ->
			  %% Line 728
			  call 'erlang':'error'
			      ({'badarg',Err})
		      ( <_13> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_13})
			-| ['compiler_generated'] )
		    end
		%% Line 730
		<[Char|CPs]> when 'true' ->
		    %% Line 731
		    case call 'unicode_util':'cp'
			     (CPs) of
		      %% Line 732
		      <[Next|Rest]> when 'true' ->
			  let <_14> =
			      apply %% Line 733
				    'uppercase_bin'/3
				  (%% Line 733
				   Next, %% Line 733
					 Rest, %% Line 733
					       'true')
			  in  %% Line 733
			      [Char|_14]
		      %% Line 734
		      <[]> when 'true' ->
			  %% Line 735
			  [Char|[]]
		      %% Line 736
		      <{'error',Err}> when 'true' ->
			  %% Line 737
			  call 'erlang':'error'
			      ({'badarg',Err})
		      ( <_15> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_15})
			-| ['compiler_generated'] )
		    end
		( <_16> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_16})
		  -| ['compiler_generated'] )
	      end
	end
'lowercase_list'/2 =
    %% Line 741
    fun (_0,_1) ->
	case <_0,_1> of
	  <[CP1|Cont = [CP2|_17]],_X_Changed>
	      when try
		    let <_2> =
			call 'erlang':'=<'
			    (65, CP1)
		    in  let <_3> =
			    call 'erlang':'=<'
				(CP1, 90)
			in  let <_4> =
				call 'erlang':'<'
				    (CP2, 256)
			    in  let <_5> =
				    call 'erlang':'and'
					(_3, _4)
				in  call 'erlang':'and'
					(_2, _5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_6> =
		  call %% Line 742
		       'erlang':%% Line 742
				'+'
		      (%% Line 742
		       CP1, %% Line 742
			    32)
	      in  let <_7> =
		      apply %% Line 742
			    'lowercase_list'/2
			  (%% Line 742
			   Cont, %% Line 742
				 'true')
		  in  %% Line 742
		      [_6|_7]
	  %% Line 743
	  <[CP1|Cont = [CP2|_18]],Changed>
	      when let <_8> =
		    call 'erlang':'<'
			(CP1, 128)
		in  let <_9> =
			call 'erlang':'<'
			    (CP2, 256)
		    in  call 'erlang':'and'
			    (_8, _9) ->
	      let <_10> =
		  apply %% Line 744
			'lowercase_list'/2
		      (%% Line 744
		       Cont, %% Line 744
			     Changed)
	      in  %% Line 744
		  [CP1|_10]
	  %% Line 745
	  <[],'true'> when 'true' ->
	      %% Line 746
	      []
	  %% Line 747
	  <[],'false'> when 'true' ->
	      %% Line 748
	      call 'erlang':'throw'
		  ('unchanged')
	  %% Line 749
	  <CPs0,Changed> when 'true' ->
	      %% Line 750
	      case call 'unicode_util':'lowercase'
		       (CPs0) of
		%% Line 751
		<[Char|CPs]>
		    when try
			  let <_11> =
			      call 'erlang':'hd'
				  (CPs0)
			  in  call 'erlang':'=:='
				  (Char, _11)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_12> =
			apply 'lowercase_list'/2
			    (CPs, Changed)
		    in  [Char|_12]
		%% Line 752
		<[Char|CPs]> when 'true' ->
		    let <_13> =
			apply 'lowercase_list'/2
			    (CPs, 'true')
		    in  %% Line 1541
			( case <Char,_13> of
			    ( <_21,( #{}#
				     -| ['compiler_generated'] )>
				  when ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'is_integer'
									   -| ['compiler_generated'] )
					  (_21)
				      -| ['compiler_generated'] ) ->
				  ( [_21|( []
					   -| ['compiler_generated'] )]
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 1542
			    ( <_22,( #{}#
				     -| ['compiler_generated'] )>
				  when ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'is_list'
									   -| ['compiler_generated'] )
					  (_22)
				      -| ['compiler_generated'] ) ->
				  _22
			      -| ['compiler_generated'] )
			    %% Line 1543
			    ( <_23,Bin>
				  when ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'is_binary'
									   -| ['compiler_generated'] )
					  (Bin)
				      -| ['compiler_generated'] ) ->
				  ( [_23|( [Bin|( []
						  -| ['compiler_generated'] )]
					   -| ['compiler_generated'] )]
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 1544
			    ( <_24,Str>
				  when ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'is_integer'
									   -| ['compiler_generated'] )
					  (_24)
				      -| ['compiler_generated'] ) ->
				  ( [_24|Str]
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 1545
			    ( <GC,Str>
				  when ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'is_list'
									   -| ['compiler_generated'] )
					  (GC)
				      -| ['compiler_generated'] ) ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( '++'
									 -| ['compiler_generated'] )
					(GC, Str)
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_3,_2> when ( 'true'
					     -| ['compiler_generated'] ) ->
				  ( primop ( 'match_fail'
					     -| ['compiler_generated'] )
					(( {( 'function_clause'
					      -| ['compiler_generated'] ),_3,_2}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		%% Line 753
		<[]> when 'true' ->
		    apply 'lowercase_list'/2
			([], Changed)
		( <_14> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_14})
		  -| ['compiler_generated'] )
	      end
	end
'lowercase_bin'/3 =
    %% Line 756
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <CP1,#{#<CP2>('undefined','undefined','utf8',['unsigned'|['big']]),
		 #<Bin>('all',8,'binary',['unsigned'|['big']])}#,_X_Changed>
	      when %% Line 757
		try
		    let <_3> =
			call 'erlang':'=<'
			    (65, CP1)
		    in  let <_4> =
			    call 'erlang':'=<'
				(CP1, 90)
			in  let <_5> =
				call 'erlang':'<'
				    (CP2, 256)
			    in  let <_6> =
				    call 'erlang':'and'
					(_4, _5)
				in  call 'erlang':'and'
					(_3, _6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_7> =
		  call %% Line 758
		       'erlang':%% Line 758
				'+'
		      (%% Line 758
		       CP1, %% Line 758
			    32)
	      in  let <_8> =
		      apply %% Line 758
			    'lowercase_bin'/3
			  (%% Line 758
			   CP2, %% Line 758
				Bin, %% Line 758
				     'true')
		  in  %% Line 758
		      [_7|_8]
	  %% Line 759
	  <CP1,#{#<CP2>('undefined','undefined','utf8',['unsigned'|['big']]),
		 #<Bin>('all',8,'binary',['unsigned'|['big']])}#,Changed>
	      when let <_9> =
		    call %% Line 760
			 'erlang':%% Line 760
				  '<'
			(%% Line 760
			 CP1, %% Line 760
			      128)
		in  let <_10> =
			call %% Line 760
			     'erlang':%% Line 760
				      '<'
			    (%% Line 760
			     CP2, %% Line 760
				  256)
		    in  %% Line 760
			call 'erlang':'and'
			    (_9, _10) ->
	      let <_11> =
		  apply %% Line 761
			'lowercase_bin'/3
		      (%% Line 761
		       CP2, %% Line 761
			    Bin, %% Line 761
				 Changed)
	      in  %% Line 761
		  [CP1|_11]
	  %% Line 762
	  <CP1,Bin,Changed> when 'true' ->
	      %% Line 763
	      case call 'unicode_util':'lowercase'
		       ([CP1|Bin]) of
		%% Line 764
		<[_20|CPs]>
		    when call 'erlang':'=:='
			  (_20,
			   CP1) ->
		    %% Line 765
		    case call 'unicode_util':'cp'
			     (CPs) of
		      %% Line 766
		      <[Next|Rest]> when 'true' ->
			  let <_12> =
			      apply %% Line 767
				    'lowercase_bin'/3
				  (%% Line 767
				   Next, %% Line 767
					 Rest, %% Line 767
					       Changed)
			  in  %% Line 767
			      [CP1|_12]
		      %% Line 768
		      <[]>
			  when ( call 'erlang':'=:='
				  (Changed,
				   'true')
			      -| ['compiler_generated'] ) ->
			  %% Line 769
			  [CP1|[]]
		      %% Line 770
		      <[]> when 'true' ->
			  %% Line 771
			  call 'erlang':'throw'
			      ('unchanged')
		      %% Line 772
		      <{'error',Err}> when 'true' ->
			  %% Line 773
			  call 'erlang':'error'
			      ({'badarg',Err})
		      ( <_13> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_13})
			-| ['compiler_generated'] )
		    end
		%% Line 775
		<[Char|CPs]> when 'true' ->
		    %% Line 776
		    case call 'unicode_util':'cp'
			     (CPs) of
		      %% Line 777
		      <[Next|Rest]> when 'true' ->
			  let <_14> =
			      apply %% Line 778
				    'lowercase_bin'/3
				  (%% Line 778
				   Next, %% Line 778
					 Rest, %% Line 778
					       'true')
			  in  %% Line 778
			      [Char|_14]
		      %% Line 779
		      <[]> when 'true' ->
			  %% Line 780
			  [Char|[]]
		      %% Line 781
		      <{'error',Err}> when 'true' ->
			  %% Line 782
			  call 'erlang':'error'
			      ({'badarg',Err})
		      ( <_15> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_15})
			-| ['compiler_generated'] )
		    end
		( <_16> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_16})
		  -| ['compiler_generated'] )
	      end
	end
'casefold_list'/2 =
    %% Line 786
    fun (_0,_1) ->
	case <_0,_1> of
	  <[CP1|Cont = [CP2|_17]],_X_Changed>
	      when try
		    let <_2> =
			call 'erlang':'=<'
			    (65, CP1)
		    in  let <_3> =
			    call 'erlang':'=<'
				(CP1, 90)
			in  let <_4> =
				call 'erlang':'<'
				    (CP2, 256)
			    in  let <_5> =
				    call 'erlang':'and'
					(_3, _4)
				in  call 'erlang':'and'
					(_2, _5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_6> =
		  call %% Line 787
		       'erlang':%% Line 787
				'+'
		      (%% Line 787
		       CP1, %% Line 787
			    32)
	      in  let <_7> =
		      apply %% Line 787
			    'casefold_list'/2
			  (%% Line 787
			   Cont, %% Line 787
				 'true')
		  in  %% Line 787
		      [_6|_7]
	  %% Line 788
	  <[CP1|Cont = [CP2|_18]],Changed>
	      when let <_8> =
		    call 'erlang':'<'
			(CP1, 128)
		in  let <_9> =
			call 'erlang':'<'
			    (CP2, 256)
		    in  call 'erlang':'and'
			    (_8, _9) ->
	      let <_10> =
		  apply %% Line 789
			'casefold_list'/2
		      (%% Line 789
		       Cont, %% Line 789
			     Changed)
	      in  %% Line 789
		  [CP1|_10]
	  %% Line 790
	  <[],'true'> when 'true' ->
	      %% Line 791
	      []
	  %% Line 792
	  <[],'false'> when 'true' ->
	      %% Line 793
	      call 'erlang':'throw'
		  ('unchanged')
	  %% Line 794
	  <CPs0,Changed> when 'true' ->
	      %% Line 795
	      case call 'unicode_util':'casefold'
		       (CPs0) of
		%% Line 796
		<[Char|CPs]>
		    when try
			  let <_11> =
			      call 'erlang':'hd'
				  (CPs0)
			  in  call 'erlang':'=:='
				  (Char, _11)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_12> =
			apply 'casefold_list'/2
			    (CPs, Changed)
		    in  [Char|_12]
		%% Line 797
		<[Char|CPs]> when 'true' ->
		    let <_13> =
			apply 'casefold_list'/2
			    (CPs, 'true')
		    in  %% Line 1541
			( case <Char,_13> of
			    ( <_21,( #{}#
				     -| ['compiler_generated'] )>
				  when ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'is_integer'
									   -| ['compiler_generated'] )
					  (_21)
				      -| ['compiler_generated'] ) ->
				  ( [_21|( []
					   -| ['compiler_generated'] )]
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 1542
			    ( <_22,( #{}#
				     -| ['compiler_generated'] )>
				  when ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'is_list'
									   -| ['compiler_generated'] )
					  (_22)
				      -| ['compiler_generated'] ) ->
				  _22
			      -| ['compiler_generated'] )
			    %% Line 1543
			    ( <_23,Bin>
				  when ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'is_binary'
									   -| ['compiler_generated'] )
					  (Bin)
				      -| ['compiler_generated'] ) ->
				  ( [_23|( [Bin|( []
						  -| ['compiler_generated'] )]
					   -| ['compiler_generated'] )]
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 1544
			    ( <_24,Str>
				  when ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'is_integer'
									   -| ['compiler_generated'] )
					  (_24)
				      -| ['compiler_generated'] ) ->
				  ( [_24|Str]
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 1545
			    ( <GC,Str>
				  when ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'is_list'
									   -| ['compiler_generated'] )
					  (GC)
				      -| ['compiler_generated'] ) ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( '++'
									 -| ['compiler_generated'] )
					(GC, Str)
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_3,_2> when ( 'true'
					     -| ['compiler_generated'] ) ->
				  ( primop ( 'match_fail'
					     -| ['compiler_generated'] )
					(( {( 'function_clause'
					      -| ['compiler_generated'] ),_3,_2}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		%% Line 798
		<[]> when 'true' ->
		    apply 'casefold_list'/2
			([], Changed)
		( <_14> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_14})
		  -| ['compiler_generated'] )
	      end
	end
'casefold_bin'/3 =
    %% Line 801
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <CP1,#{#<CP2>('undefined','undefined','utf8',['unsigned'|['big']]),
		 #<Bin>('all',8,'binary',['unsigned'|['big']])}#,_X_Changed>
	      when %% Line 802
		try
		    let <_3> =
			call 'erlang':'=<'
			    (65, CP1)
		    in  let <_4> =
			    call 'erlang':'=<'
				(CP1, 90)
			in  let <_5> =
				call 'erlang':'<'
				    (CP2, 256)
			    in  let <_6> =
				    call 'erlang':'and'
					(_4, _5)
				in  call 'erlang':'and'
					(_3, _6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_7> =
		  call %% Line 803
		       'erlang':%% Line 803
				'+'
		      (%% Line 803
		       CP1, %% Line 803
			    32)
	      in  let <_8> =
		      apply %% Line 803
			    'casefold_bin'/3
			  (%% Line 803
			   CP2, %% Line 803
				Bin, %% Line 803
				     'true')
		  in  %% Line 803
		      [_7|_8]
	  %% Line 804
	  <CP1,#{#<CP2>('undefined','undefined','utf8',['unsigned'|['big']]),
		 #<Bin>('all',8,'binary',['unsigned'|['big']])}#,Changed>
	      when let <_9> =
		    call %% Line 805
			 'erlang':%% Line 805
				  '<'
			(%% Line 805
			 CP1, %% Line 805
			      128)
		in  let <_10> =
			call %% Line 805
			     'erlang':%% Line 805
				      '<'
			    (%% Line 805
			     CP2, %% Line 805
				  256)
		    in  %% Line 805
			call 'erlang':'and'
			    (_9, _10) ->
	      let <_11> =
		  apply %% Line 806
			'casefold_bin'/3
		      (%% Line 806
		       CP2, %% Line 806
			    Bin, %% Line 806
				 Changed)
	      in  %% Line 806
		  [CP1|_11]
	  %% Line 807
	  <CP1,Bin,Changed> when 'true' ->
	      %% Line 808
	      case call 'unicode_util':'casefold'
		       ([CP1|Bin]) of
		%% Line 809
		<[_20|CPs]>
		    when call 'erlang':'=:='
			  (_20,
			   CP1) ->
		    %% Line 810
		    case call 'unicode_util':'cp'
			     (CPs) of
		      %% Line 811
		      <[Next|Rest]> when 'true' ->
			  let <_12> =
			      apply %% Line 812
				    'casefold_bin'/3
				  (%% Line 812
				   Next, %% Line 812
					 Rest, %% Line 812
					       Changed)
			  in  %% Line 812
			      [CP1|_12]
		      %% Line 813
		      <[]>
			  when ( call 'erlang':'=:='
				  (Changed,
				   'true')
			      -| ['compiler_generated'] ) ->
			  %% Line 814
			  [CP1|[]]
		      %% Line 815
		      <[]> when 'true' ->
			  %% Line 816
			  call 'erlang':'throw'
			      ('unchanged')
		      %% Line 817
		      <{'error',Err}> when 'true' ->
			  %% Line 818
			  call 'erlang':'error'
			      ({'badarg',Err})
		      ( <_13> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_13})
			-| ['compiler_generated'] )
		    end
		%% Line 820
		<[Char|CPs]> when 'true' ->
		    %% Line 821
		    case call 'unicode_util':'cp'
			     (CPs) of
		      %% Line 822
		      <[Next|Rest]> when 'true' ->
			  let <_14> =
			      apply %% Line 823
				    'casefold_bin'/3
				  (%% Line 823
				   Next, %% Line 823
					 Rest, %% Line 823
					       'true')
			  in  %% Line 823
			      [Char|_14]
		      %% Line 824
		      <[]> when 'true' ->
			  %% Line 825
			  [Char|[]]
		      %% Line 826
		      <{'error',Err}> when 'true' ->
			  %% Line 827
			  call 'erlang':'error'
			      ({'badarg',Err})
		      ( <_15> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_15})
			-| ['compiler_generated'] )
		    end
		( <_16> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_16})
		  -| ['compiler_generated'] )
	      end
	end
'trim_ls'/2 =
    %% Line 832
    fun (_0,_1) ->
	case <_0,_1> of
	  <Str = [CP1|Cont = [CP2|_9]],Sep>
	      when %% Line 833
		try
		    let <_2> =
			call 'erlang':'<'
			    (CP1, 256)
		    in  let <_3> =
			    call 'erlang':'<'
				(CP2, 256)
			in  let <_4> =
				call 'erlang':'=/='
				    (CP1, 13)
			    in  let <_5> =
				    call 'erlang':'and'
					(_3, _4)
				in  call 'erlang':'and'
					(_2, _5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 834
	      case Sep of
		%% Line 835
		<_10>
		    when call 'erlang':'=:='
			  (Sep,
			   CP1) ->
		    apply 'trim_ls'/2
			(Cont, Sep)
		%% Line 836
		<_11> when 'true' ->
		    Str
	      end
	  %% Line 838
	  <Str,Sep> when 'true' ->
	      %% Line 839
	      apply 'trim_l'/2
		  (Str, [Sep|[]])
	end
'trim_l'/2 =
    %% Line 841
    fun (_0,_1) ->
	case <_0,_1> of
	  <Str = [CP1|Cont = [CP2|_13]],Sep>
	      when %% Line 842
		try
		    let <_2> =
			call 'erlang':'<'
			    (CP1, 256)
		    in  let <_3> =
			    call 'erlang':'<'
				(CP2, 256)
			in  let <_4> =
				call 'erlang':'=/='
				    (CP1, 13)
			    in  let <_5> =
				    call 'erlang':'and'
					(_3, _4)
				in  call 'erlang':'and'
					(_2, _5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 843
	      case call 'lists':'member'
		       (CP1, Sep) of
		%% Line 844
		<'true'> when 'true' ->
		    apply 'trim_l'/2
			(Cont, Sep)
		%% Line 845
		<'false'> when 'true' ->
		    Str
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 847
	  <[Bin|Cont0],Sep>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 848
	      case apply 'bin_search_inv'/3
		       (Bin, Cont0, Sep) of
		%% Line 849
		<{'nomatch',Cont}> when 'true' ->
		    apply 'trim_l'/2
			(Cont, Sep)
		%% Line 850
		<Keep> when 'true' ->
		    Keep
	      end
	  %% Line 852
	  <Str,Sep>
	      when call 'erlang':'is_list'
		    (Str) ->
	      %% Line 853
	      case call 'unicode_util':'gc'
		       (Str) of
		%% Line 854
		<[C|Cs]> when 'true' ->
		    %% Line 855
		    case call 'lists':'member'
			     (C, Sep) of
		      %% Line 856
		      <'true'> when 'true' ->
			  apply 'trim_l'/2
			      (Cs, Sep)
		      %% Line 857
		      <'false'> when 'true' ->
			  Str
		      ( <_8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_8})
			-| ['compiler_generated'] )
		    end
		%% Line 859
		<[]> when 'true' ->
		    []
		( <_9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 861
	  <Bin,Sep>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 862
	      case apply 'bin_search_inv'/3
		       (Bin, [], Sep) of
		%% Line 863
		<{'nomatch',_14}> when 'true' ->
		    #{}#
		%% Line 864
		<[Keep|[]]> when 'true' ->
		    Keep
		( <_10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_10})
		  -| ['compiler_generated'] )
	      end
	  ( <_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11})
		  -| [{'function_name',{'trim_l',2}}] )
	    -| ['compiler_generated'] )
	end
'trim_ts'/2 =
    %% Line 868
    fun (_0,_1) ->
	case <_0,_1> of
	  <Str = [Sep|Cs1],_14>
	      when call 'erlang':'=:='
		    (_14,
		     Sep) ->
	      %% Line 869
	      case Cs1 of
		%% Line 870
		<[]> when 'true' ->
		    []
		%% Line 871
		<[CP2|_15]>
		    when try
			  let <_2> =
			      call 'erlang':'<'
				  (Sep, 256)
			  in  let <_3> =
				  call 'erlang':'<'
				      (CP2, 256)
			      in  let <_4> =
				      call 'erlang':'=/='
					  (Sep, 13)
				  in  let <_5> =
					  call 'erlang':'and'
					      (_3, _4)
				      in  call 'erlang':'and'
					      (_2, _5)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <Tail> =
			apply %% Line 872
			      'trim_ts'/2
			    (%% Line 872
			     Cs1, %% Line 872
				  Sep)
		    in  %% Line 873
			case apply 'is_empty'/1
				 (Tail) of
			  %% Line 874
			  <'true'> when 'true' ->
			      []
			  %% Line 875
			  <'false'> when 'true' ->
			      [Sep|Tail]
			  ( <_7> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_7})
			    -| ['compiler_generated'] )
			end
		%% Line 877
		<_16> when 'true' ->
		    let <_8> =
			apply %% Line 878
			      'search_pattern'/1
			    (%% Line 878
			     [Sep|[]])
		    in  %% Line 878
			apply 'trim_t'/3
			    (Str, 0, _8)
	      end
	  %% Line 880
	  <[CP|Cont],Sep>
	      when call 'erlang':'is_integer'
		    (CP) ->
	      let <_10> =
		  apply %% Line 881
			'trim_ts'/2
		      (%% Line 881
		       Cont, %% Line 881
			     Sep)
	      in  %% Line 881
		  [CP|_10]
	  %% Line 882
	  <Str,Sep> when 'true' ->
	      let <_11> =
		  apply %% Line 883
			'search_pattern'/1
		      (%% Line 883
		       [Sep|[]])
	      in  %% Line 883
		  apply 'trim_t'/3
		      (Str, 0, _11)
	end
'trim_t'/3 =
    %% Line 885
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Cs0 = [CP1|Cont],_45,Seps = {GCs,CPs,_46}>
	      when call 'erlang':'is_integer'
		    (CP1) ->
	      %% Line 886
	      case call 'lists':'member'
		       (CP1, CPs) of
		%% Line 887
		<'true'> when 'true' ->
		    %% Line 888
		    case call 'unicode_util':'gc'
			     (Cs0) of
		      <[GC|Cs1]> when 'true' ->
			  %% Line 889
			  case call 'lists':'member'
				   (GC, GCs) of
			    %% Line 890
			    <'true'> when 'true' ->
				let <Tail> =
				    apply %% Line 891
					  'trim_t'/3
					(%% Line 891
					 Cs1, %% Line 891
					      0, %% Line 891
						 Seps)
				in  %% Line 892
				    case apply 'is_empty'/1
					     (Tail) of
				      %% Line 893
				      <'true'> when 'true' ->
					  []
				      %% Line 894
				      <'false'> when 'true' ->
					  %% Line 1541
					  ( case <GC,Tail> of
					      ( <Char,( #{}#
							-| ['compiler_generated'] )>
						    when ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'is_integer'
											     -| ['compiler_generated'] )
							    (Char)
							-| ['compiler_generated'] ) ->
						    ( [Char|( []
							      -| ['compiler_generated'] )]
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      %% Line 1542
					      ( <Char,( #{}#
							-| ['compiler_generated'] )>
						    when ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'is_list'
											     -| ['compiler_generated'] )
							    (Char)
							-| ['compiler_generated'] ) ->
						    Char
						-| ['compiler_generated'] )
					      %% Line 1543
					      ( <Char,Bin>
						    when ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'is_binary'
											     -| ['compiler_generated'] )
							    (Bin)
							-| ['compiler_generated'] ) ->
						    ( [Char|( [Bin|( []
								     -| ['compiler_generated'] )]
							      -| ['compiler_generated'] )]
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      %% Line 1544
					      ( <Char,Str>
						    when ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'is_integer'
											     -| ['compiler_generated'] )
							    (Char)
							-| ['compiler_generated'] ) ->
						    ( [Char|Str]
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      %% Line 1545
					      ( <_62,Str>
						    when ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'is_list'
											     -| ['compiler_generated'] )
							    (_62)
							-| ['compiler_generated'] ) ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( '++'
											   -| ['compiler_generated'] )
							  (_62, Str)
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <_3,_63> when ( 'true'
								-| ['compiler_generated'] ) ->
						    ( primop ( 'match_fail'
							       -| ['compiler_generated'] )
							  (( {( 'function_clause'
								-| ['compiler_generated'] ),_3,_63}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      ( <_5> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_5})
					-| ['compiler_generated'] )
				    end
			    %% Line 896
			    <'false'> when 'true' ->
				let <_6> =
				    apply %% Line 897
					  'trim_t'/3
					(%% Line 897
					 Cs1, %% Line 897
					      0, %% Line 897
						 Seps)
				in  %% Line 1541
				    ( case <GC,_6> of
					( <Char,( #{}#
						  -| ['compiler_generated'] )>
					      when ( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'is_integer'
										       -| ['compiler_generated'] )
						      (Char)
						  -| ['compiler_generated'] ) ->
					      ( [Char|( []
							-| ['compiler_generated'] )]
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					%% Line 1542
					( <Char,( #{}#
						  -| ['compiler_generated'] )>
					      when ( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'is_list'
										       -| ['compiler_generated'] )
						      (Char)
						  -| ['compiler_generated'] ) ->
					      Char
					  -| ['compiler_generated'] )
					%% Line 1543
					( <Char,Bin>
					      when ( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'is_binary'
										       -| ['compiler_generated'] )
						      (Bin)
						  -| ['compiler_generated'] ) ->
					      ( [Char|( [Bin|( []
							       -| ['compiler_generated'] )]
							-| ['compiler_generated'] )]
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					%% Line 1544
					( <Char,Str>
					      when ( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'is_integer'
										       -| ['compiler_generated'] )
						      (Char)
						  -| ['compiler_generated'] ) ->
					      ( [Char|Str]
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					%% Line 1545
					( <_66,Str>
					      when ( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'is_list'
										       -| ['compiler_generated'] )
						      (_66)
						  -| ['compiler_generated'] ) ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( '++'
										     -| ['compiler_generated'] )
						    (_66, Str)
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					( <_3,_67> when ( 'true'
							  -| ['compiler_generated'] ) ->
					      ( primop ( 'match_fail'
							 -| ['compiler_generated'] )
						    (( {( 'function_clause'
							  -| ['compiler_generated'] ),_3,_67}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
			    ( <_7> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_7})
			      -| ['compiler_generated'] )
			  end
		      ( <_3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_3})
			-| ['compiler_generated'] )
		    end
		%% Line 899
		<'false'> when 'true' ->
		    let <_8> =
			apply %% Line 900
			      'trim_t'/3
			    (%% Line 900
			     Cont, %% Line 900
				   0, %% Line 900
				      Seps)
		    in  %% Line 900
			[CP1|_8]
		( <_9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 902
	  <[Bin|Cont0],N,Seps0 = {GCs,_47,_48}>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 903
	      case Bin of
		<#{#<_49>(N,8,'binary',['unsigned'|['big']]),
		   #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <Seps> =
			case %% Line 904
			     Seps0 of
			  %% Line 1585
			  ( <( {Sep,CPs,( 'undefined'
					  -| ['compiler_generated'] )}
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( let <_69> =
				      apply %% Line 1586
					    'bin_pattern'/1
					  (%% Line 1586
					   CPs)
				  in  ( let <_70> =
					    call %% Line 1586
						 ( 'binary'
						   -| ['compiler_generated'] ):%% Line 1586
									       ( 'compile_pattern'
										 -| ['compiler_generated'] )
						(_69)
					in  %% Line 1586
					    ( {Sep,CPs,_70}
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1587
			  ( <( Compiled = ( {_4,_5,_6}
					    -| ['compiler_generated'] )
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				Compiled
			    -| ['compiler_generated'] )
			  ( <_3> when ( 'true'
					-| ['compiler_generated'] ) ->
				%% Line 1585
				( primop ( 'match_fail'
					   -| ['compiler_generated'] )
				      (( {( 'function_clause'
					    -| ['compiler_generated'] ),_3}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    in  %% Line 905
			case apply 'bin_search'/3
				 (Rest, Cont0, Seps) of
			  %% Line 906
			  <{'nomatch',_50}> when 'true' ->
			      let <_12> =
				  apply %% Line 907
					'trim_t'/3
				      (%% Line 907
				       Cont0, %% Line 907
					      0, %% Line 907
						 Seps)
			      in  %% Line 1547
				  ( case <Bin,_12> of
				      ( <_73,( []
					       -| ['compiler_generated'] )> when ( 'true'
										   -| ['compiler_generated'] ) ->
					    _73
					-| ['compiler_generated'] )
				      %% Line 1548
				      ( <( #{}#
					   -| ['compiler_generated'] ),St> when ( 'true'
										  -| ['compiler_generated'] ) ->
					    St
					-| ['compiler_generated'] )
				      %% Line 1549
				      ( <( []
					   -| ['compiler_generated'] ),St> when ( 'true'
										  -| ['compiler_generated'] ) ->
					    St
					-| ['compiler_generated'] )
				      %% Line 1550
				      ( <_74,St> when ( 'true'
							-| ['compiler_generated'] ) ->
					    ( [_74|St]
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			  %% Line 908
			  <[SepStart|Cont1]> when 'true' ->
			      %% Line 909
			      case apply 'bin_search_inv'/3
				       (SepStart, Cont1, GCs) of
				%% Line 910
				<{'nomatch',Cont}> when 'true' ->
				    let <Tail> =
					apply %% Line 911
					      'trim_t'/3
					    (%% Line 911
					     Cont, %% Line 911
						   0, %% Line 911
						      Seps)
				    in  %% Line 912
					case apply 'is_empty'/1
						 (Tail) of
					  %% Line 913
					  <'true'> when 'true' ->
					      let <_15> =
						  call %% Line 914
						       'erlang':%% Line 914
								'byte_size'
						      (%% Line 914
						       Bin)
					      in  let <_14> =
						      call %% Line 914
							   'erlang':%% Line 914
								    'byte_size'
							  (%% Line 914
							   SepStart)
						  in  let <KeepSz> =
							  call %% Line 914
							       'erlang':%% Line 914
									'-'
							      (_15, _14)
						      in  %% Line 915
							  case Bin of
							    <#{#<Keep>(KeepSz,8,'binary',['unsigned'|['big']]),
							       #<_51>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
								%% Line 916
								Keep
							    ( <_17> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_17})
							      -| ['compiler_generated'] )
							  end
					  %% Line 917
					  <'false'> when 'true' ->
					      let <Used> =
						  apply %% Line 918
							'cp_prefix'/2
						      (%% Line 918
						       Cont0, %% Line 918
							      Cont)
					      in  let <_19> =
						      case %% Line 919
							   <Used,Tail> of
							%% Line 1547
							( <_77,( []
								 -| ['compiler_generated'] )> when ( 'true'
												     -| ['compiler_generated'] ) ->
							      _77
							  -| ['compiler_generated'] )
							%% Line 1548
							( <( #{}#
							     -| ['compiler_generated'] ),St> when ( 'true'
												    -| ['compiler_generated'] ) ->
							      St
							  -| ['compiler_generated'] )
							%% Line 1549
							( <( []
							     -| ['compiler_generated'] ),St> when ( 'true'
												    -| ['compiler_generated'] ) ->
							      St
							  -| ['compiler_generated'] )
							%% Line 1550
							( <_78,St> when ( 'true'
									  -| ['compiler_generated'] ) ->
							      ( [_78|St]
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						  in  %% Line 1547
						      ( case <Bin,_19> of
							  ( <_81,( []
								   -| ['compiler_generated'] )> when ( 'true'
												       -| ['compiler_generated'] ) ->
								_81
							    -| ['compiler_generated'] )
							  %% Line 1548
							  ( <( #{}#
							       -| ['compiler_generated'] ),St> when ( 'true'
												      -| ['compiler_generated'] ) ->
								St
							    -| ['compiler_generated'] )
							  %% Line 1549
							  ( <( []
							       -| ['compiler_generated'] ),St> when ( 'true'
												      -| ['compiler_generated'] ) ->
								St
							    -| ['compiler_generated'] )
							  %% Line 1550
							  ( <_82,St> when ( 'true'
									    -| ['compiler_generated'] ) ->
								( [_82|St]
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
					  ( <_20> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_20})
					    -| ['compiler_generated'] )
					end
				%% Line 921
				<[NonSep|Cont]>
				    when call 'erlang':'is_binary'
					  (NonSep) ->
				    let <_22> =
					call %% Line 922
					     'erlang':%% Line 922
						      'byte_size'
					    (%% Line 922
					     Bin)
				    in  let <_21> =
					    call %% Line 922
						 'erlang':%% Line 922
							  'byte_size'
						(%% Line 922
						 NonSep)
					in  let <KeepSz> =
						call %% Line 922
						     'erlang':%% Line 922
							      '-'
						    (_22, _21)
					    in  %% Line 923
						apply 'trim_t'/3
						    ([Bin|Cont], KeepSz, Seps)
				( <_24> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_24})
				  -| ['compiler_generated'] )
			      end
			  ( <_25> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_25})
			    -| ['compiler_generated'] )
			end
		( <_10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 926
	  <Str,0,Seps = {GCs,_52,_53}>
	      when call 'erlang':'is_list'
		    (Str) ->
	      %% Line 927
	      case call 'unicode_util':'gc'
		       (Str) of
		%% Line 928
		<[GC|Cs1]> when 'true' ->
		    %% Line 929
		    case call 'lists':'member'
			     (GC, GCs) of
		      %% Line 930
		      <'true'> when 'true' ->
			  let <Tail> =
			      apply %% Line 931
				    'trim_t'/3
				  (%% Line 931
				   Cs1, %% Line 931
					0, %% Line 931
					   Seps)
			  in  %% Line 932
			      case apply 'is_empty'/1
				       (Tail) of
				%% Line 933
				<'true'> when 'true' ->
				    []
				%% Line 934
				<'false'> when 'true' ->
				    %% Line 1541
				    ( case <GC,Tail> of
					( <Char,( #{}#
						  -| ['compiler_generated'] )>
					      when ( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'is_integer'
										       -| ['compiler_generated'] )
						      (Char)
						  -| ['compiler_generated'] ) ->
					      ( [Char|( []
							-| ['compiler_generated'] )]
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					%% Line 1542
					( <Char,( #{}#
						  -| ['compiler_generated'] )>
					      when ( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'is_list'
										       -| ['compiler_generated'] )
						      (Char)
						  -| ['compiler_generated'] ) ->
					      Char
					  -| ['compiler_generated'] )
					%% Line 1543
					( <Char,Bin>
					      when ( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'is_binary'
										       -| ['compiler_generated'] )
						      (Bin)
						  -| ['compiler_generated'] ) ->
					      ( [Char|( [Bin|( []
							       -| ['compiler_generated'] )]
							-| ['compiler_generated'] )]
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					%% Line 1544
					( <Char,_85>
					      when ( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'is_integer'
										       -| ['compiler_generated'] )
						      (Char)
						  -| ['compiler_generated'] ) ->
					      ( [Char|_85]
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					%% Line 1545
					( <_86,_87>
					      when ( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'is_list'
										       -| ['compiler_generated'] )
						      (_86)
						  -| ['compiler_generated'] ) ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( '++'
										     -| ['compiler_generated'] )
						    (_86, _87)
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					( <_3,_88> when ( 'true'
							  -| ['compiler_generated'] ) ->
					      ( primop ( 'match_fail'
							 -| ['compiler_generated'] )
						    (( {( 'function_clause'
							  -| ['compiler_generated'] ),_3,_88}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				( <_27> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_27})
				  -| ['compiler_generated'] )
			      end
		      %% Line 936
		      <'false'> when 'true' ->
			  let <_28> =
			      apply %% Line 937
				    'trim_t'/3
				  (%% Line 937
				   Cs1, %% Line 937
					0, %% Line 937
					   Seps)
			  in  %% Line 1541
			      ( case <GC,_28> of
				  ( <Char,( #{}#
					    -| ['compiler_generated'] )>
					when ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'is_integer'
										 -| ['compiler_generated'] )
						(Char)
					    -| ['compiler_generated'] ) ->
					( [Char|( []
						  -| ['compiler_generated'] )]
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  %% Line 1542
				  ( <Char,( #{}#
					    -| ['compiler_generated'] )>
					when ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'is_list'
										 -| ['compiler_generated'] )
						(Char)
					    -| ['compiler_generated'] ) ->
					Char
				    -| ['compiler_generated'] )
				  %% Line 1543
				  ( <Char,Bin>
					when ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'is_binary'
										 -| ['compiler_generated'] )
						(Bin)
					    -| ['compiler_generated'] ) ->
					( [Char|( [Bin|( []
							 -| ['compiler_generated'] )]
						  -| ['compiler_generated'] )]
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  %% Line 1544
				  ( <Char,_91>
					when ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'is_integer'
										 -| ['compiler_generated'] )
						(Char)
					    -| ['compiler_generated'] ) ->
					( [Char|_91]
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  %% Line 1545
				  ( <_92,_93>
					when ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'is_list'
										 -| ['compiler_generated'] )
						(_92)
					    -| ['compiler_generated'] ) ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( '++'
									       -| ['compiler_generated'] )
					      (_92, _93)
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <_3,_94> when ( 'true'
						    -| ['compiler_generated'] ) ->
					( primop ( 'match_fail'
						   -| ['compiler_generated'] )
					      (( {( 'function_clause'
						    -| ['compiler_generated'] ),_3,_94}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
		      ( <_29> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_29})
			-| ['compiler_generated'] )
		    end
		%% Line 939
		<[]> when 'true' ->
		    []
		( <_30> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_30})
		  -| ['compiler_generated'] )
	      end
	  %% Line 941
	  <Bin,N,Seps0 = {GCs,_54,_55}>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 942
	      case Bin of
		<#{#<_56>(N,8,'binary',['unsigned'|['big']]),
		   #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <Seps> =
			case %% Line 943
			     Seps0 of
			  %% Line 1585
			  ( <( {Sep,CPs,( 'undefined'
					  -| ['compiler_generated'] )}
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( let <_96> =
				      apply %% Line 1586
					    'bin_pattern'/1
					  (%% Line 1586
					   CPs)
				  in  ( let <_97> =
					    call %% Line 1586
						 ( 'binary'
						   -| ['compiler_generated'] ):%% Line 1586
									       ( 'compile_pattern'
										 -| ['compiler_generated'] )
						(_96)
					in  %% Line 1586
					    ( {Sep,CPs,_97}
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1587
			  ( <( Compiled = ( {_4,_5,_6}
					    -| ['compiler_generated'] )
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				Compiled
			    -| ['compiler_generated'] )
			  ( <_3> when ( 'true'
					-| ['compiler_generated'] ) ->
				%% Line 1585
				( primop ( 'match_fail'
					   -| ['compiler_generated'] )
				      (( {( 'function_clause'
					    -| ['compiler_generated'] ),_3}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    in  %% Line 944
			case apply 'bin_search'/3
				 (Rest, [], Seps) of
			  %% Line 945
			  <{'nomatch',_57}> when 'true' ->
			      Bin
			  %% Line 946
			  <[SepStart|[]]> when 'true' ->
			      %% Line 947
			      case apply 'bin_search_inv'/3
				       (SepStart, [], GCs) of
				%% Line 948
				<{'nomatch',_58}> when 'true' ->
				    let <_34> =
					call %% Line 949
					     'erlang':%% Line 949
						      'byte_size'
					    (%% Line 949
					     Bin)
				    in  let <_33> =
					    call %% Line 949
						 'erlang':%% Line 949
							  'byte_size'
						(%% Line 949
						 SepStart)
					in  let <KeepSz> =
						call %% Line 949
						     'erlang':%% Line 949
							      '-'
						    (_34, _33)
					    in  %% Line 950
						case Bin of
						  <#{#<Keep>(KeepSz,8,'binary',['unsigned'|['big']]),
						     #<_59>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
						      %% Line 951
						      Keep
						  ( <_36> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_36})
						    -| ['compiler_generated'] )
						end
				%% Line 952
				<[NonSep|[]]> when 'true' ->
				    let <_38> =
					call %% Line 953
					     'erlang':%% Line 953
						      'byte_size'
					    (%% Line 953
					     Bin)
				    in  let <_37> =
					    call %% Line 953
						 'erlang':%% Line 953
							  'byte_size'
						(%% Line 953
						 NonSep)
					in  let <KeepSz> =
						call %% Line 953
						     'erlang':%% Line 953
							      '-'
						    (_38, _37)
					    in  %% Line 954
						apply 'trim_t'/3
						    (Bin, KeepSz, Seps)
				( <_40> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_40})
				  -| ['compiler_generated'] )
			      end
			  ( <_41> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_41})
			    -| ['compiler_generated'] )
			end
		( <_31> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_31})
		  -| ['compiler_generated'] )
	      end
	  ( <_44,_43,_42> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_44,_43,_42})
		  -| [{'function_name',{'trim_t',3}}] )
	    -| ['compiler_generated'] )
	end
'take_l'/3 =
    %% Line 959
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Str = [CP1|Cont = [CP2|_33]],Seps,Acc>
	      when %% Line 960
		try
		    let <_3> =
			call 'erlang':'<'
			    (CP1, 256)
		    in  let <_4> =
			    call 'erlang':'<'
				(CP2, 256)
			in  let <_5> =
				call 'erlang':'=/='
				    (CP1, 13)
			    in  let <_6> =
				    call 'erlang':'and'
					(_4, _5)
				in  call 'erlang':'and'
					(_3, _6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 961
	      case call 'lists':'member'
		       (CP1, Seps) of
		%% Line 962
		<'true'> when 'true' ->
		    apply 'take_l'/3
			(Cont, Seps, [CP1|Acc])
		%% Line 963
		<'false'> when 'true' ->
		    let <_7> =
			case Acc of
			  %% Line 1537
			  ( <( [B|( []
				    -| ['compiler_generated'] )]
			       -| ['compiler_generated'] )>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_binary'
									 -| ['compiler_generated'] )
					(B)
				    -| ['compiler_generated'] ) ->
				B
			    -| ['compiler_generated'] )
			  %% Line 1538
			  ( <L>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_list'
									 -| ['compiler_generated'] )
					(Acc)
				    -| ['compiler_generated'] ) ->
				( call ( 'lists'
					 -| ['compiler_generated'] ):( 'reverse'
								       -| ['compiler_generated'] )
				      (L)
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1539
			  ( <C>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_integer'
									 -| ['compiler_generated'] )
					(Acc)
				    -| ['compiler_generated'] ) ->
				C
			    -| ['compiler_generated'] )
			  ( <_39> when ( 'true'
					 -| ['compiler_generated'] ) ->
				%% Line 1537
				( primop ( 'match_fail'
					   -| ['compiler_generated'] )
				      (( {( 'function_clause'
					    -| ['compiler_generated'] ),_39}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    in  {_7,Str}
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 965
	  <[Bin|Cont0],Seps,Acc>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 966
	      case apply 'bin_search_inv'/3
		       (Bin, Cont0, Seps) of
		%% Line 967
		<{'nomatch',Cont}> when 'true' ->
		    let <Used> =
			apply %% Line 968
			      'cp_prefix'/2
			    (%% Line 968
			     Cont0, %% Line 968
				    Cont)
		    in  let <_10> =
			    call %% Line 969
				 'unicode':%% Line 969
					   'characters_to_binary'
				(%% Line 969
				 [Bin|Used])
			in  %% Line 969
			    apply 'take_l'/3
				(Cont, Seps, [_10|Acc])
		%% Line 970
		<After = [Bin1|_34]>
		    when call 'erlang':'is_binary'
			  (Bin1) ->
		    let <_12> =
			call %% Line 971
			     'erlang':%% Line 971
				      'byte_size'
			    (%% Line 971
			     Bin)
		    in  let <_11> =
			    call %% Line 971
				 'erlang':%% Line 971
					  'byte_size'
				(%% Line 971
				 Bin1)
			in  let <First> =
				call %% Line 971
				     'erlang':%% Line 971
					      '-'
				    (_12, _11)
			    in  %% Line 972
				case Bin of
				  <#{#<Keep>(First,8,'binary',['unsigned'|['big']]),
				     #<_35>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				      let <_15> =
					  case %% Line 973
					       <Keep,Acc> of
					    %% Line 1532
					    ( <Token,( []
						       -| ['compiler_generated'] )> when ( 'true'
											   -| ['compiler_generated'] ) ->
						  Token
					      -| ['compiler_generated'] )
					    %% Line 1533
					    ( <BinPart,( [C|( []
							      -| ['compiler_generated'] )]
							 -| ['compiler_generated'] )>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_integer'
											   -| ['compiler_generated'] )
							  (C)
						      -| ['compiler_generated'] ) ->
						  ( #{( #<C>(( 'undefined'
							       -| ['compiler_generated'] ),( 'undefined'
											     -| ['compiler_generated'] ),( 'utf8'
															   -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			 -| ['compiler_generated'] ))
							-| ['compiler_generated'] ),
						      ( #<BinPart>(( 'all'
								     -| ['compiler_generated'] ),( 8
												   -| ['compiler_generated'] ),( 'binary'
																 -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )}#
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1534
					    ( <( #{}#
						 -| ['compiler_generated'] ),Tkn> when ( 'true'
											 -| ['compiler_generated'] ) ->
						  ( call ( 'lists'
							   -| ['compiler_generated'] ):( 'reverse'
											 -| ['compiler_generated'] )
							(Tkn)
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1535
					    ( <BinPart,Cs> when ( 'true'
								  -| ['compiler_generated'] ) ->
						  ( let <_42> =
							call ( 'lists'
							       -| ['compiler_generated'] ):( 'reverse'
											     -| ['compiler_generated'] )
							    (Cs)
						    in  ( [_42|( [BinPart|( []
									    -| ['compiler_generated'] )]
								 -| ['compiler_generated'] )]
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				      in  %% Line 973
					  {_15,After}
				  ( <_14> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_14})
				    -| ['compiler_generated'] )
				end
		( <_16> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_16})
		  -| ['compiler_generated'] )
	      end
	  %% Line 975
	  <Str,Seps,Acc>
	      when call 'erlang':'is_list'
		    (Str) ->
	      %% Line 976
	      case call 'unicode_util':'gc'
		       (Str) of
		%% Line 977
		<[C|Cs]> when 'true' ->
		    %% Line 978
		    case call 'lists':'member'
			     (C, Seps) of
		      %% Line 979
		      <'true'> when 'true' ->
			  let <_17> =
			      case C of
				%% Line 1537
				( <( [B|( []
					  -| ['compiler_generated'] )]
				     -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_binary'
									       -| ['compiler_generated'] )
					      (B)
					  -| ['compiler_generated'] ) ->
				      B
				  -| ['compiler_generated'] )
				%% Line 1538
				( <L>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_list'
									       -| ['compiler_generated'] )
					      (C)
					  -| ['compiler_generated'] ) ->
				      ( call ( 'lists'
					       -| ['compiler_generated'] ):( 'reverse'
									     -| ['compiler_generated'] )
					    (L)
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1539
				( <_44>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_integer'
									       -| ['compiler_generated'] )
					      (C)
					  -| ['compiler_generated'] ) ->
				      _44
				  -| ['compiler_generated'] )
				( <_45> when ( 'true'
					       -| ['compiler_generated'] ) ->
				      %% Line 1537
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'function_clause'
						  -| ['compiler_generated'] ),_45}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  let <_18> =
				  case <_17,Acc> of
				    %% Line 1541
				    ( <Char,( #{}#
					      -| ['compiler_generated'] )>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_integer'
										   -| ['compiler_generated'] )
						  (Char)
					      -| ['compiler_generated'] ) ->
					  ( [Char|( []
						    -| ['compiler_generated'] )]
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    %% Line 1542
				    ( <Char,( #{}#
					      -| ['compiler_generated'] )>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_list'
										   -| ['compiler_generated'] )
						  (Char)
					      -| ['compiler_generated'] ) ->
					  Char
				      -| ['compiler_generated'] )
				    %% Line 1543
				    ( <Char,Bin>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_binary'
										   -| ['compiler_generated'] )
						  (Bin)
					      -| ['compiler_generated'] ) ->
					  ( [Char|( [Bin|( []
							   -| ['compiler_generated'] )]
						    -| ['compiler_generated'] )]
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    %% Line 1544
				    ( <Char,_48>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_integer'
										   -| ['compiler_generated'] )
						  (Char)
					      -| ['compiler_generated'] ) ->
					  ( [Char|_48]
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    %% Line 1545
				    ( <GC,_49>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_list'
										   -| ['compiler_generated'] )
						  (GC)
					      -| ['compiler_generated'] ) ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( '++'
										 -| ['compiler_generated'] )
						(GC, _49)
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <_3,_50> when ( 'true'
						      -| ['compiler_generated'] ) ->
					  %% Line 1541
					  ( primop ( 'match_fail'
						     -| ['compiler_generated'] )
						(( {( 'function_clause'
						      -| ['compiler_generated'] ),_3,_50}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      in  apply 'take_l'/3
				      (Cs, Seps, _18)
		      %% Line 980
		      <'false'> when 'true' ->
			  let <_19> =
			      case Acc of
				%% Line 1537
				( <( [B|( []
					  -| ['compiler_generated'] )]
				     -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_binary'
									       -| ['compiler_generated'] )
					      (B)
					  -| ['compiler_generated'] ) ->
				      B
				  -| ['compiler_generated'] )
				%% Line 1538
				( <L>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_list'
									       -| ['compiler_generated'] )
					      (Acc)
					  -| ['compiler_generated'] ) ->
				      ( call ( 'lists'
					       -| ['compiler_generated'] ):( 'reverse'
									     -| ['compiler_generated'] )
					    (L)
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1539
				( <_52>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_integer'
									       -| ['compiler_generated'] )
					      (Acc)
					  -| ['compiler_generated'] ) ->
				      _52
				  -| ['compiler_generated'] )
				( <_53> when ( 'true'
					       -| ['compiler_generated'] ) ->
				      %% Line 1537
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'function_clause'
						  -| ['compiler_generated'] ),_53}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  {_19,Str}
		      ( <_20> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_20})
			-| ['compiler_generated'] )
		    end
		%% Line 982
		<[]> when 'true' ->
		    let <_21> =
			case Acc of
			  %% Line 1537
			  ( <( [B|( []
				    -| ['compiler_generated'] )]
			       -| ['compiler_generated'] )>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_binary'
									 -| ['compiler_generated'] )
					(B)
				    -| ['compiler_generated'] ) ->
				B
			    -| ['compiler_generated'] )
			  %% Line 1538
			  ( <L>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_list'
									 -| ['compiler_generated'] )
					(Acc)
				    -| ['compiler_generated'] ) ->
				( call ( 'lists'
					 -| ['compiler_generated'] ):( 'reverse'
								       -| ['compiler_generated'] )
				      (L)
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1539
			  ( <C>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_integer'
									 -| ['compiler_generated'] )
					(Acc)
				    -| ['compiler_generated'] ) ->
				C
			    -| ['compiler_generated'] )
			  ( <_55> when ( 'true'
					 -| ['compiler_generated'] ) ->
				%% Line 1537
				( primop ( 'match_fail'
					   -| ['compiler_generated'] )
				      (( {( 'function_clause'
					    -| ['compiler_generated'] ),_55}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    in  {_21,[]}
		( <_22> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_22})
		  -| ['compiler_generated'] )
	      end
	  %% Line 984
	  <Bin,Seps,Acc>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 985
	      case apply 'bin_search_inv'/3
		       (Bin, [], Seps) of
		%% Line 986
		<{'nomatch',_36}> when 'true' ->
		    let <_23> =
			case %% Line 987
			     <Bin,Acc> of
			  %% Line 1532
			  ( <Token,( []
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				Token
			    -| ['compiler_generated'] )
			  %% Line 1533
			  ( <BinPart,( [C|( []
					    -| ['compiler_generated'] )]
				       -| ['compiler_generated'] )>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_integer'
									 -| ['compiler_generated'] )
					(C)
				    -| ['compiler_generated'] ) ->
				( #{( #<C>(( 'undefined'
					     -| ['compiler_generated'] ),( 'undefined'
									   -| ['compiler_generated'] ),( 'utf8'
													 -| ['compiler_generated'] ),( ['unsigned'|['big']]
																       -| ['compiler_generated'] ))
				      -| ['compiler_generated'] ),
				    ( #<BinPart>(( 'all'
						   -| ['compiler_generated'] ),( 8
										 -| ['compiler_generated'] ),( 'binary'
													       -| ['compiler_generated'] ),( ['unsigned'|['big']]
																	     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )}#
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1534
			  ( <( #{}#
			       -| ['compiler_generated'] ),Tkn> when ( 'true'
								       -| ['compiler_generated'] ) ->
				( call ( 'lists'
					 -| ['compiler_generated'] ):( 'reverse'
								       -| ['compiler_generated'] )
				      (Tkn)
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1535
			  ( <BinPart,Cs> when ( 'true'
						-| ['compiler_generated'] ) ->
				( let <_58> =
				      call ( 'lists'
					     -| ['compiler_generated'] ):( 'reverse'
									   -| ['compiler_generated'] )
					  (Cs)
				  in  ( [_58|( [BinPart|( []
							  -| ['compiler_generated'] )]
					       -| ['compiler_generated'] )]
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    in  %% Line 987
			{_23,#{}#}
		%% Line 988
		<[After|[]]> when 'true' ->
		    let <_25> =
			call %% Line 989
			     'erlang':%% Line 989
				      'byte_size'
			    (%% Line 989
			     Bin)
		    in  let <_24> =
			    call %% Line 989
				 'erlang':%% Line 989
					  'byte_size'
				(%% Line 989
				 After)
			in  let <First> =
				call %% Line 989
				     'erlang':%% Line 989
					      '-'
				    (_25, _24)
			    in  %% Line 990
				case Bin of
				  <#{#<Keep>(First,8,'binary',['unsigned'|['big']]),
				     #<_37>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				      let <_28> =
					  case %% Line 991
					       <Keep,Acc> of
					    %% Line 1532
					    ( <Token,( []
						       -| ['compiler_generated'] )> when ( 'true'
											   -| ['compiler_generated'] ) ->
						  Token
					      -| ['compiler_generated'] )
					    %% Line 1533
					    ( <BinPart,( [C|( []
							      -| ['compiler_generated'] )]
							 -| ['compiler_generated'] )>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_integer'
											   -| ['compiler_generated'] )
							  (C)
						      -| ['compiler_generated'] ) ->
						  ( #{( #<C>(( 'undefined'
							       -| ['compiler_generated'] ),( 'undefined'
											     -| ['compiler_generated'] ),( 'utf8'
															   -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			 -| ['compiler_generated'] ))
							-| ['compiler_generated'] ),
						      ( #<BinPart>(( 'all'
								     -| ['compiler_generated'] ),( 8
												   -| ['compiler_generated'] ),( 'binary'
																 -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )}#
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1534
					    ( <( #{}#
						 -| ['compiler_generated'] ),Tkn> when ( 'true'
											 -| ['compiler_generated'] ) ->
						  ( call ( 'lists'
							   -| ['compiler_generated'] ):( 'reverse'
											 -| ['compiler_generated'] )
							(Tkn)
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1535
					    ( <BinPart,Cs> when ( 'true'
								  -| ['compiler_generated'] ) ->
						  ( let <_61> =
							call ( 'lists'
							       -| ['compiler_generated'] ):( 'reverse'
											     -| ['compiler_generated'] )
							    (Cs)
						    in  ( [_61|( [BinPart|( []
									    -| ['compiler_generated'] )]
								 -| ['compiler_generated'] )]
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				      in  %% Line 991
					  {_28,After}
				  ( <_27> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_27})
				    -| ['compiler_generated'] )
				end
		( <_29> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_29})
		  -| ['compiler_generated'] )
	      end
	  ( <_32,_31,_30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_32,_31,_30})
		  -| [{'function_name',{'take_l',3}}] )
	    -| ['compiler_generated'] )
	end
'take_lc'/3 =
    %% Line 995
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Str0 = [CP1|Cont],Seps = {GCs,CPs,_36},Acc>
	      when call 'erlang':'is_integer'
		    (CP1) ->
	      %% Line 996
	      case call 'lists':'member'
		       (CP1, CPs) of
		%% Line 997
		<'true'> when 'true' ->
		    %% Line 998
		    case call 'unicode_util':'gc'
			     (Str0) of
		      <[GC|Str]> when 'true' ->
			  %% Line 999
			  case call 'lists':'member'
				   (GC, GCs) of
			    %% Line 1000
			    <'false'> when 'true' ->
				let <_4> =
				    case GC of
				      %% Line 1537
				      ( <( [B|( []
						-| ['compiler_generated'] )]
					   -| ['compiler_generated'] )>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_binary'
										     -| ['compiler_generated'] )
						    (B)
						-| ['compiler_generated'] ) ->
					    B
					-| ['compiler_generated'] )
				      %% Line 1538
				      ( <L>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_list'
										     -| ['compiler_generated'] )
						    (GC)
						-| ['compiler_generated'] ) ->
					    ( call ( 'lists'
						     -| ['compiler_generated'] ):( 'reverse'
										   -| ['compiler_generated'] )
						  (L)
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      %% Line 1539
				      ( <C>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_integer'
										     -| ['compiler_generated'] )
						    (GC)
						-| ['compiler_generated'] ) ->
					    C
					-| ['compiler_generated'] )
				      ( <_44> when ( 'true'
						     -| ['compiler_generated'] ) ->
					    %% Line 1537
					    ( primop ( 'match_fail'
						       -| ['compiler_generated'] )
						  (( {( 'function_clause'
							-| ['compiler_generated'] ),_44}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				in  let <_5> =
					case <_4,Acc> of
					  %% Line 1541
					  ( <Char,( #{}#
						    -| ['compiler_generated'] )>
						when ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'is_integer'
											 -| ['compiler_generated'] )
							(Char)
						    -| ['compiler_generated'] ) ->
						( [Char|( []
							  -| ['compiler_generated'] )]
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  %% Line 1542
					  ( <Char,( #{}#
						    -| ['compiler_generated'] )>
						when ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'is_list'
											 -| ['compiler_generated'] )
							(Char)
						    -| ['compiler_generated'] ) ->
						Char
					    -| ['compiler_generated'] )
					  %% Line 1543
					  ( <Char,Bin>
						when ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'is_binary'
											 -| ['compiler_generated'] )
							(Bin)
						    -| ['compiler_generated'] ) ->
						( [Char|( [Bin|( []
								 -| ['compiler_generated'] )]
							  -| ['compiler_generated'] )]
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  %% Line 1544
					  ( <Char,_47>
						when ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'is_integer'
											 -| ['compiler_generated'] )
							(Char)
						    -| ['compiler_generated'] ) ->
						( [Char|_47]
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  %% Line 1545
					  ( <_48,_49>
						when ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'is_list'
											 -| ['compiler_generated'] )
							(_48)
						    -| ['compiler_generated'] ) ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( '++'
										       -| ['compiler_generated'] )
						      (_48, _49)
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_3,_50> when ( 'true'
							    -| ['compiler_generated'] ) ->
						%% Line 1541
						( primop ( 'match_fail'
							   -| ['compiler_generated'] )
						      (( {( 'function_clause'
							    -| ['compiler_generated'] ),_3,_50}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
				    in  apply 'take_lc'/3
					    (Str, Seps, _5)
			    %% Line 1001
			    <'true'> when 'true' ->
				let <_6> =
				    case Acc of
				      %% Line 1537
				      ( <( [B|( []
						-| ['compiler_generated'] )]
					   -| ['compiler_generated'] )>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_binary'
										     -| ['compiler_generated'] )
						    (B)
						-| ['compiler_generated'] ) ->
					    B
					-| ['compiler_generated'] )
				      %% Line 1538
				      ( <L>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_list'
										     -| ['compiler_generated'] )
						    (Acc)
						-| ['compiler_generated'] ) ->
					    ( call ( 'lists'
						     -| ['compiler_generated'] ):( 'reverse'
										   -| ['compiler_generated'] )
						  (L)
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      %% Line 1539
				      ( <C>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_integer'
										     -| ['compiler_generated'] )
						    (Acc)
						-| ['compiler_generated'] ) ->
					    C
					-| ['compiler_generated'] )
				      ( <_52> when ( 'true'
						     -| ['compiler_generated'] ) ->
					    %% Line 1537
					    ( primop ( 'match_fail'
						       -| ['compiler_generated'] )
						  (( {( 'function_clause'
							-| ['compiler_generated'] ),_52}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				in  {_6,Str0}
			    ( <_7> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_7})
			      -| ['compiler_generated'] )
			  end
		      ( <_3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_3})
			-| ['compiler_generated'] )
		    end
		%% Line 1003
		<'false'> when 'true' ->
		    let <_8> =
			case %% Line 1004
			     <CP1,Acc> of
			  %% Line 1541
			  ( <Char,( #{}#
				    -| ['compiler_generated'] )>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_integer'
									 -| ['compiler_generated'] )
					(Char)
				    -| ['compiler_generated'] ) ->
				( [Char|( []
					  -| ['compiler_generated'] )]
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1542
			  ( <Char,( #{}#
				    -| ['compiler_generated'] )>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_list'
									 -| ['compiler_generated'] )
					(Char)
				    -| ['compiler_generated'] ) ->
				Char
			    -| ['compiler_generated'] )
			  %% Line 1543
			  ( <Char,Bin>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_binary'
									 -| ['compiler_generated'] )
					(Bin)
				    -| ['compiler_generated'] ) ->
				( [Char|( [Bin|( []
						 -| ['compiler_generated'] )]
					  -| ['compiler_generated'] )]
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1544
			  ( <Char,Str>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_integer'
									 -| ['compiler_generated'] )
					(Char)
				    -| ['compiler_generated'] ) ->
				( [Char|Str]
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1545
			  ( <GC,Str>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_list'
									 -| ['compiler_generated'] )
					(GC)
				    -| ['compiler_generated'] ) ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '++'
								       -| ['compiler_generated'] )
				      (GC, Str)
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <_3,_55> when ( 'true'
					    -| ['compiler_generated'] ) ->
				%% Line 1541
				( primop ( 'match_fail'
					   -| ['compiler_generated'] )
				      (( {( 'function_clause'
					    -| ['compiler_generated'] ),_3,_55}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    in  %% Line 1004
			apply 'take_lc'/3
			    (Cont, Seps, _8)
		( <_9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1006
	  <[Bin|Cont0],Seps0,Acc>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      let <Seps> =
		  case %% Line 1007
		       Seps0 of
		    %% Line 1585
		    ( <( {Sep,CPs,( 'undefined'
				    -| ['compiler_generated'] )}
			 -| ['compiler_generated'] )> when ( 'true'
							     -| ['compiler_generated'] ) ->
			  ( let <_57> =
				apply %% Line 1586
				      'bin_pattern'/1
				    (%% Line 1586
				     CPs)
			    in  ( let <_58> =
				      call %% Line 1586
					   ( 'binary'
					     -| ['compiler_generated'] ):%% Line 1586
									 ( 'compile_pattern'
									   -| ['compiler_generated'] )
					  (_57)
				  in  %% Line 1586
				      ( {Sep,CPs,_58}
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		    %% Line 1587
		    ( <( Compiled = ( {_4,_5,_6}
				      -| ['compiler_generated'] )
			 -| ['compiler_generated'] )> when ( 'true'
							     -| ['compiler_generated'] ) ->
			  Compiled
		      -| ['compiler_generated'] )
		    ( <_3> when ( 'true'
				  -| ['compiler_generated'] ) ->
			  %% Line 1585
			  ( primop ( 'match_fail'
				     -| ['compiler_generated'] )
				(( {( 'function_clause'
				      -| ['compiler_generated'] ),_3}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 1008
		  case apply 'bin_search'/3
			   (Bin, Cont0, Seps) of
		    %% Line 1009
		    <{'nomatch',Cont}> when 'true' ->
			let <Used> =
			    apply %% Line 1010
				  'cp_prefix'/2
				(%% Line 1010
				 Cont0, %% Line 1010
					Cont)
			in  let <_12> =
				call %% Line 1011
				     'unicode':%% Line 1011
					       'characters_to_binary'
				    (%% Line 1011
				     [Bin|Used])
			    in  %% Line 1011
				apply 'take_lc'/3
				    (Cont, Seps, [_12|Acc])
		    %% Line 1012
		    <After = [Bin1|_37]>
			when call 'erlang':'is_binary'
			      (Bin1) ->
			let <_14> =
			    call %% Line 1013
				 'erlang':%% Line 1013
					  'byte_size'
				(%% Line 1013
				 Bin)
			in  let <_13> =
				call %% Line 1013
				     'erlang':%% Line 1013
					      'byte_size'
				    (%% Line 1013
				     Bin1)
			    in  let <First> =
				    call %% Line 1013
					 'erlang':%% Line 1013
						  '-'
					(_14, _13)
				in  %% Line 1014
				    case Bin of
				      <#{#<Keep>(First,8,'binary',['unsigned'|['big']]),
					 #<_38>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
					  let <_17> =
					      case %% Line 1015
						   <Keep,Acc> of
						%% Line 1532
						( <Token,( []
							   -| ['compiler_generated'] )> when ( 'true'
											       -| ['compiler_generated'] ) ->
						      Token
						  -| ['compiler_generated'] )
						%% Line 1533
						( <BinPart,( [C|( []
								  -| ['compiler_generated'] )]
							     -| ['compiler_generated'] )>
						      when ( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'is_integer'
											       -| ['compiler_generated'] )
							      (C)
							  -| ['compiler_generated'] ) ->
						      ( #{( #<C>(( 'undefined'
								   -| ['compiler_generated'] ),( 'undefined'
												 -| ['compiler_generated'] ),( 'utf8'
															       -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			     -| ['compiler_generated'] ))
							    -| ['compiler_generated'] ),
							  ( #<BinPart>(( 'all'
									 -| ['compiler_generated'] ),( 8
												       -| ['compiler_generated'] ),( 'binary'
																     -| ['compiler_generated'] ),( ['unsigned'|['big']]
																				   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )}#
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						%% Line 1534
						( <( #{}#
						     -| ['compiler_generated'] ),Tkn> when ( 'true'
											     -| ['compiler_generated'] ) ->
						      ( call ( 'lists'
							       -| ['compiler_generated'] ):( 'reverse'
											     -| ['compiler_generated'] )
							    (Tkn)
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						%% Line 1535
						( <BinPart,Cs> when ( 'true'
								      -| ['compiler_generated'] ) ->
						      ( let <_61> =
							    call ( 'lists'
								   -| ['compiler_generated'] ):( 'reverse'
												 -| ['compiler_generated'] )
								(Cs)
							in  ( [_61|( [BinPart|( []
										-| ['compiler_generated'] )]
								     -| ['compiler_generated'] )]
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					  in  %% Line 1015
					      {_17,After}
				      ( <_16> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_16})
					-| ['compiler_generated'] )
				    end
		    ( <_18> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_18})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1017
	  <Str,Seps = {GCs,_39,_40},Acc>
	      when call 'erlang':'is_list'
		    (Str) ->
	      %% Line 1018
	      case call 'unicode_util':'gc'
		       (Str) of
		%% Line 1019
		<[C|Cs]> when 'true' ->
		    %% Line 1020
		    case call 'lists':'member'
			     (C, GCs) of
		      %% Line 1021
		      <'false'> when 'true' ->
			  let <_19> =
			      case C of
				%% Line 1537
				( <( [B|( []
					  -| ['compiler_generated'] )]
				     -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_binary'
									       -| ['compiler_generated'] )
					      (B)
					  -| ['compiler_generated'] ) ->
				      B
				  -| ['compiler_generated'] )
				%% Line 1538
				( <L>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_list'
									       -| ['compiler_generated'] )
					      (C)
					  -| ['compiler_generated'] ) ->
				      ( call ( 'lists'
					       -| ['compiler_generated'] ):( 'reverse'
									     -| ['compiler_generated'] )
					    (L)
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1539
				( <_63>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_integer'
									       -| ['compiler_generated'] )
					      (C)
					  -| ['compiler_generated'] ) ->
				      _63
				  -| ['compiler_generated'] )
				( <_64> when ( 'true'
					       -| ['compiler_generated'] ) ->
				      %% Line 1537
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'function_clause'
						  -| ['compiler_generated'] ),_64}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  let <_20> =
				  case <_19,Acc> of
				    %% Line 1541
				    ( <Char,( #{}#
					      -| ['compiler_generated'] )>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_integer'
										   -| ['compiler_generated'] )
						  (Char)
					      -| ['compiler_generated'] ) ->
					  ( [Char|( []
						    -| ['compiler_generated'] )]
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    %% Line 1542
				    ( <Char,( #{}#
					      -| ['compiler_generated'] )>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_list'
										   -| ['compiler_generated'] )
						  (Char)
					      -| ['compiler_generated'] ) ->
					  Char
				      -| ['compiler_generated'] )
				    %% Line 1543
				    ( <Char,Bin>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_binary'
										   -| ['compiler_generated'] )
						  (Bin)
					      -| ['compiler_generated'] ) ->
					  ( [Char|( [Bin|( []
							   -| ['compiler_generated'] )]
						    -| ['compiler_generated'] )]
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    %% Line 1544
				    ( <Char,_67>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_integer'
										   -| ['compiler_generated'] )
						  (Char)
					      -| ['compiler_generated'] ) ->
					  ( [Char|_67]
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    %% Line 1545
				    ( <GC,_68>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_list'
										   -| ['compiler_generated'] )
						  (GC)
					      -| ['compiler_generated'] ) ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( '++'
										 -| ['compiler_generated'] )
						(GC, _68)
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <_3,_69> when ( 'true'
						      -| ['compiler_generated'] ) ->
					  %% Line 1541
					  ( primop ( 'match_fail'
						     -| ['compiler_generated'] )
						(( {( 'function_clause'
						      -| ['compiler_generated'] ),_3,_69}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      in  apply 'take_lc'/3
				      (Cs, Seps, _20)
		      %% Line 1022
		      <'true'> when 'true' ->
			  let <_21> =
			      case Acc of
				%% Line 1537
				( <( [B|( []
					  -| ['compiler_generated'] )]
				     -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_binary'
									       -| ['compiler_generated'] )
					      (B)
					  -| ['compiler_generated'] ) ->
				      B
				  -| ['compiler_generated'] )
				%% Line 1538
				( <L>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_list'
									       -| ['compiler_generated'] )
					      (Acc)
					  -| ['compiler_generated'] ) ->
				      ( call ( 'lists'
					       -| ['compiler_generated'] ):( 'reverse'
									     -| ['compiler_generated'] )
					    (L)
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1539
				( <_71>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_integer'
									       -| ['compiler_generated'] )
					      (Acc)
					  -| ['compiler_generated'] ) ->
				      _71
				  -| ['compiler_generated'] )
				( <_72> when ( 'true'
					       -| ['compiler_generated'] ) ->
				      %% Line 1537
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'function_clause'
						  -| ['compiler_generated'] ),_72}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  {_21,Str}
		      ( <_22> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_22})
			-| ['compiler_generated'] )
		    end
		%% Line 1024
		<[]> when 'true' ->
		    let <_23> =
			case Acc of
			  %% Line 1537
			  ( <( [B|( []
				    -| ['compiler_generated'] )]
			       -| ['compiler_generated'] )>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_binary'
									 -| ['compiler_generated'] )
					(B)
				    -| ['compiler_generated'] ) ->
				B
			    -| ['compiler_generated'] )
			  %% Line 1538
			  ( <L>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_list'
									 -| ['compiler_generated'] )
					(Acc)
				    -| ['compiler_generated'] ) ->
				( call ( 'lists'
					 -| ['compiler_generated'] ):( 'reverse'
								       -| ['compiler_generated'] )
				      (L)
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1539
			  ( <C>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_integer'
									 -| ['compiler_generated'] )
					(Acc)
				    -| ['compiler_generated'] ) ->
				C
			    -| ['compiler_generated'] )
			  ( <_74> when ( 'true'
					 -| ['compiler_generated'] ) ->
				%% Line 1537
				( primop ( 'match_fail'
					   -| ['compiler_generated'] )
				      (( {( 'function_clause'
					    -| ['compiler_generated'] ),_74}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    in  {_23,[]}
		( <_24> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_24})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1026
	  <Bin,Seps0,Acc>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      let <Seps> =
		  case %% Line 1027
		       Seps0 of
		    %% Line 1585
		    ( <( {Sep,CPs,( 'undefined'
				    -| ['compiler_generated'] )}
			 -| ['compiler_generated'] )> when ( 'true'
							     -| ['compiler_generated'] ) ->
			  ( let <_76> =
				apply %% Line 1586
				      'bin_pattern'/1
				    (%% Line 1586
				     CPs)
			    in  ( let <_77> =
				      call %% Line 1586
					   ( 'binary'
					     -| ['compiler_generated'] ):%% Line 1586
									 ( 'compile_pattern'
									   -| ['compiler_generated'] )
					  (_76)
				  in  %% Line 1586
				      ( {Sep,CPs,_77}
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		    %% Line 1587
		    ( <( Compiled = ( {_4,_5,_6}
				      -| ['compiler_generated'] )
			 -| ['compiler_generated'] )> when ( 'true'
							     -| ['compiler_generated'] ) ->
			  Compiled
		      -| ['compiler_generated'] )
		    ( <_3> when ( 'true'
				  -| ['compiler_generated'] ) ->
			  %% Line 1585
			  ( primop ( 'match_fail'
				     -| ['compiler_generated'] )
				(( {( 'function_clause'
				      -| ['compiler_generated'] ),_3}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 1028
		  case apply 'bin_search'/3
			   (Bin, [], Seps) of
		    %% Line 1029
		    <{'nomatch',_41}> when 'true' ->
			let <_26> =
			    case %% Line 1030
				 <Bin,Acc> of
			      %% Line 1532
			      ( <Token,( []
					 -| ['compiler_generated'] )> when ( 'true'
									     -| ['compiler_generated'] ) ->
				    Token
				-| ['compiler_generated'] )
			      %% Line 1533
			      ( <BinPart,( [C|( []
						-| ['compiler_generated'] )]
					   -| ['compiler_generated'] )>
				    when ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'is_integer'
									     -| ['compiler_generated'] )
					    (C)
					-| ['compiler_generated'] ) ->
				    ( #{( #<C>(( 'undefined'
						 -| ['compiler_generated'] ),( 'undefined'
									       -| ['compiler_generated'] ),( 'utf8'
													     -| ['compiler_generated'] ),( ['unsigned'|['big']]
																	   -| ['compiler_generated'] ))
					  -| ['compiler_generated'] ),
					( #<BinPart>(( 'all'
						       -| ['compiler_generated'] ),( 8
										     -| ['compiler_generated'] ),( 'binary'
														   -| ['compiler_generated'] ),( ['unsigned'|['big']]
																		 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )}#
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      %% Line 1534
			      ( <( #{}#
				   -| ['compiler_generated'] ),Tkn> when ( 'true'
									   -| ['compiler_generated'] ) ->
				    ( call ( 'lists'
					     -| ['compiler_generated'] ):( 'reverse'
									   -| ['compiler_generated'] )
					  (Tkn)
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      %% Line 1535
			      ( <BinPart,Cs> when ( 'true'
						    -| ['compiler_generated'] ) ->
				    ( let <_80> =
					  call ( 'lists'
						 -| ['compiler_generated'] ):( 'reverse'
									       -| ['compiler_generated'] )
					      (Cs)
				      in  ( [_80|( [BinPart|( []
							      -| ['compiler_generated'] )]
						   -| ['compiler_generated'] )]
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			in  %% Line 1030
			    {_26,#{}#}
		    %% Line 1031
		    <[After|[]]> when 'true' ->
			let <_28> =
			    call %% Line 1032
				 'erlang':%% Line 1032
					  'byte_size'
				(%% Line 1032
				 Bin)
			in  let <_27> =
				call %% Line 1032
				     'erlang':%% Line 1032
					      'byte_size'
				    (%% Line 1032
				     After)
			    in  let <First> =
				    call %% Line 1032
					 'erlang':%% Line 1032
						  '-'
					(_28, _27)
				in  %% Line 1033
				    case Bin of
				      <#{#<Keep>(First,8,'binary',['unsigned'|['big']]),
					 #<_42>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
					  let <_31> =
					      case %% Line 1034
						   <Keep,Acc> of
						%% Line 1532
						( <Token,( []
							   -| ['compiler_generated'] )> when ( 'true'
											       -| ['compiler_generated'] ) ->
						      Token
						  -| ['compiler_generated'] )
						%% Line 1533
						( <BinPart,( [C|( []
								  -| ['compiler_generated'] )]
							     -| ['compiler_generated'] )>
						      when ( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'is_integer'
											       -| ['compiler_generated'] )
							      (C)
							  -| ['compiler_generated'] ) ->
						      ( #{( #<C>(( 'undefined'
								   -| ['compiler_generated'] ),( 'undefined'
												 -| ['compiler_generated'] ),( 'utf8'
															       -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			     -| ['compiler_generated'] ))
							    -| ['compiler_generated'] ),
							  ( #<BinPart>(( 'all'
									 -| ['compiler_generated'] ),( 8
												       -| ['compiler_generated'] ),( 'binary'
																     -| ['compiler_generated'] ),( ['unsigned'|['big']]
																				   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )}#
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						%% Line 1534
						( <( #{}#
						     -| ['compiler_generated'] ),Tkn> when ( 'true'
											     -| ['compiler_generated'] ) ->
						      ( call ( 'lists'
							       -| ['compiler_generated'] ):( 'reverse'
											     -| ['compiler_generated'] )
							    (Tkn)
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						%% Line 1535
						( <BinPart,Cs> when ( 'true'
								      -| ['compiler_generated'] ) ->
						      ( let <_83> =
							    call ( 'lists'
								   -| ['compiler_generated'] ):( 'reverse'
												 -| ['compiler_generated'] )
								(Cs)
							in  ( [_83|( [BinPart|( []
										-| ['compiler_generated'] )]
								     -| ['compiler_generated'] )]
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					  in  %% Line 1034
					      {_31,After}
				      ( <_30> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_30})
					-| ['compiler_generated'] )
				    end
		    ( <_32> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_32})
		      -| ['compiler_generated'] )
		  end
	  ( <_35,_34,_33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_35,_34,_33})
		  -| [{'function_name',{'take_lc',3}}] )
	    -| ['compiler_generated'] )
	end
'take_t'/3 =
    %% Line 1038
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Str0 = [CP1|Cont],_57,Seps = {GCs,CPs,_58}>
	      when call 'erlang':'is_integer'
		    (CP1) ->
	      %% Line 1039
	      case call 'lists':'member'
		       (CP1, CPs) of
		%% Line 1040
		<'true'> when 'true' ->
		    %% Line 1041
		    case call 'unicode_util':'gc'
			     (Str0) of
		      <[GC|Str]> when 'true' ->
			  %% Line 1042
			  case call 'lists':'member'
				   (GC, GCs) of
			    %% Line 1043
			    <'true'> when 'true' ->
				%% Line 1044
				case apply 'take_t'/3
					 (Str, 0, Seps) of
				  <{Head,Tail}> when 'true' ->
				      %% Line 1045
				      case apply 'is_empty'/1
					       (Head) of
					%% Line 1046
					<'true'> when 'true' ->
					    let <_5> =
						case <GC,Tail> of
						  %% Line 1541
						  ( <Char,( #{}#
							    -| ['compiler_generated'] )>
							when ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'is_integer'
												 -| ['compiler_generated'] )
								(Char)
							    -| ['compiler_generated'] ) ->
							( [Char|( []
								  -| ['compiler_generated'] )]
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  %% Line 1542
						  ( <Char,( #{}#
							    -| ['compiler_generated'] )>
							when ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'is_list'
												 -| ['compiler_generated'] )
								(Char)
							    -| ['compiler_generated'] ) ->
							Char
						    -| ['compiler_generated'] )
						  %% Line 1543
						  ( <Char,Bin>
							when ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'is_binary'
												 -| ['compiler_generated'] )
								(Bin)
							    -| ['compiler_generated'] ) ->
							( [Char|( [Bin|( []
									 -| ['compiler_generated'] )]
								  -| ['compiler_generated'] )]
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  %% Line 1544
						  ( <Char,_71>
							when ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'is_integer'
												 -| ['compiler_generated'] )
								(Char)
							    -| ['compiler_generated'] ) ->
							( [Char|_71]
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  %% Line 1545
						  ( <_72,_73>
							when ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'is_list'
												 -| ['compiler_generated'] )
								(_72)
							    -| ['compiler_generated'] ) ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( '++'
											       -| ['compiler_generated'] )
							      (_72, _73)
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <_3,_74> when ( 'true'
								    -| ['compiler_generated'] ) ->
							%% Line 1541
							( primop ( 'match_fail'
								   -| ['compiler_generated'] )
							      (( {( 'function_clause'
								    -| ['compiler_generated'] ),_3,_74}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					    in  {Head,_5}
					%% Line 1047
					<'false'> when 'true' ->
					    let <_6> =
						case <GC,Head> of
						  %% Line 1541
						  ( <Char,( #{}#
							    -| ['compiler_generated'] )>
							when ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'is_integer'
												 -| ['compiler_generated'] )
								(Char)
							    -| ['compiler_generated'] ) ->
							( [Char|( []
								  -| ['compiler_generated'] )]
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  %% Line 1542
						  ( <Char,( #{}#
							    -| ['compiler_generated'] )>
							when ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'is_list'
												 -| ['compiler_generated'] )
								(Char)
							    -| ['compiler_generated'] ) ->
							Char
						    -| ['compiler_generated'] )
						  %% Line 1543
						  ( <Char,Bin>
							when ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'is_binary'
												 -| ['compiler_generated'] )
								(Bin)
							    -| ['compiler_generated'] ) ->
							( [Char|( [Bin|( []
									 -| ['compiler_generated'] )]
								  -| ['compiler_generated'] )]
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  %% Line 1544
						  ( <Char,_77>
							when ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'is_integer'
												 -| ['compiler_generated'] )
								(Char)
							    -| ['compiler_generated'] ) ->
							( [Char|_77]
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  %% Line 1545
						  ( <_78,_79>
							when ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'is_list'
												 -| ['compiler_generated'] )
								(_78)
							    -| ['compiler_generated'] ) ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( '++'
											       -| ['compiler_generated'] )
							      (_78, _79)
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <_3,_80> when ( 'true'
								    -| ['compiler_generated'] ) ->
							%% Line 1541
							( primop ( 'match_fail'
								   -| ['compiler_generated'] )
							      (( {( 'function_clause'
								    -| ['compiler_generated'] ),_3,_80}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					    in  {_6,Tail}
					( <_7> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_7})
					  -| ['compiler_generated'] )
				      end
				  ( <_4> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_4})
				    -| ['compiler_generated'] )
				end
			    %% Line 1049
			    <'false'> when 'true' ->
				%% Line 1050
				case apply 'take_t'/3
					 (Str, 0, Seps) of
				  <{Head,Tail}> when 'true' ->
				      let <_9> =
					  case %% Line 1051
					       <GC,Head> of
					    %% Line 1541
					    ( <Char,( #{}#
						      -| ['compiler_generated'] )>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_integer'
											   -| ['compiler_generated'] )
							  (Char)
						      -| ['compiler_generated'] ) ->
						  ( [Char|( []
							    -| ['compiler_generated'] )]
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1542
					    ( <Char,( #{}#
						      -| ['compiler_generated'] )>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_list'
											   -| ['compiler_generated'] )
							  (Char)
						      -| ['compiler_generated'] ) ->
						  Char
					      -| ['compiler_generated'] )
					    %% Line 1543
					    ( <Char,Bin>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_binary'
											   -| ['compiler_generated'] )
							  (Bin)
						      -| ['compiler_generated'] ) ->
						  ( [Char|( [Bin|( []
								   -| ['compiler_generated'] )]
							    -| ['compiler_generated'] )]
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1544
					    ( <Char,_83>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_integer'
											   -| ['compiler_generated'] )
							  (Char)
						      -| ['compiler_generated'] ) ->
						  ( [Char|_83]
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1545
					    ( <_84,_85>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_list'
											   -| ['compiler_generated'] )
							  (_84)
						      -| ['compiler_generated'] ) ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( '++'
											 -| ['compiler_generated'] )
							(_84, _85)
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_3,_86> when ( 'true'
							      -| ['compiler_generated'] ) ->
						  %% Line 1541
						  ( primop ( 'match_fail'
							     -| ['compiler_generated'] )
							(( {( 'function_clause'
							      -| ['compiler_generated'] ),_3,_86}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				      in  %% Line 1051
					  {_9,Tail}
				  ( <_8> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_8})
				    -| ['compiler_generated'] )
				end
			    ( <_10> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_10})
			      -| ['compiler_generated'] )
			  end
		      ( <_3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_3})
			-| ['compiler_generated'] )
		    end
		%% Line 1053
		<'false'> when 'true' ->
		    %% Line 1054
		    case apply 'take_t'/3
			     (Cont, 0, Seps) of
		      <{Head,Tail}> when 'true' ->
			  %% Line 1055
			  {[CP1|Head],Tail}
		      ( <_11> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_11})
			-| ['compiler_generated'] )
		    end
		( <_12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1057
	  <[Bin|Cont0],N,Seps0 = {GCs,_59,_60}>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 1058
	      case Bin of
		<#{#<_61>(N,8,'binary',['unsigned'|['big']]),
		   #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <Seps> =
			case %% Line 1059
			     Seps0 of
			  %% Line 1585
			  ( <( {Sep,CPs,( 'undefined'
					  -| ['compiler_generated'] )}
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( let <_88> =
				      apply %% Line 1586
					    'bin_pattern'/1
					  (%% Line 1586
					   CPs)
				  in  ( let <_89> =
					    call %% Line 1586
						 ( 'binary'
						   -| ['compiler_generated'] ):%% Line 1586
									       ( 'compile_pattern'
										 -| ['compiler_generated'] )
						(_88)
					in  %% Line 1586
					    ( {Sep,CPs,_89}
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1587
			  ( <( Compiled = ( {_4,_5,_6}
					    -| ['compiler_generated'] )
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				Compiled
			    -| ['compiler_generated'] )
			  ( <_3> when ( 'true'
					-| ['compiler_generated'] ) ->
				%% Line 1585
				( primop ( 'match_fail'
					   -| ['compiler_generated'] )
				      (( {( 'function_clause'
					    -| ['compiler_generated'] ),_3}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    in  %% Line 1060
			case apply 'bin_search'/3
				 (Rest, Cont0, Seps) of
			  %% Line 1061
			  <{'nomatch',Cont}> when 'true' ->
			      let <Used> =
				  apply %% Line 1062
					'cp_prefix'/2
				      (%% Line 1062
				       Cont0, %% Line 1062
					      Cont)
			      in  %% Line 1063
				  case apply 'take_t'/3
					   (Cont, 0, Seps) of
				    <{Head,Tail}> when 'true' ->
					let <_17> =
					    call %% Line 1064
						 'unicode':%% Line 1064
							   'characters_to_binary'
						(%% Line 1064
						 [Bin|Used])
					in  let <_18> =
						case <_17,%% Line 1064
							  Head> of
						  %% Line 1547
						  ( <_92,( []
							   -| ['compiler_generated'] )> when ( 'true'
											       -| ['compiler_generated'] ) ->
							_92
						    -| ['compiler_generated'] )
						  %% Line 1548
						  ( <( #{}#
						       -| ['compiler_generated'] ),St> when ( 'true'
											      -| ['compiler_generated'] ) ->
							St
						    -| ['compiler_generated'] )
						  %% Line 1549
						  ( <( []
						       -| ['compiler_generated'] ),St> when ( 'true'
											      -| ['compiler_generated'] ) ->
							St
						    -| ['compiler_generated'] )
						  %% Line 1550
						  ( <_93,St> when ( 'true'
								    -| ['compiler_generated'] ) ->
							( [_93|St]
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					    in  %% Line 1064
						{_18,Tail}
				    ( <_16> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_16})
				      -| ['compiler_generated'] )
				  end
			  %% Line 1065
			  <[SepStart|Cont1]> when 'true' ->
			      %% Line 1066
			      case apply 'bin_search_inv'/3
				       (SepStart, Cont1, GCs) of
				%% Line 1067
				<{'nomatch',Cont}> when 'true' ->
				    %% Line 1068
				    case apply 'take_t'/3
					     (Cont, 0, Seps) of
				      <{Head,Tail}> when 'true' ->
					  let <Used> =
					      apply %% Line 1069
						    'cp_prefix'/2
						  (%% Line 1069
						   Cont0, %% Line 1069
							  Cont)
					  in  %% Line 1070
					      case apply 'is_empty'/1
						       (Head) of
						%% Line 1071
						<'true'> when 'true' ->
						    let <_22> =
							call %% Line 1072
							     'erlang':%% Line 1072
								      'byte_size'
							    (%% Line 1072
							     Bin)
						    in  let <_21> =
							    call %% Line 1072
								 'erlang':%% Line 1072
									  'byte_size'
								(%% Line 1072
								 SepStart)
							in  let <KeepSz> =
								call %% Line 1072
								     'erlang':%% Line 1072
									      '-'
								    (_22, _21)
							    in  %% Line 1073
								case Bin of
								  <#{#<Keep>(KeepSz,8,'binary',['unsigned'|['big']]),
								     #<End>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
								      let <_25> =
									  case %% Line 1074
									       <End,Used> of
									    %% Line 1547
									    ( <_96,( []
										     -| ['compiler_generated'] )> when ( 'true'
															 -| ['compiler_generated'] ) ->
										  _96
									      -| ['compiler_generated'] )
									    %% Line 1548
									    ( <( #{}#
										 -| ['compiler_generated'] ),St> when ( 'true'
															-| ['compiler_generated'] ) ->
										  St
									      -| ['compiler_generated'] )
									    %% Line 1549
									    ( <( []
										 -| ['compiler_generated'] ),St> when ( 'true'
															-| ['compiler_generated'] ) ->
										  St
									      -| ['compiler_generated'] )
									    %% Line 1550
									    ( <_97,St> when ( 'true'
											      -| ['compiler_generated'] ) ->
										  ( [_97|St]
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									  end
								      in  let <_26> =
									      case <_25,%% Line 1074
											Tail> of
										%% Line 1547
										( <_100,( []
											  -| ['compiler_generated'] )> when ( 'true'
															      -| ['compiler_generated'] ) ->
										      _100
										  -| ['compiler_generated'] )
										%% Line 1548
										( <( #{}#
										     -| ['compiler_generated'] ),St> when ( 'true'
															    -| ['compiler_generated'] ) ->
										      St
										  -| ['compiler_generated'] )
										%% Line 1549
										( <( []
										     -| ['compiler_generated'] ),St> when ( 'true'
															    -| ['compiler_generated'] ) ->
										      St
										  -| ['compiler_generated'] )
										%% Line 1550
										( <_101,St> when ( 'true'
												   -| ['compiler_generated'] ) ->
										      ( [_101|St]
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									      end
									  in  %% Line 1074
									      {Keep,_26}
								  ( <_24> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_24})
								    -| ['compiler_generated'] )
								end
						%% Line 1075
						<'false'> when 'true' ->
						    let <_27> =
							call %% Line 1076
							     'unicode':%% Line 1076
								       'characters_to_binary'
							    (%% Line 1076
							     [Bin|Used])
						    in  let <_28> =
							    case <_27,%% Line 1076
								      Head> of
							      %% Line 1547
							      ( <_104,( []
									-| ['compiler_generated'] )> when ( 'true'
													    -| ['compiler_generated'] ) ->
								    _104
								-| ['compiler_generated'] )
							      %% Line 1548
							      ( <( #{}#
								   -| ['compiler_generated'] ),St> when ( 'true'
													  -| ['compiler_generated'] ) ->
								    St
								-| ['compiler_generated'] )
							      %% Line 1549
							      ( <( []
								   -| ['compiler_generated'] ),St> when ( 'true'
													  -| ['compiler_generated'] ) ->
								    St
								-| ['compiler_generated'] )
							      %% Line 1550
							      ( <_105,St> when ( 'true'
										 -| ['compiler_generated'] ) ->
								    ( [_105|St]
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							in  %% Line 1076
							    {_28,Tail}
						( <_29> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_29})
						  -| ['compiler_generated'] )
					      end
				      ( <_19> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_19})
					-| ['compiler_generated'] )
				    end
				%% Line 1078
				<[NonSep|Cont]>
				    when call 'erlang':'is_binary'
					  (NonSep) ->
				    let <_31> =
					call %% Line 1079
					     'erlang':%% Line 1079
						      'byte_size'
					    (%% Line 1079
					     Bin)
				    in  let <_30> =
					    call %% Line 1079
						 'erlang':%% Line 1079
							  'byte_size'
						(%% Line 1079
						 NonSep)
					in  let <KeepSz> =
						call %% Line 1079
						     'erlang':%% Line 1079
							      '-'
						    (_31, _30)
					    in  %% Line 1080
						apply 'take_t'/3
						    ([Bin|Cont], KeepSz, Seps)
				( <_33> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_33})
				  -| ['compiler_generated'] )
			      end
			  ( <_34> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_34})
			    -| ['compiler_generated'] )
			end
		( <_13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1083
	  <Str,0,Seps = {GCs,_62,_63}>
	      when call 'erlang':'is_list'
		    (Str) ->
	      %% Line 1084
	      case call 'unicode_util':'gc'
		       (Str) of
		%% Line 1085
		<[GC|Cs1]> when 'true' ->
		    %% Line 1086
		    case call 'lists':'member'
			     (GC, GCs) of
		      %% Line 1087
		      <'true'> when 'true' ->
			  %% Line 1088
			  case apply 'take_t'/3
				   (Cs1, 0, Seps) of
			    <{Head,Tail}> when 'true' ->
				%% Line 1089
				case apply 'is_empty'/1
					 (Head) of
				  %% Line 1090
				  <'true'> when 'true' ->
				      let <_36> =
					  case <GC,Tail> of
					    %% Line 1541
					    ( <Char,( #{}#
						      -| ['compiler_generated'] )>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_integer'
											   -| ['compiler_generated'] )
							  (Char)
						      -| ['compiler_generated'] ) ->
						  ( [Char|( []
							    -| ['compiler_generated'] )]
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1542
					    ( <Char,( #{}#
						      -| ['compiler_generated'] )>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_list'
											   -| ['compiler_generated'] )
							  (Char)
						      -| ['compiler_generated'] ) ->
						  Char
					      -| ['compiler_generated'] )
					    %% Line 1543
					    ( <Char,Bin>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_binary'
											   -| ['compiler_generated'] )
							  (Bin)
						      -| ['compiler_generated'] ) ->
						  ( [Char|( [Bin|( []
								   -| ['compiler_generated'] )]
							    -| ['compiler_generated'] )]
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1544
					    ( <Char,_108>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_integer'
											   -| ['compiler_generated'] )
							  (Char)
						      -| ['compiler_generated'] ) ->
						  ( [Char|_108]
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1545
					    ( <_109,_110>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_list'
											   -| ['compiler_generated'] )
							  (_109)
						      -| ['compiler_generated'] ) ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( '++'
											 -| ['compiler_generated'] )
							(_109, _110)
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_3,_111> when ( 'true'
							       -| ['compiler_generated'] ) ->
						  %% Line 1541
						  ( primop ( 'match_fail'
							     -| ['compiler_generated'] )
							(( {( 'function_clause'
							      -| ['compiler_generated'] ),_3,_111}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				      in  {Head,_36}
				  %% Line 1091
				  <'false'> when 'true' ->
				      let <_37> =
					  case <GC,Head> of
					    %% Line 1541
					    ( <Char,( #{}#
						      -| ['compiler_generated'] )>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_integer'
											   -| ['compiler_generated'] )
							  (Char)
						      -| ['compiler_generated'] ) ->
						  ( [Char|( []
							    -| ['compiler_generated'] )]
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1542
					    ( <Char,( #{}#
						      -| ['compiler_generated'] )>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_list'
											   -| ['compiler_generated'] )
							  (Char)
						      -| ['compiler_generated'] ) ->
						  Char
					      -| ['compiler_generated'] )
					    %% Line 1543
					    ( <Char,Bin>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_binary'
											   -| ['compiler_generated'] )
							  (Bin)
						      -| ['compiler_generated'] ) ->
						  ( [Char|( [Bin|( []
								   -| ['compiler_generated'] )]
							    -| ['compiler_generated'] )]
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1544
					    ( <Char,_114>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_integer'
											   -| ['compiler_generated'] )
							  (Char)
						      -| ['compiler_generated'] ) ->
						  ( [Char|_114]
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1545
					    ( <_115,_116>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_list'
											   -| ['compiler_generated'] )
							  (_115)
						      -| ['compiler_generated'] ) ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( '++'
											 -| ['compiler_generated'] )
							(_115, _116)
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_3,_117> when ( 'true'
							       -| ['compiler_generated'] ) ->
						  %% Line 1541
						  ( primop ( 'match_fail'
							     -| ['compiler_generated'] )
							(( {( 'function_clause'
							      -| ['compiler_generated'] ),_3,_117}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				      in  {_37,Tail}
				  ( <_38> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_38})
				    -| ['compiler_generated'] )
				end
			    ( <_35> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_35})
			      -| ['compiler_generated'] )
			  end
		      %% Line 1093
		      <'false'> when 'true' ->
			  %% Line 1094
			  case apply 'take_t'/3
				   (Cs1, 0, Seps) of
			    <{Head,Tail}> when 'true' ->
				let <_40> =
				    case %% Line 1095
					 <GC,Head> of
				      %% Line 1541
				      ( <Char,( #{}#
						-| ['compiler_generated'] )>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_integer'
										     -| ['compiler_generated'] )
						    (Char)
						-| ['compiler_generated'] ) ->
					    ( [Char|( []
						      -| ['compiler_generated'] )]
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      %% Line 1542
				      ( <Char,( #{}#
						-| ['compiler_generated'] )>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_list'
										     -| ['compiler_generated'] )
						    (Char)
						-| ['compiler_generated'] ) ->
					    Char
					-| ['compiler_generated'] )
				      %% Line 1543
				      ( <Char,Bin>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_binary'
										     -| ['compiler_generated'] )
						    (Bin)
						-| ['compiler_generated'] ) ->
					    ( [Char|( [Bin|( []
							     -| ['compiler_generated'] )]
						      -| ['compiler_generated'] )]
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      %% Line 1544
				      ( <Char,_120>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_integer'
										     -| ['compiler_generated'] )
						    (Char)
						-| ['compiler_generated'] ) ->
					    ( [Char|_120]
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      %% Line 1545
				      ( <_121,_122>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_list'
										     -| ['compiler_generated'] )
						    (_121)
						-| ['compiler_generated'] ) ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( '++'
										   -| ['compiler_generated'] )
						  (_121, _122)
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <_3,_123> when ( 'true'
							 -| ['compiler_generated'] ) ->
					    %% Line 1541
					    ( primop ( 'match_fail'
						       -| ['compiler_generated'] )
						  (( {( 'function_clause'
							-| ['compiler_generated'] ),_3,_123}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				in  %% Line 1095
				    {_40,Tail}
			    ( <_39> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_39})
			      -| ['compiler_generated'] )
			  end
		      ( <_41> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_41})
			-| ['compiler_generated'] )
		    end
		%% Line 1097
		<[]> when 'true' ->
		    {[],[]}
		( <_42> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_42})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1099
	  <Bin,N,Seps0 = {GCs,_64,_65}>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 1100
	      case Bin of
		<#{#<_66>(N,8,'binary',['unsigned'|['big']]),
		   #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <Seps> =
			case %% Line 1101
			     Seps0 of
			  %% Line 1585
			  ( <( {Sep,CPs,( 'undefined'
					  -| ['compiler_generated'] )}
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( let <_125> =
				      apply %% Line 1586
					    'bin_pattern'/1
					  (%% Line 1586
					   CPs)
				  in  ( let <_126> =
					    call %% Line 1586
						 ( 'binary'
						   -| ['compiler_generated'] ):%% Line 1586
									       ( 'compile_pattern'
										 -| ['compiler_generated'] )
						(_125)
					in  %% Line 1586
					    ( {Sep,CPs,_126}
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1587
			  ( <( Compiled = ( {_4,_5,_6}
					    -| ['compiler_generated'] )
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				Compiled
			    -| ['compiler_generated'] )
			  ( <_3> when ( 'true'
					-| ['compiler_generated'] ) ->
				%% Line 1585
				( primop ( 'match_fail'
					   -| ['compiler_generated'] )
				      (( {( 'function_clause'
					    -| ['compiler_generated'] ),_3}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    in  %% Line 1102
			case apply 'bin_search'/3
				 (Rest, [], Seps) of
			  %% Line 1103
			  <{'nomatch',_67}> when 'true' ->
			      {Bin,#{}#}
			  %% Line 1104
			  <[SepStart|[]]> when 'true' ->
			      %% Line 1105
			      case apply 'bin_search_inv'/3
				       (SepStart, [], GCs) of
				%% Line 1106
				<{'nomatch',_68}> when 'true' ->
				    let <_46> =
					call %% Line 1107
					     'erlang':%% Line 1107
						      'byte_size'
					    (%% Line 1107
					     Bin)
				    in  let <_45> =
					    call %% Line 1107
						 'erlang':%% Line 1107
							  'byte_size'
						(%% Line 1107
						 SepStart)
					in  let <KeepSz> =
						call %% Line 1107
						     'erlang':%% Line 1107
							      '-'
						    (_46, _45)
					    in  %% Line 1108
						case Bin of
						  <#{#<Before>(KeepSz,8,'binary',['unsigned'|['big']]),
						     #<End>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
						      %% Line 1109
						      {Before,End}
						  ( <_48> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_48})
						    -| ['compiler_generated'] )
						end
				%% Line 1110
				<[NonSep|[]]> when 'true' ->
				    let <_50> =
					call %% Line 1111
					     'erlang':%% Line 1111
						      'byte_size'
					    (%% Line 1111
					     Bin)
				    in  let <_49> =
					    call %% Line 1111
						 'erlang':%% Line 1111
							  'byte_size'
						(%% Line 1111
						 NonSep)
					in  let <KeepSz> =
						call %% Line 1111
						     'erlang':%% Line 1111
							      '-'
						    (_50, _49)
					    in  %% Line 1112
						apply 'take_t'/3
						    (Bin, KeepSz, Seps)
				( <_52> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_52})
				  -| ['compiler_generated'] )
			      end
			  ( <_53> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_53})
			    -| ['compiler_generated'] )
			end
		( <_43> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_43})
		  -| ['compiler_generated'] )
	      end
	  ( <_56,_55,_54> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_56,_55,_54})
		  -| [{'function_name',{'take_t',3}}] )
	    -| ['compiler_generated'] )
	end
'take_tc'/3 =
    %% Line 1116
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[CP1|Cont = [CP2|_58]],_59,Seps = {GCs,_60,_61}>
	      when try
		    let <_3> =
			call 'erlang':'<'
			    (CP1, 256)
		    in  let <_4> =
			    call 'erlang':'<'
				(CP2, 256)
			in  let <_5> =
				call 'erlang':'=/='
				    (CP1, 13)
			    in  let <_6> =
				    call 'erlang':'and'
					(_4, _5)
				in  call 'erlang':'and'
					(_3, _6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1117
	      case call 'lists':'member'
		       (CP1, GCs) of
		%% Line 1118
		<'false'> when 'true' ->
		    %% Line 1119
		    case apply 'take_tc'/3
			     (Cont, 0, Seps) of
		      <{Head,Tail}> when 'true' ->
			  %% Line 1120
			  case apply 'is_empty'/1
				   (Head) of
			    %% Line 1121
			    <'true'> when 'true' ->
				let <_8> =
				    case <CP1,Tail> of
				      %% Line 1541
				      ( <Char,( #{}#
						-| ['compiler_generated'] )>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_integer'
										     -| ['compiler_generated'] )
						    (Char)
						-| ['compiler_generated'] ) ->
					    ( [Char|( []
						      -| ['compiler_generated'] )]
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      %% Line 1542
				      ( <Char,( #{}#
						-| ['compiler_generated'] )>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_list'
										     -| ['compiler_generated'] )
						    (Char)
						-| ['compiler_generated'] ) ->
					    Char
					-| ['compiler_generated'] )
				      %% Line 1543
				      ( <Char,Bin>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_binary'
										     -| ['compiler_generated'] )
						    (Bin)
						-| ['compiler_generated'] ) ->
					    ( [Char|( [Bin|( []
							     -| ['compiler_generated'] )]
						      -| ['compiler_generated'] )]
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      %% Line 1544
				      ( <Char,Str>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_integer'
										     -| ['compiler_generated'] )
						    (Char)
						-| ['compiler_generated'] ) ->
					    ( [Char|Str]
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      %% Line 1545
				      ( <GC,Str>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_list'
										     -| ['compiler_generated'] )
						    (GC)
						-| ['compiler_generated'] ) ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( '++'
										   -| ['compiler_generated'] )
						  (GC, Str)
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <_3,_74> when ( 'true'
							-| ['compiler_generated'] ) ->
					    %% Line 1541
					    ( primop ( 'match_fail'
						       -| ['compiler_generated'] )
						  (( {( 'function_clause'
							-| ['compiler_generated'] ),_3,_74}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				in  {Head,_8}
			    %% Line 1122
			    <'false'> when 'true' ->
				let <_9> =
				    case <CP1,Head> of
				      %% Line 1541
				      ( <Char,( #{}#
						-| ['compiler_generated'] )>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_integer'
										     -| ['compiler_generated'] )
						    (Char)
						-| ['compiler_generated'] ) ->
					    ( [Char|( []
						      -| ['compiler_generated'] )]
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      %% Line 1542
				      ( <Char,( #{}#
						-| ['compiler_generated'] )>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_list'
										     -| ['compiler_generated'] )
						    (Char)
						-| ['compiler_generated'] ) ->
					    Char
					-| ['compiler_generated'] )
				      %% Line 1543
				      ( <Char,Bin>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_binary'
										     -| ['compiler_generated'] )
						    (Bin)
						-| ['compiler_generated'] ) ->
					    ( [Char|( [Bin|( []
							     -| ['compiler_generated'] )]
						      -| ['compiler_generated'] )]
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      %% Line 1544
				      ( <Char,Str>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_integer'
										     -| ['compiler_generated'] )
						    (Char)
						-| ['compiler_generated'] ) ->
					    ( [Char|Str]
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      %% Line 1545
				      ( <GC,Str>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_list'
										     -| ['compiler_generated'] )
						    (GC)
						-| ['compiler_generated'] ) ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( '++'
										   -| ['compiler_generated'] )
						  (GC, Str)
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <_3,_77> when ( 'true'
							-| ['compiler_generated'] ) ->
					    %% Line 1541
					    ( primop ( 'match_fail'
						       -| ['compiler_generated'] )
						  (( {( 'function_clause'
							-| ['compiler_generated'] ),_3,_77}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				in  {_9,Tail}
			    ( <_10> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_10})
			      -| ['compiler_generated'] )
			  end
		      ( <_7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_7})
			-| ['compiler_generated'] )
		    end
		%% Line 1124
		<'true'> when 'true' ->
		    %% Line 1125
		    case apply 'take_tc'/3
			     (Cont, 0, Seps) of
		      <{Head,Tail}> when 'true' ->
			  let <_12> =
			      case %% Line 1126
				   <CP1,Head> of
				%% Line 1541
				( <Char,( #{}#
					  -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_integer'
									       -| ['compiler_generated'] )
					      (Char)
					  -| ['compiler_generated'] ) ->
				      ( [Char|( []
						-| ['compiler_generated'] )]
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1542
				( <Char,( #{}#
					  -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_list'
									       -| ['compiler_generated'] )
					      (Char)
					  -| ['compiler_generated'] ) ->
				      Char
				  -| ['compiler_generated'] )
				%% Line 1543
				( <Char,Bin>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_binary'
									       -| ['compiler_generated'] )
					      (Bin)
					  -| ['compiler_generated'] ) ->
				      ( [Char|( [Bin|( []
						       -| ['compiler_generated'] )]
						-| ['compiler_generated'] )]
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1544
				( <Char,Str>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_integer'
									       -| ['compiler_generated'] )
					      (Char)
					  -| ['compiler_generated'] ) ->
				      ( [Char|Str]
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1545
				( <GC,Str>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_list'
									       -| ['compiler_generated'] )
					      (GC)
					  -| ['compiler_generated'] ) ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '++'
									     -| ['compiler_generated'] )
					    (GC, Str)
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_3,_80> when ( 'true'
						  -| ['compiler_generated'] ) ->
				      %% Line 1541
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'function_clause'
						  -| ['compiler_generated'] ),_3,_80}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 1126
			      {_12,Tail}
		      ( <_11> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_11})
			-| ['compiler_generated'] )
		    end
		( <_13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1128
	  <[Bin|Cont0],N,Seps0 = {GCs,_62,_63}>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 1129
	      case Bin of
		<#{#<_64>(N,8,'binary',['unsigned'|['big']]),
		   #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 1130
		    case apply 'bin_search_inv'/3
			     (Rest, Cont0, GCs) of
		      %% Line 1131
		      <{'nomatch',Cont}> when 'true' ->
			  let <Used> =
			      apply %% Line 1132
				    'cp_prefix'/2
				  (%% Line 1132
				   Cont0, %% Line 1132
					  Cont)
			  in  %% Line 1133
			      case apply 'take_tc'/3
				       (Cont, 0, Seps0) of
				<{Head,Tail}> when 'true' ->
				    let <_17> =
					call %% Line 1134
					     'unicode':%% Line 1134
						       'characters_to_binary'
					    (%% Line 1134
					     [Bin|Used])
				    in  let <_18> =
					    case <_17,%% Line 1134
						      Head> of
					      %% Line 1547
					      ( <_83,( []
						       -| ['compiler_generated'] )> when ( 'true'
											   -| ['compiler_generated'] ) ->
						    _83
						-| ['compiler_generated'] )
					      %% Line 1548
					      ( <( #{}#
						   -| ['compiler_generated'] ),St> when ( 'true'
											  -| ['compiler_generated'] ) ->
						    St
						-| ['compiler_generated'] )
					      %% Line 1549
					      ( <( []
						   -| ['compiler_generated'] ),St> when ( 'true'
											  -| ['compiler_generated'] ) ->
						    St
						-| ['compiler_generated'] )
					      %% Line 1550
					      ( <_84,St> when ( 'true'
								-| ['compiler_generated'] ) ->
						    ( [_84|St]
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					in  %% Line 1134
					    {_18,Tail}
				( <_16> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_16})
				  -| ['compiler_generated'] )
			      end
		      %% Line 1135
		      <[SepStart|Cont1]> when 'true' ->
			  let <Seps> =
			      case %% Line 1136
				   Seps0 of
				%% Line 1585
				( <( {Sep,CPs,( 'undefined'
						-| ['compiler_generated'] )}
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( let <_86> =
					    apply %% Line 1586
						  'bin_pattern'/1
						(%% Line 1586
						 CPs)
					in  ( let <_87> =
						  call %% Line 1586
						       ( 'binary'
							 -| ['compiler_generated'] ):%% Line 1586
										     ( 'compile_pattern'
										       -| ['compiler_generated'] )
						      (_86)
					      in  %% Line 1586
						  ( {Sep,CPs,_87}
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1587
				( <( Compiled = ( {_4,_5,_6}
						  -| ['compiler_generated'] )
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      Compiled
				  -| ['compiler_generated'] )
				( <_3> when ( 'true'
					      -| ['compiler_generated'] ) ->
				      %% Line 1585
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'function_clause'
						  -| ['compiler_generated'] ),_3}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 1137
			      case apply 'bin_search'/3
				       (SepStart, Cont1, Seps) of
				%% Line 1138
				<{'nomatch',Cont}> when 'true' ->
				    %% Line 1139
				    case apply 'take_tc'/3
					     (Cont, 0, Seps) of
				      <{Head,Tail}> when 'true' ->
					  let <Used> =
					      apply %% Line 1140
						    'cp_prefix'/2
						  (%% Line 1140
						   Cont0, %% Line 1140
							  Cont)
					  in  %% Line 1141
					      case apply 'is_empty'/1
						       (Head) of
						%% Line 1142
						<'true'> when 'true' ->
						    let <_23> =
							call %% Line 1143
							     'erlang':%% Line 1143
								      'byte_size'
							    (%% Line 1143
							     Bin)
						    in  let <_22> =
							    call %% Line 1143
								 'erlang':%% Line 1143
									  'byte_size'
								(%% Line 1143
								 SepStart)
							in  let <KeepSz> =
								call %% Line 1143
								     'erlang':%% Line 1143
									      '-'
								    (_23, _22)
							    in  %% Line 1144
								case Bin of
								  <#{#<Keep>(KeepSz,8,'binary',['unsigned'|['big']]),
								     #<End>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
								      let <_26> =
									  case %% Line 1145
									       <End,Used> of
									    %% Line 1547
									    ( <_90,( []
										     -| ['compiler_generated'] )> when ( 'true'
															 -| ['compiler_generated'] ) ->
										  _90
									      -| ['compiler_generated'] )
									    %% Line 1548
									    ( <( #{}#
										 -| ['compiler_generated'] ),St> when ( 'true'
															-| ['compiler_generated'] ) ->
										  St
									      -| ['compiler_generated'] )
									    %% Line 1549
									    ( <( []
										 -| ['compiler_generated'] ),St> when ( 'true'
															-| ['compiler_generated'] ) ->
										  St
									      -| ['compiler_generated'] )
									    %% Line 1550
									    ( <_91,St> when ( 'true'
											      -| ['compiler_generated'] ) ->
										  ( [_91|St]
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									  end
								      in  let <_27> =
									      case <_26,%% Line 1145
											Tail> of
										%% Line 1547
										( <_94,( []
											 -| ['compiler_generated'] )> when ( 'true'
															     -| ['compiler_generated'] ) ->
										      _94
										  -| ['compiler_generated'] )
										%% Line 1548
										( <( #{}#
										     -| ['compiler_generated'] ),St> when ( 'true'
															    -| ['compiler_generated'] ) ->
										      St
										  -| ['compiler_generated'] )
										%% Line 1549
										( <( []
										     -| ['compiler_generated'] ),St> when ( 'true'
															    -| ['compiler_generated'] ) ->
										      St
										  -| ['compiler_generated'] )
										%% Line 1550
										( <_95,St> when ( 'true'
												  -| ['compiler_generated'] ) ->
										      ( [_95|St]
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									      end
									  in  %% Line 1145
									      {Keep,_27}
								  ( <_25> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_25})
								    -| ['compiler_generated'] )
								end
						%% Line 1146
						<'false'> when 'true' ->
						    let <_28> =
							call %% Line 1147
							     'unicode':%% Line 1147
								       'characters_to_binary'
							    (%% Line 1147
							     [Bin|Used])
						    in  let <_29> =
							    case <_28,%% Line 1147
								      Head> of
							      %% Line 1547
							      ( <_98,( []
								       -| ['compiler_generated'] )> when ( 'true'
													   -| ['compiler_generated'] ) ->
								    _98
								-| ['compiler_generated'] )
							      %% Line 1548
							      ( <( #{}#
								   -| ['compiler_generated'] ),St> when ( 'true'
													  -| ['compiler_generated'] ) ->
								    St
								-| ['compiler_generated'] )
							      %% Line 1549
							      ( <( []
								   -| ['compiler_generated'] ),St> when ( 'true'
													  -| ['compiler_generated'] ) ->
								    St
								-| ['compiler_generated'] )
							      %% Line 1550
							      ( <_99,St> when ( 'true'
										-| ['compiler_generated'] ) ->
								    ( [_99|St]
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							in  %% Line 1147
							    {_29,Tail}
						( <_30> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_30})
						  -| ['compiler_generated'] )
					      end
				      ( <_20> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_20})
					-| ['compiler_generated'] )
				    end
				%% Line 1149
				<[NonSep|Cont]>
				    when call 'erlang':'is_binary'
					  (NonSep) ->
				    let <_32> =
					call %% Line 1150
					     'erlang':%% Line 1150
						      'byte_size'
					    (%% Line 1150
					     Bin)
				    in  let <_31> =
					    call %% Line 1150
						 'erlang':%% Line 1150
							  'byte_size'
						(%% Line 1150
						 NonSep)
					in  let <KeepSz> =
						call %% Line 1150
						     'erlang':%% Line 1150
							      '-'
						    (_32, _31)
					    in  %% Line 1151
						apply 'take_tc'/3
						    ([Bin|Cont], KeepSz, Seps)
				( <_34> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_34})
				  -| ['compiler_generated'] )
			      end
		      ( <_35> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_35})
			-| ['compiler_generated'] )
		    end
		( <_14> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1154
	  <Str,0,Seps = {GCs,_65,_66}>
	      when call 'erlang':'is_list'
		    (Str) ->
	      %% Line 1155
	      case call 'unicode_util':'gc'
		       (Str) of
		%% Line 1156
		<[GC|Cs1]> when 'true' ->
		    %% Line 1157
		    case call 'lists':'member'
			     (GC, GCs) of
		      %% Line 1158
		      <'false'> when 'true' ->
			  %% Line 1159
			  case apply 'take_tc'/3
				   (Cs1, 0, Seps) of
			    <{Head,Tail}> when 'true' ->
				%% Line 1160
				case apply 'is_empty'/1
					 (Head) of
				  %% Line 1161
				  <'true'> when 'true' ->
				      let <_37> =
					  case <GC,Tail> of
					    %% Line 1541
					    ( <Char,( #{}#
						      -| ['compiler_generated'] )>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_integer'
											   -| ['compiler_generated'] )
							  (Char)
						      -| ['compiler_generated'] ) ->
						  ( [Char|( []
							    -| ['compiler_generated'] )]
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1542
					    ( <Char,( #{}#
						      -| ['compiler_generated'] )>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_list'
											   -| ['compiler_generated'] )
							  (Char)
						      -| ['compiler_generated'] ) ->
						  Char
					      -| ['compiler_generated'] )
					    %% Line 1543
					    ( <Char,Bin>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_binary'
											   -| ['compiler_generated'] )
							  (Bin)
						      -| ['compiler_generated'] ) ->
						  ( [Char|( [Bin|( []
								   -| ['compiler_generated'] )]
							    -| ['compiler_generated'] )]
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1544
					    ( <Char,_102>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_integer'
											   -| ['compiler_generated'] )
							  (Char)
						      -| ['compiler_generated'] ) ->
						  ( [Char|_102]
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1545
					    ( <_103,_104>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_list'
											   -| ['compiler_generated'] )
							  (_103)
						      -| ['compiler_generated'] ) ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( '++'
											 -| ['compiler_generated'] )
							(_103, _104)
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_3,_105> when ( 'true'
							       -| ['compiler_generated'] ) ->
						  %% Line 1541
						  ( primop ( 'match_fail'
							     -| ['compiler_generated'] )
							(( {( 'function_clause'
							      -| ['compiler_generated'] ),_3,_105}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				      in  {Head,_37}
				  %% Line 1162
				  <'false'> when 'true' ->
				      let <_38> =
					  case <GC,Head> of
					    %% Line 1541
					    ( <Char,( #{}#
						      -| ['compiler_generated'] )>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_integer'
											   -| ['compiler_generated'] )
							  (Char)
						      -| ['compiler_generated'] ) ->
						  ( [Char|( []
							    -| ['compiler_generated'] )]
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1542
					    ( <Char,( #{}#
						      -| ['compiler_generated'] )>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_list'
											   -| ['compiler_generated'] )
							  (Char)
						      -| ['compiler_generated'] ) ->
						  Char
					      -| ['compiler_generated'] )
					    %% Line 1543
					    ( <Char,Bin>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_binary'
											   -| ['compiler_generated'] )
							  (Bin)
						      -| ['compiler_generated'] ) ->
						  ( [Char|( [Bin|( []
								   -| ['compiler_generated'] )]
							    -| ['compiler_generated'] )]
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1544
					    ( <Char,_108>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_integer'
											   -| ['compiler_generated'] )
							  (Char)
						      -| ['compiler_generated'] ) ->
						  ( [Char|_108]
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1545
					    ( <_109,_110>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_list'
											   -| ['compiler_generated'] )
							  (_109)
						      -| ['compiler_generated'] ) ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( '++'
											 -| ['compiler_generated'] )
							(_109, _110)
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_3,_111> when ( 'true'
							       -| ['compiler_generated'] ) ->
						  %% Line 1541
						  ( primop ( 'match_fail'
							     -| ['compiler_generated'] )
							(( {( 'function_clause'
							      -| ['compiler_generated'] ),_3,_111}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				      in  {_38,Tail}
				  ( <_39> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_39})
				    -| ['compiler_generated'] )
				end
			    ( <_36> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_36})
			      -| ['compiler_generated'] )
			  end
		      %% Line 1164
		      <'true'> when 'true' ->
			  %% Line 1165
			  case apply 'take_tc'/3
				   (Cs1, 0, Seps) of
			    <{Head,Tail}> when 'true' ->
				let <_41> =
				    case %% Line 1166
					 <GC,Head> of
				      %% Line 1541
				      ( <Char,( #{}#
						-| ['compiler_generated'] )>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_integer'
										     -| ['compiler_generated'] )
						    (Char)
						-| ['compiler_generated'] ) ->
					    ( [Char|( []
						      -| ['compiler_generated'] )]
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      %% Line 1542
				      ( <Char,( #{}#
						-| ['compiler_generated'] )>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_list'
										     -| ['compiler_generated'] )
						    (Char)
						-| ['compiler_generated'] ) ->
					    Char
					-| ['compiler_generated'] )
				      %% Line 1543
				      ( <Char,Bin>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_binary'
										     -| ['compiler_generated'] )
						    (Bin)
						-| ['compiler_generated'] ) ->
					    ( [Char|( [Bin|( []
							     -| ['compiler_generated'] )]
						      -| ['compiler_generated'] )]
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      %% Line 1544
				      ( <Char,_114>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_integer'
										     -| ['compiler_generated'] )
						    (Char)
						-| ['compiler_generated'] ) ->
					    ( [Char|_114]
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      %% Line 1545
				      ( <_115,_116>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_list'
										     -| ['compiler_generated'] )
						    (_115)
						-| ['compiler_generated'] ) ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( '++'
										   -| ['compiler_generated'] )
						  (_115, _116)
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <_3,_117> when ( 'true'
							 -| ['compiler_generated'] ) ->
					    %% Line 1541
					    ( primop ( 'match_fail'
						       -| ['compiler_generated'] )
						  (( {( 'function_clause'
							-| ['compiler_generated'] ),_3,_117}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				in  %% Line 1166
				    {_41,Tail}
			    ( <_40> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_40})
			      -| ['compiler_generated'] )
			  end
		      ( <_42> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_42})
			-| ['compiler_generated'] )
		    end
		%% Line 1168
		<[]> when 'true' ->
		    {[],[]}
		( <_43> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_43})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1170
	  <Bin,N,Seps0 = {GCs,_67,_68}>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 1171
	      case Bin of
		<#{#<_69>(N,8,'binary',['unsigned'|['big']]),
		   #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 1172
		    case apply 'bin_search_inv'/3
			     (Rest, [], GCs) of
		      %% Line 1173
		      <{'nomatch',_70}> when 'true' ->
			  {Bin,#{}#}
		      %% Line 1174
		      <[SepStart|[]]> when 'true' ->
			  let <Seps> =
			      case %% Line 1175
				   Seps0 of
				%% Line 1585
				( <( {Sep,CPs,( 'undefined'
						-| ['compiler_generated'] )}
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( let <_119> =
					    apply %% Line 1586
						  'bin_pattern'/1
						(%% Line 1586
						 CPs)
					in  ( let <_120> =
						  call %% Line 1586
						       ( 'binary'
							 -| ['compiler_generated'] ):%% Line 1586
										     ( 'compile_pattern'
										       -| ['compiler_generated'] )
						      (_119)
					      in  %% Line 1586
						  ( {Sep,CPs,_120}
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1587
				( <( Compiled = ( {_4,_5,_6}
						  -| ['compiler_generated'] )
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      Compiled
				  -| ['compiler_generated'] )
				( <_3> when ( 'true'
					      -| ['compiler_generated'] ) ->
				      %% Line 1585
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'function_clause'
						  -| ['compiler_generated'] ),_3}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 1176
			      case apply 'bin_search'/3
				       (SepStart, [], Seps) of
				%% Line 1177
				<{'nomatch',_71}> when 'true' ->
				    let <_47> =
					call %% Line 1178
					     'erlang':%% Line 1178
						      'byte_size'
					    (%% Line 1178
					     Bin)
				    in  let <_46> =
					    call %% Line 1178
						 'erlang':%% Line 1178
							  'byte_size'
						(%% Line 1178
						 SepStart)
					in  let <KeepSz> =
						call %% Line 1178
						     'erlang':%% Line 1178
							      '-'
						    (_47, _46)
					    in  %% Line 1179
						case Bin of
						  <#{#<Before>(KeepSz,8,'binary',['unsigned'|['big']]),
						     #<End>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
						      %% Line 1180
						      {Before,End}
						  ( <_49> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_49})
						    -| ['compiler_generated'] )
						end
				%% Line 1181
				<[NonSep|[]]> when 'true' ->
				    let <_51> =
					call %% Line 1182
					     'erlang':%% Line 1182
						      'byte_size'
					    (%% Line 1182
					     Bin)
				    in  let <_50> =
					    call %% Line 1182
						 'erlang':%% Line 1182
							  'byte_size'
						(%% Line 1182
						 NonSep)
					in  let <KeepSz> =
						call %% Line 1182
						     'erlang':%% Line 1182
							      '-'
						    (_51, _50)
					    in  %% Line 1183
						apply 'take_tc'/3
						    (Bin, KeepSz, Seps)
				( <_53> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_53})
				  -| ['compiler_generated'] )
			      end
		      ( <_54> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_54})
			-| ['compiler_generated'] )
		    end
		( <_44> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_44})
		  -| ['compiler_generated'] )
	      end
	  ( <_57,_56,_55> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_57,_56,_55})
		  -| [{'function_name',{'take_tc',3}}] )
	    -| ['compiler_generated'] )
	end
'prefix_1'/2 =
    %% Line 1187
    fun (_0,_1) ->
	case <_0,_1> of
	  <Cs0,[GC|[]]> when 'true' ->
	      %% Line 1188
	      case call 'unicode_util':'gc'
		       (Cs0) of
		%% Line 1189
		<[_8|Cs]>
		    when call 'erlang':'=:='
			  (_8,
			   GC) ->
		    Cs
		%% Line 1190
		<_9> when 'true' ->
		    'nomatch'
	      end
	  %% Line 1192
	  <[CP|Cs],[Pre|PreR]>
	      when call 'erlang':'is_integer'
		    (CP) ->
	      %% Line 1193
	      case <> of
		%% Line 1194
		<>
		    when call 'erlang':'=:='
			  (CP,
			   Pre) ->
		    apply 'prefix_1'/2
			(Cs, PreR)
		%% Line 1195
		<> when 'true' ->
		    'nomatch'
	      end
	  %% Line 1197
	  <#{#<CP>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Cs>('all',8,'binary',['unsigned'|['big']])}#,[Pre|PreR]> when 'true' ->
	      %% Line 1198
	      case <> of
		%% Line 1199
		<>
		    when call 'erlang':'=:='
			  (CP,
			   Pre) ->
		    apply 'prefix_1'/2
			(Cs, PreR)
		%% Line 1200
		<> when 'true' ->
		    'nomatch'
	      end
	  %% Line 1202
	  <Cs0,[Pre|PreR]> when 'true' ->
	      %% Line 1203
	      case call 'unicode_util':'cp'
		       (Cs0) of
		%% Line 1204
		<[_10|Cs]>
		    when call 'erlang':'=:='
			  (_10,
			   Pre) ->
		    apply 'prefix_1'/2
			(Cs, PreR)
		%% Line 1205
		<_11> when 'true' ->
		    'nomatch'
	      end
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'prefix_1',2}}] )
	    -| ['compiler_generated'] )
	end
'split_1'/6 =
    %% Line 1208
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <Cs0 = [CP1|Cs],Needle = [C|_54],_55,Where,Curr,Acc>
	      when call 'erlang':'is_integer'
		    (CP1) ->
	      %% Line 1209
	      case <> of
		%% Line 1210
		<>
		    when call 'erlang':'=:='
			  (CP1,
			   C) ->
		    %% Line 1211
		    case apply 'prefix_1'/2
			     (Cs0, Needle) of
		      %% Line 1212
		      <'nomatch'> when 'true' ->
			  let <_6> =
			      case <C,Curr> of
				%% Line 1541
				( <Char,( #{}#
					  -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_integer'
									       -| ['compiler_generated'] )
					      (Char)
					  -| ['compiler_generated'] ) ->
				      ( [Char|( []
						-| ['compiler_generated'] )]
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1542
				( <Char,( #{}#
					  -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_list'
									       -| ['compiler_generated'] )
					      (Char)
					  -| ['compiler_generated'] ) ->
				      Char
				  -| ['compiler_generated'] )
				%% Line 1543
				( <Char,Bin>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_binary'
									       -| ['compiler_generated'] )
					      (Bin)
					  -| ['compiler_generated'] ) ->
				      ( [Char|( [Bin|( []
						       -| ['compiler_generated'] )]
						-| ['compiler_generated'] )]
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1544
				( <Char,Str>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_integer'
									       -| ['compiler_generated'] )
					      (Char)
					  -| ['compiler_generated'] ) ->
				      ( [Char|Str]
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1545
				( <GC,Str>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_list'
									       -| ['compiler_generated'] )
					      (GC)
					  -| ['compiler_generated'] ) ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '++'
									     -| ['compiler_generated'] )
					    (GC, Str)
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_69,_70> when ( 'true'
						   -| ['compiler_generated'] ) ->
				      %% Line 1541
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'function_clause'
						  -| ['compiler_generated'] ),_69,_70}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  apply 'split_1'/6
				  (Cs, Needle, 0, Where, _6, Acc)
		      %% Line 1213
		      <Rest>
			  when call 'erlang':'=:='
				(Where,
				 'leading') ->
			  let <_7> =
			      case %% Line 1214
				   Curr of
				%% Line 1537
				( <( [B|( []
					  -| ['compiler_generated'] )]
				     -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_binary'
									       -| ['compiler_generated'] )
					      (B)
					  -| ['compiler_generated'] ) ->
				      B
				  -| ['compiler_generated'] )
				%% Line 1538
				( <L>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_list'
									       -| ['compiler_generated'] )
					      (Curr)
					  -| ['compiler_generated'] ) ->
				      ( call ( 'lists'
					       -| ['compiler_generated'] ):( 'reverse'
									     -| ['compiler_generated'] )
					    (L)
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1539
				( <_72>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_integer'
									       -| ['compiler_generated'] )
					      (Curr)
					  -| ['compiler_generated'] ) ->
				      _72
				  -| ['compiler_generated'] )
				( <_73> when ( 'true'
					       -| ['compiler_generated'] ) ->
				      %% Line 1537
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'function_clause'
						  -| ['compiler_generated'] ),_73}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 1214
			      [_7|[Rest|[]]]
		      %% Line 1215
		      <Rest>
			  when call 'erlang':'=:='
				(Where,
				 'trailing') ->
			  let <_8> =
			      case %% Line 1216
				   Curr of
				%% Line 1537
				( <( [B|( []
					  -| ['compiler_generated'] )]
				     -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_binary'
									       -| ['compiler_generated'] )
					      (B)
					  -| ['compiler_generated'] ) ->
				      B
				  -| ['compiler_generated'] )
				%% Line 1538
				( <L>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_list'
									       -| ['compiler_generated'] )
					      (Curr)
					  -| ['compiler_generated'] ) ->
				      ( call ( 'lists'
					       -| ['compiler_generated'] ):( 'reverse'
									     -| ['compiler_generated'] )
					    (L)
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1539
				( <_75>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_integer'
									       -| ['compiler_generated'] )
					      (Curr)
					  -| ['compiler_generated'] ) ->
				      _75
				  -| ['compiler_generated'] )
				( <_76> when ( 'true'
					       -| ['compiler_generated'] ) ->
				      %% Line 1537
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'function_clause'
						  -| ['compiler_generated'] ),_76}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 1216
			      apply 'split_1'/6
				  (Cs, Needle, 0, Where, [C|Curr], [_8|[Rest|[]]])
		      %% Line 1217
		      <Rest>
			  when call 'erlang':'=:='
				(Where,
				 'all') ->
			  let <_9> =
			      case %% Line 1218
				   Curr of
				%% Line 1537
				( <( [B|( []
					  -| ['compiler_generated'] )]
				     -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_binary'
									       -| ['compiler_generated'] )
					      (B)
					  -| ['compiler_generated'] ) ->
				      B
				  -| ['compiler_generated'] )
				%% Line 1538
				( <L>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_list'
									       -| ['compiler_generated'] )
					      (Curr)
					  -| ['compiler_generated'] ) ->
				      ( call ( 'lists'
					       -| ['compiler_generated'] ):( 'reverse'
									     -| ['compiler_generated'] )
					    (L)
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1539
				( <_78>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_integer'
									       -| ['compiler_generated'] )
					      (Curr)
					  -| ['compiler_generated'] ) ->
				      _78
				  -| ['compiler_generated'] )
				( <_79> when ( 'true'
					       -| ['compiler_generated'] ) ->
				      %% Line 1537
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'function_clause'
						  -| ['compiler_generated'] ),_79}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 1218
			      apply 'split_1'/6
				  (Rest, Needle, 0, Where, [], [_9|Acc])
		      ( <_10> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_10})
			-| ['compiler_generated'] )
		    end
		%% Line 1220
		<> when 'true' ->
		    let <_11> =
			case %% Line 1221
			     <CP1,Curr> of
			  %% Line 1541
			  ( <Char,( #{}#
				    -| ['compiler_generated'] )>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_integer'
									 -| ['compiler_generated'] )
					(Char)
				    -| ['compiler_generated'] ) ->
				( [Char|( []
					  -| ['compiler_generated'] )]
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1542
			  ( <Char,( #{}#
				    -| ['compiler_generated'] )>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_list'
									 -| ['compiler_generated'] )
					(Char)
				    -| ['compiler_generated'] ) ->
				Char
			    -| ['compiler_generated'] )
			  %% Line 1543
			  ( <Char,Bin>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_binary'
									 -| ['compiler_generated'] )
					(Bin)
				    -| ['compiler_generated'] ) ->
				( [Char|( [Bin|( []
						 -| ['compiler_generated'] )]
					  -| ['compiler_generated'] )]
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1544
			  ( <Char,Str>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_integer'
									 -| ['compiler_generated'] )
					(Char)
				    -| ['compiler_generated'] ) ->
				( [Char|Str]
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1545
			  ( <GC,Str>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_list'
									 -| ['compiler_generated'] )
					(GC)
				    -| ['compiler_generated'] ) ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '++'
								       -| ['compiler_generated'] )
				      (GC, Str)
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <_82,_83> when ( 'true'
					     -| ['compiler_generated'] ) ->
				%% Line 1541
				( primop ( 'match_fail'
					   -| ['compiler_generated'] )
				      (( {( 'function_clause'
					    -| ['compiler_generated'] ),_82,_83}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    in  %% Line 1221
			apply 'split_1'/6
			    (Cs, Needle, 0, Where, _11, Acc)
	      end
	  %% Line 1223
	  <[Bin|Cont0],Needle,Start,Where,Curr0,Acc>
	      when %% Line 1224
		call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 1225
	      case apply 'bin_search_str'/4
		       (Bin, Start, Cont0, Needle) of
		%% Line 1226
		<{'nomatch',Sz,Cont}> when 'true' ->
		    %% Line 1227
		    case Bin of
		      <#{#<Keep>(Sz,8,'binary',['unsigned'|['big']]),
			 #<_56>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			  %% Line 1228
			  apply 'split_1'/6
			      (Cont, Needle, 0, Where, [Keep|Curr0], Acc)
		      ( <_13> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_13})
			-| ['compiler_generated'] )
		    end
		%% Line 1229
		<{Before,[Cs0|Cont],After}> when 'true' ->
		    let <Curr> =
			apply %% Line 1230
			      'add_non_empty'/2
			    (%% Line 1230
			     Before, %% Line 1230
				     Curr0)
		    in  %% Line 1231
			case Where of
			  %% Line 1232
			  <'leading'> when 'true' ->
			      let <_15> =
				  case %% Line 1233
				       Curr of
				    %% Line 1537
				    ( <( [B|( []
					      -| ['compiler_generated'] )]
					 -| ['compiler_generated'] )>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_binary'
										   -| ['compiler_generated'] )
						  (B)
					      -| ['compiler_generated'] ) ->
					  B
				      -| ['compiler_generated'] )
				    %% Line 1538
				    ( <L>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_list'
										   -| ['compiler_generated'] )
						  (Curr)
					      -| ['compiler_generated'] ) ->
					  ( call ( 'lists'
						   -| ['compiler_generated'] ):( 'reverse'
										 -| ['compiler_generated'] )
						(L)
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    %% Line 1539
				    ( <C>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_integer'
										   -| ['compiler_generated'] )
						  (Curr)
					      -| ['compiler_generated'] ) ->
					  C
				      -| ['compiler_generated'] )
				    ( <_85> when ( 'true'
						   -| ['compiler_generated'] ) ->
					  %% Line 1537
					  ( primop ( 'match_fail'
						     -| ['compiler_generated'] )
						(( {( 'function_clause'
						      -| ['compiler_generated'] ),_85}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      in  %% Line 1233
				  [_15|[After|[]]]
			  %% Line 1234
			  <'trailing'> when 'true' ->
			      %% Line 1235
			      case Cs0 of
				<#{#<_57>('undefined','undefined','utf8',['unsigned'|['big']]),
				   #<Cs>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				    let <_18> =
					call %% Line 1236
					     'erlang':%% Line 1236
						      'byte_size'
					    (%% Line 1236
					     Bin)
				    in  let <_17> =
					    call %% Line 1236
						 'erlang':%% Line 1236
							  'byte_size'
						(%% Line 1236
						 Cs)
					in  let <Next> =
						call %% Line 1236
						     'erlang':%% Line 1236
							      '-'
						    (_18, _17)
					    in  let <_20> =
						    case %% Line 1238
							 Curr of
						      %% Line 1537
						      ( <( [B|( []
								-| ['compiler_generated'] )]
							   -| ['compiler_generated'] )>
							    when ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'is_binary'
												     -| ['compiler_generated'] )
								    (B)
								-| ['compiler_generated'] ) ->
							    B
							-| ['compiler_generated'] )
						      %% Line 1538
						      ( <L>
							    when ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'is_list'
												     -| ['compiler_generated'] )
								    (Curr)
								-| ['compiler_generated'] ) ->
							    ( call ( 'lists'
								     -| ['compiler_generated'] ):( 'reverse'
												   -| ['compiler_generated'] )
								  (L)
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						      %% Line 1539
						      ( <C>
							    when ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'is_integer'
												     -| ['compiler_generated'] )
								    (Curr)
								-| ['compiler_generated'] ) ->
							    C
							-| ['compiler_generated'] )
						      ( <_87> when ( 'true'
								     -| ['compiler_generated'] ) ->
							    %% Line 1537
							    ( primop ( 'match_fail'
								       -| ['compiler_generated'] )
								  (( {( 'function_clause'
									-| ['compiler_generated'] ),_87}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						in  %% Line 1237
						    apply 'split_1'/6
							([Bin|Cont], Needle, Next, Where, %% Line 1238
											  Curr0, %% Line 1238
												 [_20|[After|[]]])
				( <_16> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_16})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1239
			  <'all'> when 'true' ->
			      let <_21> =
				  case %% Line 1240
				       Curr of
				    %% Line 1537
				    ( <( [B|( []
					      -| ['compiler_generated'] )]
					 -| ['compiler_generated'] )>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_binary'
										   -| ['compiler_generated'] )
						  (B)
					      -| ['compiler_generated'] ) ->
					  B
				      -| ['compiler_generated'] )
				    %% Line 1538
				    ( <L>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_list'
										   -| ['compiler_generated'] )
						  (Curr)
					      -| ['compiler_generated'] ) ->
					  ( call ( 'lists'
						   -| ['compiler_generated'] ):( 'reverse'
										 -| ['compiler_generated'] )
						(L)
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    %% Line 1539
				    ( <C>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_integer'
										   -| ['compiler_generated'] )
						  (Curr)
					      -| ['compiler_generated'] ) ->
					  C
				      -| ['compiler_generated'] )
				    ( <_89> when ( 'true'
						   -| ['compiler_generated'] ) ->
					  %% Line 1537
					  ( primop ( 'match_fail'
						     -| ['compiler_generated'] )
						(( {( 'function_clause'
						      -| ['compiler_generated'] ),_89}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      in  %% Line 1240
				  apply 'split_1'/6
				      (After, Needle, 0, Where, [], [_21|Acc])
			  ( <_22> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_22})
			    -| ['compiler_generated'] )
			end
		( <_23> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_23})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1243
	  <Cs0,Needle = [C|_58],_59,Where,Curr,Acc>
	      when call 'erlang':'is_list'
		    (Cs0) ->
	      %% Line 1244
	      case call 'unicode_util':'cp'
		       (Cs0) of
		%% Line 1245
		<[_60|Cs]>
		    when call 'erlang':'=:='
			  (_60,
			   C) ->
		    %% Line 1246
		    case apply 'prefix_1'/2
			     (Cs0, Needle) of
		      %% Line 1247
		      <'nomatch'> when 'true' ->
			  let <_24> =
			      case <C,Curr> of
				%% Line 1541
				( <Char,( #{}#
					  -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_integer'
									       -| ['compiler_generated'] )
					      (Char)
					  -| ['compiler_generated'] ) ->
				      ( [Char|( []
						-| ['compiler_generated'] )]
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1542
				( <Char,( #{}#
					  -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_list'
									       -| ['compiler_generated'] )
					      (Char)
					  -| ['compiler_generated'] ) ->
				      Char
				  -| ['compiler_generated'] )
				%% Line 1543
				( <Char,Bin>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_binary'
									       -| ['compiler_generated'] )
					      (Bin)
					  -| ['compiler_generated'] ) ->
				      ( [Char|( [Bin|( []
						       -| ['compiler_generated'] )]
						-| ['compiler_generated'] )]
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1544
				( <Char,Str>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_integer'
									       -| ['compiler_generated'] )
					      (Char)
					  -| ['compiler_generated'] ) ->
				      ( [Char|Str]
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1545
				( <GC,Str>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_list'
									       -| ['compiler_generated'] )
					      (GC)
					  -| ['compiler_generated'] ) ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '++'
									     -| ['compiler_generated'] )
					    (GC, Str)
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_92,_93> when ( 'true'
						   -| ['compiler_generated'] ) ->
				      %% Line 1541
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'function_clause'
						  -| ['compiler_generated'] ),_92,_93}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  apply 'split_1'/6
				  (Cs, Needle, 0, Where, _24, Acc)
		      %% Line 1248
		      <Rest>
			  when call 'erlang':'=:='
				(Where,
				 'leading') ->
			  let <_25> =
			      case %% Line 1249
				   Curr of
				%% Line 1537
				( <( [B|( []
					  -| ['compiler_generated'] )]
				     -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_binary'
									       -| ['compiler_generated'] )
					      (B)
					  -| ['compiler_generated'] ) ->
				      B
				  -| ['compiler_generated'] )
				%% Line 1538
				( <L>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_list'
									       -| ['compiler_generated'] )
					      (Curr)
					  -| ['compiler_generated'] ) ->
				      ( call ( 'lists'
					       -| ['compiler_generated'] ):( 'reverse'
									     -| ['compiler_generated'] )
					    (L)
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1539
				( <_95>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_integer'
									       -| ['compiler_generated'] )
					      (Curr)
					  -| ['compiler_generated'] ) ->
				      _95
				  -| ['compiler_generated'] )
				( <_96> when ( 'true'
					       -| ['compiler_generated'] ) ->
				      %% Line 1537
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'function_clause'
						  -| ['compiler_generated'] ),_96}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 1249
			      [_25|[Rest|[]]]
		      %% Line 1250
		      <Rest>
			  when call 'erlang':'=:='
				(Where,
				 'trailing') ->
			  let <_26> =
			      case %% Line 1251
				   Curr of
				%% Line 1537
				( <( [B|( []
					  -| ['compiler_generated'] )]
				     -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_binary'
									       -| ['compiler_generated'] )
					      (B)
					  -| ['compiler_generated'] ) ->
				      B
				  -| ['compiler_generated'] )
				%% Line 1538
				( <L>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_list'
									       -| ['compiler_generated'] )
					      (Curr)
					  -| ['compiler_generated'] ) ->
				      ( call ( 'lists'
					       -| ['compiler_generated'] ):( 'reverse'
									     -| ['compiler_generated'] )
					    (L)
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1539
				( <_98>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_integer'
									       -| ['compiler_generated'] )
					      (Curr)
					  -| ['compiler_generated'] ) ->
				      _98
				  -| ['compiler_generated'] )
				( <_99> when ( 'true'
					       -| ['compiler_generated'] ) ->
				      %% Line 1537
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'function_clause'
						  -| ['compiler_generated'] ),_99}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 1251
			      apply 'split_1'/6
				  (Cs, Needle, 0, Where, [C|Curr], [_26|[Rest|[]]])
		      %% Line 1252
		      <Rest>
			  when call 'erlang':'=:='
				(Where,
				 'all') ->
			  let <_27> =
			      case %% Line 1253
				   Curr of
				%% Line 1537
				( <( [B|( []
					  -| ['compiler_generated'] )]
				     -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_binary'
									       -| ['compiler_generated'] )
					      (B)
					  -| ['compiler_generated'] ) ->
				      B
				  -| ['compiler_generated'] )
				%% Line 1538
				( <L>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_list'
									       -| ['compiler_generated'] )
					      (Curr)
					  -| ['compiler_generated'] ) ->
				      ( call ( 'lists'
					       -| ['compiler_generated'] ):( 'reverse'
									     -| ['compiler_generated'] )
					    (L)
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1539
				( <_101>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_integer'
									       -| ['compiler_generated'] )
					      (Curr)
					  -| ['compiler_generated'] ) ->
				      _101
				  -| ['compiler_generated'] )
				( <_102> when ( 'true'
						-| ['compiler_generated'] ) ->
				      %% Line 1537
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'function_clause'
						  -| ['compiler_generated'] ),_102}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 1253
			      apply 'split_1'/6
				  (Rest, Needle, 0, Where, [], [_27|Acc])
		      ( <_28> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_28})
			-| ['compiler_generated'] )
		    end
		%% Line 1255
		<[Other|Cs]> when 'true' ->
		    let <_29> =
			case %% Line 1256
			     <Other,Curr> of
			  %% Line 1541
			  ( <Char,( #{}#
				    -| ['compiler_generated'] )>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_integer'
									 -| ['compiler_generated'] )
					(Char)
				    -| ['compiler_generated'] ) ->
				( [Char|( []
					  -| ['compiler_generated'] )]
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1542
			  ( <Char,( #{}#
				    -| ['compiler_generated'] )>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_list'
									 -| ['compiler_generated'] )
					(Char)
				    -| ['compiler_generated'] ) ->
				Char
			    -| ['compiler_generated'] )
			  %% Line 1543
			  ( <Char,Bin>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_binary'
									 -| ['compiler_generated'] )
					(Bin)
				    -| ['compiler_generated'] ) ->
				( [Char|( [Bin|( []
						 -| ['compiler_generated'] )]
					  -| ['compiler_generated'] )]
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1544
			  ( <Char,Str>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_integer'
									 -| ['compiler_generated'] )
					(Char)
				    -| ['compiler_generated'] ) ->
				( [Char|Str]
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1545
			  ( <GC,Str>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_list'
									 -| ['compiler_generated'] )
					(GC)
				    -| ['compiler_generated'] ) ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '++'
								       -| ['compiler_generated'] )
				      (GC, Str)
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <_105,_106> when ( 'true'
					       -| ['compiler_generated'] ) ->
				%% Line 1541
				( primop ( 'match_fail'
					   -| ['compiler_generated'] )
				      (( {( 'function_clause'
					    -| ['compiler_generated'] ),_105,_106}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    in  %% Line 1256
			apply 'split_1'/6
			    (Cs, Needle, 0, Where, _29, Acc)
		%% Line 1257
		<[]> when 'true' ->
		    let <_30> =
			case %% Line 1258
			     Curr of
			  %% Line 1537
			  ( <( [B|( []
				    -| ['compiler_generated'] )]
			       -| ['compiler_generated'] )>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_binary'
									 -| ['compiler_generated'] )
					(B)
				    -| ['compiler_generated'] ) ->
				B
			    -| ['compiler_generated'] )
			  %% Line 1538
			  ( <L>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_list'
									 -| ['compiler_generated'] )
					(Curr)
				    -| ['compiler_generated'] ) ->
				( call ( 'lists'
					 -| ['compiler_generated'] ):( 'reverse'
								       -| ['compiler_generated'] )
				      (L)
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1539
			  ( <_108>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_integer'
									 -| ['compiler_generated'] )
					(Curr)
				    -| ['compiler_generated'] ) ->
				_108
			    -| ['compiler_generated'] )
			  ( <_109> when ( 'true'
					  -| ['compiler_generated'] ) ->
				%% Line 1537
				( primop ( 'match_fail'
					   -| ['compiler_generated'] )
				      (( {( 'function_clause'
					    -| ['compiler_generated'] ),_109}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    in  %% Line 1258
			{_30,Acc}
		( <_31> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_31})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1260
	  <Bin,Needle = [_X_C|_61],Start,Where,Curr0,Acc> when 'true' ->
	      %% Line 1261
	      case apply 'bin_search_str'/4
		       (Bin, Start, [], Needle) of
		%% Line 1262
		<{'nomatch',_62,_63}> when 'true' ->
		    %% Line 1263
		    case Bin of
		      <#{#<_64>(Start,8,'binary',['unsigned'|['big']]),
			 #<Keep>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			  let <_110> =
			      [%% Line 1264
			       Keep|%% Line 1264
				    Curr0]
			  in  let <_33> =
				  case _110 of
				    %% Line 1537
				    ( <( [B|( []
					      -| ['compiler_generated'] )]
					 -| ['compiler_generated'] )>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_binary'
										   -| ['compiler_generated'] )
						  (B)
					      -| ['compiler_generated'] ) ->
					  B
				      -| ['compiler_generated'] )
				    %% Line 1538
				    ( <L>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_list'
										   -| ['compiler_generated'] )
						  (_110)
					      -| ['compiler_generated'] ) ->
					  ( call ( 'lists'
						   -| ['compiler_generated'] ):( 'reverse'
										 -| ['compiler_generated'] )
						(L)
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    %% Line 1539
				    ( <C>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_integer'
										   -| ['compiler_generated'] )
						  (_110)
					      -| ['compiler_generated'] ) ->
					  C
				      -| ['compiler_generated'] )
				    ( <_111> when ( 'true'
						    -| ['compiler_generated'] ) ->
					  %% Line 1537
					  ( primop ( 'match_fail'
						     -| ['compiler_generated'] )
						(( {( 'function_clause'
						      -| ['compiler_generated'] ),_111}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      in  %% Line 1264
				  {_33,Acc}
		      ( <_32> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_32})
			-| ['compiler_generated'] )
		    end
		%% Line 1265
		<{Before,[Cs0|[]],After}> when 'true' ->
		    %% Line 1266
		    case Where of
		      %% Line 1267
		      <'leading'> when 'true' ->
			  let <_112> =
			      [%% Line 1268
			       Before|%% Line 1268
				      Curr0]
			  in  let <_34> =
				  case _112 of
				    %% Line 1537
				    ( <( [B|( []
					      -| ['compiler_generated'] )]
					 -| ['compiler_generated'] )>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_binary'
										   -| ['compiler_generated'] )
						  (B)
					      -| ['compiler_generated'] ) ->
					  B
				      -| ['compiler_generated'] )
				    %% Line 1538
				    ( <L>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_list'
										   -| ['compiler_generated'] )
						  (_112)
					      -| ['compiler_generated'] ) ->
					  ( call ( 'lists'
						   -| ['compiler_generated'] ):( 'reverse'
										 -| ['compiler_generated'] )
						(L)
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    %% Line 1539
				    ( <C>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_integer'
										   -| ['compiler_generated'] )
						  (_112)
					      -| ['compiler_generated'] ) ->
					  C
				      -| ['compiler_generated'] )
				    ( <_113> when ( 'true'
						    -| ['compiler_generated'] ) ->
					  %% Line 1537
					  ( primop ( 'match_fail'
						     -| ['compiler_generated'] )
						(( {( 'function_clause'
						      -| ['compiler_generated'] ),_113}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      in  %% Line 1268
				  [_34|[After|[]]]
		      %% Line 1269
		      <'trailing'> when 'true' ->
			  %% Line 1270
			  case Cs0 of
			    <#{#<_65>('undefined','undefined','utf8',['unsigned'|['big']]),
			       #<Cs>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				let <_37> =
				    call %% Line 1271
					 'erlang':%% Line 1271
						  'byte_size'
					(%% Line 1271
					 Bin)
				in  let <_36> =
					call %% Line 1271
					     'erlang':%% Line 1271
						      'byte_size'
					    (%% Line 1271
					     Cs)
				    in  let <Next> =
					    call %% Line 1271
						 'erlang':%% Line 1271
							  '-'
						(_37, _36)
					in  let <_39> =
						case %% Line 1273
						     <Before,Curr0> of
						  %% Line 1532
						  ( <Token,( []
							     -| ['compiler_generated'] )> when ( 'true'
												 -| ['compiler_generated'] ) ->
							Token
						    -| ['compiler_generated'] )
						  %% Line 1533
						  ( <BinPart,( [C|( []
								    -| ['compiler_generated'] )]
							       -| ['compiler_generated'] )>
							when ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'is_integer'
												 -| ['compiler_generated'] )
								(C)
							    -| ['compiler_generated'] ) ->
							( #{( #<C>(( 'undefined'
								     -| ['compiler_generated'] ),( 'undefined'
												   -| ['compiler_generated'] ),( 'utf8'
																 -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			       -| ['compiler_generated'] ))
							      -| ['compiler_generated'] ),
							    ( #<BinPart>(( 'all'
									   -| ['compiler_generated'] ),( 8
													 -| ['compiler_generated'] ),( 'binary'
																       -| ['compiler_generated'] ),( ['unsigned'|['big']]
																				     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )}#
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  %% Line 1534
						  ( <( #{}#
						       -| ['compiler_generated'] ),Tkn> when ( 'true'
											       -| ['compiler_generated'] ) ->
							( call ( 'lists'
								 -| ['compiler_generated'] ):( 'reverse'
											       -| ['compiler_generated'] )
							      (Tkn)
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  %% Line 1535
						  ( <BinPart,_116> when ( 'true'
									  -| ['compiler_generated'] ) ->
							( let <_117> =
							      call ( 'lists'
								     -| ['compiler_generated'] ):( 'reverse'
												   -| ['compiler_generated'] )
								  (_116)
							  in  ( [_117|( [BinPart|( []
										   -| ['compiler_generated'] )]
									-| ['compiler_generated'] )]
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					    in  %% Line 1272
						apply 'split_1'/6
						    (Bin, Needle, Next, Where, Curr0, %% Line 1273
										      [_39|[After|[]]])
			    ( <_35> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_35})
			      -| ['compiler_generated'] )
			  end
		      %% Line 1274
		      <'all'> when 'true' ->
			  let <_41> =
			      call %% Line 1275
				   'erlang':%% Line 1275
					    'byte_size'
				  (%% Line 1275
				   Bin)
			  in  let <_40> =
				  call %% Line 1275
				       'erlang':%% Line 1275
						'byte_size'
				      (%% Line 1275
				       After)
			      in  let <Next> =
				      call %% Line 1275
					   'erlang':%% Line 1275
						    '-'
					  (_41, _40)
				  in  %% Line 1276
				      case Before of
					<#{#<_66>(Start,8,'binary',['unsigned'|['big']]),
					   #<Keep>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
					    let <Curr> =
						[%% Line 1277
						 Keep|%% Line 1277
						      Curr0]
					    in  let <_45> =
						    case %% Line 1278
							 Curr of
						      %% Line 1537
						      ( <( [B|( []
								-| ['compiler_generated'] )]
							   -| ['compiler_generated'] )>
							    when ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'is_binary'
												     -| ['compiler_generated'] )
								    (B)
								-| ['compiler_generated'] ) ->
							    B
							-| ['compiler_generated'] )
						      %% Line 1538
						      ( <L>
							    when ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'is_list'
												     -| ['compiler_generated'] )
								    (Curr)
								-| ['compiler_generated'] ) ->
							    ( call ( 'lists'
								     -| ['compiler_generated'] ):( 'reverse'
												   -| ['compiler_generated'] )
								  (L)
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						      %% Line 1539
						      ( <C>
							    when ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'is_integer'
												     -| ['compiler_generated'] )
								    (Curr)
								-| ['compiler_generated'] ) ->
							    C
							-| ['compiler_generated'] )
						      ( <_119> when ( 'true'
								      -| ['compiler_generated'] ) ->
							    %% Line 1537
							    ( primop ( 'match_fail'
								       -| ['compiler_generated'] )
								  (( {( 'function_clause'
									-| ['compiler_generated'] ),_119}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						in  %% Line 1278
						    apply 'split_1'/6
							(Bin, Needle, Next, Where, [], [_45|Acc])
					( <_43> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_43})
					  -| ['compiler_generated'] )
				      end
		      ( <_46> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_46})
			-| ['compiler_generated'] )
		    end
		( <_47> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_47})
		  -| ['compiler_generated'] )
	      end
	  ( <_53,_52,_51,_50,_49,_48> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_53,_52,_51,_50,_49,_48})
		  -| [{'function_name',{'split_1',6}}] )
	    -| ['compiler_generated'] )
	end
'lexemes_m'/3 =
    %% Line 1282
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Cs0 = [CP|_24],Seps0 = {GCs,CPs,_25},Ts>
	      when call 'erlang':'is_integer'
		    (CP) ->
	      %% Line 1283
	      case call 'lists':'member'
		       (CP, CPs) of
		%% Line 1284
		<'true'> when 'true' ->
		    %% Line 1285
		    case call 'unicode_util':'gc'
			     (Cs0) of
		      <[GC|Cs2]> when 'true' ->
			  %% Line 1286
			  case call 'lists':'member'
				   (GC, GCs) of
			    %% Line 1287
			    <'true'> when 'true' ->
				%% Line 1288
				apply 'lexemes_m'/3
				    (Cs2, Seps0, Ts)
			    %% Line 1289
			    <'false'> when 'true' ->
				let <Seps> =
				    case %% Line 1290
					 Seps0 of
				      %% Line 1585
				      ( <( {Sep,_34,( 'undefined'
						      -| ['compiler_generated'] )}
					   -| ['compiler_generated'] )> when ( 'true'
									       -| ['compiler_generated'] ) ->
					    ( let <_35> =
						  apply %% Line 1586
							'bin_pattern'/1
						      (_34)
					      in  ( let <_36> =
							call %% Line 1586
							     ( 'binary'
							       -| ['compiler_generated'] ):%% Line 1586
											   ( 'compile_pattern'
											     -| ['compiler_generated'] )
							    (_35)
						    in  %% Line 1586
							( {Sep,_34,_36}
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      %% Line 1587
				      ( <( Compiled = ( {_4,_5,_6}
							-| ['compiler_generated'] )
					   -| ['compiler_generated'] )> when ( 'true'
									       -| ['compiler_generated'] ) ->
					    Compiled
					-| ['compiler_generated'] )
				      ( <_3> when ( 'true'
						    -| ['compiler_generated'] ) ->
					    %% Line 1585
					    ( primop ( 'match_fail'
						       -| ['compiler_generated'] )
						  (( {( 'function_clause'
							-| ['compiler_generated'] ),_3}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				in  %% Line 1291
				    case apply 'lexeme_pick'/3
					     (Cs0, Seps, []) of
				      <{Lexeme,Rest}> when 'true' ->
					  %% Line 1292
					  apply 'lexemes_m'/3
					      (Rest, Seps, [Lexeme|Ts])
				      ( <_5> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_5})
					-| ['compiler_generated'] )
				    end
			    ( <_6> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_6})
			      -| ['compiler_generated'] )
			  end
		      ( <_3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_3})
			-| ['compiler_generated'] )
		    end
		%% Line 1294
		<'false'> when 'true' ->
		    let <Seps> =
			case %% Line 1295
			     Seps0 of
			  %% Line 1585
			  ( <( {Sep,_38,( 'undefined'
					  -| ['compiler_generated'] )}
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( let <_39> =
				      apply %% Line 1586
					    'bin_pattern'/1
					  (_38)
				  in  ( let <_40> =
					    call %% Line 1586
						 ( 'binary'
						   -| ['compiler_generated'] ):%% Line 1586
									       ( 'compile_pattern'
										 -| ['compiler_generated'] )
						(_39)
					in  %% Line 1586
					    ( {Sep,_38,_40}
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1587
			  ( <( Compiled = ( {_4,_5,_6}
					    -| ['compiler_generated'] )
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				Compiled
			    -| ['compiler_generated'] )
			  ( <_3> when ( 'true'
					-| ['compiler_generated'] ) ->
				%% Line 1585
				( primop ( 'match_fail'
					   -| ['compiler_generated'] )
				      (( {( 'function_clause'
					    -| ['compiler_generated'] ),_3}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    in  %% Line 1296
			case apply 'lexeme_pick'/3
				 (Cs0, Seps, []) of
			  <{Lexeme,Rest}> when 'true' ->
			      %% Line 1297
			      apply 'lexemes_m'/3
				  (Rest, Seps, [Lexeme|Ts])
			  ( <_8> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_8})
			    -| ['compiler_generated'] )
			end
		( <_9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1299
	  <[Bin|Cont0],Seps0 = {GCs,_26,_27},Ts>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 1300
	      case apply 'bin_search_inv'/3
		       (Bin, Cont0, GCs) of
		%% Line 1301
		<{'nomatch',Cont}> when 'true' ->
		    %% Line 1302
		    apply 'lexemes_m'/3
			(Cont, Seps0, Ts)
		%% Line 1303
		<Cs> when 'true' ->
		    let <Seps> =
			case %% Line 1304
			     Seps0 of
			  %% Line 1585
			  ( <( {Sep,CPs,( 'undefined'
					  -| ['compiler_generated'] )}
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( let <_42> =
				      apply %% Line 1586
					    'bin_pattern'/1
					  (%% Line 1586
					   CPs)
				  in  ( let <_43> =
					    call %% Line 1586
						 ( 'binary'
						   -| ['compiler_generated'] ):%% Line 1586
									       ( 'compile_pattern'
										 -| ['compiler_generated'] )
						(_42)
					in  %% Line 1586
					    ( {Sep,CPs,_43}
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1587
			  ( <( Compiled = ( {_4,_5,_6}
					    -| ['compiler_generated'] )
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				Compiled
			    -| ['compiler_generated'] )
			  ( <_3> when ( 'true'
					-| ['compiler_generated'] ) ->
				%% Line 1585
				( primop ( 'match_fail'
					   -| ['compiler_generated'] )
				      (( {( 'function_clause'
					    -| ['compiler_generated'] ),_3}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    in  %% Line 1305
			case apply 'lexeme_pick'/3
				 (Cs, Seps, []) of
			  <{Lexeme,Rest}> when 'true' ->
			      %% Line 1306
			      apply 'lexemes_m'/3
				  (Rest, Seps, [Lexeme|Ts])
			  ( <_11> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_11})
			    -| ['compiler_generated'] )
			end
	      end
	  %% Line 1308
	  <Cs0,Seps0 = {GCs,_28,_29},Ts>
	      when call 'erlang':'is_list'
		    (Cs0) ->
	      %% Line 1309
	      case call 'unicode_util':'gc'
		       (Cs0) of
		%% Line 1310
		<[C|Cs]> when 'true' ->
		    %% Line 1311
		    case call 'lists':'member'
			     (C, GCs) of
		      %% Line 1312
		      <'true'> when 'true' ->
			  %% Line 1313
			  apply 'lexemes_m'/3
			      (Cs, Seps0, Ts)
		      %% Line 1314
		      <'false'> when 'true' ->
			  let <Seps> =
			      case %% Line 1315
				   Seps0 of
				%% Line 1585
				( <( {Sep,CPs,( 'undefined'
						-| ['compiler_generated'] )}
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( let <_45> =
					    apply %% Line 1586
						  'bin_pattern'/1
						(%% Line 1586
						 CPs)
					in  ( let <_46> =
						  call %% Line 1586
						       ( 'binary'
							 -| ['compiler_generated'] ):%% Line 1586
										     ( 'compile_pattern'
										       -| ['compiler_generated'] )
						      (_45)
					      in  %% Line 1586
						  ( {Sep,CPs,_46}
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1587
				( <( Compiled = ( {_4,_5,_6}
						  -| ['compiler_generated'] )
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      Compiled
				  -| ['compiler_generated'] )
				( <_3> when ( 'true'
					      -| ['compiler_generated'] ) ->
				      %% Line 1585
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'function_clause'
						  -| ['compiler_generated'] ),_3}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 1316
			      case apply 'lexeme_pick'/3
				       (Cs0, Seps, []) of
				<{Lexeme,Rest}> when 'true' ->
				    %% Line 1317
				    apply 'lexemes_m'/3
					(Rest, Seps, [Lexeme|Ts])
				( <_14> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_14})
				  -| ['compiler_generated'] )
			      end
		      ( <_15> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_15})
			-| ['compiler_generated'] )
		    end
		%% Line 1319
		<[]> when 'true' ->
		    %% Line 1320
		    call 'lists':'reverse'
			(Ts)
		( <_16> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_16})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1322
	  <Bin,Seps0 = {GCs,_30,_31},Ts>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 1323
	      case apply 'bin_search_inv'/3
		       (Bin, [], GCs) of
		%% Line 1324
		<{'nomatch',_32}> when 'true' ->
		    %% Line 1325
		    call 'lists':'reverse'
			(Ts)
		%% Line 1326
		<[Cs|[]]> when 'true' ->
		    let <Seps> =
			case %% Line 1327
			     Seps0 of
			  %% Line 1585
			  ( <( {Sep,CPs,( 'undefined'
					  -| ['compiler_generated'] )}
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( let <_48> =
				      apply %% Line 1586
					    'bin_pattern'/1
					  (%% Line 1586
					   CPs)
				  in  ( let <_49> =
					    call %% Line 1586
						 ( 'binary'
						   -| ['compiler_generated'] ):%% Line 1586
									       ( 'compile_pattern'
										 -| ['compiler_generated'] )
						(_48)
					in  %% Line 1586
					    ( {Sep,CPs,_49}
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1587
			  ( <( Compiled = ( {_4,_5,_6}
					    -| ['compiler_generated'] )
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				Compiled
			    -| ['compiler_generated'] )
			  ( <_3> when ( 'true'
					-| ['compiler_generated'] ) ->
				%% Line 1585
				( primop ( 'match_fail'
					   -| ['compiler_generated'] )
				      (( {( 'function_clause'
					    -| ['compiler_generated'] ),_3}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    in  %% Line 1328
			case apply 'lexeme_pick'/3
				 (Cs, Seps, []) of
			  <{Lexeme,Rest}> when 'true' ->
			      let <_19> =
				  apply %% Line 1329
					'add_non_empty'/2
				      (%% Line 1329
				       Lexeme, %% Line 1329
					       Ts)
			      in  %% Line 1329
				  apply 'lexemes_m'/3
				      (Rest, Seps, _19)
			  ( <_18> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_18})
			    -| ['compiler_generated'] )
			end
		( <_20> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_20})
		  -| ['compiler_generated'] )
	      end
	  ( <_23,_22,_21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_23,_22,_21})
		  -| [{'function_name',{'lexemes_m',3}}] )
	    -| ['compiler_generated'] )
	end
'lexeme_pick'/3 =
    %% Line 1332
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Cs0 = [CP|Cs1],Seps = {GCs,CPs,_34},Tkn>
	      when call 'erlang':'is_integer'
		    (CP) ->
	      %% Line 1333
	      case call 'lists':'member'
		       (CP, CPs) of
		%% Line 1334
		<'true'> when 'true' ->
		    %% Line 1335
		    case call 'unicode_util':'gc'
			     (Cs0) of
		      <[GC|Cs2]> when 'true' ->
			  %% Line 1336
			  case call 'lists':'member'
				   (GC, GCs) of
			    %% Line 1337
			    <'true'> when 'true' ->
				let <_4> =
				    case Tkn of
				      %% Line 1537
				      ( <( [B|( []
						-| ['compiler_generated'] )]
					   -| ['compiler_generated'] )>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_binary'
										     -| ['compiler_generated'] )
						    (B)
						-| ['compiler_generated'] ) ->
					    B
					-| ['compiler_generated'] )
				      %% Line 1538
				      ( <L>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_list'
										     -| ['compiler_generated'] )
						    (Tkn)
						-| ['compiler_generated'] ) ->
					    ( call ( 'lists'
						     -| ['compiler_generated'] ):( 'reverse'
										   -| ['compiler_generated'] )
						  (L)
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      %% Line 1539
				      ( <C>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_integer'
										     -| ['compiler_generated'] )
						    (Tkn)
						-| ['compiler_generated'] ) ->
					    C
					-| ['compiler_generated'] )
				      ( <_41> when ( 'true'
						     -| ['compiler_generated'] ) ->
					    %% Line 1537
					    ( primop ( 'match_fail'
						       -| ['compiler_generated'] )
						  (( {( 'function_clause'
							-| ['compiler_generated'] ),_41}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				in  {_4,Cs2}
			    %% Line 1338
			    <'false'> when 'true' ->
				let <_5> =
				    case GC of
				      %% Line 1537
				      ( <( [B|( []
						-| ['compiler_generated'] )]
					   -| ['compiler_generated'] )>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_binary'
										     -| ['compiler_generated'] )
						    (B)
						-| ['compiler_generated'] ) ->
					    B
					-| ['compiler_generated'] )
				      %% Line 1538
				      ( <L>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_list'
										     -| ['compiler_generated'] )
						    (GC)
						-| ['compiler_generated'] ) ->
					    ( call ( 'lists'
						     -| ['compiler_generated'] ):( 'reverse'
										   -| ['compiler_generated'] )
						  (L)
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      %% Line 1539
				      ( <C>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_integer'
										     -| ['compiler_generated'] )
						    (GC)
						-| ['compiler_generated'] ) ->
					    C
					-| ['compiler_generated'] )
				      ( <_43> when ( 'true'
						     -| ['compiler_generated'] ) ->
					    %% Line 1537
					    ( primop ( 'match_fail'
						       -| ['compiler_generated'] )
						  (( {( 'function_clause'
							-| ['compiler_generated'] ),_43}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				in  let <_6> =
					case <_5,Tkn> of
					  %% Line 1541
					  ( <Char,( #{}#
						    -| ['compiler_generated'] )>
						when ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'is_integer'
											 -| ['compiler_generated'] )
							(Char)
						    -| ['compiler_generated'] ) ->
						( [Char|( []
							  -| ['compiler_generated'] )]
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  %% Line 1542
					  ( <Char,( #{}#
						    -| ['compiler_generated'] )>
						when ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'is_list'
											 -| ['compiler_generated'] )
							(Char)
						    -| ['compiler_generated'] ) ->
						Char
					    -| ['compiler_generated'] )
					  %% Line 1543
					  ( <Char,Bin>
						when ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'is_binary'
											 -| ['compiler_generated'] )
							(Bin)
						    -| ['compiler_generated'] ) ->
						( [Char|( [Bin|( []
								 -| ['compiler_generated'] )]
							  -| ['compiler_generated'] )]
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  %% Line 1544
					  ( <Char,Str>
						when ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'is_integer'
											 -| ['compiler_generated'] )
							(Char)
						    -| ['compiler_generated'] ) ->
						( [Char|Str]
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  %% Line 1545
					  ( <_46,Str>
						when ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'is_list'
											 -| ['compiler_generated'] )
							(_46)
						    -| ['compiler_generated'] ) ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( '++'
										       -| ['compiler_generated'] )
						      (_46, Str)
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_3,_47> when ( 'true'
							    -| ['compiler_generated'] ) ->
						%% Line 1541
						( primop ( 'match_fail'
							   -| ['compiler_generated'] )
						      (( {( 'function_clause'
							    -| ['compiler_generated'] ),_3,_47}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
				    in  apply 'lexeme_pick'/3
					    (Cs2, Seps, _6)
			    ( <_7> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_7})
			      -| ['compiler_generated'] )
			  end
		      ( <_3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_3})
			-| ['compiler_generated'] )
		    end
		%% Line 1340
		<'false'> when 'true' ->
		    apply 'lexeme_pick'/3
			(Cs1, Seps, [CP|Tkn])
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1342
	  <[Bin|Cont0],Seps,Tkn>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 1343
	      case apply 'bin_search'/3
		       (Bin, Cont0, Seps) of
		%% Line 1344
		<{'nomatch',_35}> when 'true' ->
		    %% Line 1345
		    apply 'lexeme_pick'/3
			(Cont0, Seps, [Bin|Tkn])
		%% Line 1346
		<Cs = [Left|_X_Cont]> when 'true' ->
		    let <_10> =
			call %% Line 1347
			     'erlang':%% Line 1347
				      'byte_size'
			    (%% Line 1347
			     Bin)
		    in  let <_9> =
			    call %% Line 1347
				 'erlang':%% Line 1347
					  'byte_size'
				(%% Line 1347
				 Left)
			in  let <Bytes> =
				call %% Line 1347
				     'erlang':%% Line 1347
					      '-'
				    (_10, _9)
			    in  %% Line 1348
				case Bin of
				  <#{#<Lexeme>(Bytes,8,'binary',['unsigned'|['big']]),
				     #<_36>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				      let <_13> =
					  case %% Line 1349
					       <Lexeme,Tkn> of
					    %% Line 1532
					    ( <Token,( []
						       -| ['compiler_generated'] )> when ( 'true'
											   -| ['compiler_generated'] ) ->
						  Token
					      -| ['compiler_generated'] )
					    %% Line 1533
					    ( <BinPart,( [C|( []
							      -| ['compiler_generated'] )]
							 -| ['compiler_generated'] )>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_integer'
											   -| ['compiler_generated'] )
							  (C)
						      -| ['compiler_generated'] ) ->
						  ( #{( #<C>(( 'undefined'
							       -| ['compiler_generated'] ),( 'undefined'
											     -| ['compiler_generated'] ),( 'utf8'
															   -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			 -| ['compiler_generated'] ))
							-| ['compiler_generated'] ),
						      ( #<BinPart>(( 'all'
								     -| ['compiler_generated'] ),( 8
												   -| ['compiler_generated'] ),( 'binary'
																 -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )}#
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1534
					    ( <( #{}#
						 -| ['compiler_generated'] ),_50> when ( 'true'
											 -| ['compiler_generated'] ) ->
						  ( call ( 'lists'
							   -| ['compiler_generated'] ):( 'reverse'
											 -| ['compiler_generated'] )
							(_50)
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1535
					    ( <BinPart,_51> when ( 'true'
								   -| ['compiler_generated'] ) ->
						  ( let <_52> =
							call ( 'lists'
							       -| ['compiler_generated'] ):( 'reverse'
											     -| ['compiler_generated'] )
							    (_51)
						    in  ( [_52|( [BinPart|( []
									    -| ['compiler_generated'] )]
								 -| ['compiler_generated'] )]
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				      in  %% Line 1349
					  {_13,Cs}
				  ( <_12> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_12})
				    -| ['compiler_generated'] )
				end
		( <_14> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1351
	  <Cs0,Seps = {GCs,CPs,_37},Tkn>
	      when call 'erlang':'is_list'
		    (Cs0) ->
	      %% Line 1352
	      case call 'unicode_util':'cp'
		       (Cs0) of
		%% Line 1353
		<[CP|Cs]> when 'true' ->
		    %% Line 1354
		    case call 'lists':'member'
			     (CP, CPs) of
		      %% Line 1355
		      <'true'> when 'true' ->
			  %% Line 1356
			  case call 'unicode_util':'gc'
				   (Cs0) of
			    <[GC|Cs2]> when 'true' ->
				%% Line 1357
				case call 'lists':'member'
					 (GC, GCs) of
				  %% Line 1358
				  <'true'> when 'true' ->
				      let <_16> =
					  case Tkn of
					    %% Line 1537
					    ( <( [B|( []
						      -| ['compiler_generated'] )]
						 -| ['compiler_generated'] )>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_binary'
											   -| ['compiler_generated'] )
							  (B)
						      -| ['compiler_generated'] ) ->
						  B
					      -| ['compiler_generated'] )
					    %% Line 1538
					    ( <L>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_list'
											   -| ['compiler_generated'] )
							  (Tkn)
						      -| ['compiler_generated'] ) ->
						  ( call ( 'lists'
							   -| ['compiler_generated'] ):( 'reverse'
											 -| ['compiler_generated'] )
							(L)
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1539
					    ( <C>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_integer'
											   -| ['compiler_generated'] )
							  (Tkn)
						      -| ['compiler_generated'] ) ->
						  C
					      -| ['compiler_generated'] )
					    ( <_54> when ( 'true'
							   -| ['compiler_generated'] ) ->
						  %% Line 1537
						  ( primop ( 'match_fail'
							     -| ['compiler_generated'] )
							(( {( 'function_clause'
							      -| ['compiler_generated'] ),_54}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				      in  {_16,Cs2}
				  %% Line 1359
				  <'false'> when 'true' ->
				      let <_17> =
					  case GC of
					    %% Line 1537
					    ( <( [B|( []
						      -| ['compiler_generated'] )]
						 -| ['compiler_generated'] )>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_binary'
											   -| ['compiler_generated'] )
							  (B)
						      -| ['compiler_generated'] ) ->
						  B
					      -| ['compiler_generated'] )
					    %% Line 1538
					    ( <L>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_list'
											   -| ['compiler_generated'] )
							  (GC)
						      -| ['compiler_generated'] ) ->
						  ( call ( 'lists'
							   -| ['compiler_generated'] ):( 'reverse'
											 -| ['compiler_generated'] )
							(L)
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1539
					    ( <C>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_integer'
											   -| ['compiler_generated'] )
							  (GC)
						      -| ['compiler_generated'] ) ->
						  C
					      -| ['compiler_generated'] )
					    ( <_56> when ( 'true'
							   -| ['compiler_generated'] ) ->
						  %% Line 1537
						  ( primop ( 'match_fail'
							     -| ['compiler_generated'] )
							(( {( 'function_clause'
							      -| ['compiler_generated'] ),_56}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				      in  let <_18> =
					      case <_17,Tkn> of
						%% Line 1541
						( <Char,( #{}#
							  -| ['compiler_generated'] )>
						      when ( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'is_integer'
											       -| ['compiler_generated'] )
							      (Char)
							  -| ['compiler_generated'] ) ->
						      ( [Char|( []
								-| ['compiler_generated'] )]
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						%% Line 1542
						( <Char,( #{}#
							  -| ['compiler_generated'] )>
						      when ( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'is_list'
											       -| ['compiler_generated'] )
							      (Char)
							  -| ['compiler_generated'] ) ->
						      Char
						  -| ['compiler_generated'] )
						%% Line 1543
						( <Char,Bin>
						      when ( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'is_binary'
											       -| ['compiler_generated'] )
							      (Bin)
							  -| ['compiler_generated'] ) ->
						      ( [Char|( [Bin|( []
								       -| ['compiler_generated'] )]
								-| ['compiler_generated'] )]
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						%% Line 1544
						( <Char,Str>
						      when ( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'is_integer'
											       -| ['compiler_generated'] )
							      (Char)
							  -| ['compiler_generated'] ) ->
						      ( [Char|Str]
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						%% Line 1545
						( <_59,Str>
						      when ( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'is_list'
											       -| ['compiler_generated'] )
							      (_59)
							  -| ['compiler_generated'] ) ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( '++'
											     -| ['compiler_generated'] )
							    (_59, Str)
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <_3,_60> when ( 'true'
								  -| ['compiler_generated'] ) ->
						      %% Line 1541
						      ( primop ( 'match_fail'
								 -| ['compiler_generated'] )
							    (( {( 'function_clause'
								  -| ['compiler_generated'] ),_3,_60}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					  in  apply 'lexeme_pick'/3
						  (Cs2, Seps, _18)
				  ( <_19> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_19})
				    -| ['compiler_generated'] )
				end
			    ( <_15> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_15})
			      -| ['compiler_generated'] )
			  end
		      %% Line 1361
		      <'false'> when 'true' ->
			  let <_20> =
			      case %% Line 1362
				   <CP,Tkn> of
				%% Line 1541
				( <Char,( #{}#
					  -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_integer'
									       -| ['compiler_generated'] )
					      (Char)
					  -| ['compiler_generated'] ) ->
				      ( [Char|( []
						-| ['compiler_generated'] )]
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1542
				( <Char,( #{}#
					  -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_list'
									       -| ['compiler_generated'] )
					      (Char)
					  -| ['compiler_generated'] ) ->
				      Char
				  -| ['compiler_generated'] )
				%% Line 1543
				( <Char,Bin>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_binary'
									       -| ['compiler_generated'] )
					      (Bin)
					  -| ['compiler_generated'] ) ->
				      ( [Char|( [Bin|( []
						       -| ['compiler_generated'] )]
						-| ['compiler_generated'] )]
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1544
				( <Char,Str>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_integer'
									       -| ['compiler_generated'] )
					      (Char)
					  -| ['compiler_generated'] ) ->
				      ( [Char|Str]
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1545
				( <GC,Str>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_list'
									       -| ['compiler_generated'] )
					      (GC)
					  -| ['compiler_generated'] ) ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '++'
									     -| ['compiler_generated'] )
					    (GC, Str)
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_3,_63> when ( 'true'
						  -| ['compiler_generated'] ) ->
				      %% Line 1541
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'function_clause'
						  -| ['compiler_generated'] ),_3,_63}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 1362
			      apply 'lexeme_pick'/3
				  (Cs, Seps, _20)
		      ( <_21> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_21})
			-| ['compiler_generated'] )
		    end
		%% Line 1364
		<[]> when 'true' ->
		    let <_22> =
			case %% Line 1365
			     Tkn of
			  %% Line 1537
			  ( <( [B|( []
				    -| ['compiler_generated'] )]
			       -| ['compiler_generated'] )>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_binary'
									 -| ['compiler_generated'] )
					(B)
				    -| ['compiler_generated'] ) ->
				B
			    -| ['compiler_generated'] )
			  %% Line 1538
			  ( <L>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_list'
									 -| ['compiler_generated'] )
					(Tkn)
				    -| ['compiler_generated'] ) ->
				( call ( 'lists'
					 -| ['compiler_generated'] ):( 'reverse'
								       -| ['compiler_generated'] )
				      (L)
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1539
			  ( <C>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_integer'
									 -| ['compiler_generated'] )
					(Tkn)
				    -| ['compiler_generated'] ) ->
				C
			    -| ['compiler_generated'] )
			  ( <_65> when ( 'true'
					 -| ['compiler_generated'] ) ->
				%% Line 1537
				( primop ( 'match_fail'
					   -| ['compiler_generated'] )
				      (( {( 'function_clause'
					    -| ['compiler_generated'] ),_65}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    in  %% Line 1365
			{_22,[]}
		( <_23> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_23})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1367
	  <Bin,Seps,Tkn>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 1368
	      case apply 'bin_search'/3
		       (Bin, [], Seps) of
		%% Line 1369
		<{'nomatch',_38}> when 'true' ->
		    let <_24> =
			case %% Line 1370
			     <Bin,Tkn> of
			  %% Line 1532
			  ( <Token,( []
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				Token
			    -| ['compiler_generated'] )
			  %% Line 1533
			  ( <BinPart,( [C|( []
					    -| ['compiler_generated'] )]
				       -| ['compiler_generated'] )>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_integer'
									 -| ['compiler_generated'] )
					(C)
				    -| ['compiler_generated'] ) ->
				( #{( #<C>(( 'undefined'
					     -| ['compiler_generated'] ),( 'undefined'
									   -| ['compiler_generated'] ),( 'utf8'
													 -| ['compiler_generated'] ),( ['unsigned'|['big']]
																       -| ['compiler_generated'] ))
				      -| ['compiler_generated'] ),
				    ( #<BinPart>(( 'all'
						   -| ['compiler_generated'] ),( 8
										 -| ['compiler_generated'] ),( 'binary'
													       -| ['compiler_generated'] ),( ['unsigned'|['big']]
																	     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )}#
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1534
			  ( <( #{}#
			       -| ['compiler_generated'] ),_68> when ( 'true'
								       -| ['compiler_generated'] ) ->
				( call ( 'lists'
					 -| ['compiler_generated'] ):( 'reverse'
								       -| ['compiler_generated'] )
				      (_68)
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1535
			  ( <BinPart,Cs> when ( 'true'
						-| ['compiler_generated'] ) ->
				( let <_69> =
				      call ( 'lists'
					     -| ['compiler_generated'] ):( 'reverse'
									   -| ['compiler_generated'] )
					  (Cs)
				  in  ( [_69|( [BinPart|( []
							  -| ['compiler_generated'] )]
					       -| ['compiler_generated'] )]
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    in  %% Line 1370
			{_24,[]}
		%% Line 1371
		<[Left|[]]> when 'true' ->
		    let <_26> =
			call %% Line 1372
			     'erlang':%% Line 1372
				      'byte_size'
			    (%% Line 1372
			     Bin)
		    in  let <_25> =
			    call %% Line 1372
				 'erlang':%% Line 1372
					  'byte_size'
				(%% Line 1372
				 Left)
			in  let <Bytes> =
				call %% Line 1372
				     'erlang':%% Line 1372
					      '-'
				    (_26, _25)
			    in  %% Line 1373
				case Bin of
				  <#{#<Lexeme>(Bytes,8,'binary',['unsigned'|['big']]),
				     #<_39>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				      let <_29> =
					  case %% Line 1374
					       <Lexeme,Tkn> of
					    %% Line 1532
					    ( <Token,( []
						       -| ['compiler_generated'] )> when ( 'true'
											   -| ['compiler_generated'] ) ->
						  Token
					      -| ['compiler_generated'] )
					    %% Line 1533
					    ( <BinPart,( [C|( []
							      -| ['compiler_generated'] )]
							 -| ['compiler_generated'] )>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_integer'
											   -| ['compiler_generated'] )
							  (C)
						      -| ['compiler_generated'] ) ->
						  ( #{( #<C>(( 'undefined'
							       -| ['compiler_generated'] ),( 'undefined'
											     -| ['compiler_generated'] ),( 'utf8'
															   -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			 -| ['compiler_generated'] ))
							-| ['compiler_generated'] ),
						      ( #<BinPart>(( 'all'
								     -| ['compiler_generated'] ),( 8
												   -| ['compiler_generated'] ),( 'binary'
																 -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )}#
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1534
					    ( <( #{}#
						 -| ['compiler_generated'] ),_72> when ( 'true'
											 -| ['compiler_generated'] ) ->
						  ( call ( 'lists'
							   -| ['compiler_generated'] ):( 'reverse'
											 -| ['compiler_generated'] )
							(_72)
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1535
					    ( <BinPart,Cs> when ( 'true'
								  -| ['compiler_generated'] ) ->
						  ( let <_73> =
							call ( 'lists'
							       -| ['compiler_generated'] ):( 'reverse'
											     -| ['compiler_generated'] )
							    (Cs)
						    in  ( [_73|( [BinPart|( []
									    -| ['compiler_generated'] )]
								 -| ['compiler_generated'] )]
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				      in  %% Line 1374
					  {_29,Left}
				  ( <_28> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_28})
				    -| ['compiler_generated'] )
				end
		( <_30> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_30})
		  -| ['compiler_generated'] )
	      end
	  ( <_33,_32,_31> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_33,_32,_31})
		  -| [{'function_name',{'lexeme_pick',3}}] )
	    -| ['compiler_generated'] )
	end
'nth_lexeme_m'/3 =
    %% Line 1377
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[Bin|Cont0],Seps0 = {GCs,_22,_23},N>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 1378
	      case apply 'bin_search_inv'/3
		       (Bin, Cont0, GCs) of
		%% Line 1379
		<{'nomatch',Cont}> when 'true' ->
		    %% Line 1380
		    apply 'nth_lexeme_m'/3
			(Cont, Seps0, N)
		%% Line 1381
		<Cs>
		    when call 'erlang':'>'
			  (N,
			   1) ->
		    let <Rest> =
			apply %% Line 1382
			      'lexeme_skip'/2
			    (%% Line 1382
			     Cs, %% Line 1382
				 Seps0)
		    in  let <_4> =
			    call %% Line 1383
				 'erlang':%% Line 1383
					  '-'
				(%% Line 1383
				 N, %% Line 1383
				    1)
			in  %% Line 1383
			    apply 'nth_lexeme_m'/3
				(Rest, Seps0, _4)
		%% Line 1384
		<Cs> when 'true' ->
		    let <Seps> =
			case %% Line 1385
			     Seps0 of
			  %% Line 1585
			  ( <( {Sep,CPs,( 'undefined'
					  -| ['compiler_generated'] )}
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( let <_33> =
				      apply %% Line 1586
					    'bin_pattern'/1
					  (%% Line 1586
					   CPs)
				  in  ( let <_34> =
					    call %% Line 1586
						 ( 'binary'
						   -| ['compiler_generated'] ):%% Line 1586
									       ( 'compile_pattern'
										 -| ['compiler_generated'] )
						(_33)
					in  %% Line 1586
					    ( {Sep,CPs,_34}
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1587
			  ( <( Compiled = ( {_4,_5,_6}
					    -| ['compiler_generated'] )
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				Compiled
			    -| ['compiler_generated'] )
			  ( <_3> when ( 'true'
					-| ['compiler_generated'] ) ->
				%% Line 1585
				( primop ( 'match_fail'
					   -| ['compiler_generated'] )
				      (( {( 'function_clause'
					    -| ['compiler_generated'] ),_3}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    in  %% Line 1386
			case apply 'lexeme_pick'/3
				 (Cs, Seps, []) of
			  <{Lexeme,_24}> when 'true' ->
			      %% Line 1387
			      Lexeme
			  ( <_6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_6})
			    -| ['compiler_generated'] )
			end
	      end
	  %% Line 1389
	  <Cs0,Seps0 = {GCs,_25,_26},N>
	      when call 'erlang':'is_list'
		    (Cs0) ->
	      %% Line 1390
	      case call 'unicode_util':'gc'
		       (Cs0) of
		%% Line 1391
		<[C|Cs]> when 'true' ->
		    %% Line 1392
		    case call 'lists':'member'
			     (C, GCs) of
		      %% Line 1393
		      <'true'> when 'true' ->
			  %% Line 1394
			  apply 'nth_lexeme_m'/3
			      (Cs, Seps0, N)
		      %% Line 1395
		      <'false'>
			  when call 'erlang':'>'
				(N,
				 1) ->
			  let <Cs1> =
			      apply %% Line 1396
				    'lexeme_skip'/2
				  (%% Line 1396
				   Cs, %% Line 1396
				       Seps0)
			  in  let <_9> =
				  call %% Line 1397
				       'erlang':%% Line 1397
						'-'
				      (%% Line 1397
				       N, %% Line 1397
					  1)
			      in  %% Line 1397
				  apply 'nth_lexeme_m'/3
				      (Cs1, Seps0, _9)
		      %% Line 1398
		      <'false'> when 'true' ->
			  let <Seps> =
			      case %% Line 1399
				   Seps0 of
				%% Line 1585
				( <( {Sep,CPs,( 'undefined'
						-| ['compiler_generated'] )}
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( let <_36> =
					    apply %% Line 1586
						  'bin_pattern'/1
						(%% Line 1586
						 CPs)
					in  ( let <_37> =
						  call %% Line 1586
						       ( 'binary'
							 -| ['compiler_generated'] ):%% Line 1586
										     ( 'compile_pattern'
										       -| ['compiler_generated'] )
						      (_36)
					      in  %% Line 1586
						  ( {Sep,CPs,_37}
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1587
				( <( Compiled = ( {_4,_5,_6}
						  -| ['compiler_generated'] )
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      Compiled
				  -| ['compiler_generated'] )
				( <_3> when ( 'true'
					      -| ['compiler_generated'] ) ->
				      %% Line 1585
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'function_clause'
						  -| ['compiler_generated'] ),_3}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 1400
			      case apply 'lexeme_pick'/3
				       (Cs0, Seps, []) of
				<{Lexeme,_27}> when 'true' ->
				    %% Line 1401
				    Lexeme
				( <_11> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_11})
				  -| ['compiler_generated'] )
			      end
		      ( <_12> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_12})
			-| ['compiler_generated'] )
		    end
		%% Line 1403
		<[]> when 'true' ->
		    %% Line 1404
		    []
		( <_13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1406
	  <Bin,Seps0 = {GCs,_28,_29},N>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      let <Seps> =
		  case %% Line 1407
		       Seps0 of
		    %% Line 1585
		    ( <( {Sep,CPs,( 'undefined'
				    -| ['compiler_generated'] )}
			 -| ['compiler_generated'] )> when ( 'true'
							     -| ['compiler_generated'] ) ->
			  ( let <_39> =
				apply %% Line 1586
				      'bin_pattern'/1
				    (%% Line 1586
				     CPs)
			    in  ( let <_40> =
				      call %% Line 1586
					   ( 'binary'
					     -| ['compiler_generated'] ):%% Line 1586
									 ( 'compile_pattern'
									   -| ['compiler_generated'] )
					  (_39)
				  in  %% Line 1586
				      ( {Sep,CPs,_40}
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		    %% Line 1587
		    ( <( Compiled = ( {_4,_5,_6}
				      -| ['compiler_generated'] )
			 -| ['compiler_generated'] )> when ( 'true'
							     -| ['compiler_generated'] ) ->
			  Compiled
		      -| ['compiler_generated'] )
		    ( <_3> when ( 'true'
				  -| ['compiler_generated'] ) ->
			  %% Line 1585
			  ( primop ( 'match_fail'
				     -| ['compiler_generated'] )
				(( {( 'function_clause'
				      -| ['compiler_generated'] ),_3}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 1408
		  case apply 'bin_search_inv'/3
			   (Bin, [], GCs) of
		    %% Line 1409
		    <[Cs|[]]>
			when call 'erlang':'>'
			      (N,
			       1) ->
			let <Cs1> =
			    apply %% Line 1410
				  'lexeme_skip'/2
				(%% Line 1410
				 Cs, %% Line 1410
				     Seps)
			in  let <_16> =
				call %% Line 1411
				     'erlang':%% Line 1411
					      '-'
				    (%% Line 1411
				     N, %% Line 1411
					1)
			    in  %% Line 1411
				apply 'nth_lexeme_m'/3
				    (Cs1, Seps, _16)
		    %% Line 1412
		    <[Cs|[]]> when 'true' ->
			%% Line 1413
			case apply 'lexeme_pick'/3
				 (Cs, Seps, []) of
			  <{Lexeme,_30}> when 'true' ->
			      %% Line 1414
			      Lexeme
			  ( <_17> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_17})
			    -| ['compiler_generated'] )
			end
		    %% Line 1415
		    <{'nomatch',_31}> when 'true' ->
			%% Line 1416
			#{}#
		    ( <_18> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_18})
		      -| ['compiler_generated'] )
		  end
	  ( <_21,_20,_19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_21,_20,_19})
		  -| [{'function_name',{'nth_lexeme_m',3}}] )
	    -| ['compiler_generated'] )
	end
'lexeme_skip'/2 =
    %% Line 1419
    fun (_0,_1) ->
	case <_0,_1> of
	  <Cs0 = [CP|Cs1],Seps = {GCs,CPs,_17}>
	      when call 'erlang':'is_integer'
		    (CP) ->
	      %% Line 1420
	      case call 'lists':'member'
		       (CP, CPs) of
		%% Line 1421
		<'true'> when 'true' ->
		    %% Line 1422
		    case call 'unicode_util':'gc'
			     (Cs0) of
		      <[GC|Cs2]> when 'true' ->
			  %% Line 1423
			  case call 'lists':'member'
				   (GC, GCs) of
			    %% Line 1424
			    <'true'> when 'true' ->
				Cs2
			    %% Line 1425
			    <'false'> when 'true' ->
				apply 'lexeme_skip'/2
				    (Cs2, Seps)
			    ( <_3> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_3})
			      -| ['compiler_generated'] )
			  end
		      ( <_2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_2})
			-| ['compiler_generated'] )
		    end
		%% Line 1427
		<'false'> when 'true' ->
		    %% Line 1428
		    apply 'lexeme_skip'/2
			(Cs1, Seps)
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1430
	  <[Bin|Cont0],Seps0>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      let <Seps> =
		  case %% Line 1431
		       Seps0 of
		    %% Line 1585
		    ( <( {Sep,CPs,( 'undefined'
				    -| ['compiler_generated'] )}
			 -| ['compiler_generated'] )> when ( 'true'
							     -| ['compiler_generated'] ) ->
			  ( let <_22> =
				apply %% Line 1586
				      'bin_pattern'/1
				    (%% Line 1586
				     CPs)
			    in  ( let <_2> =
				      call %% Line 1586
					   ( 'binary'
					     -| ['compiler_generated'] ):%% Line 1586
									 ( 'compile_pattern'
									   -| ['compiler_generated'] )
					  (_22)
				  in  %% Line 1586
				      ( {Sep,CPs,_2}
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		    %% Line 1587
		    ( <( Compiled = ( {_4,_5,_6}
				      -| ['compiler_generated'] )
			 -| ['compiler_generated'] )> when ( 'true'
							     -| ['compiler_generated'] ) ->
			  Compiled
		      -| ['compiler_generated'] )
		    ( <_3> when ( 'true'
				  -| ['compiler_generated'] ) ->
			  %% Line 1585
			  ( primop ( 'match_fail'
				     -| ['compiler_generated'] )
				(( {( 'function_clause'
				      -| ['compiler_generated'] ),_3}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 1432
		  case apply 'bin_search'/3
			   (Bin, Cont0, Seps) of
		    %% Line 1433
		    <{'nomatch',_18}> when 'true' ->
			apply 'lexeme_skip'/2
			    (Cont0, Seps)
		    %% Line 1434
		    <Cs> when 'true' ->
			let <_6> =
			    call 'unicode_util':'gc'
				(Cs)
			in  call 'erlang':'tl'
				(_6)
		  end
	  %% Line 1436
	  <Cs0,Seps = {GCs,CPs,_19}>
	      when call 'erlang':'is_list'
		    (Cs0) ->
	      %% Line 1437
	      case call 'unicode_util':'cp'
		       (Cs0) of
		%% Line 1438
		<[CP|Cs]> when 'true' ->
		    %% Line 1439
		    case call 'lists':'member'
			     (CP, CPs) of
		      %% Line 1440
		      <'true'> when 'true' ->
			  %% Line 1441
			  case call 'unicode_util':'gc'
				   (Cs0) of
			    <[GC|Cs2]> when 'true' ->
				%% Line 1442
				case call 'lists':'member'
					 (GC, GCs) of
				  %% Line 1443
				  <'true'> when 'true' ->
				      Cs2
				  %% Line 1444
				  <'false'> when 'true' ->
				      apply 'lexeme_skip'/2
					  (Cs2, Seps)
				  ( <_9> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_9})
				    -| ['compiler_generated'] )
				end
			    ( <_8> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_8})
			      -| ['compiler_generated'] )
			  end
		      %% Line 1446
		      <'false'> when 'true' ->
			  %% Line 1447
			  apply 'lexeme_skip'/2
			      (Cs, Seps)
		      ( <_10> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_10})
			-| ['compiler_generated'] )
		    end
		%% Line 1449
		<[]> when 'true' ->
		    %% Line 1450
		    []
		( <_11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1452
	  <Bin,Seps0>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      let <Seps> =
		  case %% Line 1453
		       Seps0 of
		    %% Line 1585
		    ( <( {Sep,CPs,( 'undefined'
				    -| ['compiler_generated'] )}
			 -| ['compiler_generated'] )> when ( 'true'
							     -| ['compiler_generated'] ) ->
			  ( let <_24> =
				apply %% Line 1586
				      'bin_pattern'/1
				    (%% Line 1586
				     CPs)
			    in  ( let <_2> =
				      call %% Line 1586
					   ( 'binary'
					     -| ['compiler_generated'] ):%% Line 1586
									 ( 'compile_pattern'
									   -| ['compiler_generated'] )
					  (_24)
				  in  %% Line 1586
				      ( {Sep,CPs,_2}
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		    %% Line 1587
		    ( <( Compiled = ( {_4,_5,_6}
				      -| ['compiler_generated'] )
			 -| ['compiler_generated'] )> when ( 'true'
							     -| ['compiler_generated'] ) ->
			  Compiled
		      -| ['compiler_generated'] )
		    ( <_3> when ( 'true'
				  -| ['compiler_generated'] ) ->
			  %% Line 1585
			  ( primop ( 'match_fail'
				     -| ['compiler_generated'] )
				(( {( 'function_clause'
				      -| ['compiler_generated'] ),_3}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 1454
		  case apply 'bin_search'/3
			   (Bin, [], Seps) of
		    %% Line 1455
		    <{'nomatch',_20}> when 'true' ->
			#{}#
		    %% Line 1456
		    <[Left|[]]> when 'true' ->
			let <_13> =
			    call 'unicode_util':'gc'
				(Left)
			in  call 'erlang':'tl'
				(_13)
		    ( <_14> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_14})
		      -| ['compiler_generated'] )
		  end
	  ( <_16,_15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15})
		  -| [{'function_name',{'lexeme_skip',2}}] )
	    -| ['compiler_generated'] )
	end
'find_l'/2 =
    %% Line 1459
    fun (_0,_1) ->
	case <_0,_1> of
	  <Cs0 = [C1|Cs],Needle = [C|_10]>
	      when call 'erlang':'is_integer'
		    (C1) ->
	      %% Line 1460
	      case C1 of
		%% Line 1461
		<_11>
		    when call 'erlang':'=:='
			  (C1,
			   C) ->
		    %% Line 1462
		    case apply 'prefix_1'/2
			     (Cs0, Needle) of
		      %% Line 1463
		      <'nomatch'> when 'true' ->
			  apply 'find_l'/2
			      (Cs, Needle)
		      %% Line 1464
		      <_12> when 'true' ->
			  Cs0
		    end
		%% Line 1466
		<_13> when 'true' ->
		    %% Line 1467
		    apply 'find_l'/2
			(Cs, Needle)
	      end
	  %% Line 1469
	  <[Bin|Cont0],Needle>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 1470
	      case apply 'bin_search_str'/4
		       (Bin, 0, Cont0, Needle) of
		%% Line 1471
		<{'nomatch',_14,Cont}> when 'true' ->
		    %% Line 1472
		    apply 'find_l'/2
			(Cont, Needle)
		%% Line 1473
		<{_X_Before,Cs,_X_After}> when 'true' ->
		    %% Line 1474
		    Cs
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1476
	  <Cs0,Needle = [C|_15]>
	      when call 'erlang':'is_list'
		    (Cs0) ->
	      %% Line 1477
	      case call 'unicode_util':'cp'
		       (Cs0) of
		%% Line 1478
		<[_16|Cs]>
		    when call 'erlang':'=:='
			  (_16,
			   C) ->
		    %% Line 1479
		    case apply 'prefix_1'/2
			     (Cs0, Needle) of
		      %% Line 1480
		      <'nomatch'> when 'true' ->
			  apply 'find_l'/2
			      (Cs, Needle)
		      %% Line 1481
		      <_17> when 'true' ->
			  Cs0
		    end
		%% Line 1483
		<[_X_C|Cs]> when 'true' ->
		    %% Line 1484
		    apply 'find_l'/2
			(Cs, Needle)
		%% Line 1485
		<[]> when 'true' ->
		    'nomatch'
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1487
	  <Bin,Needle> when 'true' ->
	      %% Line 1488
	      case apply 'bin_search_str'/4
		       (Bin, 0, [], Needle) of
		%% Line 1489
		<{'nomatch',_18,_19}> when 'true' ->
		    'nomatch'
		%% Line 1490
		<{_X_Before,[Cs|[]],_X_After}> when 'true' ->
		    Cs
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_7})
		  -| ['compiler_generated'] )
	      end
	end
'find_r'/3 =
    %% Line 1493
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Cs0 = [Cp|Cs],Needle = [C|_14],Res>
	      when call 'erlang':'is_integer'
		    (Cp) ->
	      %% Line 1494
	      case Cp of
		%% Line 1495
		<_15>
		    when call 'erlang':'=:='
			  (Cp,
			   C) ->
		    %% Line 1496
		    case apply 'prefix_1'/2
			     (Cs0, Needle) of
		      %% Line 1497
		      <'nomatch'> when 'true' ->
			  apply 'find_r'/3
			      (Cs, Needle, Res)
		      %% Line 1498
		      <_16> when 'true' ->
			  apply 'find_r'/3
			      (Cs, Needle, Cs0)
		    end
		%% Line 1500
		<_17> when 'true' ->
		    %% Line 1501
		    apply 'find_r'/3
			(Cs, Needle, Res)
	      end
	  %% Line 1503
	  <[Bin|Cont0],Needle,Res>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 1504
	      case apply 'bin_search_str'/4
		       (Bin, 0, Cont0, Needle) of
		%% Line 1505
		<{'nomatch',_18,Cont}> when 'true' ->
		    %% Line 1506
		    apply 'find_r'/3
			(Cont, Needle, Res)
		%% Line 1507
		<{_19,Cs0,_20}> when 'true' ->
		    %% Line 1508
		    case call 'unicode_util':'gc'
			     (Cs0) of
		      <[_21|Cs]> when 'true' ->
			  %% Line 1509
			  apply 'find_r'/3
			      (Cs, Needle, Cs0)
		      ( <_5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_5})
			-| ['compiler_generated'] )
		    end
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1511
	  <Cs0,Needle = [C|_22],Res>
	      when call 'erlang':'is_list'
		    (Cs0) ->
	      %% Line 1512
	      case call 'unicode_util':'cp'
		       (Cs0) of
		%% Line 1513
		<[_23|Cs]>
		    when call 'erlang':'=:='
			  (_23,
			   C) ->
		    %% Line 1514
		    case apply 'prefix_1'/2
			     (Cs0, Needle) of
		      %% Line 1515
		      <'nomatch'> when 'true' ->
			  apply 'find_r'/3
			      (Cs, Needle, Res)
		      %% Line 1516
		      <_24> when 'true' ->
			  apply 'find_r'/3
			      (Cs, Needle, Cs0)
		    end
		%% Line 1518
		<[_X_C|Cs]> when 'true' ->
		    %% Line 1519
		    apply 'find_r'/3
			(Cs, Needle, Res)
		%% Line 1520
		<[]> when 'true' ->
		    Res
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1522
	  <Bin,Needle,Res> when 'true' ->
	      %% Line 1523
	      case apply 'bin_search_str'/4
		       (Bin, 0, [], Needle) of
		%% Line 1524
		<{'nomatch',_25,_26}> when 'true' ->
		    Res
		%% Line 1525
		<{_X_Before,[Cs0|[]],_X_After}> when 'true' ->
		    %% Line 1526
		    case Cs0 of
		      <#{#<_27>('undefined','undefined','utf8',['unsigned'|['big']]),
			 #<Cs>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			  %% Line 1527
			  apply 'find_r'/3
			      (Cs, Needle, Cs0)
		      ( <_9> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_9})
			-| ['compiler_generated'] )
		    end
		( <_10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_10})
		  -| ['compiler_generated'] )
	      end
	end
'btoken'/2 =
    %% Line 1532
    fun (_0,_1) ->
	case <_0,_1> of
	  <Token,[]> when 'true' ->
	      Token
	  %% Line 1533
	  <BinPart,[C|[]]>
	      when call 'erlang':'is_integer'
		    (C) ->
	      #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		#<BinPart>('all',8,'binary',['unsigned'|['big']])}#
	  %% Line 1534
	  <#{}#,Tkn> when 'true' ->
	      call 'lists':'reverse'
		  (Tkn)
	  %% Line 1535
	  <BinPart,Cs> when 'true' ->
	      let <_2> =
		  call 'lists':'reverse'
		      (Cs)
	      in  [_2|[BinPart|[]]]
	end
'rev'/1 =
    %% Line 1537
    fun (_0) ->
	case _0 of
	  <[B|[]]>
	      when call 'erlang':'is_binary'
		    (B) ->
	      B
	  %% Line 1538
	  <L>
	      when call 'erlang':'is_list'
		    (_0) ->
	      call 'lists':'reverse'
		  (L)
	  %% Line 1539
	  <C>
	      when call 'erlang':'is_integer'
		    (_0) ->
	      C
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'rev',1}}] )
	    -| ['compiler_generated'] )
	end
'append'/2 =
    %% Line 1541
    fun (_0,_1) ->
	case <_0,_1> of
	  <Char,#{}#>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      [Char|[]]
	  %% Line 1542
	  <Char,#{}#>
	      when call 'erlang':'is_list'
		    (Char) ->
	      Char
	  %% Line 1543
	  <Char,Bin>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      [Char|[Bin|[]]]
	  %% Line 1544
	  <Char,Str>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      [Char|Str]
	  %% Line 1545
	  <GC,Str>
	      when call 'erlang':'is_list'
		    (GC) ->
	      call 'erlang':'++'
		  (GC, Str)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'append',2}}] )
	    -| ['compiler_generated'] )
	end
'stack'/2 =
    %% Line 1547
    fun (_0,_1) ->
	case <_0,_1> of
	  <Bin,[]> when 'true' ->
	      Bin
	  %% Line 1548
	  <#{}#,St> when 'true' ->
	      St
	  %% Line 1549
	  <[],St> when 'true' ->
	      St
	  %% Line 1550
	  <Bin,St> when 'true' ->
	      [Bin|St]
	end
'add_non_empty'/2 =
    %% Line 1552
    fun (_0,_1) ->
	case <_0,_1> of
	  <#{}#,L> when 'true' ->
	      L
	  %% Line 1553
	  <Token,L> when 'true' ->
	      [Token|L]
	end
'cp_prefix'/2 =
    %% Line 1555
    fun (_0,_1) ->
	%% Line 1556
	case call 'unicode_util':'cp'
		 (_1) of
	  %% Line 1557
	  <[]> when 'true' ->
	      _0
	  %% Line 1558
	  <[Cp|Rest]> when 'true' ->
	      apply 'cp_prefix_1'/3
		  (_0, Cp, Rest)
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_2})
	    -| ['compiler_generated'] )
	end
'cp_prefix_1'/3 =
    %% Line 1561
    fun (_0,_1,_2) ->
	%% Line 1562
	case call 'unicode_util':'cp'
		 (_0) of
	  %% Line 1563
	  <[_10|Rest]>
	      when call 'erlang':'=:='
		    (_10,
		     _1) ->
	      %% Line 1564
	      case apply 'equal'/2
		       (Rest, _2) of
		%% Line 1565
		<'true'> when 'true' ->
		    []
		%% Line 1566
		<'false'> when 'true' ->
		    let <_3> =
			apply 'cp_prefix_1'/3
			    (Rest, _1, _2)
		    in  [_1|_3]
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1568
	  <[CP|Rest]> when 'true' ->
	      let <_5> =
		  apply 'cp_prefix_1'/3
		      (Rest, _1, _2)
	      in  [CP|_5]
	  ( <_6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_6})
	    -| ['compiler_generated'] )
	end
'bin_search'/3 =
    %% Line 1573
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Bin,Cont,{Seps,_6,BP}> when 'true' ->
	      %% Line 1574
	      apply 'bin_search_loop'/5
		  (Bin, 0, BP, Cont, Seps)
	  ( <_5,_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4,_3})
		  -| [{'function_name',{'bin_search',3}}] )
	    -| ['compiler_generated'] )
	end
'search_pattern'/1 =
    %% Line 1580
    fun (_0) ->
	case _0 of
	  <P = {_3,_4,_5}> when 'true' ->
	      P
	  %% Line 1581
	  <Seps> when 'true' ->
	      let <CPs> =
		  apply %% Line 1582
			'search_cp'/1
		      (%% Line 1582
		       Seps)
	      in  %% Line 1583
		  {Seps,CPs,'undefined'}
	end
'search_compile'/1 =
    %% Line 1585
    fun (_0) ->
	case _0 of
	  <{Sep,CPs,'undefined'}> when 'true' ->
	      let <_1> =
		  apply %% Line 1586
			'bin_pattern'/1
		      (%% Line 1586
		       CPs)
	      in  let <_2> =
		      call %% Line 1586
			   'binary':%% Line 1586
				    'compile_pattern'
			  (_1)
		  in  %% Line 1586
		      {Sep,CPs,_2}
	  %% Line 1587
	  <Compiled = {_4,_5,_6}> when 'true' ->
	      Compiled
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'search_compile',1}}] )
	    -| ['compiler_generated'] )
	end
'search_cp'/1 =
    %% Line 1589
    fun (_0) ->
	case _0 of
	  <[CP|Seps]>
	      when call 'erlang':'is_integer'
		    (CP) ->
	      let <_1> =
		  apply %% Line 1590
			'search_cp'/1
		      (%% Line 1590
		       Seps)
	      in  %% Line 1590
		  [CP|_1]
	  %% Line 1591
	  <[Pattern|Seps]> when 'true' ->
	      %% Line 1592
	      case call 'unicode_util':'cp'
		       (Pattern) of
		<[CP|_5]> when 'true' ->
		    let <_3> =
			apply %% Line 1593
			      'search_cp'/1
			    (%% Line 1593
			     Seps)
		    in  %% Line 1593
			[CP|_3]
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1594
	  <[]> when 'true' ->
	      []
	  ( <_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4})
		  -| [{'function_name',{'search_cp',1}}] )
	    -| ['compiler_generated'] )
	end
'bin_pattern'/1 =
    %% Line 1596
    fun (_0) ->
	case _0 of
	  <[CP|Seps]> when 'true' ->
	      let <_1> =
		  #{#<%% Line 1597
		      CP>(%% Line 1597
			  'undefined','undefined','utf8',['unsigned'|['big']])}#
	      in  let <_2> =
		      apply %% Line 1597
			    'bin_pattern'/1
			  (%% Line 1597
			   Seps)
		  in  %% Line 1597
		      [_1|_2]
	  %% Line 1598
	  <[]> when 'true' ->
	      []
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'bin_pattern',1}}] )
	    -| ['compiler_generated'] )
	end
'bin_search_loop'/5 =
    %% Line 1600
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <Bin0,Start,_29,Cont,_X_Seps>
	      when let <_6> =
		    try
			let <_5> =
			    call %% Line 1601
				 'erlang':%% Line 1601
					  'byte_size'
				(%% Line 1601
				 Bin0)
			in  %% Line 1601
			    call 'erlang':'=<'
				(_5, Start)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_7> =
			call %% Line 1601
			     'erlang':%% Line 1601
				      '<'
			    (%% Line 1601
			     Start, %% Line 1601
				    0)
		    in  %% Line 1601
			call 'erlang':'or'
			    (_6, _7) ->
	      %% Line 1602
	      {'nomatch',Cont}
	  %% Line 1603
	  <Bin0,Start,BinSeps,Cont,Seps> when 'true' ->
	      %% Line 1604
	      case Bin0 of
		<#{#<_30>(Start,8,'binary',['unsigned'|['big']]),
		   #<Bin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 1605
		    case call 'binary':'match'
			     (Bin, BinSeps) of
		      %% Line 1606
		      <'nomatch'> when 'true' ->
			  %% Line 1607
			  {'nomatch',Cont}
		      %% Line 1608
		      <{Where,_X_CL}>
			  when call 'erlang':'=:='
				(Cont,
				 []) ->
			  %% Line 1609
			  case Bin of
			    <#{#<_31>(Where,8,'binary',['unsigned'|['big']]),
			       #<Cont1>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				%% Line 1610
				case call 'unicode_util':'gc'
					 (Cont1) of
				  <[GC|Cont2]> when 'true' ->
				      %% Line 1611
				      case call 'lists':'member'
					       (GC, Seps) of
					%% Line 1612
					<'false'>
					    when call 'erlang':'=:='
						  (Cont2,
						   []) ->
					    %% Line 1613
					    {'nomatch',[]}
					%% Line 1614
					<'false'> when 'true' ->
					    let <_12> =
						call %% Line 1615
						     'erlang':%% Line 1615
							      'byte_size'
						    (%% Line 1615
						     Bin0)
					    in  let <_11> =
						    call %% Line 1615
							 'erlang':%% Line 1615
								  'byte_size'
							(%% Line 1615
							 Cont2)
						in  let <Next> =
							call %% Line 1615
							     'erlang':%% Line 1615
								      '-'
							    (_12, _11)
						    in  %% Line 1616
							apply 'bin_search_loop'/5
							    (Bin0, Next, BinSeps, Cont, Seps)
					%% Line 1617
					<'true'> when 'true' ->
					    %% Line 1618
					    [Cont1|[]]
					( <_14> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_14})
					  -| ['compiler_generated'] )
				      end
				  ( <_10> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_10})
				    -| ['compiler_generated'] )
				end
			    ( <_9> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_9})
			      -| ['compiler_generated'] )
			  end
		      %% Line 1620
		      <{Where,_X_CL}> when 'true' ->
			  %% Line 1621
			  case Bin of
			    <#{#<_32>(Where,8,'binary',['unsigned'|['big']]),
			       #<Cont0>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				let <Cont1> =
				    [%% Line 1622
				     Cont0|%% Line 1622
					   Cont]
				in  %% Line 1623
				    case call 'unicode_util':'gc'
					     (Cont1) of
				      <[GC|Cont2]> when 'true' ->
					  %% Line 1624
					  case call 'lists':'member'
						   (GC, Seps) of
					    %% Line 1625
					    <'false'> when 'true' ->
						%% Line 1626
						case Cont2 of
						  %% Line 1627
						  <[BinR|_33]>
						      when let <_34> =
							    call 'erlang':'=:='
								(_33, Cont)
							in  let <_35> =
								call 'erlang':'is_binary'
								    (BinR)
							    in  call 'erlang':'and'
								    (_34, _35) ->
						      let <_19> =
							  call %% Line 1628
							       'erlang':%% Line 1628
									'byte_size'
							      (%% Line 1628
							       Bin0)
						      in  let <_18> =
							      call %% Line 1628
								   'erlang':%% Line 1628
									    'byte_size'
								  (%% Line 1628
								   BinR)
							  in  let <Next> =
								  call %% Line 1628
								       'erlang':%% Line 1628
										'-'
								      (_19, _18)
							      in  %% Line 1629
								  apply 'bin_search_loop'/5
								      (Bin0, Next, BinSeps, Cont, Seps)
						  %% Line 1630
						  <_36> when 'true' ->
						      %% Line 1631
						      {'nomatch',Cont2}
						end
					    %% Line 1633
					    <'true'> when 'true' ->
						%% Line 1634
						Cont1
					    ( <_22> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_22})
					      -| ['compiler_generated'] )
					  end
				      ( <_17> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_17})
					-| ['compiler_generated'] )
				    end
			    ( <_15> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_15})
			      -| ['compiler_generated'] )
			  end
		      ( <_23> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_23})
			-| ['compiler_generated'] )
		    end
		( <_8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_8})
		  -| ['compiler_generated'] )
	      end
	end
'bin_search_inv'/3 =
    %% Line 1638
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <#{}#,Cont,_6> when 'true' ->
	      %% Line 1639
	      {'nomatch',Cont}
	  %% Line 1640
	  <Bin,Cont,[Sep|[]]> when 'true' ->
	      %% Line 1641
	      apply 'bin_search_inv_1'/3
		  (Bin, Cont, Sep)
	  %% Line 1642
	  <Bin,Cont,Seps> when 'true' ->
	      %% Line 1643
	      apply 'bin_search_inv_n'/3
		  (Bin, Cont, Seps)
	end
'bin_search_inv_1'/3 =
    %% Line 1645
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Bin0 = #{#<CP1>('undefined','undefined','utf8',['unsigned'|['big']]),
		    #<BinRest>('all',8,'binary',['unsigned'|['big']])}#,Cont,Sep> when 'true' ->
	      %% Line 1646
	      case BinRest of
		%% Line 1647
		<#{#<CP2>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<_14>('all',8,'binary',['unsigned'|['big']])}#>
		    when try
			  let <_3> =
			      call 'erlang':'<'
				  (CP1, 256)
			  in  let <_4> =
				  call 'erlang':'<'
				      (CP2, 256)
			      in  let <_5> =
				      call 'erlang':'=/='
					  (CP1, 13)
				  in  let <_6> =
					  call 'erlang':'and'
					      (_4, _5)
				      in  call 'erlang':'and'
					      (_3, _6)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 1648
		    case CP1 of
		      %% Line 1649
		      <_15>
			  when call 'erlang':'=:='
				(CP1,
				 Sep) ->
			  apply 'bin_search_inv_1'/3
			      (BinRest, Cont, Sep)
		      %% Line 1650
		      <_16> when 'true' ->
			  [Bin0|Cont]
		    end
		%% Line 1652
		<_17>
		    when call 'erlang':'=:='
			  (Cont,
			   []) ->
		    %% Line 1653
		    case call 'unicode_util':'gc'
			     (Bin0) of
		      %% Line 1654
		      <[_18|Bin]>
			  when call 'erlang':'=:='
				(_18,
				 Sep) ->
			  apply 'bin_search_inv_1'/3
			      (Bin, Cont, Sep)
		      %% Line 1655
		      <_19> when 'true' ->
			  [Bin0|Cont]
		    end
		%% Line 1657
		<_20> when 'true' ->
		    %% Line 1658
		    case call 'unicode_util':'gc'
			     ([Bin0|Cont]) of
		      %% Line 1659
		      <[_21|[Bin|_22]]>
			  when let <_25> =
				call 'erlang':'=:='
				    (_21, Sep)
			    in  let <_23> =
				    call 'erlang':'=:='
					(_22, Cont)
				in  let <_24> =
					call 'erlang':'is_binary'
					    (Bin)
				    in  let <_26> =
					    call 'erlang':'and'
						(_23, _24)
					in  call 'erlang':'and'
						(_25, _26) ->
			  %% Line 1660
			  apply 'bin_search_inv_1'/3
			      (Bin, Cont, Sep)
		      %% Line 1661
		      <[_27|Cs]>
			  when call 'erlang':'=:='
				(_27,
				 Sep) ->
			  %% Line 1662
			  {'nomatch',Cs}
		      %% Line 1663
		      <_28> when 'true' ->
			  [Bin0|Cont]
		    end
	      end
	  %% Line 1666
	  <#{}#,Cont,_X_Sep> when 'true' ->
	      %% Line 1667
	      {'nomatch',Cont}
	  %% Line 1668
	  <[],Cont,_X_Sep> when 'true' ->
	      %% Line 1669
	      {'nomatch',Cont}
	  %% Line 1670
	  <Bin,_29,_30> when 'true' ->
	      %% Line 1671
	      call 'erlang':'error'
		  ({'badarg',Bin})
	end
'bin_search_inv_n'/3 =
    %% Line 1674
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Bin0 = #{#<CP1>('undefined','undefined','utf8',['unsigned'|['big']]),
		    #<BinRest>('all',8,'binary',['unsigned'|['big']])}#,Cont,Seps> when 'true' ->
	      %% Line 1675
	      case BinRest of
		%% Line 1676
		<#{#<CP2>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<_17>('all',8,'binary',['unsigned'|['big']])}#>
		    when try
			  let <_3> =
			      call 'erlang':'<'
				  (CP1, 256)
			  in  let <_4> =
				  call 'erlang':'<'
				      (CP2, 256)
			      in  let <_5> =
				      call 'erlang':'=/='
					  (CP1, 13)
				  in  let <_6> =
					  call 'erlang':'and'
					      (_4, _5)
				      in  call 'erlang':'and'
					      (_3, _6)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 1677
		    case call 'lists':'member'
			     (CP1, Seps) of
		      %% Line 1678
		      <'true'> when 'true' ->
			  apply 'bin_search_inv_n'/3
			      (BinRest, Cont, Seps)
		      %% Line 1679
		      <'false'> when 'true' ->
			  [Bin0|Cont]
		      ( <_7> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_7})
			-| ['compiler_generated'] )
		    end
		%% Line 1681
		<_18>
		    when call 'erlang':'=:='
			  (Cont,
			   []) ->
		    %% Line 1682
		    case call 'unicode_util':'gc'
			     (Bin0) of
		      <[GC|Bin]> when 'true' ->
			  %% Line 1683
			  case call 'lists':'member'
				   (GC, Seps) of
			    %% Line 1684
			    <'true'> when 'true' ->
				apply 'bin_search_inv_n'/3
				    (Bin, Cont, Seps)
			    %% Line 1685
			    <'false'> when 'true' ->
				[Bin0|Cont]
			    ( <_9> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_9})
			      -| ['compiler_generated'] )
			  end
		      ( <_8> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_8})
			-| ['compiler_generated'] )
		    end
		%% Line 1687
		<_19> when 'true' ->
		    %% Line 1688
		    case call 'unicode_util':'gc'
			     ([Bin0|Cont]) of
		      <[GC|Cs0]> when 'true' ->
			  %% Line 1689
			  case call 'lists':'member'
				   (GC, Seps) of
			    %% Line 1690
			    <'false'> when 'true' ->
				[Bin0|Cont]
			    %% Line 1691
			    <'true'> when 'true' ->
				%% Line 1692
				case Cs0 of
				  %% Line 1693
				  <[Bin|_20]>
				      when let <_21> =
					    call 'erlang':'=:='
						(_20, Cont)
					in  let <_22> =
						call 'erlang':'is_binary'
						    (Bin)
					    in  call 'erlang':'and'
						    (_21, _22) ->
				      %% Line 1694
				      apply 'bin_search_inv_n'/3
					  (Bin, Cont, Seps)
				  %% Line 1695
				  <_23> when 'true' ->
				      %% Line 1696
				      {'nomatch',Cs0}
				end
			    ( <_12> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_12})
			      -| ['compiler_generated'] )
			  end
		      ( <_10> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_10})
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 1700
	  <#{}#,Cont,_X_Sep> when 'true' ->
	      %% Line 1701
	      {'nomatch',Cont}
	  %% Line 1702
	  <[],Cont,_X_Sep> when 'true' ->
	      %% Line 1703
	      {'nomatch',Cont}
	  %% Line 1704
	  <Bin,_24,_25> when 'true' ->
	      %% Line 1705
	      call 'erlang':'error'
		  ({'badarg',Bin})
	end
'bin_search_str'/4 =
    %% Line 1707
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Bin0,Start,[],SearchCPs> when 'true' ->
	      let <_4> =
		  call %% Line 1708
		       'unicode':%% Line 1708
				 'characters_to_binary'
		      (%% Line 1708
		       SearchCPs)
	      in  let <Compiled> =
		      call %% Line 1708
			   'binary':%% Line 1708
				    'compile_pattern'
			  (_4)
		  in  %% Line 1709
		      apply 'bin_search_str_1'/4
			  (Bin0, Start, Compiled, SearchCPs)
	  %% Line 1710
	  <Bin0,Start,Cont,SearchCPs = [CP|_12]> when 'true' ->
	      let <_6> =
		  #{#<%% Line 1711
		      CP>(%% Line 1711
			  'undefined','undefined','utf8',['unsigned'|['big']])}#
	      in  let <First> =
		      call %% Line 1711
			   'binary':%% Line 1711
				    'compile_pattern'
			  (_6)
		  in  %% Line 1712
		      apply 'bin_search_str_2'/5
			  (Bin0, Start, Cont, First, SearchCPs)
	  ( <_11,_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8})
		  -| [{'function_name',{'bin_search_str',4}}] )
	    -| ['compiler_generated'] )
	end
'bin_search_str_1'/4 =
    %% Line 1714
    fun (_0,_1,_2,_3) ->
	%% Line 1715
	case _0 of
	  <#{#<_18>(_1,8,'binary',['unsigned'|['big']]),
	     #<Bin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1716
	      case call 'binary':'match'
		       (Bin, _2) of
		%% Line 1717
		<'nomatch'> when 'true' ->
		    let <_5> =
			call 'erlang':'byte_size'
			    (_0)
		    in  {'nomatch',_5,[]}
		%% Line 1718
		<{Where0,_19}> when 'true' ->
		    let <Where> =
			call %% Line 1719
			     'erlang':%% Line 1719
				      '+'
			    (_1, %% Line 1719
				 Where0)
		    in  %% Line 1720
			case _0 of
			  <#{#<Keep>(Where,8,'binary',['unsigned'|['big']]),
			     #<Cs0>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			      %% Line 1721
			      case apply 'prefix_1'/2
				       (Cs0, _3) of
				%% Line 1722
				<'nomatch'> when 'true' ->
				    %% Line 1723
				    case Cs0 of
				      <#{#<_20>('undefined','undefined','utf8',['unsigned'|['big']]),
					 #<Cs>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
					  let <_10> =
					      call %% Line 1724
						   'erlang':%% Line 1724
							    'byte_size'
						  (_0)
					  in  let <_9> =
						  call %% Line 1724
						       'erlang':%% Line 1724
								'byte_size'
						      (%% Line 1724
						       Cs)
					      in  let <KeepSz> =
						      call %% Line 1724
							   'erlang':%% Line 1724
								    '-'
							  (_10, _9)
						  in  %% Line 1725
						      apply 'bin_search_str_1'/4
							  (_0, KeepSz, _2, _3)
				      ( <_8> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_8})
					-| ['compiler_generated'] )
				    end
				%% Line 1726
				<[]> when 'true' ->
				    %% Line 1727
				    {Keep,[Cs0|[]],#{}#}
				%% Line 1728
				<Rest> when 'true' ->
				    %% Line 1729
				    {Keep,[Cs0|[]],Rest}
			      end
			  ( <_7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_7})
			    -| ['compiler_generated'] )
			end
		( <_13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_13})
		  -| ['compiler_generated'] )
	      end
	  ( <_4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_4})
	    -| ['compiler_generated'] )
	end
'bin_search_str_2'/5 =
    %% Line 1733
    fun (_0,_1,_2,_3,_4) ->
	%% Line 1734
	case _0 of
	  <#{#<_22>(_1,8,'binary',['unsigned'|['big']]),
	     #<Bin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1735
	      case call 'binary':'match'
		       (Bin, _3) of
		%% Line 1736
		<'nomatch'> when 'true' ->
		    let <_6> =
			call 'erlang':'byte_size'
			    (_0)
		    in  {'nomatch',_6,_2}
		%% Line 1737
		<{Where0,_23}> when 'true' ->
		    let <Where> =
			call %% Line 1738
			     'erlang':%% Line 1738
				      '+'
			    (_1, %% Line 1738
				 Where0)
		    in  %% Line 1739
			case _0 of
			  <#{#<Keep>(Where,8,'binary',['unsigned'|['big']]),
			     #<Cs0>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			      %% Line 1740
			      case call 'unicode_util':'gc'
				       (Cs0) of
				<_@r0 = [GC|Cs]> when 'true' ->
				    let <_10> =
					case %% Line 1741
					     <Cs0,_2> of
					  ( <_26,( []
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						_26
					    -| ['compiler_generated'] )
					  ( <( #{}#
					       -| ['compiler_generated'] ),St> when ( 'true'
										      -| ['compiler_generated'] ) ->
						St
					    -| ['compiler_generated'] )
					  ( <( []
					       -| ['compiler_generated'] ),St> when ( 'true'
										      -| ['compiler_generated'] ) ->
						St
					    -| ['compiler_generated'] )
					  ( <_27,St> when ( 'true'
							    -| ['compiler_generated'] ) ->
						( [_27|St]
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
				    in  %% Line 1741
					case apply 'prefix_1'/2
						 (_10, _4) of
					  %% Line 1742
					  <'nomatch'>
					      when call 'erlang':'is_binary'
						    (Cs) ->
					      let <_12> =
						  call %% Line 1743
						       'erlang':%% Line 1743
								'byte_size'
						      (_0)
					      in  let <_11> =
						      call %% Line 1743
							   'erlang':%% Line 1743
								    'byte_size'
							  (%% Line 1743
							   Cs)
						  in  let <KeepSz> =
							  call %% Line 1743
							       'erlang':%% Line 1743
									'-'
							      (_12, _11)
						      in  %% Line 1744
							  apply 'bin_search_str_2'/5
							      (_0, KeepSz, _2, _3, _4)
					  %% Line 1745
					  <'nomatch'> when 'true' ->
					      let <_28> = _@r0
					      in  let <_14> =
						      case <_28,_2> of
							( <_30,( []
								 -| ['compiler_generated'] )> when ( 'true'
												     -| ['compiler_generated'] ) ->
							      _30
							  -| ['compiler_generated'] )
							( <( #{}#
							     -| ['compiler_generated'] ),St> when ( 'true'
												    -| ['compiler_generated'] ) ->
							      St
							  -| ['compiler_generated'] )
							( <( []
							     -| ['compiler_generated'] ),St> when ( 'true'
												    -| ['compiler_generated'] ) ->
							      St
							  -| ['compiler_generated'] )
							( <_31,St> when ( 'true'
									  -| ['compiler_generated'] ) ->
							      ( [_31|St]
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						  in  %% Line 1746
						      {'nomatch',Where,_14}
					  %% Line 1747
					  <[]> when 'true' ->
					      %% Line 1748
					      {Keep,[Cs0|_2],#{}#}
					  %% Line 1749
					  <Rest> when 'true' ->
					      %% Line 1750
					      {Keep,[Cs0|_2],Rest}
					end
				( <_9> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_9})
				  -| ['compiler_generated'] )
			      end
			  ( <_8> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_8})
			    -| ['compiler_generated'] )
			end
		( <_16> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_16})
		  -| ['compiler_generated'] )
	      end
	  ( <_5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_5})
	    -| ['compiler_generated'] )
	end
'len'/1 =
    %% Line 1768
    fun (_0) ->
	call 'erlang':'length'
	    (_0)
'concat'/2 =
    %% Line 1788
    fun (_0,_1) ->
	call 'erlang':'++'
	    (_0, _1)
'chr'/2 =
    %% Line 1799
    fun (_0,_1) ->
	case <_0,_1> of
	  <S,C>
	      when call 'erlang':'is_integer'
		    (C) ->
	      apply 'chr'/3
		  (S, C, 1)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'chr',2}}] )
	    -| ['compiler_generated'] )
	end
'chr'/3 =
    %% Line 1801
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[C|_X_Cs],_7,I>
	      when call 'erlang':'=:='
		    (_7,
		     C) ->
	      I
	  %% Line 1802
	  <[_8|Cs],C,I> when 'true' ->
	      let <_3> =
		  call 'erlang':'+'
		      (I, 1)
	      in  apply 'chr'/3
		      (Cs, C, _3)
	  %% Line 1803
	  <[],_X_C,_X_I> when 'true' ->
	      0
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'chr',3}}] )
	    -| ['compiler_generated'] )
	end
'rchr'/2 =
    %% Line 1810
    fun (_0,_1) ->
	case <_0,_1> of
	  <S,C>
	      when call 'erlang':'is_integer'
		    (C) ->
	      apply 'rchr'/4
		  (S, C, 1, 0)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'rchr',2}}] )
	    -| ['compiler_generated'] )
	end
'rchr'/4 =
    %% Line 1812
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[C|Cs],_10,I,_X_L>
	      when call 'erlang':'=:='
		    (_10,
		     C) ->
	      let <_4> =
		  call %% Line 1813
		       'erlang':%% Line 1813
				'+'
		      (%% Line 1813
		       I, %% Line 1813
			  1)
	      in  %% Line 1813
		  apply 'rchr'/4
		      (Cs, C, _4, I)
	  %% Line 1814
	  <[_11|Cs],C,I,L> when 'true' ->
	      let <_5> =
		  call %% Line 1815
		       'erlang':%% Line 1815
				'+'
		      (%% Line 1815
		       I, %% Line 1815
			  1)
	      in  %% Line 1815
		  apply 'rchr'/4
		      (Cs, C, _5, L)
	  %% Line 1816
	  <[],_X_C,_X_I,L> when 'true' ->
	      L
	  ( <_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6})
		  -| [{'function_name',{'rchr',4}}] )
	    -| ['compiler_generated'] )
	end
'str'/2 =
    %% Line 1829
    fun (_0,_1) ->
	case <_0,_1> of
	  <S,Sub>
	      when call 'erlang':'is_list'
		    (Sub) ->
	      apply 'str'/3
		  (S, Sub, 1)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'str',2}}] )
	    -| ['compiler_generated'] )
	end
'str'/3 =
    %% Line 1831
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[C|S],[_9|Sub],I>
	      when call 'erlang':'=:='
		    (_9,
		     C) ->
	      %% Line 1832
	      case apply 'l_prefix'/2
		       (Sub, S) of
		%% Line 1833
		<'true'> when 'true' ->
		    I
		%% Line 1834
		<'false'> when 'true' ->
		    let <_3> =
			call 'erlang':'+'
			    (I, 1)
		    in  apply 'str'/3
			    (S, [C|Sub], _3)
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1836
	  <[_10|S],Sub,I> when 'true' ->
	      let <_5> =
		  call 'erlang':'+'
		      (I, 1)
	      in  apply 'str'/3
		      (S, Sub, _5)
	  %% Line 1837
	  <[],_X_Sub,_X_I> when 'true' ->
	      0
	  ( <_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7,_6})
		  -| [{'function_name',{'str',3}}] )
	    -| ['compiler_generated'] )
	end
'rstr'/2 =
    %% Line 1844
    fun (_0,_1) ->
	case <_0,_1> of
	  <S,Sub>
	      when call 'erlang':'is_list'
		    (Sub) ->
	      apply 'rstr'/4
		  (S, Sub, 1, 0)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'rstr',2}}] )
	    -| ['compiler_generated'] )
	end
'rstr'/4 =
    %% Line 1846
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[C|S],[_12|Sub],I,L>
	      when call 'erlang':'=:='
		    (_12,
		     C) ->
	      %% Line 1847
	      case apply 'l_prefix'/2
		       (Sub, S) of
		%% Line 1848
		<'true'> when 'true' ->
		    let <_4> =
			call 'erlang':'+'
			    (I, 1)
		    in  apply 'rstr'/4
			    (S, [C|Sub], _4, I)
		%% Line 1849
		<'false'> when 'true' ->
		    let <_5> =
			call 'erlang':'+'
			    (I, 1)
		    in  apply 'rstr'/4
			    (S, [C|Sub], _5, L)
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1851
	  <[_13|S],Sub,I,L> when 'true' ->
	      let <_7> =
		  call 'erlang':'+'
		      (I, 1)
	      in  apply 'rstr'/4
		      (S, Sub, _7, L)
	  %% Line 1852
	  <[],_X_Sub,_X_I,L> when 'true' ->
	      L
	  ( <_11,_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8})
		  -| [{'function_name',{'rstr',4}}] )
	    -| ['compiler_generated'] )
	end
'l_prefix'/2 =
    %% Line 1854
    fun (_0,_1) ->
	case <_0,_1> of
	  <[C|Pre],[_6|String]>
	      when call 'erlang':'=:='
		    (_6,
		     C) ->
	      apply 'l_prefix'/2
		  (Pre, String)
	  %% Line 1855
	  <[],String>
	      when call 'erlang':'is_list'
		    (String) ->
	      'true'
	  %% Line 1856
	  <Pre,String>
	      when let <_2> =
		    call 'erlang':'is_list'
			(Pre)
		in  let <_3> =
			call 'erlang':'is_list'
			    (String)
		    in  call 'erlang':'and'
			    (_2, _3) ->
	      'false'
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'l_prefix',2}}] )
	    -| ['compiler_generated'] )
	end
'span'/2 =
    %% Line 1866
    fun (_0,_1) ->
	case <_0,_1> of
	  <S,Cs>
	      when call 'erlang':'is_list'
		    (Cs) ->
	      apply 'span'/3
		  (S, Cs, 0)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'span',2}}] )
	    -| ['compiler_generated'] )
	end
'span'/3 =
    %% Line 1868
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[C|S],Cs,I> when 'true' ->
	      %% Line 1869
	      case call 'lists':'member'
		       (C, Cs) of
		%% Line 1870
		<'true'> when 'true' ->
		    let <_3> =
			call 'erlang':'+'
			    (I, 1)
		    in  apply 'span'/3
			    (S, Cs, _3)
		%% Line 1871
		<'false'> when 'true' ->
		    I
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1873
	  <[],_X_Cs,I> when 'true' ->
	      I
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'span',3}}] )
	    -| ['compiler_generated'] )
	end
'cspan'/2 =
    %% Line 1880
    fun (_0,_1) ->
	case <_0,_1> of
	  <S,Cs>
	      when call 'erlang':'is_list'
		    (Cs) ->
	      apply 'cspan'/3
		  (S, Cs, 0)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'cspan',2}}] )
	    -| ['compiler_generated'] )
	end
'cspan'/3 =
    %% Line 1882
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[C|S],Cs,I> when 'true' ->
	      %% Line 1883
	      case call 'lists':'member'
		       (C, Cs) of
		%% Line 1884
		<'true'> when 'true' ->
		    I
		%% Line 1885
		<'false'> when 'true' ->
		    let <_3> =
			call 'erlang':'+'
			    (I, 1)
		    in  apply 'cspan'/3
			    (S, Cs, _3)
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1887
	  <[],_X_Cs,I> when 'true' ->
	      I
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'cspan',3}}] )
	    -| ['compiler_generated'] )
	end
'substr'/2 =
    %% Line 1898
    fun (_0,_1) ->
	case <_0,_1> of
	  <String,1>
	      when call 'erlang':'is_list'
		    (String) ->
	      %% Line 1899
	      String
	  %% Line 1900
	  <String,S>
	      when let <_2> =
		    call 'erlang':'is_integer'
			(S)
		in  let <_3> =
			call 'erlang':'>'
			    (S, 1)
		    in  call 'erlang':'and'
			    (_2, _3) ->
	      %% Line 1901
	      apply 'substr2'/2
		  (String, S)
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'substr',2}}] )
	    -| ['compiler_generated'] )
	end
'substr'/3 =
    %% Line 1909
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <String,S,L>
	      when try
		    let <_3> =
			call 'erlang':'is_integer'
			    (S)
		    in  let <_4> =
			    call 'erlang':'>='
				(S, 1)
			in  let <_5> =
				call 'erlang':'is_integer'
				    (L)
			    in  let <_6> =
				    call 'erlang':'>='
					(L, 0)
				in  let <_7> =
					call 'erlang':'and'
					    (_5, _6)
				    in  let <_8> =
					    call 'erlang':'and'
						(_4, _7)
					in  call 'erlang':'and'
						(_3, _8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_9> =
		  apply %% Line 1910
			'substr2'/2
		      (%% Line 1910
		       String, %% Line 1910
			       S)
	      in  %% Line 1910
		  apply 'substr1'/2
		      (_9, L)
	  ( <_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11,_10})
		  -| [{'function_name',{'substr',3}}] )
	    -| ['compiler_generated'] )
	end
'substr1'/2 =
    %% Line 1912
    fun (_0,_1) ->
	case <_0,_1> of
	  <[C|String],L>
	      when call 'erlang':'>'
		    (L,
		     0) ->
	      let <_2> =
		  call 'erlang':'-'
		      (L, 1)
	      in  let <_3> =
		      apply 'substr1'/2
			  (String, _2)
		  in  [C|_3]
	  %% Line 1913
	  <String,_X_L>
	      when call 'erlang':'is_list'
		    (String) ->
	      []
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'substr1',2}}] )
	    -| ['compiler_generated'] )
	end
'substr2'/2 =
    %% Line 1915
    fun (_0,_1) ->
	case <_0,_1> of
	  <String,1>
	      when call 'erlang':'is_list'
		    (String) ->
	      String
	  %% Line 1916
	  <[_5|String],S> when 'true' ->
	      let <_2> =
		  call 'erlang':'-'
		      (S, 1)
	      in  apply 'substr2'/2
		      (String, _2)
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'substr2',2}}] )
	    -| ['compiler_generated'] )
	end
'tokens'/2 =
    %% Line 1926
    fun (_0,_1) ->
	%% Line 1927
	case _1 of
	  %% Line 1928
	  <[]> when 'true' ->
	      %% Line 1929
	      case _0 of
		%% Line 1930
		<[]> when 'true' ->
		    []
		%% Line 1931
		<[_8|_9]> when 'true' ->
		    [_0|[]]
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1933
	  <[C|[]]> when 'true' ->
	      let <_3> =
		  call %% Line 1934
		       'lists':%% Line 1934
			       'reverse'
		      (_0)
	      in  %% Line 1934
		  apply 'tokens_single_1'/3
		      (_3, C, [])
	  %% Line 1935
	  <[_10|_11]> when 'true' ->
	      let <_4> =
		  call %% Line 1936
		       'lists':%% Line 1936
			       'reverse'
		      (_0)
	      in  %% Line 1936
		  apply 'tokens_multiple_1'/3
		      (_4, _1, [])
	  ( <_5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_5})
	    -| ['compiler_generated'] )
	end
'tokens_single_1'/3 =
    %% Line 1939
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[Sep|S],_6,Toks>
	      when call 'erlang':'=:='
		    (_6,
		     Sep) ->
	      %% Line 1940
	      apply 'tokens_single_1'/3
		  (S, Sep, Toks)
	  %% Line 1941
	  <[C|S],Sep,Toks> when 'true' ->
	      %% Line 1942
	      apply 'tokens_single_2'/4
		  (S, Sep, Toks, [C|[]])
	  %% Line 1943
	  <[],_7,Toks> when 'true' ->
	      %% Line 1944
	      Toks
	  ( <_5,_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4,_3})
		  -| [{'function_name',{'tokens_single_1',3}}] )
	    -| ['compiler_generated'] )
	end
'tokens_single_2'/4 =
    %% Line 1946
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[Sep|S],_8,Toks,Tok>
	      when call 'erlang':'=:='
		    (_8,
		     Sep) ->
	      %% Line 1947
	      apply 'tokens_single_1'/3
		  (S, Sep, [Tok|Toks])
	  %% Line 1948
	  <[C|S],Sep,Toks,Tok> when 'true' ->
	      %% Line 1949
	      apply 'tokens_single_2'/4
		  (S, Sep, Toks, [C|Tok])
	  %% Line 1950
	  <[],_X_Sep,Toks,Tok> when 'true' ->
	      %% Line 1951
	      [Tok|Toks]
	  ( <_7,_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5,_4})
		  -| [{'function_name',{'tokens_single_2',4}}] )
	    -| ['compiler_generated'] )
	end
'tokens_multiple_1'/3 =
    %% Line 1953
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[C|S],Seps,Toks> when 'true' ->
	      %% Line 1954
	      case call 'lists':'member'
		       (C, Seps) of
		%% Line 1955
		<'true'> when 'true' ->
		    apply 'tokens_multiple_1'/3
			(S, Seps, Toks)
		%% Line 1956
		<'false'> when 'true' ->
		    apply 'tokens_multiple_2'/4
			(S, Seps, Toks, [C|[]])
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1958
	  <[],_X_Seps,Toks> when 'true' ->
	      %% Line 1959
	      Toks
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'tokens_multiple_1',3}}] )
	    -| ['compiler_generated'] )
	end
'tokens_multiple_2'/4 =
    %% Line 1961
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[C|S],Seps,Toks,Tok> when 'true' ->
	      %% Line 1962
	      case call 'lists':'member'
		       (C, Seps) of
		%% Line 1963
		<'true'> when 'true' ->
		    apply 'tokens_multiple_1'/3
			(S, Seps, [Tok|Toks])
		%% Line 1964
		<'false'> when 'true' ->
		    apply 'tokens_multiple_2'/4
			(S, Seps, Toks, [C|Tok])
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1966
	  <[],_X_Seps,Toks,Tok> when 'true' ->
	      %% Line 1967
	      [Tok|Toks]
	  ( <_8,_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7,_6,_5})
		  -| [{'function_name',{'tokens_multiple_2',4}}] )
	    -| ['compiler_generated'] )
	end
'chars'/2 =
    %% Line 1974
    fun (_0,_1) ->
	apply 'chars'/3
	    (_0, _1, [])
'chars'/3 =
    %% Line 1982
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <C,N,Tail>
	      when call 'erlang':'>'
		    (N,
		     0) ->
	      let <_3> =
		  call %% Line 1983
		       'erlang':%% Line 1983
				'-'
		      (%% Line 1983
		       N, %% Line 1983
			  1)
	      in  %% Line 1983
		  apply 'chars'/3
		      (C, _3, [C|Tail])
	  %% Line 1984
	  <C,0,Tail>
	      when call 'erlang':'is_integer'
		    (C) ->
	      %% Line 1985
	      Tail
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'chars',3}}] )
	    -| ['compiler_generated'] )
	end
'copies'/2 =
    %% Line 1996
    fun (_0,_1) ->
	case <_0,_1> of
	  <CharList,Num>
	      when try
		    let <_2> =
			call 'erlang':'is_list'
			    (CharList)
		    in  let <_3> =
			    call 'erlang':'is_integer'
				(Num)
			in  let <_4> =
				call 'erlang':'>='
				    (Num, 0)
			    in  let <_5> =
				    call 'erlang':'and'
					(_3, _4)
				in  call 'erlang':'and'
					(_2, _5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1997
	      apply 'copies'/3
		  (CharList, Num, [])
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'copies',2}}] )
	    -| ['compiler_generated'] )
	end
'copies'/3 =
    %% Line 1999
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <_X_CharList,0,R> when 'true' ->
	      %% Line 2000
	      R
	  %% Line 2001
	  <CharList,Num,R> when 'true' ->
	      let <_4> =
		  call %% Line 2002
		       'erlang':%% Line 2002
				'-'
		      (%% Line 2002
		       Num, %% Line 2002
			    1)
	      in  let <_3> =
		      call %% Line 2002
			   'erlang':%% Line 2002
				    '++'
			  (%% Line 2002
			   CharList, %% Line 2002
				     R)
		  in  %% Line 2002
		      apply 'copies'/3
			  (CharList, _4, _3)
	end
'words'/1 =
    %% Line 2010
    fun (_0) ->
	apply 'words'/2
	    (_0, 32)
'words'/2 =
    %% Line 2017
    fun (_0,_1) ->
	case <_0,_1> of
	  <String,Char>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      let <_2> =
		  apply %% Line 2018
			'strip'/3
		      (%% Line 2018
		       String, %% Line 2018
			       'both', %% Line 2018
				       Char)
	      in  %% Line 2018
		  apply 'w_count'/3
		      (_2, Char, 0)
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'words',2}}] )
	    -| ['compiler_generated'] )
	end
'w_count'/3 =
    %% Line 2020
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[],_8,Num> when 'true' ->
	      call 'erlang':'+'
		  (Num, 1)
	  %% Line 2021
	  <[H|T],_9,Num>
	      when call 'erlang':'=:='
		    (_9,
		     H) ->
	      let <_4> =
		  apply 'strip'/3
		      (T, 'left', H)
	      in  let <_3> =
		      call 'erlang':'+'
			  (Num, 1)
		  in  apply 'w_count'/3
			  (_4, H, _3)
	  %% Line 2022
	  <[_X_H|T],Char,Num> when 'true' ->
	      apply 'w_count'/3
		  (T, Char, Num)
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'w_count',3}}] )
	    -| ['compiler_generated'] )
	end
'sub_word'/2 =
    %% Line 2031
    fun (_0,_1) ->
	apply 'sub_word'/3
	    (_0, _1, 32)
'sub_word'/3 =
    %% Line 2039
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <String,Index,Char>
	      when let <_3> =
		    call 'erlang':'is_integer'
			(Index)
		in  let <_4> =
			call 'erlang':'is_integer'
			    (Char)
		    in  call 'erlang':'and'
			    (_3, _4) ->
	      %% Line 2040
	      case apply 'words'/2
		       (String, Char) of
		%% Line 2041
		<Num>
		    when call 'erlang':'<'
			  (Num,
			   Index) ->
		    %% Line 2042
		    []
		%% Line 2043
		<_X_Num> when 'true' ->
		    let <_5> =
			apply %% Line 2044
			      'strip'/3
			    (%% Line 2044
			     String, %% Line 2044
				     'left', %% Line 2044
					     Char)
		    in  %% Line 2044
			apply 's_word'/5
			    (_5, Index, Char, 1, [])
	      end
	  ( <_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7})
		  -| [{'function_name',{'sub_word',3}}] )
	    -| ['compiler_generated'] )
	end
's_word'/5 =
    %% Line 2047
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <[],_12,_13,_14,Res> when 'true' ->
	      call 'lists':'reverse'
		  (Res)
	  %% Line 2048
	  <[Char|_15],Index,_16,_17,Res>
	      when let <_18> =
		    call 'erlang':'=:='
			(_16, Char)
		in  let <_19> =
			call 'erlang':'=:='
			    (_17, Index)
		    in  call 'erlang':'and'
			    (_18, _19) ->
	      call 'lists':'reverse'
		  (Res)
	  %% Line 2049
	  <[H|T],Index,Char,_20,Res>
	      when call 'erlang':'=:='
		    (_20,
		     Index) ->
	      apply 's_word'/5
		  (T, Index, Char, Index, [H|Res])
	  %% Line 2050
	  <[Char|T],Stop,_21,Index,Res>
	      when let <_22> =
		    call 'erlang':'=:='
			(_21, Char)
		in  let <_23> =
			call 'erlang':'<'
			    (Index, Stop)
		    in  call 'erlang':'and'
			    (_22, _23) ->
	      let <_6> =
		  apply %% Line 2051
			'strip'/3
		      (%% Line 2051
		       T, %% Line 2051
			  'left', %% Line 2051
				  Char)
	      in  let <_5> =
		      call %% Line 2051
			   'erlang':%% Line 2051
				    '+'
			  (%% Line 2051
			   Index, %% Line 2051
				  1)
		  in  %% Line 2051
		      apply 's_word'/5
			  (_6, Stop, Char, _5, Res)
	  %% Line 2052
	  <[_24|T],Stop,Char,Index,Res>
	      when call 'erlang':'<'
		    (Index,
		     Stop) ->
	      %% Line 2053
	      apply 's_word'/5
		  (T, Stop, Char, Index, Res)
	  ( <_11,_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8,_7})
		  -| [{'function_name',{'s_word',5}}] )
	    -| ['compiler_generated'] )
	end
'strip'/1 =
    %% Line 2059
    fun (_0) ->
	apply 'strip'/2
	    (_0, 'both')
'strip'/2 =
    %% Line 2066
    fun (_0,_1) ->
	case <_0,_1> of
	  <String,'left'> when 'true' ->
	      apply 'strip_left'/2
		  (String, 32)
	  %% Line 2067
	  <String,'right'> when 'true' ->
	      apply 'strip_right'/2
		  (String, 32)
	  %% Line 2068
	  <String,'both'> when 'true' ->
	      let <_2> =
		  apply %% Line 2069
			'strip_left'/2
		      (%% Line 2069
		       String, %% Line 2069
			       32)
	      in  %% Line 2069
		  apply 'strip_right'/2
		      (_2, 32)
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'strip',2}}] )
	    -| ['compiler_generated'] )
	end
'strip'/3 =
    %% Line 2077
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <String,'right',Char> when 'true' ->
	      apply 'strip_right'/2
		  (String, Char)
	  %% Line 2078
	  <String,'left',Char> when 'true' ->
	      apply 'strip_left'/2
		  (String, Char)
	  %% Line 2079
	  <String,'both',Char> when 'true' ->
	      let <_3> =
		  apply %% Line 2080
			'strip_left'/2
		      (%% Line 2080
		       String, %% Line 2080
			       Char)
	      in  %% Line 2080
		  apply 'strip_right'/2
		      (_3, Char)
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'strip',3}}] )
	    -| ['compiler_generated'] )
	end
'strip_left'/2 =
    %% Line 2082
    fun (_0,_1) ->
	case <_0,_1> of
	  <[Sc|S],_4>
	      when call 'erlang':'=:='
		    (_4,
		     Sc) ->
	      %% Line 2083
	      apply 'strip_left'/2
		  (S, Sc)
	  %% Line 2084
	  <S = [_5|_6],Sc>
	      when call 'erlang':'is_integer'
		    (Sc) ->
	      S
	  %% Line 2085
	  <[],Sc>
	      when call 'erlang':'is_integer'
		    (Sc) ->
	      []
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'strip_left',2}}] )
	    -| ['compiler_generated'] )
	end
'strip_right'/2 =
    %% Line 2087
    fun (_0,_1) ->
	case <_0,_1> of
	  <[Sc|S],_6>
	      when call 'erlang':'=:='
		    (_6,
		     Sc) ->
	      %% Line 2088
	      case apply 'strip_right'/2
		       (S, Sc) of
		%% Line 2089
		<[]> when 'true' ->
		    []
		%% Line 2090
		<T> when 'true' ->
		    [Sc|T]
	      end
	  %% Line 2092
	  <[C|S],Sc> when 'true' ->
	      let <_3> =
		  apply %% Line 2093
			'strip_right'/2
		      (%% Line 2093
		       S, %% Line 2093
			  Sc)
	      in  %% Line 2093
		  [C|_3]
	  %% Line 2094
	  <[],Sc>
	      when call 'erlang':'is_integer'
		    (Sc) ->
	      %% Line 2095
	      []
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'strip_right',2}}] )
	    -| ['compiler_generated'] )
	end
'left'/2 =
    %% Line 2104
    fun (_0,_1) ->
	case <_0,_1> of
	  <String,Len>
	      when call 'erlang':'is_integer'
		    (Len) ->
	      apply 'left'/3
		  (String, Len, 32)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'left',2}}] )
	    -| ['compiler_generated'] )
	end
'left'/3 =
    %% Line 2112
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <String,Len,Char>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      let <Slen> =
		  call %% Line 2113
		       'erlang':%% Line 2113
				'length'
		      (%% Line 2113
		       String)
	      in  %% Line 2114
		  case <> of
		    %% Line 2115
		    <>
			when call 'erlang':'>'
			      (Slen,
			       Len) ->
			apply 'substr'/3
			    (String, 1, Len)
		    %% Line 2116
		    <>
			when call 'erlang':'<'
			      (Slen,
			       Len) ->
			let <_4> =
			    call 'erlang':'-'
				(Len, Slen)
			in  apply 'l_pad'/3
				(String, _4, Char)
		    %% Line 2117
		    <>
			when call 'erlang':'=:='
			      (Slen,
			       Len) ->
			String
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'left',3}}] )
	    -| ['compiler_generated'] )
	end
'l_pad'/3 =
    %% Line 2120
    fun (_0,_1,_2) ->
	let <_3> =
	    apply 'chars'/2
		(_2, _1)
	in  call 'erlang':'++'
		(_0, _3)
'right'/2 =
    %% Line 2129
    fun (_0,_1) ->
	case <_0,_1> of
	  <String,Len>
	      when call 'erlang':'is_integer'
		    (Len) ->
	      apply 'right'/3
		  (String, Len, 32)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'right',2}}] )
	    -| ['compiler_generated'] )
	end
'right'/3 =
    %% Line 2137
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <String,Len,Char>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      let <Slen> =
		  call %% Line 2138
		       'erlang':%% Line 2138
				'length'
		      (%% Line 2138
		       String)
	      in  %% Line 2139
		  case <> of
		    %% Line 2140
		    <>
			when call 'erlang':'>'
			      (Slen,
			       Len) ->
			let <_4> =
			    call 'erlang':'-'
				(Slen, Len)
			in  let <_5> =
				call 'erlang':'+'
				    (_4, 1)
			    in  apply 'substr'/2
				    (String, _5)
		    %% Line 2141
		    <>
			when call 'erlang':'<'
			      (Slen,
			       Len) ->
			let <_6> =
			    call 'erlang':'-'
				(Len, Slen)
			in  apply 'r_pad'/3
				(String, _6, Char)
		    %% Line 2142
		    <>
			when call 'erlang':'=:='
			      (Slen,
			       Len) ->
			String
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	  ( <_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7})
		  -| [{'function_name',{'right',3}}] )
	    -| ['compiler_generated'] )
	end
'r_pad'/3 =
    %% Line 2145
    fun (_0,_1,_2) ->
	apply 'chars'/3
	    (_2, _1, _0)
'centre'/2 =
    %% Line 2154
    fun (_0,_1) ->
	case <_0,_1> of
	  <String,Len>
	      when call 'erlang':'is_integer'
		    (Len) ->
	      apply 'centre'/3
		  (String, Len, 32)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'centre',2}}] )
	    -| ['compiler_generated'] )
	end
'centre'/3 =
    %% Line 2162
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <String,0,Char>
	      when let <_3> =
		    call 'erlang':'is_list'
			(String)
		in  let <_4> =
			call 'erlang':'is_integer'
			    (Char)
		    in  call 'erlang':'and'
			    (_3, _4) ->
	      %% Line 2163
	      []
	  %% Line 2164
	  <String,Len,Char>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      let <Slen> =
		  call %% Line 2165
		       'erlang':%% Line 2165
				'length'
		      (%% Line 2165
		       String)
	      in  %% Line 2166
		  case <> of
		    %% Line 2167
		    <>
			when call 'erlang':'>'
			      (Slen,
			       Len) ->
			let <_6> =
			    call 'erlang':'-'
				(Slen, Len)
			in  let <_7> =
				call 'erlang':'div'
				    (_6, 2)
			    in  let <_8> =
				    call 'erlang':'+'
					(_7, 1)
				in  apply 'substr'/3
					(String, _8, Len)
		    %% Line 2168
		    <>
			when call 'erlang':'<'
			      (Slen,
			       Len) ->
			let <_9> =
			    call %% Line 2169
				 'erlang':%% Line 2169
					  '-'
				(%% Line 2169
				 Len, %% Line 2169
				      Slen)
			in  let <N> =
				call %% Line 2169
				     'erlang':%% Line 2169
					      'div'
				    (_9, %% Line 2169
					 2)
			    in  let <_11> =
				    call %% Line 2170
					 'erlang':%% Line 2170
						  '+'
					(%% Line 2170
					 Slen, %% Line 2170
					       N)
				in  let <_12> =
					call %% Line 2170
					     'erlang':%% Line 2170
						      '-'
					    (%% Line 2170
					     Len, _11)
				    in  let <_13> =
					    apply %% Line 2170
						  'l_pad'/3
						(%% Line 2170
						 String, _12, %% Line 2170
							      Char)
					in  %% Line 2170
					    apply 'r_pad'/3
						(_13, N, Char)
		    %% Line 2171
		    <>
			when call 'erlang':'=:='
			      (Slen,
			       Len) ->
			String
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	  ( <_16,_15,_14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15,_14})
		  -| [{'function_name',{'centre',3}}] )
	    -| ['compiler_generated'] )
	end
'sub_string'/2 =
    %% Line 2181
    fun (_0,_1) ->
	apply 'substr'/2
	    (_0, _1)
'sub_string'/3 =
    %% Line 2189
    fun (_0,_1,_2) ->
	let <_3> =
	    call 'erlang':'-'
		(_2, _1)
	in  let <_4> =
		call 'erlang':'+'
		    (_3, 1)
	    in  apply 'substr'/3
		    (_0, _1, _4)
'to_lower_char'/1 =
    %% Line 2194
    fun (_0) ->
	case _0 of
	  <C>
	      when try
		    let <_1> =
			call 'erlang':'is_integer'
			    (_0)
		    in  let <_2> =
			    call 'erlang':'=<'
				(65, _0)
			in  let <_3> =
				call 'erlang':'=<'
				    (_0, 90)
			    in  let <_4> =
				    call 'erlang':'and'
					(_2, _3)
				in  call 'erlang':'and'
					(_1, _4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2195
	      call 'erlang':'+'
		  (C, 32)
	  %% Line 2196
	  <C>
	      when try
		    let <_5> =
			call 'erlang':'is_integer'
			    (_0)
		    in  let <_6> =
			    call 'erlang':'=<'
				(192, _0)
			in  let <_7> =
				call 'erlang':'=<'
				    (_0, 214)
			    in  let <_8> =
				    call 'erlang':'and'
					(_6, _7)
				in  call 'erlang':'and'
					(_5, _8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2197
	      call 'erlang':'+'
		  (C, 32)
	  %% Line 2198
	  <C>
	      when try
		    let <_9> =
			call 'erlang':'is_integer'
			    (_0)
		    in  let <_10> =
			    call 'erlang':'=<'
				(216, _0)
			in  let <_11> =
				call 'erlang':'=<'
				    (_0, 222)
			    in  let <_12> =
				    call 'erlang':'and'
					(_10, _11)
				in  call 'erlang':'and'
					(_9, _12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2199
	      call 'erlang':'+'
		  (C, 32)
	  %% Line 2200
	  <C> when 'true' ->
	      %% Line 2201
	      C
	end
'to_upper_char'/1 =
    %% Line 2203
    fun (_0) ->
	case _0 of
	  <C>
	      when try
		    let <_1> =
			call 'erlang':'is_integer'
			    (_0)
		    in  let <_2> =
			    call 'erlang':'=<'
				(97, _0)
			in  let <_3> =
				call 'erlang':'=<'
				    (_0, 122)
			    in  let <_4> =
				    call 'erlang':'and'
					(_2, _3)
				in  call 'erlang':'and'
					(_1, _4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2204
	      call 'erlang':'-'
		  (C, 32)
	  %% Line 2205
	  <C>
	      when try
		    let <_5> =
			call 'erlang':'is_integer'
			    (_0)
		    in  let <_6> =
			    call 'erlang':'=<'
				(224, _0)
			in  let <_7> =
				call 'erlang':'=<'
				    (_0, 246)
			    in  let <_8> =
				    call 'erlang':'and'
					(_6, _7)
				in  call 'erlang':'and'
					(_5, _8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2206
	      call 'erlang':'-'
		  (C, 32)
	  %% Line 2207
	  <C>
	      when try
		    let <_9> =
			call 'erlang':'is_integer'
			    (_0)
		    in  let <_10> =
			    call 'erlang':'=<'
				(248, _0)
			in  let <_11> =
				call 'erlang':'=<'
				    (_0, 254)
			    in  let <_12> =
				    call 'erlang':'and'
					(_10, _11)
				in  call 'erlang':'and'
					(_9, _12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2208
	      call 'erlang':'-'
		  (C, 32)
	  %% Line 2209
	  <C> when 'true' ->
	      %% Line 2210
	      C
	end
'to_lower'/1 =
    %% Line 2219
    fun (_0) ->
	case _0 of
	  <S>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 2220
	      ( letrec
		    'lc$^0'/1 =
			fun (_3) ->
			    case _3 of
			      <[C|_2]> when 'true' ->
				  let <_4> =
				      apply 'to_lower_char'/1
					  (C)
				  in  let <_5> =
					  apply 'lc$^0'/1
					      (_2)
				      in  ( [_4|_5]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_7> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_7})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(S)
		-| ['list_comprehension'] )
	  %% Line 2221
	  <C>
	      when call 'erlang':'is_integer'
		    (_0) ->
	      %% Line 2222
	      apply 'to_lower_char'/1
		  (C)
	  ( <_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6})
		  -| [{'function_name',{'to_lower',1}}] )
	    -| ['compiler_generated'] )
	end
'to_upper'/1 =
    %% Line 2231
    fun (_0) ->
	case _0 of
	  <S>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 2232
	      ( letrec
		    'lc$^0'/1 =
			fun (_3) ->
			    case _3 of
			      <[C|_2]> when 'true' ->
				  let <_4> =
				      apply 'to_upper_char'/1
					  (C)
				  in  let <_5> =
					  apply 'lc$^0'/1
					      (_2)
				      in  ( [_4|_5]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_7> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_7})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(S)
		-| ['list_comprehension'] )
	  %% Line 2233
	  <C>
	      when call 'erlang':'is_integer'
		    (_0) ->
	      %% Line 2234
	      apply 'to_upper_char'/1
		  (C)
	  ( <_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6})
		  -| [{'function_name',{'to_upper',1}}] )
	    -| ['compiler_generated'] )
	end
'join'/2 =
    %% Line 2241
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],Sep>
	      when call 'erlang':'is_list'
		    (Sep) ->
	      %% Line 2242
	      []
	  %% Line 2243
	  <[H|T],Sep> when 'true' ->
	      let <_7> =
		  letrec
		      'lc$^0'/1 =
			  %% Line 2244
			  fun (_4) ->
			      case _4 of
				<[X|_3]> when 'true' ->
				    let <_5> =
					call 'erlang':'++'
					    (Sep, X)
				    in  let <_6> =
					    apply 'lc$^0'/1
						(_3)
					in  ( [_5|_6]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_11> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_11})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  %% Line 2244
		      apply 'lc$^0'/1
			  (T)
	      in  let <_8> =
		      call %% Line 2244
			   'lists':%% Line 2244
				   'append'
			  (_7)
		  in  %% Line 2244
		      call 'erlang':'++'
			  (H, _8)
	  ( <_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9})
		  -| [{'function_name',{'join',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('string')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('string', _0)
end