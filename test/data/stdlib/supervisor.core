module 'supervisor' ['behaviour_info'/1,
		     'check_childspecs'/1,
		     'code_change'/3,
		     'count_children'/1,
		     'delete_child'/2,
		     'format_log'/1,
		     'format_log'/2,
		     'format_status'/2,
		     'get_callback_module'/1,
		     'get_childspec'/2,
		     'handle_call'/3,
		     'handle_cast'/2,
		     'handle_info'/2,
		     'init'/1,
		     'module_info'/0,
		     'module_info'/1,
		     'restart_child'/2,
		     'start_child'/2,
		     'start_link'/2,
		     'start_link'/3,
		     'terminate'/2,
		     'terminate_child'/2,
		     'which_children'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],1}],
		%% Line 22
		'behaviour' =
		    %% Line 22
		    ['gen_server'],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[47|[85|[115|[101|[114|[115|[47|[102|[101|[110|[103|[108|[101|[101|[47|[72|[97|[109|[108|[101|[114|[47|[111|[116|[112|[45|[79|[84|[80|[45|[50|[51|[46|[48|[45|[114|[99|[49|[47|[108|[105|[98|[47|[115|[116|[100|[108|[105|[98|[47|[46|[46|[47|[107|[101|[114|[110|[101|[108|[47|[105|[110|[99|[108|[117|[100|[101|[47|[108|[111|[103|[103|[101|[114|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 42
		'file' =
		    %% Line 42
		    [{[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],42}],
		%% Line 58
		'export_type' =
		    %% Line 58
		    [{'sup_flags',0}|[{'child_spec',0}|[{'strategy',0}|[{'startchild_ret',0}|[{'startchild_err',0}|[{'startlink_ret',0}|[{'startlink_err',0}]]]]]]],
		%% Line 64
		'type' =
		    %% Line 64
		    [{'child',{'type',64,'union',[{'atom',64,'undefined'}|[{'type',64,'pid',[]}]]},[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{'child_id',{'type',65,'term',[]},[]}],
		%% Line 66
		'type' =
		    %% Line 66
		    [{'mfargs',{'type',66,'tuple',[{'ann_type',66,[{'var',66,'M'}|[{'type',66,'module',[]}]]}|[{'ann_type',66,[{'var',66,'F'}|[{'type',66,'atom',[]}]]}|[{'ann_type',66,[{'var',66,'A'}|[{'type',66,'union',[{'type',66,'list',[{'type',66,'term',[]}]}|[{'atom',66,'undefined'}]]}]]}]]]},[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{'modules',{'type',67,'union',[{'type',67,'list',[{'type',67,'module',[]}]}|[{'atom',67,'dynamic'}]]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'restart',{'type',68,'union',[{'atom',68,'permanent'}|[{'atom',68,'transient'}|[{'atom',68,'temporary'}]]]},[]}],
		%% Line 69
		'type' =
		    %% Line 69
		    [{'shutdown',{'type',69,'union',[{'atom',69,'brutal_kill'}|[{'type',69,'timeout',[]}]]},[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{'worker',{'type',70,'union',[{'atom',70,'worker'}|[{'atom',70,'supervisor'}]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'sup_name',{'type',71,'union',[{'type',71,'tuple',[{'atom',71,'local'}|[{'ann_type',71,[{'var',71,'Name'}|[{'type',71,'atom',[]}]]}]]}|[{'type',72,'tuple',[{'atom',72,'global'}|[{'ann_type',72,[{'var',72,'Name'}|[{'type',72,'atom',[]}]]}]]}|[{'type',73,'tuple',[{'atom',73,'via'}|[{'ann_type',73,[{'var',73,'Module'}|[{'type',73,'module',[]}]]}|[{'ann_type',73,[{'var',73,'Name'}|[{'type',73,'any',[]}]]}]]]}]]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'sup_ref',{'type',74,'union',[{'ann_type',74,[{'var',74,'Name'}|[{'type',74,'atom',[]}]]}|[{'type',75,'tuple',[{'ann_type',75,[{'var',75,'Name'}|[{'type',75,'atom',[]}]]}|[{'ann_type',75,[{'var',75,'Node'}|[{'type',75,'node',[]}]]}]]}|[{'type',76,'tuple',[{'atom',76,'global'}|[{'ann_type',76,[{'var',76,'Name'}|[{'type',76,'atom',[]}]]}]]}|[{'type',77,'tuple',[{'atom',77,'via'}|[{'ann_type',77,[{'var',77,'Module'}|[{'type',77,'module',[]}]]}|[{'ann_type',77,[{'var',77,'Name'}|[{'type',77,'any',[]}]]}]]]}|[{'type',78,'pid',[]}]]]]]},[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{'child_spec',{'type',79,'union',[{'type',79,'map',[{'type',79,'map_field_exact',[{'atom',79,'id'}|[{'user_type',79,'child_id',[]}]]}|[{'type',80,'map_field_exact',[{'atom',80,'start'}|[{'user_type',80,'mfargs',[]}]]}|[{'type',81,'map_field_assoc',[{'atom',81,'restart'}|[{'user_type',81,'restart',[]}]]}|[{'type',82,'map_field_assoc',[{'atom',82,'shutdown'}|[{'user_type',82,'shutdown',[]}]]}|[{'type',83,'map_field_assoc',[{'atom',83,'type'}|[{'user_type',83,'worker',[]}]]}|[{'type',84,'map_field_assoc',[{'atom',84,'modules'}|[{'user_type',84,'modules',[]}]]}]]]]]]}|[{'type',85,'tuple',[{'ann_type',85,[{'var',85,'Id'}|[{'user_type',85,'child_id',[]}]]}|[{'ann_type',86,[{'var',86,'StartFunc'}|[{'user_type',86,'mfargs',[]}]]}|[{'ann_type',87,[{'var',87,'Restart'}|[{'user_type',87,'restart',[]}]]}|[{'ann_type',88,[{'var',88,'Shutdown'}|[{'user_type',88,'shutdown',[]}]]}|[{'ann_type',89,[{'var',89,'Type'}|[{'user_type',89,'worker',[]}]]}|[{'ann_type',90,[{'var',90,'Modules'}|[{'user_type',90,'modules',[]}]]}]]]]]]}]]},[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{'strategy',{'type',92,'union',[{'atom',92,'one_for_all'}|[{'atom',92,'one_for_one'}|[{'atom',93,'rest_for_one'}|[{'atom',93,'simple_one_for_one'}]]]]},[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{'sup_flags',{'type',95,'union',[{'type',95,'map',[{'type',95,'map_field_assoc',[{'atom',95,'strategy'}|[{'user_type',95,'strategy',[]}]]}|[{'type',96,'map_field_assoc',[{'atom',96,'intensity'}|[{'type',96,'non_neg_integer',[]}]]}|[{'type',97,'map_field_assoc',[{'atom',97,'period'}|[{'type',97,'pos_integer',[]}]]}]]]}|[{'type',98,'tuple',[{'ann_type',98,[{'var',98,'RestartStrategy'}|[{'user_type',98,'strategy',[]}]]}|[{'ann_type',99,[{'var',99,'Intensity'}|[{'type',99,'non_neg_integer',[]}]]}|[{'ann_type',100,[{'var',100,'Period'}|[{'type',100,'pos_integer',[]}]]}]]]}]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'children',{'type',101,'tuple',[{'ann_type',101,[{'var',101,'Ids'}|[{'type',101,'list',[{'user_type',101,'child_id',[]}]}]]}|[{'ann_type',101,[{'var',101,'Db'}|[{'type',101,'map',[{'type',101,'map_field_assoc',[{'user_type',101,'child_id',[]}|[{'user_type',101,'child_rec',[]}]]}]}]]}]]},[]}],
		%% Line 115
		'record' =
		    %% Line 115
		    [{'child',[{'typed_record_field',{'record_field',116,{'atom',116,'pid'},{'atom',116,'undefined'}},{'type',116,'union',[{'user_type',116,'child',[]}|[{'type',117,'tuple',[{'atom',117,'restarting'}|[{'type',117,'union',[{'type',117,'pid',[]}|[{'atom',117,'undefined'}]]}]]}|[{'type',118,'list',[{'type',118,'pid',[]}]}]]]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'id'}},{'user_type',119,'child_id',[]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'mfargs'}},{'user_type',120,'mfargs',[]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'restart_type'}},{'user_type',121,'restart',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'shutdown'}},{'user_type',122,'shutdown',[]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'child_type'}},{'user_type',123,'worker',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'modules'},{'nil',124}},{'user_type',124,'modules',[]}}]]]]]]]}],
		%% Line 125
		'type' =
		    %% Line 125
		    [{'child_rec',{'type',125,'record',[{'atom',125,'child'}]},[]}],
		%% Line 127
		'record' =
		    %% Line 127
		    [{'state',[{'record_field',127,{'atom',127,'name'}}|[{'typed_record_field',{'record_field',128,{'atom',128,'strategy'}},{'type',128,'union',[{'user_type',128,'strategy',[]}|[{'atom',128,'undefined'}]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'children'},{'tuple',129,[{'nil',129}|[{'map',129,[]}]]}},{'user_type',129,'children',[]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'dynamics'}},{'type',130,'union',[{'type',130,'tuple',[{'atom',130,'maps'}|[{'type',130,'map',[{'type',130,'map_field_assoc',[{'type',130,'pid',[]}|[{'type',130,'list',[]}]]}]}]]}|[{'type',131,'tuple',[{'atom',131,'mapsets'}|[{'type',131,'map',[{'type',131,'map_field_assoc',[{'type',131,'pid',[]}|[{'type',131,'nil',[]}]]}]}]]}|[{'atom',132,'undefined'}]]]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'intensity'}},{'type',133,'union',[{'type',133,'non_neg_integer',[]}|[{'atom',133,'undefined'}]]}}|[{'typed_record_field',{'record_field',134,{'atom',134,'period'}},{'type',134,'union',[{'type',134,'pos_integer',[]}|[{'atom',134,'undefined'}]]}}|[{'record_field',135,{'atom',135,'restarts'},{'nil',135}}|[{'typed_record_field',{'record_field',136,{'atom',136,'dynamic_restarts'},{'integer',136,0}},{'type',136,'non_neg_integer',[]}}|[{'record_field',137,{'atom',137,'module'}}|[{'record_field',138,{'atom',138,'args'}}]]]]]]]]]]}],
		%% Line 139
		'type' =
		    %% Line 139
		    [{'state',{'type',139,'record',[{'atom',139,'state'}]},[]}],
		%% Line 146
		'callback' =
		    %% Line 146
		    [{{'init',1},[{'type',146,'fun',[{'type',146,'product',[{'ann_type',146,[{'var',146,'Args'}|[{'type',146,'term',[]}]]}]}|[{'type',147,'union',[{'type',147,'tuple',[{'atom',147,'ok'}|[{'type',147,'tuple',[{'ann_type',147,[{'var',147,'SupFlags'}|[{'user_type',147,'sup_flags',[]}]]}|[{'type',147,'list',[{'ann_type',147,[{'var',147,'ChildSpec'}|[{'user_type',147,'child_spec',[]}]]}]}]]}]]}|[{'atom',148,'ignore'}]]}]]}]}],
		%% Line 158
		'type' =
		    %% Line 158
		    [{'startlink_err',{'type',158,'union',[{'type',158,'tuple',[{'atom',158,'already_started'}|[{'type',158,'pid',[]}]]}|[{'type',159,'tuple',[{'atom',159,'shutdown'}|[{'type',159,'term',[]}]]}|[{'type',160,'term',[]}]]]},[]}],
		%% Line 161
		'type' =
		    %% Line 161
		    [{'startlink_ret',{'type',161,'union',[{'type',161,'tuple',[{'atom',161,'ok'}|[{'type',161,'pid',[]}]]}|[{'atom',161,'ignore'}|[{'type',161,'tuple',[{'atom',161,'error'}|[{'user_type',161,'startlink_err',[]}]]}]]]},[]}],
		%% Line 163
		'spec' =
		    %% Line 163
		    [{{'start_link',2},[{'type',163,'bounded_fun',[{'type',163,'fun',[{'type',163,'product',[{'var',163,'Module'}|[{'var',163,'Args'}]]}|[{'user_type',163,'startlink_ret',[]}]]}|[[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'Module'}|[{'type',164,'module',[]}]]]]}|[{'type',165,'constraint',[{'atom',165,'is_subtype'}|[[{'var',165,'Args'}|[{'type',165,'term',[]}]]]]}]]]]}]}],
		%% Line 169
		'spec' =
		    %% Line 169
		    [{{'start_link',3},[{'type',169,'bounded_fun',[{'type',169,'fun',[{'type',169,'product',[{'var',169,'SupName'}|[{'var',169,'Module'}|[{'var',169,'Args'}]]]}|[{'user_type',169,'startlink_ret',[]}]]}|[[{'type',170,'constraint',[{'atom',170,'is_subtype'}|[[{'var',170,'SupName'}|[{'user_type',170,'sup_name',[]}]]]]}|[{'type',171,'constraint',[{'atom',171,'is_subtype'}|[[{'var',171,'Module'}|[{'type',171,'module',[]}]]]]}|[{'type',172,'constraint',[{'atom',172,'is_subtype'}|[[{'var',172,'Args'}|[{'type',172,'term',[]}]]]]}]]]]]}]}],
		%% Line 180
		'type' =
		    %% Line 180
		    [{'startchild_err',{'type',180,'union',[{'atom',180,'already_present'}|[{'type',181,'tuple',[{'atom',181,'already_started'}|[{'ann_type',181,[{'var',181,'Child'}|[{'user_type',181,'child',[]}]]}]]}|[{'type',181,'term',[]}]]]},[]}],
		%% Line 182
		'type' =
		    %% Line 182
		    [{'startchild_ret',{'type',182,'union',[{'type',182,'tuple',[{'atom',182,'ok'}|[{'ann_type',182,[{'var',182,'Child'}|[{'user_type',182,'child',[]}]]}]]}|[{'type',183,'tuple',[{'atom',183,'ok'}|[{'ann_type',183,[{'var',183,'Child'}|[{'user_type',183,'child',[]}]]}|[{'ann_type',183,[{'var',183,'Info'}|[{'type',183,'term',[]}]]}]]]}|[{'type',184,'tuple',[{'atom',184,'error'}|[{'user_type',184,'startchild_err',[]}]]}]]]},[]}],
		%% Line 186
		'spec' =
		    %% Line 186
		    [{{'start_child',2},[{'type',186,'bounded_fun',[{'type',186,'fun',[{'type',186,'product',[{'var',186,'SupRef'}|[{'var',186,'ChildSpec'}]]}|[{'user_type',186,'startchild_ret',[]}]]}|[[{'type',187,'constraint',[{'atom',187,'is_subtype'}|[[{'var',187,'SupRef'}|[{'user_type',187,'sup_ref',[]}]]]]}|[{'type',188,'constraint',[{'atom',188,'is_subtype'}|[[{'var',188,'ChildSpec'}|[{'type',188,'union',[{'user_type',188,'child_spec',[]}|[{'ann_type',188,[{'var',188,'List'}|[{'type',188,'list',[{'type',188,'term',[]}]}]]}]]}]]]]}]]]]}]}],
		%% Line 192
		'spec' =
		    %% Line 192
		    [{{'restart_child',2},[{'type',192,'bounded_fun',[{'type',192,'fun',[{'type',192,'product',[{'var',192,'SupRef'}|[{'var',192,'Id'}]]}|[{'var',192,'Result'}]]}|[[{'type',193,'constraint',[{'atom',193,'is_subtype'}|[[{'var',193,'SupRef'}|[{'user_type',193,'sup_ref',[]}]]]]}|[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'Id'}|[{'user_type',194,'child_id',[]}]]]]}|[{'type',195,'constraint',[{'atom',195,'is_subtype'}|[[{'var',195,'Result'}|[{'type',195,'union',[{'type',195,'tuple',[{'atom',195,'ok'}|[{'ann_type',195,[{'var',195,'Child'}|[{'user_type',195,'child',[]}]]}]]}|[{'type',196,'tuple',[{'atom',196,'ok'}|[{'ann_type',196,[{'var',196,'Child'}|[{'user_type',196,'child',[]}]]}|[{'ann_type',196,[{'var',196,'Info'}|[{'type',196,'term',[]}]]}]]]}|[{'type',197,'tuple',[{'atom',197,'error'}|[{'var',197,'Error'}]]}]]]}]]]]}|[{'type',198,'constraint',[{'atom',198,'is_subtype'}|[[{'var',198,'Error'}|[{'type',198,'union',[{'atom',198,'running'}|[{'atom',198,'restarting'}|[{'atom',198,'not_found'}|[{'atom',198,'simple_one_for_one'}|[{'type',199,'term',[]}]]]]]}]]]]}]]]]]]}]}],
		%% Line 203
		'spec' =
		    %% Line 203
		    [{{'delete_child',2},[{'type',203,'bounded_fun',[{'type',203,'fun',[{'type',203,'product',[{'var',203,'SupRef'}|[{'var',203,'Id'}]]}|[{'var',203,'Result'}]]}|[[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'SupRef'}|[{'user_type',204,'sup_ref',[]}]]]]}|[{'type',205,'constraint',[{'atom',205,'is_subtype'}|[[{'var',205,'Id'}|[{'user_type',205,'child_id',[]}]]]]}|[{'type',206,'constraint',[{'atom',206,'is_subtype'}|[[{'var',206,'Result'}|[{'type',206,'union',[{'atom',206,'ok'}|[{'type',206,'tuple',[{'atom',206,'error'}|[{'var',206,'Error'}]]}]]}]]]]}|[{'type',207,'constraint',[{'atom',207,'is_subtype'}|[[{'var',207,'Error'}|[{'type',207,'union',[{'atom',207,'running'}|[{'atom',207,'restarting'}|[{'atom',207,'not_found'}|[{'atom',207,'simple_one_for_one'}]]]]}]]]]}]]]]]]}]}],
		%% Line 218
		'spec' =
		    %% Line 218
		    [{{'terminate_child',2},[{'type',218,'bounded_fun',[{'type',218,'fun',[{'type',218,'product',[{'var',218,'SupRef'}|[{'var',218,'Id'}]]}|[{'var',218,'Result'}]]}|[[{'type',219,'constraint',[{'atom',219,'is_subtype'}|[[{'var',219,'SupRef'}|[{'user_type',219,'sup_ref',[]}]]]]}|[{'type',220,'constraint',[{'atom',220,'is_subtype'}|[[{'var',220,'Id'}|[{'type',220,'union',[{'type',220,'pid',[]}|[{'user_type',220,'child_id',[]}]]}]]]]}|[{'type',221,'constraint',[{'atom',221,'is_subtype'}|[[{'var',221,'Result'}|[{'type',221,'union',[{'atom',221,'ok'}|[{'type',221,'tuple',[{'atom',221,'error'}|[{'var',221,'Error'}]]}]]}]]]]}|[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'Error'}|[{'type',222,'union',[{'atom',222,'not_found'}|[{'atom',222,'simple_one_for_one'}]]}]]]]}]]]]]]}]}],
		%% Line 226
		'spec' =
		    %% Line 226
		    [{{'get_childspec',2},[{'type',226,'bounded_fun',[{'type',226,'fun',[{'type',226,'product',[{'var',226,'SupRef'}|[{'var',226,'Id'}]]}|[{'var',226,'Result'}]]}|[[{'type',227,'constraint',[{'atom',227,'is_subtype'}|[[{'var',227,'SupRef'}|[{'user_type',227,'sup_ref',[]}]]]]}|[{'type',228,'constraint',[{'atom',228,'is_subtype'}|[[{'var',228,'Id'}|[{'type',228,'union',[{'type',228,'pid',[]}|[{'user_type',228,'child_id',[]}]]}]]]]}|[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'Result'}|[{'type',229,'union',[{'type',229,'tuple',[{'atom',229,'ok'}|[{'user_type',229,'child_spec',[]}]]}|[{'type',229,'tuple',[{'atom',229,'error'}|[{'var',229,'Error'}]]}]]}]]]]}|[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'Error'}|[{'atom',230,'not_found'}]]]]}]]]]]]}]}],
		%% Line 234
		'spec' =
		    %% Line 234
		    [{{'which_children',1},[{'type',234,'bounded_fun',[{'type',234,'fun',[{'type',234,'product',[{'var',234,'SupRef'}]}|[{'type',234,'list',[{'type',234,'tuple',[{'var',234,'Id'}|[{'var',234,'Child'}|[{'var',234,'Type'}|[{'var',234,'Modules'}]]]]}]}]]}|[[{'type',235,'constraint',[{'atom',235,'is_subtype'}|[[{'var',235,'SupRef'}|[{'user_type',235,'sup_ref',[]}]]]]}|[{'type',236,'constraint',[{'atom',236,'is_subtype'}|[[{'var',236,'Id'}|[{'type',236,'union',[{'user_type',236,'child_id',[]}|[{'atom',236,'undefined'}]]}]]]]}|[{'type',237,'constraint',[{'atom',237,'is_subtype'}|[[{'var',237,'Child'}|[{'type',237,'union',[{'user_type',237,'child',[]}|[{'atom',237,'restarting'}]]}]]]]}|[{'type',238,'constraint',[{'atom',238,'is_subtype'}|[[{'var',238,'Type'}|[{'user_type',238,'worker',[]}]]]]}|[{'type',239,'constraint',[{'atom',239,'is_subtype'}|[[{'var',239,'Modules'}|[{'user_type',239,'modules',[]}]]]]}]]]]]]]}]}],
		%% Line 243
		'spec' =
		    %% Line 243
		    [{{'count_children',1},[{'type',243,'bounded_fun',[{'type',243,'fun',[{'type',243,'product',[{'var',243,'SupRef'}]}|[{'var',243,'PropListOfCounts'}]]}|[[{'type',244,'constraint',[{'atom',244,'is_subtype'}|[[{'var',244,'SupRef'}|[{'user_type',244,'sup_ref',[]}]]]]}|[{'type',245,'constraint',[{'atom',245,'is_subtype'}|[[{'var',245,'PropListOfCounts'}|[{'type',245,'list',[{'var',245,'Count'}]}]]]]}|[{'type',246,'constraint',[{'atom',246,'is_subtype'}|[[{'var',246,'Count'}|[{'type',246,'union',[{'type',246,'tuple',[{'atom',246,'specs'}|[{'ann_type',246,[{'var',246,'ChildSpecCount'}|[{'type',246,'non_neg_integer',[]}]]}]]}|[{'type',247,'tuple',[{'atom',247,'active'}|[{'ann_type',247,[{'var',247,'ActiveProcessCount'}|[{'type',247,'non_neg_integer',[]}]]}]]}|[{'type',248,'tuple',[{'atom',248,'supervisors'}|[{'ann_type',248,[{'var',248,'ChildSupervisorCount'}|[{'type',248,'non_neg_integer',[]}]]}]]}|[{'type',249,'tuple',[{'atom',249,'workers'}|[{'ann_type',249,[{'var',249,'ChildWorkerCount'}|[{'type',249,'non_neg_integer',[]}]]}]]}]]]]}]]]]}]]]]]}]}],
		%% Line 256
		'spec' =
		    %% Line 256
		    [{{'check_childspecs',1},[{'type',256,'bounded_fun',[{'type',256,'fun',[{'type',256,'product',[{'var',256,'ChildSpecs'}]}|[{'var',256,'Result'}]]}|[[{'type',257,'constraint',[{'atom',257,'is_subtype'}|[[{'var',257,'ChildSpecs'}|[{'type',257,'list',[{'user_type',257,'child_spec',[]}]}]]]]}|[{'type',258,'constraint',[{'atom',258,'is_subtype'}|[[{'var',258,'Result'}|[{'type',258,'union',[{'atom',258,'ok'}|[{'type',258,'tuple',[{'atom',258,'error'}|[{'ann_type',258,[{'var',258,'Error'}|[{'type',258,'term',[]}]]}]]}]]}]]]]}]]]]}]}],
		%% Line 268
		'spec' =
		    %% Line 268
		    [{{'get_callback_module',1},[{'type',268,'bounded_fun',[{'type',268,'fun',[{'type',268,'product',[{'var',268,'Pid'}]}|[{'var',268,'Module'}]]}|[[{'type',269,'constraint',[{'atom',269,'is_subtype'}|[[{'var',269,'Pid'}|[{'type',269,'pid',[]}]]]]}|[{'type',270,'constraint',[{'atom',270,'is_subtype'}|[[{'var',270,'Module'}|[{'type',270,'atom',[]}]]]]}]]]]}]}],
		%% Line 288
		'type' =
		    %% Line 288
		    [{'init_sup_name',{'type',288,'union',[{'user_type',288,'sup_name',[]}|[{'atom',288,'self'}]]},[]}],
		%% Line 290
		'type' =
		    %% Line 290
		    [{'stop_rsn',{'type',290,'union',[{'type',290,'tuple',[{'atom',290,'shutdown'}|[{'type',290,'term',[]}]]}|[{'type',291,'tuple',[{'atom',291,'bad_return'}|[{'type',291,'tuple',[{'type',291,'module',[]}|[{'atom',291,'init'}|[{'type',291,'term',[]}]]]}]]}|[{'type',292,'tuple',[{'atom',292,'bad_start_spec'}|[{'type',292,'term',[]}]]}|[{'type',293,'tuple',[{'atom',293,'start_spec'}|[{'type',293,'term',[]}]]}|[{'type',294,'tuple',[{'atom',294,'supervisor_data'}|[{'type',294,'term',[]}]]}]]]]]},[]}],
		%% Line 296
		'spec' =
		    %% Line 296
		    [{{'init',1},[{'type',296,'fun',[{'type',296,'product',[{'type',296,'tuple',[{'user_type',296,'init_sup_name',[]}|[{'type',296,'module',[]}|[{'type',296,'list',[{'type',296,'term',[]}]}]]]}]}|[{'type',297,'union',[{'type',297,'tuple',[{'atom',297,'ok'}|[{'user_type',297,'state',[]}]]}|[{'atom',297,'ignore'}|[{'type',297,'tuple',[{'atom',297,'stop'}|[{'user_type',297,'stop_rsn',[]}]]}]]]}]]}]}],
		%% Line 403
		'type' =
		    %% Line 403
		    [{'call',{'type',403,'union',[{'atom',403,'which_children'}|[{'atom',403,'count_children'}|[{'type',403,'tuple',[{'var',403,'_'}|[{'var',403,'_'}]]}]]]},[]}],
		%% Line 404
		'spec' =
		    %% Line 404
		    [{{'handle_call',3},[{'type',404,'fun',[{'type',404,'product',[{'user_type',404,'call',[]}|[{'type',404,'term',[]}|[{'user_type',404,'state',[]}]]]}|[{'type',404,'tuple',[{'atom',404,'reply'}|[{'type',404,'term',[]}|[{'user_type',404,'state',[]}]]]}]]}]}],
		%% Line 557
		'spec' =
		    %% Line 557
		    [{{'handle_cast',2},[{'type',557,'fun',[{'type',557,'product',[{'type',557,'tuple',[{'atom',557,'try_again_restart'}|[{'type',557,'union',[{'user_type',557,'child_id',[]}|[{'type',557,'tuple',[{'atom',557,'restarting'}|[{'type',557,'pid',[]}]]}]]}]]}|[{'user_type',557,'state',[]}]]}|[{'type',558,'union',[{'type',558,'tuple',[{'atom',558,'noreply'}|[{'user_type',558,'state',[]}]]}|[{'type',558,'tuple',[{'atom',558,'stop'}|[{'atom',558,'shutdown'}|[{'user_type',558,'state',[]}]]]}]]}]]}]}],
		%% Line 576
		'spec' =
		    %% Line 576
		    [{{'handle_info',2},[{'type',576,'fun',[{'type',576,'product',[{'type',576,'term',[]}|[{'user_type',576,'state',[]}]]}|[{'type',577,'union',[{'type',577,'tuple',[{'atom',577,'noreply'}|[{'user_type',577,'state',[]}]]}|[{'type',577,'tuple',[{'atom',577,'stop'}|[{'atom',577,'shutdown'}|[{'user_type',577,'state',[]}]]]}]]}]]}]}],
		%% Line 596
		'spec' =
		    %% Line 596
		    [{{'terminate',2},[{'type',596,'fun',[{'type',596,'product',[{'type',596,'term',[]}|[{'user_type',596,'state',[]}]]}|[{'atom',596,'ok'}]]}]}],
		%% Line 612
		'spec' =
		    %% Line 612
		    [{{'code_change',3},[{'type',612,'fun',[{'type',612,'product',[{'type',612,'term',[]}|[{'user_type',612,'state',[]}|[{'type',612,'term',[]}]]]}|[{'type',613,'union',[{'type',613,'tuple',[{'atom',613,'ok'}|[{'user_type',613,'state',[]}]]}|[{'type',613,'tuple',[{'atom',613,'error'}|[{'type',613,'term',[]}]]}]]}]]}]}],
		%% Line 812
		'spec' =
		    %% Line 812
		    [{{'try_again_restart',1},[{'type',812,'fun',[{'type',812,'product',[{'type',812,'union',[{'user_type',812,'child_id',[]}|[{'type',812,'tuple',[{'atom',812,'restarting'}|[{'type',812,'pid',[]}]]}]]}]}|[{'atom',812,'ok'}]]}]}],
		%% Line 1029
		'spec' =
		    %% Line 1029
		    [{{'save_child',2},[{'type',1029,'fun',[{'type',1029,'product',[{'user_type',1029,'child_rec',[]}|[{'user_type',1029,'state',[]}]]}|[{'user_type',1029,'state',[]}]]}]}],
		%% Line 1035
		'spec' =
		    %% Line 1035
		    [{{'do_save_child',2},[{'type',1035,'fun',[{'type',1035,'product',[{'user_type',1035,'child_rec',[]}|[{'user_type',1035,'state',[]}]]}|[{'user_type',1035,'state',[]}]]}]}],
		%% Line 1039
		'spec' =
		    %% Line 1039
		    [{{'del_child',2},[{'type',1039,'fun',[{'type',1039,'product',[{'user_type',1039,'child_rec',[]}|[{'user_type',1039,'state',[]}]]}|[{'user_type',1039,'state',[]}]]}|[{'type',1040,'fun',[{'type',1040,'product',[{'user_type',1040,'child_id',[]}|[{'user_type',1040,'children',[]}]]}|[{'user_type',1040,'children',[]}]]}]]}],
		%% Line 1057
		'spec' =
		    %% Line 1057
		    [{{'split_child',2},[{'type',1057,'fun',[{'type',1057,'product',[{'user_type',1057,'child_id',[]}|[{'user_type',1057,'children',[]}]]}|[{'type',1057,'tuple',[{'user_type',1057,'children',[]}|[{'user_type',1057,'children',[]}]]}]]}]}],
		%% Line 1071
		'spec' =
		    %% Line 1071
		    [{{'find_child',2},[{'type',1071,'fun',[{'type',1071,'product',[{'type',1071,'union',[{'type',1071,'pid',[]}|[{'user_type',1071,'child_id',[]}]]}|[{'user_type',1071,'state',[]}]]}|[{'type',1071,'union',[{'type',1071,'tuple',[{'atom',1071,'ok'}|[{'user_type',1071,'child_rec',[]}]]}|[{'atom',1071,'error'}]]}]]}]}],
		%% Line 1093
		'spec' =
		    %% Line 1093
		    [{{'find_child_and_args',2},[{'type',1093,'bounded_fun',[{'type',1093,'fun',[{'type',1093,'product',[{'var',1093,'IdOrPid'}|[{'user_type',1093,'state',[]}]]}|[{'type',1093,'union',[{'type',1093,'tuple',[{'atom',1093,'ok'}|[{'user_type',1093,'child_rec',[]}]]}|[{'atom',1093,'error'}]]}]]}|[[{'type',1094,'constraint',[{'atom',1094,'is_subtype'}|[[{'var',1094,'IdOrPid'}|[{'type',1094,'union',[{'type',1094,'pid',[]}|[{'type',1094,'tuple',[{'atom',1094,'restarting'}|[{'type',1094,'pid',[]}]]}|[{'user_type',1094,'child_id',[]}]]]}]]]]}]]]}]}],
		%% Line 1110
		'spec' =
		    %% Line 1110
		    [{{'find_dynamic_child',2},[{'type',1110,'bounded_fun',[{'type',1110,'fun',[{'type',1110,'product',[{'var',1110,'IdOrPid'}|[{'user_type',1110,'state',[]}]]}|[{'type',1110,'union',[{'type',1110,'tuple',[{'atom',1110,'ok'}|[{'user_type',1110,'child_rec',[]}]]}|[{'atom',1110,'error'}]]}]]}|[[{'type',1111,'constraint',[{'atom',1111,'is_subtype'}|[[{'var',1111,'IdOrPid'}|[{'type',1111,'union',[{'type',1111,'pid',[]}|[{'type',1111,'tuple',[{'atom',1111,'restarting'}|[{'type',1111,'pid',[]}]]}|[{'user_type',1111,'child_id',[]}]]]}]]]]}]]]}]}],
		%% Line 1122
		'spec' =
		    %% Line 1122
		    [{{'find_child_by_pid',2},[{'type',1122,'bounded_fun',[{'type',1122,'fun',[{'type',1122,'product',[{'var',1122,'IdOrPid'}|[{'user_type',1122,'state',[]}]]}|[{'type',1122,'union',[{'type',1122,'tuple',[{'atom',1122,'ok'}|[{'user_type',1122,'child_rec',[]}]]}|[{'atom',1122,'error'}]]}]]}|[[{'type',1123,'constraint',[{'atom',1123,'is_subtype'}|[[{'var',1123,'IdOrPid'}|[{'type',1123,'union',[{'type',1123,'pid',[]}|[{'type',1123,'tuple',[{'atom',1123,'restarting'}|[{'type',1123,'pid',[]}]]}]]}]]]]}]]]}]}],
		%% Line 1136
		'spec' =
		    %% Line 1136
		    [{{'get_dynamic_child',1},[{'type',1136,'fun',[{'type',1136,'product',[{'user_type',1136,'state',[]}]}|[{'user_type',1136,'child_rec',[]}]]}]}],
		%% Line 1142
		'spec' =
		    %% Line 1142
		    [{{'set_pid',3},[{'type',1142,'fun',[{'type',1142,'product',[{'type',1142,'term',[]}|[{'user_type',1142,'child_id',[]}|[{'user_type',1142,'state',[]}]]]}|[{'user_type',1142,'state',[]}]]}|[{'type',1143,'fun',[{'type',1143,'product',[{'type',1143,'term',[]}|[{'user_type',1143,'child_id',[]}|[{'user_type',1143,'children',[]}]]]}|[{'user_type',1143,'children',[]}]]}]]}],
		%% Line 1151
		'spec' =
		    %% Line 1151
		    [{{'remove_child',2},[{'type',1151,'fun',[{'type',1151,'product',[{'user_type',1151,'child_id',[]}|[{'user_type',1151,'state',[]}]]}|[{'user_type',1151,'state',[]}]]}]}],
		%% Line 1161
		'spec' =
		    %% Line 1161
		    [{{'children_map',2},[{'type',1161,'bounded_fun',[{'type',1161,'fun',[{'type',1161,'product',[{'var',1161,'Fun'}|[{'user_type',1161,'children',[]}]]}|[{'type',1161,'union',[{'type',1161,'tuple',[{'atom',1161,'ok'}|[{'user_type',1161,'children',[]}]]}|[{'type',1162,'tuple',[{'atom',1162,'error'}|[{'user_type',1162,'children',[]}|[{'var',1162,'Reason'}]]]}]]}]]}|[[{'type',1163,'constraint',[{'atom',1163,'is_subtype'}|[[{'var',1163,'Fun'}|[{'type',1163,'fun',[{'type',1163,'product',[{'user_type',1163,'child_id',[]}|[{'user_type',1163,'child_rec',[]}]]}|[{'type',1163,'union',[{'type',1163,'tuple',[{'atom',1163,'update'}|[{'user_type',1163,'child_rec',[]}]]}|[{'atom',1164,'remove'}|[{'type',1165,'tuple',[{'atom',1165,'abort'}|[{'var',1165,'Reason'}]]}]]]}]]}]]]]}|[{'type',1166,'constraint',[{'atom',1166,'is_subtype'}|[[{'var',1166,'Reason'}|[{'type',1166,'term',[]}]]]]}]]]]}]}],
		%% Line 1183
		'spec' =
		    %% Line 1183
		    [{{'children_to_list',2},[{'type',1183,'bounded_fun',[{'type',1183,'fun',[{'type',1183,'product',[{'var',1183,'Fun'}|[{'user_type',1183,'children',[]}]]}|[{'var',1183,'List'}]]}|[[{'type',1184,'constraint',[{'atom',1184,'is_subtype'}|[[{'var',1184,'Fun'}|[{'type',1184,'fun',[{'type',1184,'product',[{'user_type',1184,'child_id',[]}|[{'user_type',1184,'child_rec',[]}]]}|[{'var',1184,'Elem'}]]}]]]]}|[{'type',1185,'constraint',[{'atom',1185,'is_subtype'}|[[{'var',1185,'List'}|[{'type',1185,'list',[{'var',1185,'Elem'}]}]]]]}|[{'type',1186,'constraint',[{'atom',1186,'is_subtype'}|[[{'var',1186,'Elem'}|[{'type',1186,'term',[]}]]]]}]]]]]}]}],
		%% Line 1195
		'spec' =
		    %% Line 1195
		    [{{'children_fold',3},[{'type',1195,'bounded_fun',[{'type',1195,'fun',[{'type',1195,'product',[{'var',1195,'Fun'}|[{'var',1195,'Acc0'}|[{'user_type',1195,'children',[]}]]]}|[{'var',1195,'Acc1'}]]}|[[{'type',1196,'constraint',[{'atom',1196,'is_subtype'}|[[{'var',1196,'Fun'}|[{'type',1196,'fun',[{'type',1196,'product',[{'user_type',1196,'child_id',[]}|[{'user_type',1196,'child_rec',[]}|[{'var',1196,'AccIn'}]]]}|[{'var',1196,'AccOut'}]]}]]]]}|[{'type',1197,'constraint',[{'atom',1197,'is_subtype'}|[[{'var',1197,'Acc0'}|[{'type',1197,'term',[]}]]]]}|[{'type',1198,'constraint',[{'atom',1198,'is_subtype'}|[[{'var',1198,'Acc1'}|[{'type',1198,'term',[]}]]]]}|[{'type',1199,'constraint',[{'atom',1199,'is_subtype'}|[[{'var',1199,'AccIn'}|[{'type',1199,'term',[]}]]]]}|[{'type',1200,'constraint',[{'atom',1200,'is_subtype'}|[[{'var',1200,'AccOut'}|[{'type',1200,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 1204
		'spec' =
		    %% Line 1204
		    [{{'append',2},[{'type',1204,'fun',[{'type',1204,'product',[{'user_type',1204,'children',[]}|[{'user_type',1204,'children',[]}]]}|[{'user_type',1204,'children',[]}]]}]}]]
'start_link'/2 =
    %% Line 166
    fun (_0,_1) ->
	%% Line 167
	call 'gen_server':'start_link'
	    ('supervisor', {'self',_0,_1}, [])
'start_link'/3 =
    %% Line 173
    fun (_0,_1,_2) ->
	%% Line 174
	call 'gen_server':'start_link'
	    (_0, 'supervisor', {_0,_1,_2}, [])
'start_child'/2 =
    %% Line 189
    fun (_0,_1) ->
	%% Line 190
	apply 'call'/2
	    (_0, {'start_child',_1})
'restart_child'/2 =
    %% Line 200
    fun (_0,_1) ->
	%% Line 201
	apply 'call'/2
	    (_0, {'restart_child',_1})
'delete_child'/2 =
    %% Line 208
    fun (_0,_1) ->
	%% Line 209
	apply 'call'/2
	    (_0, {'delete_child',_1})
'terminate_child'/2 =
    %% Line 223
    fun (_0,_1) ->
	%% Line 224
	apply 'call'/2
	    (_0, {'terminate_child',_1})
'get_childspec'/2 =
    %% Line 231
    fun (_0,_1) ->
	%% Line 232
	apply 'call'/2
	    (_0, {'get_childspec',_1})
'which_children'/1 =
    %% Line 240
    fun (_0) ->
	%% Line 241
	apply 'call'/2
	    (_0, 'which_children')
'count_children'/1 =
    %% Line 250
    fun (_0) ->
	%% Line 251
	apply 'call'/2
	    (_0, 'count_children')
'call'/2 =
    %% Line 253
    fun (_0,_1) ->
	%% Line 254
	call 'gen_server':'call'
	    (_0, _1, 'infinity')
'check_childspecs'/1 =
    %% Line 259
    fun (_0) ->
	case _0 of
	  <ChildSpecs>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 260
	      case apply 'check_startspec'/1
		       (ChildSpecs) of
		%% Line 261
		<{'ok',_3}> when 'true' ->
		    'ok'
		%% Line 262
		<Error> when 'true' ->
		    {'error',Error}
	      end
	  %% Line 264
	  <X> when 'true' ->
	      {'error',{'badarg',X}}
	end
'get_callback_module'/1 =
    %% Line 271
    fun (_0) ->
	%% Line 273
	case call 'sys':'get_status'
		 (_0) of
	  <{'status',_X_Pid,{'module',_X_Mod},[_X_PDict|[_X_SysState|[_X_Parent|[_X_Dbg|[Misc|[]]]]]]}> when 'true' ->
	      %% Line 274
	      case call 'lists':'keyfind'
		       ('supervisor', 1, Misc) of
		%% Line 275
		<{'supervisor',[{[67|[97|[108|[108|[98|[97|[99|[107]]]]]]]],Mod}|[]]}> when 'true' ->
		    %% Line 276
		    Mod
		%% Line 277
		<_6> when 'true' ->
		    %% Line 278
		    case Misc of
		      <[_X_Header|[_X_Data|[{'data',[{[83|[116|[97|[116|[101]]]]],State}|[]]}|_7]]]> when 'true' ->
			  %% Line 279
			  ( case State of
			      ( <( {'state',_8,_9,_10,_11,_12,_13,_14,_15,_rec0,_16}
				   -| ['compiler_generated'] )> when 'true' ->
				    _rec0
				-| ['compiler_generated'] )
			      ( <_17> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','state'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      ( <_2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_2})
			-| ['compiler_generated'] )
		    end
	      end
	  ( <_1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_1})
	    -| ['compiler_generated'] )
	end
'init'/1 =
    %% Line 299
    fun (_0) ->
	case _0 of
	  <{SupName,Mod,Args}> when 'true' ->
	      do  %% Line 300
		  call 'erlang':'process_flag'
		      ('trap_exit', 'true')
		  %% Line 301
		  case call Mod:'init'
			   (Args) of
		    %% Line 302
		    <{'ok',{SupFlags,StartSpec}}> when 'true' ->
			%% Line 303
			case apply 'init_state'/4
				 (SupName, SupFlags, Mod, Args) of
			  %% Line 304
			  <{'ok',State = {'state',_10,_11,_12,_13,_14,_15,_16,_17,_18,_19}}>
			      when ( try
				      let <_5> =
					  call 'erlang':'element'
					      (3, State)
				      in  call 'erlang':'=:='
					      (_5, 'simple_one_for_one')
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
				  -| ['compiler_generated'] ) ->
			      %% Line 305
			      apply 'init_dynamic'/2
				  (State, StartSpec)
			  %% Line 306
			  <{'ok',State}> when 'true' ->
			      %% Line 307
			      apply 'init_children'/2
				  (State, StartSpec)
			  %% Line 308
			  <Error> when 'true' ->
			      %% Line 309
			      {'stop',{'supervisor_data',Error}}
			end
		    %% Line 311
		    <'ignore'> when 'true' ->
			%% Line 312
			'ignore'
		    %% Line 313
		    <Error> when 'true' ->
			%% Line 314
			{'stop',{'bad_return',{Mod,'init',Error}}}
		  end
	  ( <_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'init_children'/2 =
    %% Line 317
    fun (_0,_1) ->
	%% Line 318
	( case _0 of
	    ( <( {'state',_rec1,_13,_14,_15,_16,_17,_18,_19,_20,_21}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 319
		  case apply 'check_startspec'/1
			   (_1) of
		    %% Line 320
		    <{'ok',Children}> when 'true' ->
			%% Line 321
			case apply 'start_children'/2
				 (Children, _rec1) of
			  %% Line 322
			  <{'ok',NChildren}> when 'true' ->
			      %% Line 323
			      case _0 of
				<{'state',_23,_24,_25,_26,_27,_28,_29,_30,_31,_32}> when 'true' ->
				    let <_7> =
					call 'erlang':'setelement'
					    (4, _0, NChildren)
				    in  {'ok',_7}
				( <_33> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','state'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  %% Line 324
			  <{'error',NChildren,Reason}> when 'true' ->
			      do  %% Line 325
				  apply 'terminate_children'/2
				      (NChildren, _rec1)
				  %% Line 326
				  {'stop',{'shutdown',Reason}}
			  ( <_9> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_9})
			    -| ['compiler_generated'] )
			end
		    %% Line 328
		    <Error> when 'true' ->
			%% Line 329
			{'stop',{'start_spec',Error}}
		  end
	      -| ['compiler_generated'] )
	    ( <_22> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'init_dynamic'/2 =
    %% Line 332
    fun (_0,_1) ->
	case <_0,_1> of
	  <State,_@r0 = [StartSpec|[]]> when 'true' ->
	      %% Line 333
	      case apply 'check_startspec'/1
		       (_@r0) of
		%% Line 334
		<{'ok',Children}> when 'true' ->
		    %% Line 335
		    case State of
		      <{'state',_9,_10,_11,_12,_13,_14,_15,_16,_17,_18}> when 'true' ->
			  let <_4> =
			      call 'erlang':'setelement'
				  (4, State, Children)
			  in  let <_5> =
				  apply 'dyn_init'/1
				      (_4)
			      in  {'ok',_5}
		      ( <_19> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 336
		<Error> when 'true' ->
		    %% Line 337
		    {'stop',{'start_spec',Error}}
	      end
	  %% Line 339
	  <_X_State,StartSpec> when 'true' ->
	      %% Line 340
	      {'stop',{'bad_start_spec',StartSpec}}
	end
'start_children'/2 =
    %% Line 352
    fun (_0,_1) ->
	let <Start> =
	    fun (_23,_22) ->
		%% Line 355
		case apply 'do_start_child'/2
			 (_1, _22) of
		  %% Line 356
		  <{'ok','undefined'}>
		      when ( try
			      ( let <_4> =
				    case ( call ( 'erlang'
						  -| ['compiler_generated'] ):( 'is_record'
										-| ['compiler_generated'] )
					       (_22, ( 'child'
						       -| ['compiler_generated'] ), ( 8
										      -| ['compiler_generated'] ))
					   -| ['compiler_generated'] ) of
				      ( <( 'true'
					   -| ['compiler_generated'] )> when 'true' ->
					    ( 'true'
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <( 'false'
					   -| ['compiler_generated'] )> when 'true' ->
					    ( 'fail'
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <( _2
					   -| ['compiler_generated'] )> when 'true' ->
					    ( _2
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				in  let <_5> =
					call 'erlang':'=:='
					    (( _4
					       -| ['compiler_generated'] ), 'true')
				    in  let <_6> =
					    call 'erlang':'element'
						(5, _22)
					in  let <_7> =
						call 'erlang':'=:='
						    (_6, 'temporary')
					    in  ( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'and'
										       -| ['compiler_generated'] )
						      (_5, _7)
						  -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false'
			  -| ['compiler_generated'] ) ->
		      %% Line 357
		      'remove'
		  %% Line 358
		  <{'ok',Pid}> when 'true' ->
		      %% Line 359
		      case _22 of
			<{'child',_29,_30,_31,_32,_33,_34,_35}> when 'true' ->
			    let <_10> =
				call 'erlang':'setelement'
				    (2, _22, Pid)
			    in  {'update',_10}
			( <_36> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','child'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		  %% Line 360
		  <{'ok',Pid,_X_Extra}> when 'true' ->
		      %% Line 361
		      case _22 of
			<{'child',_37,_38,_39,_40,_41,_42,_43}> when 'true' ->
			    let <_13> =
				call 'erlang':'setelement'
				    (2, _22, Pid)
			    in  {'update',_13}
			( <_44> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','child'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		  %% Line 362
		  <{'error',Reason}> when 'true' ->
		      do  %% Line 363
			  case call 'logger':'allow'
				   ('error', 'supervisor') of
			    <'true'> when 'true' ->
				let <_14> =
				    apply 'extract_child'/1
					(_22)
				in  let <_15> =
					~{'report'=>[{'supervisor',_1}|[{'errorContext','start_error'}|[{'reason',Reason}|[{'offender',_14}|[]]]]]|~{'label'=>{'supervisor','start_error'}}~}~
				    in  call 'logger':'macro_log'
					    (~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],'line'=>363,'mfa'=>{'supervisor','start_children',2}}~, 'error', _15, ~{'domain'=>['otp'|['sasl']],'error_logger'=>~{'report_cb'=>fun 'supervisor':'format_log'/1,'tag'=>'error_report','type'=>'supervisor_report'}~,'logger_formatter'=>~{'title'=>[83|[85|[80|[69|[82|[86|[73|[83|[79|[82|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]]]]]}~,'report_cb'=>fun 'supervisor':'format_log'/2}~)
			    <'false'> when 'true' ->
				'ok'
			    ( <_20> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_20})
			      -| ['compiler_generated'] )
			  end
			  %% Line 364
			  {'abort',{'failed_to_start_child',_23,Reason}}
		  ( <_21> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_21})
		    -| ['compiler_generated'] )
		end
	in  %% Line 367
	    apply 'children_map'/2
		(Start, _0)
'do_start_child'/2 =
    %% Line 369
    fun (_0,_1) ->
	%% Line 370
	case _1 of
	  <{'child',_14,_15,{M,F,Args},_16,_17,_18,_19}> when 'true' ->
	      %% Line 371
	      case apply 'do_start_child_i'/3
		       (M, F, Args) of
		%% Line 372
		<_@r0 = {'ok',Pid}>
		    when call 'erlang':'is_pid'
			  (Pid) ->
		    %% Line 373
		    case _1 of
		      <{'child',_20,_21,_22,_23,_24,_25,_26}> when 'true' ->
			  let <_5> =
			      call 'erlang':'setelement'
				  (2, _1, Pid)
			  in  do  %% Line 374
				  apply 'report_progress'/2
				      (_5, _0)
				  %% Line 375
				  _@r0
		      ( <_27> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','child'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 376
		<_@r1 = {'ok',Pid,Extra}>
		    when call 'erlang':'is_pid'
			  (Pid) ->
		    %% Line 377
		    case _1 of
		      <{'child',_28,_29,_30,_31,_32,_33,_34}> when 'true' ->
			  let <_9> =
			      call 'erlang':'setelement'
				  (2, _1, Pid)
			  in  do  %% Line 378
				  apply 'report_progress'/2
				      (_9, _0)
				  %% Line 379
				  _@r1
		      ( <_35> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','child'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 380
		<Other> when 'true' ->
		    %% Line 381
		    Other
	      end
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_2})
	    -| ['compiler_generated'] )
	end
'do_start_child_i'/3 =
    %% Line 384
    fun (_0,_1,_2) ->
	let <_3> =
	    catch
		%% Line 385
		call 'erlang':'apply'
		    (_0, _1, _2)
	in  %% Line 385
	    case _3 of
	      %% Line 386
	      <_@r0 = {'ok',Pid}>
		  when call 'erlang':'is_pid'
			(Pid) ->
		  %% Line 387
		  _@r0
	      %% Line 388
	      <_@r1 = {'ok',Pid,Extra}>
		  when call 'erlang':'is_pid'
			(Pid) ->
		  %% Line 389
		  _@r1
	      %% Line 390
	      <'ignore'> when 'true' ->
		  %% Line 391
		  {'ok','undefined'}
	      %% Line 392
	      <_@r2 = {'error',Error}> when 'true' ->
		  %% Line 393
		  _@r2
	      %% Line 394
	      <What> when 'true' ->
		  %% Line 395
		  {'error',What}
	    end
'handle_call'/3 =
    %% Line 406
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{'start_child',EArgs},_X_From,State = {'state',_109,_110,_111,_112,_113,_114,_115,_116,_117,_118}>
	      when ( try
		      let <_7> =
			  call 'erlang':'element'
			      (3, State)
		      in  call 'erlang':'=:='
			      (_7, 'simple_one_for_one')
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 408
	      case apply 'get_dynamic_child'/1
		       (State) of
		<{'child',_119,_120,{M,F,A},_121,_122,_123,_124}> when 'true' ->
		    let <Args> =
			call %% Line 409
			     'erlang':%% Line 409
				      '++'
			    (%% Line 409
			     A, %% Line 409
				EArgs)
		    in  %% Line 410
			case apply 'do_start_child_i'/3
				 (M, F, Args) of
			  %% Line 411
			  <{'ok','undefined'}> when 'true' ->
			      %% Line 412
			      {'reply',{'ok','undefined'},State}
			  %% Line 413
			  <_@r0 = {'ok',Pid}> when 'true' ->
			      let <NState> =
				  apply %% Line 414
					'dyn_store'/3
				      (%% Line 414
				       Pid, %% Line 414
					    Args, %% Line 414
						  State)
			      in  %% Line 415
				  {'reply',_@r0,NState}
			  %% Line 416
			  <_@r1 = {'ok',Pid,Extra}> when 'true' ->
			      let <NState> =
				  apply %% Line 417
					'dyn_store'/3
				      (%% Line 417
				       Pid, %% Line 417
					    Args, %% Line 417
						  State)
			      in  %% Line 418
				  {'reply',_@r1,NState}
			  %% Line 419
			  <What> when 'true' ->
			      %% Line 420
			      {'reply',What,State}
			end
		( <_10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 423
	  <{'start_child',ChildSpec},_X_From,State> when 'true' ->
	      %% Line 424
	      case apply 'check_childspec'/1
		       (ChildSpec) of
		%% Line 425
		<{'ok',Child}> when 'true' ->
		    %% Line 426
		    case apply 'handle_start_child'/2
			     (Child, State) of
		      <{Resp,NState}> when 'true' ->
			  %% Line 427
			  {'reply',Resp,NState}
		      ( <_15> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_15})
			-| ['compiler_generated'] )
		    end
		%% Line 428
		<What> when 'true' ->
		    %% Line 429
		    {'reply',{'error',What},State}
	      end
	  %% Line 433
	  <{'terminate_child',Id},_X_From,State = {'state',_125,_126,_127,_128,_129,_130,_131,_132,_133,_134}>
	      when try
		    let <_17> =
			call 'erlang':'is_pid'
			    (Id)
		    in  let <_18> =
			    call 'erlang':'not'
				(_17)
			in  let <_23> =
				call %% Line 434
				     'erlang':%% Line 434
					      'element'
				    (%% Line 434
				     3, %% Line 434
					State)
			    in  let <_24> =
				    call %% Line 434
					 'erlang':%% Line 434
						  '=:='
					(_23, %% Line 434
					      'simple_one_for_one')
				in  call 'erlang':'and'
					(_18, _24)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 435
	      {'reply',{'error','simple_one_for_one'},State}
	  %% Line 437
	  <{'terminate_child',Id},_X_From,State> when 'true' ->
	      %% Line 438
	      case apply 'find_child'/2
		       (Id, State) of
		%% Line 439
		<{'ok',Child}> when 'true' ->
		    %% Line 440
		    ( case State of
			( <( {'state',_rec8,_135,_136,_137,_138,_139,_140,_141,_142,_143}
			     -| ['compiler_generated'] )> when 'true' ->
			      do  apply 'do_terminate'/2
				      (Child, _rec8)
				  let <_28> =
				      apply %% Line 441
					    'del_child'/2
					  (%% Line 441
					   Child, %% Line 441
						  State)
				  in  %% Line 441
				      {'reply','ok',_28}
			  -| ['compiler_generated'] )
			( <_144> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 442
		<'error'> when 'true' ->
		    %% Line 443
		    {'reply',{'error','not_found'},State}
		( <_29> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_29})
		  -| ['compiler_generated'] )
	      end
	  %% Line 447
	  <{'restart_child',_X_Id},_X_From,State = {'state',_145,_146,_147,_148,_149,_150,_151,_152,_153,_154}>
	      when ( try
		      let <_34> =
			  call 'erlang':'element'
			      (3, State)
		      in  call 'erlang':'=:='
			      (_34, 'simple_one_for_one')
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 448
	      {'reply',{'error','simple_one_for_one'},State}
	  %% Line 450
	  <{'restart_child',Id},_X_From,State> when 'true' ->
	      %% Line 451
	      case apply 'find_child'/2
		       (Id, State) of
		%% Line 452
		<{'ok',Child = {'child',_155,_156,_157,_158,_159,_160,_161}}>
		    when ( try
			    let <_40> =
				call 'erlang':'element'
				    (2, Child)
			    in  call 'erlang':'=:='
				    (_40, 'undefined')
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
			-| ['compiler_generated'] ) ->
		    %% Line 453
		    ( case State of
			( <( {'state',_rec9,_162,_163,_164,_165,_166,_167,_168,_169,_170}
			     -| ['compiler_generated'] )> when 'true' ->
			      case apply 'do_start_child'/2
				       (_rec9, Child) of
				%% Line 454
				<_@r2 = {'ok',Pid}> when 'true' ->
				    let <NState> =
					apply %% Line 455
					      'set_pid'/3
					    (%% Line 455
					     Pid, %% Line 455
						  Id, %% Line 455
						      State)
				    in  %% Line 456
					{'reply',_@r2,NState}
				%% Line 457
				<_@r3 = {'ok',Pid,Extra}> when 'true' ->
				    let <NState> =
					apply %% Line 458
					      'set_pid'/3
					    (%% Line 458
					     Pid, %% Line 458
						  Id, %% Line 458
						      State)
				    in  %% Line 459
					{'reply',_@r3,NState}
				%% Line 460
				<Error> when 'true' ->
				    %% Line 461
				    {'reply',Error,State}
			      end
			  -| ['compiler_generated'] )
			( <_171> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 463
		<{'ok',{'child',{'restarting',_172},_173,_174,_175,_176,_177,_178}}> when 'true' ->
		    %% Line 464
		    {'reply',{'error','restarting'},State}
		%% Line 465
		<{'ok',_179}> when 'true' ->
		    %% Line 466
		    {'reply',{'error','running'},State}
		%% Line 467
		<_180> when 'true' ->
		    %% Line 468
		    {'reply',{'error','not_found'},State}
	      end
	  %% Line 472
	  <{'delete_child',_X_Id},_X_From,State = {'state',_181,_182,_183,_184,_185,_186,_187,_188,_189,_190}>
	      when ( try
		      let <_52> =
			  call 'erlang':'element'
			      (3, State)
		      in  call 'erlang':'=:='
			      (_52, 'simple_one_for_one')
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 473
	      {'reply',{'error','simple_one_for_one'},State}
	  %% Line 475
	  <{'delete_child',Id},_X_From,State> when 'true' ->
	      %% Line 476
	      case apply 'find_child'/2
		       (Id, State) of
		%% Line 477
		<{'ok',Child = {'child',_191,_192,_193,_194,_195,_196,_197}}>
		    when ( try
			    let <_58> =
				call 'erlang':'element'
				    (2, Child)
			    in  call 'erlang':'=:='
				    (_58, 'undefined')
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
			-| ['compiler_generated'] ) ->
		    let <NState> =
			apply %% Line 478
			      'remove_child'/2
			    (%% Line 478
			     Id, %% Line 478
				 State)
		    in  %% Line 479
			{'reply','ok',NState}
		%% Line 480
		<{'ok',{'child',{'restarting',_198},_199,_200,_201,_202,_203,_204}}> when 'true' ->
		    %% Line 481
		    {'reply',{'error','restarting'},State}
		%% Line 482
		<{'ok',_205}> when 'true' ->
		    %% Line 483
		    {'reply',{'error','running'},State}
		%% Line 484
		<_206> when 'true' ->
		    %% Line 485
		    {'reply',{'error','not_found'},State}
	      end
	  %% Line 488
	  <{'get_childspec',Id},_X_From,State> when 'true' ->
	      %% Line 489
	      case apply 'find_child'/2
		       (Id, State) of
		%% Line 490
		<{'ok',Child}> when 'true' ->
		    let <_62> =
			apply %% Line 491
			      'child_to_spec'/1
			    (%% Line 491
			     Child)
		    in  %% Line 491
			{'reply',{'ok',_62},State}
		%% Line 492
		<'error'> when 'true' ->
		    %% Line 493
		    {'reply',{'error','not_found'},State}
		( <_63> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_63})
		  -| ['compiler_generated'] )
	      end
	  %% Line 496
	  <'which_children',_X_From,State = {'state',_207,_208,_209,_210,_211,_212,_213,_214,_215,_216}>
	      when ( try
		      let <_68> =
			  call 'erlang':'element'
			      (3, State)
		      in  call 'erlang':'=:='
			      (_68, 'simple_one_for_one')
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 497
	      case apply 'get_dynamic_child'/1
		       (State) of
		<{'child',_217,_218,_219,_220,_221,CT,Mods}> when 'true' ->
		    let <_73> =
			fun (_71) ->
			    %% Line 498
			    case _71 of
			      <{'restarting',_222}> when 'true' ->
				  {'undefined','restarting',CT,Mods}
			      %% Line 499
			      <Pid> when 'true' ->
				  {'undefined',Pid,CT,Mods}
			    end
		    in  let <Reply> =
			    apply %% Line 498
				  'dyn_map'/2
				(_73, %% Line 500
				      State)
			in  %% Line 501
			    {'reply',Reply,State}
		( <_70> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_70})
		  -| ['compiler_generated'] )
	      end
	  %% Line 503
	  <'which_children',_X_From,State> when 'true' ->
	      let <_81> =
		  fun (_78,_77) ->
		      %% Line 506
		      case <_78,_77> of
			<Id,{'child',{'restarting',_223},_224,_225,_226,_227,%% Line 507
									     ChildType,%% Line 507
										       Mods}> when 'true' ->
			    %% Line 508
			    {Id,'restarting',ChildType,Mods}
			%% Line 509
			<Id,{'child',Pid,_228,_229,_230,_231,%% Line 510
							     ChildType,%% Line 510
								       Mods}> when 'true' ->
			    %% Line 511
			    {Id,Pid,ChildType,Mods}
			( <_80,_79> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_80,_79})
				-| [{'function_name',{'-handle_call/3-fun-1-',2}}] )
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 513
		  ( case State of
		      ( <( {'state',_232,_233,_rec10,_234,_235,_236,_237,_238,_239,_240}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <Resp> =
				apply 'children_to_list'/2
				    (_81, _rec10)
			    in  %% Line 514
				{'reply',Resp,State}
			-| ['compiler_generated'] )
		      ( <_241> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 516
	  <'count_children',_X_From,State = {'state',_242,_243,_244,_245,_246,_247,_248,Restarts = _249,_250,_251}>
	      when %% Line 517
		( try
		      let <_87> =
			  call 'erlang':'element'
			      (3, State)
		      in  call 'erlang':'=:='
			      (_87, 'simple_one_for_one')
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 518
	      case apply 'get_dynamic_child'/1
		       (State) of
		<{'child',_252,_253,_254,_255,_256,CT,_257}> when 'true' ->
		    let <Sz> =
			apply %% Line 519
			      'dyn_size'/1
			    (%% Line 519
			     State)
		    in  let <Active> =
			    call %% Line 520
				 'erlang':%% Line 520
					  '-'
				(%% Line 520
				 Sz, %% Line 520
				     Restarts)
			in  let <_93> =
				case %% Line 521
				     CT of
				  %% Line 522
				  <'supervisor'> when 'true' ->
				      [{'specs',1}|[{'active',Active}|%% Line 523
								      [{'supervisors',Sz}|[{'workers',0}]]]]
				  %% Line 524
				  <'worker'> when 'true' ->
				      [{'specs',1}|[{'active',Active}|%% Line 525
								      [{'supervisors',0}|[{'workers',Sz}|[]]]]]
				  ( <_92> when 'true' ->
					%% Line 521
					primop 'match_fail'
					    ({'case_clause',_92})
				    -| ['compiler_generated'] )
				end
			    in  %% Line 527
				{'reply',_93,State}
		( <_89> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_89})
		  -| ['compiler_generated'] )
	      end
	  %% Line 529
	  <'count_children',_X_From,State> when 'true' ->
	      let <_103> =
		  fun (_99,_98,_97) ->
		      %% Line 533
		      apply 'count_child'/2
			  (_98, _97)
	      in  %% Line 534
		  ( case State of
		      ( <( {'state',_258,_259,_rec11,_260,_261,_262,_263,_264,_265,_266}
			   -| ['compiler_generated'] )> when 'true' ->
			    case apply 'children_fold'/3
				     (_103, {0,0,0,0}, _rec11) of
			      <{Specs,Active,Supers,Workers}> when 'true' ->
				  let <Reply> =
				      [%% Line 537
				       {'specs',Specs}|%% Line 537
						       [{'active',Active}|%% Line 538
									  [{'supervisors',Supers}|[{'workers',Workers}|[]]]]]
				  in  %% Line 539
				      {'reply',Reply,State}
			      ( <_104> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_104})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_267> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_108,_107,_106> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_108,_107,_106})
		  -| [{'function_name',{'handle_call',3}}] )
	    -| ['compiler_generated'] )
	end
'count_child'/2 =
    %% Line 541
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'child',Pid,_22,_23,_24,_25,'worker',_26},%% Line 542
						      {Specs,Active,Supers,Workers}> when 'true' ->
	      let <_4> =
		  case <> of
		    %% Line 543
		    ( <>
			  when call 'erlang':'is_pid'
				(Pid) ->
			  call 'erlang':'is_process_alive'
			      (Pid)
		      -| ['compiler_generated'] )
		    %% Line 543
		    ( <> when 'true' ->
			  'false'
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 543
		  case _4 of
		    %% Line 544
		    <'true'> when 'true' ->
			let <_7> =
			    call 'erlang':'+'
				(Specs, 1)
			in  let <_6> =
				call 'erlang':'+'
				    (Active, 1)
			    in  let <_5> =
				    call 'erlang':'+'
					(Workers, 1)
				in  {_7,_6,Supers,_5}
		    %% Line 545
		    <'false'> when 'true' ->
			let <_9> =
			    call 'erlang':'+'
				(Specs, 1)
			in  let <_8> =
				call 'erlang':'+'
				    (Workers, 1)
			    in  {_9,Active,Supers,_8}
		    ( <_10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_10})
		      -| ['compiler_generated'] )
		  end
	  %% Line 547
	  <{'child',Pid,_27,_28,_29,_30,'supervisor',_31},%% Line 548
							  {Specs,Active,Supers,Workers}> when 'true' ->
	      let <_13> =
		  case <> of
		    %% Line 549
		    ( <>
			  when call 'erlang':'is_pid'
				(Pid) ->
			  call 'erlang':'is_process_alive'
			      (Pid)
		      -| ['compiler_generated'] )
		    %% Line 549
		    ( <> when 'true' ->
			  'false'
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 549
		  case _13 of
		    %% Line 550
		    <'true'> when 'true' ->
			let <_16> =
			    call 'erlang':'+'
				(Specs, 1)
			in  let <_15> =
				call 'erlang':'+'
				    (Active, 1)
			    in  let <_14> =
				    call 'erlang':'+'
					(Supers, 1)
				in  {_16,_15,_14,Workers}
		    %% Line 551
		    <'false'> when 'true' ->
			let <_18> =
			    call 'erlang':'+'
				(Specs, 1)
			in  let <_17> =
				call 'erlang':'+'
				    (Supers, 1)
			    in  {_18,Active,_17,Workers}
		    ( <_19> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_19})
		      -| ['compiler_generated'] )
		  end
	  ( <_21,_20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_21,_20})
		  -| [{'function_name',{'count_child',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_cast'/2 =
    %% Line 560
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'try_again_restart',TryAgainId},State> when 'true' ->
	      %% Line 561
	      case apply 'find_child_and_args'/2
		       (TryAgainId, State) of
		%% Line 562
		<{'ok',Child = {'child',{'restarting',_6},_7,_8,_9,_10,_11,_12}}> when 'true' ->
		    %% Line 563
		    case apply 'restart'/2
			     (Child, State) of
		      %% Line 564
		      <{'ok',State1}> when 'true' ->
			  %% Line 565
			  {'noreply',State1}
		      %% Line 566
		      <{'shutdown',State1}> when 'true' ->
			  %% Line 567
			  {'stop','shutdown',State1}
		      ( <_2> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_2})
			-| ['compiler_generated'] )
		    end
		%% Line 569
		<_13> when 'true' ->
		    %% Line 570
		    {'noreply',State}
	      end
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'handle_cast',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_info'/2 =
    %% Line 579
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'EXIT',Pid,Reason},State> when 'true' ->
	      %% Line 580
	      case apply 'restart_child'/3
		       (Pid, Reason, State) of
		%% Line 581
		<{'ok',State1}> when 'true' ->
		    %% Line 582
		    {'noreply',State1}
		%% Line 583
		<{'shutdown',State1}> when 'true' ->
		    %% Line 584
		    {'stop','shutdown',State1}
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 587
	  <Msg,State> when 'true' ->
	      do  %% Line 588
		  case call 'logger':'allow'
			   ('error', 'supervisor') of
		    <'true'> when 'true' ->
			call 'logger':'macro_log'
			    (~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],'line'=>588,'mfa'=>{'supervisor','handle_info',2}}~, 'error', [83|[117|[112|[101|[114|[118|[105|[115|[111|[114|[32|[114|[101|[99|[101|[105|[118|[101|[100|[32|[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[109|[101|[115|[115|[97|[103|[101|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Msg|[]], ~{'domain'=>['otp'],'error_logger'=>~{'tag'=>'error'}~}~)
		    %% Line 590
		    <'false'> when 'true' ->
			'ok'
		    ( <_3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_3})
		      -| ['compiler_generated'] )
		  end
		  %% Line 591
		  {'noreply',State}
	end
'terminate'/2 =
    %% Line 598
    fun (_0,_1) ->
	case <_0,_1> of
	  <_X_Reason,State = {'state',_14,_15,_16,_17,_18,_19,_20,_21,_22,_23}>
	      when ( try
		      let <_6> =
			  call 'erlang':'element'
			      (3, State)
		      in  call 'erlang':'=:='
			      (_6, 'simple_one_for_one')
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 599
	      apply 'terminate_dynamic_children'/1
		  (State)
	  %% Line 600
	  <_X_Reason,State> when 'true' ->
	      %% Line 601
	      ( case State of
		  ( <( {'state',_24,_25,_rec12,_26,_27,_28,_29,_30,_31,_32}
		       -| ['compiler_generated'] )> when 'true' ->
			( case State of
			    ( <( {'state',_rec13,_34,_35,_36,_37,_38,_39,_40,_41,_42}
				 -| ['compiler_generated'] )> when 'true' ->
				  apply 'terminate_children'/2
				      (_rec12, _rec13)
			      -| ['compiler_generated'] )
			    ( <_43> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_33> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'code_change'/3 =
    %% Line 615
    fun (_0,_1,_2) ->
	%% Line 616
	( case _1 of
	    ( <( {'state',_14,_15,_16,_17,_18,_19,_20,_21,_rec14,_22}
		 -| ['compiler_generated'] )> when 'true' ->
		  ( case _1 of
		      ( <( {'state',_24,_25,_26,_27,_28,_29,_30,_31,_32,_rec15}
			   -| ['compiler_generated'] )> when 'true' ->
			    case call _rec14:'init'
				     (_rec15) of
			      %% Line 617
			      <{'ok',{SupFlags,StartSpec}}> when 'true' ->
				  %% Line 618
				  case apply 'set_flags'/2
					   (SupFlags, _1) of
				    %% Line 619
				    <{'ok',State1}> when 'true' ->
					%% Line 620
					apply 'update_childspec'/2
					    (State1, StartSpec)
				    %% Line 621
				    <{'invalid_type',_34}>
					when call 'erlang':'=:='
					      (_34,
					       SupFlags) ->
					%% Line 622
					{'error',{'bad_flags',SupFlags}}
				    %% Line 623
				    <Error> when 'true' ->
					%% Line 624
					{'error',Error}
				  end
			      %% Line 626
			      <'ignore'> when 'true' ->
				  %% Line 627
				  {'ok',_1}
			      %% Line 628
			      <Error> when 'true' ->
				  %% Line 629
				  Error
			    end
			-| ['compiler_generated'] )
		      ( <_33> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_23> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'update_childspec'/2 =
    %% Line 632
    fun (_0,_1) ->
	case <_0,_1> of
	  <State = {'state',_22,_23,_24,_25,_26,_27,_28,_29,_30,_31},StartSpec>
	      when ( try
		      let <_6> =
			  call 'erlang':'element'
			      (3, State)
		      in  call 'erlang':'=:='
			      (_6, 'simple_one_for_one')
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 633
	      case apply 'check_startspec'/1
		       (StartSpec) of
		%% Line 634
		<{'ok',Children = {[_32|[]],_33}}> when 'true' ->
		    %% Line 635
		    case State of
		      <{'state',_34,_35,_36,_37,_38,_39,_40,_41,_42,_43}> when 'true' ->
			  let <_10> =
			      call 'erlang':'setelement'
				  (4, State, Children)
			  in  {'ok',_10}
		      ( <_44> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 636
		<Error> when 'true' ->
		    %% Line 637
		    {'error',Error}
	      end
	  %% Line 639
	  <State,StartSpec> when 'true' ->
	      %% Line 640
	      case apply 'check_startspec'/1
		       (StartSpec) of
		%% Line 641
		<{'ok',Children}> when 'true' ->
		    %% Line 642
		    ( case State of
			( <( {'state',_45,_46,_rec17,_47,_48,_49,_50,_51,_52,_53}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <NewC> =
				  apply %% Line 643
					'update_childspec1'/3
				      (_rec17, %% Line 643
					       Children, %% Line 643
							 [])
			      in  %% Line 644
				  case State of
				    <{'state',_55,_56,_57,_58,_59,_60,_61,_62,_63,_64}> when 'true' ->
					let <_18> =
					    call 'erlang':'setelement'
						(4, State, NewC)
					in  {'ok',_18}
				    ( <_65> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','state'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			  -| ['compiler_generated'] )
			( <_54> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 645
		<Error> when 'true' ->
		    %% Line 646
		    {'error',Error}
	      end
	end
'update_childspec1'/3 =
    %% Line 649
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <{[Id|OldIds],OldDb},_@r0 = {Ids,Db},KeepOld> when 'true' ->
	      let <_3> =
		  call %% Line 650
		       'maps':%% Line 650
			      'get'
		      (%% Line 650
		       Id, %% Line 650
			   OldDb)
	      in  %% Line 650
		  case apply 'update_chsp'/2
			   (_3, Db) of
		    %% Line 651
		    <{'ok',NewDb}> when 'true' ->
			%% Line 652
			apply 'update_childspec1'/3
			    ({OldIds,OldDb}, {Ids,NewDb}, KeepOld)
		    %% Line 653
		    <'false'> when 'true' ->
			%% Line 654
			apply 'update_childspec1'/3
			    ({OldIds,OldDb}, _@r0, [Id|KeepOld])
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 656
	  <{[],OldDb},{Ids,Db},KeepOld> when 'true' ->
	      let <KeepOldDb> =
		  call %% Line 657
		       'maps':%% Line 657
			      'with'
		      (%% Line 657
		       KeepOld, %% Line 657
				OldDb)
	      in  let <_7> =
		      call %% Line 659
			   'erlang':%% Line 659
				    '++'
			  (%% Line 659
			   Ids, %% Line 659
				KeepOld)
		  in  let <_8> =
			  call %% Line 659
			       'lists':%% Line 659
				       'reverse'
			      (_7)
		      in  let <_6> =
			      call %% Line 659
				   'maps':%% Line 659
					  'merge'
				  (%% Line 659
				   KeepOldDb, %% Line 659
					      Db)
			  in  %% Line 659
			      {_8,_6}
	  ( <_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9})
		  -| [{'function_name',{'update_childspec1',3}}] )
	    -| ['compiler_generated'] )
	end
'update_chsp'/2 =
    %% Line 661
    fun (_0,_1) ->
	case <_0,_1> of
	  <OldChild = {'child',_12,Id,_13,_14,_15,_16,_17},NewDb> when 'true' ->
	      %% Line 662
	      case call 'maps':'find'
		       (Id, NewDb) of
		%% Line 663
		<{'ok',Child}> when 'true' ->
		    %% Line 664
		    ( case OldChild of
			( <( {'child',_rec21,_18,_19,_20,_21,_22,_23}
			     -| ['compiler_generated'] )> when 'true' ->
			      case Child of
				<{'child',_25,_26,_27,_28,_29,_30,_31}> when 'true' ->
				    let <_7> =
					call 'erlang':'setelement'
					    (2, Child, _rec21)
				    in  case <> of
					  ( <>
						when call 'erlang':'is_map'
						      (NewDb) ->
						let <_8> =
						    ~{Id=>_7|NewDb}~
						in  {'ok',_8}
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						( primop 'match_fail'
						      ({'badmap',NewDb})
						  -| [{'eval_failure','badmap'}] )
					    -| ['compiler_generated'] )
					end
				( <_32> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','child'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  -| ['compiler_generated'] )
			( <_24> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','child'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 665
		<'error'> when 'true' ->
		    %% Line 666
		    'false'
		( <_9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_9})
		  -| ['compiler_generated'] )
	      end
	  ( <_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10})
		  -| [{'function_name',{'update_chsp',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_start_child'/2 =
    %% Line 674
    fun (_0,_1) ->
	%% Line 675
	( case _0 of
	    ( <( {'child',_32,_rec22,_33,_34,_35,_36,_37}
		 -| ['compiler_generated'] )> when 'true' ->
		  case apply 'find_child'/2
			   (_rec22, _1) of
		    %% Line 676
		    <'error'> when 'true' ->
			%% Line 677
			( case _1 of
			    ( <( {'state',_rec23,_39,_40,_41,_42,_43,_44,_45,_46,_47}
				 -| ['compiler_generated'] )> when 'true' ->
				  case apply 'do_start_child'/2
					   (_rec23, _0) of
				    %% Line 678
				    <{'ok','undefined'}>
					when ( try
						( let <_8> =
						      case ( call ( 'erlang'
								    -| ['compiler_generated'] ):( 'is_record'
												  -| ['compiler_generated'] )
								 (_0, ( 'child'
									-| ['compiler_generated'] ), ( 8
												       -| ['compiler_generated'] ))
							     -| ['compiler_generated'] ) of
							( <( 'true'
							     -| ['compiler_generated'] )> when 'true' ->
							      ( 'true'
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
							( <( 'false'
							     -| ['compiler_generated'] )> when 'true' ->
							      ( 'fail'
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
							( <( _6
							     -| ['compiler_generated'] )> when 'true' ->
							      ( _6
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						  in  let <_9> =
							  call 'erlang':'=:='
							      (( _8
								 -| ['compiler_generated'] ), 'true')
						      in  let <_10> =
							      call 'erlang':'element'
								  (5, _0)
							  in  let <_11> =
								  call 'erlang':'=:='
								      (_10, 'temporary')
							      in  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'and'
													 -| ['compiler_generated'] )
									(_9, _11)
								    -| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false'
					    -| ['compiler_generated'] ) ->
					%% Line 679
					{{'ok','undefined'},_1}
				    %% Line 680
				    <_@r0 = {'ok',Pid}> when 'true' ->
					%% Line 681
					case _0 of
					  <{'child',_49,_50,_51,_52,_53,_54,_55}> when 'true' ->
					      let <_14> =
						  call 'erlang':'setelement'
						      (2, _0, Pid)
					      in  let <_15> =
						      apply 'save_child'/2
							  (_14, _1)
						  in  {_@r0,_15}
					  ( <_56> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','child'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
				    %% Line 682
				    <_@r1 = {'ok',Pid,Extra}> when 'true' ->
					%% Line 683
					case _0 of
					  <{'child',_57,_58,_59,_60,_61,_62,_63}> when 'true' ->
					      let <_18> =
						  call 'erlang':'setelement'
						      (2, _0, Pid)
					      in  let <_19> =
						      apply 'save_child'/2
							  (_18, _1)
						  in  {_@r1,_19}
					  ( <_64> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','child'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
				    %% Line 684
				    <{'error',What}> when 'true' ->
					%% Line 685
					{{'error',{What,_0}},_1}
				    ( <_20> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_20})
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_48> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 687
		    <{'ok',OldChild = {'child',_65,_66,_67,_68,_69,_70,_71}}>
			when ( try
				let <_25> =
				    call 'erlang':'element'
					(2, OldChild)
				in  call 'erlang':'is_pid'
					(_25)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			    -| ['compiler_generated'] ) ->
			%% Line 688
			( case OldChild of
			    ( <( {'child',_rec26,_72,_73,_74,_75,_76,_77}
				 -| ['compiler_generated'] )> when 'true' ->
				  {{'error',{'already_started',_rec26}},_1}
			      -| ['compiler_generated'] )
			    ( <_78> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','child'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 689
		    <{'ok',_X_OldChild}> when 'true' ->
			%% Line 690
			{{'error','already_present'},_1}
		    ( <_29> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_29})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_38> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','child'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'restart_child'/3 =
    %% Line 698
    fun (_0,_1,_2) ->
	%% Line 699
	case apply 'find_child_and_args'/2
		 (_0, _2) of
	  %% Line 700
	  <{'ok',Child}> when 'true' ->
	      %% Line 701
	      apply 'do_restart'/3
		  (_1, Child, _2)
	  %% Line 702
	  <'error'> when 'true' ->
	      %% Line 703
	      {'ok',_2}
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_3})
	    -| ['compiler_generated'] )
	end
'do_restart'/3 =
    %% Line 706
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Reason,Child = {'child',_55,_56,_57,_58,_59,_60,_61},State>
	      when ( try
		      let <_7> =
			  call 'erlang':'element'
			      (5, Child)
		      in  call 'erlang':'=:='
			      (_7, 'permanent')
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      do  %% Line 707
		  case call 'logger':'allow'
			   ('error', 'supervisor') of
		    <'true'> when 'true' ->
			( case State of
			    ( <( {'state',_rec27,_62,_63,_64,_65,_66,_67,_68,_69,_70}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_11> =
				      apply 'extract_child'/1
					  (Child)
				  in  let <_12> =
					  ~{'report'=>[{'supervisor',_rec27}|[{'errorContext','child_terminated'}|[{'reason',Reason}|[{'offender',_11}|[]]]]]|~{'label'=>{'supervisor','child_terminated'}}~}~
				      in  call 'logger':'macro_log'
					      (~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],'line'=>707,'mfa'=>{'supervisor','do_restart',3}}~, 'error', _12, ~{'domain'=>['otp'|['sasl']],'error_logger'=>~{'report_cb'=>fun 'supervisor':'format_log'/1,'tag'=>'error_report','type'=>'supervisor_report'}~,'logger_formatter'=>~{'title'=>[83|[85|[80|[69|[82|[86|[73|[83|[79|[82|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]]]]]}~,'report_cb'=>fun 'supervisor':'format_log'/2}~)
			      -| ['compiler_generated'] )
			    ( <_71> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    <'false'> when 'true' ->
			'ok'
		    ( <_17> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_17})
		      -| ['compiler_generated'] )
		  end
		  %% Line 708
		  apply 'restart'/2
		      (Child, State)
	  %% Line 709
	  <'normal',Child,State> when 'true' ->
	      let <NState> =
		  apply %% Line 710
			'del_child'/2
		      (%% Line 710
		       Child, %% Line 710
			      State)
	      in  %% Line 711
		  {'ok',NState}
	  %% Line 712
	  <'shutdown',Child,State> when 'true' ->
	      let <NState> =
		  apply %% Line 713
			'del_child'/2
		      (%% Line 713
		       Child, %% Line 713
			      State)
	      in  %% Line 714
		  {'ok',NState}
	  %% Line 715
	  <{'shutdown',_X_Term},Child,State> when 'true' ->
	      let <NState> =
		  apply %% Line 716
			'del_child'/2
		      (%% Line 716
		       Child, %% Line 716
			      State)
	      in  %% Line 717
		  {'ok',NState}
	  %% Line 718
	  <Reason,Child = {'child',_72,_73,_74,_75,_76,_77,_78},State>
	      when ( try
		      let <_25> =
			  call 'erlang':'element'
			      (5, Child)
		      in  call 'erlang':'=:='
			      (_25, 'transient')
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      do  %% Line 719
		  case call 'logger':'allow'
			   ('error', 'supervisor') of
		    <'true'> when 'true' ->
			( case State of
			    ( <( {'state',_rec28,_79,_80,_81,_82,_83,_84,_85,_86,_87}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_29> =
				      apply 'extract_child'/1
					  (Child)
				  in  let <_30> =
					  ~{'report'=>[{'supervisor',_rec28}|[{'errorContext','child_terminated'}|[{'reason',Reason}|[{'offender',_29}|[]]]]]|~{'label'=>{'supervisor','child_terminated'}}~}~
				      in  call 'logger':'macro_log'
					      (~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],'line'=>719,'mfa'=>{'supervisor','do_restart',3}}~, 'error', _30, ~{'domain'=>['otp'|['sasl']],'error_logger'=>~{'report_cb'=>fun 'supervisor':'format_log'/1,'tag'=>'error_report','type'=>'supervisor_report'}~,'logger_formatter'=>~{'title'=>[83|[85|[80|[69|[82|[86|[73|[83|[79|[82|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]]]]]}~,'report_cb'=>fun 'supervisor':'format_log'/2}~)
			      -| ['compiler_generated'] )
			    ( <_88> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    <'false'> when 'true' ->
			'ok'
		    ( <_35> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_35})
		      -| ['compiler_generated'] )
		  end
		  %% Line 720
		  apply 'restart'/2
		      (Child, State)
	  %% Line 721
	  <Reason,Child = {'child',_89,_90,_91,_92,_93,_94,_95},State>
	      when ( try
		      let <_40> =
			  call 'erlang':'element'
			      (5, Child)
		      in  call 'erlang':'=:='
			      (_40, 'temporary')
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      do  %% Line 722
		  case call 'logger':'allow'
			   ('error', 'supervisor') of
		    <'true'> when 'true' ->
			( case State of
			    ( <( {'state',_rec29,_96,_97,_98,_99,_100,_101,_102,_103,_104}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_44> =
				      apply 'extract_child'/1
					  (Child)
				  in  let <_45> =
					  ~{'report'=>[{'supervisor',_rec29}|[{'errorContext','child_terminated'}|[{'reason',Reason}|[{'offender',_44}|[]]]]]|~{'label'=>{'supervisor','child_terminated'}}~}~
				      in  call 'logger':'macro_log'
					      (~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],'line'=>722,'mfa'=>{'supervisor','do_restart',3}}~, 'error', _45, ~{'domain'=>['otp'|['sasl']],'error_logger'=>~{'report_cb'=>fun 'supervisor':'format_log'/1,'tag'=>'error_report','type'=>'supervisor_report'}~,'logger_formatter'=>~{'title'=>[83|[85|[80|[69|[82|[86|[73|[83|[79|[82|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]]]]]}~,'report_cb'=>fun 'supervisor':'format_log'/2}~)
			      -| ['compiler_generated'] )
			    ( <_105> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    <'false'> when 'true' ->
			'ok'
		    ( <_50> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_50})
		      -| ['compiler_generated'] )
		  end
		  let <NState> =
		      apply %% Line 723
			    'del_child'/2
			  (%% Line 723
			   Child, %% Line 723
				  State)
		  in  %% Line 724
		      {'ok',NState}
	  ( <_54,_53,_52> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_54,_53,_52})
		  -| [{'function_name',{'do_restart',3}}] )
	    -| ['compiler_generated'] )
	end
'restart'/2 =
    %% Line 726
    fun (_0,_1) ->
	%% Line 727
	case apply 'add_restart'/1
		 (_1) of
	  %% Line 728
	  <{'ok',NState}> when 'true' ->
	      %% Line 729
	      ( case NState of
		  ( <( {'state',_18,_rec30,_19,_20,_21,_22,_23,_24,_25,_26}
		       -| ['compiler_generated'] )> when 'true' ->
			case apply 'restart'/3
				 (_rec30, _0, NState) of
			  %% Line 730
			  <{{'try_again',TryAgainId},NState2}> when 'true' ->
			      do  %% Line 736
				  apply 'try_again_restart'/1
				      (TryAgainId)
				  %% Line 737
				  {'ok',NState2}
			  %% Line 738
			  <Other> when 'true' ->
			      %% Line 739
			      Other
			end
		    -| ['compiler_generated'] )
		  ( <_27> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 741
	  <{'terminate',NState}> when 'true' ->
	      do  %% Line 742
		  case call 'logger':'allow'
			   ('error', 'supervisor') of
		    <'true'> when 'true' ->
			%% Line 743
			( case _1 of
			    ( <( {'state',_rec31,_28,_29,_30,_31,_32,_33,_34,_35,_36}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_7> =
				      apply 'extract_child'/1
					  (_0)
				  in  let <_8> =
					  ~{'report'=>[{'supervisor',_rec31}|[{'errorContext','shutdown'}|[{'reason','reached_max_restart_intensity'}|[{'offender',_7}|[]]]]]|~{'label'=>{'supervisor','shutdown'}}~}~
				      in  call 'logger':'macro_log'
					      (~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],'line'=>742,'mfa'=>{'supervisor','restart',2}}~, 'error', _8, ~{'domain'=>['otp'|['sasl']],'error_logger'=>~{'report_cb'=>fun 'supervisor':'format_log'/1,'tag'=>'error_report','type'=>'supervisor_report'}~,'logger_formatter'=>~{'title'=>[83|[85|[80|[69|[82|[86|[73|[83|[79|[82|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]]]]]}~,'report_cb'=>fun 'supervisor':'format_log'/2}~)
			      -| ['compiler_generated'] )
			    ( <_37> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 743
		    <'false'> when 'true' ->
			'ok'
		    ( <_13> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_13})
		      -| ['compiler_generated'] )
		  end
		  let <_14> =
		      apply %% Line 744
			    'del_child'/2
			  (_0, %% Line 744
			       NState)
		  in  %% Line 744
		      {'shutdown',_14}
	  ( <_15> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_15})
	    -| ['compiler_generated'] )
	end
'restart'/3 =
    %% Line 747
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <'simple_one_for_one',Child,State0> when 'true' ->
	      %% Line 748
	      case Child of
		<{'child',OldPid,_73,{M,F,A},_74,_75,_76,_77}> when 'true' ->
		    let <_10> =
			case %% Line 749
			     OldPid of
			  %% Line 750
			  <{'restarting',_78}> when 'true' ->
			      %% Line 751
			      ( case State0 of
				  ( <( {'state',_79,_80,_81,_82,_83,_84,_85,_rec32,_86,_87}
				       -| ['compiler_generated'] )> when 'true' ->
					let <NRes> =
					    call 'erlang':'-'
						(_rec32, 1)
					in  %% Line 752
					    case State0 of
					      <{'state',_89,_90,_91,_92,_93,_94,_95,_96,_97,_98}> when 'true' ->
						  call 'erlang':'setelement'
						      (9, State0, NRes)
					      ( <_99> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','state'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
				    -| ['compiler_generated'] )
				  ( <_88> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','state'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 753
			  <_100> when 'true' ->
			      %% Line 754
			      State0
			end
		    in  let <State2> =
			    apply %% Line 756
				  'dyn_erase'/2
				(%% Line 756
				 OldPid, _10)
			in  %% Line 757
			    case apply 'do_start_child_i'/3
				     (M, F, A) of
			      %% Line 758
			      <{'ok',Pid}> when 'true' ->
				  let <NState> =
				      apply %% Line 759
					    'dyn_store'/3
					  (%% Line 759
					   Pid, %% Line 759
						A, %% Line 759
						   State2)
				  in  %% Line 760
				      {'ok',NState}
			      %% Line 761
			      <{'ok',Pid,_X_Extra}> when 'true' ->
				  let <NState> =
				      apply %% Line 762
					    'dyn_store'/3
					  (%% Line 762
					   Pid, %% Line 762
						A, %% Line 762
						   State2)
				  in  %% Line 763
				      {'ok',NState}
			      %% Line 764
			      <{'error',Error}> when 'true' ->
				  let <ROldPid> =
				      apply %% Line 765
					    'restarting'/1
					  (%% Line 765
					   OldPid)
				  in  %% Line 766
				      ( case State2 of
					  ( <( {'state',_101,_102,_103,_104,_105,_106,_107,_rec34,_108,_109}
					       -| ['compiler_generated'] )> when 'true' ->
						let <NRestarts> =
						    call 'erlang':'+'
							(_rec34, 1)
						in  %% Line 767
						    case State2 of
						      <{'state',_111,_112,_113,_114,_115,_116,_117,_118,_119,_120}> when 'true' ->
							  let <_21> =
							      call 'erlang':'setelement'
								  (9, State2, NRestarts)
							  in  let <NState> =
								  apply %% Line 768
									'dyn_store'/3
								      (%% Line 768
								       ROldPid, %% Line 768
										A, _21)
							      in  do  %% Line 769
								      case call 'logger':'allow'
									       ('error', 'supervisor') of
									<'true'> when 'true' ->
									    ( case NState of
										( <( {'state',_rec36,_122,_123,_124,_125,_126,_127,_128,_129,_130}
										     -| ['compiler_generated'] )> when 'true' ->
										      let <_26> =
											  apply 'extract_child'/1
											      (Child)
										      in  let <_27> =
											      ~{'report'=>[{'supervisor',_rec36}|[{'errorContext','start_error'}|[{'reason',Error}|[{'offender',_26}|[]]]]]|~{'label'=>{'supervisor','start_error'}}~}~
											  in  call 'logger':'macro_log'
												  (~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],'line'=>769,'mfa'=>{'supervisor','restart',3}}~, 'error', _27, ~{'domain'=>['otp'|['sasl']],'error_logger'=>~{'report_cb'=>fun 'supervisor':'format_log'/1,'tag'=>'error_report','type'=>'supervisor_report'}~,'logger_formatter'=>~{'title'=>[83|[85|[80|[69|[82|[86|[73|[83|[79|[82|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]]]]]}~,'report_cb'=>fun 'supervisor':'format_log'/2}~)
										  -| ['compiler_generated'] )
										( <_131> when 'true' ->
										      ( call ( 'erlang'
											       -| ['compiler_generated'] ):( 'error'
															     -| ['compiler_generated'] )
											    (( {'badrecord','state'}
											       -| ['compiler_generated'] ))
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									      end
									      -| ['compiler_generated'] )
									<'false'> when 'true' ->
									    'ok'
									( <_32> when 'true' ->
									      primop 'match_fail'
										  ({'case_clause',_32})
									  -| ['compiler_generated'] )
								      end
								      %% Line 770
								      {{'try_again',ROldPid},NState}
						      ( <_121> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','state'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
					    -| ['compiler_generated'] )
					  ( <_110> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','state'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
			      ( <_33> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_33})
				-| ['compiler_generated'] )
			    end
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 772
	  <'one_for_one',Child = {'child',_132,Id,_133,_134,_135,_136,_137},State> when 'true' ->
	      %% Line 773
	      ( case Child of
		  ( <( {'child',_rec37,_138,_139,_140,_141,_142,_143}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 774
			( case State of
			    ( <( {'state',_rec38,_145,_146,_147,_148,_149,_150,_151,_152,_153}
				 -| ['compiler_generated'] )> when 'true' ->
				  case apply 'do_start_child'/2
					   (_rec38, Child) of
				    %% Line 775
				    <{'ok',Pid}> when 'true' ->
					let <NState> =
					    apply %% Line 776
						  'set_pid'/3
						(%% Line 776
						 Pid, %% Line 776
						      Id, %% Line 776
							  State)
					in  %% Line 777
					    {'ok',NState}
				    %% Line 778
				    <{'ok',Pid,_X_Extra}> when 'true' ->
					let <NState> =
					    apply %% Line 779
						  'set_pid'/3
						(%% Line 779
						 Pid, %% Line 779
						      Id, %% Line 779
							  State)
					in  %% Line 780
					    {'ok',NState}
				    %% Line 781
				    <{'error',Reason}> when 'true' ->
					let <_41> =
					    apply %% Line 782
						  'restarting'/1
						(_rec37)
					in  let <NState> =
						apply %% Line 782
						      'set_pid'/3
						    (_41, %% Line 782
							  Id, %% Line 782
							      State)
					    in  do  %% Line 783
						    case call 'logger':'allow'
							     ('error', 'supervisor') of
						      <'true'> when 'true' ->
							  ( case State of
							      ( <( {'state',_rec39,_155,_156,_157,_158,_159,_160,_161,_162,_163}
								   -| ['compiler_generated'] )> when 'true' ->
								    let <_45> =
									apply 'extract_child'/1
									    (Child)
								    in  let <_46> =
									    ~{'report'=>[{'supervisor',_rec39}|[{'errorContext','start_error'}|[{'reason',Reason}|[{'offender',_45}|[]]]]]|~{'label'=>{'supervisor','start_error'}}~}~
									in  call 'logger':'macro_log'
										(~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],'line'=>783,'mfa'=>{'supervisor','restart',3}}~, 'error', _46, ~{'domain'=>['otp'|['sasl']],'error_logger'=>~{'report_cb'=>fun 'supervisor':'format_log'/1,'tag'=>'error_report','type'=>'supervisor_report'}~,'logger_formatter'=>~{'title'=>[83|[85|[80|[69|[82|[86|[73|[83|[79|[82|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]]]]]}~,'report_cb'=>fun 'supervisor':'format_log'/2}~)
								-| ['compiler_generated'] )
							      ( <_164> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','state'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      <'false'> when 'true' ->
							  'ok'
						      ( <_51> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_51})
							-| ['compiler_generated'] )
						    end
						    %% Line 784
						    {{'try_again',Id},NState}
				    ( <_52> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_52})
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_154> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_144> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','child'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 786
	  <'rest_for_one',Child = {'child',_165,Id,_166,_167,_168,_169,_170},State = {'state',SupName,_171,_172,_173,_174,_175,_176,_177,_178,_179}> when 'true' ->
	      %% Line 787
	      ( case State of
		  ( <( {'state',_180,_181,_rec40,_182,_183,_184,_185,_186,_187,_188}
		       -| ['compiler_generated'] )> when 'true' ->
			case apply 'split_child'/2
				 (Id, _rec40) of
			  <{ChAfter,ChBefore}> when 'true' ->
			      %% Line 788
			      case apply 'restart_multiple_children'/3
				       (Child, ChAfter, SupName) of
				<{Return,ChAfter2}> when 'true' ->
				    let <_rec41> =
					apply %% Line 789
					      'append'/2
					    (%% Line 789
					     ChAfter2, %% Line 789
						       ChBefore)
				    in  %% Line 789
					case State of
					  <{'state',_190,_191,_192,_193,_194,_195,_196,_197,_198,_199}> when 'true' ->
					      let <_60> =
						  call 'erlang':'setelement'
						      (4, State, _rec41)
					      in  {Return,_60}
					  ( <_200> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','state'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
				( <_56> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_56})
				  -| ['compiler_generated'] )
			      end
			  ( <_55> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_55})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_189> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 790
	  <'one_for_all',Child,State = {'state',SupName,_201,_202,_203,_204,_205,_206,_207,_208,_209}> when 'true' ->
	      %% Line 791
	      ( case Child of
		  ( <( {'child',_210,_rec43,_211,_212,_213,_214,_215}
		       -| ['compiler_generated'] )> when 'true' ->
			( case State of
			    ( <( {'state',_217,_218,_rec44,_219,_220,_221,_222,_223,_224,_225}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <Children1> =
				      apply 'del_child'/2
					  (_rec43, _rec44)
				  in  %% Line 792
				      case apply 'restart_multiple_children'/3
					       (Child, Children1, SupName) of
					<{Return,NChildren}> when 'true' ->
					    %% Line 793
					    case State of
					      <{'state',_227,_228,_229,_230,_231,_232,_233,_234,_235,_236}> when 'true' ->
						  let <_69> =
						      call 'erlang':'setelement'
							  (4, State, NChildren)
						  in  {Return,_69}
					      ( <_237> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','state'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					( <_66> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_66})
					  -| ['compiler_generated'] )
				      end
			      -| ['compiler_generated'] )
			    ( <_226> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_216> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','child'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_72,_71,_70> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_72,_71,_70})
		  -| [{'function_name',{'restart',3}}] )
	    -| ['compiler_generated'] )
	end
'restart_multiple_children'/3 =
    %% Line 795
    fun (_0,_1,_2) ->
	let <Children1> =
	    apply %% Line 796
		  'terminate_children'/2
		(_1, _2)
	in  %% Line 797
	    case apply 'start_children'/2
		     (Children1, _2) of
	      %% Line 798
	      <_@r0 = {'ok',NChildren}> when 'true' ->
		  %% Line 799
		  _@r0
	      %% Line 800
	      <{'error',NChildren,{'failed_to_start_child',FailedId,_X_Reason}}> when 'true' ->
		  let <_12> =
		      case <> of
			%% Line 801
			<>
			    when ( try
				    ( let <_6> =
					  case ( call ( 'erlang'
							-| ['compiler_generated'] ):( 'is_record'
										      -| ['compiler_generated'] )
						     (_0, ( 'child'
							    -| ['compiler_generated'] ), ( 8
											   -| ['compiler_generated'] ))
						 -| ['compiler_generated'] ) of
					    ( <( 'true'
						 -| ['compiler_generated'] )> when 'true' ->
						  ( 'true'
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <( 'false'
						 -| ['compiler_generated'] )> when 'true' ->
						  ( 'fail'
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <( _4
						 -| ['compiler_generated'] )> when 'true' ->
						  ( _4
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				      in  let <_7> =
					      call 'erlang':'=:='
						  (( _6
						     -| ['compiler_generated'] ), 'true')
					  in  let <_8> =
						  call 'erlang':'element'
						      (3, _0)
					      in  let <_9> =
						      call 'erlang':'=:='
							  (FailedId, _8)
						  in  ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'and'
											     -| ['compiler_generated'] )
							    (_7, _9)
							-| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false'
				-| ['compiler_generated'] ) ->
			    %% Line 802
			    ( case _0 of
				( <( {'child',_rec46,_19,_20,_21,_22,_23,_24}
				     -| ['compiler_generated'] )> when 'true' ->
				      apply 'restarting'/1
					  (_rec46)
				  -| ['compiler_generated'] )
				( <_25> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','child'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			%% Line 803
			<> when 'true' ->
			    %% Line 804
			    {'restarting','undefined'}
		      end
		  in  let <_14> =
			  apply %% Line 806
				'set_pid'/3
			      (_12, %% Line 806
				    FailedId, %% Line 806
					      NChildren)
		      in  %% Line 806
			  {{'try_again',FailedId},_14}
	      ( <_15> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_15})
		-| ['compiler_generated'] )
	    end
'restarting'/1 =
    %% Line 809
    fun (_0) ->
	case _0 of
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_0) ->
	      {'restarting',Pid}
	  %% Line 810
	  <RPid> when 'true' ->
	      RPid
	end
'try_again_restart'/1 =
    %% Line 813
    fun (_0) ->
	let <_1> =
	    call %% Line 814
		 'erlang':%% Line 814
			  'self'
		()
	in  %% Line 814
	    call 'gen_server':'cast'
		(_1, {'try_again_restart',_0})
'terminate_children'/2 =
    %% Line 823
    fun (_0,_1) ->
	let <Terminate> =
	    fun (_12,_11) ->
		%% Line 825
		case <_12,_11> of
		  <_X_Id,Child = {'child',_19,_20,_21,_22,_23,_24,_25}>
		      when ( try
			      let <_6> =
				  call 'erlang':'element'
				      (5, Child)
			      in  call 'erlang':'=:='
				      (_6, 'temporary')
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false'
			  -| ['compiler_generated'] ) ->
		      do  %% Line 828
			  apply 'do_terminate'/2
			      (Child, _1)
			  %% Line 829
			  'remove'
		  %% Line 830
		  <_X_Id,Child> when 'true' ->
		      do  %% Line 831
			  apply 'do_terminate'/2
			      (Child, _1)
			  %% Line 832
			  case Child of
			    <{'child',_26,_27,_28,_29,_30,_31,_32}> when 'true' ->
				let <_10> =
				    call 'erlang':'setelement'
					(2, Child, 'undefined')
				in  {'update',_10}
			    ( <_33> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','child'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		end
	in  %% Line 834
	    case apply 'children_map'/2
		     (Terminate, _0) of
	      <{'ok',NChildren}> when 'true' ->
		  %% Line 835
		  NChildren
	      ( <_16> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_16})
		-| ['compiler_generated'] )
	    end
'do_terminate'/2 =
    %% Line 837
    fun (_0,_1) ->
	case <_0,_1> of
	  <Child = {'child',_31,_32,_33,_34,_35,_36,_37},SupName>
	      when ( try
		      let <_6> =
			  call 'erlang':'element'
			      (2, Child)
		      in  call 'erlang':'is_pid'
			      (_6)
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 838
	      ( case Child of
		  ( <( {'child',_rec48,_38,_39,_40,_41,_42,_43}
		       -| ['compiler_generated'] )> when 'true' ->
			( case Child of
			    ( <( {'child',_45,_46,_47,_48,_rec49,_49,_50}
				 -| ['compiler_generated'] )> when 'true' ->
				  do  case apply 'shutdown'/2
					       (_rec48, _rec49) of
					%% Line 839
					<'ok'> when 'true' ->
					    'ok'
					%% Line 841
					<{'error','normal'}>
					    when try
						  ( let <_14> =
							case ( call ( 'erlang'
								      -| ['compiler_generated'] ):( 'is_record'
												    -| ['compiler_generated'] )
								   (Child, ( 'child'
									     -| ['compiler_generated'] ), ( 8
													    -| ['compiler_generated'] ))
							       -| ['compiler_generated'] ) of
							  ( <( 'true'
							       -| ['compiler_generated'] )> when 'true' ->
								( 'true'
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							  ( <( 'false'
							       -| ['compiler_generated'] )> when 'true' ->
								( 'fail'
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							  ( <( _12
							       -| ['compiler_generated'] )> when 'true' ->
								( _12
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
						    in  let <_15> =
							    call 'erlang':'=:='
								(( _14
								   -| ['compiler_generated'] ), 'true')
							in  let <_16> =
								call 'erlang':'element'
								    (5, Child)
							    in  let <_17> =
								    call 'erlang':'=:='
									(_16, 'permanent')
								in  let <_18> =
									call ( 'erlang'
									       -| ['compiler_generated'] ):( 'and'
													     -| ['compiler_generated'] )
									    (_15, _17)
								    in  let <_19> =
									    call 'erlang':'not'
										(_18)
									in  let <_20> =
										call 'erlang':'is_boolean'
										    (_14)
									    in  ( call 'erlang':'and'
										      (_19, _20)
										  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      of <Try> ->
						  Try
					      catch <T,R> ->
						  'false' ->
					    'ok'
					%% Line 843
					<{'error',OtherReason}> when 'true' ->
					    %% Line 844
					    case call 'logger':'allow'
						     ('error', 'supervisor') of
					      <'true'> when 'true' ->
						  let <_21> =
						      apply 'extract_child'/1
							  (Child)
						  in  let <_22> =
							  ~{'report'=>[{'supervisor',SupName}|[{'errorContext','shutdown_error'}|[{'reason',OtherReason}|[{'offender',_21}|[]]]]]|~{'label'=>{'supervisor','shutdown_error'}}~}~
						      in  call 'logger':'macro_log'
							      (~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],'line'=>844,'mfa'=>{'supervisor','do_terminate',2}}~, 'error', _22, ~{'domain'=>['otp'|['sasl']],'error_logger'=>~{'report_cb'=>fun 'supervisor':'format_log'/1,'tag'=>'error_report','type'=>'supervisor_report'}~,'logger_formatter'=>~{'title'=>[83|[85|[80|[69|[82|[86|[73|[83|[79|[82|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]]]]]}~,'report_cb'=>fun 'supervisor':'format_log'/2}~)
					      <'false'> when 'true' ->
						  'ok'
					      ( <_27> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_27})
						-| ['compiler_generated'] )
					    end
					( <_28> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_28})
					  -| ['compiler_generated'] )
				      end
				      %% Line 846
				      'ok'
			      -| ['compiler_generated'] )
			    ( <_51> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','child'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_44> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','child'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 847
	  <_X_Child,_X_SupName> when 'true' ->
	      %% Line 848
	      'ok'
	end
'shutdown'/2 =
    %% Line 860
    fun (_0,_1) ->
	case <_0,_1> of
	  <Pid,'brutal_kill'> when 'true' ->
	      %% Line 861
	      case apply 'monitor_child'/1
		       (Pid) of
		%% Line 862
		<'ok'> when 'true' ->
		    do  %% Line 863
			call 'erlang':'exit'
			    (Pid, 'kill')
			%% Line 864
			receive
			  %% Line 865
			  <{'DOWN',_X_MRef,'process',_6,'killed'}>
			      when call 'erlang':'=:='
				    (_6,
				     Pid) ->
			      %% Line 866
			      'ok'
			  %% Line 867
			  <{'DOWN',_X_MRef,'process',_7,OtherReason}>
			      when call 'erlang':'=:='
				    (_7,
				     Pid) ->
			      %% Line 868
			      {'error',OtherReason}
			after 'infinity' ->
			  'true'
		%% Line 870
		<_@r0 = {'error',Reason}> when 'true' ->
		    %% Line 871
		    _@r0
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 873
	  <Pid,Time> when 'true' ->
	      %% Line 874
	      case apply 'monitor_child'/1
		       (Pid) of
		%% Line 875
		<'ok'> when 'true' ->
		    do  %% Line 876
			call 'erlang':'exit'
			    (Pid, 'shutdown')
			%% Line 877
			receive
			  %% Line 878
			  <{'DOWN',_X_MRef,'process',_8,'shutdown'}>
			      when call 'erlang':'=:='
				    (_8,
				     Pid) ->
			      %% Line 879
			      'ok'
			  %% Line 880
			  <{'DOWN',_X_MRef,'process',_9,OtherReason}>
			      when call 'erlang':'=:='
				    (_9,
				     Pid) ->
			      %% Line 881
			      {'error',OtherReason}
			after %% Line 882
			      Time ->
			  do  %% Line 883
			      call 'erlang':'exit'
				  (Pid, 'kill')
			      %% Line 884
			      receive
				%% Line 885
				<{'DOWN',_X_MRef,'process',_10,OtherReason}>
				    when call 'erlang':'=:='
					  (_10,
					   Pid) ->
				    %% Line 886
				    {'error',OtherReason}
			      after 'infinity' ->
				'true'
		%% Line 889
		<_@r1 = {'error',Reason}> when 'true' ->
		    %% Line 890
		    _@r1
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_3})
		  -| ['compiler_generated'] )
	      end
	end
'monitor_child'/1 =
    %% Line 894
    fun (_0) ->
	do  %% Line 900
	    call 'erlang':'monitor'
		('process', _0)
	    do  %% Line 901
		call 'erlang':'unlink'
		    (_0)
		%% Line 903
		receive
		  %% Line 906
		  <{'EXIT',_2,Reason}>
		      when call 'erlang':'=:='
			    (_2,
			     _0) ->
		      %% Line 907
		      receive
			%% Line 908
			<{'DOWN',_3,'process',_4,_5}>
			    when call 'erlang':'=:='
				  (_4,
				   _0) ->
			    %% Line 909
			    {'error',Reason}
		      after 'infinity' ->
			'true'
		after %% Line 911
		      0 ->
		  %% Line 918
		  'ok'
'terminate_dynamic_children'/1 =
    %% Line 930
    fun (_0) ->
	let <Child> =
	    apply %% Line 931
		  'get_dynamic_child'/1
		(_0)
	in  %% Line 932
	    case apply 'monitor_dynamic_children'/2
		     (Child, _0) of
	      <{Pids,EStack0}> when 'true' ->
		  let <Sz> =
		      call %% Line 933
			   'maps':%% Line 933
				  'size'
			  (%% Line 933
			   Pids)
		  in  %% Line 934
		      ( case Child of
			  ( <( {'child',_52,_53,_54,_55,_rec50,_56,_57}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_30> =
				    case _rec50 of
				      %% Line 935
				      <'brutal_kill'> when 'true' ->
					  let <_12> =
					      fun (_8,_7,_6) ->
						  %% Line 936
						  call 'erlang':'exit'
						      (_8, 'kill')
					  in  do  %% Line 936
						  call 'maps':'fold'
						      (_12, 'ok', Pids)
						  %% Line 937
						  apply 'wait_dynamic_children'/5
						      (Child, Pids, Sz, 'undefined', EStack0)
				      %% Line 938
				      <'infinity'> when 'true' ->
					  let <_19> =
					      fun (_15,_14,_13) ->
						  %% Line 939
						  call 'erlang':'exit'
						      (_15, 'shutdown')
					  in  do  %% Line 939
						  call 'maps':'fold'
						      (_19, 'ok', Pids)
						  %% Line 940
						  apply 'wait_dynamic_children'/5
						      (Child, Pids, Sz, 'undefined', EStack0)
				      %% Line 941
				      <Time> when 'true' ->
					  let <_26> =
					      fun (_22,_21,_20) ->
						  %% Line 942
						  call 'erlang':'exit'
						      (_22, 'shutdown')
					  in  do  %% Line 942
						  call 'maps':'fold'
						      (_26, 'ok', Pids)
						  let <_27> =
						      call %% Line 943
							   'erlang':%% Line 943
								    'self'
							  ()
						  in  let <TRef> =
							  call %% Line 943
							       'erlang':%% Line 943
									'start_timer'
							      (%% Line 943
							       Time, _27, %% Line 943
									  'kill')
						      in  %% Line 944
							  apply 'wait_dynamic_children'/5
							      (Child, Pids, Sz, TRef, EStack0)
				    end
				in  let <_50> =
					fun (_46,_45,_44) ->
					    %% Line 948
					    case call 'logger':'allow'
						     ('error', 'supervisor') of
					      <'true'> when 'true' ->
						  %% Line 949
						  ( case _0 of
						      ( <( {'state',_rec51,_66,_67,_68,_69,_70,_71,_72,_73,_74}
							   -| ['compiler_generated'] )> when 'true' ->
							    case Child of
							      <{'child',_76,_77,_78,_79,_80,_81,_82}> when 'true' ->
								  let <_36> =
								      call 'erlang':'setelement'
									  (2, Child, _45)
								  in  let <_37> =
									  apply 'extract_child'/1
									      (_36)
								      in  let <_38> =
									      ~{'report'=>[{'supervisor',_rec51}|[{'errorContext','shutdown_error'}|[{'reason',_46}|[{'offender',_37}|[]]]]]|~{'label'=>{'supervisor','shutdown_error'}}~}~
									  in  call 'logger':'macro_log'
										  (~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],'line'=>948,'mfa'=>{'supervisor','terminate_dynamic_children',1}}~, 'error', _38, ~{'domain'=>['otp'|['sasl']],'error_logger'=>~{'report_cb'=>fun 'supervisor':'format_log'/1,'tag'=>'error_report','type'=>'supervisor_report'}~,'logger_formatter'=>~{'title'=>[83|[85|[80|[69|[82|[86|[73|[83|[79|[82|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]]]]]}~,'report_cb'=>fun 'supervisor':'format_log'/2}~)
							      ( <_83> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','child'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							-| ['compiler_generated'] )
						      ( <_75> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','state'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      %% Line 949
					      <'false'> when 'true' ->
						  'ok'
					      ( <_43> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_43})
						-| ['compiler_generated'] )
					    end
				    in  %% Line 947
					call 'maps':'fold'
					    (_50, %% Line 950
						  'ok', _30)
			    -| ['compiler_generated'] )
			  ( <_58> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','child'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      ( <_2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_2})
		-| ['compiler_generated'] )
	    end
'monitor_dynamic_children'/2 =
    %% Line 952
    fun (_0,_1) ->
	let <_20> =
	    fun (_17,_16) ->
		%% Line 953
		case <_17,_16> of
		  <P,_@r0 = {Pids,EStack}>
		      when call 'erlang':'is_pid'
			    (P) ->
		      %% Line 954
		      case apply 'monitor_child'/1
			       (P) of
			%% Line 955
			<'ok'> when 'true' ->
			    let <_4> =
				call %% Line 956
				     'maps':%% Line 956
					    'put'
				    (%% Line 956
				     P, %% Line 956
					P, %% Line 956
					   Pids)
			    in  %% Line 956
				{_4,EStack}
			%% Line 957
			<{'error','normal'}>
			    when try
				  ( let <_7> =
					case ( call ( 'erlang'
						      -| ['compiler_generated'] ):( 'is_record'
										    -| ['compiler_generated'] )
						   (_0, ( 'child'
							  -| ['compiler_generated'] ), ( 8
											 -| ['compiler_generated'] ))
					       -| ['compiler_generated'] ) of
					  ( <( 'true'
					       -| ['compiler_generated'] )> when 'true' ->
						( 'true'
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <( 'false'
					       -| ['compiler_generated'] )> when 'true' ->
						( 'fail'
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <( _5
					       -| ['compiler_generated'] )> when 'true' ->
						( _5
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
				    in  let <_8> =
					    call 'erlang':'=:='
						(( _7
						   -| ['compiler_generated'] ), 'true')
					in  let <_9> =
						call 'erlang':'element'
						    (5, _0)
					    in  let <_10> =
						    call 'erlang':'=:='
							(_9, 'permanent')
						in  let <_11> =
							call ( 'erlang'
							       -| ['compiler_generated'] ):( 'and'
											     -| ['compiler_generated'] )
							    (_8, _10)
						    in  let <_12> =
							    call 'erlang':'not'
								(_11)
							in  let <_13> =
								call 'erlang':'is_boolean'
								    (_7)
							    in  ( call 'erlang':'and'
								      (_12, _13)
								  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    %% Line 958
			    _@r0
			%% Line 959
			<{'error',Reason}> when 'true' ->
			    let <_14> =
				apply %% Line 960
				      'maps_prepend'/3
				    (%% Line 960
				     Reason, %% Line 960
					     P, %% Line 960
						EStack)
			    in  %% Line 960
				{Pids,_14}
			( <_15> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_15})
			  -| ['compiler_generated'] )
		      end
		  %% Line 962
		  <{'restarting',_23},_@r1 = {Pids,EStack}> when 'true' ->
		      %% Line 963
		      _@r1
		  ( <_19,_18> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_19,_18})
			  -| [{'function_name',{'-monitor_dynamic_children/2-fun-0-',2}}] )
		    -| ['compiler_generated'] )
		end
	in  let <_3> =
		call %% Line 964
		     'maps':%% Line 964
			    'new'
		    ()
	    in  let <_2> =
		    call %% Line 964
			 'maps':%% Line 964
				'new'
			()
		in  %% Line 953
		    apply 'dyn_fold'/3
			(_20, %% Line 964
			      {_3,_2}, _1)
'wait_dynamic_children'/5 =
    %% Line 966
    fun (_0,_1,_2,_3,_4) ->
	case <_0,_1,_2,_3,_4> of
	  <_X_Child,_X_Pids,0,'undefined',EStack> when 'true' ->
	      %% Line 967
	      EStack
	  %% Line 968
	  <_X_Child,_X_Pids,0,TRef,EStack> when 'true' ->
	      do  %% Line 971
		  ( call ( 'erlang'
			   -| ['result_not_wanted'] ):( 'cancel_timer'
							-| ['result_not_wanted'] )
			(TRef)
		    -| ['result_not_wanted'] )
		  %% Line 972
		  receive
		    %% Line 973
		    <{'timeout',_41,'kill'}>
			when call 'erlang':'=:='
			      (_41,
			       TRef) ->
			%% Line 974
			EStack
		  after %% Line 975
			0 ->
		    %% Line 976
		    EStack
	  %% Line 978
	  <Child = {'child',_42,_43,_44,_45,'brutal_kill',_46,_47},Pids,Sz,%% Line 979
									   TRef,%% Line 979
										EStack> when 'true' ->
	      %% Line 980
	      receive
		%% Line 981
		<{'DOWN',_X_MRef,'process',Pid,'killed'}> when 'true' ->
		    let <_7> =
			call %% Line 982
			     'maps':%% Line 982
				    'remove'
			    (%% Line 982
			     Pid, %% Line 982
				  Pids)
		    in  let <_6> =
			    call %% Line 982
				 'erlang':%% Line 982
					  '-'
				(%% Line 982
				 Sz, %% Line 982
				     1)
			in  %% Line 982
			    apply 'wait_dynamic_children'/5
				(Child, _7, _6, %% Line 983
						TRef, %% Line 983
						      EStack)
		%% Line 985
		<{'DOWN',_X_MRef,'process',Pid,Reason}> when 'true' ->
		    let <_10> =
			call %% Line 986
			     'maps':%% Line 986
				    'remove'
			    (%% Line 986
			     Pid, %% Line 986
				  Pids)
		    in  let <_9> =
			    call %% Line 986
				 'erlang':%% Line 986
					  '-'
				(%% Line 986
				 Sz, %% Line 986
				     1)
			in  let <_8> =
				apply %% Line 987
				      'maps_prepend'/3
				    (%% Line 987
				     Reason, %% Line 987
					     Pid, %% Line 987
						  EStack)
			    in  %% Line 986
				apply 'wait_dynamic_children'/5
				    (Child, _10, _9, %% Line 987
						     TRef, _8)
	      after 'infinity' ->
		'true'
	  %% Line 989
	  <Child,Pids,Sz,TRef,EStack> when 'true' ->
	      %% Line 990
	      receive
		%% Line 991
		<{'DOWN',_X_MRef,'process',Pid,'shutdown'}> when 'true' ->
		    let <_12> =
			call %% Line 992
			     'maps':%% Line 992
				    'remove'
			    (%% Line 992
			     Pid, %% Line 992
				  Pids)
		    in  let <_11> =
			    call %% Line 992
				 'erlang':%% Line 992
					  '-'
				(%% Line 992
				 Sz, %% Line 992
				     1)
			in  %% Line 992
			    apply 'wait_dynamic_children'/5
				(Child, _12, _11, %% Line 993
						  TRef, %% Line 993
							EStack)
		%% Line 995
		<{'DOWN',_X_MRef,'process',Pid,{'shutdown',_48}}> when 'true' ->
		    let <_14> =
			call %% Line 996
			     'maps':%% Line 996
				    'remove'
			    (%% Line 996
			     Pid, %% Line 996
				  Pids)
		    in  let <_13> =
			    call %% Line 996
				 'erlang':%% Line 996
					  '-'
				(%% Line 996
				 Sz, %% Line 996
				     1)
			in  %% Line 996
			    apply 'wait_dynamic_children'/5
				(Child, _14, _13, %% Line 997
						  TRef, %% Line 997
							EStack)
		%% Line 999
		<{'DOWN',_X_MRef,'process',Pid,'normal'}>
		    when try
			  ( let <_17> =
				case ( call ( 'erlang'
					      -| ['compiler_generated'] ):( 'is_record'
									    -| ['compiler_generated'] )
					   (Child, ( 'child'
						     -| ['compiler_generated'] ), ( 8
										    -| ['compiler_generated'] ))
				       -| ['compiler_generated'] ) of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					( 'true'
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					( 'fail'
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <( _15
				       -| ['compiler_generated'] )> when 'true' ->
					( _15
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			    in  let <_18> =
				    call 'erlang':'=:='
					(( _17
					   -| ['compiler_generated'] ), 'true')
				in  let <_19> =
					call 'erlang':'element'
					    (5, Child)
				    in  let <_20> =
					    call 'erlang':'=:='
						(_19, 'permanent')
					in  let <_21> =
						call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_18, _20)
					    in  let <_22> =
						    call 'erlang':'not'
							(_21)
						in  let <_23> =
							call 'erlang':'is_boolean'
							    (_17)
						    in  ( call 'erlang':'and'
							      (_22, _23)
							  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_25> =
			call %% Line 1000
			     'maps':%% Line 1000
				    'remove'
			    (%% Line 1000
			     Pid, %% Line 1000
				  Pids)
		    in  let <_24> =
			    call %% Line 1000
				 'erlang':%% Line 1000
					  '-'
				(%% Line 1000
				 Sz, %% Line 1000
				     1)
			in  %% Line 1000
			    apply 'wait_dynamic_children'/5
				(Child, _25, _24, %% Line 1001
						  TRef, %% Line 1001
							EStack)
		%% Line 1003
		<{'DOWN',_X_MRef,'process',Pid,Reason}> when 'true' ->
		    let <_28> =
			call %% Line 1004
			     'maps':%% Line 1004
				    'remove'
			    (%% Line 1004
			     Pid, %% Line 1004
				  Pids)
		    in  let <_27> =
			    call %% Line 1004
				 'erlang':%% Line 1004
					  '-'
				(%% Line 1004
				 Sz, %% Line 1004
				     1)
			in  let <_26> =
				apply %% Line 1005
				      'maps_prepend'/3
				    (%% Line 1005
				     Reason, %% Line 1005
					     Pid, %% Line 1005
						  EStack)
			    in  %% Line 1004
				apply 'wait_dynamic_children'/5
				    (Child, _28, _27, %% Line 1005
						      TRef, _26)
		%% Line 1007
		<{'timeout',_49,'kill'}>
		    when call 'erlang':'=:='
			  (_49,
			   TRef) ->
		    let <_35> =
			fun (_31,_30,_29) ->
			    %% Line 1008
			    call 'erlang':'exit'
				(_31, 'kill')
		    in  do  %% Line 1008
			    call 'maps':'fold'
				(_35, 'ok', Pids)
			    %% Line 1009
			    apply 'wait_dynamic_children'/5
				(Child, Pids, Sz, 'undefined', EStack)
	      after 'infinity' ->
		'true'
	end
'maps_prepend'/3 =
    %% Line 1012
    fun (_0,_1,_2) ->
	%% Line 1013
	case call 'maps':'find'
		 (_0, _2) of
	  %% Line 1014
	  <{'ok',Values}> when 'true' ->
	      %% Line 1015
	      call 'maps':'put'
		  (_0, [_1|Values], _2)
	  %% Line 1016
	  <'error'> when 'true' ->
	      %% Line 1017
	      call 'maps':'put'
		  (_0, [_1|[]], _2)
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_3})
	    -| ['compiler_generated'] )
	end
'save_child'/2 =
    %% Line 1030
    fun (_0,_1) ->
	case <_0,_1> of
	  <Child = {'child',_14,_15,_16 = {M,F,_17},_18,_19,_20,_21},State>
	      when ( try
		      let <_6> =
			  call 'erlang':'element'
			      (5, Child)
		      in  call 'erlang':'=:='
			      (_6, 'temporary')
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      let <_rec53> = {%% Line 1031
		   M,%% Line 1031
		     F,%% Line 1031
		       'undefined'}
	      in  %% Line 1031
		  case Child of
		    <{'child',_22,_23,_24,_25,_26,_27,_28}> when 'true' ->
			let <_11> =
			    call 'erlang':'setelement'
				(4, Child, _rec53)
			in  apply 'do_save_child'/2
				(_11, State)
		    ( <_29> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','child'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1032
	  <Child,State> when 'true' ->
	      %% Line 1033
	      apply 'do_save_child'/2
		  (Child, State)
	end
'do_save_child'/2 =
    %% Line 1036
    fun (_0,_1) ->
	case <_0,_1> of
	  <Child = {'child',_8,Id,_9,_10,_11,_12,_13},State = {'state',_14,_15,{Ids,Db},_16,_17,_18,_19,_20,_21,_22}> when 'true' ->
	      %% Line 1037
	      case <> of
		( <>
		      when call 'erlang':'is_map'
			    (Db) ->
		      let <_2> =
			  ~{Id=>Child|Db}~
		      in  let <_rec55> =
			      {[Id|Ids],_2}
			  in  case State of
				<{'state',_23,_24,_25,_26,_27,_28,_29,_30,_31,_32}> when 'true' ->
				    call 'erlang':'setelement'
					(4, State, _rec55)
				( <_33> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','state'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
		  -| ['compiler_generated'] )
		( <> when 'true' ->
		      ( primop 'match_fail'
			    ({'badmap',Db})
			-| [{'eval_failure','badmap'}] )
		  -| ['compiler_generated'] )
	      end
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'do_save_child',2}}] )
	    -| ['compiler_generated'] )
	end
'del_child'/2 =
    %% Line 1041
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'child',Pid,_30,_31,_32,_33,_34,_35},State = {'state',_36,_37,_38,_39,_40,_41,_42,_43,_44,_45}>
	      when ( try
		      let <_6> =
			  call 'erlang':'element'
			      (3, State)
		      in  call 'erlang':'=:='
			      (_6, 'simple_one_for_one')
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 1042
	      apply 'dyn_erase'/2
		  (Pid, State)
	  %% Line 1043
	  <Child = {'child',_46,_47,_48,_49,_50,_51,_52},State = {'state',_53,_54,_55,_56,_57,_58,_59,_60,_61,_62}> when ( 'true'
															   -| ['compiler_generated'] ) ->
	      %% Line 1044
	      ( case Child of
		  ( <( {'child',_63,_rec57,_64,_65,_66,_67,_68}
		       -| ['compiler_generated'] )> when 'true' ->
			( case State of
			    ( <( {'state',_70,_71,_rec58,_72,_73,_74,_75,_76,_77,_78}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <NChildren> =
				      apply 'del_child'/2
					  (_rec57, _rec58)
				  in  %% Line 1045
				      case State of
					<{'state',_80,_81,_82,_83,_84,_85,_86,_87,_88,_89}> when 'true' ->
					    call 'erlang':'setelement'
						(4, State, NChildren)
					( <_90> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','state'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
			      -| ['compiler_generated'] )
			    ( <_79> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_69> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','child'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1046
	  <Id,{Ids,Db}> when 'true' ->
	      %% Line 1047
	      case call 'maps':'get'
		       (Id, Db) of
		%% Line 1048
		<Child = {'child',_91,_92,_93,_94,_95,_96,_97}>
		    when ( try
			    let <_19> =
				call 'erlang':'element'
				    (5, Child)
			    in  call 'erlang':'=:='
				    (_19, 'temporary')
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
			-| ['compiler_generated'] ) ->
		    let <_22> =
			call %% Line 1049
			     'lists':%% Line 1049
				     'delete'
			    (%% Line 1049
			     Id, %% Line 1049
				 Ids)
		    in  let <_21> =
			    call %% Line 1049
				 'maps':%% Line 1049
					'remove'
				(%% Line 1049
				 Id, %% Line 1049
				     Db)
			in  %% Line 1049
			    {_22,_21}
		%% Line 1050
		<Child> when 'true' ->
		    %% Line 1051
		    case Child of
		      <{'child',_98,_99,_100,_101,_102,_103,_104}> when 'true' ->
			  let <_25> =
			      call 'erlang':'setelement'
				  (2, Child, 'undefined')
			  in  case <> of
				( <>
				      when call 'erlang':'is_map'
					    (Db) ->
				      let <_26> =
					  ~{Id=>_25|Db}~
				      in  {Ids,_26}
				  -| ['compiler_generated'] )
				( <> when 'true' ->
				      ( primop 'match_fail'
					    ({'badmap',Db})
					-| [{'eval_failure','badmap'}] )
				  -| ['compiler_generated'] )
			      end
		      ( <_105> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','child'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
	      end
	  ( <_29,_28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_29,_28})
		  -| [{'function_name',{'del_child',2}}] )
	    -| ['compiler_generated'] )
	end
'split_child'/2 =
    %% Line 1058
    fun (_0,_1) ->
	case <_0,_1> of
	  <Id,{Ids,Db}> when 'true' ->
	      %% Line 1059
	      case apply 'split_ids'/3
		       (Id, Ids, []) of
		<{IdsAfter,IdsBefore}> when 'true' ->
		    let <DbBefore> =
			call %% Line 1060
			     'maps':%% Line 1060
				    'with'
			    (%% Line 1060
			     IdsBefore, %% Line 1060
					Db)
		    in  %% Line 1061
			case call 'maps':'with'
				 (IdsAfter, Db) of
			  <DbAfter = ~{Id:=Ch}~> when 'true' ->
			      %% Line 1062
			      case Ch of
				<{'child',_11,_12,_13,_14,_15,_16,_17}> when 'true' ->
				    let <_7> =
					call 'erlang':'setelement'
					    (2, Ch, 'undefined')
				    in  case <> of
					  ( <>
						when call 'erlang':'is_map'
						      (DbAfter) ->
						let <_8> =
						    ~{Id=>_7|DbAfter}~
						in  {{IdsAfter,_8},{IdsBefore,DbBefore}}
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						( primop 'match_fail'
						      ({'badmap',DbAfter})
						  -| [{'eval_failure','badmap'}] )
					    -| ['compiler_generated'] )
					end
				( <_18> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','child'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  ( <_4> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_4})
			    -| ['compiler_generated'] )
			end
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9})
		  -| [{'function_name',{'split_child',2}}] )
	    -| ['compiler_generated'] )
	end
'split_ids'/3 =
    %% Line 1064
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Id,[_7|Ids],After>
	      when call 'erlang':'=:='
		    (_7,
		     Id) ->
	      let <_3> =
		  call %% Line 1065
		       'lists':%% Line 1065
			       'reverse'
		      (%% Line 1065
		       [Id|After])
	      in  %% Line 1065
		  {_3,Ids}
	  %% Line 1066
	  <Id,[Other|Ids],After> when 'true' ->
	      %% Line 1067
	      apply 'split_ids'/3
		  (Id, Ids, [Other|After])
	  ( <_6,_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5,_4})
		  -| [{'function_name',{'split_ids',3}}] )
	    -| ['compiler_generated'] )
	end
'find_child'/2 =
    %% Line 1072
    fun (_0,_1) ->
	case <_0,_1> of
	  <Pid,State = {'state',_17,_18,_19,_20,_21,_22,_23,_24,_25,_26}>
	      when try
		    let <_2> =
			call 'erlang':'is_pid'
			    (Pid)
		    in  let <_7> =
			    call 'erlang':'element'
				(3, State)
			in  let <_8> =
				call 'erlang':'=:='
				    (_7, 'simple_one_for_one')
			    in  call 'erlang':'and'
				    (_2, _8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1073
	      case apply 'find_dynamic_child'/2
		       (Pid, State) of
		%% Line 1074
		<'error'> when 'true' ->
		    let <_10> =
			apply %% Line 1075
			      'restarting'/1
			    (%% Line 1075
			     Pid)
		    in  %% Line 1075
			case apply 'find_dynamic_child'/2
				 (_10, State) of
			  %% Line 1076
			  <'error'> when 'true' ->
			      %% Line 1077
			      case call 'erlang':'is_process_alive'
				       (Pid) of
				%% Line 1078
				<'true'> when 'true' ->
				    'error'
				%% Line 1079
				<'false'> when 'true' ->
				    let <_11> =
					apply 'get_dynamic_child'/1
					    (State)
				    in  {'ok',_11}
				( <_12> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_12})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1081
			  <Other> when 'true' ->
			      %% Line 1082
			      Other
			end
		%% Line 1084
		<Other> when 'true' ->
		    %% Line 1085
		    Other
	      end
	  %% Line 1087
	  <Id,{'state',_27,_28,{_X_Ids,Db},_29,_30,_31,_32,_33,_34,_35}> when 'true' ->
	      %% Line 1088
	      call 'maps':'find'
		  (Id, Db)
	  ( <_16,_15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15})
		  -| [{'function_name',{'find_child',2}}] )
	    -| ['compiler_generated'] )
	end
'find_child_and_args'/2 =
    %% Line 1095
    fun (_0,_1) ->
	case <_0,_1> of
	  <Pid,State = {'state',_16,_17,_18,_19,_20,_21,_22,_23,_24,_25}>
	      when ( try
		      let <_6> =
			  call 'erlang':'element'
			      (3, State)
		      in  call 'erlang':'=:='
			      (_6, 'simple_one_for_one')
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 1096
	      case apply 'find_dynamic_child'/2
		       (Pid, State) of
		%% Line 1097
		<{'ok',Child = {'child',_26,_27,{M,F,_28},_29,_30,_31,_32}}> when 'true' ->
		    %% Line 1098
		    case apply 'dyn_args'/2
			     (Pid, State) of
		      <{'ok',Args}> when 'true' ->
			  let <_rec62> = {%% Line 1099
			       M,%% Line 1099
				 F,%% Line 1099
				   Args}
			  in  %% Line 1099
			      case Child of
				<{'child',_33,_34,_35,_36,_37,_38,_39}> when 'true' ->
				    let <_12> =
					call 'erlang':'setelement'
					    (4, Child, _rec62)
				    in  {'ok',_12}
				( <_40> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','child'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
		      ( <_8> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_8})
			-| ['compiler_generated'] )
		    end
		%% Line 1100
		<'error'> when 'true' ->
		    %% Line 1101
		    'error'
		( <_13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1103
	  <Pid,State>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      %% Line 1104
	      apply 'find_child_by_pid'/2
		  (Pid, State)
	  %% Line 1105
	  <Id,{'state',_41,_42,{_X_Ids,Db},_43,_44,_45,_46,_47,_48,_49}> when 'true' ->
	      %% Line 1106
	      call 'maps':'find'
		  (Id, Db)
	  ( <_15,_14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_15,_14})
		  -| [{'function_name',{'find_child_and_args',2}}] )
	    -| ['compiler_generated'] )
	end
'find_dynamic_child'/2 =
    %% Line 1112
    fun (_0,_1) ->
	%% Line 1113
	case apply 'dyn_exists'/2
		 (_0, _1) of
	  %% Line 1114
	  <'true'> when 'true' ->
	      let <Child> =
		  apply %% Line 1115
			'get_dynamic_child'/1
		      (_1)
	      in  %% Line 1116
		  case Child of
		    <{'child',_9,_10,_11,_12,_13,_14,_15}> when 'true' ->
			let <_5> =
			    call 'erlang':'setelement'
				(2, Child, _0)
			in  {'ok',_5}
		    ( <_16> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','child'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1117
	  <'false'> when 'true' ->
	      %% Line 1118
	      'error'
	  ( <_6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_6})
	    -| ['compiler_generated'] )
	end
'find_child_by_pid'/2 =
    %% Line 1124
    fun (_0,_1) ->
	case <_0,_1> of
	  <Pid,{'state',_15,_16,{_X_Ids,Db},_17,_18,_19,_20,_21,_22,_23}> when 'true' ->
	      let <Fun> =
		  fun (_4,_3,_2) ->
		      %% Line 1125
		      case <_4,_3,_2> of
			<_X_Id,Ch = {'child',P,_24,_25,_26,_27,_28,_29},_30>
			    when call 'erlang':'=:='
				  (P,
				   Pid) ->
			    %% Line 1126
			    call 'erlang':'throw'
				(Ch)
			%% Line 1127
			<_31,_32,'error'> when 'true' ->
			    %% Line 1128
			    'error'
			( <_7,_6,_5> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_7,_6,_5})
				-| [{'function_name',{'-find_child_by_pid/2-fun-0-',3}}] )
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 1130
		  try
		      call 'maps':'fold'
			  (Fun, 'error', Db)
		  of <_9> ->
		      _9
		  catch <_12,_11,_10> ->
		      %% Line 1131
		      case <_12,_11,_10> of
			<( 'throw'
			   -| ['compiler_generated'] ),Child,_33> when 'true' ->
			    {'ok',Child}
			( <_34,_35,_36> when 'true' ->
			      primop 'raise'
				  (_36, _35)
			  -| ['compiler_generated'] )
		      end
	  ( <_14,_13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13})
		  -| [{'function_name',{'find_child_by_pid',2}}] )
	    -| ['compiler_generated'] )
	end
'get_dynamic_child'/1 =
    %% Line 1137
    fun (_0) ->
	case _0 of
	  <{'state',_3,_4,{[Id|[]],Db},_5,_6,_7,_8,_9,_10,_11}> when 'true' ->
	      %% Line 1138
	      case Db of
		<~{Id:=Child}~> when 'true' ->
		    %% Line 1139
		    Child
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_1})
		  -| ['compiler_generated'] )
	      end
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'get_dynamic_child',1}}] )
	    -| ['compiler_generated'] )
	end
'set_pid'/3 =
    %% Line 1144
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Pid,Id,State = {'state',_15,_16,Children,_17,_18,_19,_20,_21,_22,_23}> when 'true' ->
	      let <_rec65> =
		  apply %% Line 1145
			'set_pid'/3
		      (%% Line 1145
		       Pid, %% Line 1145
			    Id, %% Line 1145
				Children)
	      in  %% Line 1145
		  case State of
		    <{'state',_24,_25,_26,_27,_28,_29,_30,_31,_32,_33}> when 'true' ->
			call 'erlang':'setelement'
			    (4, State, _rec65)
		    ( <_34> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1146
	  <Pid,Id,{Ids,Db}> when 'true' ->
	      let <_10> =
		  fun (_8) ->
		      %% Line 1147
		      case _8 of
			<{'child',_35,_36,_37,_38,_39,_40,_41}> when 'true' ->
			    call 'erlang':'setelement'
				(2, _8, Pid)
			( <_42> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','child'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	      in  let <NewDb> =
		      call %% Line 1147
			   'maps':%% Line 1147
				  'update_with'
			  (%% Line 1147
			   Id, _10, %% Line 1147
				    Db)
		  in  %% Line 1148
		      {Ids,NewDb}
	  ( <_14,_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13,_12})
		  -| [{'function_name',{'set_pid',3}}] )
	    -| ['compiler_generated'] )
	end
'remove_child'/2 =
    %% Line 1152
    fun (_0,_1) ->
	case <_0,_1> of
	  <Id,State = {'state',_9,_10,{Ids,Db},_11,_12,_13,_14,_15,_16,_17}> when 'true' ->
	      let <NewIds> =
		  call %% Line 1153
		       'lists':%% Line 1153
			       'delete'
		      (%% Line 1153
		       Id, %% Line 1153
			   Ids)
	      in  let <NewDb> =
		      call %% Line 1154
			   'maps':%% Line 1154
				  'remove'
			  (%% Line 1154
			   Id, %% Line 1154
			       Db)
		  in  let <_rec68> = {%% Line 1155
			   NewIds,%% Line 1155
				  NewDb}
		      in  %% Line 1155
			  case State of
			    <{'state',_18,_19,_20,_21,_22,_23,_24,_25,_26,_27}> when 'true' ->
				call 'erlang':'setelement'
				    (4, State, _rec68)
			    ( <_28> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
	  ( <_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7})
		  -| [{'function_name',{'remove_child',2}}] )
	    -| ['compiler_generated'] )
	end
'children_map'/2 =
    %% Line 1167
    fun (_0,_1) ->
	case <_0,_1> of
	  <Fun,{Ids,Db}> when 'true' ->
	      %% Line 1168
	      apply 'children_map'/4
		  (Fun, Ids, Db, [])
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'children_map',2}}] )
	    -| ['compiler_generated'] )
	end
'children_map'/4 =
    %% Line 1170
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Fun,[Id|Ids],Db,Acc> when 'true' ->
	      let <_4> =
		  call %% Line 1171
		       'maps':%% Line 1171
			      'get'
		      (%% Line 1171
		       Id, %% Line 1171
			   Db)
	      in  %% Line 1171
		  case apply Fun
			   (Id, _4) of
		    %% Line 1172
		    <{'update',Child}> when 'true' ->
			%% Line 1173
			case <> of
			  ( <>
				when call 'erlang':'is_map'
				      (Db) ->
				let <_5> =
				    ~{Id=>Child|Db}~
				in  apply 'children_map'/4
					(Fun, Ids, _5, [Id|Acc])
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				( primop 'match_fail'
				      ({'badmap',Db})
				  -| [{'eval_failure','badmap'}] )
			    -| ['compiler_generated'] )
			end
		    %% Line 1174
		    <'remove'> when 'true' ->
			let <_6> =
			    call %% Line 1175
				 'maps':%% Line 1175
					'remove'
				(%% Line 1175
				 Id, %% Line 1175
				     Db)
			in  %% Line 1175
			    apply 'children_map'/4
				(Fun, Ids, _6, Acc)
		    %% Line 1176
		    <{'abort',Reason}> when 'true' ->
			let <_7> =
			    call %% Line 1177
				 'lists':%% Line 1177
					 'reverse'
				(%% Line 1177
				 Ids)
			in  let <_8> =
				call %% Line 1177
				     'erlang':%% Line 1177
					      '++'
				    (_7, %% Line 1177
					 [Id|Acc])
			    in  %% Line 1177
				{'error',{_8,Db},Reason}
		    ( <_9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_9})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1179
	  <_X_Fun,[],Db,Acc> when 'true' ->
	      %% Line 1180
	      {'ok',{Acc,Db}}
	  ( <_13,_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12,_11,_10})
		  -| [{'function_name',{'children_map',4}}] )
	    -| ['compiler_generated'] )
	end
'children_to_list'/2 =
    %% Line 1187
    fun (_0,_1) ->
	case <_0,_1> of
	  <Fun,{Ids,Db}> when 'true' ->
	      %% Line 1188
	      apply 'children_to_list'/4
		  (Fun, Ids, Db, [])
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'children_to_list',2}}] )
	    -| ['compiler_generated'] )
	end
'children_to_list'/4 =
    %% Line 1189
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Fun,[Id|Ids],Db,Acc> when 'true' ->
	      let <_4> =
		  call %% Line 1190
		       'maps':%% Line 1190
			      'get'
		      (%% Line 1190
		       Id, %% Line 1190
			   Db)
	      in  let <_5> =
		      apply %% Line 1190
			    Fun
			  (%% Line 1190
			   Id, _4)
		  in  %% Line 1190
		      apply 'children_to_list'/4
			  (Fun, Ids, Db, [_5|Acc])
	  %% Line 1191
	  <_X_Fun,[],_X_Db,Acc> when 'true' ->
	      %% Line 1192
	      call 'lists':'reverse'
		  (Acc)
	  ( <_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7,_6})
		  -| [{'function_name',{'children_to_list',4}}] )
	    -| ['compiler_generated'] )
	end
'children_fold'/3 =
    %% Line 1201
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Fun,Init,{_X_Ids,Db}> when 'true' ->
	      %% Line 1202
	      call 'maps':'fold'
		  (Fun, Init, Db)
	  ( <_5,_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4,_3})
		  -| [{'function_name',{'children_fold',3}}] )
	    -| ['compiler_generated'] )
	end
'append'/2 =
    %% Line 1205
    fun (_0,_1) ->
	case <_0,_1> of
	  <{Ids1,Db1},{Ids2,Db2}> when 'true' ->
	      let <_3> =
		  call %% Line 1206
		       'erlang':%% Line 1206
				'++'
		      (%% Line 1206
		       Ids1, %% Line 1206
			     Ids2)
	      in  let <_2> =
		      call %% Line 1206
			   'maps':%% Line 1206
				  'merge'
			  (%% Line 1206
			   Db1, %% Line 1206
				Db2)
		  in  %% Line 1206
		      {_3,_2}
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'append',2}}] )
	    -| ['compiler_generated'] )
	end
'init_state'/4 =
    %% Line 1221
    fun (_0,_1,_2,_3) ->
	let <_4> =
	    apply %% Line 1222
		  'supname'/2
		(_0, _2)
	in  %% Line 1222
	    apply 'set_flags'/2
		(_1, {'state',_4,'undefined',{[],~{}~},'undefined','undefined','undefined',[],0,_2,_3})
'set_flags'/2 =
    %% Line 1226
    fun (_0,_1) ->
	%% Line 1227
	try
	    apply 'check_flags'/1
		(_0)
	of <_2> ->
	    case _2 of
	      %% Line 1228
	      <~{'period':=Period,'intensity':=MaxIntensity,'strategy':=Strategy}~> when 'true' ->
		  %% Line 1229
		  case _1 of
		    <{'state',_14,_15,_16,_17,_18,_19,_20,_21,_22,_23}> when 'true' ->
			let <_4> =
			    call %% Line 1231
				 'erlang':%% Line 1231
					  'setelement'
				(%% Line 1231
				 7, _1, %% Line 1231
					Period)
			in  let <_5> =
				call %% Line 1230
				     'erlang':%% Line 1230
					      'setelement'
				    (%% Line 1230
				     6, _4, %% Line 1230
					    MaxIntensity)
			    in  let <_7> =
				    call 'erlang':'setelement'
					(3, _5, Strategy)
				in  {'ok',_7}
		    ( <_24> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      ( <_8> when 'true' ->
		    primop 'match_fail'
			({'try_clause',_8})
		-| ['compiler_generated'] )
	    end
	catch <_11,_10,_9> ->
	    %% Line 1233
	    case <_11,_10,_9> of
	      <( 'throw'
		 -| ['compiler_generated'] ),Thrown,_25> when 'true' ->
		  Thrown
	      ( <_26,_27,_28> when 'true' ->
		    primop 'raise'
			(_28, _27)
		-| ['compiler_generated'] )
	    end
'check_flags'/1 =
    %% Line 1236
    fun (_0) ->
	case _0 of
	  <SupFlags>
	      when call 'erlang':'is_map'
		    (_0) ->
	      let <_1> =
		  call %% Line 1237
		       'maps':%% Line 1237
			      'merge'
		      (%% Line 1237
		       ~{'intensity'=>1,'period'=>5,'strategy'=>'one_for_one'}~, %% Line 1237
										 SupFlags)
	      in  %% Line 1237
		  apply 'do_check_flags'/1
		      (_1)
	  %% Line 1238
	  <{Strategy,MaxIntensity,Period}> when 'true' ->
	      let <_2> =
		  ~{%% Line 1239
		   'strategy'=>Strategy,%% Line 1240
					'intensity'=>MaxIntensity,%% Line 1241
								  'period'=>Period}~
	      in  %% Line 1239
		  apply 'check_flags'/1
		      (_2)
	  %% Line 1242
	  <What> when 'true' ->
	      %% Line 1243
	      call 'erlang':'throw'
		  ({'invalid_type',What})
	end
'do_check_flags'/1 =
    %% Line 1245
    fun (_0) ->
	case _0 of
	  <%% Line 1247
	   Flags = ~{%% Line 1247
		    'period':=Period,%% Line 1246
				     'intensity':=MaxIntensity,'strategy':=Strategy}~> when 'true' ->
	      do  %% Line 1248
		  apply 'validStrategy'/1
		      (Strategy)
		  do  %% Line 1249
		      apply 'validIntensity'/1
			  (MaxIntensity)
		      do  %% Line 1250
			  apply 'validPeriod'/1
			      (Period)
			  %% Line 1251
			  Flags
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'do_check_flags',1}}] )
	    -| ['compiler_generated'] )
	end
'validStrategy'/1 =
    %% Line 1253
    fun (_0) ->
	case _0 of
	  <'simple_one_for_one'> when 'true' ->
	      'true'
	  %% Line 1254
	  <'one_for_one'> when 'true' ->
	      'true'
	  %% Line 1255
	  <'one_for_all'> when 'true' ->
	      'true'
	  %% Line 1256
	  <'rest_for_one'> when 'true' ->
	      'true'
	  %% Line 1257
	  <What> when 'true' ->
	      call 'erlang':'throw'
		  ({'invalid_strategy',What})
	end
'validIntensity'/1 =
    %% Line 1259
    fun (_0) ->
	case _0 of
	  <Max>
	      when let <_1> =
		    call 'erlang':'is_integer'
			(_0)
		in  let <_2> =
			call %% Line 1260
			     'erlang':%% Line 1260
				      '>='
			    (_0, %% Line 1260
				 0)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 1260
	      'true'
	  %% Line 1261
	  <What> when 'true' ->
	      call 'erlang':'throw'
		  ({'invalid_intensity',What})
	end
'validPeriod'/1 =
    %% Line 1263
    fun (_0) ->
	case _0 of
	  <Period>
	      when let <_1> =
		    call 'erlang':'is_integer'
			(_0)
		in  let <_2> =
			call %% Line 1264
			     'erlang':%% Line 1264
				      '>'
			    (_0, %% Line 1264
				 0)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 1264
	      'true'
	  %% Line 1265
	  <What> when 'true' ->
	      call 'erlang':'throw'
		  ({'invalid_period',What})
	end
'supname'/2 =
    %% Line 1267
    fun (_0,_1) ->
	case <_0,_1> of
	  <'self',Mod> when 'true' ->
	      let <_2> =
		  call 'erlang':'self'
		      ()
	      in  {_2,Mod}
	  %% Line 1268
	  <N,_5> when 'true' ->
	      N
	end
'check_startspec'/1 =
    %% Line 1276
    fun (_0) ->
	apply 'check_startspec'/3
	    (_0, [], ~{}~)
'check_startspec'/3 =
    %% Line 1278
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[ChildSpec|T],Ids,Db> when 'true' ->
	      %% Line 1279
	      case apply 'check_childspec'/1
		       (ChildSpec) of
		%% Line 1280
		<{'ok',Child = {'child',_10,Id,_11,_12,_13,_14,_15}}> when 'true' ->
		    %% Line 1281
		    case call 'maps':'is_key'
			     (Id, Db) of
		      %% Line 1285
		      <'true'> when 'true' ->
			  {'duplicate_child_name',Id}
		      %% Line 1286
		      <'false'> when 'true' ->
			  case <> of
			    ( <>
				  when call 'erlang':'is_map'
					(Db) ->
				  let <_3> =
				      ~{Id=>Child|Db}~
				  in  apply 'check_startspec'/3
					  (T, [Id|Ids], _3)
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  ( primop 'match_fail'
					({'badmap',Db})
				    -| [{'eval_failure','badmap'}] )
			      -| ['compiler_generated'] )
			  end
		      ( <_4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_4})
			-| ['compiler_generated'] )
		    end
		%% Line 1288
		<Error> when 'true' ->
		    Error
	      end
	  %% Line 1290
	  <[],Ids,Db> when 'true' ->
	      let <_6> =
		  call %% Line 1291
		       'lists':%% Line 1291
			       'reverse'
		      (%% Line 1291
		       Ids)
	      in  %% Line 1291
		  {'ok',{_6,Db}}
	  ( <_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8,_7})
		  -| [{'function_name',{'check_startspec',3}}] )
	    -| ['compiler_generated'] )
	end
'check_childspec'/1 =
    %% Line 1293
    fun (_0) ->
	case _0 of
	  <ChildSpec>
	      when call 'erlang':'is_map'
		    (_0) ->
	      catch
		  let <_1> =
		      call %% Line 1294
			   'maps':%% Line 1294
				  'merge'
			  (%% Line 1294
			   ~{'restart'=>'permanent','type'=>'worker'}~, %% Line 1294
									ChildSpec)
		  in  %% Line 1294
		      apply 'do_check_childspec'/1
			  (_1)
	  %% Line 1295
	  <{Id,Func,RestartType,Shutdown,ChildType,Mods}> when 'true' ->
	      let <_2> =
		  ~{%% Line 1296
		   'id'=>Id,%% Line 1297
			    'start'=>Func,%% Line 1298
					  'restart'=>RestartType,%% Line 1299
								 'shutdown'=>Shutdown,%% Line 1300
										      'type'=>ChildType,%% Line 1301
													'modules'=>Mods}~
	      in  %% Line 1296
		  apply 'check_childspec'/1
		      (_2)
	  %% Line 1302
	  <X> when 'true' ->
	      {'invalid_child_spec',X}
	end
'do_check_childspec'/1 =
    %% Line 1304
    fun (_0) ->
	case _0 of
	  <%% Line 1305
	   ChildSpec = ~{'restart':=RestartType,%% Line 1305
					       'type':=ChildType}~> when 'true' ->
	      %% Line 1306
	      case ChildSpec of
		%% Line 1307
		<~{'id':=I}~> when 'true' ->
		    %% Line 1310
		    case ChildSpec of
		      %% Line 1311
		      <~{'start':=F}~> when 'true' ->
			  do  %% Line 1314
			      apply 'validId'/1
				  (I)
			      do  %% Line 1315
				  apply 'validFunc'/1
				      (F)
				  do  %% Line 1316
				      apply 'validRestartType'/1
					  (RestartType)
				      do  %% Line 1317
					  apply 'validChildType'/1
					      (ChildType)
					  let <_8> =
					      case %% Line 1318
						   ChildSpec of
						%% Line 1319
						<~{'shutdown':=S}~> when 'true' ->
						    S
						%% Line 1320
						<~{'type':='worker'}~> when 'true' ->
						    5000
						%% Line 1321
						<~{'type':='supervisor'}~> when 'true' ->
						    'infinity'
						( <_7> when 'true' ->
						      %% Line 1318
						      primop 'match_fail'
							  ({'case_clause',_7})
						  -| ['compiler_generated'] )
					      end
					  in  do  %% Line 1323
						  apply 'validShutdown'/1
						      (_8)
						  let <_12> =
						      case %% Line 1324
							   ChildSpec of
							%% Line 1325
							<~{'modules':=Ms}~> when 'true' ->
							    Ms
							%% Line 1326
							<_17> when 'true' ->
							    case F of
							      <{M,_18,_19}> when 'true' ->
								  [M|[]]
							      ( <_10> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_10})
								-| ['compiler_generated'] )
							    end
						      end
						  in  do  %% Line 1328
							  apply 'validMods'/1
							      (_12)
							  %% Line 1329
							  {'ok',{'child','undefined',I,F,RestartType,_8,%% Line 1330
													ChildType,_12}}
		      %% Line 1312
		      <_16> when 'true' ->
			  call 'erlang':'throw'
			      ('missing_start')
		    end
		%% Line 1308
		<_15> when 'true' ->
		    call 'erlang':'throw'
			('missing_id')
	      end
	  ( <_14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14})
		  -| [{'function_name',{'do_check_childspec',1}}] )
	    -| ['compiler_generated'] )
	end
'validChildType'/1 =
    %% Line 1332
    fun (_0) ->
	case _0 of
	  <'supervisor'> when 'true' ->
	      'true'
	  %% Line 1333
	  <'worker'> when 'true' ->
	      'true'
	  %% Line 1334
	  <What> when 'true' ->
	      call 'erlang':'throw'
		  ({'invalid_child_type',What})
	end
'validId'/1 =
    %% Line 1336
    fun (_0) ->
	'true'
'validFunc'/1 =
    %% Line 1338
    fun (_0) ->
	case _0 of
	  <{M,F,A}>
	      when try
		    let <_1> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_2> =
			    call %% Line 1339
				 'erlang':%% Line 1339
					  'is_atom'
				(%% Line 1339
				 F)
			in  let <_3> =
				call %% Line 1340
				     'erlang':%% Line 1340
					      'is_list'
				    (%% Line 1340
				     A)
			    in  let <_4> =
				    call 'erlang':'and'
					(_2, _3)
				in  call 'erlang':'and'
					(_1, _4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1340
	      'true'
	  %% Line 1341
	  <Func> when 'true' ->
	      call 'erlang':'throw'
		  ({'invalid_mfa',Func})
	end
'validRestartType'/1 =
    %% Line 1343
    fun (_0) ->
	case _0 of
	  <'permanent'> when 'true' ->
	      'true'
	  %% Line 1344
	  <'temporary'> when 'true' ->
	      'true'
	  %% Line 1345
	  <'transient'> when 'true' ->
	      'true'
	  %% Line 1346
	  <RestartType> when 'true' ->
	      call 'erlang':'throw'
		  ({'invalid_restart_type',RestartType})
	end
'validShutdown'/1 =
    %% Line 1348
    fun (_0) ->
	case _0 of
	  <Shutdown>
	      when let <_1> =
		    call %% Line 1349
			 'erlang':%% Line 1349
				  'is_integer'
			(_0)
		in  let <_2> =
			call %% Line 1349
			     'erlang':%% Line 1349
				      '>'
			    (_0, %% Line 1349
				 0)
		    in  %% Line 1349
			call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 1349
	      'true'
	  %% Line 1350
	  <'infinity'> when 'true' ->
	      'true'
	  %% Line 1351
	  <'brutal_kill'> when 'true' ->
	      'true'
	  %% Line 1352
	  <Shutdown> when 'true' ->
	      call 'erlang':'throw'
		  ({'invalid_shutdown',Shutdown})
	end
'validMods'/1 =
    %% Line 1354
    fun (_0) ->
	case _0 of
	  <'dynamic'> when 'true' ->
	      'true'
	  %% Line 1355
	  <Mods>
	      when call 'erlang':'is_list'
		    (_0) ->
	      let <_3> =
		  fun (_1) ->
		      %% Line 1357
		      case <> of
			%% Line 1358
			<>
			    when call 'erlang':'is_atom'
				  (_1) ->
			    'ok'
			%% Line 1359
			<> when 'true' ->
			    call 'erlang':'throw'
				({'invalid_module',_1})
		      end
	      in  %% Line 1356
		  call 'lists':'foreach'
		      (_3, %% Line 1362
			   Mods)
	  %% Line 1363
	  <Mods> when 'true' ->
	      call 'erlang':'throw'
		  ({'invalid_modules',Mods})
	end
'child_to_spec'/1 =
    %% Line 1365
    fun (_0) ->
	case _0 of
	  <{'child',_2,Id,%% Line 1366
			  Func,%% Line 1367
			       RestartType,%% Line 1368
					   Shutdown,%% Line 1369
						    ChildType,%% Line 1370
							      Mods}> when 'true' ->
	      %% Line 1371
	      ~{'id'=>Id,%% Line 1372
			'start'=>Func,%% Line 1373
				      'restart'=>RestartType,%% Line 1374
							     'shutdown'=>Shutdown,%% Line 1375
										  'type'=>ChildType,%% Line 1376
												    'modules'=>Mods}~
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'child_to_spec',1}}] )
	    -| ['compiler_generated'] )
	end
'add_restart'/1 =
    %% Line 1387
    fun (_0) ->
	%% Line 1388
	( case _0 of
	    ( <( {'state',_18,_19,_20,_21,_rec71,_22,_23,_24,_25,_26}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 1389
		  ( case _0 of
		      ( <( {'state',_28,_29,_30,_31,_32,_rec72,_33,_34,_35,_36}
			   -| ['compiler_generated'] )> when 'true' ->
			    %% Line 1390
			    ( case _0 of
				( <( {'state',_38,_39,_40,_41,_42,_43,_rec73,_44,_45,_46}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <Now> =
					  call %% Line 1391
					       'erlang':%% Line 1391
							'monotonic_time'
					      (%% Line 1391
					       1)
				      in  let <R1> =
					      apply %% Line 1392
						    'add_restart'/3
						  (%% Line 1392
						   [Now|_rec73], %% Line 1392
								 Now, _rec72)
					  in  %% Line 1393
					      case _0 of
						<{'state',_48,_49,_50,_51,_52,_53,_54,_55,_56,_57}> when 'true' ->
						    let <_14> =
							call 'erlang':'setelement'
							    (8, _0, R1)
						    in  %% Line 1394
							case call 'erlang':'length'
								 (R1) of
							  %% Line 1395
							  <CurI>
							      when call 'erlang':'=<'
								    (CurI,
								     _rec71) ->
							      %% Line 1396
							      {'ok',_14}
							  %% Line 1397
							  <_59> when 'true' ->
							      %% Line 1398
							      {'terminate',_14}
							end
						( <_58> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','state'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
				  -| ['compiler_generated'] )
				( <_47> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','state'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_37> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_27> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_restart'/3 =
    %% Line 1401
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[R|Restarts],Now,Period> when 'true' ->
	      %% Line 1402
	      case apply 'inPeriod'/3
		       (R, Now, Period) of
		%% Line 1403
		<'true'> when 'true' ->
		    let <_3> =
			apply %% Line 1404
			      'add_restart'/3
			    (%% Line 1404
			     Restarts, %% Line 1404
				       Now, %% Line 1404
					    Period)
		    in  %% Line 1404
			[R|_3]
		%% Line 1405
		<_8> when 'true' ->
		    %% Line 1406
		    []
	      end
	  %% Line 1408
	  <[],_9,_10> when 'true' ->
	      %% Line 1409
	      []
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'add_restart',3}}] )
	    -| ['compiler_generated'] )
	end
'inPeriod'/3 =
    %% Line 1411
    fun (_0,_1,_2) ->
	let <_3> =
	    call %% Line 1412
		 'erlang':%% Line 1412
			  '+'
		(_0, _2)
	in  %% Line 1412
	    call 'erlang':'=<'
		(_1, _3)
'extract_child'/1 =
    %% Line 1417
    fun (_0) ->
	case _0 of
	  <Child = {'child',_33,_34,_35,_36,_37,_38,_39}>
	      when ( try
		      let <_5> =
			  call 'erlang':'element'
			      (2, Child)
		      in  call 'erlang':'is_list'
			      (_5)
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 1418
	      ( case Child of
		  ( <( {'child',_rec75,_40,_41,_42,_43,_44,_45}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_9> =
			    call 'erlang':'length'
				(_rec75)
			in  %% Line 1419
			    ( case Child of
				( <( {'child',_47,_rec76,_48,_49,_50,_51,_52}
				     -| ['compiler_generated'] )> when 'true' ->
				      %% Line 1420
				      ( case Child of
					  ( <( {'child',_54,_55,_rec77,_56,_57,_58,_59}
					       -| ['compiler_generated'] )> when 'true' ->
						%% Line 1421
						( case Child of
						    ( <( {'child',_61,_62,_63,_rec78,_64,_65,_66}
							 -| ['compiler_generated'] )> when 'true' ->
							  %% Line 1422
							  ( case Child of
							      ( <( {'child',_68,_69,_70,_71,_rec79,_72,_73}
								   -| ['compiler_generated'] )> when 'true' ->
								    %% Line 1423
								    ( case Child of
									( <( {'child',_75,_76,_77,_78,_79,_rec80,_80}
									     -| ['compiler_generated'] )> when 'true' ->
									      [{'nb_children',_9}|[{'id',_rec76}|[{'mfargs',_rec77}|[{'restart_type',_rec78}|[{'shutdown',_rec79}|[{'child_type',_rec80}|[]]]]]]]
									  -| ['compiler_generated'] )
									( <_81> when 'true' ->
									      ( call ( 'erlang'
										       -| ['compiler_generated'] ):( 'error'
														     -| ['compiler_generated'] )
										    (( {'badrecord','child'}
										       -| ['compiler_generated'] ))
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								      end
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      ( <_74> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','child'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <_67> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','child'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_60> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','child'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_53> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','child'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_46> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','child'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1424
	  <Child> when 'true' ->
	      %% Line 1425
	      ( case Child of
		  ( <( {'child',_rec81,_82,_83,_84,_85,_86,_87}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1426
			( case Child of
			    ( <( {'child',_89,_rec82,_90,_91,_92,_93,_94}
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 1427
				  ( case Child of
				      ( <( {'child',_96,_97,_rec83,_98,_99,_100,_101}
					   -| ['compiler_generated'] )> when 'true' ->
					    %% Line 1428
					    ( case Child of
						( <( {'child',_103,_104,_105,_rec84,_106,_107,_108}
						     -| ['compiler_generated'] )> when 'true' ->
						      %% Line 1429
						      ( case Child of
							  ( <( {'child',_110,_111,_112,_113,_rec85,_114,_115}
							       -| ['compiler_generated'] )> when 'true' ->
								%% Line 1430
								( case Child of
								    ( <( {'child',_117,_118,_119,_120,_121,_rec86,_122}
									 -| ['compiler_generated'] )> when 'true' ->
									  [{'pid',_rec81}|[{'id',_rec82}|[{'mfargs',_rec83}|[{'restart_type',_rec84}|[{'shutdown',_rec85}|[{'child_type',_rec86}|[]]]]]]]
								      -| ['compiler_generated'] )
								    ( <_123> when 'true' ->
									  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'error'
														 -| ['compiler_generated'] )
										(( {'badrecord','child'}
										   -| ['compiler_generated'] ))
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								  end
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							  ( <_116> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','child'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <_109> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','child'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <_102> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','child'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_95> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','child'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_88> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','child'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'report_progress'/2 =
    %% Line 1432
    fun (_0,_1) ->
	%% Line 1433
	case call 'logger':'allow'
		 ('info', 'supervisor') of
	  <'true'> when 'true' ->
	      let <_2> =
		  apply %% Line 1435
			'extract_child'/1
		      (_0)
	      in  let <_3> =
		      ~{%% Line 1434
		       'report'=>[{'supervisor',_1}|%% Line 1435
						  [{'started',_2}|[]]]|~{'label'=>{'supervisor','progress'}}~}~
		  in  call 'logger':'macro_log'
			  (~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],'line'=>1433,'mfa'=>{'supervisor','report_progress',2}}~, 'info', _3, ~{'domain'=>['otp'|['sasl']],'error_logger'=>~{'report_cb'=>fun 'supervisor':'format_log'/1,'tag'=>'info_report','type'=>'progress'}~,'logger_formatter'=>~{'title'=>[80|[82|[79|[71|[82|[69|[83|[83|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]]]}~,'report_cb'=>fun 'supervisor':'format_log'/2}~)
	  %% Line 1441
	  <'false'> when 'true' ->
	      'ok'
	  ( <_8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_8})
	    -| ['compiler_generated'] )
	end
'format_log'/1 =
    %% Line 1448
    fun (_0) ->
	let <Depth> =
	    call %% Line 1449
		 'error_logger':%% Line 1449
				'get_format_depth'
		()
	in  let <FormatOpts> =
		~{%% Line 1451
		 'depth'=>Depth,%% Line 1452
				'single_line'=>'false',%% Line 1453
						       'encoding'=>'utf8'|%% Line 1450
		 ~{'chars_limit'=>'unlimited'}~}~
	    in  let <_3> =
		    apply %% Line 1454
			  'limit_report'/2
			(_0, %% Line 1454
			     Depth)
		in  %% Line 1454
		    apply 'format_log_multi'/2
			(_3, FormatOpts)
'limit_report'/2 =
    %% Line 1456
    fun (_0,_1) ->
	case <_0,_1> of
	  <LogReport,'unlimited'> when 'true' ->
	      %% Line 1457
	      LogReport
	  %% Line 1458
	  <%% Line 1459
	   LogReport = ~{%% Line 1459
			'report':=[Supervisor = {'supervisor',_8}|[{'started',Child}|[]]],'label':={'supervisor','progress'}}~,%% Line 1460
															       Depth> when 'true' ->
	      let <_2> =
		  apply %% Line 1462
			'limit_child_report'/2
		      (%% Line 1462
		       Child, %% Line 1462
			      Depth)
	      in  %% Line 1461
		  case <> of
		    ( <>
			  when call 'erlang':'is_map'
				(LogReport) ->
			  ~{'report'=>[Supervisor|%% Line 1462
					       [{'started',_2}|[]]]|LogReport}~
		      -| ['compiler_generated'] )
		    ( <> when 'true' ->
			  ( primop 'match_fail'
				({'badmap',LogReport})
			    -| [{'eval_failure','badmap'}] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1463
	  <%% Line 1465
	   LogReport = ~{%% Line 1464
			'report':=[Supervisor = {'supervisor',_9}|[{'errorContext',Ctxt}|%% Line 1465
										       [{'reason',Reason}|[{'offender',Child}|[]]]]],'label':={'supervisor',_X_Error}}~,%% Line 1466
																					Depth> when 'true' ->
	      let <_3> =
		  call %% Line 1468
		       'io_lib':%% Line 1468
				'limit_term'
		      (%% Line 1468
		       Ctxt, %% Line 1468
			     Depth)
	      in  let <_4> =
		      call %% Line 1469
			   'io_lib':%% Line 1469
				    'limit_term'
			  (%% Line 1469
			   Reason, %% Line 1469
				   Depth)
		  in  let <_5> =
			  apply %% Line 1470
				'limit_child_report'/2
			      (%% Line 1470
			       Child, %% Line 1470
				      Depth)
		      in  %% Line 1467
			  case <> of
			    ( <>
				  when call 'erlang':'is_map'
					(LogReport) ->
				  ~{'report'=>[Supervisor|%% Line 1468
						       [{'errorContext',_3}|%% Line 1469
									    [{'reason',_4}|%% Line 1470
											   [{'offender',_5}|[]]]]]|LogReport}~
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  ( primop 'match_fail'
					({'badmap',LogReport})
				    -| [{'eval_failure','badmap'}] )
			      -| ['compiler_generated'] )
			  end
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'limit_report',2}}] )
	    -| ['compiler_generated'] )
	end
'limit_child_report'/2 =
    %% Line 1472
    fun (_0,_1) ->
	%% Line 1473
	call 'io_lib':'limit_term'
	    (_0, _1)
'format_log'/2 =
    %% Line 1477
    fun (_0,_1) ->
	let <FormatOpts> =
	    call %% Line 1482
		 'maps':%% Line 1482
			'merge'
		(%% Line 1478
		 ~{'chars_limit'=>'unlimited','depth'=>'unlimited','encoding'=>'utf8','single_line'=>'false'}~, _1)
	in  let <_5> =
		case %% Line 1484
		     FormatOpts of
		  %% Line 1485
		  <~{'chars_limit':='unlimited'}~> when 'true' ->
		      %% Line 1486
		      []
		  %% Line 1487
		  <~{'chars_limit':=Limit}~> when 'true' ->
		      %% Line 1488
		      [{'chars_limit',Limit}|[]]
		  ( <_4> when 'true' ->
			%% Line 1484
			primop 'match_fail'
			    ({'case_clause',_4})
		    -| ['compiler_generated'] )
		end
	    in  %% Line 1490
		case apply 'format_log_single'/2
			 (_0, FormatOpts) of
		  <{Format,Args}> when 'true' ->
		      %% Line 1491
		      call 'io_lib':'format'
			  (Format, Args, _5)
		  ( <_7> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_7})
		    -| ['compiler_generated'] )
		end
'format_log_single'/2 =
    %% Line 1493
    fun (_0,_1) ->
	case <_0,_1> of
	  <~{%% Line 1494
	    'report':=[{'supervisor',SupName}|[{'started',Child}|[]]],'label':={'supervisor','progress'}}~,%% Line 1495
													   FormatOpts = %% Line 1495
															~{'depth':=Depth,'single_line':='true'}~> when 'true' ->
	      let <P> =
		  apply %% Line 1496
			'p'/1
		      (%% Line 1496
		       FormatOpts)
	      in  %% Line 1497
		  case apply 'format_child_log_single'/2
			   (Child, [83|[116|[97|[114|[116|[101|[100|[58]]]]]]]]) of
		    <{ChildFormat,ChildArgs}> when 'true' ->
			let <_4> =
			    call %% Line 1498
				 'erlang':%% Line 1498
					  '++'
				(%% Line 1498
				 P, %% Line 1498
				    [46])
			in  let <Format> =
				call %% Line 1498
				     'erlang':%% Line 1498
					      '++'
				    (%% Line 1498
				     [83|[117|[112|[101|[114|[118|[105|[115|[111|[114|[58|[32]]]]]]]]]]]], _4)
			    in  let <_7> =
				    case %% Line 1500
					 Depth of
				      %% Line 1501
				      <'unlimited'> when 'true' ->
					  %% Line 1502
					  [SupName|[]]
				      %% Line 1503
				      <_21> when 'true' ->
					  %% Line 1504
					  [SupName|[Depth|[]]]
				    end
				in  let <_10> =
					call %% Line 1506
					     'erlang':%% Line 1506
						      '++'
					    (%% Line 1506
					     Format, %% Line 1506
						     ChildFormat)
				    in  let <_9> =
					    call %% Line 1506
						 'erlang':%% Line 1506
							  '++'
						(_7, %% Line 1506
						     ChildArgs)
					in  %% Line 1506
					    {_10,_9}
		    ( <_3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1507
	  <~{%% Line 1508
	    'report':=[{'supervisor',SupName}|%% Line 1509
					    [{'errorContext',Ctxt}|%% Line 1510
								   [{'reason',Reason}|%% Line 1511
										      [{'offender',Child}|[]]]]],'label':={'supervisor',_X_Error}}~,%% Line 1512
																		    FormatOpts = %% Line 1512
																				 ~{'depth':=Depth,'single_line':='true'}~> when 'true' ->
	      let <P> =
		  apply %% Line 1513
			'p'/1
		      (%% Line 1513
		       FormatOpts)
	      in  let <Format> =
		      call %% Line 1514
			   'lists':%% Line 1514
				   'append'
			  (%% Line 1514
			   [[83|[117|[112|[101|[114|[118|[105|[115|[111|[114|[58|[32]]]]]]]]]]]]|[P|[[46|[32|[67|[111|[110|[116|[101|[120|[116|[58|[32]]]]]]]]]]]|[P|%% Line 1515
																				     [[46|[32|[82|[101|[97|[115|[111|[110|[58|[32]]]]]]]]]]|[P|[[46]]]]]]]])
		  in  %% Line 1516
		      case apply 'format_child_log_single'/2
			       (Child, [79|[102|[102|[101|[110|[100|[101|[114|[58]]]]]]]]]) of
			<{ChildFormat,ChildArgs}> when 'true' ->
			    let <_15> =
				case %% Line 1518
				     Depth of
				  %% Line 1519
				  <'unlimited'> when 'true' ->
				      %% Line 1520
				      [SupName|[Ctxt|[Reason|[]]]]
				  %% Line 1521
				  <_22> when 'true' ->
				      %% Line 1522
				      [SupName|[Depth|[Ctxt|[Depth|[Reason|[Depth|[]]]]]]]
				end
			    in  let <_18> =
				    call %% Line 1524
					 'erlang':%% Line 1524
						  '++'
					(%% Line 1524
					 Format, %% Line 1524
						 ChildFormat)
				in  let <_17> =
					call %% Line 1524
					     'erlang':%% Line 1524
						      '++'
					    (_15, %% Line 1524
						  ChildArgs)
				    in  %% Line 1524
					{_18,_17}
			( <_13> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_13})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1525
	  <Report,FormatOpts> when 'true' ->
	      %% Line 1526
	      apply 'format_log_multi'/2
		  (Report, FormatOpts)
	end
'format_log_multi'/2 =
    %% Line 1528
    fun (_0,_1) ->
	case <_0,_1> of
	  <~{%% Line 1529
	    'report':=[{'supervisor',SupName}|%% Line 1530
					    [{'started',Child}|[]]],'label':={'supervisor','progress'}}~,%% Line 1531
													 FormatOpts = %% Line 1531
														      ~{'depth':=Depth}~> when 'true' ->
	      let <P> =
		  apply %% Line 1532
			'p'/1
		      (%% Line 1532
		       FormatOpts)
	      in  let <Format> =
		      call %% Line 1534
			   'lists':%% Line 1534
				   'append'
			  (%% Line 1535
			   [[32|[32|[32|[32|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[58|[32]]]]]]]]]]]]]]]]|[P|[[126|[110]]|%% Line 1536
																      [[32|[32|[32|[32|[115|[116|[97|[114|[116|[101|[100|[58|[32]]]]]]]]]]]]]|[P|[[126|[110]]]]]]]])
		  in  let <_5> =
			  case %% Line 1538
			       Depth of
			    %% Line 1539
			    <'unlimited'> when 'true' ->
				%% Line 1540
				[SupName|[Child|[]]]
			    %% Line 1541
			    <_14> when 'true' ->
				%% Line 1542
				[SupName|[Depth|[Child|[Depth|[]]]]]
			  end
		      in  %% Line 1544
			  {Format,_5}
	  %% Line 1545
	  <~{%% Line 1546
	    'report':=[{'supervisor',SupName}|%% Line 1547
					    [{'errorContext',Ctxt}|%% Line 1548
								   [{'reason',Reason}|%% Line 1549
										      [{'offender',Child}|[]]]]],'label':={'supervisor',_X_Error}}~,%% Line 1550
																		    FormatOpts = %% Line 1550
																				 ~{'depth':=Depth}~> when 'true' ->
	      let <P> =
		  apply %% Line 1551
			'p'/1
		      (%% Line 1551
		       FormatOpts)
	      in  let <Format> =
		      call %% Line 1553
			   'lists':%% Line 1553
				   'append'
			  (%% Line 1554
			   [[32|[32|[32|[32|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[58|[32]]]]]]]]]]]]]]]]|[P|[[126|[110]]|%% Line 1555
																      [[32|[32|[32|[32|[101|[114|[114|[111|[114|[67|[111|[110|[116|[101|[120|[116|[58|[32]]]]]]]]]]]]]]]]]]|[P|[[126|[110]]|%% Line 1556
																															    [[32|[32|[32|[32|[114|[101|[97|[115|[111|[110|[58|[32]]]]]]]]]]]]|[P|[[126|[110]]|%% Line 1557
																																									      [[32|[32|[32|[32|[111|[102|[102|[101|[110|[100|[101|[114|[58|[32]]]]]]]]]]]]]]|[P|[[126|[110]]]]]]]]]]]]]])
		  in  let <_10> =
			  case %% Line 1559
			       Depth of
			    %% Line 1560
			    <'unlimited'> when 'true' ->
				%% Line 1561
				[SupName|[Ctxt|[Reason|[Child|[]]]]]
			    %% Line 1562
			    <_15> when 'true' ->
				%% Line 1563
				[SupName|[Depth|[Ctxt|[Depth|[Reason|[Depth|[Child|[Depth|[]]]]]]]]]
			  end
		      in  %% Line 1565
			  {Format,_10}
	  ( <_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12})
		  -| [{'function_name',{'format_log_multi',2}}] )
	    -| ['compiler_generated'] )
	end
'format_child_log_single'/2 =
    %% Line 1567
    fun (_0,_1) ->
	%% Line 1568
	case call 'lists':'keyfind'
		 ('id', 1, _0) of
	  <{'id',Id}> when 'true' ->
	      %% Line 1569
	      case call 'lists':'keyfind'
		       ('pid', 1, _0) of
		%% Line 1570
		<'false'> when 'true' ->
		    %% Line 1571
		    case call 'lists':'keyfind'
			     ('nb_children', 1, _0) of
		      <{'nb_children',NumCh}> when 'true' ->
			  %% Line 1572
			  {[32|[126|[115|[32|[105|[100|[61|[126|[119|[44|[110|[98|[95|[99|[104|[105|[108|[100|[114|[101|[110|[61|[126|[119|[46]]]]]]]]]]]]]]]]]]]]]]]]],[_1|[Id|[NumCh|[]]]]}
		      ( <_3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_3})
			-| ['compiler_generated'] )
		    end
		%% Line 1573
		<T>
		    when call 'erlang':'is_tuple'
			  (T) ->
		    %% Line 1574
		    case call 'lists':'keyfind'
			     ('pid', 1, _0) of
		      <{'pid',Pid}> when 'true' ->
			  %% Line 1575
			  {[32|[126|[115|[32|[105|[100|[61|[126|[119|[44|[112|[105|[100|[61|[126|[119|[46]]]]]]]]]]]]]]]]],[_1|[Id|[Pid|[]]]]}
		      ( <_4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_4})
			-| ['compiler_generated'] )
		    end
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_2})
	    -| ['compiler_generated'] )
	end
'p'/1 =
    %% Line 1578
    fun (_0) ->
	case _0 of
	  <~{'depth':=Depth,'encoding':=Enc,'single_line':=Single}~> when 'true' ->
	      let <_4> =
		  apply %% Line 1579
			'single'/1
		      (%% Line 1579
		       Single)
	      in  let <_2> =
		      apply %% Line 1579
			    'mod'/1
			  (%% Line 1579
			   Enc)
		  in  let <_1> =
			  apply %% Line 1579
				'p'/1
			      (%% Line 1579
			       Depth)
		      in  let <_3> =
			      call %% Line 1579
				   'erlang':%% Line 1579
					    '++'
				  (_2, _1)
			  in  let <_5> =
				  call %% Line 1579
				       'erlang':%% Line 1579
						'++'
				      (_4, _3)
			      in  %% Line 1579
				  [126|_5]
	  %% Line 1580
	  <'unlimited'> when 'true' ->
	      %% Line 1581
	      [112]
	  %% Line 1582
	  <_X_Depth> when 'true' ->
	      %% Line 1583
	      [80]
	end
'single'/1 =
    %% Line 1585
    fun (_0) ->
	case _0 of
	  <'true'> when 'true' ->
	      [48]
	  %% Line 1586
	  <'false'> when 'true' ->
	      []
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'single',1}}] )
	    -| ['compiler_generated'] )
	end
'mod'/1 =
    %% Line 1588
    fun (_0) ->
	case _0 of
	  <'latin1'> when 'true' ->
	      []
	  %% Line 1589
	  <_2> when 'true' ->
	      [116]
	end
'format_status'/2 =
    %% Line 1591
    fun (_0,_1) ->
	case <_0,_1> of
	  <'terminate',[_X_PDict|[State|[]]]> when 'true' ->
	      %% Line 1592
	      State
	  %% Line 1593
	  <_6,[_X_PDict|[State|[]]]> when 'true' ->
	      %% Line 1595
	      ( case State of
		  ( <( {'state',_7,_8,_9,_10,_11,_12,_13,_14,_rec87,_15}
		       -| ['compiler_generated'] )> when 'true' ->
			[{'data',[{[83|[116|[97|[116|[101]]]]],State}|[]]}|[{'supervisor',[{[67|[97|[108|[108|[98|[97|[99|[107]]]]]]]],_rec87}|[]]}|[]]]
		    -| ['compiler_generated'] )
		  ( <_16> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'format_status',2}}] )
	    -| ['compiler_generated'] )
	end
'dyn_size'/1 =
    %% Line 1605
    fun (_0) ->
	case _0 of
	  <{'state',_2,_3,_4,{_X_Kind,Db},_5,_6,_7,_8,_9,_10}> when 'true' ->
	      %% Line 1606
	      call 'erlang':'map_size'
		  (Db)
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'dyn_size',1}}] )
	    -| ['compiler_generated'] )
	end
'dyn_erase'/2 =
    %% Line 1608
    fun (_0,_1) ->
	case <_0,_1> of
	  <Pid,State = {'state',_8,_9,_10,{_X_Kind,Db},_11,_12,_13,_14,_15,_16}> when 'true' ->
	      let <_2> =
		  call %% Line 1609
		       'maps':%% Line 1609
			      'remove'
		      (%% Line 1609
		       Pid, %% Line 1609
			    Db)
	      in  let <_rec88> = {%% Line 1609
		       'maps',_2}
		  in  %% Line 1609
		      case State of
			<{'state',_17,_18,_19,_20,_21,_22,_23,_24,_25,_26}> when 'true' ->
			    call 'erlang':'setelement'
				(5, State, _rec88)
			( <_27> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'dyn_erase',2}}] )
	    -| ['compiler_generated'] )
	end
'dyn_store'/3 =
    %% Line 1611
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Pid,Args,State = {'state',_15,_16,_17,{Kind,Db},_18,_19,_20,_21,_22,_23}> when 'true' ->
	      %% Line 1612
	      case Kind of
		%% Line 1613
		<'mapsets'> when 'true' ->
		    %% Line 1616
		    case <> of
		      ( <>
			    when call 'erlang':'is_map'
				  (Db) ->
			    let <_3> =
				~{Pid=>[]|Db}~
			    in  let <_rec90> = {'mapsets',_3}
				in  case State of
				      <{'state',_24,_25,_26,_27,_28,_29,_30,_31,_32,_33}> when 'true' ->
					  call 'erlang':'setelement'
					      (5, State, _rec90)
				      ( <_34> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','state'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    ( primop 'match_fail'
				  ({'badmap',Db})
			      -| [{'eval_failure','badmap'}] )
			-| ['compiler_generated'] )
		    end
		%% Line 1617
		<'maps'> when 'true' ->
		    %% Line 1620
		    case <> of
		      ( <>
			    when call 'erlang':'is_map'
				  (Db) ->
			    let <_7> =
				~{Pid=>Args|Db}~
			    in  let <_rec92> = {'maps',_7}
				in  case State of
				      <{'state',_35,_36,_37,_38,_39,_40,_41,_42,_43,_44}> when 'true' ->
					  call 'erlang':'setelement'
					      (5, State, _rec92)
				      ( <_45> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','state'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    ( primop 'match_fail'
				  ({'badmap',Db})
			      -| [{'eval_failure','badmap'}] )
			-| ['compiler_generated'] )
		    end
		( <_11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_11})
		  -| ['compiler_generated'] )
	      end
	  ( <_14,_13,_12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13,_12})
		  -| [{'function_name',{'dyn_store',3}}] )
	    -| ['compiler_generated'] )
	end
'dyn_fold'/3 =
    %% Line 1623
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Fun,Init,{'state',_13,_14,_15,{_X_Kind,Db},_16,_17,_18,_19,_20,_21}> when 'true' ->
	      let <_9> =
		  fun (_5,_4,_3) ->
		      %% Line 1624
		      apply Fun
			  (_5, _3)
	      in  %% Line 1624
		  call 'maps':'fold'
		      (_9, Init, Db)
	  ( <_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11,_10})
		  -| [{'function_name',{'dyn_fold',3}}] )
	    -| ['compiler_generated'] )
	end
'dyn_map'/2 =
    %% Line 1626
    fun (_0,_1) ->
	case <_0,_1> of
	  <Fun,{'state',_5,_6,_7,{_X_Kind,Db},_8,_9,_10,_11,_12,_13}> when 'true' ->
	      let <_2> =
		  call %% Line 1627
		       'maps':%% Line 1627
			      'keys'
		      (%% Line 1627
		       Db)
	      in  %% Line 1627
		  call 'lists':'map'
		      (Fun, _2)
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'dyn_map',2}}] )
	    -| ['compiler_generated'] )
	end
'dyn_exists'/2 =
    %% Line 1629
    fun (_0,_1) ->
	case <_0,_1> of
	  <Pid,{'state',_4,_5,_6,{_X_Kind,Db},_7,_8,_9,_10,_11,_12}> when 'true' ->
	      %% Line 1630
	      call 'erlang':'is_map_key'
		  (Pid, Db)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'dyn_exists',2}}] )
	    -| ['compiler_generated'] )
	end
'dyn_args'/2 =
    %% Line 1632
    fun (_0,_1) ->
	case <_0,_1> of
	  <_X_Pid,{'state',_4,_5,_6,{'mapsets',_X_Db},_7,_8,_9,_10,_11,_12}> when 'true' ->
	      %% Line 1633
	      {'ok','undefined'}
	  %% Line 1634
	  <Pid,{'state',_13,_14,_15,{'maps',Db},_16,_17,_18,_19,_20,_21}> when 'true' ->
	      %% Line 1635
	      call 'maps':'find'
		  (Pid, Db)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'dyn_args',2}}] )
	    -| ['compiler_generated'] )
	end
'dyn_init'/1 =
    %% Line 1637
    fun (_0) ->
	let <_1> =
	    apply %% Line 1638
		  'get_dynamic_child'/1
		(_0)
	in  %% Line 1638
	    apply 'dyn_init'/2
		(_1, _0)
'dyn_init'/2 =
    %% Line 1640
    fun (_0,_1) ->
	case <_0,_1> of
	  <Child = {'child',_18,_19,_20,_21,_22,_23,_24},State>
	      when ( try
		      let <_6> =
			  call 'erlang':'element'
			      (5, Child)
		      in  call 'erlang':'=:='
			      (_6, 'temporary')
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      let <_8> =
		  call %% Line 1641
		       'maps':%% Line 1641
			      'new'
		      ()
	      in  let <_rec94> = {%% Line 1641
		       'mapsets',_8}
		  in  %% Line 1641
		      case State of
			<{'state',_25,_26,_27,_28,_29,_30,_31,_32,_33,_34}> when 'true' ->
			    call 'erlang':'setelement'
				(5, State, _rec94)
			( <_35> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1642
	  <_X_Child,State> when 'true' ->
	      let <_12> =
		  call %% Line 1643
		       'maps':%% Line 1643
			      'new'
		      ()
	      in  let <_rec96> = {%% Line 1643
		       'maps',_12}
		  in  %% Line 1643
		      case State of
			<{'state',_36,_37,_38,_39,_40,_41,_42,_43,_44,_45}> when 'true' ->
			    call 'erlang':'setelement'
				(5, State, _rec96)
			( <_46> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	end
'behaviour_info'/1 =
    fun (_0) ->
	case _0 of
	  <'callbacks'> when 'true' ->
	      [{'init',1}]
	  <'optional_callbacks'> when 'true' ->
	      []
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'behaviour_info',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('supervisor')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('supervisor', _0)
end