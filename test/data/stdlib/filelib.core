module 'filelib' ['compile_wildcard'/1,
		  'ensure_dir'/1,
		  'file_size'/1,
		  'file_size'/2,
		  'find_file'/2,
		  'find_file'/3,
		  'find_source'/1,
		  'find_source'/2,
		  'find_source'/3,
		  'fold_files'/5,
		  'fold_files'/6,
		  'is_dir'/1,
		  'is_dir'/2,
		  'is_file'/1,
		  'is_file'/2,
		  'is_regular'/1,
		  'is_regular'/2,
		  'last_modified'/1,
		  'last_modified'/2,
		  'module_info'/0,
		  'module_info'/1,
		  'safe_relative_path'/2,
		  'wildcard'/1,
		  'wildcard'/2,
		  'wildcard'/3]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[102|[105|[108|[101|[108|[105|[98|[46|[101|[114|[108]]]]]]]]]]]]]]],1}],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[47|[117|[115|[114|[47|[108|[111|[99|[97|[108|[47|[67|[101|[108|[108|[97|[114|[47|[101|[114|[108|[97|[110|[103|[47|[50|[50|[46|[50|[47|[108|[105|[98|[47|[101|[114|[108|[97|[110|[103|[47|[108|[105|[98|[47|[107|[101|[114|[110|[101|[108|[45|[54|[46|[53|[46|[49|[47|[105|[110|[99|[108|[117|[100|[101|[47|[102|[105|[108|[101|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 25
		'record' =
		    %% Line 25
		    [{'file_info',[{'typed_record_field',{'record_field',26,{'atom',26,'size'}},{'type',26,'union',[{'type',26,'non_neg_integer',[]}|[{'atom',26,'undefined'}]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'type'}},{'type',27,'union',[{'atom',27,'device'}|[{'atom',27,'directory'}|[{'atom',27,'other'}|[{'atom',27,'regular'}|[{'atom',27,'symlink'}|[{'atom',28,'undefined'}]]]]]]}}|[{'typed_record_field',{'record_field',29,{'atom',29,'access'}},{'type',29,'union',[{'atom',29,'read'}|[{'atom',29,'write'}|[{'atom',29,'read_write'}|[{'atom',29,'none'}|[{'atom',29,'undefined'}]]]]]}}|[{'typed_record_field',{'record_field',30,{'atom',30,'atime'}},{'type',30,'union',[{'remote_type',30,[{'atom',30,'file'}|[{'atom',30,'date_time'}|[[]]]]}|[{'type',30,'non_neg_integer',[]}|[{'atom',30,'undefined'}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'mtime'}},{'type',34,'union',[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}|[{'atom',34,'undefined'}]]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'ctime'}},{'type',36,'union',[{'remote_type',36,[{'atom',36,'file'}|[{'atom',36,'date_time'}|[[]]]]}|[{'type',36,'non_neg_integer',[]}|[{'atom',36,'undefined'}]]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'mode'}},{'type',42,'union',[{'type',42,'non_neg_integer',[]}|[{'atom',42,'undefined'}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'links'}},{'type',46,'union',[{'type',46,'non_neg_integer',[]}|[{'atom',46,'undefined'}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'major_device'}},{'type',49,'union',[{'type',49,'non_neg_integer',[]}|[{'atom',49,'undefined'}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'minor_device'}},{'type',55,'union',[{'type',55,'non_neg_integer',[]}|[{'atom',55,'undefined'}]]}}|[{'typed_record_field',{'record_field',57,{'atom',57,'inode'}},{'type',57,'union',[{'type',57,'non_neg_integer',[]}|[{'atom',57,'undefined'}]]}}|[{'typed_record_field',{'record_field',58,{'atom',58,'uid'}},{'type',58,'union',[{'type',58,'non_neg_integer',[]}|[{'atom',58,'undefined'}]]}}|[{'typed_record_field',{'record_field',59,{'atom',59,'gid'}},{'type',59,'union',[{'type',59,'non_neg_integer',[]}|[{'atom',59,'undefined'}]]}}]]]]]]]]]]]]]}],
		%% Line 62
		'record' =
		    %% Line 62
		    [{'file_descriptor',[{'typed_record_field',{'record_field',63,{'atom',63,'module'}},{'type',63,'module',[]}}|[{'typed_record_field',{'record_field',64,{'atom',64,'data'}},{'type',64,'term',[]}}]]}],
		%% Line 34
		'file' =
		    %% Line 34
		    [{[115|[114|[99|[47|[102|[105|[108|[101|[108|[105|[98|[46|[101|[114|[108]]]]]]]]]]]]]]],34}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{'filename',{'remote_type',44,[{'atom',44,'file'}|[{'atom',44,'name'}|[[]]]]},[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'dirname',{'user_type',45,'filename',[]},[]}],
		%% Line 47
		'type' =
		    %% Line 47
		    [{'filename_all',{'remote_type',47,[{'atom',47,'file'}|[{'atom',47,'name_all'}|[[]]]]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'dirname_all',{'user_type',48,'filename_all',[]},[]}],
		%% Line 52
		'spec' =
		    %% Line 52
		    [{{'wildcard',1},[{'type',52,'bounded_fun',[{'type',52,'fun',[{'type',52,'product',[{'var',52,'Wildcard'}]}|[{'type',52,'list',[{'remote_type',52,[{'atom',52,'file'}|[{'atom',52,'filename'}|[[]]]]}]}]]}|[[{'type',53,'constraint',[{'atom',53,'is_subtype'}|[[{'var',53,'Wildcard'}|[{'type',53,'union',[{'user_type',53,'filename',[]}|[{'user_type',53,'dirname',[]}]]}]]]]}]]]}]}],
		%% Line 57
		'spec' =
		    %% Line 57
		    [{{'wildcard',2},[{'type',57,'bounded_fun',[{'type',57,'fun',[{'type',57,'product',[{'var',57,'Wildcard'}|[{'var',57,'Cwd'}]]}|[{'type',57,'list',[{'remote_type',57,[{'atom',57,'file'}|[{'atom',57,'filename'}|[[]]]]}]}]]}|[[{'type',58,'constraint',[{'atom',58,'is_subtype'}|[[{'var',58,'Wildcard'}|[{'type',58,'union',[{'user_type',58,'filename',[]}|[{'user_type',58,'dirname',[]}]]}]]]]}|[{'type',59,'constraint',[{'atom',59,'is_subtype'}|[[{'var',59,'Cwd'}|[{'user_type',59,'dirname',[]}]]]]}]]]]}]}],
		%% Line 65
		'spec' =
		    %% Line 65
		    [{{'wildcard',3},[{'type',65,'fun',[{'type',65,'product',[{'remote_type',65,[{'atom',65,'file'}|[{'atom',65,'name'}|[[]]]]}|[{'remote_type',65,[{'atom',65,'file'}|[{'atom',65,'name'}|[[]]]]}|[{'type',65,'atom',[]}]]]}|[{'type',65,'list',[{'remote_type',65,[{'atom',65,'file'}|[{'atom',65,'filename'}|[[]]]]}]}]]}]}],
		%% Line 70
		'spec' =
		    %% Line 70
		    [{{'is_dir',1},[{'type',70,'bounded_fun',[{'type',70,'fun',[{'type',70,'product',[{'var',70,'Name'}]}|[{'type',70,'boolean',[]}]]}|[[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'Name'}|[{'type',71,'union',[{'user_type',71,'filename_all',[]}|[{'user_type',71,'dirname_all',[]}]]}]]]]}]]]}]}],
		%% Line 75
		'spec' =
		    %% Line 75
		    [{{'is_dir',2},[{'type',75,'fun',[{'type',75,'product',[{'remote_type',75,[{'atom',75,'file'}|[{'atom',75,'name_all'}|[[]]]]}|[{'type',75,'atom',[]}]]}|[{'type',75,'boolean',[]}]]}]}],
		%% Line 79
		'spec' =
		    %% Line 79
		    [{{'is_file',1},[{'type',79,'bounded_fun',[{'type',79,'fun',[{'type',79,'product',[{'var',79,'Name'}]}|[{'type',79,'boolean',[]}]]}|[[{'type',80,'constraint',[{'atom',80,'is_subtype'}|[[{'var',80,'Name'}|[{'type',80,'union',[{'user_type',80,'filename_all',[]}|[{'user_type',80,'dirname_all',[]}]]}]]]]}]]]}]}],
		%% Line 84
		'spec' =
		    %% Line 84
		    [{{'is_file',2},[{'type',84,'fun',[{'type',84,'product',[{'remote_type',84,[{'atom',84,'file'}|[{'atom',84,'name_all'}|[[]]]]}|[{'type',84,'atom',[]}]]}|[{'type',84,'boolean',[]}]]}]}],
		%% Line 88
		'spec' =
		    %% Line 88
		    [{{'is_regular',1},[{'type',88,'bounded_fun',[{'type',88,'fun',[{'type',88,'product',[{'var',88,'Name'}]}|[{'type',88,'boolean',[]}]]}|[[{'type',89,'constraint',[{'atom',89,'is_subtype'}|[[{'var',89,'Name'}|[{'user_type',89,'filename_all',[]}]]]]}]]]}]}],
		%% Line 93
		'spec' =
		    %% Line 93
		    [{{'is_regular',2},[{'type',93,'fun',[{'type',93,'product',[{'remote_type',93,[{'atom',93,'file'}|[{'atom',93,'name_all'}|[[]]]]}|[{'type',93,'atom',[]}]]}|[{'type',93,'boolean',[]}]]}]}],
		%% Line 97
		'spec' =
		    %% Line 97
		    [{{'fold_files',5},[{'type',97,'bounded_fun',[{'type',97,'fun',[{'type',97,'product',[{'var',97,'Dir'}|[{'var',97,'RegExp'}|[{'var',97,'Recursive'}|[{'var',97,'Fun'}|[{'var',97,'AccIn'}]]]]]}|[{'var',97,'AccOut'}]]}|[[{'type',98,'constraint',[{'atom',98,'is_subtype'}|[[{'var',98,'Dir'}|[{'user_type',98,'dirname',[]}]]]]}|[{'type',99,'constraint',[{'atom',99,'is_subtype'}|[[{'var',99,'RegExp'}|[{'type',99,'string',[]}]]]]}|[{'type',100,'constraint',[{'atom',100,'is_subtype'}|[[{'var',100,'Recursive'}|[{'type',100,'boolean',[]}]]]]}|[{'type',101,'constraint',[{'atom',101,'is_subtype'}|[[{'var',101,'Fun'}|[{'type',101,'fun',[{'type',101,'product',[{'ann_type',101,[{'var',101,'F'}|[{'remote_type',101,[{'atom',101,'file'}|[{'atom',101,'filename'}|[[]]]]}]]}|[{'var',101,'AccIn'}]]}|[{'var',101,'AccOut'}]]}]]]]}|[{'type',102,'constraint',[{'atom',102,'is_subtype'}|[[{'var',102,'AccIn'}|[{'type',102,'term',[]}]]]]}|[{'type',103,'constraint',[{'atom',103,'is_subtype'}|[[{'var',103,'AccOut'}|[{'type',103,'term',[]}]]]]}]]]]]]]]}]}],
		%% Line 107
		'spec' =
		    %% Line 107
		    [{{'fold_files',6},[{'type',107,'fun',[{'type',107,'product',[{'remote_type',107,[{'atom',107,'file'}|[{'atom',107,'name'}|[[]]]]}|[{'type',107,'string',[]}|[{'type',107,'boolean',[]}|[{'type',107,'fun',[{'type',107,'product',[{'var',107,'_'}|[{'var',107,'_'}]]}|[{'var',107,'_'}]]}|[{'var',107,'_'}|[{'type',107,'atom',[]}]]]]]]}|[{'var',107,'_'}]]}]}],
		%% Line 111
		'spec' =
		    %% Line 111
		    [{{'last_modified',1},[{'type',111,'bounded_fun',[{'type',111,'fun',[{'type',111,'product',[{'var',111,'Name'}]}|[{'type',111,'union',[{'remote_type',111,[{'atom',111,'file'}|[{'atom',111,'date_time'}|[[]]]]}|[{'integer',111,0}]]}]]}|[[{'type',112,'constraint',[{'atom',112,'is_subtype'}|[[{'var',112,'Name'}|[{'type',112,'union',[{'user_type',112,'filename_all',[]}|[{'user_type',112,'dirname_all',[]}]]}]]]]}]]]}]}],
		%% Line 116
		'spec' =
		    %% Line 116
		    [{{'last_modified',2},[{'type',116,'fun',[{'type',116,'product',[{'remote_type',116,[{'atom',116,'file'}|[{'atom',116,'name_all'}|[[]]]]}|[{'type',116,'atom',[]}]]}|[{'type',116,'union',[{'remote_type',116,[{'atom',116,'file'}|[{'atom',116,'date_time'}|[[]]]]}|[{'integer',116,0}]]}]]}]}],
		%% Line 120
		'spec' =
		    %% Line 120
		    [{{'file_size',1},[{'type',120,'bounded_fun',[{'type',120,'fun',[{'type',120,'product',[{'var',120,'Filename'}]}|[{'type',120,'non_neg_integer',[]}]]}|[[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'Filename'}|[{'user_type',121,'filename_all',[]}]]]]}]]]}]}],
		%% Line 125
		'spec' =
		    %% Line 125
		    [{{'file_size',2},[{'type',125,'fun',[{'type',125,'product',[{'remote_type',125,[{'atom',125,'file'}|[{'atom',125,'name'}|[[]]]]}|[{'type',125,'atom',[]}]]}|[{'type',125,'non_neg_integer',[]}]]}]}],
		%% Line 226
		'spec' =
		    %% Line 226
		    [{{'ensure_dir',1},[{'type',226,'bounded_fun',[{'type',226,'fun',[{'type',226,'product',[{'var',226,'Name'}]}|[{'type',226,'union',[{'atom',226,'ok'}|[{'type',226,'tuple',[{'atom',226,'error'}|[{'var',226,'Reason'}]]}]]}]]}|[[{'type',227,'constraint',[{'atom',227,'is_subtype'}|[[{'var',227,'Name'}|[{'type',227,'union',[{'user_type',227,'filename_all',[]}|[{'user_type',227,'dirname_all',[]}]]}]]]]}|[{'type',228,'constraint',[{'atom',228,'is_subtype'}|[[{'var',228,'Reason'}|[{'remote_type',228,[{'atom',228,'file'}|[{'atom',228,'posix'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 636
		'type' =
		    %% Line 636
		    [{'find_file_rule',{'type',636,'tuple',[{'ann_type',636,[{'var',636,'ObjDirSuffix'}|[{'type',636,'string',[]}]]}|[{'ann_type',636,[{'var',636,'SrcDirSuffix'}|[{'type',636,'string',[]}]]}]]},[]}],
		%% Line 638
		'spec' =
		    %% Line 638
		    [{{'find_file',2},[{'type',638,'fun',[{'type',638,'product',[{'user_type',638,'filename',[]}|[{'user_type',638,'filename',[]}]]}|[{'type',639,'union',[{'type',639,'tuple',[{'atom',639,'ok'}|[{'user_type',639,'filename',[]}]]}|[{'type',639,'tuple',[{'atom',639,'error'}|[{'atom',639,'not_found'}]]}]]}]]}]}],
		%% Line 643
		'spec' =
		    %% Line 643
		    [{{'find_file',3},[{'type',643,'fun',[{'type',643,'product',[{'user_type',643,'filename',[]}|[{'user_type',643,'filename',[]}|[{'type',643,'list',[{'user_type',643,'find_file_rule',[]}]}]]]}|[{'type',644,'union',[{'type',644,'tuple',[{'atom',644,'ok'}|[{'user_type',644,'filename',[]}]]}|[{'type',644,'tuple',[{'atom',644,'error'}|[{'atom',644,'not_found'}]]}]]}]]}]}],
		%% Line 652
		'type' =
		    %% Line 652
		    [{'find_source_rule',{'type',652,'tuple',[{'ann_type',652,[{'var',652,'ObjExtension'}|[{'type',652,'string',[]}]]}|[{'ann_type',652,[{'var',652,'SrcExtension'}|[{'type',652,'string',[]}]]}|[{'type',653,'list',[{'user_type',653,'find_file_rule',[]}]}]]]},[]}],
		%% Line 655
		'spec' =
		    %% Line 655
		    [{{'find_source',1},[{'type',655,'fun',[{'type',655,'product',[{'user_type',655,'filename',[]}]}|[{'type',656,'union',[{'type',656,'tuple',[{'atom',656,'ok'}|[{'user_type',656,'filename',[]}]]}|[{'type',656,'tuple',[{'atom',656,'error'}|[{'atom',656,'not_found'}]]}]]}]]}]}],
		%% Line 660
		'spec' =
		    %% Line 660
		    [{{'find_source',2},[{'type',660,'fun',[{'type',660,'product',[{'user_type',660,'filename',[]}|[{'user_type',660,'filename',[]}]]}|[{'type',661,'union',[{'type',661,'tuple',[{'atom',661,'ok'}|[{'user_type',661,'filename',[]}]]}|[{'type',661,'tuple',[{'atom',661,'error'}|[{'atom',661,'not_found'}]]}]]}]]}]}],
		%% Line 665
		'spec' =
		    %% Line 665
		    [{{'find_source',3},[{'type',665,'fun',[{'type',665,'product',[{'user_type',665,'filename',[]}|[{'user_type',665,'filename',[]}|[{'type',665,'list',[{'user_type',665,'find_source_rule',[]}]}]]]}|[{'type',666,'union',[{'type',666,'tuple',[{'atom',666,'ok'}|[{'user_type',666,'filename',[]}]]}|[{'type',666,'tuple',[{'atom',666,'error'}|[{'atom',666,'not_found'}]]}]]}]]}]}],
		%% Line 723
		'spec' =
		    %% Line 723
		    [{{'safe_relative_path',2},[{'type',723,'bounded_fun',[{'type',723,'fun',[{'type',723,'product',[{'var',723,'Filename'}|[{'var',723,'Cwd'}]]}|[{'type',723,'union',[{'atom',723,'unsafe'}|[{'var',723,'SafeFilename'}]]}]]}|[[{'type',724,'constraint',[{'atom',724,'is_subtype'}|[[{'var',724,'Filename'}|[{'user_type',724,'filename_all',[]}]]]]}|[{'type',725,'constraint',[{'atom',725,'is_subtype'}|[[{'var',725,'Cwd'}|[{'user_type',725,'filename_all',[]}]]]]}|[{'type',726,'constraint',[{'atom',726,'is_subtype'}|[[{'var',726,'SafeFilename'}|[{'user_type',726,'filename_all',[]}]]]]}]]]]]}]}]]
'wildcard'/1 =
    %% Line 54
    fun (_0) ->
	case _0 of
	  <Pattern>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 55
	      try
		  apply 'do_wildcard'/3
		      (Pattern, [46], 'file')
	      of <_1> ->
		  _1
	      catch <_4,_3,_2> ->
		  case <_4,_3,_2> of
		    <( 'error'
		       -| ['compiler_generated'] ),UnUsUalVaRiAbLeNaMe = ( {( 'badpattern'
									      -| ['compiler_generated'] ),_6}
									   -| ['compiler_generated'] ),_7> when 'true' ->
			call 'erlang':'error'
			    (UnUsUalVaRiAbLeNaMe)
		    ( <_8,_9,_10> when 'true' ->
			  primop 'raise'
			      (_10, _9)
		      -| ['compiler_generated'] )
		  end
	  ( <_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5})
		  -| [{'function_name',{'wildcard',1}}] )
	    -| ['compiler_generated'] )
	end
'wildcard'/2 =
    %% Line 60
    fun (_0,_1) ->
	case <_0,_1> of
	  <Pattern,Cwd>
	      when let <_2> =
		    call 'erlang':'is_list'
			(Pattern)
		in  let <_3> =
			call 'erlang':'is_list'
			    (Cwd)
		    in  call 'erlang':'and'
			    (_2, _3) ->
	      %% Line 61
	      try
		  apply 'do_wildcard'/3
		      (Pattern, Cwd, 'file')
	      of <_4> ->
		  _4
	      catch <_7,_6,_5> ->
		  case <_7,_6,_5> of
		    <( 'error'
		       -| ['compiler_generated'] ),UnUsUalVaRiAbLeNaMe = ( {( 'badpattern'
									      -| ['compiler_generated'] ),_16}
									   -| ['compiler_generated'] ),_17> when 'true' ->
			call 'erlang':'error'
			    (UnUsUalVaRiAbLeNaMe)
		    ( <_20,_21,_22> when 'true' ->
			  primop 'raise'
			      (_22, _21)
		      -| ['compiler_generated'] )
		  end
	  %% Line 62
	  <Pattern,Mod>
	      when let <_8> =
		    call 'erlang':'is_list'
			(Pattern)
		in  let <_9> =
			call 'erlang':'is_atom'
			    (Mod)
		    in  call 'erlang':'and'
			    (_8, _9) ->
	      %% Line 63
	      try
		  apply 'do_wildcard'/3
		      (Pattern, [46], Mod)
	      of <_10> ->
		  _10
	      catch <_13,_12,_11> ->
		  case <_13,_12,_11> of
		    <( 'error'
		       -| ['compiler_generated'] ),UnUsUalVaRiAbLeNaMe = ( {( 'badpattern'
									      -| ['compiler_generated'] ),_18}
									   -| ['compiler_generated'] ),_19> when 'true' ->
			call 'erlang':'error'
			    (UnUsUalVaRiAbLeNaMe)
		    ( <_23,_24,_25> when 'true' ->
			  primop 'raise'
			      (_25, _24)
		      -| ['compiler_generated'] )
		  end
	  ( <_15,_14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_15,_14})
		  -| [{'function_name',{'wildcard',2}}] )
	    -| ['compiler_generated'] )
	end
'wildcard'/3 =
    %% Line 66
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Pattern,Cwd,Mod>
	      when %% Line 67
		try
		    let <_3> =
			call 'erlang':'is_list'
			    (Pattern)
		    in  let <_4> =
			    call 'erlang':'is_list'
				(Cwd)
			in  let <_5> =
				call 'erlang':'is_atom'
				    (Mod)
			    in  let <_6> =
				    call 'erlang':'and'
					(_4, _5)
				in  call 'erlang':'and'
					(_3, _6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 68
	      try
		  apply 'do_wildcard'/3
		      (Pattern, Cwd, Mod)
	      of <_7> ->
		  _7
	      catch <_10,_9,_8> ->
		  case <_10,_9,_8> of
		    <( 'error'
		       -| ['compiler_generated'] ),UnUsUalVaRiAbLeNaMe = ( {( 'badpattern'
									      -| ['compiler_generated'] ),_14}
									   -| ['compiler_generated'] ),_15> when 'true' ->
			call 'erlang':'error'
			    (UnUsUalVaRiAbLeNaMe)
		    ( <_16,_17,_18> when 'true' ->
			  primop 'raise'
			      (_18, _17)
		      -| ['compiler_generated'] )
		  end
	  ( <_13,_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12,_11})
		  -| [{'function_name',{'wildcard',3}}] )
	    -| ['compiler_generated'] )
	end
'is_dir'/1 =
    %% Line 72
    fun (_0) ->
	%% Line 73
	apply 'do_is_dir'/2
	    (_0, 'file')
'is_dir'/2 =
    %% Line 76
    fun (_0,_1) ->
	case <_0,_1> of
	  <Dir,Mod>
	      when call 'erlang':'is_atom'
		    (Mod) ->
	      %% Line 77
	      apply 'do_is_dir'/2
		  (Dir, Mod)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'is_dir',2}}] )
	    -| ['compiler_generated'] )
	end
'is_file'/1 =
    %% Line 81
    fun (_0) ->
	%% Line 82
	apply 'do_is_file'/2
	    (_0, 'file')
'is_file'/2 =
    %% Line 85
    fun (_0,_1) ->
	case <_0,_1> of
	  <File,Mod>
	      when call 'erlang':'is_atom'
		    (Mod) ->
	      %% Line 86
	      apply 'do_is_file'/2
		  (File, Mod)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'is_file',2}}] )
	    -| ['compiler_generated'] )
	end
'is_regular'/1 =
    %% Line 90
    fun (_0) ->
	%% Line 91
	apply 'do_is_regular'/2
	    (_0, 'file')
'is_regular'/2 =
    %% Line 94
    fun (_0,_1) ->
	case <_0,_1> of
	  <File,Mod>
	      when call 'erlang':'is_atom'
		    (Mod) ->
	      %% Line 95
	      apply 'do_is_regular'/2
		  (File, Mod)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'is_regular',2}}] )
	    -| ['compiler_generated'] )
	end
'fold_files'/5 =
    %% Line 104
    fun (_0,_1,_2,_3,_4) ->
	%% Line 105
	apply 'do_fold_files'/6
	    (_0, _1, _2, _3, _4, 'file')
'fold_files'/6 =
    %% Line 108
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <Dir,RegExp,Recursive,Fun,Acc,Mod>
	      when call 'erlang':'is_atom'
		    (Mod) ->
	      %% Line 109
	      apply 'do_fold_files'/6
		  (Dir, RegExp, Recursive, Fun, Acc, Mod)
	  ( <_11,_10,_9,_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11,_10,_9,_8,_7,_6})
		  -| [{'function_name',{'fold_files',6}}] )
	    -| ['compiler_generated'] )
	end
'last_modified'/1 =
    %% Line 113
    fun (_0) ->
	%% Line 114
	apply 'do_last_modified'/2
	    (_0, 'file')
'last_modified'/2 =
    %% Line 117
    fun (_0,_1) ->
	case <_0,_1> of
	  <File,Mod>
	      when call 'erlang':'is_atom'
		    (Mod) ->
	      %% Line 118
	      apply 'do_last_modified'/2
		  (File, Mod)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'last_modified',2}}] )
	    -| ['compiler_generated'] )
	end
'file_size'/1 =
    %% Line 122
    fun (_0) ->
	%% Line 123
	apply 'do_file_size'/2
	    (_0, 'file')
'file_size'/2 =
    %% Line 126
    fun (_0,_1) ->
	case <_0,_1> of
	  <File,Mod>
	      when call 'erlang':'is_atom'
		    (Mod) ->
	      %% Line 127
	      apply 'do_file_size'/2
		  (File, Mod)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'file_size',2}}] )
	    -| ['compiler_generated'] )
	end
'do_is_dir'/2 =
    %% Line 131
    fun (_0,_1) ->
	%% Line 132
	case apply 'eval_read_file_info'/2
		 (_0, _1) of
	  %% Line 133
	  <{'ok',{'file_info',_5,'directory',_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16}}> when 'true' ->
	      %% Line 134
	      'true'
	  %% Line 135
	  <_17> when 'true' ->
	      %% Line 136
	      'false'
	end
'do_is_file'/2 =
    %% Line 139
    fun (_0,_1) ->
	%% Line 140
	case apply 'eval_read_file_info'/2
		 (_0, _1) of
	  %% Line 141
	  <{'ok',{'file_info',_5,'regular',_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16}}> when 'true' ->
	      %% Line 142
	      'true'
	  %% Line 143
	  <{'ok',{'file_info',_17,'directory',_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28}}> when 'true' ->
	      %% Line 144
	      'true'
	  %% Line 145
	  <_29> when 'true' ->
	      %% Line 146
	      'false'
	end
'do_is_regular'/2 =
    %% Line 149
    fun (_0,_1) ->
	%% Line 150
	case apply 'eval_read_file_info'/2
		 (_0, _1) of
	  %% Line 151
	  <{'ok',{'file_info',_5,'regular',_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16}}> when 'true' ->
	      %% Line 152
	      'true'
	  %% Line 153
	  <_17> when 'true' ->
	      %% Line 154
	      'false'
	end
'do_fold_files'/6 =
    %% Line 163
    fun (_0,_1,_2,_3,_4,_5) ->
	%% Line 164
	case call 're':'compile'
		 (_1, ['unicode']) of
	  <{'ok',Re1}> when 'true' ->
	      %% Line 165
	      apply 'do_fold_files1'/7
		  (_0, Re1, _1, _2, _3, _4, _5)
	  ( <_6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_6})
	    -| ['compiler_generated'] )
	end
'do_fold_files1'/7 =
    %% Line 167
    fun (_0,_1,_2,_3,_4,_5,_6) ->
	%% Line 168
	case apply 'eval_list_dir'/2
		 (_0, _6) of
	  %% Line 169
	  <{'ok',Files}> when 'true' ->
	      apply 'do_fold_files2'/8
		  (Files, _0, _1, _2, _3, _4, _5, _6)
	  %% Line 171
	  <{'error',_15}> when 'true' ->
	      _5
	  ( <_7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_7})
	    -| ['compiler_generated'] )
	end
'do_fold_files2'/8 =
    %% Line 177
    fun (_0,_1,_2,_3,_4,_5,_6,_7) ->
	case <_0,_1,_2,_3,_4,_5,_6,_7> of
	  <[],_X_Dir,_X_RegExp,_X_OrigRE,_X_Recursive,_X_Fun,Acc,_X_Mod> when 'true' ->
	      %% Line 178
	      Acc
	  %% Line 179
	  <[File|T],Dir,RegExp,OrigRE,Recursive,Fun,Acc0,Mod> when 'true' ->
	      let <FullName> =
		  call %% Line 180
		       'filename':%% Line 180
				  'join'
		      (%% Line 180
		       Dir, %% Line 180
			    File)
	      in  %% Line 181
		  case apply 'do_is_regular'/2
			   (FullName, Mod) of
		    %% Line 182
		    <'true'> when 'true' ->
			let <_10> =
			    catch
				let <_9> =
				    case <> of
				      %% Line 183
				      <>
					  when call 'erlang':'is_binary'
						(File) ->
					  OrigRE
				      %% Line 184
				      <> when 'true' ->
					  RegExp
				    end
				in  %% Line 183
				    call 're':'run'
					(File, _9, %% Line 185
						   [{'capture','none'}])
			in  %% Line 183
			    case _10 of
			      %% Line 186
			      <'match'> when 'true' ->
				  let <Acc> =
				      apply %% Line 187
					    Fun
					  (%% Line 187
					   FullName, %% Line 187
						     Acc0)
				  in  %% Line 188
				      apply 'do_fold_files2'/8
					  (T, Dir, RegExp, OrigRE, Recursive, Fun, Acc, Mod)
			      %% Line 189
			      <{'EXIT',_27}> when 'true' ->
				  %% Line 190
				  apply 'do_fold_files2'/8
				      (T, Dir, RegExp, OrigRE, Recursive, Fun, Acc0, Mod)
			      %% Line 191
			      <'nomatch'> when 'true' ->
				  %% Line 192
				  apply 'do_fold_files2'/8
				      (T, Dir, RegExp, OrigRE, Recursive, Fun, Acc0, Mod)
			      ( <_12> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_12})
				-| ['compiler_generated'] )
			    end
		    %% Line 194
		    <'false'> when 'true' ->
			let <_15> =
			    case %% Line 195
				 Recursive of
			      %% Line 195
			      ( <( 'true'
				   -| ['compiler_generated'] )> when 'true' ->
				    apply 'do_is_dir'/2
					(FullName, Mod)
				-| ['compiler_generated'] )
			      %% Line 195
			      ( <( 'false'
				   -| ['compiler_generated'] )> when 'true' ->
				    'false'
				-| ['compiler_generated'] )
			      %% Line 195
			      ( <_13> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {( 'badarg'
						-| ['compiler_generated'] ),_13}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			in  %% Line 195
			    case _15 of
			      %% Line 196
			      <'true'> when 'true' ->
				  let <Acc1> =
				      apply %% Line 197
					    'do_fold_files1'/7
					  (%% Line 197
					   FullName, %% Line 197
						     RegExp, %% Line 197
							     OrigRE, %% Line 197
								     Recursive, %% Line 198
										Fun, %% Line 198
										     Acc0, %% Line 198
											   Mod)
				  in  %% Line 199
				      apply 'do_fold_files2'/8
					  (T, Dir, RegExp, OrigRE, Recursive, Fun, Acc1, Mod)
			      %% Line 200
			      <'false'> when 'true' ->
				  %% Line 201
				  apply 'do_fold_files2'/8
				      (T, Dir, RegExp, OrigRE, Recursive, Fun, Acc0, Mod)
			      ( <_17> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_17})
				-| ['compiler_generated'] )
			    end
		    ( <_18> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_18})
		      -| ['compiler_generated'] )
		  end
	  ( <_26,_25,_24,_23,_22,_21,_20,_19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_26,_25,_24,_23,_22,_21,_20,_19})
		  -| [{'function_name',{'do_fold_files2',8}}] )
	    -| ['compiler_generated'] )
	end
'do_last_modified'/2 =
    %% Line 205
    fun (_0,_1) ->
	%% Line 206
	case apply 'eval_read_file_info'/2
		 (_0, _1) of
	  %% Line 207
	  <{'ok',Info}> when 'true' ->
	      %% Line 208
	      ( case Info of
		  ( <( {'file_info',_6,_7,_8,_9,_rec0,_10,_11,_12,_13,_14,_15,_16,_17}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec0
		    -| ['compiler_generated'] )
		  ( <_18> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','file_info'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 209
	  <_19> when 'true' ->
	      %% Line 210
	      0
	end
'do_file_size'/2 =
    %% Line 213
    fun (_0,_1) ->
	%% Line 214
	case apply 'eval_read_file_info'/2
		 (_0, _1) of
	  %% Line 215
	  <{'ok',Info}> when 'true' ->
	      %% Line 216
	      ( case Info of
		  ( <( {'file_info',_rec1,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec1
		    -| ['compiler_generated'] )
		  ( <_18> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','file_info'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 217
	  <_19> when 'true' ->
	      %% Line 218
	      0
	end
'ensure_dir'/1 =
    %% Line 229
    fun (_0) ->
	case _0 of
	  <[47]> when 'true' ->
	      %% Line 230
	      'ok'
	  %% Line 231
	  <F> when 'true' ->
	      let <Dir> =
		  call %% Line 232
		       'filename':%% Line 232
				  'dirname'
		      (%% Line 232
		       F)
	      in  %% Line 233
		  case apply 'do_is_dir'/2
			   (Dir, 'file') of
		    %% Line 234
		    <'true'> when 'true' ->
			%% Line 235
			'ok'
		    %% Line 236
		    <'false'>
			when call 'erlang':'=:='
			      (Dir,
			       F) ->
			%% Line 238
			{'error','einval'}
		    %% Line 239
		    <'false'> when 'true' ->
			do  %% Line 240
			    apply 'ensure_dir'/1
				(Dir)
			    %% Line 241
			    case call 'file':'make_dir'
				     (Dir) of
			      %% Line 242
			      <EExist = {'error','eexist'}> when 'true' ->
				  %% Line 243
				  case apply 'do_is_dir'/2
					   (Dir, 'file') of
				    %% Line 244
				    <'true'> when 'true' ->
					%% Line 245
					'ok'
				    %% Line 246
				    <'false'> when 'true' ->
					%% Line 247
					EExist
				    ( <_3> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_3})
				      -| ['compiler_generated'] )
				  end
			      %% Line 249
			      <Err> when 'true' ->
				  %% Line 250
				  Err
			    end
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_5})
		      -| ['compiler_generated'] )
		  end
	end
'do_wildcard'/3 =
    %% Line 259
    fun (_0,_1,_2) ->
	%% Line 260
	case apply 'compile_wildcard'/2
		 (_0, _1) of
	  <{Compiled,PrefixLen}> when 'true' ->
	      let <Files0> =
		  apply %% Line 261
			'do_wildcard_1'/2
		      (%% Line 261
		       Compiled, _2)
	      in  let <_10> =
		      case <> of
			%% Line 263
			<>
			    when call 'erlang':'=:='
				  (PrefixLen,
				   0) ->
			    %% Line 264
			    Files0
			%% Line 265
			<> when 'true' ->
			    %% Line 266
			    ( letrec
				  'lc$^0'/1 =
				      fun (_7) ->
					  case _7 of
					    <[File|_6]> when 'true' ->
						let <_8> =
						    call 'lists':'nthtail'
							(PrefixLen, File)
						in  let <_9> =
							apply 'lc$^0'/1
							    (_6)
						    in  ( [_8|_9]
							  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_15> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_15})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (Files0)
			      -| ['list_comprehension'] )
		      end
		  in  %% Line 268
		      call 'lists':'sort'
			  (_10)
	  ( <_3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_3})
	    -| ['compiler_generated'] )
	end
'do_wildcard_1'/2 =
    %% Line 270
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'exists',File},Mod> when 'true' ->
	      %% Line 271
	      case apply 'eval_read_link_info'/2
		       (File, Mod) of
		%% Line 272
		<{'ok',_5}> when 'true' ->
		    [File|[]]
		%% Line 273
		<_6> when 'true' ->
		    []
	      end
	  %% Line 275
	  <[Base|Rest],Mod> when 'true' ->
	      %% Line 276
	      apply 'do_wildcard_2'/4
		  ([Base|[]], Rest, [], Mod)
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'do_wildcard_1',2}}] )
	    -| ['compiler_generated'] )
	end
'do_wildcard_2'/4 =
    %% Line 278
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[File|Rest],Pattern,Result,Mod> when 'true' ->
	      let <_4> =
		  apply %% Line 279
			'do_wildcard_3'/4
		      (%% Line 279
		       File, %% Line 279
			     Pattern, %% Line 279
				      Result, %% Line 279
					      Mod)
	      in  %% Line 279
		  apply 'do_wildcard_2'/4
		      (Rest, Pattern, _4, Mod)
	  %% Line 280
	  <[],_9,Result,_X_Mod> when 'true' ->
	      %% Line 281
	      Result
	  ( <_8,_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7,_6,_5})
		  -| [{'function_name',{'do_wildcard_2',4}}] )
	    -| ['compiler_generated'] )
	end
'do_wildcard_3'/4 =
    %% Line 283
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <Base,[['double_star']|Rest],Result,Mod> when 'true' ->
	      %% Line 284
	      apply 'do_double_star'/6
		  ([46], [Base|[]], Rest, Result, Mod, 'true')
	  %% Line 285
	  <Base,[[46|[46]]|Rest],Result,Mod> when 'true' ->
	      %% Line 286
	      case apply 'do_is_dir'/2
		       (Base, Mod) of
		%% Line 287
		<'true'> when 'true' ->
		    let <_4> =
			call %% Line 288
			     'filename':%% Line 288
					'join'
			    (%% Line 288
			     Base, %% Line 288
				   [46|[46]])
		    in  let <Matches> =
			    [_4|%% Line 288
				[]]
			in  %% Line 289
			    apply 'do_wildcard_2'/4
				(Matches, Rest, Result, Mod)
		%% Line 290
		<'false'> when 'true' ->
		    %% Line 291
		    Result
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 293
	  <Base0,[Pattern|Rest],Result,Mod> when 'true' ->
	      %% Line 294
	      case apply 'do_list_dir'/2
		       (Base0, Mod) of
		%% Line 295
		<{'ok',Files}> when 'true' ->
		    let <Base> =
			apply %% Line 296
			      'prepare_base'/1
			    (%% Line 296
			     Base0)
		    in  let <Matches> =
			    apply %% Line 297
				  'do_wildcard_4'/3
				(%% Line 297
				 Pattern, %% Line 297
					  Base, %% Line 297
						Files)
			in  %% Line 298
			    apply 'do_wildcard_2'/4
				(Matches, Rest, Result, Mod)
		%% Line 299
		<_14> when 'true' ->
		    %% Line 300
		    Result
	      end
	  %% Line 302
	  <Base,[],Result,_X_Mod> when 'true' ->
	      %% Line 303
	      [Base|Result]
	  ( <_13,_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_13,_12,_11,_10})
		  -| [{'function_name',{'do_wildcard_3',4}}] )
	    -| ['compiler_generated'] )
	end
'do_wildcard_4'/3 =
    %% Line 305
    fun (_0,_1,_2) ->
	%% Line 306
	case apply 'will_always_match'/1
		 (_0) of
	  %% Line 307
	  <'false'> when 'true' ->
	      %% Line 308
	      ( letrec
		    'lc$^0'/1 =
			fun (_5) ->
			    case _5 of
			      <[F|_4]> when 'true' ->
				  ( case apply 'match_part'/2
					     (_0, F) of
				      <'true'> when 'true' ->
					  let <_6> =
					      call 'erlang':'++'
						  (_1, F)
					  in  let <_7> =
						  apply 'lc$^0'/1
						      (_4)
					      in  ( [_6|_7]
						    -| ['compiler_generated'] )
				      ( <'false'> when 'true' ->
					    apply 'lc$^0'/1
						(_4)
					-| ['compiler_generated'] )
				      ( <_8> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_8})
					-| ['compiler_generated'] )
				    end
				    -| ['list_comprehension'] )
			      <[]> when 'true' ->
				  []
			      ( <_18> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_18})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(_2)
		-| ['list_comprehension'] )
	  %% Line 309
	  <'true'> when 'true' ->
	      %% Line 310
	      ( letrec
		    'lc$^1'/1 =
			fun (_11) ->
			    case _11 of
			      <[F|_10]> when 'true' ->
				  let <_12> =
				      call 'erlang':'++'
					  (_1, F)
				  in  let <_13> =
					  apply 'lc$^1'/1
					      (_10)
				      in  ( [_12|_13]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_19> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_19})
				      -| [{'function_name',{'lc$^1',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^1'/1
			(_2)
		-| ['list_comprehension'] )
	  ( <_14> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_14})
	    -| ['compiler_generated'] )
	end
'match_part'/2 =
    %% Line 313
    fun (_0,_1) ->
	case <_0,_1> of
	  <['question'|Rest1],[_8|Rest2]> when 'true' ->
	      %% Line 314
	      apply 'match_part'/2
		  (Rest1, Rest2)
	  %% Line 315
	  <['accept'],_9> when 'true' ->
	      %% Line 316
	      'true'
	  %% Line 317
	  <['double_star'],_10> when 'true' ->
	      %% Line 318
	      'true'
	  %% Line 319
	  <['star'|Rest],File> when 'true' ->
	      %% Line 320
	      apply 'do_star'/2
		  (Rest, File)
	  %% Line 321
	  <[{'one_of',Ordset}|Rest],[C|File]> when 'true' ->
	      %% Line 322
	      ( case call 'gb_sets':'is_element'
			 (C, Ordset) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'match_part'/2
			    (Rest, File)
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_2> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_2}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 323
	  <[{'alt',Alts}|[]],File> when 'true' ->
	      %% Line 324
	      apply 'do_alt'/2
		  (Alts, File)
	  %% Line 325
	  <[C|Rest1],[_11|Rest2]>
	      when let <_12> =
		    call 'erlang':'=:='
			(_11, C)
		in  let <_13> =
			call 'erlang':'is_integer'
			    (C)
		    in  call 'erlang':'and'
			    (_12, _13) ->
	      %% Line 326
	      apply 'match_part'/2
		  (Rest1, Rest2)
	  %% Line 327
	  <[X|_14],[Y|_15]>
	      when let <_4> =
		    call 'erlang':'is_integer'
			(X)
		in  let <_5> =
			call 'erlang':'is_integer'
			    (Y)
		    in  call 'erlang':'and'
			    (_4, _5) ->
	      %% Line 328
	      'false'
	  %% Line 329
	  <[],[]> when 'true' ->
	      %% Line 330
	      'true'
	  %% Line 331
	  <[],[_16|_17]> when 'true' ->
	      %% Line 332
	      'false'
	  %% Line 333
	  <[_18|_19],[]> when 'true' ->
	      %% Line 334
	      'false'
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'match_part',2}}] )
	    -| ['compiler_generated'] )
	end
'will_always_match'/1 =
    %% Line 336
    fun (_0) ->
	case _0 of
	  <['accept']> when 'true' ->
	      'true'
	  %% Line 337
	  <['double_star']> when 'true' ->
	      'true'
	  %% Line 338
	  <_2> when 'true' ->
	      'false'
	end
'prepare_base'/1 =
    %% Line 340
    fun (_0) ->
	let <Base1> =
	    call %% Line 341
		 'filename':%% Line 341
			    'join'
		(_0, %% Line 341
		     [120])
	in  %% Line 342
	    case call 'lists':'reverse'
		     (Base1) of
	      <[120|Base2]> when 'true' ->
		  %% Line 343
		  call 'lists':'reverse'
		      (Base2)
	      ( <_2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_2})
		-| ['compiler_generated'] )
	    end
'do_double_star'/6 =
    %% Line 345
    fun (_0,_1,_2,_3,_4,_5) ->
	case <_0,_1,_2,_3,_4,_5> of
	  <Base,[H|T],Patterns,Result0,Mod,Root> when 'true' ->
	      let <_7> =
		  case %% Line 346
		       Root of
		    %% Line 347
		    <'false'> when 'true' ->
			call 'filename':'join'
			    (Base, H)
		    %% Line 348
		    <'true'> when 'true' ->
			H
		    ( <_6> when 'true' ->
			  %% Line 346
			  primop 'match_fail'
			      ({'case_clause',_6})
		      -| ['compiler_generated'] )
		  end
	      in  let <_10> =
		      case %% Line 350
			   apply 'do_list_dir'/2
			       (_7, Mod) of
			%% Line 351
			<{'ok',Files}> when 'true' ->
			    %% Line 352
			    apply 'do_double_star'/6
				(_7, Files, Patterns, Result0, Mod, 'false')
			%% Line 353
			<_22> when 'true' ->
			    Result0
		      end
		  in  let <_14> =
			  case %% Line 355
			       Patterns of
			    %% Line 357
			    <_23>
				when ( call 'erlang':'=:='
					(Root,
					 'true')
				    -| ['compiler_generated'] ) ->
				_10
			    %% Line 360
			    <[]> when 'true' ->
				[_7|_10]
			    %% Line 364
			    <[Pattern|Rest]> when 'true' ->
				%% Line 365
				case apply 'match_part'/2
					 (Pattern, H) of
				  %% Line 366
				  <'true'> when 'true' ->
				      apply 'do_wildcard_2'/4
					  ([_7|[]], Rest, _10, Mod)
				  %% Line 367
				  <'false'> when 'true' ->
				      _10
				  ( <_12> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_12})
				    -| ['compiler_generated'] )
				end
			    ( <_13> when 'true' ->
				  %% Line 355
				  primop 'match_fail'
				      ({'case_clause',_13})
			      -| ['compiler_generated'] )
			  end
		      in  %% Line 370
			  apply 'do_double_star'/6
			      (Base, T, Patterns, _14, Mod, Root)
	  %% Line 371
	  <_X_Base,[],_X_Patterns,Result,_X_Mod,_X_Root> when 'true' ->
	      %% Line 372
	      Result
	  ( <_21,_20,_19,_18,_17,_16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_21,_20,_19,_18,_17,_16})
		  -| [{'function_name',{'do_double_star',6}}] )
	    -| ['compiler_generated'] )
	end
'do_star'/2 =
    %% Line 374
    fun (_0,_1) ->
	case <_0,_1> of
	  <Pattern,File = [_6|Rest]> when 'true' ->
	      %% Line 375
	      ( case apply 'match_part'/2
			 (Pattern, File) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			'true'
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'do_star'/2
			    (Pattern, Rest)
		    -| ['compiler_generated'] )
		  ( <_2> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_2}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 376
	  <Pattern,[]> when 'true' ->
	      %% Line 377
	      apply 'match_part'/2
		  (Pattern, [])
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'do_star',2}}] )
	    -| ['compiler_generated'] )
	end
'do_alt'/2 =
    %% Line 379
    fun (_0,_1) ->
	case <_0,_1> of
	  <[Alt|Rest],File> when 'true' ->
	      %% Line 380
	      ( case apply 'match_part'/2
			 (Alt, File) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			'true'
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'do_alt'/2
			    (Rest, File)
		    -| ['compiler_generated'] )
		  ( <_2> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_2}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 381
	  <[],_X_File> when 'true' ->
	      %% Line 382
	      'false'
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'do_alt',2}}] )
	    -| ['compiler_generated'] )
	end
'do_list_dir'/2 =
    %% Line 384
    fun (_0,_1) ->
	apply 'eval_list_dir'/2
	    (_0, _1)
'compile_wildcard'/1 =
    %% Line 396
    fun (_0) ->
	case _0 of
	  <Pattern>
	      when call 'erlang':'is_list'
		    (_0) ->
	      let <_5> =
		  try
		      %% Line 397
		      apply 'compile_wildcard'/2
			  (Pattern, [46])
		  of <_1> ->
		      _1
		  catch <_4,_3,_2> ->
		      %% Line 397
		      case <_4,_3,_2> of
			<( 'error'
			   -| ['compiler_generated'] ),UnUsUalVaRiAbLeNaMe = ( {( 'badpattern'
										  -| ['compiler_generated'] ),_7}
									       -| ['compiler_generated'] ),_8> when 'true' ->
			    call 'erlang':'error'
				(UnUsUalVaRiAbLeNaMe)
			( <_9,_10,_11> when 'true' ->
			      primop 'raise'
				  (_11, _10)
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 397
		  {'compiled_wildcard',_5}
	  ( <_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6})
		  -| [{'function_name',{'compile_wildcard',1}}] )
	    -| ['compiler_generated'] )
	end
'compile_wildcard'/2 =
    %% Line 399
    fun (_0,_1) ->
	let <Pattern> =
	    apply %% Line 400
		  'convert_escapes'/1
		(_0)
	in  %% Line 401
	    case call 'filename':'split'
		     (Pattern) of
	      <_@r0 = [Root|Rest]> when 'true' ->
		  %% Line 402
		  case call 'filename':'pathtype'
			   (Root) of
		    %% Line 403
		    <'relative'> when 'true' ->
			let <Cwd> =
			    apply %% Line 404
				  'prepare_base'/1
				(_1)
			in  %% Line 405
			    apply 'compile_wildcard_2'/2
				(_@r0, {'cwd',Cwd})
		    %% Line 406
		    <_8> when 'true' ->
			%% Line 407
			apply 'compile_wildcard_2'/2
			    (Rest, {'root',0,Root})
		  end
	      ( <_3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_3})
		-| ['compiler_generated'] )
	    end
'compile_wildcard_2'/2 =
    %% Line 410
    fun (_0,_1) ->
	case <_0,_1> of
	  <[Part|Rest],Root> when 'true' ->
	      let <Pattern> =
		  apply %% Line 411
			'compile_part'/1
		      (%% Line 411
		       Part)
	      in  %% Line 412
		  case apply 'is_literal_pattern'/1
			   (Pattern) of
		    %% Line 413
		    <'true'> when 'true' ->
			let <_3> =
			    apply %% Line 420
				  'compile_join'/2
				(%% Line 420
				 Root, %% Line 420
				       Pattern)
			in  %% Line 420
			    apply 'compile_wildcard_2'/2
				(Rest, _3)
		    %% Line 421
		    <'false'> when 'true' ->
			%% Line 424
			apply 'compile_wildcard_3'/2
			    (Rest, [Pattern|[Root|[]]])
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 426
	  <[],{'root',PrefixLen,Root}> when 'true' ->
	      %% Line 427
	      {{'exists',Root},PrefixLen}
	  ( <_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_6,_5})
		  -| [{'function_name',{'compile_wildcard_2',2}}] )
	    -| ['compiler_generated'] )
	end
'is_literal_pattern'/1 =
    %% Line 429
    fun (_0) ->
	case _0 of
	  <[H|T]> when 'true' ->
	      %% Line 430
	      ( case <> of
		  ( <>
			when call 'erlang':'is_integer'
			      (H) ->
			apply 'is_literal_pattern'/1
			    (T)
		    -| ['compiler_generated'] )
		  ( <> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 431
	  <[]> when 'true' ->
	      %% Line 432
	      'true'
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'is_literal_pattern',1}}] )
	    -| ['compiler_generated'] )
	end
'compile_wildcard_3'/2 =
    %% Line 434
    fun (_0,_1) ->
	case <_0,_1> of
	  <[Part|Rest],Result> when 'true' ->
	      let <_2> =
		  apply %% Line 435
			'compile_part'/1
		      (%% Line 435
		       Part)
	      in  %% Line 435
		  apply 'compile_wildcard_3'/2
		      (Rest, [_2|Result])
	  %% Line 436
	  <[],Result> when 'true' ->
	      %% Line 437
	      case call 'lists':'reverse'
		       (Result) of
		%% Line 438
		<[{'root',PrefixLen,Root}|Compiled]> when 'true' ->
		    %% Line 439
		    {[Root|Compiled],PrefixLen}
		%% Line 440
		<[{'cwd',Root}|Compiled]> when 'true' ->
		    let <_3> =
			call %% Line 441
			     'filename':%% Line 441
					'join'
			    (%% Line 441
			     Root, %% Line 441
				   [120])
		    in  let <_4> =
			    call %% Line 441
				 'erlang':%% Line 441
					  'length'
				(_3)
			in  let <_5> =
				call %% Line 441
				     'erlang':%% Line 441
					      '-'
				    (_4, %% Line 441
					 1)
			    in  %% Line 441
				{[Root|Compiled],_5}
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_6})
		  -| ['compiler_generated'] )
	      end
	  ( <_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7})
		  -| [{'function_name',{'compile_wildcard_3',2}}] )
	    -| ['compiler_generated'] )
	end
'compile_join'/2 =
    %% Line 444
    fun (_0,_1) ->
	case <_0,_1> of
	  <{'cwd',[46]},File> when 'true' ->
	      %% Line 445
	      {'root',0,File}
	  %% Line 446
	  <{'cwd',Cwd},File0> when 'true' ->
	      let <File> =
		  call %% Line 447
		       'filename':%% Line 447
				  'join'
		      (%% Line 447
		       [File0|[]])
	      in  let <Root> =
		      call %% Line 448
			   'filename':%% Line 448
				      'join'
			  (%% Line 448
			   Cwd, %% Line 448
				File)
		  in  let <_5> =
			  call %% Line 449
			       'erlang':%% Line 449
					'length'
			      (%% Line 449
			       Root)
		      in  let <_4> =
			      call %% Line 449
				   'erlang':%% Line 449
					    'length'
				  (%% Line 449
				   File)
			  in  let <PrefixLen> =
				  call %% Line 449
				       'erlang':%% Line 449
						'-'
				      (_5, _4)
			      in  %% Line 450
				  {'root',PrefixLen,Root}
	  %% Line 451
	  <{'root',PrefixLen,Root},File> when 'true' ->
	      let <_7> =
		  call %% Line 452
		       'filename':%% Line 452
				  'join'
		      (%% Line 452
		       Root, %% Line 452
			     File)
	      in  %% Line 452
		  {'root',PrefixLen,_7}
	  ( <_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8})
		  -| [{'function_name',{'compile_join',2}}] )
	    -| ['compiler_generated'] )
	end
'compile_part'/1 =
    %% Line 454
    fun (_0) ->
	let <Part> =
	    apply %% Line 455
		  'wrap_escapes'/1
		(_0)
	in  %% Line 456
	    apply 'compile_part'/3
		(Part, 'false', [])
'compile_part_to_sep'/1 =
    %% Line 458
    fun (_0) ->
	%% Line 459
	apply 'compile_part'/3
	    (_0, 'true', [])
'compile_part'/3 =
    %% Line 461
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[],'true',_11> when 'true' ->
	      %% Line 462
	      apply 'badpattern'/1
		  ('missing_delimiter')
	  %% Line 463
	  <[44|Rest],'true',Result> when 'true' ->
	      let <_3> =
		  call %% Line 464
		       'lists':%% Line 464
			       'reverse'
		      (%% Line 464
		       Result)
	      in  %% Line 464
		  {'ok',44,_3,Rest}
	  %% Line 465
	  <[125|Rest],'true',Result> when 'true' ->
	      let <_4> =
		  call %% Line 466
		       'lists':%% Line 466
			       'reverse'
		      (%% Line 466
		       Result)
	      in  %% Line 466
		  {'ok',125,_4,Rest}
	  %% Line 467
	  <[63|Rest],Upto,Result> when 'true' ->
	      %% Line 468
	      apply 'compile_part'/3
		  (Rest, Upto, ['question'|Result])
	  %% Line 469
	  <[42|[42]],Upto,Result> when 'true' ->
	      %% Line 470
	      apply 'compile_part'/3
		  ([], Upto, ['double_star'|Result])
	  %% Line 471
	  <[42|[42|Rest]],Upto,Result> when 'true' ->
	      %% Line 472
	      apply 'compile_part'/3
		  (Rest, Upto, ['star'|Result])
	  %% Line 473
	  <[42],Upto,Result> when 'true' ->
	      %% Line 474
	      apply 'compile_part'/3
		  ([], Upto, ['accept'|Result])
	  %% Line 475
	  <[42|Rest],Upto,Result> when 'true' ->
	      %% Line 476
	      apply 'compile_part'/3
		  (Rest, Upto, ['star'|Result])
	  %% Line 477
	  <[91|Rest],Upto,Result> when 'true' ->
	      let <_5> =
		  call %% Line 478
		       'ordsets':%% Line 478
				 'new'
		      ()
	      in  %% Line 478
		  case apply 'compile_charset'/2
			   (Rest, _5) of
		    %% Line 479
		    <{'ok',Charset,Rest1}> when 'true' ->
			%% Line 480
			apply 'compile_part'/3
			    (Rest1, Upto, [Charset|Result])
		    %% Line 481
		    <'error'> when 'true' ->
			%% Line 482
			apply 'compile_part'/3
			    (Rest, Upto, [91|Result])
		    ( <_6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 484
	  <[123|Rest],Upto,Result> when 'true' ->
	      %% Line 485
	      case apply 'compile_alt'/1
		       (Rest) of
		%% Line 486
		<{'ok',Alt}> when 'true' ->
		    %% Line 487
		    call 'lists':'reverse'
			(Result, [Alt|[]])
		%% Line 488
		<'error'> when 'true' ->
		    %% Line 489
		    apply 'compile_part'/3
			(Rest, Upto, [123|Result])
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 491
	  <[{'escaped',X}|Rest],Upto,Result> when 'true' ->
	      %% Line 492
	      apply 'compile_part'/3
		  (Rest, Upto, [X|Result])
	  %% Line 493
	  <[X|Rest],Upto,Result> when 'true' ->
	      %% Line 494
	      apply 'compile_part'/3
		  (Rest, Upto, [X|Result])
	  %% Line 495
	  <[],_X_Upto,Result> when 'true' ->
	      %% Line 496
	      call 'lists':'reverse'
		  (Result)
	  ( <_10,_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8})
		  -| [{'function_name',{'compile_part',3}}] )
	    -| ['compiler_generated'] )
	end
'compile_charset'/2 =
    %% Line 498
    fun (_0,_1) ->
	case <_0,_1> of
	  <[93|Rest],Ordset> when 'true' ->
	      let <_2> =
		  call %% Line 499
		       'ordsets':%% Line 499
				 'add_element'
		      (%% Line 499
		       93, %% Line 499
			   Ordset)
	      in  %% Line 499
		  apply 'compile_charset1'/2
		      (Rest, _2)
	  %% Line 500
	  <[],_X_Ordset> when 'true' ->
	      %% Line 501
	      'error'
	  %% Line 502
	  <List,Ordset> when 'true' ->
	      %% Line 503
	      apply 'compile_charset1'/2
		  (List, Ordset)
	end
'compile_charset1'/2 =
    %% Line 505
    fun (_0,_1) ->
	case <_0,_1> of
	  <[Lower|[45|[Upper|Rest]]],Ordset>
	      when call 'erlang':'=<'
		    (Lower,
		     Upper) ->
	      let <_2> =
		  apply %% Line 506
			'compile_range'/3
		      (%% Line 506
		       Lower, %% Line 506
			      Upper, %% Line 506
				     Ordset)
	      in  %% Line 506
		  apply 'compile_charset1'/2
		      (Rest, _2)
	  %% Line 507
	  <[93|Rest],Ordset> when 'true' ->
	      let <_3> =
		  call %% Line 508
		       'gb_sets':%% Line 508
				 'from_ordset'
		      (%% Line 508
		       Ordset)
	      in  %% Line 508
		  {'ok',{'one_of',_3},Rest}
	  %% Line 509
	  <[{'escaped',X}|Rest],Ordset> when 'true' ->
	      let <_4> =
		  call %% Line 510
		       'ordsets':%% Line 510
				 'add_element'
		      (%% Line 510
		       X, %% Line 510
			  Ordset)
	      in  %% Line 510
		  apply 'compile_charset1'/2
		      (Rest, _4)
	  %% Line 511
	  <[X|Rest],Ordset> when 'true' ->
	      let <_5> =
		  call %% Line 512
		       'ordsets':%% Line 512
				 'add_element'
		      (%% Line 512
		       X, %% Line 512
			  Ordset)
	      in  %% Line 512
		  apply 'compile_charset1'/2
		      (Rest, _5)
	  %% Line 513
	  <[],_X_Ordset> when 'true' ->
	      %% Line 514
	      'error'
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'compile_charset1',2}}] )
	    -| ['compiler_generated'] )
	end
'compile_range'/3 =
    %% Line 516
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Lower,Current,Ordset>
	      when call 'erlang':'=<'
		    (Lower,
		     Current) ->
	      let <_4> =
		  call %% Line 517
		       'erlang':%% Line 517
				'-'
		      (%% Line 517
		       Current, %% Line 517
				1)
	      in  let <_3> =
		      call %% Line 517
			   'ordsets':%% Line 517
				     'add_element'
			  (%% Line 517
			   Current, %% Line 517
				    Ordset)
		  in  %% Line 517
		      apply 'compile_range'/3
			  (Lower, _4, _3)
	  %% Line 518
	  <_8,_9,Ordset> when 'true' ->
	      %% Line 519
	      Ordset
	end
'compile_alt'/1 =
    %% Line 521
    fun (_0) ->
	%% Line 522
	apply 'compile_alt'/2
	    (_0, [])
'compile_alt'/2 =
    %% Line 524
    fun (_0,_1) ->
	%% Line 525
	case apply 'compile_part_to_sep'/1
		 (_0) of
	  %% Line 526
	  <{'ok',44,AltPattern,Rest}> when 'true' ->
	      %% Line 527
	      apply 'compile_alt'/2
		  (Rest, [AltPattern|_1])
	  %% Line 528
	  <{'ok',125,AltPattern,Rest}> when 'true' ->
	      let <NewResult> =
		  [%% Line 529
		   AltPattern|_1]
	      in  let <RestPattern> =
		      apply %% Line 530
			    'compile_part'/1
			  (%% Line 530
			   Rest)
		  in  let <_9> =
			  letrec
			      'lc$^0'/1 =
				  %% Line 531
				  fun (_6) ->
				      case _6 of
					<[Alt|_5]> when 'true' ->
					    let <_7> =
						call 'erlang':'++'
						    (Alt, RestPattern)
					    in  let <_8> =
						    apply 'lc$^0'/1
							(_5)
						in  ( [_7|_8]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_14> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_14})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  %% Line 531
			      apply 'lc$^0'/1
				  (NewResult)
		      in  %% Line 531
			  {'ok',{'alt',_9}}
	  %% Line 532
	  <_13>
	      when call 'erlang':'=:='
		    (_13,
		     _0) ->
	      %% Line 533
	      'error'
	  ( <_10> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_10})
	    -| ['compiler_generated'] )
	end
'convert_escapes'/1 =
    %% Line 539
    fun (_0) ->
	case _0 of
	  <[64|T]> when 'true' ->
	      let <_1> =
		  apply %% Line 540
			'convert_escapes'/1
		      (%% Line 540
		       T)
	      in  %% Line 540
		  [64|[64|_1]]
	  %% Line 541
	  <[92|T]> when 'true' ->
	      let <_2> =
		  apply %% Line 542
			'convert_escapes'/1
		      (%% Line 542
		       T)
	      in  %% Line 542
		  [64|[101|_2]]
	  %% Line 543
	  <[H|T]> when 'true' ->
	      let <_3> =
		  apply %% Line 544
			'convert_escapes'/1
		      (%% Line 544
		       T)
	      in  %% Line 544
		  [H|_3]
	  %% Line 545
	  <[]> when 'true' ->
	      %% Line 546
	      []
	  ( <_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4})
		  -| [{'function_name',{'convert_escapes',1}}] )
	    -| ['compiler_generated'] )
	end
'wrap_escapes'/1 =
    %% Line 551
    fun (_0) ->
	case _0 of
	  <[64|[64|T]]> when 'true' ->
	      let <_1> =
		  apply %% Line 552
			'wrap_escapes'/1
		      (%% Line 552
		       T)
	      in  %% Line 552
		  [64|_1]
	  %% Line 553
	  <[64|[101|[C|T]]]> when 'true' ->
	      let <_2> =
		  apply %% Line 554
			'wrap_escapes'/1
		      (%% Line 554
		       T)
	      in  %% Line 554
		  [{'escaped',C}|_2]
	  %% Line 555
	  <[64|[101]]> when 'true' ->
	      %% Line 556
	      []
	  %% Line 557
	  <[H|T]> when 'true' ->
	      let <_3> =
		  apply %% Line 558
			'wrap_escapes'/1
		      (%% Line 558
		       T)
	      in  %% Line 558
		  [H|_3]
	  %% Line 559
	  <[]> when 'true' ->
	      %% Line 560
	      []
	  ( <_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4})
		  -| [{'function_name',{'wrap_escapes',1}}] )
	    -| ['compiler_generated'] )
	end
'badpattern'/1 =
    %% Line 562
    fun (_0) ->
	%% Line 563
	call 'erlang':'error'
	    ({'badpattern',_0})
'eval_read_file_info'/2 =
    %% Line 565
    fun (_0,_1) ->
	case <_0,_1> of
	  <File,'file'> when 'true' ->
	      %% Line 566
	      call 'file':'read_file_info'
		  (File)
	  %% Line 567
	  <File,'erl_prim_loader'> when 'true' ->
	      %% Line 568
	      case call 'erl_prim_loader':'read_file_info'
		       (File) of
		%% Line 569
		<'error'> when 'true' ->
		    {'error','erl_prim_loader'}
		%% Line 570
		<Res> when 'true' ->
		    Res
	      end
	  %% Line 572
	  <File,Mod> when 'true' ->
	      %% Line 573
	      call Mod:'read_file_info'
		  (File)
	end
'eval_read_link_info'/2 =
    %% Line 575
    fun (_0,_1) ->
	case <_0,_1> of
	  <File,'file'> when 'true' ->
	      %% Line 576
	      call 'file':'read_link_info'
		  (File)
	  %% Line 577
	  <File,'erl_prim_loader'> when 'true' ->
	      %% Line 578
	      case call 'erl_prim_loader':'read_link_info'
		       (File) of
		%% Line 579
		<'error'> when 'true' ->
		    {'error','erl_prim_loader'}
		%% Line 580
		<Res> when 'true' ->
		    Res
	      end
	  %% Line 582
	  <File,Mod> when 'true' ->
	      %% Line 583
	      call Mod:'read_link_info'
		  (File)
	end
'eval_list_dir'/2 =
    %% Line 585
    fun (_0,_1) ->
	case <_0,_1> of
	  <Dir,'file'> when 'true' ->
	      %% Line 586
	      call 'file':'list_dir'
		  (Dir)
	  %% Line 587
	  <Dir,'erl_prim_loader'> when 'true' ->
	      %% Line 588
	      case call 'erl_prim_loader':'list_dir'
		       (Dir) of
		%% Line 589
		<'error'> when 'true' ->
		    {'error','erl_prim_loader'}
		%% Line 590
		<Res> when 'true' ->
		    Res
	      end
	  %% Line 592
	  <Dir,Mod> when 'true' ->
	      %% Line 593
	      call Mod:'list_dir'
		  (Dir)
	end
'keep_dir_search_rules'/1 =
    %% Line 597
    fun (_0) ->
	%% Line 598
	( letrec
	      'lc$^0'/1 =
		  fun (_3) ->
		      case _3 of
			<[T = {_6,_7}|_2]> when 'true' ->
			    let <_4> =
				apply 'lc$^0'/1
				    (_2)
			    in  ( [T|_4]
				  -| ['compiler_generated'] )
			( <[_1|_2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_8> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_8})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_0)
	  -| ['list_comprehension'] )
'keep_suffix_search_rules'/1 =
    %% Line 600
    fun (_0) ->
	%% Line 601
	( letrec
	      'lc$^0'/1 =
		  fun (_3) ->
		      case _3 of
			<[T = {_6,_7,_8}|_2]> when 'true' ->
			    let <_4> =
				apply 'lc$^0'/1
				    (_2)
			    in  ( [T|_4]
				  -| ['compiler_generated'] )
			( <[_1|_2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_9> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_9})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_0)
	  -| ['list_comprehension'] )
'get_search_rules'/0 =
    %% Line 603
    fun () ->
	%% Line 604
	case call 'application':'get_env'
		 ('kernel', 'source_search_rules') of
	  %% Line 605
	  <'undefined'> when 'true' ->
	      apply 'default_search_rules'/0
		  ()
	  %% Line 606
	  <{'ok',[]}> when 'true' ->
	      apply 'default_search_rules'/0
		  ()
	  %% Line 607
	  <{'ok',R}>
	      when call 'erlang':'is_list'
		    (R) ->
	      R
	  ( <_0> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_0})
	    -| ['compiler_generated'] )
	end
'default_search_rules'/0 =
    %% Line 610
    fun () ->
	let <_1> =
	    apply %% Line 612
		  'erl_source_search_rules'/0
		()
	in  let <_2> =
		apply %% Line 614
		      'erl_source_search_rules'/0
		    ()
	    in  let <_3> =
		    apply %% Line 615
			  'c_source_search_rules'/0
			()
		in  let <_4> =
			apply %% Line 616
			      'c_source_search_rules'/0
			    ()
		    in  let <_5> =
			    apply %% Line 617
				  'c_source_search_rules'/0
				()
			in  let <_6> =
				apply %% Line 618
				      'basic_source_search_rules'/0
				    ()
			    in  let <_0> =
				    apply %% Line 620
					  'erl_source_search_rules'/0
					()
				in  %% Line 611
				    [%% Line 612
				     {[46|[98|[101|[97|[109]]]]],[46|[101|[114|[108]]]],_1}|%% Line 613
											    [{[46|[101|[114|[108]]]],[46|[121|[114|[108]]]],[]}|%% Line 614
																		[{[],[46|[115|[114|[99]]]],_2}|%% Line 615
																					       [{[46|[115|[111]]],[46|[99]],_3}|%% Line 616
																										[{[46|[111]],[46|[99]],_4}|%% Line 617
																													   [{[],[46|[99]],_5}|%% Line 618
																															      [{[],[46|[105|[110]]],_6}|%% Line 620
																																			[{[],[]}|_0]]]]]]]]
'basic_source_search_rules'/0 =
    %% Line 622
    fun () ->
	let <_1> =
	    apply %% Line 623
		  'erl_source_search_rules'/0
		()
	in  let <_0> =
		apply %% Line 624
		      'c_source_search_rules'/0
		    ()
	    in  %% Line 624
		call 'erlang':'++'
		    (_1, _0)
'erl_source_search_rules'/0 =
    %% Line 626
    fun () ->
	let <_0> =
	    call %% Line 628
		 'filename':%% Line 628
			    'join'
		(%% Line 628
		 [115|[114|[99]]], %% Line 628
				   [42])
	in  let <_1> =
		call %% Line 629
		     'filename':%% Line 629
				'join'
		    (%% Line 629
		     [101|[115|[114|[99]]]], %% Line 629
					     [42])
	    in  %% Line 627
		[{[101|[98|[105|[110]]]],[115|[114|[99]]]}|[{[101|[98|[105|[110]]]],[101|[115|[114|[99]]]]}|%% Line 628
													    [{[101|[98|[105|[110]]]],_0}|%% Line 629
																	 [{[101|[98|[105|[110]]]],_1}|[]]]]]
'c_source_search_rules'/0 =
    %% Line 631
    fun () ->
	%% Line 632
	[{[112|[114|[105|[118]]]],[99|[95|[115|[114|[99]]]]]}|[{[112|[114|[105|[118]]]],[115|[114|[99]]]}|[{[98|[105|[110]]],[99|[95|[115|[114|[99]]]]]}|[{[98|[105|[110]]],[115|[114|[99]]]}|[{[],[115|[114|[99]]]}]]]]]
'find_file'/2 =
    %% Line 640
    fun (_0,_1) ->
	%% Line 641
	apply 'find_file'/3
	    (_0, _1, [])
'find_file'/3 =
    %% Line 645
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Filename,Dir,[]> when 'true' ->
	      let <_3> =
		  apply %% Line 646
			'get_search_rules'/0
		      ()
	      in  %% Line 646
		  apply 'find_file'/3
		      (Filename, Dir, _3)
	  %% Line 647
	  <Filename,Dir,Rules> when 'true' ->
	      let <_4> =
		  apply %% Line 648
			'keep_dir_search_rules'/1
		      (%% Line 648
		       Rules)
	      in  %% Line 648
		  apply 'try_dir_rules'/3
		      (_4, Filename, Dir)
	end
'find_source'/1 =
    %% Line 657
    fun (_0) ->
	let <_2> =
	    call %% Line 658
		 'filename':%% Line 658
			    'basename'
		(_0)
	in  let <_1> =
		call %% Line 658
		     'filename':%% Line 658
				'dirname'
		    (_0)
	    in  %% Line 658
		apply 'find_source'/2
		    (_2, _1)
'find_source'/2 =
    %% Line 662
    fun (_0,_1) ->
	%% Line 663
	apply 'find_source'/3
	    (_0, _1, [])
'find_source'/3 =
    %% Line 667
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Filename,Dir,[]> when 'true' ->
	      let <_3> =
		  apply %% Line 668
			'get_search_rules'/0
		      ()
	      in  %% Line 668
		  apply 'find_source'/3
		      (Filename, Dir, _3)
	  %% Line 669
	  <Filename,Dir,Rules> when 'true' ->
	      let <_4> =
		  apply %% Line 670
			'keep_suffix_search_rules'/1
		      (%% Line 670
		       Rules)
	      in  %% Line 670
		  apply 'try_suffix_rules'/3
		      (_4, Filename, Dir)
	end
'try_suffix_rules'/3 =
    %% Line 672
    fun (_0,_1,_2) ->
	let <Ext> =
	    call %% Line 673
		 'filename':%% Line 673
			    'extension'
		(_1)
	in  let <_4> =
		call %% Line 674
		     'filename':%% Line 674
				'rootname'
		    (_1, %% Line 674
			 Ext)
	    in  %% Line 674
		apply 'try_suffix_rules'/4
		    (_0, _4, _2, Ext)
'try_suffix_rules'/4 =
    %% Line 676
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[{Ext,Src,Rules}|Rest],Root,Dir,_13>
	      when let <_14> =
		    call 'erlang':'=:='
			(_13, Ext)
		in  let <_4> =
			call %% Line 677
			     'erlang':%% Line 677
				      'is_list'
			    (%% Line 677
			     Src)
		    in  let <_5> =
			    call %% Line 677
				 'erlang':%% Line 677
					  'is_list'
				(%% Line 677
				 Rules)
			in  let <_15> =
				call %% Line 677
				     'erlang':%% Line 677
					      'and'
				    (_4, _5)
			    in  call 'erlang':'and'
				    (_14, _15) ->
	      let <_7> =
		  apply %% Line 678
			'add_local_search'/1
		      (%% Line 678
		       Rules)
	      in  let <_6> =
		      call %% Line 678
			   'erlang':%% Line 678
				    '++'
			  (%% Line 678
			   Root, %% Line 678
				 Src)
		  in  %% Line 678
		      case apply 'try_dir_rules'/3
			       (_7, _6, Dir) of
			%% Line 679
			<_@r0 = {'ok',File}> when 'true' ->
			    _@r0
			%% Line 680
			<_X_Other> when 'true' ->
			    %% Line 681
			    apply 'try_suffix_rules'/4
				(Rest, Root, Dir, Ext)
		      end
	  %% Line 683
	  <[_16|Rest],Root,Dir,Ext> when 'true' ->
	      %% Line 684
	      apply 'try_suffix_rules'/4
		  (Rest, Root, Dir, Ext)
	  %% Line 685
	  <[],_X_Root,_X_Dir,_X_Ext> when 'true' ->
	      %% Line 686
	      {'error','not_found'}
	  ( <_12,_11,_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11,_10,_9})
		  -| [{'function_name',{'try_suffix_rules',4}}] )
	    -| ['compiler_generated'] )
	end
'add_local_search'/1 =
    %% Line 689
    fun (_0) ->
	let <_4> =
	    fun (_2) ->
		%% Line 691
		call 'erlang':'=/='
		    (_2, {[],[]})
	in  let <_5> =
		call %% Line 691
		     'lists':%% Line 691
			     'filter'
		    (_4, _0)
	    in  %% Line 691
		[{[],[]}|_5]
'try_dir_rules'/3 =
    %% Line 693
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <[{From,To}|Rest],Filename,Dir>
	      when let <_3> =
		    call %% Line 694
			 'erlang':%% Line 694
				  'is_list'
			(%% Line 694
			 From)
		in  let <_4> =
			call %% Line 694
			     'erlang':%% Line 694
				      'is_list'
			    (%% Line 694
			     To)
		    in  %% Line 694
			call 'erlang':'and'
			    (_3, _4) ->
	      %% Line 695
	      case apply 'try_dir_rule'/4
		       (Dir, Filename, From, To) of
		%% Line 696
		<_@r0 = {'ok',File}> when 'true' ->
		    _@r0
		%% Line 697
		<'error'> when 'true' ->
		    apply 'try_dir_rules'/3
			(Rest, Filename, Dir)
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 699
	  <[],_X_Filename,_X_Dir> when 'true' ->
	      %% Line 700
	      {'error','not_found'}
	  ( <_8,_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7,_6})
		  -| [{'function_name',{'try_dir_rules',3}}] )
	    -| ['compiler_generated'] )
	end
'try_dir_rule'/4 =
    %% Line 702
    fun (_0,_1,_2,_3) ->
	%% Line 703
	case call 'lists':'suffix'
		 (_2, _0) of
	  %% Line 704
	  <'true'> when 'true' ->
	      let <_5> =
		  call %% Line 705
		       'erlang':%% Line 705
				'length'
		      (_0)
	      in  let <_4> =
		      call %% Line 705
			   'erlang':%% Line 705
				    'length'
			  (_2)
		  in  let <_6> =
			  call %% Line 705
			       'erlang':%% Line 705
					'-'
			      (_5, _4)
		      in  let <_7> =
			      call %% Line 705
				   'lists':%% Line 705
					   'sublist'
				  (_0, %% Line 705
				       1, _6)
			  in  let <NewDir> =
				  call %% Line 705
				       'erlang':%% Line 705
						'++'
				      (_7, _3)
			      in  let <Src> =
				      call %% Line 706
					   'filename':%% Line 706
						      'join'
					  (%% Line 706
					   NewDir, _1)
				  in  %% Line 707
				      case apply 'is_regular'/1
					       (Src) of
					%% Line 708
					<'true'> when 'true' ->
					    {'ok',Src}
					%% Line 709
					<'false'> when 'true' ->
					    let <_10> =
						apply 'wildcard'/1
						    (Src)
					    in  apply 'find_regular_file'/1
						    (_10)
					( <_11> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_11})
					  -| ['compiler_generated'] )
				      end
	  %% Line 711
	  <'false'> when 'true' ->
	      %% Line 712
	      'error'
	  ( <_12> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_12})
	    -| ['compiler_generated'] )
	end
'find_regular_file'/1 =
    %% Line 715
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      %% Line 716
	      'error'
	  %% Line 717
	  <[File|Files]> when 'true' ->
	      %% Line 718
	      case apply 'is_regular'/1
		       (File) of
		%% Line 719
		<'true'> when 'true' ->
		    {'ok',File}
		%% Line 720
		<'false'> when 'true' ->
		    apply 'find_regular_file'/1
			(Files)
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_1})
		  -| ['compiler_generated'] )
	      end
	  ( <_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_2})
		  -| [{'function_name',{'find_regular_file',1}}] )
	    -| ['compiler_generated'] )
	end
'safe_relative_path'/2 =
    %% Line 728
    fun (_0,_1) ->
	%% Line 729
	case call 'filename':'pathtype'
		 (_0) of
	  %% Line 730
	  <'relative'> when 'true' ->
	      let <_2> =
		  call 'filename':'split'
		      (_0)
	      in  apply 'safe_relative_path'/4
		      (_2, _1, [], [])
	  %% Line 731
	  <_6> when 'true' ->
	      'unsafe'
	end
'safe_relative_path'/4 =
    %% Line 734
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <[],_X_Cwd,_X_PrevLinks,Acc> when 'true' ->
	      %% Line 735
	      Acc
	  %% Line 737
	  <[Segment|Segments],Cwd,PrevLinks,Acc> when 'true' ->
	      let <AccSegment> =
		  apply %% Line 738
			'join'/2
		      (%% Line 738
		       Acc, %% Line 738
			    Segment)
	      in  %% Line 739
		  case apply 'safe_relative_path'/1
			   (AccSegment) of
		    %% Line 740
		    <'unsafe'> when 'true' ->
			%% Line 741
			'unsafe'
		    %% Line 742
		    <SafeAccSegment> when 'true' ->
			let <_5> =
			    apply %% Line 743
				  'join'/2
				(%% Line 743
				 Cwd, %% Line 743
				      SafeAccSegment)
			in  %% Line 743
			    case call 'file':'read_link'
				     (_5) of
			      %% Line 744
			      <{'ok',LinkPath}> when 'true' ->
				  %% Line 745
				  case call 'lists':'member'
					   (LinkPath, PrevLinks) of
				    %% Line 746
				    <'true'> when 'true' ->
					%% Line 747
					'unsafe'
				    %% Line 748
				    <'false'> when 'true' ->
					let <_6> =
					    call %% Line 749
						 'filename':%% Line 749
							    'split'
						(%% Line 749
						 LinkPath)
					in  %% Line 749
					    case apply 'safe_relative_path'/4
						     (_6, Cwd, [LinkPath|PrevLinks], Acc) of
					      %% Line 750
					      <'unsafe'> when 'true' ->
						  'unsafe'
					      %% Line 751
					      <NewAcc> when 'true' ->
						  apply 'safe_relative_path'/4
						      (Segments, Cwd, [], NewAcc)
					    end
				    ( <_8> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_8})
				      -| ['compiler_generated'] )
				  end
			      %% Line 754
			      <{'error',_15}> when 'true' ->
				  %% Line 755
				  apply 'safe_relative_path'/4
				      (Segments, Cwd, PrevLinks, SafeAccSegment)
			      ( <_9> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_9})
				-| ['compiler_generated'] )
			    end
		  end
	  ( <_14,_13,_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_14,_13,_12,_11})
		  -| [{'function_name',{'safe_relative_path',4}}] )
	    -| ['compiler_generated'] )
	end
'join'/2 =
    %% Line 759
    fun (_0,_1) ->
	case <_0,_1> of
	  <[],Path> when 'true' ->
	      Path
	  %% Line 760
	  <Left,Right> when 'true' ->
	      call 'filename':'join'
		  (Left, Right)
	end
'safe_relative_path'/1 =
    %% Line 762
    fun (_0) ->
	%% Line 763
	case call 'filename':'pathtype'
		 (_0) of
	  %% Line 764
	  <'relative'> when 'true' ->
	      let <Cs0> =
		  call %% Line 765
		       'filename':%% Line 765
				  'split'
		      (_0)
	      in  %% Line 766
		  apply 'safe_relative_path_1'/2
		      (Cs0, [])
	  %% Line 767
	  <_4> when 'true' ->
	      %% Line 768
	      'unsafe'
	end
'safe_relative_path_1'/2 =
    %% Line 771
    fun (_0,_1) ->
	case <_0,_1> of
	  <[[46]|T],Acc> when 'true' ->
	      %% Line 772
	      apply 'safe_relative_path_1'/2
		  (T, Acc)
	  %% Line 773
	  <[#{#<46>(8,1,'integer',['unsigned'|['big']])}#|T],Acc> when 'true' ->
	      %% Line 774
	      apply 'safe_relative_path_1'/2
		  (T, Acc)
	  %% Line 775
	  <[[46|[46]]|T],Acc> when 'true' ->
	      %% Line 776
	      apply 'climb'/2
		  (T, Acc)
	  %% Line 777
	  <[#{#<46>(8,1,'integer',['unsigned'|['big']]),
	      #<46>(8,1,'integer',['unsigned'|['big']])}#|T],Acc> when 'true' ->
	      %% Line 778
	      apply 'climb'/2
		  (T, Acc)
	  %% Line 779
	  <[H|T],Acc> when 'true' ->
	      %% Line 780
	      apply 'safe_relative_path_1'/2
		  (T, [H|Acc])
	  %% Line 781
	  <[],[]> when 'true' ->
	      %% Line 782
	      []
	  %% Line 783
	  <[],Acc> when 'true' ->
	      let <_2> =
		  call %% Line 784
		       'lists':%% Line 784
			       'reverse'
		      (%% Line 784
		       Acc)
	      in  %% Line 784
		  call 'filename':'join'
		      (_2)
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'safe_relative_path_1',2}}] )
	    -| ['compiler_generated'] )
	end
'climb'/2 =
    %% Line 786
    fun (_0,_1) ->
	case <_0,_1> of
	  <_4,[]> when 'true' ->
	      %% Line 787
	      'unsafe'
	  %% Line 788
	  <T,[_5|Acc]> when 'true' ->
	      %% Line 789
	      apply 'safe_relative_path_1'/2
		  (T, Acc)
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'climb',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('filelib')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('filelib', _0)
end