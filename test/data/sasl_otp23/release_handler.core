module 'release_handler' ['check_install_release'/1,
			  'check_install_release'/2,
			  'code_change'/3,
			  'create_RELEASES'/1,
			  'create_RELEASES'/2,
			  'create_RELEASES'/4,
			  'do_copy_file'/2,
			  'do_copy_files'/1,
			  'do_copy_files'/2,
			  'do_ensure_RELEASES'/1,
			  'do_remove_files'/1,
			  'do_rename_files'/1,
			  'do_write_file'/2,
			  'do_write_file'/3,
			  'do_write_release'/3,
			  'downgrade_app'/2,
			  'downgrade_app'/3,
			  'downgrade_script'/3,
			  'eval_appup_script'/4,
			  'handle_call'/3,
			  'handle_cast'/2,
			  'handle_info'/2,
			  'init'/1,
			  'install_file'/2,
			  'install_release'/1,
			  'install_release'/2,
			  'make_permanent'/1,
			  'module_info'/0,
			  'module_info'/1,
			  'new_emulator_upgrade'/2,
			  'reboot_old_release'/1,
			  'remove_file'/1,
			  'remove_release'/1,
			  'set_removed'/1,
			  'set_unpacked'/2,
			  'start_link'/0,
			  'terminate'/2,
			  'unpack_release'/1,
			  'upgrade_app'/2,
			  'upgrade_script'/2,
			  'which_releases'/0,
			  'which_releases'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[114|[101|[108|[101|[97|[115|[101|[95|[104|[97|[110|[100|[108|[101|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 21
		'behaviour' =
		    %% Line 21
		    ['gen_server'],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[47|[117|[115|[114|[47|[108|[111|[99|[97|[108|[47|[67|[101|[108|[108|[97|[114|[47|[101|[114|[108|[97|[110|[103|[47|[50|[51|[46|[48|[46|[50|[47|[108|[105|[98|[47|[101|[114|[108|[97|[110|[103|[47|[108|[105|[98|[47|[107|[101|[114|[110|[101|[108|[45|[55|[46|[48|[47|[105|[110|[99|[108|[117|[100|[101|[47|[102|[105|[108|[101|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 25
		'record' =
		    %% Line 25
		    [{'file_info',[{'typed_record_field',{'record_field',26,{'atom',26,'size'}},{'type',26,'union',[{'type',26,'non_neg_integer',[]}|[{'atom',26,'undefined'}]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'type'}},{'type',27,'union',[{'atom',27,'device'}|[{'atom',27,'directory'}|[{'atom',27,'other'}|[{'atom',27,'regular'}|[{'atom',27,'symlink'}|[{'atom',28,'undefined'}]]]]]]}}|[{'typed_record_field',{'record_field',29,{'atom',29,'access'}},{'type',29,'union',[{'atom',29,'read'}|[{'atom',29,'write'}|[{'atom',29,'read_write'}|[{'atom',29,'none'}|[{'atom',29,'undefined'}]]]]]}}|[{'typed_record_field',{'record_field',30,{'atom',30,'atime'}},{'type',30,'union',[{'remote_type',30,[{'atom',30,'file'}|[{'atom',30,'date_time'}|[[]]]]}|[{'type',30,'non_neg_integer',[]}|[{'atom',30,'undefined'}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'mtime'}},{'type',34,'union',[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}|[{'atom',34,'undefined'}]]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'ctime'}},{'type',36,'union',[{'remote_type',36,[{'atom',36,'file'}|[{'atom',36,'date_time'}|[[]]]]}|[{'type',36,'non_neg_integer',[]}|[{'atom',36,'undefined'}]]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'mode'}},{'type',42,'union',[{'type',42,'non_neg_integer',[]}|[{'atom',42,'undefined'}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'links'}},{'type',46,'union',[{'type',46,'non_neg_integer',[]}|[{'atom',46,'undefined'}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'major_device'}},{'type',49,'union',[{'type',49,'non_neg_integer',[]}|[{'atom',49,'undefined'}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'minor_device'}},{'type',55,'union',[{'type',55,'non_neg_integer',[]}|[{'atom',55,'undefined'}]]}}|[{'typed_record_field',{'record_field',57,{'atom',57,'inode'}},{'type',57,'union',[{'type',57,'non_neg_integer',[]}|[{'atom',57,'undefined'}]]}}|[{'typed_record_field',{'record_field',58,{'atom',58,'uid'}},{'type',58,'union',[{'type',58,'non_neg_integer',[]}|[{'atom',58,'undefined'}]]}}|[{'typed_record_field',{'record_field',59,{'atom',59,'gid'}},{'type',59,'union',[{'type',59,'non_neg_integer',[]}|[{'atom',59,'undefined'}]]}}]]]]]]]]]]]]]}],
		%% Line 62
		'record' =
		    %% Line 62
		    [{'file_descriptor',[{'typed_record_field',{'record_field',63,{'atom',63,'module'}},{'type',63,'module',[]}}|[{'typed_record_field',{'record_field',64,{'atom',64,'data'}},{'type',64,'term',[]}}]]}],
		%% Line 24
		'file' =
		    %% Line 24
		    [{[115|[114|[99|[47|[114|[101|[108|[101|[97|[115|[101|[95|[104|[97|[110|[100|[108|[101|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]]]],24}],
		%% Line 48
		'record' =
		    %% Line 48
		    [{'state',[{'record_field',48,{'atom',48,'unpurged'},{'nil',48}}|[{'record_field',49,{'atom',49,'root'}}|[{'record_field',50,{'atom',50,'rel_dir'}}|[{'record_field',51,{'atom',51,'releases'}}|[{'record_field',52,{'atom',52,'timer'}}|[{'record_field',53,{'atom',53,'start_prg'}}|[{'record_field',54,{'atom',54,'masters'},{'atom',54,'false'}}|[{'record_field',55,{'atom',55,'client_dir'},{'atom',55,'false'}}|[{'record_field',56,{'atom',56,'static_emulator'},{'atom',56,'false'}}|[{'record_field',57,{'atom',57,'pre_sync_nodes'},{'nil',57}}]]]]]]]]]]}],
		%% Line 76
		'record' =
		    %% Line 76
		    [{'release',[{'record_field',76,{'atom',76,'name'}}|[{'record_field',76,{'atom',76,'vsn'}}|[{'record_field',76,{'atom',76,'erts_vsn'}}|[{'record_field',76,{'atom',76,'libs'},{'nil',76}}|[{'record_field',76,{'atom',76,'status'}}]]]]]}]]
'start_link'/0 =
    %% Line 142
    ( fun () ->
	  %% Line 143
	  call 'gen_server':'start_link'
	      ({'local','release_handler'}, 'release_handler', [], [])
      -| [{'function',{'start_link',0}}] )
'unpack_release'/1 =
    %% Line 158
    ( fun (_0) ->
	  %% Line 159
	  apply 'call'/1
	      ({'unpack_release',( _0
				   -| [{'function',{'unpack_release',1}}] )})
      -| [{'function',{'unpack_release',1}}] )
'check_install_release'/1 =
    %% Line 176
    ( fun (_0) ->
	  %% Line 177
	  apply 'check_install_release'/2
	      (( _0
		 -| [{'function',{'check_install_release',1}}] ), [])
      -| [{'function',{'check_install_release',1}}] )
'check_install_release'/2 =
    %% Line 179
    ( fun (_0,_1) ->
	  %% Line 180
	  case apply 'check_check_install_options'/2
		   (_1, 'false') of
	    %% Line 181
	    <{'ok',Purge}> when 'true' ->
		%% Line 182
		apply 'call'/1
		    ({'check_install_release',_0,Purge})
	    %% Line 183
	    <Error> when 'true' ->
		%% Line 184
		Error
	  end
      -| [{'function',{'check_install_release',2}}] )
'check_check_install_options'/2 =
    %% Line 187
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <['purge'|Opts],_4> when 'true' ->
		  %% Line 188
		  apply 'check_check_install_options'/2
		      (Opts, 'true')
	      %% Line 189
	      <[Illegal|_5],_X_Purge> when 'true' ->
		  %% Line 190
		  {'error',{'illegal_option',Illegal}}
	      %% Line 191
	      <[],Purge> when 'true' ->
		  %% Line 192
		  {'ok',Purge}
	      ( <_3,_2> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_3,_2})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'check_check_install_options',2}}] )
      -| [{'function',{'check_check_install_options',2}}] )
'install_release'/1 =
    %% Line 210
    ( fun (_0) ->
	  %% Line 211
	  apply 'call'/1
	      ({'install_release',( _0
				    -| [{'function',{'install_release',1}}] ),'restart',[]})
      -| [{'function',{'install_release',1}}] )
'install_release'/2 =
    %% Line 214
    ( fun (_0,_1) ->
	  %% Line 215
	  case apply 'check_install_options'/3
		   (_1, 'restart', []) of
	    %% Line 216
	    <{'ok',ErrorAction,InstallOpt}> when 'true' ->
		%% Line 217
		apply 'call'/1
		    ({'install_release',_0,ErrorAction,InstallOpt})
	    %% Line 218
	    <Error> when 'true' ->
		%% Line 219
		Error
	  end
      -| [{'function',{'install_release',2}}] )
'check_install_options'/3 =
    %% Line 222
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <[Opt|Opts],ErrAct,InstOpts> when 'true' ->
		  %% Line 223
		  case apply 'install_option'/1
			   (Opt) of
		    %% Line 224
		    <{'error_action',EAct}> when 'true' ->
			%% Line 225
			apply 'check_install_options'/3
			    (Opts, EAct, InstOpts)
		    %% Line 226
		    <'true'> when 'true' ->
			%% Line 227
			apply 'check_install_options'/3
			    (Opts, ErrAct, [Opt|InstOpts])
		    %% Line 228
		    <'false'> when 'true' ->
			%% Line 229
			{'error',{'illegal_option',Opt}}
		    ( <_3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_3})
		      -| ['compiler_generated'] )
		  end
	      %% Line 231
	      <[],ErrAct,InstOpts> when 'true' ->
		  %% Line 232
		  {'ok',ErrAct,InstOpts}
	      ( <_6,_5,_4> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_6,_5,_4})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'check_install_options',3}}] )
      -| [{'function',{'check_install_options',3}}] )
'install_option'/1 =
    %% Line 234
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'install_option',1}}] ) of
	      <Opt = {'error_action','reboot'}> when 'true' ->
		  Opt
	      %% Line 235
	      <Opt = {'error_action','restart'}> when 'true' ->
		  Opt
	      %% Line 236
	      <{'code_change_timeout',TimeOut}> when 'true' ->
		  %% Line 237
		  apply 'check_timeout'/1
		      (TimeOut)
	      %% Line 238
	      <{'suspend_timeout',TimeOut}> when 'true' ->
		  %% Line 239
		  apply 'check_timeout'/1
		      (TimeOut)
	      %% Line 240
	      <{'update_paths',Bool}>
		  when let <_1> =
			call 'erlang':'=='
			    (Bool, 'true')
		    in  let <_2> =
			    call 'erlang':'=='
				(Bool, 'false')
			in  call 'erlang':'or'
				(_1, _2) ->
		  %% Line 241
		  'true'
	      %% Line 242
	      <_X_Opt> when 'true' ->
		  'false'
	    end
	    -| [{'function',{'install_option',1}}] )
      -| [{'function',{'install_option',1}}] )
'check_timeout'/1 =
    %% Line 244
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'check_timeout',1}}] ) of
	      <'infinity'> when 'true' ->
		  'true'
	      %% Line 245
	      <Int>
		  when let <_1> =
			call 'erlang':'is_integer'
			    (( _0
			       -| [{'function',{'check_timeout',1}}] ))
		    in  let <_2> =
			    call 'erlang':'>'
				(( _0
				   -| [{'function',{'check_timeout',1}}] ), 0)
			in  call 'erlang':'and'
				(_1, _2) ->
		  'true'
	      %% Line 246
	      <_X_Else> when 'true' ->
		  'false'
	    end
	    -| [{'function',{'check_timeout',1}}] )
      -| [{'function',{'check_timeout',1}}] )
'new_emulator_upgrade'/2 =
    %% Line 256
    ( fun (_0,_1) ->
	  let <Result> =
	      apply %% Line 257
		    'call'/1
		  (%% Line 257
		   {'install_release',_0,'reboot',_1})
	  in  do  %% Line 258
		  call 'error_logger':'info_msg'
		      (%% Line 259
		       [126|[119|[58|[105|[110|[115|[116|[97|[108|[108|[95|[114|[101|[108|[101|[97|[115|[101|[40|[126|[112|[44|[126|[112|[41|[32|[99|[111|[109|[112|[108|[101|[116|[101|[100|[32|[97|[102|[116|[101|[114|[32|[110|[111|[100|[101|[32|[114|[101|[115|[116|[97|[114|[116|[32|[119|[105|[116|[104|[32|[110|[101|[119|[32|[101|[109|[117|[108|[97|[116|[111|[114|[32|[118|[101|[114|[115|[105|[111|[110|[126|[110|[82|[101|[115|[117|[108|[116|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 260
																																																																						      ['release_handler'|[_0|[_1|[Result|[]]]]])
		  %% Line 261
		  Result
      -| [{'function',{'new_emulator_upgrade',2}}] )
'make_permanent'/1 =
    %% Line 272
    ( fun (_0) ->
	  %% Line 273
	  apply 'call'/1
	      ({'make_permanent',( _0
				   -| [{'function',{'make_permanent',1}}] )})
      -| [{'function',{'make_permanent',1}}] )
'reboot_old_release'/1 =
    %% Line 278
    ( fun (_0) ->
	  %% Line 279
	  apply 'call'/1
	      ({'reboot_old_release',( _0
				       -| [{'function',{'reboot_old_release',1}}] )})
      -| [{'function',{'reboot_old_release',1}}] )
'remove_release'/1 =
    %% Line 288
    ( fun (_0) ->
	  %% Line 289
	  apply 'call'/1
	      ({'remove_release',( _0
				   -| [{'function',{'remove_release',1}}] )})
      -| [{'function',{'remove_release',1}}] )
'set_unpacked'/2 =
    %% Line 307
    ( fun (_0,_1) ->
	  %% Line 308
	  apply 'call'/1
	      ({'set_unpacked',_0,_1})
      -| [{'function',{'set_unpacked',2}}] )
'set_removed'/1 =
    %% Line 317
    ( fun (_0) ->
	  %% Line 318
	  apply 'call'/1
	      ({'set_removed',( _0
				-| [{'function',{'set_removed',1}}] )})
      -| [{'function',{'set_removed',1}}] )
'install_file'/2 =
    %% Line 328
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Vsn,File>
		  when call 'erlang':'is_list'
			(File) ->
		  %% Line 329
		  apply 'call'/1
		      ({'install_file',File,Vsn})
	      ( <_3,_2> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_3,_2})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'install_file',2}}] )
      -| [{'function',{'install_file',2}}] )
'which_releases'/0 =
    %% Line 335
    ( fun () ->
	  %% Line 336
	  apply 'call'/1
	      ('which_releases')
      -| [{'function',{'which_releases',0}}] )
'which_releases'/1 =
    %% Line 342
    ( fun (_0) ->
	  let <Releases> =
	      apply %% Line 343
		    'which_releases'/0
		  ()
	  in  %% Line 344
	      apply 'get_releases_with_status'/3
		  (Releases, ( _0
			       -| [{'function',{'which_releases',1}}] ), [])
      -| [{'function',{'which_releases',1}}] )
'check_script'/2 =
    %% Line 349
    ( fun (_0,_1) ->
	  %% Line 350
	  call 'release_handler_1':'check_script'
	      (_0, _1)
      -| [{'function',{'check_script',2}}] )
'eval_script'/5 =
    %% Line 367
    ( fun (_0,_1,_2,_3,_4) ->
	  catch
	      %% Line 368
	      call 'release_handler_1':'eval_script'
		  (_0, _1, _2, _3, _4)
      -| [{'function',{'eval_script',5}}] )
'create_RELEASES'/1 =
    %% Line 375
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'create_RELEASES',1}}] ) of
	      <[Root|[RelFile|LibDirs]]> when 'true' ->
		  let <_1> =
		      call %% Line 376
			   'filename':%% Line 376
				      'join'
			  (%% Line 376
			   Root, %% Line 376
				 [114|[101|[108|[101|[97|[115|[101|[115]]]]]]]])
		  in  %% Line 376
		      apply 'create_RELEASES'/4
			  (Root, _1, RelFile, LibDirs)
	      ( <_2> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_2})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'create_RELEASES',1}}] )
      -| [{'function',{'create_RELEASES',1}}] )
'create_RELEASES'/2 =
    %% Line 378
    ( fun (_0,_1) ->
	  let <_2> =
	      call %% Line 379
		   'filename':%% Line 379
			      'join'
		  (_0, %% Line 379
		       [114|[101|[108|[101|[97|[115|[101|[115]]]]]]]])
	  in  %% Line 379
	      apply 'create_RELEASES'/4
		  (_0, _2, _1, [])
      -| [{'function',{'create_RELEASES',2}}] )
'create_RELEASES'/4 =
    %% Line 381
    ( fun (_0,_1,_2,_3) ->
	  let <_4> =
	      catch
		  %% Line 382
		  apply 'check_rel'/4
		      (_0, _2, _3, 'false')
	  in  %% Line 382
	      case _4 of
		%% Line 383
		<_@r0 = {'error',Reason}> when 'true' ->
		    %% Line 384
		    _@r0
		%% Line 385
		<Rel> when 'true' ->
		    %% Line 386
		    case Rel of
		      <{'release',_14,_15,_16,_17,_18}> when 'true' ->
			  let <_7> =
			      call 'erlang':'setelement'
				  (6, Rel, 'permanent')
			  in  catch
				  %% Line 387
				  apply 'write_releases'/3
				      (_1, [_7|[]], 'false')
		      ( <_19> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','release'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
	      end
      -| [{'function',{'create_RELEASES',4}}] )
'upgrade_app'/2 =
    %% Line 400
    ( fun (_0,_1) ->
	  %% Line 401
	  try
	      apply 'upgrade_script'/2
		  (_0, _1)
	  of <_2> ->
	      case _2 of
		%% Line 402
		<{'ok',NewVsn,Script}> when 'true' ->
		    %% Line 403
		    apply 'eval_appup_script'/4
			(_0, NewVsn, _1, Script)
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'try_clause',_3})
		  -| ['compiler_generated'] )
	      end
	  catch <_6,_5,_4> ->
	      %% Line 405
	      case <_6,_5,_4> of
		<( 'throw'
		   -| ['compiler_generated'] ),Reason,_9> when 'true' ->
		    %% Line 406
		    {'error',Reason}
		( <_10,_11,_12> when 'true' ->
		      primop 'raise'
			  (_12, _11)
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'upgrade_app',2}}] )
'downgrade_app'/2 =
    %% Line 422
    ( fun (_0,_1) ->
	  let <_2> =
	      call %% Line 423
		   'filename':%% Line 423
			      'basename'
		  (_1)
	  in  %% Line 423
	      case call 'string':'lexemes'
		       (_2, [45]) of
		%% Line 424
		<[_X_AppS|[OldVsn|[]]]> when 'true' ->
		    %% Line 425
		    apply 'downgrade_app'/3
			(_0, OldVsn, _1)
		%% Line 426
		<_6> when 'true' ->
		    %% Line 427
		    {'error',{'unknown_version',_0}}
	      end
      -| [{'function',{'downgrade_app',2}}] )
'downgrade_app'/3 =
    %% Line 429
    ( fun (_0,_1,_2) ->
	  %% Line 430
	  try
	      apply 'downgrade_script'/3
		  (_0, _1, _2)
	  of <_3> ->
	      case _3 of
		%% Line 431
		<{'ok',Script}> when 'true' ->
		    %% Line 432
		    apply 'eval_appup_script'/4
			(_0, _1, _2, Script)
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'try_clause',_4})
		  -| ['compiler_generated'] )
	      end
	  catch <_7,_6,_5> ->
	      %% Line 434
	      case <_7,_6,_5> of
		<( 'throw'
		   -| ['compiler_generated'] ),Reason,_11> when 'true' ->
		    %% Line 435
		    {'error',Reason}
		( <_12,_13,_14> when 'true' ->
		      primop 'raise'
			  (_14, _13)
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'downgrade_app',3}}] )
'upgrade_script'/2 =
    %% Line 438
    ( fun (_0,_1) ->
	  let <OldVsn> =
	      apply %% Line 439
		    'ensure_running'/1
		  (_0)
	  in  let <OldDir> =
		  call %% Line 440
		       'code':%% Line 440
			      'lib_dir'
		      (_0)
	      in  %% Line 441
		  case apply 'find_script'/4
			   (_0, _1, OldVsn, 'up') of
		    <{NewVsn,Script}> when 'true' ->
			let <OldAppl> =
			    apply %% Line 442
				  'read_app'/3
				(_0, %% Line 442
				     OldVsn, %% Line 442
					     OldDir)
			in  let <NewAppl> =
				apply %% Line 443
				      'read_app'/3
				    (_0, %% Line 443
					 NewVsn, _1)
			    in  %% Line 444
				case call 'systools_rc':'translate_scripts'
					 ('up', %% Line 445
						[Script|[]], %% Line 445
							     [NewAppl|[]], %% Line 445
									   [OldAppl|[]]) of
				  %% Line 446
				  <{'ok',LowLevelScript}> when 'true' ->
				      %% Line 447
				      {'ok',NewVsn,LowLevelScript}
				  %% Line 448
				  <{'error',_X_SystoolsRC,Reason}> when 'true' ->
				      %% Line 449
				      call 'erlang':'throw'
					  (Reason)
				  ( <_7> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_7})
				    -| ['compiler_generated'] )
				end
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4})
		      -| ['compiler_generated'] )
		  end
      -| [{'function',{'upgrade_script',2}}] )
'downgrade_script'/3 =
    %% Line 452
    ( fun (_0,_1,_2) ->
	  let <NewVsn> =
	      apply %% Line 453
		    'ensure_running'/1
		  (_0)
	  in  let <NewDir> =
		  call %% Line 454
		       'code':%% Line 454
			      'lib_dir'
		      (_0)
	      in  %% Line 455
		  case apply 'find_script'/4
			   (_0, NewDir, _1, 'down') of
		    <{_12,Script}>
			when call 'erlang':'=:='
			      (_12,
			       NewVsn) ->
			let <OldAppl> =
			    apply %% Line 456
				  'read_app'/3
				(_0, _1, _2)
			in  let <NewAppl> =
				apply %% Line 457
				      'read_app'/3
				    (_0, %% Line 457
					 NewVsn, %% Line 457
						 NewDir)
			    in  %% Line 458
				case call 'systools_rc':'translate_scripts'
					 ('dn', %% Line 459
						[Script|[]], %% Line 459
							     [OldAppl|[]], %% Line 459
									   [NewAppl|[]]) of
				  %% Line 460
				  <_@r0 = {'ok',LowLevelScript}> when 'true' ->
				      %% Line 461
				      _@r0
				  %% Line 462
				  <{'error',_X_SystoolsRC,Reason}> when 'true' ->
				      %% Line 463
				      call 'erlang':'throw'
					  (Reason)
				  ( <_8> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_8})
				    -| ['compiler_generated'] )
				end
		    ( <_5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5})
		      -| ['compiler_generated'] )
		  end
      -| [{'function',{'downgrade_script',3}}] )
'eval_appup_script'/4 =
    %% Line 466
    ( fun (_0,_1,_2,_3) ->
	  let <EnvBefore> =
	      call %% Line 467
		   'application_controller':%% Line 467
					    'prep_config_change'
		  ()
	  in  let <AppSpecL> =
		  apply %% Line 468
			'read_appspec'/2
		      (_0, _2)
	      in  let <Res> =
		      call %% Line 469
			   'release_handler_1':%% Line 469
					       'eval_script'
			  (_3, %% Line 470
			       [], %% Line 471
				   [{_0,_1,_2}|[]], %% Line 472
						    [{_0,_1,_2}|[]], %% Line 473
								     [])
		  in  do  %% Line 474
			  case Res of
			    %% Line 475
			    <{'ok',_X_Unpurged}> when 'true' ->
				do  %% Line 476
				    call 'application_controller':'change_application_data'
					(AppSpecL, [])
				    %% Line 477
				    call 'application_controller':'config_change'
					(EnvBefore)
			    %% Line 478
			    <_X_Res> when 'true' ->
				'ok'
			  end
			  %% Line 481
			  Res
      -| [{'function',{'eval_appup_script',4}}] )
'ensure_running'/1 =
    %% Line 483
    ( fun (_0) ->
	  let <_1> =
	      call %% Line 484
		   'application':%% Line 484
				 'which_applications'
		  ()
	  in  %% Line 484
	      case call 'lists':'keysearch'
		       (( _0
			  -| [{'function',{'ensure_running',1}}] ), 1, _1) of
		%% Line 485
		<{'value',{_X_App,_X_Descr,Vsn}}> when 'true' ->
		    %% Line 486
		    Vsn
		%% Line 487
		<'false'> when 'true' ->
		    %% Line 488
		    call 'erlang':'throw'
			({'app_not_running',( _0
					      -| [{'function',{'ensure_running',1}}] )})
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_2})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'ensure_running',1}}] )
'find_script'/4 =
    %% Line 491
    ( fun (_0,_1,_2,_3) ->
	  let <_4> =
	      call %% Line 492
		   'erlang':%% Line 492
			    'atom_to_list'
		  (_0)
	  in  let <_5> =
		  call %% Line 492
		       'erlang':%% Line 492
				'++'
		      (_4, %% Line 492
			   [46|[97|[112|[112|[117|[112]]]]]])
	      in  let <Appup> =
		      call %% Line 492
			   'filename':%% Line 492
				      'join'
			  (%% Line 492
			   [_1|[[101|[98|[105|[110]]]]|[_5|[]]]])
		  in  %% Line 493
		      case call 'file':'consult'
			       (Appup) of
			%% Line 494
			<{'ok',[{NewVsn,UpFromScripts,DownToScripts}|[]]}> when 'true' ->
			    let <_8> =
				case _3 of
				  %% Line 496
				  <'up'> when 'true' ->
				      UpFromScripts
				  %% Line 497
				  <'down'> when 'true' ->
				      DownToScripts
				  ( <_7> when 'true' ->
					%% Line 495
					primop 'match_fail'
					    ({'case_clause',_7})
				    -| ['compiler_generated'] )
				end
			    in  %% Line 499
				case call 'systools_relup':'appup_search_for_version'
					 (_2, _8) of
				  %% Line 500
				  <{'ok',Script}> when 'true' ->
				      %% Line 501
				      {NewVsn,Script}
				  %% Line 502
				  <'error'> when 'true' ->
				      %% Line 503
				      call 'erlang':'throw'
					  ({'version_not_in_appup',_2})
				  ( <_10> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_10})
				    -| ['compiler_generated'] )
				end
			%% Line 505
			<{'error','enoent'}> when 'true' ->
			    %% Line 506
			    call 'erlang':'throw'
				('no_appup_found')
			%% Line 507
			<{'error',Reason}> when 'true' ->
			    %% Line 508
			    call 'erlang':'throw'
				(Reason)
			( <_11> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_11})
			  -| ['compiler_generated'] )
		      end
      -| [{'function',{'find_script',4}}] )
'read_app'/3 =
    %% Line 511
    ( fun (_0,_1,_2) ->
	  let <AppS> =
	      call %% Line 512
		   'erlang':%% Line 512
			    'atom_to_list'
		  (_0)
	  in  let <_4> =
		  call %% Line 513
		       'filename':%% Line 513
				  'join'
		      (_2, %% Line 513
			   [101|[98|[105|[110]]]])
	      in  let <Path> =
		      [_4|%% Line 513
			  []]
		  in  %% Line 514
		      case call 'systools_make':'read_application'
			       (AppS, _1, Path, []) of
			%% Line 515
			<{'ok',Appl}> when 'true' ->
			    %% Line 516
			    Appl
			%% Line 517
			<{'error',{'not_found',_X_AppFile}}> when 'true' ->
			    %% Line 518
			    call 'erlang':'throw'
				({'no_app_found',_1,_2})
			%% Line 519
			<{'error',Reason}> when 'true' ->
			    %% Line 520
			    call 'erlang':'throw'
				(Reason)
			( <_6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_6})
			  -| ['compiler_generated'] )
		      end
      -| [{'function',{'read_app',3}}] )
'read_appspec'/2 =
    %% Line 523
    ( fun (_0,_1) ->
	  let <AppS> =
	      call %% Line 524
		   'erlang':%% Line 524
			    'atom_to_list'
		  (_0)
	  in  let <_3> =
		  call %% Line 525
		       'filename':%% Line 525
				  'join'
		      (_1, %% Line 525
			   [101|[98|[105|[110]]]])
	      in  let <Path> =
		      [_3|%% Line 525
			  []]
		  in  let <_5> =
			  call %% Line 526
			       'erlang':%% Line 526
					'++'
			      (%% Line 526
			       AppS, %% Line 526
				     [46|[97|[112|[112]]]])
		      in  %% Line 526
			  case call 'file':'path_consult'
				   (Path, _5) of
			    %% Line 527
			    <{'ok',AppSpecL,_X_File}> when 'true' ->
				%% Line 528
				AppSpecL
			    %% Line 529
			    <{'error',Reason}> when 'true' ->
				%% Line 530
				call 'erlang':'throw'
				    (Reason)
			    ( <_6> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_6})
			      -| ['compiler_generated'] )
			  end
      -| [{'function',{'read_appspec',2}}] )
'call'/1 =
    %% Line 536
    ( fun (_0) ->
	  %% Line 537
	  call 'gen_server':'call'
	      ('release_handler', ( _0
				    -| [{'function',{'call',1}}] ), 'infinity')
      -| [{'function',{'call',1}}] )
'init'/1 =
    %% Line 543
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'init',1}}] ) of
	      <[]> when 'true' ->
		  %% Line 544
		  case call 'init':'get_argument'
			   ('root') of
		    <{'ok',[[Root|[]]|[]]}> when 'true' ->
			%% Line 545
			case apply 'is_client'/0
				 () of
			  <{CliDir,Masters}> when 'true' ->
			      let <_5> =
				  case %% Line 547
				       call 'application':'get_env'
					   ('sasl', 'releases_dir') of
				    %% Line 548
				    <'undefined'> when 'true' ->
					%% Line 549
					case call 'os':'getenv'
						 ([82|[69|[76|[68|[73|[82]]]]]]) of
					  %% Line 550
					  <'false'> when 'true' ->
					      %% Line 551
					      case <> of
						%% Line 552
						<>
						    when call 'erlang':'=='
							  (CliDir,
							   'false') ->
						    %% Line 553
						    call 'filename':'join'
							([Root|[[114|[101|[108|[101|[97|[115|[101|[115]]]]]]]]]])
						%% Line 554
						<> when 'true' ->
						    %% Line 555
						    call 'filename':'join'
							([CliDir|[[114|[101|[108|[101|[97|[115|[101|[115]]]]]]]]]])
					      end
					  %% Line 557
					  <RELDIR> when 'true' ->
					      %% Line 558
					      RELDIR
					end
				    %% Line 560
				    <{'ok',Dir}> when 'true' ->
					%% Line 561
					Dir
				    ( <_4> when 'true' ->
					  %% Line 547
					  primop 'match_fail'
					      ({'case_clause',_4})
				      -| ['compiler_generated'] )
				  end
			      in  let <_7> =
				      call %% Line 564
					   'filename':%% Line 564
						      'join'
					  (_5, %% Line 564
					       [82|[69|[76|[69|[65|[83|[69|[83]]]]]]]])
				  in  let <_10> =
					  case %% Line 564
					       apply 'consult'/2
						   (_7, Masters) of
					    %% Line 565
					    <{'ok',[Term|[]]}> when 'true' ->
						%% Line 566
						apply 'transform_release'/3
						    (_5, Term, Masters)
					    %% Line 567
					    <_20> when 'true' ->
						%% Line 568
						case call 'init':'script_id'
							 () of
						  <{Name,Vsn}> when 'true' ->
						      %% Line 569
						      [{'release',Name,Vsn,'undefined',[],'permanent'}|[]]
						  ( <_8> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_8})
						    -| ['compiler_generated'] )
						end
					  end
				      in  let <_14> =
					      case %% Line 572
						   call 'application':'get_env'
						       ('start_prg') of
						%% Line 573
						<{'ok',Found2}>
						    when call 'erlang':'is_list'
							  (Found2) ->
						    %% Line 574
						    {'do_check',Found2}
						%% Line 575
						<_21> when 'true' ->
						    let <_12> =
							call %% Line 576
							     'filename':%% Line 576
									'join'
							    (%% Line 576
							     [Root|[[98|[105|[110]]]|[[115|[116|[97|[114|[116]]]]]]]])
						    in  %% Line 576
							{'no_check',_12}
					      end
					  in  let <_17> =
						  case %% Line 579
						       call 'application':'get_env'
							   ('static_emulator') of
						    %% Line 580
						    <{'ok',SFlag}>
							when call 'erlang':'is_atom'
							      (SFlag) ->
							SFlag
						    %% Line 581
						    <_22> when 'true' ->
							'false'
						  end
					      in  %% Line 583
						  {'ok',{'state',[],Root,_5,_10,'undefined',_14,%% Line 584
												Masters,%% Line 585
													CliDir,_17,[]}}
			  ( <_2> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_2})
			    -| ['compiler_generated'] )
			end
		    ( <_1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_1})
		      -| ['compiler_generated'] )
		  end
	      ( <_19> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_19})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'init',1}}] )
      -| [{'function',{'init',1}}] )
'handle_call'/3 =
    %% Line 587
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <{'unpack_release',ReleaseName},_X_From,S = {'state',_117,_118,_119,_120,_121,_122,_123,_124,_125,_126}>
		  when %% Line 588
		    ( try
			  let <_7> =
			      call 'erlang':'element'
				  (8, S)
			  in  let <_8> =
				  call 'erlang':'=='
				      (_7, 'false')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _8)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  let <_15> =
		      catch
			  %% Line 589
			  ( case S of
			      ( <( {'state',_127,_rec1,_128,_129,_130,_131,_132,_133,_134,_135}
				   -| ['compiler_generated'] )> when 'true' ->
				    ( case S of
					( <( {'state',_137,_138,_rec2,_139,_140,_141,_142,_143,_144,_145}
					     -| ['compiler_generated'] )> when 'true' ->
					      %% Line 590
					      ( case S of
						  ( <( {'state',_147,_148,_149,_rec3,_150,_151,_152,_153,_154,_155}
						       -| ['compiler_generated'] )> when 'true' ->
							apply 'do_unpack_release'/4
							    (_rec1, _rec2, ReleaseName, _rec3)
						    -| ['compiler_generated'] )
						  ( <_156> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','state'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					( <_146> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','state'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <_136> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','state'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		  in  %% Line 589
		      case _15 of
			%% Line 591
			<{'ok',NewReleases,Vsn}> when 'true' ->
			    %% Line 592
			    case S of
			      <{'state',_157,_158,_159,_160,_161,_162,_163,_164,_165,_166}> when 'true' ->
				  let <_18> =
				      call 'erlang':'setelement'
					  (5, S, NewReleases)
				  in  {'reply',{'ok',Vsn},_18}
			      ( <_167> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','state'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			%% Line 593
			<_@r0 = {'error',Reason}> when 'true' ->
			    %% Line 594
			    {'reply',_@r0,S}
			%% Line 595
			<{'EXIT',Reason}> when 'true' ->
			    %% Line 596
			    {'reply',{'error',Reason},S}
			( <_19> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_19})
			  -| ['compiler_generated'] )
		      end
	      %% Line 598
	      <{'unpack_release',_X_ReleaseName},_X_From,S> when 'true' ->
		  %% Line 599
		  {'reply',{'error','client_node'},S}
	      %% Line 601
	      <{'check_install_release',Vsn,Purge},_X_From,S> when 'true' ->
		  let <_26> =
		      catch
			  %% Line 602
			  ( case S of
			      ( <( {'state',_168,_169,_rec5,_170,_171,_172,_173,_174,_175,_176}
				   -| ['compiler_generated'] )> when 'true' ->
				    %% Line 604
				    ( case S of
					( <( {'state',_178,_179,_180,_rec6,_181,_182,_183,_184,_185,_186}
					     -| ['compiler_generated'] )> when 'true' ->
					      %% Line 605
					      ( case S of
						  ( <( {'state',_188,_189,_190,_191,_192,_193,_rec7,_194,_195,_196}
						       -| ['compiler_generated'] )> when 'true' ->
							apply 'do_check_install_release'/5
							    (_rec5, Vsn, _rec6, _rec7, %% Line 606
										       Purge)
						    -| ['compiler_generated'] )
						  ( <_197> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','state'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					( <_187> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','state'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <_177> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','state'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		  in  %% Line 602
		      case _26 of
			%% Line 607
			<_@r1 = {'ok',CurrentVsn,Descr}> when 'true' ->
			    %% Line 608
			    {'reply',_@r1,S}
			%% Line 609
			<_@r2 = {'error',Reason}> when 'true' ->
			    %% Line 610
			    {'reply',_@r2,S}
			%% Line 611
			<{'EXIT',Reason}> when 'true' ->
			    %% Line 612
			    {'reply',{'error',Reason},S}
			( <_27> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_27})
			  -| ['compiler_generated'] )
		      end
	      %% Line 615
	      <{'install_release',Vsn,ErrorAction,Opts},From,S> when 'true' ->
		  let <NS> =
		      apply %% Line 616
			    'resend_sync_nodes'/1
			  (%% Line 616
			   S)
		  in  let <_29> =
			  catch
			      %% Line 617
			      apply 'do_install_release'/3
				  (S, Vsn, Opts)
		      in  %% Line 617
			  case _29 of
			    %% Line 618
			    <{'ok',NewReleases,[],CurrentVsn,Descr}> when 'true' ->
				%% Line 619
				case NS of
				  <{'state',_198,_199,_200,_201,_202,_203,_204,_205,_206,_207}> when 'true' ->
				      let <_32> =
					  call 'erlang':'setelement'
					      (5, NS, NewReleases)
				      in  {'reply',{'ok',CurrentVsn,Descr},_32}
				  ( <_208> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','state'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			    %% Line 620
			    <{'ok',NewReleases,Unpurged,CurrentVsn,Descr}> when 'true' ->
				%% Line 622
				( case S of
				    ( <( {'state',_209,_210,_211,_212,_rec9,_213,_214,_215,_216,_217}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_37> =
					      case _rec9 of
						%% Line 623
						<'undefined'> when 'true' ->
						    %% Line 624
						    case call 'timer':'send_interval'
							     (10000, 'timeout') of
						      <{'ok',Ref}> when 'true' ->
							  %% Line 625
							  Ref
						      ( <_35> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_35})
							-| ['compiler_generated'] )
						    end
						%% Line 626
						<Ref> when 'true' ->
						    Ref
					      end
					  in  %% Line 628
					      case NS of
						<{'state',_219,_220,_221,_222,_223,_224,_225,_226,_227,_228}> when 'true' ->
						    let <_40> =
							call %% Line 629
							     'erlang':%% Line 629
								      'setelement'
							    (%% Line 629
							     6, NS, _37)
						    in  let <_41> =
							    call 'erlang':'setelement'
								(5, _40, NewReleases)
							in  let <_43> =
								call 'erlang':'setelement'
								    (2, _41, Unpurged)
							    in  %% Line 630
								{'reply',{'ok',CurrentVsn,Descr},_43}
						( <_229> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','state'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
				      -| ['compiler_generated'] )
				    ( <_218> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','state'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 631
			    <_@r3 = {'error',Reason}> when 'true' ->
				%% Line 632
				{'reply',_@r3,NS}
			    %% Line 633
			    <{'restart_emulator',CurrentVsn,Descr}> when 'true' ->
				do  %% Line 634
				    call 'gen_server':'reply'
					(From, {'ok',CurrentVsn,Descr})
				    do  %% Line 635
					call 'init':'reboot'
					    ()
					%% Line 636
					{'noreply',NS}
			    %% Line 637
			    <{'restart_new_emulator',CurrentVsn,Descr}> when 'true' ->
				do  %% Line 638
				    call 'gen_server':'reply'
					(From, {'continue_after_restart',CurrentVsn,Descr})
				    do  %% Line 639
					call 'init':'reboot'
					    ()
					%% Line 640
					{'noreply',NS}
			    %% Line 641
			    <{'EXIT',Reason}> when 'true' ->
				do  %% Line 642
				    call 'io':'format'
					([114|[101|[108|[101|[97|[115|[101|[95|[104|[97|[110|[100|[108|[101|[114|[58|[105|[110|[115|[116|[97|[108|[108|[95|[114|[101|[108|[101|[97|[115|[101|[40|[86|[115|[110|[61|[126|[116|[112|[32|[79|[112|[116|[115|[61|[126|[116|[112|[41|[32|[102|[97|[105|[108|[101|[100|[44|[32|[82|[101|[97|[115|[111|[110|[61|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 644
																																																							 [Vsn|[Opts|[Reason|[]]]])
				    do  %% Line 645
					call 'gen_server':'reply'
					    (From, {'error',Reason})
					do  %% Line 646
					    case ErrorAction of
					      %% Line 647
					      <'restart'> when 'true' ->
						  %% Line 648
						  call 'init':'restart'
						      ()
					      %% Line 649
					      <'reboot'> when 'true' ->
						  %% Line 650
						  call 'init':'reboot'
						      ()
					      ( <_45> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_45})
						-| ['compiler_generated'] )
					    end
					    %% Line 652
					    {'noreply',NS}
			    ( <_46> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_46})
			      -| ['compiler_generated'] )
			  end
	      %% Line 655
	      <{'make_permanent',Vsn},_X_From,S> when 'true' ->
		  let <_47> =
		      catch
			  %% Line 656
			  apply 'do_make_permanent'/2
			      (S, Vsn)
		  in  %% Line 656
		      case _47 of
			%% Line 657
			<{'ok',Releases,Unpurged}> when 'true' ->
			    %% Line 658
			    case S of
			      <{'state',_230,_231,_232,_233,_234,_235,_236,_237,_238,_239}> when 'true' ->
				  let <_49> =
				      call 'erlang':'setelement'
					  (5, S, Releases)
				  in  let <_51> =
					  call 'erlang':'setelement'
					      (2, _49, Unpurged)
				      in  {'reply','ok',_51}
			      ( <_240> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','state'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			%% Line 659
			<_@r4 = {'error',Reason}> when 'true' ->
			    %% Line 660
			    {'reply',_@r4,S}
			%% Line 661
			<{'EXIT',Reason}> when 'true' ->
			    %% Line 662
			    {'reply',{'error',Reason},S}
			( <_52> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_52})
			  -| ['compiler_generated'] )
		      end
	      %% Line 665
	      <{'reboot_old_release',Vsn},From,S> when 'true' ->
		  let <_53> =
		      catch
			  %% Line 666
			  apply 'do_reboot_old_release'/2
			      (S, Vsn)
		  in  %% Line 666
		      case _53 of
			%% Line 667
			<'ok'> when 'true' ->
			    do  %% Line 668
				call 'gen_server':'reply'
				    (From, 'ok')
				do  %% Line 669
				    call 'init':'reboot'
					()
				    %% Line 670
				    {'noreply',S}
			%% Line 671
			<_@r5 = {'error',Reason}> when 'true' ->
			    %% Line 672
			    {'reply',_@r5,S}
			%% Line 673
			<{'EXIT',Reason}> when 'true' ->
			    %% Line 674
			    {'reply',{'error',Reason},S}
			( <_54> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_54})
			  -| ['compiler_generated'] )
		      end
	      %% Line 677
	      <{'remove_release',Vsn},_X_From,S = {'state',_241,_242,_243,_244,_245,_246,_247,_248,_249,_250}>
		  when %% Line 678
		    ( try
			  let <_59> =
			      call 'erlang':'element'
				  (8, S)
			  in  let <_60> =
				  call 'erlang':'=='
				      (_59, 'false')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _60)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  let <_67> =
		      catch
			  %% Line 679
			  ( case S of
			      ( <( {'state',_251,_rec12,_252,_253,_254,_255,_256,_257,_258,_259}
				   -| ['compiler_generated'] )> when 'true' ->
				    ( case S of
					( <( {'state',_261,_262,_rec13,_263,_264,_265,_266,_267,_268,_269}
					     -| ['compiler_generated'] )> when 'true' ->
					      %% Line 680
					      ( case S of
						  ( <( {'state',_271,_272,_273,_rec14,_274,_275,_276,_277,_278,_279}
						       -| ['compiler_generated'] )> when 'true' ->
							apply 'do_remove_release'/4
							    (_rec12, _rec13, Vsn, _rec14)
						    -| ['compiler_generated'] )
						  ( <_280> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','state'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					( <_270> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','state'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <_260> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','state'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		  in  %% Line 679
		      case _67 of
			%% Line 681
			<{'ok',NewReleases}> when 'true' ->
			    %% Line 682
			    case S of
			      <{'state',_281,_282,_283,_284,_285,_286,_287,_288,_289,_290}> when 'true' ->
				  let <_70> =
				      call 'erlang':'setelement'
					  (5, S, NewReleases)
				  in  {'reply','ok',_70}
			      ( <_291> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','state'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			%% Line 683
			<_@r6 = {'error',Reason}> when 'true' ->
			    %% Line 684
			    {'reply',_@r6,S}
			%% Line 685
			<{'EXIT',Reason}> when 'true' ->
			    %% Line 686
			    {'reply',{'error',Reason},S}
			( <_71> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_71})
			  -| ['compiler_generated'] )
		      end
	      %% Line 688
	      <{'remove_release',_X_Vsn},_X_From,S> when 'true' ->
		  %% Line 689
		  {'reply',{'error','client_node'},S}
	      %% Line 691
	      <{'set_unpacked',RelFile,LibDirs},_X_From,S> when 'true' ->
		  %% Line 692
		  ( case S of
		      ( <( {'state',_292,_rec16,_293,_294,_295,_296,_297,_298,_299,_300}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_81> =
				catch
				    %% Line 693
				    ( case S of
					( <( {'state',_302,_303,_rec17,_304,_305,_306,_307,_308,_309,_310}
					     -| ['compiler_generated'] )> when 'true' ->
					      %% Line 694
					      ( case S of
						  ( <( {'state',_312,_313,_314,_rec18,_315,_316,_317,_318,_319,_320}
						       -| ['compiler_generated'] )> when 'true' ->
							%% Line 695
							( case S of
							    ( <( {'state',_322,_323,_324,_325,_326,_327,_rec19,_328,_329,_330}
								 -| ['compiler_generated'] )> when 'true' ->
								  apply 'do_set_unpacked'/6
								      (_rec16, _rec17, RelFile, LibDirs, _rec18, _rec19)
							      -| ['compiler_generated'] )
							    ( <_331> when 'true' ->
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'error'
													 -| ['compiler_generated'] )
									(( {'badrecord','state'}
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <_321> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','state'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					( <_311> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','state'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
			    in  %% Line 693
				case _81 of
				  %% Line 696
				  <{'ok',NewReleases,Vsn}> when 'true' ->
				      %% Line 697
				      case S of
					<{'state',_332,_333,_334,_335,_336,_337,_338,_339,_340,_341}> when 'true' ->
					    let <_84> =
						call 'erlang':'setelement'
						    (5, S, NewReleases)
					    in  {'reply',{'ok',Vsn},_84}
					( <_342> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','state'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				  %% Line 698
				  <_@r7 = {'error',Reason}> when 'true' ->
				      %% Line 699
				      {'reply',_@r7,S}
				  %% Line 700
				  <{'EXIT',Reason}> when 'true' ->
				      %% Line 701
				      {'reply',{'error',Reason},S}
				  ( <_85> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_85})
				    -| ['compiler_generated'] )
				end
			-| ['compiler_generated'] )
		      ( <_301> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 704
	      <{'set_removed',Vsn},_X_From,S> when 'true' ->
		  let <_92> =
		      catch
			  %% Line 705
			  ( case S of
			      ( <( {'state',_343,_344,_rec21,_345,_346,_347,_348,_349,_350,_351}
				   -| ['compiler_generated'] )> when 'true' ->
				    %% Line 706
				    ( case S of
					( <( {'state',_353,_354,_355,_rec22,_356,_357,_358,_359,_360,_361}
					     -| ['compiler_generated'] )> when 'true' ->
					      %% Line 707
					      ( case S of
						  ( <( {'state',_363,_364,_365,_366,_367,_368,_rec23,_369,_370,_371}
						       -| ['compiler_generated'] )> when 'true' ->
							apply 'do_set_removed'/4
							    (_rec21, Vsn, _rec22, _rec23)
						    -| ['compiler_generated'] )
						  ( <_372> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','state'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					( <_362> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','state'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <_352> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','state'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		  in  %% Line 705
		      case _92 of
			%% Line 708
			<{'ok',NewReleases}> when 'true' ->
			    %% Line 709
			    case S of
			      <{'state',_373,_374,_375,_376,_377,_378,_379,_380,_381,_382}> when 'true' ->
				  let <_95> =
				      call 'erlang':'setelement'
					  (5, S, NewReleases)
				  in  {'reply','ok',_95}
			      ( <_383> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','state'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			%% Line 710
			<_@r8 = {'error',Reason}> when 'true' ->
			    %% Line 711
			    {'reply',_@r8,S}
			%% Line 712
			<{'EXIT',Reason}> when 'true' ->
			    %% Line 713
			    {'reply',{'error',Reason},S}
			( <_96> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_96})
			  -| ['compiler_generated'] )
		      end
	      %% Line 716
	      <{'install_file',File,Vsn},_X_From,S> when 'true' ->
		  %% Line 718
		  ( case S of
		      ( <( {'state',_384,_385,_386,_rec25,_387,_388,_389,_390,_391,_392}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_105> =
				case call 'lists':'keysearch'
					 (Vsn, 3, _rec25) of
				  %% Line 719
				  <{'value',_394}> when 'true' ->
				      %% Line 720
				      ( case S of
					  ( <( {'state',_395,_396,_rec26,_397,_398,_399,_400,_401,_402,_403}
					       -| ['compiler_generated'] )> when 'true' ->
						let <Dir> =
						    call 'filename':'join'
							([_rec26|[Vsn|[]]])
						in  catch
							%% Line 721
							( case S of
							    ( <( {'state',_405,_406,_407,_408,_409,_410,_rec27,_411,_412,_413}
								 -| ['compiler_generated'] )> when 'true' ->
								  apply 'copy_file'/3
								      (File, Dir, _rec27)
							      -| ['compiler_generated'] )
							    ( <_414> when 'true' ->
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'error'
													 -| ['compiler_generated'] )
									(( {'badrecord','state'}
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_404> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','state'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  %% Line 722
				  <_415> when 'true' ->
				      %% Line 723
				      {'error',{'no_such_release',Vsn}}
				end
			    in  %% Line 725
				{'reply',_105,S}
			-| ['compiler_generated'] )
		      ( <_393> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 727
	      <'which_releases',_X_From,S> when 'true' ->
		  let <_112> =
		      fun (_110) ->
			  %% Line 728
			  case _110 of
			    <{'release',Name,Vsn,_416,Libs,%% Line 729
							   Status}> when 'true' ->
				let <_109> =
				    apply %% Line 730
					  'mk_lib_name'/1
					(%% Line 730
					 Libs)
				in  %% Line 730
				    {Name,Vsn,_109,Status}
			    ( <_111> when 'true' ->
				  primop 'match_fail'
				      ({'function_clause',_111})
			      -| ['compiler_generated'] )
			  end
		  in  %% Line 731
		      ( case S of
			  ( <( {'state',_417,_418,_419,_rec28,_420,_421,_422,_423,_424,_425}
			       -| ['compiler_generated'] )> when 'true' ->
				let <Reply> =
				    call 'lists':'map'
					(_112, _rec28)
				in  %% Line 732
				    {'reply',Reply,S}
			    -| ['compiler_generated'] )
			  ( <_426> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      ( <_116,_115,_114> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_116,_115,_114})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'handle_call',3}}] )
      -| [{'function',{'handle_call',3}}] )
'mk_lib_name'/1 =
    %% Line 734
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'mk_lib_name',1}}] ) of
	      <[{LibName,Vsn,_X_Dir}|T]> when 'true' ->
		  let <_1> =
		      call %% Line 735
			   'lists':%% Line 735
				   'concat'
			  (%% Line 735
			   [LibName|[[45]|[Vsn|[]]]])
		  in  let <_2> =
			  apply %% Line 735
				'mk_lib_name'/1
			      (%% Line 735
			       T)
		      in  %% Line 735
			  [_1|_2]
	      %% Line 736
	      <[]> when 'true' ->
		  []
	      ( <_3> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_3})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'mk_lib_name',1}}] )
      -| [{'function',{'mk_lib_name',1}}] )
'handle_info'/2 =
    %% Line 738
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <'timeout',S> when 'true' ->
		  %% Line 739
		  ( case S of
		      ( <( {'state',_rec29,_24,_25,_26,_27,_28,_29,_30,_31,_32}
			   -| ['compiler_generated'] )> when 'true' ->
			    case apply 'soft_purge'/1
				     (_rec29) of
			      %% Line 740
			      <[]> when 'true' ->
				  %% Line 741
				  ( case S of
				      ( <( {'state',_34,_35,_36,_37,_rec30,_38,_39,_40,_41,_42}
					   -| ['result_not_wanted','compiler_generated'] )> when 'true' ->
					    do  ( call ( 'timer'
							 -| ['result_not_wanted'] ):( 'cancel'
										      -| ['result_not_wanted'] )
						      (_rec30)
						  -| ['result_not_wanted'] )
						%% Line 742
						case S of
						  <{'state',_44,_45,_46,_47,_48,_49,_50,_51,_52,_53}> when 'true' ->
						      let <_8> =
							  call 'erlang':'setelement'
							      (6, S, 'undefined')
						      in  let <_10> =
							      call 'erlang':'setelement'
								  (2, _8, [])
							  in  {'noreply',_10}
						  ( <_54> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','state'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					-| ['compiler_generated'] )
				      ( <_43> when 'true' ->
					    ( call ( 'erlang'
						     -| ['result_not_wanted','compiler_generated'] ):( 'error'
												       -| ['result_not_wanted','compiler_generated'] )
						  (( {'badrecord','state'}
						     -| ['result_not_wanted','compiler_generated'] ))
					      -| ['result_not_wanted','compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 743
			      <Unpurged> when 'true' ->
				  %% Line 744
				  case S of
				    <{'state',_55,_56,_57,_58,_59,_60,_61,_62,_63,_64}> when 'true' ->
					let <_13> =
					    call 'erlang':'setelement'
						(2, S, Unpurged)
					in  {'noreply',_13}
				    ( <_65> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','state'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			    end
			-| ['compiler_generated'] )
		      ( <_33> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 747
	      <_@r0 = {'sync_nodes',Id,Node},S> when 'true' ->
		  %% Line 748
		  ( case S of
		      ( <( {'state',_66,_67,_68,_69,_70,_71,_72,_73,_74,_rec33}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_rec34> =
				[%% Line 749
				 _@r0|_rec33]
			    in  %% Line 749
				case S of
				  <{'state',_76,_77,_78,_79,_80,_81,_82,_83,_84,_85}> when 'true' ->
				      let <_21> =
					  call 'erlang':'setelement'
					      (11, S, _rec34)
				      in  {'noreply',_21}
				  ( <_86> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','state'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			-| ['compiler_generated'] )
		      ( <_75> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 751
	      <Msg,State> when 'true' ->
		  do  %% Line 752
		      call 'error_logger':'info_msg'
			  ([114|[101|[108|[101|[97|[115|[101|[95|[104|[97|[110|[100|[108|[101|[114|[58|[32|[103|[111|[116|[32|[117|[110|[107|[110|[111|[119|[110|[32|[109|[101|[115|[115|[97|[103|[101|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Msg|[]])
		      %% Line 753
		      {'noreply',State}
	    end
	    -| [{'function',{'handle_info',2}}] )
      -| [{'function',{'handle_info',2}}] )
'terminate'/2 =
    %% Line 755
    ( fun (_0,_1) ->
	  %% Line 756
	  'ok'
      -| [{'function',{'terminate',2}}] )
'handle_cast'/2 =
    %% Line 758
    ( fun (_0,_1) ->
	  %% Line 759
	  {'noreply',_1}
      -| [{'function',{'handle_cast',2}}] )
'code_change'/3 =
    %% Line 760
    ( fun (_0,_1,_2) ->
	  %% Line 761
	  {'ok',_1}
      -| [{'function',{'code_change',3}}] )
'is_client'/0 =
    %% Line 766
    ( fun () ->
	  %% Line 767
	  case call 'application':'get_env'
		   ('masters') of
	    %% Line 768
	    <{'ok',Masters}> when 'true' ->
		let <Alive> =
		    call %% Line 769
			 'erlang':%% Line 769
				  'is_alive'
			()
		in  %% Line 770
		    case apply 'atom_list'/1
			     (Masters) of
		      %% Line 771
		      <'true'>
			  when call 'erlang':'=='
				(Alive,
				 'true') ->
			  %% Line 772
			  case call 'application':'get_env'
				   ('client_directory') of
			    %% Line 773
			    <{'ok',ClientDir}> when 'true' ->
				%% Line 774
				case apply 'int_list'/1
					 (ClientDir) of
				  %% Line 775
				  <'true'> when 'true' ->
				      %% Line 776
				      {ClientDir,Masters}
				  %% Line 777
				  <_5> when 'true' ->
				      %% Line 778
				      call 'erlang':'exit'
					  ({'bad_parameter','client_directory',%% Line 779
									       ClientDir})
				end
			    %% Line 781
			    <_6> when 'true' ->
				%% Line 782
				{'false','false'}
			  end
		      %% Line 784
		      <_7> when 'true' ->
			  %% Line 785
			  call 'erlang':'exit'
			      ({'bad_parameter','masters',Masters})
		    end
	    %% Line 787
	    <_8> when 'true' ->
		%% Line 788
		{'false','false'}
	  end
      -| [{'function',{'is_client',0}}] )
'atom_list'/1 =
    %% Line 791
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'atom_list',1}}] ) of
	      <[A|T]>
		  when call 'erlang':'is_atom'
			(A) ->
		  apply 'atom_list'/1
		      (T)
	      %% Line 792
	      <[]> when 'true' ->
		  'true'
	      %% Line 793
	      <_2> when 'true' ->
		  'false'
	    end
	    -| [{'function',{'atom_list',1}}] )
      -| [{'function',{'atom_list',1}}] )
'int_list'/1 =
    %% Line 795
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'int_list',1}}] ) of
	      <[I|T]>
		  when call 'erlang':'is_integer'
			(I) ->
		  apply 'int_list'/1
		      (T)
	      %% Line 796
	      <[]> when 'true' ->
		  'true'
	      %% Line 797
	      <_2> when 'true' ->
		  'false'
	    end
	    -| [{'function',{'int_list',1}}] )
      -| [{'function',{'int_list',1}}] )
'resend_sync_nodes'/1 =
    %% Line 799
    ( fun (_0) ->
	  let <_6> =
	      fun (_4) ->
		  let <_3> =
		      call %% Line 800
			   'erlang':%% Line 800
				    'self'
			  ()
		  in  %% Line 800
		      call 'erlang':'!'
			  (_3, _4)
	  in  %% Line 800
	      ( case ( _0
		       -| [{'function',{'resend_sync_nodes',1}}] ) of
		  ( <( {'state',_10,_11,_12,_13,_14,_15,_16,_17,_18,_rec36}
		       -| ['compiler_generated'] )> when 'true' ->
			do  call 'lists':'foreach'
				(_6, _rec36)
			    %% Line 801
			    case ( _0
				   -| [{'function',{'resend_sync_nodes',1}}] ) of
			      <{'state',_20,_21,_22,_23,_24,_25,_26,_27,_28,_29}> when 'true' ->
				  call 'erlang':'setelement'
				      (11, ( _0
					     -| [{'function',{'resend_sync_nodes',1}}] ), [])
			      ( <_30> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','state'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_19> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
      -| [{'function',{'resend_sync_nodes',1}}] )
'soft_purge'/1 =
    %% Line 803
    ( fun (_0) ->
	  let <_4> =
	      fun (_2) ->
		  %% Line 804
		  case _2 of
		    <{Mod,_X_PostPurgeMethod}> when 'true' ->
			%% Line 805
			case call 'code':'soft_purge'
				 (Mod) of
			  %% Line 806
			  <'true'> when 'true' ->
			      'false'
			  %% Line 807
			  <'false'> when 'true' ->
			      'true'
			  ( <_1> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_1})
			    -| ['compiler_generated'] )
			end
		    ( <_3> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',_3})
		      -| ['compiler_generated'] )
		  end
	  in  %% Line 804
	      call 'lists':'filter'
		  (_4, ( _0
			 -| [{'function',{'soft_purge',1}}] ))
      -| [{'function',{'soft_purge',1}}] )
'brutal_purge'/1 =
    %% Line 812
    ( fun (_0) ->
	  let <_3> =
	      fun (_1) ->
		  %% Line 813
		  case _1 of
		    <{Mod,'brutal_purge'}> when 'true' ->
			do  call 'code':'purge'
				(Mod)
			    'false'
		    %% Line 814
		    <_5> when 'true' ->
			'true'
		  end
	  in  %% Line 813
	      call 'lists':'filter'
		  (_3, ( _0
			 -| [{'function',{'brutal_purge',1}}] ))
      -| [{'function',{'brutal_purge',1}}] )
'do_unpack_release'/4 =
    %% Line 830
    ( fun (_0,_1,_2,_3) ->
	  let <_4> =
	      call %% Line 831
		   'erlang':%% Line 831
			    '++'
		  (_2, %% Line 831
		       [46|[116|[97|[114|[46|[103|[122]]]]]]])
	  in  let <Tar> =
		  call %% Line 831
		       'filename':%% Line 831
				  'join'
		      (_1, _4)
	      in  do  %% Line 832
		      apply 'do_check_file'/2
			  (Tar, 'regular')
		      let <Rel> =
			  call %% Line 833
			       'erlang':%% Line 833
					'++'
			      (_2, %% Line 833
				   [46|[114|[101|[108]]]])
		      in  let <_7> =
			      call %% Line 834
				   ( 'filename'
				     -| ['result_not_wanted'] ):%% Line 834
								( 'join'
								  -| ['result_not_wanted'] )
				  (%% Line 834
				   ( [114|[101|[108|[101|[97|[115|[101|[115]]]]]]]]
				     -| ['result_not_wanted'] ), %% Line 834
								 Rel)
			  in  do  %% Line 834
				  apply 'extract_rel_file'/3
				      (_7, Tar, _0)
				  let <RelFile> =
				      call %% Line 835
					   'filename':%% Line 835
						      'join'
					  (_1, %% Line 835
					       Rel)
				  in  let <Release> =
					  apply %% Line 836
						'check_rel'/3
					      (_0, %% Line 836
						   RelFile, %% Line 836
							    'false')
				      in  %% Line 837
					  case Release of
					    <{'release',_24,Vsn,_25,_26,_27}> when 'true' ->
						do  %% Line 838
						    case call 'lists':'keysearch'
							     (Vsn, 3, _3) of
						      %% Line 839
						      <{'value',_28}> when 'true' ->
							  call 'erlang':'throw'
							      ({'error',{'existing_release',Vsn}})
						      %% Line 840
						      <_29> when 'true' ->
							  'ok'
						    end
						    do  %% Line 842
							apply 'extract_tar'/2
							    (_0, Tar)
							%% Line 843
							case Release of
							  <{'release',_30,_31,_32,_33,_34}> when 'true' ->
							      let <_15> =
								  call 'erlang':'setelement'
								      (6, Release, 'unpacked')
							      in  let <NewReleases> =
								      [_15|_3]
								  in  do  %% Line 844
									  apply 'write_releases'/3
									      (_1, NewReleases, 'false')
									  let <Dir> =
									      call %% Line 849
										   'filename':%% Line 849
											      'join'
										  (%% Line 849
										   [_1|[Vsn|[]]])
									  in  do  %% Line 850
										  apply 'copy_file'/3
										      (RelFile, Dir, 'false')
										  do  %% Line 853
										      ( call ( 'file'
											       -| ['result_not_wanted'] ):( 'delete'
															    -| ['result_not_wanted'] )
											    (Tar)
											-| ['result_not_wanted'] )
										      do  %% Line 854
											  ( call ( 'file'
												   -| ['result_not_wanted'] ):( 'delete'
																-| ['result_not_wanted'] )
												(RelFile)
											    -| ['result_not_wanted'] )
											  %% Line 856
											  {'ok',NewReleases,Vsn}
							  ( <_35> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','release'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
					    ( <_11> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_11})
					      -| ['compiler_generated'] )
					  end
      -| [{'function',{'do_unpack_release',4}}] )
'check_rel'/3 =
    %% Line 858
    ( fun (_0,_1,_2) ->
	  %% Line 859
	  apply 'check_rel'/4
	      (_0, _1, [], _2)
      -| [{'function',{'check_rel',3}}] )
'check_rel'/4 =
    %% Line 860
    ( fun (_0,_1,_2,_3) ->
	  %% Line 861
	  case apply 'consult'/2
		   (_1, _3) of
	    %% Line 862
	    <{'ok',[RelData|[]]}> when 'true' ->
		%% Line 863
		apply 'check_rel_data'/4
		    (RelData, _0, _2, _3)
	    %% Line 864
	    <{'ok',_9}> when 'true' ->
		%% Line 865
		call 'erlang':'throw'
		    ({'error',{'bad_rel_file',_1}})
	    %% Line 866
	    <{'error',Reason}>
		when call 'erlang':'is_tuple'
		      (Reason) ->
		%% Line 867
		call 'erlang':'throw'
		    ({'error',{'bad_rel_file',_1}})
	    %% Line 868
	    <{'error',FileError}> when 'true' ->
		%% Line 869
		call 'erlang':'throw'
		    ({'error',{FileError,_1}})
	    ( <_4> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_4})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'check_rel',4}}] )
'check_rel_data'/4 =
    %% Line 872
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <{'release',{Name,Vsn},{'erts',EVsn},Libs},Root,LibDirs,%% Line 873
								      Masters> when 'true' ->
		  let <_13> =
		      fun (_11) ->
			  let <Lib> =
			      call %% Line 876
				   'erlang':%% Line 876
					    'element'
				  (%% Line 876
				   1, %% Line 875
				      _11)
			  in  let <LibVsn> =
				  call %% Line 877
				       'erlang':%% Line 877
						'element'
				      (%% Line 877
				       2, %% Line 875
					  _11)
			      in  let <LibName> =
				      call %% Line 878
					   'lists':%% Line 878
						   'concat'
					  (%% Line 878
					   [Lib|[[45]|[LibVsn|[]]]])
				  in  let <_9> =
					  case %% Line 880
					       call 'lists':'keysearch'
						   (Lib, 1, LibDirs) of
					    %% Line 881
					    <{'value',{_X_Lib,_X_Vsn,Dir}}> when 'true' ->
						let <Path> =
						    call %% Line 882
							 'filename':%% Line 882
								    'join'
							(%% Line 882
							 Dir, %% Line 882
							      LibName)
						in  do  %% Line 883
							apply 'check_path'/2
							    (Path, Masters)
							%% Line 884
							Path
					    %% Line 885
					    <_19> when 'true' ->
						%% Line 886
						call 'filename':'join'
						    ([Root|[[108|[105|[98]]]|[LibName|[]]]])
					  end
				      in  %% Line 888
					  {Lib,LibVsn,_9}
		  in  let <Libs2> =
			  call %% Line 875
			       'lists':%% Line 875
				       'map'
			      (_13, %% Line 890
				    Libs)
		      in  %% Line 891
			  {'release',Name,Vsn,EVsn,%% Line 892
						   Libs2,%% Line 892
							 'unpacking'}
	      %% Line 893
	      <RelData,_X_Root,_X_LibDirs,_X_Masters> when 'true' ->
		  %% Line 894
		  call 'erlang':'throw'
		      ({'error',{'bad_rel_data',RelData}})
	    end
	    -| [{'function',{'check_rel_data',4}}] )
      -| [{'function',{'check_rel_data',4}}] )
'check_path'/1 =
    %% Line 896
    ( fun (_0) ->
	  let <_1> =
	      call %% Line 897
		   'file':%% Line 897
			  'read_file_info'
		  (( _0
		     -| [{'function',{'check_path',1}}] ))
	  in  %% Line 897
	      apply 'check_path_response'/2
		  (( _0
		     -| [{'function',{'check_path',1}}] ), _1)
      -| [{'function',{'check_path',1}}] )
'check_path'/2 =
    %% Line 898
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Path,'false'> when 'true' ->
		  apply 'check_path'/1
		      (Path)
	      %% Line 899
	      <Path,Masters> when 'true' ->
		  apply 'check_path_master'/2
		      (Masters, Path)
	    end
	    -| [{'function',{'check_path',2}}] )
      -| [{'function',{'check_path',2}}] )
'check_path_master'/2 =
    %% Line 906
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <[Master|Ms],Path> when 'true' ->
		  %% Line 907
		  case call 'rpc':'call'
			   (Master, 'file', 'read_file_info', [Path|[]]) of
		    %% Line 908
		    <{'badrpc',_5}> when 'true' ->
			apply 'consult_master'/2
			    (Ms, Path)
		    %% Line 909
		    <Res> when 'true' ->
			apply 'check_path_response'/2
			    (Path, Res)
		  end
	      %% Line 911
	      <[],_X_Path> when 'true' ->
		  %% Line 912
		  {'error','no_master'}
	      ( <_4,_3> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_4,_3})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'check_path_master',2}}] )
      -| [{'function',{'check_path_master',2}}] )
'check_path_response'/2 =
    %% Line 914
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <_X_Path,{'ok',Info = {'file_info',_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22}}>
		  when ( try
			  let <_6> =
			      call 'erlang':'element'
				  (3, Info)
			  in  let <_7> =
				  call 'erlang':'=='
				      (_6, 'directory')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(( 'true'
					   -| ['compiler_generated'] ), _7)
				    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 915
		  'ok'
	      %% Line 916
	      <Path,{'ok',_X_Info}> when 'true' ->
		  %% Line 917
		  call 'erlang':'throw'
		      ({'error',{'not_a_directory',Path}})
	      %% Line 918
	      <Path,{'error',_X_Reason}> when 'true' ->
		  %% Line 919
		  call 'erlang':'throw'
		      ({'error',{'no_such_directory',Path}})
	      ( <_9,_8> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_9,_8})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'check_path_response',2}}] )
      -| [{'function',{'check_path_response',2}}] )
'do_check_install_release'/5 =
    %% Line 921
    ( fun (_0,_1,_2,_3,_4) ->
	  %% Line 922
	  case call 'lists':'keysearch'
		   (_1, 3, _2) of
	    %% Line 923
	    <{'value',{'release',_32,_33,_34,_35,'current'}}> when 'true' ->
		%% Line 924
		{'error',{'already_installed',_1}}
	    %% Line 925
	    <{'value',Release}> when 'true' ->
		let <LatestRelease> =
		    apply %% Line 926
			  'get_latest_release'/1
			(_2)
		in  let <VsnDir> =
			call %% Line 927
			     'filename':%% Line 927
					'join'
			    (%% Line 927
			     [_0|[_1|[]]])
		    in  let <_7> =
			    call %% Line 928
				 'filename':%% Line 928
					    'join'
				(%% Line 928
				 VsnDir, %% Line 928
					 [115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]])
			in  do  %% Line 928
				apply 'check_file'/3
				    (_7, 'regular', _3)
				let <_8> =
				    call %% Line 929
					 'filename':%% Line 929
						    'join'
					(%% Line 929
					 VsnDir, %% Line 929
						 [114|[101|[108|[117|[112]]]]])
				in  let <IsRelup> =
					apply %% Line 929
					      'check_opt_file'/3
					    (_8, %% Line 929
						 'regular', _3)
				    in  let <_10> =
					    call %% Line 930
						 'filename':%% Line 930
							    'join'
						(%% Line 930
						 VsnDir, %% Line 930
							 [115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]])
					in  do  %% Line 930
						apply 'check_opt_file'/3
						    (_10, 'regular', _3)
						%% Line 933
						( case Release of
						    ( <( {'release',_36,_37,_38,_rec39,_39}
							 -| ['compiler_generated'] )> when 'true' ->
							  let <_17> =
							      fun (_15) ->
								  %% Line 934
								  case _15 of
								    <{_X_Lib,_X_LibVsn,LibDir}> when 'true' ->
									do  %% Line 935
									    apply 'check_file'/3
										(LibDir, 'directory', _3)
									    let <Ebin> =
										call %% Line 936
										     'filename':%% Line 936
												'join'
										    (%% Line 936
										     LibDir, %% Line 936
											     [101|[98|[105|[110]]]])
									    in  %% Line 937
										apply 'check_file'/3
										    (Ebin, 'directory', _3)
								    ( <_16> when 'true' ->
									  primop 'match_fail'
									      ({'function_clause',_16})
								      -| ['compiler_generated'] )
								  end
							  in  do  %% Line 934
								  call 'lists':'foreach'
								      (_17, _rec39)
								  %% Line 941
								  case <> of
								    %% Line 942
								    <>
									when ( call 'erlang':'=:='
										(IsRelup,
										 'true')
									    -| ['compiler_generated'] ) ->
									%% Line 943
									case apply 'get_rh_script'/4
										 (LatestRelease, Release, _0, _3) of
									  %% Line 944
									  <{'ok',{CurrentVsn,Descr,Script}}> when 'true' ->
									      let <_18> =
										  catch
										      %% Line 945
										      apply 'check_script'/2
											  (Script, _rec39)
									      in  %% Line 945
										  case _18 of
										    %% Line 946
										    <{'ok',SoftPurgeMods}>
											when call 'erlang':'=:='
											      (_4,
											       'true') ->
											%% Line 950
											case %% Line 951
											     call 'release_handler_1':'check_old_processes'
												 (%% Line 952
												  Script, %% Line 952
													  'brutal_purge') of
											  <{'ok',BrutalPurgeMods}> when 'true' ->
											      let <_23> =
												  fun (_21) ->
												      catch
													  %% Line 955
													  call 'erlang':'purge_module'
													      (_21)
											      in  let <_20> =
												      call %% Line 957
													   'erlang':%% Line 957
														    '++'
													  (%% Line 957
													   SoftPurgeMods, %% Line 957
															  BrutalPurgeMods)
												  in  do  %% Line 953
													  call 'lists':'foreach'
													      (_23, _20)
													  %% Line 958
													  {'ok',CurrentVsn,Descr}
											  ( <_19> when 'true' ->
												primop 'match_fail'
												    ({'badmatch',_19})
											    -| ['compiler_generated'] )
											end
										    %% Line 959
										    <{'ok',_41}> when 'true' ->
											%% Line 960
											{'ok',CurrentVsn,Descr}
										    %% Line 961
										    <Else> when 'true' ->
											%% Line 962
											Else
										  end
									  %% Line 964
									  <Error> when 'true' ->
									      %% Line 965
									      Error
									end
								    %% Line 967
								    <> when 'true' ->
									%% Line 968
									{'ok',_1,[]}
								  end
						      -| ['compiler_generated'] )
						    ( <_40> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','release'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
	    %% Line 970
	    <_42> when 'true' ->
		%% Line 971
		{'error',{'no_such_release',_1}}
	  end
      -| [{'function',{'do_check_install_release',5}}] )
'do_install_release'/3 =
    %% Line 974
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <{'state',_28,%% Line 975
			    RootDir,%% Line 976
				    RelDir,%% Line 976
					   Releases,_29,StartPrg,%% Line 977
								 Masters,_30,%% Line 978
									     Static,_31},%% Line 979
											 Vsn,%% Line 979
											     Opts> when 'true' ->
		  %% Line 980
		  case call 'lists':'keysearch'
			   (Vsn, 3, Releases) of
		    %% Line 981
		    <{'value',{'release',_32,_33,_34,_35,'current'}}> when 'true' ->
			%% Line 982
			{'error',{'already_installed',Vsn}}
		    %% Line 983
		    <{'value',Release}> when 'true' ->
			let <LatestRelease> =
			    apply %% Line 984
				  'get_latest_release'/1
				(%% Line 984
				 Releases)
			in  %% Line 985
			    case apply 'get_rh_script'/4
				     (LatestRelease, Release, RelDir, Masters) of
			      %% Line 986
			      <{'ok',{_X_CurrentVsn,_X_Descr,['restart_new_emulator'|_X_Script]}}>
				  when %% Line 987
				    call 'erlang':'=='
					(Static,
					 'true') ->
				  %% Line 988
				  call 'erlang':'throw'
				      ('static_emulator')
			      %% Line 989
			      <{'ok',{CurrentVsn,Descr,['restart_new_emulator'|_X_Script]}}> when 'true' ->
				  %% Line 997
				  case %% Line 998
				       apply 'new_emulator_make_tmp_release'/5
					   (LatestRelease, Release, %% Line 999
								    RelDir, %% Line 999
									    Opts, %% Line 999
										  Masters) of
				    <{TmpVsn,TmpRelease}> when 'true' ->
					let <NReleases> =
					    [%% Line 1000
					     TmpRelease|%% Line 1000
							Releases]
					in  do  %% Line 1004
						apply 'prepare_restart_new_emulator'/7
						    (StartPrg, RootDir, %% Line 1005
									RelDir, %% Line 1005
										TmpVsn, %% Line 1005
											TmpRelease, %% Line 1006
												    NReleases, %% Line 1006
													       Masters)
						%% Line 1007
						{'restart_new_emulator',CurrentVsn,Descr}
				    ( <_4> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_4})
				      -| ['compiler_generated'] )
				  end
			      %% Line 1008
			      <{'ok',{CurrentVsn,Descr,Script}}> when 'true' ->
				  %% Line 1013
				  ( case LatestRelease of
				      ( <( {'release',_36,_rec40,_37,_38,_39}
					   -| ['compiler_generated'] )> when 'true' ->
					    %% Line 1014
					    ( case LatestRelease of
						( <( {'release',_41,_42,_rec41,_43,_44}
						     -| ['compiler_generated'] )> when 'true' ->
						      let <NReleases> =
							  apply 'new_emulator_rm_tmp_release'/6
							      (_rec40, _rec41, %% Line 1015
									       Vsn, %% Line 1015
										    RelDir, %% Line 1015
											    Releases, %% Line 1015
												      Masters)
						      in  do  %% Line 1018
							      apply 'mon_nodes'/1
								  ('true')
							      let <EnvBefore> =
								  call %% Line 1019
								       'application_controller':%% Line 1019
												'prep_config_change'
								      ()
							      in  let <Apps> =
								      apply %% Line 1020
									    'change_appl_data'/3
									  (%% Line 1020
									   RelDir, %% Line 1020
										   Release, %% Line 1020
											    Masters)
								  in  %% Line 1021
								      ( case Release of
									  ( <( {'release',_46,_47,_48,_rec42,_49}
									       -| ['compiler_generated'] )> when 'true' ->
										%% Line 1022
										( case LatestRelease of
										    ( <( {'release',_51,_52,_53,_rec43,_54}
											 -| ['compiler_generated'] )> when 'true' ->
											  %% Line 1023
											  ( case Release of
											      ( <( {'release',_56,_57,_58,_rec44,_59}
												   -| ['compiler_generated'] )> when 'true' ->
												    let <NewLibs> =
													apply 'get_new_libs'/2
													    (_rec43, _rec44)
												    in  %% Line 1024
													case apply 'eval_script'/5
														 (Script, Apps, _rec42, NewLibs, Opts) of
													  %% Line 1025
													  <{'ok',Unpurged}> when 'true' ->
													      do  %% Line 1026
														  call 'application_controller':'config_change'
														      (EnvBefore)
														  do  %% Line 1027
														      apply 'mon_nodes'/1
															  ('false')
														      let <NReleases1> =
															  apply %% Line 1028
																'set_status'/3
															      (%% Line 1028
															       Vsn, %% Line 1028
																    'current', %% Line 1028
																	       NReleases)
														      in  %% Line 1029
															  {'ok',NReleases1,Unpurged,CurrentVsn,Descr}
													  %% Line 1030
													  <'restart_emulator'>
													      when call 'erlang':'=='
														    (Static,
														     'true') ->
													      %% Line 1031
													      call 'erlang':'throw'
														  ('static_emulator')
													  %% Line 1032
													  <'restart_emulator'> when 'true' ->
													      do  %% Line 1033
														  apply 'mon_nodes'/1
														      ('false')
														  do  %% Line 1034
														      apply 'prepare_restart_new_emulator'/7
															  (StartPrg, RootDir, %% Line 1035
																	      RelDir, %% Line 1035
																		      Vsn, %% Line 1035
																			   Release, %% Line 1036
																				    NReleases, %% Line 1036
																					       Masters)
														      %% Line 1037
														      {'restart_emulator',CurrentVsn,Descr}
													  %% Line 1038
													  <Else> when 'true' ->
													      do  %% Line 1039
														  call 'application_controller':'config_change'
														      (EnvBefore)
														  do  %% Line 1040
														      apply 'mon_nodes'/1
															  ('false')
														      %% Line 1041
														      Else
													end
												-| ['compiler_generated'] )
											      ( <_60> when 'true' ->
												    ( call ( 'erlang'
													     -| ['compiler_generated'] ):( 'error'
																	   -| ['compiler_generated'] )
													  (( {'badrecord','release'}
													     -| ['compiler_generated'] ))
												      -| ['compiler_generated'] )
												-| ['compiler_generated'] )
											    end
											    -| ['compiler_generated'] )
										      -| ['compiler_generated'] )
										    ( <_55> when 'true' ->
											  ( call ( 'erlang'
												   -| ['compiler_generated'] ):( 'error'
																 -| ['compiler_generated'] )
												(( {'badrecord','release'}
												   -| ['compiler_generated'] ))
											    -| ['compiler_generated'] )
										      -| ['compiler_generated'] )
										  end
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									  ( <_50> when 'true' ->
										( call ( 'erlang'
											 -| ['compiler_generated'] ):( 'error'
														       -| ['compiler_generated'] )
										      (( {'badrecord','release'}
											 -| ['compiler_generated'] ))
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									end
									-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <_45> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','release'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <_40> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','release'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 1043
			      <Error> when 'true' ->
				  %% Line 1044
				  Error
			    end
		    %% Line 1046
		    <_61> when 'true' ->
			%% Line 1047
			{'error',{'no_such_release',Vsn}}
		  end
	      ( <_27,_26,_25> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_27,_26,_25})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'do_install_release',3}}] )
      -| [{'function',{'do_install_release',3}}] )
'new_emulator_make_tmp_release'/5 =
    %% Line 1050
    ( fun (_0,_1,_2,_3,_4) ->
	  %% Line 1051
	  ( case _0 of
	      ( <( {'release',_31,_rec45,_32,_33,_34}
		   -| ['compiler_generated'] )> when 'true' ->
		    %% Line 1052
		    ( case _1 of
			( <( {'release',_36,_rec46,_37,_38,_39}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <TmpVsn> =
				  call %% Line 1053
				       'erlang':%% Line 1053
						'++'
				      (%% Line 1053
				       [95|[95|[110|[101|[119|[95|[101|[109|[117|[108|[97|[116|[111|[114|[95|[95]]]]]]]]]]]]]]]], _rec45)
			      in  %% Line 1054
				  ( case _1 of
				      ( <( {'release',_41,_42,_43,_rec47,_44}
					   -| ['compiler_generated'] )> when 'true' ->
					    case apply 'get_base_libs'/1
						     (_rec47) of
					      %% Line 1055
					      <{'ok',{Kernel,Stdlib,Sasl},_46}> when 'true' ->
						  %% Line 1056
						  ( case _0 of
						      ( <( {'release',_47,_48,_49,_rec48,_50}
							   -| ['compiler_generated'] )> when 'true' ->
							    case apply 'get_base_libs'/1
								     (_rec48) of
							      %% Line 1057
							      <{'ok',_52,RestLibs}> when 'true' ->
								  %% Line 1058
								  ( case _1 of
								      ( <( {'release',_53,_54,_rec49,_55,_56}
									   -| ['compiler_generated'] )> when 'true' ->
									    let <TmpLibs> =
										[%% Line 1059
										 Kernel|%% Line 1059
											[Stdlib|[Sasl|RestLibs]]]
									    in  %% Line 1063
										case _0 of
										  <{'release',_rec51,_rec52,_rec53,_rec54,_rec55}> when 'true' ->
										      let <_22> =
											  {'release',_rec51,TmpVsn,_rec49,TmpLibs,'unpacked'}
										      in  do  %% Line 1064
											      apply 'new_emulator_make_hybrid_boot'/6
												  (_rec45, _rec46, TmpVsn, _2, _3, _4)
											      do  %% Line 1066
												  apply 'new_emulator_make_hybrid_config'/5
												      (_rec45, _rec46, TmpVsn, _2, _4)
												  %% Line 1068
												  {TmpVsn,_22}
										  ( <_58> when 'true' ->
											( call ( 'erlang'
												 -| ['compiler_generated'] ):( 'error'
															       -| ['compiler_generated'] )
											      (( {'badrecord','release'}
												 -| ['compiler_generated'] ))
											  -| ['compiler_generated'] )
										    -| ['compiler_generated'] )
										end
									-| ['compiler_generated'] )
								      ( <_57> when 'true' ->
									    ( call ( 'erlang'
										     -| ['compiler_generated'] ):( 'error'
														   -| ['compiler_generated'] )
										  (( {'badrecord','release'}
										     -| ['compiler_generated'] ))
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								    end
								    -| ['compiler_generated'] )
							      %% Line 1069
							      <{'error',{'missing',Missing}}> when 'true' ->
								  %% Line 1070
								  call 'erlang':'throw'
								      ({'error',{'missing_base_app',_rec45,Missing}})
							      ( <_24> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_24})
								-| ['compiler_generated'] )
							    end
							-| ['compiler_generated'] )
						      ( <_51> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','release'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      %% Line 1072
					      <{'error',{'missing',Missing}}> when 'true' ->
						  %% Line 1073
						  call 'erlang':'throw'
						      ({'error',{'missing_base_app',_rec46,Missing}})
					      ( <_25> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_25})
						-| ['compiler_generated'] )
					    end
					-| ['compiler_generated'] )
				      ( <_45> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','release'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			( <_40> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','release'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	      ( <_35> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','release'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
      -| [{'function',{'new_emulator_make_tmp_release',5}}] )
'get_base_libs'/1 =
    %% Line 1079
    ( fun (_0) ->
	  %% Line 1080
	  apply 'get_base_libs'/5
	      (( _0
		 -| [{'function',{'get_base_libs',1}}] ), 'undefined', 'undefined', 'undefined', [])
      -| [{'function',{'get_base_libs',1}}] )
'get_base_libs'/5 =
    %% Line 1081
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <[Kernel = {'kernel',_11,_12}|Libs],'undefined',Stdlib,Sasl,Rest> when 'true' ->
		  %% Line 1082
		  apply 'get_base_libs'/5
		      (Libs, Kernel, Stdlib, Sasl, Rest)
	      %% Line 1083
	      <[Stdlib = {'stdlib',_13,_14}|Libs],Kernel,'undefined',Sasl,Rest> when 'true' ->
		  %% Line 1084
		  apply 'get_base_libs'/5
		      (Libs, Kernel, Stdlib, Sasl, Rest)
	      %% Line 1085
	      <[Sasl = {'sasl',_15,_16}|Libs],Kernel,Stdlib,'undefined',Rest> when 'true' ->
		  %% Line 1086
		  apply 'get_base_libs'/5
		      (Libs, Kernel, Stdlib, Sasl, Rest)
	      %% Line 1087
	      <[Lib|Libs],Kernel,Stdlib,Sasl,Rest> when 'true' ->
		  %% Line 1088
		  apply 'get_base_libs'/5
		      (Libs, Kernel, Stdlib, Sasl, [Lib|Rest])
	      %% Line 1089
	      <[],'undefined',_X_Stdlib,_X_Sasl,_X_Rest> when 'true' ->
		  %% Line 1090
		  {'error',{'missing','kernel'}}
	      %% Line 1091
	      <[],_X_Kernel,'undefined',_X_Sasl,_X_Rest> when 'true' ->
		  %% Line 1092
		  {'error',{'missing','stdlib'}}
	      %% Line 1093
	      <[],_X_Kernel,_X_Stdlib,'undefined',_X_Rest> when 'true' ->
		  %% Line 1094
		  {'error',{'missing','sasl'}}
	      %% Line 1095
	      <[],Kernel,Stdlib,Sasl,Rest> when 'true' ->
		  let <_5> =
		      call %% Line 1096
			   'lists':%% Line 1096
				   'reverse'
			  (%% Line 1096
			   Rest)
		  in  %% Line 1096
		      {'ok',{Kernel,Stdlib,Sasl},_5}
	      ( <_10,_9,_8,_7,_6> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_10,_9,_8,_7,_6})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'get_base_libs',5}}] )
      -| [{'function',{'get_base_libs',5}}] )
'new_emulator_make_hybrid_boot'/6 =
    %% Line 1098
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  let <FromBootFile> =
	      call %% Line 1099
		   'filename':%% Line 1099
			      'join'
		  (%% Line 1099
		   [_3|[_0|[[115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]]]]])
	  in  let <ToBootFile> =
		  call %% Line 1100
		       'filename':%% Line 1100
				  'join'
		      (%% Line 1100
		       [_3|[_1|[[115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]]]]])
	      in  let <TmpBootFile> =
		      call %% Line 1101
			   'filename':%% Line 1101
				      'join'
			  (%% Line 1101
			   [_3|[_2|[[115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]]]]])
		  in  do  %% Line 1102
			  apply 'ensure_dir'/2
			      (TmpBootFile, _5)
			  let <Args> =
			      [_1|%% Line 1103
				  [_4|[]]]
			  in  %% Line 1104
			      case apply 'read_file'/2
				       (FromBootFile, _5) of
				<{'ok',FromBoot}> when 'true' ->
				    %% Line 1105
				    case apply 'read_file'/2
					     (ToBootFile, _5) of
				      <{'ok',ToBoot}> when 'true' ->
					  %% Line 1106
					  case call 'systools_make':'make_hybrid_boot'
						   (_2, FromBoot, ToBoot, Args) of
					    %% Line 1107
					    <{'ok',TmpBoot}> when 'true' ->
						%% Line 1108
						apply 'write_file'/3
						    (TmpBootFile, TmpBoot, _5)
					    %% Line 1109
					    <{'error',Reason}> when 'true' ->
						%% Line 1110
						call 'erlang':'throw'
						    ({'error',{'could_not_create_hybrid_boot',Reason}})
					    ( <_12> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_12})
					      -| ['compiler_generated'] )
					  end
				      ( <_11> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_11})
					-| ['compiler_generated'] )
				    end
				( <_10> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_10})
				  -| ['compiler_generated'] )
			      end
      -| [{'function',{'new_emulator_make_hybrid_boot',6}}] )
'new_emulator_make_hybrid_config'/5 =
    %% Line 1113
    ( fun (_0,_1,_2,_3,_4) ->
	  let <FromFile> =
	      call %% Line 1114
		   'filename':%% Line 1114
			      'join'
		  (%% Line 1114
		   [_3|[_0|[[115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]]]]])
	  in  let <ToFile> =
		  call %% Line 1115
		       'filename':%% Line 1115
				  'join'
		      (%% Line 1115
		       [_3|[_1|[[115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]]]]])
	      in  let <TmpFile> =
		      call %% Line 1116
			   'filename':%% Line 1116
				      'join'
			  (%% Line 1116
			   [_3|[_2|[[115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]]]]])
		  in  let <_9> =
			  case %% Line 1119
			       apply 'consult'/2
				   (FromFile, _4) of
			    %% Line 1120
			    <{'ok',[FC|[]]}> when 'true' ->
				%% Line 1121
				FC
			    %% Line 1122
			    <{'error',Error1}> when 'true' ->
				do  %% Line 1123
				    call 'io':'format'
					([87|[97|[114|[110|[105|[110|[103|[58|[32|[126|[119|[32|[99|[97|[110|[110|[111|[116|[32|[114|[101|[97|[100|[32|[126|[116|[112|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1124
																													  ['release_handler'|[FromFile|[Error1|[]]]])
				    %% Line 1125
				    []
			    ( <_8> when 'true' ->
				  %% Line 1119
				  primop 'match_fail'
				      ({'case_clause',_8})
			      -| ['compiler_generated'] )
			  end
		      in  let <_18> =
			      case %% Line 1129
				   apply 'consult'/2
				       (ToFile, _4) of
				%% Line 1130
				<{'ok',[ToConfig|[]]}> when 'true' ->
				    %% Line 1131
				    ( letrec
					  'lc$^0'/1 =
					      fun (_13) ->
						  case _13 of
						    <[App|_12]> when 'true' ->
							let <_15> =
							    call 'lists':'keyfind'
								(App, 1, ToConfig)
							in  let <_16> =
								apply 'lc$^0'/1
								    (_12)
							    in  ( [_15|_16]
								  -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_14> when 'true' ->
							  primop 'match_fail'
							      ({'function_clause',_14})
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^0'/1
					      (['kernel'|['stdlib'|['sasl']]])
				      -| ['list_comprehension'] )
				%% Line 1132
				<{'error',Error2}> when 'true' ->
				    do  %% Line 1133
					call 'io':'format'
					    ([87|[97|[114|[110|[105|[110|[103|[58|[32|[126|[119|[32|[99|[97|[110|[110|[111|[116|[32|[114|[101|[97|[100|[32|[126|[116|[112|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1134
																													      ['release_handler'|[ToFile|[Error2|[]]]])
					%% Line 1135
					['false'|['false'|['false']]]
				( <_17> when 'true' ->
				      %% Line 1129
				      primop 'match_fail'
					  ({'case_clause',_17})
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 1128
			      case _18 of
				<[Kernel|[Stdlib|[Sasl|[]]]]> when 'true' ->
				    let <Config1> =
					apply %% Line 1138
					      'replace_config'/3
					    (%% Line 1138
					     'kernel', _9, %% Line 1138
							   Kernel)
				    in  let <Config2> =
					    apply %% Line 1139
						  'replace_config'/3
						(%% Line 1139
						 'stdlib', %% Line 1139
							   Config1, %% Line 1139
								    Stdlib)
					in  let <Config3> =
						apply %% Line 1140
						      'replace_config'/3
						    (%% Line 1140
						     'sasl', %% Line 1140
							     Config2, %% Line 1140
								      Sasl)
					    in  let <_23> =
						    call %% Line 1143
							 'epp':%% Line 1143
							       'encoding_to_string'
							(%% Line 1143
							 'utf8')
						in  let <ConfigStr> =
							call %% Line 1142
							     'io_lib':%% Line 1142
								      'format'
							    (%% Line 1142
							     [37|[37|[32|[126|[115|[126|[110|[126|[116|[112|[46|[126|[110]]]]]]]]]]]]], %% Line 1143
																	[_23|[Config3|[]]])
						    in  let <_25> =
							    call %% Line 1144
								 'unicode':%% Line 1144
									   'characters_to_binary'
								(%% Line 1144
								 ConfigStr)
							in  %% Line 1144
							    apply 'write_file'/3
								(TmpFile, _25, _4)
				( <_19> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_19})
				  -| ['compiler_generated'] )
			      end
      -| [{'function',{'new_emulator_make_hybrid_config',5}}] )
'replace_config'/3 =
    %% Line 1152
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <App,Config,'false'> when 'true' ->
		  %% Line 1153
		  call 'lists':'keydelete'
		      (App, 1, Config)
	      %% Line 1154
	      <App,Config,AppConfig> when 'true' ->
		  %% Line 1155
		  call 'lists':'keystore'
		      (App, 1, Config, AppConfig)
	    end
	    -| [{'function',{'replace_config',3}}] )
      -| [{'function',{'replace_config',3}}] )
'new_emulator_rm_tmp_release'/6 =
    %% Line 1158
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  ( case <_0,_1,_2,_3,_4,_5> of
	      <TmpVsn = [95|[95|[110|[101|[119|[95|[101|[109|[117|[108|[97|[116|[111|[114|[95|[95|_14]]]]]]]]]]]]]]]],EVsn,NewVsn,%% Line 1159
																  RelDir,%% Line 1159
																	 Releases,%% Line 1159
																		  Masters> when 'true' ->
		  do  %% Line 1160
		      case call 'os':'type'
			       () of
			%% Line 1161
			<{'win32','nt'}> when 'true' ->
			    %% Line 1162
			    apply 'rename_tmp_service'/3
				(EVsn, TmpVsn, NewVsn)
			%% Line 1163
			<_15> when 'true' ->
			    'ok'
		      end
		      let <_7> =
			  call %% Line 1166
			       'filename':%% Line 1166
					  'join'
			      (%% Line 1166
			       RelDir, %% Line 1166
				       TmpVsn)
		      in  do  %% Line 1166
			      apply 'remove_dir'/2
				  (_7, Masters)
			      %% Line 1167
			      call 'lists':'keydelete'
				  (TmpVsn, 3, Releases)
	      %% Line 1168
	      <_16,_17,_18,_19,Releases,_20> when 'true' ->
		  %% Line 1169
		  Releases
	    end
	    -| [{'function',{'new_emulator_rm_tmp_release',6}}] )
      -| [{'function',{'new_emulator_rm_tmp_release',6}}] )
'rename_tmp_service'/3 =
    %% Line 1172
    ( fun (_0,_1,_2) ->
	  let <_4> =
	      call %% Line 1173
		   'erlang':%% Line 1173
			    'node'
		  ()
	  in  let <_5> =
		  call %% Line 1173
		       'erlang':%% Line 1173
				'atom_to_list'
		      (_4)
	      in  let <_6> =
		      call %% Line 1173
			   'string':%% Line 1173
				    'lexemes'
			  (_5, %% Line 1173
			       [64])
		  in  let <_7> =
			  call %% Line 1173
			       'erlang':%% Line 1173
					'hd'
			      (_6)
		      in  let <_3> =
			      [95|_1]
			  in  let <FromName> =
				  call %% Line 1173
				       'erlang':%% Line 1173
						'++'
				      (_7, _3)
			      in  let <_10> =
				      call %% Line 1174
					   'erlang':%% Line 1174
						    'node'
					  ()
				  in  let <_11> =
					  call %% Line 1174
					       'erlang':%% Line 1174
							'atom_to_list'
					      (_10)
				      in  let <_12> =
					      call %% Line 1174
						   'string':%% Line 1174
							    'lexemes'
						  (_11, %% Line 1174
							[64])
					  in  let <_13> =
						  call %% Line 1174
						       'erlang':%% Line 1174
								'hd'
						      (_12)
					      in  let <_9> =
						      [95|_2]
						  in  let <ToName> =
							  call %% Line 1174
							       'erlang':%% Line 1174
									'++'
							      (_13, _9)
						      in  do  %% Line 1175
							      case call 'erlsrv':'get_service'
								       (_0, ToName) of
								%% Line 1176
								<{'error',_X_Error}> when 'true' ->
								    'ok'
								%% Line 1178
								<_X_Data> when 'true' ->
								    %% Line 1179
								    case call 'erlsrv':'remove_service'
									     (ToName) of
								      <{'ok',_20}> when 'true' ->
									  'ok'
								      ( <_15> when 'true' ->
									    primop 'match_fail'
										({'badmatch',_15})
									-| ['compiler_generated'] )
								    end
							      end
							      %% Line 1182
							      apply 'rename_service'/3
								  (_0, FromName, ToName)
      -| [{'function',{'rename_tmp_service',3}}] )
'rename_service'/3 =
    %% Line 1186
    ( fun (_0,_1,_2) ->
	  %% Line 1187
	  case call 'erlsrv':'rename_service'
		   (_0, _1, _2) of
	    %% Line 1188
	    <{'ok',_8}> when 'true' ->
		%% Line 1189
		case call 'erlsrv':'get_service'
			 (_0, _2) of
		  %% Line 1190
		  <_@r0 = {'error',Error1}> when 'true' ->
		      %% Line 1191
		      call 'erlang':'throw'
			  (_@r0)
		  %% Line 1192
		  <_X_Data2> when 'true' ->
		      %% Line 1193
		      'ok'
		end
	    %% Line 1195
	    <Error2> when 'true' ->
		%% Line 1196
		call 'erlang':'throw'
		    ({'error',{'service_rename_failed',Error2}})
	  end
      -| [{'function',{'rename_service',3}}] )
'do_make_services_permanent'/4 =
    %% Line 1205
    ( fun (_0,_1,_2,_3) ->
	  let <_5> =
	      call %% Line 1206
		   'erlang':%% Line 1206
			    'node'
		  ()
	  in  let <_6> =
		  call %% Line 1206
		       'erlang':%% Line 1206
				'atom_to_list'
		      (_5)
	      in  let <_7> =
		      call %% Line 1206
			   'string':%% Line 1206
				    'lexemes'
			  (_6, %% Line 1206
			       [64])
		  in  let <_8> =
			  call %% Line 1206
			       'erlang':%% Line 1206
					'hd'
			      (_7)
		      in  let <_4> =
			      [95|_0]
			  in  let <PermName> =
				  call %% Line 1207
				       'erlang':%% Line 1207
						'++'
				      (_8, _4)
			      in  let <_11> =
				      call %% Line 1208
					   'erlang':%% Line 1208
						    'node'
					  ()
				  in  let <_12> =
					  call %% Line 1208
					       'erlang':%% Line 1208
							'atom_to_list'
					      (_11)
				      in  let <_13> =
					      call %% Line 1208
						   'string':%% Line 1208
							    'lexemes'
						  (_12, %% Line 1208
							[64])
					  in  let <_14> =
						  call %% Line 1208
						       'erlang':%% Line 1208
								'hd'
						      (_13)
					      in  let <_10> =
						      [95|_1]
						  in  let <Name> =
							  call %% Line 1209
							       'erlang':%% Line 1209
									'++'
							      (_14, _10)
						      in  %% Line 1210
							  case call 'erlsrv':'get_service'
								   (_3, Name) of
							    %% Line 1211
							    <{'error',_X_Error}> when 'true' ->
								let <_16> =
								    call %% Line 1214
									 'os':%% Line 1214
									      'getenv'
									(%% Line 1214
									 [69|[82|[76|[83|[82|[86|[95|[83|[69|[82|[86|[73|[67|[69|[95|[78|[65|[77|[69]]]]]]]]]]]]]]]]]]])
								in  %% Line 1214
								    case call 'erlang':'=='
									     (_16, PermName) of
								      %% Line 1215
								      <'true'> when 'true' ->
									  do  %% Line 1216
									      apply 'rename_service'/3
										  (_3, PermName, Name)
									      do  %% Line 1221
										  call 'os':'putenv'
										      ([69|[82|[76|[83|[82|[86|[95|[83|[69|[82|[86|[73|[67|[69|[95|[78|[65|[77|[69]]]]]]]]]]]]]]]]]]], Name)
										  %% Line 1225
										  call 'heart':'cycle'
										      ()
								      %% Line 1226
								      <'false'> when 'true' ->
									  %% Line 1227
									  call 'erlang':'throw'
									      ({'error','service_name_missmatch'})
								    end
							    %% Line 1229
							    <Data> when 'true' ->
								let <UpdData> =
								    call %% Line 1230
									 'erlsrv':%% Line 1230
										  'new_service'
									(%% Line 1230
									 Name, %% Line 1230
									       Data, %% Line 1230
										     [])
								in  %% Line 1231
								    case call 'erlsrv':'store_service'
									     (_3, UpdData) of
								      %% Line 1232
								      <'ok'> when 'true' ->
									  %% Line 1233
									  case call 'erlsrv':'disable_service'
										   (_2, PermName) of
									    <{'ok',_29}> when 'true' ->
										%% Line 1234
										case call 'erlsrv':'enable_service'
											 (_3, Name) of
										  <{'ok',_30}> when 'true' ->
										      %% Line 1235
										      case call 'erlsrv':'remove_service'
											       (PermName) of
											<{'ok',_31}> when 'true' ->
											    do  %% Line 1237
												call 'os':'putenv'
												    ([69|[82|[76|[83|[82|[86|[95|[83|[69|[82|[86|[73|[67|[69|[95|[78|[65|[77|[69]]]]]]]]]]]]]]]]]]], Name)
												let <_32> =
												    call %% Line 1238
													 'heart':%% Line 1238
														 'cycle'
													()
												in  %% Line 1238
												    case _32 of
												      <'ok'> when 'true' ->
													  ( _32
													    -| ['compiler_generated'] )
												      ( <_22> when 'true' ->
													    primop 'match_fail'
														({'badmatch',_22})
													-| ['compiler_generated'] )
												    end
											( <_21> when 'true' ->
											      primop 'match_fail'
												  ({'badmatch',_21})
											  -| ['compiler_generated'] )
										      end
										  ( <_20> when 'true' ->
											primop 'match_fail'
											    ({'badmatch',_20})
										    -| ['compiler_generated'] )
										end
									    ( <_19> when 'true' ->
										  primop 'match_fail'
										      ({'badmatch',_19})
									      -| ['compiler_generated'] )
									  end
								      %% Line 1239
								      <Error4> when 'true' ->
									  %% Line 1240
									  call 'erlang':'throw'
									      (Error4)
								    end
							  end
      -| [{'function',{'do_make_services_permanent',4}}] )
'do_make_permanent'/2 =
    %% Line 1244
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <{'state',%% Line 1245
			Unpurged,_30,%% Line 1245
				     RelDir,Releases,_31,_32,%% Line 1246
							     Masters,_33,%% Line 1247
									 Static,_34},%% Line 1248
										     Vsn> when 'true' ->
		  %% Line 1249
		  case call 'lists':'keysearch'
			   (Vsn, 3, Releases) of
		    %% Line 1250
		    <{'value',{'release',_35,_36,EVsn,_37,Status}}>
			when %% Line 1251
			  try
			      let <_2> =
				  call 'erlang':'/='
				      (Status, 'unpacked')
			      in  let <_3> =
				      call 'erlang':'/='
					  (Status, 'old')
				  in  let <_4> =
					  call 'erlang':'/='
					      (Status, 'permanent')
				      in  let <_5> =
					      call 'erlang':'and'
						  (_3, _4)
					  in  call 'erlang':'and'
						  (_2, _5)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			let <Dir> =
			    call %% Line 1252
				 'filename':%% Line 1252
					    'join'
				(%% Line 1252
				 [RelDir|[Vsn|[]]])
			in  let <_8> =
				catch
				    let <_7> =
					call %% Line 1254
					     'filename':%% Line 1254
							'join'
					    (%% Line 1254
					     Dir, %% Line 1254
						  [115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]])
				    in  %% Line 1254
					apply 'check_file'/3
					    (_7, %% Line 1255
						 'regular', %% Line 1255
							    Masters)
			    in  let <_10> =
				    case _8 of
				      %% Line 1256
				      <'ok'> when 'true' ->
					  call 'filename':'join'
					      (Dir, [115|[121|[115]]])
				      %% Line 1257
				      <_38> when 'true' ->
					  'false'
				    end
				in  let <Boot> =
					call %% Line 1259
					     'filename':%% Line 1259
							'join'
					    (%% Line 1259
					     Dir, %% Line 1259
						  [115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]])
				    in  do  %% Line 1260
					    apply 'check_file'/3
						(Boot, 'regular', Masters)
					    do  %% Line 1261
						apply 'set_permanent_files'/5
						    (RelDir, EVsn, Vsn, Masters, Static)
						let <NewReleases> =
						    apply %% Line 1262
							  'set_status'/3
							(%% Line 1262
							 Vsn, %% Line 1262
							      'permanent', %% Line 1262
									   Releases)
						in  do  %% Line 1263
							apply 'write_releases'/3
							    (RelDir, NewReleases, Masters)
							do  %% Line 1264
							    case call 'os':'type'
								     () of
							      %% Line 1265
							      <{'win32','nt'}> when 'true' ->
								  %% Line 1266
								  case %% Line 1267
								       call 'lists':'keysearch'
									   ('permanent', 6, %% Line 1268
											    Releases) of
								    <{'value',PermanentRelease}> when 'true' ->
									%% Line 1269
									( case PermanentRelease of
									    ( <( {'release',_39,_rec56,_40,_41,_42}
										 -| ['compiler_generated'] )> when 'true' ->
										  %% Line 1270
										  ( case PermanentRelease of
										      ( <( {'release',_44,_45,_rec57,_46,_47}
											   -| ['compiler_generated'] )> when 'true' ->
											    let <_21> =
												catch
												    %% Line 1271
												    apply 'do_make_services_permanent'/4
													(_rec56, %% Line 1272
														 Vsn, _rec57, %% Line 1274
															      EVsn)
											    in  %% Line 1271
												case _21 of
												  %% Line 1275
												  <{'error',Reason}> when 'true' ->
												      %% Line 1276
												      call 'erlang':'throw'
													  ({'error',{'service_update_failed',Reason}})
												  %% Line 1277
												  <_49> when 'true' ->
												      'ok'
												end
											-| ['compiler_generated'] )
										      ( <_48> when 'true' ->
											    ( call ( 'erlang'
												     -| ['compiler_generated'] ):( 'error'
																   -| ['compiler_generated'] )
												  (( {'badrecord','release'}
												     -| ['compiler_generated'] ))
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										    end
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									    ( <_43> when 'true' ->
										  ( call ( 'erlang'
											   -| ['compiler_generated'] ):( 'error'
															 -| ['compiler_generated'] )
											(( {'badrecord','release'}
											   -| ['compiler_generated'] ))
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									  end
									  -| ['compiler_generated'] )
								    ( <_14> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_14})
								      -| ['compiler_generated'] )
								  end
							      %% Line 1280
							      <_50> when 'true' ->
								  'ok'
							    end
							    let <_24> =
								call %% Line 1283
								     'filename':%% Line 1283
										'join'
								    (%% Line 1283
								     Dir, %% Line 1283
									  [115|[116|[97|[114|[116]]]]])
							    in  %% Line 1283
								case call 'init':'make_permanent'
									 (_24, _10) of
								  <'ok'> when 'true' ->
								      let <_26> =
									  apply %% Line 1284
										'brutal_purge'/1
									      (%% Line 1284
									       Unpurged)
								      in  %% Line 1284
									  {'ok',NewReleases,_26}
								  ( <_25> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_25})
								    -| ['compiler_generated'] )
								end
		    %% Line 1285
		    <{'value',{'release',_51,_52,_53,_54,'permanent'}}> when 'true' ->
			%% Line 1286
			{'ok',Releases,Unpurged}
		    %% Line 1287
		    <{'value',{'release',_55,_56,_57,_58,Status}}> when 'true' ->
			%% Line 1288
			{'error',{'bad_status',Status}}
		    %% Line 1289
		    <'false'> when 'true' ->
			%% Line 1290
			{'error',{'no_such_release',Vsn}}
		    ( <_27> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_27})
		      -| ['compiler_generated'] )
		  end
	      ( <_29,_28> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_29,_28})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'do_make_permanent',2}}] )
      -| [{'function',{'do_make_permanent',2}}] )
'do_back_service'/4 =
    %% Line 1294
    ( fun (_0,_1,_2,_3) ->
	  let <_4> =
	      call %% Line 1295
		   'erlang':%% Line 1295
			    'node'
		  ()
	  in  let <_5> =
		  call %% Line 1295
		       'erlang':%% Line 1295
				'atom_to_list'
		      (_4)
	      in  let <_6> =
		      call %% Line 1295
			   'string':%% Line 1295
				    'lexemes'
			  (_5, %% Line 1295
			       [64])
		  in  let <NN> =
			  call %% Line 1295
			       'erlang':%% Line 1295
					'hd'
			      (_6)
		      in  let <_8> =
			      [95|_0]
			  in  let <OldName> =
				  call %% Line 1296
				       'erlang':%% Line 1296
						'++'
				      (%% Line 1296
				       NN, _8)
			      in  let <_10> =
				      [95|_1]
				  in  let <CurrentName> =
					  call %% Line 1297
					       'erlang':%% Line 1297
							'++'
					      (%% Line 1297
					       NN, _10)
				      in  let <_13> =
					      case %% Line 1298
						   call 'erlsrv':'get_service'
						       (_3, CurrentName) of
						%% Line 1299
						<_@r0 = {'error',Error}> when 'true' ->
						    %% Line 1300
						    call 'erlang':'throw'
							(_@r0)
						%% Line 1301
						<Data> when 'true' ->
						    %% Line 1302
						    call 'erlsrv':'new_service'
							(OldName, Data, [])
					      end
					  in  %% Line 1304
					      case ( call ( 'erlsrv'
							    -| ['result_not_wanted'] ):( 'store_service'
											 -| ['result_not_wanted'] )
							 (_2, _13)
						     -| ['result_not_wanted'] ) of
						%% Line 1305
						<'ok'> when 'true' ->
						    %% Line 1306
						    case ( call ( 'erlsrv'
								  -| ['result_not_wanted'] ):( 'disable_service'
											       -| ['result_not_wanted'] )
							       (_3, CurrentName)
							   -| ['result_not_wanted'] ) of
						      <( {'ok',_35}
							 -| ['result_not_wanted'] )> when 'true' ->
							  %% Line 1307
							  case ( call ( 'erlsrv'
									-| ['result_not_wanted'] ):( 'enable_service'
												     -| ['result_not_wanted'] )
								     (_2, OldName)
								 -| ['result_not_wanted'] ) of
							    <( {'ok',_37}
							       -| ['result_not_wanted'] )> when 'true' ->
								let <_20> =
								    call %% Line 1311
									 'erlsrv':%% Line 1311
										  'erlsrv'
									(_2)
								in  let <OldErlSrv> =
									call %% Line 1311
									     'filename':%% Line 1311
											'nativename'
									    (_20)
								    in  let <_22> =
									    call %% Line 1312
										 'erlsrv':%% Line 1312
											  'erlsrv'
										(_3)
									in  let <CurrentErlSrv> =
										call %% Line 1312
										     'filename':%% Line 1312
												'nativename'
										    (_22)
									    in  let <_24> =
										    call %% Line 1314
											 'erlang':%% Line 1314
												  '++'
											(%% Line 1314
											 [32|[115|[116|[97|[114|[116|[32]]]]]]], %% Line 1314
																 OldName)
										in  let <_25> =
											call %% Line 1314
											     'erlang':%% Line 1314
												      '++'
											    (%% Line 1314
											     OldErlSrv, _24)
										    in  let <_26> =
											    [32|%% Line 1314
												[38|[32|_25]]]
											in  let <_27> =
												call %% Line 1313
												     'erlang':%% Line 1313
													      '++'
												    (%% Line 1313
												     CurrentName, _26)
											    in  let <_28> =
												    call %% Line 1313
													 'erlang':%% Line 1313
														  '++'
													(%% Line 1313
													 [32|[114|[101|[109|[111|[118|[101|[32]]]]]]]], _27)
												in  let <_29> =
													call %% Line 1313
													     'erlang':%% Line 1313
														      '++'
													    (%% Line 1313
													     CurrentErlSrv, _28)
												    in  %% Line 1313
													case call 'heart':'set_cmd'
														 (_29) of
													  %% Line 1315
													  <'ok'> when 'true' ->
													      %% Line 1316
													      'ok'
													  %% Line 1317
													  <Error3> when 'true' ->
													      %% Line 1318
													      call 'erlang':'throw'
														  ({'error',{'heart:set_cmd() error',Error3}})
													end
							    ( <_16> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_16})
							      -| ['compiler_generated'] )
							  end
						      ( <_15> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_15})
							-| ['compiler_generated'] )
						    end
						%% Line 1308
						<Error2> when 'true' ->
						    %% Line 1309
						    ( call ( 'erlang'
							     -| ['result_not_wanted'] ):( 'throw'
											  -| ['result_not_wanted'] )
							  (Error2)
						      -| ['result_not_wanted'] )
					      end
      -| [{'function',{'do_back_service',4}}] )
'do_reboot_old_release'/2 =
    %% Line 1321
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <{'state',_15,_16,%% Line 1322
				RelDir,Releases,_17,_18,%% Line 1322
							Masters,_19,%% Line 1323
								    Static,_20},%% Line 1324
										Vsn> when 'true' ->
		  %% Line 1325
		  case call 'lists':'keysearch'
			   (Vsn, 3, Releases) of
		    %% Line 1326
		    <{'value',{'release',_21,_22,EVsn,_23,'old'}}> when 'true' ->
			let <_4> =
			    case %% Line 1327
				 call 'os':'type'
				     () of
			      %% Line 1328
			      <{'win32','nt'}> when 'true' ->
				  %% Line 1330
				  case call 'lists':'keysearch'
					   ('permanent', %% Line 1331
							 6, %% Line 1332
							    Releases) of
				    %% Line 1333
				    <'false'> when 'true' ->
					%% Line 1334
					call 'lists':'keysearch'
					    ('current', %% Line 1335
							6, %% Line 1336
							   Releases)
				    %% Line 1337
				    <{'value',CR}> when 'true' ->
					%% Line 1338
					CR
				    ( <_2> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_2})
				      -| ['compiler_generated'] )
				  end
			      %% Line 1340
			      <_24> when 'true' ->
				  %% Line 1341
				  'false'
			    end
			in  do  %% Line 1343
				apply 'set_permanent_files'/5
				    (RelDir, EVsn, Vsn, Masters, Static)
				let <NewReleases> =
				    apply %% Line 1344
					  'set_status'/3
					(%% Line 1344
					 Vsn, %% Line 1344
					      'permanent', %% Line 1344
							   Releases)
				in  do  %% Line 1345
					apply 'write_releases'/3
					    (RelDir, NewReleases, Masters)
					do  %% Line 1346
					    case call 'os':'type'
						     () of
					      %% Line 1347
					      <{'win32','nt'}> when 'true' ->
						  %% Line 1350
						  ( case _4 of
						      ( <( {'release',_25,_rec58,_26,_27,_28}
							   -| ['compiler_generated'] )> when 'true' ->
							    %% Line 1351
							    ( case _4 of
								( <( {'release',_30,_31,_rec59,_32,_33}
								     -| ['compiler_generated'] )> when 'true' ->
								      apply 'do_back_service'/4
									  (Vsn, _rec58, EVsn, _rec59)
								  -| ['compiler_generated'] )
								( <_34> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','release'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						      ( <_29> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','release'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      %% Line 1352
					      <_35> when 'true' ->
						  'ok'
					    end
					    %% Line 1355
					    'ok'
		    %% Line 1356
		    <{'value',{'release',_36,_37,_38,_39,Status}}> when 'true' ->
			%% Line 1357
			{'error',{'bad_status',Status}}
		    %% Line 1358
		    <'false'> when 'true' ->
			%% Line 1359
			{'error',{'no_such_release',Vsn}}
		    ( <_12> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_12})
		      -| ['compiler_generated'] )
		  end
	      ( <_14,_13> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_14,_13})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'do_reboot_old_release',2}}] )
      -| [{'function',{'do_reboot_old_release',2}}] )
'set_permanent_files'/5 =
    %% Line 1367
    ( fun (_0,_1,_2,_3,_4) ->
	  ( case <_0,_1,_2,_3,_4> of
	      <RelDir,EVsn,Vsn,'false',_17> when 'true' ->
		  let <_7> =
		      call %% Line 1368
			   'filename':%% Line 1368
				      'join'
			  (%% Line 1368
			   [RelDir|[[115|[116|[97|[114|[116|[95|[101|[114|[108|[46|[100|[97|[116|[97]]]]]]]]]]]]]]]])
		  in  let <_5> =
			  [32|%% Line 1369
			      Vsn]
		      in  let <_6> =
			      call %% Line 1369
				   'erlang':%% Line 1369
					    '++'
				  (%% Line 1369
				   EVsn, _5)
			  in  %% Line 1368
			      apply 'write_start'/3
				  (_7, _6, %% Line 1370
					   'false')
	      %% Line 1371
	      <RelDir,EVsn,Vsn,Masters,'false'> when 'true' ->
		  let <_10> =
		      call %% Line 1372
			   'filename':%% Line 1372
				      'join'
			  (%% Line 1372
			   [RelDir|[[115|[116|[97|[114|[116|[95|[101|[114|[108|[46|[100|[97|[116|[97]]]]]]]]]]]]]]]])
		  in  let <_8> =
			  [32|%% Line 1373
			      Vsn]
		      in  let <_9> =
			      call %% Line 1373
				   'erlang':%% Line 1373
					    '++'
				  (%% Line 1373
				   EVsn, _8)
			  in  %% Line 1372
			      apply 'write_start'/3
				  (_10, _9, %% Line 1374
					    Masters)
	      %% Line 1375
	      <RelDir,_X_EVsn,Vsn,Masters,_X_Static> when 'true' ->
		  let <VsnDir> =
		      call %% Line 1376
			   'filename':%% Line 1376
				      'join'
			  (%% Line 1376
			   [RelDir|[Vsn|[]]])
		  in  %% Line 1377
		      apply 'set_static_files'/3
			  (VsnDir, RelDir, Masters)
	    end
	    -| [{'function',{'set_permanent_files',5}}] )
      -| [{'function',{'set_permanent_files',5}}] )
'do_remove_service'/1 =
    %% Line 1380
    ( fun (_0) ->
	  let <_2> =
	      call %% Line 1384
		   'erlang':%% Line 1384
			    'node'
		  ()
	  in  let <_3> =
		  call %% Line 1384
		       'erlang':%% Line 1384
				'atom_to_list'
		      (_2)
	      in  let <_4> =
		      call %% Line 1384
			   'string':%% Line 1384
				    'lexemes'
			  (_3, %% Line 1384
			       [64])
		  in  let <_5> =
			  call %% Line 1384
			       'erlang':%% Line 1384
					'hd'
			      (_4)
		      in  let <_1> =
			      [95|( _0
				    -| [{'function',{'do_remove_service',1}}] )]
			  in  let <ServiceName> =
				  call %% Line 1385
				       'erlang':%% Line 1385
						'++'
				      (_5, _1)
			      in  %% Line 1386
				  case call 'erlsrv':'get_service'
					   (ServiceName) of
				    %% Line 1387
				    <{'error',_X_Error}> when 'true' ->
					%% Line 1388
					'ok'
				    %% Line 1389
				    <_X_Data> when 'true' ->
					%% Line 1390
					case call 'erlsrv':'remove_service'
						 (ServiceName) of
					  <{'ok',_10}> when 'true' ->
					      %% Line 1391
					      'ok'
					  ( <_7> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_7})
					    -| ['compiler_generated'] )
					end
				  end
      -| [{'function',{'do_remove_service',1}}] )
'do_remove_release'/4 =
    %% Line 1394
    ( fun (_0,_1,_2,_3) ->
	  %% Line 1396
	  case call 'lists':'keysearch'
		   (_2, 3, _3) of
	    %% Line 1397
	    <{'value',{'release',_24,_25,_26,_27,'permanent'}}> when 'true' ->
		%% Line 1398
		{'error',{'permanent',_2}}
	    %% Line 1399
	    <{'value',{'release',_28,_29,EVsn,RemoveLibs,_30}}>
		when call 'erlang':'=:='
		      (_29,
		       _2) ->
		do  %% Line 1400
		    case call 'os':'type'
			     () of
		      %% Line 1401
		      <{'win32','nt'}> when 'true' ->
			  %% Line 1402
			  apply 'do_remove_service'/1
			      (_2)
		      %% Line 1403
		      <_31> when 'true' ->
			  'ok'
		    end
		    let <NewReleases> =
			call %% Line 1407
			     'lists':%% Line 1407
				     'keydelete'
			    (_2, %% Line 1407
				 3, _3)
		    in  let <_10> =
			    fun (_7,_6) ->
				%% Line 1409
				case <_7,_6> of
				  <{'release',_32,_33,_34,Libs,_35},Remove> when 'true' ->
				      %% Line 1410
				      apply 'diff_dir'/2
					  (Remove, Libs)
				  ( <_9,_8> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',_9,_8})
				    -| ['compiler_generated'] )
				end
			in  let <RemoveThese> =
				call %% Line 1409
				     'lists':%% Line 1409
					     'foldl'
				    (_10, %% Line 1411
					  RemoveLibs, %% Line 1411
						      NewReleases)
			    in  let <_14> =
				    fun (_12) ->
					%% Line 1412
					case _12 of
					  <{_X_Lib,_X_LVsn,LDir}> when 'true' ->
					      %% Line 1413
					      apply 'remove_file'/1
						  (LDir)
					  ( <_13> when 'true' ->
						primop 'match_fail'
						    ({'function_clause',_13})
					    -| ['compiler_generated'] )
					end
				in  do  %% Line 1412
					call 'lists':'foreach'
					    (_14, %% Line 1414
						  RemoveThese)
					let <_15> =
					    call %% Line 1415
						 'filename':%% Line 1415
							    'join'
						(%% Line 1415
						 [_1|[_2|[]]])
					in  do  %% Line 1415
						apply 'remove_file'/1
						    (_15)
						do  %% Line 1416
						    case call 'lists':'keysearch'
							     (EVsn, 4, NewReleases) of
						      %% Line 1417
						      <{'value',_36}> when 'true' ->
							  'ok'
						      %% Line 1418
						      <'false'> when 'true' ->
							  let <_16> =
							      call %% Line 1419
								   'erlang':%% Line 1419
									    '++'
								  (%% Line 1419
								   [101|[114|[116|[115|[45]]]]], %% Line 1419
												 EVsn)
							  in  let <_17> =
								  call %% Line 1419
								       'filename':%% Line 1419
										  'join'
								      (_0, _16)
							      in  %% Line 1419
								  apply 'remove_file'/1
								      (_17)
						      ( <_18> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_18})
							-| ['compiler_generated'] )
						    end
						    do  %% Line 1421
							apply 'write_releases'/3
							    (_1, NewReleases, 'false')
							%% Line 1422
							{'ok',NewReleases}
	    %% Line 1423
	    <'false'> when 'true' ->
		%% Line 1424
		{'error',{'no_such_release',_2}}
	    ( <_19> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_19})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'do_remove_release',4}}] )
'do_set_unpacked'/6 =
    %% Line 1427
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  let <Release> =
	      apply %% Line 1428
		    'check_rel'/4
		  (_0, _2, _3, _5)
	  in  %% Line 1429
	      case Release of
		<{'release',_20,Vsn,_21,_22,_23}> when 'true' ->
		    do  %% Line 1430
			case call 'lists':'keysearch'
				 (Vsn, 3, _4) of
			  %% Line 1431
			  <{'value',_24}> when 'true' ->
			      call 'erlang':'throw'
				  ({'error',{'existing_release',Vsn}})
			  %% Line 1432
			  <'false'> when 'true' ->
			      'ok'
			  ( <_8> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_8})
			    -| ['compiler_generated'] )
			end
			%% Line 1434
			case Release of
			  <{'release',_25,_26,_27,_28,_29}> when 'true' ->
			      let <_11> =
				  call 'erlang':'setelement'
				      (6, Release, 'unpacked')
			      in  let <NewReleases> =
				      [_11|_4]
				  in  let <VsnDir> =
					  call %% Line 1435
					       'filename':%% Line 1435
							  'join'
					      (%% Line 1435
					       [_1|[Vsn|[]]])
				      in  do  %% Line 1436
					      apply 'make_dir'/2
						  (VsnDir, _5)
					      do  %% Line 1437
						  apply 'write_releases'/3
						      (_1, NewReleases, _5)
						  %% Line 1438
						  {'ok',NewReleases,Vsn}
			  ( <_30> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','release'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_7})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'do_set_unpacked',6}}] )
'do_set_removed'/4 =
    %% Line 1440
    ( fun (_0,_1,_2,_3) ->
	  %% Line 1441
	  case call 'lists':'keysearch'
		   (_1, 3, _2) of
	    %% Line 1442
	    <{'value',{'release',_10,_11,_12,_13,'permanent'}}> when 'true' ->
		%% Line 1443
		{'error',{'permanent',_1}}
	    %% Line 1444
	    <{'value',_14}> when 'true' ->
		let <NewReleases> =
		    call %% Line 1445
			 'lists':%% Line 1445
				 'keydelete'
			(_1, %% Line 1445
			     3, _2)
		in  do  %% Line 1446
			apply 'write_releases'/3
			    (_0, NewReleases, _3)
			%% Line 1447
			{'ok',NewReleases}
	    %% Line 1448
	    <'false'> when 'true' ->
		%% Line 1449
		{'error',{'no_such_release',_1}}
	    ( <_5> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_5})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'do_set_removed',4}}] )
'get_rh_script'/4 =
    %% Line 1471
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <{'release',_9,[95|[95|[110|[101|[119|[95|[101|[109|[117|[108|[97|[116|[111|[114|[95|[95|CurrentVsn]]]]]]]]]]]]]]]],_10,_11,_12},%% Line 1472
																	       {'release',_13,ToVsn,_14,_15,_16},%% Line 1473
																						 RelDir,%% Line 1474
																							Masters> when 'true' ->
		  %% Line 1475
		  case %% Line 1476
		       apply 'do_get_rh_script'/4
			   (CurrentVsn, ToVsn, RelDir, Masters) of
		    <{'ok',{Vsn,Descr,['restart_new_emulator'|Script]}}> when 'true' ->
			%% Line 1477
			{'ok',{Vsn,Descr,Script}}
		    ( <_4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4})
		      -| ['compiler_generated'] )
		  end
	      %% Line 1478
	      <{'release',_17,CurrentVsn,_18,_19,_20},%% Line 1479
						      {'release',_21,ToVsn,_22,_23,_24},%% Line 1480
											RelDir,%% Line 1481
											       Masters> when 'true' ->
		  %% Line 1482
		  apply 'do_get_rh_script'/4
		      (CurrentVsn, ToVsn, RelDir, Masters)
	      ( <_8,_7,_6,_5> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_8,_7,_6,_5})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'get_rh_script',4}}] )
      -| [{'function',{'get_rh_script',4}}] )
'do_get_rh_script'/4 =
    %% Line 1484
    ( fun (_0,_1,_2,_3) ->
	  let <Relup> =
	      call %% Line 1485
		   'filename':%% Line 1485
			      'join'
		  (%% Line 1485
		   [_2|[_1|[[114|[101|[108|[117|[112]]]]]]]])
	  in  %% Line 1486
	      case apply 'try_upgrade'/4
		       (_1, _0, Relup, _3) of
		%% Line 1487
		<_@r0 = {'ok',RhScript}> when 'true' ->
		    %% Line 1488
		    _@r0
		%% Line 1489
		<_12> when 'true' ->
		    let <Relup2> =
			call %% Line 1490
			     'filename':%% Line 1490
					'join'
			    (%% Line 1490
			     [_2|[_0|[[114|[101|[108|[117|[112]]]]]]]])
		    in  %% Line 1491
			case apply 'try_downgrade'/4
				 (_1, _0, Relup2, _3) of
			  %% Line 1492
			  <_@r1 = {'ok',RhScript}> when 'true' ->
			      %% Line 1493
			      _@r1
			  %% Line 1494
			  <_13> when 'true' ->
			      %% Line 1495
			      call 'erlang':'throw'
				  ({'error',{'no_matching_relup',_1,_0}})
			end
	      end
      -| [{'function',{'do_get_rh_script',4}}] )
'try_upgrade'/4 =
    %% Line 1499
    ( fun (_0,_1,_2,_3) ->
	  %% Line 1500
	  case apply 'consult'/2
		   (_2, _3) of
	    %% Line 1501
	    <{'ok',[{_10,ListOfRhScripts,_11}|[]]}>
		when call 'erlang':'=:='
		      (_10,
		       _0) ->
		%% Line 1502
		case call 'lists':'keysearch'
			 (_1, 1, ListOfRhScripts) of
		  %% Line 1503
		  <{'value',RhScript}> when 'true' ->
		      %% Line 1504
		      {'ok',RhScript}
		  %% Line 1505
		  <_12> when 'true' ->
		      %% Line 1506
		      'error'
		end
	    %% Line 1508
	    <{'ok',_13}> when 'true' ->
		%% Line 1509
		call 'erlang':'throw'
		    ({'error',{'bad_relup_file',_2}})
	    %% Line 1510
	    <{'error',Reason}>
		when call 'erlang':'is_tuple'
		      (Reason) ->
		%% Line 1511
		call 'erlang':'throw'
		    ({'error',{'bad_relup_file',_2}})
	    %% Line 1512
	    <{'error','enoent'}> when 'true' ->
		%% Line 1513
		'error'
	    %% Line 1514
	    <{'error',FileError}> when 'true' ->
		%% Line 1515
		call 'erlang':'throw'
		    ({'error',{FileError,_2}})
	    ( <_5> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_5})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'try_upgrade',4}}] )
'try_downgrade'/4 =
    %% Line 1518
    ( fun (_0,_1,_2,_3) ->
	  %% Line 1519
	  case apply 'consult'/2
		   (_2, _3) of
	    %% Line 1520
	    <{'ok',[{_10,_11,ListOfRhScripts}|[]]}>
		when call 'erlang':'=:='
		      (_10,
		       _1) ->
		%% Line 1521
		case call 'lists':'keysearch'
			 (_0, 1, ListOfRhScripts) of
		  %% Line 1522
		  <{'value',RhScript}> when 'true' ->
		      %% Line 1523
		      {'ok',RhScript}
		  %% Line 1524
		  <_12> when 'true' ->
		      %% Line 1525
		      'error'
		end
	    %% Line 1527
	    <{'ok',_13}> when 'true' ->
		%% Line 1528
		call 'erlang':'throw'
		    ({'error',{'bad_relup_file',_2}})
	    %% Line 1529
	    <{'error',Reason}>
		when call 'erlang':'is_tuple'
		      (Reason) ->
		%% Line 1530
		call 'erlang':'throw'
		    ({'error',{'bad_relup_file',_2}})
	    %% Line 1531
	    <{'error',FileError}> when 'true' ->
		%% Line 1532
		call 'erlang':'throw'
		    ({'error',{FileError,_2}})
	    ( <_5> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_5})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'try_downgrade',4}}] )
'set_status'/3 =
    %% Line 1537
    ( fun (_0,_1,_2) ->
	  let <_32> =
	      fun (_30) ->
		  %% Line 1538
		  case _30 of
		    <Release = {'release',_36,_37,_38,_39,_40}>
			when ( try
				let <_7> =
				    call 'erlang':'element'
					(3, Release)
				in  let <_8> =
					call 'erlang':'=='
					    (_7, _0)
				    in  let <_9> =
					    call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(( 'true'
						   -| ['compiler_generated'] ), _8)
					in  let <_10> =
						call %% Line 1539
						     'erlang':%% Line 1539
							      'element'
						    (%% Line 1539
						     6, %% Line 1539
							Release)
					    in  let <_11> =
						    call %% Line 1539
							 'erlang':%% Line 1539
								  '=='
							(_10, %% Line 1539
							      'permanent')
						in  ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'and'
											   -| ['compiler_generated'] )
							  (_9, _11)
						      -| ['compiler_generated'] )
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			    -| ['compiler_generated'] ) ->
			%% Line 1543
			'true'
		    %% Line 1544
		    <Release = {'release',_41,_42,_43,_44,_45}>
			when ( try
				let <_16> =
				    call 'erlang':'element'
					(3, Release)
				in  let <_17> =
					call 'erlang':'=='
					    (_16, _0)
				    in  ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'and'
									       -| ['compiler_generated'] )
					      (( 'true'
						 -| ['compiler_generated'] ), _17)
					  -| ['compiler_generated'] )
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			    -| ['compiler_generated'] ) ->
			%% Line 1545
			case Release of
			  <{'release',_46,_47,_48,_49,_50}> when 'true' ->
			      let <_20> =
				  call 'erlang':'setelement'
				      (6, Release, _1)
			      in  {'true',_20}
			  ( <_51> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','release'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    %% Line 1546
		    <Release = {'release',_52,_53,_54,_55,_56}>
			when ( try
				let <_25> =
				    call 'erlang':'element'
					(6, Release)
				in  let <_26> =
					call 'erlang':'=='
					    (_25, _1)
				    in  ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'and'
									       -| ['compiler_generated'] )
					      (( 'true'
						 -| ['compiler_generated'] ), _26)
					  -| ['compiler_generated'] )
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			    -| ['compiler_generated'] ) ->
			%% Line 1547
			case Release of
			  <{'release',_57,_58,_59,_60,_61}> when 'true' ->
			      let <_29> =
				  call 'erlang':'setelement'
				      (6, Release, 'old')
			      in  {'true',_29}
			  ( <_62> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','release'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    %% Line 1548
		    <_63> when 'true' ->
			%% Line 1549
			'true'
		  end
	  in  %% Line 1538
	      call 'lists':'zf'
		  (_32, _2)
      -| [{'function',{'set_status',3}}] )
'get_latest_release'/1 =
    %% Line 1552
    ( fun (_0) ->
	  %% Line 1553
	  case call 'lists':'keysearch'
		   ('current', 6, ( _0
				    -| [{'function',{'get_latest_release',1}}] )) of
	    %% Line 1554
	    <{'value',Release}> when 'true' ->
		%% Line 1555
		Release
	    %% Line 1556
	    <'false'> when 'true' ->
		%% Line 1557
		case %% Line 1558
		     call 'lists':'keysearch'
			 ('permanent', 6, ( _0
					    -| [{'function',{'get_latest_release',1}}] )) of
		  <{'value',Release}> when 'true' ->
		      %% Line 1559
		      Release
		  ( <_1> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_1})
		    -| ['compiler_generated'] )
		end
	    ( <_2> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_2})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'get_latest_release',1}}] )
'diff_dir'/2 =
    %% Line 1563
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <[H|T],L> when 'true' ->
		  %% Line 1564
		  case apply 'memlib'/2
			   (H, L) of
		    %% Line 1565
		    <'true'> when 'true' ->
			apply 'diff_dir'/2
			    (T, L)
		    %% Line 1566
		    <'false'> when 'true' ->
			let <_2> =
			    apply 'diff_dir'/2
				(T, L)
			in  [H|_2]
		    ( <_3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_3})
		      -| ['compiler_generated'] )
		  end
	      %% Line 1568
	      <[],_6> when 'true' ->
		  []
	      ( <_5,_4> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_5,_4})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'diff_dir',2}}] )
      -| [{'function',{'diff_dir',2}}] )
'memlib'/2 =
    %% Line 1570
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <{Lib,Vsn,_X_Dir},[{_4,_5,_X_Dir2}|_X_T]>
		  when let <_6> =
			call 'erlang':'=:='
			    (_4, Lib)
		    in  let <_7> =
			    call 'erlang':'=:='
				(_5, Vsn)
			in  call 'erlang':'and'
				(_6, _7) ->
		  'true'
	      %% Line 1571
	      <Lib,[_X_H|T]> when 'true' ->
		  apply 'memlib'/2
		      (Lib, T)
	      %% Line 1572
	      <_X_Lib,[]> when 'true' ->
		  'false'
	      ( <_3,_2> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_3,_2})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'memlib',2}}] )
      -| [{'function',{'memlib',2}}] )
'remove_file'/1 =
    %% Line 1575
    ( fun (_0) ->
	  %% Line 1576
	  case call 'file':'read_link_info'
		   (( _0
		      -| [{'function',{'remove_file',1}}] )) of
	    %% Line 1577
	    <{'ok',Info = {'file_info',_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28}}>
		when ( try
			let <_5> =
			    call 'erlang':'element'
				(3, Info)
			in  let <_6> =
				call 'erlang':'=='
				    (_5, 'directory')
			    in  ( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'and'
								       -| ['compiler_generated'] )
				      (( 'true'
					 -| ['compiler_generated'] ), _6)
				  -| ['compiler_generated'] )
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		    -| ['compiler_generated'] ) ->
		%% Line 1578
		case call 'file':'list_dir'
			 (( _0
			    -| [{'function',{'remove_file',1}}] )) of
		  %% Line 1579
		  <{'ok',Files}> when 'true' ->
		      let <_10> =
			  fun (_8) ->
			      let <_7> =
				  call %% Line 1581
				       'filename':%% Line 1581
						  'join'
				      (( _0
					 -| [{'function',{'remove_file',1}}] ), %% Line 1580
										_8)
			      in  %% Line 1581
				  apply 'remove_file'/1
				      (_7)
		      in  do  %% Line 1580
			      call 'lists':'foreach'
				  (_10, %% Line 1582
					Files)
			      %% Line 1583
			      case call 'file':'del_dir'
				       (( _0
					  -| [{'function',{'remove_file',1}}] )) of
				%% Line 1584
				<'ok'> when 'true' ->
				    'ok'
				%% Line 1585
				<_@r0 = {'error',Reason}> when 'true' ->
				    call 'erlang':'throw'
					(_@r0)
				( <_11> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_11})
				  -| ['compiler_generated'] )
			      end
		  %% Line 1587
		  <_@r1 = {'error',Reason}> when 'true' ->
		      %% Line 1588
		      call 'erlang':'throw'
			  (_@r1)
		  ( <_12> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_12})
		    -| ['compiler_generated'] )
		end
	    %% Line 1590
	    <{'ok',_X_Info}> when 'true' ->
		%% Line 1591
		case call 'file':'delete'
			 (( _0
			    -| [{'function',{'remove_file',1}}] )) of
		  %% Line 1592
		  <'ok'> when 'true' ->
		      'ok'
		  %% Line 1593
		  <_@r2 = {'error',Reason}> when 'true' ->
		      call 'erlang':'throw'
			  (_@r2)
		  ( <_13> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_13})
		    -| ['compiler_generated'] )
		end
	    %% Line 1595
	    <{'error',_X_Reason}> when 'true' ->
		%% Line 1596
		call 'erlang':'throw'
		    ({'error',{'no_such_file',( _0
						-| [{'function',{'remove_file',1}}] )}})
	    ( <_14> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_14})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'remove_file',1}}] )
'do_write_file'/2 =
    %% Line 1600
    ( fun (_0,_1) ->
	  %% Line 1601
	  apply 'do_write_file'/3
	      (_0, _1, [])
      -| [{'function',{'do_write_file',2}}] )
'do_write_file'/3 =
    %% Line 1602
    ( fun (_0,_1,_2) ->
	  %% Line 1603
	  case call 'file':'open'
		   (_0, ['write'|_2]) of
	    %% Line 1604
	    <{'ok',Fd}> when 'true' ->
		do  %% Line 1605
		    call 'io':'put_chars'
			(Fd, _1)
		    let <_8> =
			call %% Line 1606
			     'file':%% Line 1606
				    'close'
			    (%% Line 1606
			     Fd)
		    in  %% Line 1606
			case _8 of
			  <'ok'> when 'true' ->
			      ( _8
				-| ['compiler_generated'] )
			  ( <_3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_3})
			    -| ['compiler_generated'] )
			end
	    %% Line 1607
	    <{'error',Reason}> when 'true' ->
		%% Line 1608
		{'error',{Reason,_0}}
	    ( <_4> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_4})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'do_write_file',3}}] )
'change_appl_data'/3 =
    %% Line 1615
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <RelDir,{'release',_16,Vsn,_17,_18,_19},Masters> when 'true' ->
		  let <Dir> =
		      call %% Line 1616
			   'filename':%% Line 1616
				      'join'
			  (%% Line 1616
			   [RelDir|[Vsn|[]]])
		  in  let <BootFile> =
			  call %% Line 1617
			       'filename':%% Line 1617
					  'join'
			      (%% Line 1617
			       Dir, %% Line 1617
				    [115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]])
		      in  %% Line 1618
			  case apply 'read_file'/2
				   (BootFile, Masters) of
			    %% Line 1619
			    <{'ok',Bin}> when 'true' ->
				let <_5> =
				    call %% Line 1620
					 'filename':%% Line 1620
						    'join'
					(%% Line 1620
					 Dir, %% Line 1620
					      [115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]])
				in  let <_7> =
					case %% Line 1620
					     apply 'consult'/2
						 (_5, Masters) of
					  %% Line 1621
					  <{'ok',[Conf|[]]}> when 'true' ->
					      Conf
					  %% Line 1622
					  <_20> when 'true' ->
					      []
					end
				    in  let <_9> =
					    call %% Line 1624
						 'erlang':%% Line 1624
							  'binary_to_term'
						(%% Line 1624
						 Bin)
					in  let <Appls> =
						apply %% Line 1624
						      'get_appls'/1
						    (_9)
					    in  %% Line 1625
						case call 'application_controller':'change_application_data'
							 (Appls, _7) of
						  %% Line 1626
						  <'ok'> when 'true' ->
						      Appls
						  %% Line 1627
						  <{'error',Reason}> when 'true' ->
						      call 'erlang':'exit'
							  ({'change_appl_data',Reason})
						  ( <_11> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_11})
						    -| ['compiler_generated'] )
						end
			    %% Line 1629
			    <{'error',_X_Reason}> when 'true' ->
				%% Line 1630
				call 'erlang':'throw'
				    ({'error',{'no_such_file',BootFile}})
			    ( <_12> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_12})
			      -| ['compiler_generated'] )
			  end
	      ( <_15,_14,_13> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_15,_14,_13})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'change_appl_data',3}}] )
      -| [{'function',{'change_appl_data',3}}] )
'get_appls'/1 =
    %% Line 1637
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'get_appls',1}}] ) of
	      <{'script',_2,Script}> when 'true' ->
		  apply 'get_appls'/2
		      (Script, [])
	      ( <_1> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_1})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'get_appls',1}}] )
      -| [{'function',{'get_appls',1}}] )
'get_appls'/2 =
    %% Line 1640
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <[{'kernelProcess','application_controller',%% Line 1641
							  {'application_controller','start',[App|[]]}}|%% Line 1641
												       T],%% Line 1641
													  Res> when 'true' ->
		  %% Line 1642
		  apply 'get_appls'/2
		      (T, [App|Res])
	      %% Line 1644
	      <[{'apply',{'application','load',[App|[]]}}|T],Res> when 'true' ->
		  %% Line 1645
		  apply 'get_appls'/2
		      (T, [App|Res])
	      %% Line 1646
	      <[_4|T],Res> when 'true' ->
		  %% Line 1647
		  apply 'get_appls'/2
		      (T, Res)
	      %% Line 1648
	      <[],Res> when 'true' ->
		  %% Line 1649
		  Res
	      ( <_3,_2> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_3,_2})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'get_appls',2}}] )
      -| [{'function',{'get_appls',2}}] )
'mon_nodes'/1 =
    %% Line 1652
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'mon_nodes',1}}] ) of
	      <'true'> when 'true' ->
		  let <_4> =
		      call %% Line 1653
			   'net_kernel':%% Line 1653
					'monitor_nodes'
			  (%% Line 1653
			   'true')
		  in  %% Line 1653
		      case _4 of
			<'ok'> when 'true' ->
			    ( _4
			      -| ['compiler_generated'] )
			( <_1> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_1})
			  -| ['compiler_generated'] )
		      end
	      %% Line 1654
	      <'false'> when 'true' ->
		  %% Line 1655
		  case call 'net_kernel':'monitor_nodes'
			   ('false') of
		    <'ok'> when 'true' ->
			%% Line 1656
			apply 'flush'/0
			    ()
		    ( <_2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_2})
		      -| ['compiler_generated'] )
		  end
	      ( <_3> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_3})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'mon_nodes',1}}] )
      -| [{'function',{'mon_nodes',1}}] )
'flush'/0 =
    %% Line 1658
    ( fun () ->
	  ( letrec
		'recv$^0'/0 =
		    fun () ->
			let <_4,_2> =
			    primop 'recv_peek_message'
				()
			in  case _4 of
			      <'true'> when 'true' ->
				  %% Line 1659
				  case _2 of
				    %% Line 1660
				    <{'nodedown',_0}> when 'true' ->
					do  primop 'remove_message'
						()
					    apply 'flush'/0
						()
				    %% Line 1661
				    <{'nodeup',_1}> when 'true' ->
					do  primop 'remove_message'
						()
					    apply 'flush'/0
						()
				    ( <Other> when 'true' ->
					  do  primop 'recv_next'
						  ()
					      ( apply 'recv$^0'/0
						    ()
						-| ['dialyzer_ignore'] )
				      -| ['compiler_generated','dialyzer_ignore'] )
				  end
			      <'false'> when 'true' ->
				  let <_3> =
				      primop 'recv_wait_timeout'
					  (%% Line 1663
					   0)
				  in  case _3 of
					<'true'> when 'true' ->
					    do  primop 'timeout'
						    ()
						%% Line 1663
						'ok'
					( <'false'> when 'true' ->
					      ( apply 'recv$^0'/0
						    ()
						-| ['dialyzer_ignore'] )
					  -| ['dialyzer_ignore'] )
				      end
			    end
	    in  ( apply 'recv$^0'/0
		      ()
		  -| ['dialyzer_ignore'] )
	    -| ['letrec_goto'] )
      -| [{'function',{'flush',0}}] )
'prepare_restart_nt'/3 =
    %% Line 1666
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <{'release',_30,Vsn,EVsn,_31,_32},%% Line 1667
						{'release',_33,PermVsn,PermEVsn,_34,_35},%% Line 1668
											 DataFileName> when 'true' ->
		  let <_4> =
		      call %% Line 1669
			   'erlang':%% Line 1669
				    'node'
			  ()
		  in  let <_5> =
			  call %% Line 1669
			       'erlang':%% Line 1669
					'atom_to_list'
			      (_4)
		      in  let <_6> =
			      call %% Line 1669
				   'string':%% Line 1669
					    'lexemes'
				  (_5, %% Line 1669
				       [64])
			  in  let <_7> =
				  call %% Line 1669
				       'erlang':%% Line 1669
						'hd'
				      (_6)
			      in  let <_3> =
				      [95|%% Line 1670
					  PermVsn]
				  in  let <CurrentServiceName> =
					  call %% Line 1670
					       'erlang':%% Line 1670
							'++'
					      (_7, _3)
				      in  let <_10> =
					      call %% Line 1671
						   'erlang':%% Line 1671
							    'node'
						  ()
					  in  let <_11> =
						  call %% Line 1671
						       'erlang':%% Line 1671
								'atom_to_list'
						      (_10)
					      in  let <_12> =
						      call %% Line 1671
							   'string':%% Line 1671
								    'lexemes'
							  (_11, %% Line 1671
								[64])
						  in  let <_13> =
							  call %% Line 1671
							       'erlang':%% Line 1671
									'hd'
							      (_12)
						      in  let <_9> =
							      [95|%% Line 1672
								  Vsn]
							  in  let <FutureServiceName> =
								  call %% Line 1672
								       'erlang':%% Line 1672
										'++'
								      (_13, _9)
							      in  let <_16> =
								      case %% Line 1673
									   call 'erlsrv':'get_service'
									       (PermEVsn, CurrentServiceName) of
									%% Line 1674
									<Error1 = {'error',_36}> when 'true' ->
									    %% Line 1675
									    call 'erlang':'throw'
										(Error1)
									%% Line 1676
									<CS> when 'true' ->
									    %% Line 1677
									    CS
								      end
								  in  let <_18> =
									  call %% Line 1681
									       'filename':%% Line 1681
											  'nativename'
									      (%% Line 1681
									       DataFileName)
								      in  let <FutureService> =
									      call %% Line 1679
										   'erlsrv':%% Line 1679
											    'new_service'
										  (%% Line 1679
										   FutureServiceName, _16, _18, %% Line 1687
														CurrentServiceName)
									  in  %% Line 1689
									      case call 'erlsrv':'store_service'
										       (EVsn, FutureService) of
										%% Line 1690
										<Error2 = {'error',_37}> when 'true' ->
										    %% Line 1691
										    call 'erlang':'throw'
											(Error2)
										%% Line 1692
										<_X_X> when 'true' ->
										    %% Line 1693
										    case call 'erlsrv':'disable_service'
											     (EVsn, FutureServiceName) of
										      <{'ok',_38}> when 'true' ->
											  let <_21> =
											      call %% Line 1694
												   'erlsrv':%% Line 1694
													    'erlsrv'
												  (%% Line 1694
												   EVsn)
											  in  let <ErlSrv> =
												  call %% Line 1694
												       'filename':%% Line 1694
														  'nativename'
												      (_21)
											      in  let <_23> =
												      call %% Line 1695
													   'erlang':%% Line 1695
														    '++'
													  (%% Line 1695
													   [32|[115|[116|[97|[114|[116|[95|[100|[105|[115|[97|[98|[108|[101|[100|[32]]]]]]]]]]]]]]]], %% Line 1695
																								      FutureServiceName)
												  in  let <StartDisabled> =
													  call %% Line 1695
													       'erlang':%% Line 1695
															'++'
													      (%% Line 1695
													       ErlSrv, _23)
												      in  %% Line 1696
													  case call 'heart':'set_cmd'
														   (StartDisabled) of
													    %% Line 1697
													    <'ok'> when 'true' ->
														%% Line 1698
														'ok'
													    %% Line 1699
													    <Error3> when 'true' ->
														%% Line 1700
														call 'erlang':'throw'
														    ({'error',{'heart:set_cmd() error',Error3}})
													  end
										      ( <_20> when 'true' ->
											    primop 'match_fail'
												({'badmatch',_20})
											-| ['compiler_generated'] )
										    end
									      end
	      ( <_29,_28,_27> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_29,_28,_27})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'prepare_restart_nt',3}}] )
      -| [{'function',{'prepare_restart_nt',3}}] )
'prepare_restart_new_emulator'/7 =
    %% Line 1708
    ( fun (_0,_1,_2,_3,_4,_5,_6) ->
	  %% Line 1710
	  case call 'lists':'keysearch'
		   ('permanent', 6, _5) of
	    <{'value',PRelease}> when 'true' ->
		let <NReleases1> =
		    apply %% Line 1711
			  'set_status'/3
			(_3, %% Line 1711
			     'current', _5)
		in  let <NReleases2> =
			apply %% Line 1712
			      'set_status'/3
			    (_3, %% Line 1712
				 'tmp_current', %% Line 1712
						NReleases1)
		    in  do  %% Line 1713
			    apply 'write_releases'/3
				(_2, NReleases2, _6)
			    %% Line 1714
			    apply 'prepare_restart_new_emulator'/6
				(_0, _1, _2, _4, %% Line 1715
						 PRelease, _6)
	    ( <_7> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_7})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'prepare_restart_new_emulator',7}}] )
'prepare_restart_new_emulator'/6 =
    %% Line 1717
    ( fun (_0,_1,_2,_3,_4,_5) ->
	  %% Line 1719
	  case _3 of
	    <{'release',_21,Vsn,EVsn,_22,_23}> when 'true' ->
		let <_7> =
		    [32|%% Line 1720
			Vsn]
		in  let <Data> =
			call %% Line 1720
			     'erlang':%% Line 1720
				      '++'
			    (%% Line 1720
			     EVsn, _7)
		    in  let <DataFile> =
			    apply %% Line 1721
				  'write_new_start_erl'/3
				(%% Line 1721
				 Data, _2, _5)
			in  %% Line 1723
			    case call 'os':'type'
				     () of
			      %% Line 1724
			      <{'win32','nt'}> when 'true' ->
				  do  %% Line 1725
				      apply 'write_ini_file'/3
					  (_1, EVsn, _5)
				      %% Line 1726
				      apply 'prepare_restart_nt'/3
					  (_3, _4, DataFile)
			      %% Line 1727
			      <{'unix',_24}> when 'true' ->
				  let <StartP> =
				      apply %% Line 1728
					    'check_start_prg'/2
					  (_0, _5)
				  in  let <_11> =
					  [32|%% Line 1729
					      DataFile]
				      in  let <_12> =
					      call %% Line 1729
						   'erlang':%% Line 1729
							    '++'
						  (%% Line 1729
						   StartP, _11)
					  in  %% Line 1729
					      case call 'heart':'set_cmd'
						       (_12) of
						%% Line 1730
						<'ok'> when 'true' ->
						    %% Line 1731
						    'ok'
						%% Line 1732
						<Error> when 'true' ->
						    %% Line 1733
						    call 'erlang':'throw'
							({'error',{'heart:set_cmd() error',Error}})
					      end
			      ( <_14> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_14})
				-| ['compiler_generated'] )
			    end
	    ( <_6> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_6})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'prepare_restart_new_emulator',6}}] )
'check_start_prg'/2 =
    %% Line 1737
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <{'do_check',StartPrg},Masters> when 'true' ->
		  do  %% Line 1738
		      apply 'check_file'/3
			  (StartPrg, 'regular', Masters)
		      %% Line 1739
		      StartPrg
	      %% Line 1740
	      <{_4,StartPrg},_5> when 'true' ->
		  %% Line 1741
		  StartPrg
	      ( <_3,_2> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_3,_2})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'check_start_prg',2}}] )
      -| [{'function',{'check_start_prg',2}}] )
'write_new_start_erl'/3 =
    %% Line 1743
    ( fun (_0,_1,_2) ->
	  let <DataFile> =
	      call %% Line 1744
		   'filename':%% Line 1744
			      'join'
		  (%% Line 1744
		   [_1|[[110|[101|[119|[95|[115|[116|[97|[114|[116|[95|[101|[114|[108|[46|[100|[97|[116|[97]]]]]]]]]]]]]]]]]]]])
	  in  do  %% Line 1745
		  apply 'write_file'/3
		      (DataFile, _0, _2)
		  %% Line 1746
		  DataFile
      -| [{'function',{'write_new_start_erl',3}}] )
'transform_release'/3 =
    %% Line 1759
    ( fun (_0,_1,_2) ->
	  %% Line 1760
	  case call 'init':'script_id'
		   () of
	    %% Line 1761
	    <_@r0 = {Name,TmpVsn = [95|[95|[110|[101|[119|[95|[101|[109|[117|[108|[97|[116|[111|[114|[95|[95|_20]]]]]]]]]]]]]]]]}> when 'true' ->
		let <DReleases> =
		    call %% Line 1766
			 'lists':%% Line 1766
				 'keydelete'
			(%% Line 1766
			 TmpVsn, %% Line 1766
				 3, _1)
		in  do  %% Line 1767
			apply 'write_releases'/3
			    (_0, DReleases, _2)
			%% Line 1768
			apply 'set_current'/2
			    (_@r0, _1)
	    %% Line 1769
	    <ScriptId> when 'true' ->
		let <F> =
		    fun (_12) ->
			%% Line 1770
			case _12 of
			  <Release = {'release',_21,_22,_23,_24,_25}>
			      when ( try
				      let <_8> =
					  call 'erlang':'element'
					      (6, Release)
				      in  let <_9> =
					      call 'erlang':'=='
						  (_8, 'tmp_current')
					  in  ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (( 'true'
						       -| ['compiler_generated'] ), _9)
						-| ['compiler_generated'] )
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
				  -| ['compiler_generated'] ) ->
			      %% Line 1771
			      case Release of
				<{'release',_26,_27,_28,_29,_30}> when 'true' ->
				    call 'erlang':'setelement'
					(6, Release, 'unpacked')
				( <_31> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','release'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  %% Line 1772
			  <Release> when 'true' ->
			      Release
			end
		in  %% Line 1774
		    case call 'lists':'map'
			     (F, _1) of
		      %% Line 1775
		      <_32>
			  when call 'erlang':'=:='
				(_32,
				 _1) ->
			  _1
		      %% Line 1777
		      <DReleases> when 'true' ->
			  do  %% Line 1778
			      apply 'write_releases'/3
				  (_0, DReleases, _2)
			      %% Line 1779
			      apply 'set_current'/2
				  (ScriptId, _1)
		    end
	  end
      -| [{'function',{'transform_release',3}}] )
'set_current'/2 =
    %% Line 1783
    ( fun (_0,_1) ->
	  let <F1> =
	      fun (_19) ->
		  %% Line 1784
		  case _19 of
		    <Release = {'release',_24,_25,_26,_27,_28}>
			when ( try
				let <_6> =
				    call 'erlang':'element'
					(6, Release)
				in  let <_7> =
					call 'erlang':'=='
					    (_6, 'tmp_current')
				    in  ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'and'
									       -| ['compiler_generated'] )
					      (( 'true'
						 -| ['compiler_generated'] ), _7)
					  -| ['compiler_generated'] )
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			    -| ['compiler_generated'] ) ->
			%% Line 1785
			case _0 of
			  %% Line 1786
			  <{_X_Name,Vsn}>
			      when ( try
				      ( let <_10> =
					    case ( call ( 'erlang'
							  -| ['compiler_generated'] ):( 'is_record'
											-| ['compiler_generated'] )
						       (Release, ( 'release'
								   -| ['compiler_generated'] ), ( 6
												  -| ['compiler_generated'] ))
						   -| ['compiler_generated'] ) of
					      ( <( 'true'
						   -| ['compiler_generated'] )> when 'true' ->
						    ( 'true'
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <( 'false'
						   -| ['compiler_generated'] )> when 'true' ->
						    ( 'fail'
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <( _8
						   -| ['compiler_generated'] )> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {( 'badarg'
								-| ['compiler_generated'] ),( _8
											      -| ['compiler_generated'] )}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					in  let <_11> =
						call 'erlang':'=:='
						    (( _10
						       -| ['compiler_generated'] ), 'true')
					    in  let <_12> =
						    call 'erlang':'element'
							(3, Release)
						in  let <_13> =
							call 'erlang':'=='
							    (_12, Vsn)
						    in  ( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'and'
											       -| ['compiler_generated'] )
							      (_11, _13)
							  -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
				  -| ['compiler_generated'] ) ->
			      %% Line 1787
			      case Release of
				<{'release',_29,_30,_31,_32,_33}> when 'true' ->
				    call 'erlang':'setelement'
					(6, Release, 'current')
				( <_34> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','release'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  %% Line 1788
			  <_35> when 'true' ->
			      %% Line 1789
			      case Release of
				<{'release',_36,_37,_38,_39,_40}> when 'true' ->
				    call 'erlang':'setelement'
					(6, Release, 'unpacked')
				( <_41> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','release'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			end
		    %% Line 1791
		    <Release> when 'true' ->
			Release
		  end
	  in  %% Line 1793
	      call 'lists':'map'
		  (F1, _1)
      -| [{'function',{'set_current',2}}] )
'check_opt_file'/3 =
    %% Line 1802
    ( fun (_0,_1,_2) ->
	  let <_3> =
	      catch
		  %% Line 1803
		  apply 'check_file'/3
		      (_0, _1, _2)
	  in  %% Line 1803
	      case _3 of
		%% Line 1804
		<'ok'> when 'true' ->
		    %% Line 1805
		    'true'
		%% Line 1806
		<_X_Error> when 'true' ->
		    do  %% Line 1807
			call 'io':'format'
			    ([87|[97|[114|[110|[105|[110|[103|[58|[32|[126|[116|[112|[32|[109|[105|[115|[115|[105|[110|[103|[32|[40|[111|[112|[116|[105|[111|[110|[97|[108|[41|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_0|[]])
			%% Line 1808
			'false'
	      end
      -| [{'function',{'check_opt_file',3}}] )
'check_file'/3 =
    %% Line 1811
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <FileName,Type,'false'> when 'true' ->
		  %% Line 1812
		  apply 'do_check_file'/2
		      (FileName, Type)
	      %% Line 1813
	      <FileName,Type,Masters> when 'true' ->
		  %% Line 1814
		  apply 'check_file_masters'/3
		      (FileName, Type, Masters)
	    end
	    -| [{'function',{'check_file',3}}] )
      -| [{'function',{'check_file',3}}] )
'check_file_masters'/3 =
    %% Line 1817
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <FileName,Type,[Master|Masters]> when 'true' ->
		  do  %% Line 1818
		      apply 'do_check_file'/3
			  (Master, FileName, Type)
		      %% Line 1819
		      apply 'check_file_masters'/3
			  (FileName, Type, Masters)
	      %% Line 1820
	      <_X_FileName,_X_Type,[]> when 'true' ->
		  %% Line 1821
		  'ok'
	      ( <_5,_4,_3> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_5,_4,_3})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'check_file_masters',3}}] )
      -| [{'function',{'check_file_masters',3}}] )
'do_check_file'/2 =
    %% Line 1824
    ( fun (_0,_1) ->
	  %% Line 1825
	  case call 'file':'read_file_info'
		   (_0) of
	    %% Line 1826
	    <{'ok',Info = {'file_info',_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23}}>
		when ( try
			let <_6> =
			    call 'erlang':'element'
				(3, Info)
			in  let <_7> =
				call 'erlang':'=='
				    (_6, _1)
			    in  ( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'and'
								       -| ['compiler_generated'] )
				      (( 'true'
					 -| ['compiler_generated'] ), _7)
				  -| ['compiler_generated'] )
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		    -| ['compiler_generated'] ) ->
		'ok'
	    %% Line 1827
	    <{'error',_X_Reason}> when 'true' ->
		call 'erlang':'throw'
		    ({'error',{'no_such_file',_0}})
	    ( <_8> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_8})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'do_check_file',2}}] )
'do_check_file'/3 =
    %% Line 1830
    ( fun (_0,_1,_2) ->
	  %% Line 1831
	  case call 'rpc':'call'
		   (_0, 'file', 'read_file_info', [_1|[]]) of
	    %% Line 1832
	    <{'ok',Info = {'file_info',_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25}}>
		when ( try
			let <_7> =
			    call 'erlang':'element'
				(3, Info)
			in  let <_8> =
				call 'erlang':'=='
				    (_7, _2)
			    in  ( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'and'
								       -| ['compiler_generated'] )
				      (( 'true'
					 -| ['compiler_generated'] ), _8)
				  -| ['compiler_generated'] )
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		    -| ['compiler_generated'] ) ->
		'ok'
	    %% Line 1833
	    <_26> when 'true' ->
		call 'erlang':'throw'
		    ({'error',{'no_such_file',{_0,_1}}})
	  end
      -| [{'function',{'do_check_file',3}}] )
'extract_rel_file'/3 =
    %% Line 1840
    ( fun (_0,_1,_2) ->
	  %% Line 1841
	  ( call ( 'erl_tar'
		   -| ['result_not_wanted'] ):( 'extract'
						-| ['result_not_wanted'] )
		(_1, ( [( {( 'files'
			     -| ['result_not_wanted'] ),( [_0|( []
								-| ['result_not_wanted'] )]
							  -| ['result_not_wanted'] )}
			  -| ['result_not_wanted'] )|( [( {( 'cwd'
							     -| ['result_not_wanted'] ),_2}
							  -| ['result_not_wanted'] )|( ['compressed']
										       -| ['result_not_wanted'] )]
						       -| ['result_not_wanted'] )]
		       -| ['result_not_wanted'] ))
	    -| ['result_not_wanted'] )
      -| [{'function',{'extract_rel_file',3}}] )
'extract_tar'/2 =
    %% Line 1843
    ( fun (_0,_1) ->
	  %% Line 1844
	  case call 'erl_tar':'extract'
		   (_1, ['keep_old_files'|[{'cwd',_0}|['compressed']]]) of
	    %% Line 1845
	    <'ok'> when 'true' ->
		%% Line 1846
		'ok'
	    %% Line 1847
	    <{'error',{Name,Reason}}> when 'true' ->
		%% Line 1848
		call 'erlang':'throw'
		    ({'error',{'cannot_extract_file',Name,Reason}})
	    ( <_2> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_2})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'extract_tar',2}}] )
'write_releases'/3 =
    %% Line 1851
    ( fun (_0,_1,_2) ->
	  let <_14> =
	      fun (_12) ->
		  %% Line 1856
		  case _12 of
		    <Release = {'release',_19,_20,_21,_22,_23}>
			when ( try
				let <_7> =
				    call 'erlang':'element'
					(6, Release)
				in  let <_8> =
					call 'erlang':'=='
					    (_7, 'current')
				    in  ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'and'
									       -| ['compiler_generated'] )
					      (( 'true'
						 -| ['compiler_generated'] ), _8)
					  -| ['compiler_generated'] )
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			    -| ['compiler_generated'] ) ->
			%% Line 1857
			case Release of
			  <{'release',_24,_25,_26,_27,_28}> when 'true' ->
			      let <_11> =
				  call 'erlang':'setelement'
				      (6, Release, 'unpacked')
			      in  {'true',_11}
			  ( <_29> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','release'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    %% Line 1858
		    <_30> when 'true' ->
			%% Line 1859
			'true'
		  end
	  in  let <NewReleases> =
		  call %% Line 1856
		       'lists':%% Line 1856
			       'zf'
		      (_14, _1)
	      in  %% Line 1861
		  apply 'write_releases_1'/3
		      (_0, NewReleases, _2)
      -| [{'function',{'write_releases',3}}] )
'write_releases_1'/3 =
    %% Line 1864
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <Dir,NewReleases,'false'> when 'true' ->
		  %% Line 1865
		  case apply 'do_write_release'/3
			   (Dir, [82|[69|[76|[69|[65|[83|[69|[83]]]]]]]], NewReleases) of
		    %% Line 1866
		    <'ok'> when 'true' ->
			'ok'
		    %% Line 1867
		    <Error> when 'true' ->
			call 'erlang':'throw'
			    (Error)
		  end
	      %% Line 1869
	      <Dir,NewReleases,Masters> when 'true' ->
		  do  %% Line 1870
		      apply 'all_masters'/1
			  (Masters)
		      %% Line 1871
		      apply 'write_releases_m'/3
			  (Dir, NewReleases, Masters)
	    end
	    -| [{'function',{'write_releases_1',3}}] )
      -| [{'function',{'write_releases_1',3}}] )
'do_write_release'/3 =
    %% Line 1873
    ( fun (_0,_1,_2) ->
	  let <_3> =
	      call %% Line 1874
		   'filename':%% Line 1874
			      'join'
		  (_0, _1)
	  in  %% Line 1874
	      case call 'file':'open'
		       (_3, ['write'|[{'encoding','utf8'}]]) of
		%% Line 1875
		<{'ok',Fd}> when 'true' ->
		    let <_4> =
			call %% Line 1877
			     'epp':%% Line 1877
				   'encoding_to_string'
			    (%% Line 1877
			     'utf8')
		    in  %% Line 1876
			case call 'io':'format'
				 (Fd, [37|[37|[32|[126|[115|[126|[110|[126|[116|[112|[46|[126|[110]]]]]]]]]]]]], %% Line 1877
														 [_4|[_2|[]]]) of
			  <'ok'> when 'true' ->
			      let <_11> =
				  call %% Line 1878
				       'file':%% Line 1878
					      'close'
				      (%% Line 1878
				       Fd)
			      in  %% Line 1878
				  case _11 of
				    <'ok'> when 'true' ->
					( _11
					  -| ['compiler_generated'] )
				    ( <_6> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_6})
				      -| ['compiler_generated'] )
				  end
			  ( <_5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_5})
			    -| ['compiler_generated'] )
			end
		%% Line 1879
		<_@r0 = {'error',Reason}> when 'true' ->
		    %% Line 1880
		    _@r0
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_7})
		  -| ['compiler_generated'] )
	      end
      -| [{'function',{'do_write_release',3}}] )
'write_releases_m'/3 =
    %% Line 1894
    ( fun (_0,_1,_2) ->
	  let <RelFile> =
	      call %% Line 1895
		   'filename':%% Line 1895
			      'join'
		  (_0, %% Line 1895
		       [82|[69|[76|[69|[65|[83|[69|[83]]]]]]]])
	  in  let <Backup> =
		  call %% Line 1896
		       'filename':%% Line 1896
				  'join'
		      (_0, %% Line 1896
			   [82|[69|[76|[69|[65|[83|[69|[83|[46|[98|[97|[99|[107|[117|[112]]]]]]]]]]]]]]])
	      in  let <Change> =
		      call %% Line 1897
			   'filename':%% Line 1897
				      'join'
			  (_0, %% Line 1897
			       [82|[69|[76|[69|[65|[83|[69|[83|[46|[99|[104|[97|[110|[103|[101]]]]]]]]]]]]]]])
		  in  do  %% Line 1898
			  apply 'ensure_RELEASES_exists'/2
			      (_2, RelFile)
			  %% Line 1899
			  case apply 'at_all_masters'/4
				   (_2, 'release_handler', 'do_copy_files', %% Line 1900
									    [RelFile|[[Backup|[Change|[]]]|[]]]) of
			    %% Line 1901
			    <'ok'> when 'true' ->
				%% Line 1902
				case apply 'at_all_masters'/4
					 (_2, 'release_handler', 'do_write_release', %% Line 1903
										     [_0|[[82|[69|[76|[69|[65|[83|[69|[83|[46|[99|[104|[97|[110|[103|[101]]]]]]]]]]]]]]]|[_1|[]]]]) of
				  %% Line 1904
				  <'ok'> when 'true' ->
				      %% Line 1905
				      case apply 'at_all_masters'/4
					       (_2, 'file', 'rename', %% Line 1906
								      [Change|[RelFile|[]]]) of
					%% Line 1907
					<'ok'> when 'true' ->
					    do  %% Line 1908
						apply 'remove_files'/3
						    ('all', [Backup|[Change|[]]], _2)
						%% Line 1909
						'ok'
					%% Line 1910
					<{'error',{Master,R}}> when 'true' ->
					    do  %% Line 1911
						apply 'takewhile'/5
						    (Master, _2, 'file', 'rename', %% Line 1912
										   [Backup|[RelFile|[]]])
						do  %% Line 1913
						    apply 'remove_files'/3
							('all', [Backup|[Change|[]]], _2)
						    %% Line 1914
						    call 'erlang':'throw'
							({'error',{Master,R,'move_releases'}})
					( <_6> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_6})
					  -| ['compiler_generated'] )
				      end
				  %% Line 1916
				  <{'error',{Master,R}}> when 'true' ->
				      do  %% Line 1917
					  apply 'remove_files'/3
					      ('all', [Backup|[Change|[]]], _2)
					  %% Line 1918
					  call 'erlang':'throw'
					      ({'error',{Master,R,'update_releases'}})
				  ( <_7> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_7})
				    -| ['compiler_generated'] )
				end
			    %% Line 1920
			    <{'error',{Master,R}}> when 'true' ->
				do  %% Line 1921
				    apply 'remove_files'/3
					(Master, [Backup|[Change|[]]], _2)
				    %% Line 1922
				    call 'erlang':'throw'
					({'error',{Master,R,'backup_releases'}})
			    ( <_8> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_8})
			      -| ['compiler_generated'] )
			  end
      -| [{'function',{'write_releases_m',3}}] )
'ensure_RELEASES_exists'/2 =
    %% Line 1925
    ( fun (_0,_1) ->
	  %% Line 1926
	  case apply 'at_all_masters'/4
		   (_0, 'release_handler', 'do_ensure_RELEASES', [_1|[]]) of
	    %% Line 1927
	    <'ok'> when 'true' ->
		%% Line 1928
		'ok'
	    %% Line 1929
	    <{'error',{Master,R}}> when 'true' ->
		%% Line 1930
		call 'erlang':'throw'
		    ({'error',{Master,R,'ensure_RELEASES_exists'}})
	    ( <_2> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_2})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'ensure_RELEASES_exists',2}}] )
'copy_file'/3 =
    %% Line 1933
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <File,Dir,'false'> when 'true' ->
		  %% Line 1934
		  case apply 'do_copy_file'/2
			   (File, Dir) of
		    %% Line 1935
		    <'ok'> when 'true' ->
			'ok'
		    %% Line 1936
		    <Error> when 'true' ->
			call 'erlang':'throw'
			    (Error)
		  end
	      %% Line 1938
	      <File,Dir,Masters> when 'true' ->
		  do  %% Line 1939
		      apply 'all_masters'/1
			  (Masters)
		      %% Line 1940
		      apply 'copy_file_m'/3
			  (File, Dir, Masters)
	    end
	    -| [{'function',{'copy_file',3}}] )
      -| [{'function',{'copy_file',3}}] )
'copy_file_m'/3 =
    %% Line 1948
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <File,Dir,[Master|Masters]> when 'true' ->
		  %% Line 1949
		  case call 'rpc':'call'
			   (Master, 'release_handler', 'do_copy_file', [File|[Dir|[]]]) of
		    %% Line 1950
		    <'ok'> when 'true' ->
			apply 'copy_file_m'/3
			    (File, Dir, Masters)
		    %% Line 1951
		    <{'error',{Reason,F}}> when 'true' ->
			call 'erlang':'throw'
			    ({'error',{Master,Reason,F}})
		    %% Line 1952
		    <Other> when 'true' ->
			call 'erlang':'throw'
			    ({'error',{Master,Other,File}})
		  end
	      %% Line 1954
	      <_X_File,_X_Dir,[]> when 'true' ->
		  %% Line 1955
		  'ok'
	      ( <_6,_5,_4> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_6,_5,_4})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'copy_file_m',3}}] )
      -| [{'function',{'copy_file_m',3}}] )
'do_copy_file'/2 =
    %% Line 1957
    ( fun (_0,_1) ->
	  let <_2> =
	      call %% Line 1958
		   'filename':%% Line 1958
			      'basename'
		  (_0)
	  in  let <File2> =
		  call %% Line 1958
		       'filename':%% Line 1958
				  'join'
		      (_1, _2)
	      in  %% Line 1959
		  apply 'do_copy_file1'/2
		      (_0, File2)
      -| [{'function',{'do_copy_file',2}}] )
'do_copy_file1'/2 =
    %% Line 1961
    ( fun (_0,_1) ->
	  %% Line 1962
	  case call 'file':'read_file'
		   (_0) of
	    %% Line 1963
	    <{'ok',Bin}> when 'true' ->
		%% Line 1964
		case call 'file':'write_file'
			 (_1, Bin) of
		  %% Line 1965
		  <'ok'> when 'true' ->
		      'ok'
		  %% Line 1966
		  <{'error',Reason}> when 'true' ->
		      %% Line 1967
		      {'error',{Reason,_1}}
		  ( <_2> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_2})
		    -| ['compiler_generated'] )
		end
	    %% Line 1969
	    <{'error',Reason}> when 'true' ->
		%% Line 1970
		{'error',{Reason,_0}}
	    ( <_3> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_3})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'do_copy_file1',2}}] )
'do_copy_files'/2 =
    %% Line 1976
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <File,[ToFile|ToFiles]> when 'true' ->
		  %% Line 1977
		  case apply 'do_copy_file1'/2
			   (File, ToFile) of
		    %% Line 1978
		    <'ok'> when 'true' ->
			apply 'do_copy_files'/2
			    (File, ToFiles)
		    %% Line 1979
		    <Error> when 'true' ->
			Error
		  end
	      %% Line 1981
	      <_5,[]> when 'true' ->
		  %% Line 1982
		  'ok'
	      ( <_4,_3> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_4,_3})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'do_copy_files',2}}] )
      -| [{'function',{'do_copy_files',2}}] )
'do_copy_files'/1 =
    %% Line 1987
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'do_copy_files',1}}] ) of
	      <[{Src,Dest}|Files]> when 'true' ->
		  %% Line 1988
		  case apply 'do_copy_file1'/2
			   (Src, Dest) of
		    %% Line 1989
		    <'ok'> when 'true' ->
			apply 'do_copy_files'/1
			    (Files)
		    %% Line 1990
		    <Error> when 'true' ->
			Error
		  end
	      %% Line 1992
	      <[]> when 'true' ->
		  %% Line 1993
		  'ok'
	      ( <_2> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_2})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'do_copy_files',1}}] )
      -| [{'function',{'do_copy_files',1}}] )
'do_rename_files'/1 =
    %% Line 1998
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'do_rename_files',1}}] ) of
	      <[{Src,Dest}|Files]> when 'true' ->
		  %% Line 1999
		  case call 'file':'rename'
			   (Src, Dest) of
		    %% Line 2000
		    <'ok'> when 'true' ->
			apply 'do_rename_files'/1
			    (Files)
		    %% Line 2001
		    <Error> when 'true' ->
			Error
		  end
	      %% Line 2003
	      <[]> when 'true' ->
		  %% Line 2004
		  'ok'
	      ( <_2> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_2})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'do_rename_files',1}}] )
      -| [{'function',{'do_rename_files',1}}] )
'do_remove_files'/1 =
    %% Line 2009
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'do_remove_files',1}}] ) of
	      <[File|Files]> when 'true' ->
		  do  %% Line 2010
		      ( call ( 'file'
			       -| ['result_not_wanted'] ):( 'delete'
							    -| ['result_not_wanted'] )
			    (File)
			-| ['result_not_wanted'] )
		      %% Line 2011
		      apply 'do_remove_files'/1
			  (Files)
	      %% Line 2012
	      <[]> when 'true' ->
		  %% Line 2013
		  'ok'
	      ( <_2> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_2})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'do_remove_files',1}}] )
      -| [{'function',{'do_remove_files',1}}] )
'do_ensure_RELEASES'/1 =
    %% Line 2020
    ( fun (_0) ->
	  %% Line 2021
	  case call 'file':'read_file_info'
		   (( _0
		      -| [{'function',{'do_ensure_RELEASES',1}}] )) of
	    %% Line 2022
	    <{'ok',_3}> when 'true' ->
		'ok'
	    %% Line 2023
	    <_4> when 'true' ->
		apply 'do_write_file'/2
		    (( _0
		       -| [{'function',{'do_ensure_RELEASES',1}}] ), [91|[93|[46|[32]]]])
	  end
      -| [{'function',{'do_ensure_RELEASES',1}}] )
'make_dir'/2 =
    %% Line 2029
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Dir,'false'> when 'true' ->
		  do  %% Line 2030
		      ( call ( 'file'
			       -| ['result_not_wanted'] ):( 'make_dir'
							    -| ['result_not_wanted'] )
			    (Dir)
			-| ['result_not_wanted'] )
		      %% Line 2031
		      'ok'
	      %% Line 2032
	      <Dir,Masters> when 'true' ->
		  let <_5> =
		      fun (_3) ->
			  %% Line 2033
			  call 'rpc':'call'
			      (_3, 'file', 'make_dir', [Dir|[]])
		  in  %% Line 2033
		      call 'lists':'foreach'
			  (_5, %% Line 2034
			       Masters)
	    end
	    -| [{'function',{'make_dir',2}}] )
      -| [{'function',{'make_dir',2}}] )
'all_masters'/1 =
    %% Line 2039
    ( fun (_0) ->
	  %% Line 2040
	  case call 'rpc':'multicall'
		   (( _0
		      -| [{'function',{'all_masters',1}}] ), 'erlang', 'info', ['version']) of
	    %% Line 2041
	    <{_3,[]}> when 'true' ->
		'ok'
	    %% Line 2042
	    <{_4,BadNodes}> when 'true' ->
		call 'erlang':'throw'
		    ({'error',{'bad_masters',BadNodes}})
	    ( <_1> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_1})
	      -| ['compiler_generated'] )
	  end
      -| [{'function',{'all_masters',1}}] )
'at_all_masters'/4 =
    %% Line 2050
    ( fun (_0,_1,_2,_3) ->
	  ( case <_0,_1,_2,_3> of
	      <[Master|Masters],M,F,A> when 'true' ->
		  %% Line 2051
		  case call 'rpc':'call'
			   (Master, M, F, A) of
		    %% Line 2052
		    <'ok'> when 'true' ->
			apply 'at_all_masters'/4
			    (Masters, M, F, A)
		    %% Line 2053
		    <Error> when 'true' ->
			{'error',{Master,Error}}
		  end
	      %% Line 2055
	      <[],_9,_10,_11> when 'true' ->
		  %% Line 2056
		  'ok'
	      ( <_8,_7,_6,_5> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_8,_7,_6,_5})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'at_all_masters',4}}] )
      -| [{'function',{'at_all_masters',4}}] )
'takewhile'/5 =
    %% Line 2062
    ( fun (_0,_1,_2,_3,_4) ->
	  let <_7> =
	      fun (_5) ->
		  %% Line 2063
		  ( case ( _5
			   -| ['result_not_wanted'] ) of
		      <Ma>
			  when ( call ( 'erlang'
				     -| ['result_not_wanted'] ):( '=='
								  -| ['result_not_wanted'] )
				  (( _5
				     -| ['result_not_wanted'] ),
				   _0)
			      -| ['result_not_wanted'] ) ->
			  %% Line 2064
			  ( 'false'
			    -| ['result_not_wanted'] )
		      %% Line 2065
		      <Ma> when 'true' ->
			  do  %% Line 2066
			      ( call ( 'rpc'
				       -| ['result_not_wanted'] ):( 'call'
								    -| ['result_not_wanted'] )
				    (Ma, _2, _3, _4)
				-| ['result_not_wanted'] )
			      %% Line 2067
			      ( 'true'
				-| ['result_not_wanted'] )
		    end
		    -| ['result_not_wanted'] )
	  in  do  %% Line 2063
		  ( call ( 'lists'
			   -| ['result_not_wanted'] ):( 'takewhile'
							-| ['result_not_wanted'] )
			(_7, _1)
		    -| ['result_not_wanted'] )
		  %% Line 2069
		  'ok'
      -| [{'function',{'takewhile',5}}] )
'consult'/2 =
    %% Line 2071
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <File,'false'> when 'true' ->
		  call 'file':'consult'
		      (File)
	      %% Line 2072
	      <File,Masters> when 'true' ->
		  apply 'consult_master'/2
		      (Masters, File)
	    end
	    -| [{'function',{'consult',2}}] )
      -| [{'function',{'consult',2}}] )
'consult_master'/2 =
    %% Line 2079
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <[Master|Ms],File> when 'true' ->
		  %% Line 2080
		  case call 'rpc':'call'
			   (Master, 'file', 'consult', [File|[]]) of
		    %% Line 2081
		    <{'badrpc',_5}> when 'true' ->
			apply 'consult_master'/2
			    (Ms, File)
		    %% Line 2082
		    <Res> when 'true' ->
			Res
		  end
	      %% Line 2084
	      <[],_X_File> when 'true' ->
		  %% Line 2085
		  {'error','no_master'}
	      ( <_4,_3> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_4,_3})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'consult_master',2}}] )
      -| [{'function',{'consult_master',2}}] )
'read_file'/2 =
    %% Line 2087
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <File,'false'> when 'true' ->
		  %% Line 2088
		  call 'file':'read_file'
		      (File)
	      %% Line 2089
	      <File,Masters> when 'true' ->
		  %% Line 2090
		  apply 'read_master'/2
		      (Masters, File)
	    end
	    -| [{'function',{'read_file',2}}] )
      -| [{'function',{'read_file',2}}] )
'write_file'/3 =
    %% Line 2092
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <File,Data,'false'> when 'true' ->
		  %% Line 2093
		  case call 'file':'write_file'
			   (File, Data) of
		    %% Line 2094
		    <'ok'> when 'true' ->
			'ok'
		    %% Line 2095
		    <Error> when 'true' ->
			call 'erlang':'throw'
			    (Error)
		  end
	      %% Line 2097
	      <File,Data,Masters> when 'true' ->
		  %% Line 2098
		  case apply 'at_all_masters'/4
			   (Masters, 'file', 'write_file', [File|[Data|[]]]) of
		    %% Line 2099
		    <'ok'> when 'true' ->
			'ok'
		    %% Line 2100
		    <Error> when 'true' ->
			call 'erlang':'throw'
			    (Error)
		  end
	    end
	    -| [{'function',{'write_file',3}}] )
      -| [{'function',{'write_file',3}}] )
'ensure_dir'/2 =
    %% Line 2103
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <File,'false'> when 'true' ->
		  %% Line 2104
		  case call 'filelib':'ensure_dir'
			   (File) of
		    %% Line 2105
		    <'ok'> when 'true' ->
			'ok'
		    %% Line 2106
		    <Error> when 'true' ->
			call 'erlang':'throw'
			    (Error)
		  end
	      %% Line 2108
	      <File,Masters> when 'true' ->
		  %% Line 2109
		  case apply 'at_all_masters'/4
			   (Masters, 'filelib', 'ensure_dir', [File|[]]) of
		    %% Line 2110
		    <'ok'> when 'true' ->
			'ok'
		    %% Line 2111
		    <Error> when 'true' ->
			call 'erlang':'throw'
			    (Error)
		  end
	    end
	    -| [{'function',{'ensure_dir',2}}] )
      -| [{'function',{'ensure_dir',2}}] )
'remove_dir'/2 =
    %% Line 2114
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <Dir,'false'> when 'true' ->
		  %% Line 2115
		  apply 'remove_file'/1
		      (Dir)
	      %% Line 2116
	      <Dir,Masters> when 'true' ->
		  %% Line 2117
		  case apply 'at_all_masters'/4
			   (Masters, 'release_handler', 'remove_file', [Dir|[]]) of
		    %% Line 2118
		    <'ok'> when 'true' ->
			'ok'
		    %% Line 2119
		    <Error> when 'true' ->
			call 'erlang':'throw'
			    (Error)
		  end
	    end
	    -| [{'function',{'remove_dir',2}}] )
      -| [{'function',{'remove_dir',2}}] )
'remove_files'/3 =
    %% Line 2124
    ( fun (_0,_1,_2) ->
	  %% Line 2125
	  apply 'takewhile'/5
	      (_0, _2, 'release_handler', 'do_remove_files', [_1|[]])
      -| [{'function',{'remove_files',3}}] )
'read_master'/2 =
    %% Line 2132
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <[Master|Ms],File> when 'true' ->
		  %% Line 2133
		  case call 'rpc':'call'
			   (Master, 'file', 'read_file', [File|[]]) of
		    %% Line 2134
		    <{'badrpc',_5}> when 'true' ->
			apply 'read_master'/2
			    (Ms, File)
		    %% Line 2135
		    <Res> when 'true' ->
			Res
		  end
	      %% Line 2137
	      <[],_X_File> when 'true' ->
		  %% Line 2138
		  {'error','no_master'}
	      ( <_4,_3> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_4,_3})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'read_master',2}}] )
      -| [{'function',{'read_master',2}}] )
'write_start'/3 =
    %% Line 2143
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <File,Data,'false'> when 'true' ->
		  %% Line 2144
		  case apply 'do_write_file'/2
			   (File, Data) of
		    %% Line 2145
		    <'ok'> when 'true' ->
			'ok'
		    %% Line 2146
		    <Error> when 'true' ->
			call 'erlang':'throw'
			    (Error)
		  end
	      %% Line 2148
	      <File,Data,Masters> when 'true' ->
		  do  %% Line 2149
		      apply 'all_masters'/1
			  (Masters)
		      %% Line 2150
		      apply 'safe_write_file_m'/3
			  (File, Data, Masters)
	    end
	    -| [{'function',{'write_start',3}}] )
      -| [{'function',{'write_start',3}}] )
'set_static_files'/3 =
    %% Line 2163
    ( fun (_0,_1,_2) ->
	  do  %% Line 2164
	      apply 'all_masters'/1
		  (_2)
	      let <SrcBoot> =
		  call %% Line 2167
		       'filename':%% Line 2167
				  'join'
		      (_0, %% Line 2165
			   [115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]])
	      in  let <DestBoot> =
		      call %% Line 2168
			   'filename':%% Line 2168
				      'join'
			  (_1, %% Line 2165
			       [115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]])
		  in  let <BackupBoot> =
			  call %% Line 2169
			       'filename':%% Line 2169
					  'join'
			      (_1, %% Line 2169
				   [115|[116|[97|[114|[116|[46|[98|[97|[99|[107|[117|[112]]]]]]]]]]]])
		      in  let <SrcConf> =
			      call %% Line 2170
				   'filename':%% Line 2170
					      'join'
				  (_0, %% Line 2166
				       [115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]])
			  in  let <DestConf> =
				  call %% Line 2171
				       'filename':%% Line 2171
						  'join'
				      (_1, %% Line 2166
					   [115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]])
			      in  let <BackupConf> =
				      call %% Line 2172
					   'filename':%% Line 2172
						      'join'
					  (_1, %% Line 2172
					       [115|[121|[115|[46|[98|[97|[99|[107|[117|[112]]]]]]]]]])
				  in  %% Line 2174
				      case apply 'at_all_masters'/4
					       (_2, 'release_handler', 'do_copy_files', %% Line 2175
											[[{DestBoot,BackupBoot}|%% Line 2176
														[{DestConf,BackupConf}|[]]]|%% Line 2176
																	    []]) of
					%% Line 2177
					<'ok'> when 'true' ->
					    %% Line 2178
					    case apply 'at_all_masters'/4
						     (_2, 'release_handler', 'do_copy_files', %% Line 2179
											      [[{SrcBoot,DestBoot}|%% Line 2180
														   [{SrcConf,DestConf}|[]]]|%% Line 2180
																	    []]) of
					      %% Line 2181
					      <'ok'> when 'true' ->
						  do  %% Line 2182
						      apply 'remove_files'/3
							  ('all', [BackupBoot|[BackupConf|[]]], _2)
						      %% Line 2183
						      'ok'
					      %% Line 2184
					      <{'error',{Master,R}}> when 'true' ->
						  do  %% Line 2185
						      apply 'takewhile'/5
							  (Master, _2, 'release_handler', 'do_rename_files', %% Line 2186
													     [{BackupBoot,DestBoot}|%% Line 2187
																    [{BackupConf,DestConf}|[]]])
						      do  %% Line 2188
							  apply 'remove_files'/3
							      ('all', [BackupBoot|[BackupConf|[]]], _2)
							  %% Line 2189
							  call 'erlang':'throw'
							      ({'error',{Master,R,'copy_start_config'}})
					      ( <_11> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_11})
						-| ['compiler_generated'] )
					    end
					%% Line 2191
					<{'error',{Master,R}}> when 'true' ->
					    do  %% Line 2192
						apply 'remove_files'/3
						    (Master, [BackupBoot|[BackupConf|[]]], _2)
						%% Line 2193
						call 'erlang':'throw'
						    ({'error',{Master,R,'backup_start_config'}})
					( <_12> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_12})
					  -| ['compiler_generated'] )
				      end
      -| [{'function',{'set_static_files',3}}] )
'write_ini_file'/3 =
    %% Line 2203
    ( fun (_0,_1,_2) ->
	  let <_3> =
	      call %% Line 2204
		   'erlang':%% Line 2204
			    '++'
		  (%% Line 2204
		   [101|[114|[116|[115|[45]]]]], _1)
	  in  let <BinDir> =
		  call %% Line 2204
		       'filename':%% Line 2204
				  'join'
		      (%% Line 2204
		       [_0|[_3|[[98|[105|[110]]]]]])
	      in  let <_5> =
		      call %% Line 2209
			   'filename':%% Line 2209
				      'nativename'
			  (%% Line 2209
			   BinDir)
		  in  let <_6> =
			  call %% Line 2210
			       'filename':%% Line 2210
					  'nativename'
			      (_0)
		      in  let <Str0> =
			      call %% Line 2205
				   'io_lib':%% Line 2205
					    'format'
				  (%% Line 2205
				   [91|[101|[114|[108|[97|[110|[103|[93|[126|[110|[66|[105|[110|[100|[105|[114|[61|[126|[116|[115|[126|[110|[80|[114|[111|[103|[110|[97|[109|[101|[61|[101|[114|[108|[126|[110|[82|[111|[111|[116|[100|[105|[114|[61|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2209
																																								[_5|%% Line 2210
																																								    [_6|[]]])
			  in  let <Str> =
				  call %% Line 2211
				       're':%% Line 2211
					    'replace'
				      (%% Line 2211
				       Str0, %% Line 2211
					     [92|[92]], %% Line 2211
							[92|[92|[92|[92]]]], %% Line 2211
									     [{'return','list'}|['global'|['unicode']]])
			      in  let <IniFile> =
				      call %% Line 2212
					   'filename':%% Line 2212
						      'join'
					  (%% Line 2212
					   BinDir, %% Line 2212
						   [101|[114|[108|[46|[105|[110|[105]]]]]]])
				  in  %% Line 2213
				      apply 'do_write_ini_file'/3
					  (IniFile, Str, _2)
      -| [{'function',{'write_ini_file',3}}] )
'do_write_ini_file'/3 =
    %% Line 2215
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <File,Data,'false'> when 'true' ->
		  %% Line 2216
		  case apply 'do_write_file'/3
			   (File, Data, [{'encoding','utf8'}]) of
		    %% Line 2217
		    <'ok'> when 'true' ->
			'ok'
		    %% Line 2218
		    <Error> when 'true' ->
			call 'erlang':'throw'
			    (Error)
		  end
	      %% Line 2220
	      <File,Data,Masters> when 'true' ->
		  do  %% Line 2221
		      apply 'all_masters'/1
			  (Masters)
		      %% Line 2222
		      apply 'safe_write_file_m'/4
			  (File, Data, [{'encoding','utf8'}], Masters)
	    end
	    -| [{'function',{'do_write_ini_file',3}}] )
      -| [{'function',{'do_write_ini_file',3}}] )
'safe_write_file_m'/3 =
    %% Line 2235
    ( fun (_0,_1,_2) ->
	  %% Line 2236
	  apply 'safe_write_file_m'/4
	      (_0, _1, [], _2)
      -| [{'function',{'safe_write_file_m',3}}] )
'safe_write_file_m'/4 =
    %% Line 2237
    ( fun (_0,_1,_2,_3) ->
	  let <Backup> =
	      call %% Line 2238
		   'erlang':%% Line 2238
			    '++'
		  (_0, %% Line 2238
		       [46|[98|[97|[99|[107|[117|[112]]]]]]])
	  in  let <Change> =
		  call %% Line 2239
		       'erlang':%% Line 2239
				'++'
		      (_0, %% Line 2239
			   [46|[99|[104|[97|[110|[103|[101]]]]]]])
	      in  %% Line 2240
		  case apply 'at_all_masters'/4
			   (_3, 'release_handler', 'do_copy_files', %% Line 2241
								    [_0|[[Backup|[]]|[]]]) of
		    %% Line 2242
		    <'ok'> when 'true' ->
			%% Line 2243
			case apply 'at_all_masters'/4
				 (_3, 'release_handler', 'do_write_file', %% Line 2244
									  [Change|[_1|[_2|[]]]]) of
			  %% Line 2245
			  <'ok'> when 'true' ->
			      %% Line 2246
			      case apply 'at_all_masters'/4
				       (_3, 'file', 'rename', %% Line 2247
							      [Change|[_0|[]]]) of
				%% Line 2248
				<'ok'> when 'true' ->
				    do  %% Line 2249
					apply 'remove_files'/3
					    ('all', [Backup|[Change|[]]], _3)
					%% Line 2250
					'ok'
				%% Line 2251
				<{'error',{Master,R}}> when 'true' ->
				    do  %% Line 2252
					apply 'takewhile'/5
					    (Master, _3, 'file', 'rename', %% Line 2253
									   [Backup|[_0|[]]])
					do  %% Line 2254
					    apply 'remove_files'/3
						('all', [Backup|[Change|[]]], _3)
					    let <_7> =
						call %% Line 2256
						     'filename':%% Line 2256
								'basename'
						    (%% Line 2256
						     Change)
					    in  let <_6> =
						    call %% Line 2257
							 'filename':%% Line 2257
								    'basename'
							(_0)
						in  %% Line 2255
						    call 'erlang':'throw'
							({'error',{Master,R,'rename',_7,_6}})
				( <_8> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_8})
				  -| ['compiler_generated'] )
			      end
			  %% Line 2259
			  <{'error',{Master,R}}> when 'true' ->
			      do  %% Line 2260
				  apply 'remove_files'/3
				      ('all', [Backup|[Change|[]]], _3)
				  let <_9> =
				      call %% Line 2261
					   'filename':%% Line 2261
						      'basename'
					  (%% Line 2261
					   Change)
				  in  %% Line 2261
				      call 'erlang':'throw'
					  ({'error',{Master,R,'write',_9}})
			  ( <_10> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_10})
			    -| ['compiler_generated'] )
			end
		    %% Line 2263
		    <{'error',{Master,R}}> when 'true' ->
			do  %% Line 2264
			    apply 'remove_files'/3
				(Master, [Backup|[]], _3)
			    let <_12> =
				call %% Line 2266
				     'filename':%% Line 2266
						'basename'
				    (_0)
			    in  let <_11> =
				    call %% Line 2267
					 'filename':%% Line 2267
						    'basename'
					(%% Line 2267
					 Backup)
				in  %% Line 2265
				    call 'erlang':'throw'
					({'error',{Master,R,'backup',_12,_11}})
		    ( <_13> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_13})
		      -| ['compiler_generated'] )
		  end
      -| [{'function',{'safe_write_file_m',4}}] )
'get_new_libs'/2 =
    %% Line 2282
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <[{App,Vsn,_X_LibDir}|CurrentLibs],NewLibs> when 'true' ->
		  %% Line 2283
		  case call 'lists':'keyfind'
			   (App, 1, NewLibs) of
		    %% Line 2284
		    <LibInfo = {_6,NewVsn,_7}>
			when let <_8> =
			      call 'erlang':'=:='
				  (_6, App)
			  in  let <_9> =
				  call 'erlang':'=/='
				      (NewVsn, Vsn)
			      in  call 'erlang':'and'
				      (_8, _9) ->
			let <_2> =
			    apply %% Line 2285
				  'get_new_libs'/2
				(%% Line 2285
				 CurrentLibs, %% Line 2285
					      NewLibs)
			in  %% Line 2285
			    [LibInfo|_2]
		    %% Line 2286
		    <_10> when 'true' ->
			%% Line 2287
			apply 'get_new_libs'/2
			    (CurrentLibs, NewLibs)
		  end
	      %% Line 2289
	      <[],_11> when 'true' ->
		  %% Line 2290
		  []
	      ( <_5,_4> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_5,_4})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'get_new_libs',2}}] )
      -| [{'function',{'get_new_libs',2}}] )
'get_releases_with_status'/3 =
    %% Line 2295
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <[],_6,Acc> when 'true' ->
		  %% Line 2296
		  Acc
	      %% Line 2297
	      <[Head = {_7,_8,_9,ReleaseStatus}|Tail],%% Line 2298
						      Status,%% Line 2298
							     Acc>
		  when %% Line 2298
		    call 'erlang':'=='
			(ReleaseStatus,
			 Status) ->
		  %% Line 2299
		  apply 'get_releases_with_status'/3
		      (Tail, Status, [Head|Acc])
	      %% Line 2300
	      <[_10|Tail],Status,Acc> when 'true' ->
		  %% Line 2301
		  apply 'get_releases_with_status'/3
		      (Tail, Status, Acc)
	      ( <_5,_4,_3> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_5,_4,_3})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'get_releases_with_status',3}}] )
      -| [{'function',{'get_releases_with_status',3}}] )
'module_info'/0 =
    ( fun () ->
	  call 'erlang':'get_module_info'
	      ('release_handler')
      -| [{'function',{'module_info',0}}] )
'module_info'/1 =
    ( fun (_0) ->
	  call 'erlang':'get_module_info'
	      ('release_handler', ( _0
				    -| [{'function',{'module_info',1}}] ))
      -| [{'function',{'module_info',1}}] )
end